// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WorldPointInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  /// <summary>Holder for reflection information generated from WorldPointInfo.proto</summary>
  public static partial class WorldPointInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for WorldPointInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorldPointInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRXb3JsZFBvaW50SW5mby5wcm90bxIIcHJvdG9idWYiwQQKCUJ1aWxkSW5m",
            "bxIQCghvd25lclVpZBgBIAEoCRIMCgR1dWlkGAIgASgDEg8KB2J1aWxkSWQY",
            "AyABKAUSDQoFbGV2ZWwYBCABKAUSEgoKYnVpbGRTdGF0ZRgFIAEoBRISCgpx",
            "dWV1ZVN0YXRlGAYgASgFEhIKCmFsbGlhbmNlSWQYByABKAkSFQoNdXBkYXRl",
            "RW5kVGltZRgIIAEoBRIXCg91cGRhdGVTdGFydFRpbWUYCSABKAUSEgoKbGFz",
            "dEhwVGltZRgKIAEoBRIWCg5wcm90ZWN0RW5kVGltZRgLIAEoBRIOCgZpbnNp",
            "ZGUYDCABKAUSEQoJY3VycmVudEhwGA0gASgFEgwKBG5hbWUYDiABKAkSDgoG",
            "YWxBYmJyGA8gASgJEhcKD2xhc3RDb2xsZWN0VGltZRgQIAEoBRIXCg91bmF2",
            "YWlsYWJsZVRpbWUYESABKAUSGAoQbW9udGhDYXJkRW5kVGltZRgSIAEoBRIT",
            "CgtxdWV1ZUl0ZW1JZBgTIAEoBRIWCg5xdWV1ZVN0YXJ0VGltZRgUIAEoBRIX",
            "Cg9xdWV1ZVVwZGF0ZVRpbWUYFSABKAUSGAoQZGVzdHJveVN0YXJ0VGltZRgW",
            "IAEoBRIdCgVza2lucxgXIAMoCzIOLnByb3RvYnVmLlNraW4SEwoLZmlyZUVu",
            "ZFRpbWUYGCABKAUSEgoKcG9zaXRpb25JZBgZIAEoCRInCgZicmVha3MYGiAD",
            "KAsyFy5wcm90b2J1Zi5CdWlsZGluZ0JyZWFrIjMKDUJ1aWxkaW5nQnJlYWsS",
            "DwoHYnJlYWtJZBgBIAEoBRIRCglkaXJlY3Rpb24YAiABKAUidAoIUm9hZElu",
            "Zm8SEAoIb3duZXJVaWQYASABKAkSDAoEdXVpZBgCIAEoAxIRCglyb2FkU3Rh",
            "dGUYAyABKAUSDgoGaW5zaWRlGAQgASgFEhEKCWN1cnJlbnRIcBgFIAEoBRIS",
            "CgphbGxpYW5jZUlkGAYgASgJIloKE0NvbGxlY3RSZXNvdXJjZUluZm8SFAoM",
            "cmVzb3VyY2VUeXBlGAEgASgFEg0KBWxldmVsGAIgASgFEgwKBHR5cGUYAyAB",
            "KAUSEAoIYXR0YWNoSWQYBCABKAUiRQoMUmVzb3VyY2VJbmZvEhIKCnJlc291",
            "cmNlSWQYASABKAUSDQoFc3RhdGUYAiABKAUSEgoKZ2F0aGVyVXVpZBgDIAEo",
            "AyJDChBFeHBsb3JlUG9pbnRJbmZvEhAKCG93bmVyVWlkGAEgASgJEgwKBHV1",
            "aWQYAiABKAMSDwoHZXZlbnRJZBgDIAEoCSJCCg9TYW1wbGVQb2ludEluZm8S",
            "EAoIb3duZXJVaWQYASABKAkSDAoEdXVpZBgCIAEoAxIPCgdldmVudElkGAMg",
            "ASgJIlQKEEdhcmJhZ2VQb2ludEluZm8SEAoIb3duZXJVaWQYASABKAkSDAoE",
            "dXVpZBgCIAEoAxIPCgdldmVudElkGAMgASgJEg8KB2VuZFRpbWUYBCABKAMi",
            "5wEKFUFsbGlhbmNlQ2l0eVBvaW50SW5mbxIOCgZjaXR5SWQYASABKAUSEAoI",
            "b3BlblRpbWUYAiABKAUSDQoFc3RhdGUYAyABKAUSEwoLcHJvdGVjdFRpbWUY",
            "BCABKAUSDgoGYWxBYmJyGAUgASgJEhIKCmFsbGlhbmNlSWQYByABKAkSEgoK",
            "ZHVyYWJpbGl0eRgIIAEoBRIaChJsYXN0RHVyYWJpbGl0eVRpbWUYCSABKAUS",
            "DgoGYWxOYW1lGAogASgJEhIKCmdpdmVVcFRpbWUYCyABKAUSEAoIY2l0eU5h",
            "bWUYDCABKAkiWgoRQ29sbGVjdFJld2FyZEluZm8SEAoIb3duZXJVaWQYASAB",
            "KAkSDAoEdXVpZBgCIAEoAxISCgpleHBpcmVUaW1lGAMgASgDEhEKCWNvbnRl",
            "bnRJZBgEIAEoBSLFAQoZQWxsaWFuY2VCdWlsZGluZ1BvaW50SW5mbxIMCgR1",
            "dWlkGAEgASgDEg8KB2J1aWxkSWQYAiABKAUSDQoFbGV2ZWwYAyABKAUSDQoF",
            "c3RhdGUYBCABKAUSDgoGYWxBYmJyGAUgASgJEhIKCmFsbGlhbmNlSWQYBiAB",
            "KAkSEgoKZHVyYWJpbGl0eRgHIAEoBRIaChJsYXN0RHVyYWJpbGl0eVRpbWUY",
            "CCABKAMSFwoPZHVyYWJpbGl0eVNwZWVkGAkgASgCImQKEE5wY0NpdHlQb2lu",
            "dEluZm8SDAoEdXVpZBgBIAEoAxINCgVucGNJZBgCIAEoBRISCgpsYXN0SHBU",
            "aW1lGAMgASgFEhEKCWN1cnJlbnRIcBgEIAEoBRIMCgRuYW1lGAUgASgJInEK",
            "EldvcmxkUnVpblBvaW50SW5mbxIMCgR1dWlkGAEgASgDEgwKBHNpemUYAiAB",
            "KAUSDAoEdHlwZRgDIAEoBRINCgVwYXJhbRgEIAEoCRIRCglzdGFydFRpbWUY",
            "BSABKAUSDwoHZW5kVGltZRgGIAEoBSI0CgRTa2luEg4KBnNraW5JZBgBIAEo",
            "BRIMCgR0eXBlGAIgASgFEg4KBnNraW5FVBgDIAEoAyLgAwoOV29ybGRQb2lu",
            "dEluZm8SCgoCaWQYASABKAUSEQoJcG9pbnRUeXBlGAIgASgFEiYKCWJ1aWxk",
            "SW5mbxgDIAEoCzITLnByb3RvYnVmLkJ1aWxkSW5mbxIkCghyb2FkSW5mbxgE",
            "IAEoCzISLnByb3RvYnVmLlJvYWRJbmZvEjoKE2NvbGxlY3RSZXNvdXJjZUlu",
            "Zm8YBSABKAsyHS5wcm90b2J1Zi5Db2xsZWN0UmVzb3VyY2VJbmZvEiwKDHJl",
            "c291cmNlSW5mbxgGIAEoCzIWLnByb3RvYnVmLlJlc291cmNlSW5mbxI0ChBl",
            "eHBsb3JlUG9pbnRJbmZvGAcgASgLMhoucHJvdG9idWYuRXhwbG9yZVBvaW50",
            "SW5mbxIyCg9zYW1wbGVQb2ludEluZm8YCCABKAsyGS5wcm90b2J1Zi5TYW1w",
            "bGVQb2ludEluZm8SNAoQZ2FyYmFnZVBvaW50SW5mbxgJIAEoCzIaLnByb3Rv",
            "YnVmLkdhcmJhZ2VQb2ludEluZm8SDAoEdXVpZBhkIAEoAxIRCglleHRyYUlu",
            "Zm8YZSABKAwSEAoIc2VydmVySWQYZiABKAUSEwoLc3JjU2VydmVySWQYZyAB",
            "KAUSDwoHd29ybGRJZBhoIAEoBSI9Cg1MYW5kUG9pbnRJbmZvEgoKAmlkGAEg",
            "ASgFEg4KBmxhbmRJZBgCIAEoBRIQCghzZXJ2ZXJJZBgDIAEoBSLUAQoKRGVz",
            "ZXJ0SW5mbxIKCgJpZBgBIAEoBRIMCgR1dWlkGAIgASgDEhAKCGRlc2VydElk",
            "GAMgASgFEhYKDnByb3RlY3RFbmRUaW1lGAQgASgFEgsKA3VpZBgFIAEoCRIS",
            "CgphbGxpYW5jZUlkGAYgASgJEhAKCHNlcnZlcklkGAcgASgFEhUKDWhhc0Fz",
            "c2lzdGFuY2UYCCABKAgSDgoGbWluZUlkGAkgASgFEhMKC293bmVyU2VydmVy",
            "GAogASgFEhMKC29yaURlc2VydElkGAsgASgFIs4BChdEcmFnb25CdWlsZGlu",
            "Z1BvaW50SW5mbxIMCgR1dWlkGAEgASgDEg8KB2J1aWxkSWQYAiABKAUSDQoF",
            "c3RhdGUYAyABKAUSDgoGYWxBYmJyGAQgASgJEhIKCmFsbGlhbmNlSWQYBSAB",
            "KAkSEgoKb2NjdXB5VGltZRgGIAEoAxIQCghvcGVuVGltZRgHIAEoAxIRCglz",
            "dGFydFRpbWUYCCABKAMSEwoLcHJvdGVjdFRpbWUYCSABKAMSEwoLcmV3YXJk",
            "Q291bnQYCiABKAUiSwoYRHJhZ29uU2VjcmV0S2V5UG9pbnRJbmZvEgwKBHV1",
            "aWQYASABKAMSEgoKY3JlYXRlVGltZRgCIAEoAxINCgVpbmRleBgDIAEoBSKD",
            "AQoZQ3Jvc3NUaHJvbmVCdWlsZFBvaW50SW5mbxIMCgR1dWlkGAEgASgDEg8K",
            "B2J1aWxkSWQYAiABKAUSDgoGYWxBYmJyGAMgASgJEhIKCmFsbGlhbmNlSWQY",
            "BCABKAkSEAoIb3BlblRpbWUYBSABKAMSEQoJc3RhcnRUaW1lGAYgASgDQh0K",
            "G25ldC5pbTMwLmFwcy5tb2RlbC5wcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BuildInfo), global::Protobuf.BuildInfo.Parser, new[]{ "OwnerUid", "Uuid", "BuildId", "Level", "BuildState", "QueueState", "AllianceId", "UpdateEndTime", "UpdateStartTime", "LastHpTime", "ProtectEndTime", "Inside", "CurrentHp", "Name", "AlAbbr", "LastCollectTime", "UnavailableTime", "MonthCardEndTime", "QueueItemId", "QueueStartTime", "QueueUpdateTime", "DestroyStartTime", "Skins", "FireEndTime", "PositionId", "Breaks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BuildingBreak), global::Protobuf.BuildingBreak.Parser, new[]{ "BreakId", "Direction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.RoadInfo), global::Protobuf.RoadInfo.Parser, new[]{ "OwnerUid", "Uuid", "RoadState", "Inside", "CurrentHp", "AllianceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.CollectResourceInfo), global::Protobuf.CollectResourceInfo.Parser, new[]{ "ResourceType", "Level", "Type", "AttachId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ResourceInfo), global::Protobuf.ResourceInfo.Parser, new[]{ "ResourceId", "State", "GatherUuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ExplorePointInfo), global::Protobuf.ExplorePointInfo.Parser, new[]{ "OwnerUid", "Uuid", "EventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.SamplePointInfo), global::Protobuf.SamplePointInfo.Parser, new[]{ "OwnerUid", "Uuid", "EventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.GarbagePointInfo), global::Protobuf.GarbagePointInfo.Parser, new[]{ "OwnerUid", "Uuid", "EventId", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.AllianceCityPointInfo), global::Protobuf.AllianceCityPointInfo.Parser, new[]{ "CityId", "OpenTime", "State", "ProtectTime", "AlAbbr", "AllianceId", "Durability", "LastDurabilityTime", "AlName", "GiveUpTime", "CityName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.CollectRewardInfo), global::Protobuf.CollectRewardInfo.Parser, new[]{ "OwnerUid", "Uuid", "ExpireTime", "ContentId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.AllianceBuildingPointInfo), global::Protobuf.AllianceBuildingPointInfo.Parser, new[]{ "Uuid", "BuildId", "Level", "State", "AlAbbr", "AllianceId", "Durability", "LastDurabilityTime", "DurabilitySpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.NpcCityPointInfo), global::Protobuf.NpcCityPointInfo.Parser, new[]{ "Uuid", "NpcId", "LastHpTime", "CurrentHp", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.WorldRuinPointInfo), global::Protobuf.WorldRuinPointInfo.Parser, new[]{ "Uuid", "Size", "Type", "Param", "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Skin), global::Protobuf.Skin.Parser, new[]{ "SkinId", "Type", "SkinET" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.WorldPointInfo), global::Protobuf.WorldPointInfo.Parser, new[]{ "Id", "PointType", "BuildInfo", "RoadInfo", "CollectResourceInfo", "ResourceInfo", "ExplorePointInfo", "SamplePointInfo", "GarbagePointInfo", "Uuid", "ExtraInfo", "ServerId", "SrcServerId", "WorldId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.LandPointInfo), global::Protobuf.LandPointInfo.Parser, new[]{ "Id", "LandId", "ServerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.DesertInfo), global::Protobuf.DesertInfo.Parser, new[]{ "Id", "Uuid", "DesertId", "ProtectEndTime", "Uid", "AllianceId", "ServerId", "HasAssistance", "MineId", "OwnerServer", "OriDesertId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.DragonBuildingPointInfo), global::Protobuf.DragonBuildingPointInfo.Parser, new[]{ "Uuid", "BuildId", "State", "AlAbbr", "AllianceId", "OccupyTime", "OpenTime", "StartTime", "ProtectTime", "RewardCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.DragonSecretKeyPointInfo), global::Protobuf.DragonSecretKeyPointInfo.Parser, new[]{ "Uuid", "CreateTime", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.CrossThroneBuildPointInfo), global::Protobuf.CrossThroneBuildPointInfo.Parser, new[]{ "Uuid", "BuildId", "AlAbbr", "AllianceId", "OpenTime", "StartTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BuildInfo : pb::IMessage<BuildInfo> {
    private static readonly pb::MessageParser<BuildInfo> _parser = new pb::MessageParser<BuildInfo>(() => new BuildInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildInfo(BuildInfo other) : this() {
      ownerUid_ = other.ownerUid_;
      uuid_ = other.uuid_;
      buildId_ = other.buildId_;
      level_ = other.level_;
      buildState_ = other.buildState_;
      queueState_ = other.queueState_;
      allianceId_ = other.allianceId_;
      updateEndTime_ = other.updateEndTime_;
      updateStartTime_ = other.updateStartTime_;
      lastHpTime_ = other.lastHpTime_;
      protectEndTime_ = other.protectEndTime_;
      inside_ = other.inside_;
      currentHp_ = other.currentHp_;
      name_ = other.name_;
      alAbbr_ = other.alAbbr_;
      lastCollectTime_ = other.lastCollectTime_;
      unavailableTime_ = other.unavailableTime_;
      monthCardEndTime_ = other.monthCardEndTime_;
      queueItemId_ = other.queueItemId_;
      queueStartTime_ = other.queueStartTime_;
      queueUpdateTime_ = other.queueUpdateTime_;
      destroyStartTime_ = other.destroyStartTime_;
      skins_ = other.skins_.Clone();
      fireEndTime_ = other.fireEndTime_;
      positionId_ = other.positionId_;
      breaks_ = other.breaks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildInfo Clone() {
      return new BuildInfo(this);
    }

    /// <summary>Field number for the "ownerUid" field.</summary>
    public const int OwnerUidFieldNumber = 1;
    private string ownerUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUid {
      get { return ownerUid_; }
      set {
        ownerUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 3;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "buildState" field.</summary>
    public const int BuildStateFieldNumber = 5;
    private int buildState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildState {
      get { return buildState_; }
      set {
        buildState_ = value;
      }
    }

    /// <summary>Field number for the "queueState" field.</summary>
    public const int QueueStateFieldNumber = 6;
    private int queueState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QueueState {
      get { return queueState_; }
      set {
        queueState_ = value;
      }
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 7;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateEndTime" field.</summary>
    public const int UpdateEndTimeFieldNumber = 8;
    private int updateEndTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdateEndTime {
      get { return updateEndTime_; }
      set {
        updateEndTime_ = value;
      }
    }

    /// <summary>Field number for the "updateStartTime" field.</summary>
    public const int UpdateStartTimeFieldNumber = 9;
    private int updateStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdateStartTime {
      get { return updateStartTime_; }
      set {
        updateStartTime_ = value;
      }
    }

    /// <summary>Field number for the "lastHpTime" field.</summary>
    public const int LastHpTimeFieldNumber = 10;
    private int lastHpTime_;
    /// <summary>
    /// 上次回血时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastHpTime {
      get { return lastHpTime_; }
      set {
        lastHpTime_ = value;
      }
    }

    /// <summary>Field number for the "protectEndTime" field.</summary>
    public const int ProtectEndTimeFieldNumber = 11;
    private int protectEndTime_;
    /// <summary>
    /// 保护结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtectEndTime {
      get { return protectEndTime_; }
      set {
        protectEndTime_ = value;
      }
    }

    /// <summary>Field number for the "inside" field.</summary>
    public const int InsideFieldNumber = 12;
    private int inside_;
    /// <summary>
    /// 是否城内建筑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inside {
      get { return inside_; }
      set {
        inside_ = value;
      }
    }

    /// <summary>Field number for the "currentHp" field.</summary>
    public const int CurrentHpFieldNumber = 13;
    private int currentHp_;
    /// <summary>
    /// 当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentHp {
      get { return currentHp_; }
      set {
        currentHp_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    /// 玩家名称(仅大本显示)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alAbbr" field.</summary>
    public const int AlAbbrFieldNumber = 15;
    private string alAbbr_ = "";
    /// <summary>
    /// 联盟简称(仅大本显示)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlAbbr {
      get { return alAbbr_; }
      set {
        alAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastCollectTime" field.</summary>
    public const int LastCollectTimeFieldNumber = 16;
    private int lastCollectTime_;
    /// <summary>
    /// 资源站上次采集时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastCollectTime {
      get { return lastCollectTime_; }
      set {
        lastCollectTime_ = value;
      }
    }

    /// <summary>Field number for the "unavailableTime" field.</summary>
    public const int UnavailableTimeFieldNumber = 17;
    private int unavailableTime_;
    /// <summary>
    /// 资源站不可用时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnavailableTime {
      get { return unavailableTime_; }
      set {
        unavailableTime_ = value;
      }
    }

    /// <summary>Field number for the "monthCardEndTime" field.</summary>
    public const int MonthCardEndTimeFieldNumber = 18;
    private int monthCardEndTime_;
    /// <summary>
    ///月卡结束时间 单位s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonthCardEndTime {
      get { return monthCardEndTime_; }
      set {
        monthCardEndTime_ = value;
      }
    }

    /// <summary>Field number for the "queueItemId" field.</summary>
    public const int QueueItemIdFieldNumber = 19;
    private int queueItemId_;
    /// <summary>
    /// 队列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QueueItemId {
      get { return queueItemId_; }
      set {
        queueItemId_ = value;
      }
    }

    /// <summary>Field number for the "queueStartTime" field.</summary>
    public const int QueueStartTimeFieldNumber = 20;
    private int queueStartTime_;
    /// <summary>
    /// 队列开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QueueStartTime {
      get { return queueStartTime_; }
      set {
        queueStartTime_ = value;
      }
    }

    /// <summary>Field number for the "queueUpdateTime" field.</summary>
    public const int QueueUpdateTimeFieldNumber = 21;
    private int queueUpdateTime_;
    /// <summary>
    /// 队列结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QueueUpdateTime {
      get { return queueUpdateTime_; }
      set {
        queueUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "destroyStartTime" field.</summary>
    public const int DestroyStartTimeFieldNumber = 22;
    private int destroyStartTime_;
    /// <summary>
    /// 废墟开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestroyStartTime {
      get { return destroyStartTime_; }
      set {
        destroyStartTime_ = value;
      }
    }

    /// <summary>Field number for the "skins" field.</summary>
    public const int SkinsFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Protobuf.Skin> _repeated_skins_codec
        = pb::FieldCodec.ForMessage(186, global::Protobuf.Skin.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Skin> skins_ = new pbc::RepeatedField<global::Protobuf.Skin>();
    /// <summary>
    ///皮肤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Skin> Skins {
      get { return skins_; }
    }

    /// <summary>Field number for the "fireEndTime" field.</summary>
    public const int FireEndTimeFieldNumber = 24;
    private int fireEndTime_;
    /// <summary>
    /// 着火结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireEndTime {
      get { return fireEndTime_; }
      set {
        fireEndTime_ = value;
      }
    }

    /// <summary>Field number for the "positionId" field.</summary>
    public const int PositionIdFieldNumber = 25;
    private string positionId_ = "";
    /// <summary>
    ///王座官职id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PositionId {
      get { return positionId_; }
      set {
        positionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breaks" field.</summary>
    public const int BreaksFieldNumber = 26;
    private static readonly pb::FieldCodec<global::Protobuf.BuildingBreak> _repeated_breaks_codec
        = pb::FieldCodec.ForMessage(210, global::Protobuf.BuildingBreak.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.BuildingBreak> breaks_ = new pbc::RepeatedField<global::Protobuf.BuildingBreak>();
    /// <summary>
    ///建筑突破
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.BuildingBreak> Breaks {
      get { return breaks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerUid != other.OwnerUid) return false;
      if (Uuid != other.Uuid) return false;
      if (BuildId != other.BuildId) return false;
      if (Level != other.Level) return false;
      if (BuildState != other.BuildState) return false;
      if (QueueState != other.QueueState) return false;
      if (AllianceId != other.AllianceId) return false;
      if (UpdateEndTime != other.UpdateEndTime) return false;
      if (UpdateStartTime != other.UpdateStartTime) return false;
      if (LastHpTime != other.LastHpTime) return false;
      if (ProtectEndTime != other.ProtectEndTime) return false;
      if (Inside != other.Inside) return false;
      if (CurrentHp != other.CurrentHp) return false;
      if (Name != other.Name) return false;
      if (AlAbbr != other.AlAbbr) return false;
      if (LastCollectTime != other.LastCollectTime) return false;
      if (UnavailableTime != other.UnavailableTime) return false;
      if (MonthCardEndTime != other.MonthCardEndTime) return false;
      if (QueueItemId != other.QueueItemId) return false;
      if (QueueStartTime != other.QueueStartTime) return false;
      if (QueueUpdateTime != other.QueueUpdateTime) return false;
      if (DestroyStartTime != other.DestroyStartTime) return false;
      if(!skins_.Equals(other.skins_)) return false;
      if (FireEndTime != other.FireEndTime) return false;
      if (PositionId != other.PositionId) return false;
      if(!breaks_.Equals(other.breaks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerUid.Length != 0) hash ^= OwnerUid.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BuildState != 0) hash ^= BuildState.GetHashCode();
      if (QueueState != 0) hash ^= QueueState.GetHashCode();
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (UpdateEndTime != 0) hash ^= UpdateEndTime.GetHashCode();
      if (UpdateStartTime != 0) hash ^= UpdateStartTime.GetHashCode();
      if (LastHpTime != 0) hash ^= LastHpTime.GetHashCode();
      if (ProtectEndTime != 0) hash ^= ProtectEndTime.GetHashCode();
      if (Inside != 0) hash ^= Inside.GetHashCode();
      if (CurrentHp != 0) hash ^= CurrentHp.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AlAbbr.Length != 0) hash ^= AlAbbr.GetHashCode();
      if (LastCollectTime != 0) hash ^= LastCollectTime.GetHashCode();
      if (UnavailableTime != 0) hash ^= UnavailableTime.GetHashCode();
      if (MonthCardEndTime != 0) hash ^= MonthCardEndTime.GetHashCode();
      if (QueueItemId != 0) hash ^= QueueItemId.GetHashCode();
      if (QueueStartTime != 0) hash ^= QueueStartTime.GetHashCode();
      if (QueueUpdateTime != 0) hash ^= QueueUpdateTime.GetHashCode();
      if (DestroyStartTime != 0) hash ^= DestroyStartTime.GetHashCode();
      hash ^= skins_.GetHashCode();
      if (FireEndTime != 0) hash ^= FireEndTime.GetHashCode();
      if (PositionId.Length != 0) hash ^= PositionId.GetHashCode();
      hash ^= breaks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OwnerUid);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (BuildId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuildId);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (BuildState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BuildState);
      }
      if (QueueState != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(QueueState);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AllianceId);
      }
      if (UpdateEndTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UpdateEndTime);
      }
      if (UpdateStartTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UpdateStartTime);
      }
      if (LastHpTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LastHpTime);
      }
      if (ProtectEndTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ProtectEndTime);
      }
      if (Inside != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Inside);
      }
      if (CurrentHp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentHp);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (AlAbbr.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(AlAbbr);
      }
      if (LastCollectTime != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(LastCollectTime);
      }
      if (UnavailableTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(UnavailableTime);
      }
      if (MonthCardEndTime != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MonthCardEndTime);
      }
      if (QueueItemId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(QueueItemId);
      }
      if (QueueStartTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(QueueStartTime);
      }
      if (QueueUpdateTime != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(QueueUpdateTime);
      }
      if (DestroyStartTime != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(DestroyStartTime);
      }
      skins_.WriteTo(output, _repeated_skins_codec);
      if (FireEndTime != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(FireEndTime);
      }
      if (PositionId.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(PositionId);
      }
      breaks_.WriteTo(output, _repeated_breaks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUid);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BuildState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildState);
      }
      if (QueueState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QueueState);
      }
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (UpdateEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdateEndTime);
      }
      if (UpdateStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdateStartTime);
      }
      if (LastHpTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastHpTime);
      }
      if (ProtectEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtectEndTime);
      }
      if (Inside != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inside);
      }
      if (CurrentHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHp);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AlAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlAbbr);
      }
      if (LastCollectTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastCollectTime);
      }
      if (UnavailableTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnavailableTime);
      }
      if (MonthCardEndTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MonthCardEndTime);
      }
      if (QueueItemId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QueueItemId);
      }
      if (QueueStartTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QueueStartTime);
      }
      if (QueueUpdateTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QueueUpdateTime);
      }
      if (DestroyStartTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DestroyStartTime);
      }
      size += skins_.CalculateSize(_repeated_skins_codec);
      if (FireEndTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireEndTime);
      }
      if (PositionId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionId);
      }
      size += breaks_.CalculateSize(_repeated_breaks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildInfo other) {
      if (other == null) {
        return;
      }
      if (other.OwnerUid.Length != 0) {
        OwnerUid = other.OwnerUid;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BuildState != 0) {
        BuildState = other.BuildState;
      }
      if (other.QueueState != 0) {
        QueueState = other.QueueState;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.UpdateEndTime != 0) {
        UpdateEndTime = other.UpdateEndTime;
      }
      if (other.UpdateStartTime != 0) {
        UpdateStartTime = other.UpdateStartTime;
      }
      if (other.LastHpTime != 0) {
        LastHpTime = other.LastHpTime;
      }
      if (other.ProtectEndTime != 0) {
        ProtectEndTime = other.ProtectEndTime;
      }
      if (other.Inside != 0) {
        Inside = other.Inside;
      }
      if (other.CurrentHp != 0) {
        CurrentHp = other.CurrentHp;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AlAbbr.Length != 0) {
        AlAbbr = other.AlAbbr;
      }
      if (other.LastCollectTime != 0) {
        LastCollectTime = other.LastCollectTime;
      }
      if (other.UnavailableTime != 0) {
        UnavailableTime = other.UnavailableTime;
      }
      if (other.MonthCardEndTime != 0) {
        MonthCardEndTime = other.MonthCardEndTime;
      }
      if (other.QueueItemId != 0) {
        QueueItemId = other.QueueItemId;
      }
      if (other.QueueStartTime != 0) {
        QueueStartTime = other.QueueStartTime;
      }
      if (other.QueueUpdateTime != 0) {
        QueueUpdateTime = other.QueueUpdateTime;
      }
      if (other.DestroyStartTime != 0) {
        DestroyStartTime = other.DestroyStartTime;
      }
      skins_.Add(other.skins_);
      if (other.FireEndTime != 0) {
        FireEndTime = other.FireEndTime;
      }
      if (other.PositionId.Length != 0) {
        PositionId = other.PositionId;
      }
      breaks_.Add(other.breaks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerUid = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 24: {
            BuildId = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            BuildState = input.ReadInt32();
            break;
          }
          case 48: {
            QueueState = input.ReadInt32();
            break;
          }
          case 58: {
            AllianceId = input.ReadString();
            break;
          }
          case 64: {
            UpdateEndTime = input.ReadInt32();
            break;
          }
          case 72: {
            UpdateStartTime = input.ReadInt32();
            break;
          }
          case 80: {
            LastHpTime = input.ReadInt32();
            break;
          }
          case 88: {
            ProtectEndTime = input.ReadInt32();
            break;
          }
          case 96: {
            Inside = input.ReadInt32();
            break;
          }
          case 104: {
            CurrentHp = input.ReadInt32();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            AlAbbr = input.ReadString();
            break;
          }
          case 128: {
            LastCollectTime = input.ReadInt32();
            break;
          }
          case 136: {
            UnavailableTime = input.ReadInt32();
            break;
          }
          case 144: {
            MonthCardEndTime = input.ReadInt32();
            break;
          }
          case 152: {
            QueueItemId = input.ReadInt32();
            break;
          }
          case 160: {
            QueueStartTime = input.ReadInt32();
            break;
          }
          case 168: {
            QueueUpdateTime = input.ReadInt32();
            break;
          }
          case 176: {
            DestroyStartTime = input.ReadInt32();
            break;
          }
          case 186: {
            skins_.AddEntriesFrom(input, _repeated_skins_codec);
            break;
          }
          case 192: {
            FireEndTime = input.ReadInt32();
            break;
          }
          case 202: {
            PositionId = input.ReadString();
            break;
          }
          case 210: {
            breaks_.AddEntriesFrom(input, _repeated_breaks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingBreak : pb::IMessage<BuildingBreak> {
    private static readonly pb::MessageParser<BuildingBreak> _parser = new pb::MessageParser<BuildingBreak>(() => new BuildingBreak());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingBreak> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingBreak() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingBreak(BuildingBreak other) : this() {
      breakId_ = other.breakId_;
      direction_ = other.direction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingBreak Clone() {
      return new BuildingBreak(this);
    }

    /// <summary>Field number for the "breakId" field.</summary>
    public const int BreakIdFieldNumber = 1;
    private int breakId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakId {
      get { return breakId_; }
      set {
        breakId_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private int direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingBreak);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingBreak other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BreakId != other.BreakId) return false;
      if (Direction != other.Direction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BreakId != 0) hash ^= BreakId.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BreakId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BreakId);
      }
      if (Direction != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BreakId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakId);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingBreak other) {
      if (other == null) {
        return;
      }
      if (other.BreakId != 0) {
        BreakId = other.BreakId;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BreakId = input.ReadInt32();
            break;
          }
          case 16: {
            Direction = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoadInfo : pb::IMessage<RoadInfo> {
    private static readonly pb::MessageParser<RoadInfo> _parser = new pb::MessageParser<RoadInfo>(() => new RoadInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadInfo(RoadInfo other) : this() {
      ownerUid_ = other.ownerUid_;
      uuid_ = other.uuid_;
      roadState_ = other.roadState_;
      inside_ = other.inside_;
      currentHp_ = other.currentHp_;
      allianceId_ = other.allianceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadInfo Clone() {
      return new RoadInfo(this);
    }

    /// <summary>Field number for the "ownerUid" field.</summary>
    public const int OwnerUidFieldNumber = 1;
    private string ownerUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUid {
      get { return ownerUid_; }
      set {
        ownerUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "roadState" field.</summary>
    public const int RoadStateFieldNumber = 3;
    private int roadState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadState {
      get { return roadState_; }
      set {
        roadState_ = value;
      }
    }

    /// <summary>Field number for the "inside" field.</summary>
    public const int InsideFieldNumber = 4;
    private int inside_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inside {
      get { return inside_; }
      set {
        inside_ = value;
      }
    }

    /// <summary>Field number for the "currentHp" field.</summary>
    public const int CurrentHpFieldNumber = 5;
    private int currentHp_;
    /// <summary>
    /// 当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentHp {
      get { return currentHp_; }
      set {
        currentHp_ = value;
      }
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 6;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerUid != other.OwnerUid) return false;
      if (Uuid != other.Uuid) return false;
      if (RoadState != other.RoadState) return false;
      if (Inside != other.Inside) return false;
      if (CurrentHp != other.CurrentHp) return false;
      if (AllianceId != other.AllianceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerUid.Length != 0) hash ^= OwnerUid.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (RoadState != 0) hash ^= RoadState.GetHashCode();
      if (Inside != 0) hash ^= Inside.GetHashCode();
      if (CurrentHp != 0) hash ^= CurrentHp.GetHashCode();
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OwnerUid);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (RoadState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoadState);
      }
      if (Inside != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Inside);
      }
      if (CurrentHp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentHp);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AllianceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUid);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (RoadState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadState);
      }
      if (Inside != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inside);
      }
      if (CurrentHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHp);
      }
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoadInfo other) {
      if (other == null) {
        return;
      }
      if (other.OwnerUid.Length != 0) {
        OwnerUid = other.OwnerUid;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.RoadState != 0) {
        RoadState = other.RoadState;
      }
      if (other.Inside != 0) {
        Inside = other.Inside;
      }
      if (other.CurrentHp != 0) {
        CurrentHp = other.CurrentHp;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerUid = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 24: {
            RoadState = input.ReadInt32();
            break;
          }
          case 32: {
            Inside = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentHp = input.ReadInt32();
            break;
          }
          case 50: {
            AllianceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollectResourceInfo : pb::IMessage<CollectResourceInfo> {
    private static readonly pb::MessageParser<CollectResourceInfo> _parser = new pb::MessageParser<CollectResourceInfo>(() => new CollectResourceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectResourceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectResourceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectResourceInfo(CollectResourceInfo other) : this() {
      resourceType_ = other.resourceType_;
      level_ = other.level_;
      type_ = other.type_;
      attachId_ = other.attachId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectResourceInfo Clone() {
      return new CollectResourceInfo(this);
    }

    /// <summary>Field number for the "resourceType" field.</summary>
    public const int ResourceTypeFieldNumber = 1;
    private int resourceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResourceType {
      get { return resourceType_; }
      set {
        resourceType_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "attachId" field.</summary>
    public const int AttachIdFieldNumber = 4;
    private int attachId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttachId {
      get { return attachId_; }
      set {
        attachId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectResourceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectResourceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceType != other.ResourceType) return false;
      if (Level != other.Level) return false;
      if (Type != other.Type) return false;
      if (AttachId != other.AttachId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceType != 0) hash ^= ResourceType.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (AttachId != 0) hash ^= AttachId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResourceType);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (AttachId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttachId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResourceType);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (AttachId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectResourceInfo other) {
      if (other == null) {
        return;
      }
      if (other.ResourceType != 0) {
        ResourceType = other.ResourceType;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.AttachId != 0) {
        AttachId = other.AttachId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResourceType = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            AttachId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceInfo : pb::IMessage<ResourceInfo> {
    private static readonly pb::MessageParser<ResourceInfo> _parser = new pb::MessageParser<ResourceInfo>(() => new ResourceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceInfo(ResourceInfo other) : this() {
      resourceId_ = other.resourceId_;
      state_ = other.state_;
      gatherUuid_ = other.gatherUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceInfo Clone() {
      return new ResourceInfo(this);
    }

    /// <summary>Field number for the "resourceId" field.</summary>
    public const int ResourceIdFieldNumber = 1;
    private int resourceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResourceId {
      get { return resourceId_; }
      set {
        resourceId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "gatherUuid" field.</summary>
    public const int GatherUuidFieldNumber = 3;
    private long gatherUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GatherUuid {
      get { return gatherUuid_; }
      set {
        gatherUuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceId != other.ResourceId) return false;
      if (State != other.State) return false;
      if (GatherUuid != other.GatherUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceId != 0) hash ^= ResourceId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (GatherUuid != 0L) hash ^= GatherUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResourceId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (GatherUuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GatherUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResourceId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (GatherUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GatherUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceInfo other) {
      if (other == null) {
        return;
      }
      if (other.ResourceId != 0) {
        ResourceId = other.ResourceId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.GatherUuid != 0L) {
        GatherUuid = other.GatherUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResourceId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            GatherUuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExplorePointInfo : pb::IMessage<ExplorePointInfo> {
    private static readonly pb::MessageParser<ExplorePointInfo> _parser = new pb::MessageParser<ExplorePointInfo>(() => new ExplorePointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExplorePointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorePointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorePointInfo(ExplorePointInfo other) : this() {
      ownerUid_ = other.ownerUid_;
      uuid_ = other.uuid_;
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorePointInfo Clone() {
      return new ExplorePointInfo(this);
    }

    /// <summary>Field number for the "ownerUid" field.</summary>
    public const int OwnerUidFieldNumber = 1;
    private string ownerUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUid {
      get { return ownerUid_; }
      set {
        ownerUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 3;
    private string eventId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExplorePointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExplorePointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerUid != other.OwnerUid) return false;
      if (Uuid != other.Uuid) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerUid.Length != 0) hash ^= OwnerUid.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OwnerUid);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUid);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExplorePointInfo other) {
      if (other == null) {
        return;
      }
      if (other.OwnerUid.Length != 0) {
        OwnerUid = other.OwnerUid;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerUid = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 26: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SamplePointInfo : pb::IMessage<SamplePointInfo> {
    private static readonly pb::MessageParser<SamplePointInfo> _parser = new pb::MessageParser<SamplePointInfo>(() => new SamplePointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SamplePointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamplePointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamplePointInfo(SamplePointInfo other) : this() {
      ownerUid_ = other.ownerUid_;
      uuid_ = other.uuid_;
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SamplePointInfo Clone() {
      return new SamplePointInfo(this);
    }

    /// <summary>Field number for the "ownerUid" field.</summary>
    public const int OwnerUidFieldNumber = 1;
    private string ownerUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUid {
      get { return ownerUid_; }
      set {
        ownerUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 3;
    private string eventId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SamplePointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SamplePointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerUid != other.OwnerUid) return false;
      if (Uuid != other.Uuid) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerUid.Length != 0) hash ^= OwnerUid.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OwnerUid);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUid);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SamplePointInfo other) {
      if (other == null) {
        return;
      }
      if (other.OwnerUid.Length != 0) {
        OwnerUid = other.OwnerUid;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerUid = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 26: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GarbagePointInfo : pb::IMessage<GarbagePointInfo> {
    private static readonly pb::MessageParser<GarbagePointInfo> _parser = new pb::MessageParser<GarbagePointInfo>(() => new GarbagePointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GarbagePointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GarbagePointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GarbagePointInfo(GarbagePointInfo other) : this() {
      ownerUid_ = other.ownerUid_;
      uuid_ = other.uuid_;
      eventId_ = other.eventId_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GarbagePointInfo Clone() {
      return new GarbagePointInfo(this);
    }

    /// <summary>Field number for the "ownerUid" field.</summary>
    public const int OwnerUidFieldNumber = 1;
    private string ownerUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUid {
      get { return ownerUid_; }
      set {
        ownerUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 3;
    private string eventId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GarbagePointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GarbagePointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerUid != other.OwnerUid) return false;
      if (Uuid != other.Uuid) return false;
      if (EventId != other.EventId) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerUid.Length != 0) hash ^= OwnerUid.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OwnerUid);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EventId);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUid);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GarbagePointInfo other) {
      if (other == null) {
        return;
      }
      if (other.OwnerUid.Length != 0) {
        OwnerUid = other.OwnerUid;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerUid = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 26: {
            EventId = input.ReadString();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllianceCityPointInfo : pb::IMessage<AllianceCityPointInfo> {
    private static readonly pb::MessageParser<AllianceCityPointInfo> _parser = new pb::MessageParser<AllianceCityPointInfo>(() => new AllianceCityPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllianceCityPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceCityPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceCityPointInfo(AllianceCityPointInfo other) : this() {
      cityId_ = other.cityId_;
      openTime_ = other.openTime_;
      state_ = other.state_;
      protectTime_ = other.protectTime_;
      alAbbr_ = other.alAbbr_;
      allianceId_ = other.allianceId_;
      durability_ = other.durability_;
      lastDurabilityTime_ = other.lastDurabilityTime_;
      alName_ = other.alName_;
      giveUpTime_ = other.giveUpTime_;
      cityName_ = other.cityName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceCityPointInfo Clone() {
      return new AllianceCityPointInfo(this);
    }

    /// <summary>Field number for the "cityId" field.</summary>
    public const int CityIdFieldNumber = 1;
    private int cityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 2;
    private int openTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "protectTime" field.</summary>
    public const int ProtectTimeFieldNumber = 4;
    private int protectTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtectTime {
      get { return protectTime_; }
      set {
        protectTime_ = value;
      }
    }

    /// <summary>Field number for the "alAbbr" field.</summary>
    public const int AlAbbrFieldNumber = 5;
    private string alAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlAbbr {
      get { return alAbbr_; }
      set {
        alAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 7;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "durability" field.</summary>
    public const int DurabilityFieldNumber = 8;
    private int durability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    /// <summary>Field number for the "lastDurabilityTime" field.</summary>
    public const int LastDurabilityTimeFieldNumber = 9;
    private int lastDurabilityTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastDurabilityTime {
      get { return lastDurabilityTime_; }
      set {
        lastDurabilityTime_ = value;
      }
    }

    /// <summary>Field number for the "alName" field.</summary>
    public const int AlNameFieldNumber = 10;
    private string alName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlName {
      get { return alName_; }
      set {
        alName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "giveUpTime" field.</summary>
    public const int GiveUpTimeFieldNumber = 11;
    private int giveUpTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiveUpTime {
      get { return giveUpTime_; }
      set {
        giveUpTime_ = value;
      }
    }

    /// <summary>Field number for the "cityName" field.</summary>
    public const int CityNameFieldNumber = 12;
    private string cityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllianceCityPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllianceCityPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CityId != other.CityId) return false;
      if (OpenTime != other.OpenTime) return false;
      if (State != other.State) return false;
      if (ProtectTime != other.ProtectTime) return false;
      if (AlAbbr != other.AlAbbr) return false;
      if (AllianceId != other.AllianceId) return false;
      if (Durability != other.Durability) return false;
      if (LastDurabilityTime != other.LastDurabilityTime) return false;
      if (AlName != other.AlName) return false;
      if (GiveUpTime != other.GiveUpTime) return false;
      if (CityName != other.CityName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CityId != 0) hash ^= CityId.GetHashCode();
      if (OpenTime != 0) hash ^= OpenTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (ProtectTime != 0) hash ^= ProtectTime.GetHashCode();
      if (AlAbbr.Length != 0) hash ^= AlAbbr.GetHashCode();
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (Durability != 0) hash ^= Durability.GetHashCode();
      if (LastDurabilityTime != 0) hash ^= LastDurabilityTime.GetHashCode();
      if (AlName.Length != 0) hash ^= AlName.GetHashCode();
      if (GiveUpTime != 0) hash ^= GiveUpTime.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CityId);
      }
      if (OpenTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpenTime);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (ProtectTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ProtectTime);
      }
      if (AlAbbr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AlAbbr);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AllianceId);
      }
      if (Durability != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Durability);
      }
      if (LastDurabilityTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LastDurabilityTime);
      }
      if (AlName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(AlName);
      }
      if (GiveUpTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GiveUpTime);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CityName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CityId);
      }
      if (OpenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (ProtectTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtectTime);
      }
      if (AlAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlAbbr);
      }
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (Durability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Durability);
      }
      if (LastDurabilityTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastDurabilityTime);
      }
      if (AlName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlName);
      }
      if (GiveUpTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiveUpTime);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllianceCityPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.CityId != 0) {
        CityId = other.CityId;
      }
      if (other.OpenTime != 0) {
        OpenTime = other.OpenTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.ProtectTime != 0) {
        ProtectTime = other.ProtectTime;
      }
      if (other.AlAbbr.Length != 0) {
        AlAbbr = other.AlAbbr;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.Durability != 0) {
        Durability = other.Durability;
      }
      if (other.LastDurabilityTime != 0) {
        LastDurabilityTime = other.LastDurabilityTime;
      }
      if (other.AlName.Length != 0) {
        AlName = other.AlName;
      }
      if (other.GiveUpTime != 0) {
        GiveUpTime = other.GiveUpTime;
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CityId = input.ReadInt32();
            break;
          }
          case 16: {
            OpenTime = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            ProtectTime = input.ReadInt32();
            break;
          }
          case 42: {
            AlAbbr = input.ReadString();
            break;
          }
          case 58: {
            AllianceId = input.ReadString();
            break;
          }
          case 64: {
            Durability = input.ReadInt32();
            break;
          }
          case 72: {
            LastDurabilityTime = input.ReadInt32();
            break;
          }
          case 82: {
            AlName = input.ReadString();
            break;
          }
          case 88: {
            GiveUpTime = input.ReadInt32();
            break;
          }
          case 98: {
            CityName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollectRewardInfo : pb::IMessage<CollectRewardInfo> {
    private static readonly pb::MessageParser<CollectRewardInfo> _parser = new pb::MessageParser<CollectRewardInfo>(() => new CollectRewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectRewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectRewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectRewardInfo(CollectRewardInfo other) : this() {
      ownerUid_ = other.ownerUid_;
      uuid_ = other.uuid_;
      expireTime_ = other.expireTime_;
      contentId_ = other.contentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectRewardInfo Clone() {
      return new CollectRewardInfo(this);
    }

    /// <summary>Field number for the "ownerUid" field.</summary>
    public const int OwnerUidFieldNumber = 1;
    private string ownerUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUid {
      get { return ownerUid_; }
      set {
        ownerUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 3;
    private long expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "contentId" field.</summary>
    public const int ContentIdFieldNumber = 4;
    private int contentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentId {
      get { return contentId_; }
      set {
        contentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectRewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectRewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerUid != other.OwnerUid) return false;
      if (Uuid != other.Uuid) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (ContentId != other.ContentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerUid.Length != 0) hash ^= OwnerUid.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
      if (ContentId != 0) hash ^= ContentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OwnerUid);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (ExpireTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExpireTime);
      }
      if (ContentId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ContentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUid);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (ExpireTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
      }
      if (ContentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectRewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.OwnerUid.Length != 0) {
        OwnerUid = other.OwnerUid;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.ExpireTime != 0L) {
        ExpireTime = other.ExpireTime;
      }
      if (other.ContentId != 0) {
        ContentId = other.ContentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnerUid = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 24: {
            ExpireTime = input.ReadInt64();
            break;
          }
          case 32: {
            ContentId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllianceBuildingPointInfo : pb::IMessage<AllianceBuildingPointInfo> {
    private static readonly pb::MessageParser<AllianceBuildingPointInfo> _parser = new pb::MessageParser<AllianceBuildingPointInfo>(() => new AllianceBuildingPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllianceBuildingPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceBuildingPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceBuildingPointInfo(AllianceBuildingPointInfo other) : this() {
      uuid_ = other.uuid_;
      buildId_ = other.buildId_;
      level_ = other.level_;
      state_ = other.state_;
      alAbbr_ = other.alAbbr_;
      allianceId_ = other.allianceId_;
      durability_ = other.durability_;
      lastDurabilityTime_ = other.lastDurabilityTime_;
      durabilitySpeed_ = other.durabilitySpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceBuildingPointInfo Clone() {
      return new AllianceBuildingPointInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 2;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "alAbbr" field.</summary>
    public const int AlAbbrFieldNumber = 5;
    private string alAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlAbbr {
      get { return alAbbr_; }
      set {
        alAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 6;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "durability" field.</summary>
    public const int DurabilityFieldNumber = 7;
    private int durability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    /// <summary>Field number for the "lastDurabilityTime" field.</summary>
    public const int LastDurabilityTimeFieldNumber = 8;
    private long lastDurabilityTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastDurabilityTime {
      get { return lastDurabilityTime_; }
      set {
        lastDurabilityTime_ = value;
      }
    }

    /// <summary>Field number for the "durabilitySpeed" field.</summary>
    public const int DurabilitySpeedFieldNumber = 9;
    private float durabilitySpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DurabilitySpeed {
      get { return durabilitySpeed_; }
      set {
        durabilitySpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllianceBuildingPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllianceBuildingPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (BuildId != other.BuildId) return false;
      if (Level != other.Level) return false;
      if (State != other.State) return false;
      if (AlAbbr != other.AlAbbr) return false;
      if (AllianceId != other.AllianceId) return false;
      if (Durability != other.Durability) return false;
      if (LastDurabilityTime != other.LastDurabilityTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurabilitySpeed, other.DurabilitySpeed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (AlAbbr.Length != 0) hash ^= AlAbbr.GetHashCode();
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (Durability != 0) hash ^= Durability.GetHashCode();
      if (LastDurabilityTime != 0L) hash ^= LastDurabilityTime.GetHashCode();
      if (DurabilitySpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurabilitySpeed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (BuildId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      if (AlAbbr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AlAbbr);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AllianceId);
      }
      if (Durability != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Durability);
      }
      if (LastDurabilityTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LastDurabilityTime);
      }
      if (DurabilitySpeed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DurabilitySpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (AlAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlAbbr);
      }
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (Durability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Durability);
      }
      if (LastDurabilityTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastDurabilityTime);
      }
      if (DurabilitySpeed != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllianceBuildingPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.AlAbbr.Length != 0) {
        AlAbbr = other.AlAbbr;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.Durability != 0) {
        Durability = other.Durability;
      }
      if (other.LastDurabilityTime != 0L) {
        LastDurabilityTime = other.LastDurabilityTime;
      }
      if (other.DurabilitySpeed != 0F) {
        DurabilitySpeed = other.DurabilitySpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 16: {
            BuildId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 42: {
            AlAbbr = input.ReadString();
            break;
          }
          case 50: {
            AllianceId = input.ReadString();
            break;
          }
          case 56: {
            Durability = input.ReadInt32();
            break;
          }
          case 64: {
            LastDurabilityTime = input.ReadInt64();
            break;
          }
          case 77: {
            DurabilitySpeed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcCityPointInfo : pb::IMessage<NpcCityPointInfo> {
    private static readonly pb::MessageParser<NpcCityPointInfo> _parser = new pb::MessageParser<NpcCityPointInfo>(() => new NpcCityPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcCityPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityPointInfo(NpcCityPointInfo other) : this() {
      uuid_ = other.uuid_;
      npcId_ = other.npcId_;
      lastHpTime_ = other.lastHpTime_;
      currentHp_ = other.currentHp_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityPointInfo Clone() {
      return new NpcCityPointInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 2;
    private int npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "lastHpTime" field.</summary>
    public const int LastHpTimeFieldNumber = 3;
    private int lastHpTime_;
    /// <summary>
    /// 上次回血时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastHpTime {
      get { return lastHpTime_; }
      set {
        lastHpTime_ = value;
      }
    }

    /// <summary>Field number for the "currentHp" field.</summary>
    public const int CurrentHpFieldNumber = 4;
    private int currentHp_;
    /// <summary>
    /// 当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentHp {
      get { return currentHp_; }
      set {
        currentHp_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// 玩家名称(仅大本显示)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcCityPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcCityPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (NpcId != other.NpcId) return false;
      if (LastHpTime != other.LastHpTime) return false;
      if (CurrentHp != other.CurrentHp) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (NpcId != 0) hash ^= NpcId.GetHashCode();
      if (LastHpTime != 0) hash ^= LastHpTime.GetHashCode();
      if (CurrentHp != 0) hash ^= CurrentHp.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (NpcId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NpcId);
      }
      if (LastHpTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastHpTime);
      }
      if (CurrentHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentHp);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcId);
      }
      if (LastHpTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastHpTime);
      }
      if (CurrentHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHp);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcCityPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.NpcId != 0) {
        NpcId = other.NpcId;
      }
      if (other.LastHpTime != 0) {
        LastHpTime = other.LastHpTime;
      }
      if (other.CurrentHp != 0) {
        CurrentHp = other.CurrentHp;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 16: {
            NpcId = input.ReadInt32();
            break;
          }
          case 24: {
            LastHpTime = input.ReadInt32();
            break;
          }
          case 32: {
            CurrentHp = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorldRuinPointInfo : pb::IMessage<WorldRuinPointInfo> {
    private static readonly pb::MessageParser<WorldRuinPointInfo> _parser = new pb::MessageParser<WorldRuinPointInfo>(() => new WorldRuinPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldRuinPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldRuinPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldRuinPointInfo(WorldRuinPointInfo other) : this() {
      uuid_ = other.uuid_;
      size_ = other.size_;
      type_ = other.type_;
      param_ = other.param_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldRuinPointInfo Clone() {
      return new WorldRuinPointInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 废墟类型 1 大本废墟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 4;
    private string param_ = "";
    /// <summary>
    /// 大本 额外信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private int startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldRuinPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldRuinPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Size != other.Size) return false;
      if (Type != other.Type) return false;
      if (Param != other.Param) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (StartTime != 0) hash ^= StartTime.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Param);
      }
      if (StartTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldRuinPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      if (other.StartTime != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34: {
            Param = input.ReadString();
            break;
          }
          case 40: {
            StartTime = input.ReadInt32();
            break;
          }
          case 48: {
            EndTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Skin : pb::IMessage<Skin> {
    private static readonly pb::MessageParser<Skin> _parser = new pb::MessageParser<Skin>(() => new Skin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skin(Skin other) : this() {
      skinId_ = other.skinId_;
      type_ = other.type_;
      skinET_ = other.skinET_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skin Clone() {
      return new Skin(this);
    }

    /// <summary>Field number for the "skinId" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    /// <summary>
    ///皮肤id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///皮肤类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "skinET" field.</summary>
    public const int SkinETFieldNumber = 3;
    private long skinET_;
    /// <summary>
    ///皮肤过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SkinET {
      get { return skinET_; }
      set {
        skinET_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkinId != other.SkinId) return false;
      if (Type != other.Type) return false;
      if (SkinET != other.SkinET) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkinId != 0) hash ^= SkinId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SkinET != 0L) hash ^= SkinET.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (SkinET != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SkinET);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (SkinET != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkinET);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skin other) {
      if (other == null) {
        return;
      }
      if (other.SkinId != 0) {
        SkinId = other.SkinId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SkinET != 0L) {
        SkinET = other.SkinET;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            SkinET = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorldPointInfo : pb::IMessage<WorldPointInfo> {
    private static readonly pb::MessageParser<WorldPointInfo> _parser = new pb::MessageParser<WorldPointInfo>(() => new WorldPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldPointInfo(WorldPointInfo other) : this() {
      id_ = other.id_;
      pointType_ = other.pointType_;
      buildInfo_ = other.buildInfo_ != null ? other.buildInfo_.Clone() : null;
      roadInfo_ = other.roadInfo_ != null ? other.roadInfo_.Clone() : null;
      collectResourceInfo_ = other.collectResourceInfo_ != null ? other.collectResourceInfo_.Clone() : null;
      resourceInfo_ = other.resourceInfo_ != null ? other.resourceInfo_.Clone() : null;
      explorePointInfo_ = other.explorePointInfo_ != null ? other.explorePointInfo_.Clone() : null;
      samplePointInfo_ = other.samplePointInfo_ != null ? other.samplePointInfo_.Clone() : null;
      garbagePointInfo_ = other.garbagePointInfo_ != null ? other.garbagePointInfo_.Clone() : null;
      uuid_ = other.uuid_;
      extraInfo_ = other.extraInfo_;
      serverId_ = other.serverId_;
      srcServerId_ = other.srcServerId_;
      worldId_ = other.worldId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldPointInfo Clone() {
      return new WorldPointInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pointType" field.</summary>
    public const int PointTypeFieldNumber = 2;
    private int pointType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointType {
      get { return pointType_; }
      set {
        pointType_ = value;
      }
    }

    /// <summary>Field number for the "buildInfo" field.</summary>
    public const int BuildInfoFieldNumber = 3;
    private global::Protobuf.BuildInfo buildInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.BuildInfo BuildInfo {
      get { return buildInfo_; }
      set {
        buildInfo_ = value;
      }
    }

    /// <summary>Field number for the "roadInfo" field.</summary>
    public const int RoadInfoFieldNumber = 4;
    private global::Protobuf.RoadInfo roadInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.RoadInfo RoadInfo {
      get { return roadInfo_; }
      set {
        roadInfo_ = value;
      }
    }

    /// <summary>Field number for the "collectResourceInfo" field.</summary>
    public const int CollectResourceInfoFieldNumber = 5;
    private global::Protobuf.CollectResourceInfo collectResourceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.CollectResourceInfo CollectResourceInfo {
      get { return collectResourceInfo_; }
      set {
        collectResourceInfo_ = value;
      }
    }

    /// <summary>Field number for the "resourceInfo" field.</summary>
    public const int ResourceInfoFieldNumber = 6;
    private global::Protobuf.ResourceInfo resourceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ResourceInfo ResourceInfo {
      get { return resourceInfo_; }
      set {
        resourceInfo_ = value;
      }
    }

    /// <summary>Field number for the "explorePointInfo" field.</summary>
    public const int ExplorePointInfoFieldNumber = 7;
    private global::Protobuf.ExplorePointInfo explorePointInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ExplorePointInfo ExplorePointInfo {
      get { return explorePointInfo_; }
      set {
        explorePointInfo_ = value;
      }
    }

    /// <summary>Field number for the "samplePointInfo" field.</summary>
    public const int SamplePointInfoFieldNumber = 8;
    private global::Protobuf.SamplePointInfo samplePointInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SamplePointInfo SamplePointInfo {
      get { return samplePointInfo_; }
      set {
        samplePointInfo_ = value;
      }
    }

    /// <summary>Field number for the "garbagePointInfo" field.</summary>
    public const int GarbagePointInfoFieldNumber = 9;
    private global::Protobuf.GarbagePointInfo garbagePointInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.GarbagePointInfo GarbagePointInfo {
      get { return garbagePointInfo_; }
      set {
        garbagePointInfo_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 100;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "extraInfo" field.</summary>
    public const int ExtraInfoFieldNumber = 101;
    private pb::ByteString extraInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraInfo {
      get { return extraInfo_; }
      set {
        extraInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 102;
    private int serverId_;
    /// <summary>
    ///当前服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "srcServerId" field.</summary>
    public const int SrcServerIdFieldNumber = 103;
    private int srcServerId_;
    /// <summary>
    ///原服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcServerId {
      get { return srcServerId_; }
      set {
        srcServerId_ = value;
      }
    }

    /// <summary>Field number for the "worldId" field.</summary>
    public const int WorldIdFieldNumber = 104;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PointType != other.PointType) return false;
      if (!object.Equals(BuildInfo, other.BuildInfo)) return false;
      if (!object.Equals(RoadInfo, other.RoadInfo)) return false;
      if (!object.Equals(CollectResourceInfo, other.CollectResourceInfo)) return false;
      if (!object.Equals(ResourceInfo, other.ResourceInfo)) return false;
      if (!object.Equals(ExplorePointInfo, other.ExplorePointInfo)) return false;
      if (!object.Equals(SamplePointInfo, other.SamplePointInfo)) return false;
      if (!object.Equals(GarbagePointInfo, other.GarbagePointInfo)) return false;
      if (Uuid != other.Uuid) return false;
      if (ExtraInfo != other.ExtraInfo) return false;
      if (ServerId != other.ServerId) return false;
      if (SrcServerId != other.SrcServerId) return false;
      if (WorldId != other.WorldId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PointType != 0) hash ^= PointType.GetHashCode();
      if (buildInfo_ != null) hash ^= BuildInfo.GetHashCode();
      if (roadInfo_ != null) hash ^= RoadInfo.GetHashCode();
      if (collectResourceInfo_ != null) hash ^= CollectResourceInfo.GetHashCode();
      if (resourceInfo_ != null) hash ^= ResourceInfo.GetHashCode();
      if (explorePointInfo_ != null) hash ^= ExplorePointInfo.GetHashCode();
      if (samplePointInfo_ != null) hash ^= SamplePointInfo.GetHashCode();
      if (garbagePointInfo_ != null) hash ^= GarbagePointInfo.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (ExtraInfo.Length != 0) hash ^= ExtraInfo.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (SrcServerId != 0) hash ^= SrcServerId.GetHashCode();
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (PointType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PointType);
      }
      if (buildInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BuildInfo);
      }
      if (roadInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoadInfo);
      }
      if (collectResourceInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CollectResourceInfo);
      }
      if (resourceInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ResourceInfo);
      }
      if (explorePointInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ExplorePointInfo);
      }
      if (samplePointInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SamplePointInfo);
      }
      if (garbagePointInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(GarbagePointInfo);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(Uuid);
      }
      if (ExtraInfo.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteBytes(ExtraInfo);
      }
      if (ServerId != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(ServerId);
      }
      if (SrcServerId != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(SrcServerId);
      }
      if (WorldId != 0) {
        output.WriteRawTag(192, 6);
        output.WriteInt32(WorldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (PointType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointType);
      }
      if (buildInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildInfo);
      }
      if (roadInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoadInfo);
      }
      if (collectResourceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectResourceInfo);
      }
      if (resourceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceInfo);
      }
      if (explorePointInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExplorePointInfo);
      }
      if (samplePointInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SamplePointInfo);
      }
      if (garbagePointInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GarbagePointInfo);
      }
      if (Uuid != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (ExtraInfo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ExtraInfo);
      }
      if (ServerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (SrcServerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SrcServerId);
      }
      if (WorldId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PointType != 0) {
        PointType = other.PointType;
      }
      if (other.buildInfo_ != null) {
        if (buildInfo_ == null) {
          BuildInfo = new global::Protobuf.BuildInfo();
        }
        BuildInfo.MergeFrom(other.BuildInfo);
      }
      if (other.roadInfo_ != null) {
        if (roadInfo_ == null) {
          RoadInfo = new global::Protobuf.RoadInfo();
        }
        RoadInfo.MergeFrom(other.RoadInfo);
      }
      if (other.collectResourceInfo_ != null) {
        if (collectResourceInfo_ == null) {
          CollectResourceInfo = new global::Protobuf.CollectResourceInfo();
        }
        CollectResourceInfo.MergeFrom(other.CollectResourceInfo);
      }
      if (other.resourceInfo_ != null) {
        if (resourceInfo_ == null) {
          ResourceInfo = new global::Protobuf.ResourceInfo();
        }
        ResourceInfo.MergeFrom(other.ResourceInfo);
      }
      if (other.explorePointInfo_ != null) {
        if (explorePointInfo_ == null) {
          ExplorePointInfo = new global::Protobuf.ExplorePointInfo();
        }
        ExplorePointInfo.MergeFrom(other.ExplorePointInfo);
      }
      if (other.samplePointInfo_ != null) {
        if (samplePointInfo_ == null) {
          SamplePointInfo = new global::Protobuf.SamplePointInfo();
        }
        SamplePointInfo.MergeFrom(other.SamplePointInfo);
      }
      if (other.garbagePointInfo_ != null) {
        if (garbagePointInfo_ == null) {
          GarbagePointInfo = new global::Protobuf.GarbagePointInfo();
        }
        GarbagePointInfo.MergeFrom(other.GarbagePointInfo);
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.ExtraInfo.Length != 0) {
        ExtraInfo = other.ExtraInfo;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.SrcServerId != 0) {
        SrcServerId = other.SrcServerId;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            PointType = input.ReadInt32();
            break;
          }
          case 26: {
            if (buildInfo_ == null) {
              BuildInfo = new global::Protobuf.BuildInfo();
            }
            input.ReadMessage(BuildInfo);
            break;
          }
          case 34: {
            if (roadInfo_ == null) {
              RoadInfo = new global::Protobuf.RoadInfo();
            }
            input.ReadMessage(RoadInfo);
            break;
          }
          case 42: {
            if (collectResourceInfo_ == null) {
              CollectResourceInfo = new global::Protobuf.CollectResourceInfo();
            }
            input.ReadMessage(CollectResourceInfo);
            break;
          }
          case 50: {
            if (resourceInfo_ == null) {
              ResourceInfo = new global::Protobuf.ResourceInfo();
            }
            input.ReadMessage(ResourceInfo);
            break;
          }
          case 58: {
            if (explorePointInfo_ == null) {
              ExplorePointInfo = new global::Protobuf.ExplorePointInfo();
            }
            input.ReadMessage(ExplorePointInfo);
            break;
          }
          case 66: {
            if (samplePointInfo_ == null) {
              SamplePointInfo = new global::Protobuf.SamplePointInfo();
            }
            input.ReadMessage(SamplePointInfo);
            break;
          }
          case 74: {
            if (garbagePointInfo_ == null) {
              GarbagePointInfo = new global::Protobuf.GarbagePointInfo();
            }
            input.ReadMessage(GarbagePointInfo);
            break;
          }
          case 800: {
            Uuid = input.ReadInt64();
            break;
          }
          case 810: {
            ExtraInfo = input.ReadBytes();
            break;
          }
          case 816: {
            ServerId = input.ReadInt32();
            break;
          }
          case 824: {
            SrcServerId = input.ReadInt32();
            break;
          }
          case 832: {
            WorldId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LandPointInfo : pb::IMessage<LandPointInfo> {
    private static readonly pb::MessageParser<LandPointInfo> _parser = new pb::MessageParser<LandPointInfo>(() => new LandPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LandPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandPointInfo(LandPointInfo other) : this() {
      id_ = other.id_;
      landId_ = other.landId_;
      serverId_ = other.serverId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandPointInfo Clone() {
      return new LandPointInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "landId" field.</summary>
    public const int LandIdFieldNumber = 2;
    private int landId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LandId {
      get { return landId_; }
      set {
        landId_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 3;
    private int serverId_;
    /// <summary>
    ///当前服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LandPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LandPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LandId != other.LandId) return false;
      if (ServerId != other.ServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (LandId != 0) hash ^= LandId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (LandId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LandId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (LandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LandId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LandPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.LandId != 0) {
        LandId = other.LandId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            LandId = input.ReadInt32();
            break;
          }
          case 24: {
            ServerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DesertInfo : pb::IMessage<DesertInfo> {
    private static readonly pb::MessageParser<DesertInfo> _parser = new pb::MessageParser<DesertInfo>(() => new DesertInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesertInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesertInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesertInfo(DesertInfo other) : this() {
      id_ = other.id_;
      uuid_ = other.uuid_;
      desertId_ = other.desertId_;
      protectEndTime_ = other.protectEndTime_;
      uid_ = other.uid_;
      allianceId_ = other.allianceId_;
      serverId_ = other.serverId_;
      hasAssistance_ = other.hasAssistance_;
      mineId_ = other.mineId_;
      ownerServer_ = other.ownerServer_;
      oriDesertId_ = other.oriDesertId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesertInfo Clone() {
      return new DesertInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "desertId" field.</summary>
    public const int DesertIdFieldNumber = 3;
    private int desertId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DesertId {
      get { return desertId_; }
      set {
        desertId_ = value;
      }
    }

    /// <summary>Field number for the "protectEndTime" field.</summary>
    public const int ProtectEndTimeFieldNumber = 4;
    private int protectEndTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtectEndTime {
      get { return protectEndTime_; }
      set {
        protectEndTime_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 5;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 6;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 7;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "hasAssistance" field.</summary>
    public const int HasAssistanceFieldNumber = 8;
    private bool hasAssistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssistance {
      get { return hasAssistance_; }
      set {
        hasAssistance_ = value;
      }
    }

    /// <summary>Field number for the "mineId" field.</summary>
    public const int MineIdFieldNumber = 9;
    private int mineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MineId {
      get { return mineId_; }
      set {
        mineId_ = value;
      }
    }

    /// <summary>Field number for the "ownerServer" field.</summary>
    public const int OwnerServerFieldNumber = 10;
    private int ownerServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerServer {
      get { return ownerServer_; }
      set {
        ownerServer_ = value;
      }
    }

    /// <summary>Field number for the "oriDesertId" field.</summary>
    public const int OriDesertIdFieldNumber = 11;
    private int oriDesertId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriDesertId {
      get { return oriDesertId_; }
      set {
        oriDesertId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesertInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesertInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uuid != other.Uuid) return false;
      if (DesertId != other.DesertId) return false;
      if (ProtectEndTime != other.ProtectEndTime) return false;
      if (Uid != other.Uid) return false;
      if (AllianceId != other.AllianceId) return false;
      if (ServerId != other.ServerId) return false;
      if (HasAssistance != other.HasAssistance) return false;
      if (MineId != other.MineId) return false;
      if (OwnerServer != other.OwnerServer) return false;
      if (OriDesertId != other.OriDesertId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (DesertId != 0) hash ^= DesertId.GetHashCode();
      if (ProtectEndTime != 0) hash ^= ProtectEndTime.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (HasAssistance != false) hash ^= HasAssistance.GetHashCode();
      if (MineId != 0) hash ^= MineId.GetHashCode();
      if (OwnerServer != 0) hash ^= OwnerServer.GetHashCode();
      if (OriDesertId != 0) hash ^= OriDesertId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (DesertId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DesertId);
      }
      if (ProtectEndTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ProtectEndTime);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Uid);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AllianceId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ServerId);
      }
      if (HasAssistance != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasAssistance);
      }
      if (MineId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MineId);
      }
      if (OwnerServer != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OwnerServer);
      }
      if (OriDesertId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OriDesertId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (DesertId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DesertId);
      }
      if (ProtectEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtectEndTime);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (HasAssistance != false) {
        size += 1 + 1;
      }
      if (MineId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MineId);
      }
      if (OwnerServer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerServer);
      }
      if (OriDesertId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriDesertId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesertInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.DesertId != 0) {
        DesertId = other.DesertId;
      }
      if (other.ProtectEndTime != 0) {
        ProtectEndTime = other.ProtectEndTime;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.HasAssistance != false) {
        HasAssistance = other.HasAssistance;
      }
      if (other.MineId != 0) {
        MineId = other.MineId;
      }
      if (other.OwnerServer != 0) {
        OwnerServer = other.OwnerServer;
      }
      if (other.OriDesertId != 0) {
        OriDesertId = other.OriDesertId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 24: {
            DesertId = input.ReadInt32();
            break;
          }
          case 32: {
            ProtectEndTime = input.ReadInt32();
            break;
          }
          case 42: {
            Uid = input.ReadString();
            break;
          }
          case 50: {
            AllianceId = input.ReadString();
            break;
          }
          case 56: {
            ServerId = input.ReadInt32();
            break;
          }
          case 64: {
            HasAssistance = input.ReadBool();
            break;
          }
          case 72: {
            MineId = input.ReadInt32();
            break;
          }
          case 80: {
            OwnerServer = input.ReadInt32();
            break;
          }
          case 88: {
            OriDesertId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DragonBuildingPointInfo : pb::IMessage<DragonBuildingPointInfo> {
    private static readonly pb::MessageParser<DragonBuildingPointInfo> _parser = new pb::MessageParser<DragonBuildingPointInfo>(() => new DragonBuildingPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DragonBuildingPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonBuildingPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonBuildingPointInfo(DragonBuildingPointInfo other) : this() {
      uuid_ = other.uuid_;
      buildId_ = other.buildId_;
      state_ = other.state_;
      alAbbr_ = other.alAbbr_;
      allianceId_ = other.allianceId_;
      occupyTime_ = other.occupyTime_;
      openTime_ = other.openTime_;
      startTime_ = other.startTime_;
      protectTime_ = other.protectTime_;
      rewardCount_ = other.rewardCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonBuildingPointInfo Clone() {
      return new DragonBuildingPointInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 2;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "alAbbr" field.</summary>
    public const int AlAbbrFieldNumber = 4;
    private string alAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlAbbr {
      get { return alAbbr_; }
      set {
        alAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 5;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occupyTime" field.</summary>
    public const int OccupyTimeFieldNumber = 6;
    private long occupyTime_;
    /// <summary>
    ///建筑成功占领时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OccupyTime {
      get { return occupyTime_; }
      set {
        occupyTime_ = value;
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 7;
    private long openTime_;
    /// <summary>
    ///建筑开放时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "protectTime" field.</summary>
    public const int ProtectTimeFieldNumber = 9;
    private long protectTime_;
    /// <summary>
    ///建筑保护时间  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProtectTime {
      get { return protectTime_; }
      set {
        protectTime_ = value;
      }
    }

    /// <summary>Field number for the "rewardCount" field.</summary>
    public const int RewardCountFieldNumber = 10;
    private int rewardCount_;
    /// <summary>
    ///已经出现过几次密钥 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardCount {
      get { return rewardCount_; }
      set {
        rewardCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DragonBuildingPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DragonBuildingPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (BuildId != other.BuildId) return false;
      if (State != other.State) return false;
      if (AlAbbr != other.AlAbbr) return false;
      if (AllianceId != other.AllianceId) return false;
      if (OccupyTime != other.OccupyTime) return false;
      if (OpenTime != other.OpenTime) return false;
      if (StartTime != other.StartTime) return false;
      if (ProtectTime != other.ProtectTime) return false;
      if (RewardCount != other.RewardCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (AlAbbr.Length != 0) hash ^= AlAbbr.GetHashCode();
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (OccupyTime != 0L) hash ^= OccupyTime.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (ProtectTime != 0L) hash ^= ProtectTime.GetHashCode();
      if (RewardCount != 0) hash ^= RewardCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (BuildId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildId);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (AlAbbr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AlAbbr);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AllianceId);
      }
      if (OccupyTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(OccupyTime);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(OpenTime);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(StartTime);
      }
      if (ProtectTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(ProtectTime);
      }
      if (RewardCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RewardCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (AlAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlAbbr);
      }
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (OccupyTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OccupyTime);
      }
      if (OpenTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (ProtectTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProtectTime);
      }
      if (RewardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DragonBuildingPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.AlAbbr.Length != 0) {
        AlAbbr = other.AlAbbr;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.OccupyTime != 0L) {
        OccupyTime = other.OccupyTime;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.ProtectTime != 0L) {
        ProtectTime = other.ProtectTime;
      }
      if (other.RewardCount != 0) {
        RewardCount = other.RewardCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 16: {
            BuildId = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 34: {
            AlAbbr = input.ReadString();
            break;
          }
          case 42: {
            AllianceId = input.ReadString();
            break;
          }
          case 48: {
            OccupyTime = input.ReadInt64();
            break;
          }
          case 56: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 64: {
            StartTime = input.ReadInt64();
            break;
          }
          case 72: {
            ProtectTime = input.ReadInt64();
            break;
          }
          case 80: {
            RewardCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DragonSecretKeyPointInfo : pb::IMessage<DragonSecretKeyPointInfo> {
    private static readonly pb::MessageParser<DragonSecretKeyPointInfo> _parser = new pb::MessageParser<DragonSecretKeyPointInfo>(() => new DragonSecretKeyPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DragonSecretKeyPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonSecretKeyPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonSecretKeyPointInfo(DragonSecretKeyPointInfo other) : this() {
      uuid_ = other.uuid_;
      createTime_ = other.createTime_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonSecretKeyPointInfo Clone() {
      return new DragonSecretKeyPointInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 2;
    private long createTime_;
    /// <summary>
    ///掉落时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DragonSecretKeyPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DragonSecretKeyPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CreateTime);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DragonSecretKeyPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 16: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossThroneBuildPointInfo : pb::IMessage<CrossThroneBuildPointInfo> {
    private static readonly pb::MessageParser<CrossThroneBuildPointInfo> _parser = new pb::MessageParser<CrossThroneBuildPointInfo>(() => new CrossThroneBuildPointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossThroneBuildPointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.WorldPointInfoReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossThroneBuildPointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossThroneBuildPointInfo(CrossThroneBuildPointInfo other) : this() {
      uuid_ = other.uuid_;
      buildId_ = other.buildId_;
      alAbbr_ = other.alAbbr_;
      allianceId_ = other.allianceId_;
      openTime_ = other.openTime_;
      startTime_ = other.startTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossThroneBuildPointInfo Clone() {
      return new CrossThroneBuildPointInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 2;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    /// <summary>Field number for the "alAbbr" field.</summary>
    public const int AlAbbrFieldNumber = 3;
    private string alAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlAbbr {
      get { return alAbbr_; }
      set {
        alAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 4;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 5;
    private long openTime_;
    /// <summary>
    ///建筑开放时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossThroneBuildPointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossThroneBuildPointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (BuildId != other.BuildId) return false;
      if (AlAbbr != other.AlAbbr) return false;
      if (AllianceId != other.AllianceId) return false;
      if (OpenTime != other.OpenTime) return false;
      if (StartTime != other.StartTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (AlAbbr.Length != 0) hash ^= AlAbbr.GetHashCode();
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (BuildId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildId);
      }
      if (AlAbbr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AlAbbr);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AllianceId);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(OpenTime);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(StartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (AlAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlAbbr);
      }
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (OpenTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossThroneBuildPointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      if (other.AlAbbr.Length != 0) {
        AlAbbr = other.AlAbbr;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 16: {
            BuildId = input.ReadInt32();
            break;
          }
          case 26: {
            AlAbbr = input.ReadString();
            break;
          }
          case 34: {
            AllianceId = input.ReadString();
            break;
          }
          case 40: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 48: {
            StartTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
