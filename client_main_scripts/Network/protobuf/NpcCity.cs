// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NpcCity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  /// <summary>Holder for reflection information generated from NpcCity.proto</summary>
  public static partial class NpcCityReflection {

    #region Descriptor
    /// <summary>File descriptor for NpcCity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NpcCityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1OcGNDaXR5LnByb3RvEghwcm90b2J1ZiLNAQoNTnBjUGxheWVySW5mbxIM",
            "CgRuYW1lGAEgASgJEgsKA3BpYxgCIAEoCRITCgtzcmNTZXJ2ZXJJZBgDIAEo",
            "BRIPCgdwb2ludElkGAQgASgFEg0KBW5wY0lkGAUgASgFEg8KB2NvdW50cnkY",
            "BiABKAkSDwoHa2lsbE51bRgHIAEoBRINCgVwb3dlchgIIAEoBRILCgN3aW4Y",
            "CSABKAUSDAoEbG9zZRgKIAEoBRIPCgdkZWFkTnVtGAsgASgFEg8KB2RlY3RO",
            "dW0YDCABKAVCHQobbmV0LmltMzAuYXBzLm1vZGVsLnByb3RvYnVmYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.NpcPlayerInfo), global::Protobuf.NpcPlayerInfo.Parser, new[]{ "Name", "Pic", "SrcServerId", "PointId", "NpcId", "Country", "KillNum", "Power", "Win", "Lose", "DeadNum", "DectNum" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NpcPlayerInfo : pb::IMessage<NpcPlayerInfo> {
    private static readonly pb::MessageParser<NpcPlayerInfo> _parser = new pb::MessageParser<NpcPlayerInfo>(() => new NpcPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.NpcCityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPlayerInfo(NpcPlayerInfo other) : this() {
      name_ = other.name_;
      pic_ = other.pic_;
      srcServerId_ = other.srcServerId_;
      pointId_ = other.pointId_;
      npcId_ = other.npcId_;
      country_ = other.country_;
      killNum_ = other.killNum_;
      power_ = other.power_;
      win_ = other.win_;
      lose_ = other.lose_;
      deadNum_ = other.deadNum_;
      dectNum_ = other.dectNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPlayerInfo Clone() {
      return new NpcPlayerInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pic" field.</summary>
    public const int PicFieldNumber = 2;
    private string pic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pic {
      get { return pic_; }
      set {
        pic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "srcServerId" field.</summary>
    public const int SrcServerIdFieldNumber = 3;
    private int srcServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcServerId {
      get { return srcServerId_; }
      set {
        srcServerId_ = value;
      }
    }

    /// <summary>Field number for the "pointId" field.</summary>
    public const int PointIdFieldNumber = 4;
    private int pointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointId {
      get { return pointId_; }
      set {
        pointId_ = value;
      }
    }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 5;
    private int npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 6;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "killNum" field.</summary>
    public const int KillNumFieldNumber = 7;
    private int killNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillNum {
      get { return killNum_; }
      set {
        killNum_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 8;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 9;
    private int win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "lose" field.</summary>
    public const int LoseFieldNumber = 10;
    private int lose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lose {
      get { return lose_; }
      set {
        lose_ = value;
      }
    }

    /// <summary>Field number for the "deadNum" field.</summary>
    public const int DeadNumFieldNumber = 11;
    private int deadNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeadNum {
      get { return deadNum_; }
      set {
        deadNum_ = value;
      }
    }

    /// <summary>Field number for the "dectNum" field.</summary>
    public const int DectNumFieldNumber = 12;
    private int dectNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DectNum {
      get { return dectNum_; }
      set {
        dectNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Pic != other.Pic) return false;
      if (SrcServerId != other.SrcServerId) return false;
      if (PointId != other.PointId) return false;
      if (NpcId != other.NpcId) return false;
      if (Country != other.Country) return false;
      if (KillNum != other.KillNum) return false;
      if (Power != other.Power) return false;
      if (Win != other.Win) return false;
      if (Lose != other.Lose) return false;
      if (DeadNum != other.DeadNum) return false;
      if (DectNum != other.DectNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Pic.Length != 0) hash ^= Pic.GetHashCode();
      if (SrcServerId != 0) hash ^= SrcServerId.GetHashCode();
      if (PointId != 0) hash ^= PointId.GetHashCode();
      if (NpcId != 0) hash ^= NpcId.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (KillNum != 0) hash ^= KillNum.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Lose != 0) hash ^= Lose.GetHashCode();
      if (DeadNum != 0) hash ^= DeadNum.GetHashCode();
      if (DectNum != 0) hash ^= DectNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Pic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pic);
      }
      if (SrcServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SrcServerId);
      }
      if (PointId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PointId);
      }
      if (NpcId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NpcId);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Country);
      }
      if (KillNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(KillNum);
      }
      if (Power != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Power);
      }
      if (Win != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Win);
      }
      if (Lose != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Lose);
      }
      if (DeadNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DeadNum);
      }
      if (DectNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DectNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Pic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pic);
      }
      if (SrcServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcServerId);
      }
      if (PointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointId);
      }
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcId);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (KillNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillNum);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      if (Lose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lose);
      }
      if (DeadNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeadNum);
      }
      if (DectNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DectNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Pic.Length != 0) {
        Pic = other.Pic;
      }
      if (other.SrcServerId != 0) {
        SrcServerId = other.SrcServerId;
      }
      if (other.PointId != 0) {
        PointId = other.PointId;
      }
      if (other.NpcId != 0) {
        NpcId = other.NpcId;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.KillNum != 0) {
        KillNum = other.KillNum;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Lose != 0) {
        Lose = other.Lose;
      }
      if (other.DeadNum != 0) {
        DeadNum = other.DeadNum;
      }
      if (other.DectNum != 0) {
        DectNum = other.DectNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Pic = input.ReadString();
            break;
          }
          case 24: {
            SrcServerId = input.ReadInt32();
            break;
          }
          case 32: {
            PointId = input.ReadInt32();
            break;
          }
          case 40: {
            NpcId = input.ReadInt32();
            break;
          }
          case 50: {
            Country = input.ReadString();
            break;
          }
          case 56: {
            KillNum = input.ReadInt32();
            break;
          }
          case 64: {
            Power = input.ReadInt32();
            break;
          }
          case 72: {
            Win = input.ReadInt32();
            break;
          }
          case 80: {
            Lose = input.ReadInt32();
            break;
          }
          case 88: {
            DeadNum = input.ReadInt32();
            break;
          }
          case 96: {
            DectNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
