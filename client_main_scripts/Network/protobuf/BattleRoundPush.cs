// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BattleRoundPush.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  /// <summary>Holder for reflection information generated from BattleRoundPush.proto</summary>
  public static partial class BattleRoundPushReflection {

    #region Descriptor
    /// <summary>File descriptor for BattleRoundPush.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleRoundPushReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVCYXR0bGVSb3VuZFB1c2gucHJvdG8SCHByb3RvYnVmGhJCYXR0bGVSZXBv",
            "cnQucHJvdG8iMQoPUm91bmRTdGF0dXNJbmZvEhAKCHN0YXR1c0lkGAEgASgF",
            "EgwKBHRpbWUYAiABKAUikwEKF1NpbXBsZUNvbWJhdFVuaXRQdXNoT2JqEiwK",
            "CGFybXlJbmZvGAEgASgLMhoucHJvdG9idWYuU2ltcGxlQ29tYmF0VW5pdBIM",
            "CgR0eXBlGAIgASgFEg8KB3RvcFV1aWQYAyABKAMSEgoKdG9wUG9pbnRJZBgE",
            "IAEoBRIXCg9zcGVjaWFsQXJteVR5cGUYBSABKAUikQIKElNpbXBsZVNlbGZB",
            "cm15SW5mbxIzCghhcm15SW5mbxgBIAEoCzIhLnByb3RvYnVmLlNpbXBsZUNv",
            "bWJhdFVuaXRQdXNoT2JqEjUKCnRhcmdldEluZm8YAiABKAsyIS5wcm90b2J1",
            "Zi5TaW1wbGVDb21iYXRVbml0UHVzaE9iahIMCgRodXJ0GAMgASgFEgwKBGhl",
            "YWwYBCABKAUSEgoKc2hpZWxkSHVydBgFIAEoBRIOCgZzaGllbGQYBiABKAUS",
            "DQoFYW5nZXIYByABKAUSLQoKc3RhdHVzSW5mbxgIIAMoCzIZLnByb3RvYnVm",
            "LlJvdW5kU3RhdHVzSW5mbxIRCgljYXJfYW5nZXIYCSABKAUiewoTQ29tYmlu",
            "ZVNlbGZBcm15SW5mbxItCgdtZW1iZXJzGAEgAygLMhwucHJvdG9idWYuU2lt",
            "cGxlU2VsZkFybXlJbmZvEjUKCnRhcmdldEluZm8YAiABKAsyIS5wcm90b2J1",
            "Zi5TaW1wbGVDb21iYXRVbml0UHVzaE9iaiJuChNCYXNlUm91bmRSZXBvcnRQ",
            "dXNoEi4KC3JvdW5kUmVwb3J0GAEgASgLMhkucHJvdG9idWYuQmFzZVJvdW5k",
            "UmVwb3J0EhMKC3RyaWdnZXJVdWlkGAIgASgDEhIKCnRhcmdldFV1aWQYAyAB",
            "KAMicgoVRWZmZWN0Um91bmRSZXBvcnRQdXNoEjAKC3JvdW5kUmVwb3J0GAEg",
            "ASgLMhsucHJvdG9idWYuRWZmZWN0Um91bmRSZXBvcnQSEwoLdHJpZ2dlclV1",
            "aWQYAiABKAMSEgoKdGFyZ2V0VXVpZBgDIAEoAyKGAgoTQmF0dGxlUm91bmRQ",
            "dXNoSW5mbxIMCgR0eXBlGAEgASgFEjQKDnNpbXBsZUFybXlJbmZvGAIgASgL",
            "MhwucHJvdG9idWYuU2ltcGxlU2VsZkFybXlJbmZvEjYKD2NvbWJpbmVBcm15",
            "SW5mbxgDIAEoCzIdLnByb3RvYnVmLkNvbWJpbmVTZWxmQXJteUluZm8SEAoI",
            "b3V0UmFuZ2UYBCABKAgSMwoMcm91bmRSZXBvcnRzGAUgAygLMh0ucHJvdG9i",
            "dWYuQmFzZVJvdW5kUmVwb3J0UHVzaBIUCgxzZWxmQmVzaWVnZWQYBiABKAgS",
            "FgoOdGFyZ2V0QmVzaWVnZWQYByABKAhCHQobbmV0LmltMzAuYXBzLm1vZGVs",
            "LnByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protobuf.BattleReportReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.RoundStatusInfo), global::Protobuf.RoundStatusInfo.Parser, new[]{ "StatusId", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.SimpleCombatUnitPushObj), global::Protobuf.SimpleCombatUnitPushObj.Parser, new[]{ "ArmyInfo", "Type", "TopUuid", "TopPointId", "SpecialArmyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.SimpleSelfArmyInfo), global::Protobuf.SimpleSelfArmyInfo.Parser, new[]{ "ArmyInfo", "TargetInfo", "Hurt", "Heal", "ShieldHurt", "Shield", "Anger", "StatusInfo", "CarAnger" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.CombineSelfArmyInfo), global::Protobuf.CombineSelfArmyInfo.Parser, new[]{ "Members", "TargetInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BaseRoundReportPush), global::Protobuf.BaseRoundReportPush.Parser, new[]{ "RoundReport", "TriggerUuid", "TargetUuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.EffectRoundReportPush), global::Protobuf.EffectRoundReportPush.Parser, new[]{ "RoundReport", "TriggerUuid", "TargetUuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BattleRoundPushInfo), global::Protobuf.BattleRoundPushInfo.Parser, new[]{ "Type", "SimpleArmyInfo", "CombineArmyInfo", "OutRange", "RoundReports", "SelfBesieged", "TargetBesieged" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoundStatusInfo : pb::IMessage<RoundStatusInfo> {
    private static readonly pb::MessageParser<RoundStatusInfo> _parser = new pb::MessageParser<RoundStatusInfo>(() => new RoundStatusInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundStatusInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleRoundPushReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundStatusInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundStatusInfo(RoundStatusInfo other) : this() {
      statusId_ = other.statusId_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundStatusInfo Clone() {
      return new RoundStatusInfo(this);
    }

    /// <summary>Field number for the "statusId" field.</summary>
    public const int StatusIdFieldNumber = 1;
    private int statusId_;
    /// <summary>
    /// 状态Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusId {
      get { return statusId_; }
      set {
        statusId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    /// <summary>
    /// 持续回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundStatusInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundStatusInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusId != other.StatusId) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusId != 0) hash ^= StatusId.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusId);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusId);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundStatusInfo other) {
      if (other == null) {
        return;
      }
      if (other.StatusId != 0) {
        StatusId = other.StatusId;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusId = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleCombatUnitPushObj : pb::IMessage<SimpleCombatUnitPushObj> {
    private static readonly pb::MessageParser<SimpleCombatUnitPushObj> _parser = new pb::MessageParser<SimpleCombatUnitPushObj>(() => new SimpleCombatUnitPushObj());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleCombatUnitPushObj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleRoundPushReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleCombatUnitPushObj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleCombatUnitPushObj(SimpleCombatUnitPushObj other) : this() {
      armyInfo_ = other.armyInfo_ != null ? other.armyInfo_.Clone() : null;
      type_ = other.type_;
      topUuid_ = other.topUuid_;
      topPointId_ = other.topPointId_;
      specialArmyType_ = other.specialArmyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleCombatUnitPushObj Clone() {
      return new SimpleCombatUnitPushObj(this);
    }

    /// <summary>Field number for the "armyInfo" field.</summary>
    public const int ArmyInfoFieldNumber = 1;
    private global::Protobuf.SimpleCombatUnit armyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SimpleCombatUnit ArmyInfo {
      get { return armyInfo_; }
      set {
        armyInfo_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "topUuid" field.</summary>
    public const int TopUuidFieldNumber = 3;
    private long topUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopUuid {
      get { return topUuid_; }
      set {
        topUuid_ = value;
      }
    }

    /// <summary>Field number for the "topPointId" field.</summary>
    public const int TopPointIdFieldNumber = 4;
    private int topPointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TopPointId {
      get { return topPointId_; }
      set {
        topPointId_ = value;
      }
    }

    /// <summary>Field number for the "specialArmyType" field.</summary>
    public const int SpecialArmyTypeFieldNumber = 5;
    private int specialArmyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialArmyType {
      get { return specialArmyType_; }
      set {
        specialArmyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleCombatUnitPushObj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleCombatUnitPushObj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ArmyInfo, other.ArmyInfo)) return false;
      if (Type != other.Type) return false;
      if (TopUuid != other.TopUuid) return false;
      if (TopPointId != other.TopPointId) return false;
      if (SpecialArmyType != other.SpecialArmyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (armyInfo_ != null) hash ^= ArmyInfo.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TopUuid != 0L) hash ^= TopUuid.GetHashCode();
      if (TopPointId != 0) hash ^= TopPointId.GetHashCode();
      if (SpecialArmyType != 0) hash ^= SpecialArmyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (armyInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ArmyInfo);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (TopUuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TopUuid);
      }
      if (TopPointId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TopPointId);
      }
      if (SpecialArmyType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpecialArmyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (armyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmyInfo);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (TopUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TopUuid);
      }
      if (TopPointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopPointId);
      }
      if (SpecialArmyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialArmyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleCombatUnitPushObj other) {
      if (other == null) {
        return;
      }
      if (other.armyInfo_ != null) {
        if (armyInfo_ == null) {
          ArmyInfo = new global::Protobuf.SimpleCombatUnit();
        }
        ArmyInfo.MergeFrom(other.ArmyInfo);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TopUuid != 0L) {
        TopUuid = other.TopUuid;
      }
      if (other.TopPointId != 0) {
        TopPointId = other.TopPointId;
      }
      if (other.SpecialArmyType != 0) {
        SpecialArmyType = other.SpecialArmyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (armyInfo_ == null) {
              ArmyInfo = new global::Protobuf.SimpleCombatUnit();
            }
            input.ReadMessage(ArmyInfo);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            TopUuid = input.ReadInt64();
            break;
          }
          case 32: {
            TopPointId = input.ReadInt32();
            break;
          }
          case 40: {
            SpecialArmyType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleSelfArmyInfo : pb::IMessage<SimpleSelfArmyInfo> {
    private static readonly pb::MessageParser<SimpleSelfArmyInfo> _parser = new pb::MessageParser<SimpleSelfArmyInfo>(() => new SimpleSelfArmyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleSelfArmyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleRoundPushReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleSelfArmyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleSelfArmyInfo(SimpleSelfArmyInfo other) : this() {
      armyInfo_ = other.armyInfo_ != null ? other.armyInfo_.Clone() : null;
      targetInfo_ = other.targetInfo_ != null ? other.targetInfo_.Clone() : null;
      hurt_ = other.hurt_;
      heal_ = other.heal_;
      shieldHurt_ = other.shieldHurt_;
      shield_ = other.shield_;
      anger_ = other.anger_;
      statusInfo_ = other.statusInfo_.Clone();
      carAnger_ = other.carAnger_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleSelfArmyInfo Clone() {
      return new SimpleSelfArmyInfo(this);
    }

    /// <summary>Field number for the "armyInfo" field.</summary>
    public const int ArmyInfoFieldNumber = 1;
    private global::Protobuf.SimpleCombatUnitPushObj armyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SimpleCombatUnitPushObj ArmyInfo {
      get { return armyInfo_; }
      set {
        armyInfo_ = value;
      }
    }

    /// <summary>Field number for the "targetInfo" field.</summary>
    public const int TargetInfoFieldNumber = 2;
    private global::Protobuf.SimpleCombatUnitPushObj targetInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SimpleCombatUnitPushObj TargetInfo {
      get { return targetInfo_; }
      set {
        targetInfo_ = value;
      }
    }

    /// <summary>Field number for the "hurt" field.</summary>
    public const int HurtFieldNumber = 3;
    private int hurt_;
    /// <summary>
    /// 血量受到伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hurt {
      get { return hurt_; }
      set {
        hurt_ = value;
      }
    }

    /// <summary>Field number for the "heal" field.</summary>
    public const int HealFieldNumber = 4;
    private int heal_;
    /// <summary>
    /// 轻伤治疗量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heal {
      get { return heal_; }
      set {
        heal_ = value;
      }
    }

    /// <summary>Field number for the "shieldHurt" field.</summary>
    public const int ShieldHurtFieldNumber = 5;
    private int shieldHurt_;
    /// <summary>
    /// 护盾受到伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShieldHurt {
      get { return shieldHurt_; }
      set {
        shieldHurt_ = value;
      }
    }

    /// <summary>Field number for the "shield" field.</summary>
    public const int ShieldFieldNumber = 6;
    private int shield_;
    /// <summary>
    /// 护盾值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shield {
      get { return shield_; }
      set {
        shield_ = value;
      }
    }

    /// <summary>Field number for the "anger" field.</summary>
    public const int AngerFieldNumber = 7;
    private int anger_;
    /// <summary>
    /// 怒气值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Anger {
      get { return anger_; }
      set {
        anger_ = value;
      }
    }

    /// <summary>Field number for the "statusInfo" field.</summary>
    public const int StatusInfoFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Protobuf.RoundStatusInfo> _repeated_statusInfo_codec
        = pb::FieldCodec.ForMessage(66, global::Protobuf.RoundStatusInfo.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.RoundStatusInfo> statusInfo_ = new pbc::RepeatedField<global::Protobuf.RoundStatusInfo>();
    /// <summary>
    /// 当前状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.RoundStatusInfo> StatusInfo {
      get { return statusInfo_; }
    }

    /// <summary>Field number for the "car_anger" field.</summary>
    public const int CarAngerFieldNumber = 9;
    private int carAnger_;
    /// <summary>
    /// 佣兵车怒气值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarAnger {
      get { return carAnger_; }
      set {
        carAnger_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleSelfArmyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleSelfArmyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ArmyInfo, other.ArmyInfo)) return false;
      if (!object.Equals(TargetInfo, other.TargetInfo)) return false;
      if (Hurt != other.Hurt) return false;
      if (Heal != other.Heal) return false;
      if (ShieldHurt != other.ShieldHurt) return false;
      if (Shield != other.Shield) return false;
      if (Anger != other.Anger) return false;
      if(!statusInfo_.Equals(other.statusInfo_)) return false;
      if (CarAnger != other.CarAnger) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (armyInfo_ != null) hash ^= ArmyInfo.GetHashCode();
      if (targetInfo_ != null) hash ^= TargetInfo.GetHashCode();
      if (Hurt != 0) hash ^= Hurt.GetHashCode();
      if (Heal != 0) hash ^= Heal.GetHashCode();
      if (ShieldHurt != 0) hash ^= ShieldHurt.GetHashCode();
      if (Shield != 0) hash ^= Shield.GetHashCode();
      if (Anger != 0) hash ^= Anger.GetHashCode();
      hash ^= statusInfo_.GetHashCode();
      if (CarAnger != 0) hash ^= CarAnger.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (armyInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ArmyInfo);
      }
      if (targetInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetInfo);
      }
      if (Hurt != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hurt);
      }
      if (Heal != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Heal);
      }
      if (ShieldHurt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShieldHurt);
      }
      if (Shield != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Shield);
      }
      if (Anger != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Anger);
      }
      statusInfo_.WriteTo(output, _repeated_statusInfo_codec);
      if (CarAnger != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CarAnger);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (armyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmyInfo);
      }
      if (targetInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetInfo);
      }
      if (Hurt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hurt);
      }
      if (Heal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heal);
      }
      if (ShieldHurt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShieldHurt);
      }
      if (Shield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shield);
      }
      if (Anger != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Anger);
      }
      size += statusInfo_.CalculateSize(_repeated_statusInfo_codec);
      if (CarAnger != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarAnger);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleSelfArmyInfo other) {
      if (other == null) {
        return;
      }
      if (other.armyInfo_ != null) {
        if (armyInfo_ == null) {
          ArmyInfo = new global::Protobuf.SimpleCombatUnitPushObj();
        }
        ArmyInfo.MergeFrom(other.ArmyInfo);
      }
      if (other.targetInfo_ != null) {
        if (targetInfo_ == null) {
          TargetInfo = new global::Protobuf.SimpleCombatUnitPushObj();
        }
        TargetInfo.MergeFrom(other.TargetInfo);
      }
      if (other.Hurt != 0) {
        Hurt = other.Hurt;
      }
      if (other.Heal != 0) {
        Heal = other.Heal;
      }
      if (other.ShieldHurt != 0) {
        ShieldHurt = other.ShieldHurt;
      }
      if (other.Shield != 0) {
        Shield = other.Shield;
      }
      if (other.Anger != 0) {
        Anger = other.Anger;
      }
      statusInfo_.Add(other.statusInfo_);
      if (other.CarAnger != 0) {
        CarAnger = other.CarAnger;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (armyInfo_ == null) {
              ArmyInfo = new global::Protobuf.SimpleCombatUnitPushObj();
            }
            input.ReadMessage(ArmyInfo);
            break;
          }
          case 18: {
            if (targetInfo_ == null) {
              TargetInfo = new global::Protobuf.SimpleCombatUnitPushObj();
            }
            input.ReadMessage(TargetInfo);
            break;
          }
          case 24: {
            Hurt = input.ReadInt32();
            break;
          }
          case 32: {
            Heal = input.ReadInt32();
            break;
          }
          case 40: {
            ShieldHurt = input.ReadInt32();
            break;
          }
          case 48: {
            Shield = input.ReadInt32();
            break;
          }
          case 56: {
            Anger = input.ReadInt32();
            break;
          }
          case 66: {
            statusInfo_.AddEntriesFrom(input, _repeated_statusInfo_codec);
            break;
          }
          case 72: {
            CarAnger = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombineSelfArmyInfo : pb::IMessage<CombineSelfArmyInfo> {
    private static readonly pb::MessageParser<CombineSelfArmyInfo> _parser = new pb::MessageParser<CombineSelfArmyInfo>(() => new CombineSelfArmyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombineSelfArmyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleRoundPushReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineSelfArmyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineSelfArmyInfo(CombineSelfArmyInfo other) : this() {
      members_ = other.members_.Clone();
      targetInfo_ = other.targetInfo_ != null ? other.targetInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineSelfArmyInfo Clone() {
      return new CombineSelfArmyInfo(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.SimpleSelfArmyInfo> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.SimpleSelfArmyInfo.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.SimpleSelfArmyInfo> members_ = new pbc::RepeatedField<global::Protobuf.SimpleSelfArmyInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.SimpleSelfArmyInfo> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "targetInfo" field.</summary>
    public const int TargetInfoFieldNumber = 2;
    private global::Protobuf.SimpleCombatUnitPushObj targetInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SimpleCombatUnitPushObj TargetInfo {
      get { return targetInfo_; }
      set {
        targetInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombineSelfArmyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombineSelfArmyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      if (!object.Equals(TargetInfo, other.TargetInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (targetInfo_ != null) hash ^= TargetInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (targetInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (targetInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombineSelfArmyInfo other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      if (other.targetInfo_ != null) {
        if (targetInfo_ == null) {
          TargetInfo = new global::Protobuf.SimpleCombatUnitPushObj();
        }
        TargetInfo.MergeFrom(other.TargetInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 18: {
            if (targetInfo_ == null) {
              TargetInfo = new global::Protobuf.SimpleCombatUnitPushObj();
            }
            input.ReadMessage(TargetInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BaseRoundReportPush : pb::IMessage<BaseRoundReportPush> {
    private static readonly pb::MessageParser<BaseRoundReportPush> _parser = new pb::MessageParser<BaseRoundReportPush>(() => new BaseRoundReportPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseRoundReportPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleRoundPushReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRoundReportPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRoundReportPush(BaseRoundReportPush other) : this() {
      roundReport_ = other.roundReport_ != null ? other.roundReport_.Clone() : null;
      triggerUuid_ = other.triggerUuid_;
      targetUuid_ = other.targetUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRoundReportPush Clone() {
      return new BaseRoundReportPush(this);
    }

    /// <summary>Field number for the "roundReport" field.</summary>
    public const int RoundReportFieldNumber = 1;
    private global::Protobuf.BaseRoundReport roundReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.BaseRoundReport RoundReport {
      get { return roundReport_; }
      set {
        roundReport_ = value;
      }
    }

    /// <summary>Field number for the "triggerUuid" field.</summary>
    public const int TriggerUuidFieldNumber = 2;
    private long triggerUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TriggerUuid {
      get { return triggerUuid_; }
      set {
        triggerUuid_ = value;
      }
    }

    /// <summary>Field number for the "targetUuid" field.</summary>
    public const int TargetUuidFieldNumber = 3;
    private long targetUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetUuid {
      get { return targetUuid_; }
      set {
        targetUuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseRoundReportPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseRoundReportPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoundReport, other.RoundReport)) return false;
      if (TriggerUuid != other.TriggerUuid) return false;
      if (TargetUuid != other.TargetUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roundReport_ != null) hash ^= RoundReport.GetHashCode();
      if (TriggerUuid != 0L) hash ^= TriggerUuid.GetHashCode();
      if (TargetUuid != 0L) hash ^= TargetUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roundReport_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoundReport);
      }
      if (TriggerUuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TriggerUuid);
      }
      if (TargetUuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roundReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoundReport);
      }
      if (TriggerUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TriggerUuid);
      }
      if (TargetUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseRoundReportPush other) {
      if (other == null) {
        return;
      }
      if (other.roundReport_ != null) {
        if (roundReport_ == null) {
          RoundReport = new global::Protobuf.BaseRoundReport();
        }
        RoundReport.MergeFrom(other.RoundReport);
      }
      if (other.TriggerUuid != 0L) {
        TriggerUuid = other.TriggerUuid;
      }
      if (other.TargetUuid != 0L) {
        TargetUuid = other.TargetUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roundReport_ == null) {
              RoundReport = new global::Protobuf.BaseRoundReport();
            }
            input.ReadMessage(RoundReport);
            break;
          }
          case 16: {
            TriggerUuid = input.ReadInt64();
            break;
          }
          case 24: {
            TargetUuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectRoundReportPush : pb::IMessage<EffectRoundReportPush> {
    private static readonly pb::MessageParser<EffectRoundReportPush> _parser = new pb::MessageParser<EffectRoundReportPush>(() => new EffectRoundReportPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectRoundReportPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleRoundPushReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoundReportPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoundReportPush(EffectRoundReportPush other) : this() {
      roundReport_ = other.roundReport_ != null ? other.roundReport_.Clone() : null;
      triggerUuid_ = other.triggerUuid_;
      targetUuid_ = other.targetUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoundReportPush Clone() {
      return new EffectRoundReportPush(this);
    }

    /// <summary>Field number for the "roundReport" field.</summary>
    public const int RoundReportFieldNumber = 1;
    private global::Protobuf.EffectRoundReport roundReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.EffectRoundReport RoundReport {
      get { return roundReport_; }
      set {
        roundReport_ = value;
      }
    }

    /// <summary>Field number for the "triggerUuid" field.</summary>
    public const int TriggerUuidFieldNumber = 2;
    private long triggerUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TriggerUuid {
      get { return triggerUuid_; }
      set {
        triggerUuid_ = value;
      }
    }

    /// <summary>Field number for the "targetUuid" field.</summary>
    public const int TargetUuidFieldNumber = 3;
    private long targetUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetUuid {
      get { return targetUuid_; }
      set {
        targetUuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectRoundReportPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectRoundReportPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoundReport, other.RoundReport)) return false;
      if (TriggerUuid != other.TriggerUuid) return false;
      if (TargetUuid != other.TargetUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roundReport_ != null) hash ^= RoundReport.GetHashCode();
      if (TriggerUuid != 0L) hash ^= TriggerUuid.GetHashCode();
      if (TargetUuid != 0L) hash ^= TargetUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roundReport_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoundReport);
      }
      if (TriggerUuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TriggerUuid);
      }
      if (TargetUuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roundReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoundReport);
      }
      if (TriggerUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TriggerUuid);
      }
      if (TargetUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectRoundReportPush other) {
      if (other == null) {
        return;
      }
      if (other.roundReport_ != null) {
        if (roundReport_ == null) {
          RoundReport = new global::Protobuf.EffectRoundReport();
        }
        RoundReport.MergeFrom(other.RoundReport);
      }
      if (other.TriggerUuid != 0L) {
        TriggerUuid = other.TriggerUuid;
      }
      if (other.TargetUuid != 0L) {
        TargetUuid = other.TargetUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roundReport_ == null) {
              RoundReport = new global::Protobuf.EffectRoundReport();
            }
            input.ReadMessage(RoundReport);
            break;
          }
          case 16: {
            TriggerUuid = input.ReadInt64();
            break;
          }
          case 24: {
            TargetUuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleRoundPushInfo : pb::IMessage<BattleRoundPushInfo> {
    private static readonly pb::MessageParser<BattleRoundPushInfo> _parser = new pb::MessageParser<BattleRoundPushInfo>(() => new BattleRoundPushInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoundPushInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleRoundPushReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoundPushInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoundPushInfo(BattleRoundPushInfo other) : this() {
      type_ = other.type_;
      simpleArmyInfo_ = other.simpleArmyInfo_ != null ? other.simpleArmyInfo_.Clone() : null;
      combineArmyInfo_ = other.combineArmyInfo_ != null ? other.combineArmyInfo_.Clone() : null;
      outRange_ = other.outRange_;
      roundReports_ = other.roundReports_.Clone();
      selfBesieged_ = other.selfBesieged_;
      targetBesieged_ = other.targetBesieged_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoundPushInfo Clone() {
      return new BattleRoundPushInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "simpleArmyInfo" field.</summary>
    public const int SimpleArmyInfoFieldNumber = 2;
    private global::Protobuf.SimpleSelfArmyInfo simpleArmyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SimpleSelfArmyInfo SimpleArmyInfo {
      get { return simpleArmyInfo_; }
      set {
        simpleArmyInfo_ = value;
      }
    }

    /// <summary>Field number for the "combineArmyInfo" field.</summary>
    public const int CombineArmyInfoFieldNumber = 3;
    private global::Protobuf.CombineSelfArmyInfo combineArmyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.CombineSelfArmyInfo CombineArmyInfo {
      get { return combineArmyInfo_; }
      set {
        combineArmyInfo_ = value;
      }
    }

    /// <summary>Field number for the "outRange" field.</summary>
    public const int OutRangeFieldNumber = 4;
    private bool outRange_;
    /// <summary>
    /// 是否在攻击范围外，无法攻击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutRange {
      get { return outRange_; }
      set {
        outRange_ = value;
      }
    }

    /// <summary>Field number for the "roundReports" field.</summary>
    public const int RoundReportsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protobuf.BaseRoundReportPush> _repeated_roundReports_codec
        = pb::FieldCodec.ForMessage(42, global::Protobuf.BaseRoundReportPush.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.BaseRoundReportPush> roundReports_ = new pbc::RepeatedField<global::Protobuf.BaseRoundReportPush>();
    /// <summary>
    /// 回合战报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.BaseRoundReportPush> RoundReports {
      get { return roundReports_; }
    }

    /// <summary>Field number for the "selfBesieged" field.</summary>
    public const int SelfBesiegedFieldNumber = 6;
    private bool selfBesieged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SelfBesieged {
      get { return selfBesieged_; }
      set {
        selfBesieged_ = value;
      }
    }

    /// <summary>Field number for the "targetBesieged" field.</summary>
    public const int TargetBesiegedFieldNumber = 7;
    private bool targetBesieged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TargetBesieged {
      get { return targetBesieged_; }
      set {
        targetBesieged_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleRoundPushInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleRoundPushInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(SimpleArmyInfo, other.SimpleArmyInfo)) return false;
      if (!object.Equals(CombineArmyInfo, other.CombineArmyInfo)) return false;
      if (OutRange != other.OutRange) return false;
      if(!roundReports_.Equals(other.roundReports_)) return false;
      if (SelfBesieged != other.SelfBesieged) return false;
      if (TargetBesieged != other.TargetBesieged) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (simpleArmyInfo_ != null) hash ^= SimpleArmyInfo.GetHashCode();
      if (combineArmyInfo_ != null) hash ^= CombineArmyInfo.GetHashCode();
      if (OutRange != false) hash ^= OutRange.GetHashCode();
      hash ^= roundReports_.GetHashCode();
      if (SelfBesieged != false) hash ^= SelfBesieged.GetHashCode();
      if (TargetBesieged != false) hash ^= TargetBesieged.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (simpleArmyInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SimpleArmyInfo);
      }
      if (combineArmyInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CombineArmyInfo);
      }
      if (OutRange != false) {
        output.WriteRawTag(32);
        output.WriteBool(OutRange);
      }
      roundReports_.WriteTo(output, _repeated_roundReports_codec);
      if (SelfBesieged != false) {
        output.WriteRawTag(48);
        output.WriteBool(SelfBesieged);
      }
      if (TargetBesieged != false) {
        output.WriteRawTag(56);
        output.WriteBool(TargetBesieged);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (simpleArmyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleArmyInfo);
      }
      if (combineArmyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CombineArmyInfo);
      }
      if (OutRange != false) {
        size += 1 + 1;
      }
      size += roundReports_.CalculateSize(_repeated_roundReports_codec);
      if (SelfBesieged != false) {
        size += 1 + 1;
      }
      if (TargetBesieged != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleRoundPushInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.simpleArmyInfo_ != null) {
        if (simpleArmyInfo_ == null) {
          SimpleArmyInfo = new global::Protobuf.SimpleSelfArmyInfo();
        }
        SimpleArmyInfo.MergeFrom(other.SimpleArmyInfo);
      }
      if (other.combineArmyInfo_ != null) {
        if (combineArmyInfo_ == null) {
          CombineArmyInfo = new global::Protobuf.CombineSelfArmyInfo();
        }
        CombineArmyInfo.MergeFrom(other.CombineArmyInfo);
      }
      if (other.OutRange != false) {
        OutRange = other.OutRange;
      }
      roundReports_.Add(other.roundReports_);
      if (other.SelfBesieged != false) {
        SelfBesieged = other.SelfBesieged;
      }
      if (other.TargetBesieged != false) {
        TargetBesieged = other.TargetBesieged;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (simpleArmyInfo_ == null) {
              SimpleArmyInfo = new global::Protobuf.SimpleSelfArmyInfo();
            }
            input.ReadMessage(SimpleArmyInfo);
            break;
          }
          case 26: {
            if (combineArmyInfo_ == null) {
              CombineArmyInfo = new global::Protobuf.CombineSelfArmyInfo();
            }
            input.ReadMessage(CombineArmyInfo);
            break;
          }
          case 32: {
            OutRange = input.ReadBool();
            break;
          }
          case 42: {
            roundReports_.AddEntriesFrom(input, _repeated_roundReports_codec);
            break;
          }
          case 48: {
            SelfBesieged = input.ReadBool();
            break;
          }
          case 56: {
            TargetBesieged = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
