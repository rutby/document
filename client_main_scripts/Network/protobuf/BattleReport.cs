// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BattleReport.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  /// <summary>Holder for reflection information generated from BattleReport.proto</summary>
  public static partial class BattleReportReflection {

    #region Descriptor
    /// <summary>File descriptor for BattleReport.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleReportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJCYXR0bGVSZXBvcnQucHJvdG8SCHByb3RvYnVmGhJBcm15VW5pdEluZm8u",
            "cHJvdG8aDU5wY0NpdHkucHJvdG8iWAoSUmVwb3J0QWxsaWFuY2VJbmZvEhIK",
            "CmFsbGlhbmNlSWQYASABKAkSDgoGYWxBYmJyGAIgASgJEg4KBmFsTmFtZRgD",
            "IAEoCRIOCgZhbEljb24YBCABKAki8QEKEFJlcG9ydFBsYXllckluZm8SCwoD",
            "dWlkGAEgASgJEgwKBG5hbWUYAiABKAkSCwoDcGljGAMgASgJEg4KBnBpY1Zl",
            "chgEIAEoBRITCgtzcmNTZXJ2ZXJJZBgFIAEoBRIPCgdwb2ludElkGAYgASgF",
            "EjIKDGFsbGlhbmNlSW5mbxgHIAEoCzIcLnByb3RvYnVmLlJlcG9ydEFsbGlh",
            "bmNlSW5mbxIRCgloZWFkRnJhbWUYCCABKAUSEgoKY2FyZWVyVHlwZRgJIAEo",
            "BRIQCghjYXJlZXJMdhgKIAEoBRISCgpoZWFkU2tpbklkGAsgASgFIuwBCg9C",
            "YXNlUm91bmRSZXBvcnQSFAoMdHJpZ2dlckluZGV4GAEgASgFEg0KBXJvdW5k",
            "GAIgASgFEg0KBXZhbHVlGAMgASgFEgwKBHR5cGUYBCABKAUSDwoHc2tpbGxJ",
            "ZBgFIAEoBRISCgpza2lsbExldmVsGAYgASgFEg4KBmhlcm9JZBgHIAEoBRIT",
            "Cgt0YXJnZXRJbmRleBgIIAEoBRIOCgZoZWFsdGgYCSABKAUSDQoFcGFyYW0Y",
            "CiABKAUSFAoMc3BlY2lhbFBhcmFtGAsgASgJEhgKEGRhbWFnZUVmZmVjdFR5",
            "cGUYDCABKAUiUAoRRWZmZWN0Um91bmRSZXBvcnQSLQoKYmFzZVJlcG9ydBgB",
            "IAEoCzIZLnByb3RvYnVmLkJhc2VSb3VuZFJlcG9ydBIMCgR0aW1lGAIgASgF",
            "Ii8KEFJlcG9ydFJld2FyZEl0ZW0SDAoEdHlwZRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoBSIzChRSZXBvcnRSZXdhcmRSZXNvdXJjZRIMCgR0eXBlGAEgASgFEg0K",
            "BXZhbHVlGAIgASgFInYKE1JlcG9ydFJld2FyZEhlcm9FeHASDgoGaGVyb0lk",
            "GAEgASgFEg0KBWxldmVsGAIgASgFEg4KBmV4cEFkZBgDIAEoBRIOCgZub3dF",
            "eHAYBCABKAUSDgoGb2xkRXhwGAUgASgFEhAKCGhlcm9VdWlkGAYgASgDIoAC",
            "CgxSZXBvcnRSZXdhcmQSLwoLcmV3YXJkSXRlbXMYASADKAsyGi5wcm90b2J1",
            "Zi5SZXBvcnRSZXdhcmRJdGVtEjcKE3Jld2FyZFJlc291cmNlSXRlbXMYAiAD",
            "KAsyGi5wcm90b2J1Zi5SZXBvcnRSZXdhcmRJdGVtEjUKDnJld2FyZEhlcm9F",
            "eHBzGAMgAygLMh0ucHJvdG9idWYuUmVwb3J0UmV3YXJkSGVyb0V4cBI3Cg9y",
            "ZXdhcmRSZXNvdXJjZXMYBCADKAsyHi5wcm90b2J1Zi5SZXBvcnRSZXdhcmRS",
            "ZXNvdXJjZRIWCg5wbHVuZGVyUmVzUmF0ZRgFIAEoBSJHCg9BbGxSZXBvcnRS",
            "ZXdhcmQSJgoGcmV3YXJkGAEgASgLMhYucHJvdG9idWYuUmVwb3J0UmV3YXJk",
            "EgwKBHV1aWQYAiABKAMi4QEKDkFybXlDb21iYXRVbml0EjQKEHNpbXBsZUNv",
            "bWJhdFVuaXQYASABKAsyGi5wcm90b2J1Zi5TaW1wbGVDb21iYXRVbml0EigK",
            "CGFybXlJbmZvGAIgASgLMhYucHJvdG9idWYuQXJteVVuaXRJbmZvEhcKD3Nw",
            "ZWNpYWxBcm15VHlwZRgDIAEoBRIWCg5mb3JtYXRpb25JbmRleBgEIAEoBRIb",
            "ChNpbkFsbGlhbmNlVGVycml0b3J5GAUgASgFEg0KBXBhcmFtGAYgASgJEhIK",
            "CmVkZW5TaWduYWwYByABKAIidAoRQ29tYmluZUNvbWJhdFVuaXQSNAoQc2lt",
            "cGxlQ29tYmF0VW5pdBgBIAEoCzIaLnByb3RvYnVmLlNpbXBsZUNvbWJhdFVu",
            "aXQSKQoHbWVtYmVycxgCIAMoCzIYLnByb3RvYnVmLkFybXlDb21iYXRVbml0",
            "IlEKEFNpbXBsZUNvbWJhdFVuaXQSEgoKaW5pdEhlYWx0aBgBIAEoBRIOCgZo",
            "ZWFsdGgYAiABKAUSDAoEdXVpZBgDIAEoAxILCgN1aWQYBCABKAkiugEKCkNv",
            "bWJhdFVuaXQSDAoEdHlwZRgBIAEoBRIwCg5hcm15Q29tYmF0VW5pdBgCIAEo",
            "CzIYLnByb3RvYnVmLkFybXlDb21iYXRVbml0EjYKEWNvbWJpbmVDb21iYXRV",
            "bml0GAMgASgLMhsucHJvdG9idWYuQ29tYmluZUNvbWJhdFVuaXQSNAoQc2lt",
            "cGxlQ29tYmF0VW5pdBgEIAEoCzIaLnByb3RvYnVmLlNpbXBsZUNvbWJhdFVu",
            "aXQilQEKEURhbWFnZVBlcmNlbnRJbmZvEhIKCnRhcmdldFV1aWQYASABKAMS",
            "FQoNZGFtYWdlUGVyY2VudBgCIAEoAhIWCg53b3VuZGVkUGVyY2VudBgDIAEo",
            "AhIWCg5pbmp1cmVkUGVyY2VudBgEIAEoAhITCgtkZWFkUGVyY2VudBgFIAEo",
            "AhIQCghzZWxmVXVpZBgGIAEoAyK+AQoOQXJteVJlc3VsdEJhc2USDwoHcG9p",
            "bnRJZBgBIAEoBRIlCgdhcm15T2JqGAIgASgLMhQucHJvdG9idWYuQ29tYmF0",
            "VW5pdBIqCgxhZnRlckFybXlPYmoYAyABKAsyFC5wcm90b2J1Zi5Db21iYXRV",
            "bml0EhQKDGRlc3Ryb3lWYWx1ZRgEIAMoBRIyCg1kYW1hZ2VQZXJjZW50GAUg",
            "AygLMhsucHJvdG9idWYuRGFtYWdlUGVyY2VudEluZm8iWQoPQnVpbGRBcm15",
            "UmVzdWx0EiYKBGJhc2UYASABKAsyGC5wcm90b2J1Zi5Bcm15UmVzdWx0QmFz",
            "ZRINCgVsZXZlbBgCIAEoBRIPCgdidWlsZElkGAMgASgFIlAKFURyYWdvbkJ1",
            "aWxkQXJteVJlc3VsdBImCgRiYXNlGAEgASgLMhgucHJvdG9idWYuQXJteVJl",
            "c3VsdEJhc2USDwoHYnVpbGRJZBgCIAEoBSJVChpDcm9zc1Rocm9uZUJ1aWxk",
            "QXJteVJlc3VsdBImCgRiYXNlGAEgASgLMhgucHJvdG9idWYuQXJteVJlc3Vs",
            "dEJhc2USDwoHYnVpbGRJZBgCIAEoBSJZCg5DaXR5QXJteVJlc3VsdBImCgRi",
            "YXNlGAEgASgLMhgucHJvdG9idWYuQXJteVJlc3VsdEJhc2USDQoFbGV2ZWwY",
            "AiABKAUSEAoIaXNEaXJlY3QYAyABKAgiTgoRTW9uc3RlckFybXlSZXN1bHQS",
            "JgoEYmFzZRgBIAEoCzIYLnByb3RvYnVmLkFybXlSZXN1bHRCYXNlEhEKCW1v",
            "bnN0ZXJJZBgCIAEoBSKbAQoWQWxsaWFuY2VDaXR5QXJteVJlc3VsdBImCgRi",
            "YXNlGAEgASgLMhgucHJvdG9idWYuQXJteVJlc3VsdEJhc2USDgoGY2l0eUlk",
            "GAIgASgFEg4KBmhlYWx0aBgDIAEoBRISCgppbml0SGVhbHRoGAQgASgFEhMK",
            "C2FmdGVySGVhbHRoGAUgASgFEhAKCGNpdHlOYW1lGAYgASgJIkoKDVB2ZUFy",
            "bXlSZXN1bHQSJgoEYmFzZRgBIAEoCzIYLnByb3RvYnVmLkFybXlSZXN1bHRC",
            "YXNlEhEKCW1vbnN0ZXJJZBgCIAEoBSJMChBEZXNlcnRBcm15UmVzdWx0EiYK",
            "BGJhc2UYASABKAsyGC5wcm90b2J1Zi5Bcm15UmVzdWx0QmFzZRIQCghkZXNl",
            "cnRJZBgCIAEoBSKfAQoXQWxsaWFuY2VCdWlsZEFybXlSZXN1bHQSJgoEYmFz",
            "ZRgBIAEoCzIYLnByb3RvYnVmLkFybXlSZXN1bHRCYXNlEg8KB2J1aWxkSWQY",
            "AiABKAUSDgoGaGVhbHRoGAMgASgFEhIKCmluaXRIZWFsdGgYBCABKAUSEwoL",
            "YWZ0ZXJIZWFsdGgYBSABKAUSEgoKYnVpbGRMZXZlbBgGIAEoBSK2AQoRTnBj",
            "Q2l0eUFybXlSZXN1bHQSJgoEYmFzZRgBIAEoCzIYLnByb3RvYnVmLkFybXlS",
            "ZXN1bHRCYXNlEg4KBmhlYWx0aBgCIAEoBRISCgppbml0SGVhbHRoGAMgASgF",
            "EhMKC2FmdGVySGVhbHRoGAQgASgFEi4KDW5wY1BsYXllckluZm8YBSABKAsy",
            "Fy5wcm90b2J1Zi5OcGNQbGF5ZXJJbmZvEhAKCGlzRGlyZWN0GAYgASgIIq8F",
            "CgpBcm15UmVzdWx0EgwKBHR5cGUYASABKAUSEAoIaXNEZWZlYXQYAiABKAgS",
            "MgoPYnVpbGRBcm15UmVzdWx0GAMgASgLMhkucHJvdG9idWYuQnVpbGRBcm15",
            "UmVzdWx0EjAKDmNpdHlBcm15UmVzdWx0GAQgASgLMhgucHJvdG9idWYuQ2l0",
            "eUFybXlSZXN1bHQSMgoQc2ltcGxlQXJteVJlc3VsdBgFIAEoCzIYLnByb3Rv",
            "YnVmLkFybXlSZXN1bHRCYXNlEjYKEW1vbnN0ZXJBcm15UmVzdWx0GAYgASgL",
            "MhsucHJvdG9idWYuTW9uc3RlckFybXlSZXN1bHQSQAoWYWxsaWFuY2VDaXR5",
            "QXJteVJlc3VsdBgHIAEoCzIgLnByb3RvYnVmLkFsbGlhbmNlQ2l0eUFybXlS",
            "ZXN1bHQSLgoNcHZlQXJteVJlc3VsdBgIIAEoCzIXLnByb3RvYnVmLlB2ZUFy",
            "bXlSZXN1bHQSNAoQZGVzZXJ0QXJteVJlc3VsdBgJIAEoCzIaLnByb3RvYnVm",
            "LkRlc2VydEFybXlSZXN1bHQSQgoXYWxsaWFuY2VCdWlsZEFybXlSZXN1bHQY",
            "CiABKAsyIS5wcm90b2J1Zi5BbGxpYW5jZUJ1aWxkQXJteVJlc3VsdBI2ChFu",
            "cGNDaXR5QXJteVJlc3VsdBgLIAEoCzIbLnByb3RvYnVmLk5wY0NpdHlBcm15",
            "UmVzdWx0EkEKGGRyYWdvbkJ1aWxkaW5nQXJteVJlc3VsdBgMIAEoCzIfLnBy",
            "b3RvYnVmLkRyYWdvbkJ1aWxkQXJteVJlc3VsdBJIChpjcm9zc1Rocm9uZUJ1",
            "aWxkQXJteVJlc3VsdBgNIAEoCzIkLnByb3RvYnVmLkNyb3NzVGhyb25lQnVp",
            "bGRBcm15UmVzdWx0Iq0DCgtGaWdodFJlcG9ydBIMCgR1dWlkGAEgASgDEiwK",
            "CHNlbGZJbmZvGAIgASgLMhoucHJvdG9idWYuUmVwb3J0UGxheWVySW5mbxIt",
            "CglvdGhlckluZm8YAyABKAsyGi5wcm90b2J1Zi5SZXBvcnRQbGF5ZXJJbmZv",
            "EiwKDnNlbGZBcm15UmVzdWx0GAQgASgLMhQucHJvdG9idWYuQXJteVJlc3Vs",
            "dBItCg9vdGhlckFybXlSZXN1bHQYBSABKAsyFC5wcm90b2J1Zi5Bcm15UmVz",
            "dWx0EiYKBnJld2FyZBgGIAEoCzIWLnByb3RvYnVmLlJlcG9ydFJld2FyZBIT",
            "CgtmaWdodFJlc3VsdBgHIAEoBRI8ChdvdGhlckJhdHRsZUVmZmVjdEdyb3Vw",
            "cxgIIAMoCzIbLnByb3RvYnVmLkJhdHRsZUVmZmVjdEdyb3VwEiwKDHVuaXRB",
            "dHRySW5mbxgJIAMoCzIWLnByb3RvYnVmLlVuaXRBdHRySW5mbxItCgphbGxS",
            "ZXdhcmRzGAogAygLMhkucHJvdG9idWYuQWxsUmVwb3J0UmV3YXJkIm4KDFVu",
            "aXRBdHRySW5mbxIMCgR1dWlkGAEgASgDEicKB2F0a0luZm8YBCADKAsyFi5w",
            "cm90b2J1Zi5Bcm15QXR0ckluZm8SJwoHZGVmSW5mbxgFIAMoCzIWLnByb3Rv",
            "YnVmLkFybXlBdHRySW5mbyItCgxBcm15QXR0ckluZm8SDgoGcmVhc29uGAEg",
            "ASgFEg0KBXZhbHVlGAIgASgCIl8KD0JhdHRsZVBvaW50SW5mbxIWCg5iYXR0",
            "bGVTZXJ2ZXJJZBgBIAEoBRISCgpzZXJ2ZXJUeXBlGAIgASgFEg8KB3BvaW50",
            "SWQYAyABKAUSDwoHd29ybGRJZBgEIAEoBSIrCgxGaWdodFJlc0xvc3QSDAoE",
            "dHlwZRgBIAEoBRINCgV2YWx1ZRgCIAEoBSIxChBGaWdodFJlc0l0ZW1Mb3N0",
            "Eg4KBml0ZW1JZBgBIAEoBRINCgV2YWx1ZRgCIAEoBSIuCg1GaWdodEl0ZW1M",
            "b3N0Eg4KBml0ZW1JZBgBIAEoCRINCgV2YWx1ZRgCIAEoBSKZAQoJRmlnaHRM",
            "b3N0EioKCnJlc0xvc3RBcnIYASADKAsyFi5wcm90b2J1Zi5GaWdodFJlc0xv",
            "c3QSMgoOcmVzSXRlbUxvc3RBcnIYAiADKAsyGi5wcm90b2J1Zi5GaWdodFJl",
            "c0l0ZW1Mb3N0EiwKC2l0ZW1Mb3N0QXJyGAMgAygLMhcucHJvdG9idWYuRmln",
            "aHRJdGVtTG9zdCI/CgxBbGxGaWdodExvc3QSIQoEbG9zdBgBIAEoCzITLnBy",
            "b3RvYnVmLkZpZ2h0TG9zdBIMCgR1dWlkGAIgASgDIuMCCgxCYXR0bGVSZXBv",
            "cnQSFAoMYmF0dGxlUmVzdWx0GAEgASgFEhEKCXN0YXJ0VGltZRgCIAEoAxIS",
            "CgpzdGFydFJvdW5kGAMgASgFEjIKD2JhdHRsZVBvaW50SW5mbxgEIAEoCzIZ",
            "LnByb3RvYnVmLkJhdHRsZVBvaW50SW5mbxIrCgxmaWdodFJlcG9ydHMYBSAD",
            "KAsyFS5wcm90b2J1Zi5GaWdodFJlcG9ydBImCglmaWdodExvc3QYBiABKAsy",
            "Ey5wcm90b2J1Zi5GaWdodExvc3QSOwoWc2VsZkJhdHRsZUVmZmVjdEdyb3Vw",
            "cxgHIAMoCzIbLnByb3RvYnVmLkJhdHRsZUVmZmVjdEdyb3VwEg8KB3ZlcnNp",
            "b24YCCABKAUSLAoMYWxsRmlnaHRMb3N0GAkgAygLMhYucHJvdG9idWYuQWxs",
            "RmlnaHRMb3N0EhEKCW1hcmNoVHlwZRgKIAEoBSJ1ChZEZXRhaWxSZXBvcnRQ",
            "bGF5ZXJJbmZvEg0KBWluZGV4GAEgASgFEgwKBG5hbWUYAiABKAkSDgoGYWxB",
            "YmJyGAMgASgJEg4KBmlzU2VsZhgEIAEoCBIQCghpbmZvVHlwZRgFIAEoBRIM",
            "CgR1dWlkGAYgASgDIq4BChBCYXR0bGVEZXRhaWxJbmZvEi8KDHJvdW5kUmVw",
            "b3J0cxgBIAMoCzIZLnByb3RvYnVmLkJhc2VSb3VuZFJlcG9ydBIyCg1lZmZl",
            "Y3RSZXBvcnRzGAIgAygLMhsucHJvdG9idWYuRWZmZWN0Um91bmRSZXBvcnQS",
            "NQoLcGxheWVySW5mb3MYAyADKAsyIC5wcm90b2J1Zi5EZXRhaWxSZXBvcnRQ",
            "bGF5ZXJJbmZvIl4KEUJhdHRsZUVmZmVjdEdyb3VwEhIKCm1lbWJlclV1aWQY",
            "ASABKAMSNQoRYmF0dGxlRWZmZWN0SW5mb3MYAiADKAsyGi5wcm90b2J1Zi5C",
            "YXR0bGVFZmZlY3RJbmZvIjMKEkJhdHRsZUVmZmVjdFJlYXNvbhINCgV2YWx1",
            "ZRgBIAEoAhIOCgZyZWFzb24YAiABKAUiYgoQQmF0dGxlRWZmZWN0SW5mbxIQ",
            "CghlZmZlY3RJZBgBIAEoBRINCgV2YWx1ZRgCIAEoAhItCgdyZWFzb25zGAMg",
            "AygLMhwucHJvdG9idWYuQmF0dGxlRWZmZWN0UmVhc29uIlMKF1JlcG9ydFJl",
            "d2FyZE5lZWRDb2xsZWN0Eg8KB3BvaW50SWQYASABKAUSEwoLaW5Vc2VyV29y",
            "bGQYAiABKAgSEgoKcmV3YXJkVXVpZBgDIAEoAyJ+ChhNb25zdGVyQ29sbGVj",
            "dFJld2FyZE1haWwSEQoJc3RhcnRUaW1lGAEgASgDEhEKCW1vbnN0ZXJJZBgC",
            "IAEoBRI8ChFuZWVkQ29sbGVjdFJld2FyZBgDIAEoCzIhLnByb3RvYnVmLlJl",
            "cG9ydFJld2FyZE5lZWRDb2xsZWN0Qh0KG25ldC5pbTMwLmFwcy5tb2RlbC5w",
            "cm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protobuf.ArmyUnitInfoReflection.Descriptor, global::Protobuf.NpcCityReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ReportAllianceInfo), global::Protobuf.ReportAllianceInfo.Parser, new[]{ "AllianceId", "AlAbbr", "AlName", "AlIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ReportPlayerInfo), global::Protobuf.ReportPlayerInfo.Parser, new[]{ "Uid", "Name", "Pic", "PicVer", "SrcServerId", "PointId", "AllianceInfo", "HeadFrame", "CareerType", "CareerLv", "HeadSkinId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BaseRoundReport), global::Protobuf.BaseRoundReport.Parser, new[]{ "TriggerIndex", "Round", "Value", "Type", "SkillId", "SkillLevel", "HeroId", "TargetIndex", "Health", "Param", "SpecialParam", "DamageEffectType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.EffectRoundReport), global::Protobuf.EffectRoundReport.Parser, new[]{ "BaseReport", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ReportRewardItem), global::Protobuf.ReportRewardItem.Parser, new[]{ "Type", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ReportRewardResource), global::Protobuf.ReportRewardResource.Parser, new[]{ "Type", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ReportRewardHeroExp), global::Protobuf.ReportRewardHeroExp.Parser, new[]{ "HeroId", "Level", "ExpAdd", "NowExp", "OldExp", "HeroUuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ReportReward), global::Protobuf.ReportReward.Parser, new[]{ "RewardItems", "RewardResourceItems", "RewardHeroExps", "RewardResources", "PlunderResRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.AllReportReward), global::Protobuf.AllReportReward.Parser, new[]{ "Reward", "Uuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ArmyCombatUnit), global::Protobuf.ArmyCombatUnit.Parser, new[]{ "SimpleCombatUnit", "ArmyInfo", "SpecialArmyType", "FormationIndex", "InAllianceTerritory", "Param", "EdenSignal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.CombineCombatUnit), global::Protobuf.CombineCombatUnit.Parser, new[]{ "SimpleCombatUnit", "Members" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.SimpleCombatUnit), global::Protobuf.SimpleCombatUnit.Parser, new[]{ "InitHealth", "Health", "Uuid", "Uid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.CombatUnit), global::Protobuf.CombatUnit.Parser, new[]{ "Type", "ArmyCombatUnit", "CombineCombatUnit", "SimpleCombatUnit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.DamagePercentInfo), global::Protobuf.DamagePercentInfo.Parser, new[]{ "TargetUuid", "DamagePercent", "WoundedPercent", "InjuredPercent", "DeadPercent", "SelfUuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ArmyResultBase), global::Protobuf.ArmyResultBase.Parser, new[]{ "PointId", "ArmyObj", "AfterArmyObj", "DestroyValue", "DamagePercent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BuildArmyResult), global::Protobuf.BuildArmyResult.Parser, new[]{ "Base", "Level", "BuildId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.DragonBuildArmyResult), global::Protobuf.DragonBuildArmyResult.Parser, new[]{ "Base", "BuildId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.CrossThroneBuildArmyResult), global::Protobuf.CrossThroneBuildArmyResult.Parser, new[]{ "Base", "BuildId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.CityArmyResult), global::Protobuf.CityArmyResult.Parser, new[]{ "Base", "Level", "IsDirect" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.MonsterArmyResult), global::Protobuf.MonsterArmyResult.Parser, new[]{ "Base", "MonsterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.AllianceCityArmyResult), global::Protobuf.AllianceCityArmyResult.Parser, new[]{ "Base", "CityId", "Health", "InitHealth", "AfterHealth", "CityName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.PveArmyResult), global::Protobuf.PveArmyResult.Parser, new[]{ "Base", "MonsterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.DesertArmyResult), global::Protobuf.DesertArmyResult.Parser, new[]{ "Base", "DesertId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.AllianceBuildArmyResult), global::Protobuf.AllianceBuildArmyResult.Parser, new[]{ "Base", "BuildId", "Health", "InitHealth", "AfterHealth", "BuildLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.NpcCityArmyResult), global::Protobuf.NpcCityArmyResult.Parser, new[]{ "Base", "Health", "InitHealth", "AfterHealth", "NpcPlayerInfo", "IsDirect" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ArmyResult), global::Protobuf.ArmyResult.Parser, new[]{ "Type", "IsDefeat", "BuildArmyResult", "CityArmyResult", "SimpleArmyResult", "MonsterArmyResult", "AllianceCityArmyResult", "PveArmyResult", "DesertArmyResult", "AllianceBuildArmyResult", "NpcCityArmyResult", "DragonBuildingArmyResult", "CrossThroneBuildArmyResult" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.FightReport), global::Protobuf.FightReport.Parser, new[]{ "Uuid", "SelfInfo", "OtherInfo", "SelfArmyResult", "OtherArmyResult", "Reward", "FightResult", "OtherBattleEffectGroups", "UnitAttrInfo", "AllRewards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.UnitAttrInfo), global::Protobuf.UnitAttrInfo.Parser, new[]{ "Uuid", "AtkInfo", "DefInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ArmyAttrInfo), global::Protobuf.ArmyAttrInfo.Parser, new[]{ "Reason", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BattlePointInfo), global::Protobuf.BattlePointInfo.Parser, new[]{ "BattleServerId", "ServerType", "PointId", "WorldId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.FightResLost), global::Protobuf.FightResLost.Parser, new[]{ "Type", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.FightResItemLost), global::Protobuf.FightResItemLost.Parser, new[]{ "ItemId", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.FightItemLost), global::Protobuf.FightItemLost.Parser, new[]{ "ItemId", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.FightLost), global::Protobuf.FightLost.Parser, new[]{ "ResLostArr", "ResItemLostArr", "ItemLostArr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.AllFightLost), global::Protobuf.AllFightLost.Parser, new[]{ "Lost", "Uuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BattleReport), global::Protobuf.BattleReport.Parser, new[]{ "BattleResult", "StartTime", "StartRound", "BattlePointInfo", "FightReports", "FightLost", "SelfBattleEffectGroups", "Version", "AllFightLost", "MarchType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.DetailReportPlayerInfo), global::Protobuf.DetailReportPlayerInfo.Parser, new[]{ "Index", "Name", "AlAbbr", "IsSelf", "InfoType", "Uuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BattleDetailInfo), global::Protobuf.BattleDetailInfo.Parser, new[]{ "RoundReports", "EffectReports", "PlayerInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BattleEffectGroup), global::Protobuf.BattleEffectGroup.Parser, new[]{ "MemberUuid", "BattleEffectInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BattleEffectReason), global::Protobuf.BattleEffectReason.Parser, new[]{ "Value", "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.BattleEffectInfo), global::Protobuf.BattleEffectInfo.Parser, new[]{ "EffectId", "Value", "Reasons" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.ReportRewardNeedCollect), global::Protobuf.ReportRewardNeedCollect.Parser, new[]{ "PointId", "InUserWorld", "RewardUuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.MonsterCollectRewardMail), global::Protobuf.MonsterCollectRewardMail.Parser, new[]{ "StartTime", "MonsterId", "NeedCollectReward" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReportAllianceInfo : pb::IMessage<ReportAllianceInfo> {
    private static readonly pb::MessageParser<ReportAllianceInfo> _parser = new pb::MessageParser<ReportAllianceInfo>(() => new ReportAllianceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportAllianceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllianceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllianceInfo(ReportAllianceInfo other) : this() {
      allianceId_ = other.allianceId_;
      alAbbr_ = other.alAbbr_;
      alName_ = other.alName_;
      alIcon_ = other.alIcon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllianceInfo Clone() {
      return new ReportAllianceInfo(this);
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alAbbr" field.</summary>
    public const int AlAbbrFieldNumber = 2;
    private string alAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlAbbr {
      get { return alAbbr_; }
      set {
        alAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alName" field.</summary>
    public const int AlNameFieldNumber = 3;
    private string alName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlName {
      get { return alName_; }
      set {
        alName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alIcon" field.</summary>
    public const int AlIconFieldNumber = 4;
    private string alIcon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlIcon {
      get { return alIcon_; }
      set {
        alIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportAllianceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportAllianceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (AlAbbr != other.AlAbbr) return false;
      if (AlName != other.AlName) return false;
      if (AlIcon != other.AlIcon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (AlAbbr.Length != 0) hash ^= AlAbbr.GetHashCode();
      if (AlName.Length != 0) hash ^= AlName.GetHashCode();
      if (AlIcon.Length != 0) hash ^= AlIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AllianceId);
      }
      if (AlAbbr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AlAbbr);
      }
      if (AlName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AlName);
      }
      if (AlIcon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AlIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (AlAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlAbbr);
      }
      if (AlName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlName);
      }
      if (AlIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportAllianceInfo other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.AlAbbr.Length != 0) {
        AlAbbr = other.AlAbbr;
      }
      if (other.AlName.Length != 0) {
        AlName = other.AlName;
      }
      if (other.AlIcon.Length != 0) {
        AlIcon = other.AlIcon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AllianceId = input.ReadString();
            break;
          }
          case 18: {
            AlAbbr = input.ReadString();
            break;
          }
          case 26: {
            AlName = input.ReadString();
            break;
          }
          case 34: {
            AlIcon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportPlayerInfo : pb::IMessage<ReportPlayerInfo> {
    private static readonly pb::MessageParser<ReportPlayerInfo> _parser = new pb::MessageParser<ReportPlayerInfo>(() => new ReportPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerInfo(ReportPlayerInfo other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      pic_ = other.pic_;
      picVer_ = other.picVer_;
      srcServerId_ = other.srcServerId_;
      pointId_ = other.pointId_;
      allianceInfo_ = other.allianceInfo_ != null ? other.allianceInfo_.Clone() : null;
      headFrame_ = other.headFrame_;
      careerType_ = other.careerType_;
      careerLv_ = other.careerLv_;
      headSkinId_ = other.headSkinId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportPlayerInfo Clone() {
      return new ReportPlayerInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pic" field.</summary>
    public const int PicFieldNumber = 3;
    private string pic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pic {
      get { return pic_; }
      set {
        pic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "picVer" field.</summary>
    public const int PicVerFieldNumber = 4;
    private int picVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PicVer {
      get { return picVer_; }
      set {
        picVer_ = value;
      }
    }

    /// <summary>Field number for the "srcServerId" field.</summary>
    public const int SrcServerIdFieldNumber = 5;
    private int srcServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcServerId {
      get { return srcServerId_; }
      set {
        srcServerId_ = value;
      }
    }

    /// <summary>Field number for the "pointId" field.</summary>
    public const int PointIdFieldNumber = 6;
    private int pointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointId {
      get { return pointId_; }
      set {
        pointId_ = value;
      }
    }

    /// <summary>Field number for the "allianceInfo" field.</summary>
    public const int AllianceInfoFieldNumber = 7;
    private global::Protobuf.ReportAllianceInfo allianceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ReportAllianceInfo AllianceInfo {
      get { return allianceInfo_; }
      set {
        allianceInfo_ = value;
      }
    }

    /// <summary>Field number for the "headFrame" field.</summary>
    public const int HeadFrameFieldNumber = 8;
    private int headFrame_;
    /// <summary>
    ///头像框 0无 1有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadFrame {
      get { return headFrame_; }
      set {
        headFrame_ = value;
      }
    }

    /// <summary>Field number for the "careerType" field.</summary>
    public const int CareerTypeFieldNumber = 9;
    private int careerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CareerType {
      get { return careerType_; }
      set {
        careerType_ = value;
      }
    }

    /// <summary>Field number for the "careerLv" field.</summary>
    public const int CareerLvFieldNumber = 10;
    private int careerLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CareerLv {
      get { return careerLv_; }
      set {
        careerLv_ = value;
      }
    }

    /// <summary>Field number for the "headSkinId" field.</summary>
    public const int HeadSkinIdFieldNumber = 11;
    private int headSkinId_;
    /// <summary>
    ///头像框皮肤id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadSkinId {
      get { return headSkinId_; }
      set {
        headSkinId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Pic != other.Pic) return false;
      if (PicVer != other.PicVer) return false;
      if (SrcServerId != other.SrcServerId) return false;
      if (PointId != other.PointId) return false;
      if (!object.Equals(AllianceInfo, other.AllianceInfo)) return false;
      if (HeadFrame != other.HeadFrame) return false;
      if (CareerType != other.CareerType) return false;
      if (CareerLv != other.CareerLv) return false;
      if (HeadSkinId != other.HeadSkinId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Pic.Length != 0) hash ^= Pic.GetHashCode();
      if (PicVer != 0) hash ^= PicVer.GetHashCode();
      if (SrcServerId != 0) hash ^= SrcServerId.GetHashCode();
      if (PointId != 0) hash ^= PointId.GetHashCode();
      if (allianceInfo_ != null) hash ^= AllianceInfo.GetHashCode();
      if (HeadFrame != 0) hash ^= HeadFrame.GetHashCode();
      if (CareerType != 0) hash ^= CareerType.GetHashCode();
      if (CareerLv != 0) hash ^= CareerLv.GetHashCode();
      if (HeadSkinId != 0) hash ^= HeadSkinId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Pic.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Pic);
      }
      if (PicVer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PicVer);
      }
      if (SrcServerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SrcServerId);
      }
      if (PointId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PointId);
      }
      if (allianceInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AllianceInfo);
      }
      if (HeadFrame != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HeadFrame);
      }
      if (CareerType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CareerType);
      }
      if (CareerLv != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CareerLv);
      }
      if (HeadSkinId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HeadSkinId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Pic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pic);
      }
      if (PicVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PicVer);
      }
      if (SrcServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcServerId);
      }
      if (PointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointId);
      }
      if (allianceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllianceInfo);
      }
      if (HeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadFrame);
      }
      if (CareerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CareerType);
      }
      if (CareerLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CareerLv);
      }
      if (HeadSkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadSkinId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Pic.Length != 0) {
        Pic = other.Pic;
      }
      if (other.PicVer != 0) {
        PicVer = other.PicVer;
      }
      if (other.SrcServerId != 0) {
        SrcServerId = other.SrcServerId;
      }
      if (other.PointId != 0) {
        PointId = other.PointId;
      }
      if (other.allianceInfo_ != null) {
        if (allianceInfo_ == null) {
          AllianceInfo = new global::Protobuf.ReportAllianceInfo();
        }
        AllianceInfo.MergeFrom(other.AllianceInfo);
      }
      if (other.HeadFrame != 0) {
        HeadFrame = other.HeadFrame;
      }
      if (other.CareerType != 0) {
        CareerType = other.CareerType;
      }
      if (other.CareerLv != 0) {
        CareerLv = other.CareerLv;
      }
      if (other.HeadSkinId != 0) {
        HeadSkinId = other.HeadSkinId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Pic = input.ReadString();
            break;
          }
          case 32: {
            PicVer = input.ReadInt32();
            break;
          }
          case 40: {
            SrcServerId = input.ReadInt32();
            break;
          }
          case 48: {
            PointId = input.ReadInt32();
            break;
          }
          case 58: {
            if (allianceInfo_ == null) {
              AllianceInfo = new global::Protobuf.ReportAllianceInfo();
            }
            input.ReadMessage(AllianceInfo);
            break;
          }
          case 64: {
            HeadFrame = input.ReadInt32();
            break;
          }
          case 72: {
            CareerType = input.ReadInt32();
            break;
          }
          case 80: {
            CareerLv = input.ReadInt32();
            break;
          }
          case 88: {
            HeadSkinId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BaseRoundReport : pb::IMessage<BaseRoundReport> {
    private static readonly pb::MessageParser<BaseRoundReport> _parser = new pb::MessageParser<BaseRoundReport>(() => new BaseRoundReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseRoundReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRoundReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRoundReport(BaseRoundReport other) : this() {
      triggerIndex_ = other.triggerIndex_;
      round_ = other.round_;
      value_ = other.value_;
      type_ = other.type_;
      skillId_ = other.skillId_;
      skillLevel_ = other.skillLevel_;
      heroId_ = other.heroId_;
      targetIndex_ = other.targetIndex_;
      health_ = other.health_;
      param_ = other.param_;
      specialParam_ = other.specialParam_;
      damageEffectType_ = other.damageEffectType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRoundReport Clone() {
      return new BaseRoundReport(this);
    }

    /// <summary>Field number for the "triggerIndex" field.</summary>
    public const int TriggerIndexFieldNumber = 1;
    private int triggerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerIndex {
      get { return triggerIndex_; }
      set {
        triggerIndex_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private int round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 5;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "skillLevel" field.</summary>
    public const int SkillLevelFieldNumber = 6;
    private int skillLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 7;
    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "targetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 8;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 9;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 10;
    private int param_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    /// <summary>Field number for the "specialParam" field.</summary>
    public const int SpecialParamFieldNumber = 11;
    private string specialParam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecialParam {
      get { return specialParam_; }
      set {
        specialParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damageEffectType" field.</summary>
    public const int DamageEffectTypeFieldNumber = 12;
    private int damageEffectType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageEffectType {
      get { return damageEffectType_; }
      set {
        damageEffectType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseRoundReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseRoundReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerIndex != other.TriggerIndex) return false;
      if (Round != other.Round) return false;
      if (Value != other.Value) return false;
      if (Type != other.Type) return false;
      if (SkillId != other.SkillId) return false;
      if (SkillLevel != other.SkillLevel) return false;
      if (HeroId != other.HeroId) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (Health != other.Health) return false;
      if (Param != other.Param) return false;
      if (SpecialParam != other.SpecialParam) return false;
      if (DamageEffectType != other.DamageEffectType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerIndex != 0) hash ^= TriggerIndex.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (SkillLevel != 0) hash ^= SkillLevel.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Param != 0) hash ^= Param.GetHashCode();
      if (SpecialParam.Length != 0) hash ^= SpecialParam.GetHashCode();
      if (DamageEffectType != 0) hash ^= DamageEffectType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TriggerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerIndex);
      }
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Round);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (SkillId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkillId);
      }
      if (SkillLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkillLevel);
      }
      if (HeroId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeroId);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TargetIndex);
      }
      if (Health != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Health);
      }
      if (Param != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Param);
      }
      if (SpecialParam.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SpecialParam);
      }
      if (DamageEffectType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DamageEffectType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TriggerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerIndex);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
      }
      if (SpecialParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpecialParam);
      }
      if (DamageEffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageEffectType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseRoundReport other) {
      if (other == null) {
        return;
      }
      if (other.TriggerIndex != 0) {
        TriggerIndex = other.TriggerIndex;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.SkillLevel != 0) {
        SkillLevel = other.SkillLevel;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
      if (other.SpecialParam.Length != 0) {
        SpecialParam = other.SpecialParam;
      }
      if (other.DamageEffectType != 0) {
        DamageEffectType = other.DamageEffectType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TriggerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Round = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            SkillId = input.ReadInt32();
            break;
          }
          case 48: {
            SkillLevel = input.ReadInt32();
            break;
          }
          case 56: {
            HeroId = input.ReadInt32();
            break;
          }
          case 64: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 72: {
            Health = input.ReadInt32();
            break;
          }
          case 80: {
            Param = input.ReadInt32();
            break;
          }
          case 90: {
            SpecialParam = input.ReadString();
            break;
          }
          case 96: {
            DamageEffectType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectRoundReport : pb::IMessage<EffectRoundReport> {
    private static readonly pb::MessageParser<EffectRoundReport> _parser = new pb::MessageParser<EffectRoundReport>(() => new EffectRoundReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectRoundReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoundReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoundReport(EffectRoundReport other) : this() {
      baseReport_ = other.baseReport_ != null ? other.baseReport_.Clone() : null;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoundReport Clone() {
      return new EffectRoundReport(this);
    }

    /// <summary>Field number for the "baseReport" field.</summary>
    public const int BaseReportFieldNumber = 1;
    private global::Protobuf.BaseRoundReport baseReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.BaseRoundReport BaseReport {
      get { return baseReport_; }
      set {
        baseReport_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    /// <summary>
    ///持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectRoundReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectRoundReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReport, other.BaseReport)) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReport_ != null) hash ^= BaseReport.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReport_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReport);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReport);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectRoundReport other) {
      if (other == null) {
        return;
      }
      if (other.baseReport_ != null) {
        if (baseReport_ == null) {
          BaseReport = new global::Protobuf.BaseRoundReport();
        }
        BaseReport.MergeFrom(other.BaseReport);
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (baseReport_ == null) {
              BaseReport = new global::Protobuf.BaseRoundReport();
            }
            input.ReadMessage(BaseReport);
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportRewardItem : pb::IMessage<ReportRewardItem> {
    private static readonly pb::MessageParser<ReportRewardItem> _parser = new pb::MessageParser<ReportRewardItem>(() => new ReportRewardItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportRewardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardItem(ReportRewardItem other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardItem Clone() {
      return new ReportRewardItem(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportRewardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportRewardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportRewardItem other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportRewardResource : pb::IMessage<ReportRewardResource> {
    private static readonly pb::MessageParser<ReportRewardResource> _parser = new pb::MessageParser<ReportRewardResource>(() => new ReportRewardResource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportRewardResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardResource(ReportRewardResource other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardResource Clone() {
      return new ReportRewardResource(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportRewardResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportRewardResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportRewardResource other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportRewardHeroExp : pb::IMessage<ReportRewardHeroExp> {
    private static readonly pb::MessageParser<ReportRewardHeroExp> _parser = new pb::MessageParser<ReportRewardHeroExp>(() => new ReportRewardHeroExp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportRewardHeroExp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardHeroExp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardHeroExp(ReportRewardHeroExp other) : this() {
      heroId_ = other.heroId_;
      level_ = other.level_;
      expAdd_ = other.expAdd_;
      nowExp_ = other.nowExp_;
      oldExp_ = other.oldExp_;
      heroUuid_ = other.heroUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardHeroExp Clone() {
      return new ReportRewardHeroExp(this);
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "expAdd" field.</summary>
    public const int ExpAddFieldNumber = 3;
    private int expAdd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpAdd {
      get { return expAdd_; }
      set {
        expAdd_ = value;
      }
    }

    /// <summary>Field number for the "nowExp" field.</summary>
    public const int NowExpFieldNumber = 4;
    private int nowExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowExp {
      get { return nowExp_; }
      set {
        nowExp_ = value;
      }
    }

    /// <summary>Field number for the "oldExp" field.</summary>
    public const int OldExpFieldNumber = 5;
    private int oldExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldExp {
      get { return oldExp_; }
      set {
        oldExp_ = value;
      }
    }

    /// <summary>Field number for the "heroUuid" field.</summary>
    public const int HeroUuidFieldNumber = 6;
    private long heroUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroUuid {
      get { return heroUuid_; }
      set {
        heroUuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportRewardHeroExp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportRewardHeroExp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (Level != other.Level) return false;
      if (ExpAdd != other.ExpAdd) return false;
      if (NowExp != other.NowExp) return false;
      if (OldExp != other.OldExp) return false;
      if (HeroUuid != other.HeroUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ExpAdd != 0) hash ^= ExpAdd.GetHashCode();
      if (NowExp != 0) hash ^= NowExp.GetHashCode();
      if (OldExp != 0) hash ^= OldExp.GetHashCode();
      if (HeroUuid != 0L) hash ^= HeroUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (ExpAdd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExpAdd);
      }
      if (NowExp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NowExp);
      }
      if (OldExp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OldExp);
      }
      if (HeroUuid != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(HeroUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ExpAdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpAdd);
      }
      if (NowExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowExp);
      }
      if (OldExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldExp);
      }
      if (HeroUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportRewardHeroExp other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ExpAdd != 0) {
        ExpAdd = other.ExpAdd;
      }
      if (other.NowExp != 0) {
        NowExp = other.NowExp;
      }
      if (other.OldExp != 0) {
        OldExp = other.OldExp;
      }
      if (other.HeroUuid != 0L) {
        HeroUuid = other.HeroUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            ExpAdd = input.ReadInt32();
            break;
          }
          case 32: {
            NowExp = input.ReadInt32();
            break;
          }
          case 40: {
            OldExp = input.ReadInt32();
            break;
          }
          case 48: {
            HeroUuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportReward : pb::IMessage<ReportReward> {
    private static readonly pb::MessageParser<ReportReward> _parser = new pb::MessageParser<ReportReward>(() => new ReportReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportReward(ReportReward other) : this() {
      rewardItems_ = other.rewardItems_.Clone();
      rewardResourceItems_ = other.rewardResourceItems_.Clone();
      rewardHeroExps_ = other.rewardHeroExps_.Clone();
      rewardResources_ = other.rewardResources_.Clone();
      plunderResRate_ = other.plunderResRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportReward Clone() {
      return new ReportReward(this);
    }

    /// <summary>Field number for the "rewardItems" field.</summary>
    public const int RewardItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.ReportRewardItem> _repeated_rewardItems_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.ReportRewardItem.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.ReportRewardItem> rewardItems_ = new pbc::RepeatedField<global::Protobuf.ReportRewardItem>();
    /// <summary>
    /// 奖励道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.ReportRewardItem> RewardItems {
      get { return rewardItems_; }
    }

    /// <summary>Field number for the "rewardResourceItems" field.</summary>
    public const int RewardResourceItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protobuf.ReportRewardItem> _repeated_rewardResourceItems_codec
        = pb::FieldCodec.ForMessage(18, global::Protobuf.ReportRewardItem.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.ReportRewardItem> rewardResourceItems_ = new pbc::RepeatedField<global::Protobuf.ReportRewardItem>();
    /// <summary>
    /// 奖励资源道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.ReportRewardItem> RewardResourceItems {
      get { return rewardResourceItems_; }
    }

    /// <summary>Field number for the "rewardHeroExps" field.</summary>
    public const int RewardHeroExpsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protobuf.ReportRewardHeroExp> _repeated_rewardHeroExps_codec
        = pb::FieldCodec.ForMessage(26, global::Protobuf.ReportRewardHeroExp.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.ReportRewardHeroExp> rewardHeroExps_ = new pbc::RepeatedField<global::Protobuf.ReportRewardHeroExp>();
    /// <summary>
    /// 奖励英雄经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.ReportRewardHeroExp> RewardHeroExps {
      get { return rewardHeroExps_; }
    }

    /// <summary>Field number for the "rewardResources" field.</summary>
    public const int RewardResourcesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protobuf.ReportRewardResource> _repeated_rewardResources_codec
        = pb::FieldCodec.ForMessage(34, global::Protobuf.ReportRewardResource.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.ReportRewardResource> rewardResources_ = new pbc::RepeatedField<global::Protobuf.ReportRewardResource>();
    /// <summary>
    /// 掠夺资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.ReportRewardResource> RewardResources {
      get { return rewardResources_; }
    }

    /// <summary>Field number for the "plunderResRate" field.</summary>
    public const int PlunderResRateFieldNumber = 5;
    private int plunderResRate_;
    /// <summary>
    ///掠夺比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlunderResRate {
      get { return plunderResRate_; }
      set {
        plunderResRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardItems_.Equals(other.rewardItems_)) return false;
      if(!rewardResourceItems_.Equals(other.rewardResourceItems_)) return false;
      if(!rewardHeroExps_.Equals(other.rewardHeroExps_)) return false;
      if(!rewardResources_.Equals(other.rewardResources_)) return false;
      if (PlunderResRate != other.PlunderResRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardItems_.GetHashCode();
      hash ^= rewardResourceItems_.GetHashCode();
      hash ^= rewardHeroExps_.GetHashCode();
      hash ^= rewardResources_.GetHashCode();
      if (PlunderResRate != 0) hash ^= PlunderResRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardItems_.WriteTo(output, _repeated_rewardItems_codec);
      rewardResourceItems_.WriteTo(output, _repeated_rewardResourceItems_codec);
      rewardHeroExps_.WriteTo(output, _repeated_rewardHeroExps_codec);
      rewardResources_.WriteTo(output, _repeated_rewardResources_codec);
      if (PlunderResRate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlunderResRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardItems_.CalculateSize(_repeated_rewardItems_codec);
      size += rewardResourceItems_.CalculateSize(_repeated_rewardResourceItems_codec);
      size += rewardHeroExps_.CalculateSize(_repeated_rewardHeroExps_codec);
      size += rewardResources_.CalculateSize(_repeated_rewardResources_codec);
      if (PlunderResRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlunderResRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportReward other) {
      if (other == null) {
        return;
      }
      rewardItems_.Add(other.rewardItems_);
      rewardResourceItems_.Add(other.rewardResourceItems_);
      rewardHeroExps_.Add(other.rewardHeroExps_);
      rewardResources_.Add(other.rewardResources_);
      if (other.PlunderResRate != 0) {
        PlunderResRate = other.PlunderResRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardItems_.AddEntriesFrom(input, _repeated_rewardItems_codec);
            break;
          }
          case 18: {
            rewardResourceItems_.AddEntriesFrom(input, _repeated_rewardResourceItems_codec);
            break;
          }
          case 26: {
            rewardHeroExps_.AddEntriesFrom(input, _repeated_rewardHeroExps_codec);
            break;
          }
          case 34: {
            rewardResources_.AddEntriesFrom(input, _repeated_rewardResources_codec);
            break;
          }
          case 40: {
            PlunderResRate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 他人奖励
  /// </summary>
  public sealed partial class AllReportReward : pb::IMessage<AllReportReward> {
    private static readonly pb::MessageParser<AllReportReward> _parser = new pb::MessageParser<AllReportReward>(() => new AllReportReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllReportReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllReportReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllReportReward(AllReportReward other) : this() {
      reward_ = other.reward_ != null ? other.reward_.Clone() : null;
      uuid_ = other.uuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllReportReward Clone() {
      return new AllReportReward(this);
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 1;
    private global::Protobuf.ReportReward reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ReportReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllReportReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllReportReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reward, other.Reward)) return false;
      if (Uuid != other.Uuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllReportReward other) {
      if (other == null) {
        return;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          Reward = new global::Protobuf.ReportReward();
        }
        Reward.MergeFrom(other.Reward);
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reward_ == null) {
              Reward = new global::Protobuf.ReportReward();
            }
            input.ReadMessage(Reward);
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 行军战斗单位
  /// </summary>
  public sealed partial class ArmyCombatUnit : pb::IMessage<ArmyCombatUnit> {
    private static readonly pb::MessageParser<ArmyCombatUnit> _parser = new pb::MessageParser<ArmyCombatUnit>(() => new ArmyCombatUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmyCombatUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyCombatUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyCombatUnit(ArmyCombatUnit other) : this() {
      simpleCombatUnit_ = other.simpleCombatUnit_ != null ? other.simpleCombatUnit_.Clone() : null;
      armyInfo_ = other.armyInfo_ != null ? other.armyInfo_.Clone() : null;
      specialArmyType_ = other.specialArmyType_;
      formationIndex_ = other.formationIndex_;
      inAllianceTerritory_ = other.inAllianceTerritory_;
      param_ = other.param_;
      edenSignal_ = other.edenSignal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyCombatUnit Clone() {
      return new ArmyCombatUnit(this);
    }

    /// <summary>Field number for the "simpleCombatUnit" field.</summary>
    public const int SimpleCombatUnitFieldNumber = 1;
    private global::Protobuf.SimpleCombatUnit simpleCombatUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SimpleCombatUnit SimpleCombatUnit {
      get { return simpleCombatUnit_; }
      set {
        simpleCombatUnit_ = value;
      }
    }

    /// <summary>Field number for the "armyInfo" field.</summary>
    public const int ArmyInfoFieldNumber = 2;
    private global::Protobuf.ArmyUnitInfo armyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyUnitInfo ArmyInfo {
      get { return armyInfo_; }
      set {
        armyInfo_ = value;
      }
    }

    /// <summary>Field number for the "specialArmyType" field.</summary>
    public const int SpecialArmyTypeFieldNumber = 3;
    private int specialArmyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialArmyType {
      get { return specialArmyType_; }
      set {
        specialArmyType_ = value;
      }
    }

    /// <summary>Field number for the "formationIndex" field.</summary>
    public const int FormationIndexFieldNumber = 4;
    private int formationIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FormationIndex {
      get { return formationIndex_; }
      set {
        formationIndex_ = value;
      }
    }

    /// <summary>Field number for the "inAllianceTerritory" field.</summary>
    public const int InAllianceTerritoryFieldNumber = 5;
    private int inAllianceTerritory_;
    /// <summary>
    ///战斗发生时是否在联盟领地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InAllianceTerritory {
      get { return inAllianceTerritory_; }
      set {
        inAllianceTerritory_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 6;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "edenSignal" field.</summary>
    public const int EdenSignalFieldNumber = 7;
    private float edenSignal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EdenSignal {
      get { return edenSignal_; }
      set {
        edenSignal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmyCombatUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmyCombatUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SimpleCombatUnit, other.SimpleCombatUnit)) return false;
      if (!object.Equals(ArmyInfo, other.ArmyInfo)) return false;
      if (SpecialArmyType != other.SpecialArmyType) return false;
      if (FormationIndex != other.FormationIndex) return false;
      if (InAllianceTerritory != other.InAllianceTerritory) return false;
      if (Param != other.Param) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EdenSignal, other.EdenSignal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (simpleCombatUnit_ != null) hash ^= SimpleCombatUnit.GetHashCode();
      if (armyInfo_ != null) hash ^= ArmyInfo.GetHashCode();
      if (SpecialArmyType != 0) hash ^= SpecialArmyType.GetHashCode();
      if (FormationIndex != 0) hash ^= FormationIndex.GetHashCode();
      if (InAllianceTerritory != 0) hash ^= InAllianceTerritory.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (EdenSignal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EdenSignal);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (simpleCombatUnit_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SimpleCombatUnit);
      }
      if (armyInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArmyInfo);
      }
      if (SpecialArmyType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpecialArmyType);
      }
      if (FormationIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FormationIndex);
      }
      if (InAllianceTerritory != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InAllianceTerritory);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Param);
      }
      if (EdenSignal != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(EdenSignal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (simpleCombatUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleCombatUnit);
      }
      if (armyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmyInfo);
      }
      if (SpecialArmyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialArmyType);
      }
      if (FormationIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FormationIndex);
      }
      if (InAllianceTerritory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InAllianceTerritory);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (EdenSignal != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmyCombatUnit other) {
      if (other == null) {
        return;
      }
      if (other.simpleCombatUnit_ != null) {
        if (simpleCombatUnit_ == null) {
          SimpleCombatUnit = new global::Protobuf.SimpleCombatUnit();
        }
        SimpleCombatUnit.MergeFrom(other.SimpleCombatUnit);
      }
      if (other.armyInfo_ != null) {
        if (armyInfo_ == null) {
          ArmyInfo = new global::Protobuf.ArmyUnitInfo();
        }
        ArmyInfo.MergeFrom(other.ArmyInfo);
      }
      if (other.SpecialArmyType != 0) {
        SpecialArmyType = other.SpecialArmyType;
      }
      if (other.FormationIndex != 0) {
        FormationIndex = other.FormationIndex;
      }
      if (other.InAllianceTerritory != 0) {
        InAllianceTerritory = other.InAllianceTerritory;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      if (other.EdenSignal != 0F) {
        EdenSignal = other.EdenSignal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (simpleCombatUnit_ == null) {
              SimpleCombatUnit = new global::Protobuf.SimpleCombatUnit();
            }
            input.ReadMessage(SimpleCombatUnit);
            break;
          }
          case 18: {
            if (armyInfo_ == null) {
              ArmyInfo = new global::Protobuf.ArmyUnitInfo();
            }
            input.ReadMessage(ArmyInfo);
            break;
          }
          case 24: {
            SpecialArmyType = input.ReadInt32();
            break;
          }
          case 32: {
            FormationIndex = input.ReadInt32();
            break;
          }
          case 40: {
            InAllianceTerritory = input.ReadInt32();
            break;
          }
          case 50: {
            Param = input.ReadString();
            break;
          }
          case 61: {
            EdenSignal = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 集结系战斗单位
  /// </summary>
  public sealed partial class CombineCombatUnit : pb::IMessage<CombineCombatUnit> {
    private static readonly pb::MessageParser<CombineCombatUnit> _parser = new pb::MessageParser<CombineCombatUnit>(() => new CombineCombatUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombineCombatUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineCombatUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineCombatUnit(CombineCombatUnit other) : this() {
      simpleCombatUnit_ = other.simpleCombatUnit_ != null ? other.simpleCombatUnit_.Clone() : null;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombineCombatUnit Clone() {
      return new CombineCombatUnit(this);
    }

    /// <summary>Field number for the "simpleCombatUnit" field.</summary>
    public const int SimpleCombatUnitFieldNumber = 1;
    private global::Protobuf.SimpleCombatUnit simpleCombatUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SimpleCombatUnit SimpleCombatUnit {
      get { return simpleCombatUnit_; }
      set {
        simpleCombatUnit_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protobuf.ArmyCombatUnit> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::Protobuf.ArmyCombatUnit.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.ArmyCombatUnit> members_ = new pbc::RepeatedField<global::Protobuf.ArmyCombatUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.ArmyCombatUnit> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombineCombatUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombineCombatUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SimpleCombatUnit, other.SimpleCombatUnit)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (simpleCombatUnit_ != null) hash ^= SimpleCombatUnit.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (simpleCombatUnit_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SimpleCombatUnit);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (simpleCombatUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleCombatUnit);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombineCombatUnit other) {
      if (other == null) {
        return;
      }
      if (other.simpleCombatUnit_ != null) {
        if (simpleCombatUnit_ == null) {
          SimpleCombatUnit = new global::Protobuf.SimpleCombatUnit();
        }
        SimpleCombatUnit.MergeFrom(other.SimpleCombatUnit);
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (simpleCombatUnit_ == null) {
              SimpleCombatUnit = new global::Protobuf.SimpleCombatUnit();
            }
            input.ReadMessage(SimpleCombatUnit);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单一战斗单位
  /// </summary>
  public sealed partial class SimpleCombatUnit : pb::IMessage<SimpleCombatUnit> {
    private static readonly pb::MessageParser<SimpleCombatUnit> _parser = new pb::MessageParser<SimpleCombatUnit>(() => new SimpleCombatUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleCombatUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleCombatUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleCombatUnit(SimpleCombatUnit other) : this() {
      initHealth_ = other.initHealth_;
      health_ = other.health_;
      uuid_ = other.uuid_;
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleCombatUnit Clone() {
      return new SimpleCombatUnit(this);
    }

    /// <summary>Field number for the "initHealth" field.</summary>
    public const int InitHealthFieldNumber = 1;
    private int initHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitHealth {
      get { return initHealth_; }
      set {
        initHealth_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 3;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleCombatUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleCombatUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InitHealth != other.InitHealth) return false;
      if (Health != other.Health) return false;
      if (Uuid != other.Uuid) return false;
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InitHealth != 0) hash ^= InitHealth.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InitHealth != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InitHealth);
      }
      if (Health != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Health);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Uuid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InitHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitHealth);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleCombatUnit other) {
      if (other == null) {
        return;
      }
      if (other.InitHealth != 0) {
        InitHealth = other.InitHealth;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InitHealth = input.ReadInt32();
            break;
          }
          case 16: {
            Health = input.ReadInt32();
            break;
          }
          case 24: {
            Uuid = input.ReadInt64();
            break;
          }
          case 34: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗单位信息
  /// </summary>
  public sealed partial class CombatUnit : pb::IMessage<CombatUnit> {
    private static readonly pb::MessageParser<CombatUnit> _parser = new pb::MessageParser<CombatUnit>(() => new CombatUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatUnit(CombatUnit other) : this() {
      type_ = other.type_;
      armyCombatUnit_ = other.armyCombatUnit_ != null ? other.armyCombatUnit_.Clone() : null;
      combineCombatUnit_ = other.combineCombatUnit_ != null ? other.combineCombatUnit_.Clone() : null;
      simpleCombatUnit_ = other.simpleCombatUnit_ != null ? other.simpleCombatUnit_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatUnit Clone() {
      return new CombatUnit(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "armyCombatUnit" field.</summary>
    public const int ArmyCombatUnitFieldNumber = 2;
    private global::Protobuf.ArmyCombatUnit armyCombatUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyCombatUnit ArmyCombatUnit {
      get { return armyCombatUnit_; }
      set {
        armyCombatUnit_ = value;
      }
    }

    /// <summary>Field number for the "combineCombatUnit" field.</summary>
    public const int CombineCombatUnitFieldNumber = 3;
    private global::Protobuf.CombineCombatUnit combineCombatUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.CombineCombatUnit CombineCombatUnit {
      get { return combineCombatUnit_; }
      set {
        combineCombatUnit_ = value;
      }
    }

    /// <summary>Field number for the "simpleCombatUnit" field.</summary>
    public const int SimpleCombatUnitFieldNumber = 4;
    private global::Protobuf.SimpleCombatUnit simpleCombatUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.SimpleCombatUnit SimpleCombatUnit {
      get { return simpleCombatUnit_; }
      set {
        simpleCombatUnit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(ArmyCombatUnit, other.ArmyCombatUnit)) return false;
      if (!object.Equals(CombineCombatUnit, other.CombineCombatUnit)) return false;
      if (!object.Equals(SimpleCombatUnit, other.SimpleCombatUnit)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (armyCombatUnit_ != null) hash ^= ArmyCombatUnit.GetHashCode();
      if (combineCombatUnit_ != null) hash ^= CombineCombatUnit.GetHashCode();
      if (simpleCombatUnit_ != null) hash ^= SimpleCombatUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (armyCombatUnit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArmyCombatUnit);
      }
      if (combineCombatUnit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CombineCombatUnit);
      }
      if (simpleCombatUnit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SimpleCombatUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (armyCombatUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmyCombatUnit);
      }
      if (combineCombatUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CombineCombatUnit);
      }
      if (simpleCombatUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleCombatUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatUnit other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.armyCombatUnit_ != null) {
        if (armyCombatUnit_ == null) {
          ArmyCombatUnit = new global::Protobuf.ArmyCombatUnit();
        }
        ArmyCombatUnit.MergeFrom(other.ArmyCombatUnit);
      }
      if (other.combineCombatUnit_ != null) {
        if (combineCombatUnit_ == null) {
          CombineCombatUnit = new global::Protobuf.CombineCombatUnit();
        }
        CombineCombatUnit.MergeFrom(other.CombineCombatUnit);
      }
      if (other.simpleCombatUnit_ != null) {
        if (simpleCombatUnit_ == null) {
          SimpleCombatUnit = new global::Protobuf.SimpleCombatUnit();
        }
        SimpleCombatUnit.MergeFrom(other.SimpleCombatUnit);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (armyCombatUnit_ == null) {
              ArmyCombatUnit = new global::Protobuf.ArmyCombatUnit();
            }
            input.ReadMessage(ArmyCombatUnit);
            break;
          }
          case 26: {
            if (combineCombatUnit_ == null) {
              CombineCombatUnit = new global::Protobuf.CombineCombatUnit();
            }
            input.ReadMessage(CombineCombatUnit);
            break;
          }
          case 34: {
            if (simpleCombatUnit_ == null) {
              SimpleCombatUnit = new global::Protobuf.SimpleCombatUnit();
            }
            input.ReadMessage(SimpleCombatUnit);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伤害百分比
  /// </summary>
  public sealed partial class DamagePercentInfo : pb::IMessage<DamagePercentInfo> {
    private static readonly pb::MessageParser<DamagePercentInfo> _parser = new pb::MessageParser<DamagePercentInfo>(() => new DamagePercentInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DamagePercentInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamagePercentInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamagePercentInfo(DamagePercentInfo other) : this() {
      targetUuid_ = other.targetUuid_;
      damagePercent_ = other.damagePercent_;
      woundedPercent_ = other.woundedPercent_;
      injuredPercent_ = other.injuredPercent_;
      deadPercent_ = other.deadPercent_;
      selfUuid_ = other.selfUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamagePercentInfo Clone() {
      return new DamagePercentInfo(this);
    }

    /// <summary>Field number for the "targetUuid" field.</summary>
    public const int TargetUuidFieldNumber = 1;
    private long targetUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetUuid {
      get { return targetUuid_; }
      set {
        targetUuid_ = value;
      }
    }

    /// <summary>Field number for the "damagePercent" field.</summary>
    public const int DamagePercentFieldNumber = 2;
    private float damagePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamagePercent {
      get { return damagePercent_; }
      set {
        damagePercent_ = value;
      }
    }

    /// <summary>Field number for the "woundedPercent" field.</summary>
    public const int WoundedPercentFieldNumber = 3;
    private float woundedPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WoundedPercent {
      get { return woundedPercent_; }
      set {
        woundedPercent_ = value;
      }
    }

    /// <summary>Field number for the "injuredPercent" field.</summary>
    public const int InjuredPercentFieldNumber = 4;
    private float injuredPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InjuredPercent {
      get { return injuredPercent_; }
      set {
        injuredPercent_ = value;
      }
    }

    /// <summary>Field number for the "deadPercent" field.</summary>
    public const int DeadPercentFieldNumber = 5;
    private float deadPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeadPercent {
      get { return deadPercent_; }
      set {
        deadPercent_ = value;
      }
    }

    /// <summary>Field number for the "selfUuid" field.</summary>
    public const int SelfUuidFieldNumber = 6;
    private long selfUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelfUuid {
      get { return selfUuid_; }
      set {
        selfUuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DamagePercentInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DamagePercentInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetUuid != other.TargetUuid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamagePercent, other.DamagePercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WoundedPercent, other.WoundedPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InjuredPercent, other.InjuredPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeadPercent, other.DeadPercent)) return false;
      if (SelfUuid != other.SelfUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetUuid != 0L) hash ^= TargetUuid.GetHashCode();
      if (DamagePercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamagePercent);
      if (WoundedPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WoundedPercent);
      if (InjuredPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InjuredPercent);
      if (DeadPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeadPercent);
      if (SelfUuid != 0L) hash ^= SelfUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetUuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetUuid);
      }
      if (DamagePercent != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DamagePercent);
      }
      if (WoundedPercent != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(WoundedPercent);
      }
      if (InjuredPercent != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(InjuredPercent);
      }
      if (DeadPercent != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DeadPercent);
      }
      if (SelfUuid != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SelfUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetUuid);
      }
      if (DamagePercent != 0F) {
        size += 1 + 4;
      }
      if (WoundedPercent != 0F) {
        size += 1 + 4;
      }
      if (InjuredPercent != 0F) {
        size += 1 + 4;
      }
      if (DeadPercent != 0F) {
        size += 1 + 4;
      }
      if (SelfUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DamagePercentInfo other) {
      if (other == null) {
        return;
      }
      if (other.TargetUuid != 0L) {
        TargetUuid = other.TargetUuid;
      }
      if (other.DamagePercent != 0F) {
        DamagePercent = other.DamagePercent;
      }
      if (other.WoundedPercent != 0F) {
        WoundedPercent = other.WoundedPercent;
      }
      if (other.InjuredPercent != 0F) {
        InjuredPercent = other.InjuredPercent;
      }
      if (other.DeadPercent != 0F) {
        DeadPercent = other.DeadPercent;
      }
      if (other.SelfUuid != 0L) {
        SelfUuid = other.SelfUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetUuid = input.ReadInt64();
            break;
          }
          case 21: {
            DamagePercent = input.ReadFloat();
            break;
          }
          case 29: {
            WoundedPercent = input.ReadFloat();
            break;
          }
          case 37: {
            InjuredPercent = input.ReadFloat();
            break;
          }
          case 45: {
            DeadPercent = input.ReadFloat();
            break;
          }
          case 48: {
            SelfUuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArmyResultBase : pb::IMessage<ArmyResultBase> {
    private static readonly pb::MessageParser<ArmyResultBase> _parser = new pb::MessageParser<ArmyResultBase>(() => new ArmyResultBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmyResultBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyResultBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyResultBase(ArmyResultBase other) : this() {
      pointId_ = other.pointId_;
      armyObj_ = other.armyObj_ != null ? other.armyObj_.Clone() : null;
      afterArmyObj_ = other.afterArmyObj_ != null ? other.afterArmyObj_.Clone() : null;
      destroyValue_ = other.destroyValue_.Clone();
      damagePercent_ = other.damagePercent_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyResultBase Clone() {
      return new ArmyResultBase(this);
    }

    /// <summary>Field number for the "pointId" field.</summary>
    public const int PointIdFieldNumber = 1;
    private int pointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointId {
      get { return pointId_; }
      set {
        pointId_ = value;
      }
    }

    /// <summary>Field number for the "armyObj" field.</summary>
    public const int ArmyObjFieldNumber = 2;
    private global::Protobuf.CombatUnit armyObj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.CombatUnit ArmyObj {
      get { return armyObj_; }
      set {
        armyObj_ = value;
      }
    }

    /// <summary>Field number for the "afterArmyObj" field.</summary>
    public const int AfterArmyObjFieldNumber = 3;
    private global::Protobuf.CombatUnit afterArmyObj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.CombatUnit AfterArmyObj {
      get { return afterArmyObj_; }
      set {
        afterArmyObj_ = value;
      }
    }

    /// <summary>Field number for the "destroyValue" field.</summary>
    public const int DestroyValueFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_destroyValue_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> destroyValue_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DestroyValue {
      get { return destroyValue_; }
    }

    /// <summary>Field number for the "damagePercent" field.</summary>
    public const int DamagePercentFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protobuf.DamagePercentInfo> _repeated_damagePercent_codec
        = pb::FieldCodec.ForMessage(42, global::Protobuf.DamagePercentInfo.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.DamagePercentInfo> damagePercent_ = new pbc::RepeatedField<global::Protobuf.DamagePercentInfo>();
    /// <summary>
    /// 单位受伤占比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.DamagePercentInfo> DamagePercent {
      get { return damagePercent_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmyResultBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmyResultBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PointId != other.PointId) return false;
      if (!object.Equals(ArmyObj, other.ArmyObj)) return false;
      if (!object.Equals(AfterArmyObj, other.AfterArmyObj)) return false;
      if(!destroyValue_.Equals(other.destroyValue_)) return false;
      if(!damagePercent_.Equals(other.damagePercent_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PointId != 0) hash ^= PointId.GetHashCode();
      if (armyObj_ != null) hash ^= ArmyObj.GetHashCode();
      if (afterArmyObj_ != null) hash ^= AfterArmyObj.GetHashCode();
      hash ^= destroyValue_.GetHashCode();
      hash ^= damagePercent_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PointId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PointId);
      }
      if (armyObj_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArmyObj);
      }
      if (afterArmyObj_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AfterArmyObj);
      }
      destroyValue_.WriteTo(output, _repeated_destroyValue_codec);
      damagePercent_.WriteTo(output, _repeated_damagePercent_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointId);
      }
      if (armyObj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmyObj);
      }
      if (afterArmyObj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AfterArmyObj);
      }
      size += destroyValue_.CalculateSize(_repeated_destroyValue_codec);
      size += damagePercent_.CalculateSize(_repeated_damagePercent_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmyResultBase other) {
      if (other == null) {
        return;
      }
      if (other.PointId != 0) {
        PointId = other.PointId;
      }
      if (other.armyObj_ != null) {
        if (armyObj_ == null) {
          ArmyObj = new global::Protobuf.CombatUnit();
        }
        ArmyObj.MergeFrom(other.ArmyObj);
      }
      if (other.afterArmyObj_ != null) {
        if (afterArmyObj_ == null) {
          AfterArmyObj = new global::Protobuf.CombatUnit();
        }
        AfterArmyObj.MergeFrom(other.AfterArmyObj);
      }
      destroyValue_.Add(other.destroyValue_);
      damagePercent_.Add(other.damagePercent_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PointId = input.ReadInt32();
            break;
          }
          case 18: {
            if (armyObj_ == null) {
              ArmyObj = new global::Protobuf.CombatUnit();
            }
            input.ReadMessage(ArmyObj);
            break;
          }
          case 26: {
            if (afterArmyObj_ == null) {
              AfterArmyObj = new global::Protobuf.CombatUnit();
            }
            input.ReadMessage(AfterArmyObj);
            break;
          }
          case 34:
          case 32: {
            destroyValue_.AddEntriesFrom(input, _repeated_destroyValue_codec);
            break;
          }
          case 42: {
            damagePercent_.AddEntriesFrom(input, _repeated_damagePercent_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildArmyResult : pb::IMessage<BuildArmyResult> {
    private static readonly pb::MessageParser<BuildArmyResult> _parser = new pb::MessageParser<BuildArmyResult>(() => new BuildArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildArmyResult(BuildArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      level_ = other.level_;
      buildId_ = other.buildId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildArmyResult Clone() {
      return new BuildArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 3;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (Level != other.Level) return false;
      if (BuildId != other.BuildId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (BuildId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            BuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DragonBuildArmyResult : pb::IMessage<DragonBuildArmyResult> {
    private static readonly pb::MessageParser<DragonBuildArmyResult> _parser = new pb::MessageParser<DragonBuildArmyResult>(() => new DragonBuildArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DragonBuildArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonBuildArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonBuildArmyResult(DragonBuildArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      buildId_ = other.buildId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DragonBuildArmyResult Clone() {
      return new DragonBuildArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 2;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DragonBuildArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DragonBuildArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (BuildId != other.BuildId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (BuildId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DragonBuildArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            BuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossThroneBuildArmyResult : pb::IMessage<CrossThroneBuildArmyResult> {
    private static readonly pb::MessageParser<CrossThroneBuildArmyResult> _parser = new pb::MessageParser<CrossThroneBuildArmyResult>(() => new CrossThroneBuildArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossThroneBuildArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossThroneBuildArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossThroneBuildArmyResult(CrossThroneBuildArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      buildId_ = other.buildId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossThroneBuildArmyResult Clone() {
      return new CrossThroneBuildArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 2;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossThroneBuildArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossThroneBuildArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (BuildId != other.BuildId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (BuildId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossThroneBuildArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            BuildId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CityArmyResult : pb::IMessage<CityArmyResult> {
    private static readonly pb::MessageParser<CityArmyResult> _parser = new pb::MessageParser<CityArmyResult>(() => new CityArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CityArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CityArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CityArmyResult(CityArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      level_ = other.level_;
      isDirect_ = other.isDirect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CityArmyResult Clone() {
      return new CityArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "isDirect" field.</summary>
    public const int IsDirectFieldNumber = 3;
    private bool isDirect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDirect {
      get { return isDirect_; }
      set {
        isDirect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CityArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CityArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (Level != other.Level) return false;
      if (IsDirect != other.IsDirect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (IsDirect != false) hash ^= IsDirect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (IsDirect != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDirect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (IsDirect != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CityArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.IsDirect != false) {
        IsDirect = other.IsDirect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            IsDirect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterArmyResult : pb::IMessage<MonsterArmyResult> {
    private static readonly pb::MessageParser<MonsterArmyResult> _parser = new pb::MessageParser<MonsterArmyResult>(() => new MonsterArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterArmyResult(MonsterArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      monsterId_ = other.monsterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterArmyResult Clone() {
      return new MonsterArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (MonsterId != other.MonsterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllianceCityArmyResult : pb::IMessage<AllianceCityArmyResult> {
    private static readonly pb::MessageParser<AllianceCityArmyResult> _parser = new pb::MessageParser<AllianceCityArmyResult>(() => new AllianceCityArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllianceCityArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceCityArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceCityArmyResult(AllianceCityArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      cityId_ = other.cityId_;
      health_ = other.health_;
      initHealth_ = other.initHealth_;
      afterHealth_ = other.afterHealth_;
      cityName_ = other.cityName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceCityArmyResult Clone() {
      return new AllianceCityArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "cityId" field.</summary>
    public const int CityIdFieldNumber = 2;
    private int cityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 3;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "initHealth" field.</summary>
    public const int InitHealthFieldNumber = 4;
    private int initHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitHealth {
      get { return initHealth_; }
      set {
        initHealth_ = value;
      }
    }

    /// <summary>Field number for the "afterHealth" field.</summary>
    public const int AfterHealthFieldNumber = 5;
    private int afterHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterHealth {
      get { return afterHealth_; }
      set {
        afterHealth_ = value;
      }
    }

    /// <summary>Field number for the "cityName" field.</summary>
    public const int CityNameFieldNumber = 6;
    private string cityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllianceCityArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllianceCityArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (CityId != other.CityId) return false;
      if (Health != other.Health) return false;
      if (InitHealth != other.InitHealth) return false;
      if (AfterHealth != other.AfterHealth) return false;
      if (CityName != other.CityName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (CityId != 0) hash ^= CityId.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (InitHealth != 0) hash ^= InitHealth.GetHashCode();
      if (AfterHealth != 0) hash ^= AfterHealth.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (CityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CityId);
      }
      if (Health != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Health);
      }
      if (InitHealth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InitHealth);
      }
      if (AfterHealth != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AfterHealth);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CityName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (CityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CityId);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (InitHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitHealth);
      }
      if (AfterHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AfterHealth);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllianceCityArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.CityId != 0) {
        CityId = other.CityId;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.InitHealth != 0) {
        InitHealth = other.InitHealth;
      }
      if (other.AfterHealth != 0) {
        AfterHealth = other.AfterHealth;
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            CityId = input.ReadInt32();
            break;
          }
          case 24: {
            Health = input.ReadInt32();
            break;
          }
          case 32: {
            InitHealth = input.ReadInt32();
            break;
          }
          case 40: {
            AfterHealth = input.ReadInt32();
            break;
          }
          case 50: {
            CityName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PveArmyResult : pb::IMessage<PveArmyResult> {
    private static readonly pb::MessageParser<PveArmyResult> _parser = new pb::MessageParser<PveArmyResult>(() => new PveArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PveArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PveArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PveArmyResult(PveArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      monsterId_ = other.monsterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PveArmyResult Clone() {
      return new PveArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PveArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PveArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (MonsterId != other.MonsterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PveArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DesertArmyResult : pb::IMessage<DesertArmyResult> {
    private static readonly pb::MessageParser<DesertArmyResult> _parser = new pb::MessageParser<DesertArmyResult>(() => new DesertArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesertArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesertArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesertArmyResult(DesertArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      desertId_ = other.desertId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesertArmyResult Clone() {
      return new DesertArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "desertId" field.</summary>
    public const int DesertIdFieldNumber = 2;
    private int desertId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DesertId {
      get { return desertId_; }
      set {
        desertId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesertArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesertArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (DesertId != other.DesertId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (DesertId != 0) hash ^= DesertId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (DesertId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DesertId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (DesertId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DesertId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesertArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.DesertId != 0) {
        DesertId = other.DesertId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            DesertId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllianceBuildArmyResult : pb::IMessage<AllianceBuildArmyResult> {
    private static readonly pb::MessageParser<AllianceBuildArmyResult> _parser = new pb::MessageParser<AllianceBuildArmyResult>(() => new AllianceBuildArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllianceBuildArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceBuildArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceBuildArmyResult(AllianceBuildArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      buildId_ = other.buildId_;
      health_ = other.health_;
      initHealth_ = other.initHealth_;
      afterHealth_ = other.afterHealth_;
      buildLevel_ = other.buildLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllianceBuildArmyResult Clone() {
      return new AllianceBuildArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "buildId" field.</summary>
    public const int BuildIdFieldNumber = 2;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 3;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "initHealth" field.</summary>
    public const int InitHealthFieldNumber = 4;
    private int initHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitHealth {
      get { return initHealth_; }
      set {
        initHealth_ = value;
      }
    }

    /// <summary>Field number for the "afterHealth" field.</summary>
    public const int AfterHealthFieldNumber = 5;
    private int afterHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterHealth {
      get { return afterHealth_; }
      set {
        afterHealth_ = value;
      }
    }

    /// <summary>Field number for the "buildLevel" field.</summary>
    public const int BuildLevelFieldNumber = 6;
    private int buildLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildLevel {
      get { return buildLevel_; }
      set {
        buildLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllianceBuildArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllianceBuildArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (BuildId != other.BuildId) return false;
      if (Health != other.Health) return false;
      if (InitHealth != other.InitHealth) return false;
      if (AfterHealth != other.AfterHealth) return false;
      if (BuildLevel != other.BuildLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (BuildId != 0) hash ^= BuildId.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (InitHealth != 0) hash ^= InitHealth.GetHashCode();
      if (AfterHealth != 0) hash ^= AfterHealth.GetHashCode();
      if (BuildLevel != 0) hash ^= BuildLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (BuildId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildId);
      }
      if (Health != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Health);
      }
      if (InitHealth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InitHealth);
      }
      if (AfterHealth != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AfterHealth);
      }
      if (BuildLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BuildLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (BuildId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (InitHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitHealth);
      }
      if (AfterHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AfterHealth);
      }
      if (BuildLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllianceBuildArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.BuildId != 0) {
        BuildId = other.BuildId;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.InitHealth != 0) {
        InitHealth = other.InitHealth;
      }
      if (other.AfterHealth != 0) {
        AfterHealth = other.AfterHealth;
      }
      if (other.BuildLevel != 0) {
        BuildLevel = other.BuildLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            BuildId = input.ReadInt32();
            break;
          }
          case 24: {
            Health = input.ReadInt32();
            break;
          }
          case 32: {
            InitHealth = input.ReadInt32();
            break;
          }
          case 40: {
            AfterHealth = input.ReadInt32();
            break;
          }
          case 48: {
            BuildLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcCityArmyResult : pb::IMessage<NpcCityArmyResult> {
    private static readonly pb::MessageParser<NpcCityArmyResult> _parser = new pb::MessageParser<NpcCityArmyResult>(() => new NpcCityArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcCityArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityArmyResult(NpcCityArmyResult other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      health_ = other.health_;
      initHealth_ = other.initHealth_;
      afterHealth_ = other.afterHealth_;
      npcPlayerInfo_ = other.npcPlayerInfo_ != null ? other.npcPlayerInfo_.Clone() : null;
      isDirect_ = other.isDirect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityArmyResult Clone() {
      return new NpcCityArmyResult(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Protobuf.ArmyResultBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "initHealth" field.</summary>
    public const int InitHealthFieldNumber = 3;
    private int initHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitHealth {
      get { return initHealth_; }
      set {
        initHealth_ = value;
      }
    }

    /// <summary>Field number for the "afterHealth" field.</summary>
    public const int AfterHealthFieldNumber = 4;
    private int afterHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterHealth {
      get { return afterHealth_; }
      set {
        afterHealth_ = value;
      }
    }

    /// <summary>Field number for the "npcPlayerInfo" field.</summary>
    public const int NpcPlayerInfoFieldNumber = 5;
    private global::Protobuf.NpcPlayerInfo npcPlayerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.NpcPlayerInfo NpcPlayerInfo {
      get { return npcPlayerInfo_; }
      set {
        npcPlayerInfo_ = value;
      }
    }

    /// <summary>Field number for the "isDirect" field.</summary>
    public const int IsDirectFieldNumber = 6;
    private bool isDirect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDirect {
      get { return isDirect_; }
      set {
        isDirect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcCityArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcCityArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (Health != other.Health) return false;
      if (InitHealth != other.InitHealth) return false;
      if (AfterHealth != other.AfterHealth) return false;
      if (!object.Equals(NpcPlayerInfo, other.NpcPlayerInfo)) return false;
      if (IsDirect != other.IsDirect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (InitHealth != 0) hash ^= InitHealth.GetHashCode();
      if (AfterHealth != 0) hash ^= AfterHealth.GetHashCode();
      if (npcPlayerInfo_ != null) hash ^= NpcPlayerInfo.GetHashCode();
      if (IsDirect != false) hash ^= IsDirect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (Health != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Health);
      }
      if (InitHealth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InitHealth);
      }
      if (AfterHealth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AfterHealth);
      }
      if (npcPlayerInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(NpcPlayerInfo);
      }
      if (IsDirect != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsDirect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (InitHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitHealth);
      }
      if (AfterHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AfterHealth);
      }
      if (npcPlayerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcPlayerInfo);
      }
      if (IsDirect != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcCityArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Protobuf.ArmyResultBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.InitHealth != 0) {
        InitHealth = other.InitHealth;
      }
      if (other.AfterHealth != 0) {
        AfterHealth = other.AfterHealth;
      }
      if (other.npcPlayerInfo_ != null) {
        if (npcPlayerInfo_ == null) {
          NpcPlayerInfo = new global::Protobuf.NpcPlayerInfo();
        }
        NpcPlayerInfo.MergeFrom(other.NpcPlayerInfo);
      }
      if (other.IsDirect != false) {
        IsDirect = other.IsDirect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            Health = input.ReadInt32();
            break;
          }
          case 24: {
            InitHealth = input.ReadInt32();
            break;
          }
          case 32: {
            AfterHealth = input.ReadInt32();
            break;
          }
          case 42: {
            if (npcPlayerInfo_ == null) {
              NpcPlayerInfo = new global::Protobuf.NpcPlayerInfo();
            }
            input.ReadMessage(NpcPlayerInfo);
            break;
          }
          case 48: {
            IsDirect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗单位结果
  /// </summary>
  public sealed partial class ArmyResult : pb::IMessage<ArmyResult> {
    private static readonly pb::MessageParser<ArmyResult> _parser = new pb::MessageParser<ArmyResult>(() => new ArmyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyResult(ArmyResult other) : this() {
      type_ = other.type_;
      isDefeat_ = other.isDefeat_;
      buildArmyResult_ = other.buildArmyResult_ != null ? other.buildArmyResult_.Clone() : null;
      cityArmyResult_ = other.cityArmyResult_ != null ? other.cityArmyResult_.Clone() : null;
      simpleArmyResult_ = other.simpleArmyResult_ != null ? other.simpleArmyResult_.Clone() : null;
      monsterArmyResult_ = other.monsterArmyResult_ != null ? other.monsterArmyResult_.Clone() : null;
      allianceCityArmyResult_ = other.allianceCityArmyResult_ != null ? other.allianceCityArmyResult_.Clone() : null;
      pveArmyResult_ = other.pveArmyResult_ != null ? other.pveArmyResult_.Clone() : null;
      desertArmyResult_ = other.desertArmyResult_ != null ? other.desertArmyResult_.Clone() : null;
      allianceBuildArmyResult_ = other.allianceBuildArmyResult_ != null ? other.allianceBuildArmyResult_.Clone() : null;
      npcCityArmyResult_ = other.npcCityArmyResult_ != null ? other.npcCityArmyResult_.Clone() : null;
      dragonBuildingArmyResult_ = other.dragonBuildingArmyResult_ != null ? other.dragonBuildingArmyResult_.Clone() : null;
      crossThroneBuildArmyResult_ = other.crossThroneBuildArmyResult_ != null ? other.crossThroneBuildArmyResult_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyResult Clone() {
      return new ArmyResult(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "isDefeat" field.</summary>
    public const int IsDefeatFieldNumber = 2;
    private bool isDefeat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDefeat {
      get { return isDefeat_; }
      set {
        isDefeat_ = value;
      }
    }

    /// <summary>Field number for the "buildArmyResult" field.</summary>
    public const int BuildArmyResultFieldNumber = 3;
    private global::Protobuf.BuildArmyResult buildArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.BuildArmyResult BuildArmyResult {
      get { return buildArmyResult_; }
      set {
        buildArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "cityArmyResult" field.</summary>
    public const int CityArmyResultFieldNumber = 4;
    private global::Protobuf.CityArmyResult cityArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.CityArmyResult CityArmyResult {
      get { return cityArmyResult_; }
      set {
        cityArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "simpleArmyResult" field.</summary>
    public const int SimpleArmyResultFieldNumber = 5;
    private global::Protobuf.ArmyResultBase simpleArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResultBase SimpleArmyResult {
      get { return simpleArmyResult_; }
      set {
        simpleArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "monsterArmyResult" field.</summary>
    public const int MonsterArmyResultFieldNumber = 6;
    private global::Protobuf.MonsterArmyResult monsterArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.MonsterArmyResult MonsterArmyResult {
      get { return monsterArmyResult_; }
      set {
        monsterArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "allianceCityArmyResult" field.</summary>
    public const int AllianceCityArmyResultFieldNumber = 7;
    private global::Protobuf.AllianceCityArmyResult allianceCityArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.AllianceCityArmyResult AllianceCityArmyResult {
      get { return allianceCityArmyResult_; }
      set {
        allianceCityArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "pveArmyResult" field.</summary>
    public const int PveArmyResultFieldNumber = 8;
    private global::Protobuf.PveArmyResult pveArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.PveArmyResult PveArmyResult {
      get { return pveArmyResult_; }
      set {
        pveArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "desertArmyResult" field.</summary>
    public const int DesertArmyResultFieldNumber = 9;
    private global::Protobuf.DesertArmyResult desertArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.DesertArmyResult DesertArmyResult {
      get { return desertArmyResult_; }
      set {
        desertArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "allianceBuildArmyResult" field.</summary>
    public const int AllianceBuildArmyResultFieldNumber = 10;
    private global::Protobuf.AllianceBuildArmyResult allianceBuildArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.AllianceBuildArmyResult AllianceBuildArmyResult {
      get { return allianceBuildArmyResult_; }
      set {
        allianceBuildArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "npcCityArmyResult" field.</summary>
    public const int NpcCityArmyResultFieldNumber = 11;
    private global::Protobuf.NpcCityArmyResult npcCityArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.NpcCityArmyResult NpcCityArmyResult {
      get { return npcCityArmyResult_; }
      set {
        npcCityArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "dragonBuildingArmyResult" field.</summary>
    public const int DragonBuildingArmyResultFieldNumber = 12;
    private global::Protobuf.DragonBuildArmyResult dragonBuildingArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.DragonBuildArmyResult DragonBuildingArmyResult {
      get { return dragonBuildingArmyResult_; }
      set {
        dragonBuildingArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "crossThroneBuildArmyResult" field.</summary>
    public const int CrossThroneBuildArmyResultFieldNumber = 13;
    private global::Protobuf.CrossThroneBuildArmyResult crossThroneBuildArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.CrossThroneBuildArmyResult CrossThroneBuildArmyResult {
      get { return crossThroneBuildArmyResult_; }
      set {
        crossThroneBuildArmyResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (IsDefeat != other.IsDefeat) return false;
      if (!object.Equals(BuildArmyResult, other.BuildArmyResult)) return false;
      if (!object.Equals(CityArmyResult, other.CityArmyResult)) return false;
      if (!object.Equals(SimpleArmyResult, other.SimpleArmyResult)) return false;
      if (!object.Equals(MonsterArmyResult, other.MonsterArmyResult)) return false;
      if (!object.Equals(AllianceCityArmyResult, other.AllianceCityArmyResult)) return false;
      if (!object.Equals(PveArmyResult, other.PveArmyResult)) return false;
      if (!object.Equals(DesertArmyResult, other.DesertArmyResult)) return false;
      if (!object.Equals(AllianceBuildArmyResult, other.AllianceBuildArmyResult)) return false;
      if (!object.Equals(NpcCityArmyResult, other.NpcCityArmyResult)) return false;
      if (!object.Equals(DragonBuildingArmyResult, other.DragonBuildingArmyResult)) return false;
      if (!object.Equals(CrossThroneBuildArmyResult, other.CrossThroneBuildArmyResult)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsDefeat != false) hash ^= IsDefeat.GetHashCode();
      if (buildArmyResult_ != null) hash ^= BuildArmyResult.GetHashCode();
      if (cityArmyResult_ != null) hash ^= CityArmyResult.GetHashCode();
      if (simpleArmyResult_ != null) hash ^= SimpleArmyResult.GetHashCode();
      if (monsterArmyResult_ != null) hash ^= MonsterArmyResult.GetHashCode();
      if (allianceCityArmyResult_ != null) hash ^= AllianceCityArmyResult.GetHashCode();
      if (pveArmyResult_ != null) hash ^= PveArmyResult.GetHashCode();
      if (desertArmyResult_ != null) hash ^= DesertArmyResult.GetHashCode();
      if (allianceBuildArmyResult_ != null) hash ^= AllianceBuildArmyResult.GetHashCode();
      if (npcCityArmyResult_ != null) hash ^= NpcCityArmyResult.GetHashCode();
      if (dragonBuildingArmyResult_ != null) hash ^= DragonBuildingArmyResult.GetHashCode();
      if (crossThroneBuildArmyResult_ != null) hash ^= CrossThroneBuildArmyResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (IsDefeat != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDefeat);
      }
      if (buildArmyResult_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BuildArmyResult);
      }
      if (cityArmyResult_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CityArmyResult);
      }
      if (simpleArmyResult_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SimpleArmyResult);
      }
      if (monsterArmyResult_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MonsterArmyResult);
      }
      if (allianceCityArmyResult_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AllianceCityArmyResult);
      }
      if (pveArmyResult_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PveArmyResult);
      }
      if (desertArmyResult_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DesertArmyResult);
      }
      if (allianceBuildArmyResult_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AllianceBuildArmyResult);
      }
      if (npcCityArmyResult_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(NpcCityArmyResult);
      }
      if (dragonBuildingArmyResult_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DragonBuildingArmyResult);
      }
      if (crossThroneBuildArmyResult_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CrossThroneBuildArmyResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (IsDefeat != false) {
        size += 1 + 1;
      }
      if (buildArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildArmyResult);
      }
      if (cityArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CityArmyResult);
      }
      if (simpleArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleArmyResult);
      }
      if (monsterArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonsterArmyResult);
      }
      if (allianceCityArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllianceCityArmyResult);
      }
      if (pveArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PveArmyResult);
      }
      if (desertArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesertArmyResult);
      }
      if (allianceBuildArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllianceBuildArmyResult);
      }
      if (npcCityArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcCityArmyResult);
      }
      if (dragonBuildingArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DragonBuildingArmyResult);
      }
      if (crossThroneBuildArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CrossThroneBuildArmyResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmyResult other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsDefeat != false) {
        IsDefeat = other.IsDefeat;
      }
      if (other.buildArmyResult_ != null) {
        if (buildArmyResult_ == null) {
          BuildArmyResult = new global::Protobuf.BuildArmyResult();
        }
        BuildArmyResult.MergeFrom(other.BuildArmyResult);
      }
      if (other.cityArmyResult_ != null) {
        if (cityArmyResult_ == null) {
          CityArmyResult = new global::Protobuf.CityArmyResult();
        }
        CityArmyResult.MergeFrom(other.CityArmyResult);
      }
      if (other.simpleArmyResult_ != null) {
        if (simpleArmyResult_ == null) {
          SimpleArmyResult = new global::Protobuf.ArmyResultBase();
        }
        SimpleArmyResult.MergeFrom(other.SimpleArmyResult);
      }
      if (other.monsterArmyResult_ != null) {
        if (monsterArmyResult_ == null) {
          MonsterArmyResult = new global::Protobuf.MonsterArmyResult();
        }
        MonsterArmyResult.MergeFrom(other.MonsterArmyResult);
      }
      if (other.allianceCityArmyResult_ != null) {
        if (allianceCityArmyResult_ == null) {
          AllianceCityArmyResult = new global::Protobuf.AllianceCityArmyResult();
        }
        AllianceCityArmyResult.MergeFrom(other.AllianceCityArmyResult);
      }
      if (other.pveArmyResult_ != null) {
        if (pveArmyResult_ == null) {
          PveArmyResult = new global::Protobuf.PveArmyResult();
        }
        PveArmyResult.MergeFrom(other.PveArmyResult);
      }
      if (other.desertArmyResult_ != null) {
        if (desertArmyResult_ == null) {
          DesertArmyResult = new global::Protobuf.DesertArmyResult();
        }
        DesertArmyResult.MergeFrom(other.DesertArmyResult);
      }
      if (other.allianceBuildArmyResult_ != null) {
        if (allianceBuildArmyResult_ == null) {
          AllianceBuildArmyResult = new global::Protobuf.AllianceBuildArmyResult();
        }
        AllianceBuildArmyResult.MergeFrom(other.AllianceBuildArmyResult);
      }
      if (other.npcCityArmyResult_ != null) {
        if (npcCityArmyResult_ == null) {
          NpcCityArmyResult = new global::Protobuf.NpcCityArmyResult();
        }
        NpcCityArmyResult.MergeFrom(other.NpcCityArmyResult);
      }
      if (other.dragonBuildingArmyResult_ != null) {
        if (dragonBuildingArmyResult_ == null) {
          DragonBuildingArmyResult = new global::Protobuf.DragonBuildArmyResult();
        }
        DragonBuildingArmyResult.MergeFrom(other.DragonBuildingArmyResult);
      }
      if (other.crossThroneBuildArmyResult_ != null) {
        if (crossThroneBuildArmyResult_ == null) {
          CrossThroneBuildArmyResult = new global::Protobuf.CrossThroneBuildArmyResult();
        }
        CrossThroneBuildArmyResult.MergeFrom(other.CrossThroneBuildArmyResult);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            IsDefeat = input.ReadBool();
            break;
          }
          case 26: {
            if (buildArmyResult_ == null) {
              BuildArmyResult = new global::Protobuf.BuildArmyResult();
            }
            input.ReadMessage(BuildArmyResult);
            break;
          }
          case 34: {
            if (cityArmyResult_ == null) {
              CityArmyResult = new global::Protobuf.CityArmyResult();
            }
            input.ReadMessage(CityArmyResult);
            break;
          }
          case 42: {
            if (simpleArmyResult_ == null) {
              SimpleArmyResult = new global::Protobuf.ArmyResultBase();
            }
            input.ReadMessage(SimpleArmyResult);
            break;
          }
          case 50: {
            if (monsterArmyResult_ == null) {
              MonsterArmyResult = new global::Protobuf.MonsterArmyResult();
            }
            input.ReadMessage(MonsterArmyResult);
            break;
          }
          case 58: {
            if (allianceCityArmyResult_ == null) {
              AllianceCityArmyResult = new global::Protobuf.AllianceCityArmyResult();
            }
            input.ReadMessage(AllianceCityArmyResult);
            break;
          }
          case 66: {
            if (pveArmyResult_ == null) {
              PveArmyResult = new global::Protobuf.PveArmyResult();
            }
            input.ReadMessage(PveArmyResult);
            break;
          }
          case 74: {
            if (desertArmyResult_ == null) {
              DesertArmyResult = new global::Protobuf.DesertArmyResult();
            }
            input.ReadMessage(DesertArmyResult);
            break;
          }
          case 82: {
            if (allianceBuildArmyResult_ == null) {
              AllianceBuildArmyResult = new global::Protobuf.AllianceBuildArmyResult();
            }
            input.ReadMessage(AllianceBuildArmyResult);
            break;
          }
          case 90: {
            if (npcCityArmyResult_ == null) {
              NpcCityArmyResult = new global::Protobuf.NpcCityArmyResult();
            }
            input.ReadMessage(NpcCityArmyResult);
            break;
          }
          case 98: {
            if (dragonBuildingArmyResult_ == null) {
              DragonBuildingArmyResult = new global::Protobuf.DragonBuildArmyResult();
            }
            input.ReadMessage(DragonBuildingArmyResult);
            break;
          }
          case 106: {
            if (crossThroneBuildArmyResult_ == null) {
              CrossThroneBuildArmyResult = new global::Protobuf.CrossThroneBuildArmyResult();
            }
            input.ReadMessage(CrossThroneBuildArmyResult);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗战报
  /// </summary>
  public sealed partial class FightReport : pb::IMessage<FightReport> {
    private static readonly pb::MessageParser<FightReport> _parser = new pb::MessageParser<FightReport>(() => new FightReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightReport(FightReport other) : this() {
      uuid_ = other.uuid_;
      selfInfo_ = other.selfInfo_ != null ? other.selfInfo_.Clone() : null;
      otherInfo_ = other.otherInfo_ != null ? other.otherInfo_.Clone() : null;
      selfArmyResult_ = other.selfArmyResult_ != null ? other.selfArmyResult_.Clone() : null;
      otherArmyResult_ = other.otherArmyResult_ != null ? other.otherArmyResult_.Clone() : null;
      reward_ = other.reward_ != null ? other.reward_.Clone() : null;
      fightResult_ = other.fightResult_;
      otherBattleEffectGroups_ = other.otherBattleEffectGroups_.Clone();
      unitAttrInfo_ = other.unitAttrInfo_.Clone();
      allRewards_ = other.allRewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightReport Clone() {
      return new FightReport(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "selfInfo" field.</summary>
    public const int SelfInfoFieldNumber = 2;
    private global::Protobuf.ReportPlayerInfo selfInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ReportPlayerInfo SelfInfo {
      get { return selfInfo_; }
      set {
        selfInfo_ = value;
      }
    }

    /// <summary>Field number for the "otherInfo" field.</summary>
    public const int OtherInfoFieldNumber = 3;
    private global::Protobuf.ReportPlayerInfo otherInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ReportPlayerInfo OtherInfo {
      get { return otherInfo_; }
      set {
        otherInfo_ = value;
      }
    }

    /// <summary>Field number for the "selfArmyResult" field.</summary>
    public const int SelfArmyResultFieldNumber = 4;
    private global::Protobuf.ArmyResult selfArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResult SelfArmyResult {
      get { return selfArmyResult_; }
      set {
        selfArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "otherArmyResult" field.</summary>
    public const int OtherArmyResultFieldNumber = 5;
    private global::Protobuf.ArmyResult otherArmyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ArmyResult OtherArmyResult {
      get { return otherArmyResult_; }
      set {
        otherArmyResult_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 6;
    private global::Protobuf.ReportReward reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ReportReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "fightResult" field.</summary>
    public const int FightResultFieldNumber = 7;
    private int fightResult_;
    /// <summary>
    /// 战斗结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightResult {
      get { return fightResult_; }
      set {
        fightResult_ = value;
      }
    }

    /// <summary>Field number for the "otherBattleEffectGroups" field.</summary>
    public const int OtherBattleEffectGroupsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Protobuf.BattleEffectGroup> _repeated_otherBattleEffectGroups_codec
        = pb::FieldCodec.ForMessage(66, global::Protobuf.BattleEffectGroup.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.BattleEffectGroup> otherBattleEffectGroups_ = new pbc::RepeatedField<global::Protobuf.BattleEffectGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.BattleEffectGroup> OtherBattleEffectGroups {
      get { return otherBattleEffectGroups_; }
    }

    /// <summary>Field number for the "unitAttrInfo" field.</summary>
    public const int UnitAttrInfoFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Protobuf.UnitAttrInfo> _repeated_unitAttrInfo_codec
        = pb::FieldCodec.ForMessage(74, global::Protobuf.UnitAttrInfo.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.UnitAttrInfo> unitAttrInfo_ = new pbc::RepeatedField<global::Protobuf.UnitAttrInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.UnitAttrInfo> UnitAttrInfo {
      get { return unitAttrInfo_; }
    }

    /// <summary>Field number for the "allRewards" field.</summary>
    public const int AllRewardsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Protobuf.AllReportReward> _repeated_allRewards_codec
        = pb::FieldCodec.ForMessage(82, global::Protobuf.AllReportReward.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.AllReportReward> allRewards_ = new pbc::RepeatedField<global::Protobuf.AllReportReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.AllReportReward> AllRewards {
      get { return allRewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (!object.Equals(SelfInfo, other.SelfInfo)) return false;
      if (!object.Equals(OtherInfo, other.OtherInfo)) return false;
      if (!object.Equals(SelfArmyResult, other.SelfArmyResult)) return false;
      if (!object.Equals(OtherArmyResult, other.OtherArmyResult)) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      if (FightResult != other.FightResult) return false;
      if(!otherBattleEffectGroups_.Equals(other.otherBattleEffectGroups_)) return false;
      if(!unitAttrInfo_.Equals(other.unitAttrInfo_)) return false;
      if(!allRewards_.Equals(other.allRewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (selfInfo_ != null) hash ^= SelfInfo.GetHashCode();
      if (otherInfo_ != null) hash ^= OtherInfo.GetHashCode();
      if (selfArmyResult_ != null) hash ^= SelfArmyResult.GetHashCode();
      if (otherArmyResult_ != null) hash ^= OtherArmyResult.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (FightResult != 0) hash ^= FightResult.GetHashCode();
      hash ^= otherBattleEffectGroups_.GetHashCode();
      hash ^= unitAttrInfo_.GetHashCode();
      hash ^= allRewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (selfInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfInfo);
      }
      if (otherInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OtherInfo);
      }
      if (selfArmyResult_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SelfArmyResult);
      }
      if (otherArmyResult_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OtherArmyResult);
      }
      if (reward_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Reward);
      }
      if (FightResult != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FightResult);
      }
      otherBattleEffectGroups_.WriteTo(output, _repeated_otherBattleEffectGroups_codec);
      unitAttrInfo_.WriteTo(output, _repeated_unitAttrInfo_codec);
      allRewards_.WriteTo(output, _repeated_allRewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (selfInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfInfo);
      }
      if (otherInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherInfo);
      }
      if (selfArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfArmyResult);
      }
      if (otherArmyResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherArmyResult);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (FightResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightResult);
      }
      size += otherBattleEffectGroups_.CalculateSize(_repeated_otherBattleEffectGroups_codec);
      size += unitAttrInfo_.CalculateSize(_repeated_unitAttrInfo_codec);
      size += allRewards_.CalculateSize(_repeated_allRewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightReport other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.selfInfo_ != null) {
        if (selfInfo_ == null) {
          SelfInfo = new global::Protobuf.ReportPlayerInfo();
        }
        SelfInfo.MergeFrom(other.SelfInfo);
      }
      if (other.otherInfo_ != null) {
        if (otherInfo_ == null) {
          OtherInfo = new global::Protobuf.ReportPlayerInfo();
        }
        OtherInfo.MergeFrom(other.OtherInfo);
      }
      if (other.selfArmyResult_ != null) {
        if (selfArmyResult_ == null) {
          SelfArmyResult = new global::Protobuf.ArmyResult();
        }
        SelfArmyResult.MergeFrom(other.SelfArmyResult);
      }
      if (other.otherArmyResult_ != null) {
        if (otherArmyResult_ == null) {
          OtherArmyResult = new global::Protobuf.ArmyResult();
        }
        OtherArmyResult.MergeFrom(other.OtherArmyResult);
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          Reward = new global::Protobuf.ReportReward();
        }
        Reward.MergeFrom(other.Reward);
      }
      if (other.FightResult != 0) {
        FightResult = other.FightResult;
      }
      otherBattleEffectGroups_.Add(other.otherBattleEffectGroups_);
      unitAttrInfo_.Add(other.unitAttrInfo_);
      allRewards_.Add(other.allRewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            if (selfInfo_ == null) {
              SelfInfo = new global::Protobuf.ReportPlayerInfo();
            }
            input.ReadMessage(SelfInfo);
            break;
          }
          case 26: {
            if (otherInfo_ == null) {
              OtherInfo = new global::Protobuf.ReportPlayerInfo();
            }
            input.ReadMessage(OtherInfo);
            break;
          }
          case 34: {
            if (selfArmyResult_ == null) {
              SelfArmyResult = new global::Protobuf.ArmyResult();
            }
            input.ReadMessage(SelfArmyResult);
            break;
          }
          case 42: {
            if (otherArmyResult_ == null) {
              OtherArmyResult = new global::Protobuf.ArmyResult();
            }
            input.ReadMessage(OtherArmyResult);
            break;
          }
          case 50: {
            if (reward_ == null) {
              Reward = new global::Protobuf.ReportReward();
            }
            input.ReadMessage(Reward);
            break;
          }
          case 56: {
            FightResult = input.ReadInt32();
            break;
          }
          case 66: {
            otherBattleEffectGroups_.AddEntriesFrom(input, _repeated_otherBattleEffectGroups_codec);
            break;
          }
          case 74: {
            unitAttrInfo_.AddEntriesFrom(input, _repeated_unitAttrInfo_codec);
            break;
          }
          case 82: {
            allRewards_.AddEntriesFrom(input, _repeated_allRewards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitAttrInfo : pb::IMessage<UnitAttrInfo> {
    private static readonly pb::MessageParser<UnitAttrInfo> _parser = new pb::MessageParser<UnitAttrInfo>(() => new UnitAttrInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitAttrInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitAttrInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitAttrInfo(UnitAttrInfo other) : this() {
      uuid_ = other.uuid_;
      atkInfo_ = other.atkInfo_.Clone();
      defInfo_ = other.defInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitAttrInfo Clone() {
      return new UnitAttrInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "atkInfo" field.</summary>
    public const int AtkInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protobuf.ArmyAttrInfo> _repeated_atkInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Protobuf.ArmyAttrInfo.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.ArmyAttrInfo> atkInfo_ = new pbc::RepeatedField<global::Protobuf.ArmyAttrInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.ArmyAttrInfo> AtkInfo {
      get { return atkInfo_; }
    }

    /// <summary>Field number for the "defInfo" field.</summary>
    public const int DefInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protobuf.ArmyAttrInfo> _repeated_defInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Protobuf.ArmyAttrInfo.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.ArmyAttrInfo> defInfo_ = new pbc::RepeatedField<global::Protobuf.ArmyAttrInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.ArmyAttrInfo> DefInfo {
      get { return defInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitAttrInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitAttrInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if(!atkInfo_.Equals(other.atkInfo_)) return false;
      if(!defInfo_.Equals(other.defInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      hash ^= atkInfo_.GetHashCode();
      hash ^= defInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      atkInfo_.WriteTo(output, _repeated_atkInfo_codec);
      defInfo_.WriteTo(output, _repeated_defInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      size += atkInfo_.CalculateSize(_repeated_atkInfo_codec);
      size += defInfo_.CalculateSize(_repeated_defInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitAttrInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      atkInfo_.Add(other.atkInfo_);
      defInfo_.Add(other.defInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 34: {
            atkInfo_.AddEntriesFrom(input, _repeated_atkInfo_codec);
            break;
          }
          case 42: {
            defInfo_.AddEntriesFrom(input, _repeated_defInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArmyAttrInfo : pb::IMessage<ArmyAttrInfo> {
    private static readonly pb::MessageParser<ArmyAttrInfo> _parser = new pb::MessageParser<ArmyAttrInfo>(() => new ArmyAttrInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmyAttrInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyAttrInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyAttrInfo(ArmyAttrInfo other) : this() {
      reason_ = other.reason_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyAttrInfo Clone() {
      return new ArmyAttrInfo(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private int reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmyAttrInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmyAttrInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Reason);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmyAttrInfo other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reason = input.ReadInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattlePointInfo : pb::IMessage<BattlePointInfo> {
    private static readonly pb::MessageParser<BattlePointInfo> _parser = new pb::MessageParser<BattlePointInfo>(() => new BattlePointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePointInfo(BattlePointInfo other) : this() {
      battleServerId_ = other.battleServerId_;
      serverType_ = other.serverType_;
      pointId_ = other.pointId_;
      worldId_ = other.worldId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePointInfo Clone() {
      return new BattlePointInfo(this);
    }

    /// <summary>Field number for the "battleServerId" field.</summary>
    public const int BattleServerIdFieldNumber = 1;
    private int battleServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleServerId {
      get { return battleServerId_; }
      set {
        battleServerId_ = value;
      }
    }

    /// <summary>Field number for the "serverType" field.</summary>
    public const int ServerTypeFieldNumber = 2;
    private int serverType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    /// <summary>Field number for the "pointId" field.</summary>
    public const int PointIdFieldNumber = 3;
    private int pointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointId {
      get { return pointId_; }
      set {
        pointId_ = value;
      }
    }

    /// <summary>Field number for the "worldId" field.</summary>
    public const int WorldIdFieldNumber = 4;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattlePointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattlePointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleServerId != other.BattleServerId) return false;
      if (ServerType != other.ServerType) return false;
      if (PointId != other.PointId) return false;
      if (WorldId != other.WorldId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleServerId != 0) hash ^= BattleServerId.GetHashCode();
      if (ServerType != 0) hash ^= ServerType.GetHashCode();
      if (PointId != 0) hash ^= PointId.GetHashCode();
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleServerId);
      }
      if (ServerType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerType);
      }
      if (PointId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PointId);
      }
      if (WorldId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WorldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleServerId);
      }
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerType);
      }
      if (PointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointId);
      }
      if (WorldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattlePointInfo other) {
      if (other == null) {
        return;
      }
      if (other.BattleServerId != 0) {
        BattleServerId = other.BattleServerId;
      }
      if (other.ServerType != 0) {
        ServerType = other.ServerType;
      }
      if (other.PointId != 0) {
        PointId = other.PointId;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleServerId = input.ReadInt32();
            break;
          }
          case 16: {
            ServerType = input.ReadInt32();
            break;
          }
          case 24: {
            PointId = input.ReadInt32();
            break;
          }
          case 32: {
            WorldId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FightResLost : pb::IMessage<FightResLost> {
    private static readonly pb::MessageParser<FightResLost> _parser = new pb::MessageParser<FightResLost>(() => new FightResLost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightResLost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightResLost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightResLost(FightResLost other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightResLost Clone() {
      return new FightResLost(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightResLost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightResLost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightResLost other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FightResItemLost : pb::IMessage<FightResItemLost> {
    private static readonly pb::MessageParser<FightResItemLost> _parser = new pb::MessageParser<FightResItemLost>(() => new FightResItemLost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightResItemLost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightResItemLost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightResItemLost(FightResItemLost other) : this() {
      itemId_ = other.itemId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightResItemLost Clone() {
      return new FightResItemLost(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightResItemLost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightResItemLost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightResItemLost other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FightItemLost : pb::IMessage<FightItemLost> {
    private static readonly pb::MessageParser<FightItemLost> _parser = new pb::MessageParser<FightItemLost>(() => new FightItemLost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightItemLost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightItemLost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightItemLost(FightItemLost other) : this() {
      itemId_ = other.itemId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightItemLost Clone() {
      return new FightItemLost(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private string itemId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightItemLost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightItemLost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightItemLost other) {
      if (other == null) {
        return;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 攻击损失
  /// </summary>
  public sealed partial class FightLost : pb::IMessage<FightLost> {
    private static readonly pb::MessageParser<FightLost> _parser = new pb::MessageParser<FightLost>(() => new FightLost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightLost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightLost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightLost(FightLost other) : this() {
      resLostArr_ = other.resLostArr_.Clone();
      resItemLostArr_ = other.resItemLostArr_.Clone();
      itemLostArr_ = other.itemLostArr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FightLost Clone() {
      return new FightLost(this);
    }

    /// <summary>Field number for the "resLostArr" field.</summary>
    public const int ResLostArrFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.FightResLost> _repeated_resLostArr_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.FightResLost.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.FightResLost> resLostArr_ = new pbc::RepeatedField<global::Protobuf.FightResLost>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.FightResLost> ResLostArr {
      get { return resLostArr_; }
    }

    /// <summary>Field number for the "resItemLostArr" field.</summary>
    public const int ResItemLostArrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protobuf.FightResItemLost> _repeated_resItemLostArr_codec
        = pb::FieldCodec.ForMessage(18, global::Protobuf.FightResItemLost.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.FightResItemLost> resItemLostArr_ = new pbc::RepeatedField<global::Protobuf.FightResItemLost>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.FightResItemLost> ResItemLostArr {
      get { return resItemLostArr_; }
    }

    /// <summary>Field number for the "itemLostArr" field.</summary>
    public const int ItemLostArrFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protobuf.FightItemLost> _repeated_itemLostArr_codec
        = pb::FieldCodec.ForMessage(26, global::Protobuf.FightItemLost.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.FightItemLost> itemLostArr_ = new pbc::RepeatedField<global::Protobuf.FightItemLost>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.FightItemLost> ItemLostArr {
      get { return itemLostArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FightLost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FightLost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!resLostArr_.Equals(other.resLostArr_)) return false;
      if(!resItemLostArr_.Equals(other.resItemLostArr_)) return false;
      if(!itemLostArr_.Equals(other.itemLostArr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= resLostArr_.GetHashCode();
      hash ^= resItemLostArr_.GetHashCode();
      hash ^= itemLostArr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resLostArr_.WriteTo(output, _repeated_resLostArr_codec);
      resItemLostArr_.WriteTo(output, _repeated_resItemLostArr_codec);
      itemLostArr_.WriteTo(output, _repeated_itemLostArr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resLostArr_.CalculateSize(_repeated_resLostArr_codec);
      size += resItemLostArr_.CalculateSize(_repeated_resItemLostArr_codec);
      size += itemLostArr_.CalculateSize(_repeated_itemLostArr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FightLost other) {
      if (other == null) {
        return;
      }
      resLostArr_.Add(other.resLostArr_);
      resItemLostArr_.Add(other.resItemLostArr_);
      itemLostArr_.Add(other.itemLostArr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resLostArr_.AddEntriesFrom(input, _repeated_resLostArr_codec);
            break;
          }
          case 18: {
            resItemLostArr_.AddEntriesFrom(input, _repeated_resItemLostArr_codec);
            break;
          }
          case 26: {
            itemLostArr_.AddEntriesFrom(input, _repeated_itemLostArr_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 攻击损失-新
  /// </summary>
  public sealed partial class AllFightLost : pb::IMessage<AllFightLost> {
    private static readonly pb::MessageParser<AllFightLost> _parser = new pb::MessageParser<AllFightLost>(() => new AllFightLost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllFightLost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllFightLost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllFightLost(AllFightLost other) : this() {
      lost_ = other.lost_ != null ? other.lost_.Clone() : null;
      uuid_ = other.uuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllFightLost Clone() {
      return new AllFightLost(this);
    }

    /// <summary>Field number for the "lost" field.</summary>
    public const int LostFieldNumber = 1;
    private global::Protobuf.FightLost lost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.FightLost Lost {
      get { return lost_; }
      set {
        lost_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllFightLost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllFightLost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lost, other.Lost)) return false;
      if (Uuid != other.Uuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lost_ != null) hash ^= Lost.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lost_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lost);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lost);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllFightLost other) {
      if (other == null) {
        return;
      }
      if (other.lost_ != null) {
        if (lost_ == null) {
          Lost = new global::Protobuf.FightLost();
        }
        Lost.MergeFrom(other.Lost);
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lost_ == null) {
              Lost = new global::Protobuf.FightLost();
            }
            input.ReadMessage(Lost);
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战争战报
  /// </summary>
  public sealed partial class BattleReport : pb::IMessage<BattleReport> {
    private static readonly pb::MessageParser<BattleReport> _parser = new pb::MessageParser<BattleReport>(() => new BattleReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReport(BattleReport other) : this() {
      battleResult_ = other.battleResult_;
      startTime_ = other.startTime_;
      startRound_ = other.startRound_;
      battlePointInfo_ = other.battlePointInfo_ != null ? other.battlePointInfo_.Clone() : null;
      fightReports_ = other.fightReports_.Clone();
      fightLost_ = other.fightLost_ != null ? other.fightLost_.Clone() : null;
      selfBattleEffectGroups_ = other.selfBattleEffectGroups_.Clone();
      version_ = other.version_;
      allFightLost_ = other.allFightLost_.Clone();
      marchType_ = other.marchType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReport Clone() {
      return new BattleReport(this);
    }

    /// <summary>Field number for the "battleResult" field.</summary>
    public const int BattleResultFieldNumber = 1;
    private int battleResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleResult {
      get { return battleResult_; }
      set {
        battleResult_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "startRound" field.</summary>
    public const int StartRoundFieldNumber = 3;
    private int startRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartRound {
      get { return startRound_; }
      set {
        startRound_ = value;
      }
    }

    /// <summary>Field number for the "battlePointInfo" field.</summary>
    public const int BattlePointInfoFieldNumber = 4;
    private global::Protobuf.BattlePointInfo battlePointInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.BattlePointInfo BattlePointInfo {
      get { return battlePointInfo_; }
      set {
        battlePointInfo_ = value;
      }
    }

    /// <summary>Field number for the "fightReports" field.</summary>
    public const int FightReportsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protobuf.FightReport> _repeated_fightReports_codec
        = pb::FieldCodec.ForMessage(42, global::Protobuf.FightReport.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.FightReport> fightReports_ = new pbc::RepeatedField<global::Protobuf.FightReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.FightReport> FightReports {
      get { return fightReports_; }
    }

    /// <summary>Field number for the "fightLost" field.</summary>
    public const int FightLostFieldNumber = 6;
    private global::Protobuf.FightLost fightLost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.FightLost FightLost {
      get { return fightLost_; }
      set {
        fightLost_ = value;
      }
    }

    /// <summary>Field number for the "selfBattleEffectGroups" field.</summary>
    public const int SelfBattleEffectGroupsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protobuf.BattleEffectGroup> _repeated_selfBattleEffectGroups_codec
        = pb::FieldCodec.ForMessage(58, global::Protobuf.BattleEffectGroup.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.BattleEffectGroup> selfBattleEffectGroups_ = new pbc::RepeatedField<global::Protobuf.BattleEffectGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.BattleEffectGroup> SelfBattleEffectGroups {
      get { return selfBattleEffectGroups_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 8;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "allFightLost" field.</summary>
    public const int AllFightLostFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Protobuf.AllFightLost> _repeated_allFightLost_codec
        = pb::FieldCodec.ForMessage(74, global::Protobuf.AllFightLost.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.AllFightLost> allFightLost_ = new pbc::RepeatedField<global::Protobuf.AllFightLost>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.AllFightLost> AllFightLost {
      get { return allFightLost_; }
    }

    /// <summary>Field number for the "marchType" field.</summary>
    public const int MarchTypeFieldNumber = 10;
    private int marchType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarchType {
      get { return marchType_; }
      set {
        marchType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleResult != other.BattleResult) return false;
      if (StartTime != other.StartTime) return false;
      if (StartRound != other.StartRound) return false;
      if (!object.Equals(BattlePointInfo, other.BattlePointInfo)) return false;
      if(!fightReports_.Equals(other.fightReports_)) return false;
      if (!object.Equals(FightLost, other.FightLost)) return false;
      if(!selfBattleEffectGroups_.Equals(other.selfBattleEffectGroups_)) return false;
      if (Version != other.Version) return false;
      if(!allFightLost_.Equals(other.allFightLost_)) return false;
      if (MarchType != other.MarchType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleResult != 0) hash ^= BattleResult.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (StartRound != 0) hash ^= StartRound.GetHashCode();
      if (battlePointInfo_ != null) hash ^= BattlePointInfo.GetHashCode();
      hash ^= fightReports_.GetHashCode();
      if (fightLost_ != null) hash ^= FightLost.GetHashCode();
      hash ^= selfBattleEffectGroups_.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      hash ^= allFightLost_.GetHashCode();
      if (MarchType != 0) hash ^= MarchType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleResult != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleResult);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (StartRound != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartRound);
      }
      if (battlePointInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BattlePointInfo);
      }
      fightReports_.WriteTo(output, _repeated_fightReports_codec);
      if (fightLost_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FightLost);
      }
      selfBattleEffectGroups_.WriteTo(output, _repeated_selfBattleEffectGroups_codec);
      if (Version != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Version);
      }
      allFightLost_.WriteTo(output, _repeated_allFightLost_codec);
      if (MarchType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MarchType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleResult);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (StartRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRound);
      }
      if (battlePointInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattlePointInfo);
      }
      size += fightReports_.CalculateSize(_repeated_fightReports_codec);
      if (fightLost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FightLost);
      }
      size += selfBattleEffectGroups_.CalculateSize(_repeated_selfBattleEffectGroups_codec);
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      size += allFightLost_.CalculateSize(_repeated_allFightLost_codec);
      if (MarchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarchType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleReport other) {
      if (other == null) {
        return;
      }
      if (other.BattleResult != 0) {
        BattleResult = other.BattleResult;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.StartRound != 0) {
        StartRound = other.StartRound;
      }
      if (other.battlePointInfo_ != null) {
        if (battlePointInfo_ == null) {
          BattlePointInfo = new global::Protobuf.BattlePointInfo();
        }
        BattlePointInfo.MergeFrom(other.BattlePointInfo);
      }
      fightReports_.Add(other.fightReports_);
      if (other.fightLost_ != null) {
        if (fightLost_ == null) {
          FightLost = new global::Protobuf.FightLost();
        }
        FightLost.MergeFrom(other.FightLost);
      }
      selfBattleEffectGroups_.Add(other.selfBattleEffectGroups_);
      if (other.Version != 0) {
        Version = other.Version;
      }
      allFightLost_.Add(other.allFightLost_);
      if (other.MarchType != 0) {
        MarchType = other.MarchType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleResult = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            StartRound = input.ReadInt32();
            break;
          }
          case 34: {
            if (battlePointInfo_ == null) {
              BattlePointInfo = new global::Protobuf.BattlePointInfo();
            }
            input.ReadMessage(BattlePointInfo);
            break;
          }
          case 42: {
            fightReports_.AddEntriesFrom(input, _repeated_fightReports_codec);
            break;
          }
          case 50: {
            if (fightLost_ == null) {
              FightLost = new global::Protobuf.FightLost();
            }
            input.ReadMessage(FightLost);
            break;
          }
          case 58: {
            selfBattleEffectGroups_.AddEntriesFrom(input, _repeated_selfBattleEffectGroups_codec);
            break;
          }
          case 64: {
            Version = input.ReadInt32();
            break;
          }
          case 74: {
            allFightLost_.AddEntriesFrom(input, _repeated_allFightLost_codec);
            break;
          }
          case 80: {
            MarchType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 详细战报玩家信息
  /// </summary>
  public sealed partial class DetailReportPlayerInfo : pb::IMessage<DetailReportPlayerInfo> {
    private static readonly pb::MessageParser<DetailReportPlayerInfo> _parser = new pb::MessageParser<DetailReportPlayerInfo>(() => new DetailReportPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetailReportPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailReportPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailReportPlayerInfo(DetailReportPlayerInfo other) : this() {
      index_ = other.index_;
      name_ = other.name_;
      alAbbr_ = other.alAbbr_;
      isSelf_ = other.isSelf_;
      infoType_ = other.infoType_;
      uuid_ = other.uuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailReportPlayerInfo Clone() {
      return new DetailReportPlayerInfo(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alAbbr" field.</summary>
    public const int AlAbbrFieldNumber = 3;
    private string alAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlAbbr {
      get { return alAbbr_; }
      set {
        alAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isSelf" field.</summary>
    public const int IsSelfFieldNumber = 4;
    private bool isSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSelf {
      get { return isSelf_; }
      set {
        isSelf_ = value;
      }
    }

    /// <summary>Field number for the "infoType" field.</summary>
    public const int InfoTypeFieldNumber = 5;
    private int infoType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 6;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetailReportPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetailReportPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Name != other.Name) return false;
      if (AlAbbr != other.AlAbbr) return false;
      if (IsSelf != other.IsSelf) return false;
      if (InfoType != other.InfoType) return false;
      if (Uuid != other.Uuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AlAbbr.Length != 0) hash ^= AlAbbr.GetHashCode();
      if (IsSelf != false) hash ^= IsSelf.GetHashCode();
      if (InfoType != 0) hash ^= InfoType.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AlAbbr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AlAbbr);
      }
      if (IsSelf != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSelf);
      }
      if (InfoType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InfoType);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Uuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AlAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlAbbr);
      }
      if (IsSelf != false) {
        size += 1 + 1;
      }
      if (InfoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfoType);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetailReportPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AlAbbr.Length != 0) {
        AlAbbr = other.AlAbbr;
      }
      if (other.IsSelf != false) {
        IsSelf = other.IsSelf;
      }
      if (other.InfoType != 0) {
        InfoType = other.InfoType;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            AlAbbr = input.ReadString();
            break;
          }
          case 32: {
            IsSelf = input.ReadBool();
            break;
          }
          case 40: {
            InfoType = input.ReadInt32();
            break;
          }
          case 48: {
            Uuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 详细战报
  /// </summary>
  public sealed partial class BattleDetailInfo : pb::IMessage<BattleDetailInfo> {
    private static readonly pb::MessageParser<BattleDetailInfo> _parser = new pb::MessageParser<BattleDetailInfo>(() => new BattleDetailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleDetailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDetailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDetailInfo(BattleDetailInfo other) : this() {
      roundReports_ = other.roundReports_.Clone();
      effectReports_ = other.effectReports_.Clone();
      playerInfos_ = other.playerInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDetailInfo Clone() {
      return new BattleDetailInfo(this);
    }

    /// <summary>Field number for the "roundReports" field.</summary>
    public const int RoundReportsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.BaseRoundReport> _repeated_roundReports_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.BaseRoundReport.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.BaseRoundReport> roundReports_ = new pbc::RepeatedField<global::Protobuf.BaseRoundReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.BaseRoundReport> RoundReports {
      get { return roundReports_; }
    }

    /// <summary>Field number for the "effectReports" field.</summary>
    public const int EffectReportsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protobuf.EffectRoundReport> _repeated_effectReports_codec
        = pb::FieldCodec.ForMessage(18, global::Protobuf.EffectRoundReport.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.EffectRoundReport> effectReports_ = new pbc::RepeatedField<global::Protobuf.EffectRoundReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.EffectRoundReport> EffectReports {
      get { return effectReports_; }
    }

    /// <summary>Field number for the "playerInfos" field.</summary>
    public const int PlayerInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protobuf.DetailReportPlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Protobuf.DetailReportPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.DetailReportPlayerInfo> playerInfos_ = new pbc::RepeatedField<global::Protobuf.DetailReportPlayerInfo>();
    /// <summary>
    /// 详细战报玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.DetailReportPlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleDetailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleDetailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundReports_.Equals(other.roundReports_)) return false;
      if(!effectReports_.Equals(other.effectReports_)) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundReports_.GetHashCode();
      hash ^= effectReports_.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roundReports_.WriteTo(output, _repeated_roundReports_codec);
      effectReports_.WriteTo(output, _repeated_effectReports_codec);
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundReports_.CalculateSize(_repeated_roundReports_codec);
      size += effectReports_.CalculateSize(_repeated_effectReports_codec);
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleDetailInfo other) {
      if (other == null) {
        return;
      }
      roundReports_.Add(other.roundReports_);
      effectReports_.Add(other.effectReports_);
      playerInfos_.Add(other.playerInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundReports_.AddEntriesFrom(input, _repeated_roundReports_codec);
            break;
          }
          case 18: {
            effectReports_.AddEntriesFrom(input, _repeated_effectReports_codec);
            break;
          }
          case 26: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗增益
  /// </summary>
  public sealed partial class BattleEffectGroup : pb::IMessage<BattleEffectGroup> {
    private static readonly pb::MessageParser<BattleEffectGroup> _parser = new pb::MessageParser<BattleEffectGroup>(() => new BattleEffectGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEffectGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectGroup(BattleEffectGroup other) : this() {
      memberUuid_ = other.memberUuid_;
      battleEffectInfos_ = other.battleEffectInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectGroup Clone() {
      return new BattleEffectGroup(this);
    }

    /// <summary>Field number for the "memberUuid" field.</summary>
    public const int MemberUuidFieldNumber = 1;
    private long memberUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MemberUuid {
      get { return memberUuid_; }
      set {
        memberUuid_ = value;
      }
    }

    /// <summary>Field number for the "battleEffectInfos" field.</summary>
    public const int BattleEffectInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protobuf.BattleEffectInfo> _repeated_battleEffectInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Protobuf.BattleEffectInfo.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.BattleEffectInfo> battleEffectInfos_ = new pbc::RepeatedField<global::Protobuf.BattleEffectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.BattleEffectInfo> BattleEffectInfos {
      get { return battleEffectInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEffectGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEffectGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MemberUuid != other.MemberUuid) return false;
      if(!battleEffectInfos_.Equals(other.battleEffectInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MemberUuid != 0L) hash ^= MemberUuid.GetHashCode();
      hash ^= battleEffectInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberUuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MemberUuid);
      }
      battleEffectInfos_.WriteTo(output, _repeated_battleEffectInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemberUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MemberUuid);
      }
      size += battleEffectInfos_.CalculateSize(_repeated_battleEffectInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEffectGroup other) {
      if (other == null) {
        return;
      }
      if (other.MemberUuid != 0L) {
        MemberUuid = other.MemberUuid;
      }
      battleEffectInfos_.Add(other.battleEffectInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MemberUuid = input.ReadInt64();
            break;
          }
          case 18: {
            battleEffectInfos_.AddEntriesFrom(input, _repeated_battleEffectInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleEffectReason : pb::IMessage<BattleEffectReason> {
    private static readonly pb::MessageParser<BattleEffectReason> _parser = new pb::MessageParser<BattleEffectReason>(() => new BattleEffectReason());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEffectReason> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectReason() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectReason(BattleEffectReason other) : this() {
      value_ = other.value_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectReason Clone() {
      return new BattleEffectReason(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private int reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEffectReason);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEffectReason other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Value);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEffectReason other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Value = input.ReadFloat();
            break;
          }
          case 16: {
            Reason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleEffectInfo : pb::IMessage<BattleEffectInfo> {
    private static readonly pb::MessageParser<BattleEffectInfo> _parser = new pb::MessageParser<BattleEffectInfo>(() => new BattleEffectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEffectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectInfo(BattleEffectInfo other) : this() {
      effectId_ = other.effectId_;
      value_ = other.value_;
      reasons_ = other.reasons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEffectInfo Clone() {
      return new BattleEffectInfo(this);
    }

    /// <summary>Field number for the "effectId" field.</summary>
    public const int EffectIdFieldNumber = 1;
    private int effectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "reasons" field.</summary>
    public const int ReasonsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protobuf.BattleEffectReason> _repeated_reasons_codec
        = pb::FieldCodec.ForMessage(26, global::Protobuf.BattleEffectReason.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.BattleEffectReason> reasons_ = new pbc::RepeatedField<global::Protobuf.BattleEffectReason>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.BattleEffectReason> Reasons {
      get { return reasons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEffectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEffectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectId != other.EffectId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if(!reasons_.Equals(other.reasons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectId != 0) hash ^= EffectId.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      hash ^= reasons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectId);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      reasons_.WriteTo(output, _repeated_reasons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectId);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      size += reasons_.CalculateSize(_repeated_reasons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEffectInfo other) {
      if (other == null) {
        return;
      }
      if (other.EffectId != 0) {
        EffectId = other.EffectId;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      reasons_.Add(other.reasons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EffectId = input.ReadInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 26: {
            reasons_.AddEntriesFrom(input, _repeated_reasons_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportRewardNeedCollect : pb::IMessage<ReportRewardNeedCollect> {
    private static readonly pb::MessageParser<ReportRewardNeedCollect> _parser = new pb::MessageParser<ReportRewardNeedCollect>(() => new ReportRewardNeedCollect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportRewardNeedCollect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardNeedCollect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardNeedCollect(ReportRewardNeedCollect other) : this() {
      pointId_ = other.pointId_;
      inUserWorld_ = other.inUserWorld_;
      rewardUuid_ = other.rewardUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRewardNeedCollect Clone() {
      return new ReportRewardNeedCollect(this);
    }

    /// <summary>Field number for the "pointId" field.</summary>
    public const int PointIdFieldNumber = 1;
    private int pointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointId {
      get { return pointId_; }
      set {
        pointId_ = value;
      }
    }

    /// <summary>Field number for the "inUserWorld" field.</summary>
    public const int InUserWorldFieldNumber = 2;
    private bool inUserWorld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InUserWorld {
      get { return inUserWorld_; }
      set {
        inUserWorld_ = value;
      }
    }

    /// <summary>Field number for the "rewardUuid" field.</summary>
    public const int RewardUuidFieldNumber = 3;
    private long rewardUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RewardUuid {
      get { return rewardUuid_; }
      set {
        rewardUuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportRewardNeedCollect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportRewardNeedCollect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PointId != other.PointId) return false;
      if (InUserWorld != other.InUserWorld) return false;
      if (RewardUuid != other.RewardUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PointId != 0) hash ^= PointId.GetHashCode();
      if (InUserWorld != false) hash ^= InUserWorld.GetHashCode();
      if (RewardUuid != 0L) hash ^= RewardUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PointId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PointId);
      }
      if (InUserWorld != false) {
        output.WriteRawTag(16);
        output.WriteBool(InUserWorld);
      }
      if (RewardUuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RewardUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointId);
      }
      if (InUserWorld != false) {
        size += 1 + 1;
      }
      if (RewardUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RewardUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportRewardNeedCollect other) {
      if (other == null) {
        return;
      }
      if (other.PointId != 0) {
        PointId = other.PointId;
      }
      if (other.InUserWorld != false) {
        InUserWorld = other.InUserWorld;
      }
      if (other.RewardUuid != 0L) {
        RewardUuid = other.RewardUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PointId = input.ReadInt32();
            break;
          }
          case 16: {
            InUserWorld = input.ReadBool();
            break;
          }
          case 24: {
            RewardUuid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 怪物掉落奖励邮件
  /// </summary>
  public sealed partial class MonsterCollectRewardMail : pb::IMessage<MonsterCollectRewardMail> {
    private static readonly pb::MessageParser<MonsterCollectRewardMail> _parser = new pb::MessageParser<MonsterCollectRewardMail>(() => new MonsterCollectRewardMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterCollectRewardMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.BattleReportReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterCollectRewardMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterCollectRewardMail(MonsterCollectRewardMail other) : this() {
      startTime_ = other.startTime_;
      monsterId_ = other.monsterId_;
      needCollectReward_ = other.needCollectReward_ != null ? other.needCollectReward_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterCollectRewardMail Clone() {
      return new MonsterCollectRewardMail(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "needCollectReward" field.</summary>
    public const int NeedCollectRewardFieldNumber = 3;
    private global::Protobuf.ReportRewardNeedCollect needCollectReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.ReportRewardNeedCollect NeedCollectReward {
      get { return needCollectReward_; }
      set {
        needCollectReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterCollectRewardMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterCollectRewardMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTime != other.StartTime) return false;
      if (MonsterId != other.MonsterId) return false;
      if (!object.Equals(NeedCollectReward, other.NeedCollectReward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (needCollectReward_ != null) hash ^= NeedCollectReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartTime);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
      if (needCollectReward_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NeedCollectReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (needCollectReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NeedCollectReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterCollectRewardMail other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.needCollectReward_ != null) {
        if (needCollectReward_ == null) {
          NeedCollectReward = new global::Protobuf.ReportRewardNeedCollect();
        }
        NeedCollectReward.MergeFrom(other.NeedCollectReward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTime = input.ReadInt64();
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 26: {
            if (needCollectReward_ == null) {
              NeedCollectReward = new global::Protobuf.ReportRewardNeedCollect();
            }
            input.ReadMessage(NeedCollectReward);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
