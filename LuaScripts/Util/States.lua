---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yangcheng.
--- DateTime: 2022/9/21 18:47
---
local States = BaseClass("States")

function States:__init(owner)
    self._owner = owner
    self._currentState = nil
    self._stateList = {}
    self._enterFunction = enterFun
    self._processFunction = processFun
    self._exitFunction = exitFun
    self.name = nil
    self._data = nil
    self._isExit = false
end

function States:Update(deltaTime)
    if self._currentState ~= nil and not self._currentState._isExit then
        self._currentState:Process(deltaTime)
    end
end

function States:AddState(name,enterFun,processFun,exitFun)
    local state = States.New(self._owner)
    state:Agent(enterFun,processFun,exitFun)
    state.name = name
    self._stateList[name] = state
	return state
end

function States:SetState(name,data)
    local state = self._stateList[name]

    if state == nil then
        return
    end

    if self._currentState ~= nil and self._currentState.name ~= name and not self._currentState._isExit then
        self._currentState:Exit()
        self._currentState = nil
    end

    self._currentState = state
    self._currentState:SetData(data)
    self._currentState:Enter()
end

function States:GetCurrentStateName()
    return self._currentState ~= nil and self._currentState.name or nil
end

function States:ExitCurrentState()
    if self._currentState ~= nil then
        self._currentState:Exit()
    end
end

function States:Agent(enterFun,processFun,exitFun)
    self._enterFunction = enterFun
    self._processFunction = processFun
    self._exitFunction = exitFun
end

function States:Enter()
    self._isExit = false
    if self._enterFunction ~= nil then
        self._enterFunction(self._owner,self._data)
    end
end

function States:Process(deltaTime)
	local t = self
    if t._processFunction ~= nil then
        t._processFunction(self._owner,deltaTime, t.process_userdata)
    end
end

function States:Exit()
    self._isExit = true
    if self._exitFunction ~= nil then
        self._exitFunction(self._owner)
    end
end

function States:SetData(data)
    self._data = data
end
--当前状态是否相同
function States:CurrentStateEqual(name)
    if self._currentState ~= nil then
        return self._currentState.name == name
    end
    return false
end

function States:Dispose()
    self._owner = nil
    self._data = nil
    self._enterFunction = nil
    self._processFunction = nil
    self._exitFunction = nil

    for _,v in ipairs(self._stateList) do
        v:Dispose()
    end
    self._stateList = nil
end

return States