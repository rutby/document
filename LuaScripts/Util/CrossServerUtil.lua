---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/8/3 21:06
---
local CrossServerUtil = {}

function CrossServerUtil.OnCrossServer(serverId,worldId)
    if CrossServerUtil:GetIsCrossServer() then
        CS.WorldLeaveCrossServerMessage.Instance:SendRequest()
        CS.GameEntry.NetworkCross:RemoveConnect();
    else
        SFSNetwork.SendMessage(MsgDefines.LeaveWorld) --向服务器发送离开当前世界
    end
    LuaEntry.Player:SetCrossServerId(serverId)--设置playdata
    CS.GameEntry.Data.Player:OnCrossServerId(serverId) --同步c#
    if worldId~=nil then
        LuaEntry.Player:SetWorldId(worldId)
        if CS.GameEntry.Data.Player.SetWorldId~=nil then
            CS.GameEntry.Data.Player:SetWorldId(worldId)
        end
    end
    CS.SceneManager.World:OnChangeServerRemove()--删除地表模型
    EventManager:GetInstance():Broadcast(EventId.SetCityPeopleAndCarVisible, CityPeopleAndCarVisibleType.AllHide)--隐藏城内小人和车
    
    local curServerType = LuaEntry.Player.serverType
    local targetServerType = DataCenter.AccountManager:GetServerTypeByServerId(LuaEntry.Player:GetCurServerId())
    LuaEntry.Player.serverType = targetServerType
    CS.GameEntry.GlobalData.serverType = targetServerType
    EventManager:GetInstance():Broadcast(EventId.OnEnterCrossServer)
    if curServerType~=targetServerType or targetServerType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        if targetServerType == ServerType.NORMAL or targetServerType == ServerType.EDEN_SERVER then
            CS.SceneManager.World:ResetCameraMaxHeight()
            CS.SceneManager.World:SetWorldSize(1000);
            if CS.SceneManager.World.SetMapZoneActive~=nil then
                CS.SceneManager.World:SetMapZoneActive(true)
            end
            if CS.SceneManager.World.OnChangeServerTypeRefresh~=nil then
                CS.SceneManager.World:OnChangeServerTypeRefresh()
            else
                if CS.SceneManager.World.RemoveDragonLandRange~=nil then
                    CS.SceneManager.World:RemoveDragonLandRange()
                end
                if CS.SceneManager.World.InitBlackBlock~=nil then
                    CS.SceneManager.World:InitBlackBlock()
                end
            end
        elseif targetServerType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
            CS.SceneManager.World:SetCameraMaxHeight(115)
            CS.SceneManager.World:SetWorldSize(100);
            if CommonUtil.CheckIsLessThanTargetVersion("1.250.523") then
                local obj = CS.UnityEngine.GameObject.Find("World")
                if obj~=nil then
                    local staticRoot = obj.transform:Find("Static")
                    if staticRoot~=nil then
                        staticRoot.gameObject:SetActive(false)
                    end
                end
            end
            if CS.SceneManager.World.SetMapZoneActive~=nil then
                CS.SceneManager.World:SetMapZoneActive(false)
            end
            if CS.SceneManager.World.OnChangeServerTypeRefresh~=nil then
                CS.SceneManager.World:OnChangeServerTypeRefresh()
            else
                if CS.SceneManager.World.RemoveBlackDesert~=nil then
                    CS.SceneManager.World:RemoveBlackDesert()
                end
                if CS.SceneManager.World.CreateDragonLandRange~=nil then
                    CS.SceneManager.World:CreateDragonLandRange()
                end
            end
            EventManager:GetInstance():Broadcast(EventId.EnterDragonWorld)
        end
    end
    DataCenter.ActDragonManager:SendGetEffectInfo()
    DataCenter.ActDragonManager:RequestBattleScore()
    DataCenter.WorldAllianceCityDataManager:InitAllCityDataRequest()
    DataCenter.CityNpcManager:SetNpcVisible(false)
    CS.SceneManager.World:UpdateViewRequest(true)
    CommonUtil.PlayGameBgMusic()
end

function CrossServerUtil.OnBackSelfServer()
    LuaEntry.Player:SetCrossServerId(-1)
    CS.GameEntry.Data.Player:OnCrossServerId(-1)
    local worldId = LuaEntry.Player.srcWorldId
    LuaEntry.Player:SetWorldId(worldId)
    if CS.GameEntry.Data.Player.SetWorldId~=nil then
        CS.GameEntry.Data.Player:SetWorldId(worldId)
    end
    CS.GameEntry.NetworkCross:RemoveConnect()
    CS.SceneManager.World:OnChangeServerRemove()
    EventManager:GetInstance():Broadcast(EventId.SetCityPeopleAndCarVisible, CityPeopleAndCarVisibleType.AllShow)
    local curServerType = LuaEntry.Player.serverType
    local targetServerType = DataCenter.AccountManager:GetServerTypeByServerId(LuaEntry.Player:GetCurServerId())
    LuaEntry.Player.serverType = targetServerType
    CS.GameEntry.GlobalData.serverType = targetServerType
    EventManager:GetInstance():Broadcast(EventId.OnQuitCrossServer)
    if curServerType~=targetServerType then
        if targetServerType == ServerType.NORMAL or targetServerType == ServerType.EDEN_SERVER then
            CS.SceneManager.World:ResetCameraMaxHeight()
            CS.SceneManager.World:SetWorldSize(1000);
            if CS.SceneManager.World.SetMapZoneActive~=nil then
                CS.SceneManager.World:SetMapZoneActive(true)
            end
            if CS.SceneManager.World.OnChangeServerTypeRefresh~=nil then
                CS.SceneManager.World:OnChangeServerTypeRefresh()
            else
                if CS.SceneManager.World.RemoveDragonLandRange~=nil then
                    CS.SceneManager.World:RemoveDragonLandRange()
                end
                if CS.SceneManager.World.InitBlackBlock~=nil then
                    CS.SceneManager.World:InitBlackBlock()
                end
            end
        elseif targetServerType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
            CS.SceneManager.World:SetCameraMaxHeight(115)
            CS.SceneManager.World:SetWorldSize(100);
            if CS.SceneManager.World.SetMapZoneActive~=nil then
                CS.SceneManager.World:SetMapZoneActive(false)
            end
            if CS.SceneManager.World.OnChangeServerTypeRefresh~=nil then
                CS.SceneManager.World:OnChangeServerTypeRefresh()
            else
                if CS.SceneManager.World.RemoveBlackDesert~=nil then
                    CS.SceneManager.World:RemoveBlackDesert()
                end
                if CS.SceneManager.World.CreateDragonLandRange~=nil then
                    CS.SceneManager.World:CreateDragonLandRange()
                end
            end
        end
        if curServerType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
            if CommonUtil.CheckIsLessThanTargetVersion("1.250.523") then
                local obj = CS.UnityEngine.GameObject.Find("World")
                if obj~=nil then
                    local staticRoot = obj.transform:Find("Static")
                    if staticRoot~=nil then
                        staticRoot.gameObject:SetActive(true)
                    end
                end
            end
            EventManager:GetInstance():Broadcast(EventId.QuitDragonWorld)
        end
    end
    DataCenter.WorldAllianceCityDataManager:InitAllCityDataRequest()
    DataCenter.CityNpcManager:SetNpcVisible(true)
    CS.SceneManager.World:UpdateViewRequest(true)
    CommonUtil.PlayGameBgMusic()
end

function CrossServerUtil.GetTargetServerIdAndPort(serverId)
    local oneData = {}
    if CS.CommonUtils.IsDebug() then
        if serverId ==1 then
            oneData.ip = "10.7.88.21"
            oneData.port = 9933;
        elseif serverId ==2 then
            oneData.ip = "10.7.89.202"
            oneData.port = 8088;
        elseif serverId ==3 then
            oneData.ip = "10.7.88.35"
            oneData.port = 8088;
        elseif serverId ==52 then
            oneData.ip = "10.7.88.127"
            oneData.port = 8088;
        elseif serverId ==53 then
            oneData.ip = "10.7.88.128"
            oneData.port = 8088;
        elseif serverId == 997 then
            oneData.ip = "10.7.88.124"
            oneData.port = 8088;
        elseif serverId ==998 then
            oneData.ip = "10.7.88.125"
            oneData.port = 8088;
        elseif serverId ==999 then
            oneData.ip = "10.7.88.126"
            oneData.port = 8088;
        elseif serverId ==9001 then
            oneData.ip = "10.7.88.121"
            oneData.port = 8088;
        elseif serverId ==9201 then
            oneData.ip = "10.7.88.123"
            oneData.port = 8088;
        elseif serverId ==9202 then
            oneData.ip = "10.7.88.129"
            oneData.port = 8088;
        elseif serverId ==9601 then
            oneData.ip = "10.7.88.122"
            oneData.port = 8088;
        end
    else
        oneData.ip = "game-ds-r1.metapoint.club"
        oneData.port = CommonUtil.GetPortId(serverId);
    end
    return oneData
end

function CrossServerUtil.OnDisConnect()
    
    if CrossServerUtil:GetIsCrossServer() then
        if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
            CS.GameEntry.NetworkCross:RemoveConnect()
        else
            CrossServerUtil.OnBackSelfServer()
        end
        
    end
end
function CrossServerUtil:GetIsCrossServer()
    return (LuaEntry.Player:IsInSelfServer() == false)
end

function CrossServerUtil.OnEnterPve()
    if CrossServerUtil:GetIsCrossServer() then
        LuaEntry.Player:SetCrossServerId(-1)
        CS.GameEntry.Data.Player:OnCrossServerId(-1)
        CS.GameEntry.NetworkCross:RemoveConnect()
    end
end

function CrossServerUtil:CanShowCrossSubwayBuildBtn()
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.APS_BUILD_WORMHOLE_MAIN)
    if buildData == nil then -- A口
        return false
    end
    
    local crossBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.WORM_HOLE_CROSS)
    if crossBuildData ~= nil then -- C口
        return true
    end
    
    return CrossServerUtil:CanPlaceCrossSubway()
end

function CrossServerUtil:CanShowCrossSubwayInMainUI()
    if not CS.SceneManager:IsInWorld() then
        return false
    end
    
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.APS_BUILD_WORMHOLE_MAIN)
    if buildData == nil then -- A口
        return false
    end
    
    local crossBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.WORM_HOLE_CROSS)
    if crossBuildData ~= nil then -- C口
        return true
    end

    return CrossServerUtil:GetIsCrossServer() and CrossServerUtil:CanPlaceCrossSubway(true)
end

function CrossServerUtil:CanPlaceCrossSubway(inUI)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.APS_BUILD_WORMHOLE_MAIN)
    if buildData == nil then -- A口
        return false
    end
    
    if LuaEntry.Player:IsInAlliance() then
        -- 联盟宣战
        local season = DataCenter.SeasonDataManager:GetSeason() or 0
        if season<4 and season >= 2 and DataCenter.SeasonGroupManager:AreServersInSameGroup(LuaEntry.Player:GetSelfServerId(), LuaEntry.Player:GetCurServerId()) then
            local period = DataCenter.GloryManager:GetPeriod()
            if period == GloryPeriod.Prepare or period == GloryPeriod.Start then
                return true
                
            end
        end
        
        -- 联盟对决
        local allianceActInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if allianceActInfo ~= nil then
            local eventInfo = allianceActInfo:GetEventInfo()
            if eventInfo ~= nil then
                if eventInfo.crossFight > 0 then
                    if eventInfo.targetServerId ~= LuaEntry.Player:GetSelfServerId() and (inUI ~= true or eventInfo.targetServerId == LuaEntry.Player:GetCurServerId()) then
                        local curTime = UITimeManager:GetInstance():GetServerTime()
                        local endTime = eventInfo.endTime
                        if endTime > curTime then
                            if CrossServerUtil.GetCrossServerIsInSameSeason() then
                                return true
                            end
                        end
                    end
                end
            end
        end
        local actData = nil
        local needCheckTime = false
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.EdenAllianceActMine)
        if table.count(dataList) > 0 then
            actData = dataList[1]
        end
        if actData~=nil then
            if DataCenter.SeasonDataManager:GetIsInEdenWarServerGroup(LuaEntry.Player:GetCurServerId()) then
                needCheckTime = true
            end
            if actData~=nil and needCheckTime ==true then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if curTime>actData.startTime and curTime<actData.endTime then
                    return true
                end
            end
        end

        actData = nil
        dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.EdenAllianceCrossActMine)
        if table.count(dataList) > 0 then
            actData = dataList[1]
        end
        if actData~=nil then
            if DataCenter.SeasonDataManager:GetIsInEdenCrossWarServerGroup(LuaEntry.Player:GetCurServerId()) then
                needCheckTime = true
            end
            if actData~=nil and needCheckTime ==true then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if curTime>actData.startTime and curTime<actData.endTime then
                    return true
                end
            end
        end
    end

    --检查跨服打地
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.CrossDesert)
    if #dataList>0 then
        local data = dataList[1]
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if curTime < data.endTime then
            if data.servers and data.servers ~= "" then
                local serverList = string.split(data.servers,";")
                for i = 1 ,#serverList do
                    if tonumber(serverList[i]) == LuaEntry.Player:GetCurServerId() then
                        return true
                    end
                end
            end
        end
    end
    
    return false
end

function CrossServerUtil:GetIsInBattleServerGroup(serverId)
    if LuaEntry.Player:IsInAlliance() then
        local season = DataCenter.SeasonDataManager:GetSeason() or 0
        if season >= 2 and DataCenter.SeasonGroupManager:AreServersInSameGroup(LuaEntry.Player:GetSelfServerId(), serverId) then
            return true
        end
    end
    return false
end
function CrossServerUtil:GetAllianceFlagShowInUI()
    if LuaEntry.Player:IsInAlliance() then
        local allianceActInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if allianceActInfo ~= nil then
            local eventInfo = allianceActInfo:GetEventInfo()
            if eventInfo ~= nil then
                if eventInfo.crossFight ==2 then
                    return true
                end
            end
        end
    end
    return false
end

function CrossServerUtil:GetCanShowAllianceFlag()
    if LuaEntry.Player:IsInAlliance()  then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.CrossDesert)
        if #dataList>0 then
            --检查跨服打地
            local data = dataList[1]
            if data.startTime < curTime and curTime < data.endTime then
                return true
            end
        end
        if CrossServerUtil:GetCrossServerIsInSameSeason() == false then
            return false
        end
        local allianceActInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if allianceActInfo ~= nil then
            local eventInfo = allianceActInfo:GetEventInfo()
            if eventInfo ~= nil then
                if eventInfo.crossFight ==2 then
                    local endTime = eventInfo.endTime
                    if endTime > curTime then
                        return true
                    end
                end
            end
        end
    end
    return false
end

function CrossServerUtil:GetCanAttackCity()

    local actData = nil
    local needCheckTime = false
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.EdenAllianceActMine)
    if table.count(dataList) > 0 then
        actData = dataList[1]
    end
    if actData~=nil then
        if DataCenter.SeasonDataManager:GetIsInEdenWarServerGroup(LuaEntry.Player:GetCurServerId()) then
            needCheckTime = true
        end
        if actData~=nil and needCheckTime ==true then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if curTime>actData.startTime and curTime<actData.endTime then
                return true
            end
        end
    end

    actData = nil
    dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.EdenAllianceCrossActMine)
    if table.count(dataList) > 0 then
        actData = dataList[1]
    end
    if actData~=nil then
        if DataCenter.SeasonDataManager:GetIsInEdenCrossWarServerGroup(LuaEntry.Player:GetCurServerId()) then
            needCheckTime = true
        end
        if actData~=nil and needCheckTime ==true then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if curTime>actData.startTime and curTime<actData.endTime then
                return true
            end
        end
    end
    
    if DataCenter.GloryManager:CanAttackCityCrossServer() and CrossServerUtil:GetIsInBattleServerGroup(LuaEntry.Player:GetCurServerId()) then
        return true
    end
    if CrossServerUtil:GetCrossServerIsInSameSeason() == true then
        local allianceActInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if allianceActInfo ~= nil then
            local eventInfo = allianceActInfo:GetEventInfo()
            if eventInfo ~= nil and eventInfo.targetServerId == LuaEntry.Player:GetCurServerId() then
                if eventInfo.crossFight ==1 then
                    local curTime = UITimeManager:GetInstance():GetServerTime()
                    local endTime = eventInfo.endTime
                    if endTime > curTime then
                        return true
                    end
                elseif eventInfo.crossFight ==2 and eventInfo.canAttackCity == true then
                    local curTime = UITimeManager:GetInstance():GetServerTime()
                    local endTime = eventInfo.endTime
                    if endTime > curTime then
                        return true
                    end
                end
            end
        end
    end
    return false
end

function CrossServerUtil.GetCrossServerFightIsInSeason()
    local isInSeason = false
    local fightServerId = DataCenter.AllianceCompeteDataManager:GetFightServerId()
    if fightServerId>0 then
        if fightServerId ~= LuaEntry.Player:GetSelfServerId() then
            local season = DataCenter.AccountManager:GetSeasonNumByServerId(fightServerId)
            if season~=nil and season>0 then
                isInSeason = true
            end
        end
    end
    return isInSeason
end

function CrossServerUtil.GetActCrossServerIsInSeason()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.CrossDesert)
    if #dataList>0 then
        --检查跨服打地
        local data = dataList[1]
        if curTime < data.endTime then
            local cur = LuaEntry.Player:GetCurServerId()
            local curServerSeason = DataCenter.AccountManager:GetSeasonNumByServerId(LuaEntry.Player:GetCurServerId())
            local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
            if (curServerSeason + 1) == seasonId then
                return true
            end
        end
    end
    return false
end

function CrossServerUtil.GetCrossServerIsInSameSeason()
    local isSame = false
    local selfSeason = SeasonUtil.GetSeason()
    local fightServerId = DataCenter.AllianceCompeteDataManager:GetFightServerId()
    if fightServerId>0 then
        if fightServerId ~= LuaEntry.Player:GetSelfServerId() then
            local season = DataCenter.AccountManager:GetSeasonNumByServerId(fightServerId)
            if season~=nil and season>0 then
                if selfSeason == season then
                    isSame = true
                end
            else
                if selfSeason == nil or selfSeason ==0 then
                    isSame = true
                end
            end
        else
            isSame = true
        end
    end
    return isSame
end

function CrossServerUtil.GetCanShowCrossSeasonGround()
    local show =false
    local count = DataCenter.DesertDataManager:GetOtherSeverDesert()
    if count>0 then
        show = true
    else
        local actInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if actInfo then
            local eventInfo = actInfo:GetEventInfo()
            if eventInfo and eventInfo:CheckIfShowCrossDesert() then
                show = true
            end
        end
    end
    return show
end

function CrossServerUtil.GetIsInCrossServerFight()
    if LuaEntry.Player:IsInAlliance() then
        local allianceActInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if allianceActInfo ~= nil then
            local eventInfo = allianceActInfo:GetEventInfo()
            if eventInfo ~= nil then
                if eventInfo.crossFight > 0 then
                    return true
                end
            end
        end
    end
    return false
end


function CrossServerUtil.GetCrossMarchTargetCheckType(marchTargetType)
    if marchTargetType == MarchTargetType.ATTACK_CITY or marchTargetType == MarchTargetType.RALLY_FOR_CITY
    or marchTargetType == MarchTargetType.DIRECT_ATTACK_CITY then
        return 1
    end
    if marchTargetType == MarchTargetType.ATTACK_ARMY or marchTargetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING
            or marchTargetType == MarchTargetType.ATTACK_ALLIANCE_CITY or marchTargetType == MarchTargetType.ATTACK_BUILDING
            or marchTargetType == MarchTargetType.ATTACK_ARMY_COLLECT or marchTargetType == MarchTargetType.RALLY_ALLIANCE_BUILDING
            or marchTargetType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or marchTargetType == MarchTargetType.RALLY_FOR_BUILDING
            or marchTargetType == MarchTargetType.RALLY_THRONE or marchTargetType == MarchTargetType.RALLY_ASSISTANCE_THRONE then
        return 2
    end
    return 0
end

function CrossServerUtil.CheckCanUseInDeclareWarTarget(marchTargetType)
    if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        return true,""
    end
    local checkType = CrossServerUtil.GetCrossMarchTargetCheckType(marchTargetType)
    if checkType == 0 then
        return true,""
    end
    if checkType == 1 then
        if CrossServerUtil:GetCanAttackCity() then
            return true
        end
    elseif checkType == 2 then
        if LuaEntry.DataConfig:CheckSwitch("cross_fight_attack_march_check")==false then
            return true
        end
        local actData = nil
        local needCheckTime = false
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.EdenAllianceActMine)
        if table.count(dataList) > 0 then
            actData = dataList[1]
        end
        if actData~=nil then
            if DataCenter.SeasonDataManager:GetIsInEdenWarServerGroup(LuaEntry.Player:GetCurServerId()) then
                needCheckTime = true
            end
            if actData~=nil and needCheckTime ==true then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if curTime>actData.startTime and curTime<actData.endTime then
                    return true
                end
            end
        end

        actData = nil
        dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.EdenAllianceCrossActMine)
        if table.count(dataList) > 0 then
            actData = dataList[1]
        end
        if actData~=nil then
            if DataCenter.SeasonDataManager:GetIsInEdenCrossWarServerGroup(LuaEntry.Player:GetCurServerId()) then
                needCheckTime = true
            end
            if actData~=nil and needCheckTime ==true then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if curTime>actData.startTime and curTime<actData.endTime then
                    return true
                end
            end
        end
        
        local serverId = LuaEntry.Player:GetSelfServerId()
        local season = DataCenter.SeasonDataManager:GetSeason() or 0
        local curTemplate = DataCenter.SeasonGroupManager:GetTemplate(season, serverId)
        if curTemplate ~= nil  then
            local period = DataCenter.GloryManager:GetPeriod()
            local battleState =DataCenter.GloryManager:GetBattleState()
            local opponentData = DataCenter.GloryManager:GetOpponentData()
            if opponentData ~= nil and CrossServerUtil:GetIsInBattleServerGroup(LuaEntry.Player:GetCurServerId()) then
                if period == GloryPeriod.Start and battleState == GloryBattleState.Ongoing then
                    return true
                end
            end
        end
        
        local allianceActInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if allianceActInfo ~= nil then
            local eventInfo = allianceActInfo:GetEventInfo()
            if eventInfo ~= nil then
                if eventInfo.crossFight > 0 then
                    if eventInfo.targetServerId == LuaEntry.Player:GetCurServerId() then
                        local curTime = UITimeManager:GetInstance():GetServerTime()
                        local endTime = eventInfo.endTime
                        if endTime > curTime then
                            if CrossServerUtil.GetCrossServerIsInSameSeason() then
                                return true
                            end
                        end
                    end
                end
            end
        end
        
        dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.CrossDesert)
        if #dataList>0 then
            local data = dataList[1]
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if data.startTime < curTime and curTime < data.endTime then
                if data.servers and data.servers ~= "" then
                    local serverList = string.split(data.servers,";")
                    for i = 1 ,#serverList do
                        if tonumber(serverList[i]) == LuaEntry.Player:GetCurServerId() then
                            return true
                        end
                    end
                end
            end
        end
    elseif checkType == 0 then
        return true
    end
    return false,120897
end

return ConstClass("CrossServerUtil", CrossServerUtil)