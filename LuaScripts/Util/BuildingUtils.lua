---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/11/16 17:52
---
local BuildingUtils = {}
local RocketType = typeof(CS.BaseRocketCenter)

BuildingUtils.ITEM_SMELTING = "230104"
BuildingUtils.ITEM_MATERIAL = "230105"
function BuildingUtils:GetOutPutItemIdByBuildingId(buildId)
    if buildId == BuildingTypes.DS_EQUIP_SMELTING_FACTORY 
            or buildId == BuildingTypes.DS_EQUIP_SMELTING_FACTORY_2 then
        return BuildingUtils.ITEM_SMELTING
    elseif buildId == BuildingTypes.DS_EQUIP_MATERIAL_FACTORY then
        return BuildingUtils.ITEM_MATERIAL
    end
end

local function GetTrainingTypeAndBuildingType(buildId)
    if buildId == BuildingTypes.FUN_BUILD_INFANTRY_BARRACK then
        return NewQueueType.FootSoldier
    elseif buildId == BuildingTypes.FUN_BUILD_AIRCRAFT_BARRACK then
        return NewQueueType.BowSoldier
    elseif buildId == BuildingTypes.FUN_BUILD_CAR_BARRACK then
        return NewQueueType.CarSoldier
    elseif buildId == BuildingTypes.FUN_BUILD_TRAP_BARRACK then
        return NewQueueType.Trap
    end
    return NewQueueType.Default
end

local function GetMainPos()
    return DataCenter.BuildManager.main_city_pos
end
--获取4边型网格时建筑周围的点（右上原点）
local function GetAllNeighborsPos4(pos,radius)
    local result = {}
    for i = 1 ,radius do
        for y =1,radius do
            local item ={}
            item.x =pos.x-i+1
            item.y =pos.y-y+1
            table.insert(result,item)
        end
    end
    return result
end
--获取这个点半径内的所有邻居点坐标（没有位置关系）
local function GetAllNeighborsPos(pos,radius)
    local newPos = {} 
    newPos.x = pos.x+radius-1
    newPos.y = pos.y+radius-1
    local list = BuildingUtils.GetAllNeighborsPos4(newPos,2*radius-1)
    if list~=nil and #list>0 then
        table.removebyvalue(list,pos)
    end
    return list
end
 --获取建筑周围一圈范围内坐标
local function GetBuildRoundPos(pos,tileSize)
    local newPos = {}
    newPos.x = pos.x+1
    newPos.y = pos.y+1
    local checkTable = {}
    for i = 1 ,tileSize do
        for y =1,tileSize do
            local item ={}
            item.x =pos.x-i+1
            item.y =pos.y-y+1
            if checkTable[item.x]==nil then 
                checkTable[item.x] = {}
            end
            checkTable[item.x][item.y] = 1
        end
    end
    local result = {}
    for i = 1 ,tileSize+2 do
        for y =1,tileSize+2 do
            local item ={}
            item.x =newPos.x-i+1
            item.y =newPos.y-y+1
            if checkTable[item.x]~=nil and checkTable[item.x][item.y]~=nil then
            else
                table.insert(result,item)
            end
        end
    end
    return result
end


--获取建筑占地坐标点
local function GetBuildTileIndex(buildId,index)
    local res = {}
    local sz = 0
    local buildingId = math.floor(buildId / 1000) * 1000
    if SceneUtils.GetIsInWorld() and buildingId == BuildingTypes.FUN_BUILD_MAIN then
        sz = LuaEntry.DataConfig:TryGetNum("worldmap_city", "k12")
    else
        --local template = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
        --if template~=nil then
        --    sz = template.tiles
        --end
    end
    if sz~=nil and sz>1 then
        local vecPos = SceneUtils.IndexToTilePos(index)
        local rangeList = BuildingUtils.GetAllNeighborsPos4(vecPos,sz)
        if rangeList~=nil and #rangeList>0 then
            table.walk(rangeList,function(k,v)
                local item = SceneUtils.TilePosToIndex(v)
                table.insert(res,item)
            end)
        end
    else
        table.insert(res,index)
    end
    return res
end


--获取该位置能否放置建筑(buildUuid 针对移动)
local function IsCanPutDownByBuild(buildId,index,buildUuid,noPutPoint,isMoveCity)
    local resourceType = DataCenter.BuildManager:GetResourceTypeByBuildId(buildId)
    local points = BuildingUtils.GetBuildTileIndex(buildId, index)
    local isHaveCollect = false
    for k,v in pairs(points) do
        --判断点能不能放IsCanPutDownByPoint 函数中 不要放这里
        local putState = BuildingUtils.IsCanPutDownByPoint(v, buildId, buildUuid, resourceType , noPutPoint,isMoveCity)
        if putState == BuildPutState.Ok then
            isHaveCollect = true
        elseif putState ~= BuildPutState.NoCollectRange then
            return putState
        end
    end
    if resourceType ~= ResourceType.None and isHaveCollect ==false then
        return BuildPutState.NoCollectRange
    end
    if SeasonUtil.IsInSeasonDesertMode() then
        if buildId~= BuildingTypes.FUN_BUILD_MAIN and buildId~= BuildingTypes.APS_BUILD_WORMHOLE_SUB and buildId~= BuildingTypes.WORM_HOLE_CROSS and BuildingUtils.IsInEdenSubwayGroup(buildId)== false then
            --赛季建筑连通性设置
            local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
            if buildTemplate ~= nil and buildTemplate.tab_type == UIBuildListTabType.SeasonBuild then
                local mainIndex = index
                local tileSize = buildTemplate.tiles
                local vecPos = SceneUtils.IndexToTilePos(mainIndex,ForceChangeScene.World)
                local rangeList = BuildingUtils.GetBuildRoundPos(vecPos,tileSize)
                local alreadyExitOccupy  = false
                for i=1,#rangeList do
                    if alreadyExitOccupy == false then
                        local v2 = rangeList[i]
                        alreadyExitOccupy = SeasonUtil.IsDesertOccupy(SceneUtils.TilePosToIndex(v2,ForceChangeScene.World))
                    end
                end
                if points~=nil then
                    for k,v in pairs(points) do
                        if alreadyExitOccupy == false then
                            alreadyExitOccupy = SeasonUtil.IsDesertOccupy(v)
                        end
                    end
                end
                if alreadyExitOccupy ==false then
                    return BuildPutState.NotConnectDesert
                end
            end
        end
    end
    return BuildPutState.Ok
end

--判断每个坐标点能不能放建筑，不能返回原因
--noPutPoint 当放农田后台数据没返回，已经放的点不能再次放置
local function IsCanPutDownByPoint(index, buildId, buildUuid, resType, noPutPoint,isMoveCity)
    if noPutPoint ~= nil and noPutPoint[index]~=nil then
        return BuildPutState.Building
    end
    local template = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
    if template ~= nil then
        local isSecBuild = (template.build_type == BuildType.Second)
        if isSecBuild then
            if BuildingUtils.IsInMainSubRange(index,template.sup_main_build_id) == false then
                return BuildPutState.OutMainSubRange
            end
        end
        if CS.SceneManager.World:IsTileWalkable(CS.SceneManager.World:IndexToTilePos(index))==false then
            return BuildPutState.StaticPoint
        end
        if CS.SceneManager.World:IsInMapByIndex(index)==false then
            return BuildPutState.OutUnlockRange
        end
        local myUid = LuaEntry.Player.uid
        local ignoreRangeLimit = false
        if buildId~=nil and (buildId == BuildingTypes.APS_BUILD_WORMHOLE_SUB or buildId == BuildingTypes.WORM_HOLE_CROSS 
                or BuildingUtils.IsInEdenSubwayGroup(buildId)== true
                or buildId == BuildingTypes.FUN_BUILD_MAIN or template.tab_type == UIBuildListTabType.SeasonBuild) then
            ignoreRangeLimit =true
        end

        if CS.SceneManager:IsInCity() then
            local temp = DataCenter.CityPointManager:GetPointType(index)
            if temp == CityPointType.Building then
                local buildingDate = DataCenter.BuildManager:GetBuildingDataByPointId(index,false)
                if buildingDate ~= nil and buildingDate.uuid ~= buildUuid then
                    return BuildPutState.Building
                end
            elseif temp == CityPointType.Collect then
                return BuildPutState.Collect
            end
            if resType ==nil or resType == ResourceType.None then
                if temp == CityPointType.CollectRange then
                    return BuildPutState.CollectRange
                end
            end
        elseif CS.SceneManager:IsInWorld() then
            local v2 = SceneUtils.IndexToTilePos(index,ForceChangeScene.World)
            if DataCenter.BirthPointTemplateManager:IsInAllianceCityRange(v2.x,v2.y) then
                return BuildPutState.AlCityBuilding
            end
            if buildId~=nil and BuildingUtils.IsInEdenSubwayGroup(buildId)== true then
                if DataCenter.DesertDataManager:CanPlaceEdenWormByPointId(index) ==false then
                    return BuildPutState.CanNotPlaceEdenSubway
                end
            end
            if template.tab_type == UIBuildListTabType.SeasonBuild then
                if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
                    local myAllow = false
                    local areaId = CS.SceneManager.World:GetAreaIdByPosId(index-1)
                    local areaTemp = DataCenter.EdenAreaTemplateManager:GetTemplate(areaId)
                    if areaTemp~=nil then
                        if areaTemp.area_type == EdenAreaType.NORTH_BORN_AREA then
                            if DataCenter.RobotWarsManager:GetSelfCamp() == EdenCamp.NORTH then
                                myAllow = true
                            end
                        elseif areaTemp.area_type == EdenAreaType.SOUTH_BORN_AREA then
                            if DataCenter.RobotWarsManager:GetSelfCamp() == EdenCamp.SOUTH then
                                myAllow = true
                            end
                        end
                    end
                    if myAllow ==false then
                        return BuildPutState.NoInAllianceCenterRange
                    end
                end
            end
            if  buildId ~= BuildingTypes.FUN_BUILD_MAIN and SceneUtils.IsInBlackRange(index) then
                return BuildPutState.InBlackLandRange
            end
            if  DataCenter.DesertDataManager:CanBuildByPointId(index,buildId,isMoveCity) ==false then
                return BuildPutState.NoInAllianceCenterRange
            end
            if isMoveCity then
                if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
                    local myAllow = false
                    local areaId = CS.SceneManager.World:GetAreaIdByPosId(index-1)
                    local areaTemp = DataCenter.EdenAreaTemplateManager:GetTemplate(areaId)
                    if areaTemp~=nil then
                        if areaTemp.area_type == EdenAreaType.NORTH_BORN_AREA then
                            if DataCenter.RobotWarsManager:GetSelfCamp() == EdenCamp.NORTH then
                                myAllow = true
                            end
                        elseif areaTemp.area_type == EdenAreaType.SOUTH_BORN_AREA then
                            if DataCenter.RobotWarsManager:GetSelfCamp() == EdenCamp.SOUTH then
                                myAllow = true
                            end
                        elseif areaTemp.area_type == EdenAreaType.FIGHT_AREA then
                            local seasonStartTime = DataCenter.SeasonDataManager:GetSeasonStartTime()
                            local curTime = UITimeManager:GetInstance():GetServerTime()
                            if areaTemp:GetUnlockBornTime() + seasonStartTime < curTime then
                                myAllow = true
                            end
                        end
                    end
                    if myAllow ==false then
                        return BuildPutState.MoveCityNotInUnLockRange
                    end
                end
            end
            local temp =  DataCenter.WorldPointManager:GetPointInfo(index)
            if temp~=nil then
                if temp.PointType == WorldPointType.PlayerBuilding then
                    temp = DataCenter.WorldPointManager:GetBuildDataByPointIndex(index)
                    if temp ==nil or temp.uuid ~=buildUuid then
                        return BuildPutState.Building
                    end
                elseif temp.PointType == WorldPointType.WorldCollectResource then
                    --temp = DataCenter.WorldPointManager:GetBuildDataByPointIndex(index)
                    if temp.ownerUid~=myUid then
                        return BuildPutState.Collect
                    end
                elseif temp.PointType == WorldPointType.WorldResource then
                    temp = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(index)
                    if temp.ownerUid~=myUid then
                        return BuildPutState.OnWorldResource
                    end
                elseif temp.PointType == WorldPointType.SAMPLE_POINT or temp.PointType == WorldPointType.SAMPLE_POINT_NEW then
                    return BuildPutState.OnSample
                elseif temp.PointType == WorldPointType.EXPLORE_POINT or temp.PointType == WorldPointType.DETECT_EVENT_PVE then
                    return BuildPutState.OnExplore
                elseif temp.PointType == WorldPointType.GARBAGE then
                    return BuildPutState.OnGarbage
                elseif temp.PointType == WorldPointType.MONSTER_REWARD then
                    return BuildPutState.MONSTER_REWARD
                end
            else
                if resType==nil or resType == ResourceType.None then
                    if WorldBuildUtil.IsCollectRangePoint(index) then
                        return BuildPutState.CollectRange
                    end
                end
            end
        end
    end
    return BuildPutState.Ok
end

--是否可以显绿色矿根周边
local function IsCanShowCollectGreenByPoint(index)
    --if CS.SceneManager.World:IsTileWalkable(SceneUtils.IndexToTilePos(index))==false then
    --    return false
    --end
    if CS.SceneManager.World:IsInMapByIndex(index) ==false then
        return false
    end
    if CS.SceneManager:IsInCity() then
        local temp = DataCenter.CityPointManager:GetPointType(index)
        if temp ~= CityPointType.Other then
           return false
        end
    elseif CS.SceneManager:IsInWorld() then
        local temp =  DataCenter.WorldPointManager:GetPointInfo(index)
        if temp~=nil then
            return false
        end
    end
    return true
end

----是否处于自己大本半径内(方形，修路使用)
local function IsInMyBaseSquareRange(point,radius)
    local mainBuild = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    if mainBuild~=nil and mainBuild:IsActive() then
        local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(mainBuild.itemId)
        if buildTemplate~=nil then
            return BuildingUtils.IsInRangeBySquare(mainBuild.pointId, point, radius,radius, buildTemplate.tiles)
        end
    end
    return true
end
--pos2是否在pos1的范围内,tile为点1的格子大小
local function IsInRangeBySquare(pos1,pos2,widthRadius,heightRadius,tile)
    pos1 = BuildingUtils.GetBuildModelCenter(pos1, tile)--偶数边长建筑中心偏左上角
    local vecPos1 = SceneUtils.IndexToTilePos(pos1)
    local vecPos2 = SceneUtils.IndexToTilePos(pos2)
    local xMin = vecPos1.x - widthRadius
    local xMax = vecPos1.x + widthRadius
    local yMin = vecPos1.y - heightRadius
    local yMax = vecPos1.y + heightRadius
    --偶数边长特殊处理(半径写4 实际是3)
    if (tile%2) == 0 then
        xMax = xMax - 1
        yMax = yMax - 1
    end
    return xMin<=vecPos2.x and xMax>=vecPos2.x and yMin<=vecPos2.y and yMax>=vecPos2.y
end
--是否处于敌方大本半径外
--point:点坐标
--radius:边长(方形)
--tile:建筑边长
local function IsOutOtherBaseSquareRange(point,radius,tile)
    if tile==nil then
        tile = 1
    end
    local mainBuild = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    local buildDes = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(BuildingTypes.FUN_BUILD_MAIN)
    local myUid = LuaEntry.Player.uid
    if mainBuild~=nil and buildDes~=nil then
        local vec2 = SceneUtils.IndexToTilePos(mainBuild.pointId)
        local list = DataCenter.BirthPointTemplateManager:GetPointInMyBaseRange(vec2.x,vec2.y)
        for k,v in pairs(list) do
            local perIndex = SceneUtils.TilePosToIndex(v)
            local info = DataCenter.WorldPointManager:GetBuildDataByPointIndex(perIndex)
            if info ~= nil then
                local itemId = nil
                if info.ownerUid ~= myUid then
                    itemId = info.itemId
                end
                if itemId == BuildingTypes.FUN_BUILD_MAIN then
                    local buildIndex = BuildingUtils.GetBuildModelCenter(point,tile)
                    local buildVec = SceneUtils.IndexToTilePos(buildIndex)
                    local mainRange = BuildingUtils.GetAllNeighborsPos4(v,3)
                    for a,b in pairs(mainRange) do
                        local distanceX = math.abs(buildVec.x-b.x)
                        local distanceY = math.abs(buildVec.y-b.y)
                        if distanceY<=radius and distanceX<=radius then
                            return false
                        end
                    end
                end
            end
        end
    end
    return true
end


--是否处于自己大本半径内(圆形形，修路使用)
local function IsInMyBaseCircleRange(point,radius)
    local mainBuild = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    if mainBuild~=nil and mainBuild:IsActive() then
        local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(mainBuild.itemId)
        if buildTemplate~=nil then
            return BuildingUtils.IsInRangeBySquare(mainBuild.pointId,point,radius,radius,buildTemplate.tiles) --方形
            --return BuildingUtils.IsInRangeByCircle(mainBuild.pointId, point, radius, buildTemplate.tiles)  圆形
        end
    end
    return true
end
--pos2是否在pos1的范围内,tile为点1的格子大小
local function IsInRangeByCircle(pos1,pos2,radius,tile)
    pos1 = BuildingUtils.GetBuildModelCenter(pos1, tile)--偶数边长建筑中心偏左上角
    local vecPos1 = SceneUtils.IndexToTilePos(pos1)
    local vecPos2 = SceneUtils.IndexToTilePos(pos2)
    local dis = (vecPos1.x-vecPos2.x)*(vecPos1.x-vecPos2.x) + (vecPos1.y-vecPos2.y)*(vecPos1.y-vecPos2.y)
    if radius*radius>=dis then
        return true
    end
    return false
end
--是否处于自己苍穹内
local function IsInMyBaseInsideRange(point)
    return true
end
--辅建筑是否处于主建筑范围内
--point:点坐标
--radius:边长(正方形)
--tile:建筑边长
local function IsInMainSubRange(point,mainBuildId)
    local alMainBuild = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(mainBuildId)
    if alMainBuild~=nil then
        for k,v in pairs(alMainBuild) do
            if v.destroyStartTime<=0 then
                local template = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(v.itemId)
                local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(v.itemId,v.level)
                if template~=nil and levelTemplate~=nil then
                    if BuildingUtils.IsInRangeBySquare(v.pointId,point,levelTemplate.offer_range,levelTemplate.offer_range,template.tiles) then
                        return true
                    end
                end
            end
            
        end
    end
    return false
end

local function ShowPutAllianceBuild(buildId, buildUuid, point, buildTopType, notBuildListStr, fromPanel)
    CS.SceneManager.World:UICreateAllianceBuilding(buildId, buildUuid, point, buildTopType, notBuildListStr)
    DataCenter.BuildManager:SetShowPutBuildFromPanel(fromPanel)
end

local function ShowPutBuild(buildId,topType,buildUuid,point,notBuildListStr, fromPanel)
    CS.SceneManager.World:UICreateBuilding(buildId, buildUuid, point, topType,notBuildListStr)
    DataCenter.BuildManager:SetShowPutBuildFromPanel(fromPanel)
end

--获取一个圆上所有点（去除边界外）
local function GetAllPointsByCircle(point,radius)
    local result = {}
    for x = -radius ,radius do
        for y =-radius,radius do
            local temp ={}
           temp.x = point.x+x
            temp.y= point.y+y
            if CS.SceneManager.World:IsInMap(temp) == true then
                if x*x+y*y<=radius*radius then
                    table.insert(result,temp)
                end
            end
        end
    end
    return result
end

---获取一个圆上所有点（去除边界外）
local function GetAllPointsBySquare(point,radius)
    local result = {}
    for x = -radius ,radius,1 do
        for y =-radius,radius,1 do
            local temp ={}
            temp.x = point.x+x
            temp.y= point.y+y
            table.insert(result,temp)
        end
    end
    return result
end
--获取中心为index半径为radius的正方形外圈的坐标，radius为0时返回自身,maxX为最大长，maxY为最大高
local function GetOutermostIndexByIndex(index,radius,maxX,maxY, forceType)
    local result = {}
    local temDic = {}
    local circle = SceneUtils.IndexToTilePos(index,forceType)
    local offset = {}
    local tempPos ={}
    local tempIndex = 0
    for i = 0 ,radius do
        for j = 0,1 do
            i =-i
            if maxX>=radius then
                offset.x = -radius
                offset.y = i
                tempPos.x = circle.x+offset.x
                tempPos.y = circle.y+offset.y
                tempIndex = SceneUtils.TilePosToIndex(tempPos,forceType)
                if temDic[tempIndex] == nil then
                    temDic[tempIndex]= true
                    table.insert(result, tempIndex)
                end
                offset.x = radius
                offset.y = i
                tempPos.x = circle.x+offset.x
                tempPos.y = circle.y+offset.y
                tempIndex = SceneUtils.TilePosToIndex(tempPos, forceType)
                if temDic[tempIndex] == nil then
                    temDic[tempIndex]= true
                    table.insert(result, tempIndex)
                end
            end
            
            if maxY>=radius then
                offset.x = i
                offset.y = radius
                tempPos.x = circle.x+offset.x
                tempPos.y = circle.y+offset.y
                tempIndex = SceneUtils.TilePosToIndex(tempPos,forceType)
                if temDic[tempIndex] == nil then
                    temDic[tempIndex]= true
                    table.insert(result, tempIndex)
                end
                offset.x = i
                offset.y = -radius
                tempPos.x = circle.x+offset.x
                tempPos.y = circle.y+offset.y
                tempIndex = SceneUtils.TilePosToIndex(tempPos,forceType)
                if temDic[tempIndex] == nil then
                    temDic[tempIndex]= true
                    table.insert(result, tempIndex)
                end
            end
        end
    end
    return result
end
--获取以point为中心，半径为radius的正方形，可以放置建筑的点，没有返回point点（以中间向外遍历）
local function GetPointByBuildCanPut(buildId,point,noBuildList)
    local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
    if buildTemplate~=nil then
        local resourceType = DataCenter.BuildManager:GetResourceTypeByBuildId(buildId)
        if resourceType==nil or resourceType == ResourceType.None then
            local recommendList = buildTemplate:GetReCommendPosition()
            if recommendList ~= nil and table.count(recommendList) > 0 then
                local put = 0
                for k,v in ipairs(recommendList) do
                    put = BuildingUtils.IsCanPutDownByBuild(buildId,v,0,noBuildList)
                    if put == BuildPutState.Ok then
                        return v
                    end
                end
                local v = recommendList[1]
                --判断上下左右4个点能不能放
                local willTile = buildTemplate.tiles
                local pointId = SceneUtils.GetIndexByOffset(v, willTile, 0)
                put = BuildingUtils.IsCanPutDownByBuild(buildId,pointId,0,noBuildList)
                if put == BuildPutState.Ok then
                    return pointId
                end
                pointId = SceneUtils.GetIndexByOffset(v, 0, -willTile)
                put = BuildingUtils.IsCanPutDownByBuild(buildId,pointId,0,noBuildList)
                if put == BuildPutState.Ok then
                    return pointId
                end
                pointId = SceneUtils.GetIndexByOffset(v, -willTile, 0)
                put = BuildingUtils.IsCanPutDownByBuild(buildId,pointId,0,noBuildList)
                if put == BuildPutState.Ok then
                    return pointId
                end
                pointId = SceneUtils.GetIndexByOffset(v, 0, willTile)
                put = BuildingUtils.IsCanPutDownByBuild(buildId,pointId,0,noBuildList)
                if put == BuildPutState.Ok then
                    return pointId
                end
            end
            if buildTemplate.build_type == BuildType.Second then
                if buildId == BuildingTypes.APS_BUILD_WORMHOLE_SUB or buildId == BuildingTypes.WORM_HOLE_CROSS or BuildingUtils.IsInEdenSubwayGroup(buildId)==true then
                    return point
                end
                local size = CS.UIUtils.GetCurScreenMaxRadiusSize()
                local radius = math.max(size.x,size.y)
                --一中心点为圆心
                for i = 0 ,radius do
                    local list = BuildingUtils.GetOutermostIndexByIndex(point,i,size.x,size.y)
                    if list~=nil then
                        local length = #list
                        for j = 1 ,length do
                            local put = BuildingUtils.IsCanPutDownByBuild(buildId,list[j],0,noBuildList)
                            if put == BuildPutState.Ok then
                                return list[j]
                            end
                        end
                    end
                end
                return point
            else
                local saveBuildPlacePoint = BuildingUtils.GetSaveBuildPlaceTypePoint(buildId, noBuildList)
                if saveBuildPlacePoint>0  then
                    return saveBuildPlacePoint
                end
            end
            local size = CS.UIUtils.GetCurScreenMaxRadiusSize()
            local radius = math.max(size.x,size.y)
            --一中心点为圆心
            for i = 0 ,radius do
                local list = BuildingUtils.GetOutermostIndexByIndex(point,i,size.x,size.y)
                if list~=nil then
                    local length = #list
                    for j = 1 ,length do
                        local put = BuildingUtils.IsCanPutDownByBuild(buildId,list[j],0,noBuildList)
                        if put == BuildPutState.Ok then
                            return list[j]
                        end
                    end
                end
            end
        end
    end
    return point
end
--获取相同放置建筑类型的推荐点
local function GetSaveBuildPlaceTypePoint(buildId,noBuildList)
    if true then
        return 0
    end
    local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
    if buildTemplate~=nil then
        local zoneType = buildTemplate.zoneType
        if zoneType ~= BuildZoneType.No then
            local zone = nil
            if zone ~= nil then
                local mainPosX = nil
                local mainPosY = nil
                local addPoint = {}
                if noBuildList~=nil then
                    for k,v in pairs(noBuildList) do
                        addPoint[v] = false
                    end
                end
                local points = {}
                local willTile = buildTemplate.tiles
                if zone[BuildZoneMainType.Main] ~= nil then
                    for k,v in ipairs(zone[BuildZoneMainType.Main]) do
                        local list = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(v.id)
                        if list ~= nil then
                            for k1,v1 in ipairs(list) do
                                if mainPosX == nil and mainPosY == nil then
                                    local pos = SceneUtils.IndexToTilePos(v1.pointId)
                                    mainPosX = pos.x
                                    mainPosY = pos.y
                                end
                            end
                        end
                    end
                end
                if mainPosX == nil and mainPosY == nil then
                    mainPosX = DataCenter.BuildManager.main_city_pos.x
                    mainPosY = DataCenter.BuildManager.main_city_pos.y
                end
                if zone[BuildZoneMainType.Sub] ~= nil then
                    for k,v in ipairs(zone[BuildZoneMainType.Sub]) do
                        local list = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(v.id)
                        if list ~= nil then
                            for k1,v1 in ipairs(list) do
                                local originalPoint = v1.pointId
                                local originalTile = v.tiles
                                local neighborPoints = {}
                                --上
                                table.insert(neighborPoints,SceneUtils.GetIndexByOffset(originalPoint, 0, willTile))
                                table.insert(neighborPoints,SceneUtils.GetIndexByOffset(originalPoint, willTile - originalTile, willTile))
                                --下
                                table.insert(neighborPoints,SceneUtils.GetIndexByOffset(originalPoint, 0, -originalTile))
                                table.insert(neighborPoints,SceneUtils.GetIndexByOffset(originalPoint, willTile - originalTile, -originalTile))
                                --左
                                table.insert(neighborPoints,SceneUtils.GetIndexByOffset(originalPoint,-originalTile, 0))
                                table.insert(neighborPoints,SceneUtils.GetIndexByOffset(originalPoint, -originalTile,willTile - originalTile))
                                --右
                                table.insert(neighborPoints,SceneUtils.GetIndexByOffset(originalPoint,willTile,0))
                                table.insert(neighborPoints,SceneUtils.GetIndexByOffset(originalPoint, willTile, willTile - originalTile))

                                for j = 1,#neighborPoints, 1 do
                                    local point = neighborPoints[j]
                                    if addPoint[point] == nil then
                                        --能否放下
                                        local isPutDown = BuildingUtils.IsCanPutDownByBuild(buildId, point, 0, noBuildList)
                                        if isPutDown == BuildPutState.Ok  then
                                            local pos = SceneUtils.IndexToTilePos(point)
                                            local dis = (pos.x-mainPosX)*(pos.x-mainPosX) + (pos.y-mainPosY)*(pos.y-mainPosY)
                                            addPoint[point] = true
                                            local oneData = {}
                                            oneData.item1 = point
                                            oneData.item2 = dis
                                            oneData.item3 = false
                                            table.insert(points,oneData)
                                        else
                                            addPoint[point] = false
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                table.sort(points, function(a, b)
                    if a.item2 ~= b.item2 then
                        return a.item2 < b.item2
                    else
                        if a.item3 ~= b.item3 then
                            return a.item3
                        end
                    end
                    
                    return false
                end)
                if #points > 0 then
                    return points[1].item1
                end 
            end
        end
    end
    return 0
end
--获取建筑周围点
local function GetBuildRangePoint(buildId,pointId)
    --总点4 * tile
    local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
    if buildTemplate~=nil then
        local tile = buildTemplate.tiles
        local neighborPoints = {}
        for i =0,tile-1 do
            --上
            table.insert(neighborPoints,SceneUtils.GetIndexByOffset(pointId, -i, 1))
            --下
            table.insert(neighborPoints,SceneUtils.GetIndexByOffset(pointId, -i, -tile))
            --左
            table.insert(neighborPoints,SceneUtils.GetIndexByOffset(pointId, -tile,-i))
            --右
            table.insert(neighborPoints,SceneUtils.GetIndexByOffset(pointId, 1, -i))
        end
        return neighborPoints
    end
end

--是否能连续建造下一个
local function IsCanBuildNext(buildId, sendCount)
    local result = false
    local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, 0)
    if levelTemplate ~= nil then
        local foldCount = 0
        local foldList = DataCenter.BuildManager:GetFoldUpAndNotFixBuildByBuildId(buildId)
        if foldList~=nil then
            foldCount = table.count(foldList)
        end
        if foldCount > 1 or levelTemplate.no_queue == BuildNoQueue.Yes then
            local canBuild = DataCenter.BuildManager:GetCurMaxBuildNum(buildId)
            local now = DataCenter.BuildManager:GetHaveBuildNumWithOutFoldUpByBuildId(buildId)
            local canBuildNum = canBuild- now - sendCount
            local needResourceTime = 2 - foldCount
            if needResourceTime < 0 then
                needResourceTime = 0
            end
            if canBuildNum>1 then
                result = true
                if needResourceTime>0 then
                    --判人口
                    local needPeopleNum = levelTemplate:GetNeedPeopleNumByBuildNum(now + sendCount + 2)
                    if needPeopleNum > 0 then
                        if needPeopleNum > LuaEntry.Resource:GetCntByResType(ResourceType.People) then
                            return false
                        end
                    end
                    
                    local resources = levelTemplate:GetNeedResource()
                    if resources ~= nil then
                        for k,v in pairs(resources) do
                            local resourceType = v.resourceType
                            local count = v.count*needResourceTime
                            local own = LuaEntry.Resource:GetCntByResType(resourceType)
                            if own < count then
                                return false
                            end
                        end
                    end
                end
            end
        end
    end
    return result
end

local function GetBuildModelCenter(mainIndex,tile)
    --算法我服务器相同
    local offset = BuildingUtils.GetCircleRange(tile)
    return SceneUtils.GetIndexByOffset(mainIndex,-offset,-offset)
end

--获得建筑模型中心点
local function GetBuildModelCenterVec(mainIndex,tile)
    local delta = tile - 1
    return SceneUtils.TileIndexToWorld(mainIndex) + Vector3.New(-delta,0,-delta)
end

local function GetBuildMainVecByModelCenter(centerIndex,tile)
    local delta = tile - 1
    return SceneUtils.TileIndexToWorld(centerIndex) + Vector3.New(delta,0,delta)
end

--获得建筑模型下方点，用于时间条和特效
local function GetBuildModelDownVec(mainIndex,tile)
    local delta = tile - 1
    return SceneUtils.TileIndexToWorld(mainIndex) + Vector3.New(-delta,0,-1 - delta * 2)
end

local function GetAllCanPutPointsByBuildId(pointId,buildId,buildUuid,isMoveCity)
    local result = {}
    local template = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
    if template~=nil then
        if template.build_type == BuildType.Second then
            local allMainBuild = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(template.sup_main_build_id)
            if allMainBuild~=nil then
                table.walk(allMainBuild,function(k,v)
                    local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(v.itemId,v.level)
                    if levelTemplate~=nil and levelTemplate.offer_range<=MaxShowBuildBlockRange  then
                        local pos = SceneUtils.IndexToTilePos(v.pointId)
                        local list = BuildingUtils.GetAllPointsBySquare(pos,levelTemplate.offer_range)
                        if list~=nil then
                            table.walk(list,function(a,b)
                                local index = SceneUtils.TilePosToIndex(b)
                                local put = BuildingUtils.IsCanPutDownByBuild(buildId,index,buildUuid,nil,isMoveCity)
                                if put == BuildPutState.Ok then
                                    table.insert(result,index)
                                end
                            end)
                        end
                    end
                end)
            end
        elseif template.build_type == BuildType.Main then
            local level = 1
            if buildUuid~=nil and buildUuid~=0 then
                local data = DataCenter.BuildManager:GetBuildingDataByUuid(buildUuid)
                if data~=nil then
                    level = data.level
                end
            end
            local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId,level)
            if levelTemplate~=nil and levelTemplate.offer_range<=MaxShowBuildBlockRange then
                local pos = SceneUtils.IndexToTilePos(pointId)
                local list = BuildingUtils.GetAllPointsBySquare(pos,levelTemplate.offer_range)
                if list~=nil then
                    table.walk(list,function(k,v)
                        local index = SceneUtils.TilePosToIndex(v)
                        local put = BuildingUtils.IsCanPutDownByBuild(buildId,index,buildUuid,nil,isMoveCity)
                        if put == BuildPutState.Ok then
                            table.insert(result,index)
                        end
                    end)
                end
            end
        end
        
    end
    return result
end
--是否建筑所在资源点为空
local function IsBuildResourceEmpty(buildId,pointId)
    local resourceType = DataCenter.BuildManager:GetResourceTypeByBuildId(buildId)
    if resourceType==nil or resourceType == ResourceType.None then
        return false
    end
    local rangeList = BuildingUtils.GetAllNeighborsPos4(pointId, CS.SceneManager.World:GetCollectResourceBuildRange())
    local collectInfos= {}
    table.walk(rangeList,function(k,v)
        local tempIndex = SceneUtils.TilePosToIndex(v)
        if CS.SceneManager.World:IsCollectPoint(tempIndex) then
            table.insert(collectInfos,DataCenter.WorldPointManager:GetResourcePointInfoByIndex(tempIndex))
        end
    end)
    if #collectInfos>0 then
        for k,v in pairs(collectInfos) do
            local type = LocalController:instance():getStrValue(TableName.GatherResource,v.id, "resource_type")
            if tonumber(type) ~= resourceType  then
                return false
            end
        end
    end
    return true
end
--A是否在B范围内
local function CheckIsInBuildRange(Ax,Ay,Bx,By,tile)
    local rangePos = {}
    rangePos.x = Bx
    rangePos.y = By
    local list = BuildingUtils.GetAllNeighborsPos4(rangePos,tile)
    if list~=nil and #list>0 then
        for k,v in pairs(list) do
            if v.x == Ax and v.y == Ay then
                return true
            end
        end
    end
    return false
end

local function GetResourcePercent(buildId,buildLv,endTime,startTime)
    local result = 0
    local buildLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId,buildLv)
    if buildLevelTemplate ~= nil then
        local outSpeed = buildLevelTemplate:GetCollectSpeed() / 1000
        if outSpeed>0 then
            local now = UITimeManager:GetInstance():GetServerTime()
            if endTime>0 and now>endTime then
                now = endTime
            end
            local count = (now - startTime) * outSpeed
            local max = buildLevelTemplate:GetCollectMaxOthers()
            if count>max then
                count = max
            end
            result = count/max
        end
    end
    return result
end

--获取占地面积所对应的圈数
local function GetCircleRange(tile)
    local x,y = math.modf((tile - 1) / 2)
    return x
end

--该建筑能不能移动
local function CanMoveBuild(buildId)
    return false
end

--升级界面点完升级是否直接关闭
local function IsClosePanel(buildId, level)
    local needMainLv = LuaEntry.DataConfig:TryGetNum("building_giftbox", "k1")
    if needMainLv >= DataCenter.BuildManager.MainLv then
        return true
    end
    return false
end


--升级界面点完升级是否直接关闭
local function IsOutResourceBuild(buildId, level)
    local resourceType = DataCenter.BuildManager:GetOutResourceTypeByBuildId(buildId)
    if resourceType ~= ResourceType.None then
        if buildId == BuildingTypes.FUN_BUILD_CONDOMINIUM then
            if LuaEntry.Effect:GetGameEffect(EffectDefine.UPGRADE_ADD_RES_CONDOMINIUM) == 0 then
                return false
            end
        end

        return true
    end
    return false
end


--火箭模型是否正在做动画
local function IsRocketPlayingArrive(pointId)
    local result = false
    if CS.SceneManager.World ~= nil and CS.SceneManager.IsSceneBuildFninsh() == true then
        local city = CS.SceneManager.World:GetBuildingByPoint(pointId)
        if city ~= nil then
            if city.transform:GetComponent(RocketType) ~= nil then
                cast(city, RocketType)
                if city:IsArriving() then
                    result = true
                end
            end
        end
    end
    return result
end

local function GetDroneFreeTimeForBuild(buildId)
    local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
    if buildTemplate and buildTemplate:IsSeasonBuild() then
        return BuildingUtils.GetBuildFreeTime(true)
    end
    return BuildingUtils.GetBuildFreeTime(false)
end

local function GetBuildFreeTime(isSeasonBuild)
    local result = LuaEntry.Effect:GetGameEffect(EffectDefine.BUILD_TIME_REDUCE) -- 主城控制台
    if isSeasonBuild then
        result = result + LuaEntry.Effect:GetGameEffect(EffectDefine.SEASON_BUILD_TIME_REDUCE) -- 赛季控制台
    end
    return result
end

--获取城内建筑模型的名字
local function GetCityBuildingModelName(buildId, buildLevel)
    local result = ""
    if buildId == BuildingTypes.FUN_BUILD_MAIN then
        result = DataCenter.DecorationDataManager:GetCityBuildingDecoration()
    end
    if result == nil or result == "" then
        --if buildId == BuildingTypes.FUN_BUILD_TRAINFIELD_4 then
        --    local hasMonthCard = DataCenter.MonthCardNewManager:CheckIfMonthCardActive()
        --    if hasMonthCard then
        --        local template = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, buildLevel)
        --        if template ~= nil then
        --            result = template:GetCityModelName()
        --        end
        --    else
        --        local template = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId,1)
        --        if template ~= nil then
        --            result = template:GetCityModelName()
        --        end
        --    end
        --else
            local template = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, buildLevel)
            if template ~= nil then
                result = template:GetCityModelName()
            end
        --end
        
    end
    if result == nil or result == "" then
        result = "building_801000"
    end
 
    return result
end

--获取城外建筑模型的名字
local function GetWorldBuildingModelName(buildId, buildLevel)
    local result = ""
    if buildId == BuildingTypes.FUN_BUILD_MAIN then
        result = DataCenter.DecorationDataManager:GetWorldBuildingDecoration()
    end
    if result == nil or result == "" then
        local template = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, buildLevel)
        if template ~= nil then
            result = template:GetWorldModelName()
        end
    end

    return result
end


--获取长方形占地坐标点
local function GetAllIndexBySize(index, sizeX, sizeY)
    local result = {}
    for x = 0 ,sizeX - 1, 1 do
        for y = 0, sizeY - 1, 1 do
            table.insert(result, SceneUtils.GetIndexByOffset(index, -x, -y))
        end
    end
    return result
end

local function IsInEdenSubwayGroup(buildId)
    if buildId == BuildingTypes.EDEN_WORM_HOLE_1 or buildId == BuildingTypes.EDEN_WORM_HOLE_2 or buildId == BuildingTypes.EDEN_WORM_HOLE_3 then
        return true
    end
    return false
end

BuildingUtils.GetTrainingTypeAndBuildingType = GetTrainingTypeAndBuildingType
BuildingUtils.GetMainPos = GetMainPos
BuildingUtils.GetAllNeighborsPos4= GetAllNeighborsPos4
BuildingUtils.GetAllNeighborsPos = GetAllNeighborsPos
BuildingUtils.GetBuildTileIndex = GetBuildTileIndex
BuildingUtils.CheckIfCanPutDownAllianceBuild = CheckIfCanPutDownAllianceBuild
BuildingUtils.CheckIfCanPlaceAlbuildingByPoint = CheckIfCanPlaceAlbuildingByPoint
BuildingUtils.IsCanPutDownByBuild = IsCanPutDownByBuild
BuildingUtils.IsCanPutDownByPoint= IsCanPutDownByPoint
BuildingUtils.IsCanShowCollectGreenByPoint= IsCanShowCollectGreenByPoint
BuildingUtils.IsInRangeBySquare =IsInRangeBySquare
BuildingUtils.IsOutOtherBaseSquareRange = IsOutOtherBaseSquareRange
BuildingUtils.IsInMyBaseCircleRange = IsInMyBaseCircleRange
BuildingUtils.IsInRangeByCircle = IsInRangeByCircle
BuildingUtils.IsInMyBaseInsideRange= IsInMyBaseInsideRange
BuildingUtils.IsInMainSubRange = IsInMainSubRange
BuildingUtils.ShowPutBuild= ShowPutBuild
BuildingUtils.ShowPutAllianceBuild= ShowPutAllianceBuild
BuildingUtils.GetAllPointsByCircle =GetAllPointsByCircle
BuildingUtils.GetAllPointsBySquare= GetAllPointsBySquare
BuildingUtils.GetOutermostIndexByIndex= GetOutermostIndexByIndex
BuildingUtils.GetPointByBuildCanPut = GetPointByBuildCanPut
BuildingUtils.GetSaveBuildPlaceTypePoint= GetSaveBuildPlaceTypePoint
BuildingUtils.GetBuildRangePoint = GetBuildRangePoint
BuildingUtils.IsCanBuildNext= IsCanBuildNext
BuildingUtils.GetBuildModelCenter = GetBuildModelCenter
BuildingUtils.GetBuildModelCenterVec = GetBuildModelCenterVec
BuildingUtils.GetAllCanPutPointsByBuildId = GetAllCanPutPointsByBuildId
BuildingUtils.IsInMyBaseSquareRange= IsInMyBaseSquareRange
BuildingUtils.IsBuildResourceEmpty = IsBuildResourceEmpty
BuildingUtils.CheckIsInBuildRange = CheckIsInBuildRange
BuildingUtils.GetResourcePercent =GetResourcePercent
BuildingUtils.GetCircleRange =GetCircleRange
BuildingUtils.GetBuildRoundPos = GetBuildRoundPos
BuildingUtils.CanMoveBuild = CanMoveBuild
BuildingUtils.GetBuildModelDownVec = GetBuildModelDownVec
BuildingUtils.IsClosePanel = IsClosePanel
BuildingUtils.IsRocketPlayingArrive = IsRocketPlayingArrive
BuildingUtils.IsOutResourceBuild = IsOutResourceBuild
BuildingUtils.GetBuildMainVecByModelCenter = GetBuildMainVecByModelCenter
BuildingUtils.GetDroneFreeTimeForBuild = GetDroneFreeTimeForBuild
BuildingUtils.GetBuildFreeTime = GetBuildFreeTime
BuildingUtils.GetCityBuildingModelName = GetCityBuildingModelName
BuildingUtils.GetWorldBuildingModelName = GetWorldBuildingModelName
BuildingUtils.GetAllIndexBySize = GetAllIndexBySize
BuildingUtils.IsInEdenSubwayGroup = IsInEdenSubwayGroup
return ConstClass("BuildingUtils", BuildingUtils)