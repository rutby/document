---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/11/8 17:32
---
local SeasonUtil = {}
function SeasonUtil.IsInSeasonDesertMode()
    if LuaEntry.DataConfig:CheckSwitch("season1_desert_func") then
        local mode = DataCenter.SeasonDataManager:GetMode()
        if mode~=nil and mode == 1 then
            return true
        end
        if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            if mode~=nil and mode == 2 then
                return true
            end
        end
    end
    return false
end


function SeasonUtil.CanAttackBuild(pointId, forceCheck)
    local inProtect = false
    local alreadyExitOccupy = false
    if (SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() ==false) or (CrossServerUtil:GetIsCrossServer() and CrossServerUtil.GetCrossServerFightIsInSeason()) or (CrossServerUtil:GetIsCrossServer() and CrossServerUtil:GetIsInBattleServerGroup(LuaEntry.Player:GetCurServerId())==true) then
        local info = DataCenter.WorldPointManager:GetBuildDataByPointIndex(pointId)
        if info ~= nil then
            if info~=nil then
                local mainIndex = info.mainIndex
                local tileSize = WorldBuildUtil.GetBuildTile(info.mainIndex)
                local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(info.itemId)
                if buildTemplate ~= nil and (buildTemplate.tab_type == UIBuildListTabType.SeasonBuild or forceCheck  or BuildingUtils.IsInEdenSubwayGroup(info.itemId)== true ) then
                    local vecPos = SceneUtils.IndexToTilePos(mainIndex,ForceChangeScene.World)
                    local mainRange = BuildingUtils.GetAllNeighborsPos4(vecPos,tileSize)
                    for a,b in pairs(mainRange) do
                        if inProtect ==false then
                            inProtect = SeasonUtil.IsDesertInProtect(SceneUtils.TilePosToIndex(b,ForceChangeScene.World))
                        end
                    end
                    if inProtect == false then
                        local rangeList = BuildingUtils.GetBuildRoundPos(vecPos,tileSize)
                        for i=1,#rangeList do
                            if alreadyExitOccupy == false then
                                local v2 = rangeList[i]
                                alreadyExitOccupy = SeasonUtil.IsDesertOccupy(SceneUtils.TilePosToIndex(v2,ForceChangeScene.World))
                            end
                        end
                    end
                else
                    inProtect = false
                    alreadyExitOccupy = true
                end
            end
        end
    else
        inProtect = false
        alreadyExitOccupy = true
    end
    return inProtect,alreadyExitOccupy
end

function SeasonUtil.CanAttackAllianceBuild(pointId)
    local inProtect = false
    local alreadyExitOccupy = false
    if (SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() ==false) or (CrossServerUtil:GetIsCrossServer() and CrossServerUtil.GetCrossServerFightIsInSeason()) or (CrossServerUtil:GetIsCrossServer() and CrossServerUtil:GetIsInBattleServerGroup(LuaEntry.Player:GetCurServerId())==true) then
        local pointInfo = DataCenter.WorldPointManager:GetPointInfo(pointId)
        local mainIndex = pointInfo.mainIndex
        if pointInfo ~= nil then
            local info = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.AllianceBuildingPointInfo")
            if info then
                local tileSize = 3
                local mineID = info["buildId"]
                local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineID)
                if template~=nil then
                    tileSize = template.resSize
                end
                local vecPos = SceneUtils.IndexToTilePos(mainIndex,ForceChangeScene.World)
                local rangeList = BuildingUtils.GetBuildRoundPos(vecPos,tileSize)
                for i=1,#rangeList do
                    if alreadyExitOccupy == false then
                        local v2 = rangeList[i]
                        alreadyExitOccupy = SeasonUtil.IsDesertOccupy(SceneUtils.TilePosToIndex(v2,ForceChangeScene.World))
                    end
                end
            end
        end
    else
        inProtect = false
        alreadyExitOccupy = true
    end
    return inProtect,alreadyExitOccupy
end

--获取当前是第几赛季（不在赛季返回nil）
function SeasonUtil.GetSeason()
    if LuaEntry.DataConfig:CheckSwitch("season1_desert_func") then
        return DataCenter.SeasonDataManager:GetSeason()
    end
    return nil
end

function SeasonUtil.GetSeasonResistanceSelf(selfValue,targetValue,k21)--己方抗性值(伤害百分比)
    local value = 1
    local k22 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k22")
    local delta = targetValue-selfValue
    if delta>0 then
        value = math.max((1-(delta/k21)),k22)
    end
    return value
end
function SeasonUtil.GetSeasonResistanceOther(selfValue,targetValue,k23) --对方抗性值(伤害百分比)
    local value = 1
    local k24 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k24")
    local delta = targetValue-selfValue
    if delta>0 then
        value = math.min((1+(delta/k23)),k24)
    end
    return value
end

function SeasonUtil.IsDesertInProtect(pointId)
    local inProtect = false
    local tileInfo = CS.SceneManager.World:GetWorldTileInfo(pointId)
    if tileInfo~=nil then
        local desertInfo = tileInfo:GetWorldDesertInfo()
        if desertInfo~=nil then
            local protectEndTime = desertInfo.protectEndTime
            local curSecond = UITimeManager:GetInstance():GetServerSeconds()
            if curSecond<protectEndTime then
                inProtect = true
            end
        end
    end
    return inProtect
end

function SeasonUtil.IsDesertOccupy(pointId)
    local alreadyExitOccupy = false
    local worldTileInfo = CS.SceneManager.World:GetWorldTileInfo(pointId)
    if worldTileInfo~=nil then
        local desertInfo = worldTileInfo:GetWorldDesertInfo()
        if desertInfo~=nil then
            local playerType = desertInfo:GetPlayerType()
            if playerType == CS.PlayerType.PlayerSelf or playerType == CS.PlayerType.PlayerAlliance or playerType == CS.PlayerType.PlayerAllianceLeader then
                alreadyExitOccupy = true
            end
        end
        local pointData = worldTileInfo:GetPointInfo()
        if pointData~=nil and alreadyExitOccupy ==false then
            if pointData.PointType == WorldPointType.WORLD_ALLIANCE_CITY then
                local allianceCityPointInfo = PBController.ParsePbFromBytes(pointData.extraInfo, "protobuf.AllianceCityPointInfo")
                if allianceCityPointInfo~=nil then
                    local allianceId =allianceCityPointInfo["allianceId"]
                    if allianceId ~= "" and allianceId == LuaEntry.Player.allianceId then
                        alreadyExitOccupy = true
                    elseif LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
                        local cityId = allianceCityPointInfo["cityId"]
                        local template = DataCenter.AllianceCityTemplateManager:GetTemplate(cityId)
                        if template~=nil and template.eden_city_type == WorldCityType.StrongHold then
                            if allianceId ~= "" then
                                if DataCenter.GloryManager:IsSameCampByAllianceId(allianceId) ==true then
                                    alreadyExitOccupy = true
                                end
                            end
                        end
                    end
                end
            elseif pointData.PointType == WorldPointType.WORLD_ALLIANCE_BUILD then
                local allianceBuildingPointInfo = PBController.ParsePbFromBytes(pointData.extraInfo, "protobuf.AllianceBuildingPointInfo")
                if allianceBuildingPointInfo~=nil then
                    local allianceBuildId = allianceBuildingPointInfo["buildId"]
                    local cityAllianceId = allianceBuildingPointInfo["allianceId"]
                    local allianceId = LuaEntry.Player.allianceId
                    if allianceBuildId == BuildingTypes.ALLIANCE_FLAG_BUILD or WorldAllianceBuildUtil.IsAllianceCenterGroup(allianceBuildId) or WorldAllianceBuildUtil.IsAllianceFrontGroup(allianceBuildId) then
                        if allianceId~=nil and allianceId~="" then
                            if cityAllianceId == allianceId then
                                alreadyExitOccupy = true
                            end
                        end
                    end
                end
            elseif pointData.PointType == WorldPointType.PlayerBuilding then
                cast(pointData, typeof(CS.BuildPointInfo))
                if pointData~=nil then
                    local template = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(pointData.itemId)
                    if template ~= nil and (template.tab_type == UIBuildListTabType.SeasonBuild or BuildingUtils.IsInEdenSubwayGroup(pointData.itemId)==true) then
                        local state = pointData:GetPlayerType()
                        if state == CS.PlayerType.PlayerSelf or state == CS.PlayerType.PlayerAlliance or state == CS.PlayerType.PlayerAllianceLeader then
                            alreadyExitOccupy = true
                        end
                    end
                end
            end
        end
    end
    return alreadyExitOccupy
end

function SeasonUtil:GetSelfSeasonResistanceValue()
    local value = LuaEntry.Effect:GetGameEffect(EffectDefine.APS_SEASON_DESERT_RESISTANCE)
    --local marchValue = -1
    --local selfMarchList = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
    --for i, march in pairs(selfMarchList) do
    --    local armyInfo = march:GetFirstArmyInfo()
    --    if armyInfo~=nil and armyInfo.GetMarchEffectValue~=nil then
    --        local tmpValue = armyInfo:GetMarchEffectValue(EffectDefine.APS_SEASON_DESERT_RESISTANCE)
    --        if marchValue<0 or marchValue>tmpValue then
    --            marchValue = tmpValue
    --        end
    --    end
    --end
    --if marchValue>=0 then
    --    value = marchValue
    --end
    return value
end

return ConstClass("SeasonUtil", SeasonUtil)