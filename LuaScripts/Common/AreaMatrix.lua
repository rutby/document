---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/2/2 16:24
---

local AreaMatrix = BaseClass("AreaMatrix")

-- 区域左下坐标 x, y, 总宽度 width, 总高度 height, 区域每边的网格个数 cellCount
local function __init(self, x, y, width, height, cellXCount, cellYCount)
    if cellYCount == nil then
        cellYCount = cellXCount
    end
    self.areas = {} -- Dict<i, Dict<j, List<item>>>
    self.x = x
    self.y = y
    self.width = width
    self.height = height
    self.cellXCount = cellXCount
    self.cellYCount = cellYCount
    self.cellWidth = width / self.cellXCount
    self.cellHeight = height / self.cellYCount
end

local function Clear(self)
    --for _, dict in pairs(self.areas) do
    --    for _, list in pairs(dict) do
    --        table.clear(list)
    --    end
    --end
    self.areas = {}
end

local function AddByIndex(self, i, j, item)
    if self.areas[i] == nil then
        self.areas[i] = {}
    end
    if self.areas[i][j] == nil then
        self.areas[i][j] = {}
    end
    table.insert(self.areas[i][j], item)
end

local function AddByXY(self, x, y, item)
    local i, j = self:GetIndexByXY(x, y)
    self:AddByIndex(i, j, item)
end

local function GetIndexByXY(self, x, y)
    local i = math.floor((x - self.x) / self.cellWidth)
    i = Mathf.Clamp(i, 0, self.cellXCount - 1)
    local j = math.floor((y - self.y) / self.cellWidth)
    j = Mathf.Clamp(j, 0, self.cellYCount - 1)
    return i, j
end

-- x: float
-- y: float
-- radius: float
-- filter: function
-- comparison: function
local function GetItemsInRange(self, x, y, radius, filter, comparison)
    local items = {}
    local left, bottom = self:GetIndexByXY(x - radius, y - radius)
    local right, top = self:GetIndexByXY(x + radius, y + radius)
    for i = left, right do
        for j = bottom, top do
            local list = self.areas[i] and self.areas[i][j]
            if list then
                for _, item in ipairs(list) do
                    if filter == nil or filter(item) then
                        table.insert(items, item)
                    end
                end
            end
        end
    end
    if comparison then
        table.sort(items, comparison)
    end
    return items
end

-- items: ref array
-- x: float
-- y: float
-- radius: float
-- filter: function
-- comparison: function
local function GetItemsInRangeNonAlloc(self, items, x, y, radius, filter, comparison)
    local count = 0
    local left, bottom = self:GetIndexByXY(x - radius, y - radius)
    local right, top = self:GetIndexByXY(x + radius, y + radius)
    for i = left, right do
        for j = bottom, top do
            local list = self.areas[i] and self.areas[i][j]
            if list then
                for _, item in ipairs(list) do
                    if filter == nil or filter(item) then
                        count = count + 1
                        items[count] = item
                    end
                end
            end
        end
    end
    if comparison then
        table.sort(items, comparison)
    end
    return count
end

AreaMatrix.__init = __init

AreaMatrix.Clear = Clear
AreaMatrix.AddByIndex = AddByIndex
AreaMatrix.AddByXY = AddByXY
AreaMatrix.GetIndexByXY = GetIndexByXY
AreaMatrix.GetItemsInRange = GetItemsInRange
AreaMatrix.GetItemsInRangeNonAlloc = GetItemsInRangeNonAlloc

return AreaMatrix