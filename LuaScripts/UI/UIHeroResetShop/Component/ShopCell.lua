---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/1/19 16:55
---

local base = UIBaseContainer--Variable
local ShopCell = BaseClass("ShopCell", base)--Variable
local Localization = CS.GameEntry.Localization
local RewardUtil = require "Util.RewardUtil"
local UIHeroCell = require "UI.UIHero2.Common.UIHeroCellSmall"
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local UIHeroTipsView = require "UI.UIHeroTips.View.UIHeroTipsView"
local goodsItem_path = "Bg/Offset/UICommonItem"
local goodsHero_path = "Bg/Offset/UIHeroCellSmall"
local goodsName_path = "Bg/Offset/name"
local limitLayout_path = "Bg/Offset/limitLayout"
local limitTimes_path = "Bg/Offset/limitLayout/limitNum"
local item_path = "Bg/Offset/limitLayout/ImgHeroDebrisIcon"
local soldOut_path = "Bg/Offset/soldOut"
local itemsoldOut_path = "Bg/Offset/itemsoldOut"
local buyBtn_path = "Bg/Offset/buyBtn"
local price_path = "Bg/Offset/buyBtn/price"
local consumeIcon_path = "Bg/Offset/buyBtn/price/icon"
local discountBg_path = "Bg/Offset/discountBg"
local discount_path = "Bg/Offset/discountBg/discount"
local buyFreeBtn_path = "Bg/Offset/buyBtnFree"
local buyFreeBtnTxt_path = "Bg/Offset/buyBtnFree/priceFree"
local buyFreeRed_path = "Bg/Offset/buyBtnFree/redDot"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.hero = self:AddComponent(UIHeroCell, goodsHero_path)
    self.hero_btn = self:AddComponent(UIButton,goodsHero_path)
    self.hero_btn:SetOnClick(function()
        self:OnClickHero()
    end)
    self.item = self:AddComponent(UICommonItem, goodsItem_path)
    self.goodsNameN = self:AddComponent(UIText, goodsName_path)
    self.limitTimesN = self:AddComponent(UIText, limitTimes_path)
    self.limitLayoutN = self:AddComponent(UIBaseContainer, limitLayout_path)
    self.item_path = self:AddComponent(UIImage,item_path)
    self.soldOutN = self:AddComponent(UIText, soldOut_path)
    self.soldOutN:SetLocalText(104226)
    self.itemsoldOutN = self:AddComponent(UIText, itemsoldOut_path)
    self.itemsoldOutN:SetLocalText(320268)
    self.buyBtnN = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.priceN = self:AddComponent(UIText, price_path)
    self.consumeIconN = self:AddComponent(UIImage, consumeIcon_path)
    self.discountN = self:AddComponent(UIText, discount_path)
    self.discountBgN = self:AddComponent(UIImage, discountBg_path)
    self.buyFreeBtnN = self:AddComponent(UIButton, buyFreeBtn_path)
    self.buyFreeBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.buyFreeBtnTxtN = self:AddComponent(UIText, buyFreeBtnTxt_path)
    self.buyFreeBtnTxtN:SetLocalText(130126)
    self.buyFreeRedN = self:AddComponent(UIBaseContainer, buyFreeRed_path)
end

local function ComponentDestroy(self)
    self.hero = nil
    self.goodsNameN = nil
    self.limitTimesN:SetColor(WhiteColor)
    self.limitTimesN = nil
    self.limitLayoutN = nil
    self.soldOutN = nil
    self.itemsoldOutN = nil
    self.buyBtnN = nil
    self.priceN = nil
    self.consumeIconN = nil
    self.discountN = nil
end

local function DataDefine(self)
    self.goodsConf = nil
end

local function DataDestroy(self)
    self.goodsConf = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateOneCommonShopGoods, self.RefreshAll)
    self:AddUIListener(EventId.UpdateGold, self.RefreshAll)
    self:AddUIListener(EventId.OnBuyCommonGoodsSucc, self.OnBuySuccCallBack)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateOneCommonShopGoods, self.RefreshAll)
    self:RemoveUIListener(EventId.UpdateGold, self.RefreshAll)
    self:RemoveUIListener(EventId.OnBuyCommonGoodsSucc, self.OnBuySuccCallBack)
    base.OnRemoveListener(self)
end

local function OnBuySuccCallBack(self, goodsId)
    if self.param and goodsId == self.param.id and self.param.itemId ~= "" then
        local rewardType = RewardType.GOODS
        local itemId = self.param.itemId
        local pic = RewardUtil.GetPic(rewardType,itemId)
        local img = self.item.item_icon
        if pic~="" then
            local flyNum = 1
            UIUtil.DoFly(tonumber(rewardType),flyNum,pic,img.transform.position,Vector3.New(0,0,0))
        end
    end
end

local function SetItem(self, param)
    self.param = param
    
    self:RefreshAll()
end

local function RefreshAll(self)
    if not self.param then
        return
    end

    if self.param.itemId ~= "" then
        self.hero:SetActive(false)
        self.item:SetActive(true)
        local param = {
            rewardType = RewardType.GOODS,
            itemId = self.param.itemId,
            count = self.param.itemNum
        }
        self.item:ReInit(param)
        local itemName = DataCenter.ItemTemplateManager:GetName(self.param.itemId)
        self.goodsNameN:SetText(itemName)
    else
        self.hero:SetActive(true)
        self.item:SetActive(false)
        self.hero:InitWithConfigIdByPoster(self.param.hero)
        local heroName = HeroUtils.GetHeroNameByConfigId(self.param.hero)
        self.goodsNameN:SetText(heroName)
    end
    self.buyBtnN:SetActive(false)
    self.buyFreeBtnN:SetActive(false)
    self.soldOutN:SetActive(false)
    self.itemsoldOutN:SetActive(false)
    self.discountBgN:SetActive(false)
    
    if self.param.itemId == "" then
        self:SetConsumeIcon()
        local heroUuid = DataCenter.HeroDataManager:GetHeroUuidByHeroId(self.param.hero)
        if heroUuid == 0 then
            self.soldOutN:SetActive(true)
            self.buyBtnN:SetActive(false)
            self.buyFreeBtnN:SetActive(false)
            self.limitLayoutN:SetActive(false)
        else
            self.buyBtnN:SetActive(true)
            self:SetLimitNum()
            self.limitLayoutN:SetActive(true)
        end
        self.priceN:SetLocalText(110029)
        self.priceN:SetAnchoredPositionXY(0,9)
        self.limitTimesN:SetAnchoredPositionXY(-113.5,0)
    else
        local goodsInfo = DataCenter.CommonShopManager:GetGoodsInfoById(self.param.shopType, self.param.id)
        local isBuyT = 1
        if goodsInfo then
            isBuyT = goodsInfo.boughtTimes + 1   --购买次数
        end
        if self.param.maxTimes and self.param.maxTimes > 0 then
            if goodsInfo then
                if goodsInfo.boughtTimes < self.param.maxTimes then
                    self.limitLayoutN:SetActive(true)
                else
                    self.limitLayoutN:SetActive(false)
                    self.itemsoldOutN:SetActive(true)
                    return
                end
            else
                self.limitLayoutN:SetActive(true)
            end
        end
        self.limitTimesN:SetLocalText(372408)
        self.limitTimesN:SetAnchoredPositionXY(-148,0)
        self.limitTimesN:SetColor(Color.New(183/255,102/255,48/255,1))
        local resType = RewardToResType[self.param.currencyType]
        local str = string.split(self.param.currency_num_s,";")
        local price = str[isBuyT] and str[isBuyT] or str[#str]
        self.price = tonumber(price)
        if tonumber(price) > 0 then
            self.buyBtnN:SetActive(true)
            self.buyFreeBtnN:SetActive(false)
            self.priceN:SetAnchoredPositionXY(11,9)
            if resType and resType == ResourceType.Gold then
                self.priceN:SetText(string.GetFormattedSeperatorNum(tonumber(price)))
            else
                self.priceN:SetText(string.GetFormattedStr(tonumber(price)))
            end
            self:SetConsumeIcon()
            if self:CheckCostEnough(false,tonumber(price)) then
                self.priceN:SetColor(WhiteColor)
            else
                self.priceN:SetColor(RedColor)
            end
        else
            self.buyBtnN:SetActive(false)
            self.buyFreeBtnN:SetActive(true)
            self.item_path:SetActive(false)
        end
        
        --折扣
        local strD = string.split(self.param.discount_s,";")
        local dis = strD[isBuyT] and strD[isBuyT] or strD[#strD]
        if tonumber(dis) > 0 then
            self.discountBgN:SetActive(true)
            self.discountN:SetText("-" .. math.modf(dis) .. "%")
            if tonumber(dis) <= 30 then
                self.discountBgN:LoadSprite("Assets/Main/Sprites/UI/Common/New/UICommon_bg_hot_green.png")
            elseif tonumber(dis) < 60 then
                self.discountBgN:LoadSprite("Assets/Main/Sprites/UI/Common/New/UICommon_bg_hot_yellow.png")
            else
                self.discountBgN:LoadSprite("Assets/Main/Sprites/UI/Common/New/UICommon_bg_hot_red.png")
            end
        end
    end
end

local function SetConsumeIcon(self)
    if self.param.itemId == "" then
        self.consumeIconN:SetActive(false)
        self.item_path:SetActive(true)
        local picPath = DataCenter.ItemTemplateManager:GetIconPath(tonumber(self.param.currencyId))
        self.item_path:LoadSprite(picPath)
    else
        self.consumeIconN:SetActive(true)
        self.item_path:SetActive(false)
        local resType = RewardToResType[self.param.currencyType]
        if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
            self.consumeIconN:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(RewardToResType[self.param.currencyType]))
        else
            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.param.currencyId)
            self.consumeIconN:LoadSprite(string.format(LoadPath.ItemPath, goods.icon))
        end
    end
end



local function SetLimitNum(self)
    local item = DataCenter.ItemData:GetItemById(self.param.currencyId)
    if item then
        self.limitTimesN:SetLocalText(150033,item.count,self.param.costNum)
    else
        item = {}
        item.count = 0
        self.limitTimesN:SetLocalText(150033,item.count,self.param.costNum)
    end
    local extraItem = DataCenter.ItemData:GetItemById(self.param.currency_change)
    local extraNum = 0
    if extraItem then
        extraNum = extraItem.count
    end
    if item.count >= self.param.costNum then
        self.limitTimesN:SetColor(Color.New(188/255,238/255,34/255,1))
    elseif item.count + extraNum >= self.param.costNum then
        self.limitTimesN:SetColor(WhiteColor)
    elseif item.count + extraNum < self.param.costNum then
        self.limitTimesN:SetColor(Color.New(234/255,66/255,66/255,1))
    end
end

local function OnClickHero(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local heroId = self.param.hero
    local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), tonumber(heroId))
    local param = UIHeroTipsView.Param.New()
    param.heroId = heroId
    param.title = Localization:GetString(heroConfig.name)
    param.content = Localization:GetString(heroConfig.brief_desc)
    param.dir = UIHeroTipsView.Direction.RIGHT
    param.defWidth = 300
    param.pivot = 0.5
    param.position = self.hero_btn.transform.position + Vector3.New(scaleFactor*self.hero_btn.rectTransform.rect.width, -scaleFactor*self.hero_btn.rectTransform.rect.height*0.5, 0)
    param.bindObject = self.hero_btn.gameObject
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTips, { anim = false }, param)
end

local function OnClickBuyBtn(self)
    if self.param.itemId ~= "" then
        self:ProcessPurchase(1,self.price)
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroExchange,{anim = true},self.param)
    end
end

local function ProcessPurchase(self, buyCount,price)
    if not self:CheckCostEnough(true,price) then
        return
    end
    SFSNetwork.SendMessage(MsgDefines.BuyCommonShopGoods, self.param.id, nil, buyCount)
end

local function CheckCostEnough(self, showTip,price)
    local resType = RewardToResType[self.param.currencyType]
    if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
        if resType == ResourceType.Gold then
            if LuaEntry.Player.gold < price then
                if showTip then
                    GoToUtil.GotoPayTips()
                end
                return false
            end
        else
            local cnt = LuaEntry.Resource:GetCntByResType(resType)
            if cnt < price then
                if showTip then
                    local lackTab = {}
                    local param = {}
                    param.type = ResLackType.Res
                    param.id = resType
                    param.targetNum = price
                    table.insert(lackTab,param)
                    GoToResLack.GoToItemResLackList(lackTab)
                end
                return false
            end
        end
    else
        local curNum = DataCenter.ItemData:GetItemCount(self.param.currencyId)
        if curNum < price then
            if showTip then
                UIUtil.ShowTipsId(GameDialogDefine.NO_ITEM)
            end
            return false
        end
    end
    return true
end

ShopCell.OnCreate = OnCreate
ShopCell.OnDestroy = OnDestroy
ShopCell.OnAddListener = OnAddListener
ShopCell.OnRemoveListener = OnRemoveListener
ShopCell.OnBuySuccCallBack = OnBuySuccCallBack
ShopCell.ComponentDefine = ComponentDefine
ShopCell.ComponentDestroy = ComponentDestroy
ShopCell.DataDefine = DataDefine
ShopCell.DataDestroy = DataDestroy

ShopCell.SetItem = SetItem
ShopCell.RefreshAll = RefreshAll
ShopCell.SetLimitNum = SetLimitNum
ShopCell.SetConsumeIcon = SetConsumeIcon
ShopCell.OnClickBuyBtn = OnClickBuyBtn
ShopCell.OnClickHero = OnClickHero
ShopCell.ProcessPurchase = ProcessPurchase
ShopCell.CheckCostEnough = CheckCostEnough

return ShopCell