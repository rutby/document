---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/29 14:46
---
local UIChampionBattleFormationViewCtrl = BaseClass("UIChampionBattleFormationViewCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization
local Setting = CS.GameEntry.Setting

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIChampionBattleFormation)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function SetCurIndex(self, index)
    self.curIndex = index
end
local function GetAtkImage(self)
    return "Assets/Main/Sprites/UI/UITroopsNew/UITroopsNew_icon_attack.png"
end
local function GetAtkValue(self)
    local value = 0
    return value
end
local function GetDefImage(self)
    return "Assets/Main/Sprites/UI/UITroopsNew/UITroopsNew_icon_defense.png"
end
local function GetDefValue(self)
    local value = 0
    return value
end

local function GetDefDes(self)
    local value = ""
    return value
end
local function GetAtkDes(self)
    local value = ""
    return value
end
local function GetMaxNum(self)
    local heroes = {}
    table.walk(self.curHeroes,function(k,v)
        if v~=nil then
            heroes[v] = k
        end
    end)
    local asPlayerMaxSoldiers = MarchUtil.GetMaxCanAddSoldierNum(heroes, self.curIndex)
    return asPlayerMaxSoldiers
end
local function CheckMaxSoliderNum(self)
    local totalSoliderNum = self:GetTotalSoldierNum()
    local maxNum = self.maxNum
    if maxNum < totalSoliderNum then
        local totalNum =0
        local curSoldiers = {}
        table.walk(self.curSoldiers, function (k,v)
            if v>0 then
                local addNum = math.min(maxNum-totalNum,v)
                if addNum>0 then
                    curSoldiers[k] = addNum
                    totalNum = totalNum + addNum
                end
            end
        end)
        self.curSoldiers = curSoldiers
        EventManager:GetInstance():Broadcast(EventId.ArmyFormationSave)
    end
end
local function InitData(self, index, needAutoFix)
    self.index = index
    self.needAutoFix = needAutoFix
    self.isMarch = 0
    if self.needAutoFix == 1 then
        --DataCenter.ArmyFormationDataManager:AutoAddHero(self.uuid)
        --if self:NeedTakeArmy() then
            --DataCenter.ArmyFormationDataManager:AutoAddSoldier(self.uuid)
        --else
        --end
    end

    self:SetCurIndex(index)
    local buildId = MarchUtil.GetFormationBuildNameByIndex(index)
    self.formationUnLockIndex = {}
    local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, 0)
    if levelTemplate~=nil then
        local vecPara1 = string.split(levelTemplate.para1,"|")
        for k,v in ipairs(vecPara1) do
            local vec1 = string.split(v,";")
            if #vec1 >= 2 then
                self.formationUnLockIndex[tonumber(vec1[1])] = tonumber(vec1[2])
            end
        end
    end

    local info = DataCenter.ActChampionBattleManager:GetChampionBattleInfo()
    self.curHeroes = {}
    self.curSoldiers = {}

    if info ~= nil and info.formationArray ~= nil then
        local allFormations = info.formationArray
        table.walk(allFormations, function (_, v)
            if v ~= nil and v.formationId == self.index then
                table.walk(v.soldiers,function (k,v)
                    --检查一下部队是不是最大等级的，不是的话改一下id
                    local armId = tonumber(v.armsId)
                    local armyConfig = DataCenter.ArmyTemplateManager:GetArmyTemplate(armId)
                    if armyConfig ~= nil then
                        local buildId = armyConfig.buildId
                        if buildId ~= nil and buildId ~= 0 then
                            local _, unlockId = DataCenter.ArmyManager:GetMaxUnLockId(buildId)
                            if unlockId ~= nil and unlockId ~= "" then
                                armId = tonumber(unlockId)
                            end
                        end
                    end
                    self.curSoldiers[armId] = v.total
                end)

                table.walk(v.heroes,function (k,v)
                    self.curHeroes[v.index] = tonumber(v.heroUuid)
                end)
            end
        end)
    end

    self.maxNum = self:GetMaxNum()
    self:SetSoldierMax()
    --local freeSoldiers = DataCenter.ArmyFormationDataManager:GetArmyUnFormationList()
end

local function OnTroopClick(self)
    --self:CloseSelf()
    local buildId = MarchUtil.GetFormationBuildNameByIndex(self.curIndex)
    local needMainLv = DataCenter.GarageRefitManager.needMainLv
    if DataCenter.BuildManager.MainLv >= needMainLv then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGarageRefit, buildId)
    else
        UIUtil.ShowTips(Localization:GetString("140339", needMainLv))
    end
end

local function SetSoldierMax(self)
    self.maxSoldiers = {}
    local buildingTypes = BarracksBuild
    table.walk(buildingTypes, function (_, v)
        local _, unlockId = DataCenter.ArmyManager:GetMaxUnLockId(v)
        if unlockId ~= nil and unlockId ~= "" then
            self.maxSoldiers[toInt(unlockId)] = self.maxNum
        end
    end)

end

local function GetCurHeroData(self)
    return self.curHeroes
end

local function GetMaxHeroNum(self)
    return MarchUtil.GetMaxHeroValueByFormationIndex(self.curIndex)
end
local function GetCurCampData(self)
    local curHeroes = {}
    table.walk(self.curHeroes,function(k,v)
        if v ~= 0 then
            curHeroes[v] = k
        end
    end)
    return MarchUtil.GetCampAddParam(curHeroes)
end

function UIChampionBattleFormationViewCtrl:GetCurHeroDataList()
    local result = {}
    for _, heroUuid in pairs(self.curHeroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if heroData then
            table.insert(result, heroData)
        end
    end
    return result
end

local function GetCurrentHeroDataList(self,camp)
    local result = {}
    local heroes = DataCenter.HeroDataManager:GetAllHeroBySort()
    for _, heroData in ipairs(heroes) do
        if camp ~=nil and camp>-1 then
            local targetCamp = heroData:GetCamp()
            if targetCamp == camp then
                table.insert(result, heroData.uuid)
            end
        else
            table.insert(result, heroData.uuid)
        end
    end
    return result
end
local function GetHeroDataByUuid(self, heroUuid)
    local data = {}
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    local heroConfig = heroData:GetConfig()
    local camp = heroData:GetCamp()
    local rarity = heroConfig.rarity
    data.hero_rarity = HeroUtils.GetRarityIconName(rarity, true)
    data.heroUuid = heroUuid
    data.heroId = heroData.heroId
    data.qualityIndex = heroData.quality
    data.rankId = heroData:GetCurMilitaryRankId()
    data.isWaken = heroData:IsWakeUp()
    data.quality = HeroUtils.GetQualityBgInTroopsByPath(rarity,data.isWaken)
    data.icon = HeroUtils.GetHeroBodyByHeroId(heroData.heroId)
    data.level = heroData.level
    data.camp  = HeroUtils.GetCampIconPath(camp)
    data.index = 0
    data.isInMarch = false
    data.rarity =rarity
    data.isSelect = false
    data.isLock = false
    data.season = heroConfig.season
    data.formIndex = DataCenter.ActChampionBattleManager:GetHeroIndexInFormation(heroUuid)
    --local formData = DataCenter.ArmyFormationDataManager:GetFormationFormDataByHeroUuid(heroUuid)
    --if formData~=nil then
    --    data.formIndex = formData.index
    --end
    --local inMarchHeroId = DataCenter.HeroDataManager:GetHeroIdListInMarch()
    --if inMarchHeroId[heroData.heroId]~=nil then
    --    data.isLock = true
    --else
        table.walk(self.curHeroes,function (k,v)
            if v== heroUuid then
                data.index = k
                data.isSelect = true
            else
                local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
                if tempHeroData~=nil then
                    if tempHeroData.heroId == heroData.heroId then
                        data.isLock = true
                    end
                end
            end
        end)
    --end
    if data.formIndex > 0 and data.formIndex ~= self.index then
        data.inDiffFormation = true
    end
    return data
end
local function SelectHeroByUuid(self,heroUuid)
    local tempIndex = 0
    local maxHeroNum = self:GetMaxHeroNum()
    for i =1,maxHeroNum do
        if tempIndex<=0 then
            if self.curHeroes[i]==nil then
                tempIndex = i
            end
        end
    end
    if tempIndex>0 then
        self.curHeroes[tempIndex]= heroUuid
        self.maxNum = self:GetMaxNum()
        self:SetSoldierMax()
        self:OnOneKeyFillClick()
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if heroData~=nil then
            EventManager:GetInstance():Broadcast(EventId.OnSelectHeroSelect,heroData.heroId)
        end
        self:ShowChangeHeroWarning(heroUuid)
    else
        --if self.curHeroes[1]~=nil then
        --    self:OnDeleteHeroByIndex(1)
        --end
        --self.curHeroes[1] = heroUuid
    end

end

local function ShowChangeHeroWarning(self,heroUuid)
    --local data = DataCenter.ArmyFormationDataManager:GetFormationFormDataByHeroUuid(heroUuid)
    --if data~=nil then
    --    local index = data.index
    --    if index~=self.curIndex then
    --        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    --        if heroData~=nil then
    --            UIUtil.ShowTips(Localization:GetString("150214",heroData:GetName(),index,self.curIndex))
    --        end
    --        
    --    end
    --end
end
local function OnDeleteHeroByIndex(self,index)
    if self.curHeroes[index]~=nil then
        local uuid =0
        uuid = self.curHeroes[index]
        self.curHeroes[index] =nil
        local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
        if tempHeroData~=nil then
            EventManager:GetInstance():Broadcast(EventId.OnCancelHeroSelect,tempHeroData.heroId)
        end
        self.maxNum = self:GetMaxNum()
        self:SetSoldierMax()
        self:CheckMaxSoliderNum()
    end
end
local function GetCurrentSoliderDataList(self)
    local list = {}
    if self:NeedTakeArmy() == false then
        return list
    end
    table.walk(self.curSoldiers,function(k,v)
        local oneData ={}
        oneData.armyId =k
        oneData.name =""
        oneData.icon =""
        oneData.level = 1
        oneData.count = v
        local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
        if template ~= nil then
            oneData.icon = string.format(LoadPath.SoldierIcons,template.icon)
            oneData.name = Localization:GetString(template.name)
            oneData.level =template.level
        end
        table.insert(list,oneData)
    end)
    table.sort(list,function(a,b)
        if a.level~=b.level then
            return a.level>b.level
        end
        return a.armyId > b.armyId
    end)
    return list
end
local function GetSoliderState(self)
    local oneData = {}
    oneData.curNum = self:GetTotalSoldierNum()
    oneData.maxNum = self.maxNum
    return oneData
end

local function GetCurrentSoldierNum(self,armyId)
    local num =0
    if self.curSoldiers[armyId]~=nil and self.curSoldiers[armyId]>0 then
        num = self.curSoldiers[armyId]
    end
    return num
end
local function SetCurrentSoldierNum(self,armyId,num)
    if num>0 then
        self.curSoldiers[armyId] = num
    else
        self.curSoldiers[armyId] = nil
    end

end
local function GetTotalSoldierNum(self)
    local count =0
    table.walk(self.curSoldiers,function (k,v)
        count = count +v
    end)
    return count
end
local function GetMaxSoldierNum(self)
    local count =0
    table.walk(self.maxSoldiers,function (k,v)
        count = count +v
    end)
    return count
end
local function CheckMax(self,armyId,num)

    local oneMaxNum = self.maxSoldiers[armyId]
    local oneCurrentNum = self:GetCurrentSoldierNum(armyId)
    local currentTotalNum = self:GetTotalSoldierNum()
    local restNum = currentTotalNum - oneCurrentNum

    local checkMax = math.min(oneMaxNum,num)--滑动条最大限度
    local totalRest = self.maxNum - restNum -- 剩余兵空间最大限度

    local final =math.min(totalRest,checkMax)
    if final<0 then
        final =0
    end
    return final
end

local function GetCanAddHeroNum(self)
    local heroList = {}
    for k,v in pairs(self.curHeroes) do
        if v~=nil and v ~=0 then
            heroList[v]= k
        end
    end
    return MarchUtil.GetCanAddHeroNum(heroList,self.curIndex)
end

local function GetIsHeroInCurFormation(self,uuid)
    local isIn = false
    for k,v in pairs(self.curHeroes) do
        if v == uuid then
            return true
        end
    end
    return false
end
--local function OnAddClick(self)
--    self:SaveHeroData()
--    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSoldierChoose,self.uuid)
--end
local function SaveHeroData(self)
    --local heroData = {}
    --table.walk(self.curHeroes,function(k,v)
    --    if v~=nil and v>0 then
    --        heroData[v] = k
    --    end
    --end)
    --DataCenter.ArmyFormationDataManager:SetArmyFormationHero(self.uuid,heroData)
end

local function OnFormationSave(self)
    if not self:AllowChangeFormation() then
        self:CloseSelf()
        return
    end
    local hasHero = false
    local hasSolider = false
    table.walk(self.curSoldiers,function(k,v)
        if v>0 then
            hasSolider = true
        end
    end)
    table.walk(self.curHeroes,function(k,v)
        if v>0 then
            hasHero = true
        end
    end)
    if true then
        --formation
        local sfsObj = SFSArray.New()
        --先添加当前的
        local tmpHero = {}

        local oneFormation = SFSObject.New()
        sfsObj:AddSFSObject(oneFormation)
        oneFormation:PutLong("formationId", self.index)
        local formationArray = SFSArray.New()
        table.walk(self.curSoldiers,function (k,v)
            local obj = SFSObject.New()
            obj:PutUtfString("armyId", tostring(k))
            obj:PutInt("count", math.floor(v))
            formationArray:AddSFSObject(obj)
        end)

        oneFormation:PutSFSArray("formations", formationArray)
        local heroArray = SFSArray.New()
        table.walk(self.curHeroes,function (k,v)
            local obj = SFSObject.New()
            obj:PutUtfString("heroUuid", tostring(v))
            obj:PutInt("index", k)
            tmpHero[tostring(v)] = k
            heroArray:AddSFSObject(obj)
        end)
        local powerNum = self:GetFormationPower()
        oneFormation:PutLong("power", math.ceil(powerNum))
        oneFormation:PutSFSArray("heroInfos", heroArray)
        
        --之前除了当前设置的
        local info = DataCenter.ActChampionBattleManager:GetChampionBattleInfo()
        if info ~= nil and info.formationArray ~= nil then
            local allFormations = info.formationArray
            table.walk(allFormations, function (_, v)
                if v ~= nil and v.formationId ~= self.index then
                    local oneFormation = SFSObject.New()
                    sfsObj:AddSFSObject(oneFormation)
                    oneFormation:PutLong("formationId", v.formationId)
                    local formationArray = SFSArray.New()
                    table.walk(v.soldiers,function (k,v)
                        local obj = SFSObject.New()
                        obj:PutUtfString("armyId", v.armsId)
                        obj:PutInt("count", v.total)
                        formationArray:AddSFSObject(obj)
                    end)

                    oneFormation:PutSFSArray("formations", formationArray)
                    local heroArray = SFSArray.New()
                    table.walk(v.heroes,function (k,v)
                        if tmpHero[tostring(v.heroUuid)] ~= nil then
                            return
                        end
                        local obj = SFSObject.New()
                        obj:PutUtfString("heroUuid", tostring(v.heroUuid))
                        obj:PutInt("index", v.index)
                        heroArray:AddSFSObject(obj)
                    end)
                    oneFormation:PutLong("power", v.power)
                    oneFormation:PutSFSArray("heroInfos", heroArray)
                end
            end)
        end
        DataCenter.ActChampionBattleManager:SendChampionBattleFormationSave(sfsObj)
        self:CloseSelf()
    else
        self:CloseSelf()
    end
end

local function ClearFormation(self)
    --DataCenter.ArmyFormationDataManager:AutoClearFormationData(self.uuid)
end
local function GetCostTime(self)
    local time = 0
    if self.costTime~=nil then
        time = self.costTime
    end
    return time
end
local function GetArmyIdList(self)
    if self:NeedTakeArmy() == false then
        return {}
    end
    local result = table.keys(self.maxSoldiers)
    table.sort(result, function (k, v)
        local templateA = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
        local templateB = DataCenter.ArmyTemplateManager:GetArmyTemplate(v)
        return templateA.level > templateB.level
    end)
    return result
end
local function GetArmyData(self,armyId)
    local oneData ={}
    oneData.name =""
    oneData.armyId = armyId
    oneData.maxNum = self.maxSoldiers[armyId]
    oneData.icon =""
    oneData.level = 0
    local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(armyId)
    if template ~= nil then
        oneData.icon = string.format(LoadPath.SoldierIcons,template.icon)
        oneData.name = Localization:GetString(template.name)
        oneData.level = template.level
    end
    return oneData
end
local function OnOneKeyFillClick(self)
    if self:NeedTakeArmy() == false then
        return
    end
    self.curSoldiers ={}
    local list = self:GetArmyIdList()
    for _, k in ipairs(list) do
        local v = self.maxSoldiers[k]
        if v ~= nil then
            local num = self:CheckMax(k,v)
            self:SetCurrentSoldierNum(k,num)
        end
    end
    --table.walk(self.maxSoldiers, function (k, v)
    --    local num = self:CheckMax(k,v)
    --    self:SetCurrentSoldierNum(k,num)
    --end)
    
    --table.walksort(self.maxSoldiers,function (leftKey,rightKey)
    --    local aData = DataCenter.ArmyManager:FindArmy(leftKey)
    --    local bData = DataCenter.ArmyManager:FindArmy(rightKey)
    --    if aData.level ~= bData.level then
    --        return aData.level > bData.level
    --    end
    --    return aData.id > bData.id
    --end, function (k,v)
    --    local num = self:CheckMax(k,v)
    --    self:SetCurrentSoldierNum(k,num)
    --end)
end
local function OnOneKeyClearClick(self)
    self.curSoldiers ={}
    table.walk(self.maxSoldiers,function (k,v)
        self:SetCurrentSoldierNum(k,0)
    end)
end

local function OnSaveClick(self)
    --DataCenter.ArmyFormationDataManager:SetArmyFormationSoldier(self.uuid,self.curSoldiers)
end

local function GetCostStaminaByTargetType(self,type)
    return 0
end

local function GetFormationPower(self)
    local curHeroes = {}
    table.walk(self.curHeroes,function(k,v)
        if v ~= 0 then
            curHeroes[v] = k
        end

    end)
    local campData = self:GetCurCampData()
    return MarchUtil.GetFormationPower(curHeroes,self.curSoldiers,self.curIndex,campData)
end

local function GetTargetPower(self)
    return nil
end

local function NeedTakeArmy(self)
    return true
end

local function GetScienceIdByUnlock(self,index)
    Logger.Log("GetScienceIdByUnlockIndex", index)
    if self.formationUnLockIndex[index]~=nil then
        Logger.Log("GetScienceIdByUnlock", self.formationUnLockIndex[index])
        return self.formationUnLockIndex[index]
    end
end

local function AllowChangeFormation(self)
    return true
    --local info = DataCenter.ActChampionBattleManager:GetChampionBattleInfo()
    --if info == nil then
    --    return false
    --end
    --local curIndexState = info:GetCurState()
    --return curIndexState == Activity_ChampionBattle_Stage_State.SingUp
end

UIChampionBattleFormationViewCtrl.AllowChangeFormation = AllowChangeFormation
UIChampionBattleFormationViewCtrl.GetCurrentSoldierNum =GetCurrentSoldierNum
UIChampionBattleFormationViewCtrl.CheckMax = CheckMax
UIChampionBattleFormationViewCtrl.GetArmyIdList = GetArmyIdList
UIChampionBattleFormationViewCtrl.GetArmyData = GetArmyData
UIChampionBattleFormationViewCtrl.OnOneKeyFillClick = OnOneKeyFillClick
UIChampionBattleFormationViewCtrl.OnOneKeyClearClick = OnOneKeyClearClick
UIChampionBattleFormationViewCtrl.CloseSelf =CloseSelf
UIChampionBattleFormationViewCtrl.Close =Close
UIChampionBattleFormationViewCtrl.InitData =InitData
UIChampionBattleFormationViewCtrl.GetTotalSoldierNum = GetTotalSoldierNum
UIChampionBattleFormationViewCtrl.SetCurrentSoldierNum = SetCurrentSoldierNum
UIChampionBattleFormationViewCtrl.GetSoliderState = GetSoliderState
UIChampionBattleFormationViewCtrl.GetCurrentSoliderDataList = GetCurrentSoliderDataList
UIChampionBattleFormationViewCtrl.OnDeleteHeroByIndex = OnDeleteHeroByIndex
UIChampionBattleFormationViewCtrl.SelectHeroByUuid = SelectHeroByUuid
UIChampionBattleFormationViewCtrl.GetHeroDataByUuid = GetHeroDataByUuid
UIChampionBattleFormationViewCtrl.GetCurrentHeroDataList = GetCurrentHeroDataList
UIChampionBattleFormationViewCtrl.GetMaxNum = GetMaxNum
UIChampionBattleFormationViewCtrl.OnDeleteHeroByIndex = OnDeleteHeroByIndex
UIChampionBattleFormationViewCtrl.GetCurHeroData = GetCurHeroData
UIChampionBattleFormationViewCtrl.GetCurCampData = GetCurCampData
UIChampionBattleFormationViewCtrl.SetCurIndex =SetCurIndex
UIChampionBattleFormationViewCtrl.OnStartClick = OnStartClick
UIChampionBattleFormationViewCtrl.ClearFormation = ClearFormation
UIChampionBattleFormationViewCtrl.GetCostTime = GetCostTime
UIChampionBattleFormationViewCtrl.SaveHeroData = SaveHeroData
UIChampionBattleFormationViewCtrl.OnSaveClick = OnSaveClick
UIChampionBattleFormationViewCtrl.GetMaxHeroNum = GetMaxHeroNum
UIChampionBattleFormationViewCtrl.GetCostStaminaByTargetType = GetCostStaminaByTargetType
UIChampionBattleFormationViewCtrl.GetFormationPower = GetFormationPower
UIChampionBattleFormationViewCtrl.GetTargetPower = GetTargetPower
UIChampionBattleFormationViewCtrl.GetAtkValue = GetAtkValue
UIChampionBattleFormationViewCtrl.GetDefValue = GetDefValue
UIChampionBattleFormationViewCtrl.GetAtkDes = GetAtkDes
UIChampionBattleFormationViewCtrl.GetDefDes = GetDefDes
UIChampionBattleFormationViewCtrl.NeedTakeArmy = NeedTakeArmy
UIChampionBattleFormationViewCtrl.GetAtkImage = GetAtkImage
UIChampionBattleFormationViewCtrl.GetDefImage = GetDefImage
UIChampionBattleFormationViewCtrl.GetCanAddHeroNum  = GetCanAddHeroNum
UIChampionBattleFormationViewCtrl.GetIsHeroInCurFormation = GetIsHeroInCurFormation
UIChampionBattleFormationViewCtrl.CheckMaxSoliderNum =CheckMaxSoliderNum
UIChampionBattleFormationViewCtrl.GetMaxSoldierNum = GetMaxSoldierNum
UIChampionBattleFormationViewCtrl.GetScienceIdByUnlock = GetScienceIdByUnlock
UIChampionBattleFormationViewCtrl.OnFormationSave = OnFormationSave
UIChampionBattleFormationViewCtrl.ShowChangeHeroWarning = ShowChangeHeroWarning
UIChampionBattleFormationViewCtrl.SetSoldierMax = SetSoldierMax
UIChampionBattleFormationViewCtrl.OnTroopClick =OnTroopClick

return UIChampionBattleFormationViewCtrl