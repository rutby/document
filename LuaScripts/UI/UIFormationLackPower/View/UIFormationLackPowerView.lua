---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/1/6 14:33
---
local LackPowerItem = require "UI.UIFormationLackPower.Component.LackPowerItem"
local UIFormationLackPowerView = BaseClass("UIFormationLackPowerView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local return_btn_path = "UICommonPopUpTitle/panel"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local content_path = "Root/ImgBg/Content"
local res_txt_path = "Root/ImgBg/Res_Txt"
local slider_path = "Root/ImgBg/Slider"
local total_num_path = "Root/ImgBg/Slider/slider_text"
--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:ReInit()

end

-- 销毁
local function OnDestroy(self)
    if self.delayTimer ~= nil then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.title = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title:SetLocalText(121009)
    self.content = self:AddComponent(UIBaseContainer, content_path)
    self.res_txt = self:AddComponent(UITextMeshProUGUIEx, res_txt_path)
    self.slider = self:AddComponent(UISlider,slider_path)
    self.total_num = self:AddComponent(UITextMeshProUGUIEx,total_num_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.needCells = {}
end

local function ComponentDestroy(self)
    self:ClearList()
    self.title = nil
    self.content = nil
    self.res_txt = nil
    self.close_btn = nil
    self.return_btn = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ReInit(self)
    local curMonsterLevel, curFormationUuid, totalPower, targetPower = self:GetUserData()
    self.curMonsterLevel = tonumber(curMonsterLevel)
    self.ctrl:InitFormationUuid(tonumber(curFormationUuid))
    self.res_txt:SetLocalText(110157)
    local percent = (targetPower-totalPower)/math.max(1,targetPower)
    self.slider:SetValue(percent)
    self.total_num:SetLocalText(GameDialogDefine.SPLIT, string.format(TextColorStr, TextColorRed,
            string.GetFormattedStr(math.floor(totalPower))), string.GetFormattedStr(math.floor(targetPower)))
    self.model = {}
    self:ClearList()
    local showList = self.ctrl:GetAddList(self.curMonsterLevel)
    for k = 1, #showList do
        self.model[k] = self:GameObjectInstantiateAsync(UIAssets.PowerLackItem, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go:SetActive(true)
            go.transform:SetParent(self.content.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local nameStr = tostring(NameCount)
            go.name = nameStr
            NameCount = NameCount + 1
            self.needCells[k] = self.content:AddComponent(LackPowerItem, nameStr)
            self.needCells[k]:ReInit(showList[k])
            if k == 1 then
                self.needCells[k]:ShowRecommend(true)
                self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
                    self:CheckShowArrow()
                end, 0.5)
            end
        end)
    end
end

local function ClearList(self)
    self.content:RemoveComponents(LackPowerItem)
    if next(self.model) then
        for k, v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.needCells = {}
end

local function CheckShowArrow(self)
    self.delayTimer = nil
    if self.needCells ~= nil and self.needCells[1] ~= nil then
        local param = {}
        param.position = self.needCells[1].transform.position + Vector3.New(200 * self.transform.lossyScale.y, 0, 0)
        param.arrowType = ArrowType.LackResource
        param.positionType = PositionType.Screen
        DataCenter.ArrowManager:ShowArrow(param)
    end
end

UIFormationLackPowerView.OnCreate = OnCreate
UIFormationLackPowerView.OnDestroy = OnDestroy
UIFormationLackPowerView.OnEnable = OnEnable
UIFormationLackPowerView.OnDisable = OnDisable
UIFormationLackPowerView.ComponentDefine = ComponentDefine
UIFormationLackPowerView.ComponentDestroy = ComponentDestroy
UIFormationLackPowerView.ReInit = ReInit
UIFormationLackPowerView.ClearList = ClearList
UIFormationLackPowerView.CheckShowArrow = CheckShowArrow

return UIFormationLackPowerView