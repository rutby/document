---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/7/28 21:00
---
local UIFormationAssistanceCtrl = BaseClass("UIFormationAssistanceCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization
local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIFormationAssistance)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function SetUuid(self, bUuid, uid)
    self.bUuid = bUuid
    self.ownerUid = uid
end
local function OnCloseClick(self)
    self:CloseSelf()
end

local function GetBuildData(self,asType)
    local data = {}
    data.maxNum = 0
    data.join = true
    data.alreadyHave = false
    local info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(self.bUuid)
    if info ~= nil then
        data.maxNum = info.maxAssistance
        if info.memberList ~= nil then
            local count = table.count(info.memberList)
            if count >= data.maxNum then
                data.join = false
            end
            local selfUid = LuaEntry.Player.uid
            if asType == AssistanceType.MainCity or asType == AssistanceType.AllianceCity or asType == AssistanceType.AllianceBuild or asType == AssistanceType.DragonBuilding then
                table.walk(info.memberList,function(k,v)
                    if v.ownerUid == selfUid then
                        data.alreadyHave = true
                    end
                end)
            end
        end
    end
    return data
end
local function OnJoinClick(self, asType, pointId)
    local info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(self.bUuid)
    if info ~= nil then
        self:Close()
        if asType == AssistanceType.MainCity then
            MarchUtil.OnClickStartMarch(MarchTargetType.ASSISTANCE_CITY, pointId, self.bUuid)
        elseif asType == AssistanceType.Build then
            MarchUtil.OnClickStartMarch(MarchTargetType.ASSISTANCE_BUILD, pointId, self.bUuid)
        elseif asType == AssistanceType.AllianceCity then
            MarchUtil.OnClickStartMarch(MarchTargetType.ASSISTANCE_ALLIANCE_CITY, pointId, self.bUuid)
        elseif asType == AssistanceType.Desert then
            MarchUtil.OnClickStartMarch(MarchTargetType.ASSISTANCE_DESERT, pointId, self.bUuid)
        elseif asType == AssistanceType.AllianceBuild then
            MarchUtil.OnClickStartMarch(MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING, pointId, self.bUuid)
        elseif asType == AssistanceType.DragonBuilding then
            MarchUtil.OnClickStartMarch(MarchTargetType.TRIGGER_DRAGON_BUILDING, pointId, self.bUuid)
        end
    end
end


local function GetPlayerIdList(self)
    local list = {}
    local info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(self.bUuid)
    if info ~= nil and info.memberList ~= nil then
        table.insertto(list, table.keys(info.memberList))
    end
    return list
end

local function GetPlayerItemData(self, marchUuid)
    local oneData = {}
    local info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(self.bUuid)
    if info ~= nil and info.memberList ~= nil then
        if info.memberList[marchUuid] ~= nil then
            local data = info.memberList[marchUuid]
            oneData.ownerName = data.ownerName
            oneData.status = data.status
            oneData.endTime = data.endTime
            oneData.startTime = data.startTime
            oneData.ownerUid = data.ownerUid
        end
    end
    return oneData
end

--获取玩家出兵信息
local function GetPlayerSoldierData(self, marchUuid)
    local info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(self.bUuid)
    local showList = {}
    if info ~= nil and info.memberList ~= nil then
        --所参与人员
        if next(info.memberList) and info.memberList[marchUuid] then
            local data = info.memberList[marchUuid].armyInfos
            local heros = data.heros
            showList.heros = {}
            for i = 1, #heros do
                showList.heros[i] = {}
                showList.heros[i].heroId = heros[i].heroId
                showList.heros[i].quality = heros[i].heroQuality
                showList.heros[i].lv = heros[i].heroLevel
                showList.heros[i].rankLv = heros[i].rankLv
                showList.heros[i].stage = heros[i].stage
                showList.heros[i].camp = HeroUtils.GetCamp(heros[i])
            end
            local soldiers = data.soldiers
            showList.soldiers = {}
            for i = 1, #soldiers do
                local armyTemplate = DataCenter.ArmyTemplateManager:GetArmyTemplate(soldiers[i].armsId)
                showList.soldiers[i] = {}
                showList.soldiers[i].armsId = soldiers[i].armsId
                showList.soldiers[i].type = soldiers[i].type
                showList.soldiers[i].icon = armyTemplate.icon
                showList.soldiers[i].count = soldiers[i].total - soldiers[i].lost
                showList.soldiers[i].level = RomeNum[armyTemplate.show_level]
            end
        end
    end
    return showList
end



local function OnRetreatClick(self,marchUuid)
    local info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(self.bUuid)
    if info ~= nil and  info.memberList ~= nil and info.memberList[marchUuid] ~= nil then
        info.memberList[marchUuid] = nil
        SFSNetwork.SendMessage(MsgDefines.AssistanceTeamRetreat, self.bUuid, marchUuid)
        --self:CloseSelf()
    end
end

local function GetPlayerData(self, uid, pointId, asType)
    local data = {}
    data.playerData = DataCenter.PlayerInfoDataManager:GetPlayerDataByUid(uid)
    data.name = ""
    data.level = 0
    if asType == AssistanceType.Build then
        local info = DataCenter.WorldPointManager:GetBuildDataByPointIndex(pointId)
        if info ~= nil then
            data.name = GetTableData(DataCenter.BuildTemplateManager:GetTableName(), info.itemId + info.level,"name")
        end
    elseif asType == AssistanceType.Desert then
        local worldTileInfo = CS.SceneManager.World:GetWorldTileInfo(pointId)
        if worldTileInfo~=nil then
            local desertInfo = worldTileInfo:GetWorldDesertInfo()
            if desertInfo~=nil then
                local desertId = desertInfo.desertId
                data.name = GetTableData(TableName.Desert, desertId, "desert_name")
                data.level = GetTableData(TableName.Desert, desertId, "desert_level")
            end
        end
    end
    
    return data
end

local function GetAllianceCityData(self,pointId)
    local oneData = {}
    local pointInfo = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if pointInfo ~= nil then
        local allianceCityPointInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.AllianceCityPointInfo")
        if allianceCityPointInfo ~= nil then
            oneData.cityId = allianceCityPointInfo["cityId"]
            oneData.alAbbr = allianceCityPointInfo["alAbbr"]
            oneData.alName = allianceCityPointInfo["alName"]
            oneData.allianceId = allianceCityPointInfo["allianceId"]
            local cityTemplate = LocalController:instance():getLine(TableName.WorldCity, oneData.cityId)
            if cityTemplate ~= nil then
                oneData.level = cityTemplate:getValue("level")
                oneData.name = Localization:GetString(cityTemplate:getValue("name"))
            end
            local cityInfo = DataCenter.WorldAllianceCityDataManager:GetAllianceCityDataByCityId(oneData.cityId)
            if cityInfo~=nil and cityInfo.cityName~=nil and cityInfo.cityName~="" then
                oneData.name = cityInfo.cityName
            end
        end
    end
    return oneData
end

local function GetAllianceBuildData(self,pointId)
    local oneData = {}
    local pointInfo = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if pointInfo ~= nil then
        local info = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.AllianceBuildingPointInfo")
        if info then
            local mineID = info["buildId"]
            oneData.alAbbr = info["alAbbr"]
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineID)
            if template~=nil then
                oneData.name = template.name
            end
        end
    end
    return oneData
end

local function GetDragonBuildData(self,pointId)
    local oneData = {}
    local pointInfo = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if pointInfo ~= nil then
        local detailInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.DragonBuildingPointInfo")
        if detailInfo then
            local buildId = detailInfo.buildId
            local template = DataCenter.DragonBuildTemplateManager:GetTemplate(buildId)
            if template~=nil then
                oneData.alAbbr = detailInfo.alAbbr
                oneData.name = template.name
            end
        end
    end

    
    return oneData
end

UIFormationAssistanceCtrl.SetUuid = SetUuid
UIFormationAssistanceCtrl.CloseSelf = CloseSelf
UIFormationAssistanceCtrl.Close = Close
UIFormationAssistanceCtrl.OnJoinClick = OnJoinClick
UIFormationAssistanceCtrl.GetPlayerSoldierData = GetPlayerSoldierData
UIFormationAssistanceCtrl.GetPlayerIdList = GetPlayerIdList
UIFormationAssistanceCtrl.GetPlayerItemData = GetPlayerItemData
UIFormationAssistanceCtrl.OnRetreatClick = OnRetreatClick
UIFormationAssistanceCtrl.OnCloseClick = OnCloseClick
UIFormationAssistanceCtrl.GetBuildData = GetBuildData
UIFormationAssistanceCtrl.GetPlayerData = GetPlayerData
UIFormationAssistanceCtrl.GetAllianceCityData = GetAllianceCityData
UIFormationAssistanceCtrl.GetAllianceBuildData =GetAllianceBuildData
UIFormationAssistanceCtrl.GetDragonBuildData =  GetDragonBuildData
return UIFormationAssistanceCtrl