---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/2 17:45
---

local UISeasonHint = BaseClass("UISeasonHint", UIBaseView)
local base = UIBaseView
local UISeasonHintTab = require "UI.UISeasonHint.Component.UISeasonHintTab"

local close_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_path = "UICommonPopUpTitle/panel"
local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local scroll_view_path = "ScrollView"
local rect_content = "Right/Rect_Content"
local pic_path = "Right/Rect_Content/Pic"
local icon_path = "Right/Rect_Content/NameBg/IconBg/Icon"
local name_path = "Right/Rect_Content/NameBg/Name"
local scroll_view_to_path = "Right/Rect_Content/ScrollView"
local desc_path = "Right/Rect_Content/ScrollView/Viewport/Content/Desc"
local extra_path = "Right/Rect_Content/Extra"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.title_text = self:AddComponent(UIText, title_path)
    self.title_text:SetLocalText(170001)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)
    self.pic_image = self:AddComponent(UIImage, pic_path)
    self.icon_image = self:AddComponent(UIImage, icon_path)
    self.name_text = self:AddComponent(UIText, name_path)
    self.desc_text = self:AddComponent(UIText, desc_path)
    self.extra_go = self:AddComponent(UIBaseContainer, extra_path)
    
    self.rect_content = self:AddComponent(UIBaseContainer,rect_content)
    self.scroll_view_to = self:AddComponent(UIBaseContainer,scroll_view_to_path)
end

local function ComponentDestroy(self)
    self.close_btn = nil
    self.return_btn = nil
    self.title_text = nil
    self.scroll_view = nil
    self.pic_image = nil
    self.icon_image = nil
    self.name_text = nil
    self.desc_text = nil
    self.extra_go = nil
end

local function DataDefine(self)
    self.seasonId = 0
    self.tabs = {}
    self.dataList = {}
    self.selectIndex = 0
end

local function DataDestroy(self)
    self.seasonId = nil
    self.tabs = nil
    self.dataList = nil
    self.selectIndex = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function ShowCells(self)
    self:ClearScroll()
    local count = #self.dataList
    if count > 0 then
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UISeasonHintTab)
end

local function OnCellMoveIn(self,itemObj, index)
    local data = self.dataList[index]
    itemObj.name = tostring(data.n)
    local tab = self.scroll_view:AddComponent(UISeasonHintTab, itemObj)
    tab:SetData(data,self.isThrone)
    tab:SetSelected(index == self.selectIndex)
    tab:SetOnClick(function()
        self:OnTabClick(index)
    end)
    self.tabs[index] = tab
end

local function OnCellMoveOut(self,itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UISeasonHintTab)
    self.tabs[index] = nil
end

local function ReInit(self)
    self:ReInitExtra()
    local seasonId, hintStr,isThrone = self:GetUserData()
    self.seasonId = seasonId
    self.isThrone = isThrone
    if string.IsNullOrEmpty(hintStr) then
        hintStr = GetTableData(TableName.APS_Season, self.seasonId, "hint") or ""
    end
    
    self.dataList = {}
    for i, str in ipairs(string.split(hintStr, "|")) do
        local spls = string.split(str, ";")
        if #spls == 4 then
            local data = {}
            data.index = i
            data.n = tonumber(spls[1])
            data.pic = spls[2]
            data.name = spls[3]
            data.desc = spls[4]
            table.insert(self.dataList, data)
        end
    end
    
    self:ShowCells()
    self:OnTabClick(1)
end

local function ReInitExtra(self)
    local s2_8_text1 = self:AddComponent(UIText, "Right/Rect_Content/Extra/S2_8/S2_8_Text1")
    s2_8_text1:SetLocalText(110353)
    local s2_8_text2 = self:AddComponent(UIText, "Right/Rect_Content/Extra/S2_8/S2_8_Text2")
    s2_8_text2:SetLocalText(110352)
end

local function Refresh(self)
    local data = self.dataList[self.selectIndex]
    if data == nil then
        return
    end
    if tonumber(data.pic) == 0 then
        self.pic_image:SetActive(false)
        self.scroll_view_to:SetSizeDelta({x = 570,y = 400})
    else
        self.pic_image:SetActive(true)
        self.pic_image:LoadSprite(string.format(LoadPath.UIGovernmentBig, data.pic))
        self.scroll_view_to:SetSizeDelta({x = 570,y = 150})
    end
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.rect_content.rectTransform)
    local str = "seasonruels_title_%02d"
    local path = LoadPath.UISeasonHint
    if self.isThrone then
        str = "UIpresident_title_%02d"
        path = LoadPath.UIGovernment
    end
    self.icon_image:LoadSprite(string.format(path, string.format(str, data.n)))
    self.name_text:SetLocalText(data.name)
    self.desc_text:SetLocalText(data.desc)
    
    local name = "S" .. self.seasonId .. "_" .. data.n
    for i = 0, self.extra_go.transform.childCount - 1 do
        local tf = self.extra_go.transform:GetChild(i)
        tf.gameObject:SetActive(tf.name == name)
    end
end

local function OnTabClick(self, index)
    self.selectIndex = index
    for i, tab in pairs(self.tabs) do
        tab:SetSelected(i == index)
    end
    self:Refresh()
end

UISeasonHint.OnCreate = OnCreate
UISeasonHint.OnDestroy = OnDestroy
UISeasonHint.OnEnable = OnEnable
UISeasonHint.OnDisable = OnDisable
UISeasonHint.ComponentDefine = ComponentDefine
UISeasonHint.ComponentDestroy = ComponentDestroy
UISeasonHint.DataDefine = DataDefine
UISeasonHint.DataDestroy = DataDestroy
UISeasonHint.OnAddListener = OnAddListener
UISeasonHint.OnRemoveListener = OnRemoveListener

UISeasonHint.ShowCells = ShowCells
UISeasonHint.ClearScroll = ClearScroll
UISeasonHint.OnCellMoveIn = OnCellMoveIn
UISeasonHint.OnCellMoveOut = OnCellMoveOut
UISeasonHint.OnDrag = OnDrag
UISeasonHint.OnBeginDrag = OnBeginDrag
UISeasonHint.OnEndDrag = OnEndDrag

UISeasonHint.ReInit = ReInit
UISeasonHint.ReInitExtra = ReInitExtra
UISeasonHint.Refresh = Refresh
UISeasonHint.OnTabClick = OnTabClick

return UISeasonHint