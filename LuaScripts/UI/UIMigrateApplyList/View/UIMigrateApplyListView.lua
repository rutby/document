---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/4/18 18:37
---
local MigrateApplyItem = require "UI.UIMigrateApplyList.Component.MigrateApplyItem"
local MigrateDesItem = require "UI.UIMigrateApplyList.Component.MigrateDesItem"
local UIMigrateApplyListView = BaseClass("UIMigrateApplyListView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local txt_title_path ="UICommonPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonPopUpTitle/panel"
local player_name_txt_path = "ImgBg/select/playerName"
local scroll_path = "ImgBg/ScrollView"
local empty_txt_path = "ImgBg/TxtEmpty"
local des_txt_path = "ImgBg/TxtDes"
local power_txt_path ="ImgBg/select/power"
local kill_txt_path ="ImgBg/select/kill"
local check_txt_path ="ImgBg/select/check"
local remain_txt_path = "ImgBg/remainText"
local detail_btn_path = "ImgBg/remainText/ButtonDetail"
local tips_obj_path = "ImgBg/tips"
local function OnCreate(self)
    base.OnCreate(self)
    SFSNetwork.SendMessage(MsgDefines.MigrateApplyList,LuaEntry.Player:GetSelfServerId())
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.txt_title:SetLocalText(390834)
    self.remain_txt = self:AddComponent(UIText, remain_txt_path)
    self.player_name_txt = self:AddComponent(UIText, player_name_txt_path)
    self.player_name_txt:SetLocalText(100184)
    self.empty_txt = self:AddComponent(UIText, empty_txt_path)
    self.empty_txt:SetLocalText(390154)
    self.des_txt = self:AddComponent(UIText, des_txt_path)
    self.des_txt:SetLocalText(250392)
    self.power_txt = self:AddComponent(UIText, power_txt_path)
    self.power_txt:SetLocalText(100644)
    self.kill_txt = self:AddComponent(UIText, kill_txt_path)
    self.kill_txt:SetLocalText(143589)
    self.check_txt = self:AddComponent(UIText, check_txt_path)
    self.check_txt:SetLocalText(390297)

    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        --DataCenter.AllianceMemberDataManager:ClearCacheApplyList()
        self.ctrl:CloseSelf()
    end)
    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()
        --DataCenter.AllianceMemberDataManager:ClearCacheApplyList()
        self.ctrl:CloseSelf()
    end)

    self.ScrollView = self:AddComponent(UIScrollView, scroll_path)
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)

    self.condition_detail = self:AddComponent(UIButton, detail_btn_path)
    self.condition_detail:SetOnClick(function()
        self:OnMoveDetailClick()
    end)
    self.tips_obj = self:AddComponent(MigrateDesItem,tips_obj_path)
    self.tips_obj:SetActive(false)
    self.apply_list ={}
end

local function OnDestroy(self)
    self:ClearScroll(self)
    self.txt_title = nil
    self.empty_txt = nil
    self.power_txt = nil
    self.kill_txt = nil
    self.check_txt = nil
    self.close_btn =nil
    self.return_btn = nil
    self.ScrollView = nil
    self.apply_list =nil
    base.OnDestroy(self)
end

local function RefreshApplyList(self)
    self:ClearScroll(self)
    self.apply_list = self.ctrl:GetApplyList()
    if self.apply_list~=nil and #self.apply_list > 0 then
        self.ScrollView:SetTotalCount(#self.apply_list)
        self.ScrollView:RefillCells()
        self.empty_txt:SetActive(false)
    else
        self.empty_txt:SetActive(true)
    end
    local useNum,maxNum = DataCenter.MigrateDataManager:GetSpecialNum()
    local resetNum = maxNum-useNum
    local str = Localization:GetString("250384").." "..resetNum.."/"..maxNum
    self.remain_txt:SetText(str)
end

local function OnEnable(self)
    base.OnEnable(self)
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    self.tips_obj:RefreshCondition(season)
end

local function OnDisable(self)
    base.OnDisable(self)

end

local function OnItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(MigrateApplyItem, itemObj)
    cellItem:SetItemShow(self.apply_list[index])
end

local function OnItemMoveOut(self, itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name, MigrateApplyItem)
end

local function ClearScroll(self)
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(MigrateApplyItem)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.GetMigrateApplyList, self.RefreshApplyList)
    self:AddUIListener(EventId.OnMigrateApprove, self.RefreshApplyList)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.GetMigrateApplyList, self.RefreshApplyList)
    self:RemoveUIListener(EventId.OnMigrateApprove, self.RefreshApplyList)
end

local function OnMoveDetailClick(self)
    self.tips_obj:SetActive(true)
    self.tips_obj:OnSetPos(self.condition_detail.transform.position)
end

local function HideTips(self)
    self.tips_obj:SetActive(false)
end
UIMigrateApplyListView.OnCreate= OnCreate
UIMigrateApplyListView.OnDestroy = OnDestroy
UIMigrateApplyListView.RefreshApplyList = RefreshApplyList
UIMigrateApplyListView.OnEnable = OnEnable
UIMigrateApplyListView.OnDisable = OnDisable
UIMigrateApplyListView.OnItemMoveIn = OnItemMoveIn
UIMigrateApplyListView.OnItemMoveOut = OnItemMoveOut
UIMigrateApplyListView.ClearScroll = ClearScroll
UIMigrateApplyListView.OnAddListener = OnAddListener
UIMigrateApplyListView.OnRemoveListener = OnRemoveListener
UIMigrateApplyListView.OnMoveDetailClick = OnMoveDetailClick
UIMigrateApplyListView.HideTips = HideTips
return UIMigrateApplyListView