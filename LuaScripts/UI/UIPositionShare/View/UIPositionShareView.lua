---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Still4.
--- DateTime: 2021/7/2 11:55
---
local ShareItem = require "UI.UIPositionShare.Component.UIPositionShareItem"
local UIPositionShareView = BaseClass("UIPositionShareView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local txt_title_path = "UICommonMidPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonMidPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonMidPopUpTitle/panel"
local scroll_path = "ScrollView"

local function OnCreate(self)
    base.OnCreate(self)
    -- 组装分享参数
    local share_param = self:GetUserData()
    if not string.IsNullOrEmpty(share_param.pos) then
        local pos = SceneUtils.IndexToTilePos(share_param.pos)
        share_param.pos = nil
        share_param.x = pos.x
        share_param.y = pos.y
    end
    self.chat_data_param = share_param
    -- 界面数据
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.txt_title:SetLocalText(110073) 

    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)

    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)

    self.ScrollView = self:AddComponent(UIScrollView, scroll_path)
    self.ScrollView:SetTotalCount(0)
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.list = {}
end

local function OnDestroy(self)
    self.chat_data_param = nil
    
    self.txt_title = nil
    self.close_btn = nil
    self.return_btn = nil
    self.ScrollView = nil
    self.list = nil
    base.OnDestroy(self)
end

local function RefreshList(self)
    self:ClearScroll(self)
    local totalChatList = self.ctrl:GetChatList()
    if self.chat_data_param.postType == PostType.Text_MailScoutResultShare or self.chat_data_param.postType == PostType.Text_Formation_Fight_Share then
        local canShareToWorld = LuaEntry.DataConfig:CheckSwitch("share_reportt")
        if canShareToWorld then
            self.list = totalChatList
        else
            self.list = {}
            for _, chatItem in pairs(totalChatList) do
                if (not chatItem:isWorldRoom()) then -- or chatItem:isWorldRoom()
                    table.insert(self.list, chatItem)
                end
            end
        end
    elseif self.chat_data_param.postType == PostType.Text_AllianceTaskShare then
        self.list = {}
        for _, chatItem in pairs(totalChatList) do
            if (chatItem:isAllianceRoom()) then -- or chatItem:isWorldRoom()
                table.insert(self.list, chatItem)
            end
        end
    elseif self.chat_data_param.postType == PostType.Text_AllianceRecruitShare then
        self.list = {}
        for _, chatItem in pairs(totalChatList) do
            if (chatItem:isWorldRoom() or chatItem:isLangRoom()) then
                table.insert(self.list, chatItem)
            end
        end
    else 
        self.list = totalChatList
    end
    if #self.list > 0 then
        self.ScrollView:SetTotalCount(#self.list)
        self.ScrollView:RefillCells()
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self:RefreshList()
end

local function OnDisable(self)
    self:ClearScroll(self)
    base.OnDisable(self)
end

local function OnItemMoveIn(self, itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(ShareItem, itemObj)
    cellItem:SetItemShow(self.list[index])
end

local function OnItemMoveOut(self, itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name, ShareItem)
end

local function ClearScroll(self)
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(ShareItem)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.CHAT_REFRESH_CHANNEL, self.RefreshList)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.CHAT_REFRESH_CHANNEL, self.RefreshList)
end

local function OnItemClick(self, channel)
    if self.chat_data_param.post then
        if self.chat_data_param.post == PostType.Text_AllianceRecruitShare then
            local chatData = {}
            chatData.roomId = channel:getRoomId()
            chatData.post = self.chat_data_param.post
            chatData.param = self.chat_data_param
            EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SHARE_COMMAND, chatData)
            SFSNetwork.SendMessage(MsgDefines.SendAllianceRecruit)
        elseif self.chat_data_param.post == PostType.Text_AllianceTaskShare then
            local chatData = {}
            chatData.roomId = channel:getRoomId()
            chatData.post = self.chat_data_param.post
            chatData.param = self.chat_data_param
            EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SHARE_COMMAND, chatData)
        end
        self.ctrl:CloseSelf()
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPositionShareConfirm, { anim = true, isBlur = true }, channel, self.chat_data_param)
    end
end

UIPositionShareView.OnCreate = OnCreate
UIPositionShareView.OnDestroy = OnDestroy
UIPositionShareView.RefreshList = RefreshList
UIPositionShareView.OnEnable = OnEnable
UIPositionShareView.OnDisable = OnDisable
UIPositionShareView.OnItemMoveIn = OnItemMoveIn
UIPositionShareView.OnItemMoveOut = OnItemMoveOut
UIPositionShareView.ClearScroll = ClearScroll
UIPositionShareView.OnAddListener = OnAddListener
UIPositionShareView.OnRemoveListener = OnRemoveListener
UIPositionShareView.OnItemClick = OnItemClick
return UIPositionShareView