---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/9/24 17:30
---
local UIAllianceShopBuyPanelCtrl = BaseClass("UIAllianceShopBuyPanelCtrl", UIBaseCtrl)

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIAllianceShopBuyPanel)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function OnChangeSelectNumCheck(self,count,tabIndex,itemId)
    local num = 0
    local changeNum = math.floor(count)
    local tab = tabIndex
    local currentItemId = itemId
    if tab ==1 then
        local itemData = DataCenter.AllianceShopDataManager:GetAllianceShopOneData(currentItemId)
        if itemData~=nil then
            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(currentItemId)
            local itemCount = itemData["count"]
            local price = goods.price_all
            local accPoint = DataCenter.AllianceShopDataManager:GetAccPoint()
            local maxCount = math.min(itemCount,math.floor(accPoint/price))
            num = math.min(maxCount,changeNum)
        end

    elseif tab ==2 then
        local goods = DataCenter.AllianceShopDataManager:GetAllianceBagOneData(currentItemId)
        if goods~=nil then
            local price = goods.price_all
            local alliancePoint = DataCenter.AllianceShopDataManager:GetAlliancePoint()
            local maxCount = math.floor(alliancePoint/price)
            num = math.min(maxCount,changeNum)
        end
    end
    return num
end

local function GetMaxCount(self,tabIndex,itemId)
    local num = 0
    local tab = tabIndex
    local currentItemId = itemId
    if tab ==1 then
        local itemData = DataCenter.AllianceShopDataManager:GetAllianceShopOneData(currentItemId)
        if itemData~=nil then
            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(currentItemId)
            local itemCount = itemData["count"]
            local price = goods.price_all
            local accPoint = DataCenter.AllianceShopDataManager:GetAccPoint()
            local maxCount = math.min(itemCount,math.floor(accPoint/price))
            num = maxCount
        end

    elseif tab ==2 then
        local goods = DataCenter.AllianceShopDataManager:GetAllianceBagOneData(currentItemId)
        if goods~=nil then
            local price = goods.price_all
            local alliancePoint = DataCenter.AllianceShopDataManager:GetAlliancePoint()
            local maxCount = math.floor(alliancePoint/price)
            num = maxCount
        end
    end
    return num
end

local function GetCurButtonState(self,num, tabIndex, itemId)
    local state ={}
    state.canDec = false
    state.canAdd = false
    state.needCount= ""
    state.canUse = false
    local tab = tabIndex
    local currentItemId = itemId
    if tab ==1 then
        local itemData = DataCenter.AllianceShopDataManager:GetAllianceShopOneData(currentItemId)
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(currentItemId)
        if itemData~=nil and goods~=nil then
            local itemCount = 0
            if goods.type == GOODS_TYPE.MIGRATE_ITEM then
                itemCount = DataCenter.AllianceShopDataManager:GetMigrateItemAllianceShopRestCount()
            else
                itemCount = itemData["count"]
            end

            local price = goods.price_all
            local accPoint = DataCenter.AllianceShopDataManager:GetAccPoint()
            local needAlAcc = price * num
            state.canDec = num > 0
            state.canUse = accPoint >= needAlAcc and itemCount >= num
            state.canAdd = itemCount > num and accPoint > needAlAcc
            state.price = string.GetFormattedSeperatorNum(price)
            state.needAlAcc = string.GetFormattedSeperatorNum(needAlAcc)
            state.countLimited = itemCount < num
            state.accLack = accPoint < needAlAcc
        end

    elseif tab ==2 then
        local goods = DataCenter.AllianceShopDataManager:GetAllianceBagOneData(currentItemId)
        local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(currentItemId)
        local itemData = DataCenter.AllianceShopDataManager:GetAllianceShopOneData(currentItemId)
        if goods ~= nil and itemTemplate ~= nil then
            local price = goods.price_all
            local alliancePoint = DataCenter.AllianceShopDataManager:GetAlliancePoint()
            local needAlPoint = price * num
            local addNeedAlPoint  = price*num
            state.canDec = num > 0
            state.canUse = alliancePoint >= needAlPoint
            local allianceNum = -1
            if itemTemplate.allianceNum then
                allianceNum = itemTemplate.allianceNum
            end
            if allianceNum > 0 and itemData ~= nil then
                allianceNum = allianceNum - tonumber(itemData.buyCount)
                if allianceNum < 0 then
                    allianceNum = 0
                end
            end
            state.allianceNum = allianceNum
            --state.canAdd = alliancePoint >= addNeedAlPoint and (allianceNum > 0 or allianceNum == -1)
            --  allianceNum < 0 代表无限量
            local maxCount = self:GetMaxCount(tabIndex, itemId)
            state.canAdd = alliancePoint >= (addNeedAlPoint + price) and allianceNum ~= 0 and maxCount > 0
            state.price = string.GetFormattedSeperatorNum(price)
            state.needAlPoint = string.GetFormattedSeperatorNum(needAlPoint)
            state.nextWeekTime = DataCenter.AllianceShopDataManager:GetNextWeekTime()
            state.countLimited = false
            state.accLack = alliancePoint < addNeedAlPoint
        end
    end
    return state
end

local function OnUseClick(self,num,stateData, itemId)
    local currentItemId = itemId
    if currentItemId~=nil and currentItemId~="" then
        if stateData.countLimited then
            UIUtil.ShowTipsId(391042)
        elseif stateData.accLack then
            UIUtil.ShowTipsId(390270)
        else
            SFSNetwork.SendMessage(MsgDefines.AlShopBuyUsr, currentItemId, num)
        end
    else
        UIUtil.ShowTipsId(100290)
    end
    self:CloseSelf()
end

local function OnBuyClick(self,num,canUse,itemId)
    if DataCenter.AllianceBaseDataManager:IsR4orR5() then
        local currentItemId = itemId
        if currentItemId~=nil and currentItemId~="" then
            if canUse then
                SFSNetwork.SendMessage(MsgDefines.AlShopBuyAl,currentItemId,num)
            else
                UIUtil.ShowTipsId(390271)
            end
        else
            UIUtil.ShowTipsId(100290)
        end
    else
        UIUtil.ShowTipsId(390272)
    end
    self:CloseSelf()
end

UIAllianceShopBuyPanelCtrl.CloseSelf = CloseSelf
UIAllianceShopBuyPanelCtrl.Close = Close
UIAllianceShopBuyPanelCtrl.OnChangeSelectNumCheck = OnChangeSelectNumCheck
UIAllianceShopBuyPanelCtrl.GetCurButtonState = GetCurButtonState
UIAllianceShopBuyPanelCtrl.OnUseClick = OnUseClick
UIAllianceShopBuyPanelCtrl.OnBuyClick = OnBuyClick
UIAllianceShopBuyPanelCtrl.GetMaxCount = GetMaxCount

return UIAllianceShopBuyPanelCtrl