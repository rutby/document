---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/9/24 17:30
---
local UIAllianceShopCtrl = BaseClass("UIAllianceShopCtrl", UIBaseCtrl)
local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIAllianceShop)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end
local function InitData(self)
    self.currentItemId = ""
    self.selectTab = 1
    self.tempTab = 0
    SFSNetwork.SendMessage(MsgDefines.AlShopShow)
end
local function GetTab(self)
    return self.selectTab
end
local function SetTab(self,tab)
    self.selectTab = tab
end
local function SetCurrentItemId(self, id)
    self.currentItemId = id
end
local function GetAllianceShopData(self)
    local isChangeTab = true
    if self.selectTab == self.tempTab then
        isChangeTab = false
    end
    self.tempTab = self.selectTab
    local isEnd = false
    local selectIdx = 1
    if self.data ~= nil and self.data.list ~= nil then
        local idx = 1
        table.walk(self.data.list,function (k,v)
            if self.currentItemId ~= nil then
                if self.currentItemId == v then
                    selectIdx = idx
                end
            end
            idx = idx + 1
        end)
    end
    
    self.data ={}
    self.data.accPoint = string.GetFormattedSeperatorNum(DataCenter.AllianceShopDataManager:GetAccPoint())
    self.data.list = DataCenter.AllianceShopDataManager:GetAllianceShopIdList()
    if self.data.list~=nil then
        local idx = 1
        local hasId = false
        table.walk(self.data.list,function (k,v)
            if not isChangeTab then
                if self.currentItemId == "" then
                    self.currentItemId = v
                end
                if self.currentItemId == v then
                    hasId = true
                end
                if idx == table.count(self.data.list) and not hasId then
                    if selectIdx > table.count(self.data.list) then
                        self.currentItemId = v
                    else
                        self.currentItemId = self.data.list[selectIdx]
                    end
                end
            else
                if self.currentItemId == "" then
                    self.currentItemId = v
                end
            end
            idx = idx + 1
        end)
    end
    return self.data
end
local function GetAllianceBagData(self)
    self.tempTab = self.selectTab
    local data ={}
    data.alliancePoint = string.GetFormattedSeperatorNum(DataCenter.AllianceShopDataManager:GetAlliancePoint())
    data.list = DataCenter.AllianceShopDataManager:GetAllianceBagIdList()
    if data.list~=nil then
        table.walk(data.list,function (k,v)
            if self.currentItemId == "" then
                self.currentItemId = v
            end
        end)
    end
    return data
end
local function GetItemData(self,itemId)
    local item = {}
    local tab = self:GetTab()
    if tab ==1 then
        local itemData = DataCenter.AllianceShopDataManager:GetAllianceShopOneData(itemId)
        if itemData == nil then
            return item
        end
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
        if goods~=nil then
            if tonumber(itemData["count"]) <= 0 then
                return item
            end
            item.itemId = itemId
            item.price = goods.price_all
            item.iconName = DataCenter.ItemTemplateManager:GetIconPath(itemId)
            item.count = string.GetFormattedSeperatorNum(itemData["count"])
            item.itemName = DataCenter.ItemTemplateManager:GetName(itemId)
            item.des = DataCenter.ItemTemplateManager:GetDes(itemId)
            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
            local itemType = goods.type
            if itemType == 2 then -- SPD
                if goods.para1 ~= nil and goods.para1 ~= "" then
                    local para1 = goods.para1
                    local temp = string.split(para1,';')
                    if temp ~= nil and #temp > 1 then
                        item.itemFlag = temp[1]..temp[2]
                    end
                end
            elseif itemType == 3 then -- USE
                local type2 = goods.type2
                if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                    local res_num = tonumber(goods.para)
                    item.itemFlag = string.GetFormattedStr(res_num)
                end
            else
                item.itemFlag = ""
            end

            local selfItem = DataCenter.ItemData:GetItemById(itemId)
            if selfItem~=nil and selfItem.count>0 then
                item.ownNum = selfItem.count
            else
                item.ownNum = 0
            end
        end
    elseif tab ==2 then
        local goods = DataCenter.AllianceShopDataManager:GetAllianceBagOneData(itemId)
        if goods~=nil then
            item.itemId = itemId
            item.price = goods.price_all
            item.iconName = DataCenter.ItemTemplateManager:GetIconPath(itemId)
            item.count = ""
            item.itemName = DataCenter.ItemTemplateManager:GetName(itemId)
            item.des = DataCenter.ItemTemplateManager:GetDes(itemId)
            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
            local itemType = goods.type
            if itemType == 2 then -- SPD
                if goods.para1 ~= nil and goods.para1 ~= "" then
                    local para1 = goods.para1
                    local temp = string.split(para1,';')
                    if temp ~= nil and #temp > 1 then
                        item.itemFlag = temp[1]..temp[2]
                    end
                end
            elseif itemType == 3 then -- USE
                local type2 = goods.type2
                if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                    local res_num = tonumber(goods.para)
                    item.itemFlag = string.GetFormattedStr(res_num)
                end
            else
                item.itemFlag = ""
            end

            local itemData = DataCenter.AllianceShopDataManager:GetAllianceShopOneData(itemId)
            if itemData~=nil and itemData["count"]>0 then
                item.ownNum = itemData["count"]
            else
                item.ownNum = 0
            end
        end
    end
    return item
end

local function SelectOneItem(self,itemId)
    local oldSelectId = self.currentItemId
    self.currentItemId = itemId
    if oldSelectId~=nil and oldSelectId~= ""then
        EventManager:GetInstance():Broadcast(EventId.CLICK_ALLIANCE_SHOP_ITEM,oldSelectId)
    end
    local param = {}
    param.itemData = self:GetItemData(self.currentItemId)
    param.tabIndex = self:GetTab()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceShopBuyPanel,{anim = true, isBlur = true}, param)
end
local function GetCurrentItemId(self)
    return self.currentItemId
end

UIAllianceShopCtrl.CloseSelf = CloseSelf
UIAllianceShopCtrl.Close = Close
UIAllianceShopCtrl.InitData = InitData
UIAllianceShopCtrl.GetTab = GetTab
UIAllianceShopCtrl.SetTab = SetTab
UIAllianceShopCtrl.SetCurrentItemId = SetCurrentItemId
UIAllianceShopCtrl.GetCurrentItemId = GetCurrentItemId
UIAllianceShopCtrl.GetAllianceShopData = GetAllianceShopData
UIAllianceShopCtrl.GetAllianceBagData = GetAllianceBagData
UIAllianceShopCtrl.GetItemData = GetItemData
UIAllianceShopCtrl.SelectOneItem = SelectOneItem

return UIAllianceShopCtrl