---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/9/24 14:38
---
local AllianceShopCell = require "UI.UIAlliance.UIAllianceShop.Component.AllianceShopCell"
local AllianceCurShopItem = require "UI.UIAlliance.UIAllianceShop.Component.AllianceCurShopItem"
local UIAllianceShopView = BaseClass("UIAllianceShopView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"

local txt_title_path = "fullTop/imgTitle/Common_img_title/titleText"
local toogle1_path = "ImgBg/Tab/Toggle1"
local toogle2_path = "ImgBg/Tab/Toggle2"
local close_btn_path = "fullTop/CloseBtn"
local usr_point_obj_path = "fullTop/accItemImage"
local usr_point_txt_path = "fullTop/accItemImage/accItemCount"
local al_point_obj_path = "fullTop/alPointItemImage"
local al_point_txt_path = "fullTop/alPointItemImage/alPointItemCount"
local zeroText_path = "ImgBg/ZeroText"

local scroll_path = "ImgBg/CellList"

local function OnCreate(self)
    base.OnCreate(self)
    self.ctrl:InitData()
    self.cells = {}
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)

    self.toogle1 = self:AddComponent(UIToggle, toogle1_path)
    self.toogle1:SetIsOn(true)
    self.toogle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toogle1.choose = self.toogle1:AddComponent(UIBaseContainer, "Background/Checkmark1")
    self.toogle1.unselectName = self.toogle1:AddComponent(UITextMeshProUGUIEx, "text1")
    self.toogle1.selectName = self.toogle1:AddComponent(UITextMeshProUGUIEx, "checkText1")
    self.toogle1.unselectName:SetLocalText(104241)
    self.toogle1.selectName:SetLocalText(104241)

    self.toogle2 = self:AddComponent(UIToggle, toogle2_path)
    self.toogle2:SetIsOn(false)
    self.toogle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toogle2.choose = self.toogle2:AddComponent(UIBaseContainer, "Background/Checkmark2")
    self.toogle2.unselectName = self.toogle2:AddComponent(UITextMeshProUGUIEx, "text2")
    self.toogle2.selectName = self.toogle2:AddComponent(UITextMeshProUGUIEx, "checkText2")
    self.toogle2.unselectName:SetLocalText(390962)
    self.toogle2.selectName:SetLocalText(390962)

    self.usr_point_obj = self:AddComponent(UIBaseContainer, usr_point_obj_path)
    self.al_point_obj = self:AddComponent(UIBaseContainer, al_point_obj_path)

    self.usr_point_txt = self:AddComponent(UITextMeshProUGUIEx, usr_point_txt_path)
    self.al_point_txt = self:AddComponent(UITextMeshProUGUIEx, al_point_txt_path)
    
    self.usrPointBtnN = self:AddComponent(UIButton, usr_point_obj_path)
    self.usrPointBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)
    self.alPointBtnN = self:AddComponent(UIButton, al_point_obj_path)
    self.alPointBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)

    self.zeroText = self:AddComponent(UITextMeshProUGUIEx, zeroText_path)

    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    
    self.ScrollView = self:AddComponent(UIScrollView, scroll_path)
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnShopItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnShopItemMoveOut(itemObj, index)
    end)
    self.item_list = {}
end
local function OnDestroy(self)
    if self.delayTime then
        self.delayTime:Stop()
        self.delayTime = nil
    end
    self.txt_title = nil
    self.cur_item = nil
    self.toogle1.choose = nil
    self.toogle1 = nil
    self.toogle2.choose = nil
    self.toogle2 = nil
    self.usr_point_obj = nil
    self.al_point_obj = nil
    self.usr_point_txt = nil
    self.al_point_txt = nil
    self.zeroText = nil
    self.item = nil
    self.item_des = nil
    --self.own_num = nil
    self.dec_btn = nil
    self.add_btn = nil
    self.use_btn = nil
    self.use_btn_name = nil
    self.single_item_count = nil
    self.buy_btn = nil
    self.buy_btn_name = nil
    self.alliance_item_count = nil
    self.input = nil
    self.close_btn = nil
    self.return_btn = nil
    self.ScrollView = nil
    self.selectItemId = nil
    self.inputValue = nil
    self.item_list = nil
    self.selectTab = nil
    self.cells = nil
    self.isChangeTab = nil
    self.tempTab = nil
    base.OnDestroy(self)
end
local function ToggleControlBorS(self)
    if self.delayTime then
        self.delayTime:Stop()
        self.delayTime = nil
    end
    
    self.toogle1.choose:SetActive(self.toogle1:GetIsOn())
    self.toogle1.selectName:SetActive(self.toogle1:GetIsOn())
    self.toogle2.choose:SetActive(self.toogle2:GetIsOn())
    self.toogle2.selectName:SetActive(self.toogle2:GetIsOn())
    if self.toogle1:GetIsOn() then
        self.ctrl:SetTab(1)
    elseif self.toogle2:GetIsOn() then
        self.ctrl:SetTab(2)
    end
    self.ctrl:SetCurrentItemId("")
    self:RefreshData()
end
local function RefreshData(self)
    self.item_list = {}
    local tab = self.ctrl:GetTab()
    self.isChangeTab = tab ~= self.tempTab
    self.tempTab = tab
    self.usr_point_obj:SetActive(tab == 1)
    self.al_point_obj:SetActive(tab == 2)

    if tab == 1 then
        local data = self.ctrl:GetAllianceShopData()
        self.item_list = data.list
        self.usr_point_txt:SetText(data.accPoint)
        self.txt_title:SetLocalText(390168)
        self.toogle1.selectName:SetActive(true)
        self.toogle1.unselectName:SetActive(false)
        self.toogle2.selectName:SetActive(false)
        self.toogle2.unselectName:SetActive(true)
    elseif tab == 2 then
        local data = self.ctrl:GetAllianceBagData()
        self.item_list = data.list
        self.al_point_txt:SetText(data.alliancePoint)
        self.txt_title:SetLocalText(391097)
        self.toogle2.selectName:SetActive(true)
        self.toogle2.unselectName:SetActive(false)
        self.toogle1.selectName:SetActive(false)
        self.toogle1.unselectName:SetActive(true)
    end

    self:RefreshItemContent()
    if self.cells ~= nil and table.count(self.cells) > 0 and self.isChangeTab == false  then
        for i = 1, table.count(self.cells) do
            if self.item_list[i] ~= nil then
                self.cells[i]:SetActive(true)
                self.cells[i]:SetItemShow(self.item_list[i])
            else
                self.cells[i]:SetActive(false)
            end
        end
        self:RefreshArrow()
        return
    end
    
    self:ClearScroll(self)
    if #self.item_list > 0 then
        self.ScrollView:SetTotalCount(#self.item_list)
        self.ScrollView:RefillCells()
    end

    self:RefreshArrow()
end

local function RefreshArrow(self)
    if self.arrowItemId then
        self.delayTime = TimerManager:GetInstance():DelayInvoke(function()
            if self.cells ~= nil and table.count(self.cells) > 0 then
                local position = nil
                for i = 1, table.count(self.cells) do
                    if self.cells[i].itemId == tostring(self.arrowItemId) then
                        position = self.cells[i]:GetPos()
                    end
                end
                if position then
                    local param = {}
                    param.positionType = PositionType.Screen
                    param.position = position
                    if param.position ~= nil then
                        DataCenter.ArrowManager:ShowArrow(param)
                    end
                end
            end
            self.arrowItemId = nil
        end, 0.5)
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self.arrowItemId = self:GetUserData()
    self:ToggleControlBorS()
end
local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.CLICK_ALLIANCE_SHOP_ITEM, self.RefreshItemContent)
    self:AddUIListener(EventId.AllianceShopShow, self.RefreshData)
end
local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.CLICK_ALLIANCE_SHOP_ITEM, self.RefreshItemContent)
    self:RemoveUIListener(EventId.AllianceShopShow, self.RefreshData)
end
local function OnShopItemMoveIn(self, itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(AllianceShopCell, itemObj)
    cellItem:SetItemShow(self.item_list[index])
    self.cells[index] = cellItem
end
local function OnShopItemMoveOut(self, itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name, AllianceShopCell)
    self.cells[index] = nil
end
local function ClearScroll(self)
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(AllianceShopCell)
    self.cells = {}
end

local function OnClickInfoBtn(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local trans = self.tempTab == 1 and self.usrPointBtnN.transform or self.alPointBtnN.transform
    local strTitle = nil
    local strContent = self.tempTab == 1 and Localization:GetString("391085") or Localization:GetString("391086")
    local position = trans.position + Vector3.New(-79, -50, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.title = strTitle
    param.content = strContent
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 240
    param.pivot = 0.85
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function RefreshItemContent(self)
    local curItemData = self.ctrl:GetItemData(self.ctrl:GetCurrentItemId())
    if curItemData.itemId ~= nil and curItemData.itemId ~= "" then
        self.zeroText:SetActive(false)
    else
        self.zeroText:SetLocalText(391041)
        self.zeroText:SetActive(true)
    end
end


UIAllianceShopView.OnCreate = OnCreate
UIAllianceShopView.OnDestroy = OnDestroy
UIAllianceShopView.ToggleControlBorS = ToggleControlBorS
UIAllianceShopView.OnEnable = OnEnable
UIAllianceShopView.OnDisable = OnDisable
UIAllianceShopView.OnAddListener = OnAddListener
UIAllianceShopView.OnRemoveListener = OnRemoveListener
UIAllianceShopView.RefreshData = RefreshData
UIAllianceShopView.OnShopItemMoveIn = OnShopItemMoveIn
UIAllianceShopView.OnShopItemMoveOut = OnShopItemMoveOut
UIAllianceShopView.ClearScroll = ClearScroll
UIAllianceShopView.OnClickInfoBtn = OnClickInfoBtn
UIAllianceShopView.RefreshArrow = RefreshArrow
UIAllianceShopView.RefreshItemContent = RefreshItemContent

return UIAllianceShopView