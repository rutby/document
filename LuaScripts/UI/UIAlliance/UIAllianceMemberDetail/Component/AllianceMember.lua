---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/7/28 18:58
---
local AllianceMemberRankItem = require "UI.UIAlliance.UIAllianceMemberDetail.Component.AllianceMemberRankItem"
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local AllianceMember = BaseClass("AllianceMember",UIBaseContainer)
local AllianceOfficialPosItem = require "UI.UIAlliance.UIAllianceMemberDetail.Component.AlliancePositionItem"
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local leaderContainer_path = "leader"
local leader_name_path = "leader/leaderNameTxt"
local power_path = "leader/layout/powerDi/power"
local show_btn_path = "leader/showBtn"
local headBg_path = "leader/head/UIPlayerHead"
local headFg_path = "leader/head/UIPlayerHead/Foreground"
local icon_path ="leader/head/UIPlayerHead/HeadIcon"
local onlineState_path = "leader/onlineStateBg/onlineText"
local onlineBg_path = "leader/onlineStateBg"
local noLeaderContainer_path = "GameObject/vote"
local voteBtn_path = "GameObject/vote/voteBtn"
local voteBtnTxt_path = "GameObject/vote/voteBtn/Txt"
local noLeaderTip_path = "GameObject/vote/tip"
local noLeaderTime_path = "GameObject/vote/countDown"
local leaderEmpty_path = "GameObject/leaderEmpty"
local leaderEmptyTxt_path = "GameObject/leaderEmpty/tip1"
local closeTipBtn_path = "closeMemberTipBtn"
local svRanks_path = "GameObject/ScrollView"
local content_path = "GameObject/ScrollView/Viewport/Content"
local rank_4_path = "GameObject/ScrollView/Viewport/Content/AllianceMemberBtnItem4"
local rank_3_path = "GameObject/ScrollView/Viewport/Content/AllianceMemberBtnItem3"
local rank_2_path = "GameObject/ScrollView/Viewport/Content/AllianceMemberBtnItem2"
local rank_1_path = "GameObject/ScrollView/Viewport/Content/AllianceMemberBtnItem1"
local inviteBtn_path = "inviteBtn"
local inviteTxt_path = "inviteBtn/inviteTxt"
local officialPosContainer_path = "GameObject/ScrollView/Viewport/Content/r4Position"
local officialPos_path = "GameObject/ScrollView/Viewport/Content/r4Position/pos"
local level_go_path = "leader/layout/levelDi"
local level_text_path = "leader/layout/levelDi/levelTxt"

local function OnCreate(self)
    base.OnCreate(self)
    self.leaderContainer = self:AddComponent(UIBaseContainer, leaderContainer_path)
    self.onlineBg = self:AddComponent(UIBaseContainer, onlineBg_path)
    self.noLeaderContainer = self:AddComponent(UIBaseContainer, noLeaderContainer_path)
    self.voteBtn = self:AddComponent(UIButton, voteBtn_path)
    self.voteBtn:SetOnClick(function()
        self:OnClickVoteBtn()
    end)
    self.voteBtnTxt = self:AddComponent(UITextMeshProUGUIEx, voteBtnTxt_path)
    self.voteBtnTxt:SetLocalText(390861) 
    self.noLeaderTip = self:AddComponent(UITextMeshProUGUIEx, noLeaderTip_path)
    self.noLeaderTip:SetText("")
    self.noLeaderTime = self:AddComponent(UITextMeshProUGUIEx, noLeaderTime_path)
    self.leaderEmpty = self:AddComponent(UIBaseContainer, leaderEmpty_path)
    self.closeTipBtnN = self:AddComponent(UIButton, closeTipBtn_path)
    self.closeTipBtnN:SetOnClick(function()
        UIManager:GetInstance():DestroyWindow(UIWindowNames.UIAllianceMemberTip)
    end)
    self.leaderEmptyTxt = self:AddComponent(UITextMeshProUGUIEx, leaderEmptyTxt_path)
    self.leaderEmptyTxt:SetLocalText(390863)
    self.leader_name = self:AddComponent(UITextMeshProUGUIEx,leader_name_path)
    self.power  = self:AddComponent(UITextMeshProUGUIEx,power_path)
    self.icon = self:AddComponent(UIPlayerHead, icon_path)
    self.headBg = self:AddComponent(UIImage, headBg_path)
    self.headFg = self:AddComponent(UIImage, headFg_path)
    self.show_btn = self:AddComponent(UIButton, show_btn_path)
    self.show_btn:SetOnClick(function ()
        self:OnShowClick()
    end)
    self.onlineStateTxt = self:AddComponent(UITextMeshProUGUIEx, onlineState_path)
    self.srEventTrigger = self:AddComponent(UIEventTrigger, svRanks_path)
    self.srEventTrigger:OnPointerDown(function(eventData)
        if UIManager:GetInstance():GetWindow(UIWindowNames.UIAllianceMemberTip) then
            UIManager.Instance:DestroyWindow(UIWindowNames.UIAllianceMemberTip)
        end
    end)
    self.svRanksN = self:AddComponent(UIScrollRect, svRanks_path)
    self.svRanksN:AddValueChangeListener(function(vec2)
        if math.abs(vec2.y) >= 0.001 then
            if UIManager:GetInstance():GetWindow(UIWindowNames.UIAllianceMemberTip) then
                UIManager.Instance:DestroyWindow(UIWindowNames.UIAllianceMemberTip)
            end
        end
    end)
    self.contentN = self:AddComponent(UIBaseContainer, content_path)
    self.rank_4 = self:AddComponent(AllianceMemberRankItem, rank_4_path)
    self.rank_3 = self:AddComponent(AllianceMemberRankItem, rank_3_path)
    self.rank_2 = self:AddComponent(AllianceMemberRankItem, rank_2_path)
    self.rank_1 = self:AddComponent(AllianceMemberRankItem, rank_1_path)
    self.officialPosContainerN = self:AddComponent(UIBaseContainer, officialPosContainer_path)
    self.officialPosContainerN:SetActive(false)
    self.officialPosTbN = {}
    for i = 1, 4 do
        local tempItem = self:AddComponent(AllianceOfficialPosItem, officialPos_path .. i)
        table.insert(self.officialPosTbN, tempItem)
    end
    
    self.inviteBtnN = self:AddComponent(UIButton, inviteBtn_path)
    self.inviteBtnN:SetOnClick(function()
        self:OnClickRecruitBtn()
    end)
    self.inviteTxtN = self:AddComponent(UITextMeshProUGUIEx, inviteTxt_path)
    self.inviteTxtN:SetLocalText(110021)

    self.level_go = self:AddComponent(UIBaseContainer, level_go_path)
    self.level_text = self:AddComponent(UITextMeshProUGUIEx, level_text_path)
    
    self.timer_action = function()
        self:SetStateCountDown()
    end

    self.showRanks = {}
end

local function OnDestroy(self)
    self:DeleteTimer()
    self.stateEndTime = nil
    self.leader_name = nil
    self.power  = nil
    self.icon = nil
    self.headBg = nil
    self.headFg = nil
    self.show_btn = nil
    self.rank_4 = nil
    self.rank_3 = nil
    self.rank_2 = nil
    self.rank_1 = nil
    self.showRanks = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.view.ctrl:InitAllianceMemberData()
end
local function OnDisable(self)
    self:DeleteTimer()
    base.OnDisable(self)
end

local function OnRefresh(self, playerUid)
    if not string.IsNullOrEmpty(playerUid) then--如果有值，是踢人，不要全局刷
        return
    end
    self:SetLeaderPart()
    self:SetOfficialPosPart()
    self.rank_4:RefreshData(4)
    self.rank_3:RefreshData(3)
    self.rank_2:RefreshData(2)
    self.rank_1:RefreshData(1)

    if not self.view.ctrl:CheckIsSelfAll() then-- self.view:CheckIfShowMemberOnly() then
        self.inviteBtnN:SetActive(false)
    else
        if DataCenter.AllianceBaseDataManager:IsR4orR5() then
            self.inviteBtnN:SetActive(true)
        else
            self.inviteBtnN:SetActive(false)
        end
    end
    self.inviteBtnN:SetActive(false)
end

local function OnShowRankItem(self, param)
    if not self.leaderData or not self.leaderData.isSelfAlliance then
        return
    end
    
    local rank = param.rank
    local isShow = param.isShow
    self.showRanks[rank] = isShow

    if self.view.showInactiveTip then
        if isShow then
            local list = self.view.ctrl:GetMemberListByRank(rank)
            local delayT = 0.1
            CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.contentN.transform)
            TimerManager:GetInstance():DelayInvoke(function()
                self:TryScrollToInactiveMember(rank)
            end, delayT)
        end
        return
    end
    
    if table.count(self.showRanks) == AllianceMemberRankCount then
        if self.view.ctrl:CheckIsSelfAll() then
            local showSelfRank = self.view:CheckIfNeedShowSelfRank(true)
            if showSelfRank then
                self:TryScrollToSelfRank()
                return
            end
        end
    end
end

local function TryScrollToSelfRank(self)
    local selfRank = DataCenter.AllianceBaseDataManager:GetSelfRank()
    local targetY = 12

    local posContainerSize = self.officialPosContainerN:GetSizeDelta()
    targetY = targetY + posContainerSize.y

    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.contentN.transform)
    local contentScale = self.contentN:GetSizeDelta()
    local svScale = self.svRanksN:GetSizeDelta()
    for i = 4, 1, -1 do
        if i > selfRank then
            local temp = self["rank_" .. i]:GetSizeDelta()
            targetY = targetY + temp.y
        end
    end

    local prog = 0
    if svScale.y >= contentScale.y then
        prog = 0
    else
        prog = targetY / (contentScale.y - svScale.y)-- targetY / contentScale.y + 0.01
    end
    self.svRanksN:SetVerticalNormalizedPosition(1 - prog)
end

local function TryScrollToInactiveMember(self, rank)
    local targetY = 12
    local contentScale = self.contentN:GetSizeDelta()
    local svScale = self.svRanksN:GetSizeDelta()
    
    local posContainerSize = self.officialPosContainerN:GetSizeDelta()
    targetY = targetY + posContainerSize.y

    for i = 4, 1, -1 do
        if i > rank then
            local temp = self["rank_" .. i]:GetSizeDelta()
            targetY = targetY + temp.y
        end
    end
    
    local list = self.view.ctrl:GetMemberListByRank(rank)
    if #list == 0 then
        return
    end
    
    local inactiveExist = false
    for i, v in ipairs(list) do
        if v.isInactive then
            inactiveExist = true
            targetY = targetY + 71 + 88 * (math.ceil(i / 2))
            break
        end
    end

    if not inactiveExist then
        return
    end
    
    local prog = 0
    if svScale.y >= contentScale.y then
        prog = 0
    else
        local targetProg = targetY - svScale.y
        targetProg = math.max(0, targetProg)
        prog = targetProg / (contentScale.y - svScale.y)-- targetY / contentScale.y + 0.01
    end
    self.svRanksN:SetVerticalNormalizedPosition(1 - prog)
end

local function SetOfficialPosPart(self)
    --if not self.leaderData or not self.leaderData.isSelfAlliance then
    for i = 1, 4 do
        self.officialPosTbN[i]:SetItem(i)
    end
end

local function SetLeaderPart(self)
    self.leaderData = self.view.ctrl:GetLeaderData()
    if not self.leaderData or self.leaderData.uid == "" then
        self.noLeaderContainer:SetActive(false)
        self.leaderContainer:SetActive(false)
        self.leaderEmpty:SetActive(true)
        --[[
        if self.leaderData.isSelfAlliance then
            if DataCenter.AllianceBaseDataManager:CheckIfIsAlWaitMerge() then
                self.leaderEmpty:SetActive(true)
            else
                self.noLeaderContainer:SetActive(true)
                
                self.voteBtn:SetActive(true)

                local baseData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
                self.stateEndTime = baseData.stateEndTime
                if baseData.sysAlState == 0 or baseData.sysAlState == 1 then
                    self.noLeaderTip:SetLocalText(390874)
                    CS.UIGray.SetGray(self.voteBtn.transform, true , false)
                elseif baseData.sysAlState == 2 then
                    self.noLeaderTip:SetLocalText(390875)
                    if baseData.voted == 0 then
                        CS.UIGray.SetGray(self.voteBtn.transform, false , true)
                    else
                        CS.UIGray.SetGray(self.voteBtn.transform, true , false)
                    end
                end
                self:SetStateCountDown()
                self:AddTimer()
            end
            
        else
            self.leaderEmpty:SetActive(true)
        end
        --]]
    else
        self.noLeaderContainer:SetActive(false)
        self.leaderEmpty:SetActive(false)
        self.leaderContainer:SetActive(true)

        self.icon:SetData(self.leaderData.uid, self.leaderData.pic, self.leaderData.picVer)
        
        self.leader_name:SetText(self.leaderData.name)
        if self.leaderData.headBg then
            self.headFg:SetActive(true)
            self.headFg:LoadSprite(self.leaderData.headBg)
        else
            self.headFg:SetActive(false)
        end
        self.power:SetText(self.leaderData.power)
        if self.leaderData.isSelfAlliance then
            self.onlineBg:SetActive(true)
            self.onlineStateTxt:SetText(self.leaderData.online_time)
            if self.leaderData.isOnline then
                self.onlineStateTxt:SetColor(Color.New(164/255,249/255,42/255,1))
            else
                self.onlineStateTxt:SetColor(Color.New(0.49,0.49,0.49,1))
            end
        else
            self.onlineBg:SetActive(false)
        end

        if self.leaderData.mainCityLv == nil or self.leaderData.mainCityLv == 0 then
            self.level_go:SetActive(false)
        else
            self.level_go:SetActive(true)
            self.level_text:SetText(tostring(self.leaderData.mainCityLv))
        end
    end
    
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action, self, false,false,false)
        self.timer:Start()
    end
end

local function SetStateCountDown(self)
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    if self.stateEndTime > serverTime then
        self.noLeaderTime:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(self.stateEndTime - serverTime))
    else
        self.noLeaderTime:SetText("")
        self:DeleteTimer()
    end
end

local function DeleteTimer(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end




local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.AllianceMember, self.OnRefresh)
    self:AddUIListener(EventId.AlLeaderVoteStatusChange, self.OnRefresh)
    self:AddUIListener(EventId.ShowAllianceMemberRanks, self.OnShowRankItem)

end
local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.AllianceMember,self.OnRefresh)
    self:RemoveUIListener(EventId.AlLeaderVoteStatusChange,self.OnRefresh)
    self:RemoveUIListener(EventId.ShowAllianceMemberRanks,self.OnShowRankItem)
end

local function OnShowClick(self)
    if self.leaderData.uid ~= LuaEntry.Player.uid then
        local x = self.icon.transform.position.x
        local y = self.icon.transform.position.y
        self.view:OnShowAllianceMemberTips(self.leaderData.uid,self.leaderData.rank,x,y,self.leaderData.name)
    end
    
end

local function OnClickRecruitBtn(self)
    local baseInfo = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
    local cdTime = LuaEntry.DataConfig:TryGetNum("alliance_regulation", "k6") * 1000
    local nextTime = baseInfo.lastRecruitTime + cdTime
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local cdRemainTime = nextTime - serverTime
    if cdRemainTime > 0 then
        UIUtil.ShowTips(Localization:GetString("391094", math.ceil(cdRemainTime / 60000)))
        return
    end
    
    local param = {}
    param.defaultTip = Localization:GetString(AllianceInviteTipDefault)
    --param.callback = function(strTip)
    --    local share_param = {}
    --    share_param.post = PostType.Text_AllianceRecruitShare
    --    local allianceBase = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
    --    share_param.name = allianceBase.allianceName
    --    share_param.abbr = allianceBase.abbr
    --    share_param.recruitTip = strTip
    --    share_param.country = allianceBase.country
    --    share_param.memberNum = allianceBase.curMember.."/"..allianceBase.maxMember
    --    share_param.allianceFlag = allianceBase.icon
    --    share_param.needApply = allianceBase.recruitTotal
    --    share_param.uid = allianceBase.uid
    --    share_param.language = allianceBase.language
    --    share_param.postType = PostType.Text_AllianceRecruitShare
    --    local _chatRoomManager = ChatInterface.getRoomMgr()
    --    local totalChatList = _chatRoomManager:GetShareRoom()
    --    local channel = nil
    --    for _, chatItem in pairs(totalChatList) do
    --        if chatItem:isWorldRoom() then -- or chatItem:isWorldRoom()
    --            channel = chatItem
    --            break
    --        end
    --    end
    --    if channel then
    --        local chatData = {}
    --        chatData.roomId = channel:getRoomId()
    --        chatData.post = share_param.post
    --        chatData.param = share_param
    --        EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SHARE_COMMAND, chatData)
    --        SFSNetwork.SendMessage(MsgDefines.SendAllianceRecruit)
    --    end
    --end
    
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceInviteTip, {anim = true}, param)
end

local function OnClickShowOfflineTip(self)
    local showTip = self.leaderData.isSelfAlliance and DataCenter.AllianceBaseDataManager:IsR4orR5() and not self.leaderData.isOnline
    if not showTip then
        return
    end

    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.onlineStateBtn.transform.position + Vector3.New(5, 30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = self.leaderData.online_time
    param.dir = UIHeroTipView.Direction.ABOVE
    param.defWidth = 180
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnClickVoteBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAlLeaderVote, { anim = true })
end

AllianceMember.OnCreate = OnCreate
AllianceMember.OnDestroy = OnDestroy
AllianceMember.OnRefresh = OnRefresh
AllianceMember.SetLeaderPart = SetLeaderPart
AllianceMember.OnEnable = OnEnable
AllianceMember.OnDisable = OnDisable
AllianceMember.OnAddListener = OnAddListener
AllianceMember.OnRemoveListener = OnRemoveListener
AllianceMember.OnShowClick = OnShowClick
AllianceMember.OnClickShowOfflineTip = OnClickShowOfflineTip
AllianceMember.OnClickVoteBtn = OnClickVoteBtn
AllianceMember.AddTimer = AddTimer
AllianceMember.SetStateCountDown = SetStateCountDown
AllianceMember.DeleteTimer = DeleteTimer
AllianceMember.OnShowRankItem = OnShowRankItem
AllianceMember.TryScrollToInactiveMember = TryScrollToInactiveMember
AllianceMember.TryScrollToSelfRank = TryScrollToSelfRank
AllianceMember.OnClickRecruitBtn = OnClickRecruitBtn
AllianceMember.SetOfficialPosPart = SetOfficialPosPart
return AllianceMember