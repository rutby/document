---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/10 18:05
---
--local AllianceWarPlayerSoliderItem = require "UI.UIAlliance.UIAllianceWarDetail.Component.AllianceWarPlayerSoliderItem"
local UIAllianceHeroCell = require "UI.UIChatNew.Component.RadarAlarmCells.UIAllianceHeroCell"
local AllianceWarPlayerItem = BaseClass("AllianceWarPlayerItem",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local name_path = "mainContent/nameTxt"
local power_path = "mainContent/powerTxt"
--local power_des_path = "mainContent/powerDesTxt"
local state_path= "mainContent/stateTxt"
local sl_Image_path = "mainContent/Image"
local slider_path = "mainContent/Slider"
local progress_txt_path = "mainContent/Slider/progressTxt"
local time_txt_path = "mainContent/Slider/TimeTxt"
local cancel_btn_path ="mainContent/returnButton"
local _content_rect = "mainContent/Content"
local leader_img_path = "mainContent/Img_leader"
local playerHead_path = "mainContent/UIPlayerHead/HeadIcon"
local playerHeadBg_path = "mainContent/UIPlayerHead/Foreground"
local SliderLength = 141
local function OnCreate(self,uuid)
    base.OnCreate(self)
    self:SetUuid(uuid)
    self.isUpdate =false
    self.lastChangeTextDeltaTime =0
    self.lastChangeImageDeltaTime =0
    self.name = self:AddComponent(UITextMeshProUGUIEx,name_path)
    self.power = self:AddComponent(UITextMeshProUGUIEx,power_path)
    --self.power_des = self:AddComponent(UITextMeshProUGUIEx,power_des_path)
    --self.power_des:SetText(Localization:GetString("130068")..": ")
    self.state = self:AddComponent(UITextMeshProUGUIEx,state_path)
    self.state:SetLocalText(390141) 
    self.slider = self:AddComponent(UISlider,slider_path)
    self.sl_Image = self:AddComponent(UIBaseContainer,sl_Image_path)
    self.progress_txt = self:AddComponent(UITextMeshProUGUIEx,progress_txt_path)
    self.time_txt = self:AddComponent(UITextMeshProUGUIEx,time_txt_path)
    self.cancel_btn = self:AddComponent(UIButton, cancel_btn_path)
    self.cancel_btn:SetOnClick(function ()
        self:OnCancelClick()
    end)
    
    self._content_rect = self:AddComponent(UIBaseContainer,_content_rect)
    self.modelHero = {}
    
    self._leader_img = self:AddComponent(UIImage,leader_img_path)

    self.playerHead = self:AddComponent(UIPlayerHead, playerHead_path)
    self.playerHeadBg = self:AddComponent(UIImage, playerHeadBg_path)
    self.playerHeadBg.transform:SetAsLastSibling()

    self.model = {}
end

local function OnDestroy(self)
    self:SetAllCellDestroyHero()
    self.name = nil
    self.power = nil
    --self.power_des = nil
    self.state = nil
    self.slider = nil
    self.progress_txt = nil
    self.time_txt = nil
    self.cancel_btn = nil
    self.isUpdate = nil
    self.playerHead = nil
    base.OnDestroy(self)
end

local function RefreshData(self,warUuid,helpData)
    self:SetAllCellDestroyHero()
    self.helpData = helpData
    self.warUuid = warUuid
    self.showSolider = false
    self.isUpdate =false
    self.lastChangeTextDeltaTime =0
    self.lastChangeImageDeltaTime =0
    --获取数据时判断下是不是增援部队
    self.dataInfo = self.view.ctrl:GetPlayerItemData(warUuid,self.uuid,helpData)
    local abbr = self.dataInfo.abbr
    if abbr~=nil and abbr~="" then
        self.name:SetText("[".. abbr.."]"..self.dataInfo.ownerName)
    else
        self.name:SetText(self.dataInfo.ownerName)
    end
    
    self.cancel_btn:SetActive(self.dataInfo.cancel and self.view.ctrl:GetInMarchState(warUuid)==false)
    if helpData then
        self._leader_img:SetActive(false)
        local curTime = UITimeManager:GetInstance():GetServerTime()
        --援助时只有自己的部队并且部队到达驻守地后才能让部队返回
        self.cancel_btn:SetActive(self.dataInfo.cancel and self.dataInfo.endTime < curTime)
    else
        self._leader_img:SetActive(self.dataInfo.leader)
    end
    if self.dataInfo.status == MarchStatus.IN_TEAM or self.dataInfo.status == MarchStatus.WAIT_RALLY or self.dataInfo.leader then
        if self.state:GetActive() ==false then
            self.state:SetActive(true)
        end
        if self.sl_Image:GetActive() then
            self.sl_Image:SetActive(false)
            self.slider:SetActive(false)
        end
    else
        if self.state:GetActive() then
            self.state:SetActive(false)
        end
        if self.sl_Image:GetActive()==false then
            self.sl_Image:SetActive(true)
            self.slider:SetActive(true)
        end
        self:UpdateSlider()
    end

    self.playerHead:SetData(self.dataInfo.ownerUid,self.dataInfo.ownerIcon,self.dataInfo.ownerIconVer)
    if self.dataInfo.headBg then
        self.playerHeadBg:SetActive(true)
        self.playerHeadBg:LoadSprite(self.dataInfo.headBg)
    else
        self.playerHeadBg:SetActive(false)
    end
    self._content_rect:RemoveComponents(UIAllianceHeroCell)
    --英雄
    local list = self.view.ctrl:GetPlayerSoldierData(warUuid,self.uuid,helpData)
    if next(list) then
        table.sort(list.heros, function(a,b)
            if a.quality > b.quality then
                return true
            elseif a.quality == b.quality then
                if a.lv > b.lv then
                    return true
                end
                return false
            end
        end)
        for i = 1, table.length(list.heros) do
            --复制基础prefab，每次循环创建一次
            self.modelHero[i] = self:GameObjectInstantiateAsync(UIAssets.AllianceHeroCell, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go:SetActive(true)
                go.transform:SetParent(self._content_rect.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                NameCount = NameCount + 1
                local nameStr = tostring(NameCount)
                go.name = nameStr
                local cell = self._content_rect:AddComponent(UIAllianceHeroCell, go.name)
                cell:ReInit(list.heros[i])
            end)
        end
        local count = 0
        for i = 1, table.length(list.soldiers) do
            count = list.soldiers[i].count + count
        end
        self.power:SetText(string.GetFormattedSeperatorNum(count))


    end

end

local function SetUuid(self,uuid)
    self.uuid = uuid
end
local function UpdateSlider(self)
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local deltaTime =0
    local maxTime =0
    local dialog =Localization:GetString("390228")
    if self.dataInfo.endTime > curTime then
        self.isUpdate =true
        deltaTime = self.dataInfo.endTime - curTime
        maxTime = self.dataInfo.endTime - self.dataInfo.startTime
    else
        self.isUpdate =false
    end
    if self.isUpdate then
        if TimeBarUtil.CheckIsNeedChangeBar(deltaTime,self.lastChangeImageDeltaTime,maxTime,SliderLength) then
            self.lastChangeImageDeltaTime = deltaTime
            local tempValue = 1 - deltaTime / maxTime
            self.slider:SetValue(tempValue)
        end

        if TimeBarUtil.CheckIsNeedChangeText(deltaTime,self.lastChangeTextDeltaTime) then
            self.lastChangeTextDeltaTime = deltaTime
            --self.progress_txt:SetActive(true)
            --self.progress_txt:SetText(dialog)
            self.time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
        end
    else
        --self.progress_txt:SetActive(false)
        self.lastChangeTextDeltaTime =0
        self.lastChangeImageDeltaTime =0
        self.isUpdate = false
        if self.state:GetActive() ==false then
            self.state:SetActive(true)
        end
        if self.sl_Image:GetActive() then
            self.sl_Image:SetActive(false)
            self.slider:SetActive(false)
        end
        if self.helpData then
            self.cancel_btn:SetActive(self.dataInfo.cancel)
        end
    end
end

local function Update(self)
    if self.isUpdate then
        self:UpdateSlider()
    end
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    self._content_rect:RemoveComponents(UIAllianceHeroCell)
    base.OnDisable(self)
end

local function SetAllCellDestroyHero(self)
    self._content_rect:RemoveComponents(UIAllianceHeroCell)
    if next(self.modelHero) then
        for k,v in pairs(self.modelHero) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.modelHero ={}
end

local function OnCancelClick(self)
    --self.view.ctrl:OnRetreatClick(self.uuid)
    local selfUid = LuaEntry.Player.uid
    if self.dataInfo.ownerUid == selfUid then
        if self.dataInfo.attackUid == selfUid then  --自己是队长并且取消组队
            UIUtil.ShowMessage(Localization:GetString("110151",self.dataInfo.ownerName),2,nil,nil, function() self.view.ctrl:OnCancelClick(self.warUuid) end,nil,nil)
        else
            if self.helpData then
                UIUtil.ShowMessage(Localization:GetString("141065",self.dataInfo.ownerName),2,nil,nil, function() self.view.ctrl:OnLevelClick(self.uuid,self.helpData.targetUuid) end,nil,nil)
            else
                UIUtil.ShowMessage(Localization:GetString("141065",self.dataInfo.ownerName),2,nil,nil, function() self.view.ctrl:OnRetreatClicks(self.uuid, self.warUuid) end,nil,nil)
            end
        end
    else
        UIUtil.ShowMessage(Localization:GetString("300515",self.dataInfo.ownerName),2,nil,nil, function() self.view.ctrl:OnRetreatClicks(self.uuid) end,nil,nil)
    end
    
end


AllianceWarPlayerItem.OnCreate = OnCreate
AllianceWarPlayerItem.OnDestroy = OnDestroy
AllianceWarPlayerItem.OnEnable = OnEnable
AllianceWarPlayerItem.OnDisable = OnDisable
AllianceWarPlayerItem.RefreshData = RefreshData
AllianceWarPlayerItem.SetUuid =SetUuid
AllianceWarPlayerItem.UpdateSlider =UpdateSlider
AllianceWarPlayerItem.Update =Update
AllianceWarPlayerItem.OnCancelClick =OnCancelClick
AllianceWarPlayerItem.SetAllCellDestroyHero =SetAllCellDestroyHero
return AllianceWarPlayerItem