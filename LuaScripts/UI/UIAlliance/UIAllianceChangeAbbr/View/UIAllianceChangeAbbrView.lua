---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/11/11 15:24
---
local UIAllianceChangeAbbrView = BaseClass("UIAllianceChangeAbbrView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local title_path = "UICommonMiniPopUpTitle/Bg_mid/titleText"
local des_path = "UICommonMiniPopUpTitle/DesName"
local input_path = "ImgBg/InputField"
local input_default_path = "ImgBg/InputField/Text Area/Placeholder"
local return_btn_path = "UICommonMiniPopUpTitle/panel"
local close_btn_path = "UICommonMiniPopUpTitle/Bg_mid/CloseBtn"
local warn_path = "ImgBg/warnText"
local gray_img_path = "ImgBg/gray"
--local show_gold_obj_path = "ImgBg/Button/ItemImage"
local use_txt_path = "UICommonMiniPopUpTitle/BtnGo/changeBtn/costObj/useText"
local use_btn_path ="UICommonMiniPopUpTitle/BtnGo/changeBtn"
local gold_cost_txt_path ="UICommonMiniPopUpTitle/BtnGo/changeBtn/costObj/itemCount"
local costObj_path = "UICommonMiniPopUpTitle/BtnGo/changeBtn/costObj"
local freeObj_path = "UICommonMiniPopUpTitle/BtnGo/changeBtn/freeObj"

local function OnCreate(self)
    base.OnCreate(self)
    self.title = self:AddComponent(UITextMeshProUGUIEx,title_path)
    self.title:SetLocalText(390288) 
    --self.show_gold_obj = self:AddComponent(UIBaseContainer,show_gold_obj_path)
    --self.set_txt = self:AddComponent(UITextMeshProUGUIEx,set_txt_path)
    --self.set_txt:SetLocalText(130126) 
    self.use_txt = self:AddComponent(UITextMeshProUGUIEx,use_txt_path)
    self.use_txt:SetLocalText(GameDialogDefine.CONFIRM) 
    self.des = self:AddComponent(UITextMeshProUGUIEx,des_path)
    self.des:SetLocalText(390101) 
    self.warn = self:AddComponent(UITextMeshProUGUIEx,warn_path)
    self.warn:SetText("")
    self.gold_txt = self:AddComponent(UITextMeshProUGUIEx, gold_cost_txt_path)
    
    self.gray_image = self:AddComponent(UIImage, gray_img_path)
    self.gray = self.gray_image:GetMaterial()
    self.btn_image = self:AddComponent(UIImage, use_btn_path)
    self.use_btn = self:AddComponent(UIButton, use_btn_path)
    self.use_btn:SetOnClick(function()  
SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnChangeNameClick()
    end)
    self.input = self:AddComponent(UITMPInput,input_path)
    self.input:SetOnValueChange(function (value)
        self:IptOnValueChange(value)
    end)
    self.input_default = self:AddComponent(UITextMeshProUGUIEx, input_default_path)
    self.input_default:SetText("")
    
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    self.costObj = self:AddComponent(UIBaseContainer, costObj_path)
    self.freeObj = self:AddComponent(UITextMeshProUGUIEx, freeObj_path)
    self.freeObj:SetLocalText(130126)
end

local function OnDestroy(self)
    self.title = nil
    self.des = nil
    self.warn = nil
    self.use_txt = nil
    self.des = nil
    self.warn = nil
    self.gray_img = nil
    self.use_btn = nil
    self.input = nil
    self.close_btn = nil
    self.return_btn = nil
    self.inputValue = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:InitButtonState()
end

local function OnDisable(self)
    base.OnDisable(self)
end
local function InitButtonState(self)
    local param = self:GetUserData()
    self.confirmCallBack = param.callback
    self.allianceAbbr = param and param.curAbbr or ""
    local cost = (param and param.cost) and param.cost or 0
    
    --self.isFree = self.ctrl:GetIsFree()
    self.inputValue = self.allianceAbbr
    self.input:SetText(self.allianceAbbr)
    --self.use_txt:SetActive(self.isFree)
    --self.show_gold_obj:SetActive( not self.isFree)
    CS.UIGray.SetGray(self.btn_image.transform, true, false)
    --self.btn_image:SetMaterial(self.gray)
    
    local num = LuaEntry.DataConfig:TryGetStr("alliance_cost", "k2")
    self.gold_txt:SetText(num)
    self.canChange = false

    local isFree = cost == 0
    if isFree then
        self.costObj:SetActive(false)
        self.freeObj:SetActive(true)
        self.btn_image:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_green101"))
        if param and param.btnName then
            self.freeObj:SetLocalText(param.btnName)
        end
    else
        self.costObj:SetActive(true)
        self.freeObj:SetActive(false)
        self.btn_image:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_yellow101"))
    end
    
    self.costObj:SetActive(not isFree)
    self.freeObj:SetActive(isFree)
end
local function IptOnValueChange(self,value)
    self.inputValue = value
    if self.inputValue == self.allianceAbbr and not string.IsNullOrEmpty(self.inputValue) then
        self:CheckNameChangeState(CheckNameType.Unchanged)
    else
        local state = self.ctrl:CheckName(self.inputValue)
        if state == CheckNameType.None then
            self.ctrl:SendCheckNameMessage(self.inputValue)
        else
            self:CheckNameChangeState(state)
        end
    end
end
local function OnChangeNameClick(self)
    if self.canChange then
        if self.confirmCallBack then
            self.confirmCallBack(self.inputValue)
        end
        --self.ctrl:SendChangeNameMessage(self.inputValue)
    end
    self.ctrl:CloseSelf()
end
local function OnCheckNameBack(self,data)
    local state = data
    if state~=nil and state==true then
        self:CheckNameChangeState(CheckNameType.IllegalChar)
    else
        self:CheckNameChangeState(CheckNameType.None)
    end

end
local function CheckNameChangeState(self,type)
    if type == CheckNameType.None then
        CS.UIGray.SetGray(self.btn_image.transform, false, true)
        --self.btn_image:SetMaterial(nil)
       
        self.warn:SetText("")
        self.canChange =true
    else
        self.canChange = false
        CS.UIGray.SetGray(self.btn_image.transform, true, false)
        --self.btn_image:SetMaterial(self.gray)
       
        if type == CheckNameType.MinNameChar or type == CheckNameType.MaxNameChar then
            self.warn:SetLocalText(120193) 
        elseif type == CheckNameType.Exist then
            self.warn:SetLocalText(280038) 
        elseif type == CheckNameType.IllegalChar then
            self.warn:SetLocalText(302016) 
        elseif type == CheckNameType.SensitiveWords then
            self.warn:SetLocalText(280073) 
        elseif type == CheckNameType.Unchanged then
            self.warn:SetText("") 
        else
            self.warn:SetText("")
        end
    end
end
local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.AllianceChangeAbbrSuccess, self.OnCheckNameBack)

end
local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.AllianceChangeAbbrSuccess,self.OnCheckNameBack)
end

UIAllianceChangeAbbrView.OnCreate = OnCreate
UIAllianceChangeAbbrView.OnDestroy = OnDestroy
UIAllianceChangeAbbrView.InitButtonState = InitButtonState
UIAllianceChangeAbbrView.OnEnable = OnEnable
UIAllianceChangeAbbrView.OnDisable = OnDisable
UIAllianceChangeAbbrView.IptOnValueChange = IptOnValueChange
UIAllianceChangeAbbrView.OnChangeNameClick = OnChangeNameClick
UIAllianceChangeAbbrView.OnCheckNameBack = OnCheckNameBack
UIAllianceChangeAbbrView.CheckNameChangeState = CheckNameChangeState
UIAllianceChangeAbbrView.OnAddListener = OnAddListener
UIAllianceChangeAbbrView.OnRemoveListener = OnRemoveListener

return UIAllianceChangeAbbrView