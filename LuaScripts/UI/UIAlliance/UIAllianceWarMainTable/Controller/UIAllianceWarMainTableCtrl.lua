---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/10 18:03
---
local AllianceWarItemShow =
{
    leftName ="",
    rightName ="",
    leftPointId = 0,
    rightPointId=0,
    leftDistance =0,
    isAttack =false,
    cancel = false,
    join =false,
    inTeam =false,
    inMarch = false,
    currentSoldiers =0,
    maxSoldiers =0,
    waitTime =0,
    createTime =0,
    marchTime =0,
    targetUuid = 0,
}
local AllianceWarMemberShow =
{
    ownerName = "",
    leader =false,
    cancel =false,
    status = MarchStatus.DEFAULT,
    endTime =0,
    startTime =0
}
local OneData = DataClass("OneData", AllianceWarItemShow)
local OnePlayerData = DataClass("OnePlayerData", AllianceWarMemberShow)
local UIAllianceWarMainTableCtrl = BaseClass("UIAllianceWarMainTableCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization
local function CloseSelf(self)
    --EventManager:GetInstance():Broadcast(EventId.UIMAIN_VISIBLE, true)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIAllianceWarMainTable, {anim = true})
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function InitData(self)
    SFSNetwork.SendMessage(MsgDefines.GetAllianceWarList,LuaEntry.Player:GetCurServerId())
end

--[[
* @Data:2021/12/14 16:04
* @Description:根据不同类型获取数据
* @param index: int 类型
* @LastModify:zzl
 ]]
--1:个人 2：联盟 3：援助 4火星情报
local function GetAllianceWarIdList(self, index, arrowUuid)
    local list = {}
    if index == 2 then
        --集结不再显示目标为自己的、目标为盟友的
        local data = DataCenter.AllianceWarDataManager:GetAllianceWarIdList()
        for i = 1, #data do
            local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(data[i])
            if (info.targetUid ~= LuaEntry.Player:GetUid() and info.targetAllianceId ~= LuaEntry.Player:GetAllianceUid()) or info.type == AllianceTeamType.ASSISTANCE_THRONE or info.type == AllianceTeamType.ATTACK_THRONE then
                table.insert(list,data[i])
            end
        end
    elseif index == 3 then
        --只援助盟友
        local data = DataCenter.AllianceWarDataManager:GetAllianceWarIdList()
        for i = 1, #data do
            local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(data[i])
            if info.targetAllianceId == LuaEntry.Player:GetAllianceUid() and info.targetUid ~= LuaEntry.Player:GetUid() then
                table.insert(list,data[i])
            end
        end
    end
    
    -- arrowUuid 放到首位
    if arrowUuid ~= nil and table.hasvalue(list, arrowUuid) then
        table.removebyvalue(list, arrowUuid)
        table.insert(list, 1, arrowUuid)
    end
    
    return list
end

local function GetWarItemData(self,uuid)
    local oneData = OneData.New()
    local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    if data~=nil then
        oneData.leftName ="[".. data.attackAllianceAbbr.."]"..data.attackName
        oneData.rightName = data.targetName
        oneData.serverId = data.server
        oneData.leftPointId = data.attackPointId
        oneData.rightPointId = data.targetPointId
        oneData.currentSoldiers= data.currentSoldiers
        oneData.maxSoldiers =  data.maxSoldiers
        oneData.waitTime = data.waitTime
        oneData.marchTime = data.marchTime
        oneData.createTime = data.createTime
        oneData.type = data.type
        oneData.targetUid = data.targetUid
        oneData.targetIcon = data.targetIcon
        oneData.targetIconVer = data.targetIconVer
        oneData.targetHeadBg = data.leaderMarch:GetHeadBgImg()
        oneData.assemblyMarchMax = data.assemblyMarchMax
        oneData.canJoinNum = 1
        oneData.attackUid = data.attackUid
        oneData.attackIcon = data.leaderMarch.ownerIcon
        oneData.ownerIconVer = data.leaderMarch.ownerIconVer
        oneData.ownerHeadBg = data:GetHeadBgImg()
        oneData.targetUuid = data.targetUuid
        oneData.leaderMarchUuid = data.leaderMarch.uuid
        oneData.targetContentId = data.targetContentId
        --计算参与人数，leaderMarch必有一个
        if next(data.memberList) then
            for i, v in pairs(data.memberList) do
                oneData.canJoinNum = oneData.canJoinNum + 1
            end
            oneData.canJoinNum = oneData.canJoinNum
        end
  
        --根据类型判断
        if oneData.type == AllianceTeamType.ATTACK_BOSS then
            local level = DataCenter.MonsterTemplateManager:GetTableValue(oneData.targetUid, "level")
            local name = DataCenter.MonsterTemplateManager:GetTableValue(oneData.targetUid, "name")
            oneData.rightName = Localization:GetString("300665", level)..Localization:GetString(name)
            oneData.rightBossHead = DataCenter.MonsterTemplateManager:GetTableValue(oneData.targetContentId, "rally_pic")   -- 应当以targetContentId作为monsterId，后端如是说
        elseif oneData.type == AllianceTeamType.ATTACK_AL_CITY then
            local name = data.targetName
            if name==nil or name=="" then
                name = GetTableData(TableName.WorldCity, data.targetContentId, 'name')
                name = Localization:GetString(name)
            end
            local lv = GetTableData(TableName.WorldCity, data.targetContentId, 'level')
            oneData.rightName = Localization:GetString("310161", name, lv)
        elseif oneData.type == AllianceTeamType.ATTACK_THRONE then
            local name = data.targetName
            if name==nil or name=="" then
                name = GetTableData(TableName.WorldCity, data.targetContentId, 'name')
                name = Localization:GetString(name)
            end
            local lv = GetTableData(TableName.WorldCity, data.targetContentId, 'level')
            oneData.rightName = Localization:GetString("310161", name, lv)
        elseif oneData.type == AllianceTeamType.ATTACK_AL_BUILD then
            local name =GetTableData(TableName.AllianceMine, data.targetContentId, 'name')
            name = Localization:GetString(name)
            oneData.rightName = name
        elseif oneData.type == AllianceTeamType.ASSISTANCE_THRONE then
            local name = data.targetName
            if name==nil or name=="" then
                name = GetTableData(TableName.WorldCity, data.targetContentId, 'name')
                name = Localization:GetString(name)
            end
            local lv = GetTableData(TableName.WorldCity, data.targetContentId, 'level')
            oneData.rightName = Localization:GetString("310161", name, lv)
        end
        if data.targetAllianceAbbr ~= "" then
            oneData.rightName = "[".. data.targetAllianceAbbr.."]"..oneData.rightName
        end
        local curTime = UITimeManager:GetInstance():GetServerTime()
        oneData.inMarch = (curTime>data.marchTime and curTime>data.waitTime)
		
        local selfAllianceId = LuaEntry.Player.allianceId
        local selfUid = LuaEntry.Player.uid
        oneData.isAttack = (selfAllianceId ~= data.attackAllianceId)   --true为自己或盟友或联盟城被打
        oneData.cancel = (selfUid == data.attackUid)                   --true为自己发起的集结
        oneData.isSelfAttack = (selfUid == data.targetUid)             --true为自己被打
        oneData.rightDistance = 0
        oneData.leftDistance = 0
        
        if oneData.isSelfAttack then
            --自己被打
            local enemyPos = SceneUtils.IndexToTilePos(oneData.leftPointId,ForceChangeScene.World)
            oneData.rightDistance = math.ceil(SceneUtils.TileDistance(enemyPos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
        elseif not oneData.isSelfAttack and data.targetAllianceId == selfAllianceId then
            --盟友被打
            --到盟友距离
            local allyPos = SceneUtils.IndexToTilePos(oneData.rightPointId,ForceChangeScene.World)
            oneData.leftDistance =math.ceil(SceneUtils.TileDistance(allyPos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
            --到敌人距离
            local enemyPos = SceneUtils.IndexToTilePos(oneData.leftPointId,ForceChangeScene.World)
            oneData.rightDistance = math.ceil(SceneUtils.TileDistance(enemyPos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
        elseif oneData.cancel then
            --我发起的集结
            --到敌人距离
            local enemyPos = SceneUtils.IndexToTilePos(oneData.rightPointId,ForceChangeScene.World)
            oneData.rightDistance = math.ceil(SceneUtils.TileDistance(enemyPos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
        elseif not oneData.cancel and not oneData.isAttack then
            --盟友发起的集结
            --到盟友距离
            local allyPos = SceneUtils.IndexToTilePos(oneData.leftPointId,ForceChangeScene.World)
            oneData.leftDistance =math.ceil(SceneUtils.TileDistance(allyPos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
            --到敌人距离
            local enemyPos = SceneUtils.IndexToTilePos(oneData.rightPointId,ForceChangeScene.World)
            oneData.rightDistance = math.ceil(SceneUtils.TileDistance(enemyPos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
        end

        local canJoin =false
        local inTeam =false
        if oneData.cancel ==false and oneData.isAttack==false then
            local count = table.count(data.memberList)
            if count< data.assemblyMarchMax then
                canJoin =true
                table.walk(data.memberList,function (k,v)
                    if v.ownerUid == selfUid then
                        inTeam =true
                        canJoin=false
                    end
                end)
            end
        end
        oneData.waitMemberTime = data.waitMemberTime
        oneData.teamUuid = data.leaderMarch.teamUuid
        oneData.join = canJoin
        oneData.inTeam = inTeam
        oneData.uuid = uuid
        oneData.isAlliance = true
        oneData.marchendTime = data.leaderMarch.endTime     --部队抵达目标结束时间
    end
    return oneData
end

local function OnClickPosBtn(self,pos,isV3,marchUuid,serverId,worldId)
    if pos~=0 then
        self:Close()
        EventManager:GetInstance():Broadcast(EventId.UIMAIN_VISIBLE, true)
        if isV3 then
            GoToUtil.GotoWorldPos(pos, CS.SceneManager.World.InitZoom,LookAtFocusTime,function()
                if marchUuid then
                    CS.SceneManager.World.marchUuid = marchUuid
                    DataCenter.WorldMarchDataManager:TrackMarch(marchUuid)
                    WorldMarchTileUIManager:GetInstance():ShowTroop(marchUuid)
                end
            end,serverId,worldId)
        else
            GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(pos,ForceChangeScene.World), CS.SceneManager.World.InitZoom,LookAtFocusTime,nil,serverId,worldId)
        end
    end
end


--[[
* @Data:2021/12/15 18:37
* @Description:
* @param  param:number时为集结，table时为个人march行为  state：true时为联盟集结  helpOrAttack:true为盟友被打，false为盟友发起集结
* @LastModify:zzl
 ]]
local function OnOpenClick(self,param,state,helpOrAttack)
    --local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    --if data~=nil then
    --    --local curTime = UITimeManager:GetInstance():GetServerTime()
    --    --if curTime>data.marchTime and curTime>data.waitTime and data.leaderMarch~=nil and data.leaderMarch.uuid~=0 then
    --    --    self:Close()
    --    --    WorldMarchTileUIManager:GetInstance():ShowTroop(data.leaderMarch.uuid)
    --    --    --CS.WorldTileUI.ShowTroop(data.leaderMarch.uuid, CS.SceneManager.World);
    --    --else
    --        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceWarDetail,{ anim = true},uuid)
    --    --end
    --end
    
    --为集结
    if type(param) == "number"  then
        local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(param)
        if data~=nil then
            if state then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceWarDetail, { anim = true },param,helpOrAttack)
                if helpOrAttack then
                    --盟友被打时要获取增援信息
                    if data.type == AllianceTeamType.ATTACK_BUILDING then
                        SFSNetwork.SendMessage(MsgDefines.GetNewUserInfo,data.targetUid)
                        SFSNetwork.SendMessage(MsgDefines.AllianceAssistanceInfo,data.targetUuid,AssistanceType.Build)
                    elseif data.type == AllianceTeamType.ATTACK_CITY then
                        SFSNetwork.SendMessage(MsgDefines.GetNewUserInfo,data.targetUid)
                        SFSNetwork.SendMessage(MsgDefines.AllianceAssistanceInfo,data.targetUuid,AssistanceType.MainCity)
                    elseif data.type == AllianceTeamType.ATTACK_AL_CITY then
                        SFSNetwork.SendMessage(MsgDefines.AllianceAssistanceInfo,data.targetUuid,AssistanceType.AllianceCity)
                    end
                end
            else
            end
            return
        end
    end
    local data = nil
    for i, v in pairs(self.personalList) do
        if type(v) ~= "number" then
            if v.ownerFormationUuid == param.ownerFormationUuid then
                data = v
            end
        end
    end
    if data then
     
    end
end

local function OpenAlertInfo(self,param)
    SFSNetwork.SendMessage(MsgDefines.GetAllianceAlertMarch,param.targetUid,param.type,param.content,param.targetUuid,param.server)
end

local function OnJoinClick(self,uuid)
    self:Close()
    local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    if data~=nil then
        local targetType = nil
        if data.type == AllianceTeamType.ATTACK_BOSS then
            targetType = MarchTargetType.RALLY_FOR_BOSS
        elseif data.type == AllianceTeamType.ATTACK_BUILDING then
            targetType = MarchTargetType.RALLY_FOR_BUILDING
        elseif data.type == AllianceTeamType.ATTACK_CITY then
            targetType = MarchTargetType.RALLY_FOR_CITY
        elseif data.type == AllianceTeamType.ASSISTANCE_THRONE then
            targetType = MarchTargetType.RALLY_ASSISTANCE_THRONE
        elseif data.type == AllianceTeamType.ATTACK_THRONE then
            targetType = MarchTargetType.RALLY_THRONE
        end
        --[[if data.type == AllianceTeamType.ATTACK_BOSS and DataCenter.MonsterManager:GetRestKillBossNum()<=0 then
            UIUtil.ShowMessage(Localization:GetString("302009"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                MarchUtil.OnClickStartMarch(MarchTargetType.JOIN_RALLY, data.leaderMarch.startId,uuid,-1,1,targetType)
            end, function()
            end)
        else--]]
        local curServerId = LuaEntry.Player:GetCurServerId()
        if curServerId~=data.server then
            local realServer = data.server
            local startId = data.leaderMarch.startId
            UIUtil.ShowMessage(Localization:GetString("110210",realServer),2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(LuaEntry.Player:GetMainWorldPos()),CS.SceneManager.World.InitZoom,nil,function()
                    MarchUtil.OnClickStartMarch(MarchTargetType.JOIN_RALLY,startId ,uuid,-1,1,targetType,realServer)
                end,realServer)
            end)
        else
            MarchUtil.OnClickStartMarch(MarchTargetType.JOIN_RALLY, data.leaderMarch.startId,uuid,-1,1,targetType)
        end
            
        --end
    end
end

local function OnCancelClick(self,uuid)
    local canDo =false
    local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    if info~=nil then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        canDo = (curTime<=info.marchTime or curTime<=info.waitTime)
        if canDo == false and info.leaderMarch~=nil then
            local marchUuid = info.leaderMarch.uuid
            local marchData = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
            if marchData~=nil and marchData:GetMarchStatus() == MarchStatus.WAIT_THRONE and marchData.inBattle == false then
                canDo = true
            end
        end
    end
    if canDo then
        SFSNetwork.SendMessage(MsgDefines.AllianceWarCancel,uuid)
    else
        UIUtil.ShowTipsId(250157)
    end
end

local function GetInMarchState(self,uuid)
    local inMarch =false
    local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    if info~=nil then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        inMarch = (curTime>info.marchTime and curTime>info.waitTime)
    end
    return inMarch
end

local function OnCloseClick(self)
    self:CloseSelf()
end

--获取总兵力信息(集结)
local function GetAllSoldiersInfo(self,uuid)
    local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    local SoldiersInfo = { }
    local typeNum = {}
    local num = 0
    if info ~= nil then
        if next(info.memberList)then
            local data = info.memberList
            table.walk(data, function(k,v)
                table.walk(v.armyInfos.soldiers, function(i,n)
                    if SoldiersInfo[n.armsId] == nil then
                        SoldiersInfo[n.armsId] = {}
                        SoldiersInfo[n.armsId].num = n.total - n.lost
                        SoldiersInfo[n.armsId].type = n.type
                    else
                        SoldiersInfo[n.armsId].num = SoldiersInfo[n.armsId].num + (n.total - n.lost)
                    end
                end)
            end)
        end
        if next(info.leaderMarch) then
            local data = info.leaderMarch
            if data.armyInfo ~= nil then
                local soldiers = data.armyInfo.soldiers
                table.walk(soldiers, function(k,v)
                    if SoldiersInfo[v.armsId] == nil then
                        SoldiersInfo[v.armsId] ={}
                        SoldiersInfo[v.armsId].num = v.total - v.lost
                        SoldiersInfo[v.armsId].type = v.type
                    else
                        SoldiersInfo[v.armsId].num = SoldiersInfo[v.armsId].num + (v.total - v.lost)
                    end
                end)
            end
        end
    end
    if next(SoldiersInfo) then
        table.walk(SoldiersInfo, function(k,v)
            if typeNum[v.type] == nil then
                typeNum[v.type] = v.num
                num = num + v.num
            else
                typeNum[v.type] = typeNum[v.type] + v.num
                num = num + typeNum[v.type]
            end
        end)
    end
    return typeNum
end

--是否拥有我的部队
local function IsHaveMeMarch(self,uuid)
    local list = {}
    local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
    if #selfMarch > 0 then
        for i = 1, #selfMarch do
            local march = selfMarch[i]
            table.insert(list,march.uuid)
        end
    end
    if info ~= nil then
        for i, v in pairs(info.memberList) do
            for k = 1, #list do
                if i == list[k] then
                    return i
                end
            end
        end
    end
    return 0
end

--退出组队
local function OnRetreatClick(self,uuid,marchUuid)
    local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    if marchUuid ~= 0 then
        if info~=nil and info.memberList[marchUuid]~=nil then
            local data  = info.memberList[marchUuid]
            SFSNetwork.SendMessage(MsgDefines.AllianceWarRetreat,data.teamUuid,marchUuid)
        end
    end
end

local function OnLeftPlayerInfoClick(self,userUid)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIOtherPlayerInfo, userUid)
end

local function GetPlayerItemData(self,warUuid,marchUuid,helpData)
    local oneData = OnePlayerData.New()
    local info
    if helpData then
        info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(helpData.targetUuid)
    else
        info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(warUuid)
    end
    local selfUid = LuaEntry.Player.uid
    if info~=nil then
        local abbr = info.attackAllianceAbbr
        if info.memberList[marchUuid]~=nil then
            local data  = info.memberList[marchUuid]
            oneData.ownerName = data.ownerName
            oneData.status = data.status
            oneData.endTime = data.endTime
            oneData.startTime =data.startTime
            oneData.leader = false
            oneData.cancel = (data.ownerUid == selfUid or info.attackUid == selfUid)
            oneData.ownerUid = data.ownerUid
            oneData.teamUuid = data.teamUuid
            oneData.attackUid = info.attackUid
            oneData.ownerIcon = data.ownerIcon
            oneData.ownerIconVer = data.ownerIconVer
            oneData.headBg = data:GetHeadBgImg()
            oneData.abbr = abbr
        elseif info.leaderMarch~=nil and info.leaderMarch.uuid == marchUuid then
            local data  = info.leaderMarch
            oneData.ownerName = data.ownerName
            oneData.status = data.status
            oneData.endTime = data.endTime
            oneData.startTime =data.startTime
            oneData.leader = true
            oneData.cancel = data.ownerUid == selfUid
            oneData.ownerUid = data.ownerUid
            oneData.teamUuid = data.teamUuid
            oneData.attackUid = info.attackUid
            oneData.ownerIcon = data.ownerIcon
            oneData.ownerIconVer = data.ownerIconVer
            oneData.abbr = abbr
            oneData.headBg = data:GetHeadBgImg()
        end
    end
    return oneData
end

--获取玩家出兵信息
local function GetPlayerSoldierData(self,warUuid,marchUuid,helpData)
    local info
    if helpData then
        info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(helpData.targetUuid)
    else
        info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(warUuid)
    end
    local showList = {}
    if info ~= nil then
        --所参与人员
        if next(info.memberList) and info.memberList[marchUuid] then
            local data = info.memberList[marchUuid].armyInfos
            local heros = data.heros
            showList.heros = {}
            for i = 1, #heros do
                showList.heros[i] = {}
                showList.heros[i].heroId = heros[i].heroId
                showList.heros[i].quality = heros[i].heroQuality
                showList.heros[i].lv = heros[i].heroLevel
                showList.heros[i].rankLv = heros[i].rankLv
                showList.heros[i].stage = heros[i].stage
                showList.heros[i].skillInfos = heros[i].skillInfos
                showList.heros[i].rankId = 1
                showList.heros[i].camp = HeroUtils.GetCamp(heros[i])
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heros[i].heroId)
                if config == nil then
                    Logger.LogError('hero config not found! heroId:' .. heros[i].heroId)
                    return
                end
                local maxMilitaryRankId = config['max_rank_level'] or 1
                for rankId = 1, maxMilitaryRankId do
                    local mailLevel = GetTableData(TableName.HeroMilitaryRank, rankId, 'level')
                    --local mailStage = GetTableData(TableName.HeroMilitaryRank, rankId, 'stage')
                    if  heros[i].rankLv == mailLevel then
                        showList.heros[i].rankId = rankId
                        break
                    end
                end
            end
            local soldiers = data.soldiers
            showList.soldiers = {}
            for i = 1, #soldiers do
                showList.soldiers[i] = {}
                showList.soldiers[i].armsId = soldiers[i].armsId
                showList.soldiers[i].type = soldiers[i].type
                showList.soldiers[i].data = DataCenter.ArmyTemplateManager:GetArmyTemplate(soldiers[i].armsId)
                showList.soldiers[i].count = soldiers[i].total - soldiers[i].lost
            end
        elseif next(info.leaderMarch) and info.leaderMarch.uuid == marchUuid then
            --队长信息
            local data = info.leaderMarch
            if data.armyInfo ~= nil then
                local heros = data.armyInfo.heros
                showList.heros = {}
                for i = 1, #heros do
                    showList.heros[i] = {}
                    showList.heros[i].heroId = heros[i].heroId
                    showList.heros[i].quality = heros[i].heroQuality
                    showList.heros[i].lv = heros[i].heroLevel
                    showList.heros[i].rankLv = heros[i].rankLv
                    showList.heros[i].stage = heros[i].stage
                    showList.heros[i].skillInfos = heros[i].skillInfos
                    showList.heros[i].rankId = 1
                    showList.heros[i].camp = HeroUtils.GetCamp(heros[i])
                    local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heros[i].heroId)
                    if config == nil then
                        Logger.LogError('hero config not found! heroId:' .. heros[i].heroId)
                        return
                    end
                    local maxMilitaryRankId = config['max_rank_level'] or 1
                    for rankId = 1, maxMilitaryRankId do
                        local mailLevel = GetTableData(TableName.HeroMilitaryRank, rankId, 'level')
                        --local mailStage = GetTableData(TableName.HeroMilitaryRank, rankId, 'stage')
                        if  heros[i].rankLv == mailLevel then
                            showList.heros[i].rankId = rankId
                            break
                        end
                    end
                end
                local soldiers = data.armyInfo.soldiers
                showList.soldiers = {}
                for i = 1, #soldiers do
                    showList.soldiers[i] = {}
                    showList.soldiers[i].armsId = soldiers[i].armsId
                    showList.soldiers[i].type = soldiers[i].type
                    showList.soldiers[i].data = DataCenter.ArmyTemplateManager:GetArmyTemplate(soldiers[i].armsId)
                    showList.soldiers[i].count = soldiers[i].total - soldiers[i].lost
                end
            end
        end
    end
    return showList
end

local function GetPlayerIdList(self,warUuid)
    local list ={}
    local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(warUuid)
    if info~=nil then
        if info.leaderMarch~=nil then
            table.insert(list,info.leaderMarch.uuid)
        end
        table.insertto(list,table.keys(info.memberList))
    end
    return list
end

--离开队伍
function UIAllianceWarMainTableCtrl:OnRetreatClicks(marchUuid, uuid)
    local info = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(uuid)
    if marchUuid ~= 0 then
        if info~=nil and info.memberList[marchUuid]~=nil then
            local data  = info.memberList[marchUuid]
            SFSNetwork.SendMessage(MsgDefines.AllianceWarRetreat,data.teamUuid,marchUuid)
        end
    end
end

UIAllianceWarMainTableCtrl.CloseSelf =CloseSelf
UIAllianceWarMainTableCtrl.Close =Close
UIAllianceWarMainTableCtrl.GetAllianceWarIdList =GetAllianceWarIdList
UIAllianceWarMainTableCtrl.GetPlayerItemData =GetPlayerItemData
UIAllianceWarMainTableCtrl.InitData =InitData
UIAllianceWarMainTableCtrl.GetWarItemData =GetWarItemData
UIAllianceWarMainTableCtrl.OnClickPosBtn =OnClickPosBtn
UIAllianceWarMainTableCtrl.OnOpenClick =OnOpenClick
UIAllianceWarMainTableCtrl.OpenAlertInfo = OpenAlertInfo
UIAllianceWarMainTableCtrl.OnJoinClick =OnJoinClick
UIAllianceWarMainTableCtrl.OnCancelClick =OnCancelClick
UIAllianceWarMainTableCtrl.GetInMarchState =GetInMarchState
UIAllianceWarMainTableCtrl.OnCloseClick = OnCloseClick
UIAllianceWarMainTableCtrl.GetAllSoldiersInfo = GetAllSoldiersInfo
UIAllianceWarMainTableCtrl.OnRetreatClick = OnRetreatClick
UIAllianceWarMainTableCtrl.IsHaveMeMarch = IsHaveMeMarch
UIAllianceWarMainTableCtrl.OnLeftPlayerInfoClick = OnLeftPlayerInfoClick
UIAllianceWarMainTableCtrl.GetPlayerSoldierData =GetPlayerSoldierData
UIAllianceWarMainTableCtrl.GetPlayerIdList =GetPlayerIdList
return UIAllianceWarMainTableCtrl
