---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/10 18:02
---
local AllianceWarItem = require "UI.UIAlliance.UIAllianceWarMainTable.Component.AllianceWarItem"
local AllyView = require "UI.UIAlliance.UIAllianceWarMainTable.Component.AllyView"
local AttackerView = require "UI.UIAlliance.UIAllianceWarMainTable.Component.AttackerView"
local UIAllianceWarMainTableView = BaseClass("UIAllianceWarMainTableView",UIBaseView)
local base = UIBaseView
local txt_title_path ="UICommonFullTop/imgTitle/Common_img_title/titleText"
local close_btn_path = "UICommonFullTop/CloseBtn"
local scrollView_alliance_path = "root/AllianceScrollView"
local content_alliance_path = "root/AllianceScrollView/Viewport/Content"
local contentBg_path =  "root/ImageBg"
local contentTxt_path =  "root/ImageBg/TxtContect"
local autoRallyBtn_path = "root/autoRallyBtn"
local autoRallyText_path = "root/autoRallyBtn/btnText"
local autoRallyBg_path = "root/autoRallyBtn/txtBg"
local autoRallyName_path = "root/autoRallyBtn/txtBg/autoRallyTxt"
local autoRallyTime_path = "root/autoRallyBtn/txtBg/autoRallyLeftTime"
local autoRallyRed_path = "root/autoRallyBtn/autoRallyRed"
local AllyScrollView = "root/AllyScrollView"
local toggle_path = "root/Tab/Toggle%s"
local attacker_path = "root/attackerObj"
local BtnType = 
{
    Attacker = 1,
    Team = 2,
    Alliance = 3,
}

local function OnCreate(self)
    base.OnCreate(self)
    SFSNetwork.SendMessage(MsgDefines.GetAllianceAutoJoinRallyInfo)
    self.curType, self.arrowUuid = self:GetUserData()
    DataCenter.AllianceWarDataManager:SetAllAllianceWarOld()
    if self.curType == nil then
        if DataCenter.WorldNewsDataManager:GetShowAttackerRedPot() then
            self.curType = BtnType.Attacker
        else
            self.curType = BtnType.Alliance
        end
    end
    self.title = self:AddComponent(UITextMeshProUGUIEx,txt_title_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function() 
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:OnCloseClick()
    end)
    self._scrollView_alliance = self:AddComponent(UIBaseContainer,scrollView_alliance_path)
    self._alliance_content = self:AddComponent(UIBaseContainer, content_alliance_path)
    
    
    self.contentBg =  self:AddComponent(UITextMeshProUGUIEx,contentBg_path)
    self.contentTxt =  self:AddComponent(UITextMeshProUGUIEx,contentTxt_path)

    self.toggle = {}
    for k,v in pairs(BtnType) do
        local toggle = self:AddComponent(UIToggle, string.format(toggle_path, v))
        if toggle ~= nil then
            if v == self.curType then
                toggle:SetIsOn(true)
            else
                toggle:SetIsOn(false)
            end
            
            toggle:SetOnValueChanged(function(tf)
                if tf then
                    self:ToggleControlBorS(v)
                end
            end)
            toggle.choose = toggle:AddComponent(UIBaseContainer, "Background/Checkmark")
            toggle.redPoint = toggle:AddComponent(UIBaseContainer, "RedPointNum")
            toggle.unselectName = toggle:AddComponent(UITextMeshProUGUIEx, "text")
            toggle.selectName = toggle:AddComponent(UITextMeshProUGUIEx, "checkText") 
            if v == BtnType.Team then
                toggle.unselectName:SetLocalText(300038)
                toggle.selectName:SetLocalText(300038)
            elseif v == BtnType.Alliance then
                toggle.unselectName:SetLocalText(302338)
                toggle.selectName:SetLocalText(302338)
            elseif v == BtnType.Attacker then
                toggle.unselectName:SetLocalText(104323)
                toggle.selectName:SetLocalText(104323)
            end
            self.toggle[v] = toggle
        end
    end
    
    self.autoRallyBg = self:AddComponent(UIBaseContainer, autoRallyBg_path)
    self.autoRallyText = self:AddComponent(UITextMeshProUGUIEx, autoRallyText_path)
    self.autoRallyText:SetLocalText(143565)
    self.autoRallyBtnN = self:AddComponent(UIButton, autoRallyBtn_path)
    self.autoRallyBtnN:SetOnClick(function()
        self:OnClickAutoRallyBtn()
    end)
    self.autoRallyNameN = self:AddComponent(UITextMeshProUGUIEx, autoRallyName_path)
    self.autoRallyNameN:SetLocalText(143565)
    self.autoRallyTimeN = self:AddComponent(UITextMeshProUGUIEx, autoRallyTime_path)
    self.autoRallyRedN = self:AddComponent(UIBaseContainer, autoRallyRed_path)
    
    self._allyView = self:AddComponent(AllyView,AllyScrollView)
    self.attacker = self:AddComponent(AttackerView, attacker_path)
end

local function OnDestroy(self)
    self:DelTimer()
    self:ClearScroll()
    self.type = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:OnRefreshMainRedPot()
    self:ToggleControlBorS(self.curType)
end

local function OnDisable(self)
    base.OnDisable(self)
    self:ClearScroll()
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.AllianceWarUpdate, self.OnRefreshAlliance)
    self:AddUIListener(EventId.ALLIANCE_WAR_DELETE, self.OnRefreshAlliance)
    self:AddUIListener(EventId.MarchItemTargetMeUpdate, self.OnRefreshAlliance) --MarchItemTargetMeUpdate  UpdateMarchItem
    self:AddUIListener(EventId.AllianceQuitOK, self.AllianceQuit)
    self:AddUIListener(EventId.NoticeMainViewUpdateMarch, self.OnRefreshAlliance)
    self:AddUIListener(EventId.UpdateAlertData, self.OnRefreshAlliance)
    self:AddUIListener(EventId.UpdateAllianceAutoRallyInfo, self.RefreshAutoRally)
    self:AddUIListener(EventId.AttackerInfoUpdate, self.OnRefreshMainRedPot)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.AllianceWarUpdate,self.OnRefreshAlliance)
    self:RemoveUIListener(EventId.ALLIANCE_WAR_DELETE,self.OnRefreshAlliance)
    self:RemoveUIListener(EventId.MarchItemTargetMeUpdate, self.OnRefreshAlliance)
    self:RemoveUIListener(EventId.AllianceQuitOK, self.AllianceQuit)
    self:RemoveUIListener(EventId.NoticeMainViewUpdateMarch, self.OnRefreshAlliance)
    self:RemoveUIListener(EventId.UpdateAlertData, self.OnRefreshAlliance)
    self:RemoveUIListener(EventId.UpdateAllianceAutoRallyInfo, self.RefreshAutoRally)
    self:RemoveUIListener(EventId.AttackerInfoUpdate, self.OnRefreshMainRedPot)
end

local function ClearScroll(self)
    if self._alliance_content then
        self._alliance_content:RemoveComponents(AllianceWarItem)
    end
    if self.model~=nil and next(self.model) then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.model ={}
    self.warList = {}
end


local function AllianceQuit(self)
    self.ctrl:CloseSelf()
end

--1：个人 2：联盟 3：援助
local function OnRefreshAlliance(self,state)
    self.AllianceAlertIdList = {}
    if self.curType == BtnType.Team then
        self._scrollView_alliance:SetActive(true)
        self.attacker:SetActive(false)
        self._allyView:SetActive(false)
        self.list = self.ctrl:GetAllianceWarIdList(self.curType, self.arrowUuid)
        self:ClearScroll()
        if #self.list>0 then
            for i = 1,#self.list do
                self.model[i] = self:GameObjectInstantiateAsync(UIAssets.AllianceWarItem, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject;
                    go:SetActive(true)
                    go.transform:SetParent(self._alliance_content.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go.name = "item"..i
                    local cell = self._alliance_content:AddComponent(AllianceWarItem,go.name)
                    cell:SetUuid(self.list[i])
                    cell:RefreshData()
                    self.warList[self.list[i]] = cell
                end)
            end
        end
        self.contentBg:SetActive( not next(self.list) and not next(self.AllianceAlertIdList))
    elseif self.curType == BtnType.Alliance then
        self._scrollView_alliance:SetActive(false)
        self.attacker:SetActive(false)
        self._allyView:SetActive(true)
        self.list = self.ctrl:GetAllianceWarIdList(self.curType, self.arrowUuid)
        self.AllianceAlertIdList =  DataCenter.AllianceAlertDataManager:GetAllianceAlertByIdList()
        if #self.list > 0 or #self.AllianceAlertIdList > 0 then
            self._allyView:CreateList(self.curType)
        else
            self._allyView:Clear()
        end
        self.contentBg:SetActive( not next(self.list) and not next(self.AllianceAlertIdList))
    elseif self.curType == BtnType.Attacker then
        self._scrollView_alliance:SetActive(false)
        self._allyView:SetActive(false)
        self.attacker:SetActive(true)
        self.attacker:InitData()
        
    end
end



local function OnRefreshMainRedPot(self)
    self.isList = false
    for k, v in pairs(self.toggle) do
        if k == BtnType.Attacker then
            v.redPoint:SetActive(DataCenter.WorldNewsDataManager:GetShowAttackerRedPot())
        else
            v.redPoint:SetActive(false)
        end
    end
end

local function ToggleControlBorS(self,index)
    self.curType = index
    self.ctrl:InitData()
    self:ClearScroll()
    --self:OnRefreshAlliance()
    for k,v in pairs(self.toggle) do
        if k == index then
            v.choose:SetActive(true)
            v.unselectName:SetActive(false)
            v.selectName:SetActive(true)
            v:SetIsOn(true)
            if k == BtnType.Team then
                self.title:SetLocalText(395415)
                self.contentTxt:SetLocalText(128028)
                if LuaEntry.DataConfig:CheckSwitch("world_auto_join") then
                    self.autoRallyBtnN:SetActive(true)
                    self:RefreshAutoRally()
                else
                    self.autoRallyBtnN:SetActive(false)
                end
            elseif k == BtnType.Alliance then
                self.title:SetLocalText(390164)
                self.contentTxt:SetLocalText(141028)
                self.autoRallyBtnN:SetActive(false)
            elseif k == BtnType.Attacker then
                self.title:SetLocalText(104322)
                self.contentTxt:SetLocalText(450057)
                self.autoRallyBtnN:SetActive(false)
            end
        else
            v.choose:SetActive(false)
            v.unselectName:SetActive(true)
            v.selectName:SetActive(false)
        end
    end
end

local function RefreshAutoRally(self)
    local autoInfo = DataCenter.AllianceBaseDataManager:GetAutoRallyInfo()
    if autoInfo and autoInfo.endTime then
        local serverTime = UITimeManager:GetInstance():GetServerTime()
        self.autoRallyEndTime = autoInfo.endTime
        if serverTime < autoInfo.endTime then
            self:AddTimer()
            self:SetRemainTime()
        else
            self:DelTimer()
            self:SetRemainTime()
        end
    end
    local redCount = DataCenter.AllianceBaseDataManager:CheckIfShowAutoRallyRed()
    self.autoRallyRedN:SetActive(redCount and redCount > 0)
end


local function AddTimer(self)
    self.TimerAction = function()
        self:SetRemainTime()
    end

    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction , self, false,false,false)
    end
    self.timer:Start()
end

local function SetRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.autoRallyEndTime - curTime
    if remainTime > 0 then
        self.autoRallyBg:SetActive(true)
        self.autoRallyText:SetActive(false)
        self.autoRallyTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.autoRallyText:SetActive(true)
        self.autoRallyBg:SetActive(false)
        self.autoRallyTimeN:SetText("")
        self:DelTimer()
    end
end

local function DelTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnClickAutoRallyBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceAutoJoinRally,{anim= true,isBlur = true})
end


function UIAllianceWarMainTableView:RefreshAttackEmpty(active)
    self.contentBg:SetActive(active)
end


UIAllianceWarMainTableView.OnCreate = OnCreate
UIAllianceWarMainTableView.OnDestroy = OnDestroy
UIAllianceWarMainTableView.OnEnable = OnEnable
UIAllianceWarMainTableView.OnDisable = OnDisable
UIAllianceWarMainTableView.OnAddListener = OnAddListener
UIAllianceWarMainTableView.OnRemoveListener = OnRemoveListener
UIAllianceWarMainTableView.AllianceQuit = AllianceQuit
UIAllianceWarMainTableView.ClearScroll = ClearScroll
UIAllianceWarMainTableView.OnRefreshAlliance = OnRefreshAlliance
UIAllianceWarMainTableView.OnRefreshMainRedPot = OnRefreshMainRedPot
UIAllianceWarMainTableView.ToggleControlBorS = ToggleControlBorS
UIAllianceWarMainTableView.OnClickAutoRallyBtn = OnClickAutoRallyBtn
UIAllianceWarMainTableView.RefreshAutoRally = RefreshAutoRally
UIAllianceWarMainTableView.AddTimer = AddTimer
UIAllianceWarMainTableView.DelTimer = DelTimer
UIAllianceWarMainTableView.SetRemainTime = SetRemainTime
return UIAllianceWarMainTableView