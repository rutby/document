---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/7/28 21:12
---
local AllianceFunItem = BaseClass("AllianceFunItem",UIBaseContainer)
local base = UIBaseContainer

local img_path = "iconBg/icon"
local red_pot_path ="ImgWarn"
local red_pot_txt_path = "ImgWarn/TxtNum"
local name_path = "name"
local btn_path = "iconBg"
local countDown_path = "countDown"
local countDownTip_path = "countDown/tipTxt"
local countDownTxt_path = "countDown/timeTxt"
local function OnCreate(self,data)

    base.OnCreate(self)
    self.itemData = data
    self.name = self:AddComponent(UITextMeshProUGUIEx,name_path)
    self.img = self:AddComponent(UIImage,img_path)
    self.red_pot = self:AddComponent(UIBaseContainer,red_pot_path)
    self.red_pot_txt = self:AddComponent(UITextMeshProUGUIEx,red_pot_txt_path)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.btn:SetOnClick(function()  
SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClick()
    end)
    self.name:SetText(self.itemData.name)

    self.img:LoadSprite(self.itemData.pic)
    
    self.countDown = self:AddComponent(UIBaseContainer, countDown_path)
    self.countDownTip = self:AddComponent(UITextMeshProUGUIEx, countDownTip_path)
    --self.countDownTip:SetLocalText(390924)
    self.countDownTxt = self:AddComponent(UITextMeshProUGUIEx, countDownTxt_path)
    self:RefreshUI()
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end
local function OnDestroy(self)
    self:DelTimer()
    self.itemData = nil
    self.name = nil
    self.img = nil
    self.red_pot_txt = nil
    self.red_pot = nil
    self.btn = nil
    base.OnDestroy(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.AlSysStateChange, self.RefreshUI)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.AlSysStateChange, self.RefreshUI)
end

local function RefreshUI(self)
    self:SetActive(true)
    --不显示倒计时了~
    --if self.itemData.type == AllianceButtonType.AllianceTask then
    --    self.countDown:SetActive(true)
    --    local isOpen, endT = DataCenter.AllianceTaskManager:CheckIfAllianceTaskOpen()
    --    if isOpen then
    --        self.endTime = endT
    --        self:SetRemainTime()
    --        self:AddTimer()
    --    else
    --        self:SetActive(false)
    --    end
    --else
    --    self.countDown:SetActive(false)
    --end
    
    self.countDown:SetActive(false)

    -- 这一版只显示联盟帮助
    if self.itemData.type == AllianceButtonType.AllianceHelp or self.itemData.type == AllianceButtonType.AllianceBattle 
            or self.itemData.type == AllianceButtonType.AllianceScience or self.itemData.type == AllianceButtonType.AllianceGift
            or self.itemData.type == AllianceButtonType.AllianceShop or self.itemData.type == AllianceButtonType.AllianceCity then
        if self.itemData.type == AllianceButtonType.AllianceBattle then
            local canUnlock,lock_tips = SceneUtils.CheckIsWorldUnlock()
            if canUnlock ==false then
                CS.UIGray.SetGray(self.btn.transform, true, false)
                return
            end
        end
        CS.UIGray.SetGray(self.btn.transform, false, true)
    else
        CS.UIGray.SetGray(self.btn.transform, true, false)
    end
end

local function OnRefreshRedPot(self,type)
    -- 这一版只显示联盟帮助
    if self.itemData.type ~= AllianceButtonType.AllianceHelp and self.itemData.type ~= AllianceButtonType.AllianceBattle
            and self.itemData.type ~= AllianceButtonType.AllianceGift and self.itemData.type ~= AllianceButtonType.AllianceScience then
        self.red_pot:SetActive(false)
    else
        local count = self.view.ctrl:GetRedPotCount(type)
        if count>0 then
            self.red_pot:SetActive(true)
            if type == AllianceButtonType.AllianceBattle then
                local canUnlock,lock_tips = SceneUtils.CheckIsWorldUnlock()
                if canUnlock ==false then
                    self.red_pot:SetActive(false)
                    return
                end
                self.red_pot_txt:SetText("")
            else
                self.red_pot_txt:SetText(count)
            end
        else
            self.red_pot:SetActive(false)
        end
    end
end

local function AddTimer(self)
    self.TimerAction = function()
        self:SetRemainTime()
    end

    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction , self, false,false,false)
    end
    self.timer:Start()
end

local function SetRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime > 0 then
        self.countDownTxt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self:RefreshUI()
        --self:DelTimer()
        --self:SetActive(false)
    end
end

local function DelTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnClick(self)
    if self.itemData.type == AllianceButtonType.AllianceCity then
        self:OnRefreshRedPot(AllianceButtonType.AllianceCity)
        --if DataCenter.AllianceMineManager:GetShowRedDotNum() ==false then
        --    self.red_pot:SetActive(false)
        --end
    end
    self.view.ctrl:OnGotoClick(self.itemData.type)
end

AllianceFunItem.OnCreate= OnCreate
AllianceFunItem.OnDestroy = OnDestroy
AllianceFunItem.OnRefreshRedPot = OnRefreshRedPot
AllianceFunItem.OnEnable = OnEnable
AllianceFunItem.OnDisable = OnDisable
AllianceFunItem.AddTimer = AddTimer
AllianceFunItem.SetRemainTime = SetRemainTime
AllianceFunItem.DelTimer = DelTimer
AllianceFunItem.RefreshUI = RefreshUI
AllianceFunItem.OnAddListener = OnAddListener
AllianceFunItem.OnRemoveListener = OnRemoveListener
AllianceFunItem.OnClick = OnClick
return AllianceFunItem