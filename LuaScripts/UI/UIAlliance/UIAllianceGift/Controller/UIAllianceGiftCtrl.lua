---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/9/8 18:36
---
local AllianceGiftDataShow =
{
    curLevel =1,
    curExp =0,
    maxExp =1,
    list ={}
}
local OneData = DataClass("OneData", AllianceGiftDataShow)
local UIAllianceGiftCtrl = BaseClass("UIAllianceGiftCtrl", UIBaseCtrl)

local Localization = CS.GameEntry.Localization

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIAllianceGift, {anim = true})
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function InitData(self)
    SFSNetwork.SendMessage(MsgDefines.AllianceGiftList,0,1000)
end

local function GetAllianceGiftData(self,type)
    local oneData = OneData.New()
    oneData.curLevel = DataCenter.AllianceGiftDataManager:GetCurLevel()
    oneData.curExp = DataCenter.AllianceGiftDataManager:GetCurExp()
    oneData.maxExp = DataCenter.AllianceGiftDataManager:GetMaxExp()
    local list = DataCenter.AllianceGiftDataManager:GetGiftInfoList()
    if list ~=nil then
        table.walk(list,function (k,v)
            local tempGiftType = GetTableData(TableName.AllianceGiftGroup,v.groupId, "type")
            local iGiftType = tonumber(tempGiftType)
            if iGiftType == type then
                local temp ={}
                temp.uuid = v.uuid
                temp.type = type
                local nameDialog = GetTableData(TableName.AllianceGiftGroup,v.groupId, "name")
                temp.name = Localization:GetString(nameDialog)
                local giftType = GetTableData(TableName.AllianceGiftGroup,v.groupId, "type")
                if v.fromMsg ~= nil then
                    if v.fromMsg.fromType == "monster" then
                        local monsterName = Localization:GetString(v.fromMsg.name)
                        temp.name = Localization:GetString(nameDialog, v.fromMsg.level)
                    end
                    if type == 1 and v.fromMsg.fromType == "exchange" then
                        temp.fromPackage = v.fromMsg.name
                    end
                end
                local colorStr = GetTableData(TableName.AllianceGiftGroup,v.groupId, "color")
                if colorStr~=nil and colorStr~="" then
                    temp.bg= DataCenter.ItemTemplateManager:GetToolBgByColor(tonumber(colorStr))
                end
                temp.icon = GetTableData(TableName.AllianceGiftGroup,v.groupId, "icon")
                temp.endTime = v.expirationTime
                temp.receiveState = v.receiveState
                temp.receiveTime = v.receiveTime
                temp.userName = v.userName
                temp.groupId = v.groupId
                temp.reward = v.reward
                temp.keyExp = v.keyExp
                temp.eachExp = v.eachExp
                temp.createTime = v.createTime
                
                table.insert(oneData.list,temp)
            end
        end)
    end
    return oneData
end

local function GetOneGiftInfo(self, uuid)
    local tempGift = DataCenter.AllianceGiftDataManager:GetGiftDataByUuid(uuid)
    if not tempGift then
        return
    end
    local temp ={}
    temp.uuid = tempGift.uuid
    local nameDialog = GetTableData(TableName.AllianceGiftGroup,tempGift.groupId, "name")
    temp.name = Localization:GetString(nameDialog)
    local giftType = GetTableData(TableName.AllianceGiftGroup,tempGift.groupId, "type")
    if tempGift.fromMsg ~= nil then
        if tempGift.fromMsg.fromType == "monster" then
            local monsterName = Localization:GetString(tempGift.fromMsg.name)
            temp.name = Localization:GetString(nameDialog, tempGift.fromMsg.level)
        end
        if giftType == 1 and tempGift.fromMsg.fromType == "exchange" then
            temp.fromPackage = tempGift.fromMsg.name
        end
    end
    local colorStr = GetTableData(TableName.AllianceGiftGroup,tempGift.groupId, "color")
    if colorStr~=nil and colorStr~="" then
        temp.bg= DataCenter.ItemTemplateManager:GetToolBgByColor(tonumber(colorStr))
    end
    temp.icon = GetTableData(TableName.AllianceGiftGroup,tempGift.groupId, "icon")
    temp.endTime = tempGift.expirationTime
    temp.receiveState = tempGift.receiveState
    temp.receiveTime = tempGift.receiveTime
    temp.userName = tempGift.userName
    temp.groupId = tempGift.groupId
    temp.reward = tempGift.reward
    temp.keyExp = tempGift.keyExp
    temp.eachExp = tempGift.eachExp
    temp.createTime = tempGift.createTime
    
    return temp
end

local function OnOpenClick(self,uuid)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceGiftInfo,{anim = true},uuid)
end
local function OnGetClick(self,uuid)
    DataCenter.AllianceGiftDataManager:SetGiftReceive(uuid)
    SFSNetwork.SendMessage(MsgDefines.AllianceGiftGetReward,uuid,0)
end

local function OnDelAllBtnClick(self,type)
    DataCenter.AllianceGiftDataManager:RemoveAllReceiveGift(type)
    SFSNetwork.SendMessage(MsgDefines.AllianceAllGiftRemove,type)
    EventManager:GetInstance():Broadcast(EventId.RefreshAllianceGift)
end

local function OnRemoveClick(self,uuid)
    DataCenter.AllianceGiftDataManager:RemoveAllianceGiftData(uuid)
    SFSNetwork.SendMessage(MsgDefines.AllianceGiftRemove,uuid)
    EventManager:GetInstance():Broadcast(EventId.RefreshAllianceGift)
end

local function OnGetAllBtnClick(self,type)
    DataCenter.AllianceGiftDataManager:SetAllGiftReceiveByType(type)
    SFSNetwork.SendMessage(MsgDefines.AllianceReceiveAllGift,type)
end

local function SetNoName(self,state)
    if state then
        SFSNetwork.SendMessage(MsgDefines.AllianceRewardHideName,1)
    else
        SFSNetwork.SendMessage(MsgDefines.AllianceRewardHideName,0)
    end
end

local function GetSpecialBoxIcon(self, giftData)
    local activityIds = LuaEntry.DataConfig:TryGetStr("alliancebox", "k1")
    local specialPics = LuaEntry.DataConfig:TryGetStr("alliancebox", "k3")
    local activityIdTb = string.split(activityIds, ";")
    local specialPicTb = string.split(specialPics, ";")
    for i, v in ipairs(activityIdTb) do
        local actInfo = DataCenter.ActivityListDataManager:GetActivityDataById(v)
        if actInfo and giftData.createTime then
            if giftData.createTime >= actInfo.startTime and giftData.createTime <= actInfo.endTime then
                return string.format(LoadPath.ItemPath, specialPicTb[i])
            end
        end
    end
end

UIAllianceGiftCtrl.CloseSelf =CloseSelf
UIAllianceGiftCtrl.Close =Close
UIAllianceGiftCtrl.GetAllianceGiftData =GetAllianceGiftData
UIAllianceGiftCtrl.InitData =InitData
UIAllianceGiftCtrl.OnOpenClick =OnOpenClick
UIAllianceGiftCtrl.OnGetClick = OnGetClick
UIAllianceGiftCtrl.SetNoName = SetNoName
UIAllianceGiftCtrl.GetOneGiftInfo = GetOneGiftInfo
UIAllianceGiftCtrl.OnRemoveClick = OnRemoveClick
UIAllianceGiftCtrl.OnDelAllBtnClick = OnDelAllBtnClick
UIAllianceGiftCtrl.OnGetAllBtnClick = OnGetAllBtnClick
UIAllianceGiftCtrl.GetSpecialBoxIcon = GetSpecialBoxIcon
return UIAllianceGiftCtrl