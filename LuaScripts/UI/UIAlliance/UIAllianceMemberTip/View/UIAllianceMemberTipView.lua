---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/9/22 11:15
---
local AllianceMemberBtnItem = require "UI.UIAlliance.UIAllianceMemberTip.Component.AllianceMemberBtnItem"
local UIAllianceMemberTipView = BaseClass("UIAllianceMemberTipView",UIBaseView)
local base = UIBaseView
local Screen = CS.UnityEngine.Screen
local tips_path = "Tips"
local content_path = "Tips/content"
local return_btn_path = "Panel"
local arrow_path = "Tips/arrow"
local function OnCreate(self)
    base.OnCreate(self)
    
    self.tips = self:AddComponent(UIBaseContainer,tips_path)
    self.content = self:AddComponent(UIBaseContainer,content_path)
    self.content_view = self.content.transform:GetComponent(typeof(CS.UnityEngine.UI.GridLayoutGroup))
    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    self.arrowN = self:AddComponent(UIBaseContainer, arrow_path)
    local uid,rank,posX,posY,selfRank,UIName,name, openType = self:GetUserData()
    self:Refresh(uid,rank,posX,posY,selfRank,UIName,name, openType)
end

local function OnDestroy(self)
    self.content = nil
    self.tips = nil
    self.return_btn =nil
    base.OnDestroy(self)
end

local function SetAllCellDestroy(self)
    self.content:RemoveComponents(AllianceMemberBtnItem)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.model ={}
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnDragUICloseTip, self.OnClickCloseBtn)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnDragUICloseTip, self.OnClickCloseBtn)
    base.OnRemoveListener(self)
end

local function Refresh(self, uid,rank,posX,posY,selfRank,UIName,name, openType)
    self.rank = rank
    self.uid =uid
    self.posX = posX
    self.posY = posY
    self.selfRank =selfRank
    self.name = name
    self.UIName = UIName
    self.openType = openType
    
    self.scaleFactor = UIManager:GetInstance():GetScaleFactor()
    self:RefreshData()
end

local function RefreshData(self)
    local columnCount = ((self.openType ~= AllianceMemberOpenType.AllianceMember and self.openType ~= AllianceMemberOpenType.OtherAlMember) and 1 or 2)
    self.content_view.constraintCount = columnCount
    self:SetAllCellDestroy()
    local list = self.view.ctrl:GetAllianceMemberBtnList(self.rank,self.uid,self.selfRank,self.UIName,self.name, self.openType)
    if list~=nil then
        self.modelCount =0
        for i = 1, table.length(list) do
            self.modelCount= self.modelCount+1
            self.model[self.modelCount] = self:GameObjectInstantiateAsync(UIAssets.AllianceMemberBtnItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.content:AddComponent(AllianceMemberBtnItem,nameStr,list[i])

                if i == table.length(list) then
                    self:CheckAlign()
                end
            end)
        end
    end
end

local function CheckAlign(self)
    local v3 = { }
    v3.x = self.posX
    v3.y = self.posY
    self.tips.transform.position = v3
    local anchoredPos = self.tips.rectTransform.anchoredPosition
    anchoredPos.y = anchoredPos.y - 50
    local rect = self.tips.rectTransform.rect
    -- 横向超框
    local screenWidth = 750
    if (anchoredPos.x - rect.width / 2)  < -screenWidth / 2 then
        anchoredPos.x = -screenWidth / 2 + rect.width / 2 + 5
    elseif (anchoredPos.x + rect.width / 2) > screenWidth / 2 then
        anchoredPos.x = screenWidth / 2 + rect.width / 2 - 5
    end
    self.tips.rectTransform.anchoredPosition = anchoredPos
    
    local arrowV3 = self.arrowN.transform.position
    arrowV3.x = self.posX
    self.arrowN.transform.position = arrowV3
end

local function OnClickCloseBtn(self)
    self.ctrl:CloseSelf()
end

UIAllianceMemberTipView.OnCreate= OnCreate
UIAllianceMemberTipView.OnDestroy = OnDestroy
UIAllianceMemberTipView.RefreshData = RefreshData
UIAllianceMemberTipView.Refresh = Refresh
UIAllianceMemberTipView.OnEnable= OnEnable
UIAllianceMemberTipView.OnDisable = OnDisable
UIAllianceMemberTipView.SetAllCellDestroy =SetAllCellDestroy
UIAllianceMemberTipView.CheckAlign =CheckAlign
UIAllianceMemberTipView.OnAddListener =OnAddListener
UIAllianceMemberTipView.OnRemoveListener =OnRemoveListener
UIAllianceMemberTipView.OnClickCloseBtn =OnClickCloseBtn
return UIAllianceMemberTipView