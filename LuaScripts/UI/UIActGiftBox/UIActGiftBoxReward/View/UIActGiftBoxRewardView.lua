---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime:
--- 
local UIActGiftBoxRewardView = BaseClass("UIActGiftBoxRewardView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local GiftBoxRewardCell = require "UI.UIActGiftBox.UIActGiftBoxReward.Component.GiftBoxRewardCell"
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local Content = "ScrollView/Viewport/Content"
local Txt_ItemReward = "ScrollView/Viewport/Content/Rect_ItemReward/Txt_ItemReward"
local Rect_ItemContent = "ScrollView/Viewport/Content/Rect_ItemReward/Rect_ItemContent"
local Txt_GiftReward = "ScrollView/Viewport/Content/Rect_GiftReward/Txt_GiftReward"
local Rect_GiftContent = "ScrollView/Viewport/Content/Rect_GiftReward/Rect_GiftContent"
local closeBtn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local maskBtn_path = "UICommonPopUpTitle/panel"


function UIActGiftBoxRewardView:OnCreate()
    base.OnCreate(self)
    self.actId = self:GetUserData()
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

function UIActGiftBoxRewardView:OnDestroy()
    self:SetAllCellDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIActGiftBoxRewardView:OnEnable()
    base.OnEnable(self)
end

function UIActGiftBoxRewardView:OnDisable()
    base.OnDisable(self)
end

function UIActGiftBoxRewardView:ComponentDefine()
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.maskBtnN = self:AddComponent(UIButton, maskBtn_path)
    self.maskBtnN:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.titleTxtN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    
    self.content = self:AddComponent(UIBaseContainer,Content)
    
    self._itemReward_txt = self:AddComponent(UITextMeshProUGUIEx,Txt_ItemReward)
    self._itemContent_rect = self:AddComponent(UIBaseContainer,Rect_ItemContent)

    self._giftReward_txt = self:AddComponent(UITextMeshProUGUIEx,Txt_GiftReward)
    self._giftContent_rect = self:AddComponent(UIBaseContainer,Rect_GiftContent)
end

function UIActGiftBoxRewardView:ComponentDestroy()
    self.createBtnTxtN = nil
    self.closeBtnN = nil
end

function UIActGiftBoxRewardView:DataDefine()

end

function UIActGiftBoxRewardView:DataDestroy()
    
end

function UIActGiftBoxRewardView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.ActGiftBoxLotteryCount, self.OnRefresh)
end

function UIActGiftBoxRewardView:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.ActGiftBoxLotteryCount, self.OnRefresh)
end

function UIActGiftBoxRewardView:ReInit()
    self.titleTxtN:SetLocalText(390334)
    self._itemReward_txt:SetLocalText(372512)
    self._giftReward_txt:SetLocalText(372513)
    if self.actId then
        SFSNetwork.SendMessage(MsgDefines.GetActivityGiftBoxLotteryCount,self.actId)
    end
end

function UIActGiftBoxRewardView:OnRefresh()
    self.actData = DataCenter.ActGiftBoxData:GetInfoByActId(self.actId)
    self.listReward = DataCenter.ActGiftBoxData:GetActReward(self.actId)
    self:SetAllCellDestroy()
    self:RefreshItemReward(self.listReward.itemReward)
    self:RefreshBoxReward(self.listReward.giftReward)
    self.delayTimeCell2 = TimerManager:GetInstance():DelayInvoke(function()
        
    end, 0.5)
    
end

--道具奖励
function UIActGiftBoxRewardView:RefreshItemReward(listReward)
    self.modelItem = {}
    if listReward then
        for i = 1, table.count(listReward) do
            --复制基础prefab，每次循环创建一次
            self.modelItem[i] = self:GameObjectInstantiateAsync(UIAssets.UICommonItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self._itemContent_rect.transform)
                go.transform:Set_localScale(0.75,0.75,0.75)
                go.name ="item_reward_" .. i
                local cell = self._itemContent_rect:AddComponent(UICommonItem,go.name)
                cell:ReInit(listReward[i])
                CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
            end)
        end
    end
end

function UIActGiftBoxRewardView:SetAllCellDestroy()
    self._itemContent_rect:RemoveComponents(UICommonItem)
    if self.modelItem~=nil then
        for k,v in pairs(self.modelItem) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self._giftContent_rect:RemoveComponents(GiftBoxRewardCell)
    if self.modelGift~=nil then
        for k,v in pairs(self.modelGift) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

function UIActGiftBoxRewardView:RefreshBoxReward(giftReward)
    if giftReward then
        self.modelGift = {}
        local lotteryList = self.actData.lotteryList
        for i = 1, table.count(giftReward) do
            --复制基础prefab，每次循环创建一次
            self.modelGift[i] = self:GameObjectInstantiateAsync(UIAssets.GiftBoxRewardCell, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self._giftContent_rect.transform)
                go.transform:Set_localScale(1,1,1)
                go.name ="item_gift_" .. i
                local cell = self._giftContent_rect:AddComponent(GiftBoxRewardCell,go.name)
                cell:ReInit(giftReward[i],lotteryList)
                CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
            end)
        end
    end
end

return UIActGiftBoxRewardView