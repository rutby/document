---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime:
--- 
local UIActGiftBoxOpenView = BaseClass("UIActGiftBoxOpenView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UICommonItem = require "UI.UICommonItem.UICommonItem"

function UIActGiftBoxOpenView:OnCreate()
    base.OnCreate(self)
    self.actId = self:GetUserData()
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

function UIActGiftBoxOpenView:OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIActGiftBoxOpenView:OnEnable()
    base.OnEnable(self)
    self:OnRefresh()
end

function UIActGiftBoxOpenView:OnDisable()
    base.OnDisable(self)
end

function UIActGiftBoxOpenView:ComponentDefine()
    self.closeBtnN = self:AddComponent(UIButton, "UICommonMiniPopUpTitle/Bg_mid/CloseBtn")
    self.closeBtnN:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.maskBtnN = self:AddComponent(UIButton, "UICommonMiniPopUpTitle/panel")
    self.maskBtnN:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.titleTxtN = self:AddComponent(UITextMeshProUGUIEx, "UICommonMiniPopUpTitle/Bg_mid/titleText")
    
    self._reward_rect = self:AddComponent(UICommonItem,"Rect/Rect_Reward")
    
    self._open_btn = self:AddComponent(UIButton,"Rect/Btn_Open")
    self._open_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickOpen()
    end)
    self._open_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect/Btn_Open/Rect_BtnFive/Txt_OPen")
    self._cost_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect/Btn_Open/Rect_BtnFive/Txt_Cost")
    self._cost_img = self:AddComponent(UIImage,"Rect/Btn_Open/Rect_BtnFive/Txt_Cost/Img_Cost")
    
    self._giftIcon_img = self:AddComponent(UIImage,"Rect/Img_GiftIcon")
    
    self._tips_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect/Txt_Tips")
    
    self._time_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect/Txt_Time")
end

function UIActGiftBoxOpenView:ComponentDestroy()
    self.createBtnTxtN = nil
    self.closeBtnN = nil
end

function UIActGiftBoxOpenView:DataDefine()
    self.timer_actionBox = function(temp)
        self:RefreshBoxTime(temp)
    end
end

function UIActGiftBoxOpenView:DataDestroy()
    self:DeleteBoxTimer()
end

function UIActGiftBoxOpenView:OnAddListener()
    base.OnAddListener(self)
end

function UIActGiftBoxOpenView:OnRemoveListener()
    base.OnRemoveListener(self)
end

function UIActGiftBoxOpenView:ReInit()
    self.titleTxtN:SetLocalText(372509)
    self._tips_txt:SetLocalText(372510)
end

function UIActGiftBoxOpenView:OnRefresh()
    self.actData = DataCenter.ActGiftBoxData:GetInfoByActId(self.actId)
    
    --获取钥匙信息
    self.keyID = DataCenter.ActGiftBoxData:GetActKeyById(self.actId)
    if self.keyID then
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.keyID)
        self._cost_img:LoadSprite(string.format(LoadPath.ItemPath,goods.icon))
    end
    
    self.boxInfo = DataCenter.ActGiftBoxData:GetParam(self.param)
    
    --获取解锁所需钥匙数
    local template =  DataCenter.ActGiftBoxData:GetActBoxInfoByItemId(self.boxInfo.itemId)
    self.unlockNum = tonumber(template.unlock_cost)
    self._cost_txt:SetText(template.unlock_cost)
    self._open_txt:SetLocalText(390097)
    
    self._giftIcon_img:LoadSprite(string.format(LoadPath.UImystery,template.reward_icon))
    
    self:RefreshReward()

    self:RefreshBoxTime(self.boxInfo.expireTime)
    self:AddBoxTimer(self.boxInfo.expireTime)
end

--道具奖励
function UIActGiftBoxOpenView:RefreshReward()
    local boxInfo = DataCenter.ActGiftBoxData:GetActBoxInfoByItemId(self.boxInfo.itemId)
    local str = string.split(boxInfo.goods,";")
    local param = {}
    param.itemId = str[1]
    param.count = str[2]
    param.rewardType = RewardType.GOODS
    self._reward_rect:ReInit(param)
end


--{{{宝箱时间
function UIActGiftBoxOpenView:AddBoxTimer(expireTime)
    if self.timerBox == nil then
        self.timerBox = TimerManager:GetInstance():GetTimer(1, self.timer_actionBox ,expireTime , false,false,false)
    end
    self.timerBox:Start()
end

function UIActGiftBoxOpenView:RefreshBoxTime(expireTime)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if expireTime < curTime then
        self:DeleteBoxTimer()
        UIManager.Instance:DestroyWindow(UIWindowNames.UIActGiftBoxOpen)
    else
        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(expireTime - curTime))
    end
end

function UIActGiftBoxOpenView:DeleteBoxTimer()
    if self.timerBox ~= nil then
        self.timerBox:Stop()
        self.timerBox = nil
    end
end
--}}}

function UIActGiftBoxOpenView:OnClickOpen()
    local count = DataCenter.ItemData:GetItemCount(self.keyID)
    if self.unlockNum > count then
        local lackTab = {}
        local param = {}
        param.type = ResLackType.Item
        param.id = self.keyID
        param.targetNum = self.unlockNum
        table.insert(lackTab,param)
        GoToResLack.GoToItemResLackList(lackTab)
        return UIUtil.ShowTipsId(120021)
    end
    self.ctrl:CloseSelf()
    SFSNetwork.SendMessage(MsgDefines.OpenActivityGiftBox,self.actId,self.boxInfo.uuid)
end

return UIActGiftBoxOpenView