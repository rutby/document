---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/7/14 18:17
---

local UIHeroBountyTaskCtrl = BaseClass("UIHeroBountyTaskCtrl", UIBaseCtrl)

function UIHeroBountyTaskCtrl:CloseSelf()
    UIManager.Instance:DestroyWindow(UIWindowNames.UIHeroBountyTask)
end
function UIHeroBountyTaskCtrl:InitData(uuid)
    self.curHeroes ={}
    self.uuid = uuid
end
function UIHeroBountyTaskCtrl:GetRewards( rewardList,rarity)
    local reward = {}
    if rewardList == nil then
        return reward
    end
    table.walk(rewardList, function (_, v)
        local item = {}
        item.count = v.count
        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(rarity-1)
        item.rewardType = v.rewardType
        local desc = DataCenter.RewardManager:GetDescByType(v.rewardType, v.itemId)
        local name = DataCenter.RewardManager:GetNameByType(v.rewardType, v.itemId)
        item.itemName = name
        item.itemDesc = desc
        item.isLocal = true
        if v.rewardType == RewardType.GOODS then
            if v.itemId ~= nil then
                --物品或英雄
                --item.itemName = Localization:GetString(name)
                local goods = DataCenter.ItemTemplateManager:GetItemTemplate(v.itemId)
                if goods ~= nil then
                    local join_method = -1
                    local icon_join = nil
                    if goods.join_method ~= nil and goods.join_method > 0 and goods.icon_join ~= nil and goods.icon_join ~= "" then
                        join_method = goods.join_method
                        icon_join = goods.icon_join
                    end

                    if join_method > 0 and icon_join ~= nil and icon_join ~= "" then
                        local tempJoin = string.split(icon_join, ";")
                        if #tempJoin > 1 then
                            item.itemColor = tempJoin[2]
                        end
                        if #tempJoin > 2 then
                            item.iconName = tempJoin[3]
                        end
                    else
                        --物品
                        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(rarity-1)
                        local itemType = goods.type
                        item.goodsType = goods.type
                        item.para2 = goods.para2
                        if itemType == 2 then
                            -- SPD
                            if goods.para1 ~= nil and goods.para1 ~= "" then
                                local para1 = goods.para1
                                local temp = string.split(para1, ';')
                                if temp ~= nil and #temp > 1 then
                                    item.itemFlag = temp[1] .. temp[2]
                                end
                            end
                        elseif itemType == 3 then
                            -- USE
                            local type2 = goods.type2
                            if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                                local res_num = tonumber(goods.para)
                                item.itemFlag = string.GetFormattedStr(res_num)
                            end
                        end

                        item.iconName = string.format(LoadPath.ItemPath, goods.icon)
                    end
                end
            end
        elseif v.rewardType == RewardType.GOLD then
            item.iconName = DataCenter.ResourceManager:GetResourceIconByType(ResourceType.Gold)
            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(rarity-1)
        elseif v.rewardType == RewardType.OIL or v.rewardType == RewardType.METAL or v.rewardType == RewardType.FORMATION_STAMINA
                or v.rewardType == RewardType.WATER or v.rewardType == RewardType.PVE_POINT or v.rewardType == RewardType.DETECT_EVENT
                or v.rewardType == RewardType.MONEY or v.rewardType == RewardType.ELECTRICITY then
            item.iconName = DataCenter.RewardManager:GetPicByType(v.rewardType)
            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(rarity-1)
        elseif v.rewardType == RewardType.EXP then
            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(rarity-1)
            item.iconName = "Assets/Main/Sprites/UI/Common/New/Common_icon_exp.png"
        end
        table.insert(reward, item)
    end)
    return reward
end

function UIHeroBountyTaskCtrl:GetHeroTotalStarNum()
    local num = 0
    for k,v in pairs(self.curHeroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
        if heroData~=nil then
            local quality = heroData.quality
            local starNum = (quality-1)/2
            num = num+starNum
        end
    end
    num = math.floor(num)
    return num
end

function UIHeroBountyTaskCtrl:GetHeroMaxRarity()
    local maxRarity = 4
    for k,v in pairs(self.curHeroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
        if heroData~=nil then
            local heroConfig = heroData:GetConfig()
            local rarity = tonumber(heroConfig.rarity)
            if maxRarity> rarity then
                maxRarity = rarity
            end
        end
    end
    return maxRarity
end

function UIHeroBountyTaskCtrl:GetHeroNumByRarity(needRarity)
    local num = 0
    for k,v in pairs(self.curHeroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
        if heroData~=nil then
            local heroConfig = heroData:GetConfig()
            local rarity = tonumber(heroConfig.rarity)
            if needRarity>= rarity then
                num = num+1
            end
        end
    end
    return num
end
function UIHeroBountyTaskCtrl:GetHeroNumByLevel(needLv)
     local num = 0
     for k,v in pairs(self.curHeroes) do
         local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
         if heroData~=nil then
             if heroData.level>= needLv then
                 num = num+1
             end
         end
     end
     return num
 end

function UIHeroBountyTaskCtrl:CheckHasHeroByCampIndex(campIndex,num)
    local count = 0
    for k,v in pairs(self.curHeroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
        if heroData~=nil then
            local camp = heroData:GetCamp()
            if campIndex == camp then
                count = count+1
            end
        end
    end
    return (count>=num)
end


function UIHeroBountyTaskCtrl:GetCurrentHeroDataList(camp)
    local result = {}
    
    local heroes = DataCenter.HeroDataManager:GetAllHeroBySort()
    for _, heroData in ipairs(heroes) do
        if camp ~=nil and camp> HeroCamp.All then
            local targetCamp = heroData:GetCamp()
            if targetCamp == camp then
                table.insert(result, heroData.uuid)
            end
        else
            table.insert(result, heroData.uuid)
        end
    end
    return result
end
function UIHeroBountyTaskCtrl:GetHeroDataByUuid(heroUuid)
    local data = {}
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    local heroConfig = heroData:GetConfig()
    data.camp = heroData:GetCamp()
    local rarity = heroConfig.rarity
    data.hero_rarity = HeroUtils.GetRarityIconName(rarity, true)
    data.rankId = heroData:GetCurMilitaryRankId()
    data.heroUuid = heroUuid
    data.heroId = heroData.heroId
    data.qualityIndex = heroData.quality
    data.isWaken = heroData:IsWakeUp()
    data.quality = HeroUtils.GetQualityBgInTroopsByPath(rarity,data.isWaken)
    data.icon = HeroUtils.GetHeroBodyByHeroId(heroData.heroId)
    data.heroLevel = heroData.level
    data.index = 0
    data.rarity =rarity
    data.isSelect = false
    data.isLock = DataCenter.HeroBountyDataManager:GetHeroIsInTaskByUuid(heroUuid)
    if data.isLock == false then
        table.walk(self.curHeroes,function (k,v)
            if v== heroUuid then
                data.index = k
                data.isSelect = true
            else
                local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
                if tempHeroData~=nil then
                    if tempHeroData.heroId == heroData.heroId then
                        data.isLock = true
                    end
                end
            end
        end)
    end
    return data
end
function UIHeroBountyTaskCtrl:SelectHeroByUuid(heroUuid,maxHeroNum)
    local tempIndex = 0
    for i =1,maxHeroNum do
        if tempIndex<=0 then
            if self.curHeroes[i]==nil then
                tempIndex = i
            end
        end
    end
    if tempIndex>0 then
        self.curHeroes[tempIndex]= heroUuid
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if heroData~=nil then
            EventManager:GetInstance():Broadcast(EventId.OnSelectHeroSelectForBounty,heroData.heroId)
        end
    end

end
function UIHeroBountyTaskCtrl:OnDeleteHeroByIndex(index)
    if self.curHeroes[index]~=nil then
        local uuid =0
        uuid = self.curHeroes[index]
        self.curHeroes[index] =nil
        local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
        if tempHeroData~=nil then
            EventManager:GetInstance():Broadcast(EventId.OnCancelHeroSelectForBounty,tempHeroData.heroId)
        end
    end
end
function UIHeroBountyTaskCtrl:GetCurHeroData()
    return self.curHeroes
end
function UIHeroBountyTaskCtrl:GetTaskDataByIndex(index)
    local taskData = DataCenter.HeroBountyDataManager:GetTaskDataByIndex(index)
    local oneData = {}
    if taskData~=nil then
        oneData.id = taskData.id
        oneData.index = taskData.index
        oneData.name = taskData.name
        local exp  = tonumber(taskData.exp_hero)
        local effectValue = LuaEntry.Effect:GetGameEffect(EffectDefine.GLOBAL_HERO_EXP_EXTRA_PERCENT)
        oneData.exp_hero = 0--Mathf.Round(exp* (1 + effectValue / 100))
        oneData.rarity = taskData.rarity
        oneData.description = taskData.description
        oneData.needHeroNum = tonumber(taskData.needHeroNum)
        oneData.star_requirements = tonumber(taskData.star_requirements)
        local arr = taskData.rarity_requirements_list
        if #arr>=2 then
            oneData.rarity_requirement = tonumber(arr[1])
            oneData.rarity_num_requirement = tonumber(arr[2])
        end
        local levelArr = taskData.level_requirements_list
        if #levelArr>=2 then
            oneData.level_requirement = toInt(levelArr[1])
            oneData.level_num_requirement = toInt(levelArr[2])
        end
        oneData.camp_requirements_list = {}
        local campArr = taskData.camp_requirements_list
        if #campArr>0 then
            for i =1,#campArr do
                table.insert(oneData.camp_requirements_list,tonumber(campArr[i]))
            end
        end
        oneData.rewardStr = self:GetRewards(taskData.rewardList,oneData.rarity)
        return oneData
    end
end

function UIHeroBountyTaskCtrl:OnStartClick(index)
    SFSNetwork.SendMessage(MsgDefines.StartHeroBountyTask,index,self.curHeroes)
end
return UIHeroBountyTaskCtrl