---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime:
--- 联盟宣战遗迹列表
local UIDecorationMainView = BaseClass("UIDecorationMainView", UIBaseView)
local UIDecorationTypes = require "UI.UIDecoration.UIDecorationMain.Component.UIDecorationTypes"
local UIDecorationIcons = require "UI.UIDecoration.UIDecorationMain.Component.UIDecorationIcons"
local UIDecorationMainCity = require "UI.UIDecoration.UIDecorationMain.Component.UIDecorationMainCity"
local UIDecorationHeadFrame = require "UI.UIDecoration.UIDecorationMain.Component.UIDecorationHeadFrame"
local UIDecorationMarchTab = require "UI.UIDecoration.UIDecorationMain.Component.UIDecorationMarchTab"

local EffectDesc = require "UI.UIDecoration.UIDecorationMain.Component.EffectDesc"
local base = UIBaseView
local ResourceManager = CS.GameEntry.Resource
local Localization = CS.GameEntry.Localization
local closeBtn_path = "ImgBg/BtnClose"
local introBtn_path = "EffectRight/EffectBtn/Button"
local all_types_path = "ImgBg/ScrollViewTypes"
local all_type_decoration_path = "ImgBg/TypeDecorations"
local head_frame_path = "ImgBg/Frame"
local main_city_path = "ImgBg/MainCity"
local bg1_path = "ImgBg/BG1"
local effect_left_path = "ImgBg/EffectLeft"
local effect_right_path = "EffectRight"
local effect_btn_path = "EffectRight/EffectBtn"
local effect_btn_text_path = "EffectRight/EffectBtn/EffectBtnText"
local city_btn_path = "ImgBg/city/city_btn"
local city_btn_text_path = "ImgBg/city/city_btn_text"
local city_path = "ImgBg/city"
local march_car_go_path = "ImgBg/march_car_go"
local march_car_tab_path = "ImgBg/march_car_go/UIDecorationCarTab"
local march_car_text_path = "ImgBg/march_car_go/march_car_text"

local city_img_path = string.format(LoadPath.UIDecoration, "UIskin_city.png")
local world_img_path = string.format(LoadPath.UIDecoration, "UIskin_world.png")

local towColScrollView_path = "ImgBg/TypeDecorations/TowColScrollView"
local oneColScrollView_path = "ImgBg/TypeDecorations/OneColScrollView"

local MainCityShowMode = {
    MainCityShowMode_City = 1,
    MainCityShowMode_World = 2,
}

local MarchMax = 3
--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    --self._title_txt = self:AddComponent(UITextMeshProUGUIEx, titleTxt_path)
    self._close_btn = self:AddComponent(UIButton, closeBtn_path)
    self.bg1 = self:AddComponent(UIImage, bg1_path)

    self._close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        if self.mainCity ~= nil then
            self.mainCity:EnableWorldCamera()
        end
        if self.isWorldWhenOpen then
            if CS.SceneManager:IsInWorld() then
                GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World), nil , 0)
            else
                --不能写在destroy中
                SceneUtils.ChangeToWorld()
                return
            end
        else
            CS.SceneManager.World:AutoZoom(DataCenter.CityCameraManager:GetDecorationMainViewCameraZoom(), 0)
        end
        self.ctrl:CloseSelf(self.backToActivity)
    end)
    self.effect_right = self:AddComponent(UIBaseContainer, effect_right_path)
    self.effect_bth = self:AddComponent(UIButton, effect_btn_path)
    self.effect_bth:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnEffectClick()
    end)
    self.introBtn = self:AddComponent(UIButton, introBtn_path)
    self.introBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        local str = Localization:GetString("320617")
        UIUtil.ShowIntro(Localization:GetString("320557"), "", str)
    end)
    self.effect_btn_text = self:AddComponent(UITextMeshProUGUIEx, effect_btn_text_path)
    self.effect_btn_text:SetLocalText(320566)
    self.city_btn = self:AddComponent(UIButton, city_btn_path)
    self.city_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnCityClick()
    end)
    self.city_btn_text = self:AddComponent(UITextMeshProUGUIEx, city_btn_text_path)
    self.city = self:AddComponent(UIBaseContainer, city_path)
    self.city_btn_image = self:AddComponent(UIImage, city_btn_path)
    
    self.effect_desc = self:AddComponent(EffectDesc, effect_left_path)
    
    self.towColScrollView = self:AddComponent(UIBaseContainer, towColScrollView_path)
    self.oneColScrollView = self:AddComponent(UIBaseContainer, oneColScrollView_path)
    self.march_car_go = self:AddComponent(UIBaseContainer, march_car_go_path)
    self.march_tab = {}
    for i = 1, MarchMax, 1 do
        self.march_tab[i] = self:AddComponent(UIDecorationMarchTab, march_car_tab_path .. i)
    end
    self.march_car_text = self:AddComponent(UITextMeshProUGUIEx, march_car_text_path)
end

local function ComponentDestroy(self)
    self:RemoveCity()
    if self.mainCity ~= nil then
        self.mainCity:SetActive(false)
    end
    if self.headFrame ~= nil then
        self.headFrame:SetActive(false)
    end

    self.mainCity = nil
end

local function DataDefine(self)
    self.currentSelectType, self.currentSelectDecoration, self.backToActivity = self:GetUserData()
    if CS.SceneManager.IsInCity() then
        self.mainCityModel = MainCityShowMode.MainCityShowMode_City
    else
        self.mainCityModel = MainCityShowMode.MainCityShowMode_World
        --改变镜头位置到城内
    end
    self.isWorldWhenOpen = CS.SceneManager:IsInWorld()
    self.march_index = 1--选择的编队车index
    self.onMarchTabBtnClick = function(index, uuid)
        self:OnMarchTabBtnClick(index, uuid)
    end
    self.onSkinBtnCallBack = function(skinId)
        self:OnSkinBtnCallBack(skinId)
    end
end

local function DataDestroy(self)
    self.march_index = 1--选择的编队车index
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end


local function ReInit(self)
    self:ResetPanelData()
    self:RefreshTypes()
    self:RefreshTypeDecorationsByCurType(self.currentSelectType)
end

local function RefreshTypes(self)
    if self.types == nil then
        self.types = self:AddComponent(UIDecorationTypes, all_types_path)
    end
    self.types:SetData(self.allTypes, self.currentSelectType)
end

local function RefreshTypeDecorationsByCurType(self, curType)
    if curType == nil then
        curType = DecorationType.DecorationType_Head_Frame
    end
    if self.iconDecorations == nil then
        self.iconDecorations = self:AddComponent(UIDecorationIcons, all_type_decoration_path)
    end
    self.iconDecorations:SetData(self.allDecorations, self.currentSelectDecoration, curType, self.onSkinBtnCallBack, self:GetMarchUuid())
    self:ShowCurrentDecoration()
end

local function ResetPanelData(self)
    local formationUuid = 0
    if self.currentSelectType == DecorationType.DecorationType_MarchSkin then
        formationUuid = self:GetMarchUuid()
    else
        local list = DataCenter.ArmyFormationDataManager:GetArmyFormationIdList()
        if list ~= nil and list[1] ~= nil then
            formationUuid = list[1]
        end
    end
  
    self.currentSelectType, self.currentSelectDecoration, self.allTypes, self.allDecorations = self.ctrl:GetPanelData(self.currentSelectType, self.currentSelectDecoration, formationUuid)
end

local function SetCurrentType(self, type)
    self.currentSelectType = type
    
    self.currentSelectDecoration = nil
    self:ReInit()
end

local function SetCurrentDecoration(self, decorationId)
    self.currentSelectDecoration = decorationId
    self:ShowCurrentDecoration()
end

local function ShowDecorationHeadFrame(self)
    if self.headFrame == nil then
        self.headFrame = self:AddComponent(UIDecorationHeadFrame, head_frame_path)
    end
    self.headFrame:SetActive(true)
    self.headFrame:ReInit(self.ctrl:GetHeadFrameData(self.currentSelectDecoration))
end

local function RemoveCity(self)
    if self.cityRequest ~= nil then
        self.cityRequest:Destroy()
    end
    self.cityRequest = nil
    local mainBuild = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    if mainBuild == nil then
        return
    end
    local pointId = mainBuild.pointId
    local build = CS.SceneManager.World:GetObjectByPointId(pointId)
    if build ~= nil then
        build:SetIsVisible(true)
    end
end

local function ShowDecorationMainCity(self)
    self.city:SetActive(true)
    if self.mainCityModel == MainCityShowMode.MainCityShowMode_City then
        self:RemoveCity()
        self.city_btn_text:SetLocalText(320561)
        self.city_btn_image:LoadSprite(world_img_path)
        if self.mainCity ~= nil then
            self.mainCity:SetActive(false)
        end

        local template = DataCenter.DecorationTemplateManager:GetTemplate(self.currentSelectDecoration)
        local modelName = template.model
        local mainBuild = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)

        if template:IsDefault() then
            local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(BuildingTypes.FUN_BUILD_MAIN, mainBuild.level)
            if levelTemplate ~= nil then
                modelName = levelTemplate:GetCityModelName()
            end
        end
        local pointId = mainBuild.pointId
        local build = CS.SceneManager.World:GetObjectByPointId(pointId)
        if build ~= nil then
            build:SetIsVisible(false)
        end
        
        local request = ResourceManager:InstantiateAsync("Assets/Main/Prefabs/Building/"..modelName..".prefab")

        self.cityRequest = request
        request:completed('+', function()
            if request.isError then
                return
            end
            if request.gameObject == nil then
                return
            end
            local pos = SceneUtils.TileIndexToWorld(pointId)
            request.gameObject:SetActive(true)
            request.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
            request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            request.gameObject.transform:Set_position(pos.x, pos.y, pos.z)
            local normal = request.gameObject.transform:Find("ModelGo/Normal")
            local box = request.gameObject.transform:Find("ModelGo/box")
            if normal then
                normal.gameObject:SetActive(true)
            end
            if box then
                box.gameObject:SetActive(false)
            end

        end)

        return
    end
    self.city_btn_text:SetLocalText(320562)
    self.city_btn_image:LoadSprite(city_img_path)

    if self.mainCity == nil then
        self.mainCity = self:AddComponent(UIDecorationMainCity, main_city_path)
    end
    self.mainCity:SetActive(true)
    self.mainCity:ReInit(self.ctrl:GetMainCityData(self.currentSelectDecoration))
end

local function ShowDecorationTittleName(self)
    if self.mainCity == nil then
        self.mainCity = self:AddComponent(UIDecorationMainCity, main_city_path)
    end
    self.mainCity:SetActive(true)
    self.mainCity:ReInit(self.ctrl:GetMainCityData(self.currentSelectDecoration))
end

local function ShowCurrentDecoration(self)
    self.city:SetActive(false)
    if self.mainCity then
        self.mainCity:SetActive(false)
    end
    if self.headFrame ~= nil then
        self.headFrame:SetActive(false)
    end
    self.march_car_go:SetActive(false)
    if self.currentSelectType == DecorationType.DecorationType_Head_Frame then
        self:ShowDecorationHeadFrame()
    elseif self.currentSelectType == DecorationType.DecorationType_Main_City then
        self:ShowDecorationMainCity()
    elseif self.currentSelectType == DecorationType.DecorationType_TittleName then
        self:ShowDecorationTittleName()
    elseif self.currentSelectType == DecorationType.DecorationType_MarchSkin then
        self:ShowDecorationMarch()
    end
    self:RefreshEffect()
    self:RefreshBg()
end

local function RefreshEffect(self)
    local effectData = DecorationUtil.GetEffectDesc(self.currentSelectDecoration)
    --self.effect_right:SetActive(not string.IsNullOrEmpty(effectData.useEffect) or not string.IsNullOrEmpty(effectData.ownEffect))
    self.effect_desc:ReInit(effectData)
end

local function OnEffectClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIDecorationEffect)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UserSkinUpdate, self.OnUserSkinUpdate)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.UserSkinUpdate, self.OnUserSkinUpdate)
end

local function OnUserSkinUpdate(self)
    self:ReInit()
end

local function OnCityClick(self)
    if self.mainCityModel == MainCityShowMode.MainCityShowMode_World then
        self.mainCityModel = MainCityShowMode.MainCityShowMode_City
    else
        self.mainCityModel = MainCityShowMode.MainCityShowMode_World
    end
    if self.mainCityModel == MainCityShowMode.MainCityShowMode_City then
        if not CS.SceneManager.IsInCity() then
            SceneUtils.ChangeToCity(function()
                self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
                    local onComplete = function()
                        self:ShowCurrentDecoration()
                    end
                    GoToUtil.GotoCityPos(DecorationUtil.GetCityPos(), DataCenter.CityCameraManager:GetDecorationMainViewCameraZoom(), 0, onComplete)
                end, 0.3)
            end, true)
        else
            self:ShowCurrentDecoration()
        end
    else
        self:ShowCurrentDecoration()
    end
end

function UIDecorationMainView:RefreshBg()
    for k, v in ipairs(self.allTypes) do
        if v.id == self.currentSelectType then
            self.bg1:LoadSprite(v.bg)
            break
        end
    end
end

function UIDecorationMainView:ShowDecorationMarch()
    if self.mainCity == nil then
        self.mainCity = self:AddComponent(UIDecorationMainCity, main_city_path)
    end
    self.mainCity:SetActive(true)
    self.march_car_text:SetLocalText(GameDialogDefine.SELECT_ARMY)
    self.mainCity:ReInit(self.ctrl:GetMainCityData(self.currentSelectDecoration))
    self.march_car_go:SetActive(true)
    local list = DataCenter.ArmyFormationDataManager:GetArmyFormationIdList()
    for k, v in ipairs(self.march_tab) do
        local uuid = list == nil and 0 or list[k]
        local param = {}
        param.select = self.march_index == k
        param.index = k
        param.uuid = uuid
        param.onMarchTabBtnClick = self.onMarchTabBtnClick
        if uuid ~= nil and uuid ~= 0 then
            param.visible = true
        else
            param.visible = false
        end
        v:ReInit(param)
    end
end

function UIDecorationMainView:OnMarchTabBtnClick(index, uuid)
    if self.march_index ~= index then
        self:SetMarchTabSelect(self.march_index, false)
        self.march_index = index
        self:SetMarchTabSelect(self.march_index, true)
        local currentSkinId = DataCenter.DecorationDataManager:GetCurrentSkinByType(DecorationType.DecorationType_MarchSkin, uuid)
        self.currentSelectDecoration = currentSkinId
        self.mainCity:ReInit(self.ctrl:GetMainCityData(self.currentSelectDecoration))
        local a, b, c, allDecorations = self.ctrl:GetPanelData(self.currentSelectType, self.currentSelectDecoration, uuid)
        self.allDecorations = allDecorations
        self.iconDecorations:SetData(self.allDecorations, self.currentSelectDecoration, self.currentSelectType, self.onSkinBtnCallBack, uuid)
        self:RefreshEffect()
        self:RefreshBg()
    end
end

function UIDecorationMainView:SetMarchTabSelect(index, select)
    local tabCell = self.march_tab[index]
    if tabCell ~= nil then
        tabCell:Select(select)
    end
end

function UIDecorationMainView:OnSkinBtnCallBack(skinId)
    self:SetCurrentDecoration(skinId)
end

function UIDecorationMainView:GetMarchUuid()
    if self.currentSelectType == DecorationType.DecorationType_MarchSkin then
        local list = DataCenter.ArmyFormationDataManager:GetArmyFormationIdList()
        if list ~= nil then
            return list[self.march_index]
        end
    end
    return 0
end

UIDecorationMainView.OnCityClick = OnCityClick
UIDecorationMainView.OnAddListener = OnAddListener
UIDecorationMainView.OnRemoveListener = OnRemoveListener
UIDecorationMainView.OnUserSkinUpdate = OnUserSkinUpdate
UIDecorationMainView.OnCreate = OnCreate
UIDecorationMainView.OnDestroy = OnDestroy
UIDecorationMainView.OnEnable = OnEnable
UIDecorationMainView.OnDisable = OnDisable
UIDecorationMainView.ComponentDefine = ComponentDefine
UIDecorationMainView.ComponentDestroy = ComponentDestroy
UIDecorationMainView.DataDefine = DataDefine
UIDecorationMainView.DataDestroy = DataDestroy
UIDecorationMainView.ReInit = ReInit
UIDecorationMainView.RefreshTypes = RefreshTypes
UIDecorationMainView.RefreshTypeDecorationsByCurType = RefreshTypeDecorationsByCurType
UIDecorationMainView.ResetPanelData = ResetPanelData
UIDecorationMainView.SetCurrentType = SetCurrentType
UIDecorationMainView.SetCurrentDecoration = SetCurrentDecoration
UIDecorationMainView.ShowDecorationHeadFrame = ShowDecorationHeadFrame
UIDecorationMainView.ShowCurrentDecoration = ShowCurrentDecoration
UIDecorationMainView.ShowDecorationMainCity = ShowDecorationMainCity
UIDecorationMainView.ShowDecorationTittleName = ShowDecorationTittleName
UIDecorationMainView.RefreshEffect = RefreshEffect
UIDecorationMainView.OnEffectClick = OnEffectClick
UIDecorationMainView.RemoveCity = RemoveCity

return UIDecorationMainView