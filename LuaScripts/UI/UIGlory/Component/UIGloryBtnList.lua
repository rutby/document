---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/27 22:03
---

local UIGloryBtnList = BaseClass("UIGloryBtnList", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local group_btn_path = "Group"
local group_text_path = "Group/GroupText"
local hero_btn_path = "Hero"
local hero_text_path = "Hero/HeroText"
local reward_btn_path = "Reward"
local reward_text_path = "Reward/RewardText"
local hint_btn_path = "Hint"
local hint_text_path = "Hint/HintText"
local rule_btn_path = "Rule"
local rule_text_path = "Rule/RuleText"
local record_btn_path = "Record"
local record_text_path = "Record/RecordText"
local declare_record_btn_path = "DeclareRecord"
local declare_record_text_path = "DeclareRecord/DeclareRecordText"
local rest_btn_path = "Rest"
local rest_text_path = "Rest/RestText"
local rest_red_path = "Rest/RestRed"
local migrate_btn_path = "prisident"
local migrate_text_path = "prisident/prisidentText"
local migrate_btn_red_dot_path = "prisident/migrateBtn_RedPoint"

local missile_path = "Missile"
local missile_num_path = "Missile/MissileNum"
local missile_text_path = "Missile/MissileText"

local camp_path = "CampInfo"
local camp_txt_path = "CampInfo/Txt_Camp"
local killRank_path = "KillRank"
local killRank_txt_path = "KillRank/Txt_KillRank"

local s5Reward_path = "S5Reward"
local s5Reward_txt_path = "S5Reward/Txt_S5Reward"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.group_btn = self:AddComponent(UIButton, group_btn_path)
    self.group_btn:SetOnClick(function()
        self:OnGroupClick()
    end)
    self.group_text = self:AddComponent(UIText, group_text_path)
    self.group_text:SetLocalText(302743)
    self.hero_btn = self:AddComponent(UIButton, hero_btn_path)
    self.hero_btn:SetOnClick(function()
        self:OnHeroClick()
    end)
    self.hero_text = self:AddComponent(UIText, hero_text_path)
    self.hero_text:SetLocalText(100275)
    self.reward_btn = self:AddComponent(UIButton, reward_btn_path)
    self.reward_btn:SetOnClick(function()
        self:OnRewardClick()
    end)
    self.reward_text = self:AddComponent(UIText, reward_text_path)
    self.reward_text:SetLocalText(100072)
    self.hint_btn = self:AddComponent(UIButton, hint_btn_path)
    self.hint_btn:SetOnClick(function()
        self:OnHintClick()
    end)
    self.hint_text = self:AddComponent(UIText, hint_text_path)
    self.hint_text:SetLocalText(302027)
    self.rule_btn = self:AddComponent(UIButton, rule_btn_path)
    self.rule_btn:SetOnClick(function()
        self:OnRuleClick()
    end)
    self.rule_text = self:AddComponent(UIText, rule_text_path)
    self.rule_text:SetLocalText(302027)
    self.record_btn = self:AddComponent(UIButton, record_btn_path)
    self.record_btn:SetOnClick(function()
        self:OnRecordClick()
    end)
    self.record_text = self:AddComponent(UIText, record_text_path)
    self.record_text:SetLocalText(302820)
    self.declare_record_btn = self:AddComponent(UIButton, declare_record_btn_path)
    self.declare_record_btn:SetOnClick(function()
        self:OnDeclareRecordClick()
    end)
    self.declare_record_text = self:AddComponent(UIText, declare_record_text_path)
    self.declare_record_text:SetLocalText(302749)
    self.rest_btn = self:AddComponent(UIButton, rest_btn_path)
    self.rest_btn:SetOnClick(function()
        self:OnRestClick()
    end)
    self.rest_text = self:AddComponent(UIText, rest_text_path)
    self.rest_text:SetLocalText(GameDialogDefine.REST_TIME)
    self.rest_red_go = self:AddComponent(UIBaseContainer, rest_red_path)
    self.migrate_btn = self:AddComponent(UIButton, migrate_btn_path)
    self.migrate_btn:SetOnClick(function()
        self:OnMigrateClick()
    end)
    self.migrate_text = self:AddComponent(UIText, migrate_text_path)
    self.migrate_text:SetLocalText(250353)
    self.migrate_btn_red_dot = self:AddComponent(UIBaseContainer, migrate_btn_red_dot_path)

    self.missile = self:AddComponent(UIButton, missile_path)
    self.missile:SetActive(false)
    self.missile_text = self:AddComponent(UIText, missile_text_path)
    self.missile_num = self:AddComponent(UIText, missile_num_path)
    self.missile_text:SetLocalText(309003)
    self.missile:SetOnClick(function()
        self:OnMissileInfoClick()
    end)

    self.campInfo = self:AddComponent(UIButton, camp_path)
    self.campInfo:SetOnClick(function()
        self:OnClickCamp()
    end)
    self.killRank = self:AddComponent(UIButton, killRank_path)
    self.killRank:SetOnClick(function()
        self:OnClickKillRank()
    end)
    self.campInfo_text = self:AddComponent(UIText, camp_txt_path)
    self.campInfo_text:SetLocalText(111055)
    self.killRank_text = self:AddComponent(UIText, killRank_txt_path)
    self.killRank_text:SetLocalText(111056)

    self.sFiveReward_btn = self:AddComponent(UIButton, s5Reward_path)
    self.sFiveReward_btn:SetOnClick(function()
        self:OnClickRewardBtn()
    end)
    self.sFiveReward_txt = self:AddComponent(UIText, s5Reward_txt_path)
    self.sFiveReward_txt:SetLocalText(110317)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.groupId = 0
    self.isMissileEnable = false
    self.seasonId = 0
end

local function DataDestroy(self)
    self.groupId = nil
    self.isMissileEnable = false
    self.seasonId = 0
end

local function OnEnable(self)
    base.OnEnable(self)
    self:RefreshMigrate()
    self:RefreshMissile()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnRefreshMigrateRedPot, self.RefreshMigrate)
    self:AddUIListener(EventId.MissileInfoUpgrade, self.RefreshMissile)
    self:AddUIListener(EventId.KingdomPresidentInfoUpdate, self.RefreshMigrate)
    self:AddUIListener(EventId.GlorySetAvoid, self.RefreshRestRed)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MissileInfoUpgrade, self.RefreshMissile)
    self:RemoveUIListener(EventId.OnRefreshMigrateRedPot, self.RefreshMigrate)
    self:RemoveUIListener(EventId.KingdomPresidentInfoUpdate, self.RefreshMigrate)
    self:RemoveUIListener(EventId.GlorySetAvoid, self.RefreshRestRed)
end

local function SetGroupId(self, groupId)
    self.groupId = groupId
end

local function SetSeasonId(self, seasonId,isFormal)
    self.seasonId = seasonId
    self:RefreshBtnState(isFormal)
end

local function RefreshBtnState(self,isFormal)
    self.group_btn:SetActive(true)
    self.reward_btn:SetActive(true)
    local curSeasonId = DataCenter.SeasonDataManager:GetSeasonId()
    if isFormal then
        if curSeasonId == 5 then
            self.group_btn:SetActive(false)
        end
    else
        if self.seasonId == 5 then
            self.group_btn:SetActive(false)
            self.reward_btn:SetActive(false)
        end
    end
    local dataInfo = DataCenter.RobotWarsManager:GetActivityInfo()
    local isEden = dataInfo.edenMatch and dataInfo.edenMatch.targetServer and dataInfo.edenMatch.targetServer ~= 0 and LuaEntry.Player:GetCurServerId() == dataInfo.edenMatch.targetServer  --是否在伊甸园
    self.campInfo:SetActive(curSeasonId == 5 and isEden)
    self.killRank:SetActive(curSeasonId == 5 and isEden)
    if curSeasonId == 5 or self.seasonId == 5 then
        self.hero_btn:LoadSprite(string.format(LoadPath.UISeasonRobots,"competition_icon_newhero_1"))
        self.reward_btn:LoadSprite(string.format(LoadPath.UISeasonRobots,"competition_icon_reward_1"))
        self.hint_btn:LoadSprite(string.format(LoadPath.UISeasonRobots,"competition_icon_rule_1"))
    else
        self.hero_btn:LoadSprite(string.format(LoadPath.UISeasonRobots,"competition_icon_newhero_2"))
        self.reward_btn:LoadSprite(string.format(LoadPath.UISeasonRobots,"competition_icon_reward_2"))
        self.hint_btn:LoadSprite(string.format(LoadPath.UISeasonRobots,"competition_icon_rule_2"))
    end

    if curSeasonId == 5 then
        local data = DataCenter.DesertDataManager:GetSelfAllianceSeasonReward()
        local state = DataCenter.RobotWarsManager:GetIsOnReward()
        self.sFiveReward_btn:SetActive(data ~= nil and state)
    else
        self.sFiveReward_btn:SetActive(false)
    end
end

local function ShowRecord(self, show)
    self.record_btn:SetActive(show)
end

local function ShowDeclareRecord(self, show)
    self.declare_record_btn:SetActive(show)
end

local function ShowRest(self, show)
    self.rest_btn:SetActive(show)
    self:RefreshRestRed()
end

local function RefreshRestRed(self)
    self.rest_red_go:SetActive(DataCenter.GloryManager:CanShowBtnListRestRed())
end

local function OnGroupClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryGroup, self.groupId)
end

local function OnHeroClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroList, { anim = false, UIMainAnim = UIMainAnimType.AllHide }, nil, self.seasonId)
end

local function OnRewardClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonAllianceRewardDisplayMain)
end

local function OnHintClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonHint, { anim = true }, self.seasonId)
end

local function OnRuleClick(self)
    local hintStr = GetTableData(TableName.APS_Season, self.seasonId, "starwar_hint") or ""
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonHint, { anim = true }, self.seasonId, hintStr)
end

local function OnRecordClick(self)
    local showTabs = DataCenter.GloryManager:IsInBattle() and { GloryInfoTab.Rank, GloryInfoTab.History } or { GloryInfoTab.RankHistory, GloryInfoTab.History }
    local actData = DataCenter.GloryManager:GetActData()
    local opponentData = DataCenter.GloryManager:GetOpponentData()
    local param =
    {
        leftAllianceId = LuaEntry.Player.allianceId,
        rightAllianceId = opponentData.allianceId,
        readyTime = actData.readyTime,
    }
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryInfo, { anim = true }, showTabs, param)
end

local function OnDeclareRecordClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryAllianceDeclareRecord)
end

local function OnRestClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryAllianceSetTruce)
end

local function RefreshMigrate(self)
    local showMigrate = false
    if DataCenter.GovernmentManager:IsSelfPresident() then
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
        if table.count(dataList) > 0 then
            local actListData = dataList[1]
            if actListData then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if actListData.startTime < curTime and curTime < actListData.endTime  then
                    showMigrate = true

                end
            end
        end
    end
    self.migrate_btn:SetActive(showMigrate == true)
    if showMigrate then
        local showRed = false
        local data = DataCenter.MigrateDataManager:GetApplyList()
        if data~=nil and table.count(data)>0 then
            showRed = true
        end
        self.migrate_btn_red_dot:SetActive(showRed)
    end
end



local function OnMigrateClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISetMigrationPower)
end

local function OnMissileInfoClick(self)
    UIUtil.ShowIntro(Localization:GetString("302913"), Localization:GetString("302027"), Localization:GetString("309004"))
end

local function SetMissileEnable(self, flag)
    self.isMissileEnable = flag
    self:RefreshMissile()
end

local function RefreshMissile(self)
    if not self.isMissileEnable or not DataCenter.MissileManager:IsSystemOpen() then
        self.missile:SetActive(false)
        return
    end
    local period = DataCenter.GloryManager:GetPeriod()
    local battleState = DataCenter.GloryManager:GetBattleState()
    if period == GloryPeriod.Start and battleState == GloryBattleState.Ongoing then
        self.missile:SetActive(true)
        local maxNum = DataCenter.MissileManager:GetMaxMissileNum()
        local missileInfo = DataCenter.MissileManager:GetMissileInfo(MissileIDs.ALLIANCE_FIGHT_SEND_MISSILE)
        if missileInfo then
            self.missile_num:SetText(missileInfo.num.."/"..maxNum)
        end
    else
        self.missile:SetActive(false)
    end
end

--阵营信息
local function OnClickCamp(self)
    if self.view then
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.CampScore)
        if dataList ~= nil and #dataList > 0 then
            local actData = dataList[1]
            if actData ~= nil then
                self.view:JumpAct(actData.id)
            end
        end
    end
end

--杀敌榜
local function OnClickKillRank(self)
    if self.view then
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.AllianceSeasonForce)
        if dataList ~= nil and #dataList > 0 then
            local actData = dataList[1]
            if actData ~= nil then
                self.view:JumpAct(actData.id)
            end
        end
    end
end

--s5发奖
local function OnClickRewardBtn(self)
    if DataCenter.RobotWarsManager:GetIsOnReward() == true then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonAllianceReward)
    end
end

UIGloryBtnList.OnCreate= OnCreate
UIGloryBtnList.OnDestroy = OnDestroy
UIGloryBtnList.ComponentDefine = ComponentDefine
UIGloryBtnList.ComponentDestroy = ComponentDestroy
UIGloryBtnList.DataDefine = DataDefine
UIGloryBtnList.DataDestroy = DataDestroy
UIGloryBtnList.OnEnable = OnEnable
UIGloryBtnList.OnDisable = OnDisable
UIGloryBtnList.OnAddListener = OnAddListener
UIGloryBtnList.OnRemoveListener = OnRemoveListener

UIGloryBtnList.SetGroupId = SetGroupId
UIGloryBtnList.SetSeasonId = SetSeasonId
UIGloryBtnList.ShowRecord = ShowRecord
UIGloryBtnList.ShowDeclareRecord = ShowDeclareRecord
UIGloryBtnList.ShowRest = ShowRest
UIGloryBtnList.RefreshRestRed = RefreshRestRed

UIGloryBtnList.OnGroupClick = OnGroupClick
UIGloryBtnList.OnHeroClick = OnHeroClick
UIGloryBtnList.OnRewardClick = OnRewardClick
UIGloryBtnList.OnHintClick = OnHintClick
UIGloryBtnList.OnRuleClick = OnRuleClick
UIGloryBtnList.OnRecordClick = OnRecordClick
UIGloryBtnList.OnDeclareRecordClick = OnDeclareRecordClick
UIGloryBtnList.OnRestClick = OnRestClick
UIGloryBtnList.RefreshMigrate = RefreshMigrate
UIGloryBtnList.OnMigrateClick =OnMigrateClick
UIGloryBtnList.RefreshBtnState = RefreshBtnState
UIGloryBtnList.OnMissileInfoClick = OnMissileInfoClick
UIGloryBtnList.RefreshMissile = RefreshMissile
UIGloryBtnList.SetMissileEnable = SetMissileEnable

UIGloryBtnList.OnClickCamp = OnClickCamp
UIGloryBtnList.OnClickKillRank = OnClickKillRank
UIGloryBtnList.OnClickRewardBtn = OnClickRewardBtn

return UIGloryBtnList