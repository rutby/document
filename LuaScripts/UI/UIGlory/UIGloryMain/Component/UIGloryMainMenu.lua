---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/27 20:27
---

local UIGloryMainMenu = BaseClass("UIGloryMainMenu", UIBaseContainer)
local base = UIBaseContainer
local UIWeekTheme = require "UI.UISeasonWeek.Component.UIWeekTheme"
local Localization = CS.GameEntry.Localization

local title_path = "Title"
local desc_path = "Desc"
local theme_path = "List/UIWeekTheme"
local alliance_btn_path = "List/Alliance"
local alliance_text_path = "List/Alliance/AllianceText"
local land_btn_path = "List/Land"
local land_text_path = "List/Land/LandText"
local battle_btn_path = "List/Battle"
local battle_text_path = "List/Battle/BattleText"
local battle_state_bg_path = "List/Battle/BattleStateBg"
local battle_state_text_path = "List/Battle/BattleStateBg/BattleStateText"
local battle_time_path = "List/Battle/BattleStateBg/BattleTime"
local battle_effect_path = "List/Battle/BattleEffect"
local battle_red_path = "List/Battle/BattleRed"
local win_path = "List/Battle/BattleStateBg/Win"
local lose_path = "List/Battle/BattleStateBg/Lose"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UIText, title_path)
    self.title_text:SetLocalText(132032)
    self.desc_text = self:AddComponent(UIText, desc_path)
    self.desc_text:SetLocalText(302780)
    self.theme = self:AddComponent(UIWeekTheme, theme_path)
    self.alliance_btn = self:AddComponent(UIButton, alliance_btn_path)
    self.alliance_btn:SetOnClick(function()
        self:OnAllianceClick()
    end)
    self.alliance_text = self:AddComponent(UIText, alliance_text_path)
    self.alliance_text:SetLocalText(302747)
    self.land_btn = self:AddComponent(UIButton, land_btn_path)
    self.land_btn:SetOnClick(function()
        self:OnLandClick()
    end)
    self.land_text = self:AddComponent(UIText, land_text_path)
    self.land_text:SetLocalText(302781)
    self.battle_btn = self:AddComponent(UIButton, battle_btn_path)
    self.battle_btn:SetOnClick(function()
        self:OnBattleClick()
    end)
    self.battle_text = self:AddComponent(UIText, battle_text_path)
    self.battle_text:SetLocalText(132032)
    self.battle_state_bg_go = self:AddComponent(UIBaseContainer, battle_state_bg_path)
    self.battle_state_text = self:AddComponent(UIText, battle_state_text_path)
    self.battle_time_text = self:AddComponent(UIText, battle_time_path)
    self.battle_effect_go = self:AddComponent(UIBaseContainer, battle_effect_path)
    self.battle_red_go = self:AddComponent(UIBaseContainer, battle_red_path)
    self.win_text = self:AddComponent(UIText, win_path)
    self.win_text:SetLocalText(390186)
    self.lose_text = self:AddComponent(UIText, lose_path)
    self.lose_text:SetLocalText(390187)
end

local function ComponentDestroy(self)
    self.title_text = nil
    self.desc_text = nil
    self.theme = nil
    self.alliance_btn = nil
    self.alliance_text = nil
    self.land_btn = nil
    self.land_text = nil
    self.battle_btn = nil
    self.battle_text = nil
    self.battle_state_bg_go = nil
    self.battle_state_text = nil
    self.battle_time_text = nil
    self.battle_effect_go = nil
    self.battle_red_go = nil
    self.win_text = nil
    self.lose_text = nil
end

local function DataDefine(self)
    self.active = false
    self.period = GloryPeriod.None
    self.switchTime = 0
    self.timer = nil
end

local function DataDestroy(self)
    self.active = nil
    self.period = nil
    self.switchTime = nil
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
    self:ReInit()
end

local function OnDisable(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    self.active = false
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.GloryGetWarData, self.OnGloryGetWarData)
    self:AddUIListener(EventId.GloryGetAct, self.OnGloryGetAct)
    self:AddUIListener(EventId.GlorySetAvoid, self.OnGlorySetAvoid)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.GloryGetWarData, self.OnGloryGetWarData)
    self:RemoveUIListener(EventId.GloryGetAct, self.OnGloryGetAct)
    self:RemoveUIListener(EventId.GlorySetAvoid, self.OnGlorySetAvoid)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self:Refresh()
end

local function Refresh(self)
    if not self.active then
        return
    end
    local periodSwitchTime = 0
    self.period, periodSwitchTime = DataCenter.GloryManager:GetPeriod()
    self.switchTime = 0
    
    local useTimer = false
    local showBattleState = false
    local showBattleEffect = false
    if self.period == GloryPeriod.Unopened then
        self.switchTime = periodSwitchTime
        useTimer = true
        showBattleState = true
    elseif self.period == GloryPeriod.Prepare then
        self.battle_state_text:SetLocalText(302810)
        self.switchTime = periodSwitchTime
        useTimer = true
        showBattleState = true
    elseif self.period == GloryPeriod.Start then
        showBattleState = true
        local battleState, switchTime = DataCenter.GloryManager:GetBattleState()
        if battleState == GloryBattleState.None then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            local weekDay = UITimeManager:GetInstance():GetWeekdayIndex(curTime)
            local list = DataCenter.GloryManager:GetCloseFightDayCurWeek()
            if list~=nil and list[weekDay]~=nil then
                self.battle_state_text:SetLocalText(302969)
            else
                self.battle_state_text:SetLocalText(302813)
            end
        elseif battleState == GloryBattleState.Before then
            self.battle_state_text:SetLocalText(302816)
            self.switchTime = switchTime
            useTimer = true
        elseif battleState == GloryBattleState.Ongoing then
            self.battle_state_text:SetLocalText(302787)
            self.switchTime = switchTime
            useTimer = true
            showBattleEffect = true
        elseif battleState == GloryBattleState.After then
            self.battle_state_text:SetLocalText(302861)
            local battleResult = DataCenter.GloryManager:GetBattleResult()
            self.win_text:SetActive(battleResult == GloryBattleResult.Win)
            self.lose_text:SetActive(battleResult == GloryBattleResult.Lose)
        end
    else
        self.battle_state_bg_go:SetActive(false)
    end
    self.battle_state_bg_go:SetActive(showBattleState)
    self.battle_time_text:SetActive(useTimer and (self.period == GloryPeriod.Start or self.period == GloryPeriod.Prepare))
    self.battle_effect_go:SetActive(showBattleEffect)
    self.battle_red_go:SetActive(DataCenter.GloryManager:GetMenuBattleRedNum() > 0)
    
    if useTimer and self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
        self.timer:Start()
        self:TimerAction()
    elseif not useTimer and self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.switchTime >= curTime then
        local restTime = math.floor(self.switchTime - curTime)
        local restTimeStr = CS.GameEntry.Timer:MilliSecondToFmtString(restTime)
        if self.period == GloryPeriod.Unopened then
            self.battle_state_text:SetLocalText(302011, restTimeStr)
        else
            self.battle_time_text:SetText(restTimeStr)
        end
        CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.battle_state_text.transform)
        CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.battle_time_text.transform)
    else
        self.timer:Stop()
        self.timer = nil
        DataCenter.GloryManager:SendGetWarData()
    end
end

local function OnAllianceClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryAllianceIntelligence)
end

local function OnLandClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonGroundManage)
end

local function OnBattleClick(self)
    if self.period == GloryPeriod.Prepare or self.period == GloryPeriod.Start then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryBattle, { anim = true, UIMainAnim = UIMainAnimType.AllHide })
    else
        UIUtil.ShowTipsId(302109)
    end
end

local function OnGloryGetWarData(self)
    self:Refresh()
end

local function OnGloryGetAct(self)
    self:Refresh()
end

local function OnGlorySetAvoid(self)
    self:Refresh()
end

UIGloryMainMenu.OnCreate= OnCreate
UIGloryMainMenu.OnDestroy = OnDestroy
UIGloryMainMenu.ComponentDefine = ComponentDefine
UIGloryMainMenu.ComponentDestroy = ComponentDestroy
UIGloryMainMenu.DataDefine = DataDefine
UIGloryMainMenu.DataDestroy = DataDestroy
UIGloryMainMenu.OnEnable = OnEnable
UIGloryMainMenu.OnDisable = OnDisable
UIGloryMainMenu.OnAddListener = OnAddListener
UIGloryMainMenu.OnRemoveListener = OnRemoveListener

UIGloryMainMenu.ReInit = ReInit
UIGloryMainMenu.Refresh = Refresh
UIGloryMainMenu.TimerAction = TimerAction

UIGloryMainMenu.OnAllianceClick = OnAllianceClick
UIGloryMainMenu.OnLandClick = OnLandClick
UIGloryMainMenu.OnBattleClick = OnBattleClick

UIGloryMainMenu.OnGloryGetWarData = OnGloryGetWarData
UIGloryMainMenu.OnGloryGetAct = OnGloryGetAct
UIGloryMainMenu.OnGlorySetAvoid = OnGlorySetAvoid

return UIGloryMainMenu