---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/1 11:21
---

local UIGloryMainPreview = BaseClass("UIGloryMainPreview", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIGloryBtnList = require "UI.UIGlory.Component.UIGloryBtnList"
local UIHeroTipsView = require "UI.UIHeroTips.View.UIHeroTipsView"
local title_path = "Root/Title"
local desc_path = "Root/Desc"
local timeBg_path = "Root/Desc/TimeBg"
local time_path = "Root/Desc/TimeBg/Time"
local go_btn_path = "Root/Go"
local go_text_path = "Root/Go/GoText"
local btn_list_path = "Root/UIGloryBtnList"


local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UIText, title_path)
    self.desc_text = self:AddComponent(UIText, desc_path)
    self.time_text = self:AddComponent(UIText, time_path)
    self.timeBg = self:AddComponent(UIBaseContainer,timeBg_path)
    self.go_btn = self:AddComponent(UIButton, go_btn_path)
    self.go_btn:SetOnClick(function()
        self:OnGoClick()
    end)
    self.go_text = self:AddComponent(UIText, go_text_path)
    self.go_text:SetLocalText(110003)
    self.btn_list = self:AddComponent(UIGloryBtnList, btn_list_path)
    
    self._seasonBg_img = self:AddComponent(UIImage,"Img_SeasonBg")
    
    self._s5_rect = self:AddComponent(UIBaseContainer,"Root/Rect_S5")
    self._s5Title_txt = self:AddComponent(UIText,"Root/Rect_S5/Txt_S5Title")
    self._s5Layout2_rect = self:AddComponent(UIBaseContainer,"Root/Rect_S5/layout2")
    self._s5Desc_txt = self:AddComponent(UIText,"Root/Rect_S5/layout2/Txt_S5Desc")
    self._s5Layout1_rect = self:AddComponent(UIBaseContainer,"Root/Rect_S5/layout1")
    self._s5DescInfo_txt = self:AddComponent(UIText,"Root/Rect_S5/layout1/Txt_S5DescInfo")
    self._s5cross1_txt = self:AddComponent(UIText,"Root/Rect_S5/layout1/Txt_cross1")
    self._s5cross2_txt = self:AddComponent(UIText,"Root/Rect_S5/layout2/Txt_cross2")
    self._s5Info_btn = self:AddComponent(UIButton,"Root/Rect_S5/layout2/Txt_S5Desc/Btn_S5Info")
    self._s5Info_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickSFiveInfo(1)
    end)
    
    self._s5Layout3_rect = self:AddComponent(UIBaseContainer,"Root/Rect_S5/layout3")
    self._s5Group_btn = self:AddComponent(UIButton,"Root/Rect_S5/layout3/Btn_S5Group")
    self._s5Group_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickSFiveGroup()
    end)
    self._s5Group_txt = self:AddComponent(UIText,"Root/Rect_S5/layout3/Btn_S5Group/Txt_S5Group")
    self._s5Group_txt:SetLocalText(302806)
    self._s5Info2_btn = self:AddComponent(UIButton,"Root/Rect_S5/layout3/Btn_S5Group/Btn_S5Info2")
    self._s5Info2_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickSFiveInfo(2)
    end)
    self._s5SeasonTime_txt = self:AddComponent(UIText,"Root/Rect_S5/layout3/Txt_S5SeasonTime")

    self.goSFive_btn = self:AddComponent(UIButton, "Root/Rect_S5/Btn_GoS5")
    self.goSFive_text = self:AddComponent(UIText, "Root/Rect_S5/Btn_GoS5/Txt_GoS5")
    self.goSFive_text:SetLocalText(111205)
    self.goSFive_btn:SetOnClick(function()
        self:OnGoClick()
    end)
end

local function ComponentDestroy(self)
    self.title_text = nil
    self.desc_text = nil
    self.time_text = nil
    self.go_btn = nil
    self.go_text = nil
    self.btn_list = nil
end

local function DataDefine(self)
    self.seasonId = 0
    self.activityData = nil
    self.timer = nil
    self.timer_actionSFiveState = function(temp)
        self:RefreshSFiveStateTime()
    end
    self.timer_actionSFiveSeasonEnd = function(temp)
        self:RefreshSFiveSeasonEndTime(temp)
    end
end

local function DataDestroy(self)
    self.seasonId = 0
    self.activityData = nil
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    self:DeleteSFiveSeasonEndTimer()
    self:DeleteSFiveStateTimer()
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

--param.showPreviewGo   预告false,正式true
local function SetData(self, actId, param)
    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(actId)
    self.activityData = DataCenter.ActivityListDataManager:GetActivityDataById(actId)
    if param.showPreviewGo and LuaEntry.Player:IsInAlliance() then
        return
    end
    local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
    self.btn_list:SetGroupId(self.activityData.groupId)
    self.go_btn:SetActive(param.showPreviewGo and seasonId ~= 5)
    self.title_text:SetActive(true)
    self.desc_text:SetActive(true)
    self._s5_rect:SetActive(false)
    self.timeBg:SetActive(true)
    self.goSFive_btn:SetActive(param.showPreviewGo and seasonId == 5)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
        self.timer:Start()
    end
    
    local template = DataCenter.SeasonGroupManager:GetTemplateById(self.activityData.groupId)
    if not template then
        return
    end
    self.seasonId = template.season + 1
    local bgImg = string.format("Assets/Main/TextureEx/UIGloryLeague/%s.png", GetTableData(TableName.APS_Season,(template.season + 1), 'season_bg'))
    local str =  GetTableData(TableName.APS_Season,(template.season + 1), 'season_des')
    --正式的所有配置直接取当前赛季
    if param.showPreviewGo then
        self.seasonId = seasonId
        str = GetTableData(TableName.APS_Season,seasonId, 'season_des')
        bgImg =  string.format("Assets/Main/TextureEx/UIGloryLeague/%s.png", GetTableData(TableName.APS_Season,seasonId, 'season_bg'))
        if seasonId == 5 then
            self:SetSFiveState(str)
        end
    end
    if not param.showPreviewGo then
        if (template.season + 1) == 5 then
            Setting:SetBool(SettingKeys.GLORY_PREVIEW_FIVE_GROUP..LuaEntry.Player.uid,true)
            EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
            self:SetSFiveState(str)
            SFSNetwork.SendMessage(MsgDefines.GetEdenGroupInfo)
            self:CheckSFiveState()
        end
    end
    self._seasonBg_img:LoadSprite(bgImg)   
    local dialog = string.split(str,"|")
    self.title_text:SetLocalText(dialog[1])
    self.desc_text:SetLocalText(dialog[2])
    self:TimerAction()
end

local function SetSFiveState(self,str)
    self._s5_rect:SetActive(true)
    self.title_text:SetActive(false)
    self.desc_text:SetActive(false)
    local dialog = string.split(str,"|")
    self._s5Title_txt:SetLocalText(dialog[1])
    self._s5DescInfo_txt:SetLocalText(dialog[2])
    self.timeBg:SetActive(false)
    self._s5Layout1_rect:SetActive(false)
    self._s5Layout2_rect:SetActive(false)
    self._s5Layout3_rect:SetActive(false)
end

local function CheckSFiveState(self)
    self._s5Layout1_rect:SetActive(false)
    self._s5Layout2_rect:SetActive(false)
    self._s5Layout3_rect:SetActive(false)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime < self.activityData.matchTime then
        --新赛季即将开启
        self._s5Layout1_rect:SetActive(true)
        if self.activityData.WorldSeasonStartTime and self.activityData.WorldSeasonStartTime > 0 then
            self._s5cross1_txt:SetActive(true)
            self._s5cross1_txt:SetLocalText(111208,UITimeManager:GetInstance():TimeStampToTimeForServer(self.activityData.WorldSeasonStartTime))
        else
            self._s5cross1_txt:SetActive(false)
        end
    elseif self.activityData.matchTime <= curTime and curTime < self.activityData.showMatchGroupTime then
        --显示倒计时
        self._s5Layout2_rect:SetActive(true)
        if self.activityData.WorldSeasonStartTime and self.activityData.WorldSeasonStartTime > 0 then
            self._s5cross2_txt:SetActive(true)
            self._s5cross2_txt:SetLocalText(111208,UITimeManager:GetInstance():TimeStampToTimeForServer(self.activityData.WorldSeasonStartTime))
        else
            self._s5cross2_txt:SetActive(false)
        end
        self:DeleteSFiveStateTimer()
        self:RefreshSFiveStateTime()
        self:AddSFiveStateTimer()
    elseif self.activityData.showMatchGroupTime <= curTime then
        --显示分组
        self._s5Layout3_rect:SetActive(true)
        self._s5SeasonTime_txt:SetActive(false)
        local settleTime = self.activityData.WorldSeasonStartTime
        if settleTime and settleTime ~= 0 then
            self._s5SeasonTime_txt:SetActive(true)
            self:DeleteSFiveSeasonEndTimer()
            self:RefreshSFiveSeasonEndTime(settleTime)
            self:AddSFiveSeasonEndTimer(settleTime)
        end
    end
end

--{{{S5相关计时
local function DeleteSFiveStateTimer(self)
    if self.timer_sFive_state ~= nil then
        self.timer_sFive_state:Stop()
        self.timer_sFive_state = nil
    end
end

local function AddSFiveStateTimer(self)
    if self.timer_sFive_state == nil then
        self.timer_sFive_state = TimerManager:GetInstance():GetTimer(1, self.timer_actionSFiveState , self, false,false,false)
    end
    self.timer_sFive_state:Start()
end

local function RefreshSFiveStateTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local resTime = self.activityData.showMatchGroupTime - curTime
    if resTime <= 0 then
        self._s5Desc_txt:SetActive(false)
        self:DeleteSFiveStateTimer()
        self:CheckSFiveState()
        SFSNetwork.SendMessage(MsgDefines.GetEdenGroupInfo)
    else
        self._s5Desc_txt:SetLocalText(111060,UITimeManager:GetInstance():MilliSecondToFmtString(resTime))
    end
end

local function DeleteSFiveSeasonEndTimer(self)
    if self.timer_sFive_seasonEnd ~= nil then
        self.timer_sFive_seasonEnd:Stop()
        self.timer_sFive_seasonEnd = nil
    end
end

local function AddSFiveSeasonEndTimer(self,settleTime)
    if self.timer_sFive_seasonEnd == nil then
        self.timer_sFive_seasonEnd = TimerManager:GetInstance():GetTimer(1, self.timer_actionSFiveSeasonEnd , settleTime, false,false,false)
    end
    self.timer_sFive_seasonEnd:Start()
end

local function RefreshSFiveSeasonEndTime(self,settleTime)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local resTime = settleTime - curTime
    if resTime <= 0 then
        self._s5SeasonTime_txt:SetActive(false)
        self:DeleteSFiveSeasonEndTimer()
    else
        self._s5SeasonTime_txt:SetLocalText(111061,UITimeManager:GetInstance():MilliSecondToFmtString(resTime))
    end
end
--}}}

local function SetSeasonId(self,isFormal)
    self.btn_list:SetSeasonId(self.seasonId,isFormal)
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local restTime = self.activityData.endTime - curTime
    if restTime >= 0 then
        local restTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(restTime)
        self.time_text:SetText(restTimeStr)
    else
        self.timeBg:SetActive(false)
        if self.timer then
            self.timer:Stop()
            self.timer = nil
        end
    end
end

local function OnGoClick(self)
    UIUtil.ShowTipsId(371059)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
end

local function OnClickSFiveInfo(self,index)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local param = UIHeroTipsView.Param.New()
    param.heroId = heroId
    param.title = Localization:GetString("111142")
    param.content = Localization:GetString("111143")
    param.dir = UIHeroTipsView.Direction.ABOVE
    param.defWidth = 300
    param.pivot = 0.5
    if index == 1 then
        param.position = self._s5Info_btn.gameObject.transform.position + Vector3.New(0, 20, 0) * scaleFactor
        param.bindObject = self._s5Info_btn.gameObject
    else
        param.position = self._s5Info2_btn.gameObject.transform.position + Vector3.New(0, 20, 0) * scaleFactor
        param.bindObject = self._s5Info2_btn.gameObject 
    end
    
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTips, { anim = false }, param)
end

--阵营分组
local function OnClickSFiveGroup(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryEdenGroup, { anim = true })
end

UIGloryMainPreview.OnCreate= OnCreate
UIGloryMainPreview.OnDestroy = OnDestroy
UIGloryMainPreview.ComponentDefine = ComponentDefine
UIGloryMainPreview.ComponentDestroy = ComponentDestroy
UIGloryMainPreview.DataDefine = DataDefine
UIGloryMainPreview.DataDestroy = DataDestroy
UIGloryMainPreview.OnEnable = OnEnable
UIGloryMainPreview.OnDisable = OnDisable
UIGloryMainPreview.OnAddListener = OnAddListener
UIGloryMainPreview.OnRemoveListener = OnRemoveListener

UIGloryMainPreview.SetData = SetData
UIGloryMainPreview.SetSeasonId = SetSeasonId
UIGloryMainPreview.TimerAction = TimerAction

UIGloryMainPreview.OnGoClick = OnGoClick

UIGloryMainPreview.CheckSFiveState = CheckSFiveState
UIGloryMainPreview.SetSFiveState = SetSFiveState
UIGloryMainPreview.DeleteSFiveStateTimer = DeleteSFiveStateTimer
UIGloryMainPreview.AddSFiveStateTimer = AddSFiveStateTimer
UIGloryMainPreview.RefreshSFiveStateTime = RefreshSFiveStateTime
UIGloryMainPreview.DeleteSFiveSeasonEndTimer = DeleteSFiveSeasonEndTimer
UIGloryMainPreview.AddSFiveSeasonEndTimer = AddSFiveSeasonEndTimer
UIGloryMainPreview.RefreshSFiveSeasonEndTime = RefreshSFiveSeasonEndTime
UIGloryMainPreview.OnClickSFiveInfo = OnClickSFiveInfo
UIGloryMainPreview.OnClickSFiveGroup = OnClickSFiveGroup

return UIGloryMainPreview