---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/28 10:54
---

local UIGloryInfo = BaseClass("UIGloryInfo", UIBaseView)
local base = UIBaseView
local UIGloryInfoRank = require "UI.UIGlory.UIGloryInfo.Component.UIGloryInfoRank"
local UIGloryInfoHistory = require "UI.UIGlory.UIGloryInfo.Component.UIGloryInfoHistory"
local UIGloryInfoSummary = require "UI.UIGlory.UIGloryInfo.Component.UIGloryInfoSummary"
local UIGloryInfoSummaryHistory = require "UI.UIGlory.UIGloryInfo.Component.UIGloryInfoSummaryHistory"
local Localization = CS.GameEntry.Localization

local return_path = "UICommonPopUpTitle/panel"
local close_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local tab_path = "TabList/Tab%s"
local tab_select_path = "TabList/Tab%s/Tab%sBg/Tab%sSelect"
local tab_name_path = "TabList/Tab%s/Tab%sName"
local rank_path = "UIGloryInfoRank"
local history_path = "UIGloryInfoHistory"
local summary_path = "UIGloryInfoSummary"
local summary_history_path = "UIGloryInfoSummaryHistory"
local empty_path = "Empty"

local TAB_COUNT = 5

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    self.summary:SetActive(false)
    self.rank:SetActive(false)
    self.history:SetActive(false)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.title_text = self:AddComponent(UIText, title_path)
    self.title_text:SetLocalText(302820)
    self.tab_btns = {}
    self.tab_select_goes = {}
    self.tab_name_texts = {}
    for i = 1, TAB_COUNT do
        self.tab_btns[i] = self:AddComponent(UIButton, string.format(tab_path, i))
        self.tab_btns[i]:SetOnClick(function()
            self:OnTabClick(i)
        end)
        self.tab_select_goes[i] = self:AddComponent(UIBaseContainer, string.format(tab_select_path, i, i, i))
        self.tab_name_texts[i] = self:AddComponent(UIText, string.format(tab_name_path, i, i))
    end
    self.tab_name_texts[GloryInfoTab.Summary]:SetLocalText(302821)
    self.tab_name_texts[GloryInfoTab.SummaryHistory]:SetLocalText(302821)
    self.tab_name_texts[GloryInfoTab.Rank]:SetLocalText(302822)
    self.tab_name_texts[GloryInfoTab.RankHistory]:SetLocalText(302822)
    self.tab_name_texts[GloryInfoTab.History]:SetLocalText(302823)
    self.rank = self:AddComponent(UIGloryInfoRank, rank_path)
    self.history = self:AddComponent(UIGloryInfoHistory, history_path)
    self.summary = self:AddComponent(UIGloryInfoSummary, summary_path)
    self.summary_history = self:AddComponent(UIGloryInfoSummaryHistory, summary_history_path)
    self.empty_text = self:AddComponent(UIText, empty_path)
    self.empty_text:SetLocalText(120178)
end

local function ComponentDestroy(self)
    self.return_btn = nil
    self.close_btn = nil
    self.title_text = nil
    self.tab_btns = nil
    self.tab_select_goes = nil
    self.tab_name_texts = nil
    self.rank = nil
    self.history = nil
    self.summary = nil
    self.summary_history = nil
    self.empty_text = nil
end

local function DataDefine(self)
    self.showTabs = {}
    self.param = {}
    self.selectIndex = GloryInfoTab.None
end

local function DataDestroy(self)
    self.showTabs = nil
    self.param = nil
    self.selectIndex = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.showTabs, self.param = self:GetUserData()
    for k, v in ipairs(self.tab_select_goes) do
        self:SetToggleTabSelect(k, false)
    end
    local firstTab = GloryInfoTab.None
    for i = 1, TAB_COUNT do
        if table.hasvalue(self.showTabs, i) then
            self.tab_btns[i]:SetActive(true)
            if firstTab == GloryInfoTab.None then
                firstTab = i
            end
        else
            self.tab_btns[i]:SetActive(false)
        end
    end
    if firstTab ~= GloryInfoTab.None then
        self:OnTabClick(firstTab)
    end
end

local function ShowEmpty(self, show)
    self.empty_text:SetActive(show)
end

local function OnTabClick(self, index)
    if self.selectIndex == index then
        return
    end
    self:SetToggleTabSelect(self.selectIndex, false)
    self.selectIndex = index
    self:SetToggleTabSelect(self.selectIndex, true)
    for i = 1, TAB_COUNT do
        self.tab_select_goes[i]:SetActive(i == index)
    end
    self:ShowEmpty(false)
    self.summary:SetActive(index == GloryInfoTab.Summary)
    self.summary_history:SetActive(index == GloryInfoTab.SummaryHistory)
    self.rank:SetActive(index == GloryInfoTab.Rank or index == GloryInfoTab.RankHistory)
    self.history:SetActive(index == GloryInfoTab.History)
    if index == GloryInfoTab.Summary then
        self.summary:ReInit()
    elseif index == GloryInfoTab.SummaryHistory then
        self.summary_history:ReInit(self.param.historyData)
    elseif index == GloryInfoTab.Rank then
        self.rank:ReInit(self.param.leftAllianceId, self.param.rightAllianceId)
    elseif index == GloryInfoTab.RankHistory then
        self.rank:ReInit(self.param.leftAllianceId, self.param.rightAllianceId, self.param.readyTime)
    elseif index == GloryInfoTab.History then
        self.history:ReInit()
    end
end

function UIGloryInfo:SetToggleTabSelect(tabType, isSelect)
    local nameText =  self.tab_name_texts[tabType]
    if nameText ~= nil and nameTextShadow ~= nil then
        if isSelect then
            nameText:SetColor(TabSelectColor)
            nameTextShadow:AllEnable(true)
            nameTextShadow:SetAllColor(TabSelectShadow)
            nameText:SetAnchoredPosition(TabSelectHeightVec)
        else
            nameText:SetColor(TabUnSelectColor)
            nameTextShadow:AllEnable(false)
            nameText:SetAnchoredPosition(TabUnSelectHeightVec)
        end
    end
end

UIGloryInfo.OnCreate = OnCreate
UIGloryInfo.OnDestroy = OnDestroy
UIGloryInfo.OnEnable = OnEnable
UIGloryInfo.OnDisable = OnDisable
UIGloryInfo.ComponentDefine = ComponentDefine
UIGloryInfo.ComponentDestroy = ComponentDestroy
UIGloryInfo.DataDefine = DataDefine
UIGloryInfo.DataDestroy = DataDestroy
UIGloryInfo.OnAddListener = OnAddListener
UIGloryInfo.OnRemoveListener = OnRemoveListener

UIGloryInfo.ReInit = ReInit
UIGloryInfo.ShowEmpty = ShowEmpty

UIGloryInfo.OnTabClick = OnTabClick

return UIGloryInfo