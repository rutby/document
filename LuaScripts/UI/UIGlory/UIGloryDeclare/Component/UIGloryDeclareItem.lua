---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/1 15:23
---

local UIGloryDeclareItem = BaseClass("UIGloryDeclareItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local AllianceFlagItem = require "UI.UIAlliance.UIAllianceFlag.Component.AllianceFlagItem"

local rank_path = "Rank"
local rank_icon_path = "RankIcon"
local alliance_name_path = "AllianceName"
local power_path = "Power"
local score_path = "Score"
local alliance_flag_path = "AllianceFlag"
local declare_btn_path = "Declare"
local declare_text_path = "Declare/DeclareText"
local declare_cost_path = "Declare/DeclareCost"
local reason_path = "Reason"

local DeclareState =
{
    Yes = 1,
    Self = 2,
    Avoid = 3,
    Battle = 4,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.rank_text = self:AddComponent(UIText, rank_path)
    self.rank_icon_image = self:AddComponent(UIImage, rank_icon_path)
    self.alliance_name_text = self:AddComponent(UIText, alliance_name_path)
    self.power_text = self:AddComponent(UIText, power_path)
    self.score_text = self:AddComponent(UIText, score_path)
    self.alliance_flag = self:AddComponent(AllianceFlagItem, alliance_flag_path)
    self.declare_btn = self:AddComponent(UIButton, declare_btn_path)
    self.declare_btn:SetOnClick(function()
        self:OnDeclareClick()
    end)
    self.declare_text = self:AddComponent(UIText, declare_text_path)
    self.declare_text:SetLocalText(302812)
    self.declare_cost_text = self:AddComponent(UIText, declare_cost_path)
    self.reason_text = self:AddComponent(UIText, reason_path)
end

local function ComponentDestroy(self)
    self.rank_text = nil
    self.rank_icon_image = nil
    self.alliance_name_text = nil
    self.power_text = nil
    self.score_text = nil
    self.alliance_flag = nil
    self.declare_btn = nil
    self.declare_text = nil
    self.declare_cost_text = nil
    self.reason_text = nil
end

local function DataDefine(self)
    self.data = nil
    self.cost = 0
end

local function DataDestroy(self)
    self.data = nil
    self.cost = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function SetData(self, data)
    self.data = data -- GloryAllianceData
    self.cost = DataCenter.GloryManager:GetDeclareCost()
    if data.rank <= 3 then
        self.rank_text:SetActive(false)
        self.rank_icon_image:SetActive(true)
        self.rank_icon_image:LoadSprite("Assets/Main/Sprites/UI/UIAlliance/rank/UIalliance_rankingbg0" .. data.rank)
    else
        self.rank_text:SetActive(true)
        self.rank_text:SetText(data.rank)
        self.rank_icon_image:SetActive(false)
    end
    self.alliance_name_text:SetText(UIUtil.GetAllianceWholeName(data.serverId, data.abbr, data.name))
    self.power_text:SetText(string.GetFormattedSeperatorNum(data.power))
    self.score_text:SetText(string.GetFormattedSeperatorNum(data.score))
    self.alliance_flag:SetData(data.icon)
    self.declare_cost_text:SetText(string.GetFormattedSeperatorNum(self.cost))
    local state = self:GetDeclareState()
    if state == DeclareState.Yes then
        self.declare_btn:SetActive(true)
        self.reason_text:SetActive(false)
    elseif state == DeclareState.Self then
        self.declare_btn:SetActive(false)
        self.reason_text:SetActive(false)
    elseif state == DeclareState.Avoid then
        self.declare_btn:SetActive(false)
        self.reason_text:SetActive(true)
        self.reason_text:SetLocalText(302871)
    elseif state == DeclareState.Battle then
        self.declare_btn:SetActive(false)
        self.reason_text:SetActive(true)
        self.reason_text:SetLocalText(302865)
    end
end

local function GetDeclareState(self)
    if self.data.allianceId == LuaEntry.Player.allianceId then
        return DeclareState.Self
    end
    --if not string.IsNullOrEmpty(self.data.avoidTimeInfo) then
    --    local strs = string.split(self.data.avoidTimeInfo, "_")
    --    if #strs == 2 then
    --        local spls1 = string.split(strs[1], ":")
    --        local spls2 = string.split(strs[2], ":")
    --        if #spls1 == 2 and #spls2 == 2 then
    --            local curSec = UITimeManager:GetInstance():GetServerSeconds()
    --            local sec = curSec % OneDayTime
    --            local avoidStartSec = tonumber(spls1[1]) * 3600 + tonumber(spls1[2]) * 60
    --            local avoidEndSec = tonumber(spls2[1]) * 3600 + tonumber(spls2[2]) * 60
    --            if sec >= avoidStartSec and sec <= avoidEndSec then
    --                return DeclareState.Avoid
    --            end
    --        end
    --    end
    --end
    if not string.IsNullOrEmpty(self.data.vsAllianceId) then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, self.data.startTime // 1000)
        if sameDay then
            return DeclareState.Battle
        end
    end
    return DeclareState.Yes
end

local function OnDeclareClick(self)
    if DataCenter.GloryManager:HasEnoughTimeToDeclare() then
        local haveCount = DataCenter.AllianceStorageManager:GetResCountByRewardType(RewardType.SAPPHIRE)
        if haveCount >= self.cost then
            DataCenter.GloryManager:SendDeclareWar(self.data.allianceId, GloryDeclareType.List)
            self.view.ctrl:CloseSelf()
        else
            UIUtil.ShowTipsId(120020)
        end
    else
        UIUtil.ShowTipsId(302842)
    end
end

UIGloryDeclareItem.OnCreate= OnCreate
UIGloryDeclareItem.OnDestroy = OnDestroy
UIGloryDeclareItem.ComponentDefine = ComponentDefine
UIGloryDeclareItem.ComponentDestroy = ComponentDestroy
UIGloryDeclareItem.DataDefine = DataDefine
UIGloryDeclareItem.DataDestroy = DataDestroy
UIGloryDeclareItem.OnEnable = OnEnable
UIGloryDeclareItem.OnDisable = OnDisable
UIGloryDeclareItem.OnAddListener = OnAddListener
UIGloryDeclareItem.OnRemoveListener = OnRemoveListener

UIGloryDeclareItem.SetData = SetData
UIGloryDeclareItem.GetDeclareState = GetDeclareState
UIGloryDeclareItem.OnDeclareClick = OnDeclareClick

return UIGloryDeclareItem