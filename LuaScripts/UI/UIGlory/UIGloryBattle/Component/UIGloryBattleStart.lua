---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/28 10:55
---

local UIGloryBattleStart = BaseClass("UIGloryBattleStart", UIBaseContainer)
local base = UIBaseContainer
local UIGloryBattleTop = require "UI.UIGlory.UIGloryBattle.Component.UIGloryBattleTop"
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local Localization = CS.GameEntry.Localization

local battle_top_path = "UIGloryBattleTop"
local top_path = "Top"
local head_path = "Top/UIPlayerHead/HeadIcon"
local head_fg_path = "Top/UIPlayerHead/Foreground"
local name_path = "Top/Name"
local alliance_name_path = "Top/AllianceName"
local point_desc_path = "Top/PointDesc"
local point_path = "Top/Point"
local sex_path = "Top/Sex"
local line_desc_path = "Bottom/Line%s/Line%sDesc"
local line_left_val_path = "Bottom/Line%s/Line%sLeftVal"
local line_right_val_path = "Bottom/Line%s/Line%sRightVal"
local front_btn_path = "BtnList/Front"
local front_text_path = "BtnList/Front/FrontText"
local find_btn_path = "BtnList/Find"
local find_text_path = "BtnList/Find/FindText"
local win_path = "Win"
local lose_path = "Lose"

local LINE_COUNT = 3

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.battle_top = self:AddComponent(UIGloryBattleTop, battle_top_path)
    self.battle_top.view = self.view
    self.top_go = self:AddComponent(UIBaseContainer, top_path)
    self.head = self:AddComponent(UIPlayerHead, head_path)
    self.head_fg_image = self:AddComponent(UIImage, head_fg_path)
    self.name_text = self:AddComponent(UIText, name_path)
    self.alliance_name_text = self:AddComponent(UIText, alliance_name_path)
    self.point_desc_text = self:AddComponent(UIText, point_desc_path)
    self.point_desc_text:SetLocalText(302042)
    self.point_text = self:AddComponent(UIText, point_path)
    self.sex_image = self:AddComponent(UIImage, sex_path)
    self.line_desc_texts = {}
    self.line_left_val_texts = {}
    self.line_right_val_texts = {}
    for i = 1, LINE_COUNT do
        self.line_desc_texts[i] = self:AddComponent(UIText, string.format(line_desc_path, i, i))
        self.line_left_val_texts[i] = self:AddComponent(UIText, string.format(line_left_val_path, i, i))
        self.line_right_val_texts[i] = self:AddComponent(UIText, string.format(line_right_val_path, i, i))
    end
    self.line_desc_texts[1]:SetLocalText(302828)
    self.line_desc_texts[2]:SetLocalText(302829)
    self.line_desc_texts[3]:SetLocalText(302830)
    self.front_btn = self:AddComponent(UIButton, front_btn_path)
    self.front_btn:SetOnClick(function()
        self:OnFrontClick()
    end)
    self.front_text = self:AddComponent(UIText, front_text_path)
    self.front_text:SetLocalText(302831)
    self.find_btn = self:AddComponent(UIButton, find_btn_path)
    self.find_btn:SetOnClick(function()
        self:OnFindClick()
    end)
    self.find_text = self:AddComponent(UIText, find_text_path)
    self.find_text:SetLocalText(302873)
    self.win_text = self:AddComponent(UIText, win_path)
    self.win_text:SetLocalText(390186)
    self.lose_text = self:AddComponent(UIText, lose_path)
    self.lose_text:SetLocalText(390187)
end

local function ComponentDestroy(self)
    self.battle_top = nil
    self.top_go = nil
    self.head = nil
    self.head_fg_image = nil
    self.name_text = nil
    self.alliance_name_text = nil
    self.point_desc_text = nil
    self.point_text = nil
    self.sex_image = nil
    self.line_desc_texts = nil
    self.line_left_val_texts = nil
    self.line_right_val_texts = nil
    self.front_btn = nil
    self.front_text = nil
    self.find_btn = nil
    self.find_text = nil
    self.win_text = nil
    self.lose_text = nil
end

local function DataDefine(self)
    
end

local function DataDestroy(self)
    
end

local function OnEnable(self)
    base.OnEnable(self)
    self:Refresh()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function Refresh(self)
    local actData = DataCenter.GloryManager:GetActData()
    if actData == nil then
        return
    end
    local myData = actData:GetMyData()
    local opponentData = actData:GetOpponentData()
    if myData == nil or opponentData == nil then
        return
    end
    self.line_left_val_texts[1]:SetText(string.GetFormattedSeperatorNum(toInt(myData.crashtc)))
    self.line_left_val_texts[2]:SetText(string.GetFormattedSeperatorNum(toInt(myData.crashwb)))
    self.line_left_val_texts[3]:SetText(string.GetFormattedSeperatorNum(toInt(myData.occupy)))
    self.line_right_val_texts[1]:SetText(string.GetFormattedSeperatorNum(toInt(opponentData.crashtc)))
    self.line_right_val_texts[2]:SetText(string.GetFormattedSeperatorNum(toInt(opponentData.crashwb)))
    self.line_right_val_texts[3]:SetText(string.GetFormattedSeperatorNum(toInt(opponentData.occupy)))
    
    local battleResult = DataCenter.GloryManager:GetBattleResult()
    self.win_text:SetActive(battleResult == GloryBattleResult.Win)
    self.lose_text:SetActive(battleResult == GloryBattleResult.Lose)
    self.find_btn:SetActive(battleResult == GloryBattleResult.None)
    
    -- mvp
    local mvpData
    if myData:HasMvp() and not opponentData:HasMvp() then
        mvpData = myData
    elseif not myData:HasMvp() and opponentData:HasMvp() then
        mvpData = opponentData
    elseif myData:HasMvp() and opponentData:HasMvp() then
        if myData.mvp.score > opponentData.mvp.score then
            mvpData = myData
        elseif myData.mvp.score < opponentData.mvp.score then
            mvpData = opponentData
        else
            if myData.attack == 1 then
                mvpData = myData
            else
                mvpData = opponentData
            end
        end
    end
    if mvpData then
        self.top_go:SetActive(true)
        local mvp = mvpData.mvp
        self.head:SetData(mvp.uid, mvp.pic, mvp.picVer)
        local headFrame = DataCenter.DecorationDataManager:GetHeadFrame(mvp.headSkinId, mvp.headSkinET)
        if headFrame then
            self.head_fg_image:SetActive(true)
            self.head_fg_image:LoadSprite(headFrame)
        else
            self.head_fg_image:SetActive(false)
        end
        self.name_text:SetText(mvp.name)
        self.alliance_name_text:SetText(UIUtil.GetAllianceWholeName(mvpData.serverId, mvpData.abbr, mvpData.alName))
        self.point_text:SetText(string.GetFormattedSeperatorNum(mvp.score))
        self.sex_image:LoadSprite(SexUtil.GetSexIconName(mvp.sex))
    else
        self.top_go:SetActive(false)
    end
end

local function OnFrontClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryFront)
end

local function OnFindClick(self)
    DataCenter.GloryManager:GoToOpponent()
end

UIGloryBattleStart.OnCreate= OnCreate
UIGloryBattleStart.OnDestroy = OnDestroy
UIGloryBattleStart.ComponentDefine = ComponentDefine
UIGloryBattleStart.ComponentDestroy = ComponentDestroy
UIGloryBattleStart.DataDefine = DataDefine
UIGloryBattleStart.DataDestroy = DataDestroy
UIGloryBattleStart.OnEnable = OnEnable
UIGloryBattleStart.OnDisable = OnDisable
UIGloryBattleStart.OnAddListener = OnAddListener
UIGloryBattleStart.OnRemoveListener = OnRemoveListener

UIGloryBattleStart.Refresh = Refresh

UIGloryBattleStart.OnFrontClick = OnFrontClick
UIGloryBattleStart.OnFindClick = OnFindClick

return UIGloryBattleStart