---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/9 17:18
---

local UIGloryBattleTop = BaseClass("UIGloryBattleTop", UIBaseContainer)
local base = UIBaseContainer
local AllianceFlagItem = require "UI.UIAlliance.UIAllianceFlag.Component.AllianceFlagItem"
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local Localization = CS.GameEntry.Localization

local title_path = "Title"
local center_desc_path = "Hori/CenterDesc"
local time_path = "Hori/Time"
local left_alliance_flag_path = "LeftAllianceFlag"
local left_alliance_name_path = "LeftAllianceName"
local left_alliance_score_path = "LeftAllianceScore"
local left_alliance_score_desc_path = "LeftAllianceScoreDesc"
local left_score_add_path = "LeftScoreAdd"
local score_info_path = "LeftAllianceScore/ScoreInfo"
local right_alliance_flag_path = "RightAllianceFlag"
local right_alliance_flag_empty_path = "RightAllianceFlagEmpty"
local right_alliance_name_path = "RightAllianceName"
local right_alliance_score_path = "RightAllianceScore"
local right_alliance_score_desc_path = "RightAllianceScoreDesc"
local right_score_add_path = "RightScoreAdd"

local ScoreType =
{
    Occupy = 93,
    CrashBuilding = 94,
    DamageBuilding = 95,
    DamageCenter = 96,
    CrashCenter = 97,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UIText, title_path)
    self.title_text:SetLocalText(132032)
    self.center_desc_text = self:AddComponent(UIText, center_desc_path)
    self.time_text = self:AddComponent(UIText, time_path)
    self.left_alliance_flag = self:AddComponent(AllianceFlagItem, left_alliance_flag_path)
    self.left_alliance_name_text = self:AddComponent(UIText, left_alliance_name_path)
    self.left_alliance_score_text = self:AddComponent(UIText, left_alliance_score_path)
    self.left_alliance_score_desc_text = self:AddComponent(UIText, left_alliance_score_desc_path)
    self.left_alliance_score_desc_text:SetLocalText(302818)
    self.left_score_add_text = self:AddComponent(UIText, left_score_add_path)
    self.score_info_btn = self:AddComponent(UIButton, score_info_path)
    self.score_info_btn:SetOnClick(function()
        self:OnScoreInfoClick()
    end)
    self.right_alliance_flag = self:AddComponent(AllianceFlagItem, right_alliance_flag_path)
    self.right_alliance_flag_empty_go = self:AddComponent(UIBaseContainer, right_alliance_flag_empty_path)
    self.right_alliance_name_text = self:AddComponent(UIText, right_alliance_name_path)
    self.right_alliance_score_text = self:AddComponent(UIText, right_alliance_score_path)
    self.right_alliance_score_desc_text = self:AddComponent(UIText, right_alliance_score_desc_path)
    self.right_alliance_score_desc_text:SetLocalText(302818)
    self.right_score_add_text = self:AddComponent(UIText, right_score_add_path)
end

local function ComponentDestroy(self)
    self.title_text = nil
    self.center_desc_text = nil
    self.time_text = nil
    self.left_alliance_flag = nil
    self.left_alliance_name_text = nil
    self.left_alliance_score_text = nil
    self.left_alliance_score_desc_text = nil
    self.left_score_add_text = nil
    self.score_info_btn = nil
    self.right_alliance_flag = nil
    self.right_alliance_flag_empty_go = nil
    self.right_alliance_name_text = nil
    self.right_alliance_score_text = nil
    self.right_alliance_score_desc_text = nil
    self.right_score_add_text = nil
end

local function DataDefine(self)
    self.timer = nil
    self.period = GloryPeriod.None
    self.switchTime = 0
    self.battleState = GloryBattleState.None
end

local function DataDestroy(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    self.period = nil
    self.switchTime = nil
    self.battleState = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self:Refresh()
end

local function OnDisable(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.GloryGetAct, self.OnGloryGetAct)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.GloryGetAct, self.OnGloryGetAct)
    base.OnRemoveListener(self)
end

local function Refresh(self)
    self.period, self.switchTime = DataCenter.GloryManager:GetPeriod()
    self.battleState = DataCenter.GloryManager:GetBattleState()
    
    local allianceData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
    self.left_alliance_flag:SetData(allianceData.icon)
    self.left_alliance_name_text:SetText(UIUtil.GetAllianceWholeName(allianceData.ownerServerId, allianceData.abbr, allianceData.allianceName))
    
    local actData = DataCenter.GloryManager:GetActData()
    local myData = nil
    local opponentData = nil
    if actData then
        myData = actData:GetMyData()
        opponentData = actData:GetOpponentData()
    end
    if myData then
        self.left_alliance_score_text:SetActive(true)
        self.left_alliance_score_text:SetText(string.GetFormattedSeperatorNum(myData.score))
        self.left_alliance_score_desc_text:SetActive(true)
        self.left_score_add_text:SetActive(true)
        self.left_score_add_text:SetText(string.format("%s: %s%%", Localization:GetString("302819"), toInt(myData.territoryScoreAdd)))
    else
        self.left_alliance_score_text:SetActive(false)
        self.left_alliance_score_desc_text:SetActive(false)
        self.left_score_add_text:SetActive(false)
    end
    if opponentData then
        self.right_alliance_flag:SetActive(true)
        self.right_alliance_flag_empty_go:SetActive(false)
        self.right_alliance_flag:SetData(opponentData.alIcon)
        self.right_alliance_name_text:SetText(UIUtil.GetAllianceWholeName(opponentData.serverId, opponentData.abbr, opponentData.alName))
        self.right_alliance_score_text:SetActive(true)
        self.right_alliance_score_text:SetText(string.GetFormattedSeperatorNum(opponentData.score))
        self.right_alliance_score_desc_text:SetActive(true)
        self.right_score_add_text:SetActive(true)
        self.right_score_add_text:SetText(string.format("%s: %s%%", Localization:GetString("302819"), toInt(opponentData.territoryScoreAdd)))
    else
        self.right_alliance_flag:SetActive(false)
        self.right_alliance_flag_empty_go:SetActive(true)
        self.right_alliance_name_text:SetText("???")
        self.right_alliance_score_text:SetActive(false)
        self.right_alliance_score_desc_text:SetActive(false)
        self.right_score_add_text:SetActive(false)
    end
    
    local useTimer = false
    if self.period == GloryPeriod.Prepare then
        self.center_desc_text:SetLocalText(302810)
        useTimer = true
    elseif self.period == GloryPeriod.Start then
        if self.battleState == GloryBattleState.None then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            local weekDay = UITimeManager:GetInstance():GetWeekdayIndex(curTime)
            local list = DataCenter.GloryManager:GetCloseFightDayCurWeek()
            if list~=nil and list[weekDay]~=nil then
                self.center_desc_text:SetLocalText(302969)
            else
                self.center_desc_text:SetLocalText(302813)
            end
            
        elseif self.battleState == GloryBattleState.Before then
            local _, switchTime = DataCenter.GloryManager:GetBattleState()
            self.switchTime = switchTime
            self.center_desc_text:SetLocalText(302816)
            useTimer = true
        elseif self.battleState == GloryBattleState.Ongoing then
            local _, switchTime = DataCenter.GloryManager:GetBattleState()
            self.switchTime = switchTime
            self.center_desc_text:SetLocalText(302787)
            useTimer = true
        elseif self.battleState == GloryBattleState.After then
            if battleResult == GloryBattleResult.Win then
                self.center_desc_text:SetLocalText(311105)
            elseif battleResult == GloryBattleResult.Lose then
                self.center_desc_text:SetLocalText(311106)
            else
                self.center_desc_text:SetLocalText(170009)
            end
        end
    end
    
    -- timer
    self.time_text:SetActive(useTimer)
    if useTimer and self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
        self.timer:Start()
        self:TimerAction()
    elseif not useTimer and self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.switchTime >= curTime then
        local restTime = math.floor(self.switchTime - curTime)
        local restTimeStr = CS.GameEntry.Timer:MilliSecondToFmtString(restTime)
        self.time_text:SetText(restTimeStr)
    else
        self.timer:Stop()
        self.timer = nil
        self.view:Refresh()
    end
end

local function OnScoreInfoClick(self)
    --if self.scoreInfoStr == nil then
        local dataList = {}
        LocalController:instance():visitTable(TableName.Score, function(id, lineData)
            if table.hasvalue(ScoreType, lineData:getValue("type")) then
                local data =
                {
                    id = id,
                    type = lineData:getValue("type"),
                    value = lineData:getValue("value"),
                    points = lineData:getValue("points"),
                }
                table.insert(dataList, data)
            end
        end)
        table.sort(dataList, function(dataA, dataB)
            return dataA.id < dataB.id
        end)
        local strs = { Localization:GetString("302864"), Localization:GetString("302870") }
        for _, data in ipairs(dataList) do
            local str = ""
            if data.type == ScoreType.Occupy then
                str = Localization:GetString(302934, data.value, data.points)
            elseif data.type == ScoreType.CrashCenter then
                str = Localization:GetString(302935, data.points)
            elseif data.type == ScoreType.CrashBuilding then
                str = Localization:GetString(302936, data.points)
            elseif data.type == ScoreType.DamageCenter then
                str = Localization:GetString(302937, data.points)
            elseif data.type == ScoreType.DamageBuilding then
                str = Localization:GetString(302938, data.points)
            end
            table.insert(strs, str)
        end
        self.scoreInfoStr = string.join(strs, "\n")
    --end
    
    UIUtil.ShowIntro(Localization:GetString("302913"), Localization:GetString("302027"), self.scoreInfoStr)
end

local function OnGloryGetAct(self)
    self:Refresh()
end

UIGloryBattleTop.OnCreate= OnCreate
UIGloryBattleTop.OnDestroy = OnDestroy
UIGloryBattleTop.ComponentDefine = ComponentDefine
UIGloryBattleTop.ComponentDestroy = ComponentDestroy
UIGloryBattleTop.DataDefine = DataDefine
UIGloryBattleTop.DataDestroy = DataDestroy
UIGloryBattleTop.OnEnable = OnEnable
UIGloryBattleTop.OnDisable = OnDisable
UIGloryBattleTop.OnAddListener = OnAddListener
UIGloryBattleTop.OnRemoveListener = OnRemoveListener

UIGloryBattleTop.Refresh = Refresh
UIGloryBattleTop.TimerAction = TimerAction
UIGloryBattleTop.OnScoreInfoClick = OnScoreInfoClick

UIGloryBattleTop.OnGloryGetAct = OnGloryGetAct

return UIGloryBattleTop