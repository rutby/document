---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime:
---
local UIInterstellarMigrationPreView = BaseClass("UIInterstellarMigrationPreView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local title_path = "UICommonMidPopUpTitle/bg_mid/titleText"
local close_path = "UICommonMidPopUpTitle/bg_mid/CloseBtn"
local return_path = "UICommonMidPopUpTitle/panel"
local activity_detail_btn = "ImgBg/BtnGo/activity_detail_btn"
local my_warning_btn = "ImgBg/BtnGo/my_warning_btn"
local first_btn_name_path = "ImgBg/BtnGo/activity_detail_btn/Txt_FirstBtnName"
local second_btn_name_path = "ImgBg/BtnGo/my_warning_btn/Txt_SecondBtnName"
local second_red_dot_path = "ImgBg/BtnGo/my_warning_btn/migrateRedPoint"
local state_des_text = "ImgBg/state_des_text"
local time_text = "ImgBg/time_text"
local function OnCreate(self)
    base.OnCreate(self)
    
    self.title_text = self:AddComponent(UITextMeshProUGUIEx,title_path)
    self.title_text:SetLocalText(250300)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function() self.ctrl:CloseSelf() end)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function() self.ctrl:CloseSelf() end)
    
    self._first_btn = self:AddComponent(UIButton, activity_detail_btn)
    self._first_btn:SetOnClick(function()
        self:OnClickBtn(1)
    end)
    self._second_btn = self:AddComponent(UIButton, my_warning_btn)
    self._second_btn:SetOnClick(function()
        self:OnClickBtn(2)
    end)
    self.second_red_dot = self:AddComponent(UIBaseContainer, second_red_dot_path)
    self._firstName_txt= self:AddComponent(UIText,first_btn_name_path)
    self._secondName_txt= self:AddComponent(UIText,second_btn_name_path)
    self._desc_txt= self:AddComponent(UIText,state_des_text)
    self._time_txt= self:AddComponent(UIText,time_text)
end

local function OnDestroy(self)
    self:DeleteTimer()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
    self:RefreshData()
    SFSNetwork.SendMessage(MsgDefines.MigrateActivityInfo)
    self:UpdateRedDot()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function RefreshData(self)
    self._firstName_txt:SetLocalText(250324)
    self._secondName_txt:SetLocalText(250325)
    self._desc_txt:SetLocalText(250322)
end

local function OnClickBtn(self,index)
    if index == 1 then
        UIUtil.ShowIntro(Localization:GetString("250300"), Localization:GetString("100239"),Localization:GetString("250385"))
    elseif index == 2 then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIMigrateList)
    end
end

--{{{倒计时
local function RefreshInterStelltar(self,message)
    self:DeleteTimer()
    if message.type and message.type ~= 0 then
        if message.type == 1 then
            self._desc_txt:SetLocalText(250399)
        elseif message.type == 2 then
            local str = Localization:GetString("250400").."\n"..Localization:GetString("250403")
            self._desc_txt:SetText(str)
        end
        self:RefreshTime(message)
        self:AddTimer(message)
    end
end

local function AddTimer(self,actData)
    if actData ~= nil then
        if self.timer == nil then
            self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action ,actData , false,false,false)
        end
        self.timer:Start()
    end
end

local function RefreshTime(self,actListData)
    if actListData then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if actListData.startTime < curTime and curTime < actListData.endTime  then
            if actListData.type == 1 then
                self._time_txt:SetText(Localization:GetString(250402)..": "..UITimeManager:GetInstance():MilliSecondToFmtString(actListData.endTime - curTime))
            else
                self._time_txt:SetLocalText(250401)
            end
        else
            self._time_txt:SetText("")
            self:DeleteTimer()
            UIManager:GetInstance():DestroyWindow(UIWindowNames.UIInterstellarMigrationPreview)
        end
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end
--}}}

local function UpdateRedDot(self)
    local show = DataCenter.MigrateDataManager:GetHasAccept()
    self.second_red_dot:SetActive(show)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.GetMigrateList, self.UpdateRedDot)
    self:AddUIListener(EventId.RefreshMigrateInfo,self.RefreshInterStelltar)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.GetMigrateList, self.UpdateRedDot)
    self:RemoveUIListener(EventId.RefreshMigrateInfo,self.RefreshInterStelltar)
    base.OnRemoveListener(self)
end

UIInterstellarMigrationPreView.OnCreate = OnCreate
UIInterstellarMigrationPreView.OnDestroy = OnDestroy
UIInterstellarMigrationPreView.OnEnable = OnEnable
UIInterstellarMigrationPreView.OnDisable = OnDisable
UIInterstellarMigrationPreView.RefreshData = RefreshData
UIInterstellarMigrationPreView.OnClickBtn = OnClickBtn
UIInterstellarMigrationPreView.RefreshInterStelltar = RefreshInterStelltar
UIInterstellarMigrationPreView.AddTimer = AddTimer
UIInterstellarMigrationPreView.RefreshTime = RefreshTime
UIInterstellarMigrationPreView.DeleteTimer = DeleteTimer
UIInterstellarMigrationPreView.UpdateRedDot = UpdateRedDot
UIInterstellarMigrationPreView.OnRemoveListener = OnRemoveListener
UIInterstellarMigrationPreView.OnAddListener = OnAddListener
return UIInterstellarMigrationPreView