---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/3/20 21:43
---
local UIAssistanceThroneCtrl = BaseClass("UIAssistanceThroneCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization
local function CloseSelf(self)
    --EventManager:GetInstance():Broadcast(EventId.UIMAIN_VISIBLE, true)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIAssistanceThrone, {anim = true})
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function InitData(self)
    SFSNetwork.SendMessage(MsgDefines.GetAllianceWarList,LuaEntry.Player:GetCurServerId())
end

local function GetAssistanceArmyData(self,bUuid)
    local  oneData = {}
    oneData.fightData = nil
    oneData.waitingArr = {}
    oneData.isSelfJoin = false
    local info = DataCenter.FormationAssistanceDataManager:GetAssistanceData(bUuid)
    if info ~= nil then
        local list = {}
        local teamList = info.fightTeams
        for k,v in pairs(teamList) do
            local item = self:GetWarItemData(v,bUuid)
            if item.uuid~=nil then
                if item.isSelf ==true then
                    oneData.isSelfJoin = true
                end
                table.insert(list,item)
            end
        end
        table.sort(list,function(a,b)
            return a.startTime<b.startTime
        end)
        for i =1,#list do
            list[i].index = i
            if i>1 then
                table.insert(oneData.waitingArr,list[i])
            else
                oneData.fightData = list[i]
            end
        end
    end
    return oneData
end
local function GetWarItemData(self,data,bUuid)
    local oneData = {}
    if data~=nil then
        if data.leaderMarch == nil or data.leaderMarch.status~=MarchStatus.ASSISTANCE then
            return oneData
        end
        oneData.bUuid = bUuid
        oneData.leftName ="[".. data.attackAllianceAbbr.."]"..data.attackName
        if data.targetAllianceAbbr ~= "" then
            oneData.rightName = "[".. data.targetAllianceAbbr.."]"..data.targetName
        else
            oneData.rightName = data.targetName
        end
        oneData.serverId = data.server
        oneData.leftPointId = data.attackPointId
        oneData.rightPointId = data.targetPointId
        oneData.currentSoldiers= data.currentSoldiers
        oneData.maxSoldiers =  data.maxSoldiers
        oneData.waitTime = data.waitTime
        oneData.marchTime = data.marchTime
        oneData.createTime = data.createTime
        oneData.type = data.type
        oneData.targetUid = data.targetUid
        oneData.targetIcon = data.targetIcon
        oneData.targetIconVer = data.targetIconVer
        oneData.targetHeadBg = data.leaderMarch:GetHeadBgImg()
        oneData.assemblyMarchMax = data.assemblyMarchMax
        oneData.canJoinNum = 1
        oneData.attackUid = data.attackUid
        oneData.attackIcon = data.leaderMarch.ownerIcon
        oneData.ownerIconVer = data.leaderMarch.ownerIconVer
        oneData.ownerHeadBg = data:GetHeadBgImg()
        oneData.targetUuid = data.targetUuid
        oneData.leaderMarchUuid = data.leaderMarch.uuid
        oneData.memberList ={}
        --计算参与人数，leaderMarch必有一个
        if next(data.memberList) then
            for i, v in pairs(data.memberList) do
                oneData.canJoinNum = oneData.canJoinNum + 1
                oneData.memberList[i] = v
            end
            oneData.canJoinNum = oneData.canJoinNum
        end
        oneData.memberList[data.leaderMarch.uuid] = data.leaderMarch
        local selfAllianceId = LuaEntry.Player.allianceId
        local selfUid = LuaEntry.Player.uid
        oneData.isAttack = (selfAllianceId ~= data.attackAllianceId)   --true为自己或盟友或联盟城被打
        oneData.isSelf = (selfUid == data.attackUid)
        oneData.cancel = (selfUid == data.attackUid)                   --true为自己发起的集结
        local isR4orR5 = DataCenter.AllianceBaseDataManager:IsR4orR5()
        if isR4orR5 == true then
            oneData.cancel = true
        end
        oneData.isSelfAttack = (selfUid == data.targetUid)             --true为自己被打
        local canJoin =false
        local inTeam =false
        if oneData.cancel ==false and oneData.isAttack==false then
            local count = table.count(data.memberList)
            if count< data.assemblyMarchMax then
                canJoin =true
                table.walk(data.memberList,function (k,v)
                    if v.ownerUid == selfUid then
                        inTeam =true
                        canJoin=false
                    end
                end)
            end
        end
        oneData.waitMemberTime = data.waitMemberTime
        oneData.teamUuid = data.leaderMarch.teamUuid
        oneData.join = canJoin
        oneData.inTeam = inTeam
        oneData.uuid = data.uuid
        oneData.isAlliance = true
        oneData.startTime = data.leaderMarch.startTime
        oneData.marchendTime = data.leaderMarch.endTime     --部队抵达目标结束时间
    end
    return oneData
end

local function OnOpenClick(self,data)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIThroneDetail, { anim = true },data)
end


local function OnCancelClick(self,bUuid,uuid)
    SFSNetwork.SendMessage(MsgDefines.AssistanceTeamRetreat, bUuid, uuid)
end


local function OnCloseClick(self)
    self:CloseSelf()
end

UIAssistanceThroneCtrl.CloseSelf =CloseSelf
UIAssistanceThroneCtrl.Close =Close
UIAssistanceThroneCtrl.InitData =InitData
UIAssistanceThroneCtrl.GetWarItemData =GetWarItemData
UIAssistanceThroneCtrl.OnOpenClick =OnOpenClick
UIAssistanceThroneCtrl.OnCancelClick =OnCancelClick
UIAssistanceThroneCtrl.OnCloseClick = OnCloseClick
UIAssistanceThroneCtrl.GetAssistanceArmyData =GetAssistanceArmyData
return UIAssistanceThroneCtrl