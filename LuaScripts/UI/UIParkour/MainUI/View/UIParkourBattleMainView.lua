
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by w.
--- DateTime: 2022/11/30 13:00
---
--local TriggerEnum = require("Scene.LWBattle.ParkourBattle.TriggerEvent.TriggerEnum")
local Const = require("Scene.LWBattle.Const")
local ParkourJoystick = require "UI.UIParkour.MainUI.Component.ParkourJoystick"
local ParkourHeroHead = require "UI.UIParkour.MainUI.Component.ParkourHeroHead"
--local UnityRectTransform = typeof(CS.UnityEngine.RectTransform)
local UIParkourBattleMainView = BaseClass("UIParkourBattleMainView",UIBaseView)
local base = UIBaseView

local speedUpEff = "UICommonFullTop/TopEffect/Eff_UI_suduxian"
local UICommonFullTop = "UICommonFullTop/"
local BossNoticeCD = 5
local HeadCount = 5

function UIParkourBattleMainView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:InitWinCondition()
    self:UpdateWinConditionBar()
    
    if self:GetUserData().onOpen then
        self:GetUserData().onOpen()
    end
end

function UIParkourBattleMainView:OnDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

function UIParkourBattleMainView:ComponentDefine()
    self.winConditionNode = self:AddComponent(UIBaseComponent,"UICommonFullTop/WinCondition")
    self.winConditionNode:SetActive(true)
    self.winConditionArea = self.transform:Find("UICommonFullTop/WinCondition")
    self.winConditionArea:Set_localScale(0,0,0)
    self.winConditionIcon = self:AddComponent(UIImage,"UICommonFullTop/WinCondition/WinIcon")
    self.winConditionSlider = self:AddComponent(UISlider,"UICommonFullTop/WinCondition/Slider")
    self.winConditionSliderEff = self:AddComponent(UIBaseComponent,"UICommonFullTop/WinCondition/Slider/Eff_ui_beizengmen_guanka_jindu")
    self.winConditionSliderEff:SetActive(false)
    self.winConditionBarImg = self:AddComponent(UIImage,"UICommonFullTop/WinCondition/Slider/FillArea/Fill")
    self.winConditionText = self:AddComponent(UITextMeshProUGUIEx,"UICommonFullTop/WinCondition/WinBarText")
    self.winConditionIconView = self:AddComponent(UIBaseContainer, "UICommonFullTop/WinCondition/WinIconList")
    self.animator = self:AddComponent(UIAnimator,"")
    self.winBanner = self:AddComponent(UIBaseComponent, "WinBanner")
    self.winBanner:SetActive(false)
    self.winBannerTxt = self:AddComponent(UITextMeshProUGUIEx, "WinBanner/WinBannerText")
    self.winBannerTxt:SetLocalText(311105)
    self.winConditionIconListHolder = self.transform:Find( "UICommonFullTop/WinCondition/WinIconList/List")
    self.winConditionIconListCell = {}
    self.speedUpEffect = self:AddComponent(UIBaseContainer, speedUpEff)
    self.speedUpEffect:SetActive(false)

    self.joystick = self:AddComponent(ParkourJoystick,"UICommonFullTop/Joystick")
    self.joystick:SetActive(true)
    self.joystick:ReInit()
    DataCenter.LWBattleManager.logic:SetJoystick(self.joystick)

    if self.winConditionIconListHolder then
        for _, transform in pairs(self.winConditionIconListHolder) do
            transform.gameObject:Destroy()
        end
    end

    self.back_btn = self:AddComponent(UIButton, "UICommonFullTop/CloseBtn")
    self.back_btn:SetActive(true)
    self.back_btn:SetOnClick(function()
        self:OnExitBtnClick()
    end)

    self.punchOK=0

    self.missionBar = self:AddComponent(UISimpleAnimation, UICommonFullTop.."Mission")
    self.missionText = self:AddComponent(UITextMeshProUGUIEx, UICommonFullTop.."Mission/hengfu/Text_0")
    self.missionTarText = self:AddComponent(UITextMeshProUGUIEx, UICommonFullTop.."Mission/hengfu/Text_1")
    self.missionBar:SetActive(false)

    self.bossNoticeContainer = self:AddComponent(UIBaseContainer, "BossComing" )

    self.bossNotice = self:AddComponent(UIAnimator, "BossComing")
    self.bossNotice.gameObject:SetActive(false)
    self.bossNoticeText = self.bossNoticeContainer:AddComponent(UITextMeshProUGUIEx, "Text_0")
    self.lastBossNoticeTime = Time.realtimeSinceStartup
    
    self.head_list = self:AddComponent(UIBaseContainer, "UICommonFullTop/HeadList")
    self.heads = {}
    for i = 1, HeadCount do
        self.heads[i] = self:AddComponent(ParkourHeroHead, "UICommonFullTop/HeadList/Head_" .. i)
        local found = false
        local heroes = DataCenter.LWBattleManager.logic:GetHeroes()
        for index, v in pairs(heroes) do
            if i == index then
                self.heads[i]:SetHeroId(v.hero.heroId)
                found = true
                break
            end
        end
        self.heads[i]:SetActive(found)
    end
    self.head_list:SetActive(DataCenter.LWBattleManager.logic.battleType == Const.ParkourBattleType.Attack)
    self.skip_btn = self:AddComponent(UIButton, "Skip")
    self.skip_btn:SetOnClick(function()
        self:OnSkipClick()
    end)
    self.skip_btn:SetActive(CS.CommonUtils.IsDebug() and CS.UnityEngine.Application.isEditor)
end

function UIParkourBattleMainView:ComponentDestroy()
    self.back_btn = nil
    if self.winConditionIconListHolder then
        for _, transform in pairs(self.winConditionIconListHolder) do
            transform.gameObject:Destroy()
        end
    end
    self.joystick =nil
    
    if self.showTimer then
        self.showTimer:Stop()
        self.showTimer = nil
    end
end

function UIParkourBattleMainView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.SquadSuperArmorStateChange, self.SquadSuperArmorChange)
    self:AddUIListener(EventId.ParkourBattleWin, self.OnParkourBattleWin)
    self:AddUIListener(EventId.ParkourWinConditionRefresh, self.UpdateWinConditionBar)
    self:AddUIListener(EventId.ParkourBossEnterBattle, self.OnBossEnter)
    self:AddUIListener(EventId.PveHeroHpUpdate,self.OnPveHeroHpUpdate)
    self:AddUIListener(EventId.PveHeroSkillCdUpdate, self.OnPveHeroSkillCdUpdate)
    self:AddUIListener(EventId.PveHeroUseSkill, self.OnPveHeroUseSkill)
end

function UIParkourBattleMainView:OnRemoveListener()
    self:RemoveUIListener(EventId.SquadSuperArmorStateChange, self.SquadSuperArmorChange)
    self:RemoveUIListener(EventId.ParkourBattleWin, self.OnParkourBattleWin)
    self:RemoveUIListener(EventId.ParkourWinConditionRefresh, self.UpdateWinConditionBar)
    self:RemoveUIListener(EventId.ParkourBossEnterBattle, self.OnBossEnter)
    self:RemoveUIListener(EventId.PveHeroHpUpdate,self.OnPveHeroHpUpdate)
    self:RemoveUIListener(EventId.PveHeroSkillCdUpdate, self.OnPveHeroSkillCdUpdate)
    self:RemoveUIListener(EventId.PveHeroUseSkill, self.OnPveHeroUseSkill)
    base.OnRemoveListener(self)
end

function UIParkourBattleMainView:OnExitBtnClick()
    if DataCenter.LWBattleManager.logic.winTimer or DataCenter.LWBattleManager.gameOver then
        return
    end
    self:OnExit()
end

function UIParkourBattleMainView:OnExit()
    --中途退出打点
    --PostEventLog.BattleResultLog(PVEType.Parkour,2)
    self.ctrl:CloseSelf()
    DataCenter.LWBattleManager:Exit()
end


--local function GetWinConditionIcon(winType)
--    local spriteName = ""
--    if winType == Const.ParkourWinType.KillTargetMonster then
--        spriteName = "Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_1.png"
--    elseif winType == Const.ParkourWinType.KillMonster then
--        spriteName = "Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_1"
--    elseif winType == Const.ParkourWinType.FinishPoint then
--        spriteName = "Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_3"
--    elseif winType == Const.ParkourWinType.KillBoss then
--        spriteName = "Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_4"
--    elseif winType == Const.ParkourWinType.SaveWorker then
--        spriteName = "Assets/Main/Sprites/UI/UIZombieBattleMain/cfm_guanqia_tubiao_yingxiong.png"
--    end
--    return spriteName
--end


function UIParkourBattleMainView:InitWinCondition()
    local winType = DataCenter.LWBattleManager.logic.winCondition.winType
    --local spriteName = GetWinConditionIcon(winType)
    --self.winConditionIcon:LoadSprite(spriteName)
    --if winType == Const.ParkourWinType.FinishPoint then
    --    self.winConditionBarImg:LoadSprite("Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_jindutiao_3")
    --else 
    --    self.winConditionBarImg:LoadSprite("Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_jindutiao_2")
    --end

    self.winConditionArea.gameObject:SetActive(true)

    for _, transform in pairs(self.winConditionArea.transform) do transform.gameObject:SetActive(true) end

    if winType == Const.ParkourWinType.KillBoss then
        for _, transform in pairs(self.winConditionArea.transform) do transform.gameObject:SetActive(false) end
        self.winConditionIconView.gameObject:SetActive(true)
        local killNum = DataCenter.LWBattleManager.logic.winCondition.needKillNum
        self:SetWinConditionBoss(killNum)
    end

    self.back_btn:SetActive(true)
end

function UIParkourBattleMainView:ShowWinCondition(callback, hideMission)
    if hideMission then
        self.winConditionArea:Set_localScale(1,1,1)
        return
    end
    if not self.missionBar then
        self.winConditionArea:Set_localScale(1,1,1)
        return
    end
    local data = DataCenter.LWBattleManager.logic.data
    if not data then
        self.winConditionArea:Set_localScale(1,1,1)
        return
    end
    if string.IsNullOrEmpty(data.target) then
        self.winConditionArea:Set_localScale(1,1,1)
        return
    end
    DataCenter.LWSoundManager:PlaySound(10015)
    self.missionBar:SetActive(true)
    self.missionBar.simpleAnimation:Play("Default")
    self.missionText:SetLocalText(data.title)
    self.missionTarText:SetLocalText(data.target, data.winCondition.needKillNum or data.winCondition.needKillTargetNum or data.winCondition.needSaveNum)
    if data.winCondition.winType == Const.ParkourWinType.FinishPoint then
    end

    self.missionBar.simpleAnimation:Play("Default")
    self.showTimer = TimerManager:GetInstance():DelayInvoke(function()
        self.showTimer = nil
        self.missionBar.simpleAnimation:Play("Close")
        -- self.missionBar:SetActive(false)
        self.winConditionArea:DOScale(Vector3.New(1,1,1),0.3):Delay(1)
        callback();
    end,2.5)
end

function UIParkourBattleMainView:ShowBossHpBar()
    self.winConditionArea.gameObject:SetActive(true)
    self:UpdateWinConditionBar()
end

function UIParkourBattleMainView:UpdateWinConditionBar()
    
    local battleMgr = DataCenter.LWBattleManager.logic
    local winType = DataCenter.LWBattleManager.logic.winCondition.winType
    if winType == Const.ParkourWinType.KillTargetMonster then
        local needKillTarget = DataCenter.LWBattleManager.logic.winCondition.needKillTarget
        local curValue=0
        local needValue=0
        for k,v in pairs(needKillTarget) do
            curValue = curValue + v.finish
            needValue = needValue + v.need
        end
        self:SetWinConditionBar(math.max(0, needValue-curValue)/needValue)
        self:SetWinConditionText(string.format("%d",math.max(0, needValue-curValue)), true)
    elseif winType == Const.ParkourWinType.KillMonster then
        local curValue = battleMgr.killNum
        local needValue = battleMgr.winCondition.needKillNum
        self:SetWinConditionBar(math.max(0, needValue-curValue)/needValue)
        self:SetWinConditionText(string.format("%d",math.max(0, needValue-curValue)), true)
    elseif winType == Const.ParkourWinType.SaveWorker then
        local curValue = battleMgr.saveNum
        local needValue = battleMgr.winCondition.needSaveNum
        self:SetWinConditionBar(curValue/needValue)
        self:SetWinConditionText(string.format("%d",math.min(curValue,needValue)), true)
    elseif winType == Const.ParkourWinType.FinishPoint then
        local finalPos = battleMgr.data.endLine
        local startPos = 0
        local curPos = battleMgr.team:GetPositionZ()
        
        self:SetWinConditionBar((curPos - startPos)/(finalPos - startPos))
        local remain = math.floor(finalPos - curPos)
        remain = remain < 0 and 0 or remain
        self:SetWinConditionText(string.format("%d m",remain))
    elseif winType == Const.ParkourWinType.KillBoss then
        -- for i = 1, battleMgr.killBossNum do
        if battleMgr.killBossNum > 0 and battleMgr.killBossNum<=#self.winConditionIconListCell then
            self.winConditionIconListCell[battleMgr.killBossNum].effect:SetActive(true)
        end
        -- end
    end
    
end

function UIParkourBattleMainView:SetWinConditionBar(percent)
    if not self.transform then return end
    self.winConditionSlider:SetValue(Mathf.Clamp(percent, 0, 1))
    if percent>=1 then
        self.winConditionSliderEff:SetActive(true)
    end
end

function UIParkourBattleMainView:SetWinConditionText(txt, punch)
    if not self.transform then return end
    if self.winConditionText then
        self.winConditionText:SetText(txt)
        if punch then
            local now = UITimeManager:GetInstance():GetServerTime()
            if self.punchOK < now then
                self.punchOK=now+PUNCH_CD*1000
                self.winConditionText.transform:DOKill()
                self.winConditionText.transform:Set_localScale(1,1,1)
                self.winConditionText.transform:DOPunchScale(Vector3.New(1,1,1),PUNCH_CD,1,0.4)
            end
        end
    end
end

function UIParkourBattleMainView:SetWinConditionBoss(needKillBossNum)
    local cell = self.winConditionIconView.transform:Find('Cell')
    for i = 1,needKillBossNum do 
        local go = cell.gameObject:GameObjectSpawn(self.winConditionIconListHolder)
        local icongo = go.transform:Find("Icon")
        local effectgo = go.transform:Find("Kill").gameObject
        icongo.name = "Icon"..tostring(i)
        local img = self.winConditionIconView:AddComponent(UIImage,icongo)
        --img:LoadSprite("Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_4")
        effectgo:SetActive(false)
        self.winConditionIconListCell[i] = {img = img,effect = effectgo,gameObject = go}
    end
end


function UIParkourBattleMainView:SquadSuperArmorChange()
    local isSuperArmor = DataCenter.LWBattleManager.logic.team:IsSuperArmor()
    self.speedUpEffect:SetActive(isSuperArmor)
    if isSuperArmor then
        DataCenter.LWBattleManager:AutoZoom(40)
        local rate =  (Screen.height / Screen.width) / (1440 / 810)
        self.speedUpEffect.transform:Set_localScale(ResetScale.x, ResetScale.y * rate, ResetScale.z * rate)
    else
        DataCenter.LWBattleManager:AutoZoom(20)
    end
end

function UIParkourBattleMainView:OnParkourBattleWin()
    self.back_btn:SetActive(false)
    self.winBanner:SetActive(true)
    self.animator:Play("Eff_ui_beizengmen_mubiao_wancheng", 0, 0)
    TimerManager:GetInstance():DelayInvoke(function()
        if self.winBanner then
            self.winBanner:SetActive(false)
        end
        if self.winConditionNode then
            self.winConditionNode:SetActive(false)
        end
    end, 1.8)
end

function UIParkourBattleMainView:OnBossEnter()
    local time = Time.realtimeSinceStartup
    if time - self.lastBossNoticeTime < BossNoticeCD then
        return
    end
    
    self.lastBossNoticeTime = time
    
    self.bossNotice.gameObject:SetActive(false)
    self.bossNotice.gameObject:SetActive(true)
    self.bossNoticeText:SetLocalText(321435)
end

function UIParkourBattleMainView:OnPveHeroHpUpdate(info)
    for i = 1, HeadCount do
        if self.heads[i].heroId == info.heroId then
            self.heads[i]:SetHp(info.curBlood, info.maxBlood)
            break
        end
    end
end

function UIParkourBattleMainView:OnPveHeroSkillCdUpdate(info)
    for i = 1, HeadCount do
        if self.heads[i].heroId == info.heroId then
            self.heads[i]:SetCd(info.cd, info.maxCd)
            break
        end
    end
end

function UIParkourBattleMainView:OnPveHeroUseSkill(info)
    for i = 1, HeadCount do
        if self.heads[i].heroId == info.heroId then
            self.heads[i]:UseSkill(info.skillId)
            break
        end
    end
end

function UIParkourBattleMainView:OnSkipClick()
    DataCenter.LWBattleManager.logic:OnBattleWin()
end

return UIParkourBattleMainView
