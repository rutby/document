---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/3/4 11:03
---

local UIParkourHeroList = BaseClass("UIParkourHeroList", UIBaseContainer)
local base = UIBaseContainer
local UIParkourHeroCell = require "UI.UIParkour.FormationUI.Component.UIParkourHeroCell"

local num_path = "Num"
local scroll_view_path = "ScrollView"
local camp_root_path = "CampRoot"
local camp_path = "CampRoot/Vert/Camp%s"
local camp_check_path = "CampRoot/Vert/Camp%s/Background/CampCheck%s"
local select_camp_path = "SelectCamp"
local select_camp_text_path = "SelectCamp/SelectCampText"
local select_camp_icon_path = "SelectCamp/SelectCampIcon"

local Camps = { HeroCamp.All, HeroCamp.MAFIA, HeroCamp.UNION, HeroCamp.ZELOT }

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.num_text = self:AddComponent(UITextMeshProUGUIEx, num_path)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)
    self.camp_root_go = self:AddComponent(UIBaseContainer, camp_root_path)
    self.camp_btns = {}
    self.camp_check_goes = {}
    for _, camp in ipairs(Camps) do
        self.camp_btns[camp] = self:AddComponent(UIButton, string.format(camp_path, camp))
        self.camp_btns[camp]:SetOnClick(function()
            self:OnCampClick(camp)
        end)
        self.camp_check_goes[camp] = self:AddComponent(UIButton, string.format(camp_check_path, camp, camp))
    end
    self.select_camp_btn = self:AddComponent(UIButton, select_camp_path)
    self.select_camp_btn:SetOnClick(function()
        self:OnSelectCampClick()
    end)
    self.select_camp_text = self:AddComponent(UITextMeshProUGUIEx, select_camp_text_path)
    self.select_camp_icon_image = self:AddComponent(UIImage, select_camp_icon_path)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    self.heroDataList = {}
    self.selectHeroUuidDict = {}
    self.onHeroChanged = nil
    self.items = {}
    self.camp = HeroCamp.All
end

local function DataDestroy(self)

end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function OnCellMoveIn(self, itemObj, index)
    itemObj.name = tostring(index)
    local heroData = self.heroDataList[index]
    local item = self.scroll_view:AddComponent(UIParkourHeroCell, itemObj)
    item:SetData(heroData, function()
        self:OnItemClick(index)
    end)
    item:SetSelected(self:IsHeroSelected(heroData.uuid))
    self.items[index] = item
end

local function OnCellMoveOut(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIParkourHeroCell)
    self.items[index] = nil
end

local function ShowCells(self)
    self:ClearScroll()
    local count = #self.heroDataList
    if count > 0 then
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UIParkourHeroCell)
end

local function SetData(self, selectHeroUuidDict, onHeroChanged)
    self.selectHeroUuidDict = selectHeroUuidDict
    self.onHeroChanged = onHeroChanged
    self:Refresh()
end

local function Refresh(self)
    self.heroDataList = self:GetHeroDataListInternal()
    self.num_text:SetText(#self.heroDataList)
    self:ShowCells()
    self.camp_root_go:SetActive(false)
    for _, camp in ipairs(Camps) do
        self.camp_check_goes[camp]:SetActive(self.camp == camp)
    end
    self.select_camp_text:SetActive(self.camp == HeroCamp.All)
    self.select_camp_icon_image:SetActive(self.camp ~= HeroCamp.All)
    self.select_camp_icon_image:LoadSprite(HeroUtils.GetCampIconPath(self.camp))
    self:CheckGuideTrigger()
end

local function GetHeroDataListInternal(self)
    local heroDataList = {}
    local list = DataCenter.HeroDataManager:GetMasterHeroList()
    local hireHeroData = HeroUtils.GetHireHeroData()
    if hireHeroData then
        table.insert(list, hireHeroData)
    end
    for _, heroData in ipairs(list) do
        if self.camp == HeroCamp.All or heroData:GetCamp() == self.camp then
            table.insert(heroDataList, heroData)
        end
    end

    local campA = nil
    local campB = nil
    table.sort(heroDataList, function(heroDataA, heroDataB)
        if heroDataA.uuid == HireHeroUuid then
            return true
        elseif heroDataB.uuid == HireHeroUuid then
            return false
        end

        if heroDataA.rarity ~= heroDataB.rarity then
            return heroDataA.rarity < heroDataB.rarity
        end

        --if heroDataA.level ~= heroDataB.level then
        --    return heroDataA.level > heroDataB.level
        --end
        --
        --if heroDataA.quality ~= heroDataB.quality then
        --    return heroDataA.quality > heroDataB.quality
        --end
        --
        --campA = heroDataA:GetCamp()
        --campB = heroDataB:GetCamp()
        --if campA ~= campB then
        --    return campA < campB
        --end

        local powerA = heroDataA:GetPower()
        local powerB = heroDataB:GetPower()
        if powerA ~= powerB then
            return powerA > powerB
        end

        return heroDataA.heroId < heroDataB.heroId
    end)

    return heroDataList
end

local function IsHeroSelected(self, heroUuid)
    return table.hasvalue(self.selectHeroUuidDict, heroUuid)
end

local function GetHeroIndex(self, heroUuid)
    for i, v in pairs(self.selectHeroUuidDict) do
        if v == heroUuid then
            return i
        end
    end
    return nil
end

local function GetEmptyIndex(self)
    for i = 1, 5 do
        if self.selectHeroUuidDict[i] == nil then
            return i
        end
    end
    return nil
end

local function OnItemClick(self, index)
    local heroData = self.heroDataList[index]
    local heroUuid = heroData.uuid
    if heroUuid == HireHeroUuid then
        UIUtil.ShowTipsId(321392)
        return
    end
    local item = self.items[index]
    local changed = false
    if self:IsHeroSelected(heroUuid) then
        local i = self:GetHeroIndex(heroUuid)
        if i then
            self.selectHeroUuidDict[i] = nil
            if item then
                item:SetSelected(false)
            end
            changed = true
        end
    else
        local i = self:GetEmptyIndex()
        if i then
            self.selectHeroUuidDict[i] = heroUuid
            item:SetSelected(true)
            changed = true
        else
            UIUtil.ShowTipsId(400034)
        end
    end
    if changed and self.onHeroChanged then
        self.onHeroChanged()
    end
end

local function OnSelectCampClick(self)
    self.camp_root_go:SetActive(not self.camp_root_go:GetActive())
end

local function OnCampClick(self, camp)
    self.camp = camp
    self:Refresh()
end

function UIParkourHeroList:GetHeroObjByHeroId(heroId)
    local index = 0
    for k,v in ipairs(self.heroDataList) do
        if v.heroId == heroId then
            index = k
            break
        end
    end

    if index ~= 0 then
        if self.items[index] ~= nil then
            return self.items[index]:GetBtn()
        end
    end
end

function UIParkourHeroList:CheckGuideTrigger()
    if self:GetEmptyIndex() ~= nil and (#self.heroDataList > #self.selectHeroUuidDict) then
        DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.ParkourBattleFreeHeroUse, SaveGuideDoneValue)
    end
end

function UIParkourHeroList:GetMostRarityHeroNoInUse()
    local index = 0
    for k,v in ipairs(self.heroDataList) do
        if not self:IsHeroSelected(v.uuid) then
            index = k
            break
        end
    end

    if index ~= 0 then
        if self.items[index] ~= nil then
            return self.items[index]:GetBtn()
        end
    end
end

UIParkourHeroList.OnCreate = OnCreate
UIParkourHeroList.OnDestroy = OnDestroy
UIParkourHeroList.OnEnable = OnEnable
UIParkourHeroList.OnDisable = OnDisable
UIParkourHeroList.ComponentDefine = ComponentDefine
UIParkourHeroList.ComponentDestroy = ComponentDestroy
UIParkourHeroList.DataDefine = DataDefine
UIParkourHeroList.DataDestroy = DataDestroy
UIParkourHeroList.OnAddListener = OnAddListener
UIParkourHeroList.OnRemoveListener = OnRemoveListener

UIParkourHeroList.OnCellMoveIn = OnCellMoveIn
UIParkourHeroList.OnCellMoveOut = OnCellMoveOut
UIParkourHeroList.ShowCells = ShowCells
UIParkourHeroList.ClearScroll = ClearScroll

UIParkourHeroList.SetData = SetData
UIParkourHeroList.Refresh = Refresh
UIParkourHeroList.GetHeroDataListInternal = GetHeroDataListInternal
UIParkourHeroList.IsHeroSelected = IsHeroSelected
UIParkourHeroList.GetHeroIndex = GetHeroIndex
UIParkourHeroList.GetEmptyIndex = GetEmptyIndex
UIParkourHeroList.OnItemClick = OnItemClick
UIParkourHeroList.OnSelectCampClick = OnSelectCampClick
UIParkourHeroList.OnCampClick = OnCampClick

return UIParkourHeroList