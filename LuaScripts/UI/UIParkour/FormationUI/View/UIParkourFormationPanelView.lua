---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/3/4 11:03
---

---@class UIParkourFormationPanel
local UIParkourFormationPanel = BaseClass("UIParkourFormationPanel", UIBaseView)
local base = UIBaseView
local UIParkourHeroList = require "UI.UIParkour.FormationUI.Component.UIParkourHeroList"
local Physics = CS.UnityEngine.Physics
local Touch = CS.BitBenderGames.TouchWrapper

local hero_list_path = "Root/Bottom/HeroList"
local back_path = "Root/Bottom/Back"
local start_path = "Root/Bottom/Start"
local start_text_path = "Root/Bottom/Start/StartText"
local hero_btn_path = "Root/Bottom/HeroBtn"
local hero_btn_text_path = "Root/Bottom/HeroBtn/HeroBtnText"
local hero_red_path = "Root/Bottom/HeroBtn/HeroRed"
local left_path = "Root/Top/Left"
local left_player_head_path = "Root/Top/Left/LeftPlayerHead"
local left_power_bg_path = "Root/Top/Left/LeftPowerBg"
local left_power_path = "Root/Top/Left/LeftPowerBg/LeftPower"
local right_path = "Root/Top/Right"
local right_player_head_path = "Root/Top/Right/RightPlayerHead"
local right_power_bg_path = "Root/Top/Right/RightPowerBg"
local right_power_path = "Root/Top/Right/RightPowerBg/RightPower"
local level_bg_path = "Root/Top/LevelBg"
local level_path = "Root/Top/LevelBg/Level"
local slot_path = "Root/Center/Slot%s"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.hero_list = self:AddComponent(UIParkourHeroList, hero_list_path)
    self.back_btn = self:AddComponent(UIButton, back_path)
    self.back_btn:SetOnClick(function()
        self:OnBackClick()
    end)
    self.start_btn = self:AddComponent(UIButton, start_path)
    self.start_btn:SetOnClick(function()
        self:OnStartClick()
    end)
    self.start_text = self:AddComponent(UITextMeshProUGUIEx, start_text_path)
    self.start_text:SetLocalText(400006)
    self.hero_btn = self:AddComponent(UIButton, hero_btn_path)
    self.hero_btn:SetOnClick(function()
        self:OnHeroBtnClick()
    end)
    self.hero_btn_text = self:AddComponent(UITextMeshProUGUIEx, hero_btn_text_path)
    self.hero_btn_text:SetLocalText(100275)
    self.hero_red_go = self:AddComponent(UIBaseContainer, hero_red_path)
    self.left_go = self:AddComponent(UIBaseContainer, left_path)
    self.left_player_head = self:AddComponent(UIPlayerHead, left_player_head_path)
    self.left_player_head_image = self:AddComponent(CircleImage, left_player_head_path)
    self.left_power_bg_go = self:AddComponent(UIBaseContainer, left_power_bg_path)
    self.left_power_text = self:AddComponent(UITweenNumberText_TextMeshPro, left_power_path)
    self.left_power_text:SetSeparator(true)
    self.right_go = self:AddComponent(UIBaseContainer, right_path)
    self.right_player_head = self:AddComponent(UIPlayerHead, right_player_head_path)
    self.right_player_head_image = self:AddComponent(CircleImage, right_player_head_path)
    self.right_power_bg_go = self:AddComponent(UIBaseContainer, right_power_bg_path)
    self.right_power_text = self:AddComponent(UITweenNumberText_TextMeshPro, right_power_path)
    self.right_power_text:SetSeparator(true)
    self.level_bg_go = self:AddComponent(UIBaseContainer, level_bg_path)
    self.level_text = self:AddComponent(UITextMeshProUGUIEx, level_path)
    self.slot_triggers = {}
    local worldPoses = DataCenter.LWBattleManager.logic:GetSquadMemberPosition()
    for i = 1, 5 do
        self.slot_triggers[i] = self:AddComponent(UIEventTrigger, string.format(slot_path, i))
        local screenPos = self.camera:WorldToScreenPoint(worldPoses[i])
        screenPos.z = 0
        self.slot_triggers[i].transform.position = screenPos
        self.slot_triggers[i]:OnPointerClick(function(eventData)
            self:OnSlotClick(eventData, i)
        end)
        self.slot_triggers[i]:OnPointerEnter(function(eventData)
            self:OnSlotEnter(eventData, i)
        end)
        self.slot_triggers[i]:OnPointerExit(function(eventData)
            self:OnSlotExit(eventData, i)
        end)
        self.slot_triggers[i]:OnBeginDrag(function(eventData)
            self:OnSlotBeginDrag(eventData, i)
        end)
        self.slot_triggers[i]:OnDrag(function(eventData)
            self:OnSlotDrag(eventData, i)
        end)
        self.slot_triggers[i]:OnEndDrag(function(eventData)
            self:OnSlotEndDrag(eventData, i)
        end)
    end
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.camera = CS.UnityEngine.Camera.main
    self.selectHeroUuidDict = nil
    self.draggingIndex = 0
    self.pointerIndex = 0
    self.team = nil
end

local function DataDestroy(self)
    
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
    self:ReInit()
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.CloseUI, self.OnCloseUI)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.CloseUI, self.OnCloseUI)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.selectHeroUuidDict = DataCenter.LWBattleManager.logic.selectHeroUuidDict -- 引用
    self.levelParam = DataCenter.LWBattleManager.logic.param
    self.team = DataCenter.LWBattleManager.logic.team
    self.pveEntrance = self.levelParam.pveEntrance
    self.draggingIndex = 0
    self.pointerIndex = 0
    self:LoadHeroesFromHistory()
    self:LoadHireHero()
    self.hero_list:SetData(self.selectHeroUuidDict, function()
        self:OnHeroChanged()
    end)
    self:OnHeroChanged()
    self:RefreshHeroRed()
    self:RefreshPlayerHead()
    self:RefreshEnemyHead()
    self:RefreshLevelText()
    self:RefreshEnemyPower()
    EventManager:GetInstance():Broadcast(EventId.ParkourBattleEnterComplete)
end

local function RefreshHeroRed(self)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.APS_BUILD_PUB)
    if buildData and buildData.level > 0 then
        local show = DataCenter.HeroDataManager:ShowHeroRed()
        self.hero_red_go:SetActive(show)
        self.hero_btn:SetActive(true)
    else
        self.hero_btn:SetActive(false)
    end
end

local function RefreshPlayerHead(self)
    self.left_player_head:SetData(LuaEntry.Player.uid, LuaEntry.Player.pic, LuaEntry.Player.picVer)
end

local function RefreshEnemyHead(self)
    if self.pveEntrance == PveEntrance.LandBlock then
        self.right_go:SetActive(true)
        self.right_power_bg_go:SetActive(false)
        self.right_player_head_image:LoadSprite(GetTableData(TableName.LW_Stage_Feature, self.levelParam.levelId, "stage_icon"))
    elseif self.pveEntrance == PveEntrance.Story then
        self.right_go:SetActive(true)
        self.right_power_bg_go:SetActive(false)
        self.right_player_head_image:LoadSprite(GetTableData(TableName.LW_Stage_Feature, self.levelParam.levelId, "stage_icon"))
    elseif self.pveEntrance == PveEntrance.Test then
        self.right_go:SetActive(false)
    else
        self.right_go:SetActive(false)
    end
end

local function RefreshLevelText(self)
    if self.pveEntrance == PveEntrance.LandBlock then
        local config = DataCenter.LandManager:GetConfig(LandObjectType.Block, self.levelParam.blockId)
        self.level_text:SetText(config.order)
        self.level_bg_go:SetActive(true)
    elseif self.pveEntrance == PveEntrance.Story then
        self.level_text:SetText(self.levelParam.storyLevel)
        self.level_bg_go:SetActive(true)
    elseif self.pveEntrance == PveEntrance.Test then
        self.level_text:SetText("Test " .. self.levelParam.pveId)
        self.level_bg_go:SetActive(true)
    else
        self.level_bg_go:SetActive(false)
    end
end

local function RefreshPlayerPower(self)
    local power = 0
    for _, heroUuid in pairs(self.selectHeroUuidDict) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        power = power + HeroUtils.GetHeroPower(heroData)
    end
    self.left_power_text:SetText(string.GetFormattedSeperatorNum(power))
end

local function RefreshEnemyPower(self)
    
end

local function LoadHeroesFromHistory(self)
    self.selectHeroUuidDict = {}
    local key = "PVE_HERO_HISTORY"
    local hisStr = Setting:GetPrivateString(key, "")
    if hisStr ~= "" then
        local strs = string.split(hisStr, "|")
        for _, str in ipairs(strs) do
            local spls = string.split(str, ";")
            if #spls == 2 then
                local index = tonumber(spls[1])
                local heroUuid = tonumber(spls[2])
                if heroUuid ~= HireHeroUuid then
                    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
                    if heroData then
                        self.selectHeroUuidDict[index] = heroUuid
                    end
                end
            end
        end
    end
end

local function SaveHeroesToHistory(self)
    local key = "PVE_HERO_HISTORY"
    local strs = {}
    for index, heroUuid in pairs(self.selectHeroUuidDict) do
        if heroUuid ~= HireHeroUuid then
            local str = index .. ";" .. heroUuid
            table.insert(strs, str)
        end
    end
    local hisStr = string.join(strs, "|")
    Setting:SetPrivateString(key, hisStr)
end

local function LoadHireHero(self)
    local str = GetTableData(TableName.Pve, self.levelParam.pveId, "hire_hero")
    if not string.IsNullOrEmpty(str) then
        local spls = string.split(str, "|")
        local heroData = HeroUtils.CreateHireHeroData(tonumber(spls[1]), tonumber(spls[2]), tonumber(spls[3]), spls[4])
        for i = 1, 5 do
            if self.selectHeroUuidDict[i] == nil then
                self.selectHeroUuidDict[i] = heroData.uuid
                break
            end
        end
    else
        HeroUtils.ClearHireHeroData()
    end
end

local function OnHeroChanged(self)
    local heroDataDict = {}
    for i, heroUuid in pairs(self.selectHeroUuidDict) do
        heroDataDict[i] = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    end
    DataCenter.LWBattleManager:GetCurBattleLogic():SetHeroers(heroDataDict)
    self:RefreshPlayerPower()
end

local function OnBackClick(self)
    self:SaveHeroesToHistory()
    self.ctrl:CloseSelf()
    DataCenter.LWBattleManager:Exit()
end

local function OnStartClick(self)
    self:SaveHeroesToHistory()
    local curHeroCount = table.count(self.selectHeroUuidDict)
    if curHeroCount == 0 then
        UIUtil.ShowTipsId(121007)
        return
    end
    -- 检查空位
    PveUtil.CheckHeroSlotEmpty(curHeroCount, 5, function()
        EventManager:GetInstance():Broadcast(EventId.ParkourBattleStart)
        self.ctrl:CloseSelf()
    end)
end

local function OnHeroBtnClick(self)
    if not UIManager:GetInstance():IsWindowOpen(UIWindowNames.UIHeroList) then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroList, { anim = false })
        if DataCenter.HeroDataManager:GetHeroRedNum() > 0 then
            DataCenter.HeroDataManager:MarkHeroRedPoint()
        end
    end
end

local function OnSlotClick(self, eventData, index)
    if self.draggingIndex ~= 0 then
        return
    end
    local heroUuid = self.selectHeroUuidDict[index]
    if heroUuid == nil or heroUuid == HireHeroUuid then
        return
    end

    self.selectHeroUuidDict[index] = nil
    self.hero_list:Refresh()
    self:OnHeroChanged()
end

local function OnSlotEnter(self, eventData, index)
    self.pointerIndex = index
end

local function OnSlotExit(self, eventData, index)
    self.pointerIndex = 0
end

local function OnSlotBeginDrag(self, eventData, index)
    if self.draggingIndex ~= 0 then
        return
    end
    if self.selectHeroUuidDict[index] == nil then
        return
    end

    self.draggingIndex = index
end

local function OnSlotDrag(self, eventData, index)
    if self.draggingIndex == 0 then
        return
    end
    
    local unit = self.team.teamUnits[self.draggingIndex]
    if unit then
        local ray = self.camera:ScreenPointToRay(Touch.Touch0.Position)
        local hits = Physics.RaycastAll(ray, SceneTouchDistance, LayerMask.GetMask("Default"))
        if hits and hits.Length > 0 then
            unit.transform.position = hits[0].point
        end
    end
end

local function OnSlotEndDrag(self, eventData, index)
    if self.draggingIndex == 0 then
        return
    end
    if self.pointerIndex == 0 or self.draggingIndex == self.pointerIndex then
        self.draggingIndex = 0
        self.team:ResetPos()
        return
    end

    local heroUuidA = self.selectHeroUuidDict[self.draggingIndex]
    local heroUuidB = self.selectHeroUuidDict[self.pointerIndex]
    self.selectHeroUuidDict[self.draggingIndex] = heroUuidB
    self.selectHeroUuidDict[self.pointerIndex] = heroUuidA
    self.hero_list:Refresh()
    self:OnHeroChanged()
    self.draggingIndex = 0
end

local function OnCloseUI(self, windowName)
    if windowName == UIWindowNames.UIHeroList or
       windowName == UIWindowNames.UIHeroRecruitReward or
       windowName == UIWindowNames.UIHeroRecruitRewardNew then
        self.hero_list:Refresh()
        self:RefreshHeroRed()
    end
end

--通过英雄id获取英雄btn
function UIParkourFormationPanel:GetHeroObjByHeroId(heroId)
    return self.hero_list:GetHeroObjByHeroId(heroId)
end

--获取未上阵中最强的英雄
function UIParkourFormationPanel:GetMostRarityHeroNoInUse()
    return self.hero_list:GetMostRarityHeroNoInUse()
end


UIParkourFormationPanel.OnCreate = OnCreate
UIParkourFormationPanel.OnDestroy = OnDestroy
UIParkourFormationPanel.ComponentDefine = ComponentDefine
UIParkourFormationPanel.ComponentDestroy = ComponentDestroy
UIParkourFormationPanel.DataDefine = DataDefine
UIParkourFormationPanel.DataDestroy = DataDestroy
UIParkourFormationPanel.OnEnable = OnEnable
UIParkourFormationPanel.OnDisable = OnDisable
UIParkourFormationPanel.OnAddListener = OnAddListener
UIParkourFormationPanel.OnRemoveListener = OnRemoveListener

UIParkourFormationPanel.ReInit = ReInit
UIParkourFormationPanel.RefreshHeroRed = RefreshHeroRed
UIParkourFormationPanel.RefreshPlayerHead = RefreshPlayerHead
UIParkourFormationPanel.RefreshEnemyHead = RefreshEnemyHead
UIParkourFormationPanel.RefreshLevelText = RefreshLevelText
UIParkourFormationPanel.RefreshPlayerPower = RefreshPlayerPower
UIParkourFormationPanel.RefreshEnemyPower = RefreshEnemyPower

UIParkourFormationPanel.LoadHeroesFromHistory = LoadHeroesFromHistory
UIParkourFormationPanel.LoadHireHero = LoadHireHero
UIParkourFormationPanel.SaveHeroesToHistory = SaveHeroesToHistory
UIParkourFormationPanel.OnHeroChanged = OnHeroChanged
UIParkourFormationPanel.OnBackClick = OnBackClick
UIParkourFormationPanel.OnStartClick = OnStartClick
UIParkourFormationPanel.OnHeroBtnClick = OnHeroBtnClick

UIParkourFormationPanel.OnSlotClick = OnSlotClick
UIParkourFormationPanel.OnSlotEnter = OnSlotEnter
UIParkourFormationPanel.OnSlotExit = OnSlotExit
UIParkourFormationPanel.OnSlotBeginDrag = OnSlotBeginDrag
UIParkourFormationPanel.OnSlotDrag = OnSlotDrag
UIParkourFormationPanel.OnSlotEndDrag = OnSlotEndDrag

UIParkourFormationPanel.OnCloseUI = OnCloseUI

return UIParkourFormationPanel

