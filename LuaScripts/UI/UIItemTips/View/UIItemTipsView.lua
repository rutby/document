---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 7/22/21 2:48 PM
---
--[[
    这个是一个道具信息的弹版提示,里面涉及到道具名称,道具描述,道具图标
    这个在传入的参数中需要传入一个gameObject,在显示的时候需要根据到边界的距离动态判定显示的Align。
    
    [0.9, 0.1]         [0.1, 0.1]
            --------------
            |             |
            |             |
            --------------
    [0.9, 0.9]          [0.1, 0.9]
]]

local UIItemTipsView = BaseClass("UIItemTipsView", UIBaseView)
local base = UIBaseView

local Localization = CS.GameEntry.Localization

local Pivot_Max = 0.9
local Pivot_Min = 0.1
local Pivot_Mid = 0.5

local _cp_txtName = "root/TxtName"
local _cp_item_intro = "root/TxtName/Intro"
local _cp_txtDesc = "root/TxtDesc"
local _cp_btnBg = "Panel"
local _cp_root = "root"
local _cp_imgArrow = "root/imgArrow"

--创建
function UIItemTipsView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
end

function UIItemTipsView:OnEnable()
    self:Init()
end

function UIItemTipsView:Init()
    local param = self:GetUserData()
    self._txtName:SetActive(true)
    self._cp_intro:SetActive(false)
    -- 必须绑定一个 alignObject，如果 alignObject 在 tip 创建过程中被销毁，tip 在创建完成后不会初始化，会被销毁
    assert(param.alignObject ~= nil)
    if param.alignObject.gameObject == nil or not param.alignObject.gameObject.activeInHierarchy then
        Logger.Log("UIItemTipsView init aborted because its alignObject has been destroyed.")
        self.ctrl:CloseSelf()
        return
    end

    self._param = param
    if param.type and param.type == "desc" then
        --纯文字
        self:ShowDes(param)
        self._txtName:SetActive(param.title)
        CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._root.transform)
        self:CheckAlign()
        return
    end
    local rewardType = param["rewardType"] or RewardType.GOODS
    if (rewardType == RewardType.GOODS) then
        self:ShowGoods(param)
    elseif rewardType == RewardType.HERO then
        self:ShowHero(param)
    end
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._root.transform)
    
    self:CheckAlign()
end

function UIItemTipsView:ShowHero(param)
    local heroId = param["itemId"]
    local line = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    local name = tonumber(line:getValue("name"))
    local desc = tonumber(line:getValue("desc"))
    self._txtName:SetActive(true)
    self._txtName:SetLocalText(name)
    self._txtDesc:SetLocalText(desc)
end

function UIItemTipsView:ShowRes( param )
    
end

function UIItemTipsView:ShowGoods( param)
    local itemId = param["itemId"]
    if itemId~=nil then
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
        if goods~=nil then
            local name = DataCenter.ItemTemplateManager:GetName(goods.id)
            self._txtName:SetActive(true)
            self._txtName:SetText(name)
            self._cp_intro:SetActive(goods.rate_show ~= "")
            self._txtDesc:SetText(DataCenter.ItemTemplateManager:GetDes(goods.id)) 
        else--传入itemId但是goods表中找不到数据，则认为是资源
            local resName = GetTableData(TableName.Resource, itemId, "name")
            local resDesc = GetTableData(TableName.Resource, itemId, "description")
            self._txtName:SetActive(true)
            self._txtName:SetLocalText(resName) 
            self._txtDesc:SetLocalText(resDesc) 
        end
    else
        if param["itemName"]~=nil then
            if param.isLocal then
                self._txtName:SetActive(param["itemName"] ~= "")
                self._txtName:SetText(param["itemName"])
            else
                self._txtName:SetActive(true)
                self._txtName:SetLocalText(param["itemName"])
            end
        else
            self._txtName:SetActive(false)
        end
        if param["itemDesc"]~=nil then
            if param.isLocal then
                self._txtDesc:SetText(param["itemDesc"])
            else
                self._txtDesc:SetLocalText(param["itemDesc"])
            end
        end
    end
end

--纯文字，传什么显示什么
function UIItemTipsView:ShowDes(param)

    --按需求改变下宽度
    if param.isModify then
        self._root:SetSizeDelta({x = 400,y = 1})
        self._txtDesc:SetSizeDelta({x = 350,y = 1})
    else
        self._root:SetSizeDelta({x = 300,y = 1})
        self._txtDesc:SetSizeDelta({x = 255,y = 1})
    end
    
    if param.isLocal then
        self._txtName:SetActive(true)
        if param.title then
            self._txtName:SetLocalText(param.title)
        end
    else
        self._txtName:SetActive(param.title ~= "")
        if param.title then
            self._txtName:SetText(param.title)
        end
    end
    if param.isLocal then
        self._txtDesc:SetLocalText(param.desc)
    else
        self._txtDesc:SetText(param.desc)
    end

end

function UIItemTipsView:CheckAlign()
    local _arrowX = 0
    local _arrowY = 0
    local _rotation = -90
    local ScreenSize = CS.UnityEngine.Screen
    local ScreenWidth = ScreenSize.width
    local ScreenHeight = ScreenSize.height
    
    local scale = ScreenWidth / 750.0
    local _rect = self._root.rectTransform.rect
    local BgWidth = _rect.width * scale
    local BgHeight = _rect.height * scale
    local alignObject = self._param["alignObject"]
    local aboveValue = 1 --1表示箭头向上，-1表示箭头向下
    -- 目前这个先不做成自适应的了,回头有需求的再改吧
    -- 获取当前的屏幕坐标
    local _screenPos = PosConverse.WorldToScreenPos(alignObject.transform.position)
    local objWidth = alignObject.rectTransform.rect.width * scale
    local objHeight = alignObject.rectTransform.rect.height
    local pivot = Vector2.New(0.5, 0.5)
    if (_screenPos.y + objHeight*0.5 + BgHeight >ScreenHeight-50) then
        pivot.y = Pivot_Max
        _arrowY = BgHeight / scale * 0.5+3
        aboveValue = 1
    else
        pivot.y = Pivot_Min
        _arrowY = -BgHeight / scale *0.5-3
        aboveValue = -1
    end
    if (_screenPos.x - BgWidth *0.5 <=1) then
        pivot.x = Pivot_Min
        _arrowX = -BgWidth / scale*0.5*0.8
    elseif (_screenPos.x + BgWidth*0.5 > ScreenWidth-1) then
        pivot.x = Pivot_Max
        _arrowX = BgWidth / scale*0.5*0.8
    else
        pivot.x = Pivot_Mid
        _arrowX = 0
    end
    
    -- 计算旋转角度
    if (pivot.y == Pivot_Max and pivot.x == Pivot_Min) then
        _rotation = -90--135 
    elseif (pivot.y == Pivot_Max and pivot.x == Pivot_Max) then
        _rotation = -90--225
    elseif (pivot.y == Pivot_Max and pivot.x == Pivot_Mid) then
        _rotation = -90
    elseif (pivot.y == Pivot_Min and pivot.x == Pivot_Min) then
        _rotation = 90--45
    elseif (pivot.y == Pivot_Min and pivot.x == Pivot_Max) then
        _rotation = 90--315
    elseif (pivot.y == Pivot_Min and pivot.x == Pivot_Mid) then
        _rotation = 90
    end
    
    self._imgArrow.transform.localRotation = Quaternion.Euler(0, 0, _rotation)
    self._imgArrow.rectTransform.anchoredPosition = Vector2.New(_arrowX, _arrowY)
    self._imgArrow:SetActive(self._param.showArrow == nil or self._param.showArrow == true)
    
    self._root.rectTransform.pivot = pivot
    self._root.transform.position = alignObject.transform.position+Vector3.New(0,-(objHeight*0.5*aboveValue),0)
    
end

--概率道具
function UIItemTipsView:OnClickItemProbability()
    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self._param.itemId)
    if goods.rate_show ~= "" then       
        local str = string.split(goods.rate_show,"|")
        local listParam = {}
        for i = 1 ,#str do
            local item = string.split(str[i],";")
            local list = {}
            table.insert(list.list, {des = DataCenter.ItemTemplateManager:GetName(item[1]).."x"..item[2]})
            table.insert(list.list, {des = item[3].."%"})
            table.insert(list.list, {des = item[4] and item[4] or ""})
            table.insert(listParam, list)
        end
        local param = {}
        param.list = listParam
        param.titleList = { {des = Localization:GetString(100080)},
                            {des = Localization:GetString(320476)},
                            {des = Localization:GetString(321303)}, }
        param.title = 320475
        param.showIndex = 0
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonItemProbability, NormalBlurPanelAnim, param)
    end
end

-- 销毁
function UIItemTipsView:OnDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

function UIItemTipsView:ComponentDefine()
    self._btn = self:AddComponent(UIButton, _cp_btnBg)
    self._btn:SetOnClick(function ()
        self.ctrl:CloseSelf()
    end)
    self._txtName = self:AddComponent(UITextMeshProUGUIEx, _cp_txtName)
    self._cp_intro = self:AddComponent(UIButton,_cp_item_intro)
    self._cp_intro:SetOnClick(function ()
        self:OnClickItemProbability()
    end)
    self._txtDesc = self:AddComponent(UITextMeshProUGUIEx, _cp_txtDesc)
    self._root = self:AddComponent(UIBaseContainer, _cp_root)
    self._imgArrow = self:AddComponent(UIBaseContainer, _cp_imgArrow)
end

function UIItemTipsView:ComponentDestroy()
    self._btn = nil
    self._txtName = nil
    self._cp_intro = nil
    self._txtDesc = nil
end


return UIItemTipsView