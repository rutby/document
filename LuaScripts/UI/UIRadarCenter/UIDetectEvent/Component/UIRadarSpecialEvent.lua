---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/9/26 12:14
---
local UIRadarSpecialEvent = BaseClass("UIRadarSpecialEvent", UIBaseContainer)
local base = UIBaseContainer

local info_btn_path = "InfoBtn"

local line_prefix_path = "SpecialEventSlider/Line"
local max_num = 9
local slider_path = "SpecialEventSlider"
local title_text_path = "SpecialEventNameText"
local time_text_path = "SpecialEventTimeText"

local function OnCreate(self)
    base.OnCreate(self)

    self:DataDefine()
    self:ComponentDefine()
end

local function ComponentDefine(self)
    self.infoBtn = self:AddComponent(UIButton, info_btn_path)
    self.infoBtn:SetOnClick(function ()
        self:OnInfoClick()
    end)
    local index = 1
    while index < max_num do
        local indexStr = line_prefix_path..index
        self["line"..index] = self:AddComponent(UIImage, indexStr)
        index = index + 1
    end
    self.slider = self:AddComponent(UISlider, slider_path)
    self.maxSliderLen = self.slider.rectTransform.rect.width

    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
    self.time_text = self:AddComponent(UITextMeshProUGUIEx, time_text_path)
end

local function DataDefine(self)

end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()

    base.OnDestroy(self)
end

local function SetData(self, data)
    self.data = data
    self:RefreshView()
end

local function RefreshView(self)
    if self.data == nil then
        return
    end
    local index = 1
    self.title_text:SetText(self.data.nameStr)
    self.time_text:SetActive(not self.data.showProgress)
    self.slider:SetActive(self.data.showProgress)
    while index <= max_num do
        local componentStr = "line"..index
        local comp = self[componentStr]
        if comp then
            comp:SetActive(false)
        end
        index = index + 1
    end
    if self.data.showProgress then
        index = 1
        while index < self.data.maxNum do
            local componentStr = "line"..index
            local comp = self[componentStr]
            if comp then
                comp:SetActive(true)
                local posX, posY, posZ = comp.transform:Get_localPosition()
                comp.transform:Set_localPosition(self.maxSliderLen * index / self.data.maxNum, posY, posZ)
            end
            index = index + 1
        end  

        local percent = self.data.currentNum / self.data.maxNum
        percent = Mathf.Clamp(percent, 0, 1)
        self.slider:SetValue(percent)
    else
        self:RefreshTime()
    end
end

local function RefreshTime(self)
    if self.data == nil then
        return
    end
    if not self.data.showProgress and self.data.endTime ~= nil then
        local now = UITimeManager:GetInstance():GetServerTime()
        local leftTime = self.data.endTime - now
        leftTime = math.max(0, leftTime)
        self.time_text:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(leftTime))
    end
end

local function ComponentDestroy(self)

end

local function DataDestroy(self)
    
end

local function OnInfoClick(self)
    self.view:ShowSpecialOpsInfo()
end

UIRadarSpecialEvent.OnCreate = OnCreate
UIRadarSpecialEvent.OnDestroy = OnDestroy
UIRadarSpecialEvent.ComponentDefine = ComponentDefine
UIRadarSpecialEvent.ComponentDestroy = ComponentDestroy
UIRadarSpecialEvent.DataDefine = DataDefine
UIRadarSpecialEvent.DataDestroy = DataDestroy
UIRadarSpecialEvent.OnInfoClick = OnInfoClick
UIRadarSpecialEvent.SetData = SetData
UIRadarSpecialEvent.RefreshView = RefreshView
UIRadarSpecialEvent.RefreshTime = RefreshTime

return UIRadarSpecialEvent