---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/8/2 14:03
---
local UIDetectEventView = BaseClass("UIDetectEventView", UIBaseView)
local Localization = CS.GameEntry.Localization
local DetectEventItem = require "UI.UIRadarCenter.UIDetectEvent.Component.DetectEventItem"
local DetectEventRewardEffect = require "UI.UIRadarCenter.UIDetectEvent.Component.DetectEventRewardEffect"
local DetectEventItemInfoView = require "UI.UIRadarCenter.UIDetectEvent.Component.DetectEventItemInfoView"
local UIRadarNormalEvent = require "UI.UIRadarCenter.UIDetectEvent.Component.UIRadarNormalEvent"
local GiftBar = require "UI.UIRadarCenter.UIDetectEvent.Component.GiftBar"
local NormalEventInfo = require "UI.UIRadarCenter.UIDetectEvent.Component.NormalEventInfo"
local SpecialOpsEventInfo = require "UI.UIRadarCenter.UIDetectEvent.Component.SpecialOpsEventInfo"
local DetectEventLevelUpgradeInfoView = require "UI.UIRadarCenter.UIDetectEvent.Component.DetectEventLevelUpgradeInfoView"
local FormationStaminaSlider = require "UI.UIFormation.UIFormationSelectListNew.Component.FormationStaminaSlider_TextMeshPro"
local base = UIBaseView

local safe_area_path = "Bg"
local title_text_path = "UICommonFullTop/imgTitle/Common_img_title/titleText"
local close_btn_path = "UICommonFullTop/CloseBtn"
local home_btn_path = "UICommonFullTop/HomeBtn"
local radar_level_path = "safeArea/detectObj/LevelGo"
local radar_level_text_path = "safeArea/detectObj/LevelGo/Level_Info_btn/Level_Text"
local level_progress_path = "safeArea/detectObj/LevelGo/Level_Fill_Background"
local radar_level_slider_text_path = "safeArea/detectObj/LevelGo/Level_Fill_Background/Num"
local radar_level_info_btn_path = "safeArea/detectObj/LevelGo/Level_Info_btn"
local radar_level_fill_amount_path = "safeArea/detectObj/LevelGo/Level_Fill_Background/Level_Fill_Amount"
local max_progress_bg = "safeArea/detectObj/LevelGo/Detect_bg_max"
local ani_path = ""
local event_items_path = "safeArea/detectObj/EventsGo"
local event_reward_effect_path = "safeArea/detectObj/RewardEffectGo"
local detect_event_info_path = "safeArea/detectObj/DetectEventInfoGo"
local detect_level_info_path = "safeArea/detectObj/DetectEventLevelGo"
local extra_effect_path = "safeArea/detectObj/DetectEventInfoGo/UIExtraEffect"
local formationStaminaSlider_path = "safeArea/detectObj/sliderBg"
local normal_event_path = "safeArea/detectObj/NormalEvent"
local special_event_info_path = "safeArea/detectObj/Special_Event_Info_Panel"
local normal_event_info_path = "safeArea/detectObj/Normal_Event_Info_Panel"
local detectLayer = "safeArea/detectObj"
local radar_puzzle_path = "safeArea/detectObj/Monster"
local radar_puzzle_red_path = "safeArea/detectObj/Monster/RedPointNum"
local radar_puzzle_red_text_path = "safeArea/detectObj/Monster/RedPointNum/monster_red_text"
local monster_slider_fill_path = "safeArea/detectObj/Monster/monster_slider_go/monster_slider_fill"
local monster_slider_text_path = "safeArea/detectObj/Monster/monster_slider_go/monster_slider_text"
local monster_slider_go_path = "safeArea/detectObj/Monster/monster_slider_go"
local completeAllBtn_path = "safeArea/CompleteAll/CompleteAllBtn"
local completeAllBtnText_path = "safeArea/CompleteAll/CompleteAllBtn/btnText"
local completeAllText_path = "safeArea/CompleteAll/CompleteAllText"

local SelectTab =
{
    RaDar =1,
    News = 2,

}
local one_round_time = 5500.0
--稍微加30ms的延时
local one_round_show_time = 3060.0

local auto_request_time_gap = 5000.0

local function OnCreate(self)
    base.OnCreate(self)
    local uuid,index = self:GetUserData()
    if index~=nil and DataCenter.WorldNewsDataManager:CheckShowByCityLv() then
        self.selectIndex = index
    else
        self.selectIndex = SelectTab.RaDar
    end
    self.uuid = uuid or nil
    self:DataDefine()
    self:ComponentDefine()
    self:GetDataFromServer()
    if DataCenter.RadarBossManager:IsShowBtn() then
        DataCenter.RadarBossManager:SendGetRadarBossMarch()
    end
    DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.UIDetectEvent, true)
end

local function ComponentDefine(self)
    self.detectEventItemInfo = nil
    self.detectEventItems = {}
    self.level_progress = self:AddComponent(UIBaseContainer, level_progress_path)
    self.max_progress_bg = self:AddComponent(UIBaseContainer, max_progress_bg)
    self.animator = self.transform:Find(ani_path):GetComponent(typeof(CS.UnityEngine.Animator))
    self.detectLayer = self:AddComponent(UIBaseContainer, detectLayer)
    self.radar_level = self:AddComponent(UIBaseContainer, radar_level_path)
    self.radar_level_text = self:AddComponent(UITextMeshProUGUIEx, radar_level_text_path)
    self.radar_level_slider_text = self:AddComponent(UITextMeshProUGUIEx, radar_level_slider_text_path)
    self.radar_level_info_btn = self:AddComponent(UIButton, radar_level_info_btn_path)
    self.radar_level_fill_amount = self:AddComponent(UIImage, radar_level_fill_amount_path)
    self.radar_level_fill_amount:SetFillAmount(0)
    self.event_reward_effect = self:AddComponent(UIBaseContainer, event_reward_effect_path)
    self.event_items = self:AddComponent(UIBaseContainer, event_items_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.home_btn = self:AddComponent(UIButton, home_btn_path)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
    self.formationStaminaSlider = self:AddComponent(FormationStaminaSlider, formationStaminaSlider_path)
    self.formationStaminaSlider:SetTipTop()
    self.title_text:SetLocalText(GameDialogDefine.RADAR_DETECT)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.home_btn:SetOnClick(function()
        GoToUtil.GotoCity()
    end)
    self.radar_level_info_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:SetDetectEventLvInfoShowState(true)
    end)
    self.safe_area_btn = self:AddComponent(UIButton, safe_area_path)
    self.safe_area_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:SetDetectEventLvInfoShowState(false)
        self.view:SetCurrentSelectItemId(nil)
        self:HideSpecialOpsInfo()
        self:HideNormalInfo()
    end)

    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Radar)

    self.extra_effect = self:AddComponent(UIExtraEffect_TextMeshPro, extra_effect_path)
    self.normalEvent = self:AddComponent(UIRadarNormalEvent, normal_event_path)
    self.packageDay = self:AddComponent(GiftBar, "safeArea/detectObj/GiftBar_Day")
    self.packageDay:SetActive(false)
    self.radar_puzzle = self:AddComponent(UIButton, radar_puzzle_path)
    self.radar_puzzle:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnRadarPuzzleBtnClick()
    end)
    self.radar_puzzle_red = self:AddComponent(UIBaseContainer, radar_puzzle_red_path)
    self.radar_puzzle_red_text = self:AddComponent(UITextMeshProUGUIEx, radar_puzzle_red_text_path)
    self.monster_slider_go = self:AddComponent(UIBaseContainer, monster_slider_go_path)
    self.monster_slider_fill = self:AddComponent(UIImage, monster_slider_fill_path)
    self.monster_slider_text = self:AddComponent(UITextMeshProUGUIEx, monster_slider_text_path)

    self.completeAllBtn = self:AddComponent(UIButton, completeAllBtn_path)
    self.completeAllBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnCompleteAllBtnClick()
    end)
    self.completeAllBtnText = self:AddComponent(UITextMeshProUGUIEx, completeAllBtnText_path)
    self.completeAllBtnText:SetLocalText(GameDialogDefine.DETECT_2)

    self.completeAllText = self:AddComponent(UITextMeshProUGUIEx, completeAllText_path)
    local count, costStamina, uuids = self.ctrl:GetAutoCompleteTaskNumAndCost()
    self.autoCompleteUuids = uuids
    self.completeAllText:SetText(Localization:GetString(GameDialogDefine.DETECT_1, count, costStamina))
end

local function DataDefine(self)
    self.currentSelectEventId = nil
    self.showDetectEventLvInfo = false
    self.showDetectEventPowerLvInfo = false
    self.isGettingData = false
    self.isLoading = {}
    self.freeItemInfoCells = {}
    self.itemInfoCells = {}
    self.dataList = {}
    self.allRewardAnimation = {}
    self.panelOpenTime = UITimeManager:GetInstance():GetServerTime()
    self.preAngle = 0
    self.currentFillPercent = 0
    self.lastAutoTime = 0
    self.needRefresh = false
    self.needLoadCount = 0
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()

    base.OnDestroy(self)
end

local function ComponentDestroy(self)
    self:HideDetectEventItemInfo()
    self:HideDetectLevelInfoView()
    self:HideNormalInfo()
    self.normalInfo = nil
    self:HideSpecialOpsInfo()
    self.specialOpsInfo = nil
    self.animator:Play("HideDetectEventInfo")
    self.detectEventItemInfo = nil
    self.detectEventItems = nil

    self.radar_level = nil
    self.radar_level_text = nil
    self.radar_level_slider = nil
    self.radar_level_slider_text = nil
    self.radar_level_info_btn = nil
    self.animator = nil
    self.close_btn = nil
    self.title_text = nil
    self.event_items = nil
    self.event_reward_effect = nil
    self.extra_effect = nil
    self.formationStaminaSlider = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function DataDestroy(self)
    self.uuid = nil
    self.currentSelectEventId = nil
    self.isGettingData = nil
    self.showDetectEventLvInfo = nil
    self.showDetectEventPowerLvInfo = nil
    self.isLoading = nil
    self.freeItemInfoCells = nil
    self.itemInfoCells = nil
    self.dataList = nil
    self.panelOpenTime = nil
    self.preAngle = nil
    self.allRewardAnimation = nil
    self.currentFillPercent = nil
    self.lastAutoTime = nil
    self.needRefresh = nil
    self.needLoadCount = 0
end

local function RefreshView(self)
    if self.isGettingData then
        return
    end
    self.needRefresh = false

    self.dataList = self.ctrl:GetRadarCenterPositionList()
    --local specialEventData = self.ctrl:GetSpecialEventData()
    --if specialEventData ~= nil then
    --    self.specialEvent:SetData(specialEventData)
    --end
    self:RefreshDetectEventItems()
    self:RefreshLevelInfo()
    self:RefreshPowerInfo()

    if self.currentSelectEventId ~= nil then
        self:ShowDetectEventItemInfo()
    else
        self:HideDetectEventItemInfo()
    end

    if self.showDetectEventLvInfo then
        self:ShowDetectLevelInfoView()
    else
        self:HideDetectLevelInfoView()
    end

    if self.normalInfo ~= nil and self.normalInfo:GetActive() then
        self:ShowNormalInfo()
    end
    if self.specialOpsInfo ~= nil and self.specialOpsInfo:GetActive() then
        self:ShowSpecialOpsInfo()
    end
    local maxNum = self.ctrl:GetEventStoreMax()
    local currentNum = DataCenter.RadarCenterDataManager:GetMaxDetectNum()
    self.normalEvent:SetData(currentNum, maxNum)
    self:RefreshPackageInfo()
    self:Update()
    self:RefreshRadarPuzzle()
end

local function SetDetectEventLvInfoShowState(self, showFlag)
    self.showDetectEventLvInfo = showFlag
    if self.showDetectEventLvInfo then
        self:ShowDetectLevelInfoView()
    else
        self:HideDetectLevelInfoView()
    end
end

local function RefreshDetectEventItems(self)
    local newItem = {}
    table.walk(self.dataList, function (k, v)
        if self.itemInfoCells[v.uuid] == nil then
            newItem[v.uuid] = 1
        end
    end)

    table.walk(self.itemInfoCells, function (k, v)
        v:SetActive(false)
        table.insert(self.freeItemInfoCells, v)
    end)
    self.itemInfoCells = {}
    self.ctrl:ResetAllPosition()
    self.needLoadCount = table.count(self.dataList)
    table.walk(self.dataList, function (k, v)
        self:AddOneDetectEventItem(v, newItem[v.uuid])
    end)
    newItem = nil
end

local function RefreshLevelInfo(self)
    local level = DataCenter.RadarCenterDataManager:GetDetectInfoLevel()
    local maxLv = self.view.ctrl:GetDetectEventMaxLevel()

    self.radar_level_text:SetText(level)
    if level < maxLv then
        --self.level_progress:SetActive(true)
        --self.normal_progress_bg:SetActive(true)
        self.max_progress_bg:SetActive(false)
        local max = self.ctrl:GetDetectEventLevelUpNum(level)
        local current = DataCenter.RadarCenterDataManager:GetDetectInfoCompleteNum()
        local text = string.GetFormattedSeperatorNum(current).."/"..string.GetFormattedSeperatorNum(max)
        self.radar_level_slider_text:SetText(text)
        self.radar_level_fill_amount:SetFillAmount(current / max)
        self.currentFillPercent = current / max
    else
        --self.level_progress:SetActive(false)
        --self.normal_progress_bg:SetActive(false)
        self.max_progress_bg:SetActive(true)
    end
end


local function RefreshPowerInfo(self)
end

local function AddOneDetectEventItem(self, param, isNew)
    if #self.freeItemInfoCells > 0 then
        local temp = table.remove(self.freeItemInfoCells)
        if temp ~= nil then
            temp:SetActive(true)
            temp.transform:SetParent(self.event_items.transform)
            temp:SetUuid(param, self.currentSelectEventId)
            self.itemInfoCells[param.uuid] = temp
            if self.currentSelectEventId == param.uuid or isNew ~= nil then
                DOTween.Restart(temp.gameObject)
            end

            temp.transform.localPosition = self.ctrl:GetDetectEventPosition(param.uuid, param.fromType)
            temp.transform:SetAsLastSibling()
            self.needLoadCount = self.needLoadCount - 1
            self:CheckLoadFinish()
        end
    else
        self:GameObjectInstantiateAsync(UIAssets.DetectEventItem, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go:SetActive(true)
            go.transform:SetParent(self.event_items.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)

            local nameStr = tostring(NameCount)
            go.name = nameStr
            NameCount = NameCount + 1
            self.itemInfoCells[param.uuid] = self.event_items:AddComponent(DetectEventItem, nameStr)
            self.itemInfoCells[param.uuid]:SetUuid(param, self.currentSelectEventId)
            if self.uuid ~= nil and self.uuid == param.uuid then
                self:SetCurrentSelectItemId(param.uuid)
            end
            go.transform.localPosition = self.ctrl:GetDetectEventPosition(param.uuid, param.fromType)
            go.transform:SetAsLastSibling()
            self.needLoadCount = self.needLoadCount - 1
            self:CheckLoadFinish()
        end)
    end
end

-- 注册消息
local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.GetAllDetectInfo, self.DoWhenListDataBack)
    self:AddUIListener(EventId.UpgradeDetectPower, self.DoWhenDataChange)
    self:AddUIListener(EventId.DetectInfoChange, self.DoWhenDataChange)
    self:AddUIListener(EventId.DetectEventRewardGet, self.ShowRewardGetAnimation)
    self:AddUIListener(EventId.UpdateGiftPackData, self.RefreshPackageInfo)
    self:AddUIListener(EventId.PuzzleDataUpdate, self.PuzzleDataUpdateSignal)
    self:AddUIListener(EventId.OnPuzzleMonsterDataRefresh, self.OnPuzzleMonsterDataRefreshSignal)
    self:AddUIListener(EventId.RefreshGuide, self.PlotEventComplete)
end

-- 注销消息
local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateGiftPackData, self.RefreshPackageInfo)
    self:RemoveUIListener(EventId.DetectEventRewardGet, self.ShowRewardGetAnimation)
    self:RemoveUIListener(EventId.GetAllDetectInfo, self.DoWhenListDataBack)
    self:RemoveUIListener(EventId.UpgradeDetectPower, self.DoWhenDataChange)
    self:RemoveUIListener(EventId.DetectInfoChange, self.DoWhenDataChange)
    self:RemoveUIListener(EventId.PuzzleDataUpdate, self.PuzzleDataUpdateSignal)
    self:RemoveUIListener(EventId.OnPuzzleMonsterDataRefresh, self.OnPuzzleMonsterDataRefreshSignal)
    self:RemoveUIListener(EventId.RefreshGuide, self.PlotEventComplete)
    base.OnRemoveListener(self)
end

local function PlotEventComplete(self)
    if DataCenter.GuideManager:InGuide() then
        return
    end
    local param = self.ctrl:GetOneEventData(self.currentSelectEventId)
    if param and param.type == DetectEventType.PLOT then
        self.ctrl:FinishTalk(self.currentSelectEventId)
    end
end

local function RefreshFormationStamina(self)
    self.formationStaminaSlider:UpdateStamina()
end

local function Update(self)
    --if self.specialEvent ~= nil then
    --    self.specialEvent:RefreshTime()
    --end
    if self.normalInfo ~= nil and self.normalInfo:GetActive() then
        self.normalInfo:RefreshTime()
    end
    if self.specialOpsInfo and self.specialOpsInfo:GetActive() then
        self.specialOpsInfo:RefreshTime()
    end
    if self.needRefresh == true then
        self:RefreshView()
        return
    end
    if self.formationStaminaSlider == nil then
        return
    end
    self:RefreshFormationStamina()
    local time = self.ctrl:GetRefreshLeftTime()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local maxNum = self.ctrl:GetEventStoreMax()
    local currentNum = DataCenter.RadarCenterDataManager:GetMaxDetectNum()

    if time < 0 and curTime - self.lastAutoTime > auto_request_time_gap then
        if currentNum < maxNum then
            self:GetDataFromServer()
            self.lastAutoTime = curTime
            return;
        end
    end
    self:CheckAndPlayScanEffect()
end

local function GetDataFromServer(self)
    if self.isGettingData then
        return
    end
    self.isGettingData = true
    DataCenter.RadarCenterDataManager:GetDetectEventData()
end

local function DoWhenListDataBack(self)
    if self.isGettingData then
        local list = DataCenter.RadarCenterDataManager:GetCompleteByHelperList()
        local records = {}
        for i, v in ipairs(list) do
            UIUtil.ShowTips(Localization:GetString(GameDialogDefine.DETECT_7, v.completeByHelper.name), 2, v.completeByHelper, nil, false)
            table.insert(records, v.uuid)
        end
        DataCenter.RadarCenterDataManager:AddCompleteByHelperRecord(records)
    end
    self.isGettingData = false
    self.needRefresh = true
end

local function DoWhenDataChange(self)
    self.needRefresh = true
end

local function SetCurrentSelectItemId(self, detectEventId)
    table.walk(self.itemInfoCells, function (k, v)
        v:setSelectUuid(detectEventId)
    end)

    self.currentSelectEventId = detectEventId
    if self.currentSelectEventId == nil then
        self:HideDetectEventItemInfo()
    else
        self:ShowDetectEventItemInfo()
    end
end

local function SetPlotEventUuid(self, eventUuid)
    table.walk(self.itemInfoCells, function (k, v)
        v:setSelectUuid(eventUuid)
    end)
    self.currentSelectEventId = eventUuid
end


local function ShowDetectEventItemInfo(self)
    if self.detectEventItemInfo == nil then
        self.detectEventItemInfo = self:AddComponent(DetectEventItemInfoView, detect_event_info_path)
    end
    local param = self:GetCurSelectParam()
    if param ~= nil then
        self.detectEventItemInfo:SetCurrentSelectUuid(self.currentSelectEventId, param)
    end
    self.detectEventItemInfo:SetActive(true)
    --if self.itemInfoCells[self.currentSelectEventId] ~= nil   then
    --    if self.itemInfoCells[self.currentSelectEventId].transform.localPosition.x > 0 then
    --        if self.radar_image.transform.localPosition.x >= 0 then
    --            self.animator:Play("ShowDetectEventInfo")
    --        end
    --    else
    --        if self.radar_image.transform.localPosition.x < 0 then
    --            self.animator:Play("HideDetectEventInfo")
    --        end
    --    end
    --end
    self:SetDetectEventLvInfoShowState(false)
    self:HideNormalInfo()
    self:HideSpecialOpsInfo()
end

local function HideDetectEventItemInfo(self)
    if self.detectEventItemInfo ~= nil then
        self.detectEventItemInfo:SetActive(false)
    end
    --if self.radar_image.transform.localPosition.x < 0 then
    --    self.animator:Play("HideDetectEventInfo")
    --end
end

local function ShowDetectLevelInfoView(self)
    if self.detectEventLevelUpgradeInfoView == nil then
        self.detectEventLevelUpgradeInfoView = self:AddComponent(DetectEventLevelUpgradeInfoView, detect_level_info_path)
    end
    self.detectEventLevelUpgradeInfoView:SetActive(true)
    self:SetCurrentSelectItemId(nil)
    self:HideNormalInfo()
    self:HideSpecialOpsInfo()
end

local function HideDetectLevelInfoView(self)
    if self.detectEventLevelUpgradeInfoView ~= nil then
        self.detectEventLevelUpgradeInfoView:SetActive(false)
    end
end

local function OnPowerUpgradeClick(self)
    if not self:IsReachPowerMax() then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIDetectEventPowerUpgrade)
        self:SetDetectEventLvInfoShowState(false)
        self.view:SetCurrentSelectItemId(nil)
    end
end

local function IsReachPowerMax(self)
    local currentLv = DataCenter.RadarCenterDataManager:GetDetectInfoPower()
    local max = self.ctrl:GetDetectEventPowerMaxLevel()
    return currentLv >= max
end

local function CheckAndPlayScanEffect(self)
    local totalTime = math.fmod(UITimeManager:GetInstance():GetServerTime() - self.panelOpenTime, one_round_time)
    if totalTime > one_round_show_time then
        --self.scan_effect:SetActive(false)
    else
        --self.scan_effect:SetActive(true)
    end
    local currentAngle = totalTime * 360 / one_round_show_time
    currentAngle = math.min(currentAngle, 360)
    if currentAngle == 360 then
        currentAngle = 0
    end
    table.walk(self.itemInfoCells, function (k, v)
        local pos_x, pos_y = v.transform:Get_localPosition()
        local angle = self:GetAngleByPos(0, 0, pos_x, pos_y)
        if angle >= self.preAngle and angle <= currentAngle then
            v:ShowRadarScanEffect()
        end
    end)
    self.preAngle = currentAngle
end

local function GetAngleByPos(self, p1_x, p1_y, p2_x, p2_y)
    local px = p2_x - p1_x
    local py = p2_y - p1_y
    local r = math.atan( py, px ) * 180 / math.pi + 720
    r = math.fmod(r, 360)
    return r
end

local function ShowRewardGetAnimation(self, eventUuid)
    local param = self.ctrl:GetOneEventData(eventUuid)
    if param ~= nil and self.itemInfoCells[eventUuid] ~= nil and self.itemInfoCells[eventUuid].transform ~= nil then
        local lvProgressTransform = self.radar_level_fill_amount.transform
        local rect = self.radar_level_fill_amount.rectTransform.rect
        param.lvPosX = lvProgressTransform.position.x + rect.width * (self.currentFillPercent - 0.5)
        param.eventPos = self.itemInfoCells[eventUuid].transform.position

        self:GameObjectInstantiateAsync(UIAssets.DetectEventRewardEffect, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go:SetActive(true)
            go.transform:SetParent(self.event_reward_effect.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_localPosition(0, 0, 0)
            local nameStr = tostring(NameCount)
            go.name = nameStr
            NameCount = NameCount + 1
            param.name = nameStr
            self.allRewardAnimation[nameStr] = self.event_reward_effect:AddComponent(DetectEventRewardEffect, nameStr)
            self.allRewardAnimation[nameStr]:SetParam(param)
        end)
    end
end

local function RemoveRewardGetAnimation(self, nameStr)
    if self.allRewardAnimation[nameStr] ~= nil then
        self.event_reward_effect:RemoveComponents(nameStr)
        self.allRewardAnimation[nameStr] = nil
    end
end

local function GetGuideSpecialBubble(self,eventType,state)
    local info = DataCenter.RadarCenterDataManager:GetOneInfoByEventTypeAndState(eventType,state)
    if info ~= nil and self.itemInfoCells[info.uuid] ~= nil then
        return self.itemInfoCells[info.uuid]:GetGuideObject()
    end
end

local function ShowSpecialOpsInfo(self)
    if self.specialOpsInfo == nil then
        self.specialOpsInfo = self:AddComponent(SpecialOpsEventInfo, special_event_info_path)
    end
    local data = self.ctrl:GetSpecialOpsEventInfo()
    if data ~= nil then
        self.specialOpsInfo:SetActive(true)
        self.specialOpsInfo:SetData(data)
        self:SetDetectEventLvInfoShowState(false)
        self.view:SetCurrentSelectItemId(nil)
        self:HideNormalInfo()
    else
        self:HideSpecialOpsInfo()
    end
end

local function HideSpecialOpsInfo(self)
    if self.specialOpsInfo ~= nil then
        self.specialOpsInfo:SetActive(false)
    end
end

local function ShowNormalInfo(self)
    if self.normalInfo == nil then
        self.normalInfo = self:AddComponent(NormalEventInfo, normal_event_info_path)
    end
    local data = self.ctrl:GetNormalEventInfo()
    if data ~= nil then
        self.normalInfo:SetActive(true)
        self.normalInfo:SetData(data)
        self:SetDetectEventLvInfoShowState(false)
        self.view:SetCurrentSelectItemId(nil)
        self:HideSpecialOpsInfo()
    else
        self:HideNormalInfo()
    end
end

local function HideNormalInfo(self)
    if self.normalInfo ~= nil then
        self.normalInfo:SetActive(false)
    end
end

local function RefreshPackageInfo(self)
    local dayPackageInfo = self.ctrl:GePackageInfo(RadarDetectEventFillFullPackage)
    --local weekPackageInfo = self.ctrl:GePackageInfo(RadarDetectEventFillFullItemId)

    local hasDay = dayPackageInfo ~= nil
    --local hasWeek = weekPackageInfo ~= nil
    if hasDay then
        self.packageDay:SetActive(true)
        self.packageDay:SetData(dayPackageInfo)
    else
        self.packageDay:SetActive(false)
    end

    --if hasWeek then
    --    if self.packageWeek == nil then
    --        self.packageWeek = self:AddComponent(GiftBar, "safeArea/GiftBar_Week")
    --    end
    --    self.packageWeek:SetActive(true)
    --    self.packageWeek:SetData(weekPackageInfo)
    --else
    --    if self.packageWeek ~= nil then
    --        self.packageWeek:SetActive(false)
    --    end
    --end
end

function UIDetectEventView:RefreshRadarPuzzle()
    if DataCenter.RadarBossManager:IsShowBtn() then
        self.radar_puzzle:SetActive(true)
        self.radar_level:SetActive(false)
        self:RefreshRadarPuzzleRedNum()
        self:RefreshRadarPuzzleSlider()
    else
        self.radar_puzzle:SetActive(false)
        self.radar_level:SetActive(true)
    end
end

function UIDetectEventView:RefreshRadarPuzzleRedNum()
    local num = DataCenter.RadarBossManager:GetRedNun()
    if num > 0 then
        self.radar_puzzle_red:SetActive(true)
        self.radar_puzzle_red_text:SetText(tostring(num))
    else
        self.radar_puzzle_red:SetActive(false)
    end
end

function UIDetectEventView:RefreshRadarPuzzleSlider()
    local curNum = DataCenter.RadarCenterDataManager:GetBossProgress()
    local need = DataCenter.RadarBossManager:GetNeedProgress()
    if curNum > need then
        curNum = need
    end
    local slider = curNum / need
    self.monster_slider_go:SetActive(true)
    self.monster_slider_fill:SetFillAmount(slider)
    if curNum >= need and not DataCenter.RadarBossManager:CanCreatePuzzleBoss() then
        self.monster_slider_text:SetLocalText(GameDialogDefine.RADAR_BOSS_DAILY_ALREADY_FINISH)
    else
        self.monster_slider_text:SetLocalText(GameDialogDefine.SPLIT, curNum, need)
    end
end

function UIDetectEventView:OnRadarPuzzleBtnClick()
    if DataCenter.RadarBossManager:CanCreatePuzzleBoss() then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPuzzleMonsterCreate, PuzzleMonsterType.Radar)
    else
        local curNum = DataCenter.RadarCenterDataManager:GetBossProgress()
        local need = DataCenter.RadarBossManager:GetNeedProgress()
        if curNum < need then
            UIUtil.ShowTipsId(GameDialogDefine.CALL_RADAR_BOSS_NEED_FINISH_RADAR)
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIPuzzleMonsterList, PuzzleMonsterType.Radar)
        end
    end
end

function UIDetectEventView:OnCompleteAllBtnClick()
    self.view.ctrl:AutoCompleteTask(self.autoCompleteUuids)
end

function UIDetectEventView:PuzzleDataUpdateSignal()
    self.needRefresh = true
end

function UIDetectEventView:OnPuzzleMonsterDataRefreshSignal()
    self.needRefresh = true
end

function UIDetectEventView:GetCurSelectParam()
    local result = nil
    for k,v in ipairs(self.dataList) do
        if v.uuid == self.currentSelectEventId then
            return v
        end
    end
    return result
end

function UIDetectEventView:CheckLoadFinish()
    if self.needLoadCount <= 0 then
        DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.UIDetectEvent, nil)
        EventManager:GetInstance():Broadcast(EventId.GuideWaitMessage)
    end
end

function UIDetectEventView:GetBubbleById(eventId)
    local info = DataCenter.RadarCenterDataManager:GetDetectEventInfoByEventId(eventId)
    if info ~= nil and self.itemInfoCells[info.uuid] ~= nil then
        return self.itemInfoCells[info.uuid]:GetGuideObject()
    end
end

UIDetectEventView.ShowSpecialOpsInfo = ShowSpecialOpsInfo
UIDetectEventView.HideSpecialOpsInfo = HideSpecialOpsInfo
UIDetectEventView.ShowNormalInfo = ShowNormalInfo
UIDetectEventView.HideNormalInfo = HideNormalInfo

UIDetectEventView.OnCreate = OnCreate
UIDetectEventView.OnDestroy = OnDestroy
UIDetectEventView.ComponentDefine = ComponentDefine
UIDetectEventView.ComponentDestroy = ComponentDestroy
UIDetectEventView.DataDefine = DataDefine
UIDetectEventView.DataDestroy = DataDestroy
UIDetectEventView.Update = Update
UIDetectEventView.RefreshView = RefreshView
UIDetectEventView.OnAddListener = OnAddListener
UIDetectEventView.OnRemoveListener = OnRemoveListener
UIDetectEventView.GetDataFromServer = GetDataFromServer
UIDetectEventView.DoWhenDataChange = DoWhenDataChange
UIDetectEventView.SetCurrentSelectItemId = SetCurrentSelectItemId
UIDetectEventView.SetPlotEventUuid = SetPlotEventUuid
UIDetectEventView.ShowDetectEventItemInfo = ShowDetectEventItemInfo
UIDetectEventView.HideDetectEventItemInfo = HideDetectEventItemInfo
UIDetectEventView.ShowDetectLevelInfoView = ShowDetectLevelInfoView
UIDetectEventView.HideDetectLevelInfoView = HideDetectLevelInfoView
UIDetectEventView.RefreshDetectEventItems = RefreshDetectEventItems
UIDetectEventView.AddOneDetectEventItem = AddOneDetectEventItem
UIDetectEventView.DoWhenListDataBack = DoWhenListDataBack
UIDetectEventView.RefreshLevelInfo = RefreshLevelInfo
UIDetectEventView.RefreshPowerInfo = RefreshPowerInfo
UIDetectEventView.OnPowerUpgradeClick = OnPowerUpgradeClick
UIDetectEventView.IsReachPowerMax = IsReachPowerMax
UIDetectEventView.SetDetectEventLvInfoShowState = SetDetectEventLvInfoShowState
UIDetectEventView.CheckAndPlayScanEffect = CheckAndPlayScanEffect
UIDetectEventView.OnDisable = OnDisable

UIDetectEventView.OnEnable = OnEnable
UIDetectEventView.GetAngleByPos = GetAngleByPos
UIDetectEventView.ShowRewardGetAnimation = ShowRewardGetAnimation
UIDetectEventView.RemoveRewardGetAnimation = RemoveRewardGetAnimation
UIDetectEventView.GetGuideSpecialBubble = GetGuideSpecialBubble
UIDetectEventView.PlotEventComplete = PlotEventComplete
UIDetectEventView.RefreshFormationStamina = RefreshFormationStamina
UIDetectEventView.RefreshPackageInfo = RefreshPackageInfo

return UIDetectEventView