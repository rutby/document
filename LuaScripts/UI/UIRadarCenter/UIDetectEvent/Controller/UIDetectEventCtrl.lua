---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/8/2 14:02
---
local UIDetectEventCtrl = BaseClass("UIDetectEventCtrl", UIBaseCtrl)
local Screen = CS.UnityEngine.Screen
local Localization = CS.GameEntry.Localization

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIDetectEvent)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function GetRadarCenterPositionList(self)
    local list = DataCenter.RadarCenterDataManager:GetDetectEventInfoUuids()
    local result = {}
    table.walk(list, function (k, v) 
        local param = self:GetOneEventData(v)
        if param ~= nil then
            table.insert(result, param)
        end
    end)

    --添加雷达boss
    local radarBoss = DataCenter.RadarBossManager:GetRadarBoss()
    if radarBoss ~= nil then
        table.insert(result, radarBoss)
    end
    return result
end

local function GetOneEventData(self, uuid)
    local data = DataCenter.RadarCenterDataManager:GetDetectEventInfo(uuid)
    if data == nil then
        return nil
    end

    local template = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(data.eventId)
    if template == nil then
        return nil
    end

    local param = {}
    param.uuid = uuid
    param.eventId = data.eventId
    param.state = data.state
    param.pointId = data.pointId
	param.helpInfo = data.helpInfo
    param.type = template:getValue("type")
    param.noviceBootId = template:getValue("noviceboot_id")
    param.fromType = DetectEventFromType.Detect
    return param
end

local function Goto(self, uuid, fromType)
    if fromType == DetectEventFromType.RadarBoss then
        local march = DataCenter.RadarBossManager:GetPuzzleMarchByUuid(uuid)
        if march ~= nil then
            GoToUtil.MoveToWorldPointAndOpen(march.startPos)
        end
    else
        local data = DataCenter.RadarCenterDataManager:GetDetectEventInfo(uuid)
        if data ~= nil then
            local template = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(data.eventId)
            if template == nil then
                return nil
            end
            local templateType = template:getValue("type")
            if templateType == DetectEventType.OCCUPY_FIELD then
                DataCenter.RadarCenterDataManager:GotoWorldAndFindBlank(uuid)
            else
                if not DataCenter.GuideManager:InGuide() then
                    EventManager:GetInstance():Broadcast(EventId.ShowWorldMarchByType, NewMarchType.EXPLORE)
                end
                if template ~= nil and templateType == DetectEventType.DetectEventTypeBoss then
                    local level = toInt(template:getValue("para"))
                    if level<=0 then
                        level = 1
                    end
                    DataCenter.RadarCenterDataManager:FindMonsterBoss(level)
                    return
                end
                if template ~= nil and templateType == DetectEventType.HELP then
					GoToUtil.MoveToWorldPointAndOpen(data.helpInfo.pointId)
					self:CloseSelf()
                    return
                end
                GoToUtil.MoveToWorldPointAndOpen(data.pointId, data.type)
            end
        end
    end
    self:CloseSelf()
end

local function GetRefreshLeftTime(self)
    local nextTime = DataCenter.RadarCenterDataManager:GetDetectInfoNextRefreshTime()
    if nextTime ~= nil then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        return (nextTime - curTime) / 1000
    end
    return -1
end

local function ResetAllPosition(self)
    if self.posCache == nil then
        self.posCache = {}
    end

    local deleteCache = {}
    for k, v in pairs(self.posCache) do
        for k1, v1 in pairs(v) do
            if k == DetectEventFromType.RadarBoss then
                if DataCenter.RadarBossManager:GetPuzzleMarchByUuid(k1) == nil then
                    if deleteCache[k] == nil then
                        deleteCache[k] = {}
                    end
                    table.insert(deleteCache[k], k1)
                end
            elseif k == DetectEventFromType.Detect then
                if DataCenter.RadarCenterDataManager:GetDetectEventInfo(k1) == nil then
                    if deleteCache[k] == nil then
                        deleteCache[k] = {}
                    end
                    table.insert(deleteCache[k], k1)
                end
            end
        end
    end
    for k, v in pairs(deleteCache) do
        for k1, v1 in pairs(v) do
            if self.posCache[k] ~= nil then
                self.posCache[k][v1] = nil
            end
        end
    end
    
    local allEvent = DataCenter.RadarCenterDataManager:GetDetectEventInfoUuids()
    
    local fromType = DetectEventFromType.Detect
    table.walk(allEvent, function (_, v)
        local event = DataCenter.RadarCenterDataManager:GetDetectEventInfo(v)
        if event ~= nil then
            local x, y = self:GetOnePosByPointId(event.pointId)
            if self.posCache[fromType] == nil then
                self.posCache[fromType] = {}
            end
            self.posCache[fromType][v] = Vector3.New(x, y, 0)
        end
    end)

    --添加雷达boss的点
    local radarBoss = DataCenter.RadarBossManager:GetRadarBoss()
    if radarBoss ~= nil then
        fromType = DetectEventFromType.RadarBoss
        local x, y = self:GetOnePosByPointId(radarBoss.pointId)
        if self.posCache[fromType] == nil then
            self.posCache[fromType] = {}
        end
        self.posCache[fromType][radarBoss.uuid] = Vector3.New(x, y, 0)
    end
end




function UIDetectEventCtrl:GetOnePosByPointId(pointId)
    local pos = SceneUtils.IndexToTilePos(pointId, ForceChangeScene.World)
    local selfPos = SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(), ForceChangeScene.World)
    local ratio = 25

    local UIPosW = 750
    local UIPosH = 1110

    local x = ratio * (pos.x - selfPos.x)
    local y = ratio * (pos.y - selfPos.y)
    local maxX = (UIPosW - 50) / 2 -- (Screen.width - 100) / 2
    local minX = -maxX
    local maxY = (UIPosH - 50) / 2 -- (Screen.height - 100) / 2
    local minY = -maxY

    x = math.min(x, maxX)
    x = math.max(x, minX)
    y = math.min(y, maxY)
    y = math.max(y, minY)
    return x, y
end

local function GetDetectEventPosition(self, uuid, fromType)
    if self.posCache ~= nil and self.posCache[fromType] ~= nil and self.posCache[fromType][uuid] ~= nil then
        return self.posCache[fromType][uuid]
    end
    return Vector3.New(0, 0, 0)
end

--事件的最大等级
local function GetDetectEventMaxLevel(self)
    local result = LuaEntry.DataConfig:TryGetNum("detect_config", "k1")
    return result
end
--探测强度最大等级
local function GetDetectEventPowerMaxLevel(self)
    local result = LuaEntry.DataConfig:TryGetNum("detect_config", "k5")
    return result
end

--level下最大的事件数目
local function GetDetectEventNum(self, level)
    local maxLv = self:GetDetectEventMaxLevel()
    level = math.min(level, maxLv)
    local result = LuaEntry.DataConfig:TryGetStr("detect_config", "k2")
    local vec = string.split(result,";")
    if table.count(vec) == 0 then
        return 1
    end
    if table.count(vec) < level then
        return 1
    end
    return vec[level]
end


local function GetAreaNewsList(self)
    local list = {}
    local latestTime = 0
    local infoList = DataCenter.WorldNewsDataManager:GetAreaInfoList()
    for k,v in pairs(infoList) do
        local oneData = {}
        oneData.showType = BattleNewsType.Battle
        oneData.time = v.time
        if v.time>latestTime then
            latestTime = v.time
        end
        oneData.pointId = v.id
        oneData.allianceAbbrList = v.alInfoList
        list[oneData.pointId] = oneData
    end
    DataCenter.WorldNewsDataManager:SetLastGetAreaNewsTime(latestTime)
    return list
end

--level下的最大，最小品质
--local function GetDetectEventQualityByLv(self, level)
--    local maxLv = self:GetDetectEventMaxLevel()
--    level = math.min(level, maxLv)
--
--    local result = LuaEntry.DataConfig:TryGetStr("detect_config", "k3")
--    local vec = string.split(result,"|")
--    if table.count(vec) == 0 then
--        return {1}
--    end
--    if table.count(vec) < level then
--        return {1}
--    end
--
--    local vec1 = string.split(vec[level],";")
--    if table.count(vec1) == 0 then
--        return {1}
--    end
--    
--    local temp = {}
--    table.walk(vec1,function (k, v)
--        local tempVec = string.split(v,",")
--        if table.count(tempVec) == 2 then
--            table.insert(temp, toInt(tempVec[1]))
--        end
--    end)
--    return temp
--end

--detect event等级升级需要完成的事件数目
local function GetDetectEventLevelUpNum(self, level)
    local result = LuaEntry.DataConfig:TryGetStr("detect_config", "k4")
    local vec = string.split(result,";")
    if table.count(vec) < level then
        return -1
    end
    return vec[level]
end

local function GetEventRecoverTime(self, level)
    if level == nil then
        level = DataCenter.RadarCenterDataManager:GetDetectInfoLevel()
    end
    if level == nil then
        return 0
    end
    local result = LuaEntry.DataConfig:TryGetStr("detect_config", "k3")
    local vec = string.split(result,";")
    if table.count(vec) == 0 then
        return 0
    end
    if table.count(vec) < level then
        return vec[table.count(vec)] * 60 * 1000
    end
    return vec[level] * 60 * 1000
end

local function IsCanUpdate(self)
    return DataCenter.RadarCenterDataManager:IsCanUpdate()
end

local function IsCanReset(self, type)
    return DataCenter.RadarCenterDataManager:IsCanReset(type)
end

local function ResetDetectEvent(self, uuid)
    local currentNum = DataCenter.RadarCenterDataManager:GetMaxDetectNum()
    if currentNum == 0 then
        UIUtil.ShowTips(Localization:GetString("140072"));
        return
    end
    local costStr = LuaEntry.DataConfig:TryGetStr("detect_config", "k7")
    local vec = string.split(costStr,";")
    if table.count(vec) == 0 then
        return
    end
    local level = DataCenter.RadarCenterDataManager:GetResetNum() + 1
    local need = 0
    if table.count(vec) < level then
        need = toInt(vec[table.count(vec)])
    else
        need = toInt(vec[level])
    end

    UIUtil.ShowMessage(Localization:GetString("140071", tostring(need)), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
        if LuaEntry.Player.gold >= need then
            DataCenter.RadarCenterDataManager:ResetDetectEvent(uuid)
        else
            GoToUtil.GotoPayTips()
        end
    end)
end

local function RewardAddPercent(self, rewardType, num)
    local resType = RewardToResType[rewardType]
    local resStr = LuaEntry.DataConfig:TryGetStr("detect_config2", "k3")
    local vec = string.split(resStr,";")
    if #vec == 0 or not table.hasvalue(vec, tostring(resType)) then
        return num
    end
    local levelRateStr = LuaEntry.DataConfig:TryGetStr("detect_config2", "k2")
	local levelRateVec = string.split(levelRateStr,";")
    local level = DataCenter.RadarCenterDataManager:GetDetectInfoLevel()
    if #levelRateVec == 0 or levelRateVec[level] == nil then
        return num
    end
    
    return toInt(num * (1 + toInt(levelRateVec[level]) / 100))
end

local function GetEventStoreMax(self, level)
    local str = LuaEntry.DataConfig:TryGetStr("detect_config", "k6")
    local vec = string.split(str,";")
    if table.count(vec) == 0 then
        return 1
    end
    if level == nil then
        level = DataCenter.RadarCenterDataManager:GetDetectInfoLevel()
    end

    if level < 1 then
        return 1
    end
    local max = 1
    if table.count(vec) < level then
        max = toInt(vec[table.count(vec)])
    else
        max = toInt(vec[level])
    end
    return max
end

local function HasPvePointRewardAndOverflow(self, rewards)
    if rewards == nil then
        return false
    end
    
    for _, v in ipairs(rewards) do
        if v.rewardType == RewardType.PVE_POINT then
            -- deleted
        end
    end
    return false
end

local function GetSpecialEventData(self)
    local detectInfo = DataCenter.RadarCenterDataManager:GetDetectInfo()
    if detectInfo ~= nil then
        local param = {}
        local order = detectInfo.specialOpsOrder or 0
        local num = detectInfo.specialOpsNum or 0
        
        param.showProgress = num > 0
        param.maxNum = order + num
        param.currentNum = order
        local _, time = DataCenter.RadarCenterDataManager:GetNextSpecialEventRefreshTime()
        param.nameStr = DataCenter.RadarCenterDataManager:GetCurrentShowSpecialEventName()
        param.endTime = time
        return param
    end
    
    return nil
end

local function GetSpecialOpsEventInfo(self)
    local result = {}
    result.nameStr = DataCenter.RadarCenterDataManager:GetCurrentShowSpecialEventName()
    local special = DataCenter.RadarCenterDataManager:GetSpecialEvent()
    if special == nil then
        local gap, time = DataCenter.RadarCenterDataManager:GetNextSpecialEventRefreshTime()
        result.inCd = true
        result.endTime = time
    else
        result.inCd = false
        result.uuid = special.uuid
    end
    return result
end

local function GetNormalEventInfo(self)
    local result = {}
    local currentLv = DataCenter.RadarCenterDataManager:GetDetectInfoLevel()
    result.recoveryTime = self:GetEventRecoverTime(currentLv)
    result.currentEndTime = DataCenter.RadarCenterDataManager:GetDetectInfoNextRefreshTime()
    local maxNum = self:GetEventStoreMax()
    local currentNum = DataCenter.RadarCenterDataManager:GetMaxDetectNum()
    if currentNum >= maxNum then
        result.currentEndTime = 0
        result.totalEndTime = 0
    else
        local num = maxNum - currentNum - 1
        num = math.max(0, num)
        result.totalEndTime = result.currentEndTime + num * result.recoveryTime
    end
    return result
end

local function GetReward(self, data)
    SFSNetwork.SendMessage(MsgDefines.DetectEventRewardReceive, data.uuid)
end

local function FinishTalk(self, uuid)
    SFSNetwork.SendMessage(MsgDefines.FinishTalkDetectEvent, uuid)
end

local function GePackageInfo(self, itemId)
    local info = GiftPackageData.get(itemId)
    if info == nil or not info:canGet() then
        return nil
    end
    local isSameDayOpen = DataCenter.RadarCenterDataManager:IsOpenInSameDay()
    if isSameDayOpen then
        return info
    end

    local list = DataCenter.RadarCenterDataManager:GetDetectEventInfoUuids()
    if list == nil or table.count(list) == 0 then
        DataCenter.RadarCenterDataManager:SetPanelPreOpenTime()
        return info
    end
    if table.count(list) == 1 then
        local eventInfo = DataCenter.RadarCenterDataManager:GetDetectEventInfo(list[1])
        if eventInfo == nil then
            return nil
        end
        local templateType = DataCenter.DetectEventTemplateManager:GetTableValue(eventInfo.eventId,"type")
        if templateType == DetectEventType.SPECIAL_OPS then
            DataCenter.RadarCenterDataManager:SetPanelPreOpenTime()
            return info
        end
    end
    return nil
end

local function GetAutoCompleteTaskNumAndCost(self, uuid)
    local types = {DetectEventType.DetectEventPickGarbage,
                   DetectEventType.HELP,
                   DetectEventType.RESCUE}
    local result = {}
    local count = 0
    local costStamina = 0
    local curStamina = LuaEntry.Player:GetCurStamina()
    local allEvent = self:GetRadarCenterPositionList()
    for k,v in pairs(allEvent) do
        if table.hasvalue(types, v.type) then
            if curStamina <= costStamina then
                break
            end

            count = count + 1
            local stamina = DataCenter.RadarCenterDataManager:GetDetectCostNum(v.type, uuid)
            costStamina = costStamina + stamina

            table.insert(result, v.uuid)
        end
    end
    return count, costStamina, result
end

local function AutoCompleteTask(self, uuids)
    SFSNetwork.SendMessage(MsgDefines.AutoFinishDetectEvent, uuids)
end

local function ReceiveDetectLevelReward(self)
    SFSNetwork.SendMessage(MsgDefines.ReceiveDetectLevelReward)
end

local function IsShowGift(self)
    local list = DataCenter.RadarCenterDataManager:GetDetectEventInfoUuids()
    return #list == 0
end

UIDetectEventCtrl.CloseSelf = CloseSelf
UIDetectEventCtrl.Close = Close
UIDetectEventCtrl.GetRadarCenterPositionList = GetRadarCenterPositionList
UIDetectEventCtrl.GetRefreshLeftTime = GetRefreshLeftTime
UIDetectEventCtrl.Goto = Goto
UIDetectEventCtrl.GetDetectEventPosition = GetDetectEventPosition
UIDetectEventCtrl.GetDetectEventMaxLevel = GetDetectEventMaxLevel
UIDetectEventCtrl.GetDetectEventNum = GetDetectEventNum
--UIDetectEventCtrl.GetDetectEventQualityByLv = GetDetectEventQualityByLv
UIDetectEventCtrl.GetDetectEventLevelUpNum = GetDetectEventLevelUpNum
UIDetectEventCtrl.GetDetectEventPowerMaxLevel = GetDetectEventPowerMaxLevel
UIDetectEventCtrl.GetOneEventData = GetOneEventData
UIDetectEventCtrl.IsCanUpdate = IsCanUpdate
UIDetectEventCtrl.GetEventRecoverTime = GetEventRecoverTime
UIDetectEventCtrl.IsCanReset = IsCanReset
UIDetectEventCtrl.ResetDetectEvent = ResetDetectEvent
UIDetectEventCtrl.GetEventStoreMax = GetEventStoreMax
UIDetectEventCtrl.HasPvePointRewardAndOverflow = HasPvePointRewardAndOverflow
UIDetectEventCtrl.GetSpecialEventData = GetSpecialEventData
UIDetectEventCtrl.GetSpecialOpsEventInfo = GetSpecialOpsEventInfo
UIDetectEventCtrl.GetNormalEventInfo = GetNormalEventInfo
UIDetectEventCtrl.GetReward = GetReward
UIDetectEventCtrl.FinishTalk = FinishTalk
UIDetectEventCtrl.ResetAllPosition = ResetAllPosition
UIDetectEventCtrl.GePackageInfo = GePackageInfo
UIDetectEventCtrl.GetAreaNewsList = GetAreaNewsList
UIDetectEventCtrl.RewardAddPercent = RewardAddPercent
UIDetectEventCtrl.GetAutoCompleteTaskNumAndCost = GetAutoCompleteTaskNumAndCost
UIDetectEventCtrl.AutoCompleteTask = AutoCompleteTask
UIDetectEventCtrl.ReceiveDetectLevelReward = ReceiveDetectLevelReward
UIDetectEventCtrl.IsShowGift = IsShowGift
return UIDetectEventCtrl
