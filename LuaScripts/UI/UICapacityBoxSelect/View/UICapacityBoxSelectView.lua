---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 2022/2/9 21:15
---
local UICapacityBoxHeroItem = require "UI.UICapacityBoxSelect.Component.UICapacityBoxHeroItem"
local UICapacityBoxItem = require "UI.UICapacityBoxSelect.Component.UICapacityBoxItem"
local UICapacityBoxSolderItem = require "UI.UICapacityBoxSelect.Component.UICapacityBoxSolderItem"
local UICapacityBoxSelectView = BaseClass("UICapacityBoxSelectView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray

local return_btn_path = "UICommonMidPopUpTitle/panel"
local close_btn_path = "UICommonMidPopUpTitle/bg_mid/CloseBtn"
local title_text_path = "UICommonMidPopUpTitle/bg_mid/titleText"
local content_path = "Scroll View/Viewport/Content"
local use_btn_path = "MidBtnBlue"
local use_btn_text_path = "MidBtnBlue/btnText"

--创建
function UICapacityBoxSelectView:OnCreate()
    base.OnCreate(self)
    --self.ctrl:InitData(self:GetUserData())
    local itemUuid,count,template,isNoCapacity = self:GetUserData()
    self.itemUuid = itemUuid
    self.count = count
    self.template = template
    self.selectHeroId = 0    
    self.selectIndex = 0
    self.isNoCapacity = isNoCapacity
    self:ComponentDefine()
    self:ReInit()
end

-- 销毁
function UICapacityBoxSelectView:OnDestroy()
    self:ClearScroll()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

function UICapacityBoxSelectView:ComponentDefine()
    self.return_panel = self:AddComponent(UIButton, return_btn_path)
    self.return_panel:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
    self._content_rect = self:AddComponent(UIBaseContainer, content_path)
    self._use_btn = self:AddComponent(UIButton, use_btn_path)
    self._use_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:UseItem()
    end)
    self._use_txt = self:AddComponent(UITextMeshProUGUIEx, use_btn_text_path)
    self.cell_select = self:AddComponent(UIBaseContainer, "SelectGo")
    self.cell_select:SetActive(false)
    self.cell_select_army = self:AddComponent(UIBaseContainer, "SelectGo_Army")
    self.cell_select_army:SetActive(false)
end

function UICapacityBoxSelectView:ComponentDestroy()
    self.cell_select.transform:SetParent(self.transform)
    self.cell_select:SetActive(false)
    self.cell_select_army.transform:SetParent(self.transform)
    self.cell_select_army:SetActive(false)
end

function UICapacityBoxSelectView:OnEnable()
    base.OnEnable(self)
end

function UICapacityBoxSelectView:OnDisable()
    base.OnDisable(self)
end


function UICapacityBoxSelectView:OnAddListener()
    base.OnAddListener(self)
end

function UICapacityBoxSelectView:OnRemoveListener()
    base.OnRemoveListener(self)
end


function UICapacityBoxSelectView:ReInit()
    UIGray.SetGray(self._use_btn.transform, true)
    if self.isNoCapacity then
        self.txt_title:SetLocalText(372229)
        self._use_txt:SetLocalText(110108)
    else
        self.txt_title:SetLocalText(self.template.name)
        self._use_txt:SetLocalText(110046)
    end
    self:ClearScroll()
    self.modelHero = {}
    local List = {}
    if self.isNoCapacity then
        for i = 1, #self.template do
            self.modelHero[i] = self:GameObjectInstantiateAsync(UIAssets.UICapacityBoxItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self._content_rect.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = self.template[i].itemId
                local cell = self._content_rect:AddComponent(UICapacityBoxItem,go.name)
                local param = {}
                param.callback = function(trans,index) self:ItemCallBack(trans,index) end
                param.index = i
                param.itemId = self.template[i].itemId
                param.count = self.template[i].count
                param.rewardType = RewardType.GOODS
                cell:RefreshData(param)
            end)
        end
    else
        if self.template.type == GOODS_TYPE.GOODS_TYPE_102 or self.template.type == GOODS_TYPE.GOODS_TYPE_59 or self.template.type == GOODS_TYPE.GOODS_TYPE_107 then
            List = string.split(self.template.para1, "|")
        elseif self.template.type == GOODS_TYPE.GOODS_TYPE_122 then
            List = self.ctrl:GetArmyList()
        elseif self.template.type == GOODS_TYPE.GOODS_TYPE_123 then
            List = self.ctrl:GetMercenaryArmyList()
        end
        for i = 1, #List do
            if self.template.type == GOODS_TYPE.GOODS_TYPE_102 then
                self.modelHero[List[i]] = self:GameObjectInstantiateAsync(UIAssets.UICapacityBoxHeroItem, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject;
                    go.gameObject:SetActive(true)
                    go.transform:SetParent(self._content_rect.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go.name = List[i]
                    local cell = self._content_rect:AddComponent(UICapacityBoxHeroItem,go.name)
                    local param = {}
                    param.quality = GetTableData(HeroUtils.GetHeroXmlName(),List[i], "init_quality_level")
                    param.heroId = List[i]
                    local heroName = GetTableData(HeroUtils.GetHeroXmlName(), List[i], "name")
                    param.name = Localization:GetString(heroName)
                    param.callback = function(trans,heroId) self:HeroCallBack(trans,heroId) end
                    param.count = self.count
                    cell:RefreshData(param)
                end)
            elseif self.template.type == GOODS_TYPE.GOODS_TYPE_59 or self.template.type == GOODS_TYPE.GOODS_TYPE_107 then
                local itemList = string.split(List[i], ",")
                self.modelHero[itemList[1]] = self:GameObjectInstantiateAsync(UIAssets.UICapacityBoxItem, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject;
                    go.gameObject:SetActive(true)
                    go.transform:SetParent(self._content_rect.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go.name = itemList[1]
                    local cell = self._content_rect:AddComponent(UICapacityBoxItem,go.name)
                    local param = {}
                    param.callback = function(trans,index) self:ItemCallBack(trans,index) end
                    param.count = self.count
                    param.index = i
                    param.itemId = itemList[1]
                    param.itemcount = itemList[2]
                    param.rewardType = self.template.type == GOODS_TYPE.GOODS_TYPE_59 and RewardType.GOODS
                    cell:RefreshData(param)
                end)
            elseif self.template.type == GOODS_TYPE.GOODS_TYPE_122 or self.template.type == GOODS_TYPE.GOODS_TYPE_123 then
                self.modelHero[i] = self:GameObjectInstantiateAsync(UIAssets.UICapacityBoxSolderItem, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject;
                    go.gameObject:SetActive(true)
                    go.transform:SetParent(self._content_rect.transform)
                    go.transform:Set_localScale(0.8, 0.8, 0.8)
                    go.name = List[i]
                    local cell = self._content_rect:AddComponent(UICapacityBoxSolderItem,go.name)
                    local param = {}
                    param.callback = function(trans,index) self:ArmyCallBack(trans,index) end
                    param.count = self.count
                    param.index = i
                    param.id = List[i]
                    cell:RefreshData(param)
                end)
            end
        end
    end
end

function UICapacityBoxSelectView:HeroCallBack(trans,heroId)
    self.cell_select.transform:SetParent(trans)
    self.cell_select.transform:Set_localPosition(0,8,0)
    self.cell_select.transform:Set_localScale(0.8, 0.8, 0.8)
    self.cell_select:SetActive(true)
    self.selectHeroId = heroId
    UIGray.SetGray(self._use_btn.transform, false,true)
end

function UICapacityBoxSelectView:ItemCallBack(trans,index)
    if self.isNoCapacity then
        if self.template[index].needhero and self.template[index].needhero ~= 0 then
            local uuid = DataCenter.HeroDataManager:GetHeroUuidByHeroId(self.template[index].needhero)
            if uuid == 0 then
                return UIUtil.ShowTipsId(320477)
            end
        end
    end
    self.cell_select.transform:SetParent(trans)
    self.cell_select.transform:Set_localPosition(0,14,0)
    self.cell_select.transform:Set_localScale(0.8, 0.8, 0.8)
    self.cell_select:SetActive(true)
    self.selectIndex = index
    UIGray.SetGray(self._use_btn.transform, false,true)
end

function UICapacityBoxSelectView:ArmyCallBack(trans,index)
    self.cell_select_army.transform:SetParent(trans)
    self.cell_select_army.transform:Set_localPosition(0,17,0)
    self.cell_select_army.transform:Set_localScale(1,1,1)
    self.cell_select_army.transform:SetAsFirstSibling()
    self.cell_select_army:SetActive(true)
    self.selectIndex = index
    UIGray.SetGray(self._use_btn.transform, false,true)
end


function UICapacityBoxSelectView:ClearScroll()
    if self.template.type == GOODS_TYPE.GOODS_TYPE_102 then
        self._content_rect:RemoveComponents(UICapacityBoxHeroItem)
    elseif self.template.type == GOODS_TYPE.GOODS_TYPE_59 then
        self._content_rect:RemoveComponents(UICapacityBoxItem)
    elseif self.template.type == GOODS_TYPE.GOODS_TYPE_122 or self.template.type == GOODS_TYPE.GOODS_TYPE_123 then
        self._content_rect:RemoveComponents(UICapacityBoxSolderItem)
    end
    if self.modelHero~=nil then
        for k,v in pairs(self.modelHero) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

function UICapacityBoxSelectView:UseItem()
    if self.isNoCapacity then
        EventManager:GetInstance():Broadcast(EventId.ActLuckyRollChoiceItem,self.selectIndex)
        self.ctrl:CloseSelf()
    else
        if self.template.type == GOODS_TYPE.GOODS_TYPE_102 then
            if self.selectHeroId == 0 then
                return
            end
            self.ctrl:UseItem(self.template.type,self.itemUuid,self.count,self.selectHeroId)
        elseif self.template.type == GOODS_TYPE.GOODS_TYPE_59 or self.template.type ==  GOODS_TYPE.GOODS_TYPE_107 or self.template.type ==  GOODS_TYPE.GOODS_TYPE_122 or self.template.type ==  GOODS_TYPE.GOODS_TYPE_123 then
            if self.selectIndex == 0 then
                return
            end
            self.ctrl:UseItem(self.template.type,self.itemUuid,self.count,self.selectIndex)
        end
    end
end



return UICapacityBoxSelectView