---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/9/15 16:38
---UIWeekCardSelectRewardView.lua

local base = UIBaseView--Variable
local UIWeekCardSelectRewardView = BaseClass("UIWeekCardSelectRewardView", base)--Variable
local Localization = CS.GameEntry.Localization
local WeekCardSelectRewardItem = require "UI.UIWeekCardSelectReward.Component.WeekCardSelectRewardItem"
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"

local STAGE_COUNT = 3
local ToggleName = {
    320790, 320791, 320792
}

local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local closeBtn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local toggle_path = "ImgBg/Tab/Toggle"
local selectedReward_path = "ImgBg/rewards/selected/selected_"
local rewardList_path = "ImgBg/rewards/selected/rewardList"
local listBg_path = "ImgBg/rewards/selected/bg"
local buy_path = "ImgBg/buy"
local buyBtn_path = "ImgBg/buy/buyBtn"
local buyBtnTxt_path = "ImgBg/buy/buyBtn/buyBtnTxt"
local desc_path = "ImgBg/buy/tip"
local select_path = "ImgBg/select"
local confirmBtn_path = "ImgBg/select/confirmBtn"
local confirmBtnTxt_path = "ImgBg/select/confirmBtn/confirmBtnTxt"
local cover_path = "ImgBg/rewards/mask"
local giftPackagePoint_path = "ImgBg/buy/GiftPackagePoint"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:InitData()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.titleN:SetLocalText(320789)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        self:OnClickCloseBtn()
    end)
    self.toggleTbN = {}
    for i = 1, 3 do
        local toggleGo = self:AddComponent(UIBaseContainer, toggle_path .. i)
        local toggleBtn = self:AddComponent(UIButton, toggle_path .. i)
        toggleBtn:SetOnClick(function()
            if self.weekCardInfo and self.weekCardInfo:CheckIfIsBought() and self.weekCardInfo.unlockStage > 0 then
                if i ~= self.curStage then
                    UIUtil.ShowTipsId("320786")
                end
                self:SelectOneStage(self.curStage)
            else
                self:SelectOneStage(i)
            end
        end)
        local selected = toggleGo:AddComponent(UIBaseContainer, "select")
        local selectTxt1 = toggleGo:AddComponent(UITextMeshProUGUIEx, "select/selectTxt1")
        --local selectTxt2 = toggleGo:AddComponent(UIText, "select/selectTxt2")
        local unselected = toggleGo:AddComponent(UIBaseContainer, "unselect")
        local unselectTxt1 = toggleGo:AddComponent(UITextMeshProUGUIEx, "unselect/unselectTxt1")
        --local unselectTxt2 = toggleGo:AddComponent(UIText, "unselect/unselectTxt2")
        local tog = {
            btnN = toggleBtn,
            selectedN = selected,
            selectTxt1N = selectTxt1,
            --selectTxt2N = selectTxt2,
            unselectedN = unselected,
            unselectTxt1N = unselectTxt1,
            --unselectTxt2N = unselectTxt2,
        }
        table.insert(self.toggleTbN, tog)
    end
    self.selectedRewardTbN = {{}, {}, {}}
    local tempIndex = 1
    for i = 1, 4 do
        local rewardGo = self:AddComponent(UIBaseContainer, selectedReward_path .. i)
        local empty = rewardGo:AddComponent(UIBaseContainer, "empty")
        local lockImg = rewardGo:AddComponent(UIBaseContainer, "empty/lockImg")
        local emptyImg = rewardGo:AddComponent(UIBaseContainer, "empty/emptyImg")
        local item = rewardGo:AddComponent(WeekCardSelectRewardItem, "rewardItem")
        local tb = {
            emptyN = empty,
            emptyImgN = emptyImg,
            lockImgN = lockImg,
            itemN = item,
        }
        if i == 1 or i == 2 then
            table.insert(self.selectedRewardTbN[1], tb)
        else
            tempIndex = tempIndex + 1
            table.insert(self.selectedRewardTbN[tempIndex], tb)
        end
    end
    self.rewardsTbN = {}
    self.listBgN = {}
    for i = 1, 3 do
        local select = self:AddComponent(UIBaseContainer, rewardList_path .. i)
        local listBg = self:AddComponent(UIImage, listBg_path .. i)
        table.insert(self.rewardsTbN, select)
        table.insert(self.listBgN, listBg)
    end
    self.rewardItemsDic = {}--{stage:list}
    self.buyN = self:AddComponent(UIBaseContainer, buy_path)
    self.buyBtnN = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.buyBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, buyBtnTxt_path)
    self.descN = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.descN:SetLocalText(320787)
    self.selectN = self:AddComponent(UIBaseContainer, select_path)
    self.confirmBtnN = self:AddComponent(UIButton, confirmBtn_path)
    self.confirmBtnN:SetOnClick(function()
        self:OnClickConfirmBtn()
    end)
    self.confirmBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, confirmBtnTxt_path)
    self.confirmBtnTxtN:SetLocalText(110108)
    self.coverN = self:AddComponent(UIBaseContainer, cover_path)
    self.giftPackagePointN = self:AddComponent(UIGiftPackagePoint, giftPackagePoint_path)
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.closeBtnN = nil
    self.toggleTbN = nil
    self.selectedRewardTbN = nil
    self.rewardsTbN = nil
    self.buyBtnN = nil
    self.buyBtnTxtN = nil
    self.descN = nil
    self.confirmBtnN = nil
    self.confirmBtnTxtN = nil
end

local function DataDefine(self)
    self.weekCardInfo = nil
    self.curStage = 0
    self.selectedDic = {}--{{index,index,...},...}
    self.uiInited = false
end

local function DataDestroy(self)
    self.weekCardInfo = nil
    self.selectedDic = nil
    self.curStage = nil
    self.uiInited = true
end

local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.OnUpdateAlLeaderCandidates, self.OnUpdateCandidates)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    --self:RemoveUIListener(EventId.OnUpdateAlLeaderCandidates, self.OnUpdateCandidates)
end

local function InitUI(self)
    self.modelsDic = {}
    self.rewardItemsDic = {}
    for i = 1, STAGE_COUNT do
        self.rewardItemsDic[i] = {}
        local conf = self.weekCardInfo.goodsSelectList[i]
        local num = #conf.rewardList
        self.modelsDic[i] = {}
        for j = 1, num do
            local model = self:GameObjectInstantiateAsync(UIAssets.WeekCardSelectRewardItem, function(request)
                if request.isError then
                    return
                end
                
                self.modelsDic[i][j] = nil
                
                local go = request.gameObject
                go:SetActive(true)
                go.transform:SetParent(self.rewardsTbN[i].transform)
                go.transform:Set_localScale(1, 1, 1)
                go.transform:SetAsLastSibling()
                go.name = tostring(j)
                local rewardItem = self.rewardsTbN[i]:AddComponent(WeekCardSelectRewardItem, go.name)
                rewardItem:SetData(i, j, function(tempStage, tempIndex)
                    self:OnSelectOneReward(tempStage, tempIndex)
                end)
                table.insert(self.rewardItemsDic[i], rewardItem)
            end)
            self.modelsDic[i][j] = model
        end
    end
    self.uiInited = true

    --local txt2 = ""
    for i, v in ipairs(self.toggleTbN) do
        v.selectTxt1N:SetLocalText(ToggleName[i])
        v.unselectTxt1N:SetLocalText(ToggleName[i])
        --local conf = self.weekCardInfo.goodsSelectList[i]
        --txt2 = string.IsNullOrEmpty(txt2) and conf.selectCount or txt2 .. " + " .. conf.selectCount
        --v.selectTxt2N:SetText(txt2)
        --v.unselectTxt2N:SetText(txt2)
    end
end


--local function SetAllCellDestroy(self)
--    for i = 1, STAGE_COUNT do
--        self.rewardsTbN[i]:RemoveComponents(WeekCardSelectRewardItem)
--    end
--    if self.models~=nil then
--        for k,v in pairs(self.models) do
--            if v ~= nil then
--                self:GameObjectDestroy(v)
--            end
--        end
--    end
--end

local function InitData(self)
    self.weekCardInfo = self:GetUserData()
    local tempIndex = 1
    if self.weekCardInfo:CheckIfIsBought() then
        tempIndex = self.weekCardInfo.unlockStage > 0 and self.weekCardInfo.unlockStage or 1
    end
    --
    self.selectedDic = self.weekCardInfo:GetSelectedTb()
    
    self:InitUI()
    
    for i = 1, STAGE_COUNT do
        self:RefreshByStage(i)
    end
    self:SelectOneStage(tempIndex)
end

local function SelectOneStage(self, stageIndex)
    local cacheStage = self.curStage
    self.curStage = stageIndex
    
    for i, v in ipairs(self.toggleTbN) do
        if i == self.curStage then
            v.selectedN:SetActive(true)
            v.unselectedN:SetActive(false)
        else
            v.selectedN:SetActive(false)
            v.unselectedN:SetActive(true)
        end
    end
    
    local from = math.min(cacheStage, self.curStage) + 1
    local to = math.max(cacheStage, self.curStage)
    
    for i = from, to do
        if i <= self.curStage then
            
        else--locked
            self.selectedDic[i] = {}
        end
        self:RefreshByStage(i)
    end

    for i = 1, STAGE_COUNT do
        if i <= stageIndex then
            --self.listBgN[i]:SetColor(Color.New(1, 1, 1, 1))
            self.listBgN[i]:SetActive(false)
        else
            --self.listBgN[i]:SetColor(Color.New(0.84, 0.84, 0.84, 1))
            self.listBgN[i]:SetActive(true)
        end
    end

    self:RefreshBottom()
end

local function RefreshByStage(self, stageIndex)
    local isLocked = stageIndex > self.curStage
    local selectedItems = self.selectedRewardTbN[stageIndex]
    for i, v in ipairs(selectedItems) do
        if isLocked then
            v.emptyN:SetActive(true)
            v.lockImgN:SetActive(true)
            v.emptyImgN:SetActive(false)
            v.itemN:SetActive(false)
        else
            v.lockImgN:SetActive(false)
            local selectedList = self.selectedDic[stageIndex] or {}
            if i <= #selectedList then
                v.emptyN:SetActive(false)
                v.itemN:SetActive(true)
                v.itemN:SetData(stageIndex, selectedList[i], function(tempStage, tempIndex)
                    self:OnSelectOneReward(tempStage, tempIndex)
                end)
            else
                v.emptyN:SetActive(true)
                v.emptyImgN:SetActive(true)
                v.itemN:SetActive(false)
            end
        end
    end
    
    local rewardItems = self.rewardItemsDic[stageIndex] or {}
    for i, v in ipairs(rewardItems) do
        v:RefreshItem()
    end
end

local function OnSelectOneReward(self, stageIndex, rewardIndex)
    if stageIndex > self.curStage then
        UIUtil.ShowTipsId(320788)
        return
    end
    
    local selectConf = self.weekCardInfo.goodsSelectList[stageIndex]
    local selectedIndexList = self.selectedDic[stageIndex] or {}
    if table.hasvalue(selectedIndexList, rewardIndex) then
        table.removebyvalue(selectedIndexList, rewardIndex, true)
    else
        if #selectedIndexList >= selectConf.selectCount then
            UIUtil.ShowTipsId("320785")
            return
        else
            table.insert(selectedIndexList, rewardIndex)
            self.selectedDic[stageIndex] = selectedIndexList
        end
    end
    
    self:RefreshByStage(stageIndex)
    self:RefreshBottom()
end

local function RefreshBottom(self)
    local allSelected = self:CheckIfSelectFinished()
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local hasBought = self.weekCardInfo.endTime > serverTime
    if hasBought then
        self.selectN:SetActive(true)
        self.buyN:SetActive(false)
        CS.UIGray.SetGray(self.confirmBtnN.transform, not allSelected, allSelected)
    else
        self.selectN:SetActive(false)
        self.buyN:SetActive(true)
        local packageId = self.weekCardInfo.exchangeIdList[self.curStage]
        local info = GiftPackManager.get(packageId)
        local strPrice = DataCenter.PayManager:GetDollarText(info:getPrice(), info:getProductID())
        self.buyBtnTxtN:SetText(strPrice)
        self.giftPackagePointN:RefreshPoint(info)
    end
end

local function CheckIfSelectFinished(self)
    local allFinished = true
    
    for i = 1, self.curStage do
        local selectConf = self.weekCardInfo.goodsSelectList[i]
        local selected = self.selectedDic[i] or {}
        if #selected < selectConf.selectCount then
            allFinished = false
            break
        end
    end
    return allFinished
end

local function GetReward(self, stage, index)
    local list = self.weekCardInfo.goodsSelectList[stage]
    local reward = list.rewardList[index]
    local selectedList = self.selectedDic[stage] or {}
    return reward, table.hasvalue(selectedList, index)
end

local function GetSelectedRewardsStr(self)
    local str = ""
    for i = 1, self.curStage do
        local tempTb = self.selectedDic[i] or {}
        local tempStr = ""
        for m, n in ipairs(tempTb) do
            tempStr = string.IsNullOrEmpty(tempStr) and n or tempStr .. ";" .. n
        end
        str = string.IsNullOrEmpty(str) and tempStr or str .. "|" .. tempStr
    end
    return str
end

local function OnClickBuyBtn(self)
    local packageId = self.weekCardInfo.exchangeIdList[self.curStage]
    local info = GiftPackManager.get(packageId)

    local allSelected = self:CheckIfSelectFinished()
    if allSelected then
        local str = self:GetSelectedRewardsStr()
        DataCenter.WeekCardManager:SetSelectedRewards({id = self.weekCardInfo.id, rewardStr = str})
    else
        self.weekCardInfo.selectedGoods = ""
    end

    DataCenter.PayManager:CallPayment(info, UIWindowNames.UIWeekCardSelectReward)
    self.ctrl:CloseSelf()
end

local function OnClickConfirmBtn(self)
    local str = self:GetSelectedRewardsStr()
    
    DataCenter.WeekCardManager:SelectCustomRewardsReq(self.weekCardInfo.id, str)
    
    self.ctrl:CloseSelf()
end

local function OnClickCloseBtn(self)
    self.ctrl:CloseSelf()
end

UIWeekCardSelectRewardView.OnCreate = OnCreate
UIWeekCardSelectRewardView.OnDestroy = OnDestroy
UIWeekCardSelectRewardView.OnAddListener = OnAddListener
UIWeekCardSelectRewardView.OnRemoveListener = OnRemoveListener
UIWeekCardSelectRewardView.ComponentDefine = ComponentDefine
UIWeekCardSelectRewardView.ComponentDestroy = ComponentDestroy
UIWeekCardSelectRewardView.DataDefine = DataDefine
UIWeekCardSelectRewardView.DataDestroy = DataDestroy

UIWeekCardSelectRewardView.InitData = InitData
UIWeekCardSelectRewardView.InitUI = InitUI
UIWeekCardSelectRewardView.SetAllCellDestroy = SetAllCellDestroy
UIWeekCardSelectRewardView.SelectOneStage = SelectOneStage
UIWeekCardSelectRewardView.RefreshByStage = RefreshByStage
UIWeekCardSelectRewardView.OnSelectOneReward = OnSelectOneReward
UIWeekCardSelectRewardView.RefreshBottom = RefreshBottom
UIWeekCardSelectRewardView.GetReward = GetReward
UIWeekCardSelectRewardView.GetSelectedRewardsStr = GetSelectedRewardsStr
UIWeekCardSelectRewardView.CheckIfSelectFinished = CheckIfSelectFinished
UIWeekCardSelectRewardView.OnClickBuyBtn = OnClickBuyBtn
UIWeekCardSelectRewardView.OnClickConfirmBtn = OnClickConfirmBtn
UIWeekCardSelectRewardView.OnClickCloseBtn = OnClickCloseBtn

return UIWeekCardSelectRewardView