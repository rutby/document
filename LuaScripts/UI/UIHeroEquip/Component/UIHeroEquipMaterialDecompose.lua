---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangjiabin.
--- DateTime: 2024/3/23 5:37 PM
---

local UIHeroEquipMaterialDecompose = BaseClass("UIHeroEquipMaterialDecompose", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local UICommonItem = require "UI.UICommonItem.UICommonItem"
local UIHeroEquipMaterialSelectCell = require "UI.UIHeroEquip.Component.UIHeroEquipMaterialSelectCell"

local line_path = "EquipList/Line"
local tip_text_path = "EquipList/TipText"
local origin_go_path = "EquipList/Origin"
local target_go_path = "EquipList/Target"
local slot_go_path = "EquipList/UIHeroEquipMaterialSlot"
local slot_list_go_path = "EquipList/Slot"
local origin_item_path = "EquipList/Origin/UICommonItemSize"
local target_item_path = "EquipList/Target/UICommonItemSize%s"
local origin_item_name_text_path = "EquipList/Origin/OriginText"
local target_item_name_text_path = "EquipList/Target/TargetText"
local material_title_text_path = "MaterialList/MaterialTitleText"
local material_scroll_view_path = "MaterialList/ScrollView"
local decompose_btn_path = "Btn/DecomposeBtn"
local decompose_text_path = "Btn/DecomposeBtn/DecomposeBtnText"
local decompose_all_bg_path = "Btn/DecomposeAllBg"
local decompose_all_btn_path = "Btn/DecomposeAllBg/DecomposeAllBtn"
local decompose_all_text_path = "Btn/DecomposeAllBg/DecomposeAllBtn/DecomposeAllBtnText"
local material_list_empty_text_path = "MaterialList/MaterialListEmpty"

function UIHeroEquipMaterialDecompose:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

function UIHeroEquipMaterialDecompose:OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIHeroEquipMaterialDecompose:ComponentDefine()
    self.line = self:AddComponent(UIImage, line_path)
    self.originNode = self:AddComponent(UIBaseContainer, origin_go_path)
    self.targetNode = self:AddComponent(UIBaseContainer, target_go_path)
    self.slotNode = self:AddComponent(UIBaseContainer, slot_go_path)
    self.slotList = self:AddComponent(UIBaseContainer, slot_list_go_path)
    self.tip = self:AddComponent(UITextMeshProUGUIEx, tip_text_path)
    self.tip:SetLocalText(GameDialogDefine.HERO_EQUIP18)
    self.originItemName = self:AddComponent(UITextMeshProUGUIEx, origin_item_name_text_path)
    self.targetItemName = self:AddComponent(UITextMeshProUGUIEx, target_item_name_text_path)
    self.materialTitle = self:AddComponent(UITextMeshProUGUIEx, material_title_text_path)
    self.materialTitle:SetLocalText(GameDialogDefine.HERO_EQUIP7)
    self.materialListEmptyText = self:AddComponent(UITextMeshProUGUIEx, material_list_empty_text_path)
    self.materialListEmptyText:SetLocalText(GameDialogDefine.HERO_EQUIP13)
    
    self.targetItem = {}
    for i = 1, 4 do
        self.targetItem[i] = self:AddComponent(UICommonItem, string.format(target_item_path, i))
    end
    self.originItem = self:AddComponent(UICommonItem, origin_item_path)

    self:DefineBtn()
    self:DefineMaterialList()
end

function UIHeroEquipMaterialDecompose:ComponentDestroy()

end

function UIHeroEquipMaterialDecompose:DefineMaterialList()
    self.materialScrollView = self:AddComponent(UIScrollView, material_scroll_view_path)
    self.materialScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnMaterialMoveIn(itemObj, index)
    end)
    self.materialScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnMaterialMoveOut(itemObj, index)
    end)
end

function UIHeroEquipMaterialDecompose:RefreshMaterialScrollView()
    self:ClearMaterialScrollView()
    self.materialList = DataCenter.HeroEquipMaterialConfigManager:GetAllTemplateItems() or {};
    local count = #self.materialList
    if count > 0 then
        self.materialScrollView:SetTotalCount(count)
        self.materialScrollView:RefillCells()
        self.materialListEmptyText:SetActive(false)
    else
        self.materialListEmptyText:SetActive(true)
    end
end

function UIHeroEquipMaterialDecompose:ClearMaterialScrollView()
    self.materialScrollView:ClearCells()
    self.materialScrollView:RemoveComponents(UIHeroEquipMaterialSelectCell)
end

function UIHeroEquipMaterialDecompose:OnMaterialMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.materialScrollView:AddComponent(UIHeroEquipMaterialSelectCell, itemObj)
    cellItem:SetData(self.materialList[index], index, 'UIHeroEquipMaterialDecompose')
    self.materialScrollView[index] = cellItem
end

function UIHeroEquipMaterialDecompose:OnMaterialMoveOut(itemObj, index)
    self.materialScrollView:RemoveComponent(itemObj.name, UIHeroEquipMaterialSelectCell)
end

function UIHeroEquipMaterialDecompose:DefineBtn()
    self.decomposeBtn = self:AddComponent(UIButton, decompose_btn_path)
    self.decomposeBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnDecomposeBtnClick()
    end)
    self.decomposeBtnText = self:AddComponent(UITextMeshProUGUIEx, decompose_text_path)
    self.decomposeBtnText:SetLocalText(GameDialogDefine.HERO_EQUIP4)
    self.decomposeBtn:SetInteractable(false)

    self.decomposeAllBg = self:AddComponent(UIBaseContainer, decompose_all_bg_path)
    self.decomposeAllBtn = self:AddComponent(UIButton, decompose_all_btn_path)
    self.decomposeAllBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnDecomposeAllBtnClick()
    end)
    self.decomposeAllBtnText = self:AddComponent(UITextMeshProUGUIEx, decompose_all_text_path)
    self.decomposeAllBg:SetActive(false)
end

function UIHeroEquipMaterialDecompose:DataDefine()
    self.selectIndex = 0
    self.costId = 0
    self.costNum = 0
end

function UIHeroEquipMaterialDecompose:DataDestroy()
    self.selectIndex = 0
    self.costId = 0
    self.costNum = 0
end

function UIHeroEquipMaterialDecompose:OnEnable()
    base.OnEnable(self)

    self:ReInit()
end

function UIHeroEquipMaterialDecompose:OnDisable()
    base.OnDisable(self)
end

function UIHeroEquipMaterialDecompose:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.HeroEquipMaterialDecompose, self.OnEquipMaterialDecompose)

    self:AddUIListener(EventId.OnSelectEquipMaterialDecompose, self.RefreshSelectState)
end

function UIHeroEquipMaterialDecompose:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.HeroEquipMaterialDecompose, self.OnEquipMaterialDecompose)

    self:RemoveUIListener(EventId.OnSelectEquipMaterialDecompose, self.RefreshSelectState)
end

function UIHeroEquipMaterialDecompose:RefreshSelectState(index)
    if self.materialList ~= nil then
        if 0 < index and index <= #self.materialList then
            self.selectIndex = index
            local selectItem = self.materialList[index]
            self:RefreshItem(selectItem.itemId, 1)
        else
            self:SetEmpty()
        end
    else
        self:SetEmpty()
    end
end

function UIHeroEquipMaterialDecompose:RefreshItem(selectItemId, costNum)
    self.decomposeBtn:SetInteractable(false)
    self.tip:SetActive(false)
    if self.costId ~= selectItemId then
        self.decomposeAllBg:SetActive(false)
    end
    
    if selectItemId == nil or selectItemId == 0 then
        self:SetEmpty()
    else
        self.originNode:SetActive(true)

        self.costId = selectItemId
        local costItem = DataCenter.ItemTemplateManager:GetItemTemplate(selectItemId)
        if costItem ~= nil then
            local param = {}
            param.rewardType = RewardType.GOODS
            param.itemId = tonumber(costItem.id)
            self.costNum = costNum
            param.count = costNum
            self.originItem:ReInit(param)
            
            self.originItemName:SetLocalText(costItem.name)
        end

        local targetId = DataCenter.HeroEquipMaterialConfigManager:GetDecomposeTarget(selectItemId)
        if targetId ~= nil then
            self.line:SetActive(true)
            self.originNode:SetActive(true)
            self.targetNode:SetActive(true)
            self.slotNode:SetActive(false)
            self.slotList:SetActive(false)
            self.decomposeBtn:SetInteractable(true)
            local targetItem = DataCenter.ItemTemplateManager:GetItemTemplate(targetId)
            if targetItem ~= nil then
                for i = 1, table.count(self.targetItem) do
                    local param = {}
                    param.rewardType = RewardType.GOODS
                    param.itemId = tonumber(targetItem.id)
                    param.count = costNum
                    self.targetItem[i]:ReInit(param)
                end

                self.targetItemName:SetLocalText(targetItem.name)
            end
        else
            self.tip:SetActive(true)
            self.tip:SetLocalPosition(Vector3.New(0, -160, 0))
            self.line:SetActive(false)
            self.originNode:SetActive(true)
            self.targetNode:SetActive(false)
            self.slotNode:SetActive(false)
            self.slotList:SetActive(false)
            self.tip:SetLocalText(GameDialogDefine.HERO_EQUIP20)
        end
    end
end

function UIHeroEquipMaterialDecompose:SetEmpty()
    self.tip:SetActive(true)
    self.tip:SetLocalPosition(Vector3.New(0, -16, 0))
    self.originNode:SetActive(false)
    self.targetNode:SetActive(false)
    self.slotNode:SetActive(true)
    self.slotList:SetActive(true)
end

function UIHeroEquipMaterialDecompose:ReInit()
    self:RefreshMaterialScrollView()

    EventManager:GetInstance():Broadcast(EventId.OnSelectEquipMaterialDecompose, self.selectIndex)
end

function UIHeroEquipMaterialDecompose:OnDecomposeBtnClick()
    DataCenter.HeroEquipManager:HeroEquipMaterialDecompose(self.costId, self.costNum);
end

function UIHeroEquipMaterialDecompose:OnDecomposeAllBtnClick()
    local costItem = DataCenter.ItemData:GetItemById(self.costId)
    if costItem ~= nil and costItem.count > 0 then
        self:RefreshItem(self.costId, costItem.count)
        DataCenter.HeroEquipManager:HeroEquipMaterialDecompose(self.costId, costItem.count);
    end
end

function UIHeroEquipMaterialDecompose:OnEquipMaterialDecompose()
    local costItem = DataCenter.ItemData:GetItemById(self.costId)
    if costItem ~= nil and costItem.count > 0 then
        self.decomposeAllBg:SetActive(true)
        self:RefreshMaterialScrollView()
        
        local count = #self.materialList
        for i = 1, count do
            if self.materialList[i].itemId == self.costId then
                self.selectIndex = i
                break
            end
        end
        
        EventManager:GetInstance():Broadcast(EventId.OnSelectEquipMaterialDecompose, self.selectIndex)
    else
        self.decomposeAllBg:SetActive(false)
        self.costId = 0
        self:ReInit()
    end
end

return UIHeroEquipMaterialDecompose