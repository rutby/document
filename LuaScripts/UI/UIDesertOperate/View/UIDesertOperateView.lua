---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/27 17:17
---

local UIDesertOperate = BaseClass("UIDesertOperate", UIBaseView)
local base = UIBaseView
local UIDesertOperateItem = require "UI.UIDesertOperate.Component.UIDesertOperateItem"
local Localization = CS.GameEntry.Localization

local return_path = "UICommonPopUpTitle/panel"
local close_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local scroll_view_path = "ScrollView"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function()
        self:Close()
    end)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self:Close()
    end)
    self.title_text = self:AddComponent(UIText, title_path)
    self.title_text:SetLocalText(110728)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
end

local function ComponentDestroy(self)
    self.return_btn = nil
    self.close_btn = nil
    self.title_text = nil
    self.scroll_view = nil
end

local function DataDefine(self)
    self.itemDict = {}
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
        self.timer:Start()
    end
end

local function DataDestroy(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MasteryUseSkill, self.Refresh)
    self:AddUIListener(EventId.MasteryLearn, self.Refresh)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.MasteryUseSkill, self.Refresh)
    self:RemoveUIListener(EventId.MasteryLearn, self.Refresh)
    base.OnRemoveListener(self)
end

local function OnCreateCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local item = self.scroll_view:AddComponent(UIDesertOperateItem, itemObj)
    item:SetData(self.opList[index])
    self.itemDict[index] = item
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIDesertOperateItem)
    self.itemDict[index] = nil
end

local function ShowScroll(self)
    local count = #self.opList
    if count > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:SetActive(false)
    end
end

local function ReInit(self)
    self.uuid = self:GetUserData()
    self:Refresh()
end

local function Refresh(self)
    self.opList = DataCenter.DesertOperateManager:GetOpList(self.uuid)
    self:ShowScroll()
end

local function TimerAction(self)
    for _, item in pairs(self.itemDict) do
        item:TimerAction()
    end
end

local function Close(self)
    self.ctrl:CloseSelf()
end

UIDesertOperate.OnCreate = OnCreate
UIDesertOperate.OnDestroy = OnDestroy
UIDesertOperate.ComponentDefine = ComponentDefine
UIDesertOperate.ComponentDestroy = ComponentDestroy
UIDesertOperate.DataDefine = DataDefine
UIDesertOperate.DataDestroy = DataDestroy
UIDesertOperate.OnEnable = OnEnable
UIDesertOperate.OnDisable = OnDisable
UIDesertOperate.OnAddListener = OnAddListener
UIDesertOperate.OnRemoveListener = OnRemoveListener

UIDesertOperate.OnCreateCell = OnCreateCell
UIDesertOperate.OnDeleteCell = OnDeleteCell
UIDesertOperate.ShowScroll = ShowScroll

UIDesertOperate.ReInit = ReInit
UIDesertOperate.Refresh = Refresh
UIDesertOperate.TimerAction = TimerAction
UIDesertOperate.Close = Close

return UIDesertOperate