---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/6/14 20:32
---
local DragonBattlePlayerItem = require "UI.UIDragonBattleScore.Component.DragonBattlePlayerItem"
local AllianceFlagItem = require "UI.UIAlliance.UIAllianceFlag.Component.AllianceFlagItem"
local UIDragonBattleScoreView = BaseClass("UIDragonBattleScoreView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local TimeState =
{
    Prepare =1,
    Battle = 2,
}
local txt_title_path ="UICommonPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonPopUpTitle/panel"
local scroll_path = "containerGo/loopListView"

local function OnCreate(self)
    base.OnCreate(self)
    self.needGetMsg = self:GetUserData()
    if self.needGetMsg == true then
        SFSNetwork.SendMessage(MsgDefines.DragonBattleScoreInfo)
    end
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.txt_title:SetText(Localization:GetString("376133"))
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.ScrollView = self:AddComponent(UIScrollView, scroll_path)
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.showDatalist ={}
    self._l_allianceFlag = self:AddComponent(AllianceFlagItem,"allianceFight/blueGo/AllianceFlagBlue")
    self._l_allianceName_txt = self:AddComponent(UIText,"allianceFight/blueGo/blueAllianceNameTxt")
    self._l_battleMembers_txt = self:AddComponent(UIText,"allianceFight/blueGo/txtScore1")
    self._l_score_txt = self:AddComponent(UIText,"allianceFight/blueGo/blueScoreNumTxt")

    self._r_allianceFlag = self:AddComponent(AllianceFlagItem,"allianceFight/redGo/AllianceFlagRed")
    self._r_allianceName_txt = self:AddComponent(UIText,"allianceFight/redGo/redAllianceNameTxt")
    self._r_battleMembers_txt = self:AddComponent(UIText,"allianceFight/redGo/txtScore2")
    self._r_score_txt = self:AddComponent(UIText,"allianceFight/redGo/redScoreNumTxt")
    self.selfRankItem = self:AddComponent(DragonBattlePlayerItem,"selfObj")
    self.dragon_time = self:AddComponent(UIText,"allianceFight/cdTxt")
    self.num_des_txt = self:AddComponent(UIText,"allianceFight/Text_num")
    self.num_des_txt:SetLocalText(302827)
    self.timer_action = function(temp)
        self:RefreshTime()
    end
    self.tabTbN = {}
    local tabName = {
        376156, 376157
    }
    for i = 1, 2 do
        local tab = self:AddComponent(UIBaseContainer, "ToggleGroup/Toggle" .. i)
        local tabBtn = tab:AddComponent(UIButton, "")
        tabBtn:SetOnClick(function()
            self:ChangeTab(i)
        end)
        local select = tab:AddComponent(UIBaseContainer, "select")
        local selectTxt = tab:AddComponent(UIText, "select/selectTxt")
        selectTxt:SetLocalText(tabName[i])
        local unselect = tab:AddComponent(UIBaseContainer, "unselect")
        local unselectTxt = tab:AddComponent(UIText, "unselect/unselectTxt")
        unselectTxt:SetLocalText(tabName[i])
        local newTab = {
            btnN = tabBtn,
            selectN = select,
            selectTxtN = selectTxt,
            unselectN = unselect,
            unselectTxtN = unselectTxt,
        }
        table.insert(self.tabTbN, newTab)
    end
    self.curTabType = 0
end

local function OnDestroy(self)
    self:DeleteTimer()
    self:ClearScroll()
    base.OnDestroy(self)
end


local function OnEnable(self)
    base.OnEnable(self)
    if self.needGetMsg == false then
        self:InitData()
    end
end

local function OnDisable(self)
    base.OnDisable(self)
end


local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.DragonBattleScoreInfo, self.InitData)

end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.DragonBattleScoreInfo, self.InitData)
end

local function ClearScroll(self)
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(DragonBattlePlayerItem)
    self.showDatalist = {}
end

local function OnItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(DragonBattlePlayerItem, itemObj)
    cellItem:SetItemShow(self.showDatalist[index],index)
end

local function OnItemMoveOut(self, itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name, DragonBattlePlayerItem)
end

local function InitData(self)
    self.data = self.ctrl:GetBattleScoreData()
    if self.data ==nil then
        return
    end
    self._l_allianceFlag:SetData(self.data.icon)
    local leftStr = "#"..self.data.serverId.."["..self.data.abbr.."]".."\n"..self.data.name
    self._l_allianceName_txt:SetText(leftStr)
    self._l_score_txt:SetText(self.data.score)

    self._r_allianceFlag:SetData(self.data.enemyIcon)
    local rightStr = "#"..self.data.enemyServerId.."["..self.data.enemyAbbr.."]".."\n"..self.data.enemyName
    self._r_allianceName_txt:SetText(rightStr)
    self._r_score_txt:SetText(self.data.enemyScore)
    self.leftAllianceId = self.data.allianceId
    self.rightAllianceId =self.data.enemyAllianceId

    local leftNum = self.data.playerNum
    local rightNum =self.data.enemyPlayerNum
    self._l_battleMembers_txt:SetText(leftNum)
    self._r_battleMembers_txt:SetText(rightNum)
    self:OnRefreshTime()
    self:ChangeTab(1)
    
end

local function ChangeTab(self, tabType)
    if self.curTabType ~= tabType then
        self.curTabType = tabType
        for i, v in ipairs(self.tabTbN) do
            if i == tabType then
                v.selectN:SetActive(true)
                v.unselectN:SetActive(false)
            else
                v.selectN:SetActive(false)
                v.unselectN:SetActive(true)
            end
        end
        self:ClearScroll()
        local selectAlliance = self.leftAllianceId
        if self.curTabType == 2 then
            selectAlliance = self.rightAllianceId
        end
        self.showDatalist = self.ctrl:GetAllMemberList(selectAlliance)
        if #self.showDatalist > 0 then
            local selfRankData = nil
            local selfRankIndex = 0
            for i = 1,#self.showDatalist do
                if self.showDatalist[i].uid == LuaEntry.Player.uid then
                    selfRankData = self.showDatalist[i]
                    selfRankIndex = i
                end
            end
            if selfRankData~=nil then
                self.selfRankItem:SetActive(true)
                self.selfRankItem:SetItemShow(selfRankData,selfRankIndex)
            else
                self.selfRankItem:SetActive(false)
            end
            self.ScrollView:SetTotalCount(#self.showDatalist)
            self.ScrollView:RefillCells()
        else
            self.selfRankItem:SetActive(false)
        end
    end
    
    
end

local function OnRefreshTime(self)
    self.dragonInfo = DataCenter.ActDragonManager:GetDragonInfo()
    self.endTime = 0
    self.curState = TimeState.Battle
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.dragonInfo~=nil and self.dragonInfo.timeInfo~=nil then
        if self.dragonInfo.matchResult == 1 then    --匹配到对手
            if self.dragonInfo.timeInfo.battleOpenTime~=nil and curTime < self.dragonInfo.timeInfo.battleOpenTime then
                self.endTime = self.dragonInfo.timeInfo.battleOpenTime
                self.curState = TimeState.Prepare
            elseif self.dragonInfo.timeInfo.endTime~=nil and curTime < self.dragonInfo.timeInfo.endTime then
                self.endTime = self.dragonInfo.timeInfo.endTime
                self.curState = TimeState.Battle
            end
        end
    end
    if curTime>self.endTime then
        self.dragon_time:SetText("00:00:00")
        self:DeleteTimer()
    else
        self:AddTimer()
        self:RefreshTime()
    end

end

local function RefreshTime(self)
    if self.endTime~=nil and self.endTime>0 then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if curTime< self.endTime then
            local leftTime = self.endTime - curTime
            local leftTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(leftTime)
            if self.curState == TimeState.Prepare then
                self.dragon_time:SetText(Localization:GetString("376125")..":"..leftTimeStr)
            else
                self.dragon_time:SetText(Localization:GetString("376130")..leftTimeStr)
            end

        else
            self:OnRefreshTime()
        end
    end


end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end
local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

UIDragonBattleScoreView.OnCreate= OnCreate
UIDragonBattleScoreView.OnDestroy = OnDestroy
UIDragonBattleScoreView.OnEnable = OnEnable
UIDragonBattleScoreView.OnDisable = OnDisable
UIDragonBattleScoreView.OnAddListener = OnAddListener
UIDragonBattleScoreView.OnRemoveListener = OnRemoveListener
UIDragonBattleScoreView.ClearScroll = ClearScroll
UIDragonBattleScoreView.OnItemMoveIn = OnItemMoveIn
UIDragonBattleScoreView.OnItemMoveOut = OnItemMoveOut
UIDragonBattleScoreView.InitData =InitData
UIDragonBattleScoreView.ChangeTab =ChangeTab
UIDragonBattleScoreView.OnRefreshTime =OnRefreshTime
UIDragonBattleScoreView.RefreshTime= RefreshTime
UIDragonBattleScoreView.AddTimer =AddTimer
UIDragonBattleScoreView.DeleteTimer = DeleteTimer
return UIDragonBattleScoreView