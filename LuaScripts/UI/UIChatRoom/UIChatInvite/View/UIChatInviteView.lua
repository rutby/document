---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/4/6 15:39
---

local UIChatInvite = BaseClass("UIChatInvite", UIBaseView)
local base = UIBaseView
local UICommonTab = require "UI.UICommonTab.UICommonTab"
local UIChatInviteItem = require "UI.UIChatRoom.UIChatInvite.Component.UIChatInviteItem"
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray

local return_path = "UICommonPopUpTitle/panel"
local close_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local tab_path = "TabList/Tab%s"
local search_path = "Vert/Search"
local server_input_path = "Vert/Search/ServerInput"
local name_input_path = "Vert/Search/NameInput"
local search_btn_path = "Vert/Search/SearchBtn"
local scroll_view_path = "Vert/ScrollView"
local go_btn_path = "Vert/Go"
local go_text_path = "Vert/Go/GoText"
local rect_path = "Vert/Rect"
local rect_text_path = "Vert/Rect/RectText"
local empty_path = "Vert/Empty"

local TabType =
{
    Ally = 1,
    Search = 2,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.tabs = {}
    for i = 1, table.count(TabType) do
        self.tabs[i] = self:AddComponent(UICommonTab, string.format(tab_path, i))
        self.tabs[i]:SetSelected(false)
        self.tabs[i]:SetOnClick(function()
            self:OnTabClick(i)
        end)
    end
    self.tabs[TabType.Ally]:SetName(Localization:GetString("390002"))
    self.tabs[TabType.Search]:SetName(Localization:GetString("100192"))
    self.search_go = self:AddComponent(UIBaseContainer, search_path)
    self.server_input = self:AddComponent(UIInput, server_input_path)
    self.name_input = self:AddComponent(UIInput, name_input_path)
    self.search_btn = self:AddComponent(UIButton, search_btn_path)
    self.search_btn:SetOnClick(function()
        self:OnSearchClick()
    end)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
    self.go_btn = self:AddComponent(UIButton, go_btn_path)
    self.go_btn:SetOnClick(function()
        self:OnGoClick()
    end)
    self.go_text = self:AddComponent(UIText, go_text_path)
    self.go_text:SetLocalText(110006)
    self.rect_go = self:AddComponent(UIBaseContainer, rect_path)
    self.rect_text = self:AddComponent(UIText, rect_text_path)
    self.rect_text:SetLocalText(302338)
    self.empty_text = self:AddComponent(UIText, empty_path)
    self.empty_text:SetLocalText(290071)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.param = nil
    self.tabType = TabType.Ally
    self.dataList = {}
    self.searchDataList = {}
    self.dataCacheDict = {}
    self.itemList = {}
    self.selectUids = {}
    self.fixedUids = {}
end

local function DataDestroy(self)
    
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.SendContactGiftSearchBack, self.OnSearchBack)
    self:AddUIListener(EventId.ChatRoomCreate, self.OnChatRoomCreate)
    self:AddUIListener(ChatInterface.getEventEnum().CHAT_ROOM_INVITE_PLAYER_RESULT, self.OnInvite)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.SendContactGiftSearchBack, self.OnSearchBack)
    self:RemoveUIListener(EventId.ChatRoomCreate, self.OnChatRoomCreate)
    self:RemoveUIListener(ChatInterface.getEventEnum().CHAT_ROOM_INVITE_PLAYER_RESULT, self.OnInvite)
    base.OnRemoveListener(self)
end

local function OnCreateCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local data = self.dataList[index]
    local item = self.scroll_view:AddComponent(UIChatInviteItem, itemObj)
    item:SetData(data)
    item:SetOnClick(function()
        self:OnItemClick(index)
    end)
    if table.hasvalue(self.fixedUids, data.uid) then
        item:SetState(UIChatInviteItem.State.Fixed)
    elseif table.hasvalue(self.selectUids, data.uid) then
        item:SetState(UIChatInviteItem.State.Selected)
    else
        item:SetState(UIChatInviteItem.State.Unselected)
    end
    self.itemList[index] = item
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIChatInviteItem)
    self.itemList[index] = nil
end

local function ShowScroll(self)
    local count = #self.dataList
    if count > 0 then
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:ClearCells()
        self.scroll_view:RemoveComponents(UIChatInviteItem)
        self.itemList = {}
    end
    self.empty_text:SetActive(self.tabType == TabType.Ally and count == 0)
end

local function ReInit(self)
    self.param = self:GetUserData()
    self.selectUids = {}
    self.fixedUids = {}
    self.searchDataList = {}
    
    if self.param.isCreate then
        self.title_text:SetLocalText(290055)
    else
        self.title_text:SetLocalText(290062)
        local roomData = ChatInterface.getRoomData(self.param.roomId)
        self.fixedUids = roomData:getMemberList()
    end
    self.server_input:SetText(tostring(LuaEntry.Player:GetSelfServerId())) 
    self:OnTabClick(TabType.Ally)
    self:RefreshGoBtn()
end

local function Refresh(self)
    self.dataList = self:GetDataListInternal()
    self:ShowScroll()
end

local function RefreshGoBtn(self)
    self.go_btn:SetInteractable(true)
    if self.param.isCreate then
        local canGo = #self.selectUids > 0
        UIGray.SetGray(self.go_btn.transform, not canGo, canGo)
    else
        UIGray.SetGray(self.go_btn.transform, false, true)
    end
end

local function GetDataListInternal(self)
    local dataList = {}

    if self.tabType == TabType.Ally then
        local allianceData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
        if allianceData then
            local memberDict = DataCenter.AllianceMemberDataManager:GetAllMember()
            for _, member in pairs(memberDict) do
                if member.uid ~= LuaEntry.Player.uid then
                    local data = {}
                    data.uid = member.uid
                    data.name = member.name
                    data.pic = member.pic
                    data.picVer = member.picVer
                    data.headSkinId = member.headSkinId
                    data.headSkinET = member.headSkinET
                    data.abbr = allianceData.abbr
                    data.serverId = allianceData.ownerServerId
                    data.rank = member.rank
                    data.power = member.power
                    table.insert(dataList, data)
                    self.dataCacheDict[data.uid] = data
                end
            end
            table.sort(dataList, function(dataA, dataB)
                if dataA.rank ~= dataB.rank then
                    return dataA.rank > dataB.rank
                elseif dataA.power ~= dataB.power then
                    return dataA.power > dataB.power
                else
                    return dataA.uid < dataB.uid
                end
            end)
        end
    elseif self.tabType == TabType.Search then
        dataList = self.searchDataList
    end
    
    --for _, uid in ipairs(self.selectUids) do
    --    local exist = table.exist(dataList, function(_, data)
    --        return data.uid == uid
    --    end)
    --    if not exist then
    --        local data = self.dataCacheDict[uid]
    --        table.insert(dataList, data)
    --    end
    --end
    
    return dataList
end

local function GetMaxMemberCount(self)
    return LuaEntry.DataConfig:TryGetNum("chat_max", "k1")
end

local function OnTabClick(self, index)
    self.tabType = index
    for i = 1, table.count(TabType) do
        self.tabs[i]:SetSelected(i == index)
    end
    self.rect_go:SetActive(index == TabType.Ally)
    self.search_go:SetActive(index == TabType.Search)
    self:Refresh()
end

local function OnSearchClick(self)
    local serverId = tonumber(self.server_input:GetText()) or 0
    local name = self.name_input:GetText() or ""
    if serverId == 0 then
        UIUtil.ShowTipsId(290070)
        return
    end
    if #name < 3 then
        UIUtil.ShowTipsId(250109)
        return
    end
    
    SFSNetwork.SendMessage(MsgDefines.SendContactGiftSearch, serverId, name)
end

local function OnItemClick(self, index)
    local data = self.dataList[index]
    local item = self.itemList[index]
    if table.hasvalue(self.fixedUids, data.uid) then
        return
    end
    if table.hasvalue(self.selectUids, data.uid) then
        table.removebyvalue(self.selectUids, data.uid)
        if item then
            item:SetState(UIChatInviteItem.State.Unselected)
        end
    else
        if #self.selectUids + #self.fixedUids + 1 >= self:GetMaxMemberCount() then
            UIUtil.ShowTipsId(290069)
        else
            table.insert(self.selectUids, data.uid)
            if item then
                item:SetState(UIChatInviteItem.State.Selected)
            end
        end
    end
    self:RefreshGoBtn()
end

local function OnGoClick(self)
    self.go_btn:SetInteractable(false)
    if self.param.isCreate then
        -- 创建
        local uids = DeepCopy(self.selectUids)
        local names = {}
        for _, uid in ipairs(self.selectUids) do
            if table.count(names) < 3 then
                table.insert(names, self.dataCacheDict[uid].name)
            end
        end
        table.insert(uids, 1, LuaEntry.Player.uid)
        table.insert(names, 1, LuaEntry.Player.name)

        local param = {}
        param.type = 0
        param.name = string.join(names, ", ")
        param.memberList = uids
        EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().CHAT_ROOM_CREATE_COMMAND, param)
    else
        -- 拉人
        if #self.selectUids > 0 then
            local uids = DeepCopy(self.selectUids)
            local param = {}
            param.roomId = self.param.roomId
            param.uidArr = uids
            EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().ROOM_INVITE_COMMAND, param)
        else
            self.ctrl:CloseSelf()
        end
    end
end

local function OnSearchBack(self, message)
    if message["searchRet"] then
        self.searchDataList = {}
        for _, v in ipairs(message["searchRet"]) do
            if v.uid ~= LuaEntry.Player.uid then
                local data = {}
                data.uid = v.uid
                data.name = v.name
                data.pic = v.pic
                data.picVer = v.picVer
                data.headSkinId = v.headSkinId
                data.headSkinET = v.headSkinET
                data.abbr = v.abbr
                data.serverId = v.serverId
                data.power = v.power
                table.insert(self.searchDataList, data)
                self.dataCacheDict[data.uid] = data
            end
        end
        table.sort(self.searchDataList, function(dataA, dataB)
            if dataA.power ~= dataB.power then
                return dataA.power > dataB.power
            else
                return dataA.uid < dataB.uid
            end
        end)
        self:Refresh()
    end
end

local function OnChatRoomCreate(self, succ)
    self.go_btn:SetInteractable(true)
    if succ then
        ChatManager2:GetInstance().User:requestUserInfo(self.selectUids)
        self.ctrl:CloseSelf()
    end
end

local function OnInvite(self, succ)
    self.go_btn:SetInteractable(true)
    if succ then
        ChatManager2:GetInstance().User:requestUserInfo(self.selectUids)
        self.ctrl:CloseSelf()
    end
end

UIChatInvite.OnCreate = OnCreate
UIChatInvite.OnDestroy = OnDestroy
UIChatInvite.OnEnable = OnEnable
UIChatInvite.OnDisable = OnDisable
UIChatInvite.ComponentDefine = ComponentDefine
UIChatInvite.ComponentDestroy = ComponentDestroy
UIChatInvite.DataDefine = DataDefine
UIChatInvite.DataDestroy = DataDestroy
UIChatInvite.OnAddListener = OnAddListener
UIChatInvite.OnRemoveListener = OnRemoveListener

UIChatInvite.OnCreateCell = OnCreateCell
UIChatInvite.OnDeleteCell = OnDeleteCell
UIChatInvite.ShowScroll = ShowScroll

UIChatInvite.ReInit = ReInit
UIChatInvite.Refresh = Refresh
UIChatInvite.RefreshGoBtn = RefreshGoBtn
UIChatInvite.GetDataListInternal = GetDataListInternal
UIChatInvite.GetMaxMemberCount = GetMaxMemberCount

UIChatInvite.OnTabClick = OnTabClick
UIChatInvite.OnSearchClick = OnSearchClick
UIChatInvite.OnItemClick = OnItemClick
UIChatInvite.OnGoClick = OnGoClick

UIChatInvite.OnSearchBack = OnSearchBack
UIChatInvite.OnChatRoomCreate = OnChatRoomCreate
UIChatInvite.OnInvite = OnInvite

return UIChatInvite