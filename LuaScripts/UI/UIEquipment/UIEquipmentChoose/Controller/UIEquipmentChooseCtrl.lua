---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/1 15:51
---

local UIEquipmentChooseCtrl = BaseClass("UIEquipmentChooseCtrl", UIBaseCtrl)

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIEquipmentChoose)
    EventManager:GetInstance():Broadcast(EventId.EquipSelect, nil)
end

local function GetPanelData(self, para)
    local tmp = {}
    local allEquipments = DataCenter.EquipmentDataManager:GetAllEquip()
    local allSuitTemplate = DataCenter.EquipmentSuitTemplateManager:GetAllTemplate()

    local currentPosUid = DataCenter.EquipmentDataManager:GetEquipmentByCarIndexAndTypeAndPos(para.carIndex, para.type, para.pos)
    local GetData = function(uuid, id, lv)
        local data = {}
        data.uuid = uuid
        data.equipmentId = id
        data.lv = lv
        data.currentPosUid = currentPosUid
        data.changeUid = para.equipmentUuid
        data.carIndex = para.carIndex
        data.type = para.type
        data.selfCarIndex = DataCenter.EquipmentDataManager:GetEquipmentCarIndex(data.uuid)
        return data
    end
    
    for _, v in pairs(allEquipments) do
        local template = DataCenter.EquipmentTemplateManager:GetTemplate(v.equipId)

        if template ~= nil and para.type == template:GetSuitType() and para.pos == template.position then
            local para = GetData(v.uuid, v.equipId, v.lv)
            local suitId = template:GetSuitId()
            if tmp[suitId] == nil then
                tmp[suitId] = {}
            end
            table.insert(tmp[suitId], para)
        end
    end

    for _, v in pairs(allSuitTemplate) do
        if v.type == para.type then
            for _, equipmentId in ipairs(v.includeEquip) do
                local template = DataCenter.EquipmentTemplateManager:GetTemplate(equipmentId)
                if template ~= nil and para.type == template:GetSuitType() and para.pos == template.position then
                    local suitId = template:GetSuitId()
                    if tmp[suitId] == nil then
                        tmp[suitId] = {}
                        local para = GetData(nil, equipmentId + EquipmentConst.EquipmentMaxLevel - 1, EquipmentConst.EquipmentMaxLevel)
                        table.insert(tmp[suitId], para)
                    end
                end
            end
        end
    end

    local result = {}
    local list = {}
    result.list = list
    local index = 0
    local total = table.count(tmp)
    local keys = table.keys(tmp)
    table.sort(keys, function (k, v)
        local templateA = DataCenter.EquipmentSuitTemplateManager:GetTemplate(k)
        local templateB = DataCenter.EquipmentSuitTemplateManager:GetTemplate(v)
        return templateA.order < templateB.order
    end)
    for _, k in pairs(keys) do
        local arr = tmp[k]
        local suitTemplate = DataCenter.EquipmentSuitTemplateManager:GetTemplate(k)
        if suitTemplate then
            if index ~= 0 and index ~= total then
                local param = {}
                param.type = EquipmentConst.EquipmentChooseViewCellType.EquipmentChooseViewCellType_Line
                table.insert(list, param)
            end

            local param = {}
            param.type = EquipmentConst.EquipmentChooseViewCellType.EquipmentChooseViewCellType_Title
            param.name = suitTemplate.name
            param.suitId = k
            table.insert(list, param)
            index = index + 1
            local equipPara

            table.sort(arr, function (k, v)
                local hasA = k.uuid ~= nil
                local hasB = v.uuid ~= nil
                if hasA ~= hasB then
                    return hasA
                end
                local carIndexA = DataCenter.EquipmentDataManager:GetEquipmentCarIndex(k.uuid)
                local carIndexB = DataCenter.EquipmentDataManager:GetEquipmentCarIndex(v.uuid)

                local isEquipA = carIndexA ~= nil
                local isEquipB = carIndexB ~= nil
                if isEquipA ~= isEquipB then
                    return isEquipB
                end
                if v.lv ~= k.lv then
                    return k.lv > v.lv
                end
                return false
            end)

            for index, v in ipairs(arr) do
                if math.fmod(index, EquipmentConst.EquipmentChooseViewCellNumPerLine) == 1 then
                    equipPara = {}
                    equipPara.type = EquipmentConst.EquipmentChooseViewCellType.EquipmentChooseViewCellType_Equipment
                    equipPara.list = {}
                    table.insert(list, equipPara)
                end
                table.insert(equipPara.list, v)
            end
        end
    end

    return result
end

UIEquipmentChooseCtrl.CloseSelf = CloseSelf
UIEquipmentChooseCtrl.GetPanelData = GetPanelData

return UIEquipmentChooseCtrl