---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/1 15:50
---

local UIEquipmentChooseView = BaseClass("UIEquipmentChooseView", UIBaseView)
local base = UIBaseView
local EquipmentChooseLineCell = require "UI.UIEquipment.UIEquipmentChoose.Component.EquipmentChooseLineCell"
local EquipmentChooseLineCellTitle = require "UI.UIEquipment.UIEquipmentChoose.Component.EquipmentChooseLineCellTitle"
local EquipmentChooseLineCellLine = require "UI.UIEquipment.UIEquipmentChoose.Component.EquipmentChooseLineCellLine"

local close_btn_path = "Back"
local scroll_view_path = "Root/leftList/LoopScroll"
local scroll_view_content_path = "Root/leftList/LoopScroll/Viewport/Content"
local empty_text_path = "Root/leftList/EmptyText"
local close_btn1_path = "Root/leftList/selectHeroBtn"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    self:RefreshView()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.close_btn1 = self:AddComponent(UIButton, close_btn1_path)
    self.close_btn1:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.content = self:AddComponent(UIBaseContainer, scroll_view_content_path)
    self.scroll_view = self:AddComponent(UILoopListView2, scroll_view_path)
    self.scroll_view:InitListView(0, function(loopView, index)
        return self:OnGetItemByIndex(loopView, index)
    end)
    
    self.empty_text = self:AddComponent(UITextMeshProUGUIEx, empty_text_path)
    self.empty_text:SetLocalText(270019)
    
end

local function ComponentDestroy(self)
    self:ClearScrollView()
end

local function DataDefine(self)

end

local function DataDestroy(self)

end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.EquipDataUpdate, self.RefreshView)
    self:AddUIListener(EventId.EquipSuitDataUpdate, self.RefreshView)

end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.EquipSuitDataUpdate, self.RefreshView)
    self:RemoveUIListener(EventId.EquipDataUpdate, self.RefreshView)
end

local function RefreshView(self)
    local para = self:GetUserData()
    self.data = self.ctrl:GetPanelData(para)
    self.empty_text:SetActive(table.count(self.data.list) == 0)
    self:RefreshScrollView()
end

local function RefreshScrollView(self)
    local count = table.count(self.data.list)
    self.scroll_view:SetListItemCount(count, false, false)
    self.scroll_view:RefreshAllShownItem()
end

local function ClearScrollView(self)
    self.content:RemoveComponents(EquipmentChooseLineCell)
    self.content:RemoveComponents(EquipmentChooseLineCellTitle)
    self.scroll_view:ClearAllItems()
end

local function OnGetItemByIndex(self, loopScroll, index)
    index = index + 1 --C#控件索引从0开始 
    if index < 1 or index > #self.data.list then
        return nil
    end

    local cellData = self.data.list[index]
    --EquipmentChooseLineCellLine
    --标题行-- titleLine
    if cellData.type == EquipmentConst.EquipmentChooseViewCellType.EquipmentChooseViewCellType_Title then
        local item = loopScroll:NewListViewItem('TitleLine')
        local script = self.content:GetComponent(item.gameObject.name, EquipmentChooseLineCellTitle)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end

            script = self.content:AddComponent(EquipmentChooseLineCellTitle, objectName)
        end

        script:SetActive(true)
        script:SetData(cellData)
        return item
    end
    if cellData.type == EquipmentConst.EquipmentChooseViewCellType.EquipmentChooseViewCellType_Line then
        local item = loopScroll:NewListViewItem('Line')
        local script = self.content:GetComponent(item.gameObject.name, EquipmentChooseLineCellLine)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end

            script = self.content:AddComponent(EquipmentChooseLineCellLine, objectName)
        end

        script:SetActive(true)
        script:SetData(cellData)
        return item
    end

    --数据行
    local item = loopScroll:NewListViewItem('EquipLine')
    local script = self.content:GetComponent(item.gameObject.name, EquipmentChooseLineCell)
    if script == nil then
        local objectName = self:GetItemNameSequence()
        item.gameObject.name = objectName
        if (not item.IsInitHandlerCalled) then
            item.IsInitHandlerCalled = true
        end

        script = self.content:AddComponent(EquipmentChooseLineCell, objectName)
    end

    script:SetActive(true)
    script:SetData(cellData.list)
    return item
end

local function GetItemNameSequence(self)
    NameCount = NameCount + 1
    return tostring(NameCount)
end


UIEquipmentChooseView.OnCreate = OnCreate
UIEquipmentChooseView.OnDestroy = OnDestroy
UIEquipmentChooseView.OnEnable = OnEnable
UIEquipmentChooseView.OnDisable = OnDisable
UIEquipmentChooseView.ComponentDefine = ComponentDefine
UIEquipmentChooseView.ComponentDestroy = ComponentDestroy
UIEquipmentChooseView.DataDefine = DataDefine
UIEquipmentChooseView.DataDestroy = DataDestroy
UIEquipmentChooseView.OnAddListener = OnAddListener
UIEquipmentChooseView.OnRemoveListener = OnRemoveListener
UIEquipmentChooseView.RefreshView = RefreshView
UIEquipmentChooseView.RefreshScrollView = RefreshScrollView
UIEquipmentChooseView.ClearScrollView = ClearScrollView
UIEquipmentChooseView.OnGetItemByIndex = OnGetItemByIndex
UIEquipmentChooseView.GetItemNameSequence = GetItemNameSequence

return UIEquipmentChooseView