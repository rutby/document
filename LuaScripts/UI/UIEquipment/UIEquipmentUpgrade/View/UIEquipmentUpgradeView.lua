---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/1 15:15
---

local UIEquipmentInfoView = BaseClass("UIEquipmentInfoView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local UIEquipmentUpgradeAttrCell = require "UI.UIEquipment.UIEquipmentUpgrade.Component.UIEquipmentUpgradeAttrCell"
local EquipmentCell = require "UI.UIEquipment.Common.EquipmentCell_TextMeshPro"
local NeedItemCell =  require "UI.UIEquipment.UIEquipmentUpgrade.Component.NeedItemCell"
local close_btn_path = "UICommonPopUpTitle/panel"
local close_btn1_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local title_path = "UICommonPopUpTitle/bg_mid/titleText"

local equipment_path = "SliderBg/EquipmentCell"
local equipment_effect_path = "SliderBg/EquipmentCell/VFX_ui_bujian_shengji"

local slider_path = "SliderBg/Slider"
local slider_text_path = "SliderBg/SliderText"

local upgrade_btn_path = "UpgradeBtn"
local upgrade_btn_text_path = "UpgradeBtn/UpgradeBtnText"

local multi_upgrade_bg_path = "MultiUpgradeBg"
local multi_upgrade_btn_path = "MultiUpgradeBg/MultiUpgradeBtn"
local multi_upgrade_text_path = "MultiUpgradeBg/MultiUpgradeBtn/MultiUpgradeText"

local quality_btn_path = "QualityBtn"
local quality_btn_text_path = "QualityBtn/QualityBtnText"

local resource_prefix = "ResourceContainer/Resource_"

local scroll_view_path = "ScrollView"
local tip_btn_path = "Common_btn_info"
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    self:OnOpen()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.close_btn1 = self:AddComponent(UIButton, close_btn1_path)
    self.close_btn1:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.titleText = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.titleText:SetLocalText(270022)
    self.upgrade_btn = self:AddComponent(UIButton, upgrade_btn_path)
    self.upgrade_btn_text = self:AddComponent(UITextMeshProUGUIEx, upgrade_btn_text_path)
    self.upgrade_btn_text:SetLocalText(136004)

    self.quality_btn = self:AddComponent(UIButton, quality_btn_path)
    self.quality_btn_text = self:AddComponent(UITextMeshProUGUIEx, quality_btn_text_path)
    self.quality_btn_text:SetLocalText(270011)

    self.upgrade_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Click_Equipment_Upgrade)
        self:OnUpgradeBtnClick()
    end)

    self.quality_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnQualityBtnClick()
    end)


    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)

    self.slider = self:AddComponent(UISlider, slider_path)
    self.equipment = self:AddComponent(EquipmentCell, equipment_path)
    self.equipment_effect = self:AddComponent(UIBaseContainer, equipment_effect_path)
    self.equipment_effect:SetActive(false)
    self.sliderText = self:AddComponent(UITweenNumberText_TextMeshPro, slider_text_path)
    self.allResource = {}
    for i = 1, 3 do
        local name = resource_prefix..i
        local cell = self:AddComponent(NeedItemCell, name)
        table.insert(self.allResource, cell)
        cell:SetActive(false)
    end

    self.tip_btn = self:AddComponent(UIButton, tip_btn_path)
    self.tip_btn:SetOnClick(function()
        self:OnClickTipBtn()
    end)

    self.multi_upgrade_bg_go = self:AddComponent(UIBaseContainer, multi_upgrade_bg_path)
    self.multi_upgrade_btn = self:AddComponent(UIButton, multi_upgrade_btn_path)
    self.multi_upgrade_text = self:AddComponent(UITextMeshProUGUIEx, multi_upgrade_text_path)
    self.multi_upgrade_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Click_Equipment_Upgrade)
        self:OnMultiUpgradeClick()
    end)

end

local function ComponentDestroy(self)
    self:ClearScroll()
end

local function DataDefine(self)

end

local function DataDestroy(self)

end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.EquipDataUpdate, self.OnEquipmentChange)
    self:AddUIListener(EventId.ResourceUpdated, self.RefreshView)
    self:AddUIListener(EventId.RefreshItems, self.RefreshView)
    self:AddUIListener(EventId.EquipExpUp, self.ShowExpUpSound)
    self:AddUIListener(EventId.EquipQualityUp, self.ShowQualityUpSound)

end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.EquipExpUp, self.ShowExpUpSound)
    self:RemoveUIListener(EventId.EquipQualityUp, self.ShowQualityUpSound)
    self:RemoveUIListener(EventId.EquipDataUpdate, self.OnEquipmentChange)
    self:RemoveUIListener(EventId.ResourceUpdated, self.RefreshView)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshView)
end

local function RefreshView(self, isInit)
    self.data = self.ctrl:GetPanelData(self:GetUserData())
    local para = {}
    para.uuid = self.data.equipmentUid
    para.equipmentId = self.data.equipmentId
    para.lv = self.data.lv
    self.equipment:SetData(para)
    
    self.upgrade_btn:SetActive(self.data.curExp < self.data.maxExp)
    self.quality_btn:SetActive(self.data.curExp >= self.data.maxExp and self.data.qualityUpgradeCost and table.count(self.data.qualityUpgradeCost) > 0)

    self:RefreshAttr()
    self:RefreshNeedItem()
    self:RefreshExp(isInit)
    self:RefreshMultiUpgrade(isInit)
end

local function OnUpgradeBtnClick(self)
    if self.data.lv and self.data.lv >= EquipmentConst.EquipmentMaxLevel then
        UIUtil.ShowTipsId(270036)
        return
    end
    if DataCenter.ItemData:GetItemCount(self.data.upgradeItem) > 0 then
        DataCenter.EquipmentDataManager:EquipmentAddExp(self.data.upgradeItem, 1, self.data.equipmentUid)
    else
        local lackTab = {}
        local param = {}
        param.type = ResLackType.Item
        param.id = self.data.upgradeItem
        param.targetNum = 1
        table.insert(lackTab,param)
        GoToResLack.GoToItemResLackList(lackTab)
    end
end

local function OnQualityBtnClick(self)
    for _, v in ipairs(self.data.qualityUpgradeCost) do
        if v.need > v.have then
            local lackTab = {}
            local param = {}
            param.type = ResLackType.Res
            param.id = v.id
            param.targetNum = v.need
            table.insert(lackTab,param)
            GoToResLack.GoToItemResLackList(lackTab)
            return
        end
    end
    DataCenter.EquipmentDataManager:EquipmentQualityUp(self.data.equipmentUid)
end

local function RefreshAttr(self)
    self:ClearScroll()
    local count = table.count(self.data.attrList)
    if count == 0 then
        return
    end
    self.scroll_view:SetTotalCount(count)
    self.scroll_view:RefillCells()
end

local function OnCreateCell(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.scroll_view:AddComponent(UIEquipmentUpgradeAttrCell, itemObj)
    local data =  self.data.attrList[index]
    cellItem:SetData(data)
end

local function OnDeleteCell(self,itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIEquipmentUpgradeAttrCell)
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UIEquipmentUpgradeAttrCell)
end

local function OnOpen(self)
    self:RefreshView(true)
end

local function RefreshNeedItem(self)
    for k, v in ipairs(self.allResource) do
        v:SetActive(false)
    end
    if self.data.curExp >= self.data.maxExp and self.data.qualityUpgradeCost and table.count(self.data.qualityUpgradeCost) > 0 then
        for k, v in ipairs(self.data.qualityUpgradeCost) do
            if self.allResource[k] ~= nil then
                self.allResource[k]:SetData(v)
                self.allResource[k]:SetActive(true)
            end
        end
    else
        self.allResource[1]:SetData(self.data.upgradeItemInfo)
        self.allResource[1]:SetActive(true)
    end
end

local function OnClickTipBtn(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.tip_btn.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    local str = Localization:GetString("270032").."\n"..Localization:GetString("270033").."\n"..Localization:GetString("270034")
    param.content = str
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 300
    param.pivot = 0.15
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function RefreshExp(self, isInit)
    if isInit then
        local sliderValue = self.data.curExp / self.data.maxExp
        sliderValue = Mathf.Clamp(sliderValue, 0, 1)
        self.slider:SetValue(sliderValue)
        self.sliderText:SetSuffix("/" .. self.data.maxExp)
        self.sliderText:SetNum(self.data.curExp)

    else
        self:TweenToProgress()
    end
end

local function TweenToProgress(self)
    local curLevel = self.showLv or self.data.lv
    self.showLv = curLevel
    local curExp = self.sliderText:GetCurNum() or self.data.curExp
    local curLvExp = DataCenter.EquipmentDataManager:GetLevelExp(self.data.equipmentId, curLevel)
    
    if self.seq ~= nil then
        self.seq:Kill()
    end
    self.sliderText:SetSuffix("/" .. curLvExp)
    if curLevel < self.data.lv then
        self.equipment_effect:SetActive(false)
        self.equipment_effect:SetActive(true)

        local duration = EquipmentConst.PROGRESS_DURATION / (self.data.lv - curLevel + 1) * (curLvExp - curExp) / curLvExp
        self.sliderText:TweenToNum(curLvExp, duration)
        self.seq = DOTween.Sequence()
                          :Append(self.slider.unity_uislider:DOValue(1, duration))
                          :AppendCallback(function()
            -- 进入下一级
            self.showLv = curLevel + 1
            self.sliderText:SetNum(0)
            self.slider:SetValue(0)
            self:TweenToProgress()
        end)
    elseif curLevel == self.data.lv then
        local duration = EquipmentConst.PROGRESS_DURATION * (self.data.curExp - curExp) / curLvExp
        self.sliderText:TweenToNum(self.data.curExp, duration)
        local sliderValue = self.data.curExp / self.data.maxExp
        sliderValue = Mathf.Clamp(sliderValue, 0, 1)

        self.seq = DOTween.Sequence()
                          :Append(self.slider.unity_uislider:DOValue(sliderValue, duration))
    else
        local sliderValue = self.data.curExp / self.data.maxExp
        sliderValue = Mathf.Clamp(sliderValue, 0, 1)
        self.slider:SetValue(sliderValue)
        self.sliderText:SetText(self.data.curExp..'/'..self.data.maxExp)
    end
end

local function RefreshMultiUpgrade(self, isInit)
    local k = self:GetBatchNum()

    if EquipmentUtil.IsReachMaxLv(self.data.lv) or self.data.curExp >= self.data.maxExp then
        self.multi_upgrade_bg_go:SetActive(false)
    else
        local itemCount = DataCenter.ItemData:GetItemCount(self.data.upgradeItem)
        if itemCount >= k then
            self.multi_upgrade_bg_go:SetActive(true)
            self.multi_upgrade_text:SetText("x" .. k)
        else
            self.multi_upgrade_bg_go:SetActive(false)
        end
    end
end

local function GetBatchNum(self)
    local k = LuaEntry.DataConfig:TryGetStr("car_equip", "k3")
    local itemNum = DataCenter.ItemData:GetItemCount(self.data.upgradeItem)
    local vec = string.split(k, "|")
    local result = -1
    for _, v in ipairs(vec) do
        local tmpVec = string.split(v, ";")
        if table.count(tmpVec) == 2 then
            local needNum = toInt(tmpVec[1])
            local num = toInt(tmpVec[2])
            if result < 0 or itemNum >= needNum then
                result = num
            end
        end
    end
    result = math.max(1, result)
    return result 
end

local function OnMultiUpgradeClick(self)
    if self.data.lv and self.data.lv >= EquipmentConst.EquipmentMaxLevel then
        UIUtil.ShowTipsId(270036)
        return
    end

    local k = self:GetBatchNum()
    if DataCenter.ItemData:GetItemCount(self.data.upgradeItem) >= k then
        DataCenter.EquipmentDataManager:EquipmentAddExp(self.data.upgradeItem, k, self.data.equipmentUid)
    end
end

local function OnEquipmentChange(self)
    self:RefreshView()
end

local function ShowExpUpSound(self)
    --SoundUtil.PlayEffect(SoundAssets.Music_Effect_Click_Equipment_InUpgrade)
end

local function ShowQualityUpSound(self)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Click_Equipment_Quality_Up)
end

UIEquipmentInfoView.RefreshExp = RefreshExp
UIEquipmentInfoView.TweenToProgress = TweenToProgress
UIEquipmentInfoView.OnCreateCell = OnCreateCell
UIEquipmentInfoView.OnDeleteCell = OnDeleteCell
UIEquipmentInfoView.ClearScroll = ClearScroll
UIEquipmentInfoView.RefreshAttr = RefreshAttr
UIEquipmentInfoView.OnUpgradeBtnClick = OnUpgradeBtnClick
UIEquipmentInfoView.OnCreate = OnCreate
UIEquipmentInfoView.OnDestroy = OnDestroy
UIEquipmentInfoView.OnEnable = OnEnable
UIEquipmentInfoView.OnDisable = OnDisable
UIEquipmentInfoView.ComponentDefine = ComponentDefine
UIEquipmentInfoView.ComponentDestroy = ComponentDestroy
UIEquipmentInfoView.DataDefine = DataDefine
UIEquipmentInfoView.DataDestroy = DataDestroy
UIEquipmentInfoView.OnAddListener = OnAddListener
UIEquipmentInfoView.OnRemoveListener = OnRemoveListener
UIEquipmentInfoView.RefreshView = RefreshView
UIEquipmentInfoView.OnOpen = OnOpen
UIEquipmentInfoView.RefreshNeedItem = RefreshNeedItem
UIEquipmentInfoView.OnQualityBtnClick = OnQualityBtnClick
UIEquipmentInfoView.OnClickTipBtn = OnClickTipBtn
UIEquipmentInfoView.RefreshMultiUpgrade = RefreshMultiUpgrade
UIEquipmentInfoView.OnMultiUpgradeClick = OnMultiUpgradeClick
UIEquipmentInfoView.GetBatchNum = GetBatchNum
UIEquipmentInfoView.OnEquipmentChange = OnEquipmentChange
UIEquipmentInfoView.ShowExpUpSound = ShowExpUpSound
UIEquipmentInfoView.ShowQualityUpSound = ShowQualityUpSound


return UIEquipmentInfoView