---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/2/28 15:41
---

local EquipmentBagView = BaseClass("EquipmentBagView", UIBaseView)
local base = UIBaseView
local EquipmentBagLineCell = require "UI.UIEquipment.EquipmentBag.Component.EquipmentBagLineCell"
local EquipmentBagLineCellTitle = require "UI.UIEquipment.EquipmentBag.Component.EquipmentBagLineCellTitle"
local EquipmentToggleBtn = require "UI.UIEquipment.EquipmentBag.Component.EquipmentToggleBtn"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local close_btn1_path = "UICommonPopUpTitle/panel"

local scroll_view_path = "Root/LoopScroll"
local scroll_view_content_path = "Root/LoopScroll/Viewport/Content"
local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local toggle_pre_path = "Root/Tab/Toggle"

local gift_btn_path = "Root/GetMoreBtn"
local gift_btn_text_path = "Root/GetMoreBtn/GetMoreBtnText"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    self:OnToggleClick(self.curSelectIndex)
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.close_btn1 = self:AddComponent(UIButton, close_btn1_path)
    self.close_btn1:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.titleText = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.titleText:SetLocalText(270014)
    self.content = self:AddComponent(UIBaseContainer, scroll_view_content_path)
    self.scroll_view = self:AddComponent(UILoopListView2, scroll_view_path)
    self.scroll_view:InitListView(0, function(loopView, index)
        return self:OnGetItemByIndex(loopView, index)
    end)
    self.gift_btn = self:AddComponent(UIButton, gift_btn_path)
    self.gift_btn_text = self:AddComponent(UITextMeshProUGUIEx, gift_btn_text_path)
    self.gift_btn_text:SetLocalText(129253)
    self.gift_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:ShowGiftPanel(self.curSelectIndex)
    end)
    self.gift_btn_img = self:AddComponent(UIImage, gift_btn_path)
    self.toggleBtns = {}
    for i = EquipmentConst.EquipmentSuitType.Equipment_Suit_Type_Fight, EquipmentConst.EquipmentSuitType.Equipment_Suit_Type_Defence do
        local pathStr = toggle_pre_path..i
        local btn = self:AddComponent(EquipmentToggleBtn, pathStr)
        btn:SetData(self.tabButtonData[i])
        table.insert(self.toggleBtns, btn)
    end
end

local function ComponentDestroy(self)
    self:ClearScrollView()
    if self.delayTimer then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end

end

local function DataDefine(self)
    self.curSelectIndex = EquipmentConst.EquipmentSuitType.Equipment_Suit_Type_Gather
    self.tabButtonData = self.ctrl:GetTabButtonData()
end

local function DataDestroy(self)
    self.curSelectIndex = EquipmentConst.EquipmentSuitType.Equipment_Suit_Type_Gather
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.EquipDataUpdate, self.RefreshView)
    self:AddUIListener(EventId.EquipSuitDataUpdate, self.RefreshView)
    self:AddUIListener(EventId.OnPackageInfoUpdated, self.OnPackageInfoUpdatedHandler)
    self:AddUIListener(EventId.EquipmentToggleClick, self.OnToggleClick)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.EquipDataUpdate, self.RefreshView)
    self:RemoveUIListener(EventId.EquipSuitDataUpdate, self.RefreshView)
    self:RemoveUIListener(EventId.OnPackageInfoUpdated, self.OnPackageInfoUpdatedHandler)
    self:RemoveUIListener(EventId.EquipmentToggleClick, self.OnToggleClick)
end

local function RefreshView(self)
    self.data = self.ctrl:GetPanelData(self.curSelectIndex)
    self:RefreshScrollView()
    self:RefreshGiftBtn()
end

local function RefreshScrollView(self)
    local count = table.count(self.data.list)
    self.scroll_view:SetListItemCount(count, false, false)
    self.scroll_view:RefreshAllShownItem()
end

local function ClearScrollView(self)
    self.content:RemoveComponents(EquipmentBagLineCell)
    self.content:RemoveComponents(EquipmentBagLineCellTitle)
    self.scroll_view:ClearAllItems()
end

local function OnGetItemByIndex(self, loopScroll, index)
    index = index + 1 --C#控件索引从0开始 
    if index < 1 or index > #self.data.list then
        return nil
    end

    local cellData = self.data.list[index]

    --标题行-- titleLine
    if cellData.type == EquipmentConst.EquipmentBagViewCellType.EquipmentBagViewCellType_Title then
        local item = loopScroll:NewListViewItem('TitleLine')
        local script = self.content:GetComponent(item.gameObject.name, EquipmentBagLineCellTitle)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end

            script = self.content:AddComponent(EquipmentBagLineCellTitle, objectName)
        end

        script:SetActive(true)
        script:SetData(cellData)
        return item
    end

    --数据行
    local item = loopScroll:NewListViewItem('EquipLine')
    local script = self.content:GetComponent(item.gameObject.name, EquipmentBagLineCell)
    if script == nil then
        local objectName = self:GetItemNameSequence()
        item.gameObject.name = objectName
        if (not item.IsInitHandlerCalled) then
            item.IsInitHandlerCalled = true
        end

        script = self.content:AddComponent(EquipmentBagLineCell, objectName)
    end

    script:SetActive(true)
    script:SetData(cellData.list)
    return item
end

local function GetItemNameSequence(self)
    NameCount = NameCount + 1
    return tostring(NameCount)
end

local function RefreshGiftBtn(self)
    self.gift_btn:SetActive(self.data.giftData.showGift)
    if self.data.giftData.showGift then
        self.gift_btn_img:LoadSprite(self.data.giftData.giftIcon)
    end
end

local function OnPackageInfoUpdatedHandler(self)
    self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
        if self.delayTimer then
            self.delayTimer:Stop()
            self.delayTimer = nil
        end
        self:RefreshView()
    end, 0.3)
end

local function OnToggleClick(self, type)
    self.curSelectIndex = type
    for _, v in ipairs(self.toggleBtns) do
        v:SetSelect(self.curSelectIndex)
    end
    self:RefreshView()
end

EquipmentBagView.OnPackageInfoUpdatedHandler = OnPackageInfoUpdatedHandler
EquipmentBagView.OnCreate = OnCreate
EquipmentBagView.OnDestroy = OnDestroy
EquipmentBagView.OnEnable = OnEnable
EquipmentBagView.OnDisable = OnDisable
EquipmentBagView.ComponentDefine = ComponentDefine
EquipmentBagView.ComponentDestroy = ComponentDestroy
EquipmentBagView.DataDefine = DataDefine
EquipmentBagView.DataDestroy = DataDestroy
EquipmentBagView.OnAddListener = OnAddListener
EquipmentBagView.OnRemoveListener = OnRemoveListener
EquipmentBagView.RefreshView = RefreshView
EquipmentBagView.RefreshScrollView = RefreshScrollView
EquipmentBagView.ClearScrollView = ClearScrollView
EquipmentBagView.OnGetItemByIndex = OnGetItemByIndex
EquipmentBagView.GetItemNameSequence = GetItemNameSequence
EquipmentBagView.RefreshGiftBtn = RefreshGiftBtn
EquipmentBagView.OnToggleClick = OnToggleClick

return EquipmentBagView