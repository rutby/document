---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/2/28 18:10
---


local UIEquipmentInfoView = BaseClass("UIEquipmentInfoView", UIBaseView)
local base = UIBaseView
local UIEquipmentInfoCell = require "UI.UIEquipment.UIEquipmentInfo.Component.UIEquipmentInfoCell"

local close_btn_path = "panel"
local name_path = "BG/NameText"
local state_path = "BG/StateText"
local upgrade_btn_path = "BG/btns/UpgradeBtn"
local upgrade_btn_text_path = "BG/btns/UpgradeBtn/UpgradeBtnText"

local change_btn_path = "BG/btns/ChangeBtn"
local change_btn_text_path = "BG/btns/ChangeBtn/ChangeBtnText"

local suit_change_btn_path = "BG/btns/SuitChangeBtn"
local suit_change_btn_text_path = "BG/btns/SuitChangeBtn/SuitChangeBtnText"

local get_btn_path = "BG/btns/GetBtn"
local get_btn_text_path = "BG/btns/GetBtn/GetBtnText"

local take_off_btn_path = "BG/btns/TakeOffBtn"
local take_off_btn_text_path = "BG/btns/TakeOffBtn/TakeOffBtnText"

local equip_btn_path = "BG/btns/EquipBtn"
local equip_btn_text_path = "BG/btns/EquipBtn/EquipBtnText"

local scroll_view_path = "BG/ScrollView"

local icon_path = "BG/Icon"
local effect_desc_title_path = "BG/top/EffectDesc"

local title_bg_path = "BG/TitleBG"
local not_get_path = "BG/NotGetText"
local bg_path = "BG"

local PositionX = 38
local LeftPositionX = -200
local RightPositionX = 176
local low_h = 610
local high_h = 650
local content_panel = "BG/ScrollView/Viewport/Content"
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    self:OnOpen()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf(self.data.fromType ~= EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Main_View and self.data.fromType ~= EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Bag)
    end)
    self.bg = self:AddComponent(UIBaseContainer, bg_path)
    self.name = self:AddComponent(UITextMeshProUGUIEx, name_path)
    self.state = self:AddComponent(UITextMeshProUGUIEx, state_path)
    self.upgrade_btn = self:AddComponent(UIButton, upgrade_btn_path)
    self.upgrade_btn_text = self:AddComponent(UITextMeshProUGUIEx, upgrade_btn_text_path)
    self.upgrade_btn_text:SetLocalText(100091)
    self.content = self:AddComponent(UIBaseContainer, content_panel)
    self.change_btn = self:AddComponent(UIButton, change_btn_path)
    self.change_btn_text = self:AddComponent(UITextMeshProUGUIEx, change_btn_text_path)
    self.change_btn_text:SetLocalText(270002)

    self.suit_change_btn = self:AddComponent(UIButton, suit_change_btn_path)
    self.suit_change_btn_text = self:AddComponent(UITextMeshProUGUIEx, suit_change_btn_text_path)
    self.suit_change_btn_text:SetLocalText(270003)

    self.get_btn = self:AddComponent(UIButton, get_btn_path)
    self.get_btn_text = self:AddComponent(UITextMeshProUGUIEx, get_btn_text_path)
    self.get_btn_text:SetLocalText(100547)
    self.not_get = self:AddComponent(UITextMeshProUGUIEx, not_get_path)
    self.not_get:SetActive(false)
    self.not_get:SetLocalText(270017)
    self.take_off_btn = self:AddComponent(UIButton, take_off_btn_path)
    self.take_off_btn_text = self:AddComponent(UITextMeshProUGUIEx, take_off_btn_text_path)
    self.take_off_btn_text:SetLocalText(270023)
    self.title_bg = self:AddComponent(UIImage, title_bg_path)
    self.equip_btn = self:AddComponent(UIButton, equip_btn_path)
    self.equip_btn_text = self:AddComponent(UITextMeshProUGUIEx, equip_btn_text_path)
    self.equip_btn_text:SetLocalText(270024)
    self.effect_desc_title = self:AddComponent(UITextMeshProUGUIEx, effect_desc_title_path)
    self.effect_desc_title:SetLocalText(270035)
    self.upgrade_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnUpgradeBtnClick()
    end)
    self.change_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnChangeBtnClick()
    end)
    self.suit_change_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnSuitChangeBtnClick()
    end)
    self.get_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnGetBtnClick()
    end)
    self.take_off_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Click_Equipment_Take_Off)
        self:OnTakeOffClick()
    end)
    self.equip_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Click_Equipment_Put_On)
        self:OnEquipBtnClick()
    end)

    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
    self.icon = self:AddComponent(UIImage, icon_path)
end

local function ComponentDestroy(self)
    self:ClearScroll()
    if self.delayTimer then
        self.delayTimer:Stop()
    end
    self.delayTimer = nil
end

local function DataDefine(self)

end

local function DataDestroy(self)

end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function RefreshView(self)
    local param = self:GetUserData()
    self.data = self.ctrl:GetPanelData(param)
    local w = self.bg.rectTransform:Get_sizeDelta()
    self.name:SetLocalText(self.data.name)
    self.name:SetColor(self.data.color)
    local ScreenSize = CS.UnityEngine.Screen
    local posX = PositionX
    if param.posX then
        local ScreenWidth = ScreenSize.width
        local scaleFactor = UIManager:GetInstance():GetScaleFactor()
        posX = param.posX

        if param.isLeft then
            posX = posX / scaleFactor + (w  - ScreenWidth / scaleFactor) / 2
        elseif param.isRight then
            posX = (ScreenWidth / scaleFactor - w) / 2  - (ScreenWidth - posX) / scaleFactor
        end
    elseif param.isLeft then
        posX = LeftPositionX
    elseif param.isRight then
        posX = RightPositionX
    end
    local _, posY, posZ = self.bg.transform:Get_localPosition()
    self.bg.transform:Set_localPosition(posX, posY, posZ)
    self.title_bg:LoadSprite(self.data.title_bg)
    self.icon:LoadSprite(self.data.icon)
    self.bg.rectTransform:Set_sizeDelta(w, low_h)
    self.not_get:SetActive(false)
    if self.data.fromType == EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Reward_View or self.data.fromType == EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Main_View then
        self.state:SetText("")
    else
        if self.data.selfCarIndex ~= nil then
            if EquipmentUtil.IsNormalCarIndex(self.data.selfCarIndex) then
                self.state:SetLocalText(270015, self.data.selfCarIndex)
            else
                self.state:SetLocalText(270039)
            end
        elseif self.data.equipmentUid == nil then
            self.not_get:SetActive(true)
            self.state:SetLocalText(270016)
            self.bg.rectTransform:Set_sizeDelta(w, high_h)
        else
            self.state:SetText("")
        end
    end
    self:RefreshAttr()
    self:RefreshButton()
end

local function OnGetBtnClick(self)
    if self.data.equipmentId then
        GoToResLack.GotoEquip(EquipmentUtil.GetEquipmentLv1Id(self.data.equipmentId))
    end
end

local function OnUpgradeBtnClick(self)
    if self.data.equipmentUid then
        local equipData = DataCenter.EquipmentDataManager:GetEquipByUuid(self.data.equipmentUid)
        if equipData and equipData.lv >= EquipmentConst.EquipmentMaxLevel then
            UIUtil.ShowTipsId(270036)
            return
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipmentUpgrade, { anim = false, playEffect = false}, self.data.equipmentUid)
        self.ctrl:CloseSelf()
    end
end

local function OnChangeBtnClick(self)
    local para = {}
    para.carIndex = self.data.carIndex
    para.type = self.data.type
    para.pos = self.data.pos
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipmentChoose, { anim = false, playEffect = false}, para)
    self.ctrl:CloseSelf(true)
end

local function OnEquipBtnClick(self)
    self.ctrl:WearEquipment(self.data.carIndex, self.data.type, self.data.equipmentUid)
end

local function OnSuitChangeBtnClick(self)

end

local function OnTakeOffClick(self)
    local template = DataCenter.EquipmentTemplateManager:GetTemplate(self.data.equipmentId)
    if template then
        self.ctrl:TakeOffEquipment(self.data.selfCarIndex, template:GetSuitType(), self.data.equipmentUid, self.data.fromType)
    end
end

local function RefreshButton(self)
    self.upgrade_btn:SetActive(false)
    self.change_btn:SetActive(false)
    self.suit_change_btn:SetActive(false)
    self.get_btn:SetActive(false)
    self.take_off_btn:SetActive(false)
    self.equip_btn:SetActive(false)
    self.take_off_btn:SetActive(self.data.selfCarIndex ~= nil)
    self.take_off_btn.rectTransform:Set_sizeDelta(160, 71)
    self.take_off_btn_text:SetFontSize(28)
    if self.data.equipmentUid == nil then
        if self.data.fromType ~= EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Reward_View then
            self.get_btn:SetActive(true)
        end
    else
        if self.data.fromType == EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Main_View then
            self.upgrade_btn:SetActive(true)
            self.change_btn:SetActive(true)
            self.change_btn.rectTransform:Set_sizeDelta(150, 66)
            self.take_off_btn.rectTransform:Set_sizeDelta(150, 66)
            self.change_btn_text:SetFontSize(26)
            self.take_off_btn_text:SetFontSize(26)
        elseif self.data.fromType == EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Bag then
            self.upgrade_btn:SetActive(true)
        elseif self.data.fromType == EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Change_View then
            if self.data.equipmentUid ~= self.data.currentPosUid then
                self.equip_btn:SetActive(true)
                self.take_off_btn:SetActive(false)
            end
            --self.suit_change_btn:SetActive(true)
        elseif self.data.fromType == EquipmentConst.EquipmentInfoViewType.EquipmentInfoViewType_Null then

        end
    end
end

local function RefreshAttr(self)
    self:ClearScroll()
    local count = table.count(self.data.attrList)
    if count == 0 then
        return
    end
    self.scroll_view:SetTotalCount(count)
    self.scroll_view:RefillCells()
    self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
        if self.delayTimer then
            self.delayTimer:Stop()
        end
        self.delayTimer = nil
        local x, y = self.content.rectTransform:Get_sizeDelta()
        local sx, sy = self.scroll_view.rectTransform:Get_sizeDelta()
        self.scroll_view:SetEnable(y >= sy)
    end, 0.2)
end

local function OnCreateCell(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.scroll_view:AddComponent(UIEquipmentInfoCell, itemObj)
    local data =  self.data.attrList[index]
    cellItem:SetData(data)
end

local function OnDeleteCell(self,itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIEquipmentInfoCell)
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UIEquipmentInfoCell)
end

local function OnOpen(self)
    self:RefreshView()
end

UIEquipmentInfoView.OnOpen = OnOpen
UIEquipmentInfoView.OnCreateCell = OnCreateCell
UIEquipmentInfoView.OnDeleteCell = OnDeleteCell
UIEquipmentInfoView.ClearScroll = ClearScroll
UIEquipmentInfoView.RefreshAttr = RefreshAttr
UIEquipmentInfoView.RefreshButton = RefreshButton
UIEquipmentInfoView.OnUpgradeBtnClick = OnUpgradeBtnClick
UIEquipmentInfoView.OnChangeBtnClick = OnChangeBtnClick
UIEquipmentInfoView.OnSuitChangeBtnClick = OnSuitChangeBtnClick
UIEquipmentInfoView.OnCreate = OnCreate
UIEquipmentInfoView.OnDestroy = OnDestroy
UIEquipmentInfoView.OnEnable = OnEnable
UIEquipmentInfoView.OnDisable = OnDisable
UIEquipmentInfoView.ComponentDefine = ComponentDefine
UIEquipmentInfoView.ComponentDestroy = ComponentDestroy
UIEquipmentInfoView.DataDefine = DataDefine
UIEquipmentInfoView.DataDestroy = DataDestroy
UIEquipmentInfoView.OnAddListener = OnAddListener
UIEquipmentInfoView.OnRemoveListener = OnRemoveListener
UIEquipmentInfoView.RefreshView = RefreshView
UIEquipmentInfoView.OnGetBtnClick = OnGetBtnClick
UIEquipmentInfoView.OnTakeOffClick = OnTakeOffClick
UIEquipmentInfoView.OnEquipBtnClick = OnEquipBtnClick

return UIEquipmentInfoView