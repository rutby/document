---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/6 15:05
---


local UIEquipmentSuitQualityIntroView = BaseClass("UIEquipmentSuitQualityIntroView", UIBaseView)
local base = UIBaseView
local UIEquipmentSuitQualityIntroLineCellTitle = require "UI.UIEquipment.UIEquipmentSuitQualityIntro.Component.UIEquipmentSuitQualityIntroLineCellTitle"
local UIEquipmentSuitQualityIntroLineEquipmentCell = require "UI.UIEquipment.UIEquipmentSuitQualityIntro.Component.UIEquipmentSuitQualityIntroLineEquipmentCell"
local UIEquipmentSuitQualityIntroLineSuitCell = require "UI.UIEquipment.UIEquipmentSuitQualityIntro.Component.UIEquipmentSuitQualityIntroLineSuitCell"

local scroll_view_path = "ImgBg/LoopScroll"
local scroll_view_content_path = "ImgBg/LoopScroll/Viewport/Content"

local name_path = "ImgBg/TitleLine/NameText"
local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local close_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local panel_path = "UICommonPopUpTitle/panel"

local toggle_prefix = "ImgBg/ToggleGroup/Toggle"
local toggle_text_prefix = "/Txt_ListToggle"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    self:RefreshView()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)

    self.panel = self:AddComponent(UIButton, panel_path)
    self.panel:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    
    self.nameText = self:AddComponent(UITextMeshProUGUIEx, name_path)
    self.title = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title:SetLocalText(270018)
    
    self.content = self:AddComponent(UIBaseContainer, scroll_view_content_path)
    self.scroll_view = self:AddComponent(UILoopListView2, scroll_view_path)
    self.scroll_view:InitListView(0, function(loopView, index)
        return self:OnGetItemByIndex(loopView, index)
    end)

    for i = EquipmentConst.EquipmentColor.EquipmentColor_White, EquipmentConst.EquipmentColor.EquipmentColor_Orange do
        local toggleStr = toggle_prefix..i
        local toggleTextStr = toggleStr..toggle_text_prefix..i
        local text = self:AddComponent(UITextMeshProUGUIEx, toggleTextStr)
        text:SetLocalText(EquipmentUtil.GetColorText(i))
        local toggle = self:AddComponent(UIToggle, toggleStr)
        self["toggle"..i] = toggle
        toggle:SetOnValueChanged(function(tf)
            if tf then
                self:ToggleControlBorS(i)
            end
        end)
        toggle:SetIsOn(i == EquipmentConst.EquipmentColor.EquipmentColor_White)
    end
end

local function ComponentDestroy(self)
    self:ClearScrollView()
end

local function DataDefine(self)
    self.currentQuality = EquipmentConst.EquipmentColor.EquipmentColor_White
end

local function DataDestroy(self)
    self.currentQuality = EquipmentConst.EquipmentColor.EquipmentColor_White
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.EquipDataUpdate, self.RefreshView)
    self:AddUIListener(EventId.EquipSuitDataUpdate, self.RefreshView)

end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.EquipSuitDataUpdate, self.RefreshView)
    self:RemoveUIListener(EventId.EquipDataUpdate, self.RefreshView)
end

local function RefreshView(self)
    local para = self:GetUserData()
    self.data = self.ctrl:GetPanelData(para, self.currentQuality)
    self.nameText:SetLocalText(self.data.name)
    self:RefreshScrollView()
end

local function RefreshScrollView(self)
    local count = table.count(self.data.list)
    self.scroll_view:SetListItemCount(count, false, false)
    self.scroll_view:RefreshAllShownItem()
end

local function ClearScrollView(self)
    self.content:RemoveComponents(UIEquipmentSuitQualityIntroLineCellTitle)
    self.content:RemoveComponents(UIEquipmentSuitQualityIntroLineEquipmentCell)
    self.content:RemoveComponents(UIEquipmentSuitQualityIntroLineSuitCell)

    self.scroll_view:ClearAllItems()
end

local function OnGetItemByIndex(self, loopScroll, index)
    index = index + 1 --C#控件索引从0开始 
    if index < 1 or index > #self.data.list then
        return nil
    end

    local cellData = self.data.list[index]

    --标题行-- titleLine
    if cellData.type == EquipmentConst.EquipmentSuitQualityViewCellType.EquipmentSuitQualityViewCellType_Title then
        local item = loopScroll:NewListViewItem('TitleLine')
        local script = self.content:GetComponent(item.gameObject.name, UIEquipmentSuitQualityIntroLineCellTitle)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end

            script = self.content:AddComponent(UIEquipmentSuitQualityIntroLineCellTitle, objectName)
        end

        script:SetActive(true)
        script:SetData(cellData)
        return item
    elseif cellData.type == EquipmentConst.EquipmentSuitQualityViewCellType.EquipmentSuitQualityViewCellType_Suit then
        local item = loopScroll:NewListViewItem('EquipSuitLine')
        local script = self.content:GetComponent(item.gameObject.name, UIEquipmentSuitQualityIntroLineSuitCell)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end

            script = self.content:AddComponent(UIEquipmentSuitQualityIntroLineSuitCell, objectName)
        end

        script:SetActive(true)
        script:SetData(cellData.list)
        return item

    end

    --数据行
    local item = loopScroll:NewListViewItem('EquipLine')
    local script = self.content:GetComponent(item.gameObject.name, UIEquipmentSuitQualityIntroLineEquipmentCell)
    if script == nil then
        local objectName = self:GetItemNameSequence()
        item.gameObject.name = objectName
        if (not item.IsInitHandlerCalled) then
            item.IsInitHandlerCalled = true
        end

        script = self.content:AddComponent(UIEquipmentSuitQualityIntroLineEquipmentCell, objectName)
    end

    script:SetActive(true)
    script:SetData(cellData.list)
    return item
end

local function GetItemNameSequence(self)
    NameCount = NameCount + 1
    return tostring(NameCount)
end

local function ToggleControlBorS(self, index)
    self.currentQuality = index
    self:RefreshView()
end

UIEquipmentSuitQualityIntroView.OnCreate = OnCreate
UIEquipmentSuitQualityIntroView.OnDestroy = OnDestroy
UIEquipmentSuitQualityIntroView.OnEnable = OnEnable
UIEquipmentSuitQualityIntroView.OnDisable = OnDisable
UIEquipmentSuitQualityIntroView.ComponentDefine = ComponentDefine
UIEquipmentSuitQualityIntroView.ComponentDestroy = ComponentDestroy
UIEquipmentSuitQualityIntroView.DataDefine = DataDefine
UIEquipmentSuitQualityIntroView.DataDestroy = DataDestroy
UIEquipmentSuitQualityIntroView.OnAddListener = OnAddListener
UIEquipmentSuitQualityIntroView.OnRemoveListener = OnRemoveListener
UIEquipmentSuitQualityIntroView.RefreshView = RefreshView
UIEquipmentSuitQualityIntroView.RefreshScrollView = RefreshScrollView
UIEquipmentSuitQualityIntroView.ClearScrollView = ClearScrollView
UIEquipmentSuitQualityIntroView.OnGetItemByIndex = OnGetItemByIndex
UIEquipmentSuitQualityIntroView.GetItemNameSequence = GetItemNameSequence
UIEquipmentSuitQualityIntroView.ToggleControlBorS = ToggleControlBorS

return UIEquipmentSuitQualityIntroView