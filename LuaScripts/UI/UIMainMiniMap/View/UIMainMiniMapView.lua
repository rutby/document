---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/11/16 21:09
---
local MainMiniMapDesItem = require"UI.UIMainMiniMap.Component.MainMiniMapDesItem"
local MainMiniMapDragonItem = require"UI.UIMainMiniMap.Component.MainMiniMapDragonItem"
local UIMainMiniMapView = BaseClass("UIMainMiniMapView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local obj_path = "safeArea"
local area_path = "safeArea/Image/area"
local layout_path = "safeArea/Image/layout"
local layout1_path = "safeArea/Image/layout1"
local des1_path = "safeArea/desObj/des1"
local des2_path = "safeArea/desObj/des2"
local des3_path = "safeArea/desObj/des3"
local des_obj_path = "safeArea/desObj"
local MapScale = 0.14 ---140(图片尺寸)/1000(世界尺寸)
local deltaSize = 20.5 --视口方框偏移量
local MapDelta = 0---450 --- (1000-100)/2
---
--创建
local function OnCreate(self)
    base.OnCreate(self)
    if LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        SFSNetwork.SendMessage(MsgDefines.GetWorldAttackerInfo,LuaEntry.Player:GetCurServerId())
        MapScale = 0.14
        MapDelta = 0
    else
        MapScale = 1.4---140(图片尺寸)/100(世界尺寸) 
        MapDelta = 450
    end
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.obj = self:AddComponent(UIBaseContainer, obj_path)
    self.area = self:AddComponent(UIBaseContainer, area_path)
    self.layout = self:AddComponent(UIBaseContainer, layout_path)
    self.layout1 = self:AddComponent(UIBaseContainer, layout1_path)
    self.des_obj = self:AddComponent(UIBaseContainer, des_obj_path)
    self.des1 = self:AddComponent(MainMiniMapDesItem, des1_path)
    self.des1:SetText(Localization:GetString("302337"))
    self.des2 = self:AddComponent(MainMiniMapDesItem, des2_path)
    self.des2:SetText(Localization:GetString("302338"))
    self.des3 = self:AddComponent(MainMiniMapDesItem, des3_path)
    self.des3:SetText(Localization:GetString("302336"))
    if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        self.des_obj:SetActive(false)
    else
        self.des_obj:SetActive(true)
    end
end

local function ComponentDestroy(self)
    self:ClearDragonItemCell()
    self:ClearItemCell()
    self:ClearAttackerCell()
    self.area = nil
    self.layout = nil
    self.des1 = nil
    self.des2 = nil
    self.des3 = nil
end


local function DataDefine(self)
    self.zoomXSize = 0
    self.zoomYSize = 0
    self.screenX = CS.UnityEngine.Screen.width
    self.screenY = CS.UnityEngine.Screen.height
    self.list = {}
    self.lodCache = -1
    self.isShowMiniMap = true
end

local function DataDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ShowMiniMap(self)
    self:SetMapActive(true)
end
local function HideMiniMap(self)
    self:SetMapActive(false)
end

local function ShowDragonPoint(self)
    if LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        return
    end
    local data = self.ctrl:GetDragonPointData()
    self:ClearDragonItemCell()
    local list = data.list
    if list~=nil then
        for i=1,#list do
            self.dragonItemList[i] = self:GameObjectInstantiateAsync(UIAssets.MiniMapDragonItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go:SetActive(true)
                go.transform:SetParent(self.layout.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local model = self.layout:AddComponent(MainMiniMapDragonItem, nameStr)
                model:ReInit(list[i],MapScale,MapDelta)
            end)
        end
    end
end
local function SetMapActive(self,value)
    if value~=self.isShowMiniMap then
        self.obj:SetActive(value)
        self.isShowMiniMap = value
    end
end
local function ReInit(self)
    --self:ShowCityPoint()
    if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        self:ShowDragonPoint()
    end
    self:SetZoomPosAndSize(true)
end
local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.WORLD_CAMERA_CHANGE_POINT, self.RefreshCameraPoint)
    self:AddUIListener(EventId.MiniMapDataRefresh, self.ShowCityPoint)
    self:AddUIListener(EventId.ShowMiniMap, self.ShowMiniMap)
    self:AddUIListener(EventId.HideMiniMap, self.HideMiniMap)
    self:AddUIListener(EventId.AttackInfoForMinimap,self.RefreshAttackerPoint)
    --self:AddUIListener(EventId.ChangeCameraLod, self.UpdateLod)
    self:AddUIListener(EventId.DragonMapDataRefresh,self.ShowDragonPoint)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.WORLD_CAMERA_CHANGE_POINT, self.RefreshCameraPoint)
    self:RemoveUIListener(EventId.MiniMapDataRefresh, self.ShowCityPoint)
    self:RemoveUIListener(EventId.ShowMiniMap, self.ShowMiniMap)
    self:RemoveUIListener(EventId.HideMiniMap, self.HideMiniMap)
    self:RemoveUIListener(EventId.AttackInfoForMinimap,self.RefreshAttackerPoint)
    self:RemoveUIListener(EventId.DragonMapDataRefresh,self.ShowDragonPoint)
    --self:RemoveUIListener(EventId.ChangeCameraLod, self.UpdateLod)
end
local function UpdateLod(self, lod)
    --if self.lodCache ~=lod then
    --    self.lodCache =lod
    --    self.needCheckPoint = true
    --end
end
local function RefreshCameraPoint(self)
    self:SetZoomPosAndSize(true)
end
local function ShowCityPoint(self,obj)
    if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        return
    end
    local data = self.ctrl:GetCityPointData(#self.list)
    self:ClearItemCell()
    local list = data.list
    self.list = list
    if list~=nil then
        for i=1,#list do
            self.itemList[i] = self:GameObjectInstantiateAsync(self:GetPrefabPath(list[i].pType), function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.transform:SetParent(self.layout.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local tfx = go:GetComponent(typeof(CS.UnityEngine.RectTransform))
                tfx:Set_anchoredPosition(list[i].pos.x *MapScale,list[i].pos.y*MapScale)
                go.gameObject:SetActive(true)
            end)
        end
    end
end

local function RefreshAttackerPoint(self)
    if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        return
    end
    local data = self.ctrl:GetAttackerPointData()
    self:ClearAttackerCell()
    local list = data.list
    if list~=nil then
        for i=1,#list do
            self.attackerItemList[i] = self:GameObjectInstantiateAsync("Assets/Main/Prefab_Dir/UI/UIMiniMap/attackerPoint.prefab", function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.transform:SetParent(self.layout1.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local tfx = go:GetComponent(typeof(CS.UnityEngine.RectTransform))
                tfx:Set_anchoredPosition(list[i].pos.x *MapScale,list[i].pos.y*MapScale)
                go.gameObject:SetActive(true)
            end)
        end
    end
end
local function GetPrefabPath(self,state)
    local path = ""
    if state == PlayerType.PlayerSelf then
        path = "Assets/Main/Prefab_Dir/UI/UIMiniMap/selfPoint.prefab"
    elseif state == PlayerType.PlayerAlliance then
        path = "Assets/Main/Prefab_Dir/UI/UIMiniMap/memberPoint.prefab"
    elseif state == PlayerType.PlayerAllianceLeader then
        path = "Assets/Main/Prefab_Dir/UI/UIMiniMap/leaderPoint.prefab"
    end
    return path
end
local function ClearItemCell(self)
    if self.itemList~=nil then
        for k,v in pairs(self.itemList) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.itemList ={}
end

local function ClearDragonItemCell(self)
    if self.layout~=nil then
        self.layout:RemoveComponents(MainMiniMapDragonItem)
        
    end
    if self.dragonItemList~=nil then
        for k,v in pairs(self.dragonItemList) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.dragonItemList ={}
end

local function ClearAttackerCell(self)
    if self.attackerItemList~=nil then
        for k,v in pairs(self.attackerItemList) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.attackerItemList ={}
end

local function SetZoomPosAndSize(self,needChangeSize)
    if needChangeSize then
        local maxV3 = {}
        maxV3.x = self.screenX
        maxV3.y = self.screenY
        maxV3.z = 0
        local maxPos = CS.SceneManager.World:ScreenPointToWorld(maxV3)
        local maxV2 = SceneUtils.WorldToTile(maxPos,ForceChangeScene.World)
        local minV3 = {}
        minV3.x = 0
        minV3.y = 0
        minV3.z = 0
        local minPos = CS.SceneManager.World:ScreenPointToWorld(minV3)
        local minV2 = SceneUtils.WorldToTile(minPos,ForceChangeScene.World)
        self.zoomXSize = (maxV2.x-minV2.x)*MapScale
        self.zoomYSize = (maxV2.y-minV2.y)*MapScale
        local v2 = {}
        v2.x =self.zoomXSize
        v2.y =self.zoomYSize
        self.area:SetSizeDelta(v2)
        
    end
    local targetV3 = CS.SceneManager.World.CurTarget
    local curV2 = SceneUtils.WorldToTile(targetV3,ForceChangeScene.World)
    local realV2 = {}
    local tempX = (curV2.x-MapDelta)*MapScale-(self.zoomXSize/2)
    local tempY = (curV2.y-MapDelta)*MapScale-(self.zoomYSize/2)
    --防爆框
    local checkX = math.min(tempX,140-self.zoomXSize)
    local checkY = math.min(tempY,140-self.zoomYSize)
    local x = math.min(math.max(checkX,0),140) 
    local y = math.min(math.max(checkY,0),140)
    realV2.x = x+deltaSize
    realV2.y = y+deltaSize
    self.area:SetAnchoredPositionXY(realV2.x, realV2.y)
end

UIMainMiniMapView.OnCreate= OnCreate
UIMainMiniMapView.OnDestroy = OnDestroy
UIMainMiniMapView.OnEnable = OnEnable
UIMainMiniMapView.OnDisable = OnDisable
UIMainMiniMapView.ComponentDefine = ComponentDefine
UIMainMiniMapView.ComponentDestroy = ComponentDestroy
UIMainMiniMapView.DataDefine = DataDefine
UIMainMiniMapView.DataDestroy = DataDestroy
UIMainMiniMapView.ReInit = ReInit
UIMainMiniMapView.ClearItemCell = ClearItemCell
UIMainMiniMapView.ShowCityPoint = ShowCityPoint
UIMainMiniMapView.SetMapActive = SetMapActive
UIMainMiniMapView.SetZoomPosAndSize =SetZoomPosAndSize
UIMainMiniMapView.OnAddListener =OnAddListener
UIMainMiniMapView.OnRemoveListener =OnRemoveListener
UIMainMiniMapView.UpdateLod = UpdateLod
UIMainMiniMapView.RefreshCameraPoint =RefreshCameraPoint
UIMainMiniMapView.GetPrefabPath = GetPrefabPath
UIMainMiniMapView.ShowMiniMap = ShowMiniMap
UIMainMiniMapView.HideMiniMap = HideMiniMap
UIMainMiniMapView.ClearAttackerCell = ClearAttackerCell
UIMainMiniMapView.RefreshAttackerPoint =RefreshAttackerPoint
UIMainMiniMapView.ShowDragonPoint =ShowDragonPoint
UIMainMiniMapView.ClearDragonItemCell = ClearDragonItemCell
return UIMainMiniMapView