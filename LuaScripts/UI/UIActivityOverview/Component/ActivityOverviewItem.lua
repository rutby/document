---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/8/18 20:31
---
local ActivityOverviewItem = BaseClass("ActivityOverviewItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UICommonItem = require "UI.UICommonItem.UICommonItem"

local anim_path = "aim"
local offset_path = "aim/offset"
local activityName_path = "aim/offset/name"
local content_path = "aim/offset/QuestRewardContent"
local jumpBtn_path = "aim/offset/taskBg"
local redPoint_path = "aim/offset/red"
local newDot_path = "aim/offset/NewDot"
local lockedTipBg_path = "aim/offset/lockBg"
local lockedTip_path = "aim/offset/specTip"
local prog_path = "aim/offset/Progress"
local progTxt_path = "aim/offset/Progress/progTxt"
local progTip_path = "aim/offset/Progress/progTip"
local commonTip_path = "aim/offset/commonTip"
local completeImg_path = "aim/offset/complete"
local completeTxt_path = "aim/offset/complete/Txt_AcceptReward"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
end

-- 隐藏
local function OnDisable(self)
    base.OnDisable(self)
end

--控件的定义
local function ComponentDefine(self)
    self.animN = self:AddComponent(UIBaseContainer, anim_path)
    self.offsetN = self:AddComponent(UIBaseContainer, offset_path)
    self.activityNameN = self:AddComponent(UIText, activityName_path)
    self.activityImgN = self:AddComponent(UIImage, jumpBtn_path)
    self.contentN = self:AddComponent(UIBaseContainer, content_path)
    self.jumpBtnN = self:AddComponent(UIButton, offset_path)
    self.jumpBtnN:SetOnClick(function()
        self:OnClickJumpBtn()
    end)
    self.redPointN = self:AddComponent(UIBaseContainer, redPoint_path)
    self.newDotN = self:AddComponent(UIBaseContainer, newDot_path)
    self.lockedTipN = self:AddComponent(UIText, lockedTip_path)
    self.lockedTipBgN = self:AddComponent(UIBaseContainer, lockedTipBg_path)
    self.progN = self:AddComponent(UISlider, prog_path)
    self.progTxtN = self:AddComponent(UIText, progTxt_path)
    self.progTipN = self:AddComponent(UIText, progTip_path)
    self.commonTipN = self:AddComponent(UIText, commonTip_path)
    self.completeN = self:AddComponent(UIBaseContainer, completeImg_path)
    self.completeTxtN = self:AddComponent(UIText, completeTxt_path)
    self.completeTxtN:SetLocalText(170008)
end

--控件的销毁
local function ComponentDestroy(self)
    self.offsetN = nil
    self.activityNameN = nil
    self.activityImgN = nil
    self.contentN = nil
    self.jumpBtnN = nil
    self.redPointN = nil
    self.lockedTipN = nil
    self.progN = nil
    self.progTxtN = nil
    self.progTipN = nil
    self.commonTipN = nil
    self.completeN = nil
end

--变量的定义
local function DataDefine(self)
    self.activityOverviewInfo = nil
    self.model = {}
    self.rewardItems = {}
end

--变量的销毁
local function DataDestroy(self)
    self.activityOverviewInfo = nil
    self.model = nil
    self.rewardItems = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnOneActivityOverviewRedChange, self.RefreshAll)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnOneActivityOverviewRedChange, self.RefreshAll)
    base.OnRemoveListener(self)
end
--OnOneActivityOverviewRedChange

-- 全部刷新
local function ReInit(self,info, showAnimIndex)
    self.activityOverviewInfo = info
    if not self.activityOverviewInfo then
        return
    end
    
    self:RefreshAll()

    if showAnimIndex then
        self.animN:SetActive(false)
        local delayS = 0.15 + 0.08 * (showAnimIndex - 1)
        TimerManager:GetInstance():DelayInvoke(function()
            self.animN:SetActive(true)
        end, delayS)
    end
end

local function RefreshAll(self, targetType)
    if not self.activityOverviewInfo then
        return
    end
    if targetType and targetType ~= self.activityOverviewInfo.type then
        return
    end
    self.activityImgN:LoadSprite(string.format(LoadPath.UIActivity,self.activityOverviewInfo.activityIcon))
    self.activityNameN:SetLocalText(self.activityOverviewInfo.activityName)

    local isOpen, strTip = DataCenter.DailyActivityManager:CheckIfActIsOpen(self.activityOverviewInfo)
    if not isOpen then
        self.lockedTipBgN:SetActive(true)
        self.lockedTipN:SetActive(true)
        self.lockedTipN:SetText(strTip)
        self.progN:SetActive(false)
        self.commonTipN:SetActive(false)
        --CS.UIGray.SetGray(self.offsetN.transform, true, false)
        self.redPointN:SetActive(false)
        self.newDotN:SetActive(false)
        self.completeN:SetActive(false)
    else
        self.lockedTipBgN:SetActive(false)
        self.lockedTipN:SetActive(false)
        --CS.UIGray.SetGray(self.offsetN.transform, false, true)
        local isNew = DataCenter.DailyActivityManager:CheckIfOverviewHasNew(self.activityOverviewInfo.id)
        if isNew then
            self.newDotN:SetActive(true)
            self.redPointN:SetActive(false)
        else
            self.newDotN:SetActive(false)
            local redCount = DataCenter.DailyActivityManager:GetOverviewRedCount(self.activityOverviewInfo)
            self.redPointN:SetActive(redCount > 0)
        end

        local _, curNum, maxNum, progTip, commonTip, specTip = DataCenter.DailyActivityManager:GetOverviewDesc(self.activityOverviewInfo)
        if commonTip then
            self.progN:SetActive(false)
            self.commonTipN:SetActive(true)
            self.commonTipN:SetText(commonTip)
            self.completeN:SetActive(maxNum > 0 and curNum >= maxNum)
        elseif specTip then
            self.progN:SetActive(false)
            self.commonTipN:SetActive(false)
            self.lockedTipN:SetActive(true)
            self.lockedTipN:SetText(specTip)
            self.completeN:SetActive(false)
        else
            self.commonTipN:SetActive(false)
            self.progN:SetActive(true)
            local tempProg = maxNum == 0 and 1 or curNum / maxNum
            self.progN:SetValue(tempProg)
            self.progTxtN:SetText(curNum .. "/" .. maxNum)
            self.progTipN:SetText(progTip)
            if self.activityOverviewInfo.type == ActivityOverviewType.MineCave then
                local isComplete = DataCenter.MineCaveManager:CheckIfIsAllComplete()
                self.completeN:SetActive(isComplete)
            else
                self.completeN:SetActive(curNum >= maxNum)
            end
        end
    end

    self:SetAllCellDestroy()
    for i, v in pairs(self.activityOverviewInfo.rewards) do
        if not string.IsNullOrEmpty(v) then
            self.model[i] = self:GameObjectInstantiateAsync(UIAssets.UICommonItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject
                go:SetActive(true)
                go.transform:SetParent(self.contentN.transform)
                go.transform:Set_localScale(0.52, 0.52, 1)
                go.transform:SetAsLastSibling()
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                self.rewardItems[i] = self.contentN:AddComponent(UICommonItem, nameStr)
                local param = {}
                param.rewardType = RewardType.GOODS-- v.rewardType
                param.itemId = v-- rewardParam.itemId
                self.rewardItems[i]:ReInit(param)
                if self.rewardItems[i].flag then
                    self.rewardItems[i].flag:SetActive(false)
                end
            end)
        end
    end
end


local function SetAllCellDestroy(self)
    self.contentN:RemoveComponents(UICommonItem)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

local function OnClickJumpBtn(self)
    local isOpen, strTip = DataCenter.DailyActivityManager:CheckIfActIsOpen(self.activityOverviewInfo)
    if isOpen then
        DataCenter.DailyActivityManager:RemoveOneOverviewFromNew(self.activityOverviewInfo.id)
        self.view.ctrl:JumpToActivity(self.activityOverviewInfo)
    else
        UIUtil.ShowTips(strTip)
    end
end

local function CheckTypeObj(self,type)
    if self.activityOverviewInfo and self.activityOverviewInfo.type == type then
        if self.offsetN then
            return self.offsetN.transform.position
        end
    end
    return false
end

ActivityOverviewItem.OnCreate = OnCreate
ActivityOverviewItem.OnDestroy = OnDestroy
ActivityOverviewItem.OnEnable = OnEnable
ActivityOverviewItem.OnDisable = OnDisable
ActivityOverviewItem.ComponentDefine = ComponentDefine
ActivityOverviewItem.ComponentDestroy = ComponentDestroy
ActivityOverviewItem.DataDefine = DataDefine
ActivityOverviewItem.DataDestroy = DataDestroy
ActivityOverviewItem.OnAddListener = OnAddListener
ActivityOverviewItem.OnRemoveListener = OnRemoveListener

ActivityOverviewItem.ReInit = ReInit
ActivityOverviewItem.RefreshAll = RefreshAll
ActivityOverviewItem.SetAllCellDestroy = SetAllCellDestroy
ActivityOverviewItem.OnClickJumpBtn = OnClickJumpBtn
ActivityOverviewItem.CheckTypeObj = CheckTypeObj

return ActivityOverviewItem