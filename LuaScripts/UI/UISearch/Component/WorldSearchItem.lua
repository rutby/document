---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/6 11:19
---
local WorldSearchItem = BaseClass("WorldSearchItem",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local slider_path = "Slider"
local add_btn_path = "AddButton"
local sub_btn_path = "ReduceButton"
local search_txt_path ="searchBtn/searchText"
local search_btn_path = "searchBtn"
--local des_txt_path = "DesBg/desTxt"
local level_txt_path ="levelTxt"
local num_txt_path = "Slider/HandleSlideArea/Handle/numTxt"
local input_path = "InputField"

local function OnCreate(self)
    base.OnCreate(self)
    self.search_btn = self:AddComponent(UIButton,search_btn_path)
    self.search_btn:SetOnClick(function ()
        self:OnSearchClick()
    end)
    self.slider = self:AddComponent(UISlider,slider_path)
    self.slider:SetOnValueChanged(function (value)
        self:OnValueChange(value)
    end)
    self.add_btn = self:AddComponent(UIButton,add_btn_path)
    self.add_btn:SetOnClick(function ()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Add)
        self:OnAdd()
    end)
    self.sub_btn = self:AddComponent(UIButton,sub_btn_path)
    self.sub_btn:SetOnClick(function ()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Dec)
        self:OnSub()
    end)
    self.input = self:AddComponent(UITMPInput,input_path)
    self.input:SetOnEndEdit(function (value)
        self:IptOnValueChange(value)
    end)
    self.search_txt = self:AddComponent(UITextMeshProUGUIEx,search_txt_path)
    self.level_txt = self:AddComponent(UITextMeshProUGUIEx,level_txt_path)
    self.num_txt = self:AddComponent(UITextMeshProUGUIEx,num_txt_path)
    self.addBtnGray = nil
    self.subBtnGray = nil
    self.minValue = 1
end

local function OnDestroy(self)
    self.search_btn = nil
    self.slider = nil
    self.add_btn = nil
    self.sub_btn = nil
    self.search_txt = nil
    self.des_txt = nil
    self.level_txt = nil
    self.num_txt = nil
    self.minValue = nil
    self.addBtnGray = nil
    self.subBtnGray = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function RefreshData(self,type,posX)
    self.search_txt:SetLocalText(GameDialogDefine.SEARCH)
    self.type = type
    self.maxNum = self.view.ctrl:GetMaxNumBySearchType(self.type)
    local curMaxLevel = self.view.ctrl:GetMaxNumBySearchType(self.type)
    --local configOpenState = LuaEntry.DataConfig:CheckSwitch("detect_monster")
    --if configOpenState then
    --    local k6 = LuaEntry.DataConfig:TryGetNum("search_monster", "k6")
    --    self.minValue = DataCenter.BuildManager.MainLv - k6
    --    if self.minValue < 1 then
            self.minValue = 1
    --    end
    --end
    self:RefreshSlider()
    self:RefreshText()
    self:CheckButtonState()
    if self.type == UISearchType.Monster then
        --self.des_txt:SetLocalText(GameDialogDefine.SEARCH_MONSTER_DES) 
        --self.des_txt:SetActive(true)
        self.level_txt:SetActive(true)
        self.level_txt:SetLocalText(GameDialogDefine.SEARCH_MONSTER_LEVEL, curMaxLevel)
    elseif self.type == UISearchType.Boss then
        --self.des_txt:SetLocalText(GameDialogDefine.SEARCH_MONSTER_DES)
        --self.des_txt:SetActive(true)
        self.level_txt:SetActive(true)
        self.level_txt:SetLocalText(300204, curMaxLevel)
    else
        --self.des_txt:SetActive(false)
        self.level_txt:SetActive(false)
    end
end


local function OnSearchClick(self)
    self.view.ctrl:OnSearchClick(self.type)
end

local function OnAdd(self)
    local curNum = self.view.ctrl:GetCurNumBySearchType(self.type)
    if self:CheckChange(curNum + 1) then
        self.view.ctrl:SetCurNumBySearchType(self.type,curNum + 1)
        self:RefreshSlider(true)
        self:RefreshText()
        self:CheckButtonState()
    end
end
local function OnSub(self)
    local curNum = self.view.ctrl:GetCurNumBySearchType(self.type)
    if self:CheckChange(curNum - 1) then
        self.view.ctrl:SetCurNumBySearchType(self.type,curNum - 1)
        self:RefreshSlider(true)
        self:RefreshText()
        self:CheckButtonState()
    end
end
local function OnValueChange(self,val)
    local cnt = math.floor(val *(self.maxNum - self.minValue) + self.minValue + 0.5)
    if cnt ~= self.view.ctrl:GetCurNumBySearchType(self.type) then
        if self:CheckChange(cnt) then
            self.view.ctrl:SetCurNumBySearchType(self.type,cnt)
            self:RefreshText()
        else
            self:RefreshSlider(true)
        end
        self:CheckButtonState()
    end
end

local function RefreshSlider(self,isClick)
    local curNun = self.view.ctrl:GetCurNumBySearchType(self.type)
    if not isClick and self.type == UISearchType.Monster and not self.view.monsterLevel then
        if curNun ~= self.maxNum then
            curNun = self.maxNum
            self.view.ctrl:SetCurNumBySearchType(self.type,self.maxNum)
        end
    end
    local percent = (curNun - self.minValue) / math.max((self.maxNum - self.minValue),1)
    if curNun == self.minValue and curNun == self.maxNum then
        percent = 1
    end
    self.slider:SetValue(percent)
end

local function CheckChange(self,willNun)
    if willNun >= self.minValue and willNun <= self.maxNum then
        return true
    end
    return false
end

local function IptOnValueChange(self,value)
    local curNum = toInt(value)
    if curNum ~= self.view.ctrl:GetCurNumBySearchType(self.type) then
        if self:CheckChange(curNum) then
            self.view.ctrl:SetCurNumBySearchType(self.type,curNum)
            self:RefreshSlider(true)
            self:RefreshText()
            self:CheckButtonState()
        else
            self:RefreshText()
        end
    end
    
end
local function RefreshText(self)
    self.num_txt:SetLocalText(GameDialogDefine.LEVEL_NUMBER, self.view.ctrl:GetCurNumBySearchType(self.type))
    self.input:SetText(self.view.ctrl:GetCurNumBySearchType(self.type))
end

local function CheckButtonState(self)
    local curNum = self.view.ctrl:GetCurNumBySearchType(self.type)
    if curNum <= self.minValue then
        if self.subBtnGray ~= true then
            self.subBtnGray = true
            self.sub_btn:SetInteractable(false)
        end
    else
        if self.subBtnGray ~= false then
            self.subBtnGray = false
            self.sub_btn:SetInteractable(true)
        end
    end

    if curNum >= self.maxNum then
        if self.addBtnGray ~= true then
            self.addBtnGray = true
            self.add_btn:SetInteractable(false)
        end
    else
        if self.addBtnGray ~= false then
            self.addBtnGray = false
            self.add_btn:SetInteractable(true)
        end
    end
end

WorldSearchItem.OnCreate= OnCreate
WorldSearchItem.OnDestroy = OnDestroy
WorldSearchItem.RefreshData = RefreshData
WorldSearchItem.OnAdd= OnAdd
WorldSearchItem.OnSub = OnSub
WorldSearchItem.OnValueChange= OnValueChange
WorldSearchItem.OnSearchClick= OnSearchClick
WorldSearchItem.RefreshSlider= RefreshSlider
WorldSearchItem.CheckChange= CheckChange
WorldSearchItem.RefreshText= RefreshText
WorldSearchItem.CheckButtonState= CheckButtonState
WorldSearchItem.OnEnable = OnEnable
WorldSearchItem.OnDisable = OnDisable
WorldSearchItem.ResetPosition = ResetPosition
WorldSearchItem.IptOnValueChange =IptOnValueChange
return WorldSearchItem