---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 2020/11/9 14:46
---
local UICommonBuyItemView = BaseClass("UICommonBuyItemView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray

local title_path = "UICommonMiniPopUpTitle/Bg_mid/titleText"
local return_btn_path = "UICommonMiniPopUpTitle/panel"
local close_btn_path = "UICommonMiniPopUpTitle/Bg_mid/CloseBtn"
local tips_txt_path = "DesName"
local btn_1_path = "BtnGo/LeftBtn"
local btn_1_txt_path = "BtnGo/LeftBtn/ImmediatelyBtn/ImmediatelyBtnName"
local btnPrice_1_txt_path = "BtnGo/LeftBtn/ImmediatelyBtn/ImmediatelyValue"
local btn_2_path = "BtnGo/RightBtn"
local btn_2_txt_path = "BtnGo/RightBtn/RightBtnName"
local icon_path = "DesName/UICommonItem"
local item_quality_path = "DesName/UICommonItem/clickBtn/ImgQuality"
local item_icon_path = "DesName/UICommonItem/clickBtn/ItemIcon"
local flag_text_path = "DesName/UICommonItem/clickBtn/FlagGo/FlagText"
local flag_go_path = "DesName/UICommonItem/clickBtn/FlagGo"
local count_text_path = "DesName/UICommonItem/clickBtn/NumText"
local btn_path = "DesName/UICommonItem/clickBtn"
local imgExtra = "DesName/UICommonItem/clickBtn/ImgExtra"

local function OnCreate(self)
    base.OnCreate(self)
    self.title = self:AddComponent(UITextMeshProUGUIEx,title_path)
    self.tips_txt = self:AddComponent(UIText,tips_txt_path)
    self.btn_1 = self:AddComponent(UIButton, btn_1_path)
    self.btn_1_txt = self:AddComponent(UIText,btn_1_txt_path)
    self.btnPrice_1_txt = self:AddComponent(UIText,btnPrice_1_txt_path)
    self.btn_2 = self:AddComponent(UIButton, btn_2_path)
    self.btn_2_txt = self:AddComponent(UIText,btn_2_txt_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.return_btn = self:AddComponent(UIButton, return_btn_path)

    self.icon = self:AddComponent(UIBaseContainer,icon_path)
    self.item_quality = self:AddComponent(UIImage, item_quality_path)
    self.item_icon = self:AddComponent(UIImage, item_icon_path)
    self.flag_text = self:AddComponent(UIText, flag_text_path)
    self.flag_go = self:AddComponent(UIBaseContainer, flag_go_path)
    self.count_text = self:AddComponent(UIText, count_text_path)
    self.imgExtra = self:AddComponent(UIImage,imgExtra)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBtnClick()
    end)
end

local function OnDestroy(self)
    self.titleText =nil
    self.tipText = nil
    self.text1 =nil
    self.text2 =nil
    self.action1 = nil
    self.closeAction = nil
    self.action2 =nil
    self.title = nil
    self.tips_txt = nil
    self.btn_1 = nil
    self.btn_1_txt = nil
    self.btn_2 = nil
    self.btn_2_txt = nil
    self.close_btn = nil
    self.return_btn = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:RefreshData()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function SetData(self,tipText,btnNum,text1,text2,action1,action2,closeAction,titleText,btnPriceTxt,item,noPlayCloseEffect,enableBtn1,enableBtn2)
    self.titleText =titleText
    self.btnNum = btnNum
    self.tipText = tipText
    self.text1 =text1
    self.text2 =text2
    self.action1 = action1
    self.closeAction = closeAction
    self.action2 =action2
    self.btnPriceTxt = btnPriceTxt
    self.OnCloseClick = false
    self.noPlayCloseEffect = noPlayCloseEffect
    self.item = item
    if enableBtn1 ~= nil then
        self.enableBtn1 = enableBtn1
    else
        self.enableBtn1 = true
    end
    if enableBtn2 ~= nil then
        self.enableBtn2 = enableBtn2
    else
        self.enableBtn2 = true
    end
end

local function RefreshData(self)
    if self.titleText~=nil and self.titleText~="" then
        self.title:SetLocalText(self.titleText) 
    else
        self.title:SetLocalText(100378) 
    end
    if self.tipText~=nil and self.tipText~="" then
        self.tips_txt:SetText(self.tipText)
    else
        self.tips_txt:SetText("")
    end

    if self.btnNum~=nil then
        self.btn_1:SetActive(self.btnNum>0)
        self.btn_2:SetActive(self.btnNum>1)
        if self.btnNum > 2  then
            self.btnNum = 2
        end
        --self.btn_1.rectTransform.sizeDelta = Vector2.New(BtnWidth[self.btnNum],self.btn_1.rectTransform.sizeDelta.y)
    else
        self.btn_1:SetActive(false)
        self.btn_2:SetActive(false)
    end
    if self.btn_1:GetActive() then
        if self.action1 then
            self.btn_1:SetOnClick(function ()
                self:OnCloseInTimer()
                self.action1()
            end)
        else
            self.btn_1:SetOnClick(function ()
                self.ctrl:CloseSelf()
            end)
        end
        if self.text1~=nil and self.text1~="" then
            self.btn_1_txt:SetLocalText(self.text1) 
        else
            self.btn_1_txt:SetLocalText(GameDialogDefine.CONFIRM) 
        end
        self.btnPrice_1_txt:SetText(self.btnPriceTxt)
    end
    if self.btn_2:GetActive() then
        if self.action2 then
            self.btn_2:SetOnClick(function ()
                self:OnCloseInTimer()
                self.action2()
            end)
        else
            self.btn_2:SetOnClick(function ()
                self.ctrl:CloseSelf()
            end)
        end
        if self.text2~=nil and self.text2~="" then
            self.btn_2_txt:SetLocalText(self.text2) 
        else
            self.btn_2_txt:SetLocalText(GameDialogDefine.CANCEL) 
        end
    end

    if self.closeAction then
        self.close_btn:SetOnClick(function ()
            self:OnCloseInTimer()
            self.closeAction()
        end)
        self.return_btn:SetOnClick(function ()
            self:OnCloseInTimer()
            self.closeAction()
        end)
    else
        self.close_btn:SetOnClick(function()  
            self.ctrl:CloseSelf()
        end)
        self.return_btn:SetOnClick(function()  
            self.ctrl:CloseSelf()
        end)
    end

    if self.item then
        self.icon:SetActive(true)
        self:RefreshItem()
    else
        self.icon:SetActive(false)
    end
    
    --UIGray.SetGray(self.btn_1.transform, not self.enableBtn1, self.enableBtn1)
    --UIGray.SetGray(self.btn_2.transform, not self.enableBtn2, self.enableBtn2)
end

local function RefreshItem(self)
    self.imgExtra:SetActive(false)
    if self.item.isSimple then
        -- 仅显示图片
        self:SetFlagActive(false)
        self:SetItemIconImage(self.item.iconName)
        self:SetItemQualityImage(DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN))
        self.count_text:SetText("")
    elseif self.item.itemId == nil then
        --联盟道具
        if self.item.iconName ~= nil and self.item.itemColor ~= nil then
            self:SetFlagActive(false)
            self:SetItemIconImage(self.item.iconName)
            self:SetItemQualityImage(DataCenter.ItemTemplateManager:GetToolBgByColor(tonumber(self.item.itemColor)))
            self.count_text:SetText("")
        elseif self.item.heroConfigId ~= nil then
            self:SetFlagActive(false)
            local _heroConfigId = self.item.heroConfigId
            self:SetItemIconImage(HeroUtils.GetHeroIconPath(_heroConfigId, false))
            local rarity = GetTableData(HeroUtils.GetHeroXmlName(), _heroConfigId, "rarity")
            local qualityimg = HeroUtils.GetRarityIconPath(rarity, false)
            self:SetItemQualityImage(qualityimg)
        end
    else
        --物品或英雄
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.item.itemId)
        if goods ~= nil then
            --先判断是英雄碎片还是物品
            local join_method = -1
            local icon_join = nil
            if goods.join_method ~= nil and goods.join_method > 0 and goods.icon_join ~= nil and goods.icon_join ~= "" then
                join_method = goods.join_method
                icon_join = goods.icon_join
            end

            if join_method > 0 and icon_join ~= nil and icon_join ~= "" then
                --英雄
                self:SetFlagActive(false)
                local tempJoin = string.split(icon_join,";")
                if #tempJoin > 1 then
                    self:SetItemQualityImage(tempJoin[2])
                end
                if #tempJoin > 2 then
                    self:SetItemIconImage(tempJoin[3])
                end
            else
                --物品
                self:SetItemQualityImage(DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color))
                if (self.item.count ~= nil) then
                    self:SetCountText(self.item.count)
                else
                    self:SetCountText("")
                end
                local itemType = goods.type
                if itemType == 2 then -- SPD
                    if goods.para1 ~= nil and goods.para1 ~= "" then
                        local para1 = goods.para1
                        local temp = string.split(para1,';')
                        if temp ~= nil and #temp > 1 then
                            self:SetFlagActive(true)
                            self:SetFlagText(temp[1]..temp[2])
                        else
                            self:SetFlagActive(false)
                        end
                    end
                elseif itemType == 3 or itemType == GOODS_TYPE.GOODS_TYPE_91 then -- USE
                    local type2 = goods.type2
                    if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                        local res_num = tonumber(goods.para)
                        self:SetFlagText(string.GetFormattedStr(res_num))
                        self:SetFlagActive(true)
                    else
                        self:SetFlagActive(false)
                    end
                else
                    self:SetFlagActive(false)
                end

                local iconImg = string.format(LoadPath.ItemPath, goods.icon)
                self:SetItemIconImage(iconImg)
            end
        else
            local resourceType = tonumber(self.item.itemId)
            if resourceType < 100 then
                --资源
                self:SetFlagActive(false)
                self:SetItemIconImage(CS.ResourceUtils.GetResourceImagePath(resourceType))
                self:SetItemQualityImage(DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.PURPLE))
                if (self.item.count ~= nil) then
                    self:SetCountText(self.item.count)
                else
                    self:SetCountText("")
                end
            end
        end
    end
end

local function OnBtnClick(self)
    if self.item.itemId ~= nil then
        local param = {}
        param["itemId"] = self.item.itemId
        param["alignObject"] = self.item_icon
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
    elseif self.iconName ~= nil then
        local param = {}
        param["itemName"] = self.item.itemName
        param["itemDesc"] = self.item.itemDes
        param["alignObject"] = self.item_icon
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
    end
end

local function SetItemIconImage(self,imageName)
    self.item_icon:LoadSprite(imageName)
end

local function SetItemQualityImage(self,imageName)
    self.item_quality:LoadSprite(imageName)
end

local function SetFlagActive(self,value)
    if self.flagActive ~= value then
        self.flagActive = value
        self.flag_text.gameObject:SetActive(value)
        if self.flag_go ~= nil then
            self.flag_go:SetActive(value)
        end
    end
end

local function SetFlagText(self,value)
    if self.flagText ~= value then
        self.flagText = value
        self.flag_text:SetText(value)
    end
end

local function SetCountText(self,value)
    self.count_text:SetText(value)
end

local function OnCloseInTimer(self)
    self.OnCloseClick =true
    local closeTimer = TimerManager:GetInstance():GetTimer(0.1, function()
        if self.OnCloseClick and self.ctrl then
            self.ctrl:CloseSelf(self.noPlayCloseEffect)
        end
    end, nil, true, false, false)

    closeTimer:Start()
end

UICommonBuyItemView.OnCreate = OnCreate
UICommonBuyItemView.OnDestroy = OnDestroy
UICommonBuyItemView.OnEnable = OnEnable
UICommonBuyItemView.OnDisable = OnDisable
UICommonBuyItemView.SetData = SetData
UICommonBuyItemView.RefreshData =RefreshData
UICommonBuyItemView.RefreshItem = RefreshItem
UICommonBuyItemView.OnCloseInTimer =OnCloseInTimer
UICommonBuyItemView.SetItemIconImage = SetItemIconImage
UICommonBuyItemView.SetItemQualityImage = SetItemQualityImage
UICommonBuyItemView.SetFlagActive = SetFlagActive
UICommonBuyItemView.SetFlagText = SetFlagText
UICommonBuyItemView.SetCountText = SetCountText
UICommonBuyItemView.OnBtnClick = OnBtnClick
return UICommonBuyItemView