---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/3/22 11:39
---
local WorldSiegeThroneUserCell = BaseClass("WorldSiegeThroneUserCell", UIBaseContainer)
local base = UIBaseContainer

local rankBg_path = ""
local rankTxt_path = "rank"
local rankImg_path = "rank/rankImg"
local name_path = "name"
local num_path = "changeTxtObj/Txt_CollectNum"
local time_path = "changeTxtObj/Txt_CollectTime"
local build_obj_path = "changeTxtObj"
local slider_path = "Slider"
-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self.rankTxtN = self:AddComponent(UITextMeshProUGUIEx, rankTxt_path)
    self.rankImgN = self:AddComponent(UIImage, rankImg_path)
    self.rankBgN = self:AddComponent(UIImage, rankBg_path)
    self.name = self:AddComponent(UITextMeshProUGUIEx, name_path)
    self.build_obj = self:AddComponent(UIAnimator,build_obj_path)
    self.collectNum_txt = self:AddComponent(UITextMeshProUGUIEx,num_path)
    self.collectTime_txt = self:AddComponent(UITextMeshProUGUIEx,time_path)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.timer_action = function(temp)
        self:UpdateTime()
    end
    self.isUpdate = false
    self.startTime = 0
    self.maxNum =0
    self.startNum =0
    self.addSpeed = 0
end

-- 销毁
local function OnDestroy(self)
    if self.score~=nil then
        self.score:SetText(0)
    end
    self:DeleteTimer()
    self.name = nil
    self.score = nil
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
end

-- 隐藏
local function OnDisable(self)
    base.OnDisable(self)
end

-- 全部刷新
local function RefreshData(self,data, rank,serverData,curAllianceId)
    if data~=nil then
        local nameStr = "["..data.alAbbr.."]"--..data.alName
        self.name:SetText(nameStr)
        self.startNum = data.buildPoint
        self.maxNum = LuaEntry.DataConfig:TryGetNum("president_occupation_rate","k2")
        self.addSpeed = LuaEntry.DataConfig:TryGetNum("president_occupation_rate","k1")
        self.isUpdate = false
        self.startTime = 0
        if data.allianceId == curAllianceId then
            if serverData~=nil then
                self.startTime = serverData.battleStartTime
                if self.startTime>0 then
                    self.isUpdate = true
                end
            end
        end
        if self.isUpdate then
            self:AddTimer()
            self.build_obj:Play("txtchangellApha", 0, 0)
        else
            self.build_obj:Play("txtchangellNormalApha", 0, 0)
            self:DeleteTimer()
        end
        self:RefreshScore()
    end

    if rank then
        self.rankTxtN:SetText(rank)
        if rank <= 3 then
            self.rankImgN:SetActive(true)
            self.rankImgN:LoadSprite(string.format("Assets/Main/Sprites/UI/UIAlliance/rank/UIalliance_rankingbg0%s.png", rank))
            self.rankBgN:LoadSprite(string.format("Assets/Main/Sprites/UI/UIAlliance/rank/Common_rankbg%s.png", rank))
        else
            self.rankImgN:SetActive(false)
            self.rankBgN:LoadSprite("Assets/Main/Sprites/UI/Common/New/Common_bg_supp_mini.png")
        end
    end

end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end
local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function UpdateTime(self)
    if self.isUpdate then
        self:RefreshScore()
    end
end

local function RefreshScore(self)
    local totalTime =0
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.startTime>0 then
        totalTime = curTime - self.startTime
    end
    if totalTime<0 then
        totalTime = 0
    end
    local realNum = math.min((self.startNum+((totalTime*self.addSpeed)/1000)),math.max(self.maxNum,1))
    local percent = math.min((realNum/math.max(self.maxNum,1)),1)
    if self.startTime>0 then
        local needTime = (math.max((self.maxNum-self.startNum),1)*1000/self.addSpeed)+self.startTime- curTime
        self.collectTime_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(math.floor(needTime)))
    else
        self.collectTime_txt:SetText(string.GetFormattedPercentStrSpecial(percent))
    end

    self.collectNum_txt:SetText(string.GetFormattedPercentStrSpecial(percent))
    self.slider:SetValue(percent)
end
WorldSiegeThroneUserCell.OnCreate = OnCreate
WorldSiegeThroneUserCell.OnDestroy = OnDestroy
WorldSiegeThroneUserCell.OnEnable = OnEnable
WorldSiegeThroneUserCell.OnDisable = OnDisable
WorldSiegeThroneUserCell.RefreshData = RefreshData
WorldSiegeThroneUserCell.RefreshScore = RefreshScore
WorldSiegeThroneUserCell.UpdateTime = UpdateTime
WorldSiegeThroneUserCell.DeleteTimer = DeleteTimer
WorldSiegeThroneUserCell.AddTimer = AddTimer
return WorldSiegeThroneUserCell