---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/4/29 19:08
---

local UIBuildOpenFireLightPanel = BaseClass("UIBuildOpenFireLightPanel", UIBaseContainer)
local base = UIBaseContainer

local top_desc_path = "TopDesc"
local light_desc_path = "LightBg/LightDesc"
local range_path = "LightBg/Range%s"
local range_on_text_path = "LightBg/RangeOnText%s"
local range_off_text_path = "LightBg/RangeOffText%s"
local fire_path = "LightBg/Fire"
local status_desc_path = "LightBg/StatusDesc"
local status_path = "LightBg/StatusBg/Status"
local consume_desc_path = "ConsumeBg/ConsumeDesc"
local consume_icon_path = "ConsumeBg/ConsumeIcon"
local consume_path = "ConsumeBg/Consume"
local operate_desc_path = "OperateBg/OperateDesc"
local open_desc_path = "OperateBg/OpenDesc"
local open_path = "OperateBg/Open"
local open_on_path = "OperateBg/Open/OpenOn"
local open_off_path = "OperateBg/Open/OpenOff"
local boost_desc_path = "OperateBg/BoostDesc"
local boost_path = "OperateBg/Boost"
local boost_on_path = "OperateBg/Boost/BoostOn"
local boost_off_path = "OperateBg/Boost/BoostOff"

local RangeCount = 4
local RangeRadius = { 5, 10, 15, 20 }

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.top_desc_text = self:AddComponent(UITextMeshProUGUIEx, top_desc_path)
    self.top_desc_text:SetLocalText(450142)
    self.light_desc_text = self:AddComponent(UITextMeshProUGUIEx, light_desc_path)
    self.light_desc_text:SetLocalText(450143)
    self.range_goes = {}
    self.range_on_texts = {}
    self.range_off_texts = {}
    for i = 1, RangeCount do
        self.range_goes[i] = self:AddComponent(UIBaseContainer, string.format(range_path, i))
        self.range_on_texts[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(range_on_text_path, i))
        self.range_off_texts[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(range_off_text_path, i))
    end
    self.fire_go = self:AddComponent(UIBaseContainer, fire_path)
    self.status_desc_text = self:AddComponent(UITextMeshProUGUIEx, status_desc_path)
    self.status_desc_text:SetLocalText(450144)
    self.status_text = self:AddComponent(UITextMeshProUGUIEx, status_path)
    self.consume_desc_text = self:AddComponent(UITextMeshProUGUIEx, consume_desc_path)
    self.consume_desc_text:SetLocalText(450147)
    self.consume_icon_image = self:AddComponent(UIImage, consume_icon_path)
    self.consume_text = self:AddComponent(UITextMeshProUGUIEx, consume_path)
    self.operate_desc_text = self:AddComponent(UITextMeshProUGUIEx, operate_desc_path)
    self.operate_desc_text:SetLocalText(450149)
    self.open_desc_text = self:AddComponent(UITextMeshProUGUIEx, open_desc_path)
    self.open_desc_text:SetLocalText(450150)
    self.open_btn = self:AddComponent(UIButton, open_path)
    self.open_btn:SetOnClick(function()
        self:OnOpenClick()
    end)
    self.open_on_go = self:AddComponent(UIBaseContainer, open_on_path)
    self.open_off_go = self:AddComponent(UIBaseContainer, open_off_path)
    self.boost_desc_text = self:AddComponent(UITextMeshProUGUIEx, boost_desc_path)
    self.boost_desc_text:SetLocalText(450151)
    self.boost_btn = self:AddComponent(UIButton, boost_path)
    self.boost_btn:SetOnClick(function()
        self:OnBoostClick()
    end)
    self.boost_on_go = self:AddComponent(UIBaseContainer, boost_on_path)
    self.boost_off_go = self:AddComponent(UIBaseContainer, boost_off_path)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    
end

local function DataDestroy(self)

end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.VitaFireStateChange, self.Refresh)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.VitaFireStateChange, self.Refresh)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    
end

local function Refresh(self)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    local template = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildData.itemId, buildData.level)
    local strs = string.split(template.para7, "|")
    local openSpls = string.split(strs[1], ";")
    local openResType = tonumber(openSpls[1])
    local openCount = tonumber(openSpls[2]) * 60
    local boostSpls = string.split(strs[2], ";")
    local boostResType = tonumber(boostSpls[1])
    local boostCount = tonumber(boostSpls[2]) * 60
    local resType, count, showRange
    local state = DataCenter.VitaManager:GetFurnaceState()
    if state == VitaDefines.FurnaceState.Open then
        resType = openResType
        count = openCount
        showRange = true
        self.status_text:SetLocalText(450145)
        self.open_on_go:SetActive(true)
        self.open_off_go:SetActive(false)
        self.boost_on_go:SetActive(false)
        self.boost_off_go:SetActive(true)
    elseif state == VitaDefines.FurnaceState.OpenWithBooster then
        resType = boostResType
        count = boostCount
        showRange = true
        self.status_text:SetLocalText(450146)
        self.open_on_go:SetActive(true)
        self.open_off_go:SetActive(false)
        self.boost_on_go:SetActive(true)
        self.boost_off_go:SetActive(false)
    elseif state == VitaDefines.FurnaceState.Close then
        resType = openResType
        count = 0
        showRange = false
        self.status_text:SetLocalText(100178)
        self.open_on_go:SetActive(false)
        self.open_off_go:SetActive(true)
        self.boost_on_go:SetActive(false)
        self.boost_off_go:SetActive(true)
    elseif state == VitaDefines.FurnaceState.CloseWithBooster then
        resType = openResType
        count = 0
        showRange = false
        self.status_text:SetLocalText(100178)
        self.open_on_go:SetActive(false)
        self.open_off_go:SetActive(true)
        self.boost_on_go:SetActive(true)
        self.boost_off_go:SetActive(false)
    end
    self.fire_go:SetActive(showRange)
    self.consume_icon_image:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(resType))
    self.consume_text:SetText(count .. "/M")
    
    local radius = DataCenter.CityResidentManager:GetSafeRadius()
    local index = 0
    for i = 1, RangeCount do
        index = i
        if radius < RangeRadius[i] then
            break
        end
    end
    for i = 1, RangeCount do
        if showRange and index == i then
            self.range_goes[i]:SetActive(true)
            self.range_on_texts[i]:SetActive(true)
            self.range_off_texts[i]:SetActive(false)
        else
            self.range_goes[i]:SetActive(false)
            self.range_on_texts[i]:SetActive(false)
            self.range_off_texts[i]:SetActive(true)
        end
    end
end

local function OnOpenClick(self)
    local state = DataCenter.VitaManager:GetFurnaceState()
    local toState
    if state == VitaDefines.FurnaceState.Open then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Fire_Close)
        toState = VitaDefines.FurnaceState.Close
    elseif state == VitaDefines.FurnaceState.OpenWithBooster then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Fire_Close)
        toState = VitaDefines.FurnaceState.CloseWithBooster
    elseif state == VitaDefines.FurnaceState.Close then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Fire_Open)
        toState = VitaDefines.FurnaceState.Open
    elseif state == VitaDefines.FurnaceState.CloseWithBooster then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Fire_Open)
        toState = VitaDefines.FurnaceState.OpenWithBooster
    end
    if toState then
        DataCenter.VitaManager:SendSetFurnaceState(toState)
    end
end

local function OnBoostClick(self)
    local state = DataCenter.VitaManager:GetFurnaceState()
    local toState
    if state == VitaDefines.FurnaceState.Open then
        toState = VitaDefines.FurnaceState.OpenWithBooster
    elseif state == VitaDefines.FurnaceState.OpenWithBooster then
        toState = VitaDefines.FurnaceState.Open
    elseif state == VitaDefines.FurnaceState.Close then
        toState = VitaDefines.FurnaceState.CloseWithBooster
    elseif state == VitaDefines.FurnaceState.CloseWithBooster then
        toState = VitaDefines.FurnaceState.Close
    end
    if toState then
        DataCenter.VitaManager:SendSetFurnaceState(toState)
    end
end

UIBuildOpenFireLightPanel.OnCreate = OnCreate
UIBuildOpenFireLightPanel.OnDestroy = OnDestroy
UIBuildOpenFireLightPanel.OnEnable = OnEnable
UIBuildOpenFireLightPanel.OnDisable = OnDisable
UIBuildOpenFireLightPanel.ComponentDefine = ComponentDefine
UIBuildOpenFireLightPanel.ComponentDestroy = ComponentDestroy
UIBuildOpenFireLightPanel.DataDefine = DataDefine
UIBuildOpenFireLightPanel.DataDestroy = DataDestroy
UIBuildOpenFireLightPanel.OnAddListener = OnAddListener
UIBuildOpenFireLightPanel.OnRemoveListener = OnRemoveListener

UIBuildOpenFireLightPanel.ReInit = ReInit
UIBuildOpenFireLightPanel.Refresh = Refresh
UIBuildOpenFireLightPanel.OnOpenClick = OnOpenClick
UIBuildOpenFireLightPanel.OnBoostClick = OnBoostClick

return UIBuildOpenFireLightPanel