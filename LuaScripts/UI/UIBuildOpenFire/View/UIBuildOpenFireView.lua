---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/4/29 20:24
---

local UIBuildOpenFire = BaseClass("UIBuildOpenFire", UIBaseView)
local base = UIBaseView

local UIBuildOpenFireHeroPanel = require "UI.UIBuildOpenFire.Component.UIBuildOpenFireHeroPanel"
local UIBuildOpenFireLightPanel = require "UI.UIBuildOpenFire.Component.UIBuildOpenFireLightPanel"
local UICommonTab = require "UI.UICommonTab.UICommonTab"
local Localization = CS.GameEntry.Localization

local this_path = ""
local panel_path = "Panel"
local title_path = "BG/TitlePart/title"
local level_path = "BG/TitlePart/title/level"
local upgrade_path = "BG/TitlePart/upgrade"
local upgrade_text_path = "BG/TitlePart/upgrade/btnText"
local hero_panel_path = "BG/HeroPanel"
local light_panel_path = "BG/LightPanel"
local tab1_path = "BG/TabList/Tab1"
local tab2_path = "BG/TabList/Tab2"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
    
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    DataCenter.BuildManager.showSafe = true
    DataCenter.BuildEffectManager:CheckShowEffect(buildData.uuid)
end

local function OnDisable(self)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    DataCenter.BuildManager.showSafe = false
    DataCenter.BuildEffectManager:CheckShowEffect(buildData.uuid)
    
    self:QuitCamera()
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.anim = self:AddComponent(UIAnimator, this_path)
    self.panel_btn = self:AddComponent(UIButton, panel_path)
    self.panel_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.level_text = self:AddComponent(UITextMeshProUGUIEx, level_path)
    self.upgrade_btn = self:AddComponent(UIButton, upgrade_path)
    self.upgrade_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnUpgradeClick()
    end)
    self.upgrade_text = self:AddComponent(UITextMeshProUGUIEx, upgrade_text_path)
    self.upgrade_text:SetLocalText(161002)
    self.hero_panel = self:AddComponent(UIBuildOpenFireHeroPanel, hero_panel_path)
    self.light_panel = self:AddComponent(UIBuildOpenFireLightPanel, light_panel_path)
    self.tab1 = self:AddComponent(UICommonTab, tab1_path)
    self.tab1:SetName(Localization:GetString("450143"))
    self.tab1:SetSelected(false)
    self.tab1:SetOnClick(function()
        self:OnTab1Click()
    end)
    self.tab2 = self:AddComponent(UICommonTab, tab2_path)
    self.tab2:SetName(Localization:GetString("450141"))
    self.tab2:SetSelected(false)
    self.tab2:SetOnClick(function()
        self:OnTab2Click()
    end)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    self.animTimer = nil
    self.playSound = false
end

local function DataDestroy(self)
    if self.animTimer then
        self.animTimer:Stop()
        self.animTimer = nil
    end
    self.playSound = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MainLvUp, self.OnMainLvUp)
    self:AddUIListener(EventId.VitaFireStateChange, self.OnFireStateChange)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.MainLvUp, self.OnMainLvUp)
    self:RemoveUIListener(EventId.VitaFireStateChange, self.OnFireStateChange)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.param = self:GetUserData() or {}
    self:Refresh()
    self:CheckShowArrow()
    self:OnTab1Click()
    self:MoveCamera()
    self:PlayAnim()
end

local function Refresh(self)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    local template = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildData.itemId, buildData.level)
    self.title_text:SetLocalText(template.name)
    self.level_text:SetLocalText(GameDialogDefine.LEVEL_NUMBER, buildData.level)
end

local function PlayAnim(self)
    self.animTimer = TimerManager:GetInstance():DelayInvoke(function()
        self.anim:Play(UIBuildAnimName.Enter, 0, 0)
    end, BuildAutoMoveEnterTime)
end

local function MoveCamera(self)
    DataCenter.FurnitureManager:SetEnterPanelCameraParam()
    local template = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(BuildingTypes.FUN_BUILD_MAIN)
    local pos = template:GetPosition()
    local radius = DataCenter.CityResidentManager:GetSafeRadius()
    local zoom = radius * 6 + 2 -- 大概舒服的数
    local offsetZ = radius * -1 -- 大概舒服的数
    local offsetX = offsetZ * math.tan(-10 * math.pi / 180) -- 相机有 -10 度旋转
    local camParam = DataCenter.FurnitureManager:GetCameraParamByTiles(pos, -1.5, zoom)
    if camParam ~= nil then
        pos.x = pos.x + offsetX
        pos.z = pos.z + offsetZ
        CS.SceneManager.World:SetCameraMinHeight(camParam.zoom)
        GoToUtil.GotoCityPos(pos, camParam.zoom, camParam.time)
    end
end

local function QuitCamera(self)
    self.anim:Play(UIBuildAnimName.Hide, 0, 0)
    local enterParam = DataCenter.FurnitureManager:GetEnterPanelCameraParam()
    if enterParam.zoom ~= nil and (not enterParam.noQuit) then
        if CS.SceneManager.World ~= nil then
            DataCenter.CityCameraManager:UpdateCamera()--恢复正常限制
            if enterParam.pos == nil then
                CS.SceneManager.World:AutoZoom(enterParam.zoom, enterParam.time)
            else
                GoToUtil.GotoCityPos(enterParam.pos, enterParam.zoom, enterParam.time)
            end
        end
        DataCenter.FurnitureManager:ClearEnterPanelCameraParam()
    end
end

local function CheckShowArrow(self)
    if self.param.arrowUpgrade then
        local param = {}
        param.position = self.upgrade_btn:GetPosition()
        param.positionType = PositionType.Screen
        param.isPanel = true
        param.isAutoClose = 3
        DataCenter.ArrowManager:ShowArrow(param)
    end
end

local function OnTab1Click(self)
    self:PlaySound()
    self.tab1:SetSelected(true)
    self.tab2:SetSelected(false)
    self.hero_panel:SetActive(false)
    self.light_panel:SetActive(true)
    self.light_panel:Refresh()
end

local function OnTab2Click(self)
    self:PlaySound()
    self.tab1:SetSelected(false)
    self.tab2:SetSelected(true)
    self.hero_panel:SetActive(true)
    self.hero_panel:Refresh()
    self.light_panel:SetActive(false)
end

local function PlaySound(self)
    if self.playSound then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_common_switch)
    else
        self.playSound = true
    end
end

local function OnUpgradeClick(self)
    GoToUtil.GotoOpenBuildCreateWindow(UIWindowNames.UIBuildCreate, NormalPanelAnim, { buildId = BuildingTypes.FUN_BUILD_MAIN, noMoveCamera = true, arrowUpgrade = self.param.arrowUpgrade })
end

local function OnMainLvUp(self)
    self:Refresh()
end

local function OnFireStateChange(self)
    self:MoveCamera()
end

UIBuildOpenFire.OnCreate = OnCreate
UIBuildOpenFire.OnDestroy = OnDestroy
UIBuildOpenFire.OnEnable = OnEnable
UIBuildOpenFire.OnDisable = OnDisable
UIBuildOpenFire.ComponentDefine = ComponentDefine
UIBuildOpenFire.ComponentDestroy = ComponentDestroy
UIBuildOpenFire.DataDefine = DataDefine
UIBuildOpenFire.DataDestroy = DataDestroy
UIBuildOpenFire.OnAddListener = OnAddListener
UIBuildOpenFire.OnRemoveListener = OnRemoveListener

UIBuildOpenFire.ReInit = ReInit
UIBuildOpenFire.Refresh = Refresh
UIBuildOpenFire.PlayAnim = PlayAnim
UIBuildOpenFire.MoveCamera = MoveCamera
UIBuildOpenFire.QuitCamera = QuitCamera
UIBuildOpenFire.CheckShowArrow = CheckShowArrow

UIBuildOpenFire.OnTab1Click = OnTab1Click
UIBuildOpenFire.OnTab2Click = OnTab2Click
UIBuildOpenFire.OnUpgradeClick = OnUpgradeClick
UIBuildOpenFire.PlaySound = PlaySound

UIBuildOpenFire.OnMainLvUp = OnMainLvUp
UIBuildOpenFire.OnFireStateChange = OnFireStateChange

return UIBuildOpenFire