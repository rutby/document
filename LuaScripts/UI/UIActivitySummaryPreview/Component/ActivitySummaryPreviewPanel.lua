---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/12/2 17:45
---ActivitySummaryPreviewPanel.lua


local base = UIBaseView--Variable
local UIActivitySummaryPreviewView = BaseClass("UIActivitySummaryPreviewView", base)--Variable
local Localization = CS.GameEntry.Localization

local title_path = "Top/title"
local closeBtn_path = "BtnClose"
local remainTimeTxt_path = "Top/actTimeBg/actTime"
local remainTime_path = "Top/remainTime"
local infoBtn_path = "Top/infoBtn"
local activityNotice_path = "activityNotice"
local activityReward_path = "activityNotice/reward"
local activityNoticeRewardTxt_path = "activityNotice/tip"

local RewardStatus = {
    Locked = 1,
    CanClaim = 2,
    Claimed = 3,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DelCountDownTimer()
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateThemeActNoticeRewardInfo, self.RefreshAll)
end


local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateThemeActNoticeRewardInfo, self.RefreshAll)
    base.OnRemoveListener(self)
end
local function ComponentDefine(self)
    self.titleN = self:AddComponent(UIText, title_path)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        self:OnClickCloseBtn()
    end)
    self.remainTimeTxtN = self:AddComponent(UIText, remainTimeTxt_path)
    self.remainTimeTxtN:SetText(Localization:GetString("372114"))
    self.remainTimeN = self:AddComponent(UIText, remainTime_path)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)

    self.activityNoticeN = self:AddComponent(UIBaseContainer, activityNotice_path)
    self.activityNoticeRewardTxtN = self:AddComponent(UIText, activityNoticeRewardTxt_path)
    self.activityNoticeRewardTxtN:SetText(Localization:GetString("372364"))
    self.noticeRewardTbN = {}
    for i = 1, 3 do
        local tempPath = activityReward_path .. i
        local tempReward = self:AddComponent(UIBaseContainer, tempPath)
        local rewardTb = {}
        rewardTb.iconN = tempReward:AddComponent(UIImage, "box")
        rewardTb.descN = tempReward:AddComponent(UIText, "desc")
        rewardTb.redN = tempReward:AddComponent(UIBaseContainer, "red")
        rewardTb.btnN = tempReward:AddComponent(UIButton, "btn")
        rewardTb.btnN:SetOnClick(function()
            self:OnClickNoticeReward(i)
        end)
        rewardTb.recvedN = tempReward:AddComponent(UIBaseContainer, "receive")
        local recvedTxtN = tempReward:AddComponent(UIText, "receive/receiveTxt")
        recvedTxtN:SetLocalText(170003)
        rewardTb.rewardState = nil
        table.insert(self.noticeRewardTbN, rewardTb)
    end
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.closeBtnN = nil
    self.remainTimeN = nil
    self.activityItemsTbN = nil
    self.infoBtnN = nil
    self.resIconN = nil
    self.resCountN = nil
end

local function DataDefine(self)
    self.activityInfo = nil
    self.activityStatus = nil
    self.endTime = nil
    self.isShowPackPanel = false
end

local function DataDestroy(self)
    self.activityInfo = nil
    self.activityStatus = nil
    self.endTime = nil
    self.isShowPackPanel = nil
end

local function ShowPanel(self, actInfo)
    self.activityInfo = actInfo

    self:RefreshAll()
end

local function RefreshAll(self)
    self.titleN:SetText(Localization:GetString(self.activityInfo.name))

    self.endTime = self.activityInfo.startTime

    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime < self.endTime then
        self:AddCountDownTimer()
        self:RefreshRemainTime()
    else
        self:DelCountDownTimer()
    end

    self:ShowActivityNotice()
end

local function ShowActivityNotice(self)
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local noticeStartTime = self.activityInfo.noticeStartTime
    local unlockDays = math.ceil((serverTime - noticeStartTime) / (OneDayTime * 1000))
    for i, v in ipairs(self.noticeRewardTbN) do
        if i <= unlockDays then
            local isClaimed, isPreviewInfoReady = self:CheckIfNoticeRewardClaimed(i)
            if isClaimed then
                v.rewardState = RewardStatus.Claimed
                v.descN:SetText("")--Localization:GetString("170003"))
                v.recvedN:SetActive(true)
                v.redN:SetActive(false)
                v.iconN:LoadSprite("Assets/Main/Sprites/UI/UIActivitySummary/UIActivitySummaryPreview_icon_box" .. i .. "h")
            else
                v.rewardState = RewardStatus.CanClaim
                v.descN:SetText(isPreviewInfoReady and Localization:GetString("100447") or "")
                v.recvedN:SetActive(false)
                v.redN:SetActive(isPreviewInfoReady)
                v.iconN:LoadSprite("Assets/Main/Sprites/UI/UIActivitySummary/UIActivitySummaryPreview_icon_box" .. i)
            end
        else
            v.rewardState = RewardStatus.Locked
            local needDays = i - unlockDays
            v.descN:SetText(Localization:GetString("372365", needDays))
            v.recvedN:SetActive(false)
            v.redN:SetActive(false)
            v.iconN:LoadSprite("Assets/Main/Sprites/UI/UIActivitySummary/UIActivitySummaryPreview_icon_box" .. i)
        end
    end
end

local function CheckIfNoticeRewardClaimed(self, day)
    local noticeRewardInfo, dataIsReady = DataCenter.ThemeActivityManager:GetNoticeRewardInfo(self.activityInfo.id)
    if (not noticeRewardInfo) or (not noticeRewardInfo[day]) then
        return false, dataIsReady
    else
        return noticeRewardInfo[day].state ~= 0, true
    end
end

local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime >= 0 then
        self.remainTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self:DelCountDownTimer()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivitySummary,{ anim = true}, self.activityInfo.type)
        self.view.ctrl:CloseSelf()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end


local function OnClickInfoBtn(self)
    UIUtil.ShowIntro(Localization:GetString(tostring(self.activityInfo.name)), Localization:GetString("100239"), Localization:GetString(tostring(self.activityInfo.story)))
end

local function OnClickNoticeReward(self, day)
    local item = self.noticeRewardTbN[day]
    if item.rewardState == RewardStatus.CanClaim then
        DataCenter.ThemeActivityManager:RequestClaimNoticeReward(self.activityInfo.id, day)
    else
        if item.rewardState == RewardStatus.Locked then
            UIUtil.ShowTips(item.descN:GetText())
        else
            UIUtil.ShowTipsId(170003)
        end
        local noticeRewardInfo = DataCenter.ThemeActivityManager:GetNoticeRewardInfo(self.activityInfo.id)
        if noticeRewardInfo and noticeRewardInfo[day] then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivitySummaryReward,{ anim = true}, noticeRewardInfo[day].reward, item.iconN)
        end
    end
end

local function OnClickCloseBtn(self)
    self.view.ctrl:CloseSelf()
end


UIActivitySummaryPreviewView.OnCreate = OnCreate
UIActivitySummaryPreviewView.OnDestroy = OnDestroy
UIActivitySummaryPreviewView.OnAddListener = OnAddListener
UIActivitySummaryPreviewView.OnRemoveListener = OnRemoveListener
UIActivitySummaryPreviewView.ComponentDefine = ComponentDefine
UIActivitySummaryPreviewView.ComponentDestroy = ComponentDestroy
UIActivitySummaryPreviewView.DataDefine = DataDefine
UIActivitySummaryPreviewView.DataDestroy = DataDestroy

UIActivitySummaryPreviewView.ShowPanel = ShowPanel
UIActivitySummaryPreviewView.RefreshAll = RefreshAll
UIActivitySummaryPreviewView.ShowActivityNotice = ShowActivityNotice
UIActivitySummaryPreviewView.AddCountDownTimer = AddCountDownTimer
UIActivitySummaryPreviewView.RefreshRemainTime = RefreshRemainTime
UIActivitySummaryPreviewView.CheckIfNoticeRewardClaimed = CheckIfNoticeRewardClaimed
UIActivitySummaryPreviewView.DelCountDownTimer = DelCountDownTimer
UIActivitySummaryPreviewView.OnClickCloseBtn = OnClickCloseBtn
UIActivitySummaryPreviewView.OnClickNoticeReward = OnClickNoticeReward
UIActivitySummaryPreviewView.OnClickInfoBtn = OnClickInfoBtn

return UIActivitySummaryPreviewView