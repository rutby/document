---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/23 15:53
---

local UIMasteryExpTip = BaseClass("UIMasteryExpTip", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local name_path = "Bg/Name"
local num_path = "Bg/Num"
local slider_path = "Bg/Slider"
local add_path = "Bg/Slider/Add"

local DURATION = 1.5
local DURATION_MIN = 0.3
local CLOSE_DELAY = 2

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
    self:ReInit()
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.name_text = self:AddComponent(UIText, name_path)
    self.num_text = self:AddComponent(UIText, num_path)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.add_text = self:AddComponent(UIText, add_path)
end

local function ComponentDestroy(self)
    self.name_text = nil
    self.num_text = nil
    self.slider = nil
    self.add_text = nil
end

local function DataDefine(self)
    self.seq = nil
    self.curLevel = 0
    self.curExp = 0
    self.toLevel = 0
    self.toExp = 0
    self.duration = 1
    self.active = false
end

local function DataDestroy(self)
    if self.seq then
        self.seq:Kill()
        self.seq = nil
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MasteryExpUpdate, self.MasteryExpUpdateSignal)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MasteryExpUpdate, self.MasteryExpUpdateSignal)
end

local function ReInit(self)
    local param = self:GetUserData()
    self:SetAddExp(param.addExp)
    self:SetCurLevelAndExp(param.curLevel, param.curExp)
    self:SetToLevelAndExp(param.toLevel, param.toExp)
end

local function SetAddExp(self, addExp)
    if not self.active then
        return
    end
    self.add_text:SetText("+" .. string.GetFormattedSeperatorNum(addExp))
end

local function SetCurLevelAndExp(self, curLevel, curExp)
    if not self.active then
        return
    end
    self.curLevel = curLevel
    self.curExp = toInt(curExp)
    self.name_text:SetText(Localization:GetString("110722") .. " Lv." .. curLevel)
    local maxExp = DataCenter.MasteryManager:GetLevelMaxExp(self.curLevel)
    self.num_text:SetText(string.GetFormattedSeperatorNum(self.curExp) .. "/" .. string.GetFormattedSeperatorNum(maxExp))
    self.slider:SetValue(self.curExp / maxExp)
end

local function SetToLevelAndExp(self, toLevel, toExp)
    if not self.active then
        return
    end
    self.toLevel = toLevel
    self.toExp = toExp
    self.duration = math.max(DURATION / (self.toLevel - self.curLevel + 1), DURATION_MIN)
    self:Play()
end

local function Play(self)
    if not self.active then
        return
    end
    if self.seq then
        self.seq:Kill()
    end
    local function Setter(exp)
        self:SetCurLevelAndExp(self.curLevel, exp)
    end
    local maxExp = DataCenter.MasteryManager:GetLevelMaxExp(self.curLevel)
    if self.curLevel < self.toLevel then
        self.seq = DOTween.Sequence()
        :Append(DOTween.To(Setter, self.curExp, maxExp, self.duration):SetEase(CS.DG.Tweening.Ease.Linear))
        :OnComplete(function()
            self.seq = nil
            self.curLevel = self.curLevel + 1
            self.curExp = 0
            self:Play()
        end)
    elseif self.curLevel == self.toLevel then
        self.seq = DOTween.Sequence()
        :Append(DOTween.To(Setter, self.curExp, self.toExp, self.duration))
        :AppendInterval(CLOSE_DELAY)
        :OnComplete(function()
            self.seq = nil
            self.ctrl:CloseSelf()
        end)
    else
        self:SetCurLevelAndExp(self.toLevel, self.toExp)
    end
end

function UIMasteryExpTip:MasteryExpUpdateSignal(param)
    if param ~= nil then
        self:SetAddExp(param.addExp)
        self:SetToLevelAndExp(param.toLevel, param.toExp)
    end
end

UIMasteryExpTip.OnCreate = OnCreate
UIMasteryExpTip.OnDestroy = OnDestroy
UIMasteryExpTip.OnEnable = OnEnable
UIMasteryExpTip.OnDisable = OnDisable
UIMasteryExpTip.ComponentDefine = ComponentDefine
UIMasteryExpTip.ComponentDestroy = ComponentDestroy
UIMasteryExpTip.DataDefine = DataDefine
UIMasteryExpTip.DataDestroy = DataDestroy
UIMasteryExpTip.OnAddListener = OnAddListener
UIMasteryExpTip.OnRemoveListener = OnRemoveListener

UIMasteryExpTip.ReInit = ReInit
UIMasteryExpTip.SetAddExp = SetAddExp
UIMasteryExpTip.SetCurLevelAndExp = SetCurLevelAndExp
UIMasteryExpTip.SetToLevelAndExp = SetToLevelAndExp
UIMasteryExpTip.Play = Play

return UIMasteryExpTip