---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 8/12/21 9:47 PM
---


local UISettingAccount = BaseClass("UISettingAccount",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local SDKManager = CS.SDKManager
local Setting = CS.GameEntry.Setting

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.textTitle      = self:AddComponent(UITextMeshProUGUIEx, 'UICommonMidPopUpTitle/bg_mid/titleText')
    self.btnClose  = self:AddComponent(UIButton,  'UICommonMidPopUpTitle/bg_mid/CloseBtn')
    self.goback_btn  = self:AddComponent(UIButton,  'UICommonMidPopUpTitle/Btn_GoBack')
    self.panelCloseBtn = self:AddComponent(UIButton,"UICommonMidPopUpTitle/panel")

    self.nodeUnBind     = self:AddComponent(UIBaseContainer, 'Root/NodeStateUnBind')
    self.nodeBind       = self:AddComponent(UIBaseContainer, 'Root/NodeStateBind')
    
    --unbind---
    self.textTip1       = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateUnBind/ImgNpcDialog/TextTip1')
    self.rewardList = {}
    for i = 1, 2 do
        self.rewardList[i] = {}
        local icon = self:AddComponent(UIImage,"Root/NodeStateUnBind/ImgNpcDialog/Rect_Reward/Rect_Reward"..i)
        local txt = self:AddComponent(UITextMeshProUGUIEx,"Root/NodeStateUnBind/ImgNpcDialog/Rect_Reward/Rect_Reward"..i.."/TextReward"..i)
        self.rewardList[i].icon = icon
        self.rewardList[i].txt = txt
    end
    self.textUnBindTip2 = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateUnBind/TextUnBindTip2')
    self.textBottomTip1 = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateUnBind/NodeBottomTip/TextBottomTip1')
    self.textBottomTip2 = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateUnBind/NodeBottomTip/TextBottomTip2')
    self.textBtnBind    = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateUnBind/BtnBind/TextBind')
    self.btnBind        = self:AddComponent(UIButton, 'Root/NodeStateUnBind/BtnBind')
    self.btnHere        = self:AddComponent(UIButton, 'Root/NodeStateUnBind/NodeBottomTip/TextBottomTip2/BtnHere')
    self.nodeBottomTip  = self:AddComponent(UIButton, 'Root/NodeStateUnBind/NodeBottomTip')

    --bind--
    self.textAccountTitle  = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextAccountTitle')
    self.textMailTitle     = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextMailTitle')
    self.textMailValue     = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextMailTitle/TextMailValue')
    self.textNameTitle     = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextNameTitle')
    self.textNameValue     = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextNameTitle/TextNameValue')
    self.textIdTitle       = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextIdTitle')
    self.textIdValue       = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextIdTitle/TextIdValue')
    self.textAllianceTitle = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextAllianceTitle')
    self.textAllianceValue = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/TextAllianceTitle/TextAllianceValue')
    self.textBtnSwitch     = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/layout/BtnSwitch/TextSwitch')
    self.btnSwitch         = self:AddComponent(UIButton, 'Root/NodeStateBind/layout/BtnSwitch')
    self.textRole    = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeStateBind/layout/BtnRole/TextRole')
    self.btnRole        = self:AddComponent(UIButton, 'Root/NodeStateBind/layout/BtnRole')
    self._modify_txt       = self:AddComponent(UITextMeshProUGUIEx,"Root/NodeStateBind/Img_Modify/Txt_Modify")
    self._modify_btn       = self:AddComponent(UIButton,"Root/NodeStateBind/Img_Modify/Btn_Modify")
    self._modify_obj = self:AddComponent(UIBaseContainer,"Root/NodeStateBind/Img_Modify")
    self.textTitle:SetLocalText(280039) 
    self.textTip1:SetLocalText(280043)
    self.textUnBindTip2:SetLocalText(280158) 
    self.textBottomTip1:SetLocalText(280055) 
    self.textBottomTip2:SetLocalText(208178) 
    self.textBtnBind:SetLocalText(280041)
    self._modify_txt:SetLocalText(208264)
    --self._modify_txt:SetLocalText(280142)
    self.textRole:SetLocalText(208225)
    self.textAccountTitle:SetLocalText(208185) 
    self.textMailTitle:SetLocalText(208189) 
    self.textNameTitle:SetLocalText(208186) 
    self.textIdTitle:SetLocalText(208187) 
    self.textAllianceTitle:SetLocalText(208188) 
    self.textBtnSwitch:SetLocalText(280050) 
    
    self.btnClose:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))
    self.panelCloseBtn:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))
    self.goback_btn:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))
    self.btnBind:SetOnClick(BindCallback(self, self.OnBtnBindClick))
    self.btnSwitch:SetOnClick(BindCallback(self, self.OnBtnSwitchClick))
    self.btnHere:SetOnClick(BindCallback(self, self.OnBtnHereClick))
    self._modify_btn:SetOnClick(BindCallback(self, self.OnClickReset))
    self.btnRole:SetOnClick(BindCallback(self, self.OnClickRole))

    local isOpen = LuaEntry.DataConfig:CheckSwitch("device_login_white_list")
    self._modify_obj:SetActive(isOpen)
    
    self.panelBg = self:AddComponent(UIBaseContainer, "UICommonMidPopUpTitle/bg_mid")

    self.playerHead = self:AddComponent(UIPlayerHead, "Root/NodeStateBind/UIPlayerHead/HeadIcon")
    local uid = LuaEntry.Player:GetUid()
    local picVer = LuaEntry.Player.picVer
    local pic = LuaEntry.Player:GetPic()
    self.playerHead:SetData(uid, pic, picVer)
end

local function ComponentDestroy(self)
end

local function OnBtnBindClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UICreateAccount,{ anim = true, isBlur = true })
end

local function OnBtnSwitchClick(self)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIAccountList, { anim = true, back = { ui = UIWindowNames.UISettingAccount, anim = false }})
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAddAccount,{anim = true,isBlur = true},280050)
end

local function OnBtnHereClick(self)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIAccountList, { anim = true, back = { ui = UIWindowNames.UISettingAccount, anim = false }})
    UIUtil.ShowMessage(Localization:GetString("208218"),2,nil,nil, function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAddAccount,{anim = true,isBlur = true},110008)
    end)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:RefreshView()
    self:RefreshReward()
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.nodeBottomTip.rectTransform)
end

local function RefreshView(self)
    local state = DataCenter.AccountManager:GetAccountBindState()
    
    self.nodeUnBind:SetActive(state ~= AccountBandState.Band)
    self.nodeBind:SetActive(state == AccountBandState.Band)

    local size = {}
    size.x = self.panelBg.rectTransform.sizeDelta.x
    if state == AccountBandState.Band then
        size.y = 774
    else
        size.y = 594
    end
    self.panelBg.rectTransform:Set_sizeDelta(size.x, size.y)
    
    if state == AccountBandState.Band then
        local mail = Setting:GetString(SettingKeys.GAME_ACCOUNT, '')

        local allianceName = Localization:GetString('140042')
        if LuaEntry.Player:IsInAlliance() then
            local allianceData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
            allianceName = '[' .. allianceData.abbr ..']' .. allianceData.allianceName
        end

        self.textMailValue:SetText(mail)
        self.textNameValue:SetText(LuaEntry.Player.name)
        self.textIdValue:SetText(LuaEntry.Player:GetUid())
        self.textAllianceValue:SetText(allianceName)
        local configOpenState = LuaEntry.DataConfig:CheckSwitch("account_switch")
        self.btnRole:SetActive(configOpenState)
    end

    local isArrow = self:GetUserData()
    if isArrow then
        local param = {}
        param.position = self.btnBind.transform.position
        param.arrowType = ArrowType.Capacity
        param.positionType = PositionType.Screen
        DataCenter.ArrowManager:ShowArrow(param)
    end
end

local function RefreshReward(self)
    local reward = DataCenter.AccountManager:GetBindAccountReward()
    if next(reward) then
        for i = 1, #reward do
            if reward[i].type == RewardType.GOLD then
                self.rewardList[i].icon:LoadSprite(DataCenter.RewardManager:GetPicByType(reward[i].type))
                self.rewardList[i].txt:SetText(reward[i].value)
            else
                self.rewardList[i].icon:LoadSprite(DataCenter.RewardManager:GetPicByType(reward[i].type, reward[i].value.id))
                self.rewardList[i].txt:SetText(reward[i].value.num)
            end
        end
    end
end

--修改密码
local function OnClickModify(self)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIModifyPassword)
end
local function OnClickReset(self)
    local mail = Setting:GetString(SettingKeys.GAME_ACCOUNT, '')
    UIUtil.ShowMessage(Localization:GetString("208265"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
        SFSNetwork.SendMessage(MsgDefines.AccountDeleteVerifyDevice,0)
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIMailVerify,mail,1)
    end)
end

local function OnClickRole(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIRoles,{ anim = true },0)
end
local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.AccountBindEvent, self.RefreshView)
    self:AddUIListener(EventId.AccountBindOKEvent, self.RefreshView)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.AccountBindEvent, self.RefreshView)
    self:RemoveUIListener(EventId.AccountBindOKEvent, self.RefreshView)

    base.OnRemoveListener(self)
end



UISettingAccount.OnCreate= OnCreate
UISettingAccount.OnDestroy = OnDestroy
UISettingAccount.ComponentDefine = ComponentDefine
UISettingAccount.ComponentDestroy = ComponentDestroy

UISettingAccount.RefreshView = RefreshView
UISettingAccount.OnEnable = OnEnable
UISettingAccount.OnAddListener = OnAddListener
UISettingAccount.OnRemoveListener = OnRemoveListener

UISettingAccount.OnBtnBindClick = OnBtnBindClick
UISettingAccount.OnBtnSwitchClick = OnBtnSwitchClick
UISettingAccount.OnBtnHereClick = OnBtnHereClick
UISettingAccount.OnClickModify = OnClickModify

UISettingAccount.RefreshReward = RefreshReward
UISettingAccount.OnClickRole =OnClickRole
UISettingAccount.OnClickReset = OnClickReset
return UISettingAccount