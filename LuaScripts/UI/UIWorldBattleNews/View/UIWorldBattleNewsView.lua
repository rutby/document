---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/3/28 14:50
---
local WorldBattleNewsCell = require "UI.UIWorldBattleNews.Component.WorldBattleNewsCell"
local UIWorldBattleNewsView = BaseClass("UIWorldBattleNewsView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local txt_title_path ="UICommonPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonPopUpTitle/panel"
local toggle1_path = "Tab/Toggle1"
local toggle2_path = "Tab/Toggle2"
local scroll_path = "ScrollView"
local empty_txt_path = "TxtEmpty"
local function OnCreate(self)
    base.OnCreate(self)
    DataCenter.WorldNewsDataManager:SendRequest()
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.txt_title:SetLocalText(302146)

    self.toggle1 = self:AddComponent(UIToggle, toggle1_path)
    self.toggle1:SetIsOn(true)
    self.toggle1.choose = self.toggle1:AddComponent(UIBaseContainer, "Choose")
    self.toggle1.redPoint = self.toggle1:AddComponent(UIBaseContainer, "ImgWarn")
    self.toggle1.unselectName = self.toggle1:AddComponent(UIText, "unselectName")
    self.toggle1.selectName = self.toggle1:AddComponent(UIText, "Choose/selectName")
    self.toggle1.unselectName:SetLocalText(302610)
    self.toggle1.selectName:SetLocalText(302610)
    self.toggle2 = self:AddComponent(UIToggle, toggle2_path)
    self.toggle2:SetIsOn(false)
    self.toggle2.choose = self.toggle2:AddComponent(UIBaseContainer, "Choose")
    self.toggle2.redPoint = self.toggle2:AddComponent(UIBaseContainer, "ImgWarn")
    self.toggle2.unselectName = self.toggle2:AddComponent(UIText, "unselectName")
    self.toggle2.selectName = self.toggle2:AddComponent(UIText, "Choose/selectName")
    self.toggle2.unselectName:SetLocalText(131005)
    self.toggle2.selectName:SetLocalText(131005)
    self.toggle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)

    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.ScrollView = self:AddComponent(UIScrollView, scroll_path)
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.showDatalist ={}
    self.empty_txt = self:AddComponent(UIText, empty_txt_path)
end

local function OnDestroy(self)
    self.txt_title = nil
    self.toggle1 = nil
    self.toggle2 = nil
    self.close_btn = nil
    self.return_btn = nil
    base.OnDestroy(self)
end

local function ToggleControlBorS(self)
    self.toggle1.choose:SetActive(self.toggle1:GetIsOn())
    self.toggle2.choose:SetActive(self.toggle2:GetIsOn())
    self.toggle2:SetActive(false)
    self:RefreshList()
end

local function OnEnable(self)
    base.OnEnable(self)
    self:CheckShow()
    self:RefreshAreaNewsRedDot()
    self:RefreshAlCityNewsRedDot()
end

local function OnDisable(self)
    base.OnDisable(self)
end


local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateWorldNewsData, self.CheckShow)
    self:AddUIListener(EventId.WorldAreaNewsRedDot, self.RefreshAreaNewsRedDot)
    self:AddUIListener(EventId.WorldAlCityNewsRedDot, self.RefreshAlCityNewsRedDot)
    
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateWorldNewsData,self.CheckShow)
    self:RemoveUIListener(EventId.WorldAreaNewsRedDot, self.RefreshAreaNewsRedDot)
    self:RemoveUIListener(EventId.WorldAlCityNewsRedDot, self.RefreshAlCityNewsRedDot)
end

local function CheckShow(self)
    local leftShow = self.ctrl:GetNewsInfoList()
    local rightShow = self.ctrl:GetAreaInfoList()
    if #leftShow<=0 and #rightShow>0 then
        self.toggle2:SetIsOn(true)
    else
        self.toggle1:SetIsOn(true)
    end
    self:ToggleControlBorS()
end
local function RefreshList(self)
    self:ClearScroll()
    if self.toggle1:GetIsOn() == true then
        self.showDatalist = self.ctrl:GetNewsInfoList()
        self.toggle1.selectName:SetActive(true)
        self.toggle1.unselectName:SetActive(false)
        self.toggle2.selectName:SetActive(false)
        self.toggle2.unselectName:SetActive(true)
    elseif self.toggle2:GetIsOn() == true then
        self.showDatalist = self.ctrl:GetAreaInfoList()
        self.toggle2.selectName:SetActive(true)
        self.toggle2.unselectName:SetActive(false)
        self.toggle1.selectName:SetActive(false)
        self.toggle1.unselectName:SetActive(true)
    end
    if #self.showDatalist > 0 then
        self.ScrollView:SetTotalCount(#self.showDatalist)
        self.ScrollView:RefillCells()
        self.empty_txt:SetActive(false)
    else
        if self.toggle1:GetIsOn() == true then
            self.empty_txt:SetLocalText(302155)
        elseif self.toggle2:GetIsOn() == true then
            self.empty_txt:SetLocalText(302154)
        end
        self.empty_txt:SetActive(true)
    end
end

local function RefreshAreaNewsRedDot(self)
    if DataCenter.WorldNewsDataManager:CheckShowAreaNews() then
        self.toggle2.redPoint:SetActive(true)
    else
        self.toggle2.redPoint:SetActive(false)
    end
end
local function RefreshAlCityNewsRedDot(self)
    if DataCenter.WorldNewsDataManager:CheckShowAlCityNews() then
        self.toggle1.redPoint:SetActive(true)
    else
        self.toggle1.redPoint:SetActive(false)
    end
end

local function ClearScroll(self)
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(WorldBattleNewsCell)
    self.showDatalist = {}
end

local function OnItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(WorldBattleNewsCell, itemObj)
    cellItem:SetItemShow(self.showDatalist[index])
end

local function OnItemMoveOut(self, itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name, WorldBattleNewsCell)
end
UIWorldBattleNewsView.OnCreate= OnCreate
UIWorldBattleNewsView.OnDestroy = OnDestroy
UIWorldBattleNewsView.ToggleControlBorS = ToggleControlBorS
UIWorldBattleNewsView.OnEnable = OnEnable
UIWorldBattleNewsView.OnDisable = OnDisable
UIWorldBattleNewsView.OnAddListener = OnAddListener
UIWorldBattleNewsView.OnRemoveListener = OnRemoveListener
UIWorldBattleNewsView.RefreshList = RefreshList
UIWorldBattleNewsView.ClearScroll = ClearScroll
UIWorldBattleNewsView.OnItemMoveIn = OnItemMoveIn
UIWorldBattleNewsView.OnItemMoveOut = OnItemMoveOut
UIWorldBattleNewsView.RefreshAreaNewsRedDot = RefreshAreaNewsRedDot
UIWorldBattleNewsView.RefreshAlCityNewsRedDot = RefreshAlCityNewsRedDot
UIWorldBattleNewsView.CheckShow= CheckShow
return UIWorldBattleNewsView