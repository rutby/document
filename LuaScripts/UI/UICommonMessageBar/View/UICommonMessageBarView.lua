---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/11/9 17:29
---
local UICommonMessageBarView = BaseClass("UICommonMessageBarView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local CommonMessageBarItem = require "UI.UICommonMessageBar.View.CommonMessageBarItem"

local closeBtn_path = "Panel"
local messageItem_path = "Panel/msgItem"

local timeBeforeFadeOut = 0.6

local function OnCreate(self)
    base.OnCreate(self)
    
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    self.messageItems = {}
    for i = 1, 2 do
        local tempItem = self:AddComponent(CommonMessageBarItem, messageItem_path .. i)
        table.insert(self.messageItems, tempItem)
    end

    self.isReady = true
    self.displayTime = 0
    self.displayingIndex = 0
    self.isCreate = true
    self:TryDisplayNext()
end

local function OnDestroy(self)
    if self.messageItems~=nil then
        for i, v in ipairs(self.messageItems) do
            v:ResetItem()
        end
    end
    self.closeBtnN = nil
    self.messageItems = nil
    self.isCreate = true

    self:DeleteTimer()
    
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end


--新提示
--playerHead = {uid = "", pic = "", picVer = ""}
local function AddNewMsg(self, newMsg, showTime)
    if not self.msgQueue then
        self.msgQueue = {}
    end
    --这里处理一下如果是相同的就不添加
    local last = self.msgQueue[#self.msgQueue]
    if last ~= nil then
        if last.msg == newMsg.msg and last.msgId == newMsg.msgId and last.playerHead == newMsg.playerHead 
                and last.heroHead == newMsg.heroHead then
            return
        end
    end
    
    if showTime~=nil then
        self.showEndTime = showTime
    else
        self.showEndTime = 2
    end
    table.insert(self.msgQueue, newMsg)
    if self.isCreate then
        self:TryDisplayNext()
    end
end

--新提示
local function AddNewMsg_Msg(self, msg,showTime, playerHead,heroHead, canCover)
    local newMsg = {
        msg = msg,
        playerHead = playerHead,
        heroHead = heroHead,
        canCover = canCover,
    }
    self:AddNewMsg(newMsg, showTime)
end

local function AddNewMsg_MsgId(self, msgId,showTime, playerHead,heroHead, canCover)
    local newMsg = {
        msgId = msgId,
        playerHead = playerHead,
        heroHead = heroHead,
        canCover = canCover,
    }
    self:AddNewMsg(newMsg, showTime)
end


local function TryDisplayNext(self)
    self:AddTimer()
    local next = self.msgQueue[1]
    if self.isReady or (next ~= nil and next.canCover) then
        if next ~= nil then
            local freeItem, freeIndex = self:GetOneFreeItem()
            local nextMsg = self:GetNextMsg()
            freeItem:ResetItem()
            freeItem:FadeIn(nextMsg)
            self.displayTime = 0

            local displayingItem = self:GetDisplayingItem()
            if displayingItem then
                displayingItem:FadeOut()
            end
            self.displayingIndex = freeIndex 
            self.isReady = false
            self.timer:Reset()
        else
            if self.displayTime >= self.showEndTime then
                self.ctrl:CloseSelf()
            end
        end
    end
end

local function GetNextMsg(self)
    return table.remove(self.msgQueue, 1)
end

local function TimerAction(self)
    if self.displayTime == nil then
        return
    end
    self.isReady = true
    self.displayTime = self.displayTime + timeBeforeFadeOut
    self:TryDisplayNext()
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

--临时只有两个，可扩展支持同时显示多个
local function GetOneFreeItem(self)
    if self.displayingIndex ~= 1 then
        return self.messageItems[1], 1
    else
        return self.messageItems[2], 2
    end
end

local function GetDisplayingItem(self)
    if self.displayingIndex ~= 0 then
        return self.messageItems[self.displayingIndex]
    else
        return nil
    end
end

function UICommonMessageBarView:AddTimer()
    if not self.timer then
        self.timer = TimerManager:GetInstance():GetTimer(timeBeforeFadeOut, self.TimerAction , self, false,false,false)
        self.timer:Start()
    end
end


UICommonMessageBarView.OnCreate = OnCreate
UICommonMessageBarView.OnDestroy = OnDestroy
UICommonMessageBarView.OnEnable = OnEnable
UICommonMessageBarView.OnDisable = OnDisable
UICommonMessageBarView.AddNewMsg =AddNewMsg
UICommonMessageBarView.AddNewMsg_Msg =AddNewMsg_Msg
UICommonMessageBarView.AddNewMsg_MsgId =AddNewMsg_MsgId
UICommonMessageBarView.TryDisplayNext =TryDisplayNext
UICommonMessageBarView.DeleteTimer =DeleteTimer
UICommonMessageBarView.GetNextMsg =GetNextMsg
UICommonMessageBarView.TimerAction =TimerAction
UICommonMessageBarView.GetOneFreeItem =GetOneFreeItem
UICommonMessageBarView.GetDisplayingItem =GetDisplayingItem
return UICommonMessageBarView