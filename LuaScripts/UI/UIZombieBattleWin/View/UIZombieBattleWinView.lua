---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by w.
--- DateTime: 2022/11/30 13:00
---

local UIZombieBattleWinView = BaseClass("UIZombieBattleWinView",UIBaseView)
local base = UIBaseView
local Time = Time
local Localization = CS.GameEntry.Localization
local Resource = CS.GameEntry.Resource
local UICommonResItem = require "UI.UICommonResItem.UICommonResItem"
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"
local LayoutLayer = 'Layout/'
local monopolySbattleDelayTime = 5
local sBattleText = "(%s)"

local UIStatisticList = require("UI.UIZombieBattleLose.Component.UIZombieBattleStatisticHeroList")


function UIZombieBattleWinView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:Show()
end

function UIZombieBattleWinView:OnDestroy()
    if not IsNull(self.tabTween) then
        self.tabTween:Kill()
        self.tabTween = nil
    end
    if self.showRewardAnimCo then 
        self.showRewardAnimCo = nil
    end
    if self.reqs ~= nil then
        for _, v in pairs(self.reqs) do
            v:Destroy()
        end
        self.reqs = nil 
    end
    if self.timerTask then
        self.timerTask:Stop()
        self.timerTask = nil
    end
    base.OnDestroy(self)
end

function UIZombieBattleWinView:ComponentDefine()
    -- self.bg = self:AddComponent(UIImage,'Image')
    -- self.bg:SetAlpha(0)

    self.backBtn = self:AddComponent(UIButton, LayoutLayer.."BackBtn")
    self.backBtn:SetOnClick(function()
        self:OnBackBtnClick()
    end)
    self.timerTask = TimerManager:GetInstance():GetTimer(1,function ()
        self:SBattleTimeFunc()
    end ,self, false,false,false)

    self.layout = self:AddComponent(UIBaseContainer, LayoutLayer)
    self.canvasGroup = self.transform:Find(LayoutLayer).gameObject:GetComponent(typeof(CS.UnityEngine.CanvasGroup))
    self.canvasGroup.alpha = 0
    -- self.layout:SetActive(false)

    self.victoryText = self:AddComponent(UIText,LayoutLayer.."Title/VictoryGo/VictoryText")
    self.victoryText:SetText(Localization:GetString("311105"));
    self.levelText = self:AddComponent(UIText,LayoutLayer.."LevelText")
    self.timeText = self:AddComponent(UIText,LayoutLayer.."TimeText")
    self.killNumText = self:AddComponent(UIText,LayoutLayer.."KillNumText")
    --大富翁自动战斗
    self.isSbattle = DataCenter.MonopolyManager:GetSpontaneousBattle()
    self.sBattleToogle = self:AddComponent(UIToggle,"Layout/backToggle")
    self.sBattleToogle:SetIsOn(self.isSbattle)
    self.sBattleToogle:SetOnValueChanged(function(value)
        self:OnToggerChangeFunc(value)
    end)
    -- 小凡说推图关卡不会投放奖励了  ===========
    -- -- reward
    -- self.rewardContent = self.transform:Find(LayoutLayer.."RewardBg").gameObject
    -- self.rewardTitle1 = self:AddComponent(UIText,LayoutLayer.."RewardBg/RewardTitle1")
    -- self.rewardGrid1 = self:AddComponent(UIBaseContainer,LayoutLayer.."RewardBg/RewardGrid1")
    -- -- reward hero
    -- self.HeroRewardContent = self.transform:Find(LayoutLayer.."HeroRewardBg").gameObject
    -- self.HeroRewardTitle1 = self:AddComponent(UIText,LayoutLayer.."HeroRewardBg/RewardTitle2")
    -- self.HeroRewardGrid1 = self:AddComponent(UIBaseContainer,LayoutLayer.."HeroRewardBg/RewardGrid2")
    -- -- reward worker
    -- self.WorkerRewardContent = self.transform:Find(LayoutLayer.."WorkerRewardBg").gameObject
    -- self.WorkerRewardTitle1 = self:AddComponent(UIText,LayoutLayer.."WorkerRewardBg/RewardTitle3")
    -- self.WorkerRewardGrid1 = self:AddComponent(UIBaseContainer,LayoutLayer.."WorkerRewardBg/RewardGrid3")
    -- =======================================
    self.backBtnTimerRoot = self:AddComponent(UIBaseContainer,"Layout/BackBtn/timerRoot")
    self.backBtnTimerText = self:AddComponent(UIText,"Layout/BackBtn/timerRoot/timer")
    self.backBtnTimerTitle = self:AddComponent(UIText,"Layout/BackBtn/timerRoot/title")
    self.backBtnText = self:AddComponent(UIText,LayoutLayer.."BackBtn/BackBtnText")

    local param,battleManagerParam = self:GetUserData()
    local stageId = param.stageId
    self.stageTemp = LocalController:instance():getLine(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage), stageId)
    self.battleManagerParam = battleManagerParam
    self.backBtnText:SetActive(true)
    self.sBattleToogle:SetActive(false)
    self.backBtnText:SetText(Localization:GetString("800306"))
    self.levelText:SetText(Localization:GetString("800313",GetTableData(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage), stageId,'order')))

    
    -- 小凡说推图关卡不会投放奖励了  ===========
    -- self.rewardTitle1:SetText(Localization:GetString("800305"))
    -- self.HeroRewardTitle1:SetLocalText(800324)--(Localization:GetString("800305"))
    -- self.WorkerRewardTitle1:SetLocalText(800325)--(Localization:GetString("800305"))

    -- self.showSeq = {
    --     self.levelText,
    --     self.killNumText,
    --     self.timeText,
    --     self.rewardContent,
    --     self.HeroRewardContent,
    --     self.WorkerRewardContent,
    --     self.backBtn
    -- }
    -- for _, c in ipairs(self.showSeq) do
    --     c:SetActive(false)
    --     c.transform:Set_localScale(0,0,0)
    -- end

    -- if DataCenter.StageManager.reward and  DataCenter.StageManager.rewardStageId == stageId then
    --     self:OnGetReward(DataCenter.StageManager.reward)
    -- end 
    -- self:ShowRewardAnim()
    -- =======================================

    self.tabBtns = {
        self:AddComponent(UIButton, "Layout/Tabs/MakeBtn"),
        self:AddComponent(UIButton, "Layout/Tabs/TakeBtn"),
    }
    for i, tabBtn in ipairs(self.tabBtns) do
        local idx = i
        tabBtn:SetOnClick(function()
            self:OnTabBtnClick(idx)
        end)
    end
    
    self.tabComps = {
        self:AddComponent(UIStatisticList, "Layout/MakeDmgScroll", "makeDmg"),
        self:AddComponent(UIStatisticList, "Layout/TakeDmgScroll", "takeDmg"),
    }
    self.tabIdx = 1

    self.highlightMask = self:AddComponent(UIBaseContainer, "Layout/Tabs/Highlight/Mask")
    self.highlightInner = self:AddComponent(UIBaseContainer, "Layout/Tabs/Highlight/Mask/Inner")
    self.highlightMask:SetAnchoredPositionXY(0, -1)
    self.highlightInner:SetAnchoredPositionXY(0, 0)

    self.transform:Find("Layout/Tabs/MakeBtn/BtnText"):GetComponent(typeof(CS.NewText)).text = CS.GameEntry.Localization:GetString(800800)
    self.transform:Find("Layout/Tabs/Highlight/Mask/Inner/MakeBtnHigh/BtnText"):GetComponent(typeof(CS.NewText)).text = CS.GameEntry.Localization:GetString(800800)
    self.transform:Find("Layout/Tabs/TakeBtn/BtnText"):GetComponent(typeof(CS.NewText)).text = CS.GameEntry.Localization:GetString(800801)
    self.transform:Find("Layout/Tabs/Highlight/Mask/Inner/TakeBtnHigh/BtnText"):GetComponent(typeof(CS.NewText)).text = CS.GameEntry.Localization:GetString(800801)
end

function UIZombieBattleWinView:SBattleTimeFunc()
    if not self.time then
        self.timerTask:Pause()
    end
    self.time = self.time - 1
    if not IsNull(self.backBtnTimerText) then
        self.backBtnTimerText:SetText(string.format(sBattleText,self.time))
    end
    if self.time == 0 then
        self:OnBackBtnClick()
        if self.timerTask then
            self.timerTask:Pause()
        end
    end
end

function UIZombieBattleWinView:Show()
    DataCenter.LWSoundManager:PlaySound(10024)
    TimerManager:GetInstance():DelayInvoke(function()
        if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UIZombieBattleWin) then
            self.canvasGroup:DOFade(1,0.2)
            self:RefreshView()
        end
    end,1.5)
end

function UIZombieBattleWinView:OnToggerChangeFunc(value)
    if self.isSbattle ~= value then
        self.isSbattle = value
        DataCenter.MonopolyManager:SetSpontaneousBattle(value)
    end
    if self.isSbattle then
        self.time = monopolySbattleDelayTime
        self.backBtnTimerText:SetText(string.format(sBattleText,self.time))
        self.backBtnText:SetActive(false)
        self.backBtnTimerRoot:SetActive(true)
        self.timerTask:Start()
    else
        self.backBtnText:SetActive(true)
        self.backBtnTimerRoot:SetActive(false)
        if self.timerTask then
            self.timerTask:Pause()
        end
    end
end

function UIZombieBattleWinView:OnTabBtnClick(idx)
    if self.tabIdx == idx then
        return
    end

    self.tabIdx = idx
    self:RefreshView()
    
    if not IsNull(self.tabTween) then
        self.tabTween:Kill()
        self.tabTween = nil
    end
    self.tabTween = CS.DG.Tweening.DOTween.To(function()
        return self.highlightMask:GetAnchoredPositionX()
    end, function(value)
        self.highlightMask:SetAnchoredPositionXY(value, -1)
        self.highlightInner:SetAnchoredPositionXY(-value, 0)
    end, (self.tabIdx - 1) * 334, 0.5):SetEase(CS.DG.Tweening.Ease.OutQuint)
end

function UIZombieBattleWinView:DataDefine()
    self.flyRewardList = {}
    self.heroId = nil
end

function UIZombieBattleWinView:OnAddListener()
    base.OnAddListener(self)
    -- 小凡说推图关卡不会投放奖励了
    -- self:AddUIListener(EventId.LWBattleReward, self.OnGetReward)
    self:AddUIListener(EventId.OnKeyCodeEscape, self.OnKeyCodeEscape)
end
function UIZombieBattleWinView:OnRemoveListener()
    -- 小凡说推图关卡不会投放奖励了
    -- self:RemoveUIListener(EventId.LWBattleReward, self.OnGetReward)
    self:RemoveUIListener(EventId.OnKeyCodeEscape, self.OnKeyCodeEscape)

    base.OnRemoveListener(self)
end

function UIZombieBattleWinView:OnKeyCodeEscape()
    TimerManager:GetInstance():DelayFrameInvoke(function()
        self:OnBackBtnClick()
    end, 1)
end
function UIZombieBattleWinView:ComponentDestroy()
    self.back_btn = nil
end

function UIZombieBattleWinView:RefreshView()
    -- local time = Time.time - DataCenter.ZombieBattleManager.startTime
    -- self.killNumText:SetText( Localization:GetString("800303") .. DataCenter.ZombieBattleManager.killNum)
    -- self.timeText:SetText( Localization:GetString("800304")..UITimeManager:GetInstance():SecondToFmtStringWithoutHour(time))

    for i, tabComp in ipairs(self.tabComps) do
        if i == self.tabIdx then
            tabComp:SetActive(true)
            tabComp:RefreshView()
            tabComp:FadeIn()
        else
            tabComp:SetActive(false)
        end
    end
end


function UIZombieBattleWinView:OnBackBtnClick()
    local cfg = {}
    for i,v in ipairs(self.flyRewardList) do cfg[i] = {v[1].position, v[2]} end
    EventManager:GetInstance():Broadcast(EventId.UIMainFlyReward,cfg)
    self.ctrl:CloseSelf()
    DataCenter.ZombieBattleManager:Exit()
end

-- 小凡说推图关卡不会投放奖励了 =====================
-- function UIZombieBattleWinView:OnGetReward(param)
--     -- local param = require "UI.UIZombieBattleWin.FakeParam"
--     param = DataCenter.RewardManager:ReturnRewardParamForMessage(param)
--     if self.reqs ~= nil then
--         for _, v in pairs(self.reqs) do
--             v:Destroy()
--         end
--     end

--     -- 预处理显示数据
--     self.rewardCells = {}
--     self.workersCells = {}
--     self.herosCells = {}
    
--     -- 展示动画
--     self.reqs = {}
--     self.flyRewardList = {}

--     local index = 0
--     for _, v in pairs(param) do
--         local req = nil
--         local p = v
--         if p.rewardType == RewardType.HERO then
--             req = Resource:InstantiateAsync(UIAssets.UIHeroCellSmall)
--         else
--             req = Resource:InstantiateAsync(UIAssets.UICommonResItem)
--         end

--         index = index + 1
--         local name = index
--         req:completed('+', function(req)
--             local go = req.gameObject
--             go.name = name
--             if p.rewardType == RewardType.HERO then
--                 go.transform:SetParent(self.HeroRewardGrid1.transform)
--                 table.insert(self.herosCells,go)
--                 self.heroId = p.heroUuid
--             elseif p.rewardType == RewardType.WORKER then
--                 go.transform:SetParent(self.WorkerRewardGrid1.transform)
--                 go.transform:Set_sizeDelta(112,112)
--                 table.insert(self.workersCells,go)
--             else
--                 go.transform:SetParent(self.rewardGrid1.transform)
--                 go.transform:Set_sizeDelta(112,112)
--                 table.insert(self.rewardCells,go)
--             end
--             go.transform:Set_localScale(0, 0, 0)
--             local cell = nil
--             if p.rewardType == RewardType.HERO then  -- 估计以后得统一api
--                 cell = self:AddComponent(UIHeroCellSmall,go)
--                 cell:SetData(p.heroUuid)
--             else
--                 cell = self:AddComponent(UICommonResItem,go)
--                 cell:ReInit(p)
--             end
--             cell.gameObject:SetActive(false)
--             table.insert(self.flyRewardList,{go.transform,p})
--         end)
--         table.insert(self.reqs,req)
--     end

--     DataCenter.StageManager.reward = nil
--     DataCenter.StageManager.rewardStageId = nil
-- end

-- function UIZombieBattleWinView:ShowRewardAnim()
--     local delay = 0.1
--     local scaledelay = 0.2
--     local finalScale = 1
--     local finalScale2 = 1
--     self.showRewardAnimCo = coroutine.start(function ()
--         coroutine.waitforseconds(1.5)
--         self.layout:SetActive(true)
--         self.bg.unity_image:DOFade(224/255,0.3)
--         coroutine.waitforseconds(1)
--         for i = 1, #self.showSeq-4 do
--             coroutine.waitforseconds(delay)
--             self.showSeq[i]:SetActive(true)
--             self.showSeq[i].transform:DOScale(finalScale,scaledelay):SetEase(CS.DG.Tweening.Ease.OutBack)
--         end
--         coroutine.waitforseconds(delay)
--         for i, cells in ipairs({self.rewardCells,self.herosCells,self.workersCells}) do
--             if #cells>0 then 
--                 -- coroutine.start(
--                 --     function ()
--                 self.showSeq[#self.showSeq-(4-i)]:SetActive(true)
--                 self.showSeq[#self.showSeq-(4-i)].transform:DOScale(finalScale,scaledelay):SetEase(CS.DG.Tweening.Ease.OutBack)
--                 for i = 1, #cells do
--                     coroutine.waitforseconds(delay)
--                     cells[i]:SetActive(true)

--                     cells[i].transform:DOScale(finalScale2,scaledelay):SetEase(CS.DG.Tweening.Ease.OutBack)
--                 end
--                 --     end
--                 -- )
--             end
--             coroutine.waitforseconds(delay)
--         end
--         if self.heroId then
--             -- UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroDetailPanel,{anim=false}, self.heroId,{self.heroId},nil,true)
--             if DataCenter.HeroDataManager:NeedShowNewHeroWindow(self.heroId) then
--                 UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroExhibitPanel,{anim=false}, self.heroId,{self.heroId},nil,true)
--             end
--         end
--         self.showSeq[#self.showSeq]:SetActive(true)

--     end )

-- end
-- ================================================================

return UIZombieBattleWinView
