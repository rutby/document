---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2021/11/4 21:03
---

local UICommonUseItemTipView = BaseClass("UICommonUseItemTipView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray
local Resource = CS.GameEntry.Resource
local UICommonItem = require "UI.UICommonItem.UICommonItem"

local title_path = "UICommonMidPopUpTitle/bg_mid/titleText"
local close_path = "UICommonMidPopUpTitle/bg_mid/CloseBtn"
local return_path = "UICommonMidPopUpTitle/panel"
local top_desc_path = "List/TopDesc"
local bottom_desc_path = "List/BottomDesc"
local content_path = "List/Content"
local cancel_btn_path = "CancelBtn"
local cancel_text_path = "CancelBtn/CancelText"
local confirm_btn_path = "ConfirmBtn"
local confirm_text_path = "ConfirmBtn/ConfirmText"

local ITEM_SIZE = 100
local ITEM_SCALE = 0.67

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ClearItems()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self:OnClose()
    end)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function()
        self:OnClose()
    end)
    self.top_desc_text = self:AddComponent(UIText, top_desc_path)
    self.bottom_desc_text = self:AddComponent(UIText, bottom_desc_path)
    self.content_go = self:AddComponent(UIBaseContainer, content_path)
    self.cancel_btn = self:AddComponent(UIButton, cancel_btn_path)
    self.cancel_btn:SetOnClick(function()
        self:OnCancel()
    end)
    self.cancel_text = self:AddComponent(UIText, cancel_text_path)
    self.cancel_text:SetLocalText(110106)
    self.confirm_btn = self:AddComponent(UIButton, confirm_btn_path)
    self.confirm_btn:SetOnClick(function()
        self:OnConfirm()
    end)
    self.confirm_text = self:AddComponent(UIText, confirm_text_path)
end

local function ComponentDestroy(self)
    self.title_text = nil
    self.close_btn = nil
    self.return_btn = nil
    self.top_desc_text = nil
    self.bottom_desc_text = nil
    self.content_go = nil
    self.cancel_btn = nil
    self.cancel_text = nil
    self.confirm_btn = nil
    self.confirm_text = nil
end

local function DataDefine(self)
    --self.onConfirm = nil
    --self.onCancel = nil
    self.timer = nil
    self.reqs = {}
end

local function DataDestroy(self)
    self.onConfirm = nil
    self.onCancel = nil
    if self.timer then
        self.timer:Stop()
    end
    self.timer = nil
    self.reqs = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self:Refresh()
end

local function OnDisable(self)
    if self.showExtraResource then
        EventManager:GetInstance():Broadcast(EventId.HideMainUIExtraResource, UIWindowNames.UICommonUseItemTip)
    end
    base.OnDisable(self)
end

local function SetData(self, param)
    self.title = param.title or ""
    self.topDesc = param.topDesc or ""
    self.bottomDesc = param.bottomDesc or ""
    self.dataList = param.dataList or {}
    self.confirmStr = param.confirmStr or ""
    self.cancelStr = param.cancelStr or ""
    self.onConfirm = param.onConfirm
    self.onCancel = param.onCancel
    self.timerAction = param.timerAction

    if param.enableConfirm ~= nil then
        self.enableConfirm = param.enableConfirm
    else
        self.enableConfirm = true
    end

    if param.showExtraResource ~= nil then
        self.showExtraResource = param.showExtraResource
    else
        self.showExtraResource = true
    end
end

local function Refresh(self)
    self.title_text:SetText(self.title)

    if not string.IsNullOrEmpty(self.topDesc) then
        self.top_desc_text:SetActive(true)
        self.top_desc_text:SetText(self.topDesc)
    else
        self.top_desc_text:SetActive(false)
    end

    if not string.IsNullOrEmpty(self.bottomDesc) then
        self.bottom_desc_text:SetActive(true)
        self.bottom_desc_text:SetText(self.bottomDesc)
    else
        self.bottom_desc_text:SetActive(false)
    end

    if not string.IsNullOrEmpty(self.confirmStr) then
        self.confirm_text:SetText(self.confirmStr)
    else
        self.confirm_text:SetLocalText(110006)
    end

    if not string.IsNullOrEmpty(self.cancelStr) then
        self.cancel_text:SetText(self.cancelStr)
    else
        self.cancel_text:SetLocalText(110106)
    end

    if not table.IsNullOrEmpty(self.dataList) then
        self.content_go:SetActive(true)
        self.reqs = {}
        for i, data in ipairs(self.dataList) do
            local req = Resource:InstantiateAsync(UIAssets.UICommonItem)
            req:completed('+', function()
                if req.isError then
                    return
                end

                local go = req.gameObject
                go:SetActive(true)
                go.name = "Item_" .. tostring(i)

                local item = self.content_go:AddComponent(UICommonItem, go)
                item:ReInit(data)

                local rtf = item.rectTransform
                rtf:SetParent(self.content_go.transform)
                rtf:Set_localScale(ITEM_SCALE, ITEM_SCALE, ITEM_SCALE)
                --rtf:Set_pivot(0.5, 0.5)
                --rtf.sizeDelta = Vector2.New(ITEM_SIZE, ITEM_SIZE)
                --rtf.pivot = Vector2.New(0.5, 0.5)

                self.reqs[i] = req
            end)
        end
    else
        self.content_go:SetActive(false)
    end
    
    if self.timer then
        self.timer:Stop()
    end
    self.timer = TimerManager:GetInstance():GetTimer(0.5, self.TimerAction, self, false, false, false)
    self.timer:Start()
    
    UIGray.SetGray(self.confirm_btn.transform, not self.enableConfirm, self.enableConfirm)

    if self.showExtraResource then
        local param = {}
        param.list = {}
        param.itemList = {}
        param.uiName = UIWindowNames.UICommonUseItemTip
        for _, data in ipairs(self.dataList) do
            if data.rewardType == RewardType.GOODS then
                table.insert(param.itemList, data.itemId)
            elseif RewardToResType[data.rewardType] ~= nil then
                table.insert(param.list, RewardToResType[data.rewardType])
            end
        end
        EventManager:GetInstance():Broadcast(EventId.ShowMainUIExtraResource, param)
    end
end

local function TimerAction(self)
    if self.timerAction then
        self.timerAction(self)
    end
end

local function ClearItems(self)
    self.content_go:RemoveComponents(UICommonItem)
    for _, req in pairs(self.reqs) do
        req:Destroy()
    end
end

local function OnClose(self)
    self.ctrl:CloseSelf()
end

local function OnConfirm(self)
    if self.onConfirm then
        self:OnClose()
        self.onConfirm()
    end
end

local function OnCancel(self)
    if self.onCancel then
        self.onCancel()
    end
    self:OnClose()
end

UICommonUseItemTipView.OnCreate = OnCreate
UICommonUseItemTipView.OnDestroy = OnDestroy
UICommonUseItemTipView.ComponentDefine = ComponentDefine
UICommonUseItemTipView.ComponentDestroy = ComponentDestroy
UICommonUseItemTipView.DataDefine = DataDefine
UICommonUseItemTipView.DataDestroy = DataDestroy
UICommonUseItemTipView.OnEnable = OnEnable
UICommonUseItemTipView.OnDisable = OnDisable

UICommonUseItemTipView.SetData = SetData
UICommonUseItemTipView.Refresh = Refresh
UICommonUseItemTipView.TimerAction = TimerAction
UICommonUseItemTipView.ClearItems = ClearItems
UICommonUseItemTipView.SetConfirmEnable = SetConfirmEnable
UICommonUseItemTipView.OnClose = OnClose
UICommonUseItemTipView.OnConfirm = OnConfirm
UICommonUseItemTipView.OnCancel = OnCancel

return UICommonUseItemTipView