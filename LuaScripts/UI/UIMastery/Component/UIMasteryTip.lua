---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/10 18:15
---

local UIMasteryTip = BaseClass("UIMasteryTip", UIBaseContainer)
local base = UIBaseContainer
local UIMasterySkillBtn = require "UI.UIMasterySkill.Component.UIMasterySkillBtn"
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray

local bg_path = "Bg"
local arrow_path = "Arrow"
local title_path = "Bg/TitleBg/Title"
local closed_path = "Bg/Closed"
local desc1_path = "Bg/DescBg/Desc1"
local desc2_path = "Bg/DescBg/Desc2"
local desc_max_path = "Bg/DescBg/DescMax"
local desc_line_path = "Bg/DescBg/DescLine"
local need_title_path = "Bg/NeedTitle"
local need_bg_path = "Bg/NeedBg"
local need_path = "Bg/NeedBg/Need%s"
local need_icon_path = "Bg/NeedBg/Need%s/Need%sIcon"
local need_check_path = "Bg/NeedBg/Need%s/Need%sCheck"
local need_btn_path = "Bg/NeedBg/Need%s/Need%sBtn"
local need_line_path = "Bg/NeedBg/NeedLine%s"
local need_point_path = "Bg/NeedPoint"
local learn_btn_path = "Bg/BtnList/Learn"
local learn_text_path = "Bg/BtnList/Learn/LearnText"
local skill_btn_path = "Bg/BtnList/SkillBtn"

local NeedCount = 5
local CheckPath = string.format(LoadPath.CommonNewPath, "Common_btn_duihao")
local CrossPath = string.format(LoadPath.CommonNewPath, "Common_btn_false")
local ScreenWidth = Screen.width / Screen.height * 750
local ScreenHeight = 750

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.bg_anim = self:AddComponent(UIAnimator, bg_path)
    self.arrow_go = self:AddComponent(UIBaseContainer, arrow_path)
    self.title_text = self:AddComponent(UIText, title_path)
    self.closed_text = self:AddComponent(UIText, closed_path)
    self.closed_text:SetText(string.format("%s", Localization:GetString("120105")))
    self.desc1_text = self:AddComponent(UIText, desc1_path)
    self.desc2_text = self:AddComponent(UIText, desc2_path)
    self.desc_max_text = self:AddComponent(UIText, desc_max_path)
    self.desc_max_text:SetLocalText(150135)
    self.desc_line_go = self:AddComponent(UIBaseContainer, desc_line_path)
    self.need_title_text = self:AddComponent(UIText, need_title_path)
    self.need_bg_go = self:AddComponent(UIBaseContainer, need_bg_path)
    self.need_texts = {}
    self.need_icon_images = {}
    self.need_check_images = {}
    self.need_btns = {}
    self.need_line_goes = {}
    for i = 1, NeedCount do
        self.need_texts[i] = self:AddComponent(UIText, string.format(need_path, i))
        self.need_icon_images[i] = self:AddComponent(UIImage, string.format(need_icon_path, i, i))
        self.need_check_images[i] = self:AddComponent(UIImage, string.format(need_check_path, i, i))
        self.need_btns[i] = self:AddComponent(UIButton, string.format(need_btn_path, i, i))
        self.need_btns[i]:SetOnClick(function()
            self:OnNeedClick(i)
        end)
        self.need_line_goes[i] = self:AddComponent(UIBaseContainer, string.format(need_line_path, i))
    end
    self.need_point_text = self:AddComponent(UIText, need_point_path)
    self.need_point_text:SetLocalText(110724)
    self.learn_btn = self:AddComponent(UIButton, learn_btn_path)
    self.learn_btn:SetOnClick(function()
        self:OnLearnClick()
    end)
    self.learn_text = self:AddComponent(UIText, learn_text_path)
    self.learn_text:SetLocalText(100091)
    self.skill_btn = self:AddComponent(UIMasterySkillBtn, skill_btn_path)
end

local function ComponentDestroy(self)
    self.bg_anim = nil
    self.arrow_go = nil
    self.title_text = nil
    self.closed_text = nil
    self.desc1_text = nil
    self.desc2_text = nil
    self.desc_max_text = nil
    self.desc_line_go = nil
    self.need_title_text = nil
    self.need_bg_go = nil
    self.need_texts = nil
    self.need_icon_images = nil
    self.need_check_images = nil
    self.need_btns = nil
    self.need_line_goes = nil
    self.need_point_text = nil
    self.learn_btn = nil
    self.learn_text = nil
    self.skill_btn = nil
end

local function DataDefine(self)
    self.data = nil
    self.plan = nil
    self.group = 0
    self.level = 0
    self.template = nil
    self.state = MasteryTipState.None
    self.skillState = MasterySkillState.None
    self.endTime = 0
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
        self.timer:Start()
    end
    self.showTimer = nil
end

local function DataDestroy(self)
    self.data = nil
    self.plan = nil
    self.group = nil
    self.level = nil
    self.template = nil
    self.state = nil
    self.skillState = nil
    self.endTime = nil
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    if self.showTimer then
        self.showTimer:Stop()
        self.showTimer = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MasteryLearn, self.Refresh)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.MasteryLearn, self.Refresh)
    base.OnRemoveListener(self)
end

local function SetData(self, group,tempPage)
    self.group = group
    self.tmpPage = tempPage
    self:Refresh()
end

local function Refresh(self)
    self.data = DataCenter.MasteryManager:GetData()
    self.plan = DataCenter.MasteryManager:GetCurPlan()
    self.level = self.plan:GetGroupLevel(self.group)
    self.template = DataCenter.MasteryManager:GetTemplate(self.group, self.level)
    self.state = self.plan:GetTipState(self.group)
    local id = self.template.tempData:getValue("id")
    local maxLv = self.template.tempData:getValue("maxLv")
    local titleStr = string.format("%s  %s/%s", Localization:GetString(DataCenter.MasteryManager:GetName(id)), self.level, maxLv)
    self.title_text:SetText(titleStr)
    self.need_title_text:SetLocalText(self.template.condType == MasteryCondType.And and 110040 or 110725)
    self.closed_text:SetActive(self.state == MasteryTipState.Closed or self.template.tempData:getValue("nouse"))
    self.desc1_text:SetText(DataCenter.MasteryManager:GetDescStr(id))
    if self.level < maxLv and maxLv > 1 then
        local maxTemplate = DataCenter.MasteryManager:GetTemplate(self.group,maxLv)
        self.desc2_text:SetActive(true)
        self.desc_max_text:SetActive(true)
        self.desc_line_go:SetActive(true)
        self.desc2_text:SetText(DataCenter.MasteryManager:GetDescStr(maxTemplate.tempData:getValue("id")))
    else
        self.desc2_text:SetActive(false)
        self.desc_max_text:SetActive(false)
        self.desc_line_go:SetActive(false)
    end

    if self.state == MasteryTipState.Closed then
        self.learn_btn:SetActive(false)
        self.need_title_text:SetActive(false)
        self.need_bg_go:SetActive(false)
        self.need_point_text:SetActive(false)
    elseif self.state == MasteryTipState.CanLearn or self.state == MasteryTipState.Maxed then
        self.learn_btn:SetActive(self.state == MasteryTipState.CanLearn)
        UIGray.SetGray(self.learn_btn.transform, false, true)
        self.need_title_text:SetActive(false)
        self.need_bg_go:SetActive(false)
        self.need_point_text:SetActive(false)
    elseif self.state == MasteryTipState.NeedLv or self.state == MasteryTipState.NeedPrior then
        self.learn_btn:SetActive(false)
        self.need_point_text:SetActive(false)
        local showNeed = false
        if self.state == MasteryTipState.NeedLv then
            showNeed = true
        end
        for i = 2, NeedCount do
            local showPriors = DataCenter.MasteryManager:GetPriorsShowInTip(id)
            local priorGroup = showPriors[i - 1]
            if priorGroup then
                self.need_texts[i]:SetActive(true)
                self.need_line_goes[i - 1]:SetActive(true)
                local priorLevel = self.plan:GetGroupLevel(priorGroup)
                local priorTemplate = DataCenter.MasteryManager:GetTemplate(priorGroup, priorLevel)
                local needLevel = self.template.needPriorLv[priorGroup]
                self.need_texts[i]:SetText(Localization:GetString(DataCenter.MasteryManager:GetName(priorTemplate.tempData:getValue("id"))) .. " Lv." .. needLevel)
                self.need_texts[i]:SetColor(priorLevel >= needLevel and DetectEventGreenColor or DetectEventRedColor)
                self.need_check_images[i]:LoadSprite(priorLevel >= needLevel and CheckPath or CrossPath)
                if priorTemplate.tempData:getValue("maxLv") > 1 then
                    showNeed = true
                end
            else
                self.need_texts[i]:SetActive(false)
                self.need_line_goes[i - 1]:SetActive(false)
            end
        end
        local needLv = self.template.tempData:getValue("needLv")
        if needLv > 0 then
            self.need_texts[1]:SetActive(true)
            self.need_texts[1]:SetText(Localization:GetString("110720") .. " Lv." .. needLv)
            self.need_check_images[1]:LoadSprite(self.state ~= MasteryTipState.NeedLv and CheckPath or CrossPath)
        else
            self.need_texts[1]:SetActive(false)
            self.need_line_goes[1]:SetActive(false)
        end
        self.need_title_text:SetActive(showNeed)
        self.need_bg_go:SetActive(showNeed)
    elseif self.state == MasteryTipState.NeedPoint then
        self.learn_btn:SetActive(true)
        UIGray.SetGray(self.learn_btn.transform, true, false)
        self.need_title_text:SetActive(false)
        self.need_bg_go:SetActive(false)
        self.need_point_text:SetActive(true)
    end

    local showSkillBtn = false
    if self.level > 0 and self.template.skill~=0 then
        local skillTemplate = DataCenter.MasteryManager:GetSkillTemplate(self.template.skill)
        if skillTemplate and skillTemplate:getValue("location") == MasterySkillLocation.ActiveSkill then
            self.skill_btn:SetData(self.template.skill)
            showSkillBtn = true
        end
    end
    self.skill_btn:SetActive(showSkillBtn)
end

local function TimerAction(self)
    
end

local function Show(self, pos)
    if self.showTimer then
        self.showTimer:Stop()
    end
    local isRight = (pos.x < ScreenWidth / 2)
    self.bg_anim:SetActive(true)
    self.arrow_go:SetActive(true)
    self.bg_anim.rectTransform.pivot = Vector2.New(isRight and 0 or 1, 0.5)
    self.bg_anim.rectTransform.position = pos + Vector3.New(isRight and 32 or -32, 0, 0)
    self.arrow_go.rectTransform.localScale = Vector3.New(isRight and 1 or -1, 1, 1)
    self.arrow_go.rectTransform.position = pos + Vector3.New(isRight and 29.5 or -29.5, 0, 0)
    self.bg_anim:Play("CommonPopup_movein", 0, 0)
    self.showTimer = TimerManager:GetInstance():DelayInvoke(function()
        local localPos = self.bg_anim.rectTransform.localPosition
        local padding = (ScreenHeight - self.bg_anim.rectTransform.sizeDelta.y) / 2
        localPos.y = Mathf.Clamp(localPos.y, -padding, padding)
        self.bg_anim.rectTransform.localPosition = localPos
        self.showTimer = nil
    end, 0.1)
end

local function Hide(self)
    self.bg_anim:SetActive(false)
    self.arrow_go:SetActive(false)
end

local function OnNeedClick(self, i)
    local group = self.template.priors[i - 1]
    if group then
        if self.view.OnNodeClick then
            self.view:LookAtNode(group)
            self.view:OnNodeClick(group)
        end
    end
end

local function OnLearnClick(self)
    if self.state == MasteryTipState.CanLearn then
        local learn = { group = self.group, level = self.level + 1 }
        DataCenter.MasteryManager:SendLearn({ learn },self.tmpPage)
    elseif self.state == MasteryTipState.Maxed then
    elseif self.state == MasteryTipState.NeedLv then
    elseif self.state == MasteryTipState.NeedPoint then
        --升级点数1
        GoToResLack.GotoMasteryPoint(1,2)
    elseif self.state == MasteryTipState.NeedPrior then
    end
end

UIMasteryTip.OnCreate= OnCreate
UIMasteryTip.OnDestroy = OnDestroy
UIMasteryTip.ComponentDefine = ComponentDefine
UIMasteryTip.ComponentDestroy = ComponentDestroy
UIMasteryTip.DataDefine = DataDefine
UIMasteryTip.DataDestroy = DataDestroy
UIMasteryTip.OnEnable = OnEnable
UIMasteryTip.OnDisable = OnDisable
UIMasteryTip.OnAddListener = OnAddListener
UIMasteryTip.OnRemoveListener = OnRemoveListener

UIMasteryTip.SetData = SetData
UIMasteryTip.Refresh = Refresh
UIMasteryTip.TimerAction = TimerAction
UIMasteryTip.Show = Show
UIMasteryTip.Hide = Hide

UIMasteryTip.OnNeedClick = OnNeedClick
UIMasteryTip.OnLearnClick = OnLearnClick

return UIMasteryTip