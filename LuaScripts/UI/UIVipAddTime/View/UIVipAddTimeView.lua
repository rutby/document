---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 4/2/2024 上午10:06
---
local UIVipAddTimeItem = require "UI.UIVipAddTime.Component.UIVipAddTimeItem"
local UIVipAddTimeView = BaseClass("UIVipAddTimeView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
function UIVipAddTimeView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

function UIVipAddTimeView:ComponentDefine()
    self._close_btn = self:AddComponent(UIButton,"UICommonPopUpTitle/bg_mid/CloseBtn")
    self._close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)

    self._return_btn = self:AddComponent(UIButton,"UICommonPopUpTitle/panel")
    self._return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self._title_txt = self:AddComponent(UITextMeshProUGUIEx,"UICommonPopUpTitle/bg_mid/titleText")
    self._title_txt:SetLocalText(321402)
    self.name_txt = self:AddComponent(UITextMeshProUGUIEx, "Bg/VipAddTimeItem/name_text")
    self.name_txt:SetLocalText(321401)
    self.lock_txt = self:AddComponent(UITextMeshProUGUIEx,"Bg/VipAddTimeItem/lock_text")
    self.lock_txt:SetLocalText(120050)
    self.des_txt = self:AddComponent(UITextMeshProUGUIEx,"Bg/VipAddTimeItem/des_text")
    self.des_txt:SetLocalText(321402)
    self.des_time = self:AddComponent(UITextMeshProUGUIEx,"Bg/VipAddTimeItem/des_text/des_time")
    self.empty_txt = self:AddComponent(UITextMeshProUGUIEx, "TxtEmpty")
    self.empty_txt:SetLocalText(320830)
    self.timer_action = function(temp)
        self:RefreshTime()
    end
    self.ScrollView = self:AddComponent(UIScrollView, "Bg/ScrollView")
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.showDatalist ={}
    self.endTime = 0
    self.isSendMsg = false
end

function UIVipAddTimeView:DataDefine()
end

function UIVipAddTimeView:OnDestroy()
    self:ClearScroll()
    base.OnDestroy(self)
end

function UIVipAddTimeView:OnEnable()
    base.OnEnable(self)
    self:ReInit()
    self:AddTimer()
end

function UIVipAddTimeView:OnDisable()
    base.OnDisable(self)
    self:DeleteTimer()
end

function UIVipAddTimeView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.UseItemSuccess, self.ReInit)
    self:AddUIListener(EventId.VipDataRefresh, self.RefreshVipData)
end

function UIVipAddTimeView:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.UseItemSuccess, self.ReInit)
    self:RemoveUIListener(EventId.VipDataRefresh, self.RefreshVipData)
end

function UIVipAddTimeView:ClearScroll()
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(UIVipAddTimeItem)
    self.showDatalist = {}
end

function UIVipAddTimeView:OnItemMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(UIVipAddTimeItem, itemObj)
    cellItem:SetItemShow(self.showDatalist[index])
end

function UIVipAddTimeView:OnItemMoveOut(itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name,UIVipAddTimeItem)
end
function UIVipAddTimeView:ReInit()
    self:RefreshList()
    self:RefreshVipData()
end

function UIVipAddTimeView:RefreshVipData()
    self.endTime = 0
    self.vipInfo = DataCenter.VIPManager:GetVipData()
    if self.vipInfo == nil then
        return
    end
    self.endTime = self.vipInfo.endTime
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime>=self.endTime then
        self.endTime = 0
    end
    if self.endTime>0 then
        self.lock_txt:SetActive(false)
        self.des_txt:SetActive(true)
        self:RefreshTime()
    else
        self.lock_txt:SetActive(true)
        self.des_txt:SetActive(false)
    end
    
end

function UIVipAddTimeView:RefreshList()
    self.isSendMsg = false
    self:ClearScroll()
    self.showDatalist = self.ctrl:GetItemList()
    if #self.showDatalist > 0 then
        self.ScrollView:SetTotalCount(#self.showDatalist)
        self.ScrollView:RefillCells()
        self.empty_txt:SetActive(false)
    else
        self.empty_txt:SetLocalText(302186)
        self.empty_txt:SetActive(true)
    end
end

function UIVipAddTimeView:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

function UIVipAddTimeView:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function UIVipAddTimeView:RefreshTime()
    if self.endTime>0  then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local deltaTime = self.endTime - curTime
        if  deltaTime >0 then
            self.lock_txt:SetActive(false)
            self.des_txt:SetActive(true)
            self.des_time:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
        else
            self.endTime = 0
            self:RefreshVipData()
        end
    end
end

function UIVipAddTimeView:SetIsOnMsgSend()
    self.isSendMsg = true
end

return UIVipAddTimeView