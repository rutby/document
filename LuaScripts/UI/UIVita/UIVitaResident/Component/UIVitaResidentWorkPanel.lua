---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/3 19:07
---

local UIVitaResidentWorkPanel = BaseClass("UIVitaResidentWorkPanel", UIBaseContainer)
local base = UIBaseContainer
local UIVitaResidentWork = require "UI.UIVita.UIVitaResident.Component.UIVitaResidentWork"
local UIHeroTipsView = require "UI.UIHeroTips.View.UIHeroTipsView"
local Localization = CS.GameEntry.Localization

local head_path = "Bg/HeadBg/Head"
local total_count_path = "Bg/Total/TotalCount"
local info_path = "Bg/Info"
local work_path = "Bg/Detail/Work"
local work_desc_path = "Bg/Detail/Work/WorkDesc"
local work_count_path = "Bg/Detail/Work/WorkCount"
local sick_path = "Bg/Detail/Sick"
local sick_desc_path = "Bg/Detail/Sick/SickDesc"
local sick_count_path = "Bg/Detail/Sick/SickCount"
local strike_path = "Bg/Detail/Strike"
local strike_desc_path = "Bg/Detail/Strike/StrikeDesc"
local strike_count_path = "Bg/Detail/Strike/StrikeCount"
local rest_path = "Bg/Detail/Rest"
local rest_desc_path = "Bg/Detail/Rest/RestDesc"
local rest_count_path = "Bg/Detail/Rest/RestCount"
local scroll_view_path = "Bg/ScrollView"
local content_path = "Bg/ScrollView/Viewport/Content"
local arrange_path = "Bg/Arrange"
local arrange_text_path = "Bg/Arrange/ArrangeText"
local arrange_red_path = "Bg/Arrange/ArrangeRed"
local arrange_red_text_path = "Bg/Arrange/ArrangeRed/ArrangeRedText"
local calculate_path = "Bg/Calculate"
local calculate_text_path = "Bg/Calculate/CalculateText"
local best_path = "Bg/Best"
local best_text_path = "Bg/Best/BestText"
local block_path = "Bg/Block"
local guide_vita_path = "UIGuideVitaDead"
local particle_mask_path = "Bg/ScrollView/ParticleMask"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.head_text = self:AddComponent(UITextMeshProUGUIEx, head_path)
    self.head_text:SetLocalText(100092)
    self.total_count_text = self:AddComponent(UITextMeshProUGUIEx, total_count_path)
    self.info_btn = self:AddComponent(UIButton, info_path)
    self.info_btn:SetOnClick(function()
        self:OnInfoClick()
    end)
    self.work_btn = self:AddComponent(UIButton, work_path)
    self.work_btn:SetOnClick(function()
        self:OnWorkClick()
    end)
    self.work_desc_text = self:AddComponent(UITextMeshProUGUIEx, work_desc_path)
    self.work_desc_text:SetLocalText(137024)
    self.work_count_text = self:AddComponent(UITextMeshProUGUIEx, work_count_path)
    self.sick_btn = self:AddComponent(UIButton, sick_path)
    self.sick_btn:SetOnClick(function()
        self:OnSickClick()
    end)
    self.sick_desc_text = self:AddComponent(UITextMeshProUGUIEx, sick_desc_path)
    self.sick_desc_text:SetLocalText(450246)
    self.sick_count_text = self:AddComponent(UITextMeshProUGUIEx, sick_count_path)
    self.strike_btn = self:AddComponent(UIButton, strike_path)
    self.strike_btn:SetOnClick(function()
        self:OnStrikeClick()
    end)
    self.strike_desc_text = self:AddComponent(UITextMeshProUGUIEx, strike_desc_path)
    self.strike_desc_text:SetLocalText(450247)
    self.strike_count_text = self:AddComponent(UITextMeshProUGUIEx, strike_count_path)
    self.rest_btn = self:AddComponent(UIButton, rest_path)
    self.rest_btn:SetOnClick(function()
        self:OnRestClick()
    end)
    self.rest_desc_text = self:AddComponent(UITextMeshProUGUIEx, rest_desc_path)
    self.rest_desc_text:SetLocalText(137026)
    self.rest_count_text = self:AddComponent(UITextMeshProUGUIEx, rest_count_path)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
    self.content_go = self:AddComponent(UIBaseContainer, content_path)
    self.arrange_btn = self:AddComponent(UIButton, arrange_path)
    self.arrange_btn:SetOnClick(function()
        self:OnArrangeClick()
    end)
    self.arrange_text = self:AddComponent(UITextMeshProUGUIEx, arrange_text_path)
    self.arrange_text:SetLocalText(450201)
    self.arrange_red_go = self:AddComponent(UIBaseContainer, arrange_red_path)
    self.arrange_red_text = self:AddComponent(UITextMeshProUGUIEx, arrange_red_text_path)
    self.calculate_go = self:AddComponent(UIBaseContainer, calculate_path)
    self.calculate_text = self:AddComponent(UITextMeshProUGUIEx, calculate_text_path)
    self.calculate_text:SetLocalText(450225)
    self.best_go = self:AddComponent(UIBaseContainer, best_path)
    self.best_text = self:AddComponent(UITextMeshProUGUIEx, best_text_path)
    self.best_text:SetLocalText(450202)
    self.block_go = self:AddComponent(UIBaseContainer, block_path)
    self.guide_vita = self:AddComponent(UIBaseContainer, guide_vita_path)
    self.particle_mask = self:AddComponent(UIBaseContainer, particle_mask_path)
end

local function ComponentDestroy(self)
    self.guide_vita.transform:SetParent(self.transform)
    self.guide_vita:SetActive(false)
end

local function DataDefine(self)
    self.dataList = {}
    self.items = {}
    self.guide_callback = function(trans)
        self:GuideCallBack(trans)
    end
    self.isWaiting = false
    self.curWorkDict = {}
    self.curWorkScore = -1
    self.bestWorkDict = {}
    self.bestWorkScore = -1
    self.sendDict = {} -- Dict<rUuid, fUuid> 家具发生变化的小人和家具
    self.changeBuildRUuids = {} -- List<rUuid> 建筑发生变化的小人
    self.seq = nil
end

local function DataDestroy(self)
    if self.seq then
        self.seq:Kill()
        self.seq = nil
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.VitaSetResidentWork, self.OnSetResidentWork)
    self:AddUIListener(EventId.VitaSetResidentWorkBatch, self.OnSetResidentWorkBatch)
    self:AddUIListener(EventId.VitaZombieAttackDead, self.OnZombieAttackDead)
    self:AddUIListener(EventId.VitaZombieAttackSick, self.OnZombieAttackSick)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.VitaSetResidentWork, self.OnSetResidentWork)
    self:RemoveUIListener(EventId.VitaSetResidentWorkBatch, self.OnSetResidentWorkBatch)
    self:RemoveUIListener(EventId.VitaZombieAttackDead, self.OnZombieAttackDead)
    self:RemoveUIListener(EventId.VitaZombieAttackSick, self.OnZombieAttackSick)
    base.OnRemoveListener(self)
end

local function OnCreateCell(self, itemObj, index)
    local param = self.dataList[index]
    itemObj.name = tostring(param.buildId)
    local item = self.scroll_view:AddComponent(UIVitaResidentWork, itemObj)
    item.panel = self
    item:SetData(param)
    self.items[index] = item
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIVitaResidentWork)
    self.items[index] = nil
end

local function ShowScroll(self)
    local count = #self.dataList
    if count > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:SetActive(false)
    end
end

local function Refresh(self)
    self.block_go:SetActive(false)
    self.isWaiting = false
    self.guide_vita:SetActive(false)
    self:RefreshCounts()
    self:RefreshArrange()
    
    local dataDict = {} -- Dict<bUuid, data>
    for _, furnitureInfo in pairs(DataCenter.FurnitureManager.allData) do
        local furnitureLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(furnitureInfo.fId, furnitureInfo.lv)
        if furnitureLevelTemplate and furnitureLevelTemplate.need_worker > 0 then
            local data = dataDict[furnitureInfo.bUuid]
            if data == nil then
                data = {}
                data.bUuid = furnitureInfo.bUuid
                local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(data.bUuid)
                if buildData ~= nil then
                    data.buildId = buildData.itemId
                end
                data.furnitureInfoList = {}
                data.guideCallback = self.guide_callback
            end
            table.insert(data.furnitureInfoList, furnitureInfo)
            dataDict[furnitureInfo.bUuid] = data
        end
    end
    self.dataList = table.values(dataDict)
    if self.dataList[2] ~= nil then
        table.sort(self.dataList, function(a,b) 
            return a.buildId < b.buildId
        end)
    end
    self:ShowScroll()
end

local function RefreshCounts(self)
    local count, workCount, sickCount, restCount, strikeCount = DataCenter.VitaManager:GetResidentCount()
    self.total_count_text:SetText(string.GetFormattedSeperatorNum(count))
    self.work_count_text:SetText(string.GetFormattedSeperatorNum(workCount))
    self.sick_count_text:SetText(string.GetFormattedSeperatorNum(sickCount))
    self.strike_count_text:SetText(string.GetFormattedSeperatorNum(strikeCount))
    self.rest_count_text:SetText(string.GetFormattedSeperatorNum(restCount))
end

local function RefreshArrange(self)
    self.particle_mask:SetActive(false)
    if DataCenter.VitaManager:IsLevelUpEnabled() then
        local rUuids, fUuids = DataCenter.VitaManager:GetWorkAvailableRUuidsAndFUuids()
        local isEnough = #rUuids > #fUuids
        
        local curWorkDict, curScore = DataCenter.VitaManager:GetCurResidentWorkDict()
        self.curWorkDict = curWorkDict
        self.curScore = curScore

        if self.bestWorkScore == -1 then
            local bestWorkDict, bestScore = DataCenter.VitaManager:GetBestResidentWorkDict(curWorkDict)
            self.bestWorkDict = bestWorkDict
            self.bestScore = bestScore
        end

        self.changeBuildRUuids = {}
        self.sendDict = {}
        for rUuid, _ in pairs(self.curWorkDict) do
            if self.bestWorkDict[rUuid] == nil then
                self.sendDict[rUuid] = 0
            end
        end
        for rUuid, fUuid in pairs(self.bestWorkDict) do
            local oldFUuid = self.curWorkDict[rUuid] or 0
            local oldFurnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(oldFUuid)
            local oldBuildData = oldFurnitureInfo and DataCenter.BuildManager:GetBuildingDataByUuid(oldFurnitureInfo.bUuid)
            local oldBUuid = oldBuildData and oldBuildData.uuid or 0
            local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
            local buildData = furnitureInfo and DataCenter.BuildManager:GetBuildingDataByUuid(furnitureInfo.bUuid)
            local bUuid = buildData and buildData.uuid or 0

            if oldFUuid ~= fUuid then
                self.sendDict[rUuid] = fUuid
            end
            if oldBUuid ~= bUuid then
                table.insert(self.changeBuildRUuids, rUuid)
            end
            
            -- log
            if CS.CommonUtils.IsDebug() and CS.UnityEngine.Application.isEditor then
                local residentData = DataCenter.VitaManager:GetResidentData(rUuid)
                local residentName = Localization:GetString(GetTableData(TableName.VitaResident, residentData.id, "name"))
                local fName1 = "无"
                local fName2 = "无"
                local fIndex1 = ""
                local fIndex2 = ""
                local score1 = 0
                local score2 = 0
                if oldFurnitureInfo then
                    local fTemplate1 = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(oldFurnitureInfo.fId, oldFurnitureInfo.lv)
                    fName1 = Localization:GetString(fTemplate1.name)
                    fIndex1 = oldFurnitureInfo.index
                    score1 = DataCenter.VitaManager:GetResidentWorkScore(rUuid, oldFUuid, isEnough, curWorkDict)
                end
                if furnitureInfo then
                    local fTemplate2 = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(furnitureInfo.fId, furnitureInfo.lv)
                    fName2 = Localization:GetString(fTemplate2.name)
                    fIndex2 = furnitureInfo.index
                    score2 = DataCenter.VitaManager:GetResidentWorkScore(rUuid, fUuid, isEnough, curWorkDict)
                end
                Logger.Log(string.format("Arrange '%s' from '%s %s' (%s) to '%s %s' (%s).", residentName, fName1, fIndex1, score1, fName2, fIndex2, score2))
            end
        end
        Logger.Log(string.format("Arrange total score from (%s) to (%s).", self.curScore, self.bestScore))

        self.arrange_red_go:SetActive(#self.changeBuildRUuids > 0)
        self.arrange_red_text:SetText(#self.changeBuildRUuids)
        if self.curScore < self.bestScore then
            self.arrange_btn:SetActive(true)
            self.best_go:SetActive(false)
        else
            self.arrange_btn:SetActive(false)
            self.best_go:SetActive(true)
        end
        self.calculate_go:SetActive(false)
    else
        self.arrange_btn:SetActive(false)
        self.calculate_go:SetActive(false)
        self.best_go:SetActive(true)
    end
end

local function TimerAction(self)
    
end

local function OnInfoClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaResidentIntro)
end

local function OnWorkClick(self)
    
end

local function OnSickClick(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local param = UIHeroTipsView.Param.New()
    param.content = Localization:GetString("137049")
    param.dir = UIHeroTipsView.Direction.BELOW
    param.defWidth = 450
    param.pivot = 0.25
    param.position = self.sick_desc_text.transform.position + Vector3.New(0, -30, 0) * scaleFactor
    param.bindObject = self.sick_desc_text.gameObject
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTips, { anim = false }, param)
end

local function OnStrikeClick(self)
    
end

local function OnRestClick(self)
    
end

local function OnArrangeClick(self)
    self.particle_mask:SetActive(true)
    DataCenter.VitaManager:SendSetResidentWorkBatch(self.sendDict)
end

local function OnSetResidentWork(self)
    self.isWaiting = false
    self:RefreshCounts()
    self:RefreshArrange()
    for _, item in pairs(self.items) do
        item:Refresh()
    end
end

local function OnSetResidentWorkBatch(self)
    for _, item in pairs(self.items) do
        item:Refresh()
    end
    self.arrange_btn:SetActive(false)
    self.block_go:SetActive(true)
    self.calculate_go:SetActive(true)
    self.best_go:SetActive(false)
    self.content_go.rectTransform.anchoredPosition = Vector3.zero
    local slots = {}
    for _, item in pairs(self.items) do
        for _, slot in ipairs(item:GetAvailableSlots()) do
            table.insert(slots, slot)
            slot:SetEmpty(true)
            slot:Refresh()
            slot:StopEffect()
        end
    end
    if self.seq then
        self.seq:Kill()
    end
    self.seq = DOTween.Sequence()
    self.seq:AppendInterval(0.1)
    for i, slot in ipairs(slots) do
        self.seq:AppendCallback(function()
            slot:SetEmpty(false)
            slot:Refresh()
            slot:PlayEffect()
        end)
        self.seq:AppendInterval(0.04)
    end
    self.seq:AppendCallback(function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaResidentSetWorkTip, NormalPanelAnim, self.changeBuildRUuids)
        if self.active then
            self.block_go:SetActive(false)
            self:OnSetResidentWork()
        end
    end)
end

local function OnZombieAttackDead(self)
    if self.isWaiting then
        return
    end
    self:RefreshCounts()
    self:RefreshArrange()
    for _, item in pairs(self.items) do
        item:Refresh()
    end
end

local function OnZombieAttackSick(self)
    if self.isWaiting then
        return
    end
    self:RefreshCounts()
    self:RefreshArrange()
    for _, item in pairs(self.items) do
        item:Refresh()
    end
end

function UIVitaResidentWorkPanel:GuideCallBack(go)
    self.guide_vita:SetActive(true)
    self.guide_vita.transform:SetParent(go.transform)
    self.guide_vita.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
    self.guide_vita.transform:Set_localPosition(ResetPosition.x, ResetPosition.y, ResetPosition.z)
    DataCenter.GuideManager:RemoveOneTempFlag(GuideTempFlagType.VitaDead)
end

UIVitaResidentWorkPanel.OnCreate = OnCreate
UIVitaResidentWorkPanel.OnDestroy = OnDestroy
UIVitaResidentWorkPanel.OnEnable = OnEnable
UIVitaResidentWorkPanel.OnDisable = OnDisable
UIVitaResidentWorkPanel.ComponentDefine = ComponentDefine
UIVitaResidentWorkPanel.ComponentDestroy = ComponentDestroy
UIVitaResidentWorkPanel.DataDefine = DataDefine
UIVitaResidentWorkPanel.DataDestroy = DataDestroy
UIVitaResidentWorkPanel.OnAddListener = OnAddListener
UIVitaResidentWorkPanel.OnRemoveListener = OnRemoveListener

UIVitaResidentWorkPanel.OnCreateCell = OnCreateCell
UIVitaResidentWorkPanel.OnDeleteCell = OnDeleteCell
UIVitaResidentWorkPanel.ShowScroll = ShowScroll

UIVitaResidentWorkPanel.Refresh = Refresh
UIVitaResidentWorkPanel.RefreshCounts = RefreshCounts
UIVitaResidentWorkPanel.RefreshArrange = RefreshArrange
UIVitaResidentWorkPanel.TimerAction = TimerAction
UIVitaResidentWorkPanel.OnInfoClick = OnInfoClick
UIVitaResidentWorkPanel.OnWorkClick = OnWorkClick
UIVitaResidentWorkPanel.OnSickClick = OnSickClick
UIVitaResidentWorkPanel.OnStrikeClick = OnStrikeClick
UIVitaResidentWorkPanel.OnRestClick = OnRestClick
UIVitaResidentWorkPanel.OnArrangeClick = OnArrangeClick
UIVitaResidentWorkPanel.OnSetResidentWork = OnSetResidentWork
UIVitaResidentWorkPanel.OnSetResidentWorkBatch = OnSetResidentWorkBatch
UIVitaResidentWorkPanel.OnZombieAttackDead = OnZombieAttackDead
UIVitaResidentWorkPanel.OnZombieAttackSick = OnZombieAttackSick

return UIVitaResidentWorkPanel