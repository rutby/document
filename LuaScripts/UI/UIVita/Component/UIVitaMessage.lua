---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/10 18:39
---

local UIVitaMessage = BaseClass("UIVitaMessage", UIBaseContainer)
local base = UIBaseContainer
local beef_debug_path = "beefDebug"
local beef_debug_text_path = "beefDebug/beefDebugText"
local land_reward_obj_path = "landRewardObj"
local land_reward_path = "landRewardObj/LandReward"
local visit_obj_path = "visitObj"
local visit_path = "visitObj/Visit"
local riot_obj_path = "riotObj"
local riot_path = "riotObj/Riot"
local bed_obj_path = "bedObj"
local bed_path = "bedObj/Bed"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.beef_debug_btn = self:AddComponent(UIButton, beef_debug_path)
    self.beef_debug_btn:SetOnClick(function()
        self:OnDebugClick()
    end)
    self.beef_debug_text = self:AddComponent(UITextMeshProUGUIEx, beef_debug_text_path)
    self.land_reward_obj = self:AddComponent(UIBaseContainer, land_reward_obj_path)
    self.land_reward_btn = self:AddComponent(UIButton, land_reward_path)
    self.land_reward_btn:SetOnClick(function()
        self:OnLandRewardClick()
    end)
    self.visit_obj = self:AddComponent(UIBaseContainer, visit_obj_path)
    self.visit_obj:SetActive(false)
    self.visit_btn = self:AddComponent(UIButton, visit_path)
    self.visit_btn:SetOnClick(function()
        self:OnVisitClick()
    end)
    self.riot_obj = self:AddComponent(UIBaseContainer,riot_obj_path)
    self.riot_btn = self:AddComponent(UIButton, riot_path)
    self.riot_btn:SetOnClick(function()
        self:OnRiotClick()
    end)
    self.bed_obj = self:AddComponent(UIBaseContainer,bed_obj_path)
    self.bed_btn = self:AddComponent(UIButton, bed_path)
    self.bed_btn:SetOnClick(function()
        self:OnBedClick()
    end)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    
end

local function DataDestroy(self)
    
end

local function OnEnable(self)
    base.OnEnable(self)
    self:Refresh()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)

end

local function OnRemoveListener(self)

end

local function Refresh(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()

    local landRewardIds = DataCenter.LandManager:GetReceivableRewardIds()
    if #landRewardIds > 0 then
        self.land_reward_obj:SetActive(true)
    else
        self.land_reward_obj:SetActive(false)
    end

    --local residentCount = DataCenter.VitaManager:GetResidentCount()
    --local residentMaxCount = DataCenter.VitaManager:GetResidentMaxCount()
    --local residentReadyCount = #DataCenter.VitaManager:GetReadyResidentDataList()
    --local readyCanCome = DataCenter.CityResidentManager.readyCanCome
    --if residentReadyCount > 0 and residentCount < residentMaxCount and readyCanCome then
    --    self.visit_obj:SetActive(true)
    --else
    --    self.visit_obj:SetActive(false)
    --end

    local riotInfo = DataCenter.VitaManager:GetResidentRiotInfo()
    if curTime < riotInfo.endTime then
        self.riot_obj:SetActive(true)
    else
        self.riot_obj:SetActive(false)
    end
    
    local noBedUuids = DataCenter.CityResidentManager:GetNoBedResidentUuids()
    if #noBedUuids > 0 then
        self.bed_obj:SetActive(true)
    else
        self.bed_obj:SetActive(false)
    end
end

local function OnDebugClick(self)
    load(self.beef_debug_text:GetText())()
end

local function OnLandRewardClick(self)
    local landRewardIds = DataCenter.LandManager:GetReceivableRewardIds()
    DataCenter.LandManager:JumpToRewardBubble(landRewardIds[1])
end

local function OnVisitClick(self)
    --local idList = {}
    --local dataList = DataCenter.VitaManager:GetReadyResidentDataList()
    --for _, data in ipairs(dataList) do
    --    table.insert(idList, data.id)
    --end
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaResidentChange, { anim = true }, VitaDefines.ComeType.Normal, idList, function()
    --    DataCenter.VitaManager:AcceptResidents()
    --end)
    
    local _, toPos = DataCenter.CityResidentManager:GetReadyQueuePos(1)
    if toPos then
        CS.SceneManager.World:AutoLookat(toPos, CS.SceneManager.World.InitZoom, LookAtFocusTime, function()
            local hudItem = DataCenter.CityHudManager:GetHudItemByType(CityHudType.ReadyQueue)
            if hudItem then
                local param = {}
                param.positionType = PositionType.Screen
                param.position = hudItem.transform.position + Vector3.New(0, 100, 0)
                DataCenter.ArrowManager:ShowArrow(param)
            end
        end)
        UIUtil.ShowTipsId(441049)
    end
end

local function OnRiotClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaResidentRiot)
end

local function OnBedClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaResidentBed)
end

UIVitaMessage.OnCreate= OnCreate
UIVitaMessage.OnDestroy = OnDestroy
UIVitaMessage.ComponentDefine = ComponentDefine
UIVitaMessage.ComponentDestroy = ComponentDestroy
UIVitaMessage.DataDefine = DataDefine
UIVitaMessage.DataDestroy = DataDestroy
UIVitaMessage.OnEnable = OnEnable
UIVitaMessage.OnDisable = OnDisable
UIVitaMessage.OnAddListener = OnAddListener
UIVitaMessage.OnRemoveListener = OnRemoveListener

UIVitaMessage.Refresh = Refresh

UIVitaMessage.OnDebugClick = OnDebugClick
UIVitaMessage.OnLandRewardClick = OnLandRewardClick
UIVitaMessage.OnVisitClick = OnVisitClick
UIVitaMessage.OnRiotClick = OnRiotClick
UIVitaMessage.OnBedClick = OnBedClick

return UIVitaMessage