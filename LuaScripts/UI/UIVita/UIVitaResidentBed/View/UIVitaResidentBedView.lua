---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/2/29 18:08
---

local UIVitaResidentBed = BaseClass("UIVitaResidentBed", UIBaseView)
local base = UIBaseView
local UIVitaResidentItem = require "UI.UIVita.Component.UIVitaResidentItem"

local title_path = "bg/titleText"
local close_path = "bg/CloseBtn"
local return_path = "panel"
local desc_path = "bg/Desc"
local go_path = "bg/Go"
local go_text_path = "bg/Go/GoText"
local say_bg_path = "bg/SayBg%s"
local say_text_path = "bg/SayBg%s/SayText%s"
local item_path = "bg/SayBg%s/Item%s"

local SayCount = 2

local TargetBuildIds =
{
    BuildingTypes.DS_HOUSE_1,
    BuildingTypes.DS_HOUSE_2,
    BuildingTypes.DS_HOUSE_3,
    BuildingTypes.DS_HOUSE_4,
    BuildingTypes.DS_HOUSE_5,
    BuildingTypes.DS_HOUSE_6,
    BuildingTypes.DS_HOUSE_7,
    BuildingTypes.DS_HOUSE_8,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title_text:SetLocalText(441051)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.desc_text:SetLocalText(441052)
    self.go_btn = self:AddComponent(UIButton, go_path)
    self.go_btn:SetOnClick(function()
        self:OnGoClick()
    end)
    self.go_text = self:AddComponent(UITextMeshProUGUIEx, go_text_path)
    self.go_text:SetLocalText(110003)
    self.say_bg_goes = {}
    self.say_texts = {}
    self.items = {}
    for i = 1, SayCount do
        self.say_bg_goes[i] = self:AddComponent(UIBaseContainer, string.format(say_bg_path, i))
        self.say_texts[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(say_text_path, i, i))
        self.items[i] = self:AddComponent(UIVitaResidentItem, string.format(item_path, i, i))
    end
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    
end

local function DataDestroy(self)
    
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    local noBedUuids = DataCenter.CityResidentManager:GetNoBedResidentUuids()
    for i = 1, SayCount do
        local uuid = noBedUuids[i]
        if uuid then
            local residentData = DataCenter.VitaManager:GetResidentData(uuid)
            local dialogs = DataCenter.VitaManager:GetConfig(VitaDefines.ConfigKey.NoBedDialogs)
            self.say_bg_goes[i]:SetActive(true)
            self.say_texts[i]:SetLocalText(dialogs[i])
            self.items[i]:SetData(residentData.id)
        else
            self.say_bg_goes[i]:SetActive(false)
        end
    end
end

local function OnGoClick(self)
    local minLvBuildData = nil
    for _, buildId in ipairs(TargetBuildIds) do
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(buildId)
        if buildData == nil or buildData.level == 0 then
            -- 如果有没建造的，优先建造
            GoToUtil.CloseAllWindows()
            GoToUtil.GotoOpenBuildCreateWindow(UIWindowNames.UIBuildCreate, NormalPanelAnim, { buildId = buildId })
            return
        end
        if buildData then
            local buildLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, buildData.level)
            local index = 0
            for _, fId in ipairs(buildLevelTemplate:GetFurnitureList()) do
                if fId == FurnitureType.Bed then
                    index = index + 1
                    local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByBuildUuid(buildData.uuid, fId, index)
                    if furnitureInfo == nil or furnitureInfo.lv == 0 then
                        -- 跳转至0级床
                        local param = {}
                        param.buildUuid = buildData.uuid
                        param.tabType = UIFurnitureUpgradeTabType.Furniture
                        param.arrowType = UIFurnitureUpgradeArrowType.UpgradeFurniture
                        param.furnitureId = fId
                        param.furnitureIndex = index
                        GoToUtil.CloseAllWindows()
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFurnitureUpgrade, NormalPanelAnim, param)
                        return
                    end
                end
            end
            if minLvBuildData == nil or buildData.level < minLvBuildData.level then
                minLvBuildData = buildData
            end
        end
    end
    if minLvBuildData then
        local param = {}
        param.buildUuid = minLvBuildData.uuid
        param.tabType = UIFurnitureUpgradeTabType.Furniture
        param.arrowType = UIFurnitureUpgradeArrowType.UpgradeBuild
        GoToUtil.CloseAllWindows()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFurnitureUpgrade, NormalPanelAnim, param)
    end
end

UIVitaResidentBed.OnCreate = OnCreate
UIVitaResidentBed.OnDestroy = OnDestroy
UIVitaResidentBed.OnEnable = OnEnable
UIVitaResidentBed.OnDisable = OnDisable
UIVitaResidentBed.ComponentDefine = ComponentDefine
UIVitaResidentBed.ComponentDestroy = ComponentDestroy
UIVitaResidentBed.DataDefine = DataDefine
UIVitaResidentBed.DataDestroy = DataDestroy
UIVitaResidentBed.OnAddListener = OnAddListener
UIVitaResidentBed.OnRemoveListener = OnRemoveListener

UIVitaResidentBed.ReInit = ReInit
UIVitaResidentBed.OnGoClick = OnGoClick

return UIVitaResidentBed