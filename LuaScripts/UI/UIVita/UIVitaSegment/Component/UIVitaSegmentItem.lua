---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/2 17:32
---

local UIVitaSegmentItem = BaseClass("UIVitaSegmentItem", UIBaseContainer)
local base = UIBaseContainer

local this_path = ""
local name_path = "Name"
local desc_path = "Desc"
local icon_path = "Icon"
local time_bg_path = "TimeBg"
local time_path = "TimeBg/Time"
local slider_path = "Slider"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.bg_image = self:AddComponent(UIImage, this_path)
    self.name_text = self:AddComponent(UITextMeshProUGUIEx, name_path)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.icon_btn = self:AddComponent(UIButton, icon_path)
    self.icon_btn:SetOnClick(function()
        self:OnIconClick()
    end)
    self.time_bg_image = self:AddComponent(UIImage, time_bg_path)
    self.time_text = self:AddComponent(UITextMeshProUGUIEx, time_path)
    self.slider = self:AddComponent(UISlider, slider_path)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.dayNight = nil
    self.startTodayVitaTime = 0
    self.endTodayVitaTime = 0
    self.tween = nil
end
    
local function DataDestroy(self)
    if self.tween then
        self.tween:Kill()
        self.tween = nil
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function SetData(self, dayNight)
    self.dayNight = dayNight
    
    local config = DataCenter.VitaManager:GetConfig(VitaDefines.ConfigKey.DayNight)
    self.startTodayVitaTime = config[dayNight]
    self.endTodayVitaTime = config[VitaUtil.GetNextDayNight(dayNight)]
    local startStr = VitaUtil.VitaTimeToStringHM(self.startTodayVitaTime)
    local endStr = VitaUtil.VitaTimeToStringHM(self.endTodayVitaTime)
    self.time_text:SetText(string.format("%s\n-\n%s", startStr, endStr))
    
    if self.dayNight == VitaDefines.DayNight.Day then
        self.icon_btn:LoadSprite("Assets/Main/Sprites/UI/UIMain/UIMain_icon_day")
        self.name_text:SetLocalText(430193)
        self.desc_text:SetLocalText(430196)
    elseif self.dayNight == VitaDefines.DayNight.Night then
        self.icon_btn:LoadSprite("Assets/Main/Sprites/UI/UIMain/UIMain_icon_night")
        self.name_text:SetLocalText(430194)
        self.desc_text:SetLocalText(430197)
    else
        self.icon_btn:LoadSprite("Assets/Main/Sprites/UI/UIMain/UIMain_icon_sleep")
        self.name_text:SetLocalText(430195)
        self.desc_text:SetLocalText(430198)
    end
    
    self:Refresh()
end

local function Refresh(self)
    if not self.active or self.dayNight == nil then
        return
    end
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.dayNight == DataCenter.VitaManager:GetDayNight(curTime) then
        local vitaTime = VitaUtil.RealTimeToVita(curTime)
        local todayVitaTime = VitaUtil.VitaTimeTodayMinute(vitaTime)
        local passVitaSpan = todayVitaTime - self.startTodayVitaTime
        local totalVitaSpan = self.endTodayVitaTime - self.startTodayVitaTime
        if totalVitaSpan <= 0 then
            totalVitaSpan = totalVitaSpan + 1440
        end
        local restVitaSpan = totalVitaSpan - passVitaSpan
        self.slider:SetValue(passVitaSpan / totalVitaSpan)
        if self.tween then
            self.tween:Kill()
        end
        self.tween = self.slider.unity_uislider:DOValue(1, VitaUtil.VitaSpanToReal(restVitaSpan) / 1000):SetEase(CS.DG.Tweening.Ease.Linear)

        if self.dayNight == VitaDefines.DayNight.Day then
            self.bg_image:LoadSprite("Assets/Main/Sprites/UI/UIVita/people_bg_daydi")
            self.time_bg_image:LoadSprite("Assets/Main/Sprites/UI/UIVita/people_bg_daydi2")
        elseif self.dayNight == VitaDefines.DayNight.Night then
            self.bg_image:LoadSprite("Assets/Main/Sprites/UI/UIVita/people_bg_nightdi")
            self.time_bg_image:LoadSprite("Assets/Main/Sprites/UI/UIVita/people_bg_nightdi2")
        else
            self.bg_image:LoadSprite("Assets/Main/Sprites/UI/UIVita/people_bg_sleepdi")
            self.time_bg_image:LoadSprite("Assets/Main/Sprites/UI/UIVita/people_bg_sleepdi2")
        end
    end
end

local function OnIconClick(self)
    if CS.CommonUtils.IsDebug() then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if self.dayNight == DataCenter.VitaManager:GetDayNight(curTime) then
            local vitaTime = VitaUtil.RealTimeToVita(curTime)
            local todayVitaTime = VitaUtil.VitaTimeTodayMinute(vitaTime)
            local _, hour, _ = VitaUtil.VitaTimeToDHM(todayVitaTime)
            if hour < 23 then
                DataCenter.VitaManager:SendChangeTime(hour + 1)
            else
                DataCenter.VitaManager:SendChangeTime(0)
            end
        else
            local _, hour, minute = VitaUtil.VitaTimeToDHM(self.startTodayVitaTime)
            if minute > 0 then
                DataCenter.VitaManager:SendChangeTime(hour + 1)
            else
                DataCenter.VitaManager:SendChangeTime(hour)
            end
        end
    end
end

UIVitaSegmentItem.OnCreate = OnCreate
UIVitaSegmentItem.OnDestroy = OnDestroy
UIVitaSegmentItem.OnEnable = OnEnable
UIVitaSegmentItem.OnDisable = OnDisable
UIVitaSegmentItem.ComponentDefine = ComponentDefine
UIVitaSegmentItem.ComponentDestroy = ComponentDestroy
UIVitaSegmentItem.DataDefine = DataDefine
UIVitaSegmentItem.DataDestroy = DataDestroy
UIVitaSegmentItem.OnAddListener = OnAddListener
UIVitaSegmentItem.OnRemoveListener = OnRemoveListener

UIVitaSegmentItem.SetData = SetData
UIVitaSegmentItem.Refresh = Refresh
UIVitaSegmentItem.OnIconClick = OnIconClick

return UIVitaSegmentItem