---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/3/19 11:05
---

local UIVitaResidentDetail = BaseClass("UIVitaResidentDetail", UIBaseView)
local base = UIBaseView
local UIVitaResidentDetailFeature = require "UI.UIVita.UIVitaResidentDetail.Component.UIVitaResidentDetailFeature"
local UIGray = CS.UIGray

local this_path = ""
local return_path = "Panel"
local icon_bg_path = "Ani/Bg/IconBg"
local icon_path = "Ani/Bg/IconBg/Icon"
local stamina_path = "Ani/Bg/StaminaSlider"
local mood_path = "Ani/Bg/MoodSlider"
local name_path = "Ani/Bg/Name"
local desc_path = "Ani/Bg/Desc"
local num_path = "Ani/Bg/Num"
local hide_path = "Ani/Bg/Hide"
local col1_path = "Ani/Bg/Hide/Col1"
local col2_path = "Ani/Bg/Hide/Col2"
local upgrade_path = "Ani/Bg/Upgrade"
local upgrade_text_path = "Ani/Bg/Upgrade/Vert/UpgradeText"
local cost_icon_path = "Ani/Bg/Upgrade/Vert/Hori/CostIcon"
local cost_count_path = "Ani/Bg/Upgrade/Vert/Hori/CostCount"
local feature_list_path = "Ani/Bg/FeatureList"
local feature_path = "Ani/Bg/FeatureList/Feature_%s"
local feature_tip_path = "Ani/Bg/FeatureTip"
local feature_tip_close_path = "Ani/Bg/FeatureTip/FeatureTipClose"
local feature_tip_text_path = "Ani/Bg/FeatureTip/FeatureTipText"
local feature_tip_arrow_path = "Ani/Bg/FeatureTip/FeatureTipArrow_%s"

local FeatureCount = 4
local AnimInTime = 0.8
local AnimOutTime = 0.57

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
    self:ReInit()
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.anim = self:AddComponent(UIAnimator, this_path)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function()
        self:Close()
    end)
    self.icon_bg_image = self:AddComponent(UIImage, icon_bg_path)
    self.icon_image = self:AddComponent(UIImage, icon_path)
    self.stamina_slider = self:AddComponent(UISlider, stamina_path)
    self.mood_slider = self:AddComponent(UISlider, mood_path)
    self.name_text = self:AddComponent(UIText, name_path)
    self.desc_text = self:AddComponent(UIText, desc_path)
    self.num_text = self:AddComponent(UIText, num_path)
    self.hide_go = self:AddComponent(UIBaseContainer, hide_path)
    self.col1_text = self:AddComponent(UITextMeshProUGUIEx, col1_path)
    self.col2_text = self:AddComponent(UITextMeshProUGUIEx, col2_path)
    self.upgrade_btn = self:AddComponent(UIButton, upgrade_path)
    self.upgrade_btn:SetOnClick(function()
        self:OnUpgradeClick()
    end)
    self.upgrade_text = self:AddComponent(UITextMeshProUGUIEx, upgrade_text_path)
    self.upgrade_text:SetLocalText(100213)
    self.cost_icon_image = self:AddComponent(UIImage, cost_icon_path)
    self.cost_count_text = self:AddComponent(UITextMeshProUGUIEx, cost_count_path)
    self.feature_list_go = self:AddComponent(UIBaseContainer, feature_list_path)
    self.features = {}
    self.feature_tip_arrow_goes = {}
    for i = 1, FeatureCount do
        self.features[i] = self:AddComponent(UIVitaResidentDetailFeature, string.format(feature_path, i))
        self.features[i]:SetOnClick(function()
            self:ShowFeatureTip(i)
        end)
        self.feature_tip_arrow_goes[i] = self:AddComponent(UIBaseContainer, string.format(feature_tip_arrow_path, i))
    end
    self.feature_tip_anim = self:AddComponent(UIAnimator, feature_tip_path)
    self.feature_tip_close_btn = self:AddComponent(UIButton, feature_tip_close_path)
    self.feature_tip_close_btn:SetOnClick(function()
        self:HideFeatureTip()
    end)
    self.feature_tip_text = self:AddComponent(UITextMeshProUGUIEx, feature_tip_text_path)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.isDebug = false
    self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
    self.timer:Start()
    self.isLevelUp = false
    self.isAnimating = false
end

local function DataDestroy(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    self.isAnimating = false
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.ResourceUpdated, self.OnResourceUpdated)
    self:AddUIListener(EventId.VitaLevelUp, self.OnLevelUp)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.ResourceUpdated, self.OnResourceUpdated)
    self:RemoveUIListener(EventId.VitaLevelUp, self.OnLevelUp)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.isDebug = CS.CommonUtils.IsDebug() and CS.UnityEngine.Application.isEditor
    local uuid, showTip = self:GetUserData()
    self.uuid = uuid
    self.residentData = DataCenter.VitaManager:GetResidentData(self.uuid)
    local need = DataCenter.VitaManager:GetConfig(VitaDefines.ConfigKey.LevelUpNeedRes)[self.residentData.level]
    self.resType = need.resType
    self.count = need.count
    self:Refresh(showTip)
    self:TimerAction()
    self.anim:Play("Eff_Ani_UIVitaResidentDetail", 0, 0)
    self.isAnimating = true
    TimerManager:GetInstance():DelayInvoke(function()
        self.isAnimating = false
    end, AnimInTime)
end

local function Refresh(self, showTip)
    self.featureCount = #self.residentData.featureIds
    self.nextFeatureIndex = math.min(self.residentData:GetMaxLevel() - 1, self.featureCount + 1)
    self.canLevelUp = self.residentData:CanLevelUp() and DataCenter.CityHudManager:GetHudItem(self.uuid, CityHudType.ResidentLevelUp) ~= nil
    
    local line = LocalController:instance():getLine(TableName.VitaResident, self.residentData.id)
    self.icon_image:LoadSprite(string.format(LoadPath.UIFeature, line.ID_photo))
    self.name_text:SetText(line.english)
    self.desc_text:SetText("Age " .. line.age)
    self.num_text:SetText("No." .. line.code)
    self.hide_go:SetActive(self.isDebug)
    for i = 1, FeatureCount do
        if i <= self.featureCount then
            -- 已解锁
            local isNew = (showTip and i == self.featureCount)
            self.features[i]:SetActive(true)
            self.features[i]:SetData(self.residentData.featureIds[i], isNew)
        elseif i <= self.nextFeatureIndex then
            -- 未解锁
            self.features[i]:SetActive(true)
            self.features[i]:SetLock()
        else
            self.features[i]:SetActive(false)
        end
    end

    self:HideFeatureTip()
    if showTip then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Resident_Unlock)
        TimerManager:GetInstance():DelayInvoke(function()
            if self.active then
                self:ShowFeatureTip(#self.residentData.featureIds)
            end
        end, 0.6)
    end

    if self.canLevelUp then
        self.upgrade_btn:SetActive(true)
        self:RefreshCost()
    else
        self.upgrade_btn:SetActive(false)
    end
end

local function RefreshCost(self)
    local have = LuaEntry.Resource:GetCntByResType(self.resType)
    self.enough = have >= self.count
    self.cost_icon_image:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(self.resType))
    self.cost_count_text:SetText(string.format("<color=%s>%s</color>/%s", self.enough and "white" or "red", string.GetFormattedStr(have), string.GetFormattedStr(self.count)))
end

local function Update(self)
    if self.residentData == nil then
        return
    end
    local data = DataCenter.CityResidentManager:GetData(self.uuid)
    if data and data:HasObj() then
        CS.SceneManager.World:AutoLookat(data:GetPos(), CityResidentZoom.Resident, 0.1)
    end
end

local function TimerAction(self)
    if self.residentData == nil then
        return
    end
    
    local curStamina
    local curMood
    local maxStamina = self.residentData:GetMaxStamina()
    local maxMood = self.residentData:GetMaxMood()
    local data = DataCenter.CityResidentManager:GetData(self.uuid)
    if data and data.state == CityResidentDefines.State.Dead then
        curStamina = 0
        curMood = 0
        UIGray.SetGray(self.icon_bg_image.transform, true)
    else
        curStamina = self.residentData:GetCurStamina()
        curMood = self.residentData:GetCurMood()
        UIGray.SetGray(self.icon_bg_image.transform, false)
    end
    self.stamina_slider:SetValue(Mathf.Clamp(curStamina / maxStamina, 0, 1))
    self.mood_slider:SetValue(Mathf.Clamp(curMood / maxMood, 0, 1))
    
    if self.isDebug then
        local effectStrs = {}
        for effectId, val in pairs(self.residentData.effects) do
            table.insert(effectStrs, effectId .. ";" .. val)
        end
        local str1 =
            "Uuid: " .. data.uuid .. "\n" ..
            "ID: " .. self.residentData.id .. "\n" ..
            "Level: " .. self.residentData.level .. "\n" ..
            "Exp: " .. toInt(self.residentData:GetCurExp()) .. "/" .. self.residentData:GetNeedExp() .. "\n" ..
            "Stamina: " .. toInt(self.residentData:GetCurStamina()) .. "/" .. self.residentData:GetMaxStamina() .. "\n" ..
            "Mood: " .. toInt(self.residentData:GetCurMood()) .. "/" .. self.residentData:GetMaxMood() .. "\n" ..
            "\nEffect: " .. string.join(effectStrs, " | ") .. "\n" ..
            ""
        self.col1_text:SetText(str1)
        local str2 =
            "\n" ..
            "Career: " .. data:GetCareer() .. "\n" ..
            "State: " .. data:GetState() .. "\n" ..
            "Animation: " .. data.animName .. "\n" ..
            "InBuilding: " .. (data.atBUuid ~= 0 and "true" or "false") .. "\n" ..
            ""
        self.col2_text:SetText(str2)
    end
end

local function ShowFeatureTip(self, i)
    if i <= #self.residentData.featureIds then
        -- 已解锁
        local featureId = self.residentData.featureIds[i]
        self.feature_tip_text:SetLocalText(GetTableData(TableName.VitaResidentFeature, featureId, "talent_des"))
    elseif i <= self.nextFeatureIndex then
        -- 未解锁
        self.feature_tip_text:SetLocalText(450223)
    else
        return
    end
    for j = 1, FeatureCount do
        self.feature_tip_arrow_goes[j]:SetActive(i == j)
    end
    self.feature_tip_anim:SetActive(true)
    self.feature_tip_anim:Play("CommonPopup_movein", 0, 0)
end

local function HideFeatureTip(self)
    for i = 1, FeatureCount do
        self.feature_tip_arrow_goes[i]:SetActive(false)
    end
    self.feature_tip_anim:SetActive(false)
end

local function Close(self)
    if self.isAnimating then
        return
    end
    self.isAnimating = true
    for i = 1, FeatureCount do
        self.features[i]:ShowEffect(false)
    end
    self.anim:Play("Eff_Ani_UIVitaResidentDetail_Out", 0, 0)
    TimerManager:GetInstance():DelayInvoke(function()
        self.isAnimating = false
        if self.isLevelUp then
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Resident_Level_Up)
            DataCenter.CityResidentManager:PlayResidentLevelUp(self.uuid)
        end
        local data = DataCenter.CityResidentManager:GetData(self.uuid)
        if data and data:HasObj() then
            CS.SceneManager.World:AutoLookat(data:GetPos(), DataCenter.CityResidentManager.detailZoom, 0.2)
        end
        self.residentData = nil
        self.ctrl:CloseSelf()
    end, AnimOutTime)
end

local function OnKeyEscape(self)
    self:Close()
end

local function OnUpgradeClick(self)
    if self.enough then
        DataCenter.VitaManager:SendLevelUp(self.uuid)
    else
        local lackTab = {}
        local param = {}
        param.type = ResLackType.Res
        param.id = self.resType
        param.targetNum = self.count
        table.insert(lackTab, param)
        GoToResLack.GoToItemResLackList(lackTab)
    end
end

local function OnResourceUpdated(self)
    if self.canLevelUp then
        self:RefreshCost()
    end
end

local function OnLevelUp(self)
    self.isLevelUp = true
    self:Refresh(true)
end

UIVitaResidentDetail.OnCreate = OnCreate
UIVitaResidentDetail.OnDestroy = OnDestroy
UIVitaResidentDetail.OnEnable = OnEnable
UIVitaResidentDetail.OnDisable = OnDisable
UIVitaResidentDetail.ComponentDefine = ComponentDefine
UIVitaResidentDetail.ComponentDestroy = ComponentDestroy
UIVitaResidentDetail.DataDefine = DataDefine
UIVitaResidentDetail.DataDestroy = DataDestroy
UIVitaResidentDetail.OnAddListener = OnAddListener
UIVitaResidentDetail.OnRemoveListener = OnRemoveListener

UIVitaResidentDetail.ReInit = ReInit
UIVitaResidentDetail.Refresh = Refresh
UIVitaResidentDetail.RefreshCost = RefreshCost
UIVitaResidentDetail.Update = Update
UIVitaResidentDetail.TimerAction = TimerAction
UIVitaResidentDetail.ShowFeatureTip = ShowFeatureTip
UIVitaResidentDetail.HideFeatureTip = HideFeatureTip
UIVitaResidentDetail.Close = Close

UIVitaResidentDetail.OnKeyEscape = OnKeyEscape
UIVitaResidentDetail.OnUpgradeClick = OnUpgradeClick

UIVitaResidentDetail.OnResourceUpdated = OnResourceUpdated
UIVitaResidentDetail.OnLevelUp = OnLevelUp

return UIVitaResidentDetail