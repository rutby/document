---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/4/10 10:24
---

local UIVitaResidentStrike = BaseClass("UIVitaResidentStrike", UIBaseView)
local base = UIBaseView
local UIVitaResidentItem = require "UI.UIVita.Component.UIVitaResidentItem"

local return_path = "UICommonPanel"
local close_path = "Close"
local title_path = "Title"
local desc_path = "Desc"
local cond_title_path = "CondTitle"
local cond_check_path = "CondHori/CondCheck"
local cond_desc_path = "CondHori/CondDesc"
local item_path = "UIVitaResidentItem"
local top_path = "Top"
local top_text_path = "Top/TopText"
local arrow_path = "Top/Arrow"
local bottom_path = "Bottom"
local bottom_text_path = "Bottom/BottomText"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.return_btn = self:AddComponent(UIButton, return_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.cond_title_text = self:AddComponent(UITextMeshProUGUIEx, cond_title_path)
    self.cond_check_go = self:AddComponent(UIBaseContainer, cond_check_path)
    self.cond_desc_text = self:AddComponent(UITextMeshProUGUIEx, cond_desc_path)
    self.item = self:AddComponent(UIVitaResidentItem, item_path)
    self.top_btn = self:AddComponent(UIButton, top_path)
    self.top_btn:SetOnClick(function()
        self:OnTopClick()
    end)
    self.top_text = self:AddComponent(UITextMeshProUGUIEx, top_text_path)
    self.arrow_go = self:AddComponent(UIBaseContainer, arrow_path)
    self.bottom_btn = self:AddComponent(UIButton, bottom_path)
    self.bottom_btn:SetOnClick(function()
        self:OnBottomClick()
    end)
    self.bottom_text = self:AddComponent(UITextMeshProUGUIEx, bottom_text_path)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    self.uuid = 0
end

local function DataDestroy(self)
    
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.VitaResidentTaskUpdate, self.Refresh)
    self:AddUIListener(EventId.VitaDataUpdate, self.Refresh)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.VitaResidentTaskUpdate, self.Refresh)
    self:RemoveUIListener(EventId.VitaDataUpdate, self.Refresh)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.uuid = self:GetUserData()
    local residentData = DataCenter.VitaManager:GetResidentData(self.uuid)
    if residentData == nil or residentData.deadReason ~= VitaDefines.ResidentDeadReason.None then
        self.ctrl:CloseSelf()
        return
    end
    
    local taskDataList = DataCenter.VitaManager:GetTaskDataListByRUuid(self.uuid)
    self.taskData = taskDataList[1]
    if self.taskData == nil then
        self.ctrl:CloseSelf()
        return
    end
    
    self.line = LocalController:instance():getLine(TableName.ResidentStrike, self.taskData.id)
    self.questTemplate =
    {
        desc = self.line.desc,
        desctype = self.line.desctype,
        para1 = self.line.des_para1,
        para2 = self.line.des_para2,
        para3 = self.line.des_para3,
        gotype2 = self.line.gotype2,
        gopara = string.split(self.line.gopara, ";"),
    }
    
    self.title_text:SetLocalText(self.line.title)
    self.desc_text:SetLocalText(self.line.text)
    self.cond_desc_text:SetText(DataCenter.QuestTemplateManager:GetDesc(self.questTemplate))
    self.item:SetData(residentData.id)
    self:Refresh()
end

local function Refresh(self)
    local residentData = DataCenter.VitaManager:GetResidentData(self.uuid)
    if residentData == nil or residentData.deadReason ~= VitaDefines.ResidentDeadReason.None then
        self.ctrl:CloseSelf()
        return
    end
    
    if self.taskData:CanFinish() then
        self.top_text:SetLocalText(110009)
        self.bottom_text:SetLocalText(110043)
        self.arrow_go:SetActive(false)
        self.cond_check_go:SetActive(true)
    else
        self.top_text:SetLocalText(110003)
        self.bottom_text:SetLocalText(110043)
        self.arrow_go:SetActive(true)
        self.cond_check_go:SetActive(false)
    end
end

local function OnTopClick(self)
    if self.taskData:CanFinish() then
        DataCenter.VitaManager:SendResidentTaskFinish(self.taskData.uuid)
        self.ctrl:CloseSelf()
    else
        GoToUtil.GoToByQuestId(self.questTemplate)
        self.ctrl:CloseSelf()
    end
end

local function OnBottomClick(self)
    self.ctrl:CloseSelf()
end

UIVitaResidentStrike.OnCreate = OnCreate
UIVitaResidentStrike.OnDestroy = OnDestroy
UIVitaResidentStrike.OnEnable = OnEnable
UIVitaResidentStrike.OnDisable = OnDisable
UIVitaResidentStrike.ComponentDefine = ComponentDefine
UIVitaResidentStrike.ComponentDestroy = ComponentDestroy
UIVitaResidentStrike.DataDefine = DataDefine
UIVitaResidentStrike.DataDestroy = DataDestroy
UIVitaResidentStrike.OnAddListener = OnAddListener
UIVitaResidentStrike.OnRemoveListener = OnRemoveListener

UIVitaResidentStrike.ReInit = ReInit
UIVitaResidentStrike.Refresh = Refresh
UIVitaResidentStrike.OnTopClick = OnTopClick
UIVitaResidentStrike.OnBottomClick = OnBottomClick

return UIVitaResidentStrike