---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/8/20 10:32
---
local UIAllianceCompeteRankView = BaseClass("UIAllianceCompeteRankView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local AllianceCompeteRankItem = require "UI.UIAllianceCompete.UIAllianceCompeteRank.Component.AllianceCompeteRankItem"
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"

local TabType = {
    DayRank = 1,
    WeekRank = 2,
    SeasonRank = 3,
}

local TabToRankType = {
    [TabType.DayRank] = 0,
    [TabType.WeekRank] = 1,
    [TabType.SeasonRank] = 2,
}

local container1Go_path = "ImgBg/container1Go"
local container2Go_path = "ImgBg/container2Go"
local container3Go_path = "ImgBg/container3Go"
local loopListView1_path = "ImgBg/container1Go/loopListView1"
local loopListView2_path = "ImgBg/container2Go/loopListView2"
local loopListView3_path = "ImgBg/container3Go/loopListView3"
local titleTxt_path = "UICommonPopUpTitle/bg_mid/titleText"
local closeBtn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local selfObj_path = "ImgBg/selfObj"
local selfRankTxt_path = "ImgBg/selfObj/selfRankTxt"
local selfLevelTxt_path = "ImgBg/selfObj/selfLevelTxt"
local selfHeadIcon_path = "ImgBg/selfObj/playerFlag/UIPlayerHead/HeadIcon"
local selfHeadBg_path = "ImgBg/selfObj/playerFlag/UIPlayerHead/Foreground"
local selfTipBtn_path = "ImgBg/selfObj/tipBtn"
local leagueTog_path = "ImgBg/Top/leagueTog"
local content_path = "ImgBg/container2Go/loopListView2/Viewport/Content"
local selfFirstTxt_path = "ImgBg/selfObj/selfFirstTxt"
local selfSecondTxt_path = "ImgBg/selfObj/selfSecondTxt"
local infoBtn_path = "ImgBg/Top/infoBtn"
local maskBtn_path = "UICommonPopUpTitle/panel"
local empty_txt_path = "ImgBg/TxtEmpty"
local rankTitle_path = "ImgBg/Top/RankTxt"
local nickNameTitle_path = "ImgBg/Top/NickNameTxt"
local scoreTitle_path = "ImgBg/Top/ScoreTxt"
local leagueTitle_path = "ImgBg/Top/leagueTog/LeagueTxt"
local tab_path = "ImgBg/Top/ToggleGroup/Toggle"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:InitData()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.container1Go = self:AddComponent(UIBaseContainer, container1Go_path)
    self.container2Go = self:AddComponent(UIBaseContainer, container2Go_path)
    self.container3Go = self:AddComponent(UIBaseContainer, container3Go_path)
    self.containerTbN = {
        self.container1Go,
        self.container2Go,
        self.container3Go
    }
    self.loopListView1 = self:AddComponent(UIScrollView, loopListView1_path)
    self.loopListView1:SetOnItemMoveIn(function(itemObj, curIndex)
        self:SetDailyRankItemIn(itemObj, curIndex)
    end)
    self.loopListView1:SetOnItemMoveOut(function(itemObj, curIndex)
        self:SetDailyRankItemOut(itemObj, curIndex)
    end)
    self.loopListView2 = self:AddComponent(UIScrollView, loopListView2_path)
    self.loopListView2:SetOnItemMoveIn(function(itemObj, curIndex)
        self:SetWeeklyRankItemIn(itemObj, curIndex)
    end)
    self.loopListView2:SetOnItemMoveOut(function(itemObj, curIndex)
        self:SetWeeklyRankItemOut(itemObj, curIndex)
    end)
    self.loopListView3 = self:AddComponent(UIScrollView, loopListView3_path)
    self.loopListView3:SetOnItemMoveIn(function(itemObj, curIndex)
        self:SetSeasonRankItemIn(itemObj, curIndex)
    end)
    self.loopListView3:SetOnItemMoveOut(function(itemObj, curIndex)
        self:SetSeasonRankItemOut(itemObj, curIndex)
    end)
    self.loopListTbN = {
        self.loopListView1,
        self.loopListView2,
        self.loopListView3,
    }
    self.titleTxt = self:AddComponent(UITextMeshProUGUIEx, titleTxt_path)
    self.titleTxt:SetLocalText(361055) 
    self.closeBtn = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    self.selfObj = self:AddComponent(UIBaseContainer, selfObj_path)
    self.selfRankTxt = self:AddComponent(UITextMeshProUGUIEx, selfRankTxt_path)
    self.selfLevelTxt = self:AddComponent(UITextMeshProUGUIEx, selfLevelTxt_path)
    self.selfHeadIcon = self:AddComponent(UIPlayerHead, selfHeadIcon_path)
    self.selfHeadBg = self:AddComponent(UIImage, selfHeadBg_path)
    self.selfTipBtn = self:AddComponent(UIButton, selfTipBtn_path)
    self.selfTipBtn:SetOnClick(function()
        self:OnClickSelfTipBtn()
    end)
    self.tabTbN = {}
    local tabName = {
        361056, 361057, 372631
    }
    for i = 1, 3 do
        local tab = self:AddComponent(UIBaseContainer, tab_path .. i)
        local tabBtn = tab:AddComponent(UIButton, "")
        tabBtn:SetOnClick(function()
            self:OnClickTab(i)
        end)
        local select = tab:AddComponent(UIBaseContainer, "select")
        local selectTxt = tab:AddComponent(UITextMeshProUGUIEx, "select/selectTxt")
        selectTxt:SetLocalText(tabName[i])
        local unselect = tab:AddComponent(UIBaseContainer, "unselect")
        local unselectTxt = tab:AddComponent(UITextMeshProUGUIEx, "unselect/unselectTxt")
        unselectTxt:SetLocalText(tabName[i])
        local red = tab:AddComponent(UIBaseContainer, "red")
        local visible = self:CheckIfTabVisible(i)
        tab:SetActive(visible)
        local newTab = {
            btnN = tabBtn,
            selectN = select,
            selectTxtN = selectTxt,
            unselectN = unselect,
            unselectTxtN = unselectTxt,
            redN = red,
            isVisible = visible,
        }
        table.insert(self.tabTbN, newTab)
    end
    
    self.leagueTog = self:AddComponent(UIToggle, leagueTog_path)
    self.leagueTog:SetIsOn(false)
    self.leagueTog:SetOnValueChanged(function(tf)
        self:RefreshRankList()
    end)

    self.content = self:AddComponent(UIBaseContainer, content_path)
    
    self.selfFirstTxt = self:AddComponent(UITextMeshProUGUIEx, selfFirstTxt_path)
    self.selfSecondTxt = self:AddComponent(UITextMeshProUGUIEx, selfSecondTxt_path)
    
    self.infoBtn = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtn:SetOnClick(function()  
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnclickInfoBtn()
    end)
    self.maskBtn = self:AddComponent(UIButton, maskBtn_path)
    self.maskBtn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    self.empty_txt = self:AddComponent(UITextMeshProUGUIEx, empty_txt_path)
    self.empty_txt:SetLocalText(371004) 
    self.rankTxt = self:AddComponent(UITextMeshProUGUIEx, rankTitle_path)
    self.rankTxt:SetLocalText(361013) 
    self.nickNameTxt = self:AddComponent(UITextMeshProUGUIEx, nickNameTitle_path)
    self.nickNameTxt:SetLocalText(100184) 
    self.scoreTxt = self:AddComponent(UITextMeshProUGUIEx, scoreTitle_path)
    self.scoreTxt:SetLocalText(361001) 
    self.leagueTxt = self:AddComponent(UITextMeshProUGUIEx, leagueTitle_path)
    self.leagueTxt:SetLocalText(361058) 
end

local function ComponentDestroy(self)
    self.loopListView2 = nil
    self.titleTxt = nil
    self.closeBtn = nil
    self.selfObj = nil
    self.selfRankTxt = nil
    self.selfLevelTxt = nil
    self.selfHeadIcon = nil
    self.tab1Tog = nil
    self.leagueTog = nil
    self.content = nil
    self.tab2Tog = nil
    self.selfFirstTxt = nil
    self.selfSecondTxt = nil
    self.container2Go = nil
    self.loopListView1 = nil
    self.container1Go = nil
    self.infoBtn = nil
    self.container1Animator = nil
    self.container2Animator = nil
    self.maskBtn = nil
    self.rankTxt = nil
    self.nickNameTxt = nil
    self.scoreTxt = nil
    self.leagueTxt = nil
end

local function DataDefine(self)
    self.curTabType = nil
end

local function DataDestroy(self)
    self.curTabType = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.AllianceCompeteRankListUpdated, self.RefreshRankList)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.AllianceCompeteRankListUpdated, self.RefreshRankList)
end

local function UpdateRankList(self, tempParam)
    SFSNetwork.SendMessage(MsgDefines.AllianceCompeteRankList, tempParam)
end

local function InitData(self)
    local targetTab = self:GetUserData()
    if not self.tabTbN[targetTab] or not self.tabTbN[targetTab].isVisible then
        for i, v in ipairs(self.tabTbN) do
            if v.isVisible then
                targetTab = i
                break
            end
        end
    end
    
    targetTab = targetTab or TabType.DayRank
    self:ChangeTab(targetTab)
end

local function ChangeTab(self, tabType)
    self.curTabType = tabType
    for i, v in ipairs(self.tabTbN) do
        if i == tabType then
            v.selectN:SetActive(true)
            v.unselectN:SetActive(false)
            self.containerTbN[i]:SetActive(true)
        else
            v.selectN:SetActive(false)
            v.unselectN:SetActive(true)
            self.containerTbN[i]:SetActive(false)
        end
    end

    self.leagueTog:SetActive(self.curTabType ~= TabType.SeasonRank)
    
    self:UpdateRankList(TabToRankType[tabType])
end

local function CheckIfTabVisible(self, tabType)
    if tabType == TabType.DayRank then
        local tempData = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if (not tempData) or (tempData.finish or tempData:GetEventInfo() == nil) then
            return false
        else
            return true
        end
    elseif tabType == TabType.SeasonRank then
        local inMatch = DataCenter.LeagueMatchManager:CheckIfInMatch()
        return inMatch
    else
        return true
    end
end

local function RefreshRankList(self)
    if IsNull(self.gameObject) then
        return
    end
    --data
    local rankList = DataCenter.AllianceCompeteDataManager:GetRankList(TabToRankType[self.curTabType])
    if self.curTabType ~= TabType.SeasonRank and self.leagueTog:GetIsOn() then
        self.rankList = {}
        if LuaEntry.Player:IsInAlliance() then
            local allianceBase = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
            local myAllianceId =  allianceBase.uid
            table.walk(rankList, function(k, v)
                if myAllianceId ~= nil and v.aid ~= nil and (tostring(myAllianceId) == tostring(v.aid)) then
                    table.insert(self.rankList, v)
                end
            end)
        end
    else
        self.rankList = rankList
    end
    
    self:ClearScroll()
    if #self.rankList > 0 then
        local totalCount = #self.rankList
        self.loopListTbN[self.curTabType]:SetTotalCount(totalCount)
        self.loopListTbN[self.curTabType]:RefillCells()
        self.empty_txt:SetActive(false)
    else
        self.empty_txt:SetActive(true)
    end
    
    self:SetSelfInfo()
end

local function SetSelfInfo(self)
    local count = #self.rankList
    self.selfObj:SetActive(true)
    
    local selfData = nil
    local rankIndex = 0
    for i = 1 , count do
        local data = self.rankList[i]
        local uid = data["uid"]
        if uid ~= nil and uid == LuaEntry.Player.uid then
            selfData = data
            rankIndex = i
            break
        end
    end
    
    local score = selfData and selfData["score"] or 0
    if score == 0 then
        self.selfRankTxt:SetLocalText(361054)
    else
        self.selfRankTxt:SetText(rankIndex)
    end
    local scoreStr = string.GetFormattedStr(score)
    self.selfLevelTxt:SetText(scoreStr)
    self.selfHeadIcon.gameObject:SetActive(true)
    local uid = LuaEntry.Player.uid
    local selfPic = LuaEntry.Player:GetPic()
    local selfPicVer = LuaEntry.Player.picVer
    self.selfHeadIcon:SetData(uid,selfPic,selfPicVer)

    local fgImg = LuaEntry.Player:GetHeadBgImg()
    if not string.IsNullOrEmpty(fgImg) then
        self.selfHeadBg:SetActive(true)
        self.selfHeadBg:LoadSprite(fgImg)
    else
        self.selfHeadBg:SetActive(false)
    end

    local strName = selfData and selfData.name or LuaEntry.Player.name
    self.selfFirstTxt:SetText(strName)
    if LuaEntry.Player:IsInAlliance() then-- data["abbr"] ~= nil then
        local alInfo = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
        self.selfSecondTxt:SetText("["..alInfo["abbr"].."]"..alInfo["allianceName"])
    else
        self.selfSecondTxt:SetText("")
    end
end

local function SetDailyRankItemIn(self, itemObj, curIndex)
    itemObj.name = tostring(curIndex)
    local cellItem = self.loopListView1:AddComponent(AllianceCompeteRankItem, itemObj)
    cellItem:RefreshItem(self.rankList[curIndex], curIndex)
end

local function SetDailyRankItemOut(self, itemObj, curIndex)
    self.loopListView1:RemoveComponents(itemObj.name, AllianceCompeteRankItem)
end

local function SetWeeklyRankItemIn(self, itemObj, curIndex)
    itemObj.name = tostring(curIndex)
    local cellItem = self.loopListView2:AddComponent(AllianceCompeteRankItem, itemObj)
    cellItem:RefreshItem(self.rankList[curIndex], curIndex)
end

local function SetWeeklyRankItemOut(self, itemObj, curIndex)
    self.loopListView2:RemoveComponents(itemObj.name, AllianceCompeteRankItem)
end

local function SetSeasonRankItemIn(self, itemObj, curIndex)
    itemObj.name = tostring(curIndex)
    local cellItem = self.loopListView3:AddComponent(AllianceCompeteRankItem, itemObj)
    cellItem:RefreshItem(self.rankList[curIndex], curIndex)
end

local function SetSeasonRankItemOut(self, itemObj, curIndex)
    self.loopListView3:RemoveComponents(itemObj.name, AllianceCompeteRankItem)
end


local function ClearScroll(self)
    self.loopListView1:ClearCells()
    self.loopListView1:RemoveComponents(AllianceCompeteRankItem)

    self.loopListView2:ClearCells()
    self.loopListView2:RemoveComponents(AllianceCompeteRankItem)
    
    self.loopListView3:ClearCells()
    self.loopListView3:RemoveComponents(AllianceCompeteRankItem)
end

local function OnclickInfoBtn(self)
    --361066
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.infoBtn.transform.position + Vector3.New(0, -15, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("361066")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 180
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnClickSelfTipBtn(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.selfTipBtn.transform.position + Vector3.New(0, 10, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("372169")
    param.dir = UIHeroTipView.Direction.ABOVE
    param.defWidth = 180
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnClickTab(self, tabIndex)
    self:ChangeTab(tabIndex)
end



UIAllianceCompeteRankView.OnCreate = OnCreate
UIAllianceCompeteRankView.OnDestroy = OnDestroy
UIAllianceCompeteRankView.OnEnable = OnEnable
UIAllianceCompeteRankView.OnDisable = OnDisable
UIAllianceCompeteRankView.ComponentDefine = ComponentDefine
UIAllianceCompeteRankView.ComponentDestroy = ComponentDestroy
UIAllianceCompeteRankView.DataDefine = DataDefine
UIAllianceCompeteRankView.DataDestroy = DataDestroy
UIAllianceCompeteRankView.OnAddListener = OnAddListener
UIAllianceCompeteRankView.OnRemoveListener = OnRemoveListener

UIAllianceCompeteRankView.SetDailyRankItemIn = SetDailyRankItemIn
UIAllianceCompeteRankView.SetDailyRankItemOut = SetDailyRankItemOut
UIAllianceCompeteRankView.SetWeeklyRankItemIn = SetWeeklyRankItemIn
UIAllianceCompeteRankView.SetWeeklyRankItemOut = SetWeeklyRankItemOut
UIAllianceCompeteRankView.SetSeasonRankItemIn = SetSeasonRankItemIn
UIAllianceCompeteRankView.SetSeasonRankItemOut = SetSeasonRankItemOut
UIAllianceCompeteRankView.RefreshRankList = RefreshRankList
UIAllianceCompeteRankView.UpdateRankList = UpdateRankList
UIAllianceCompeteRankView.InitData = InitData
UIAllianceCompeteRankView.ChangeTab = ChangeTab
UIAllianceCompeteRankView.CheckIfTabVisible = CheckIfTabVisible
UIAllianceCompeteRankView.ClearScroll = ClearScroll
UIAllianceCompeteRankView.SetSelfInfo = SetSelfInfo
UIAllianceCompeteRankView.OnclickInfoBtn = OnclickInfoBtn
UIAllianceCompeteRankView.OnClickSelfTipBtn = OnClickSelfTipBtn
UIAllianceCompeteRankView.OnClickTab = OnClickTab

return UIAllianceCompeteRankView