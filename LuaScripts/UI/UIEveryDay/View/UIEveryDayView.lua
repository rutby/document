---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/9/25 21:06
---

local UIEveryDay = BaseClass("UIEveryDay", UIBaseView)
local base = UIBaseView
local UIEveryDayHead = require "UI.UIEveryDay.Component.UIEveryDayHead"
local UIEveryDayItem = require "UI.UIEveryDay.Component.UIEveryDayItem"

local bg_path = "Bg"
local back_path = "SafeArea/Back"
local scroll_view_path = "SafeArea/ScrollView"
local content_path = "SafeArea/ScrollView/Viewport/Content"

local function OnCreate(self)
    base.OnCreate(self)
    self.componentInit = false
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.bg_btn = self:AddComponent(UIButton, bg_path)
    self.bg_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.back_btn = self:AddComponent(UIButton, back_path)
    self.back_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.scroll_view_go = self:AddComponent(UIBaseContainer, scroll_view_path)
    self.content_go = self:AddComponent(UIBaseContainer, content_path)
    self.componentInit = true
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    self.active = false
    self.reqs = {}
    self.heads = {}
    self.items = {}
end

local function DataDestroy(self)
    self:Clear()
    self.componentInit = false
    if self.tween then
        self.tween:Kill()
        self.tween = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
    self:ReInit()
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    local arrowType = self:GetUserData()
    
    self.content_go.transform.localPosition = VecZero
    self:CreateHeadsAndItems(function()
        CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content_go.transform)
        for _, item in pairs(self.items) do
            if item.template.type == arrowType then
                self:ScrollTo(item, function()
                end)
                break
            end
        end
    end)
end

local function ScrollTo(self, item, callback)
    if self.tween then
        self.tween:Kill()
    end
    local curY = -item.transform.localPosition.y
    if curY + item.rectTransform.sizeDelta.y > self.scroll_view_go.rectTransform.sizeDelta.y then
        local toY = Mathf.Clamp(-item.transform.localPosition.y, 0, self.content_go.rectTransform.sizeDelta.y - self.scroll_view_go.rectTransform.sizeDelta.y)
        self.tween = self.content_go.transform:DOLocalMoveY(toY, 0.5):SetDelay(0.3):OnComplete(function()
            if callback then
                callback()
            end
        end)
    else
        if callback then
            callback()
        end
    end
end

local function CreateHeadsAndItems(self, callback)
    local rawTemplates = DataCenter.DailyActivityManager:GetActivityOverviewList()
    
    -- 未解锁的活动中，只显示 unlock_new 值最小的
    local firstCloseTemplate = nil
    for _, template in ipairs(rawTemplates) do
        if not DataCenter.DailyActivityManager:CheckIfActIsOpen(template) then
            if firstCloseTemplate == nil or template.unlockLvNew < firstCloseTemplate.unlockLvNew then
                firstCloseTemplate = template
            end
        end
    end
    
    local templates = {}
    for _, template in ipairs(rawTemplates) do
        if DataCenter.DailyActivityManager:CheckIfActIsOpen(template) or template == firstCloseTemplate then
            table.insert(templates, template)
        end
    end
    
    local priorities = {}
    for _, template in ipairs(templates) do
        if not table.hasvalue(priorities, template.priority) then
            table.insert(priorities, template.priority)
        end
    end
    table.sort(priorities)
    
    local list = {}
    for _, priority in ipairs(priorities) do
        table.insert(list, { f = self.CreateHead, p = priority })
        for _, template in ipairs(templates) do
            if template.priority == priority then
                table.insert(list, { f = self.CreateItem, p = template.id })
            end
        end
    end
    
    local function CreateInternal(i)
        if i <= #list then
            list[i].f(self, list[i].p, function()
                CreateInternal(i + 1)
            end)
        else
            -- 全部创建完成
            if callback then
                callback()
            end
        end
    end
    
    CreateInternal(1)
end

local function CreateHead(self, priority, callback)
    if self.heads[priority] then
        self.heads[priority]:SetPriority(priority)
        if callback then
            callback()
        end
    else
        if self.reqs[priority] then
            self.reqs[priority]:Destroy()
        end
        self.reqs[priority] = self:GameObjectInstantiateAsync(UIAssets.UIEveryDayHead, function(req)
            local go = req.gameObject
            go.name = "Head_" .. priority
            go.transform:SetParent(self.content_go.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local head = self.content_go:AddComponent(UIEveryDayHead, go.name)
            head:SetPriority(priority)
            self.heads[priority] = head
            if callback then
                callback()
            end
        end)
    end
    return self.reqs[priority]
end

local function CreateItem(self, id, callback)
    if self.items[id] then
        self.items[id]:SetId(id)
        if callback then
            callback()
        end
    else
        if self.reqs[id] then
            self.reqs[id]:Destroy()
        end
        self.reqs[id] = self:GameObjectInstantiateAsync(UIAssets.UIEveryDayItem, function(req)
            local go = req.gameObject
            go.name = "Item_" .. id
            go.transform:SetParent(self.content_go.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local item = self.content_go:AddComponent(UIEveryDayItem, go.name)
            item:SetId(id)
            self.items[id] = item
            if callback then
                callback()
            end
        end)
    end
    return self.reqs[id]
end

local function Clear(self)
    if self.componentInit then
        self.content_go:RemoveComponents(UIEveryDayHead)
        self.content_go:RemoveComponents(UIEveryDayItem)
        self.items = {}
        self.heads = {}
        for _, req in pairs(self.reqs) do
            req:Destroy()
        end
        self.reqs = {}
    end
end

UIEveryDay.OnCreate = OnCreate
UIEveryDay.OnDestroy = OnDestroy
UIEveryDay.OnEnable = OnEnable
UIEveryDay.OnDisable = OnDisable
UIEveryDay.ComponentDefine = ComponentDefine
UIEveryDay.ComponentDestroy = ComponentDestroy
UIEveryDay.DataDefine = DataDefine
UIEveryDay.DataDestroy = DataDestroy
UIEveryDay.OnAddListener = OnAddListener
UIEveryDay.OnRemoveListener = OnRemoveListener

UIEveryDay.ReInit = ReInit
UIEveryDay.ScrollTo = ScrollTo
UIEveryDay.CreateHeadsAndItems = CreateHeadsAndItems
UIEveryDay.CreateHead = CreateHead
UIEveryDay.CreateItem = CreateItem
UIEveryDay.Clear = Clear

return UIEveryDay
