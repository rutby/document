---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/9/25 21:23
---

local UIEveryDayItem = BaseClass("UIEveryDayItem", UIBaseContainer)
local base = UIBaseContainer
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local UIGray = CS.UIGray

local bg_path = "Bg"
local pic_path = "Bg/Pic"
local icon_bg_path = "Bg/IconBg"
local icon_path = "Bg/IconBg/Icon"
local title_path = "Bg/Title"
local desc_bg_path = "Bg/DescBg"
local desc_path = "Bg/DescBg/Desc"
local need_path = "Bg/Need"
local slider_path = "Bg/Slider"
local slider_text_path = "Bg/Slider/SliderText"
local item_path = "Bg/List/UICommonItem_%s"
local btn_path = "Bg/Btn"
local btn_text_path = "Bg/Btn/BtnText"
local complete_path = "Bg/Complete"
local complete_text_path = "Bg/Complete/CompleteText"
local new_path = "Bg/New"
local red_path = "Bg/Red"
local red_text_path = "Bg/Red/RedText"
local black_path = "Bg/Black"

local ItemCount = 3

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.bg_btn = self:AddComponent(UIButton, bg_path)
    self.bg_btn:SetOnClick(function()
        self:OnClick()
    end)
    self.pic_image = self:AddComponent(UIImage, pic_path)
    self.icon_bg_go = self:AddComponent(UIBaseContainer, icon_bg_path)
    self.icon_image = self:AddComponent(UIImage, icon_path)
    self.title_text = self:AddComponent(UIText, title_path)
    self.desc_bg_go = self:AddComponent(UIBaseContainer, desc_bg_path)
    self.desc_text = self:AddComponent(UIText, desc_path)
    self.need_text = self:AddComponent(UIText, need_path)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.slider_text = self:AddComponent(UIText, slider_text_path)
    self.items = {}
    for i = 1, ItemCount do
        self.items[i] = self:AddComponent(UICommonItem, string.format(item_path, i))
    end
    self.btn = self:AddComponent(UIButton, btn_path)
    self.btn:SetOnClick(function()
        self:OnClick()
    end)
    self.btn_text = self:AddComponent(UIText, btn_text_path)
    self.complete_go = self:AddComponent(UIBaseContainer, complete_path)
    self.complete_text = self:AddComponent(UIText, complete_text_path)
    self.complete_text:SetLocalText(170008)
    self.new_go = self:AddComponent(UIBaseContainer, new_path)
    self.red_go = self:AddComponent(UIBaseContainer, red_path)
    self.red_text = self:AddComponent(UIText, red_text_path)
    self.black_go = self:AddComponent(UIBaseContainer, black_path)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.id = 0
    self.template = nil
end

local function DataDestroy(self)
    
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function SetId(self, id)
    DataCenter.DailyActivityManager:RemoveOneOverviewFromNew(id)
    local template = DataCenter.DailyActivityManager:GetTemplate(id)
    self.template = template
    if template.priority == EveryDayPriority.Yellow then
        self.bg_btn:LoadSprite(string.format(LoadPath.UIEveryDay, "UIDaily-tasks_bg_yellow"))
    elseif template.priority == EveryDayPriority.Purple then
        self.bg_btn:LoadSprite(string.format(LoadPath.UIEveryDay, "UIDaily-tasks_bg_purple"))
    elseif template.priority == EveryDayPriority.Blue then
        self.bg_btn:LoadSprite(string.format(LoadPath.UIEveryDay, "UIDaily-tasks_bg_blue"))
    end
    
    self.title_text:SetLocalText(template.activityName)
    self.pic_image:LoadSprite(string.format(LoadPath.UIEveryDay, template.activityIconNew))
    for i = 1, ItemCount do
        if i <= #template.rewards then
            self.items[i]:SetActive(true)
            local param = {}
            param.rewardType = RewardType.GOODS
            param.itemId = template.rewards[i]
            self.items[i]:ReInit(param)
        else
            self.items[i]:SetActive(false)
        end
    end

    if not string.IsNullOrEmpty(template.special_reward) then
        self.icon_image:LoadSprite(DataCenter.RewardManager:GetPicByType(RewardType.GOODS, template.special_reward))
        self.icon_bg_go:SetActive(true)
    else
        self.icon_bg_go:SetActive(false)
    end
    
    local open, tip = DataCenter.DailyActivityManager:CheckIfActIsOpen(template)
    if open then
        UIGray.SetGray(self.btn.transform, false, true)
        self.btn_text:SetLocalText(110003)
        self.need_text:SetActive(false)
        self.desc_bg_go:SetActive(true)
        self.black_go:SetActive(false)
        
        local isNew = DataCenter.DailyActivityManager:CheckIfOverviewHasNew(template.id)
        if isNew then
            self.new_go:SetActive(true)
            self.red_go:SetActive(false)
        else
            self.new_go:SetActive(false)
            local redCount = DataCenter.DailyActivityManager:GetOverviewRedCount(template)
            self.red_go:SetActive(redCount > 0)
            --self.red_text:SetText(redCount)
        end
        
        local _, curNum, maxNum, proTip, commonTip, specTip = DataCenter.DailyActivityManager:GetOverviewDesc(template)
        local completed
        if template.type == ActivityOverviewType.MineCave then
            completed = DataCenter.MineCaveManager:CheckIfIsAllComplete()
        else
            completed = maxNum > 0 and curNum >= maxNum
        end
        self.btn:SetActive(not completed)
        if commonTip then
            self.slider:SetActive(false)
            self.desc_text:SetText(commonTip)
            self.complete_go:SetActive(completed)
        elseif specTip then
            self.slider:SetActive(false)
            self.desc_text:SetText(specTip)
            self.complete_go:SetActive(false)
        else
            self.slider:SetActive(maxNum > 0)
            self.slider:SetValue(maxNum > 0 and curNum / maxNum or 1)
            self.slider_text:SetText(curNum .. "/" .. maxNum)
            self.desc_text:SetText(proTip)
            self.complete_go:SetActive(completed)
        end
    else
        UIGray.SetGray(self.btn.transform, true, false)
        self.btn:SetActive(true)
        self.btn_text:SetLocalText(120050)
        self.desc_bg_go:SetActive(false)
        self.need_text:SetActive(true)
        self.need_text:SetText(tip)
        self.red_go:SetActive(false)
        self.black_go:SetActive(true)
        self.slider:SetActive(false)
        self.complete_go:SetActive(false)
    end
end

local function OnClick(self)
    local open, tip = DataCenter.DailyActivityManager:CheckIfActIsOpen(self.template)
    if open then
        DataCenter.DailyActivityManager:JumpToActOverview(self.template.type)
        DataCenter.UINoInputManager:CloseWindow(UIWindowNames.UIEveryDay)
    else
        UIUtil.ShowTips(tip)
    end
end

local function GetBtnPos(self)
    return self.btn.transform.position
end

UIEveryDayItem.OnCreate = OnCreate
UIEveryDayItem.OnDestroy = OnDestroy
UIEveryDayItem.OnEnable = OnEnable
UIEveryDayItem.OnDisable = OnDisable
UIEveryDayItem.ComponentDefine = ComponentDefine
UIEveryDayItem.ComponentDestroy = ComponentDestroy
UIEveryDayItem.DataDefine = DataDefine
UIEveryDayItem.DataDestroy = DataDestroy
UIEveryDayItem.OnAddListener = OnAddListener
UIEveryDayItem.OnRemoveListener = OnRemoveListener

UIEveryDayItem.SetId = SetId
UIEveryDayItem.OnClick = OnClick
UIEveryDayItem.GetBtnPos = GetBtnPos

return UIEveryDayItem