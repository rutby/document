---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/10 17:49
---

local UICampBonusFetter = BaseClass("UICampBonusFetter", UIBaseContainer)
local base = UIBaseContainer
local UIGray = CS.UIGray

local this_path = ""
local leaf_path = "Leaf%s"

local LEAF_PATH = string.format(LoadPath.UITroopsNew, "UITroopsNew_img_fetters_%s_%s")
local LEAF_COUNT = 3

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.btn = self:AddComponent(UIButton, this_path)
    self.btn:SetOnClick(function()
        self:OnClick()
    end)
    self.leaf_images = {}
    for i = 1, LEAF_COUNT do
        self.leaf_images[i] = self:AddComponent(UIImage, string.format(leaf_path, i))
    end
end

local function ComponentDestroy(self)
    self.btn = nil
    self.leaf_images = nil
end

local function DataDefine(self)
    self.onClick = nil
end

local function DataDestroy(self)
    self.onClick = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function SetData(self, type, camps, gray)
    local camp1 = gray and 0 or camps[1]
    local camp2 = gray and 1 or camps[2]
    if type == CampEffectType.Fetter_3 then
        self.leaf_images[1]:SetActive(false)
        self.leaf_images[2]:SetActive(true)
        self.leaf_images[3]:SetActive(true)
        self.leaf_images[2]:LoadSprite(string.format(LEAF_PATH, 2, camp1))
        self.leaf_images[3]:LoadSprite(string.format(LEAF_PATH, 3, camp1))
    elseif type == CampEffectType.Fetter_3_2 then
        self.leaf_images[1]:SetActive(true)
        self.leaf_images[2]:SetActive(true)
        self.leaf_images[3]:SetActive(true)
        self.leaf_images[1]:LoadSprite(string.format(LEAF_PATH, 1, camp2))
        self.leaf_images[2]:LoadSprite(string.format(LEAF_PATH, 2, camp1))
        self.leaf_images[3]:LoadSprite(string.format(LEAF_PATH, 3, camp1))
    elseif type == CampEffectType.Fetter_4 then
        self.leaf_images[1]:SetActive(true)
        self.leaf_images[2]:SetActive(true)
        self.leaf_images[3]:SetActive(false)
        self.leaf_images[1]:LoadSprite(string.format(LEAF_PATH, 1, camp1))
        self.leaf_images[2]:LoadSprite(string.format(LEAF_PATH, 2, camp1))
    elseif type == CampEffectType.Fetter_5 then
        self.leaf_images[1]:SetActive(true)
        self.leaf_images[2]:SetActive(true)
        self.leaf_images[3]:SetActive(true)
        self.leaf_images[1]:LoadSprite(string.format(LEAF_PATH, 1, camp1))
        self.leaf_images[2]:LoadSprite(string.format(LEAF_PATH, 2, camp1))
        self.leaf_images[3]:LoadSprite(string.format(LEAF_PATH, 3, camp1))
    else
        self.leaf_images[1]:SetActive(false)
        self.leaf_images[2]:SetActive(false)
        self.leaf_images[3]:SetActive(false)
    end
    UIGray.SetGray(self.btn.transform, gray, true)
end

function UICampBonusFetter:SetHeroDataList(heroDataList)
    local info = DataCenter.CampEffectManager:GetCampEffectInfoByHeroData(heroDataList)
    if info ~= nil then
        self:SetData(info.type, info.camps, false)
    end
end

local function SetOnClick(self, onClick)
    self.onClick = onClick
end

local function Clear(self)
    self:SetData(CampEffectType.None, {}, false)
end

local function OnClick(self)
    if self.onClick then
        self.onClick()
    end
end

UICampBonusFetter.OnCreate = OnCreate
UICampBonusFetter.OnDestroy = OnDestroy
UICampBonusFetter.ComponentDefine = ComponentDefine
UICampBonusFetter.ComponentDestroy = ComponentDestroy
UICampBonusFetter.DataDefine = DataDefine
UICampBonusFetter.DataDestroy = DataDestroy
UICampBonusFetter.OnEnable = OnEnable
UICampBonusFetter.OnDisable = OnDisable

UICampBonusFetter.SetData = SetData
UICampBonusFetter.SetOnClick = SetOnClick
UICampBonusFetter.Clear = Clear
UICampBonusFetter.OnClick = OnClick

return UICampBonusFetter