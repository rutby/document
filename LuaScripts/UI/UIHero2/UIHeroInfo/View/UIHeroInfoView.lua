---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/12/20 18:25
---

local UIHeroInfoView = BaseClass("UIHeroInfoView", UIBaseView)
local base = UIBaseView
local UICommonTab = require "UI.UICommonTab.UICommonTab"
local UIHeroEtoileList = require "UI.UIHero2.Common.UIHeroEtoileList"
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local UIHeroInfoQualityPreview = require "UI.UIHero2.UIHeroInfo.Component.UIHeroInfoQualityPreview"
local UIHeroInfoSkillItem = require "UI.UIHero2.UIHeroInfo.Component.UIHeroInfoSkillItem"
local UIHeroInfoDetailPanel = require "UI.UIHero2.UIHeroInfo.Component.UIHeroInfoDetailPanel"
local UIHeroEquipNode = require "UI.UIHeroEquip.Component.UIHeroEquipNode"
local UIHeroSkillUnlockDesList = require "UI.UIHero2.UIHeroInfo.Component.UIHeroSkillUnlockDesList"
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray

local title_path = "UICommonFullTop/imgTitle/Common_img_title/titleText"
local close_path = "UICommonFullTop/CloseBtn"
-- local hero_book_node_path = "Root/BookNode"
local hero_book_path = "Root/BookBtn"
local hero_bookred_path = "Root/BookBtn/Red"
local bg_path = "Bg"
local mask_path = "Root/Mask"
local mask_half_path = "Root/Mask/MaskHalf"
local tag_list_path = "Root/Tags"
local camp_path = "Root/Tags/Camp"
local tag_path = "Root/Tags/Tag%s"
local hero_mask_path = "Root/HeroMask"
local hero_image_path = "Root/HeroMask/HeroImage"
local hero_spine_path = "Root/HeroMask/HeroSpine"
local hero_spine_rect_path = "Root/HeroMask/HeroSpineRect"
local left_path = "Root/Left"
local right_path = "Root/Right"
local power_bg_path = "Root/PowerBg"
local power_path = "Root/PowerBg/Power"
local power_effect_path = "Root/PowerBg/PowerEffect"
local etoile_list_path = "Root/UIHeroEtoileList"
local tab_list_path = "Root/TabList"
local tab_path = "Root/TabList/Tab%s"
local tab_red_path = "Root/TabList/Tab%s/TabRed%s"

-- info
local info_path = "Root/Info"
local rarity_path = "Root/Rarity"
local quality_up_path = "Root/Info/QualityUp"
local quality_up_red_path = "Root/Info/QualityUp/QualityUpRed"
local attack_bg_path = "Root/Info/AttrBg/AttackBg"
local attack_path = "Root/Info/AttrBg/AttackBg/Attack"
local AttackTitle_path = "Root/Info/AttrBg/AttackBg/AttackTitle"
local defence_bg_path = "Root/Info/AttrBg/DefenceBg"
local defence_path = "Root/Info/AttrBg/DefenceBg/Defence"
local DefenceTitle_path = "Root/Info/AttrBg/DefenceBg/DefenceTitle"
local army_bg_path = "Root/Info/AttrBg/ArmyBg"
local army_path = "Root/Info/AttrBg/ArmyBg/Army"
local ArmyTitle_path = "Root/Info/AttrBg/ArmyBg/ArmyTitle"
local level_path = "Root/Info/Level"
local level2_path = "Root/Info/Level2"
local level_effect_path = "Root/Info/LevelEffect"
local upgrade_path = "Root/Info/Upgrade"
local upgrade_red_path = "Root/Info/Upgrade/UpgradeRed"
local upgrade_text_path = "Root/Info/Upgrade/UpgradeText"
local upgrade_hori_path = "Root/Info/UpgradeHori"
local upgrade_cost_path = "Root/Info/UpgradeHori/UpgradeCost"
local upgrade_icon_path = "Root/Info/UpgradeHori/UpgradeIcon"
local upgrade_effect_path = "Root/UpgradeEffect"
local need_main_hori_path = "Root/Info/NeedMainHori"
local need_main_path = "Root/Info/NeedMainHori/NeedMain"
local need_main_jump_path = "Root/Info/NeedMainHori/NeedMainJump"
local need_main_jump_text_path = "Root/Info/NeedMainHori/NeedMainJump/NeedMainJumpText"
local detail_path = "Root/Info/Detail"
local detail_panel_path = "Root/DetailPanel"

-- skill
local skill_path = "Root/Skill"
local skill_item_path = "Root/Skill/SkillItem%s"
local skill_title_path = "Root/Skill/SkillTitle"
local skill_type_path = "Root/Skill/SkillType"
local skill_desc_path = "Root/Skill/Scroll/Viewport/Content/SkillDesc"
local skill_effect_title_path = "Root/Skill/Scroll/Viewport/Content/SkillEffectTitle"
local skill_effect_desc_path = "Root/Skill/Scroll/Viewport/Content/SkillEffectDesc"
local skill_upgrade_path = "Root/Skill/SkillUpgrade"
local skill_upgrade_text_path = "Root/Skill/SkillUpgrade/Vert/SkillUpgradeText"
local skill_upgrade_icon_path = "Root/Skill/SkillUpgrade/Vert/Hori/SkillUpgradeIcon"
local skill_upgrade_cost_path = "Root/Skill/SkillUpgrade/Vert/Hori/SkillUpgradeCost"
local skill_condition_path = "Root/Skill/SkillCondition"
local skill_unlock_path = "Root/Skill/Scroll/Viewport/Content/UIHeroSkillUnlockDesList"

-- quality
local quality_path = "Root/Quality"
local quality_preview_path = "Root/Quality/Preview"
local quality_btn_path = "Root/Quality/QualityBtn"
local quality_btn_text_path = "Root/Quality/QualityBtn/QualityBtnText"
local quality_progress_path = "Root/Quality/QualityProgress"
local quality_count_path = "Root/Quality/QualityProgress/QualityCount"
local quality_add_path = "Root/Quality/QualityProgress/QualityAdd"
local quality_item_path = "Root/Quality/QualityProgress/QualityItem"
local quality_desc_path = "Root/Quality/QualityDesc"
local medal_path = "Root/Quality/Medal"
local medal_count_path = "Root/Quality/Medal/MedalCount"
local medal_desc_path = "Root/Quality/Medal/MedalDesc"
local etoile_corner_path = "Root/Quality/EtoileCorner"

-- equip
local equip_path = "Root/Equip"

local TagCount = 3
local TabCount = 4
local SkillCount = 5

local TabType =
{
    Info = 1,
    Skill = 2,
    Equip = 3,
    Quality = 4,
}

local TrailPrefab = "Assets/_Art/Effect/prefab/ui/UIFurnitureUpgrade/Eff_UIFurnitureUpgrade_Trail.prefab"
local TrailPreDelay = 0.7
local TrailPostDelay = 0.3
local TrailDuration = 0.35
local TrailOffsetX = 60

local ArrowSecondType =
{
    Star = 1,--二次点击手指类型
}

local MaskColor =
{
    [1] = Color.New(0.6235294, 0.4039216, 0.2313726),
    [2] = Color.New(0.4235294, 0.2549020, 0.6000000),
    [3] = Color.New(0.2470588, 0.4470589, 0.6078432),
    [4] = Color.New(1.0000000, 1.0000000, 1.0000000),
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

local function OnDestroy(self)
    self:CheckHeroDataChange()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.back_btn = self:AddComponent(UIButton, close_path)
    self.back_btn:SetOnClick(function()
        self:OnBackClick()
    end)
    self.hero_book_btn = self:AddComponent(UIButton,hero_book_path)
    self.hero_book_btn:SetOnClick(function()
        self:OnHeroBookBtnClick()
    end)
    -- self.hero_booknode = self:AddComponent(UIBaseContainer, hero_book_node_path)
    self.hero_book_red = self:AddComponent(UIBaseContainer, hero_bookred_path)
    self.bg_image = self:AddComponent(UIImage, bg_path)
    self.mask_image = self:AddComponent(UIImage, mask_path)
    self.mask_half_image = self:AddComponent(UIImage, mask_half_path)
    self.tag_list_go = self:AddComponent(UIBaseContainer, tag_list_path)
    self.camp_btn = self:AddComponent(UIButton, camp_path)
    self.camp_btn:SetOnClick(function()
        self:OnCampClick()
    end)
    self.tag_btns = {}
    for i = 1, TagCount do
        self.tag_btns[i] = self:AddComponent(UIButton, string.format(tag_path, i))
        self.tag_btns[i]:SetOnClick(function()
            self:OnTagClick(i)
        end)
    end
    self.left_btn = self:AddComponent(UIButton, left_path)
    self.left_btn:SetOnClick(function()
        self:OnLeftClick()
    end)
    self.right_btn = self:AddComponent(UIButton, right_path)
    self.right_btn:SetOnClick(function()
        self:OnRightClick()
    end)
    self.tab_list_go = self:AddComponent(UIBaseContainer, tab_list_path)
    self.tabs = {}
    self.tab_red_goes = {}
    for i = 1, TabCount do
        self.tabs[i] = self:AddComponent(UICommonTab, string.format(tab_path, i))
        self.tabs[i]:SetSelected(false)
        self.tabs[i]:SetOnClick(function()
            self:OnTabClick(i)
        end)
        self.tab_red_goes[i] = self:AddComponent(UIBaseContainer, string.format(tab_red_path, i, i))
    end
    self.tabs[TabType.Info]:SetName(Localization:GetString("130063"))
    self.tabs[TabType.Skill]:SetName(Localization:GetString("150106"))
    self.tabs[TabType.Equip]:SetName(Localization:GetString(GameDialogDefine.HERO_EQUIP23))

    self.hero_mask_go = self:AddComponent(UIBaseContainer, hero_mask_path)
    self.hero_image = self:AddComponent(UIImage, hero_image_path)
    self.hero_spine = self.transform:Find(hero_spine_path):GetComponent(typeof(CS.Spine.Unity.SkeletonGraphic))
    self.hero_spine_rect_go = self:AddComponent(UIBaseContainer, hero_spine_rect_path)
    
    -- info
    self.info_go = self:AddComponent(UIBaseContainer, info_path)
    self.rarity_image = self:AddComponent(UIImage, rarity_path)
    self.power_bg_go = self:AddComponent(UIBaseContainer, power_bg_path)
    self.power_text = self:AddComponent(UITextMeshProUGUIEx, power_path)
    self.power_effect_go = self:AddComponent(UIBaseContainer, power_effect_path)
    self.etoile_list = self:AddComponent(UIHeroEtoileList, etoile_list_path)
    self.quality_up_btn = self:AddComponent(UIButton, quality_up_path)
    self.quality_up_btn:SetOnClick(function()
        self:OnQualityUpClick()
    end)
    self.quality_up_red_go = self:AddComponent(UIBaseContainer, quality_up_red_path)
    self.attack_btn = self:AddComponent(UIButton, attack_bg_path)
    self.attack_btn:SetOnClick(function()
        self:OnAttackClick()
    end)
    self.attack_text = self:AddComponent(UITextMeshProUGUIEx, attack_path)
    self.AttackTitle = self:AddComponent(UITextMeshProUGUIEx, AttackTitle_path)
    self.AttackTitle:SetLocalText(321421)
    self.defence_btn = self:AddComponent(UIButton, defence_bg_path)
    self.defence_btn:SetOnClick(function()
        self:OnDefenceClick()
    end)
    self.defence_text = self:AddComponent(UITextMeshProUGUIEx, defence_path)
    self.DefenceTitle = self:AddComponent(UITextMeshProUGUIEx, DefenceTitle_path)
    self.DefenceTitle:SetLocalText(321422)
    self.army_btn = self:AddComponent(UIButton, army_bg_path)
    self.army_btn:SetOnClick(function()
        self:OnArmyClick()
    end)
    self.army_text = self:AddComponent(UITextMeshProUGUIEx, army_path)
    self.ArmyTitle = self:AddComponent(UITextMeshProUGUIEx, ArmyTitle_path)
    self.ArmyTitle:SetLocalText(150132)
    self.level_text = self:AddComponent(UITextMeshProUGUIEx, level_path)
    self.level2_text = self:AddComponent(UITextMeshProUGUIEx, level2_path)
    self.level_effect_go = self:AddComponent(UIBaseContainer, level_effect_path)

    self.upgrade_btn = self:AddComponent(UIButton, upgrade_path)
    self.upgrade_btn:SetOnClick(function()
        self:OnUpgradeClick()
    end)
    self.upgrade_red_go = self:AddComponent(UIBaseContainer, upgrade_red_path)
    self.upgrade_text = self:AddComponent(UITextMeshProUGUIEx, upgrade_text_path)
    self.upgrade_text:SetLocalText(161002)
    self.upgrade_hori_go = self:AddComponent(UIBaseContainer, upgrade_hori_path)
    self.upgrade_cost_icon = self:AddComponent(UIImage, upgrade_icon_path)
    self.upgrade_cost_text = self:AddComponent(UITextMeshProUGUIEx, upgrade_cost_path)
    self.upgrade_effect_go = self:AddComponent(UIBaseContainer, upgrade_effect_path)
    self.need_main_hori_go = self:AddComponent(UIBaseContainer, need_main_hori_path)
    self.need_main_text = self:AddComponent(UITextMeshProUGUIEx, need_main_path)
    self.need_main_jump_btn = self:AddComponent(UIButton, need_main_jump_path)
    self.need_main_jump_btn:SetOnClick(function()
        self:OnNeedMainJumpClick()
    end)
    self.need_main_jump_text = self:AddComponent(UITextMeshProUGUIEx, need_main_jump_text_path)
    self.need_main_jump_text:SetLocalText(110003)
    self.detail_btn = self:AddComponent(UIButton, detail_path)
    self.detail_btn:SetOnClick(function()
        self:OnDetailClick()
    end)
    self.detail_panel = self:AddComponent(UIHeroInfoDetailPanel, detail_panel_path)
    
    -- skill
    self.skill_go = self:AddComponent(UIBaseContainer, skill_path)
    self.skill_items = {}
    for i = 1, SkillCount do
        self.skill_items[i] = self:AddComponent(UIHeroInfoSkillItem, string.format(skill_item_path, i))
        self.skill_items[i]:SetShowRed(false)
        self.skill_items[i]:SetOnClick(function()
            self:OnSkillClick(i)
        end)
    end
    self.skill_title_text = self:AddComponent(UITextMeshProUGUIEx, skill_title_path)
    self.skill_type_text = self:AddComponent(UITextMeshProUGUIEx, skill_type_path)
    self.skill_desc_text = self:AddComponent(UITextMeshProUGUIEx, skill_desc_path)
    self.skill_effect_title_text = self:AddComponent(UITextMeshProUGUIEx, skill_effect_title_path)
    self.skill_effect_title_text:SetLocalText(150166)
    self.skill_effect_desc_text = self:AddComponent(UITextMeshProUGUIEx, skill_effect_desc_path)
    self.skill_upgrade_btn = self:AddComponent(UIButton, skill_upgrade_path)
    self.skill_upgrade_btn:SetOnClick(function()
        self:OnSkillUpgradeClick()
    end)
    self.skill_upgrade_text = self:AddComponent(UITextMeshProUGUIEx, skill_upgrade_text_path)
    self.skill_upgrade_icon_image = self:AddComponent(UIImage, skill_upgrade_icon_path)
    self.skill_upgrade_cost_text = self:AddComponent(UITextMeshProUGUIEx, skill_upgrade_cost_path)
    self.skill_condition_text = self:AddComponent(UITextMeshProUGUIEx, skill_condition_path)
    self.skill_unlock_node = self:AddComponent(UIHeroSkillUnlockDesList, skill_unlock_path)
    
    -- quality
    self.quality_go = self:AddComponent(UIBaseContainer, quality_path)
    self.quality_preview = self:AddComponent(UIHeroInfoQualityPreview, quality_preview_path)
    self.quality_btn = self:AddComponent(UIButton, quality_btn_path)
    self.quality_btn:SetOnClick(function()
        self:OnQualityBtnClick()
    end)
    self.quality_btn_text = self:AddComponent(UITextMeshProUGUIEx, quality_btn_text_path)
    self.quality_btn_text:SetLocalText(129249)
    self.quality_progress_slider = self:AddComponent(UISlider, quality_progress_path)
    self.quality_count_text = self:AddComponent(UITextMeshProUGUIEx, quality_count_path)
    self.quality_add_btn = self:AddComponent(UIButton, quality_add_path)
    self.quality_add_btn:SetOnClick(function()
        self:OnQualityAddClick()
    end)
    self.quality_item_image = self:AddComponent(UIImage, quality_item_path)
    self.quality_desc_text = self:AddComponent(UITextMeshProUGUIEx, quality_desc_path)
    self.quality_desc_text:SetLocalText(129122)
    self.medal_btn = self:AddComponent(UIButton, medal_path)
    self.medal_btn:SetOnClick(function()
        self:OnMedalClick()
    end)
    self.medal_count_text = self:AddComponent(UITextMeshProUGUIEx, medal_count_path)
    self.medal_desc_text = self:AddComponent(UITextMeshProUGUIEx, medal_desc_path)
    self.medal_desc_text:SetLocalText(110029)
    self.etoile_corner_image = self:AddComponent(UIImage, etoile_corner_path)

    -- equip
    self.equip_go = self:AddComponent(UIHeroEquipNode, equip_path)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.tabType = 0
    self.spinePath = ""
    self.skillIds = {}
    self.selectSkillId = 0
    
    --self.canLevelUp = true -- 防连点
    self.isHeroDataChange = false
    self.trailIndex = 0
    self.trailReqs = {} -- Dict<index, InstanceRequest>
    self.trailSeqs = {} -- Dict<index, Sequence>
    self.showArrow = 0
    self.showSecondArrow = 0
    self.next_timer_callback = function()
        self:NextFrameTimeCallback()
    end

    self.playSound = false
end

local function DataDestroy(self)
    self:DeleteNextFrameTimer()
    self:ClearTrail()
    self.playSound = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
end

local function OnDisable(self)
    if self.spinePath then
        CommonUtil.UnloadAsset(self.spinePath, "UIHeroInfoSpine")
    end
    self.spinePath = nil
    self.active = false
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.HeroBeyondSuccess, self.RefreshInfo)
    self:AddUIListener(EventId.ResourceUpdated, self.RefreshInfo)
    self:AddUIListener(EventId.RefreshItems, self.RefreshSkill)
    self:AddUIListener(EventId.HeroLvUpSuccess, self.OnHeroLvUpSuccess)
    self:AddUIListener(EventId.SkillUpgradeEnd, self.OnSkillUpgradeEnd)
    self:AddUIListener(EventId.HeroAdvanceSuccess, self.OnHeroAdvanceSuccess)
    self:AddUIListener(EventId.HeroRankUpSuccess, self.OnHeroRankUpSuccess)
    self:AddUIListener(EventId.HeroMedalExchanged, self.RefreshQuality)
    self:AddUIListener(EventId.HeroStarStoryResult, self.RefreshBookRed)
    self:AddUIListener(EventId.HeroEquipInstall, self.RefreshHeroEquip)
    self:AddUIListener(EventId.HeroEquipUninstall, self.RefreshHeroEquip)
    self:AddUIListener(EventId.HeroEquipUpgrade, self.RefreshHeroEquip)
    self:AddUIListener(EventId.HeroEquipPromotion, self.RefreshHeroEquip)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.HeroBeyondSuccess, self.RefreshInfo)
    self:RemoveUIListener(EventId.ResourceUpdated, self.RefreshInfo)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshSkill)
    self:RemoveUIListener(EventId.HeroLvUpSuccess, self.OnHeroLvUpSuccess)
    self:RemoveUIListener(EventId.SkillUpgradeEnd, self.OnSkillUpgradeEnd)
    self:RemoveUIListener(EventId.HeroAdvanceSuccess, self.OnHeroAdvanceSuccess)
    self:RemoveUIListener(EventId.HeroRankUpSuccess, self.OnHeroRankUpSuccess)
    self:RemoveUIListener(EventId.HeroMedalExchanged, self.RefreshQuality)
    self:RemoveUIListener(EventId.HeroStarStoryResult, self.RefreshBookRed)
    self:RemoveUIListener(EventId.HeroEquipUpgrade, self.RefreshHeroEquip)
    self:RemoveUIListener(EventId.HeroEquipPromotion, self.RefreshHeroEquip)
    self:RemoveUIListener(EventId.HeroEquipInstall, self.RefreshHeroEquip)
    self:RemoveUIListener(EventId.HeroEquipUninstall, self.RefreshHeroEquip)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    local para1, para2, para3, para4, para5 = self:GetUserData()
    self.viewType = para1
    if self.viewType == HeroInfoViewType.HeroList then
        local heroUuid = para2
        self.heroUuids = {}
        for _, v in ipairs(para3 or {}) do
            if v ~= HireHeroUuid then
                table.insert(self.heroUuids, v)
            end
        end
        self.heroIndex = table.indexof(self.heroUuids, heroUuid)
        self.showArrow = para4
    elseif self.viewType == HeroInfoViewType.HeroPreview then
        self.heroData = para2
        self.heroDataList = para3
        --self.heroIndex = table.indexof(self.heroDataList, self.heroData)
    end
    
    local tab = para5 or TabType.Info
    self:OnTabClick(tab)
    self.detail_panel:Hide()
end

local function Refresh(self)
    if self.viewType == HeroInfoViewType.HeroList then
        self.heroUuid = self.heroUuids[self.heroIndex]
        self.heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    end
    self.heroId = self.heroData.heroId
    self.skillIds = HeroUtils.GetHeroSkillList(self.heroId, self.heroData:GetCurMilitaryRankId())
    self.selectSkillId = self.skillIds[1]
    
    self.power_effect_go:SetActive(false)
    self.level_effect_go:SetActive(false)
    self.upgrade_effect_go:SetActive(false)
    self:ClearTrail()
    
    self:RefreshHero()
    self:RefreshTags()
    self:RefreshPower()
    self:RefreshEtoileList()
    self:RefreshTabs()
    self:RefreshInfo()
    self:RefreshSkill()
    self:RefreshEquip()
    self:RefreshQuality()
    self:RefreshSwitchBtns()
    self:RefreshTabRed()
    self:AddNextFrameTimer()
    self:RefreshBook()
    self:RefreshBookRed()
end

local function RefreshBook(self)
    if LuaEntry.DataConfig:CheckSwitch("hero_background") then
        local inHistory = DataCenter.HeroDataManager:IsInHistory(self.heroId)
        self.hero_book_btn:SetActive(inHistory)
    else
        self.hero_book_btn:SetActive(false)
    end
end 

local function RefreshBookRed(self)
    if LuaEntry.DataConfig:CheckSwitch("hero_background") then
        local isShow = self.heroData:HeroBookRedPoint()
        self.hero_book_red:SetActive(isShow)
    else
        self.hero_book_red:SetActive(false)
    end
end 

local function RefreshHero(self)
    self.bg_image:LoadSprite("Assets/Main/Sprites/UI/UIHeroDetail/New/hero_beijing_" .. self.heroData.rarity)
    self.mask_half_image:LoadSprite("Assets/Main/Sprites/UI/UIHeroDetail/New/hero_mask_" .. self.heroData.rarity)
    self.mask_image:SetColor(MaskColor[self.heroData.rarity])
    
    self.title_text:SetText(HeroUtils.GetHeroNameByConfigId(self.heroId))
    local maskPos = self.hero_mask_go.rectTransform.localPosition
    maskPos.x = (self.tabType == TabType.Quality and - 120 or 0)
    self.hero_mask_go.rectTransform.localPosition = maskPos
    self.hero_image:SetActive(false)
    self.hero_spine.gameObject:SetActive(false)
    
    local curSpinePath = HeroUtils.GetSpinePath(self.heroId)
    if curSpinePath then
        if self.spinePath ~= curSpinePath then
            if self.spinePath then
                CommonUtil.UnloadAsset(self.spinePath, "UIHeroInfoSpine")
            end
            self.spinePath = curSpinePath
            CommonUtil.LoadAsset(self.spinePath, "UIHeroInfoSpine", typeof(CS.Spine.Unity.SkeletonDataAsset), function(asset)
                if asset then
                    self.hero_spine.gameObject:SetActive(true)
                    self.hero_spine.skeletonDataAsset = asset
                    self.hero_spine:Initialize(true)
                    self.hero_spine.AnimationState:SetAnimation(0, "Idle", true)
                end
            end) 
        else
            self.hero_spine.gameObject:SetActive(true)
        end
    else
        local picPath = HeroUtils.GetHeroBigPic(self.heroId)
        self.hero_image:LoadSprite(picPath)
        self.hero_image:SetActive(true)
    end
end

local function RefreshSwitchBtns(self)
    local showBtn = false
    if self.viewType == HeroInfoViewType.HeroList then
        if self.tabType == TabType.Info or self.tabType == TabType.Skill or self.tabType == TabType.Equip then
            showBtn = true
        end
    end
    self.left_btn:SetActive(showBtn)
    self.right_btn:SetActive(showBtn)
end

local function RefreshTags(self)
    if self.tabType == TabType.Info or self.tabType == TabType.Quality then
        self.camp_btn:LoadSprite(HeroUtils.GetCampIconPath(self.heroData:GetCamp()))
        local tags = HeroUtils.GetTagsByHeroId(self.heroId)
        for i = 1, TagCount do
            local tag = tags[i]
            if tag then
                local icon = HeroUtils.GetTagIconAndName(tag)
                self.tag_btns[i]:LoadSprite(icon)
                self.tag_btns[i]:SetActive(true)
            else
                self.tag_btns[i]:SetActive(false)
            end
        end
        self.tag_list_go:SetActive(true)
    else
        self.tag_list_go:SetActive(false)
    end
end

local function RefreshPower(self)
    if self.tabType == TabType.Info 
    or self.tabType == TabType.Equip
    or self.tabType == TabType.Quality then
        local k1 = LuaEntry.DataConfig:TryGetNum("power_setting", "k1")
        local k5 = LuaEntry.DataConfig:TryGetNum("power_setting", "k5")
        k5 = k5 > 0 and k5 or 1
		local skillPower = self.heroData:GetSkillPower()
		local equipPower = self.heroData:GetAllWearEquipPower()
        local power = Mathf.Round((self.heroData.atk + self.heroData.def) ^ k5 * k1) + skillPower + equipPower
        local powerStr = string.GetFormattedSeperatorNum(power)
        if self.tabType == TabType.Quality then
            local curRankId = self.heroData:GetCurMilitaryRankId()
            local maxRankId = self.heroData:GetMaxMilitaryRankId()
            if curRankId < maxRankId then
                local nextAttack, nextDefence = self.heroData:GetAttrByQuality(nil, nil, curRankId + 1)
                local nextPower = Mathf.Round((nextAttack + nextDefence) ^ k5 * k1) + skillPower + equipPower
                powerStr = powerStr .. " <color=green>+" .. string.GetFormattedSeperatorNum(nextPower - power) .. "</color>"
            end
        end
        self.power_text:SetText(powerStr)
        self.power_bg_go:SetActive(true)
    else
        self.power_bg_go:SetActive(false)
    end
end

local function RefreshEtoileList(self)
    if self.tabType == TabType.Info or self.tabType == TabType.Quality then
        local curRankId = self.heroData:GetCurMilitaryRankId()
        self.etoile_list:SetRankId(curRankId)
        self.etoile_list:SetActive(true)
    else
        self.etoile_list:SetActive(false)
    end
end

local function RefreshTabs(self)
    self.tab_list_go:SetActive(self.tabType ~= TabType.Quality)
end

local function RefreshInfo(self)
    if self.tabType == TabType.Info then
        local curRankId = self.heroData:GetCurMilitaryRankId()
        local pveAttack = PveUtil.GetPveHeroAttack(self.heroData.heroId, self.heroData.level, curRankId)
        local pveDefence = PveUtil.GetPveHeroDefence(self.heroData.heroId, self.heroData.level, curRankId)
        local armyCount = HeroUtils.GetArmyLimit(self.heroData.level, self.heroData:GetCurMilitaryRankId(), self.heroData.rarity, self.heroId, self.heroData.quality)
        pveAttack = Mathf.Round(pveAttack)
        pveDefence = Mathf.Round(pveDefence)
        armyCount = Mathf.Round(armyCount)
        self.rarity_image:LoadSprite(HeroUtils.GetRarityIconName(self.heroData.rarity, true))
        self.quality_up_btn:SetActive(not self.heroData:IsEtoileMax())
        self.quality_up_red_go:SetActive(self.heroData:CanEtoileUp())
        self.attack_text:SetText(string.GetFormattedSeperatorNum(pveAttack))
        self.defence_text:SetText(string.GetFormattedSeperatorNum(pveDefence))
        self.army_text:SetText(string.GetFormattedSeperatorNum(armyCount))
        self.level_text:SetText("Lv." .. self.heroData.level)
        self.level2_text:SetText("Lv." .. self.heroData.level)
        self.upgrade_red_go:SetActive(self.heroData:IsCanLevelUp())
        self.quality_up_btn:SetActive(self.viewType == HeroInfoViewType.HeroList and not self.heroData:IsMaxQuality())

        local needExp = HeroUtils.GetLevelUpNeedExp(self.heroData.level)
        local type, itemId = self.heroData:GetUpgradeCostResType()
        local costIcon = ''
        local haveNum = 0
        if type == RewardType.GOODS then
            costIcon = DataCenter.ItemTemplateManager:GetIconPath(itemId)
            haveNum = DataCenter.ItemData:GetItemCount(itemId)
        else
            costIcon = DataCenter.ResourceManager:GetResourceIconByType(type)
            haveNum = LuaEntry.Resource:GetCntByResType(type)
        end
        self.upgrade_cost_icon:LoadSprite(costIcon)
        self.upgrade_cost_text:SetText(string.format("<color=%s>%s</color>/%s", haveNum >= needExp and "green" or TextBtnColorRed, string.GetFormattedStr(haveNum), string.GetFormattedStr(needExp)))

        if self.heroData.level < self.heroData.finalLevel then
            local needMainLv = tonumber(GetTableData(TableName.NewHeroesLevelUp, self.heroData.level + 1, "levelup_require_base")) or 0
            if DataCenter.BuildManager.MainLv >= needMainLv then
                UIGray.SetGray(self.upgrade_btn.transform, false, true)
                self.upgrade_btn:SetActive(self.viewType == HeroInfoViewType.HeroList)
                self.upgrade_hori_go:SetActive(self.viewType == HeroInfoViewType.HeroList)
                self.need_main_hori_go:SetActive(false)
            else
                UIGray.SetGray(self.upgrade_btn.transform, true, false)
                self.upgrade_btn:SetActive(true)
                self.upgrade_hori_go:SetActive(false)
                self.need_main_hori_go:SetActive(true)
                self.need_main_text:SetLocalText(321387, needMainLv)
            end
        else
            self.upgrade_btn:SetActive(false)
            self.upgrade_hori_go:SetActive(false)
            self.need_main_hori_go:SetActive(false)
        end
        
        self.rarity_image:SetActive(true)
        self.info_go:SetActive(true)
    else
        self.rarity_image:SetActive(false)
        self.info_go:SetActive(false)
    end
end

local function RefreshSkill(self)
    if self.tabType == TabType.Skill then
        for i = 1, SkillCount do
            local skillId = self.skillIds[i]
            if skillId then
                local skillData = self.heroData:GetSkillData(skillId)
                local star, count = HeroUtils.GetSkillStar(self.heroId, skillId)
                self.skill_items[i]:SetData(skillData)
                self.skill_items[i]:SetStar(star, count)
                self.skill_items[i]:SetSelected(skillId == self.selectSkillId)
                self.skill_items[i]:SetActive(true)
            else
                self.skill_items[i]:SetActive(false)
            end
        end

        local selectSkillData = self.heroData:GetSkillData(self.selectSkillId)
        local selectSkillLevel = math.max(selectSkillData:GetLevel(), 1)
        local selectSkillIndex = selectSkillData:GetIndex()
        
        -- desc
        local curRankId = self.heroData:GetCurMilitaryRankId()
        local isUnlocked = selectSkillData:IsUnlock()
        local nextNeedRankId = 1
        local skillName = GetTableData(TableName.SkillTab, self.selectSkillId, "name")
        if isUnlocked then
            nextNeedRankId = HeroUtils.GetSkillLevelNeedRankId(self.heroData.rarity, selectSkillIndex, selectSkillLevel + 1)
            local unlockStar = HeroUtils.GetSkillUnlockRank(curRankId, self.heroData.rarity, selectSkillIndex)
            self.skill_title_text:SetText(Localization:GetString(skillName) .. " Lv." .. selectSkillLevel .. "/" .. unlockStar)
        else
            nextNeedRankId = HeroUtils.GetSkillLevelNeedRankId(self.heroData.rarity, selectSkillIndex, 1)
            self.skill_title_text:SetLocalText(skillName)
        end
		self.skill_unlock_node:SetData(self.heroData.heroId, curRankId, self.selectSkillId);
        self.skill_type_text:SetLocalText(GetTableData(TableName.SkillTab, self.selectSkillId, "type_des"))

        self.skill_effect_title_text:SetActive(false)
        self.skill_effect_desc_text:SetActive(false)
        
        local showNext = false
        -- upgrade
        if nextNeedRankId ~= -1 then
            self.skill_upgrade_btn:SetActive(self.viewType == HeroInfoViewType.HeroList)
            if curRankId >= nextNeedRankId and isUnlocked then
                showNext = true
                -- 可升级
                local itemId, count = HeroUtils.GetSkillUpgradeItemAndNum(self.heroId, selectSkillLevel)
                local have = DataCenter.ItemData:GetItemCount(itemId)
                self.skill_condition_text:SetActive(false)
                self.skill_upgrade_cost_text.transform.parent.gameObject:SetActive(true)
                self.skill_upgrade_text:SetLocalText(100091)
                self.skill_upgrade_icon_image:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(itemId))
                self.skill_upgrade_cost_text:SetText(string.format("<color=%s>%s</color>/%s", have >= count and "green" or "#d84047", string.GetFormattedSeperatorNum(have), string.GetFormattedSeperatorNum(count)))
                self.skill_upgrade_btn:SetOnClick(function()
                    self:OnSkillUpgradeClick()
                end)
            else
                -- 已达等级上限，需要升军阶
                self.skill_condition_text:SetActive(true)
                self.skill_upgrade_cost_text.transform.parent.gameObject:SetActive(false)
                if isUnlocked then
                    self.skill_condition_text:SetLocalText(321507)
                else
                    local unlockLv = HeroUtils.GetSkillUnlockLv(self.heroId, selectSkillIndex)
                    local level = tonumber(GetTableData(TableName.HeroMilitaryRank, nextNeedRankId, "level"))
                    local nextNeedStar = HeroUtils.GetEtoileName(nextNeedRankId)
                    if level - 1 == 0 then
                        self.skill_condition_text:SetLocalText(GameDialogDefine.HERO_SKILL_UNLOCK1, unlockLv)
                    else
                        self.skill_condition_text:SetLocalText(GameDialogDefine.HERO_SKILL_UNLOCK2, unlockLv, nextNeedStar)
                    end
                end
                self.skill_upgrade_text:SetLocalText(110003)
                self.skill_upgrade_btn:SetOnClick(function()
                    self:OnTabClick(TabType.Quality)
                end)
            end
        else
            -- 已满级
            self.skill_upgrade_btn:SetActive(false)
            self.skill_condition_text:SetActive(true)
            self.skill_condition_text:SetLocalText(129254)
        end

        local desc, effectDesc = HeroUtils.GetSkillDescStr(self.selectSkillId, selectSkillLevel, "#4FC890", showNext)
        self.skill_desc_text:SetText(desc)

        self.skill_go:SetActive(true)
    else
        self.skill_go:SetActive(false)
    end
end

local function RefreshQuality(self)
    if self.tabType == TabType.Quality then
        if self.heroData.quality >= HeroUtils.GetMaxStarByRarity(self.heroData.rarity) then
            self:OnTabClick(TabType.Info)
            return
        end

        self.quality_preview:SetData(self.heroData)
        local curRankId = self.heroData:GetCurMilitaryRankId()
        local maxRankId = self.heroData:GetMaxMilitaryRankId()

        self.quality_desc_text:SetText(HeroUtils.GetEtoileName(curRankId))
        
        if curRankId < maxRankId then
            local itemId, count = HeroUtils.GetHeroEtoileUpItem(self.heroId, curRankId)
            if itemId then
                local have = DataCenter.ItemData:GetItemCount(itemId)
                self.quality_btn:SetActive(true)
                self.quality_progress_slider:SetActive(true)
                self.quality_progress_slider:SetValue(Mathf.Clamp(have / count, 0, 1))
                self.quality_count_text:SetText(string.GetFormattedSeperatorNum(have) .. "/" .. string.GetFormattedSeperatorNum(count))
                self.quality_item_image:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(itemId))

                -- 碎片兑换
                local costItemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
                local exchangeItemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(costItemTemplate.para1)
                local exchangeCount = DataCenter.ItemData:GetItemCount(costItemTemplate.para1)
                if self:CanShowMedal(itemId) then
                    self.medal_btn:LoadSprite(string.format(LoadPath.ItemPath, exchangeItemTemplate.icon))
                    self.medal_btn:SetActive(self.viewType == HeroInfoViewType.HeroList)
                    self.medal_count_text:SetText(string.GetFormattedSeperatorNum(exchangeCount))
                    self.quality_add_btn:SetActive(true)
                else
                    self.medal_btn:SetActive(false)
                    self.quality_add_btn:SetActive(false)
                end
            else
                -- 理论上不会走这里
                self.quality_btn:SetActive(false)
                self.quality_progress_slider:SetActive(false)
            end
        else
            self.quality_btn:SetActive(false)
            self.quality_progress_slider:SetActive(false)
        end

        -- 闪动提示
        local level = tonumber(GetTableData(TableName.HeroMilitaryRank, curRankId, "level"))
        local stage = tonumber(GetTableData(TableName.HeroMilitaryRank, curRankId, "stage"))
        stage = stage + 1
        if stage > 5 then
            stage = stage - 5
            level = level + 1
        end
        if level <= 5 then
            local etoile = self.etoile_list.etoiles[level]
            self.etoile_corner_image.transform.position = etoile.corner_goes[stage].transform.position
            self.etoile_corner_image:LoadSprite(string.format(LoadPath.HeroListPath, "ui_img_corner" .. stage))
            self.etoile_corner_image:SetActive(true)
        else
            self.etoile_corner_image:SetActive(false)
        end

        self.quality_go:SetActive(true)
    else
        self.showSecondArrow = 0
        self.quality_go:SetActive(false)
    end
end

function UIHeroInfoView:RefreshEquip()
    local inHistory = DataCenter.HeroDataManager:IsInHistory(self.heroId)
    self.tabs[3]:SetActive(HeroEquipUtil:CheckSwitch() and inHistory)
    
    if self.tabType == TabType.Equip then
        self.equip_go:SetActive(true)
        self.equip_go:SetData(self.heroData.heroId)
        self.hero_mask_go.transform:Set_localScale(0.9,0.9,0.9)
    else
        self.equip_go:SetActive(false)
        self.hero_mask_go.transform:Set_localScale(1,1,1)
    end
end

local function RefreshHeroBookRed(self)


end 


local function RefreshTabRed(self)
    if self.viewType == HeroInfoViewType.HeroList then
        self.tab_red_goes[TabType.Info]:SetActive(self.heroData:IsCanLevelUp())
        self.tab_red_goes[TabType.Skill]:SetActive(false)
        self.tab_red_goes[TabType.Equip]:SetActive(self.heroData:HasEquipInstall())
    else
        for i = 1, TabCount do
            self.tab_red_goes[i]:SetActive(false)
        end
    end
end

function UIHeroInfoView:RefreshHeroEquip()
    self:RefreshTabRed()
    self:RefreshPower()
end

local function ShowUpgradeEffect(self)
    self.upgrade_effect_go:SetActive(false)
    self.upgrade_effect_go:SetActive(true)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_HERO_Upgrade)
end

local function ShowLevelEffect(self)
    self.level_effect_go:SetActive(false)
    self.level_effect_go:SetActive(true)
end

local function ShowPowerEffect(self)
    self.power_effect_go:SetActive(false)
    self.power_effect_go:SetActive(true)
end

local function ShowTrail(self, fromPos, toPos, callback)
    self.trailIndex = self.trailIndex + 1
    self.trailReqs[self.trailIndex] = self:GameObjectInstantiateAsync(TrailPrefab, function(req)
        local go = req.gameObject
        go:SetActive(true)
        local tf = go.transform
        tf.position = fromPos
        local midPos = (fromPos + toPos) * 0.5
        local halfDur = TrailDuration * 0.5
        self.trailSeqs[self.trailIndex] = DOTween.Sequence()
        :AppendInterval(TrailPreDelay)
        :Append(tf:DOMoveX(midPos.x + TrailOffsetX, halfDur):SetEase(CS.DG.Tweening.Ease.OutCirc))
        :Join(tf:DOMoveY(midPos.y, halfDur):SetEase(CS.DG.Tweening.Ease.Linear))
        :Append(tf:DOMoveX(toPos.x, halfDur):SetEase(CS.DG.Tweening.Ease.InCirc))
        :Join(tf:DOMoveY(toPos.y, halfDur):SetEase(CS.DG.Tweening.Ease.Linear))
        :AppendCallback(function()
            if callback then
                callback()
            end
        end)
        :AppendInterval(TrailPostDelay)
        :AppendCallback(function()
            if self.trailSeqs[self.trailIndex] then
                self.trailSeqs[self.trailIndex]:Kill()
                self.trailSeqs[self.trailIndex] = nil
            end
            if self.trailReqs[self.trailIndex] then
                self.trailReqs[self.trailIndex]:Destroy()
                self.trailReqs[self.trailIndex] = nil
            end
        end)
    end)
end

local function ClearTrail(self)
    self.trailIndex = 0
    for _, seq in pairs(self.trailSeqs) do
        seq:Kill()
    end
    self.trailSeqs = {}
    for _, req in pairs(self.trailReqs) do
        req:Destroy()
    end
    self.trailReqs = {}
end

local function CanShowMedal(self, itemId)
    local vipHero = GetTableData(HeroUtils.GetHeroXmlName(), self.heroId, "hero_pireces_exchange_type") == 1
    if vipHero then
        return false
    end
    if self.heroId == HeroUtils.HeroIds.HeroIds_1003 and LuaEntry.DataConfig:CheckSwitch("catgirl_medal_exchange") then
        return false
    end
    local template = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
    if template == nil or template.para1 == nil or template.para1 == "" then
        return false
    end
    return true
end

local function OnBackClick(self)
    if self.tabType == TabType.Quality then
        self:OnTabClick(TabType.Info)
    else
        self.ctrl:CloseSelf()
    end
end

local function OnHeroBookBtnClick(self)
    local param = {}
    --param.uuid = itemData.uuid
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroStarStory, {anim = true, isBlur = true}, self.heroData)
end 

local function OnCampClick(self)
    local x = self.camp_btn.transform.position.x + 45
    local y = self.camp_btn.transform.position.y - 35
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroCampRestraint, self.heroData:GetCamp(), x, y)
end

local function OnTagClick(self, i)
    local tags = HeroUtils.GetTagsByHeroId(self.heroId)
    local _, _, desc = HeroUtils.GetTagIconAndName(tags[i])
    local pos = self.tag_btns[i].transform.position
    pos.y = pos.y - 35
    local param = UIHeroTipView.Param.New()
    param.content = desc
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 210
    param.pivot = 0.15
    param.position = pos
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnSkillClick(self, i)
    self.selectSkillId = self.skillIds[i]
    self:RefreshSkill()
end

local function OnSkillUpgradeClick(self)
    local selectSkillData = self.heroData:GetSkillData(self.selectSkillId)
    local selectSkillLevel = math.max(selectSkillData:GetLevel(), 1)
    local itemId, count = HeroUtils.GetSkillUpgradeItemAndNum(self.heroId, selectSkillLevel)
    local have = DataCenter.ItemData:GetItemCount(itemId)
    if have >= count then
        SFSNetwork.SendMessage(MsgDefines.HeroSkillUpgrade, self.heroUuid, self.selectSkillId)
    else
        local lackTab = {}
        local param = {}
        param.type = ResLackType.Item
        param.id = tonumber(itemId)
        param.targetNum = count
        table.insert(lackTab, param)
        GoToResLack.GoToItemResLackList(lackTab)
    end
end

local function OnQualityUpClick(self)
    self:OnTabClick(TabType.Quality)
end

local function OnQualityBtnClick(self)
    if HeroUtils.IsHeroEtoileUpItemEnough(self.heroUuid) then
        SFSNetwork.SendMessage(MsgDefines.HeroRankUpgrade, self.heroUuid)
    else
        UIUtil.ShowTipsId(120021)
    end
end

local function OnQualityAddClick(self)
    local itemId, count = HeroUtils.GetHeroEtoileUpItem(self.heroId, self.heroData:GetCurMilitaryRankId())
    local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMedalExchange, itemTemplate.para1, itemId, self.heroId, count)
end

local function OnMedalClick(self)
    if self.heroData:IsEtoileMax() then
        UIUtil.ShowTipsId(129122)
        return
    end

    local curRankId = self.heroData:GetCurMilitaryRankId()
    local costItemId = GetTableData(HeroUtils.GetHeroXmlName(), self.heroId, 'skill_levelup_item')
    local costCount = GetTableData(TableName.HeroMilitaryRank, curRankId, 'cost_medal')[self.heroData.rarity]
    local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(costItemId)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMedalExchange, itemTemplate.para1, costItemId, self.heroId, costCount)
end

local function OnAttackClick(self)
    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("150155")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 200
    param.pivot = 0.3
    param.position = self.attack_text.transform.position + Vector3.New(-40, -40, 0)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnDefenceClick(self)
    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("150157")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 200
    param.pivot = 0.5
    param.position = self.defence_text.transform.position + Vector3.New(-40, -40, 0)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnArmyClick(self)
    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("150182")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 200
    param.pivot = 0.7
    param.position = self.army_text.transform.position + Vector3.New(-40, -40, 0)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnUpgradeClick(self)
    --if not self.canLevelUp then
    --    return
    --end
    
    if self.heroData.level >= self.heroData:GetFinalLevel() then
        return
    end

    if not self.heroData.isMaster then
        return
    end

    if self.heroData:NeedBeyond() then
        UIUtil.ShowTipsId(129085)
        return
    end

    local needExp = HeroUtils.GetLevelUpNeedExp(self.heroData.level)
    local type, itemId = self.heroData:GetUpgradeCostResType()
    local haveNum = 0
    if type == RewardType.GOODS then
        haveNum = DataCenter.ItemData:GetItemCount(itemId)
    else
        haveNum = LuaEntry.Resource:GetCntByResType(type)
    end
    if haveNum < needExp then
        GoToResLack.GoToHeroLvUp(needExp)
        return
    end

    --判断是否可以直升一级
    if self.heroData:IsCanLevelUp() then
        --直接升级
        local costExp = HeroUtils.GetLevelUpNeedExp(self.heroData.level) - self.heroData.exp
        SFSNetwork.SendMessage(MsgDefines.HeroLvUp, self.heroUuid, costExp)
        --self.canLevelUp = false
    end
end

local function OnNeedMainJumpClick(self)
    GoToUtil.CloseAllWindows()
    GoToUtil.GotoCityByBuildId(BuildingTypes.FUN_BUILD_MAIN, WorldTileBtnType.City_Upgrade)
end

local function OnDetailClick(self)
    self.detail_panel:SetData(self.heroData)
    self.detail_panel:Show()
end

local function OnLeftClick(self)
    self.heroIndex = self.heroIndex - 1
    if self.heroIndex < 1 then
        self.heroIndex = #self.heroUuids
    end
    self:Refresh()
end

local function OnRightClick(self)
    self.heroIndex = self.heroIndex + 1
    if self.heroIndex > #self.heroUuids then
        self.heroIndex = 1
    end
    self:Refresh()
end

local function OnTabClick(self, index)
    if self.tabType == index then
        return
    end

    if self.playSound then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_common_switch)
    else
        self.playSound = true
    end
    
    for i = 1, TabCount do
        self.tabs[i]:SetSelected(i == index)
    end
    self.tabType = index
    self:Refresh()
    --self.canLevelUp = true
end

local function OnHeroLvUpSuccess(self)
    --self.canLevelUp = true
    self:RefreshInfo()
    self:RefreshTabRed()
    self:ShowUpgradeEffect()
    self:ShowLevelEffect()
    self:ShowTrail(self.hero_mask_go.transform.position, self.power_bg_go.transform.position, function()
        self:RefreshPower()
        self:ShowPowerEffect()
    end)
    self.isHeroDataChange = true
    
    self:CheckNewUnlockSkill()
end

function UIHeroInfoView:CheckNewUnlockSkill()
    --- 是否解锁新技能
    if not self.heroData then
        return
    end
    local newUnlockSkill = self.heroData:GetLevelUnlockSkill()
    if table.IsNullOrEmpty(newUnlockSkill) then
        return
    end

    local skillData = newUnlockSkill[1]
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroUnlockNewSkillPanel, {anim=true},skillData, self.heroData, self:GetSkillPageTogglePosition())
end

local function OnSkillUpgradeEnd(self)
    self:RefreshSkill()
    self:ShowUpgradeEffect()
    self.isHeroDataChange = true
end

local function OnHeroAdvanceSuccess(self)
    self:RefreshPower()
    self:RefreshEtoileList()
    self:RefreshQuality()
    self:RefreshTabRed()
    self:ShowUpgradeEffect()
    self.isHeroDataChange = true
end

local function OnHeroRankUpSuccess(self)
    self:RefreshPower()
    self:RefreshEtoileList()
    self:RefreshQuality()
    self:RefreshTabRed()
    self:ShowUpgradeEffect()
    self.isHeroDataChange = true

    --self:CheckNewUnlockSkill()
end

function UIHeroInfoView:ShowArrow()
    if (self.showArrow == HeroListArrowTypeHero.RankUp and self.tabType == TabType.Info) then
        ----添加指引
        local param = {}
        param.positionType = PositionType.Screen
        param.position = self.quality_up_btn:GetPosition()
        DataCenter.ArrowManager:ShowArrow(param)
        self.showArrow = 0
        self.showSecondArrow = ArrowSecondType.Star
    elseif (self.showSecondArrow == ArrowSecondType.Star and self.tabType == TabType.Quality) then
        ----添加指引
        local param = {}
        param.positionType = PositionType.Screen
        param.position = self.quality_btn:GetPosition()
        DataCenter.ArrowManager:ShowArrow(param)
        self.showSecondArrow = 0
    end
end

local function CheckHeroDataChange(self)
    if self.isHeroDataChange == true then
        EventManager:GetInstance():Broadcast(EventId.RefreshHeroPageList)
        self.isHeroDataChange = false
    end
end

function UIHeroInfoView:AddNextFrameTimer()
    if self.next_timer == nil then
        self.next_timer = TimerManager:GetInstance():GetTimer(NextFrameTime, self.next_timer_callback, self, true, false, false)
    end
    self.next_timer:Start()
end

function UIHeroInfoView:DeleteNextFrameTimer()
    if self.next_timer ~= nil then
        self.next_timer:Stop()
        self.next_timer = nil
    end
end

function UIHeroInfoView:NextFrameTimeCallback()
    self:DeleteNextFrameTimer()
    self:ShowArrow()
end

function UIHeroInfoView:GetSkillPageTogglePosition()
    if self.tabs[TabType.Skill] then
        return self.tabs[TabType.Skill].transform.position
    end
end

UIHeroInfoView.OnCreate= OnCreate
UIHeroInfoView.OnDestroy = OnDestroy
UIHeroInfoView.ComponentDefine = ComponentDefine
UIHeroInfoView.ComponentDestroy = ComponentDestroy
UIHeroInfoView.DataDefine = DataDefine
UIHeroInfoView.DataDestroy = DataDestroy
UIHeroInfoView.OnEnable = OnEnable
UIHeroInfoView.OnDisable = OnDisable
UIHeroInfoView.OnAddListener = OnAddListener
UIHeroInfoView.OnRemoveListener = OnRemoveListener

UIHeroInfoView.TabType = TabType
UIHeroInfoView.ReInit = ReInit
UIHeroInfoView.Refresh = Refresh
UIHeroInfoView.RefreshHero = RefreshHero
UIHeroInfoView.RefreshBook = RefreshBook
UIHeroInfoView.RefreshBookRed = RefreshBookRed
UIHeroInfoView.RefreshSwitchBtns = RefreshSwitchBtns
UIHeroInfoView.RefreshTags = RefreshTags
UIHeroInfoView.RefreshPower = RefreshPower
UIHeroInfoView.RefreshEtoileList = RefreshEtoileList
UIHeroInfoView.RefreshTabs = RefreshTabs
UIHeroInfoView.RefreshInfo = RefreshInfo
UIHeroInfoView.RefreshSkill = RefreshSkill
UIHeroInfoView.RefreshQuality = RefreshQuality
UIHeroInfoView.RefreshTabRed = RefreshTabRed

UIHeroInfoView.ShowUpgradeEffect = ShowUpgradeEffect
UIHeroInfoView.ShowLevelEffect = ShowLevelEffect
UIHeroInfoView.ShowPowerEffect = ShowPowerEffect
UIHeroInfoView.ShowTrail = ShowTrail
UIHeroInfoView.ClearTrail = ClearTrail
UIHeroInfoView.CanShowMedal = CanShowMedal

UIHeroInfoView.OnBackClick = OnBackClick
UIHeroInfoView.OnHeroBookBtnClick = OnHeroBookBtnClick
UIHeroInfoView.OnCampClick = OnCampClick
UIHeroInfoView.OnTagClick = OnTagClick
UIHeroInfoView.OnSkillClick = OnSkillClick
UIHeroInfoView.OnSkillUpgradeClick = OnSkillUpgradeClick
UIHeroInfoView.OnQualityUpClick = OnQualityUpClick
UIHeroInfoView.OnQualityBtnClick = OnQualityBtnClick
UIHeroInfoView.OnQualityAddClick = OnQualityAddClick
UIHeroInfoView.OnMedalClick = OnMedalClick
UIHeroInfoView.OnAttackClick = OnAttackClick
UIHeroInfoView.OnDefenceClick = OnDefenceClick
UIHeroInfoView.OnArmyClick = OnArmyClick
UIHeroInfoView.OnUpgradeClick = OnUpgradeClick
UIHeroInfoView.OnNeedMainJumpClick = OnNeedMainJumpClick
UIHeroInfoView.OnDetailClick = OnDetailClick
UIHeroInfoView.OnLeftClick = OnLeftClick
UIHeroInfoView.OnRightClick = OnRightClick
UIHeroInfoView.OnTabClick = OnTabClick

UIHeroInfoView.OnHeroLvUpSuccess = OnHeroLvUpSuccess
UIHeroInfoView.OnSkillUpgradeEnd = OnSkillUpgradeEnd
UIHeroInfoView.OnHeroAdvanceSuccess = OnHeroAdvanceSuccess
UIHeroInfoView.OnHeroRankUpSuccess = OnHeroRankUpSuccess
UIHeroInfoView.CheckHeroDataChange =CheckHeroDataChange
return UIHeroInfoView