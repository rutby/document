---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 6/22/21 6:44 PM
---


local UIHeroInfoDetail = BaseClass("UIHeroInfoDetail", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local UIGray = CS.UIGray
local UIHeroStars = require 'UI.UIHero2.Common.UIHeroStars'
local UIHeroMilitaryRankIcon = require "UI.UIHero2.UIHeroInfo.Component.UIHeroMilitaryRankIcon"


local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
end

local function OnDestroy(self)
    self.fromType = nil
    
    self:ComponentDestroy()
    base.OnDestroy(self)
end


local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.HeroLvUpSuccess, self.OnHeroDataChanged)
    --self:AddUIListener(EventId.HeroAdvanceSuccess, self.OnHeroAdvanceSuccess) //改从view里统一调用
    self:AddUIListener(EventId.ResourceUpdated, self.OnRefreshItems)
    self:AddUIListener(EventId.RefreshItems, self.OnRefreshItems)

    self:AddUIListener(EventId.SkillUpgradeEnd, self.OnHandleSkillUpgrade)
    self:AddUIListener(EventId.HeroMedalExchanged, self.UpdateMilitaryRank)
    
    self:AddUIListener(EventId.HeroRankUpSuccess, self.OnHandleMilitaryRankUpdate)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.HeroLvUpSuccess,    self.OnHeroDataChanged)
    --self:RemoveUIListener(EventId.HeroAdvanceSuccess, self.OnHeroAdvanceSuccess)
    self:RemoveUIListener(EventId.ResourceUpdated,    self.OnRefreshItems)
    self:RemoveUIListener(EventId.RefreshItems,       self.OnRefreshItems)

    self:RemoveUIListener(EventId.SkillUpgradeEnd,    self.OnHandleSkillUpgrade)
    self:RemoveUIListener(EventId.HeroMedalExchanged, self.UpdateMilitaryRank)
    self:RemoveUIListener(EventId.HeroRankUpSuccess,  self.OnHandleMilitaryRankUpdate)

    base.OnRemoveListener(self)
end

local function ComponentDefine(self)
    self.textCurLevel       = self:AddComponent(UITextMeshProUGUIEx, "TopNode/TextCurLevel")
    self.textExp            = self:AddComponent(UITextMeshProUGUIEx, "TopNode/SliderExp/TextValueExp")
    self.sliderExp          = self:AddComponent(UISlider, "TopNode/SliderExp")
    self.btnUpgrade         = self:AddComponent(UIButton, "TopNode/BtnUpgrade")
    self.upgrade_btn_text   = self:AddComponent(UITextMeshProUGUIEx, "TopNode/BtnUpgrade/GameObject/BtnUpgradeText")
    self.btnUpgradeRedPoint = self:AddComponent(UIButton, "TopNode/BtnUpgrade/UpgradeRedPoint")
    self.upgradeCostText    = self:AddComponent(UITextMeshProUGUIEx, "TopNode/BtnUpgrade/GameObject/UpgradeCostText")
    self.upgradeCostImage   = self:AddComponent(UIImage, "TopNode/BtnUpgrade/GameObject/icon_go/UpgradeCostIcon")
    self.upgradeCostGo   = self:AddComponent(UIImage, "TopNode/BtnUpgrade/GameObject/icon_go")

    self.btnBeyond          = self:AddComponent(UIButton, "TopNode/BtnBeyond")
    self.imgBeyondGreen     = self:AddComponent(UIImage, "TopNode/BtnBeyond/ImgBeyondGreen")
    self.imgBeyondYellow    = self:AddComponent(UIImage, "TopNode/BtnBeyond/ImgBeyondYellow")
    self.btnBeyondRedDot     = self:AddComponent(UIImage, "TopNode/BtnBeyond/BtnBeyondRedDot")

    self.textValueAttack  = self:AddComponent(UITextMeshProUGUIEx, "TopNode/Black/NodeAttrAttack/TextValueAttack")
    self.textValueDefence = self:AddComponent(UITextMeshProUGUIEx, "TopNode/Black/NodeAttrDefence/TextValueDefence")
    self.textValueArmy    = self:AddComponent(UITextMeshProUGUIEx, "TopNode/Black/NodeAttrArmy/TextValueArmy")
    self.advanceBtn = self:AddComponent(UIButton, "TopNode/BtnAdvance")
    self.advanceBtn:SetOnClick(BindCallback(self, self.OnAdvanceClick))
    self.advanceBtn:SetActive(false)
    self.btnAtk = self:AddComponent(UIButton, "TopNode/Black/NodeAttrAttack")-- "NodeAttrAttack/ImgAttrIconAtk")
    self.btnDef = self:AddComponent(UIButton, "TopNode/Black/NodeAttrDefence")-- "NodeAttrDefence/ImgAttrIconDef")
    self.btnArmy = self:AddComponent(UIButton,"TopNode/Black/NodeAttrArmy")-- "NodeAttrArmy/ImgAttrIconArmy")
    self.imgBottomArrow = self:AddComponent(UIHeroStars, "TopNode/NodeArrow")

    self.btnAtk:SetOnClick(BindCallback(self, self.OnBtnAtkClick))
    self.btnDef:SetOnClick(BindCallback(self, self.OnBtnDefClick))
    self.btnArmy:SetOnClick(BindCallback(self, self.OnBtnArmyClick))
    
    self.textTitleSkill = self:AddComponent(UITextMeshProUGUIEx, "TextTitleSkill")
    self.btnSkills = {}
    for k = 1, HeroUtils.SKILL_CNT_MAX do
        local nodeBtn = self:AddComponent(UIButton, "SkillContent/Skill" .. k)
        nodeBtn:SetOnClick(function()
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
            self:OnBtnSkillClick(k)
        end)

        local imgIcon = self:AddComponent(UIImage, "SkillContent/Skill" .. k .. "/ImgIcon" .. k)
        local textLevel = self:AddComponent(UITextMeshProUGUIEx, "SkillContent/Skill" .. k .. "/TextLv" .. k)
        local imgLvBg = self:AddComponent(UITextMeshProUGUIEx, "SkillContent/Skill" .. k .. "/ImgLvBg" .. k)
        local imgLock = self:AddComponent(UIImage, "SkillContent/Skill" .. k .. "/ImgLock" .. k)
        local nodeEffect = self:AddComponent(UIBaseContainer, "SkillContent/Skill" .. k .. "/NodeEffect" .. k)
        local redDot = self:AddComponent(UIBaseContainer, "SkillContent/Skill" .. k .. "/RedDot" .. k)

        table.insert(self.btnSkills, {btn = nodeBtn, icon = imgIcon, lvBg = imgLvBg, lock = imgLock, textLv = textLevel, nodeFx = nodeEffect, redDot = redDot})
    end
    self.btnBeyond:SetOnClick(BindCallback(self, self.OnBtnBeyondClick))
    self.btnUpgrade:SetOnClick(BindCallback(self, self.OnClickBtnHeroUpgrade))
    self.textTitleSkill:SetLocalText(150106)
    self.upgrade_btn_text:SetLocalText(GameDialogDefine.UPGRADE)
    --military rank
    self.textTitleMilitary      = self:AddComponent(UITextMeshProUGUIEx, 'NodeMilitary/TextTitleMilitaryRank')
    self.nodeMilitaryRank1      = self:AddComponent(UIHeroMilitaryRankIcon, 'NodeMilitary/Align/HeroMilitaryIcon1')
    self.nodeMilitaryRank2      = self:AddComponent(UIHeroMilitaryRankIcon, 'NodeMilitary/Align/HeroMilitaryIcon2')
    self.btnMilitaryRankUpgrade = self:AddComponent(UIButton, 'NodeMilitary/BtnMilitaryUp')
    self.btnMilitaryRankUpgrade:SetActive(false)
    self.nodeMilitaryRankArrow  = self:AddComponent(UIBaseContainer, 'NodeMilitary/Align/BgArrow')
    self.imgRankArrowGreen      = self:AddComponent(UIImage, 'NodeMilitary/BtnMilitaryUp/ImgRankGreen')
    self.imgRankArrowYellow     = self:AddComponent(UIImage, 'NodeMilitary/BtnMilitaryUp/ImgRankYellow')
    self.btnMilitaryUpRedDot = self:AddComponent(UIButton, 'NodeMilitary/MilitaryRankNew/BtnMilitaryUpRedDot')

    --local btnRank1 = self:AddComponent(UIButton, 'NodeMilitary/Align/HeroMilitaryIcon1')
    --local btnRank2 = self:AddComponent(UIButton, 'NodeMilitary/Align/HeroMilitaryIcon2')
    --btnRank1:SetOnClick(BindCallback(self, self.OnBtnMilitaryRankUpgradeClick))
    --btnRank2:SetOnClick(BindCallback(self, self.OnBtnMilitaryRankUpgradeClick))
    --
    self.btnMilitaryRankUpgrade:SetOnClick(BindCallback(self, self.OnBtnMilitaryRankUpgradeClick))
    self.textTitleMilitary:SetLocalText(129117)
    
    
    self.militaryRankNew = self:AddComponent(UIBaseContainer, "NodeMilitary/MilitaryRankNew")
    self.militaryRankName = self:AddComponent(UITextMeshProUGUIEx, "NodeMilitary/MilitaryRankNew/MilitaryRankName")
    self.militaryRankNewIcon = self:AddComponent(UIImage, "NodeMilitary/MilitaryRankNew/MilitaryRankNewIcon")
    self.militaryRankNewProgress = {}
    for i = 1, 5 do
        local progress = self:AddComponent(UIImage, "NodeMilitary/MilitaryRankNew/MilitaryRankNewProgress"..i)
        table.insert(self.militaryRankNewProgress, progress)
    end
    self.militaryRankNewBtn = self:AddComponent(UIButton, "NodeMilitary/MilitaryRankNew/MilitaryRankNewBtn")
    self.militaryRankNewBtn:SetActive(false)
    self.militaryRankNewBtn:SetOnClick(BindCallback(self, self.OnMilitaryRankNewBtnClick))
    self.militaryRankNewBtnText = self:AddComponent(UITextMeshProUGUIEx, "NodeMilitary/MilitaryRankNew/MilitaryRankNewBtn/MilitaryRankNewBtnText")
    self.militaryRankNewBtnText:SetLocalText(129278)
    self.militaryRankIntro = self:AddComponent(UIButton, "NodeMilitary/MilitaryRankNew/MilitaryRankIntro")
    self.militaryRankIntro:SetOnClick(BindCallback(self, self.OnMilitaryRankIntroBtnClick))
    self.militaryRankIntro:SetActive(false)

    self.militaryRankIntro1 = self:AddComponent(UIButton, "NodeMilitary/MilitaryRankNew/MilitaryRankNewIcon")
    self.militaryRankIntro1:SetOnClick(BindCallback(self, self.OnMilitaryRankIntroBtnClick))

end

local function ComponentDestroy(self)
    if self.delayTimer ~= nil then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end
    if self.militaryRankIntro then
        self.militaryRankIntro:SetActive(false)
    end
    self.militaryRankIntro = nil
end

local function InitData(self, param, fromType)
    self.fromType = fromType
    if fromType == self.view.FromType.HeroList then
        self.heroUuid = param
    elseif fromType == self.view.FromType.HeroMap or fromType == self.view.FromType.SingleHeroId then
        self.heroId = param
    end
    
    self:RefreshView()
end

local function RefreshView(self)
    local heroId, level, maxLevel, curExp, totalExp, atk, def, rankId,quality
    local isReachFinalLimit = false
    local camp = -1
    if self.fromType == self.view.FromType.HeroList then
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
        if heroData == nil then
            return
        end
        local needBeyond = heroData.isMaster and heroData:IsReachBreakLimit()
        rankId = heroData:GetCurMilitaryRankId()
        
        heroId = heroData.heroId
        level = heroData.level
        quality = heroData.quality
        maxLevel = heroData:GetCurMaxLevel()
        --九章需求：需要突破时显示上一级的满经验
        totalExp = HeroUtils.GetLevelUpNeedExp(needBeyond and (level-1) or level)
        curExp = needBeyond and (totalExp+ heroData.exp) or heroData.exp
        isReachFinalLimit = (level == heroData:GetFinalLevel())

        atk = heroData.atk
        def = heroData.def
        camp = heroData.camp
        --self.btnUpgrade:SetActive(true)
        local k1 = LuaEntry.DataConfig:TryGetNum("hero_hide_star_level", "k1")
        local currentMainLv = DataCenter.BuildManager.MainLv
        --self.advanceBtn:SetActive(currentMainLv >= k1 and not heroData:IsMaxQuality())
        self.advanceBtn:SetActive(false)
        --UIGray.SetGray(self.btnUpgrade.transform, reachFinalLevel, true)
        local upgradeShowFlag = heroData.isMaster and not needBeyond and heroData.level < heroData:GetFinalLevel()
        local reachMax = heroData:IsReachMaxMilitaryRank()
        self.militaryRankNewBtn:SetActive(false)
        self.btnUpgradeRedPoint:SetActive(upgradeShowFlag and heroData:ShowUpGradeRedPoint())

        --self.btnBeyond:SetActive(needBeyond)
        self.btnBeyond:SetActive(false)
        self.btnBeyondRedDot:SetActive(needBeyond)
        self.btnUpgrade:SetActive(not isReachFinalLimit and not needBeyond)
        
        local needExp = HeroUtils.GetLevelUpNeedExp(heroData.level)
        local haveExp = DataCenter.ItemData:GetHeroExpItemCount()
        self.upgradeCostText:SetText(string.format("<color=%s>%s/%s</color>", haveExp >= needExp and "green" or "#d84047", haveExp, needExp))

        if needBeyond then
            self:CheckBeyondRes()
        end

        local param = {}
        param.showStarNum = quality
        param.maxStarNum = HeroUtils.GetMaxStarByRarity(heroData.rarity)
        param.showEmptyStar = true
        self.imgBottomArrow:SetData(param)

    elseif self.fromType == self.view.FromType.HeroMap or self.fromType == self.view.FromType.SingleHeroId then
        heroId = self.heroId
        maxLevel = HeroUtils.GetHeroFinalLevel(heroId)
        level = maxLevel
        totalExp = HeroUtils.GetLevelUpNeedExp(maxLevel)
        curExp = totalExp
        atk, def = HeroUtils.GetMaxAttrForHeroMap(heroId)
        atk = Mathf.Round(atk)
        def = Mathf.Round(def)
        camp = HeroUtils.GetCampByHeroId(heroId)
        
        self.btnUpgrade:SetActive(false)
        self.btnBeyond:SetActive(false)

        local rarity = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "rarity")
        local param = {}
        param.showStarNum = HeroUtils.GetMaxStarByRarity(rarity)
        param.maxStarNum = HeroUtils.GetMaxStarByRarity(rarity)
        param.showEmptyStar = true
        self.imgBottomArrow:SetData(param)

    end
    
    self.textCurLevel:SetText("Lv." .. level)
    if isReachFinalLimit then
        self.textExp:SetLocalText(150027)
        self.sliderExp:SetValue(1.0)
    else
        local percent = curExp / totalExp
        if percent>1 then
            percent =1
        end
        self.textExp:SetText(string.format("%s/%s", curExp, totalExp))
        self.sliderExp:SetValue(percent)
    end
    
    local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    self.heroConfig = config
    rankId = rankId or config['max_rank_level']
    quality = quality or config[HeroUtils.GetHeroMaxQualityLevelName()]
    
    local campExAtk = LuaEntry.Effect:GetGameEffect(HeroUtils.GetExtraAtkByCamp(camp))
    campExAtk = Mathf.Round(campExAtk * 10) / 10
    campExAtk = math.tointeger(campExAtk) or campExAtk
    local atkStr = tostring(atk)
    if campExAtk > 0 then
        atkStr = atkStr .. "<color=#BCEE22><size=14>+" .. campExAtk .. "</size></color>"
    end
    
    local campExDef = LuaEntry.Effect:GetGameEffect(HeroUtils.GetExtraDefByCamp(camp))
    campExDef = Mathf.Round(campExDef * 10) / 10
    campExDef = math.tointeger(campExDef) or campExDef
    local defStr = tostring(def)
    if campExDef > 0 then
        defStr = defStr .. "<color=#BCEE22><size=14>+" .. campExDef .. "</size></color>"
    end
    
    self.textValueAttack:SetText(atkStr)
    self.textValueDefence:SetText(defStr)
    self.textValueArmy:SetText(HeroUtils.GetArmyLimit(level, rankId, config['rarity'], config['id'],quality))

    self:UpdateMilitaryRank()
    self:UpdateSkills()
end

local function CheckBeyondRes(self)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    if not heroData.isMaster then
        self.imgBeyondGreen:SetActive(false)
        self.imgBeyondYellow:SetActive(false)
        return false
    end

    local canBeyond = heroData:CanBeyond()

    self.imgBeyondGreen:SetActive(false)
    self.imgBeyondYellow:SetActive(false)
end

local function OnClickBtnHeroUpgrade(self)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    --已达最高等级
    if heroData.level >= heroData:GetFinalLevel() then
        return
    end

    if not heroData.isMaster then
        return
    end
    
    --129085=英雄已达限制等级，请前往突破
    if heroData:NeedBeyond() then
        UIUtil.ShowTipsId(129085)
    end
    
    --判断是否可以直升一级
    if heroData:IsCanLevelUp() then
        --直接升级
        local needExp = HeroUtils.GetLevelUpNeedExp(heroData.level) - heroData.exp
        SFSNetwork.SendMessage(MsgDefines.HeroLvUp, self.heroUuid, needExp)
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroLvUp, self.heroUuid)
    end
end

local function OnBtnBeyondClick(self)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    --local ret, uuid = DataCenter.HeroDataManager:IsTheOptimalHeroInSameId(heroData)
    --if not ret then
    --    local optimalHero = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
    --    --您已拥有更高等级的{0},无法对该英雄进行操作
    --    local heroNameStr = string.format("<color='%s'>%s</color>", HeroUtils.GetQualityColorStr(optimalHero.quality), optimalHero:GetName())
    --    UIUtil.ShowMessage(Localization:GetString("129125", heroNameStr), 1, GameDialogDefine.CONFIRM)
    --    
    --    return
    --end

    if not heroData.isMaster then
        return
    end
    local maxLevel = HeroUtils.GetHeroCurrentMaxLevel(heroData.heroId, heroData.quality, heroData:GetCurMilitaryRankId())
    
    if heroData.level >= maxLevel then
        local name = Localization:GetString(heroData.config["name"])
        local heroName = string.format("<color='%s'>%s</color>", HeroUtils.GetRarityColorStr(heroData.rarity), name)
        local str = ""
        if HeroUtils.IsUseMainLvMaxLevel() then
            local needLv = DataCenter.HeroLevelUpTemplateManager:GetNeedMainLv()
            str = Localization:GetString(GameDialogDefine.HERO_UPGRADE_MAX_LEVEL_NEED_MAIN_LEVEL_TIP, heroName, needLv)
        elseif HeroUtils.IsNewMaxLevel() then
            local rankId = HeroUtils.GetNextMaxLevelByRankId(heroData.heroId, heroData:GetCurMilitaryRankId(), heroData.level)
            local rankName = GetTableData(TableName.HeroMilitaryRank, rankId, "name")
            str = Localization:GetString("129287", heroName, Localization:GetString(rankName))
        else
            local star =  HeroUtils.GetNextMaxLevelByQuality(heroData.heroId, heroData.quality, heroData.level)
            if star <= 0 then
                return
            end
            star = Mathf.Round((star - 1) / 2)
            str = Localization:GetString("129232", heroName, tostring(star))
        end
        UIUtil.ShowMessage(str, 1, GameDialogDefine.GOTO, GameDialogDefine.CANCEL, function()
            if HeroUtils.IsUseMainLvMaxLevel() then
                GoToUtil.GotoCityByBuildId(BuildingTypes.FUN_BUILD_MAIN, WorldTileBtnType.City_Upgrade)
            elseif HeroUtils.IsNewMaxLevel() then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMilitaryRank, self.heroUuid)
            else
                self.view.modelViewer:ToggleSceneVisible(false)
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance, self.heroUuid)
            end
        end)
        return
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroBeyond, self.heroUuid)
end

local function OnHeroDataChanged(self, heroUuid)
    if self.heroUuid ~= heroUuid then
        return
    end

    self:RefreshView()
end

local function OnHeroAdvanceSuccess(self)
    --if self.heroUuid ~= nil then
    --    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    --    --很可能是从英雄预览进入进阶界面然后此英雄被当狗粮吃了
    --    if heroData == nil then
    --        return
    --    end
    --end
    
    self:RefreshView()
end

local function OnBtnAtkClick(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.btnAtk.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("150155")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 180
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnBtnDefClick(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.btnDef.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("220207")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 150
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnBtnArmyClick(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.btnArmy.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("150182")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 150
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnRefreshItems(self)
    self:RefreshView()
end

local function UpdateSkills(self)
    local config, heroData
    if self.fromType == self.view.FromType.HeroList then
        heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
        config = heroData.config
    elseif self.fromType == self.view.FromType.HeroMap or self.fromType == self.view.FromType.SingleHeroId then
        config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), self.heroId)
    end

    local skillArray = config['skill']
    if type(skillArray) ~= 'table' then
        skillArray = string.split(skillArray, '|')
    end

    local skillCount = #skillArray

    self.btnSkillsDict = {}
    for k, t in ipairs(self.btnSkills) do
        if k> skillCount then
            t.btn:SetActive(false)
            goto continue
        end

        t.btn:SetActive(true)

        local skillId = tonumber(skillArray[k])
        self.btnSkillsDict[skillId] = t
        t.icon:LoadSprite(HeroUtils.GetSkillIcon(skillId))

        local level = HeroUtils.SkillLevelLimit     --图鉴默认最大等级
        local skillData
        local unlock = true
        if heroData ~= nil then
            skillData = heroData:GetSkillData(skillId)
            if skillData ~= nil then
                level = skillData:GetLevel()
                unlock = heroData:IsSkillUnlock(skillId)
            end
        else
            local type2 = tonumber(GetTableData(TableName.SkillTab, skillId, 'type2'))
            if type2 == 11 then
                level = 1 --觉醒技能始终显示1级
            end
        end

        local canUpgrade = false
        --
        if heroData ~= nil and heroData:IsSkillCanUpgrade(skillId) then
            local costMedalId = config["skill_levelup_item"]
            local costMedalNum = config["skill_levelup_num"]
            local currentNum = DataCenter.ItemData:GetItemCount(costMedalId)
            if level <= table.count(costMedalNum) then
                local needNum = costMedalNum[level]
                canUpgrade = currentNum >= needNum
            end
        end
        --
        t.lvBg:SetActive(unlock)--(level > 0)
        t.lock:SetActive(unlock)--(not unlock)
        UIGray.SetGray(t.btn.transform, not unlock, true)
        t.textLv:SetText(level)
        t.textLv:SetActive(unlock)
        t.redDot:SetActive(canUpgrade)
        ::continue::
    end
end

local function OnHandleSkillUpgrade(self, message)
    --local heroUuid = message['heroUuid']
    --local skillId  = message['skillId']
    --local skillLv  = message['level']
    --
    --local btn = self.btnSkillsDict[skillId]
    self:UpdateSkills()
end

local function OnBtnSkillClick(self, index)
    local config, heroData
    if self.fromType == self.view.FromType.HeroList then
        heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
        config = heroData.config
    elseif self.fromType == self.view.FromType.HeroMap or self.fromType == self.view.FromType.SingleHeroId then
        config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), self.heroId)
    end

    local skillIdList = config['skill']
    if type(skillIdList) ~= 'table' then
        skillIdList = string.split(skillIdList, '|')
    end

    local skillId = tonumber(skillIdList[index])
    local level = HeroUtils.SkillLevelLimit     --图鉴默认最大等级
    local unlock = true
    local unlockQuality = 1
    if heroData ~= nil then
        local skillData = heroData:GetSkillData(skillId)
        if skillData ~= nil then
            level = skillData:GetLevel()
            unlock = heroData:IsSkillUnlock(skillId)
            unlockQuality = skillData.unlockQuality
        end
    else
        local type2 = tonumber(GetTableData(TableName.SkillTab, skillId, 'type2'))
        if type2 == 11 then
            level = 1 --觉醒技能始终显示1级
        end
    end

    local scaleFactor = UIManager:GetInstance():GetScaleFactor()

    local btn = self.btnSkills[index].btn
    local position = btn.transform.position
    
    local UIHeroSkillTipView = require "UI.UIHero2.UIHeroSkillTip.View.UIHeroSkillTipView"
    local dir = UIHeroSkillTipView.Direction.ABOVE


    local param = UIHeroSkillTipView.Param.New()
    param.content = Localization:GetString("150155")
    param.dir = dir
    param.skillId = skillId
    param.isUnlock = unlock
    param.skillLevel = level
    param.skillIndex = index
    param.skillUnlockQuality = unlockQuality
    param.heroRarity = self.heroConfig['rarity']
    param.heroUuid = self.heroUuid
    param.pivot = 0.5 + (index - 2) * 0.225
    param.position = position + Vector3.New(0,  55, 0) * scaleFactor

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroSkillTip, { anim = false }, param)
end


----------军阶start-------------
local function UpdateMilitaryRank(self)
    local config, heroData, isMaster
    if self.fromType == self.view.FromType.HeroList then
        heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
        config = heroData.config
        isMaster = heroData.isMaster
    elseif self.fromType == self.view.FromType.HeroMap or self.fromType == self.view.FromType.SingleHeroId then
        config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), self.heroId)
        isMaster = false
    end
    
    local maxRankId = config['max_rank_level']
    local curRankId = heroData~= nil and heroData:GetCurMilitaryRankId() or maxRankId
    local isMax = curRankId >= maxRankId
    
    --self.nodeMilitaryRank2:SetActive(isMaster and not isMax)
    --self.btnMilitaryRankUpgrade:SetActive(isMaster and not isMax)
    --self.nodeMilitaryRankArrow:SetActive(isMaster and not isMax)
    --self.nodeMilitaryRank1:SetData(curRankId, false)
    self.btnMilitaryUpRedDot:SetActive(false)
    self.militaryRankNewIcon:SetActive(false)
    self.militaryRankNewIcon:LoadSprite(HeroUtils.GetMilitaryRankIcon(curRankId), nil, function()
        self.militaryRankNewIcon:SetActive(true)
    end)
    self.militaryRankName:SetLocalText(HeroUtils.GetMilitaryRankName(curRankId))
    local stage = tonumber(GetTableData(TableName.HeroMilitaryRank, curRankId, "stage"))
    for k, v in ipairs(self.militaryRankNewProgress) do
        v:SetActive(k < stage or isMax)
    end
    if isMaster and not isMax then
        --self.nodeMilitaryRank2:SetData(curRankId+1, true)
        local canUpRank = heroData:CanUpMilitaryRank()
        --self.imgRankArrowGreen:SetActive(canUpRank)
        --self.imgRankArrowYellow:SetActive(not canUpRank)
        self.btnMilitaryUpRedDot:SetActive(canUpRank)
    end
end

local function OnHandleMilitaryRankUpdate(self)
    self:RefreshView()
end

local function OnBtnMilitaryRankUpgradeClick(self)
    if self.fromType ~= self.view.FromType.HeroList then
        return
    end
    
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    --if not self:OptimalCheckPassed() then
    if not heroData.isMaster then
        return
    end
    
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMilitaryRank, self.heroUuid)
end

----------军阶end---------------

local function OptimalCheckPassed(self)
    --local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    --local ret, uuid = DataCenter.HeroDataManager:IsTheOptimalHeroInSameId(heroData)
    --if not ret then
    --    local optimalHero = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
    --    --您已拥有更高等级的{0},无法对该英雄进行操作
    --    local heroNameStr = string.format("<color='%s'>%s</color>", HeroUtils.GetQualityColorStr(optimalHero.quality), optimalHero:GetName())
    --    UIUtil.ShowMessage(Localization:GetString("129125", heroNameStr), 1, GameDialogDefine.CONFIRM)
    --
    --    return false
    --end
    --
    --return true
end

--升级指引使用
local function GetBtnUpSizeDelta(self)
    return self.btnUpgrade.transform.position
end

local function GetMilitaryRankNewBtn(self)
    return self.militaryRankNewBtn.transform.position
end

local function OnMilitaryRankNewBtnClick(self)
    if self.fromType ~= self.view.FromType.HeroList then
        return
    end

    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    if not heroData.isMaster then
        return
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMilitaryRank, self.heroUuid)
end

local function OnAdvanceClick(self)
    if self.fromType ~= self.view.FromType.HeroList then
        return
    end
    self.view:OnBtnAdvanceClick()
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance, self.heroUuid)
end

local function OnMilitaryRankIntroBtnClick(self)
    local heroData, config
    if self.fromType == self.view.FromType.HeroList then
        heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
        config = heroData.config
    elseif self.fromType == self.view.FromType.HeroMap or self.fromType == self.view.FromType.SingleHeroId then
        config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), self.heroId)
    end

    local maxRankId = config['max_rank_level']
    local curRankId = heroData~= nil and heroData:GetCurMilitaryRankId() or maxRankId

    if heroData ~= nil then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMilitaryRankIntroNew, heroData.heroId, curRankId)
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMilitaryRankIntroNew, self.heroId, curRankId)
    end
end

UIHeroInfoDetail.OnCreate = OnCreate
UIHeroInfoDetail.OnDestroy = OnDestroy
UIHeroInfoDetail.OnEnable = OnEnable
UIHeroInfoDetail.OnDisable = OnDisable
UIHeroInfoDetail.ComponentDefine = ComponentDefine
UIHeroInfoDetail.ComponentDestroy = ComponentDestroy
UIHeroInfoDetail.OnAddListener = OnAddListener
UIHeroInfoDetail.OnRemoveListener = OnRemoveListener
UIHeroInfoDetail.OnAdvanceClick = OnAdvanceClick
UIHeroInfoDetail.InitData = InitData
UIHeroInfoDetail.RefreshView = RefreshView

UIHeroInfoDetail.OnClickBtnHeroUpgrade = OnClickBtnHeroUpgrade
UIHeroInfoDetail.OnBtnBeyondClick = OnBtnBeyondClick

--event handler
UIHeroInfoDetail.OnHeroDataChanged = OnHeroDataChanged
UIHeroInfoDetail.OnHeroAdvanceSuccess = OnHeroAdvanceSuccess
UIHeroInfoDetail.OnRefreshItems = OnRefreshItems

UIHeroInfoDetail.OnBtnAtkClick = OnBtnAtkClick
UIHeroInfoDetail.OnBtnDefClick = OnBtnDefClick
UIHeroInfoDetail.OnBtnArmyClick = OnBtnArmyClick

UIHeroInfoDetail.UpdateSkills = UpdateSkills
UIHeroInfoDetail.OnHandleSkillUpgrade = OnHandleSkillUpgrade
UIHeroInfoDetail.OnBtnSkillClick = OnBtnSkillClick

UIHeroInfoDetail.UpdateMilitaryRank = UpdateMilitaryRank
UIHeroInfoDetail.OnHandleMilitaryRankUpdate = OnHandleMilitaryRankUpdate
UIHeroInfoDetail.OnBtnMilitaryRankUpgradeClick = OnBtnMilitaryRankUpgradeClick

UIHeroInfoDetail.OptimalCheckPassed = OptimalCheckPassed
UIHeroInfoDetail.GetBtnUpSizeDelta = GetBtnUpSizeDelta
UIHeroInfoDetail.GetMilitaryRankNewBtn = GetMilitaryRankNewBtn

UIHeroInfoDetail.CheckBeyondRes = CheckBeyondRes
UIHeroInfoDetail.OnMilitaryRankNewBtnClick = OnMilitaryRankNewBtnClick
UIHeroInfoDetail.OnMilitaryRankIntroBtnClick = OnMilitaryRankIntroBtnClick
return UIHeroInfoDetail