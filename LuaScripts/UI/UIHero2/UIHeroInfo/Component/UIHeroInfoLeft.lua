---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 8/10/21 3:46 PM
---

local UIHeroInfoLeft = BaseClass("UIHeroInfoLeft", UIBaseContainer)
local base = UIBaseContainer
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local UIHeroListQualityTip = require 'UI.UIHero2.UIHeroList.Component.UIHeroListQualityTip'
--local UIHeroStars = require 'UI.UIHero2.Common.UIHeroStars'

local camp_red_path = "Banner_Text/NodeTag/ImgCampBg/camp_red"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end


--控件的定义
local function ComponentDefine(self)
    self.imgRarity        = self:AddComponent(UIImage, 'ImgRarity')
    self.imgCamp          = self:AddComponent(UIImage, "Banner_Text/NodeTag/ImgCampBg/ImgCamp")
    self.btnCamp          = self:AddComponent(UIButton, "Banner_Text/NodeTag/ImgCampBg")
    self.textCamp         = self:AddComponent(UITextMeshProUGUIEx, "Banner_Text/NodeTag/ImgCampBg/TextCampName")
    self.textName         = self:AddComponent(UITextMeshProUGUIEx, "Banner_Text/TextHeroName")
    self.nameMat          = self.transform:Find("Banner_Text/TextHeroName/HeroNameMat"):GetComponent(typeof(CS.UnityEngine.MeshRenderer))
    self.textNickName     = self:AddComponent(UITextMeshProUGUIEx, "TextNickName")
    --self.imgQualityBg     = self:AddComponent(UIImage, "Banner_Text/TextHeroName/ImgQualityBg")
    --self.btnQualityBg     = self:AddComponent(UIButton, "Banner_Text/TextHeroName/ImgQualityBg")
    --self.textQualityName  = self:AddComponent(UITextMeshProUGUIEx, 'TextHeroName/ImgQualityBg/TextQualityTag') 
    --self.heroStars        = self:AddComponent(UIHeroStars, "UIHeroStars")
    --self.nodeStarBox      = self:AddComponent(UIBaseContainer, "Banner_Text/TextHeroName/ImgQualityBg/StarBox")

    self.imgTags = {}
    for i = 1,3 do
        local btnTag      = self:AddComponent(UIButton, "Banner_Text/NodeTag/BtnTag" .. i)
        local imgTag      = self:AddComponent(UIImage, "Banner_Text/NodeTag/BtnTag" .. i .. "/ImgTag" .. i)
        local textTag     = self:AddComponent(UITextMeshProUGUIEx, string.format("Banner_Text/NodeTag/BtnTag%s/TextTag%s", i, i))

        btnTag:SetOnClick(function()  
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
            self:OnTagClick(i)
        end)

        table.insert(self.imgTags, {icon = imgTag, text = textTag, btnTag = btnTag})
    end

    --self.nodeTip = self:AddComponent(UIHeroListQualityTip, 'TextHeroName/ImgQualityBg/NodeTip')


    self.btnCamp:SetOnClick(BindCallback(self, self.OnBtnCampClick))
    --self.btnQualityBg:SetOnClick(BindCallback(self, self.OnBtnQualityBgClick))
    self.nodeTag     = self:AddComponent(UIBaseContainer, "Banner_Text/NodeTag")
    self.camp_red = self:AddComponent(UIBaseContainer, camp_red_path)
end

--控件的销毁
local function ComponentDestroy(self)
end

-- 全部刷新
local function InitData(self, heroId, quality, camp, heroUid)
    self.heroId = heroId
    self.quality = quality
    self.heroUuid = heroUid
    
    local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    local rarity = heroConfig['rarity']
    self.imgRarity:LoadSprite(HeroUtils.GetRarityIconName(rarity, true))
    --local starPara = {}
    --starPara.showStarNum = quality
    --starPara.isLeft = true
    --starPara.maxStarNum = HeroUtils.GetMaxStarByRarity(rarity)
    --self.heroStars:SetData(starPara)

    --self.imgQualityBg:LoadSprite(HeroUtils.GetQualityBgPath(quality))
    self:RefreshCamp()
    
    self.textName:SetLocalText(heroConfig["name"])
    self.textName:SetMaterial(self.nameMat.sharedMaterials[rarity])
    self.textNickName:SetLocalText(heroConfig["desc"])
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    local isWakenUp = false
    if heroData ~= nil then
        isWakenUp = heroData:IsWakeUp()
    end
    self.textName:SetColor(HeroUtils.GetHeroNameColorByRarity(rarity, isWakenUp))
    self.textNickName:SetColor(HeroUtils.GetHeroNameColorByRarity(rarity, isWakenUp))

    --self.textQualityName:SetLocalText(GetTableData(TableName.NewHeroesQuality, quality, "name_UI"))
    
    --local starNum = HeroUtils.GetStarNumByQuality(quality)
    
    --self.nodeStarBox:SetActive(starNum > 0)
    --if starNum > 0 then
    --    for i=1, HeroUtils.HeroStarMax do
    --        local star = self.nodeStarBox.transform:Find("star".. i)
    --        star.gameObject:SetActive(starNum >= i)
    --    end
    --end

    self.tagDescList = {}
    local tags = HeroUtils.GetTagsByHeroId(heroId)
    for k, tagTable in pairs(self.imgTags) do
        local imgTag = tagTable.icon
        local textTag = tagTable.text
        local btnTag = tagTable.btnTag

        if tags[k] == nil then
            btnTag:SetActive(false)
            imgTag:SetActive(false)
            textTag:SetActive(false)
        else
            local iconPath, tagName, desc = HeroUtils.GetTagIconAndName(tags[k])

            imgTag:LoadSprite(iconPath)
            textTag:SetText(tagName)
            btnTag:SetActive(true)
            imgTag:SetActive(true)
            table.insert(self.tagDescList, desc)
        end
    end
    self:RefreshHeroCampRed()
end

local function OnBtnCampClick(self)
    local showSelectCamp = false
    if self.heroUuid ~= nil and self.heroUuid ~= 0 and DataCenter.HeroPluginManager:IsOpenSwitchCamp() then
        local campType = GetTableData(HeroUtils.GetHeroXmlName(), self.heroId, "camp")
        if campType == HeroCamp.NEW_HUMAN then
            showSelectCamp = true
        end
    end

    if showSelectCamp then
        local param = {}
        param.heroUuid = self.heroUuid
        param.pos = Vector3.New(self.textCamp.transform.position.x + self.textCamp:GetWidth() * self.transform.lossyScale.x, self.textCamp.transform.position.y, 0)
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroChooseCamp, { anim = false }, param)
    else
        local camp = GetTableData(HeroUtils.GetHeroXmlName(), self.heroId, "camp")
        local restraintCamp = HeroUtils.GetHeroRestraintType(camp)
        if restraintCamp >= 0 then
            local x = self.btnCamp.transform.position.x + 45
            local y = self.btnCamp.transform.position.y - 35
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroCampRestraint,camp,x,y)
        else
            local name, desc = HeroUtils.GetCampNameAndDesc(camp)
            local content = string.format("<size=24>%s</size>\n\n<size=16>%s</size>", name, desc)

            local scaleFactor = UIManager:GetInstance():GetScaleFactor()

            local position = self.btnCamp.transform.position + Vector3.New(0, -70, 0) * scaleFactor
            local param = UIHeroTipView.Param.New()
            param.content = content
            param.dir = UIHeroTipView.Direction.BELOW
            param.defWidth = 210
            param.pivot = 0.45
            param.position = position
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
        end
    end
end

local function OnTagClick(self, index)
    if not self.imgTags[index].icon:GetActive() then
        return
    end
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.imgTags[index].icon.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = self.tagDescList[index]
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 210
    param.pivot = 0.15-- * index
    param.position = position

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end
--
--local function OnBtnQualityBgClick(self)
--    self.nodeTip:SetActive(true)
--end

function UIHeroInfoLeft:ChangeHeroCampSignal()
    self:RefreshCamp()
end

function UIHeroInfoLeft:RefreshCamp()
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    if heroData ~= nil then
        self.imgCamp:LoadSprite(HeroUtils.GetCampIconPath(heroData:GetCamp()))
        self.textCamp:SetText(HeroUtils.GetCampNameAndDesc(heroData:GetCamp()))
    else
        local campType = GetTableData(HeroUtils.GetHeroXmlName(), self.heroId, "camp")
        self.imgCamp:LoadSprite(HeroUtils.GetCampIconPath(campType))
        self.textCamp:SetText(HeroUtils.GetCampNameAndDesc(campType))
    end
end

function UIHeroInfoLeft:RefreshHeroCampRed()
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    if heroData ~= nil and heroData:IsCampRedDot() then
        self.camp_red:SetActive(true)
    else
        self.camp_red:SetActive(false)
    end
end

function UIHeroInfoLeft:RefreshHeroCampRedSignal()
    self:RefreshHeroCampRed()
end

UIHeroInfoLeft.OnCreate = OnCreate
UIHeroInfoLeft.OnDestroy = OnDestroy
UIHeroInfoLeft.ComponentDefine = ComponentDefine
UIHeroInfoLeft.ComponentDestroy = ComponentDestroy
UIHeroInfoLeft.OnTagClick = OnTagClick
UIHeroInfoLeft.OnBtnCampClick = OnBtnCampClick
--UIHeroInfoLeft.OnBtnQualityBgClick = OnBtnQualityBgClick

UIHeroInfoLeft.InitData = InitData

return UIHeroInfoLeft