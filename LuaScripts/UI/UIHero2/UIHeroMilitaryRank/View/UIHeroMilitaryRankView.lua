---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 2022/01/19 下午3:08
---


local UIHeroMilitaryRankView = BaseClass("UIHeroMilitaryRankView", UIBaseView)
local base = UIBaseView

local UIHeroMilitaryRankIcon = require "UI.UIHero2.UIHeroInfo.Component.UIHeroMilitaryRankIcon"
local UIHeroMilitarySkillIcon = require "UI.UIHero2.UIHeroMilitaryRank.Component.UIHeroMilitarySkillIcon"
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"
local UIMedalCell = require "UI.UIHero2.UIHeroMedalExchange.Component.UIMedalCell"
local Localization = CS.GameEntry.Localization
local UnityOutline = typeof(CS.UnityEngine.UI.Outline)
local UIMainResourceProgress = require "UI.UIActivityCenterTable.Component.ResourceProgressItem"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:OnOpen()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    local btn_back = self:AddComponent(UIButton, "Root/BtnBack")
    btn_back:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))
    
    self.nodeMedalExchange = self:AddComponent(UIMedalCell, 'Root/NodeMedal')
    self.btnMedalExchange = self:AddComponent(UIButton, 'Root/NodeMedal')
    self.btnMedalExchange:SetOnClick(BindCallback(self, self.OnBtnMedalExchangeClick))

    self.textMedalExchange = self:AddComponent(UITextMeshProUGUIEx, 'Root/NodeMedal/TextMedalExchange')
    
    self.imgAlpha = self:AddComponent(UIImage, 'Root/PageRoot/rightBg/ImgAlpha')
    
    self.layerNormal = self:AddComponent(UIBaseContainer, 'Root/PageRoot/LayerNormal')
    
    --LayerNormal
    self.alignAnimator = self:AddComponent(UIAnimator, 'Root/PageRoot/LayerNormal/Align')
    self.effectNode1 = self:AddComponent(UIBaseContainer, 'Root/PageRoot/LayerNormal/Align/MilitaryIcon1/EffectNode1')
    self.effectNode2 = self:AddComponent(UIBaseContainer, 'Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr1/ImagePower/EffectNode2')
    
    --self.militaryIcon1 = self:AddComponent(UIHeroMilitaryRankIcon, 'Root/PageRoot/LayerNormal/Align/MilitaryIcon1')
    --self.militaryIcon2 = self:AddComponent(UIHeroMilitaryRankIcon, 'Root/PageRoot/LayerNormal/Align/MilitaryIcon2')
    self.militaryRankNew = self:AddComponent(UIBaseContainer, "Root/PageRoot/MilitaryRankNew")
    self.militaryRankName = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/MilitaryRankNew/MilitaryRankName")

    self.militaryRankNewIcon = self:AddComponent(UIImage, "Root/PageRoot/MilitaryRankNew/MilitaryRankNewIcon")
    self.militaryRankNewProgress = {}
    for i = 1, 5 do
        local progress = self:AddComponent(UIImage, "Root/PageRoot/MilitaryRankNew/MilitaryRankNewProgress"..i)
        table.insert(self.militaryRankNewProgress, progress)
    end

    self.textCurPower   = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr1/TextCurPower")
    self.textNextPower  = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr1/TextNextPower")

    self.textTitleAttack  = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr2/TextTitleAttack")
    self.textCurAttack    = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr2/TextCurAttack")
    self.textNextAttack   = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr2/TextNextAttack")

    self.textTitleDefence  = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr3/TextTitleDefence")
    self.textCurDefence    = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr3/TextCurDefence")
    self.textNextDefence   = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr3/TextNextDefence")

    self.textTitleSolider = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr4/TextTitleSolider")
    self.textCurSolider   = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr4/TextCurSolider")
    self.textNextSolider  = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr4/TextNextSolider")

    self.level = self:AddComponent(UIBaseContainer, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr5")
    self.textTitleMaxLevel  = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr5/TextTitleMaxLevel")
    self.textCurMaxLevel    = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr5/TextCurMaxLevel")
    self.textNextMaxLevel   = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeAttribute/ImgBgAttr5/TextNextMaxLevel")

    self.skillLayerSingle = self:AddComponent(UIBaseContainer, 'Root/PageRoot/LayerNormal/NodeSkill/LayerSingle')
    self.skillLayerMulti  = self:AddComponent(UIBaseContainer, 'Root/PageRoot/LayerNormal/NodeSkill/LayerMulti')
    self.skillTitle  = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerNormal/NodeSkill/SkillTitle')
    self.skillTitle:SetLocalText(120170)
    self.singleSkillIcon1 = self:AddComponent(UIHeroMilitarySkillIcon, 'Root/PageRoot/LayerNormal/NodeSkill/LayerSingle/SingleSkillIcon1')
    self.singleSkillIcon2 = self:AddComponent(UIHeroMilitarySkillIcon, 'Root/PageRoot/LayerNormal/NodeSkill/LayerSingle/SingleSkillIcon2')
    
    self.multiSkillIconList = {}
    for i = 1, HeroUtils.SKILL_CNT_MAX do
        local skillIcon = self:AddComponent(UIHeroMilitarySkillIcon, 'Root/PageRoot/LayerNormal/NodeSkill/LayerMulti/HeroSkillIcon' .. i)
        table.insert(self.multiSkillIconList, skillIcon)
    end
    
    self.nodeRequire   = self:AddComponent(UIBaseContainer, 'Root/PageRoot/LayerNormal/NodeRequire')
    self.textTitleRequire = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerNormal/NodeRequire/TextTitleRequire')
    self.requireHeroCell  = self:AddComponent(UIHeroCellSmall, 'Root/PageRoot/LayerNormal/NodeRequire/UIHeroCellSmall')
    self.textRequireTip   = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerNormal/NodeRequire/TextRequireTip')
    self.btnGoto          = self:AddComponent(UIButton, 'Root/PageRoot/LayerNormal/NodeRequire/BtnGoto')
    self.textBtnGoto      = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerNormal/NodeRequire/BtnGoto/TextBtnGoto')

    self.nodeCost       = self:AddComponent(UIBaseContainer, 'Root/PageRoot/LayerNormal/NodeCost')
    self.textTitleCost  = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerNormal/NodeCost/TextTitleCost')
    self.costMedal      = self:AddComponent(UIMedalCell, 'Root/PageRoot/LayerNormal/NodeCost/Align/NodeCostMedal')
    self.btnMedal       = self:AddComponent(UIButton, 'Root/PageRoot/LayerNormal/NodeCost/Align/NodeCostMedal/BtnMedal')
    self.textCostGold   = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerNormal/NodeCost/Align/NodeCostGold/TextCostGold')
    self.btnGold        = self:AddComponent(UIButton, 'Root/PageRoot/LayerNormal/NodeCost/Align/NodeCostGold')
    self.btnUpgrade     = self:AddComponent(UIButton, 'Root/PageRoot/LayerNormal/NodeCost/BtnUpgrade')
    self.textBtnUpgrade = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerNormal/NodeCost/BtnUpgrade/TextBtnUpgrade')

    self.btnMedal1     = self:AddComponent(UIButton, 'Root/PageRoot/LayerNormal/NodeCost/BtnMedalExchange')
    self.btnMedalText1 = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerNormal/NodeCost/BtnMedalExchange/BtnMedalExchangeText')
    self.btnMedalText1:SetLocalText(150199)
    --self.textTitleCost = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerNormal/NodeCost/TextTitleCost")
    --self.textTitleSkill = self:AddComponent(UITextMeshProUGUIEx, "Root/ScrollView/Viewport/Content/NodeSkill/TextTitleSkill")
    --self.nodeSKillRoot = self:AddComponent(UIBaseContainer, 'Root/ScrollView/Viewport/Content/NodeSkill')
    self.money = self:AddComponent(UIMainResourceProgress, "Root/PageRoot/UIMainTopResourceCell")
    local param = {}
    local template = DataCenter.ResourceTemplateManager:GetResourceTemplate(ResourceType.Money)
    if template then
        param.iconName = string.format(LoadPath.CommonPath, template.icon)
        param.resourceType = ResourceType.Money
        self.money:ReInit(param)
    end
    --layerFinal
    self.layerFinal = self:AddComponent(UIBaseContainer, 'Root/PageRoot/LayerFinal')
    --self.militaryIconFinal = self:AddComponent(UIHeroMilitaryRankIcon, 'Root/PageRoot/LayerFinal/FinalMilitaryIcon')

    self.textFinalPower   = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerFinal/NodeAttribute/ImgBgAttr1/TextFinalPower")

    self.textTitleAttack2  = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerFinal/NodeAttribute/ImgBgAttr2/TextTitleAttack2")
    self.textFinalAttack    = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerFinal/NodeAttribute/ImgBgAttr2/TextFinalAttack")

    self.textTitleDefence2  = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerFinal/NodeAttribute/ImgBgAttr3/TextTitleDefence2")
    self.textFinalDefence    = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerFinal/NodeAttribute/ImgBgAttr3/TextFinalDefence")

    self.textTitleSolider2 = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerFinal/NodeAttribute/ImgBgAttr4/TextTitleSolider2")
    self.textFinalSolider   = self:AddComponent(UITextMeshProUGUIEx, "Root/PageRoot/LayerFinal/NodeAttribute/ImgBgAttr4/TextFinalSolider")
    
    self.textFinalTip = self:AddComponent(UITextMeshProUGUIEx, 'Root/PageRoot/LayerFinal/TipBg/TextFinalTip')

    self.finalSkillIconList = {}
    for i = 1, HeroUtils.SKILL_CNT_MAX do
        local skillIcon = self:AddComponent(UIHeroMilitarySkillIcon, 'Root/PageRoot/LayerFinal/NodeSkill/LayerFinal/FinalSkillIcon' .. i)
        table.insert(self.finalSkillIconList, skillIcon)
    end

    self.textMedalExchange:SetLocalText(150199)
    
    self.textTitleAttack:SetLocalText(100150)
    self.textTitleDefence:SetLocalText(130066)
    self.textTitleSolider:SetLocalText(140310)
    self.textTitleMaxLevel:SetLocalText(129112)
    self.textTitleAttack2:SetLocalText(150101)
    self.textTitleDefence2:SetLocalText(150102)
    self.textTitleSolider2:SetLocalText(140310)
    
    self.textTitleRequire:SetLocalText(129113)
    self.textTitleCost:SetLocalText(100040)
    
    self.textFinalTip:SetLocalText(129122) --当前军阶已达最大等级
    self.textBtnUpgrade:SetLocalText(GameDialogDefine.UPGRADE)
    self.textBtnGoto:SetLocalText(GameDialogDefine.GOTO)

    self.btnMedal:SetOnClick(BindCallback(self, self.OnBtnCostMedalClick))
    self.btnMedal1:SetOnClick(BindCallback(self, self.OnBtnMedalExchangeClick))
    self.btnGold:SetOnClick(BindCallback(self, self.OnBtnCostGoldClick))
    self.btnGoto:SetOnClick(BindCallback(self, self.OnBtnGotoClick))
    self.btnUpgrade:SetOnClick(BindCallback(self, self.OnBtnUpgradeClick))
    self.militaryRankIntro = self:AddComponent(UIButton, "Root/PageRoot/MilitaryRankNew/MilitaryRankIntro")
    self.militaryRankIntro:SetOnClick(BindCallback(self, self.OnMilitaryRankIntroBtnClick))
    self.militaryRankIntro:SetActive(true)

    self.militaryRankIntro = self:AddComponent(UIButton, "Root/PageRoot/MilitaryRankNew/MilitaryRankNewIcon")
    self.militaryRankIntro:SetOnClick(BindCallback(self, self.OnMilitaryRankIntroBtnClick))
end

local function RemoveDotween(self, text)
    if text then
        DOTween.Kill(text.transform)
    end
end

local function ComponentDestroy(self)
    self:RemoveDotween(self.textCurPower)
    self:RemoveDotween(self.textCurAttack)
    self:RemoveDotween(self.textCurDefence)
    self:RemoveDotween(self.textCurSolider)
    self:RemoveDotween(self.textNextPower)
    self:RemoveDotween(self.textNextAttack)
    self:RemoveDotween(self.textNextDefence)
    self:RemoveDotween(self.textNextSolider)
    if self.militaryRankIntro then
        self.militaryRankIntro:SetActive(true)
    end
    self.militaryRankIntro = nil
    self.textCurPower = nil
    self.textCurAttack = nil
    self.textCurDefence = nil
    self.textCurSolider = nil
    self.textNextPower = nil
    self.textNextAttack = nil
    self.textNextDefence = nil
    self.textNextSolider = nil
end

local function DataDefine(self)
    self.isUpgrading = false
end

local function DataDestroy(self)
    self.isUpgrading = false
end

local function OnEnable(self)
    base.OnEnable(self)

    self.effectNode1:SetActive(false)
    self.effectNode2:SetActive(false)
    
    EventManager:GetInstance():Broadcast(EventId.ToggleHeroPreviewScene, false)
end

local function OnDisable(self)
    EventManager:GetInstance():Broadcast(EventId.ToggleHeroPreviewScene, true)
    base.OnDisable(self)
end

local function OnOpen(self)
    self.heroUuid = self:GetUserData()
    self.heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)


    self:UpdateData()
    self:UpdateMedalExchangeNode()
    
    self:UpdateLayerNormal()
    self:UpdateLayerFinal()
end

local function UpdateData(self)
    
    self.curRankId = self.heroData:GetCurMilitaryRankId()
    self.costMedalId = GetTableData(HeroUtils.GetHeroXmlName(), self.heroData.heroId, 'skill_levelup_item')
    self.costMedalNum = GetTableData(TableName.HeroMilitaryRank, self.curRankId, 'cost_medal')[self.heroData.rarity]
    self.costGoldNum = GetTableData(TableName.HeroMilitaryRank, self.curRankId, 'cost_coin')[self.heroData.rarity]
end

local function UpdateMedalExchangeNode(self)
    --local isS = self.heroData.rarity == HeroUtils.RarityType.S
    --self.nodeMedalExchange:SetActive(not isS)
    --
    --if isS then
    --    return
    --end
    local showFlag = self:NeedShowMedalExchange()
    self.nodeMedalExchange:SetActive(showFlag)
    --self.btnMedalExchange
    local costMedalId = self.costMedalId
    local template = DataCenter.ItemTemplateManager:GetItemTemplate(costMedalId)
    local para1 = template and template.para1 or nil
    if para1 ~= nil and para1 ~= '' then
        local commonMedalData = DataCenter.ItemData:GetItemById(para1)
        local commonCount = commonMedalData and commonMedalData.count or 0
        self.nodeMedalExchange:SetData(para1, commonCount)
    end
end

local function NeedShowMedalExchange(self)
    if self.heroData and self.heroData.heroId == HeroUtils.HeroIds.HeroIds_1003 and LuaEntry.DataConfig:CheckSwitch("catgirl_medal_exchange") then
        return false
    end
    local template = DataCenter.ItemTemplateManager:GetItemTemplate(self.costMedalId)
    if template == nil or template.para1 == nil or template.para1 == "" then
        return false
    end
    return true
end

local function UpdateLayerNormal(self, showAni)
    local reachMax = self.heroData:IsReachMaxMilitaryRank()
    self.layerNormal:SetActive(not reachMax)
    if reachMax then
        return
    end

    local config = self.heroData.config
    local rarity = self.heroData.rarity
    local curRankId = self.heroData:GetCurMilitaryRankId()
    --self.militaryIcon1:SetData(curRankId, false)
    --self.militaryIcon2:SetData(curRankId + 1, true)

    self.militaryRankNewIcon:LoadSprite(HeroUtils.GetMilitaryRankIcon(curRankId))
    self.militaryRankName:SetLocalText(HeroUtils.GetMilitaryRankName(curRankId))
    local stage = tonumber(GetTableData(TableName.HeroMilitaryRank, curRankId, "stage"))
    for k, v in ipairs(self.militaryRankNewProgress) do
        v:SetActive(k < stage)
    end

    --todo: attributes
    local k1 = LuaEntry.DataConfig:TryGetNum("power_setting", "k1")

    local beyondTimes = HeroUtils.GetBeyondTimesByLevel(self.heroData.curMaxLevel)
    local curAtk, curDef = HeroUtils.GetHeroAttr(self.heroData.heroId, self.heroData.quality, self.heroData.level, beyondTimes, curRankId)
    local nextAtk, nextDef = HeroUtils.GetHeroAttr(self.heroData.heroId, self.heroData.quality, self.heroData.level, beyondTimes, curRankId + 1)
    local k5 = LuaEntry.DataConfig:TryGetNum("power_setting", "k5")
    if k5 <=0 then
        k5 = 1
    end
    local curPower = Mathf.Round(Mathf.Pow((curAtk + curDef),k5) * k1)
    local nextPower = Mathf.Round(Mathf.Pow((nextAtk + nextDef),k5) * k1)
    local curSolider = HeroUtils.GetArmyLimit(self.heroData.level, curRankId, rarity, config['id'],self.heroData.quality)
    local nextSolider = HeroUtils.GetArmyLimit(self.heroData.level, curRankId+1, rarity, config['id'],self.heroData.quality)
    if not HeroUtils.IsNewMaxLevel() then
        self.level:SetActive(false)
    end
    if not showAni then
        self.textCurPower:SetText(string.GetFormattedSeperatorNum(curPower))
        self.textCurAttack:SetText(string.GetFormattedSeperatorNum(Mathf.Round(curAtk)))
        self.textCurDefence:SetText(string.GetFormattedSeperatorNum(Mathf.Round(curDef)))
        self.textCurSolider:SetText(string.GetFormattedSeperatorNum(curSolider))
        
        self.textNextPower:SetText(string.GetFormattedSeperatorNum(nextPower))
        self.textNextAttack:SetText(string.GetFormattedSeperatorNum(Mathf.Round(nextAtk)))
        self.textNextDefence:SetText(string.GetFormattedSeperatorNum(Mathf.Round(nextDef)))
        self.textNextSolider:SetText(string.GetFormattedSeperatorNum(nextSolider))
        if HeroUtils.IsNewMaxLevel() then
            local curLvMax = HeroUtils.GetHeroCurrentMaxLevel(self.heroData.heroId, self.heroData.quality, self.heroData:GetCurMilitaryRankId())
            local nextLvMax = HeroUtils.GetHeroCurrentMaxLevel(self.heroData.heroId, self.heroData.quality, self.heroData:GetCurMilitaryRankId() + 1)
            self.textCurMaxLevel:SetText(string.GetFormattedSeperatorNum(curLvMax))
            self.textNextMaxLevel:SetText(string.GetFormattedSeperatorNum(nextLvMax))
        end
    else
        local formatStr = function(str)
            local numStr = string.gsub(str, ",", "")
            return tonumber(numStr)
        end
        local lastCurPower = formatStr(self.textCurPower:GetText())
        local lastCurAttack = formatStr(self.textCurAttack:GetText())
        local lastCurDefence = formatStr(self.textCurDefence:GetText())
        local lastCurSolider = formatStr(self.textCurSolider:GetText())
        local lastCurLevel = formatStr(self.textCurMaxLevel:GetText())

        local lastNextPower = formatStr(self.textNextPower:GetText())
        local lastNextAttack = formatStr(self.textNextAttack:GetText())
        local lastNextDefence = formatStr(self.textNextDefence:GetText())
        local lastNextSolider = formatStr(self.textNextSolider:GetText())
        local lastNextLevel = formatStr(self.textNextMaxLevel:GetText())

        self:RollNum(self.textCurPower,   lastCurPower,   curPower)
        self:RollNum(self.textCurAttack,  lastCurAttack,  Mathf.Round(curAtk))
        self:RollNum(self.textCurDefence, lastCurDefence, Mathf.Round(curDef))
        self:RollNum(self.textCurSolider, lastCurSolider, curSolider)

        self:RollNum(self.textNextPower,   lastNextPower,   nextPower)
        self:RollNum(self.textNextAttack,  lastNextAttack,  Mathf.Round(nextAtk))
        self:RollNum(self.textNextDefence, lastNextDefence, Mathf.Round(nextDef))
        self:RollNum(self.textNextSolider, lastNextSolider, nextSolider)

        if HeroUtils.IsNewMaxLevel() then
            local curLvMax = HeroUtils.GetHeroCurrentMaxLevel(self.heroData.heroId, self.heroData.quality, self.heroData:GetCurMilitaryRankId())
            local nextLvMax = HeroUtils.GetHeroCurrentMaxLevel(self.heroData.heroId, self.heroData.quality, self.heroData:GetCurMilitaryRankId() + 1)
            self:RollNum(self.textCurMaxLevel, lastCurLevel, curLvMax)
            self:RollNum(self.textNextMaxLevel, lastNextLevel, nextLvMax)
        end
    end
    
    
    --skill
    local skillIdxStr = GetTableData(TableName.HeroMilitaryRank, curRankId, 'skill')[self.heroData.rarity] or ''
    local upSkillIdxList = string.split(skillIdxStr, ';')
    table.removebyvalue(upSkillIdxList, '0')
    
    local skillCnt = #upSkillIdxList
    
    self.skillLayerSingle:SetActive(skillCnt == 1)
    self.skillLayerMulti:SetActive(skillCnt > 1)
    self.skillTitle:SetActive(skillCnt >= 1)
    if skillCnt == 1 then
        local skillId = config['skill'][tonumber(upSkillIdxList[1])] 
        local skillLv = self.heroData:GetSkillLevel(skillId)
        self.singleSkillIcon1:SetData(skillId, skillLv, false, 0.8)
        self.singleSkillIcon2:SetData(skillId, skillLv + 1, false, 0.88)
    elseif skillCnt > 1 then
        for i, skillIcon in pairs(self.multiSkillIconList) do
            if skillCnt >= i then
                skillIcon:SetActive(true)
                local skillId = config['skill'][tonumber(upSkillIdxList[i])]
                local skillLv = self.heroData:GetSkillLevel(skillId) + 1
                skillIcon:SetData(skillId, skillLv, true, 0.8 + i * 0.032)
            else
                skillIcon:SetActive(false)
            end
        end
    end

    local requireQuality = GetTableData(TableName.HeroMilitaryRank, curRankId, 'require')[self.heroData.rarity]

    self.nodeRequire:SetActive(self.heroData.quality < requireQuality)
    self.nodeCost:SetActive(self.heroData.quality >= requireQuality)
    if self.heroData.quality < requireQuality then
        self.requireHeroCell:InitWithConfigId(self.heroData.heroId, requireQuality, self.heroData.level)
        self.textRequireTip:SetLocalText(129121, string.format("<color='%s'>%s</color>", HeroUtils.GetQualityColorStr(requireQuality),  HeroUtils.GetQualityName(requireQuality)))
    else
        self:UpdateConsume()
    end

end

local function RollNum(self, hostText, srcValue, dstValue)
    local function Getter()
        return srcValue
    end

    local function Setter(value)
        if hostText == nil then
            return
        end
        local v = math.floor(value + 0.5)
        hostText:SetText(string.GetFormattedSeperatorNum(v))
    end

    local function Complete()
        if hostText == nil then
            return
        end

        hostText:SetText(string.GetFormattedSeperatorNum(dstValue))
        hostText.transform:Set_localScale(1, 1, 1)
    end

    hostText.transform:Set_localScale(1, 1, 1)
    hostText.transform:DOScale(Vector3.New(1.1, 1.1, 1), 0.15):OnComplete(function()
        DOTween.To(Getter, Setter, dstValue, 0.7):OnComplete(Complete)
    end)
end

local function UpdateLayerFinal(self)
    local reachMax = self.heroData:IsReachMaxMilitaryRank()
    self.layerFinal:SetActive(reachMax)
    if not reachMax then
        return
    end
    
    local maxRankId = self.heroData:GetMaxMilitaryRankId()
    --self.militaryIconFinal:SetData(maxRankId)
    for k, v in ipairs(self.militaryRankNewProgress) do
        v:SetActive(true)
    end

    local k1 = LuaEntry.DataConfig:TryGetNum("power_setting", "k1")
    local beyondTimes = HeroUtils.GetBeyondTimesByLevel(self.heroData.curMaxLevel)
    local curAtk, curDef = HeroUtils.GetHeroAttr(self.heroData.heroId, self.heroData.quality, self.heroData.level, beyondTimes, maxRankId)
    self.militaryRankNewIcon:LoadSprite(HeroUtils.GetMilitaryRankIcon(maxRankId))
    self.militaryRankName:SetLocalText(HeroUtils.GetMilitaryRankName(maxRankId))
    local k5 = LuaEntry.DataConfig:TryGetNum("power_setting", "k5")
    if k5 <=0 then
        k5 = 1
    end
    local curPower = Mathf.Round(Mathf.Pow((curAtk + curDef),k5) * k1)
    
    
    self.textFinalPower:SetText(string.GetFormattedSeperatorNum(curPower))
    self.textFinalAttack:SetText(string.GetFormattedSeperatorNum(self.heroData.atk))
    self.textFinalDefence:SetText(string.GetFormattedSeperatorNum(self.heroData.def))
    self.textFinalSolider:SetText(string.GetFormattedSeperatorNum(HeroUtils.GetArmyLimit(self.heroData.level, maxRankId, self.heroData.rarity, self.heroData.heroId,self.heroData.quality)))

    local skillIds = self.heroData.config['skill']
    for k, skillIcon in pairs(self.finalSkillIconList) do
        skillIcon:SetActive(k <= #skillIds)
        if k <= #skillIds then
            local skillId = skillIds[k]
            local skillLevel = self.heroData:GetSkillLevel(skillId)
            skillIcon:SetData(skillId, skillLevel, false, 0.8 + k * 0.032)           
        end
    end
end

local function UpdateConsume(self)
    local item = DataCenter.ItemData:GetItemById(self.costMedalId)
    local medalHave = item and item.count or 0
    
    local reachMax = self.heroData:IsReachMaxMilitaryRank()
    if reachMax then
        return
    end
    
    self.costMedal:SetData(self.costMedalId, self.costMedalNum)
    self.costMedal:SetNumDisplay(medalHave .. '/' .. self.costMedalNum)
    self.textCostGold:SetText(string.GetFormattedSeperatorNum(self.costGoldNum))
    
    local redColor = Color32.New(232/255, 66/255, 66/255, 1)
    
    local goldHave = LuaEntry.Resource:GetCntByResType(ResourceType.Money)
    self.costMedal:SetNumColor(medalHave < self.costMedalNum and redColor or Color32.white)
    self.textCostGold:SetColor(goldHave < self.costGoldNum and redColor or Color32.white)
    if self:NeedShowMedalExchange() then
        local showFlag = medalHave < self.costMedalNum
        self.btnUpgrade:SetActive(not showFlag)
        self.btnMedal1:SetActive(showFlag)
        CS.UIGray.SetGray(self.btnUpgrade.transform, false, true)
    else
        self.btnUpgrade:SetActive(true)
        self.btnMedal1:SetActive(false)
        local grayFlag = medalHave < self.costMedalNum
        CS.UIGray.SetGray(self.btnUpgrade.transform, grayFlag, not grayFlag)
    end
    
    self.costMedal:ToggleNumOutline(medalHave >= self.costMedalNum)
    local outlines = self.textCostGold.gameObject:GetComponents(UnityOutline)
    for i = 0, outlines.Length -1 do
        outlines[i].enabled = goldHave >= self.costGoldNum
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.HeroRankUpSuccess, self.OnHandleRankUpSuccess)
    self:AddUIListener(EventId.HeroMedalExchanged, self.OnMedalExchanged)
    self:AddUIListener(EventId.ResourceUpdated, self.OnRefreshItems)
    self:AddUIListener(EventId.RefreshItems, self.OnRefreshItems)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.HeroRankUpSuccess, self.OnHandleRankUpSuccess)
    self:RemoveUIListener(EventId.HeroMedalExchanged, self.OnMedalExchanged)
    self:RemoveUIListener(EventId.ResourceUpdated, self.OnRefreshItems)
    self:RemoveUIListener(EventId.RefreshItems, self.OnRefreshItems)

    base.OnRemoveListener(self)
end

local function OnRefreshItems(self)
    self.money:Refresh()
    self:UpdateConsume()
end

local function OnBtnMedalExchangeClick(self)
    local template = DataCenter.ItemTemplateManager:GetItemTemplate(self.costMedalId)
    local para1 = template and template.para1
    local reachMax = self.heroData:IsReachMaxMilitaryRank()
    if reachMax then
        UIUtil.ShowTipsId(129122)
        return 
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMedalExchange, para1, self.costMedalId, self.heroData.heroId, self.costMedalNum)
end

local function OnBtnGotoClick(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIHeroMilitaryRank)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIHeroInfo)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance, { anim = true, hideTop = true })
end

local function OnBtnUpgradeClick(self)
    --local ret, uuid = DataCenter.HeroDataManager:IsTheOptimalHeroInSameId(self.heroData)
    --if not ret then
    --    local optimalHero = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
    --    --您已拥有更高等级的{0},无法对该英雄进行操作
    --    local heroNameStr = string.format("<color='%s'>%s</color>", HeroUtils.GetQualityColorStr(optimalHero.quality), optimalHero:GetName())
    --    UIUtil.ShowMessage(Localization:GetString("129125", heroNameStr), 1, GameDialogDefine.CONFIRM)
    --    return
    --end
    if self.isUpgrading then
        return
    end
    if not self.heroData.isMaster then
        return
    end
    
    local item = DataCenter.ItemData:GetItemById(self.costMedalId)
    local have = item and item.count or 0

    if have < self.costMedalNum then
        UIUtil.ShowTipsId(120021)
        return
    end
    local gold = LuaEntry.Resource:GetCntByResType(ResourceType.Money)
    if gold < self.costGoldNum then
        local lackTab = {}
        local param = {}
        param.type = ResLackType.Res
        param.id = ResourceType.Money
        param.targetNum = self.costGoldNum
        table.insert(lackTab,param)
        GoToResLack.GoToItemResLackList(lackTab)
        return
    end
    self.isUpgrading = true
    SFSNetwork.SendMessage(MsgDefines.HeroRankUpgrade, self.heroUuid)
end


local function OnMedalExchanged(self)
    self:UpdateConsume()
    self:UpdateMedalExchangeNode()
end

local function OnHandleRankUpSuccess(self)
    self.isUpgrading = false
    self.alignAnimator:SetTrigger("up")
    
    self.effectNode1:SetActive(false)
    self.effectNode2:SetActive(false)
    self.effectNode1:SetActive(true)
    self.effectNode2:SetActive(true)

    self:UpdateData()
    self:UpdateLayerNormal(true)
    self:UpdateLayerFinal()
end

local function OnBtnCostMedalClick(self)
    local param = {}
    param["itemId"] = self.costMedalId
    param["alignObject"] = self.btnMedal
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
end

local function OnBtnCostGoldClick(self)
    local param = {}
    param["itemId"] = ResourceType.Money
    param["alignObject"] = self.textCostGold
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
end

local function OnMilitaryRankIntroBtnClick(self)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    local curRankId = heroData~= nil and heroData:GetCurMilitaryRankId() or 1

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMilitaryRankIntroNew, heroData.heroId, curRankId)
end

UIHeroMilitaryRankView.OnCreate= OnCreate
UIHeroMilitaryRankView.OnDestroy = OnDestroy
UIHeroMilitaryRankView.OnEnable = OnEnable
UIHeroMilitaryRankView.OnDisable = OnDisable
UIHeroMilitaryRankView.OnAddListener = OnAddListener
UIHeroMilitaryRankView.OnRemoveListener = OnRemoveListener
UIHeroMilitaryRankView.ComponentDefine = ComponentDefine
UIHeroMilitaryRankView.ComponentDestroy = ComponentDestroy
UIHeroMilitaryRankView.DataDefine = DataDefine
UIHeroMilitaryRankView.DataDestroy = DataDestroy
UIHeroMilitaryRankView.OnOpen = OnOpen
UIHeroMilitaryRankView.OnMilitaryRankIntroBtnClick = OnMilitaryRankIntroBtnClick
UIHeroMilitaryRankView.UpdateData = UpdateData
UIHeroMilitaryRankView.UpdateMedalExchangeNode = UpdateMedalExchangeNode
UIHeroMilitaryRankView.UpdateLayerNormal = UpdateLayerNormal
UIHeroMilitaryRankView.UpdateLayerFinal = UpdateLayerFinal
UIHeroMilitaryRankView.UpdateConsume = UpdateConsume

UIHeroMilitaryRankView.OnBtnMedalExchangeClick = OnBtnMedalExchangeClick
UIHeroMilitaryRankView.OnBtnGotoClick = OnBtnGotoClick
UIHeroMilitaryRankView.OnBtnUpgradeClick = OnBtnUpgradeClick



UIHeroMilitaryRankView.OnRefreshItems = OnRefreshItems
UIHeroMilitaryRankView.OnMedalExchanged = OnMedalExchanged
UIHeroMilitaryRankView.OnHandleRankUpSuccess = OnHandleRankUpSuccess

UIHeroMilitaryRankView.RollNum = RollNum
UIHeroMilitaryRankView.OnBtnCostMedalClick = OnBtnCostMedalClick
UIHeroMilitaryRankView.OnBtnCostGoldClick = OnBtnCostGoldClick
UIHeroMilitaryRankView.RemoveDotween = RemoveDotween
UIHeroMilitaryRankView.NeedShowMedalExchange = NeedShowMedalExchange

return UIHeroMilitaryRankView
