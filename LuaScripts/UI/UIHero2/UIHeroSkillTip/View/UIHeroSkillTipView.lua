---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/15/21 4:52 PM
---

local UIHeroSkillTipView = BaseClass("UIHeroSkillTipView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local Param = DataClass("Param", ParamData)
local MinWidth  = 400
local MinHeight = 80
local MarginX = 30
local MarginY = 20

local Direction = {
    ABOVE  = 1,
    BELOW  = 2,
    LEFT   = 3,
    RIGHT  = 4,
}

local ParamData =  {
    skillId = "",
    skillLevel = 1,
    skillIndex = -1,
    skillUnlockQuality = 1,
    heroRarity = -1,
    heroUuid = -1,
    dir = Direction.ABOVE,
    pivot = 0.5,
    position = Vector2.zero,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()

    local param = self:GetUserData()
    self.param = param
    local dir = param.dir
    local pivot = param.pivot
    local defWidth = param.defWidth
    local skillIndex = param.skillIndex
    local notShowUnlock = param.notShowUnlock
    local rootRt = self.root.rectTransform
    local arrowRt = self.imgArrow.rectTransform
    --local contentRt = self.textContent.rectTransform
    
    
    if dir == Direction.ABOVE then
        rootRt.pivot = Vector2.New(pivot, 0)
        arrowRt.localRotation = Quaternion.Euler(0, 0, 90)
        arrowRt.anchorMin = Vector2.New(pivot, 0)
        arrowRt.anchorMax = Vector2.New(pivot, 0)
        arrowRt.anchoredPosition = Vector2.New(0, 8)
    elseif dir == Direction.BELOW then
        rootRt.pivot = Vector2.New(pivot, 1)
        arrowRt.localRotation = Quaternion.Euler(0, 0, -90)
        arrowRt.anchorMin = Vector2.New(pivot, 1)
        arrowRt.anchorMax = Vector2.New(pivot, 1)
        arrowRt.anchoredPosition = Vector2.New(0, -8)
    elseif dir == Direction.RIGHT then
        rootRt.pivot = Vector2.New(0, pivot)
        arrowRt.localRotation = Quaternion.Euler(0, 0, 0)
        arrowRt.anchorMin = Vector2.New(0, pivot)
        arrowRt.anchorMax = Vector2.New(0, pivot)
        arrowRt.anchoredPosition = Vector2.New(9, 0)
    elseif dir == Direction.LEFT then
        rootRt.pivot = Vector2.New(1, pivot)
        arrowRt.localRotation = Quaternion.Euler(0, 0, 180)
        arrowRt.anchorMin = Vector2.New(1, pivot)
        arrowRt.anchorMax = Vector2.New(1, pivot)
        arrowRt.anchoredPosition = Vector2.New(-9, 0)
    end
    
    local skillId, skillLevel = param.skillId, param.skillLevel
    local skillName = Localization:GetString(GetTableData(TableName.SkillTab, skillId, 'name'))
    local skillType = Localization:GetString(GetTableData(TableName.SkillTab, skillId, 'type_des'))
    local skillDesc, effectDesc = HeroUtils.GetSkillDescStr(skillId, skillLevel,"#4FC890") --self:GetSkillDescStr()

    self.textSkillName:SetText(skillName)
    self.textSkillType:SetText(skillType)

    local skillType2 = tonumber(GetTableData(TableName.SkillTab, skillId, 'type2'))

    if skillType2 ~= 11 then
        self.textSubTitle2:SetLocalText(150166)
        self.textEffect:SetText(effectDesc)
        local preHeight = self.textEffect:GetHeight()
        self.textEffect.rectTransform:Set_sizeDelta(self.textEffect.rectTransform.sizeDelta.x, preHeight)
        --Logger.Log("#SkillTip# textEffect PreHeight:" .. preHeight)
    end
    
    self.textSubTitle2:SetActive(skillType2 ~= 11)
    self.textEffect:SetActive(skillType2 ~= 11)
    local showTextUnlock = false
    self.upgradeBtn:SetActive(false)
    self.useBtn:SetActive(false)
    if notShowUnlock~=nil and notShowUnlock==true then
    else
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(param.heroUuid)
        --129216
        if heroData ~= nil then
            if heroData:IsSkillCanUpgrade(skillId) then
                self.upgradeBtn:SetActive(true)
            end

            local effectId = DataCenter.HeroEffectSkillManager:GetEffectIdBySkillId(skillId)
            if effectId ~= nil and DataCenter.HeroEffectSkillManager:CanUse(effectId) then
                if effectId == EffectDefine.DAILY_FREE_ENERGY then
                    self.useBtn:SetActive(true)
                    self.useEffectId = effectId
                end
            end
        end

        if skillType2 ~= 11 then
            if not param.isUnlock then
                local heroLevel = self:GetSKillNextLevelHeroLv(skillIndex)
                if heroLevel ~= nil then
                    showTextUnlock = true
                    self.textUnlock:SetLocalText(129216, heroLevel)
                end
            else --显示jie条件
                local heroLevel = self:GetSKillNextLevelHeroLv(skillIndex)
                if heroLevel ~= nil then
                    showTextUnlock = true
                    self.textUnlock:SetLocalText(129216, heroLevel)
                end
                if param.heroRarity ~= nil and param.skillIndex ~= nil then
                    local rankId = self:GetSKillNextLevelRankId(skillIndex, skillLevel+1, param.heroRarity)
                    if rankId ~= -1 then
                        --九章要求品质大于等于7时 不显示品质要求
                        if heroData ~= nil and heroData.quality >= 7 then
                            self.textUnlock:SetLocalText(129118, Localization:GetString(HeroUtils.GetMilitaryRankName(rankId)))
                        else
                            local reqQuality = GetTableData(TableName.HeroMilitaryRank, rankId, 'require')[param.heroRarity]
                            --local qualityName = string.format("<color='%s'>%s</color>", HeroUtils.GetQualityColorStr(reqQuality),  HeroUtils.GetQualityName(reqQuality))
                            --local stateDialogId = heroData.quality >= reqQuality and 129205 or 129206
                            
                            self.textUnlock:SetLocalText(129118, Localization:GetString(HeroUtils.GetMilitaryRankName(rankId)))
                                    --.. '\n'
                                    --.. Localization:GetString(129204) .. qualityName .. Localization:GetString(stateDialogId))
                        end
                    end
                    showTextUnlock = rankId ~= -1
                end
            end
        else
            if param.heroUuid ~= nil then
                local maxRankId = heroData.config['max_rank_level']
                local curRankId = heroData:GetCurMilitaryRankId()
                showTextUnlock = curRankId < maxRankId
                self.textUnlock:SetLocalText(129129, Localization:GetString(HeroUtils.GetMilitaryRankName(maxRankId)))
                --self.textUnlock:SetLocalText(129220)

            end
        end
    end
    
    self.textUnlock:SetActive(showTextUnlock)
    
    self.textUnlock.rectTransform:Set_sizeDelta(rootRt.sizeDelta.x-46, self.textUnlock:GetHeight())
    
    --rootRt.sizeDelta = Vector2.New(defWidth, MinHeight)
    --contentRt.sizeDelta = Vector2.New(param.defWidth, MinHeight)
    --self.textContent:SetText(param.content)


    local preferredWidth = self.textEffect.rectTransform.rect.width
    rootRt:Set_sizeDelta( math.max(MinWidth, preferredWidth + 46), rootRt.sizeDelta.y)
    self.textSkillDesc.rectTransform:Set_sizeDelta(rootRt.sizeDelta.x - 46, 0)
    self.textSkillDesc:SetText(skillDesc)
    local descHeight = self.textSkillDesc:GetHeight()
    self.textSkillDesc.rectTransform:Set_sizeDelta(rootRt.sizeDelta.x - 46, descHeight)
    --Logger.Log("#SkillTip# descHeight:" .. descHeight)
    
    rootRt.position = param.position
    if self.sizeFitter then
        self.sizeFitter.enabled = false
        self.sizeFitter.enabled = true
    end
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.upgradeBtn.transform.parent)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(rootRt)
    
    local rootPreHeight = self.layoutGroup.preferredHeight
    rootRt:Set_sizeDelta( math.max(MinWidth, preferredWidth + 46), rootPreHeight)
    --Logger.Log("#SkillTip# rootRt.preferredHeight:" .. rootPreHeight)

    --contentRt.sizeDelta = Vector2.New(param.defWidth, self.textContent:GetHeight())
    --rootRt.sizeDelta = contentRt.sizeDelta + Vector2.New(MarginX*2, MarginY*2)
    
    self:PlayShowAnimation()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    local btnPanel = self:AddComponent(UIButton, "Panel")
    btnPanel:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))
    
    self.root = self:AddComponent(UIBaseContainer, "Root")
    self.sizeFitter = self.root.rectTransform:GetComponent(typeof(CS.UnityEngine.UI.ContentSizeFitter))
    self.layoutGroup = self.root.rectTransform:GetComponent(typeof(CS.UnityEngine.UI.VerticalLayoutGroup))
    
    self.imgArrow = self:AddComponent(UIImage, "Root/ImgArrow")
    
    self.textSkillName = self:AddComponent(UIText, "Root/TextSkillName")
    self.textSkillType = self:AddComponent(UIText, "Root/TextSkillType")
    self.textSkillDesc = self:AddComponent(UIText, "Root/TextSkillDesc")
    self.textSubTitle2 = self:AddComponent(UIText, "Root/TextSubTitle2")
    self.textEffect    = self:AddComponent(UIText, "Root/TextEffect")
    self.textUnlock    = self:AddComponent(UIText, "Root/TextUnlock")
    self.upgradeBtn    = self:AddComponent(UIButton, "Root/List/UpgradeBtn")
    self.upgradeBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnUpgradeClick()
    end)
    self.upgradeTxt    = self:AddComponent(UIText, "Root/List/UpgradeBtn/UpgradeBtnText")
    self.upgradeTxt:SetLocalText(100091)
    self.useBtn        = self:AddComponent(UIButton, "Root/List/UseBtn")
    self.useBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnUseClick()
    end)
    self.useTxt        = self:AddComponent(UIText, "Root/List/UseBtn/UseBtnText")
    self.useTxt:SetLocalText(110046)
end

local function ComponentDestroy(self)
    self.root = nil
    self.imgArrow = nil
    self.textSkillName = nil
    self.textSkillType = nil
    self.textSkillDesc = nil
    self.textSubTitle2 = nil
    self.textEffect    = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self.sizeFitter.enabled = false
end

local function PlayShowAnimation(self)
    --if self.sizeFitter then
    --    self.sizeFitter.enabled = false
    --    self.sizeFitter.enabled = true
    --end
    --
    local rootRt = self.root.rectTransform
    --CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(rootRt)

    DOTween.Kill(rootRt)
    rootRt:Set_localScale(0, 0, 0)

    local sequence = DOTween.Sequence();
    sequence:AppendInterval(0.1)
    sequence:AppendCallback(function()
    end)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local rootH = rootRt.rect.height * scaleFactor
    local screenHeight = Screen.height
    local pos = rootRt.position
    local scale = 1
    if rootH + pos.y >= screenHeight then
        scale = (screenHeight - pos.y) / rootH
    end

    sequence:Append(rootRt:DOScale(Vector3.New(scale + 0.02, scale + 0.02, 0), 0.05))
    sequence:Append(rootRt:DOScale(Vector3.New(scale, scale, 0), 0.05))
    sequence:SetEase(CS.DG.Tweening.Ease.InOutCubic)
end

local function GetSkillTypeStr(self, skillType)
    local type = tonumber(skillType)
    local key = '150163'
    if type == 1 then
        key = '150163'
    elseif type == 2 then
        key = '150164'
    elseif type == 10 or type == 11 then
        key = '150165'
    elseif type == 12 then
        key = '161015'
    elseif type == 13 then
        key = '161016'
    end
    
    return Localization:GetString(key)
end

local function GetSKillNextLevelHeroLv(self, skillIndex)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.param.heroUuid)
    if heroData ~= nil then
        local heroConfig = heroData:GetConfig()
        if heroConfig ~= nil then
            local skillArray = heroConfig['skill']
            if type(skillArray) ~= 'table' then
                skillArray = string.split(skillArray, '|')
            end
            if skillIndex <= table.count(skillArray) then
                local skillData = heroData:GetSkillData(skillArray[skillIndex])
                return skillData.unlockHeroLv
            end
        end
        --local skillData = 
    end
    return nil
end


local function GetSKillNextLevelRankId(self, skillIndex, skillNextLevel, rarity)
    local levelCnt, findRankId = 1, -1
    local skillIndexStr = tostring(skillIndex)
    local max = LocalController:instance():GetTableLength(TableName.HeroMilitaryRank)
    for rankId = 1, max do
        local skillIdxStr = GetTableData(TableName.HeroMilitaryRank, rankId, 'skill')[rarity] or ''
        local upSkillIdxList = string.split(skillIdxStr, ';')
        if table.hasvalue(upSkillIdxList, skillIndexStr) then
            levelCnt = levelCnt + 1
        end

        if levelCnt >= skillNextLevel then
            findRankId = rankId + 1
            break
        end
    end

    return findRankId
end

local function OnUpgradeClick(self)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.param.heroUuid)
    if heroData ~= nil then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroSkillAdvance, self.param.heroUuid, self.param.skillId)
    end
    self.ctrl:CloseSelf()
end

local function OnUseClick(self)
    if self.useEffectId == nil then
        return
    end
    
    DataCenter.HeroEffectSkillManager:SetTempPos(self.useBtn.transform.position)
    DataCenter.HeroEffectSkillManager:Use(self.useEffectId)
    self.useBtn:SetActive(false)
end

UIHeroSkillTipView.Param = Param
UIHeroSkillTipView.Direction = Direction

UIHeroSkillTipView.OnCreate= OnCreate
UIHeroSkillTipView.OnDestroy = OnDestroy
UIHeroSkillTipView.OnEnable = OnEnable

UIHeroSkillTipView.ComponentDefine = ComponentDefine
UIHeroSkillTipView.ComponentDestroy = ComponentDestroy
UIHeroSkillTipView.PlayShowAnimation = PlayShowAnimation

UIHeroSkillTipView.GetSkillTypeStr = GetSkillTypeStr
UIHeroSkillTipView.GetSKillNextLevelRankId = GetSKillNextLevelRankId
UIHeroSkillTipView.OnUpgradeClick = OnUpgradeClick
UIHeroSkillTipView.OnUseClick = OnUseClick
UIHeroSkillTipView.GetSKillNextLevelHeroLv = GetSKillNextLevelHeroLv


return UIHeroSkillTipView

