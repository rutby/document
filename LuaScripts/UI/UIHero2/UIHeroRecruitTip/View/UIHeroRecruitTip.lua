---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/19/21 2:19 PM
---


local UIHeroRecruitTip = BaseClass("UIHeroRecruitTip", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIDropCell = require "UI.UIHero2.UIHeroRecruitTip.Component.UIDropCell"
local UIDropAttrCell = require "UI.UIHero2.UIHeroRecruitTip.Component.UIDropAttrCell"
local UIHeroCell = require "UI.UIHero2.UIHeroRecruitTip.Component.UIDropSpecialHero"
local BtnName =
{
    [1] = 321611,
    [2] = 100092,
}
--创建
function UIHeroRecruitTip:OnCreate()
    base.OnCreate(self)
	self:DataDefine()
    self:ComponentDefine()
    self:OnOpen()
end

-- 销毁
function UIHeroRecruitTip:OnDestroy()
    self:ClearScrollAttr()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIHeroRecruitTip:ComponentDefine()
    local btnPanel = self:AddComponent(UIButton, 'UICommonMidPopUpTitle/panel')
    btnPanel:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))
    local btnClose = self:AddComponent(UIButton, 'UICommonMidPopUpTitle/bg_mid/CloseBtn')
    btnClose:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))

    self.textTitle = self:AddComponent(UITextMeshProUGUIEx, 'UICommonMidPopUpTitle/bg_mid/titleText')
    self.textTip1 = self:AddComponent(UITextMeshProUGUIEx, 'Root/TextTip1')

    self.nodeCamps = {}
    for i=0, 3 do
        local camp = self:AddComponent(UIBaseContainer, 'Root/CampContent/Camp' .. i)
        camp:SetActive(false)
        self.nodeCamps[i] = camp
    end
    
    self.nodePanel1 = self:AddComponent(UIBaseContainer, 'Root/layout/ScrollViewLayout/ImgContentBg/NodePanel1')
    self.nodePanel2 = self:AddComponent(UIBaseContainer, 'Root/layout/ScrollViewLayout/ImgContentBg/NodePanel2')

    self.heroTitle = self:AddComponent(UITextMeshProUGUIEx, 'Root/layout/ScrollViewLayout/ImgContentBg/NodePanel1/Viewport/Content/HeroTitle/HeroTitleText')
    self.heroTitle:SetLocalText(GameDialogDefine.REASON_HERO)
    self.itemTitle = self:AddComponent(UITextMeshProUGUIEx, 'Root/layout/ScrollViewLayout/ImgContentBg/NodePanel1/Viewport/Content/ItemTitle/ItemTitleText')
    self.itemTitle:SetLocalText(GameDialogDefine.GOODS)
    
    self.heroNode = self:AddComponent(UIBaseContainer, 'Root/layout/ScrollViewLayout/ImgContentBg/NodePanel1/Viewport/Content/Heros')
    self.itemNode = self:AddComponent(UIBaseContainer, 'Root/layout/ScrollViewLayout/ImgContentBg/NodePanel1/Viewport/Content/Items')
    
    self.scrollViewAttr = self:AddComponent(UIScrollView, 'Root/layout/ScrollViewLayout/ImgContentBg/NodePanel2')
    self.scrollViewAttr:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCellAttr(itemObj, index)
    end)
    self.scrollViewAttr:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCellAttr(itemObj, index)
    end)
    
    self.textTitle:SetLocalText(110117) 
    self.textTip1:SetLocalText(110118)
    
    self.dropSpecial = self:AddComponent(UIBaseContainer, "Root/layout/DropSpecial")
    self.dropSpecialTitle = self:AddComponent(UITextMeshProUGUIEx, "Root/layout/DropSpecial/DropSpecialTitle/DropSpecialText")
    self.dropSpecialTitle:SetLocalText(129280)
    self.dropSpecialRate = self:AddComponent(UITextMeshProUGUIEx, "Root/layout/DropSpecial/DropSpecialTitleRate/DropSpecialRateText")
    self.layout = self:AddComponent(UIBaseContainer, "Root/layout")
    self.dropSpecialHero = self:AddComponent(UIBaseContainer, "Root/layout/DropSpecial/DropSpecialHero")

    self:DefineToggle()
end
local toggle_path = "Root/ToggleGroup/Toggle%s"
function UIHeroRecruitTip:DefineToggle()
    for i = 1, 2 do
        local toggle = self:AddComponent(UIToggle, string.format(toggle_path, i))
        if toggle ~= nil then
            toggle:SetOnValueChanged(function(tf)
                if tf then
                    SoundUtil.PlayEffect(SoundAssets.Music_Effect_change_toggle)
                    self:ToggleControlBorS(i)
                end
            end)
            toggle.choose = toggle:AddComponent(UIBaseContainer, "Background/Checkmark")
            toggle.unselectName = toggle:AddComponent(UITextMeshProUGUIEx, "text")
            toggle.selectName = toggle:AddComponent(UITextMeshProUGUIEx, "checkText")
            toggle.unselectName:SetLocalText(BtnName[i])
            toggle.selectName:SetLocalText(BtnName[i])
            self.toggle[i] = toggle
        end
    end

    self:ToggleControlBorS(self.panelIndex)
end

function UIHeroRecruitTip:ToggleControlBorS(index)
    for i,v in pairs(self.toggle) do
        if i == index then
            v.choose:SetActive(true)
            v.unselectName:SetActive(false)
            v.selectName:SetActive(true)
            v:SetIsOn(true)
        else
            v.choose:SetActive(false)
            v.unselectName:SetActive(true)
            v.selectName:SetActive(false)
            v:SetIsOn(false)
        end
    end
    
    self:SwitchPanel(index)
end

function UIHeroRecruitTip:OnCreateCellAttr(itemObj, index)
    itemObj.name = tostring(index)

    local cellItem = self.scrollViewAttr:AddComponent(UIDropAttrCell, itemObj)
    cellItem:SetData(self.dataAttrList[index])
end

function UIHeroRecruitTip:OnDeleteCellAttr(itemObj, index)
    self.scrollViewAttr:RemoveComponent(itemObj.name, UIDropAttrCell)
end


function UIHeroRecruitTip:ComponentDestroy()
    self.dropSpecialHero:RemoveComponents(UIHeroCell)
    self.textTitle = nil
    self.textTip1 =  nil
    self.nodePanel1 = nil
    self.nodePanel2 = nil
    self.scrollView = nil
    self.tabCamps =  nil
end

function UIHeroRecruitTip:DataDefine()
    self.panelIndex = 1
    self.lotteryId = nil
    self.heroList = nil
    self.toggle = {}
    self.heroCell = {}
    self.itemCell = {}
end

function UIHeroRecruitTip:DataDestroy()
    self.panelIndex = nil
    self.lotteryId = nil
    self.heroList = nil
    self.toggle = {}
    self.heroCell = {}
    self.itemCell = {}
end

function UIHeroRecruitTip:OnOpen()
    self.lotteryId = self:GetUserData()
    self:UpdateView()
    self:SwitchPanel(1)
end

function UIHeroRecruitTip:UpdateView()
    self.isSpecialCampLotteryId = DataCenter.LotteryDataManager:IsSpecialCampLottery(self.lotteryId)
    if self.isSpecialCampLotteryId then
        self.lotteryId = DataCenter.LotteryDataManager:GetSpecialCampCurLotteryId()
    end
    
    self.lotteryData = DataCenter.LotteryDataManager:GetLotteryDataById(self.lotteryId)
    --显示阵营列表
    local dropCampStrList = self.ctrl:GetDropCampInfo(self.lotteryId)
    for _, v in pairs(dropCampStrList) do
        local camp = tonumber(v)
        if self.nodeCamps[camp] ~= nil then
            self.nodeCamps[camp]:SetActive(true)
        end
    end
    
    ----刷新概率显示
    --local dropRateInfo = self.ctrl:GetDropRateInfo(self.lotteryId)
    --for rarityId, t in pairs(self.nodeRateList) do -- k:rarityId or 0[0代表道具]  reference: HeroUtils.RarityType
    --    local rate = tonumber(dropRateInfo[rarityId])
    --    t.node:SetActive(rate ~= nil and rate ~= 0)
    --    if rate ~= nil then
    --        t.textValue:SetText(rate .. '%')
    --    end
    --end
    --
    self:UpdateCampShow()
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.layout.transform)
    --刷新英雄列表
    self:ShowCells()
    self:ShowAttrCells()
end

function UIHeroRecruitTip:UpdateCampShow()
    if self.isSpecialCampLotteryId then
        local displayConfig = DataCenter.LotteryDataManager:GetDisplayConfig()
        local curCamp = displayConfig:GetCampId(self.lotteryId)
        local curCampName = HeroUtils.GetCampNameAndDesc(curCamp)
        local nextCampId = displayConfig:GetCampId(DataCenter.LotteryDataManager.nextCampLotteryId)
        local nextCampName = nextCampId and HeroUtils.GetCampNameAndDesc(nextCampId) or ''
        
        self.curCampName = curCampName
        self.nextCampName = nextCampName
    else
        self.textTip1:SetLocalText(110118) 
    end
end

function UIHeroRecruitTip:SwitchPanel(index)
    self.nodePanel1:SetActive(index == 2)
    self.nodePanel2:SetActive(index == 1)
    self.panelIndex = index
end

function UIHeroRecruitTip:ShowCells()
    local heroRates, itemRates = self.ctrl:GetDropRate(self.lotteryId)
    self.heroList = self.ctrl:GetDropHeroRateList(self.lotteryId, heroRates)
    local heroCount = #self.heroList
    if heroCount > 0 then
        for i = 1, heroCount do
            if self.heroCell[i] == nil then
                self:GameObjectInstantiateAsync(UIAssets.UIDropCell, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject
                    local nameStr = tostring(i)
                    go.name = nameStr
                    go.transform:SetParent(self.heroNode.transform)
                    self.heroCell[i] = self.heroNode:AddComponent(UIDropCell, nameStr)
                    self.heroCell[i]:SetData(self.heroList[i])
                end)
            else
                self.heroCell[i]:SetData(self.heroList[i])
            end
        end
        self.heroNode:SetActive(true)
    else
        self.heroNode:SetActive(false)
    end
    
    self.itemList = self.ctrl:GetDropItemRateList(itemRates)
    local itemCount = #self.itemList
    if itemCount > 0 then
        for i = 1, itemCount do
            if self.itemCell[i] == nil then
                self:GameObjectInstantiateAsync(UIAssets.UIDropCell, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject
                    local nameStr = tostring(i)
                    go.name = nameStr
                    go.transform:SetParent(self.itemNode.transform)
                    self.itemCell[i] = self.itemNode:AddComponent(UIDropCell, nameStr)
                    self.itemCell[i]:SetData(self.itemList[i])
                end)
            else
                self.itemCell[i]:SetData(self.itemList[i])
            end
        end
        self.itemNode:SetActive(true)
    else
        self.itemNode:SetActive(false)
    end
end

function UIHeroRecruitTip:ShowAttrCells()
    self:ClearScrollAttr()

    self.dataAttrList = self.ctrl:GetDropRateInfo(self.lotteryId)
    local dataCount = table.count(self.dataAttrList)
    if dataCount <= 0 then
        return
    end

    self.scrollViewAttr:SetTotalCount(dataCount)
    self.scrollViewAttr:RefillCells(1)
end

function UIHeroRecruitTip:ClearScrollAttr()
    self.scrollViewAttr:ClearCells()
    self.scrollViewAttr:RemoveComponents(UIDropAttrCell)
end

function UIHeroRecruitTip:Update()
    if not self.isSpecialCampLotteryId then
        return
    end
    
    local curCampName = self.curCampName
    local nextCampName = self.nextCampName

    local leftTime = math.max(0, self.lotteryData.endTime - UITimeManager:GetInstance():GetServerTime())
    if leftTime == 0 then
        self:UpdateView()
        return
    end
    
    local leftTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(leftTime)
    self.textTip1:SetText(Localization:GetString('110130', curCampName) .. '\n' .. Localization:GetString('110131', leftTimeStr, nextCampName))
end

return UIHeroRecruitTip