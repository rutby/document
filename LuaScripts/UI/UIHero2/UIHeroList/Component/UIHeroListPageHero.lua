---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/26/21 2:30 PM
---


local UIHeroListPageHero = BaseClass("UIHeroListPageHero", UIBaseContainer)
local base = UIBaseContainer
local UIHeroMapCell = require 'UI.UIHero2.UIHeroList.Component.UIHeroMapCell'

local itemNameSequence = 1

local function GetItemNameSequence(self)
    itemNameSequence = itemNameSequence + 1
    if itemNameSequence > 99999999 then
        itemNameSequence = 1
    end
    
    return tostring(itemNameSequence)
end

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.nodeEmptyTip = self:AddComponent(UIBaseContainer, 'NodeEmptyTip')
    self.textTipEmpty = self:AddComponent(UITextMeshProUGUIEx, 'NodeEmptyTip/TextTipEmpty')
    self.textTipEmpty:SetLocalText(300540)

    self.scroll_view = self:AddComponent(UIScrollView, "ScrollView")
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)
end

local function OnCellMoveIn(self, itemObj, index)
    itemObj.name = tostring(index)

    local cell = self.scroll_view:AddComponent(UIHeroMapCell, itemObj)
    local heroData = self.heroDataList[index]
    if heroData.uuid ~= nil and heroData.uuid ~= 0 then
        cell:SetHeroData(heroData.uuid, function(heroUuid, _)
            self:OnCellClick(heroUuid, nil)
        end)
    else
        cell:SetMapData(heroData, { heroData }, function(_, heroData)
            self:OnCellClick(nil, heroData)
        end)
    end
    self.cells[index] = cell
    if index == self.arrowIndex then
        self:AddNextFrameTimer()
    end
end

local function OnCellMoveOut(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIHeroMapCell)
    self.cells[index] = nil
end

local function ShowScroll(self)
    -- 注意，heroDataList, heroUuidList 并不一定是一一对应关系！
    self.heroDataList, self.heroUuidList = self.view.ctrl:GenerateHeroDataList(self.selectCamp)
    self:GetShowArrow()
    local count = #self.heroDataList
    if count > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:SetActive(false)
    end
end

local function ComponentDestroy(self)
end

local function DataDefine(self)
    self.selectCamp = -1
    self.arrowIndex = 0
    self.arrowType = 0
    self.cells = {}
    self.next_timer_callback = function()
        self:NextFrameTimeCallback()
    end
end

local function DataDestroy(self)
    self:DeleteNextFrameTimer()
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)

    self:AddUIListener(EventId.HeroAdvanceSuccess, self.OnHeroDataChanged)
    --self:AddUIListener(EventId.HeroLvUpSuccess, self.OnHeroDataChanged)
    self:AddUIListener(EventId.SkillUpgradeEnd, self.OnHeroSkillLvUp)
    self:AddUIListener(EventId.HeroMedalExchanged, self.OnHeroSkillLvUp)
    self:AddUIListener(EventId.HeroExChange, self.OnHeroDataChanged)
    self:AddUIListener(EventId.HeroRankUpSuccess, self.OnHandleRankUpSuccess)
    self:AddUIListener(EventId.HeroEquipInstall, self.OnHeroDataChanged)
    self:AddUIListener(EventId.HeroEquipUninstall, self.OnHeroDataChanged)
    self:AddUIListener(EventId.RefreshHeroPageList,self.OnHeroDataChanged) 
    self:AddUIListener(EventId.HeroStarStoryResult,self.OnHandleHeroStarStoryResult) 
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.HeroExChange, self.OnHeroDataChanged)
    self:RemoveUIListener(EventId.HeroAdvanceSuccess, self.OnHeroDataChanged)
    --self:RemoveUIListener(EventId.HeroLvUpSuccess, self.OnHeroDataChanged)
    self:RemoveUIListener(EventId.SkillUpgradeEnd, self.OnHeroSkillLvUp)
    self:RemoveUIListener(EventId.HeroMedalExchanged, self.OnHeroSkillLvUp)
    self:RemoveUIListener(EventId.HeroRankUpSuccess, self.OnHandleRankUpSuccess)
    self:RemoveUIListener(EventId.HeroEquipInstall, self.OnHeroDataChanged)
    self:RemoveUIListener(EventId.HeroEquipUninstall, self.OnHeroDataChanged)
    self:RemoveUIListener(EventId.RefreshHeroPageList,self.OnHeroDataChanged)
    self:RemoveUIListener(EventId.HeroStarStoryResult,self.OnHandleHeroStarStoryResult)
    base.OnRemoveListener(self)
end

local function OnSwitchCamp(self, camp)
    self.selectCamp = camp
    local active = self:GetActive()
    if not active then
        return
    end
    self:ShowScroll()
end

local function OnCellClick(self, heroUuid, heroData)
    if heroUuid then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, { anim = false, hideTop = true}, HeroInfoViewType.HeroList, heroUuid, self.heroUuidList, self.arrowType)
    else
        if HeroUtils.IsHeroMergeItemEnough(heroData.heroId) then
            SFSNetwork.SendMessage(MsgDefines.HeroExchange, heroData.heroId)
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, { anim = false, hideTop = true }, HeroInfoViewType.HeroPreview, heroData, nil)
        end
    end
    self.arrowIndex = 0
    self.arrowType = 0
    self.view.ctrl:ClearArrow()
end

local function OnHeroDataChanged(self)
    self:ShowScroll()
end

local function OnHeroSkillLvUp(self)
    self:ShowScroll()
end

local function OnMedalExchanged(self)
    self:ShowScroll()
end

local function OnHandleRankUpSuccess(self)
    self:ShowScroll()
end

local function OnHandleHeroStarStoryResult(self)
    self:ShowScroll()
end

local function GetHeroCellAdvanceGuideBtn(self)
    for _, v in pairs(self.cells) do
        local btn = v:GetHeroCellAdvanceGuideBtn()
        if btn ~= nil then
            return btn
        end
    end
    return nil
end

local function GetHeroCellStarGuideBtn(self)
    for _, v in pairs(self.cells) do
        local btn = v:GetHeroCellStarGuideBtn()
        if btn ~= nil then
            return btn
        end
    end
    return nil
end

local function GetHeroCellMilitaryGuideBtn(self)
    for _, v in pairs(self.cells) do
        local btn = v:GetHeroCellMilitaryGuideBtn()
        if btn ~= nil then
            return btn
        end
    end
    return nil
end

function UIHeroListPageHero:RefreshHero(uuid)
    for _, v in pairs(self.cells) do
        v:RefreshHero(uuid)
    end
end

function UIHeroListPageHero:GetHeroItem(heroId)
    for _, v in pairs(self.cells) do
        local btn = v:GetHeroItem(heroId)
        if btn ~= nil then
            return btn
        end
    end
    return nil
end

function UIHeroListPageHero:CheckShowSecondArrow()
    local secondParam = DataCenter.ArrowManager:GetSecondArrowParam()
    if secondParam ~= nil then
        if secondParam.arrowSecondType == ArrowSecondType.HeroList then
            self.arrowType = secondParam.arrowTypeHero
            local final = 0--保底
            if secondParam.heroId ~= nil and secondParam.heroId ~= 0 then
                for k, v in ipairs(self.heroDataList) do
                    if v.heroId == secondParam.heroId then
                        self.arrowIndex = k
                        break
                    end
                end
            else
                if secondParam.arrowTypeHero == HeroListArrowTypeHero.Star then
                    for k, v in ipairs(self.heroDataList) do
                        if v.quality < secondParam.para then
                            if final == 0 then
                                final = k
                            end
                            if v:CanQualityUp() then
                                self.arrowIndex = k
                                break
                            end
                        end
                    end
                elseif secondParam.arrowTypeHero == HeroListArrowTypeHero.LvUpHero then
                    for k, v in ipairs(self.heroDataList) do
                        if v.level < secondParam.para then
                            if final == 0 then
                                final = k
                                break
                            end
                            --if v:IsCanLevelUp() then
                            --    self.arrowIndex = k
                            --    break
                            --end
                        end
                    end
                elseif secondParam.arrowTypeHero == HeroListArrowTypeHero.RankUp then
                    for k, v in ipairs(self.heroDataList) do
                        if v.curMilitaryRankId < secondParam.para then
                            if final == 0 then
                                final = k
                            end
                            if v:CanUpMilitaryRank() then
                                self.arrowIndex = k
                                break
                            end
                        end
                    end
                end
            end
            
            if self.arrowIndex == 0 then
                if final == 0 then
                    self.arrowIndex = 1
                else
                    self.arrowIndex = final
                end
            end
            self:AddNextFrameTimer()
        end
    end
end

function UIHeroListPageHero:GetShowArrow()
    self.arrowIndex = 0
    self.arrowType = 0
    local heroId = self.view.ctrl:GetArrowHeroId()
    local arrowType = self.view.ctrl:GetArrow()
    if heroId ~= nil and heroId ~= 0 then
        for k, v in ipairs(self.heroDataList) do
            if v.heroId == heroId then
                self.arrowIndex = k
                break
            end
        end
    elseif arrowType == HeroListArrowTypeHero.LvUpHero then
        for k, v in ipairs(self.heroDataList) do
            if v:IsCanLevelUp() then
                self.arrowIndex = k
                self.arrowType = arrowType
                break
            end
        end
    elseif arrowType == HeroListArrowTypeHero.RankUp then
        for k, v in ipairs(self.heroDataList) do
            if v:CanUpMilitaryRank() then
                self.arrowIndex = k
                self.arrowType = arrowType
                break
            end
        end
    elseif arrowType == HeroListArrowTypeHero.Star then
        for k, v in ipairs(self.heroDataList) do
            if v:CanQualityUp() then
                self.arrowIndex = k
                self.arrowType = arrowType
                break
            end
        end
    else
        self:CheckShowSecondArrow()
    end
end

function UIHeroListPageHero:ShowArrow()
    if self.cells[self.arrowIndex] ~= nil then
        local param = {}
        param.positionType = PositionType.Screen
        param.position = self.cells[self.arrowIndex]:GetCellPos()
        DataCenter.ArrowManager:ShowArrow(param)
    end
end

function UIHeroListPageHero:AddNextFrameTimer()
    if self.next_timer == nil then
        self.next_timer = TimerManager:GetInstance():GetTimer(NextFrameTime, self.next_timer_callback, self, true, false, false)
    end
    self.next_timer:Start()
end

function UIHeroListPageHero:DeleteNextFrameTimer()
    if self.next_timer ~= nil then
        self.next_timer:Stop()
        self.next_timer = nil
    end
end

function UIHeroListPageHero:NextFrameTimeCallback()
    self:DeleteNextFrameTimer()
    self:ShowArrow()
end


UIHeroListPageHero.OnCreate= OnCreate
UIHeroListPageHero.OnDestroy = OnDestroy
UIHeroListPageHero.OnEnable = OnEnable
UIHeroListPageHero.OnDisable = OnDisable
UIHeroListPageHero.OnAddListener = OnAddListener
UIHeroListPageHero.OnRemoveListener = OnRemoveListener
UIHeroListPageHero.ComponentDefine = ComponentDefine
UIHeroListPageHero.ComponentDestroy = ComponentDestroy
UIHeroListPageHero.DataDefine = DataDefine
UIHeroListPageHero.DataDestroy = DataDestroy

UIHeroListPageHero.OnCellMoveIn = OnCellMoveIn
UIHeroListPageHero.OnCellMoveOut = OnCellMoveOut
UIHeroListPageHero.ShowScroll = ShowScroll
UIHeroListPageHero.OnSwitchCamp = OnSwitchCamp
UIHeroListPageHero.OnHeroDataChanged = OnHeroDataChanged
UIHeroListPageHero.OnHeroSkillLvUp = OnHeroSkillLvUp
UIHeroListPageHero.OnMedalExchanged = OnMedalExchanged
UIHeroListPageHero.OnCellClick = OnCellClick
UIHeroListPageHero.OnHandleRankUpSuccess = OnHandleRankUpSuccess
UIHeroListPageHero.OnHandleHeroStarStoryResult = OnHandleHeroStarStoryResult
UIHeroListPageHero.GetItemNameSequence = GetItemNameSequence
UIHeroListPageHero.GetHeroCellAdvanceGuideBtn = GetHeroCellAdvanceGuideBtn
UIHeroListPageHero.GetHeroCellStarGuideBtn = GetHeroCellStarGuideBtn
UIHeroListPageHero.GetHeroCellMilitaryGuideBtn = GetHeroCellMilitaryGuideBtn

return UIHeroListPageHero