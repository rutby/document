---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/26/21 2:30 PM
---

---
--- 已废弃，使用 UIHeroListPageHero
---
local UIHeroListPageMap = BaseClass("UIHeroListPageMap", UIBaseContainer)
local base = UIBaseContainer

local UIMapHeroRow = require "UI.UIHero2.UIHeroList.Component.UIMapHeroRow"
local UIMapRarityLine = require "UI.UIHero2.UIHeroList.Component.UIMapRarityLine"

local loop_scroll_path = "LoopScroll"
local ColMax = 4

--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.content = self:AddComponent(UIBaseContainer, 'LoopScroll/Viewport/Content')
    self.loopScroll = self:AddComponent(UILoopListView2, loop_scroll_path)
    self.loopScroll:InitListView(0, function(loopView, index)  
        return self:OnGetItemByIndex(loopView, index)
    end)
end

local function ComponentDestroy(self)
    self:ClearScroll()

    self.content = nil
    self.loopScroll = nil
end

local function OnSwitchCamp(self, camp)
    self.selectCamp = camp

    local active = self:GetActive()
    if not active then
        return
    end

    self:ShowCells()
end

local function OnGetItemByIndex(self, loopScroll, index)
    index = index + 1 --C#控件索引从0开始 
    if index < 1 or index > #self.showDataList then
        return nil
    end

    local recordLen = table.count(self.objRecordDict)
    
    local dt = self.showDataList[index]
    if type(dt) == 'number' then -- rarityLine
        local item = loopScroll:NewListViewItem('RarityLine')
        local script = self.objRecordDict[item]
        if script ~= nil then
            script:SetActive(true)
            script:SetData(dt)
        else
            local objectName = recordLen .. '_RarityLine' 
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
                --item.CachedRectTransform:SetInsetAndSizeFromParentEdge(CS.UnityEngine.RectTransform.Edge.Left, 10, self._scrollView:GetViewPortWidth()-20)
            end

            script = self.content:AddComponent(UIMapRarityLine, objectName)
            script:SetActive(true)
            script:SetData(dt)
            self.objRecordDict[item] = script
        end

        return item
    end
    
    local item = loopScroll:NewListViewItem('HeroRow')
    local script = self.objRecordDict[item]
    if script ~= nil then
        script:SetActive(true)
        script:SetData(dt, self.pureDataList)
    else
        local objectName = recordLen .. '_HeroRow' 
        item.gameObject.name = objectName
        if (not item.IsInitHandlerCalled) then
            item.IsInitHandlerCalled = true
            --item.CachedRectTransform:SetInsetAndSizeFromParentEdge(CS.UnityEngine.RectTransform.Edge.Left, 10, self._scrollView:GetViewPortWidth()-20)
        end

        script = self.content:AddComponent(UIMapHeroRow, objectName)
        script:SetActive(true)
        script:SetData(dt, self.pureDataList)
        self.objRecordDict[item] = script
    end
    
    return item
end

local function DataDefine(self)
    self.selectCamp = -1
    self.curSelectCell = 0
    self.dataList = {}
    self.objRecordDict = {}  --用来记录已绑定的loop cell
    
    self.pureDataList = {}
    self.showDataList = {}
end

local function DataDestroy(self)
    self.selectCamp = nil
    self.curSelectCell = nil
    self.dataList = nil
    self.objRecordDict = nil
    self.pureDataList = nil
    self.showDataList = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ShowCells()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ShowCells(self)
    --self:ClearScroll()
    
    self:GenerateMapDataList()
    local rowCount = table.count(self.showDataList)

    self.loopScroll:SetListItemCount(rowCount, false, false)
    self.loopScroll:RefreshAllShownItem()
end

local function ClearScroll(self)
    self.content:RemoveComponents(UIMapHeroRow)
    self.content:RemoveComponents(UIMapRarityLine)
    
    self.loopScroll:ClearAllItems()
end

local function GenerateMapDataList(self)
    local selectCamp = self.selectCamp
    local rarityDict = {}
    
    LocalController:instance():visitTable(HeroUtils.GetHeroXmlName(), function(id, line)
        local camp = tonumber(line["camp"])
        --过滤阵营
        if camp < 0 or (selectCamp ~= -1 and camp ~= selectCamp) then
            return
        end
        local state = tonumber(line['state'])
        if state == HeroUtils.HeroStateType.HeroStateType_NPC then
            return
        end
        local checkSeason = self.view.season
        if checkSeason ~= nil then
            local season = tonumber(line['season'])
            if season ~= checkSeason then
                return
            end
        else
            local currentSeason = SeasonUtil.GetSeason()
            local season = tonumber(line['season'])
            if currentSeason ~= nil then
                if currentSeason + 1 < season then
                    return
                end
            else
                if season > 0 then
                    return
                end
            end
        end
        local rarity = tonumber(line['rarity'])
        local maxQuality = tonumber(line[HeroUtils.GetHeroMaxQualityLevelName()])
        local maxRankId = tonumber(line['max_rank_level'])
        local maxLevel = tonumber(HeroUtils.GetHeroCurrentMaxLevel(id, maxQuality, maxRankId))
        local season = tonumber(line['season'])

        if rarityDict[100] == nil then
            rarityDict[100] = {}
        end
        
        table.insert(rarityDict[100], {heroId = id, camp = camp, rarity = rarity, quality = maxQuality, level = maxLevel, season = season})
    end)


    for _, heroList in pairs(rarityDict) do
        table.sort(heroList, function (a, b)
            return self.view.ctrl:SortHero(a, b, nil, nil, true)
            --if a.quality ~= b.quality then return a.quality > b.quality end
            --if a.camp ~= b.camp then return a.camp < b.camp end
            --return a.heroId < b.heroId
        end)
    end

    
    local keys = table.keys(rarityDict)
    table.sort(keys, function(a, b) return a < b end)

    local showDataList = {} --图鉴列表行数据(包含稀有度标题)
    local pureDataList = {} --纯图鉴列表数据
    
    for _, rarity in ipairs(keys) do
        --插入稀有度标题
        --table.insert(showDataList, rarity)
        
        --插入当前稀有度对应的图鉴列表
        local heroList = rarityDict[rarity]
        local row = math.ceil(#heroList / ColMax)
        
        for k=1, row do
            local startIndex = ColMax * (k-1) +1
            local endIndex = math.min(startIndex + ColMax-1, #heroList) 
            local rowData = {table.unpack (heroList,  startIndex, endIndex)}
            
            table.insert(showDataList, rowData)
        end

        table.insertto(pureDataList, heroList)
    end

    self.pureDataList = pureDataList
    self.showDataList = showDataList
end


UIHeroListPageMap.OnCreate= OnCreate
UIHeroListPageMap.OnDestroy = OnDestroy
UIHeroListPageMap.OnEnable = OnEnable
UIHeroListPageMap.OnDisable = OnDisable
UIHeroListPageMap.ComponentDefine = ComponentDefine
UIHeroListPageMap.ComponentDestroy = ComponentDestroy
UIHeroListPageMap.DataDefine = DataDefine
UIHeroListPageMap.DataDestroy = DataDestroy
UIHeroListPageMap.OnGetItemByIndex = OnGetItemByIndex

UIHeroListPageMap.ShowCells = ShowCells
UIHeroListPageMap.ClearScroll = ClearScroll

UIHeroListPageMap.OnSwitchCamp = OnSwitchCamp
UIHeroListPageMap.GenerateMapDataList = GenerateMapDataList

return UIHeroListPageMap