---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/26/21 4:51 PM
---


local UIHeroMapCell = BaseClass("UIHeroMapCell", UIBaseContainer)
local base = UIBaseContainer
local UIHeroCellBig = require "UI.UIHero2.Common.UIHeroCellBig"

local function OnCreate(self)
    base.OnCreate(self)
    self.heroId = 0
    self:ComponentDefine()
end

local function OnDestroy(self)
    self.mapData = nil
    
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.heroCell    = self:AddComponent(UIHeroCellBig, "UIHeroCellBig")
    self.nodeNotHave = self:AddComponent(UIBaseContainer, "NodeNotHave")
    self.black_go = self:AddComponent(UIBaseContainer, "NodeNotHave/Black")
    self.recruit_bg_go = self:AddComponent(UIBaseContainer, "NodeNotHave/RecruitBg")
    self.recruit_text = self:AddComponent(UITextMeshProUGUIEx, "NodeNotHave/RecruitBg/RecruitText")
    self.recruit_text:SetLocalText(140063)
    self.progress_slider = self:AddComponent(UISlider, "NodeNotHave/Progress")
    self.progress_text = self:AddComponent(UITextMeshProUGUIEx, "NodeNotHave/Progress/ProgressText")
    self.btn = self:AddComponent(UIButton, "")
    self.red_go = self:AddComponent(UIBaseContainer, "Red")
    self.new_go = self:AddComponent(UIBaseContainer, "New")
    self.arrow_go = self:AddComponent(UIBaseContainer, "Arrow")
    
    self.btn:SetOnClick(BindCallback(self, self.OnBtnClick))
end

local function ComponentDestroy(self)
    self.heroCell = nil
    self.btn = nil
    
end

local function SetHeroData(self, heroUuid, clickFunc)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    self.heroUuid = heroUuid
    self.heroId = heroData.heroId
    self.mapData = nil
    self.clickFunc = clickFunc
    self.heroCell:SetData(heroUuid)
    self.heroCell:ShowEtoileList(true)
    self.nodeNotHave:SetActive(false)
    
    local showRed = heroData:CanUpMilitaryRank() or heroData:HeroBookRedPoint() or heroData:HasEquipInstall()
    local showArrow = heroData:IsCanLevelUp()
    local showNew = DataCenter.HeroDataManager:IsNewHero(heroUuid)
    if SceneUtils.GetIsInPve() and PveActorMgr:GetInstance():HaveHeroUuid(heroUuid) then
        showRed = showRed or showArrow
    end
    self.red_go:SetActive(showRed)
    self.arrow_go:SetActive(showArrow)
    self.new_go:SetActive(showNew)
end

local function SetMapData(self, mapData, totalDataList, clickFunc)
    self.heroUuid = nil
    self.heroId = mapData.heroId
    self.mapData = mapData
    self.clickFunc = clickFunc
    self.totalDataList = totalDataList
    self.heroCell:InitWithConfigId(mapData.heroId, 0)
    self.heroCell:ShowEtoileList(false)
    self:UpdateState()
    self.red_go:SetActive(false)
    self.new_go:SetActive(false)
    self.arrow_go:SetActive(false)
end

local function SetParent(self, parent)
    self.parent = parent
end

local function UpdateState(self)
    local heroId = self.mapData.heroId
    local inHistory = DataCenter.HeroDataManager:IsInHistory(heroId)
    if inHistory then
        self.nodeNotHave:SetActive(false)
    else
        self.nodeNotHave:SetActive(true)
        local itemId, count = HeroUtils.GetHeroMergeItem(heroId)
        if itemId then
            local have = DataCenter.ItemData:GetItemCount(itemId)
            self.progress_text:SetText(have .. "/" .. count)
            self.progress_slider:SetValue(Mathf.Clamp(have / count, 0, 1))
            self.progress_slider:SetActive(true)
            self.recruit_bg_go:SetActive(have >= count)
            self.black_go:SetActive(have < count)
        else
            self.progress_slider:SetActive(false)
            self.recruit_bg_go:SetActive(false)
            self.black_go:SetActive(false)
        end
    end
end

local function OnBtnClick(self)
    if self.clickFunc then
        if self.heroUuid then
            if self.heroUuid ~= HireHeroUuid then
                DataCenter.HeroDataManager:RemoveNewHeroTag(self.heroUuid)
                self.new_go:SetActive(false)
                self.clickFunc(self.heroUuid, nil)
            end
        else
            self.clickFunc(nil, self.mapData)
        end
    end
end

local function GetCellPos(self)
    return self.transform.position
end

local function GetCellSizeDelta(self)
    return self.rectTransform.sizeDelta
end

function UIHeroMapCell:GetHeroItem(heroId)
    if heroId == self.heroId then
        return self.btn
    end
end



UIHeroMapCell.OnCreate = OnCreate
UIHeroMapCell.OnDestroy = OnDestroy
UIHeroMapCell.ComponentDefine = ComponentDefine
UIHeroMapCell.ComponentDestroy = ComponentDestroy
UIHeroMapCell.SetHeroData = SetHeroData
UIHeroMapCell.SetMapData = SetMapData
UIHeroMapCell.SetParent = SetParent
UIHeroMapCell.GetCellPos = GetCellPos
UIHeroMapCell.GetCellSizeDelta = GetCellSizeDelta

UIHeroMapCell.UpdateState = UpdateState
UIHeroMapCell.OnBtnClick = OnBtnClick

return UIHeroMapCell