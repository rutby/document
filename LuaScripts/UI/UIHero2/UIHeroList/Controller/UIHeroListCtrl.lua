---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 2021/6/17 下午3:12
---


local UIHeroListCtrl = BaseClass("UIHeroListCtrl", UIBaseCtrl)
local HeroInfo = require "DataCenter.HeroData.HeroInfo"

local function CloseSelf(self)
    if self.onClose then
        self.onClose()
    end
    if self.isArrow ~= nil and self.isArrow == CurScene.PVEScene then --在PVE界面，不显示主UI
        UIManager:GetInstance():DestroyWindow(UIWindowNames.UIHeroList, {anim = false, UIMainAnim = UIMainAnimType.AllHide})
    else
        UIManager:GetInstance():DestroyWindow(UIWindowNames.UIHeroList, {anim = false, UIMainAnim = UIMainAnimType.AllShow})
    end
end

local function InitData(self,isArrow,season,heroId,onClose)
    self.isArrow = isArrow or nil
    self.targetHeroId = heroId or nil
    self.onClose = onClose or nil
end

local function GetHeroListByCamp(self, camp)
    local allHeroes = DataCenter.HeroDataManager:GetAllHeroList()
    local heroes = table.values(allHeroes)
    local redPoints = {}
    table.walk(heroes, function (k, v)
        redPoints[v.uuid] = v:NeedShowRedPoint()
    end)
    --redPoints[heroA.uuid] = heroData:NeedShowRedPoint()
    table.sort(heroes, function(heroA, heroB)
        return self:SortHero(heroA, heroB, redPoints[heroA.uuid], redPoints[heroB.uuid])
    end)

    local result = {}
    local optimalHeroDict = {}
    for _, heroData in pairs(heroes) do
        --特定阵营
        if camp ~= -1 then
            local targetCamp = GetTableData(HeroUtils.GetHeroXmlName(), heroData.heroId, "camp")
            if targetCamp ~= camp then
                goto continue
            end
        end

        table.insert(result, heroData.uuid)
        if optimalHeroDict[heroData.heroId] == nil then
            optimalHeroDict[heroData.heroId] = heroData.uuid
        end
        
        ::continue::
    end
    
    return result, optimalHeroDict
end

local function SortHero(self, heroConfigA, heroConfigB, redPointA, redPointB, isMap)
    if redPointA ~= redPointB then
        return redPointA == true
    end
    if heroConfigA == nil or heroConfigB == nil then
        return false
    end
    if heroConfigA.rarity ~= heroConfigB.rarity then
        return heroConfigA.rarity < heroConfigB.rarity
    end
    --if isMap then
    --    if heroConfigA.season ~= heroConfigB.season then
    --        return heroConfigA.season > heroConfigB.season
    --    end
    --end
    --
    --if heroConfigA.quality ~= heroConfigB.quality then
    --    return heroConfigA.quality > heroConfigB.quality
    --end
    --
    --if heroConfigA.level ~= heroConfigB.level then
    --    return heroConfigA.level > heroConfigB.level
    --end
    --
    --if heroConfigA.camp ~= heroConfigB.camp then
    --    return heroConfigA.camp < heroConfigB.camp
    --end
    local powerA = heroConfigA:GetPower()
    local powerB = heroConfigB:GetPower()
    if powerA ~= powerB then
        return powerA > powerB
    end
    if heroConfigA.heroId ~= heroConfigB.heroId then
        return heroConfigA.heroId < heroConfigB.heroId
    end
    return false
end

--这里数据量太多，优化一版，改动要慎重（shimin 2023.6.12）
--这里数据量已经不多了，优化二版，可以放心改动（beef 2023.12.22）
local function GenerateHeroDataList(self, selectCamp, colMax)
    local redPoints = {}
    local mainHero = {}--英雄
    local noHero = {}--未获得

    local allHeroes = DataCenter.HeroDataManager:GetAllHeroList()
    for _, heroData in pairs(allHeroes) do
        --特定阵营
        if selectCamp == -1 or heroData:GetCamp() == selectCamp then
            if heroData.isMaster then
                table.insert(mainHero, heroData)
                redPoints[heroData.uuid] = heroData:NeedShowRedPoint()
            end
        end
    end
    
    LocalController:instance():visitTable(HeroUtils.GetHeroXmlName(), function(id, line)
        local camp = tonumber(line["camp"])
        --过滤阵营
        if camp < 0 or (selectCamp ~= -1 and camp ~= selectCamp) then
            return
        end
        local state = tonumber(line['state'])
        if state == HeroUtils.HeroStateType.HeroStateType_NPC then
            return
        end
        local checkSeason = self.season
        if checkSeason ~= nil then
            local season = tonumber(line['season'])
            if season ~= checkSeason then
                return
            end
        else
            local currentSeason = SeasonUtil.GetSeason()
            local season = tonumber(line['season'])
            if currentSeason ~= nil then
                if currentSeason + 1 < season then
                    return
                end
            else
                if season > 0 then
                    return
                end
            end
        end
        
        for _, heroData in ipairs(mainHero) do
            if heroData.heroId == id then
                return
            end
        end

        local atk, def = HeroUtils.GetHeroAttr(id, 1, 1, 0, 1)
        local heroData = HeroInfo.New()
        heroData:UpdateInfo({
            heroId = id,
            atk = Mathf.Round(atk),
            def = Mathf.Round(def),
            qua = 1,
            isHero = 1,
        })
        table.insert(noHero, heroData)
    end)
    
    table.sort(mainHero, function (a, b)
        return self:SortHero(a, b, redPoints[a.uuid], redPoints[b.uuid])
    end)
    
    table.sort(noHero, function (a, b)
        return self:SortHero(a, b)
    end)
  
    local dataList = {}
    local uuidList = {}
    for _, v in ipairs(mainHero) do
        table.insert(dataList, v)
        table.insert(uuidList, v.uuid)
    end
    for _, v in ipairs(noHero) do
        if HeroUtils.IsHeroMergeItemEnough(v.heroId) then
            table.insert(dataList, 1, v)
            if v.uuid then
                table.insert(uuidList, 1, v.uuid)
            end
        else
            table.insert(dataList, v)
            if v.uuid then
                table.insert(uuidList, v.uuid)
            end
        end
    end

    return dataList, uuidList
end

local function OnBtnTestClick(self)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroRecruit)
end

local function GetArrow(self)
    return self.isArrow
end

local function GetArrowHeroId(self)
    if self.targetHeroId ~= nil then
        return self.targetHeroId
    end
    return 0
end


function UIHeroListCtrl:ClearArrow()
    self.isArrow = nil
    self.targetHeroId = nil
end


UIHeroListCtrl.CloseSelf = CloseSelf
UIHeroListCtrl.InitData = InitData
UIHeroListCtrl.OnBtnTestClick = OnBtnTestClick
UIHeroListCtrl.GetHeroListByCamp = GetHeroListByCamp
UIHeroListCtrl.GenerateHeroDataList = GenerateHeroDataList
UIHeroListCtrl.GetArrow = GetArrow
UIHeroListCtrl.GetArrowHeroId = GetArrowHeroId
UIHeroListCtrl.SortHero = SortHero

return UIHeroListCtrl