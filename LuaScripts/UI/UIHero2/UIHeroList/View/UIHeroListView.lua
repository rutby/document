---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 2021/6/17 下午3:09
---
--- 英雄列表界面


local UIHeroListView = BaseClass("UIHeroListView", UIBaseView)
local base = UIBaseView
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local UIHeroListPageHero = require 'UI.UIHero2.UIHeroList.Component.UIHeroListPageHero'
local UIHeroListPageMap = require 'UI.UIHero2.UIHeroList.Component.UIHeroListPageMap'
local Localization = CS.GameEntry.Localization
local btn_map_path = "UICommonFullTop/Bg2/Root/BtnMap"

local hero_state_path = "UICommonFullTop/imgTitle/HeroStateBg"
local hero_select_btn_path ="UICommonFullTop/imgTitle/HeroStateBg/HeroStateButton"
local select_txt_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateButton/selectText"
local select_icon_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateButton/selectImg"
--local select_hero_btn_path = "selectHeroBtn"
local select_bar_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateChoose"
local toggle_0_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateChoose/toggleGroup/ToggleAll"
local toggle_1_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateChoose/toggleGroup/Toggle1"
local toggle_2_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateChoose/toggleGroup/Toggle2"
local toggle_3_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateChoose/toggleGroup/Toggle3"
local toggle_4_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateChoose/toggleGroup/Toggle4"
local toggle_all_txt_path = "UICommonFullTop/imgTitle/HeroStateBg/HeroStateChoose/toggleGroup/ToggleAll/allText"
local UICommonTab = require "UI.UICommonTab.UICommonTab"

--创建
local function OnCreate(self)
    base.OnCreate(self)
    self.ctrl:InitData(self:GetUserData())
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    DataCenter.HeroDataManager:MarkHeroRedPoint()
    EventManager:GetInstance():Broadcast(EventId.CheckPubBubble, true)

    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, "UICommonFullTop/imgTitle/Common_img_title/titleText")
    self.title_text:SetLocalText(300694)
    self.btnBack = self:AddComponent(UIButton, "UICommonFullTop/CloseBtn")
    self.btnBack:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))

    self.btnMap = self:AddComponent(UIButton, btn_map_path)
    self.btnMap:SetOnClick(BindCallback(self, self.OnSwitchPanel))
    self.iconMapClose = self:AddComponent(UIImage, 'UICommonFullTop/Bg2/Root/BtnMap/IconClose')
    self.iconMapOpen = self:AddComponent(UIImage, 'UICommonFullTop/Bg2/Root/BtnMap/IconOpen')
    self.textMap = self:AddComponent(UITextMeshProUGUIEx, 'UICommonFullTop/Bg2/Root/BtnMap/Common_img_wenben/content_ui_new')
    self.textMap:SetLocalText(161008)
    
    self.panelHero = self:AddComponent(UIHeroListPageHero, 'UICommonFullTop/Bg2/Root/PanelHero')
    self.panelHero:SetActive(true)
    self.panelMap = self:AddComponent(UIHeroListPageMap, 'UICommonFullTop/Bg2/Root/PanelMap')
    self.panelMap:SetActive(false)

    self.advanceBtn = self:AddComponent(UIButton, 'UICommonFullTop/Bg2/Root/BtnAdvance')
    self.advanceBtn:SetOnClick(BindCallback(self, self.OnAdvanceClick))
    self.advanceBtn_text = self:AddComponent(UITextMeshProUGUIEx, 'UICommonFullTop/Bg2/Root/BtnAdvance/content_ui_new_1')
    self.advanceBtn_text:SetLocalText(150115)
    self.hero_state = self:AddComponent(UIBaseContainer, hero_state_path)
    self.select_txt = self:AddComponent(UITextMeshProUGUIEx,select_txt_path)
    self.select_icon = self:AddComponent(UIImage,select_icon_path)
    self.hero_select_btn = self:AddComponent(UIButton,hero_select_btn_path)
    self.hero_select_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnShowSelectBar()
    end)
    self.select_bar = self:AddComponent(UIBaseContainer,select_bar_path)
    self.select_bar.gameObject:SetActive(false)
    self.showSelect =false
    self.toggleList = {}
    local toggle0 = self:AddComponent(UIToggle,toggle_0_path)
    toggle0:SetIsOn(true)
    self.toggleList[0] = toggle0
    local toggle1 = self:AddComponent(UIToggle,toggle_1_path)
    self.toggleList[1] = toggle1
    local toggle2 = self:AddComponent(UIToggle,toggle_2_path)
    self.toggleList[2] = toggle2
    local toggle3 = self:AddComponent(UIToggle,toggle_3_path)
    self.toggleList[3] = toggle3
    local toggle4 = self:AddComponent(UIToggle,toggle_4_path)
    self.toggleList[4] = toggle4
    self.toggle_all_txt = self:AddComponent(UITextMeshProUGUIEx,toggle_all_txt_path)
    self.toggle_all_txt:SetText("ALL")
    self.select_icon:SetActive(false)
    table.walk(self.toggleList,function(k,v)
        v:SetOnValueChanged(function(tf)
            if tf then
                self:ToggleControlBorS()
            end
        end)
    end)
    --self.hero_state:SetActive(false)
    self.btnMap:SetActive(false)
    local k1 = LuaEntry.DataConfig:TryGetNum("hero_hide_star_level", "k1")
    local currentMainLv = DataCenter.BuildManager.MainLv
    --self.advanceBtn:SetActive(currentMainLv >= k1)
    self.advanceBtn:SetActive(false)
    
    self.intro_btn = self:AddComponent(UIButton, "UICommonFullTop/Bg2/Root/Common_btn_info")
    local isOpen = LuaEntry.DataConfig:CheckSwitch("season_hero_reset")
    local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
    --self.intro_btn:SetActive(isOpen and (seasonId ~= 5))
    self.intro_btn:SetActive(false)
    self.intro_text = self:AddComponent(UITextMeshProUGUIEx, "UICommonFullTop/Bg2/Root/Common_btn_info/intro_text")
    self.intro_text:SetLocalText(110518)
    self.intro_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnIntroClick()
    end)

    self.tabs = {}
    self.tabs[-1] = self:AddComponent(UICommonTab, "UICommonFullTop/Bg2/Root/TabList/Tab-1")
    self.tabs[-1]:SetName("ALL")
    self.tabs[-1]:SetSelected(false)
    self.tabs[-1]:SetOnClick(function()
        self:OnTabClick(-1)
    end)
    for i = 1, 3 do
        self.tabs[i] = self:AddComponent(UICommonTab, "UICommonFullTop/Bg2/Root/TabList/Tab" .. i)
        self.tabs[i]:SetSelected(false)
        self.tabs[i]:SetOnClick(function()
            self:OnTabClick(i)
        end)
    end
    
    self.recruit_btn = self:AddComponent(UIButton, "UICommonFullTop/Bg2/Root/Recruit")
    local hasBuilding = DataCenter.BuildManager:HasBuilding(BuildingTypes.APS_BUILD_PUB)
    CS.UIGray.SetGray(self.recruit_btn.transform, not hasBuilding, true)
    self.recruit_btn:SetOnClick(function()
        if not hasBuilding then
            UIUtil.ShowTipsId(GameDialogDefine.GO_BUILD_RECRUIT_BUILDING) 
            return
        end
        self.ctrl:CloseSelf()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroRecruit, true)
    end)
    self.recruit_text = self:AddComponent(UITextMeshProUGUIEx, "UICommonFullTop/Bg2/Root/Recruit/RecruitText")
    self.recruit_text:SetLocalText(128011)
    self.recruit_red_go = self:AddComponent(UIBaseContainer, "UICommonFullTop/Bg2/Root/Recruit/RecruitRed")
end

local function ComponentDestroy(self)
    self.btnBack   = nil
    self.btnMap    = nil
    self.panelHero = nil
    self.panelMap  = nil
end

local function DataDefine(self)
    self.curPanelIndex = 1
    self.selectCamp = -1
    local _, season = self:GetUserData()
    self.season = season
    self.ctrl.season = season
    if season == 5 then
        self.intro_btn:SetActive(false)
    end
end

local function DataDestroy(self)
    self.curPanelIndex = nil
    self.selectCamp = nil
end


local function OnEnable(self)
    base.OnEnable(self)
    self:OnOpen()
end
local function OnDisable(self)
	
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    
    self:AddUIListener(EventId.HeroAdvanceSuccess, self.OnHeroDataChanged)
    self:AddUIListener(EventId.OnOneKeyAdvanceSuccess, self.OnHeroDataChanged)
    self:AddUIListener(EventId.RefreshHeroPlugin, self.RefreshHeroPluginSignal)
    self:AddUIListener(EventId.ChangeHeroCamp, self.ChangeHeroCampSignal)
    self:AddUIListener(EventId.RefreshHeroCampRed, self.RefreshHeroCampRedSignal)
    self:AddUIListener(EventId.RefreshItems, self.RefreshRecruitRed)
    self:AddUIListener(EventId.RefreshItems, self.RefreshRecruitRed)
    self:AddUIListener(EventId.SecondArrow, self.SecondArrowSignal)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.HeroAdvanceSuccess, self.OnHeroDataChanged)
    self:RemoveUIListener(EventId.OnOneKeyAdvanceSuccess, self.OnHeroDataChanged)
    self:RemoveUIListener(EventId.RefreshHeroPlugin, self.RefreshHeroPluginSignal)
    self:RemoveUIListener(EventId.ChangeHeroCamp, self.ChangeHeroCampSignal)
    self:RemoveUIListener(EventId.RefreshHeroCampRed, self.RefreshHeroCampRedSignal)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshRecruitRed)
    self:RemoveUIListener(EventId.SecondArrow, self.SecondArrowSignal)

    base.OnRemoveListener(self)
end

local function OnOpen(self)
    if self.season ~= nil then
        --self.hero_state:SetActive(false)
        self.btnMap:SetActive(false)
        self.advanceBtn:SetActive(false)
        self:OnSwitchPanel(2)
    else
        self:OnSwitchPanel(1)
    end
    self:OnSwitchCamp(-1)
    if self.season == nil then
        DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.OpenHeroListPanel, SaveGuideDoneValue)
    end
    self:RefreshRecruitRed()
end

local function RefreshRecruitRed(self)
    local hasBuilding = DataCenter.BuildManager:HasBuilding(BuildingTypes.APS_BUILD_PUB)
    local show = DataCenter.LotteryDataManager:HaveFree() or DataCenter.LotteryDataManager:CanAnyMultiRecruit()
    self.recruit_red_go:SetActive(hasBuilding and show)
end

local function OnSwitchPanel(self, panelIndex)
    self.curPanelIndex = panelIndex or self.curPanelIndex == 1 and 2 or 1
    
    self.iconMapClose:SetActive(self.curPanelIndex == 1)
    self.iconMapOpen:SetActive(self.curPanelIndex == 2)
    self.panelHero:SetActive(self.curPanelIndex == 1)
    self.panelMap:SetActive(self.curPanelIndex == 2)
end

local function ToggleControlBorS(self)
    table.walk(self.toggleList,function(k,v)
        if v:GetIsOn() == true then
            self.selectCamp = k - 1
            self.panelHero:OnSwitchCamp(self.selectCamp)
            self.panelMap:OnSwitchCamp(self.selectCamp)
            self:SetSelectState()
        end
    end)
    self:OnShowSelectBar()
end

local function SetSelectState(self)
    if self.selectCamp == -1 then
        self.select_txt:SetActive(true)
        self.select_txt:SetText("ALL")
        self.select_icon:SetActive(false)
    else
        self.select_txt:SetActive(false)
        self.select_icon:SetActive(true)
        self.select_icon:LoadSprite(HeroUtils.GetCampIconPath(self.selectCamp))
    end
    for i, tab in pairs(self.tabs) do
        tab:SetSelected(self.selectCamp == i)
    end
end


local function OnSwitchCamp(self, camp)
    self.selectCamp = camp
    if self.panelHero:GetActive() then
        self.panelHero:OnSwitchCamp(camp)
    end
    if self.panelMap:GetActive() then
        self.panelMap:OnSwitchCamp(camp)
    end
    self:SetSelectState()
end

local function OnHeroDataChanged(self)
    self:OnSwitchCamp(-1)
end

local function OnTabClick(self, i)
    self:OnSwitchCamp(i)
end

local function OnAdvanceClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance)
end
local function OnShowSelectBar(self)
    self.showSelect = not self.showSelect
    self.select_bar.gameObject:SetActive(self.showSelect)
end

local function GetHeroCellAdvanceGuideBtn(self)
    if self.panelHero ~= nil then
        return self.panelHero:GetHeroCellAdvanceGuideBtn()
    end
    return nil
end

local function GetHeroCellStarGuideBtn(self)
    if self.panelHero ~= nil then
        return self.panelHero:GetHeroCellStarGuideBtn()
    end
    return nil
end

local function GetHeroCellMilitaryGuideBtn(self)
    if self.panelHero ~= nil then
        return self.panelHero:GetHeroCellMilitaryGuideBtn()
    end
    return nil
end

local function OnIntroClick(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.intro_btn.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("110517")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 350
    param.pivot = 0.15
    param.position = position

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)

end

function UIHeroListView:RefreshHeroPluginSignal(param)
    if param ~= nil then
        for k,v in ipairs(param) do
            if self.panelHero ~= nil then
                return self.panelHero:RefreshHero(v)
            end
        end
    end
end

function UIHeroListView:GetHeroItem(heroId)
    if self.panelHero ~= nil then
        return self.panelHero:GetHeroItem(heroId)
    end
    return nil
end

function UIHeroListView:ChangeHeroCampSignal()
    self:OnHeroDataChanged()
end

function UIHeroListView:RefreshHeroCampRedSignal(uuid)
    if self.panelHero ~= nil then
        return self.panelHero:RefreshHero(uuid)
    end
end

function UIHeroListView:SecondArrowSignal()
    self.panelHero:CheckShowSecondArrow()
end

UIHeroListView.OnCreate= OnCreate
UIHeroListView.OnDestroy = OnDestroy
UIHeroListView.OnEnable = OnEnable
UIHeroListView.OnDisable = OnDisable
UIHeroListView.OnAddListener = OnAddListener
UIHeroListView.OnRemoveListener = OnRemoveListener
UIHeroListView.ComponentDefine = ComponentDefine
UIHeroListView.ComponentDestroy = ComponentDestroy
UIHeroListView.DataDefine = DataDefine
UIHeroListView.DataDestroy = DataDestroy
UIHeroListView.ToggleControlBorS = ToggleControlBorS
UIHeroListView.OnShowSelectBar = OnShowSelectBar
UIHeroListView.OnIntroClick = OnIntroClick
UIHeroListView.OnOpen = OnOpen
UIHeroListView.RefreshRecruitRed = RefreshRecruitRed
UIHeroListView.OnSwitchPanel = OnSwitchPanel 
UIHeroListView.OnSwitchCamp = OnSwitchCamp 
UIHeroListView.OnHeroDataChanged = OnHeroDataChanged
UIHeroListView.OnTabClick = OnTabClick

UIHeroListView.OnAdvanceClick = OnAdvanceClick
UIHeroListView.SetSelectState = SetSelectState
UIHeroListView.GetHeroCellAdvanceGuideBtn = GetHeroCellAdvanceGuideBtn
UIHeroListView.GetHeroCellStarGuideBtn = GetHeroCellStarGuideBtn
UIHeroListView.GetHeroCellMilitaryGuideBtn = GetHeroCellMilitaryGuideBtn

return UIHeroListView