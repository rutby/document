---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 2021/6/28 下午6:48
---


local UIHeroSkillUpgradeSuccess = BaseClass("UIHeroSkillUpgradeSuccess", UIBaseView)
local base = UIBaseView

local Localization = CS.GameEntry.Localization

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.textTitle = self:AddComponent(UIText, "UICommonRewardPopUp/Panel/ImgTitleBg/TextTitle")
    --技能升级
    self.textTitle:SetLocalText(150183) 
    
    self.btnClose = self:AddComponent(UIButton, "UICommonRewardPopUp/Panel")
    self.btnClose:SetOnClick(BindCallback(self, self.OnBtnCloseClick))

    self.nodeSkill = self:AddComponent(UIBaseContainer, "Root/NodeSkill")
    self.nodeArk = self:AddComponent(UIBaseContainer, "Root/NodeArk")
    
    self.iconSkill  = self:AddComponent(UIImage, 'Root/NodeSkill/SkillBg/IconSkill')
    self.textLastLv = self:AddComponent(UIText, "Root/NodeSkill/TextLastLv")
    self.textCurLv  = self:AddComponent(UIText, "Root/NodeSkill/TextCurLv")
    self.textDesc   = self:AddComponent(UIText, "Root/NodeSkill/TextDesc")
    
    self.iconArk = self:AddComponent(UIImage, 'Root/NodeArk/IconArk')
    self.textArkLastLv = self:AddComponent(UIText, "Root/NodeArk/TextArkLastLv")
    self.textArkCurLv  = self:AddComponent(UIText, "Root/NodeArk/TextArkCurLv")
    self.textArkDesc   = self:AddComponent(UIText, "Root/NodeArk/TextArkDesc")
    
    self.animator = self:AddComponent(UIAnimator, 'Root')
end

local function ComponentDestroy(self)
    self.textTitle  = nil
    self.nodeSkill  = nil
    self.iconSkill  = nil
    self.iconArk    = nil
    self.textLastLv = nil
    self.textCurLv  = nil
    self.textDesc   = nil
end

local function OnEnable(self)
    base.OnEnable(self)

    --self.btnClose:SetInteractable(false)
    
    
    local heroId, skillId, skillLv, arkTotalLv = self:GetUserData()
    self.heroId = heroId
    self.skillLv = skillLv
    self.arkTotalLv = arkTotalLv
    
    self.iconSkill:LoadSprite(HeroUtils.GetSkillIcon(skillId))
    self.textLastLv:SetText('Lv.' .. (skillLv-1))
    self.textCurLv:SetText('Lv.' .. skillLv)
    
    local finalSkillDesc = HeroUtils.GetSkillDescStr(skillId, skillLv)
    self.textDesc:SetText(finalSkillDesc)

    local lastArkId = HeroUtils.GetArkIdAndGrade(self.heroId, self.arkTotalLv-1)
    local curArkId, curArkGrade = HeroUtils.GetArkIdAndGrade(self.heroId, self.arkTotalLv)

    --ark进阶了
    self.needShowArk = lastArkId ~= curArkId
    if self.needShowArk then
        self.iconArk:LoadSprite(HeroUtils.GetArkGradeIcon(curArkGrade, true))
        self.iconArk:SetActive(true)

        self.textArkLastLv:SetText('Lv.' .. (arkTotalLv-1))
        self.textArkCurLv:SetText('Lv.' .. arkTotalLv)
        
        local dt = LocalController:instance():getLine(TableName.HeroArkCore, curArkId)
        local effectArray = string.split(dt['effect'], ';')
        local effectNum, effectValue = effectArray[1], effectArray[2]
        local effectNameKey = GetTableData(TableName.EffectNumDesc, effectNum, 'des')

        self.textArkDesc:SetText(Localization:GetString(effectNameKey) .. ': ' .. effectValue)
    end

    self.nodeSkill:SetActive(not self.needShowArk)
    self.nodeArk:SetActive(self.needShowArk)

    self.nodeSkill:SetActive(true)
    self.nodeArk:SetActive(true)
    
    self.animator:ResetTrigger('close')
    self.lastTrigger = self.needShowArk and 'state2' or 'state1'
    self.animator:SetTrigger(self.lastTrigger)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnBtnCloseClick(self)
    self.animator:ResetTrigger(self.lastTrigger)
    self.nodeSkill:SetActive(false)
    self.nodeArk:SetActive(false)
    
    local ret, time = self.animator:GetAnimationReturnTime('V_ui_hero_skilllvup_xiaoshi')
    if ret then
        self.animator:SetTrigger('close')
            TimerManager:GetInstance():DelayInvoke(function()
                self.ctrl:CloseSelf()
            end, time)
    else
        self.ctrl:CloseSelf()
    end
    
    --local ret,time = self.animator:PlayAnimationReturnTime('')
    --if ret then
    --    TimerManager:GetInstance():DelayInvoke(function()
    --        self.ctrl:CloseSelf()
    --    end, time)
    --else
    --    self.ctrl:CloseSelf()
    --end
end


UIHeroSkillUpgradeSuccess.OnCreate= OnCreate
UIHeroSkillUpgradeSuccess.OnDestroy = OnDestroy
UIHeroSkillUpgradeSuccess.OnEnable = OnEnable
UIHeroSkillUpgradeSuccess.OnDisable = OnDisable
UIHeroSkillUpgradeSuccess.ComponentDefine = ComponentDefine
UIHeroSkillUpgradeSuccess.ComponentDestroy = ComponentDestroy


UIHeroSkillUpgradeSuccess.OnBtnCloseClick = OnBtnCloseClick

return UIHeroSkillUpgradeSuccess
