---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 8/2/21 6:10 PM
---


local UIHeroMedalExchangeView = BaseClass("UIHeroMedalExchangeView", UIBaseView)
local base = UIBaseView

local UIMedalCell = require "UI.UIHero2.UIHeroMedalExchange.Component.UIMedalCell"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    
    local exchangeItemId, targetItemId, heroId, requireNum,isResLack = self:GetUserData()
    self.exchangeItemId = exchangeItemId
    self.targetItemId = targetItemId
    self.heroId = heroId
    self.requireNum = requireNum

    if isResLack then
        self.toggle_rect:SetActive(false)
    else
        self.toggle_rect:SetActive(true)
    end
    
    local exchangeItemData = DataCenter.ItemData:GetItemById(exchangeItemId)
    local have1 = exchangeItemData and exchangeItemData.count or 0
    self.itemCell1:SetData(exchangeItemId, have1)

    local targetItemData = DataCenter.ItemData:GetItemById(targetItemId)
    local have2 = targetItemData and targetItemData.count or 0
    self.itemCell2:SetData(targetItemId, have2)
    
    self.exchangeItemTotal = have1
    self.targetItemTotal = have2
    local levelUpNeed = self:GetLevelUpNeed()
    
    
    local oneStageNum = self.requireNum - have2
    local oneLevelNum = levelUpNeed - have2
    oneStageNum = math.max(0, oneStageNum)
    oneLevelNum = math.max(0, oneLevelNum)
    self.oneStageText:SetLocalText(161035, oneStageNum)
    self.oneLvText:SetLocalText(161036, oneLevelNum)

    self.exchangeNum = 0
    self.slider:SetValue(0)
    self:OnShortCutBtnClick(true)
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)

    self.callback = nil
end

local function ComponentDefine(self)
    self.textTitle = self:AddComponent(UITextMeshProUGUIEx, "UICommonMidPopUpTitle/bg_mid/titleText")
    self.textTitle:SetLocalText(150199) 

    local panel = self:AddComponent(UIButton, "UICommonMidPopUpTitle/panel")
    panel:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))

    local btnClose = self:AddComponent(UIButton, "UICommonMidPopUpTitle/bg_mid/CloseBtn")
    btnClose:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))

    self.itemCell1 = self:AddComponent(UIMedalCell, "Root/UIItem1")
    self.itemCell2 = self:AddComponent(UIMedalCell, "Root/UIItem2")

    self.slider = self:AddComponent(UISlider, 'Root/Slider')
    self.slider:SetOnValueChanged(BindCallback(self, self.OnSliderValueChanged))
    
    self.btnExchange = self:AddComponent(UIButton, 'Root/BtnExchange')
    self.btnExchange:SetOnClick(BindCallback(self, self.OnBtnExchangeClick))
    self.textBtnExchange = self:AddComponent(UITextMeshProUGUIEx, 'Root/BtnExchange/TextBtnExchange')
    self.textBtnExchange:SetLocalText(110029)

    self.addBtn = self:AddComponent(UIButton, 'Root/AddBtn')
    self.addBtn:SetOnClick(BindCallback(self, self.OnAddClick))

    self.subBtn = self:AddComponent(UIButton, 'Root/SubBtn')
    self.subBtn:SetOnClick(BindCallback(self, self.OnSubClick))
    
    self.toggle_rect = self:AddComponent(UIBaseContainer,"Root/toggleGroup")
    
    self.oneLvBtn = self:AddComponent(UIButton, "Root/toggleGroup/Toggle1/Toggle1Btn")
    self.oneLvText = self:AddComponent(UITextMeshProUGUIEx, "Root/toggleGroup/Toggle1/ToggleText1")
    self.oneLvImg = self:AddComponent(UIImage, "Root/toggleGroup/Toggle1/Toggle1Btn/Toggle1Img")
    self.oneLvBtn:SetOnClick(BindCallback(self, self.OnLevelUpBtnClick))

    self.oneStageBtn = self:AddComponent(UIButton, "Root/toggleGroup/Toggle2/Toggle2Btn")
    self.oneStageText = self:AddComponent(UITextMeshProUGUIEx, "Root/toggleGroup/Toggle2/ToggleText2")
    self.oneStageImg = self:AddComponent(UIImage, "Root/toggleGroup/Toggle2/Toggle2Btn/Toggle2Img")
    self.oneStageBtn:SetOnClick(BindCallback(self, self.OnShortCutBtnClick))
    self.oneLvImg:SetActive(false)
    self.oneStageImg:SetActive(false)
end
local function OnAddClick(self)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Add)
    local curNum = self.exchangeNum + 1
    curNum = math.max(0, math.min(curNum, self.exchangeItemTotal))
    if curNum > self.exchangeNum then
        self:SetCurExchangeNum(curNum)
    end
end

local function OnSubClick(self)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Dec)
    local curNum = self.exchangeNum - 1
    curNum = math.max(0, math.min(curNum, self.exchangeItemTotal))
    if curNum < self.exchangeNum then
        self:SetCurExchangeNum(curNum)
    end
end

local function SetCurExchangeNum(self, curNum)
    if self.exchangeItemTotal == 0 then
        self.slider:SetValue(0)
    else
        local sliderValue = Mathf.Clamp01(curNum / self.exchangeItemTotal)
        self.slider:SetValue(sliderValue)
    end
end

local function OnShortCutBtnClick(self, notCheck)
    local num = self.requireNum - self.targetItemTotal
    --if not notCheck then
        if num <= 0 then
            if not notCheck then
                UIUtil.ShowTipsId(161037)
            end
            return
        end
        if num > self.exchangeItemTotal then
            if not notCheck then
                UIUtil.ShowTipsId(120021)
            end
            return
        end
    --end
    --if num <= 0 then
    --    return
    --end
    num = math.min(num, self.exchangeItemTotal)
    self:SetCurExchangeNum(num)
    self.oneLvImg:SetActive(false)
    self.oneStageImg:SetActive(true)
end

local function OnLevelUpBtnClick(self)
    local need = self:GetLevelUpNeed()
    local num = need - self.targetItemTotal
    if num <= 0 then
        UIUtil.ShowTipsId(161037)
        return
    end
    if num > self.exchangeItemTotal then
        UIUtil.ShowTipsId(120021)
        return
    end

    local num = math.min(num, self.exchangeItemTotal)
    self:SetCurExchangeNum(num)
    self.oneLvImg:SetActive(true)
    self.oneStageImg:SetActive(false)
end

local function ComponentDestroy(self)
    self.textTitle = nil
    self.itemCell1 = nil
    self.itemCell2 = nil
    self.textItemName1 = nil
    self.textItemName2 = nil

    self.slider = nil
    self.btnExchange = nil
    self.textBtnExchange = nil
end

local function OnSliderValueChanged(self, value)
    local num = Mathf.Round(self.exchangeItemTotal * value)
    self.itemCell1:SetNumDisplay(num.."/"..self.exchangeItemTotal)
    self.itemCell2:SetNumDisplay(num)

    self.exchangeNum = num

    CS.UIGray.SetGray(self.btnExchange.transform, num <= 0, num > 0)
    self.oneLvImg:SetActive(false)
    self.oneStageImg:SetActive(false)
end

local function OnBtnExchangeClick(self)
    if self.exchangeNum <= 0 then
        return
    end
    
    SFSNetwork.SendMessage(MsgDefines.HeroMedalExchange, self.exchangeItemId, self.targetItemId, self.exchangeNum)
    self.ctrl:CloseSelf()
end

local function GetLevelUpNeed(self)
    local heroUid = DataCenter.HeroDataManager:GetHeroUuidByHeroId(self.heroId)
    if heroUid > 0 then
        local data = DataCenter.HeroDataManager:GetHeroByUuid(heroUid)
        if data then
            local rankId = data:GetCurMilitaryRankId()
            local rankLv = GetTableData(TableName.HeroMilitaryRank, rankId, 'level')
            local stage = GetTableData(TableName.HeroMilitaryRank, rankId, 'stage')
            local maxMilitaryRankId = data:GetMaxMilitaryRankId()
            local num = 0
            for i = rankId, maxMilitaryRankId do
                local tmpLv = GetTableData(TableName.HeroMilitaryRank, i, 'level')
                local tmpStage = GetTableData(TableName.HeroMilitaryRank, i, 'stage')
                if rankLv == tmpLv and tmpStage >= stage then
                    local tmpNum = GetTableData(TableName.HeroMilitaryRank, i, 'cost_medal')[data.rarity]
                    num = num + toInt(tmpNum)
                end
            end
            --self.costMedalNum = GetTableData(TableName.HeroMilitaryRank, self.curRankId, 'cost_medal')[self.heroData.rarity]
            return num
        end
    end
    return 0
end

UIHeroMedalExchangeView.OnCreate= OnCreate
UIHeroMedalExchangeView.OnDestroy = OnDestroy
UIHeroMedalExchangeView.ComponentDefine = ComponentDefine
UIHeroMedalExchangeView.ComponentDestroy = ComponentDestroy
UIHeroMedalExchangeView.OnSliderValueChanged = OnSliderValueChanged
UIHeroMedalExchangeView.OnBtnExchangeClick = OnBtnExchangeClick
UIHeroMedalExchangeView.OnAddClick = OnAddClick
UIHeroMedalExchangeView.OnSubClick = OnSubClick
UIHeroMedalExchangeView.OnShortCutBtnClick = OnShortCutBtnClick
UIHeroMedalExchangeView.SetCurExchangeNum = SetCurExchangeNum
UIHeroMedalExchangeView.GetLevelUpNeed = GetLevelUpNeed
UIHeroMedalExchangeView.OnLevelUpBtnClick = OnLevelUpBtnClick

return UIHeroMedalExchangeView
