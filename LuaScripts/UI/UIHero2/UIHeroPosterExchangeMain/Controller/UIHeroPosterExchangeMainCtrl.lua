---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/10/13 11:06
---

local UIHeroPosterExchangeMainCtrl = BaseClass("UIHeroPosterExchangeMainCtrl", UIBaseCtrl)

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIHeroPosterExchangeMain)
end

local function GetPanelData(self, showRarity)
    local allHeroes = DataCenter.HeroDataManager:GetAllHeroList()
    local tmp = {}
    for _, v in pairs(allHeroes) do
        if v ~= nil and not v.isMaster and (v.rarity == HeroUtils.RarityType.A or v.rarity == HeroUtils.RarityType.S) then
            if tmp[v.heroId] == nil then
                if string.IsNullOrEmpty(v.config.poster_exchange) then
                    goto continue
                end
                local posterExchange = string.split(v.config.poster_exchange, "|")
                tmp[v.heroId] = {}
                tmp[v.heroId].heroId = v.heroId
                tmp[v.heroId].rarity = v.rarity
                if v.rarity == HeroUtils.RarityType.A then
                    tmp[v.heroId].bgIcon = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.PURPLE)
                else
                    tmp[v.heroId].bgIcon = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.ORANGE)
                end
                
                tmp[v.heroId].uuids = {}
                if table.count(posterExchange) > 0 then
                    local vec = string.split(posterExchange[1], ";")
                    if table.count(vec) == 2 then
                        tmp[v.heroId].exchangeMedalId = toInt(vec[1])
                        tmp[v.heroId].exchangeMedalNum = toInt(vec[2])
                    end
                end
            end
            table.insert(tmp[v.heroId].uuids, v.uuid)
            ::continue::
        end
    end
    
    local paras = {}
    table.walk(tmp, function (k, v)
        local param = {}
        param.heroId = v.heroId
        param.uuids = v.uuids
        param.count = table.count(param.uuids)
        param.icon = HeroUtils.GetHeroIconPath(v.heroId)
        param.rarity = v.rarity
        param.exchangeMedalId = v.exchangeMedalId
        param.exchangeMedalNum = v.exchangeMedalNum
        param.bgIcon = v.bgIcon
        table.insert(paras, param)
    end)
    table.sort(paras, function (k, v)
        return k.rarity < v.rarity
    end)

    local result = {}
    local row = math.ceil(#paras / HeroBagCellNumPerLine)

    for k = 1, row do
        local startIndex = HeroBagCellNumPerLine * (k-1) +1
        local endIndex = math.min(startIndex + HeroBagCellNumPerLine - 1, #paras)
        local rowData = {table.unpack (paras,  startIndex, endIndex)}
        table.insert(result, rowData)
    end
    return result

    --local type99Items = DataCenter.ItemData:GetItemsByType(GOODS_TYPE.GOODS_TYPE_99)
    --local allItems = {}
    --table.walk(type99Items, function (k, v)
    --    local itemId = toInt(v.itemId)
    --    local count = DataCenter.ItemData:GetItemCount(itemId)
    --    if count > 0 then
    --        local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
    --        local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), toInt(itemTemplate.para2))
    --        if heroConfig == nil or (showRarity > 0 and heroConfig.rarity ~= showRarity) then
    --            return
    --        end
    --        local hasHero = DataCenter.HeroDataManager:GetHeroUuidByHeroId(toInt(itemTemplate.para2))
    --        
    --        if not string.IsNullOrEmpty(hasHero) then
    --            local param = {}
    --            param.itemId = itemId
    --            param.count = count
    --            if not string.IsNullOrEmpty(itemTemplate.para3) then
    --                local para3 = string.split(itemTemplate.para3, "|")
    --                if para3 ~= nil and #para3 == 2 then
    --                    param.exchangeMedalId = toInt(para3[1])
    --                    param.exchangeMedalNum = toInt(para3[2])
    --                    table.insert(allItems, param)
    --                end
    --            end
    --        end
    --    end
    --end)
    --
    --table.sort(allItems, function (k, v)
    --    local item1 = DataCenter.ItemTemplateManager:GetItemTemplate(k.itemId)
    --    local heroConfigA = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), toInt(item1.para2))
    --    local item2 = DataCenter.ItemTemplateManager:GetItemTemplate(v.itemId)
    --    local heroConfigB = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), toInt(item2.para2))
    --
    --    if heroConfigA == nil or heroConfigB == nil then
    --        return false
    --    end
    --    return heroConfigA.rarity < heroConfigB.rarity
    --end)
    --local allCommonDebris = HeroUtils.GetAllCommonHeroDebris()
    --for k, v in pairs(allCommonDebris) do
    --    local count = DataCenter.ItemData:GetItemCount(k)
    --    if count > 0 then
    --        local param = {}
    --        param.itemId = toInt(k)
    --        param.count = count
    --        local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(param.itemId)
    --        local para3 = string.split(itemTemplate.para3, "|")
    --        if para3 ~= nil and #para3 == 2 then
    --            param.exchangeMedalId = toInt(para3[1])
    --            param.exchangeMedalNum = toInt(para3[2])
    --            table.insert(allItems, param)
    --        end
    --    end
    --end
    --local result = {}
    --local row = math.ceil(#allItems / HeroBagCellNumPerLine)
    --
    --for k = 1, row do
    --    local startIndex = HeroBagCellNumPerLine * (k-1) +1
    --    local endIndex = math.min(startIndex + HeroBagCellNumPerLine - 1, #allItems)
    --    local rowData = {table.unpack (allItems,  startIndex, endIndex)}
    --
    --    table.insert(result, rowData)
    --end
    --
    --return result
end

UIHeroPosterExchangeMainCtrl.CloseSelf = CloseSelf
UIHeroPosterExchangeMainCtrl.GetPanelData = GetPanelData

return UIHeroPosterExchangeMainCtrl