---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 6/24/21 11:36 AM
---
local Localization = CS.GameEntry.Localization
local HeroInfo = require "DataCenter.HeroData.HeroInfo"


local HeroUtils = {}

local HeroIds = {
    HeroIds_1003 = 1003,
}

---进阶不能吃的原因
local EatForbidReason = {
    QualityNotMatch = 0,
    HeroIdNotMatch = 1,
    CampNotMatch = 2,
    CanNotMoreThanMasterQuality = 3,
}


local HeroStateType = {
    HeroStateType_NORMAL = 1,--正常
    HeroStateType_TEST = 3,--测试用
    HeroStateType_NPC = 4,--npc英雄，不再列表中显示，不会获得
}

local QualitySmallIcons = {
    "ui_quality_green1",         --1.绿
    "ui_quality_blue1",          --2.蓝
    "ui_quality_blue2",          --3.蓝1星
    "ui_quality_purple1",        --4.紫
    "ui_quality_purple2",        --5.紫1星
    "ui_quality_orange1",        --6.橙
    "ui_quality_orange2",        --7.橙1星
    "ui_quality_red1",           --8.红
    "ui_quality_red2",           --9.红1星
    "ui_quality_gold1",          --10.金
    "ui_quality_gold2",          --11.金1星
    "ui_quality_cai1",           --12.彩
    "ui_quality_cai2",           --13.彩1星
}

local raritySmallIcons = {
    "ui_quality_orange1",        --1.橙
    "ui_quality_purple1",        --2.紫
    "ui_quality_blue1",          --3.蓝
    "ui_quality_green1",         --4.绿
    "ui_quality_cai1",           
}

local rarityFgIcons = {
    "ui_quality_orange1fg",        --1.橙
    "ui_quality_purple1fg",        --2.紫
    "ui_quality_blue1fg",          --3.蓝
    "ui_quality_green1fg",         --4.绿
    "ui_quality_cai1fg",
}

local rarityToMaxStar = nil
local qualityToLevel = nil
local rankToLevel = nil

local rarityBigIcons = {
    "ui_quality_orange_big",        --1.红
    "ui_quality_purple_big",        --2.紫
    "ui_quality_blue_big",          --3.蓝
    "ui_quality_green_big",         --4.绿
    "ui_quality_cai_big",
}

local rarityBigMasks = {
    "ui_quality_mask_orange_big",        --1.橙
    "ui_quality_mask_purple_big",        --2.紫
    "ui_quality_mask_blue_big",          --3.蓝
    "ui_quality_mask_green_big",         --4.绿
    "ui_quality_mask_cai_big"
}

local QualityBigIcons = {
    "ui_quality_green_big",         --1.绿
    "ui_quality_blue_big",          --2.蓝
    "ui_quality_blue_big",          --3.蓝1星
    "ui_quality_purple_big",        --4.紫
    "ui_quality_purple_big",        --5.紫1星
    "ui_quality_orange_big",        --6.橙
    "ui_quality_orange_big",        --7.橙1星
    "ui_quality_red_big",           --8.红
    "ui_quality_red_big",           --9.红1星
    "ui_quality_gold_big",          --10.金
    "ui_quality_gold_big",          --11.金1星
    "ui_quality_cai_big",           --12.彩
    "ui_quality_cai_big",           --13.彩1星
}

local function GetStarNumByQuality(quality)
    if quality == 1 or quality % 2 == 0 then
        return 0
    end
    
    return 1
    
    --local starNum = 0
    --if quality == 3 or quality == 5 or quality == 7 or quality == 9 then
    --    starNum = 1
    --elseif quality > 10 then
    --    starNum = quality % 10
    --end
    --
    --return starNum
end



---获取品质框
---@param quality number
---@param useBig boolean 是否使用大图
---@return string
local function GetQualityIconPath(quality, useBig)
    if useBig then
        return string.format(LoadPath.HeroListPath, QualityBigIcons[quality])
    end

    return LoadPath.HeroIconsSmallPath ..  QualitySmallIcons[quality]
end

local function GetMaxStarByRarity(rarity)
    if rarityToMaxStar == nil then
        rarityToMaxStar = {}
        LocalController:instance():visitTable(HeroUtils.GetHeroXmlName(), function(id, lineData)
            rarityToMaxStar[lineData['rarity']] = lineData[HeroUtils.GetHeroMaxQualityLevelName()]
        end)
    end
    if rarityToMaxStar[rarity] ~= nil then
        return rarityToMaxStar[rarity]
    end
    return 11
end

local function GetMaxStarLevel(heroId)
    if HeroUtils.heroStarLevel == nil then
        HeroUtils.heroStarLevel = {}
    end
    if HeroUtils.heroStarLevel[heroId] == nil then
        local lv = GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'max_star_level')
        HeroUtils.heroStarLevel[heroId] = lv
    end
    return HeroUtils.heroStarLevel[heroId]
end

local function GetRarityIconPath(rarity, useBig, isWaken)
    if useBig then
        if isWaken then
            return string.format(LoadPath.HeroListPath, rarityBigIcons[#rarityBigIcons])
        end
        return string.format(LoadPath.HeroListPath, rarityBigIcons[rarity])
    end
    if isWaken then
        return LoadPath.HeroIconsSmallPath..raritySmallIcons[#raritySmallIcons]
    end

    return LoadPath.HeroIconsSmallPath ..  raritySmallIcons[rarity]
end

local function GetRarityFgIconPath(rarity)
    return LoadPath.HeroIconsSmallPath ..  rarityFgIcons[rarity]
end

local function GetRarityMaskPath(rarity, useBig, isWaken)
    --if useBig then
        if isWaken then
            return string.format(LoadPath.HeroListPath, rarityBigMasks[#rarityBigMasks])
        end
        return string.format(LoadPath.HeroListPath, rarityBigMasks[rarity])
    --end
    --if isWaken then
    --    return string.format(LoadPath.HeroIconsSmallPath, raritySmallMasks[#raritySmallMasks])
    --end

    --return LoadPath.HeroIconsSmallPath ..  raritySmallMasks[rarity]
end

---获取品质框
---@param quality number
---@param useBig boolean 是否使用大图
---@return string
local function GetCircleQualityIconPath(rarity,isWaken)
    local qualityIcons = {
        "ui_quality_circle_orange",  
        "ui_quality_circle_purple",  
        "ui_quality_circle_blue",   
        "ui_quality_circle_green",
        "ui_quality_circle_cai",
    }

    local iconNames = qualityIcons[rarity]
    if isWaken~=nil and isWaken == true then
        iconNames = qualityIcons[#qualityIcons]
    end
    if iconNames == nil then
        iconNames = "ui_quality_circle_green"
    end
    local path = LoadPath.HeroAdvancePath
    return string.format(path, iconNames)
end
local function GetQualityBgPath(quality)
    local qualityIcons = {
        "UIHeroInfo_bg_quality_green",         --1.绿
        "UIHeroInfo_bg_quality_blue",          --2.蓝
        "UIHeroInfo_bg_quality_blue",          --3.蓝1星
        "UIHeroInfo_bg_quality_purple",        --4.紫
        "UIHeroInfo_bg_quality_purple",        --5.紫1星
        "UIHeroInfo_bg_quality_orange",        --6.橙
        "UIHeroInfo_bg_quality_orange",        --7.橙1星
        "UIHeroInfo_bg_quality_red",           --8.红
        "UIHeroInfo_bg_quality_red",           --9.红1星
        "UIHeroInfo_bg_quality_gold",          --10.金
        "UIHeroInfo_bg_quality_gold",          --11.金1星
        "UIHeroInfo_bg_quality_cai",           --12.彩
        "UIHeroInfo_bg_quality_cai",           --13.彩1星
    }

    local iconNames = qualityIcons[quality]
    assert(iconNames ~= nil, "iconNames is nil! quality:" .. quality)

    return string.format(LoadPath.HeroDetailPath, iconNames)
end

local function GetQualityBgInTroopsByPath(rarity,isWaken)
    local qualityIcons = {
        "UITroops_img_heroquality_orange",            --1.橙
        "UITroops_img_heroquality_pur",             --2.紫
        "UITroops_img_heroquality_blue",            --3.蓝
        "UITroops_img_heroquality_green",           --4.绿
        "UITroops_img_heroquality_multicolor",      --5.彩
        --"UITroops_img_heroquality_blue",            --3.蓝1星
        --"UITroops_img_heroquality_pur",             --5.紫1星
        --"UITroops_img_heroquality_orange",            --7.橙1星
        --"UITroops_img_heroquality_red",             --8.红
        --"UITroops_img_heroquality_red",             --9.红1星
        --"UITroops_img_heroquality_gold",            --10.金
        --"UITroops_img_heroquality_gold",            --11.金1星
        --"UITroops_img_heroquality_multicolor",      --12.彩2星
        --"UITroops_img_heroquality_multicolor",      --13.彩3星
    }
    
    local iconNames = qualityIcons[rarity]
    if isWaken~=nil and isWaken == true then
        iconNames = qualityIcons[#qualityIcons]
    end
    return string.format(LoadPath.UITroopsNew, iconNames)
end

local function GetRarityIconName(rarity, useBig)
    local prefix = useBig and 'UI_Icon_Rarity_Big_' or 'UI_Icon_Rarity_'
    return string.format(useBig and LoadPath.HeroDetailPath or LoadPath.HeroListPath, prefix .. rarity)  
end

---获取英雄头像
---@param heroId number 对应英雄配置Id
---@param useBig boolean 是否使用大图
---@return string
local function GetHeroIconPath(heroId, useBig)
    useBig = true -- TODO: 临时，英雄小图出来后可删
    local path = useBig and LoadPath.HeroIconsBigPath or LoadPath.HeroIconsSmallPath
    local iconName = GetTableData(HeroUtils.GetHeroXmlName(), heroId,useBig and "hero_halfbody" or "hero_icon")
    return path .. iconName
end

local function GetHeroBubbleBGPath(heroId)
    local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    if config ~= nil and config.rarity == HeroUtils.RarityType.S then
        return string.format(LoadPath.UIBuildBubble, "bubble_bg_orange")
    end
    return string.format(LoadPath.UIBuildBubble, "bubble_bg_purple")
end

local function GetHeroIconRoundPath(heroId)
    local path = LoadPath.HeroIconsBigPath
    local iconName = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "round_hero_icon")
    return path .. iconName
end

local function GetCampIconPath(camp)
    --暂时先这样 之后策划配表后读表
    return string.format(LoadPath.HeroListPath, "ui_camp_" .. camp)
end

local function GetCampCircleImgPath(camp)
    return string.format(LoadPath.HeroListPath, "hero_faction_" .. camp)
end

local function GetCampNameAndDesc(camp)
    camp = tonumber(camp)
    local nameKey = {'158005', '158002', '158003', '150190'}
    local descKey = {'150185', '150187', '150189', '150191'}
    
    return Localization:GetString(nameKey[camp+1]), Localization:GetString(descKey[camp+1])
end

--- 获取升级所需的经验
---@param level number 当前等级
---@return number 返回所需经验
local function GetLevelUpNeedExp(level)
    local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
    if template ~= nil then
        return template:GetExp()
    end
    return 0
end

--- 获取升级消耗的金币
local function GetLevelUpSpeedGold(level)
    local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
    if template ~= nil then
        return template.spend
    end
    return 0
end

--获取当前等级已消耗的金币
local function GetTotalCostGold(curMaxLevel)
    local result = 0
    local level = curMaxLevel - 1
    if level > 0 then
        for k = 1, level, 1 do
            result = result + HeroUtils.GetLevelUpSpeedGold(k)
        end
    end
    return result
end

local function GetHeroBodyByHeroId(heroId)
    return GetTableData(HeroUtils.GetHeroXmlName(), heroId, "hero_body")
end

local function GetTagsByHeroId(heroId)
    local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    local tags = config['hero_tag']
    if type(tags) ~= 'table' then
        tags = string.split(config["hero_tag"], "|")
    end
    
    local ret = {}
    for _, v in ipairs(tags) do
        table.insert(ret, tonumber(v))
    end
    
    return ret
end

local function GetCampByHeroId(heroId)
    return GetTableData(HeroUtils.GetHeroXmlName(), heroId, "camp")
end

local function GetTagIconAndName(tag)
    local line = LocalController:instance():getLine(TableName.NewHeroesTag, tag)
    local icon = line["pic"]
    if icon == "" then
        icon = "UIHeroInfo_icon_tag_default"
    end
    
    local iconPath = string.format(LoadPath.HeroDetailPath, icon) --string.format(LoadPath.HeroDetailPath, "UIHeroInfo_icon_tag" .. tag)  
    local name = Localization:GetString(line["name"])
    local desc = Localization:GetString(line["desc"])
    return iconPath, name, desc
end

local function GetQualityName(quality)
    local nameKey = GetTableData(TableName.NewHeroesQuality, quality, "name")
    assert(nameKey ~= nil, "qualityName is nil! quality:" .. quality)

    return Localization:GetString(nameKey)
end

local function GetRarityName(rarity)
    local names = {"156010", "156011", "156012"}
    local nameKey = names[rarity]

    assert(nameKey ~= nil, "RarityName is nil! rarity:" .. rarity)

    return Localization:GetString(nameKey)
end

local function GetNextMaxLevelByRankId(heroId, rankId, level)
    local currentMaxLv = HeroUtils.GetHeroCurrentMaxLevel(heroId, 1, rankId)
    local index = rankId
    local max = rankId + 100
    while index < max do
        local maxLv = HeroUtils.GetHeroCurrentMaxLevel(heroId, 1, index)
        if maxLv > currentMaxLv and maxLv > level then
            return index
        end
        index = index + 1
    end
    return -1
end

local function GetNextMaxLevelByQuality(heroId, quality, level)
    local currentMaxLv = HeroUtils.GetMaxLevelByQuality(heroId, quality)
    local index = quality
    local max = quality + 12
    while index < max do
        local maxLv = HeroUtils.GetMaxLevelByQuality(heroId, index)
        if maxLv > currentMaxLv and maxLv > level then
            return index
        end
        index = index + 1
    end
    return -1
end

local function IsNewMaxLevel()
    return LuaEntry.DataConfig:CheckSwitch("hero_levelup_by_rank")
end

local function IsUseMainLvMaxLevel()
    return LuaEntry.DataConfig:CheckSwitch("hero_levelup_by_base")
end

local function GetHeroCurrentMaxLevel(heroId, quality, rankId)
    if HeroUtils.IsUseMainLvMaxLevel() then
        return DataCenter.HeroLevelUpTemplateManager:GetMaxLevelByMainLv()
    elseif HeroUtils.IsNewMaxLevel() then
        local rankLv = GetTableData(TableName.HeroMilitaryRank, rankId, "level")
        return HeroUtils.GetMaxLevelByRank(heroId, rankLv)
    end
    return HeroUtils.GetMaxLevelByQuality(heroId, quality)
end
--
local function GetMaxLevelByRank(heroId, rank)
    if rankToLevel == nil then
        rankToLevel = {}
    end
    if rankToLevel[rank] ~= nil then
        return rankToLevel[rank]
    end

    local flag = false
    LocalController:instance():visitTable(HeroUtils.GetHeroLevelUpXmlName(), function(id, lineData)
        if not flag then
            local lv = lineData:getValue("id")
            local break_requireStr = lineData:getValue("break_require_rank")
            if not string.IsNullOrEmpty(break_requireStr) then
                local break_require = toInt(break_requireStr)
                if break_require > rank  then
                    rankToLevel[rank] = lv
                    flag = true
                end
            end
            if not flag then
                rankToLevel[rank] = lv
            end
        end
    end)

    if rankToLevel[rank] ~= nil then
        return rankToLevel[rank]
    end
    return 100
end

local function GetMaxLevelByQuality(heroId, quality)
    if qualityToLevel == nil then
        qualityToLevel = {}
    end
    if qualityToLevel[quality] ~= nil then
        return qualityToLevel[quality]
    end
    
    local flag = false
    LocalController:instance():visitTable(HeroUtils.GetHeroLevelUpXmlName(), function(id,lineData)
        if not flag then
            local lv = lineData:getValue("id")
            local break_requireStr = lineData:getValue("break_require")
            if not string.IsNullOrEmpty(break_requireStr) then
                local break_require = toInt(break_requireStr)
                if break_require > quality  then
                    qualityToLevel[quality] = lv
                    flag = true
                end
            end
            if not flag then
                qualityToLevel[quality] = lv
            end
        end
    end)

    if qualityToLevel[quality] ~= nil then
        return qualityToLevel[quality]
    end
    return 100
end

local function GetHeroFinalLevel(heroId)
    return tonumber(GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'max_level'))
end

local function GetHeroNameByConfigId( heroConfigId)
    return Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), heroConfigId, "name"))
end

local function GetPointConfig(heroConfigId)
    local feature = GetTableData(HeroUtils.GetHeroXmlName(), heroConfigId, "feature")
    --走新配置格式
    if type(feature) == 'table' then
        local atkPoint  = feature[1] or 1
        local defPoint  = feature[2] or 1
        local armyPoint = feature[3] or 1

        return atkPoint, defPoint, armyPoint
    end

    --todo zlh:remove later
    local array = string.split(feature, ';')
    local atkPoint  = array[1] ~= "" and tonumber(array[1]) or 1 
    local defPoint  = array[2] ~= "" and tonumber(array[2]) or 1 
    local armyPoint = array[3] ~= "" and tonumber(array[3]) or 1 
    
    return atkPoint, defPoint, armyPoint
end

--带兵上限
local function GetArmyLimit(level, rankId, rarity, heroId,quality)
    local num = 0
    local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
    if template ~= nil then
        num = template:GetArmyNum(rarity)
    end

    local rankTroop = GetTableData(TableName.HeroMilitaryRank, rankId, 'troop')[rarity]
    rankTroop = tonumber(rankTroop)
    if rankTroop ~= nil then
        num = num + rankTroop
    end

    local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    local vec = string.split(config['hero_quality_attr_troops'], "|")
    local qualityAddTroop = tonumber(vec[math.min(#vec, quality)])
    if qualityAddTroop ~= nil then
        num = num + qualityAddTroop
    end

    return tonumber(num)
end

local function GetConfigQuality(heroConfigId, curQuality)
    local advanceType = GetTableData(HeroUtils.GetHeroXmlName(), heroConfigId, "advanc_type")
    return tonumber(advanceType) + curQuality
end

---图鉴显示的最大属性
local function GetMaxAttrForHeroMap(heroId)
    local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    local maxQuality = config[HeroUtils.GetHeroMaxQualityLevelName()]
    local maxLevel = HeroUtils.GetHeroFinalLevel(heroId)
    local beyondTimes = HeroUtils.GetBeyondTimesByLevel(maxLevel)
    local maxRankId = config['max_rank_level']

    return HeroUtils.GetHeroAttr(heroId, maxQuality, maxLevel, beyondTimes, maxRankId)
end

local function GetHeroSkillList(heroId, heroRankLv)
    local xmlName = HeroUtils.GetHeroXmlName()
    local skill_multiple = GetTableData(xmlName, heroId, "skill_multiple")
    local result = {}
    if string.IsNullOrEmpty(skill_multiple) then
        result = GetTableData(xmlName, heroId, 'skill')
    else
        local skillArray = nil
        local vec = string.split(skill_multiple, "|")
        for i = 1, #vec do
            local skillListVec = string.split(vec[i], ",")
            if #skillListVec == 2 then
                local lv = tonumber(skillListVec[1])
                if lv <= heroRankLv then
                    skillArray = string.split(skillListVec[2], ";")
                end
            end
        end
        for i, v in pairs(skillArray) do
            table.insert(result, tonumber(v))
        end
    end

    return result
end

---获取英雄技能数量
local function GetHeroSkillCount(heroId)
    local skillArray = GetHeroSkillList(heroId, 1)
    return #skillArray
end

local function GetSkillUpgradeItemAndNum(heroId, upIndex)
    local costItem = GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'skill_levelup_item_new')
    local costArray = GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'skill_levelup_num')

    if(type(costArray) ~= 'table') then
        costArray = string.split(costArray, '|')
    end
    
    local costNum = tonumber(costArray[math.min(upIndex, #costArray)])
    return costItem, costNum
end

local function GetHeroFirstSkillId(heroId, heroRankLv)
    local skillArray = HeroUtils.GetHeroSkillList(heroId, heroRankLv)
    if #skillArray > 0 then
        return skillArray[1]
    end
end
local function GetHeroSkillDamage(skillId,skillLv)
    local damage = 0
    if skillLv>0 then
        local str = GetTableData(TableName.SkillTab, skillId, "damage")
        if str~=nil then
            local arr = string.split(str,"|")
            if #arr>0 then
                local index = math.min(skillLv,#arr)
                local num = tonumber(arr[index])
                if num~=nil then
                    damage = (num/100)
                end
            end
        end
    end
    return damage
end
local function GetArkGradeIcon(arkGrade, big)
    if arkGrade < 1 then
        arkGrade = 1
    end
    
    local spritePath = big and LoadPath.HeroDetailPath or LoadPath.HeroListPath
    local fix = big and 'HeroDetail_ark_grade_' or 'ui_icon_skill_ark'
    return string.format(spritePath, fix .. arkGrade)
end

local function GetArkLines(heroId)
    local skillCount = GetHeroSkillCount(heroId)
    
    local lines = {}
    LocalController:instance():visitTable(TableName.HeroArkCore, function(id, lineData)
        local type = lineData:getValue('core_type')
        if skillCount == type then
            --table.insert(lines, lineData)
            table.insert(lines, id)
        end
    end)

    --table.sort(lines, function(a, b)
    --    local aCondition = a:getValue('condition')
    --    local bCondition = b:getValue('condition')
    --
    --    return aCondition < bCondition
    --end)
    
    return lines 
end

---获取方舟核心id
local function GetArkIdAndGrade(heroId, totalLevel)
    local lineDataList = HeroUtils.GetArkLines(heroId)

    local id, grade = 0, 0
    for k, v in ipairs(lineDataList) do
        local condition = GetTableData(TableName.HeroArkCore, v, 'condition')
        if totalLevel >= condition then
            id = v
            grade = k
        end
    end

    return id, grade
end

local function GetSkillIcon(skillId)
    local skillIcon = GetTableData(TableName.SkillTab, skillId, "icon")
    return LoadPath.SkillIconsPath .. skillIcon --string.format(LoadPath.HeroDetailPath, skillIcon)
end

local function GetSkillBigIcon(skillId)
    local skillIcon = GetTableData(TableName.SkillTab, skillId, "icon")
    return LoadPath.SkillIconsPath .. skillIcon --string.format(LoadPath.HeroDetailPath, skillIcon)
end

local function GetJigsawCost(itemId)
    local template = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
    if template.type == GOODS_TYPE.GOODS_TYPE_98 then
        return tonumber(template.para2)
    end
    
    return tonumber(template.para1)
end

local function GetSkillDescStr(skillId, skillLevel, highlightColor, showNext)
    local descKey = GetTableData(TableName.SkillTab, skillId, "des")
    local effect_des = GetTableData(TableName.SkillTab, skillId, "effect_des")
    local effect_num_des = GetTableData(TableName.SkillTab, skillId, "effect_num_des")

    local array1 = string.split(effect_des, '|')
    local effectNumList = {}
    for _, v in ipairs(array1) do
        local array2 = string.split(v, ';')
        table.insert(effectNumList, array2)
    end

    local curLvEffect = effectNumList[math.max(skillLevel, 1)]
    local nextLevelEffect = effectNumList[skillLevel + 1]
    local effectList = {}

    if nextLevelEffect == nil or not showNext then
        effectList = curLvEffect
    else
        for i, v in pairs(curLvEffect) do
            local curOrigin = v
            local nextOrigin = nextLevelEffect[i]
            local curStr = string.gsub(curOrigin, "%%", "")
            local nextStr = string.gsub(nextOrigin, "%%", "")
            local curValue = tonumber(curStr)
            local nextValue = tonumber(nextStr)
            local str = v
            if curValue ~= nextValue then
                str = string.format("%s<color=%s>[->%s]</color>", curOrigin, TextColorGreenLight, nextOrigin)
            end
            table.insert(effectList, str)
        end
    end

    local skillType = GetTableData(TableName.SkillTab, skillId, 'type')
    
    local finalSkillDesc
    local para1 = GetTableData(TableName.SkillTab, skillId, 'para1')
    if not string.IsNullOrEmpty(para1) then
        local originSkillName = Localization:GetString(para1)
        finalSkillDesc = Localization:GetString(descKey, originSkillName, SafeUnpack(effectList))
    else
        if skillType == 16 then
            local health_enable = GetTableData(TableName.SkillTab, skillId, 'health_enable')
            local healthVec1 = string.split(health_enable, "|")
            if healthVec1 ~= nil and table.count(healthVec1) >= skillLevel then
                if skillLevel == 0 then
                    skillLevel = 1
                end
                local healthVec2 = string.split(healthVec1[skillLevel], ";")
                if healthVec2 ~= nil and table.count(healthVec2) == 2 then
                    local small = toInt(healthVec2[1])
                    local big = toInt(healthVec2[2])
                    if big >= 100 then
                        finalSkillDesc = Localization:GetString(descKey, tostring(small).."%", SafeUnpack(effectList))
                    else
                        finalSkillDesc = Localization:GetString(descKey, tostring(big).."%", SafeUnpack(effectList))
                    end
                end
            end
        else
            finalSkillDesc = Localization:GetString(descKey, SafeUnpack(effectList))
        end
    end
    

    local finalEffectDesc = ''
    local array3 = string.split(effect_num_des, '|')
    for effectIndex, effectNum in ipairs(array3) do
        --添加属性名
        local effectNameKey = GetTableData(TableName.EffectNumDesc, effectNum, 'des')
        local effectNameStr = string.format('%s:  ', Localization:GetString(effectNameKey, ''))
        --添加属性值并突出当前属性
        local effectValueStr = ''
        for k, v in ipairs(effectNumList) do
            local colorStart = ""
            local colorEnd = ""
            if highlightColor then
                colorStart = k == skillLevel and '<color=' .. highlightColor .. '>' or ''
                colorEnd = k == skillLevel and '</color>' or ''
            end
            effectValueStr = effectValueStr .. string.format((k == 1 and '' or ' / ') .. '%s%s%s', colorStart, v[effectIndex], colorEnd)
        end
        effectValueStr = effectValueStr .. (effectIndex < #array3 and '\n' or '')

        finalEffectDesc = finalEffectDesc .. effectNameStr .. effectValueStr
    end


    return finalSkillDesc, finalEffectDesc
end

-- 获取技能升级需要的军阶
-- rarity 英雄稀有度
-- index 该技能是几技能
-- level 目标等级
local function GetSkillLevelNeedRankId(rarity, index, level)
    if HeroUtils.skillLevelNeedRankIdCache == nil then
        HeroUtils.skillLevelNeedRankIdCache = { { {}, {}, {}, {}, {} }, { {}, {}, {}, {}, {} }, { {}, {}, {}, {}, {} }, { {}, {}, {}, {}, {} } }
        local curLevelDict = { { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 } } -- 五个技能 等级缓存
        LocalController:instance():visitTable(TableName.HeroMilitaryRank, function(id, lineData)
            for r, v in ipairs(lineData.skill_unlock) do
                for i, unlockLevel in ipairs(v) do
                    local curLevel = curLevelDict[r][i]
                    if unlockLevel > curLevel then
                        for lv = curLevel + 1, unlockLevel do
                            HeroUtils.skillLevelNeedRankIdCache[r][i][lv] = id
                        end
                        curLevelDict[r][i] = unlockLevel
                    end
                end
            end
        end)
    end
    local dict1 = HeroUtils.skillLevelNeedRankIdCache[rarity]
    if dict1 then
        local dict2 = dict1[index]
        if dict2 then
            return dict2[level] or -1
        end
    end
    return -1
end

local function GetSkillUnlockLv(heroId, index)
    local lvList = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "skill_unlock")
    return lvList[index] or -1
end

local function GetSkillUnlockRank(rankLv, rarity, index)
    local rankList = GetTableData(TableName.HeroMilitaryRank, rankLv, "skill_unlock")
    return rankList[rarity][index] or -1
end

local function GetSkillUnlock(rankLv, rarity, index)
    local rankList = GetTableData(TableName.HeroMilitaryRank, rankLv, "skill_unlock")
    return rankList[rarity][index] > 0
end

local function GetSkillStar(heroId, skillId)
    local starEffectList = HeroUtils.GetSkillStarEffectList(heroId)
    local star = 0
    local count = 0
    for i, v in ipairs(starEffectList) do
        if v.desList[skillId] ~= nil then
            star = i
            count = count + 1
        end
    end
    
    return star, count
end

local function GetSkillStarEffectList(heroId)
    local result = {}

    local skillStarEffect = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "skill_multiple")
    if not string.IsNullOrEmpty(skillStarEffect) then
        local vec = string.split(skillStarEffect, "|")
        for i = 1, #vec do
            local starVec = string.split(vec[i], ",")
            if #starVec == 2 then
                local effectVec = string.split(starVec[2], ";")
                local param = {}
                param.lv = tonumber(starVec[1])
                local desList = {}
                for i, v in ipairs(effectVec) do
                    desList[tonumber(v)] = HeroUtils.GetSkillStarEffectDesList(v)
                end
                param['desList'] = desList
                table.insert(result, param)
            end
        end
    end
    table.sort(result,function(a,b)
        if a.lv < b.lv then
            return true
        end
        return false
    end)

    return result
end

local function GetSkillStarEffectDesList(skillId)
    local result = {}
    local starDes = GetTableData(TableName.SkillTab, skillId, "star_des")
    if not string.IsNullOrEmpty(starDes) then
        local vec = string.split(starDes, "|")
        for i, v in ipairs(vec) do
            local desVec = string.split(v, ";")
            if #desVec > 1 then
                local dialog = desVec[1]
                table.remove(desVec, 1)
                local des = Localization:GetString(dialog, SafeUnpack(desVec))
                table.insert(result, des)
            end
        end
    end
    return result
end

local function GetHeroDebrisBgByColor(color, isFg)
    local colorPath = 'green_'
    if color == ItemColor.GREEN then
        colorPath = 'green_'
    elseif color == ItemColor.BLUE then
        colorPath = 'blue_'
    elseif color == ItemColor.PURPLE then
        colorPath = 'purple_'
    elseif color == ItemColor.ORANGE then
        colorPath = 'orange_'
    end
    local ret = 'Assets/Main/Sprites/ItemIcons/img_hero_debris_' .. colorPath .. (isFg and 'fg' or 'bg')
    return ret
end

--获取当前等级已突破的次数
local function GetBeyondTimesByLevel(curMaxLevel)
    local cnt = 0
    for k = 1, curMaxLevel -1 do
        local spendGold = GetLevelUpSpeedGold(k)
        if spendGold > 0 then
            cnt = cnt + 1
        end
    end
    
    return cnt
end

local function GetQualityColorStr(quality)
    local colorStr = GetTableData(TableName.NewHeroesQuality, quality, "color")
    assert(colorStr ~= nil, "GetQualityColorStr colorStr is nil! quality:" .. quality)

    return colorStr
end

local function GetRarityColorStr(rarity, isWaken)
    if isWaken then
        return "#f9ebd2"
    end
    local colors = {
        "#fa8843",     
        "#a66cf0",    
        "#5fa3ed",     
        "#94e138",     
    }
    if rarity > table.count(colors) then
        return colors[1]
    end
    return colors[rarity]
end

local function GetMilitaryRankIcon(rankId)
    if rankId == 0 then
        rankId = 1
    end
    local rankIcon = GetTableData(TableName.HeroMilitaryRank, rankId, "icon")
    return string.format(LoadPath.HeroDetailPath, rankIcon)
end

local function GetMilitaryRankName(rankId)
    return GetTableData(TableName.HeroMilitaryRank, rankId, "name")
end

local function GetHeroAttr(heroId, quality, level, beyondTimes, rankId)
    local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    
    local qualityAddAttack =  config['hero_quality_attr_attack'][math.min(#config['hero_quality_attr_attack'], quality)]
    local qualityAddDefence = config['hero_quality_attr_defens'][math.min(#config['hero_quality_attr_defens'], quality)]

    local rarityAddAtt = 0
    local rarityAddDef = 0
    local rarity = tonumber(config['rarity'])
    local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
    if template ~= nil then
        rarityAddAtt = template:GetAtk(rarity)
        rarityAddDef = template:GetDef(rarity)
    end

    local attack =  config['base_attack'] + config['attr_attack'] * rarityAddAtt + qualityAddAttack  + config['special_attr_attack'] * beyondTimes
    local defence = config['base_defens'] + config['attr_defens'] * rarityAddDef + qualityAddDefence + config['special_attr_defens'] * beyondTimes

    local rankAtk   = GetTableData(TableName.HeroMilitaryRank, rankId, 'atk')[config['rarity']]
    local rankDef   = GetTableData(TableName.HeroMilitaryRank, rankId, 'def')[config['rarity']]
    rankAtk = tonumber(rankAtk)
    if rankAtk ~= nil then
        attack = attack + rankAtk
    end
    rankDef = tonumber(rankDef)
    if rankDef ~= nil then
        defence = defence + rankDef
    end

    return attack, defence
end

local function GetHeroStarDialog(star)
    local starDialog = 
    {
        "163161",     --0星
        "163171",     --半星
        "163162",     --1星
        "163163",     --1星半
        "163164",     --2星
        "163165",     --2星半
        "163166",     --3星
        "163167",     --3星半
        "163168",     --4星
        "163169",     --4星半
        "163170",     --5星
    }
    if star > #starDialog then
        return starDialog[1]
    end
    return starDialog[star]
end


local function GetHeroNameColorByRarity(rarity, isWaken)
    if isWaken then
        return Color.New(255/255, 188/255, 69/255, 1)
    end
    local colors = {
        Color.New(255/255, 188/255, 69/255, 1),     -- 'f9ebd2', --orange
        Color.New(207/255, 99/255, 255/255, 1),     --'efaaff', --purple
        Color.New(117/255, 220/255, 236/255, 1),     --'bceaf5', --blue
        Color.New(143/255, 227/255, 52/255, 1),     --'ddffd4', --green
    }
    if rarity > table.count(colors) then
        return colors[1]
    end
    return colors[rarity]
end


local function GetLvColor(rarity, isWaken)
    if isWaken then
        return Color.New(249/255, 235/255, 210/255, 1)
    end
    local colors = {
        Color.New(249/255, 235/255, 210/255, 1),     -- 'f9ebd2', --orange
        Color.New(239/255, 170/255, 255/255, 1),     --'efaaff', --purple
        Color.New(188/255, 234/255, 245/255, 1),     --'bceaf5', --blue
        Color.New(221/255, 255/255, 212/255, 1),     --'ddffd4', --green
        --Color.New(188/255, 234/255, 245/255, 1),     --'bceaf5', --blue
        --Color.New(239/255, 170/255, 255/255, 1),     --'efaaff', --purple
        --Color.New(249/255, 235/255, 210/255, 1),     -- 'f9ebd2', --orange
        --Color.New(255/255, 180/255, 189/255, 1),     -- 'ffb4bd', --red
        --Color.New(255/255, 180/255, 189/255, 1),     -- 'ffb4bd', --red
        --Color.New(255/255, 237/255, 83/255,  1),     -- 'f9ebd2', --gold
        --Color.New(255/255, 237/255, 83/255,  1),     -- 'f9ebd2', --gold
        --Color.New(249/255, 235/255, 210/255, 1),     --'f9ebd2', --cai   
        --Color.New(249/255, 235/255, 210/255, 1),     --'f9ebd2', --cai   
    }
    if rarity > table.count(colors) then
        return colors[1]
    end
    return colors[rarity]
end

local PageBgAlpha = 
{
    [0] = 255/255,
    [1] = 230/255,
    [2] = 255/255,
    [3] = 100/255
}

local function GetCampPageBgPath(camp)
    local bgPath = string.format(LoadPath.HeroDetailPath, "UIHeroInfo_bg_page" .. (camp == 3 and 2 or 1))
    local alpha = PageBgAlpha[camp]
    return bgPath, alpha
end

local function GetRankIdByLvAndStage(heroId, curLv, curStage)
    local maxRankId = GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'max_rank_level')
    
    for rankId = 1, maxRankId do
        local level = GetTableData(TableName.HeroMilitaryRank, rankId, 'level')
        local stage = GetTableData(TableName.HeroMilitaryRank, rankId, 'stage')
        curStage = curStage or 0
        if curLv == level and curStage == stage then
            return rankId
        end
    end
    
    return 0
end

local function GetIsWakeUp(rarity,skillDic,heroId,quality)
    if rarity == HeroUtils.RarityType.S then
        if skillDic~=nil then
            local  unlockNum = 0
            local totalLv = 0
            for k,v in pairs(skillDic) do
                if v.skillLv~=nil and v.skillLv>0 then
                    unlockNum = unlockNum+1
                    totalLv = totalLv+v.skillLv
                elseif v.level ~= nil and v.level > 0 then
                    unlockNum = unlockNum + 1
                    totalLv = totalLv + v.level
                end
            end
            if totalLv >= unlockNum * HeroUtils.SkillLevelLimit then
                if unlockNum == table.count(skillDic) then
                    --所有技能都已满级
                    return HeroUtils.GetIsMaxQuality(heroId,quality)
                end
            end
        end
    end
    return false
end

local function GetIsMaxQuality(heroId,quality)
    local maxQuality = GetTableData(HeroUtils.GetHeroXmlName(), heroId, HeroUtils.GetHeroMaxQualityLevelName())
    if maxQuality~=nil then
        local max = tonumber(maxQuality)
        if max~=nil then
            return quality >= max
        end
    end
    return false
    
end
--阵营克制关系
local function GetHeroRestraintType(camp)
    if camp == HeroCamp.MAFIA then
        return HeroCamp.ZELOT
    elseif camp == HeroCamp.ZELOT then
        return HeroCamp.UNION
    elseif camp ==HeroCamp.UNION then
        return HeroCamp.MAFIA
    end
    return -1
end
--阵营被克制关系
local function GetHeroBeRestraintType(camp)
    if camp == HeroCamp.MAFIA then
        return HeroCamp.UNION
    elseif camp == HeroCamp.ZELOT then
        return HeroCamp.MAFIA
    elseif camp ==HeroCamp.UNION then
        return HeroCamp.ZELOT
    end
    return -1
end

local function GetHeroRestraintEffectType(camp)
    if camp == HeroCamp.MAFIA then
        return EffectDefine.CAMP_RESTRAINT_ADD_35289
    elseif camp == HeroCamp.ZELOT then
        return EffectDefine.CAMP_RESTRAINT_ADD_35290
    elseif camp ==HeroCamp.UNION then
        return EffectDefine.CAMP_RESTRAINT_ADD_35288
    elseif camp == HeroCamp.NEW_HUMAN then
        return -1
    end
    return -1
end
local HeroAllCamps = {
    HeroCamp.NEW_HUMAN, HeroCamp.MAFIA, HeroCamp.UNION, HeroCamp.ZELOT,
}

local RarityType = {
    S = 1,
    A = 2,
    B = 3,
    C = 4,
    D = 5,
}

local AniConfig = {
    appearDuration = 0.15,      --卡牌缩放从0到1出现的时长
    firstFlipDelay = 0.5,       --第一张卡出现到翻转的时长
    flipInterval = 0.1          --每张卡flip之间的间隔时长
}

local function GetPosterRarityPath(rarity, isBg, isWaken)
    if isWaken then
        if isBg then
            return LoadPath.HeroIconsSmallPath.."ui_poster_cai_bg"
        end
        return LoadPath.HeroIconsSmallPath.."ui_poster_cai_fg"
    end
    local poster = {
        "ui_poster_orange",        --1.橙
        "ui_poster_purple",        --2.紫
        "ui_poster_blue",          --3.蓝
        "ui_poster_green",
        --"ui_poster_cai",           --12.彩
    }

    local iconName = poster[rarity] .. (isBg and '_bg' or '_fg')
    return LoadPath.HeroIconsSmallPath..iconName
end

local function GetPosterSelectRarityPath(rarity, isBg, isWaken)
    if isWaken then
        if isBg then
            return LoadPath.HeroIconsSmallPath.."ui_poster_cai_bg"
        end
        return LoadPath.HeroIconsSmallPath.."ui_poster_cai_fg"
    end
    local poster = {
        "UIheroupgrade_img_org",        --1.橙
        "UIheroupgrade_img_pur",        --2.紫
        "UIheroupgrade_img_blue",          --3.蓝
        "UIheroupgrade_img_green",
        --"ui_poster_cai",           --12.彩
    }

    local iconName = poster[rarity] .. (isBg and '02' or '01')
    return LoadPath.HeroIconsSmallPath..iconName
end

local function GetPosterAddRarityPath(rarity)
    local poster = {
        "UIheroupgrade_img_addorg",        --1.橙
        "UIheroupgrade_img_addpur",        --2.紫
        "UIheroupgrade_img_addblue",          --3.蓝
        "UIheroupgrade_img_addgreen",
        --"ui_poster_cai",           --12.彩
    }

    local iconName = poster[rarity]
    return LoadPath.HeroIconsSmallPath..iconName
end


local function GetExtraAtkByCamp(camp)
    local eff = nil
    if camp == HeroCamp.NEW_HUMAN then
        eff = EffectDefine.ADD_NEW_HUMAN_HERO_ATK
    elseif camp == HeroCamp.MAFIA then
        eff = EffectDefine.ADD_MAFIA_HERO_ATK
    elseif camp == HeroCamp.UNION then
        eff = EffectDefine.ADD_UNION_HERO_ATK
    elseif camp == HeroCamp.ZELOT then
        eff = EffectDefine.ADD_ZEALOT_HERO_ATK
    else
        return 0
    end
    return eff
end

local function GetTroopExtraAtkAddByCamp(camp)
    local eff = nil
    if camp == HeroCamp.MAFIA then
        eff = EffectDefine.APS_HERO_ADD_TROOP_ATK_35248
    elseif camp == HeroCamp.UNION then
        eff = EffectDefine.APS_HERO_ADD_TROOP_ATK_35250
    elseif camp == HeroCamp.ZELOT then
        eff = EffectDefine.APS_HERO_ADD_TROOP_ATK_35249
    else
        return 0
    end
    return eff
end

local function GetTroopExtraDefAddByCamp(camp)
    local eff = nil
    if camp == HeroCamp.MAFIA then
        eff = EffectDefine.APS_HERO_ADD_TROOP_DEF_35252
    elseif camp == HeroCamp.UNION then
        eff = EffectDefine.APS_HERO_ADD_TROOP_DEF_35254
    elseif camp == HeroCamp.ZELOT then
        eff = EffectDefine.APS_HERO_ADD_TROOP_DEF_35253
    else
        return 0
    end
    return eff
end

local function GetExtraDefByCamp(camp)
    local eff = nil
    if camp == HeroCamp.NEW_HUMAN then
        eff = EffectDefine.ADD_NEW_HUMAN_HERO_DEF
    elseif camp == HeroCamp.MAFIA then
        eff = EffectDefine.ADD_MAFIA_HERO_DEF
    elseif camp == HeroCamp.UNION then
        eff = EffectDefine.ADD_UNION_HERO_DEF
    elseif camp == HeroCamp.ZELOT then
        eff = EffectDefine.ADD_ZEALOT_HERO_DEF
    else
        return 0
    end
    return eff
end

local function GetExtraTroopByCamp(camp)
    local eff = nil
    if camp == HeroCamp.NEW_HUMAN then
        eff = EffectDefine.ADD_NEW_HUMAN_HERO_TRP
    elseif camp == HeroCamp.MAFIA then
        eff = EffectDefine.ADD_MAFIA_HERO_TRP
    elseif camp == HeroCamp.UNION then
        eff = EffectDefine.ADD_UNION_HERO_TRP
    elseif camp == HeroCamp.ZELOT then
        eff = EffectDefine.ADD_ZEALOT_HERO_TRP
    else
        return 0
    end
    return eff
end

local function GetExtraHealthByCamp(camp)
    local eff = nil
    if camp == HeroCamp.NEW_HUMAN then
        eff = EffectDefine.CAMP_BONUS_ADD_35243
    elseif camp == HeroCamp.MAFIA then
        eff = EffectDefine.CAMP_BONUS_ADD_35241
    elseif camp == HeroCamp.UNION then
        eff = EffectDefine.CAMP_BONUS_ADD_35242
    elseif camp == HeroCamp.ZELOT then
        eff = EffectDefine.CAMP_BONUS_ADD_35240
    else
        return 0
    end
    return eff
end

local function GetHeroXmlName(self)
    --ABtest_aps_new_heroes开了走b表，没开走原来的
    local configOpenState = LuaEntry.DataConfig:CheckSwitch("ABtest_aps_new_heroes")
    if configOpenState then
        return TableName.NewHeroesB
    end
    return TableName.NewHeroes
    --if CS.CommonUtils.IsDebug() then
    --    if LuaEntry.Player.serverId ~= 52 then
    --        return TableName.NewHeroesB
    --    else
    --        return TableName.NewHeroes
    --    end
    --
    --else
    --    if LuaEntry.Player.serverId >= 5 then
    --        return TableName.NewHeroesB
    --    else
    --        return TableName.NewHeroes
    --    end
    --end
    --return TableName.NewHeroes
end

local function GetHeroCampXmlName(self)
    local configOpenState = LuaEntry.DataConfig:CheckSwitch("camp_effect_use_b")
    if configOpenState then
        return TableName.CampEffect_B
    end
    return TableName.CampEffect
end

local function GetHeroLevelUpXmlName(self)
    local configOpenState = LuaEntry.DataConfig:CheckSwitch("ABtest_heroes_levelup")
    if configOpenState then
        return TableName.NewHeroesLevelUp_B
    end
    return TableName.NewHeroesLevelUp
end

local function GetHeroDebrisIds()
    if HeroUtils.heroDebrisIds == nil then
        HeroUtils.heroDebrisIds = {}
        local k4 = LuaEntry.DataConfig:TryGetStr("free_heroes", "k4")
        local vec = string.split(k4, ";")
        for _, v in ipairs(vec) do
            table.insert(HeroUtils.heroDebrisIds, toInt(v))
        end
    end
    return HeroUtils.heroDebrisIds
end

local function GetGoldHeroDebrisId()
    if HeroUtils.goldHeroDebrisId == nil then
        HeroUtils.goldHeroDebrisId = LuaEntry.DataConfig:TryGetNum("free_heroes", "k5")
    end
    return HeroUtils.goldHeroDebrisId
end

local function GetSkillMedalId()

    if HeroUtils.skillMedalId == nil then
        local allDatas = DataCenter.HeroDataManager:GetMasterHeroList()
        for _, heroData in pairs(allDatas) do
            local costMedalId, costItemNum = HeroUtils.GetSkillUpgradeItemAndNum(heroData.heroId, 1)
            HeroUtils.skillMedalId = costMedalId
            break
        end
    end
    return HeroUtils.skillMedalId
end

local function GetHeroBagLimit()
    if HeroUtils.heroBagLimit == nil then
        HeroUtils.heroBagLimit = LuaEntry.DataConfig:TryGetNum("hero_attribute", "k6")
    end
    return HeroUtils.heroBagLimit
end

local function InitAllCommonHeroDebris()
    if HeroUtils.heroCommonDebrisIds == nil then
        HeroUtils.heroCommonDebrisIds = {}
        local k4 = LuaEntry.DataConfig:TryGetStr("hero_attribute", "k7")
        local vec = string.split(k4, "|")
        for _, v in ipairs(vec) do
            HeroUtils.heroCommonDebrisIds[v] = 1
        end
    end
end

local function GetAllCommonHeroDebris()
    HeroUtils.InitAllCommonHeroDebris()
    return HeroUtils.heroCommonDebrisIds
end

local function IsCommonHeroDebris(itemId)
    HeroUtils.InitAllCommonHeroDebris()
    return HeroUtils.heroCommonDebrisIds[itemId] == 1
end

local function GetHeroStarAndProgress(quality)
    if HeroUtils.starConfig == nil then
        local str = LuaEntry.DataConfig:TryGetStr("hero_attribute", "k4")
        HeroUtils.starConfig = string.split(str, "|")
    end
    if HeroUtils.starConfig == nil or #HeroUtils.starConfig == 0 then
        return 0, 0
    end
    local preQuality = 1
    for k, v in ipairs(HeroUtils.starConfig) do
        local tmp = toInt(v)
        if tmp > quality then
            return k - 1, quality - preQuality
        end
        preQuality = tmp
    end
    
    return #HeroUtils.starConfig, 5
end

local function CreateHireHeroData(heroId, level, quality, skillStr)
    local heroData = HeroInfo.New()
    heroData.heroId = heroId
    heroData.level = level
    heroData.finalLevel = 100
    heroData.quality = quality
    heroData.skillLevels = {}
    local ss = string.split(skillStr, ";")
    for i, s in ipairs(ss) do
        heroData.skillLevels[i] = tonumber(s)
    end
    heroData.config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroData.heroId)
    heroData.meta = heroData.config
    heroData.modelId = heroData.config.appearance or 0
    heroData.appearanceMeta = DataCenter.AppearanceTemplateManager:GetTemplate(heroData.modelId)
    heroData.rank = 1
    heroData.beyondTimes = HeroUtils.GetBeyondTimesByLevel(heroData.level)
    heroData.rarity = tonumber(heroData.config:getValue("rarity"))
    heroData.atk, heroData.def = HeroUtils.GetHeroAttr(heroData.heroId, heroData.quality, heroData.level, heroData.beyondTimes, heroData.rank)
    heroData.army = HeroUtils.GetArmyLimit(heroData.level, heroData.rank, heroData.rarity, heroData.heroId, heroData.quality)
    heroData.name = heroData.config:getValue("name")
    heroData.camp = heroData.config:getValue("camp")
    heroData.state = ArmyFormationState.Free
    heroData.isMaster = true
    heroData.isHired = true
    heroData:UpdateInfo({}, true)
    heroData.uuid = HireHeroUuid
    HeroUtils.HireHeroData = heroData
    return heroData
end

local function ClearHireHeroData()
    HeroUtils.HireHeroData = nil
end

local function GetHireHeroData()
    return HeroUtils.HireHeroData
end

local function GetHeroStarCost(quality, heroId)
    local str = GetTableData(HeroUtils.GetHeroXmlName(), heroId,"hero_star_cost")
    if string.IsNullOrEmpty(str) then
        return nil
    end
    local vec = string.split(str, "|")
    if #vec < quality then
        return nil
    end
    
    return toInt(vec[quality])
end

local function GetHeroStarCostByHeroData(heroData)
    if heroData == nil or heroData.config == nil or heroData.config.hero_star_cost == nil then
        return nil
    end
    if heroData.config.heroStarCostArr == nil then
        heroData.config.heroStarCostArr = string.split(heroData.config.hero_star_cost, "|")
    end
    if #heroData.config.heroStarCostArr < heroData.quality then
        return nil
    end
    return toInt(heroData.config.heroStarCostArr[heroData.quality])
end

local function IsReachStarLimit(heroData)
    return heroData.quality >= toInt(heroData.config.max_star_level)
end

local function GetHeroDebrisIdByHeroId(heroId)
    if HeroUtils.heroDebrisIds == nil then
        HeroUtils.heroDebrisIds = {}
    end
    if HeroUtils.heroDebrisIds[heroId] == nil then
        local str = GetTableData(HeroUtils.GetHeroXmlName(), heroId,"hero_pieces")
        local vec = string.split(str, "|")
        if #vec == 2 then
            HeroUtils.heroDebrisIds[heroId] = toInt(vec[1])
        else
            Logger.LogError('hero config hero_pieces wrong:'..heroId)
        end
        --local type99Items = DataCenter.ItemTemplateManager:GetTypeListByType(GOODS_TYPE.GOODS_TYPE_99)
        --for _, v in ipairs(type99Items) do
        --    if toInt(v.para2) == heroId then
        --        HeroUtils.heroDebrisIds[heroId] = v.id
        --        break
        --    end
        --end
    end
    
    return HeroUtils.heroDebrisIds[heroId]
end

local function GetCommonExchangeItemId(heroId)
    if HeroUtils.commonExchangeItemId == nil then
        HeroUtils.commonExchangeItemId = {}
    end
    if HeroUtils.commonExchangeItemId[heroId] == nil then
        local type99Items = DataCenter.ItemTemplateManager:GetTypeListByType(GOODS_TYPE.GOODS_TYPE_99)
        for _, v in ipairs(type99Items) do
            if toInt(v.para2) == heroId then
                HeroUtils.commonExchangeItemId[heroId] = toInt(v.para4)
                break
            end
        end
    end
    return HeroUtils.commonExchangeItemId[heroId]
end

local function GetHeroSkillAndUpgradeRedPointLevelCondition()
    if HeroUtils.skillLvRedPointCondition == nil then
        local k7 = LuaEntry.DataConfig:TryGetStr("free_heroes", "k7")
        local vec = string.split(k7, "|")
        if table.count(vec) == 2 then
            HeroUtils.upgradeRedPointCondition = toInt(vec[1])
            HeroUtils.skillLvRedPointCondition = toInt(vec[2])
        else
            HeroUtils.skillLvRedPointCondition = 0
            HeroUtils.upgradeRedPointCondition = 0
        end
    end
    return HeroUtils.skillLvRedPointCondition, HeroUtils.upgradeRedPointCondition
end

local function HeroIsCanDebrisExchange(heroId)
    if HeroUtils.CanNotDebrisExchange == nil then
        HeroUtils.CanNotDebrisExchange = {}
        local k8 = LuaEntry.DataConfig:TryGetStr("free_heroes", "k8")
        HeroUtils.CanNotDebrisExchange[toInt(k8)] = 1
    end
    return HeroUtils.CanNotDebrisExchange[toInt(heroId)] == nil
end

local function SortHeroUuidsByRarityLevelPower(heroUuids)
    local list = DeepCopy(heroUuids)
    table.sort(list, function(heroUuidA, heroUuidB)
        local heroDataA = DataCenter.HeroDataManager:GetHeroByUuid(heroUuidA)
        local heroDataB = DataCenter.HeroDataManager:GetHeroByUuid(heroUuidB)
        if heroDataA == nil then
            return false
        elseif heroDataB == nil then
            return true
        elseif heroDataA.rarity ~= heroDataB.rarity then
            return heroDataA.rarity < heroDataB.rarity
        elseif heroDataA.level ~= heroDataB.level then
            return heroDataA.level > heroDataB.level
        elseif heroDataA.power ~= heroDataB.power then
            return heroDataA.power > heroDataB.power
        else
            return heroDataA.heroId < heroDataB.heroId
        end
    end)
    return list
end

local function GetHeroBgByColor(color)
    if color == HeroColor.GREEN then
        return "Assets/Main/Sprites/ItemIcons/Common_img_quality_green"
    elseif color == HeroColor.BLUE then
        return "Assets/Main/Sprites/ItemIcons/Common_img_quality_blue"
    elseif color == HeroColor.PURPLE then
        return "Assets/Main/Sprites/ItemIcons/Common_img_quality_purple"
    elseif color == HeroColor.ORANGE then
        return "Assets/Main/Sprites/ItemIcons/Common_img_quality_orange"
    end
    return "Assets/Main/Sprites/ItemIcons/Common_img_quality_green"
end

local function GetHeroMaxQualityLevelName(self)
    if LuaEntry.DataConfig:CheckSwitch("ls_hero_switch") then
        return "max_quality_level_new"
    end
    return "max_quality_level"
end

local function GetHeroPower(heroData)
    if heroData == nil then
        return 0
    end
    local skillPower = heroData:GetSkillPower()
    local curAttack, curDefence = heroData:GetAttrByQuality(heroData.quality)
    local k1 = LuaEntry.DataConfig:TryGetNum("power_setting", "k1")
    local k5 = LuaEntry.DataConfig:TryGetNum("power_setting", "k5")
    if k5 <=0 then
        k5 = 1
    end
    return Mathf.Round(Mathf.Pow((curAttack + curDefence),k5) * k1) + skillPower
end

local function GetPveHeroDataListByUuids(heroUuids)
    local result = {}
    for _, heroUuid in pairs(heroUuids) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if heroData then
            table.insert(result, heroData)
        end
    end
    return result
end


local function GetPosterCount(heroId)
    local posters = DataCenter.HeroDataManager:GetHeroPostersById(heroId)
    return #posters
end

local function GetMedalItemId(heroId)
    return GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'skill_levelup_item')
end

local function GetMedalCount(heroId)
    return DataCenter.ItemData:GetItemCount(HeroUtils.GetMedalItemId(heroId))
end

-- 英雄是否在防守大本
local function IsInCityDefence(heroUuid)
    local formationDict = DataCenter.ArmyFormationDataManager:GetDefenceArmyFormationData()
    for _, formation in pairs(formationDict) do
        if formation:HasHero(heroUuid) then
            return true
        end
    end
    return false
end

-- 英雄是否在防守跨服虫洞
local function IsInCrossWormDefence(heroUuid)
    local formationDict = DataCenter.ArmyFormationDataManager:GetCrossDefenceArmyFormationData()
    for _, formation in pairs(formationDict) do
        if formation:HasHero(heroUuid) then
            return true
        end
    end
    return false
end

local function GetHeroFullIcon(heroId)
    local iconName = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "hero_wholebody")
    return string.format(LoadPath.UIHeroEvolveEx, iconName)
end

--获取特殊概率提升的英雄名字
local function GetDropSpecialHeroesNameList(id)
    local result = ""
    local dropSpecial = GetTableData(TableName.HeroRecruit, id, "dropspecial")
    if not string.IsNullOrEmpty(dropSpecial) then
        local spl = string.split_ss_array(dropSpecial, "|")
        if spl[2] ~= nil then
            local dropSpecialHeroes = string.split_ii_array(spl[2], ";")
            for k,v in ipairs(dropSpecialHeroes) do
                local nameStr = Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), v, "name"))
                if result == "" then
                    result = nameStr
                else
                    result = result .. "," .. nameStr
                end
            end
        end
    end
    
    return result
end

--获取英雄转换后的阵营
local function GetCamp(heroData)
    if heroData ~= nil then
        local camp = GetTableData(HeroUtils.GetHeroXmlName(), heroData.heroId, "camp")
        if camp == HeroCamp.NEW_HUMAN then
            if heroData.chooseCamp ~= nil then
                return heroData.chooseCamp
            elseif heroData.camp ~= nil then
                return heroData.camp
            end
        end
        return camp
    end
end

--获取侦查邮件中英雄转换后的阵营
local function GetCampByScoutMail(heroData)
    if heroData ~= nil then
        local heroId = heroData.heroId.value
        local camp = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "camp")
        if camp == HeroCamp.NEW_HUMAN and heroData.camp ~= nil and heroData.camp.value ~= nil then
            return heroData.camp.value
        end
        return camp
    end
end

-- 获取 spine 路径
local function GetSpinePath(heroId)
    local name = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "spine")
    if not string.IsNullOrEmpty(name) then
        return string.format(LoadPath.HeroSpine, name, name)
    else
        return nil
    end
end

-- 获取 hero_big 路径
local function GetHeroBigPic(heroId)
    local name = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "hero_big")
    if not string.IsNullOrEmpty(name) then
        return string.format(LoadPath.UINewHero, name)
    else
        return nil
    end
end

local function GetCampEffectType(curHeroes)
    local campDic = {}
    for i, heroUuid in pairs(curHeroes) do --当前英雄同阵营分类计算数量
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if campDic[heroData.heroType] then
            campDic[heroData.heroType] = campDic[heroData.heroType] + 1
        else
            campDic[heroData.heroType] = 1
        end
    end
    local max = 0
    local too = 0
    for i, count in pairs(campDic) do --取得最高数量
        if count > max then
            max = count
        end
    end
    if max == 3 then --取第二数量
        for i, count in pairs(campDic) do
            if count > too and count < max then
                too = count
            end
        end
    end
    local type = 0
    if max >= 3 then --同阵营英雄数量大于3个才有加成
        if max >=  5 then --5同阵营
            type =  4
        elseif max >= 4 then --4同阵营
            type = 3
        elseif max >= 3 and too >= 2 then --3同阵营+2同阵营
            type = 2
        else --3同阵营
            type = 1
        end
    end
    return type
end

local function GetCampEffectTypeByHeroInfos(curHeroInfos)
    local campDic = {}
    for i, heroData in pairs(curHeroInfos) do --当前英雄同阵营分类计算数量
        if campDic[heroData.heroType] then
            campDic[heroData.heroType] = campDic[heroData.heroType] + 1
        else
            campDic[heroData.heroType] = 1
        end
    end
    local max = 0
    local too = 0
    for i, count in pairs(campDic) do --取得最高数量
        if count > max then
            max = count
        end
    end
    if max == 3 then --取第二数量
        for i, count in pairs(campDic) do
            if count > too and count < max then
                too = count
            end
        end
    end
    local type = 0
    if max >= 3 then --同阵营英雄数量大于3个才有加成
        if max >=  5 then --5同阵营
            type =  4
        elseif max >= 4 then --4同阵营
            type = 3
        elseif max >= 3 and too >= 2 then --3同阵营+2同阵营
            type = 2
        else --3同阵营
            type = 1
        end
    end
    return type
end

local function GetCampEffectConfig(curHeroes)
    local type = GetCampEffectType(curHeroes)
    return DataCenter.CampEffectManager:GetTemplate(type)
end

-- 英雄合成所需道具
local function GetHeroMergeItem(heroId)
    local str = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "hero_merge")
    local spls = string.split(str, "|")
    if #spls == 2 then
        local itemId = tonumber(spls[1])
        local count = tonumber(spls[2])
        return itemId, count
    end
    return nil, 0
end

local function IsHeroMergeItemEnough(heroId)
    local itemId, count = HeroUtils.GetHeroMergeItem(heroId)
    if itemId then
        local have = DataCenter.ItemData:GetItemCount(itemId)
        return have >= count
    end
    return false
end

-- 英雄升星所需道具, curRankId 为 nil 时数量返回 0
local function GetHeroEtoileUpItem(heroId, curRankId)
    local itemId = tonumber(GetTableData(HeroUtils.GetHeroXmlName(), heroId, "skill_levelup_item"))
    if itemId then
        local rarity = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "rarity")
        local count = tonumber(GetTableData(TableName.HeroMilitaryRank, curRankId, "cost_medal")[rarity]) or 0
        return itemId, count
    end
    return nil, 0
end

local function IsHeroEtoileUpItemEnough(heroUuid)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    if heroData == nil then
        return false
    end
    local itemId, count = HeroUtils.GetHeroEtoileUpItem(heroData.heroId, heroData:GetCurMilitaryRankId())
    if itemId then
        local have = DataCenter.ItemData:GetItemCount(itemId)
        return have >= count
    end
    return false
end

local function GetEtoileName(rankId)
    local level = tonumber(GetTableData(TableName.HeroMilitaryRank, rankId, "level"))
    local stage = tonumber(GetTableData(TableName.HeroMilitaryRank, rankId, "stage"))
    if stage == 0 then
        return Localization:GetString("129269", level - 1)
    else
        return Localization:GetString("129270", level - 1, stage)
    end
end

HeroUtils.GetHeroFullIcon = GetHeroFullIcon
HeroUtils.GetHeroPower = GetHeroPower
HeroUtils.CanNotDebrisExchange = nil
HeroUtils.HeroIsCanDebrisExchange = HeroIsCanDebrisExchange
HeroUtils.upgradeRedPointCondition = nil
HeroUtils.skillLvRedPointCondition = nil
HeroUtils.GetHeroSkillAndUpgradeRedPointLevelCondition = GetHeroSkillAndUpgradeRedPointLevelCondition
HeroUtils.GetCommonExchangeItemId = GetCommonExchangeItemId
HeroUtils.GetHeroDebrisIdByHeroId = GetHeroDebrisIdByHeroId
HeroUtils.GetHeroStarCostByHeroData = GetHeroStarCostByHeroData
HeroUtils.GetHeroStarCost = GetHeroStarCost
HeroUtils.heroDebrisIds = nil
HeroUtils.commonExchangeItemId = nil
HeroUtils.starConfig = nil
HeroUtils.skillMedalId = nil
HeroUtils.heroBagLimit = nil
HeroUtils.heroDebrisIds = nil
HeroUtils.goldHeroDebrisId = nil
HeroUtils.GetHeroStarAndProgress = GetHeroStarAndProgress
HeroUtils.GetSkillMedalId = GetSkillMedalId
HeroUtils.GetHeroBagLimit = GetHeroBagLimit
HeroUtils.GetHeroXmlName = GetHeroXmlName
HeroUtils.AniConfig = AniConfig
HeroUtils.RarityType = RarityType
HeroUtils.GetHeroDebrisIds = GetHeroDebrisIds
HeroUtils.GetGoldHeroDebrisId = GetGoldHeroDebrisId
HeroUtils.HeroColorCount = 7
HeroUtils.HeroStarMax = 3
HeroUtils.ConsumeSlotMax = 3
HeroUtils.CampCount = 4
HeroUtils.SkillLevelLimit = 10
HeroUtils.SKILL_CNT_MAX = 5
HeroUtils.QualityMax = 10
--HeroUtils.LevelLimit = 100
HeroUtils.heroCommonDebrisIds = heroCommonDebrisIds
HeroUtils.IsInTheLottery = false

HeroUtils.PreviewScenePath = "Assets/Main/Prefabs/UI/UIHero/New/HeroPreview/Camp_%s.prefab"

HeroUtils.RecruitScenePath = 'Assets/Main/Prefabs/UI/UIHero/New/HeroPreview/RecruitScene.prefab'
HeroUtils.RecruitSceneGaojiPath = 'Assets/Main/Prefabs/UI/UIHero/New/HeroPreview/RecruitScene_gaoji.prefab'
HeroUtils.RecruitSceneOrangePath = 'Assets/Main/Prefabs/UI/UIHero/New/HeroPreview/RecruitScene_chengse.prefab'

HeroUtils.RecruitTimeOpenPath = 'Assets/_Art/UIScene/UI_yxzm/animator/zhaomu_Timeline_open.playable'
HeroUtils.RecruitTimeClosePath = 'Assets/_Art/UIScene/UI_yxzm/animator/zhaomu_Timeline_close.playable'

HeroUtils.GetSkillIcon = GetSkillIcon
HeroUtils.EatForbidReason = EatForbidReason
HeroUtils.GetQualityIconPath = GetQualityIconPath
HeroUtils.GetQualityBgPath = GetQualityBgPath
HeroUtils.GetRarityIconName = GetRarityIconName
HeroUtils.GetHeroIconPath = GetHeroIconPath
HeroUtils.GetCampIconPath = GetCampIconPath
HeroUtils.GetCampNameAndDesc = GetCampNameAndDesc
HeroUtils.GetLevelUpNeedExp = GetLevelUpNeedExp
HeroUtils.GetLevelUpSpeedGold = GetLevelUpSpeedGold
HeroUtils.GetTotalCostGold = GetTotalCostGold
HeroUtils.GetTagsByHeroId = GetTagsByHeroId
HeroUtils.GetCampByHeroId = GetCampByHeroId
HeroUtils.GetTagIconAndName = GetTagIconAndName

HeroUtils.GetQualityName = GetQualityName
HeroUtils.GetRarityName = GetRarityName
HeroUtils.GetMaxLevelByQuality = GetMaxLevelByQuality
HeroUtils.GetMaxLevelByRank = GetMaxLevelByRank
HeroUtils.GetHeroCurrentMaxLevel = GetHeroCurrentMaxLevel

HeroUtils.GetHeroFinalLevel = GetHeroFinalLevel

HeroUtils.GetHeroNameByConfigId = GetHeroNameByConfigId
HeroUtils.GetHeroBodyByHeroId = GetHeroBodyByHeroId
HeroUtils.GetPointConfig = GetPointConfig
HeroUtils.GetArmyLimit = GetArmyLimit
HeroUtils.GetConfigQuality = GetConfigQuality
HeroUtils.GetMaxAttrForHeroMap = GetMaxAttrForHeroMap
HeroUtils.GetHeroSkillCount = GetHeroSkillCount
HeroUtils.GetHeroSkillList = GetHeroSkillList
HeroUtils.GetSkillUpgradeItemAndNum = GetSkillUpgradeItemAndNum
HeroUtils.GetArkIdAndGrade = GetArkIdAndGrade
HeroUtils.GetArkLines = GetArkLines
HeroUtils.GetArkGradeIcon = GetArkGradeIcon
HeroUtils.GetQualityBgInTroopsByPath = GetQualityBgInTroopsByPath
HeroUtils.GetJigsawCost = GetJigsawCost
HeroUtils.GetSkillDescStr = GetSkillDescStr
HeroUtils.GetHeroDebrisBgByColor = GetHeroDebrisBgByColor
HeroUtils.GetBeyondTimesByLevel = GetBeyondTimesByLevel
HeroUtils.GetHeroIconRoundPath =GetHeroIconRoundPath

HeroUtils.GetStarNumByQuality =GetStarNumByQuality
HeroUtils.GetQualityColorStr =GetQualityColorStr
HeroUtils.GetCircleQualityIconPath = GetCircleQualityIconPath

HeroUtils.GetMilitaryRankIcon =GetMilitaryRankIcon
HeroUtils.GetMilitaryRankName =GetMilitaryRankName
HeroUtils.GetHeroAttr =GetHeroAttr
HeroUtils.GetLvColor =GetLvColor
HeroUtils.GetCampPageBgPath =GetCampPageBgPath

HeroUtils.GetRankIdByLvAndStage = GetRankIdByLvAndStage
HeroUtils.GetHeroBubbleBGPath = GetHeroBubbleBGPath
HeroUtils.GetHeroRestraintType  = GetHeroRestraintType
HeroUtils.GetRarityIconPath = GetRarityIconPath
HeroUtils.GetRarityFgIconPath = GetRarityFgIconPath
HeroUtils.GetMaxStarByRarity = GetMaxStarByRarity
HeroUtils.GetMaxStarLevel = GetMaxStarLevel

HeroUtils.GetRarityMaskPath = GetRarityMaskPath
HeroUtils.GetIsWakeUp = GetIsWakeUp
HeroUtils.GetHeroStarDialog = GetHeroStarDialog
HeroUtils.GetHeroNameColorByRarity = GetHeroNameColorByRarity
HeroUtils.GetPosterRarityPath = GetPosterRarityPath
HeroUtils.GetPosterSelectRarityPath = GetPosterSelectRarityPath
HeroUtils.GetPosterAddRarityPath = GetPosterAddRarityPath
HeroUtils.GetRarityColorStr = GetRarityColorStr
HeroUtils.GetSkillBigIcon = GetSkillBigIcon
HeroUtils.GetNextMaxLevelByQuality = GetNextMaxLevelByQuality
HeroUtils.GetNextMaxLevelByRankId = GetNextMaxLevelByRankId

HeroUtils.GetExtraAtkByCamp = GetExtraAtkByCamp
HeroUtils.GetExtraDefByCamp = GetExtraDefByCamp
HeroUtils.GetTroopExtraDefAddByCamp = GetTroopExtraDefAddByCamp
HeroUtils.GetTroopExtraAtkAddByCamp = GetTroopExtraAtkAddByCamp
HeroUtils.GetExtraTroopByCamp = GetExtraTroopByCamp
HeroUtils.GetExtraHealthByCamp = GetExtraHealthByCamp
HeroUtils.HeroStateType = HeroStateType
HeroUtils.HeroAllCamps = HeroAllCamps
HeroUtils.GetHeroRestraintEffectType = GetHeroRestraintEffectType
HeroUtils.GetCampCircleImgPath = GetCampCircleImgPath
HeroUtils.GetHeroBeRestraintType = GetHeroBeRestraintType
HeroUtils.CreateHireHeroData = CreateHireHeroData
HeroUtils.ClearHireHeroData = ClearHireHeroData
HeroUtils.GetHireHeroData = GetHireHeroData
HeroUtils.IsReachStarLimit = IsReachStarLimit
HeroUtils.heroStarLevel = nil
HeroUtils.GetMaxStarLevel = GetMaxStarLevel
HeroUtils.IsCommonHeroDebris = IsCommonHeroDebris
HeroUtils.GetAllCommonHeroDebris = GetAllCommonHeroDebris
HeroUtils.InitAllCommonHeroDebris = InitAllCommonHeroDebris
HeroUtils.GetHeroSkillDamage =GetHeroSkillDamage
HeroUtils.GetHeroFirstSkillId =GetHeroFirstSkillId
HeroUtils.SortHeroUuidsByRarityLevelPower =SortHeroUuidsByRarityLevelPower
HeroUtils.GetHeroBgByColor = GetHeroBgByColor
HeroUtils.GetIsMaxQuality =GetIsMaxQuality
HeroUtils.GetHeroMaxQualityLevelName = GetHeroMaxQualityLevelName
HeroUtils.GetHeroLevelUpXmlName = GetHeroLevelUpXmlName
HeroUtils.HeroIds = HeroIds
HeroUtils.GetPosterCount = GetPosterCount
HeroUtils.GetMedalItemId = GetMedalItemId
HeroUtils.GetMedalCount = GetMedalCount

HeroUtils.IsInCityDefence = IsInCityDefence
HeroUtils.IsInCrossWormDefence = IsInCrossWormDefence
HeroUtils.GetHeroCampXmlName = GetHeroCampXmlName
HeroUtils.IsNewMaxLevel = IsNewMaxLevel
HeroUtils.GetDropSpecialHeroesNameList = GetDropSpecialHeroesNameList
HeroUtils.IsUseMainLvMaxLevel = IsUseMainLvMaxLevel
HeroUtils.GetCamp = GetCamp
HeroUtils.GetPveHeroDataListByUuids = GetPveHeroDataListByUuids
HeroUtils.GetCampByScoutMail = GetCampByScoutMail
HeroUtils.GetSpinePath = GetSpinePath
HeroUtils.GetHeroBigPic = GetHeroBigPic

HeroUtils.GetCampEffectTypeByHeroInfos = GetCampEffectTypeByHeroInfos
HeroUtils.GetCampEffectConfig = GetCampEffectConfig

HeroUtils.GetHeroMergeItem = GetHeroMergeItem
HeroUtils.IsHeroMergeItemEnough = IsHeroMergeItemEnough
HeroUtils.GetHeroEtoileUpItem = GetHeroEtoileUpItem
HeroUtils.IsHeroEtoileUpItemEnough = IsHeroEtoileUpItemEnough
HeroUtils.GetEtoileName = GetEtoileName
HeroUtils.GetSkillUnlockLv = GetSkillUnlockLv
HeroUtils.GetSkillUnlock = GetSkillUnlock
HeroUtils.GetSkillUnlockRank = GetSkillUnlockRank
HeroUtils.GetSkillStar = GetSkillStar
HeroUtils.GetSkillStarEffectList = GetSkillStarEffectList
HeroUtils.GetSkillStarEffectDesList = GetSkillStarEffectDesList
HeroUtils.GetSkillLevelNeedRankId = GetSkillLevelNeedRankId
return ConstClass("HeroUtils", HeroUtils)

