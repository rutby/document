---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 2022/1/14 16:32
---


local UINewHeroDetail = BaseClass("UINewHeroDetail", UIBaseContainer)
local base = UIBaseContainer
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local UIGray = CS.UIGray
local Localization = CS.GameEntry.Localization
local UIHeroMilitaryRankIcon = require "UI.UIHero2.UIHeroInfo.Component.UIHeroMilitaryRankIcon"


local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.textTitleLevel     = self:AddComponent(UITextMeshProUGUIEx, "TopNode/TextTitleLevel")
    self.textCurLevel       = self:AddComponent(UITextMeshProUGUIEx, "TopNode/TextTitleLevel/TextCurLevel")
    self.textLimitLevel     = self:AddComponent(UITextMeshProUGUIEx, "TopNode/TextTitleLevel/TextCurLevel/TextLimitLevel")
    self.textExp            = self:AddComponent(UITextMeshProUGUIEx, "TopNode/SliderExp/TextValueExp")
    self.sliderExp          = self:AddComponent(UISlider, "TopNode/SliderExp")
    self.btnUpgrade         = self:AddComponent(UIButton, "TopNode/BtnUpgrade")
    --self.btnBeyond          = self:AddComponent(UIButton, "TopNode/TextTitleLevel/TextCurLevel/TextLimitLevel/BtnBeyond")

    self.textValueAttack  = self:AddComponent(UITextMeshProUGUIEx, "TopNode/NodeAttrAttack/TextValueAttack")
    self.textValueDefence = self:AddComponent(UITextMeshProUGUIEx, "TopNode/NodeAttrDefence/TextValueDefence")
    self.textValueArmy    = self:AddComponent(UITextMeshProUGUIEx, "TopNode/NodeAttrArmy/TextValueArmy")

    self.btnAtk = self:AddComponent(UIButton, "TopNode/NodeAttrAttack")
    self.btnDef = self:AddComponent(UIButton, "TopNode/NodeAttrDefence")
    self.btnArmy = self:AddComponent(UIButton,"TopNode/NodeAttrArmy")

    self.btnAtk:SetOnClick(BindCallback(self, self.OnBtnAtkClick))
    self.btnDef:SetOnClick(BindCallback(self, self.OnBtnDefClick))
    self.btnArmy:SetOnClick(BindCallback(self, self.OnBtnArmyClick))

    self.textTitleSkill = self:AddComponent(UITextMeshProUGUIEx, "TextTitleSkill")
    self.btnSkills = {}
    for k = 1, HeroUtils.SKILL_CNT_MAX do
        local nodeBtn = self:AddComponent(UIButton, "SkillContent/Skill" .. k)
        nodeBtn:SetOnClick(function()
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
            self:OnBtnSkillClick(k)
        end)

        local imgIcon = self:AddComponent(UIImage, "SkillContent/Skill" .. k .. "/ImgIcon" .. k)
        local textLevel = self:AddComponent(UITextMeshProUGUIEx, "SkillContent/Skill" .. k .. "/TextLv" .. k)
        local imgLvBg = self:AddComponent(UITextMeshProUGUIEx, "SkillContent/Skill" .. k .. "/ImgLvBg" .. k)
        local imgLock = self:AddComponent(UITextMeshProUGUIEx, "SkillContent/Skill" .. k .. "/ImgLock" .. k)
        local nodeEffect = self:AddComponent(UIBaseContainer, "SkillContent/Skill" .. k .. "/NodeEffect" .. k)
        table.insert(self.btnSkills, {btn = nodeBtn, icon = imgIcon, lvBg = imgLvBg, lock = imgLock, textLv = textLevel, nodeFx = nodeEffect})
    end

    self.textTitleLevel:SetLocalText(100082)
    self.textTitleSkill:SetLocalText(150106)

    --military rank
    self.textTitleMilitary      = self:AddComponent(UITextMeshProUGUIEx, 'NodeMilitary/TextTitleMilitaryRank')

    self.nodeMilitaryRank1      = self:AddComponent(UIHeroMilitaryRankIcon, 'NodeMilitary/Align/HeroMilitaryIcon1')
    self.nodeMilitaryRank2      = self:AddComponent(UIHeroMilitaryRankIcon, 'NodeMilitary/Align/HeroMilitaryIcon2')
    self.btnMilitaryRankUpgrade = self:AddComponent(UIButton, 'NodeMilitary/BtnMilitaryUp')
    self.nodeMilitaryRankArrow  = self:AddComponent(UIBaseContainer, 'NodeMilitary/Align/BgArrow')

    self.militaryRankNew = self:AddComponent(UIBaseContainer, "NodeMilitary/MilitaryRankNew")
    self.militaryRankName = self:AddComponent(UITextMeshProUGUIEx, "NodeMilitary/MilitaryRankNew/MilitaryRankName")
    self.militaryRankNewIcon = self:AddComponent(UIImage, "NodeMilitary/MilitaryRankNew/MilitaryRankNewIcon")
    self.militaryRankNewProgress = {}
    for i = 1, 5 do
        local progress = self:AddComponent(UIImage, "NodeMilitary/MilitaryRankNew/MilitaryRankNewProgress"..i)
        table.insert(self.militaryRankNewProgress, progress)
    end
    self.militaryRankNewBtn = self:AddComponent(UIButton, "NodeMilitary/MilitaryRankNew/MilitaryRankNewBtn")
    self.militaryRankNewBtn:SetActive(false)

    self.textTitleMilitary:SetLocalText(129117)
end

local function ComponentDestroy(self)
end

local function InitData(self, heroUuid)
    self.heroUuid = heroUuid
    self:RefreshView()
end

local function RefreshView(self)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    self.heroData = heroData
    local level = heroData.level
    local maxLevel = heroData:GetCurMaxLevel()
    
    local totalExp = HeroUtils.GetLevelUpNeedExp(level)
    local curExp = heroData.exp

    local atk = heroData.atk
    local def = heroData.def

    self.textCurLevel:SetText(level)
    self.textLimitLevel:SetText("/" .. maxLevel)
    local percent = curExp / totalExp
    if percent>1 then
        percent =1
    end
    self.textExp:SetText(string.format("%s/%s", curExp, totalExp))
    self.sliderExp:SetValue(percent)

    self.textValueAttack:SetText(atk)
    self.textValueDefence:SetText(def)
    self.textValueArmy:SetText(HeroUtils.GetArmyLimit(level, heroData:GetCurMilitaryRankId(), heroData.rarity, heroData.heroId,heroData.quality))

    self:UpdateSkills()
    self:UpdateMilitaryRank()
end

local function UpdateMilitaryRank(self)
    local heroData = self.heroData
    local config = heroData.config

    local maxRankId = config['max_rank_level']
    local curRankId = heroData:GetCurMilitaryRankId()
    local isMax = curRankId >= maxRankId

    self.nodeMilitaryRank2:SetActive(false)
    self.btnMilitaryRankUpgrade:SetActive(false)
    self.nodeMilitaryRankArrow:SetActive(false)
    self.nodeMilitaryRank1:SetActive(false)

    self.militaryRankNewIcon:SetActive(false)
    self.militaryRankNewIcon:LoadSprite(HeroUtils.GetMilitaryRankIcon(curRankId), nil, function()
        self.militaryRankNewIcon:SetActive(true)
    end)
    self.militaryRankName:SetLocalText(HeroUtils.GetMilitaryRankName(curRankId))

    local stage = tonumber(GetTableData(TableName.HeroMilitaryRank, curRankId, "stage"))
    for k, v in ipairs(self.militaryRankNewProgress) do
        v:SetActive(k < stage)
    end
end

local function OnBtnAtkClick(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.btnAtk.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("150155")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 180
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnBtnDefClick(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.btnDef.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("220207")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 150
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnBtnArmyClick(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.btnArmy.transform.position + Vector3.New(0, -30, 0) * scaleFactor

    local param = UIHeroTipView.Param.New()
    param.content = Localization:GetString("150182")
    param.dir = UIHeroTipView.Direction.BELOW
    param.defWidth = 150
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function UpdateSkills(self)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    local config = heroData.config

    local skillArray = config['skill']
    if type(skillArray) ~= 'table' then
        skillArray = string.split(skillArray, '|')
    end

    local skillCount = #skillArray

    self.btnSkillsDict = {}
    for k, t in ipairs(self.btnSkills) do
        if k> skillCount then
            t.btn:SetActive(false)
            goto continue
        end

        t.btn:SetActive(true)

        local skillId = tonumber(skillArray[k])
        self.btnSkillsDict[skillId] = t
        t.icon:LoadSprite(HeroUtils.GetSkillIcon(skillId))

        local level = HeroUtils.SkillLevelLimit     --图鉴默认最大等级
        local unlock = true
        if heroData ~= nil then
            local skillData = heroData:GetSkillData(skillId)
            if skillData ~= nil then
                level = skillData.level
                unlock = skillData:IsUnlock()
            end
        end
        t.lvBg:SetActive(level > 0)
        t.lock:SetActive(false) --(level <= 0)
        UIGray.SetGray(t.btn.transform, not unlock, true)
        t.textLv:SetText(level == 0 and '' or level)

        ::continue::
    end
end

local function OnBtnSkillClick(self, index)
    local config, heroData
    heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    config = heroData.config

    local skillIdList = config['skill']
    if type(skillIdList) ~= 'table' then
        skillIdList = string.split(skillIdList, '|')
    end

    local skillId = tonumber(skillIdList[index])
    local level = HeroUtils.SkillLevelLimit     --图鉴默认最大等级
    local unlockQuality = 1
    if heroData ~= nil then
        local skillData = heroData:GetSkillData(skillId)
        if skillData ~= nil then
            level = skillData.level
            unlockQuality = skillData.unlockQuality
        end
    end

    local scaleFactor = UIManager:GetInstance():GetScaleFactor()

    local btn = self.btnSkills[index].btn
    local position = btn.transform.position

    local UIHeroSkillTipView = require "UI.UIHero2.UIHeroSkillTip.View.UIHeroSkillTipView"
    local dir = UIHeroSkillTipView.Direction.ABOVE


    local param = UIHeroSkillTipView.Param.New()
    param.content = Localization:GetString("150155")
    param.dir = dir
    param.skillId = skillId
    param.skillLevel = level
    param.skillUnlockQuality = unlockQuality
    param.pivot = 0.8 + index * 0.03
    param.position = position + Vector3.New(0,  55, 0) * scaleFactor

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroSkillTip, { anim = false }, param)
end


UINewHeroDetail.OnCreate = OnCreate
UINewHeroDetail.OnDestroy = OnDestroy
UINewHeroDetail.ComponentDefine = ComponentDefine
UINewHeroDetail.ComponentDestroy = ComponentDestroy

UINewHeroDetail.InitData = InitData
UINewHeroDetail.RefreshView = RefreshView
UINewHeroDetail.UpdateMilitaryRank = UpdateMilitaryRank

UINewHeroDetail.OnBtnAtkClick = OnBtnAtkClick
UINewHeroDetail.OnBtnDefClick = OnBtnDefClick
UINewHeroDetail.OnBtnArmyClick = OnBtnArmyClick

UINewHeroDetail.UpdateSkills = UpdateSkills
UINewHeroDetail.OnBtnSkillClick = OnBtnSkillClick

return UINewHeroDetail