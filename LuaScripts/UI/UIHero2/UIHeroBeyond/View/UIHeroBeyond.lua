---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 2021/10/14 下午6:48
---


local UIHeroBeyond = BaseClass("UIHeroBeyond", UIBaseView)
local base = UIBaseView
local UnityOutline = typeof(CS.UnityEngine.UI.Outline)
local UIHeroMilitarySkillIcon = require "UI.UIHero2.UIHeroMilitaryRank.Component.UIHeroMilitarySkillIcon"
local Localization = CS.GameEntry.Localization
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()

    self.heroUuid, self.ctrl.callback = self:GetUserData()

    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    self.heroData = heroData
    
    self:RefreshView()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.textTitle = self:AddComponent(UIText, "UICommonMidPopUpTitle/bg_mid/titleText")
    
    local btnClose = self:AddComponent(UIButton, "UICommonMidPopUpTitle/bg_mid/CloseBtn")
    btnClose:SetOnClick(BindCallback(self, self.OnBtnCancelClick))
    
    local btnConfirm = self:AddComponent(UIButton, "Root/ImgCostBg/BtnConfirm")
    btnConfirm:SetOnClick(BindCallback(self, self.OnBtnConfirmClick))

    local btnCancel = self:AddComponent(UIButton, "Root/ImgCostBg/BtnCancel")
    btnCancel:SetOnClick(BindCallback(self, self.OnBtnCancelClick))
    
    local btnGo = self:AddComponent(UIButton, 'Root/LayerRequire/BtnGo')
    btnGo:SetOnClick(BindCallback(self, self.OnBtnGoClick))
    
    local textConfirm = self:AddComponent(UIText, "Root/ImgCostBg/BtnConfirm/btnTxt_green_mid_new_with_pic/Txt1")
    local textCancel = self:AddComponent(UIText, "Root/ImgCostBg/BtnCancel/TextCancel")
    local textGo = self:AddComponent(UIText, 'Root/LayerRequire/BtnGo/TextGo')
    
    self.layerCost = self:AddComponent(UIBaseContainer, 'Root/ImgCostBg')
    self.layerRequire = self:AddComponent(UIBaseContainer, 'Root/LayerRequire')
    
    self.textTitleRequire = self:AddComponent(UIText, 'Root/LayerRequire/TextTitleRequire')
    self.textTipRequire   = self:AddComponent(UIText, 'Root/LayerRequire/TextTipRequire')
    self.requireHeroCell  = self:AddComponent(UIHeroCellSmall, 'Root/LayerRequire/UIHeroCellSmall')
    
    textConfirm:SetLocalText(GameDialogDefine.CONFIRM) 
    textCancel:SetLocalText(GameDialogDefine.CANCEL)
    textGo:SetLocalText(GameDialogDefine.GOTO)
    
    self.textTitle:SetLocalText(129111) 

    self.textTitleLevel      = self:AddComponent(UIText, "Root/ImgBgAttr1/TextTitleLevel")
    self.textValueCurLevel   = self:AddComponent(UIText, "Root/ImgBgAttr1/TextValueCurLevel")
    self.textValueNextLevel  = self:AddComponent(UIText, "Root/ImgBgAttr1/TextValueNextLevel")

    self.textTitleAttack     = self:AddComponent(UIText, "Root/ImgBgAttr2/TextTitleAttack")
    self.textValueCurAttack  = self:AddComponent(UIText, "Root/ImgBgAttr2/TextValueCurAttack")
    self.textValueNextAttack = self:AddComponent(UIText, "Root/ImgBgAttr2/TextValueNextAttack")
    
    self.textTitleDefence     = self:AddComponent(UIText, "Root/ImgBgAttr3/TextTitleDefence")
    self.textValueCurDefence  = self:AddComponent(UIText, "Root/ImgBgAttr3/TextValueCurDefence")
    self.textValueNextDefence = self:AddComponent(UIText, "Root/ImgBgAttr3/TextValueNextDefence")
    
    self.textTitleBeyondCost = self:AddComponent(UIText, "Root/ImgCostBg/TextTitleBeyondCost")
    self.textValueBeyondCost = self:AddComponent(UIText, "Root/ImgCostBg/BtnConfirm/btnTxt_green_mid_new_with_pic/txt2")
    
    self.skillUnlock = self:AddComponent(UIBaseContainer, "Root/SkillUnlock")
    self.skillUnlockTitle = self:AddComponent(UIText, "Root/SkillUnlock/TextTitleSkill")
    self.skillIcon = self:AddComponent(UIHeroMilitarySkillIcon, "Root/SkillUnlock/HeroSkillIcon")
    self.skillName = self:AddComponent(UIText, "Root/SkillUnlock/TextSkillName")

    self.textTitleLevel:SetLocalText(129112)
    self.textTitleAttack:SetLocalText(150101) 
    self.textTitleDefence:SetLocalText(150102) 
    self.textTitleBeyondCost:SetLocalText(161021) 
    
    self.textTitleRequire:SetLocalText(129113)
end

local function ComponentDestroy(self)
end

local function RefreshView(self)
    local heroData = self.heroData

    --改为显示： 当前等级上限 /突破后的等级上限
    self.textValueCurLevel:SetText(heroData.level)
    self.textValueNextLevel:SetText(self:GetNextBeyondLevel(heroData))

    local curAttack, curDefence = heroData:GetAttrByQuality(heroData.quality, heroData.level)
    local nextAttack = curAttack + heroData.config['special_attr_attack']
    local nextDefence = curDefence + heroData.config['special_attr_defens']

    self.textValueCurAttack:SetText(Mathf.Round(curAttack))
    self.textValueNextAttack:SetText(Mathf.Round(nextAttack))
    self.textValueCurDefence:SetText(Mathf.Round(curDefence))
    self.textValueNextDefence:SetText(Mathf.Round(nextDefence))

    --check requirement
    --if HeroUtils.IsNewMaxLevel() then
    --
    --else
    --    local requireQuality = tonumber(GetTableData(HeroUtils.GetHeroLevelUpXmlName(), heroData.level, 'break_require')) or 0
    --
    --    self.layerCost:SetActive(heroData.quality >= requireQuality)
    --    self.layerRequire:SetActive(heroData.quality < requireQuality)
    --end

    local skillId = nil
    local unlockLevel = 1
    local skillDict = DeepCopy(table.values(heroData.skillDict))
    table.sort(skillDict, function (k, v)
        return k.unlockHeroLv < v.unlockHeroLv 
    end)
    for _, v in ipairs(skillDict) do
        if v ~= nil and v.level == 0 and v.unlockHeroLv == heroData.level and v.unlockHeroLv < 1000 then
            skillId = v.skillId
            unlockLevel = v.unlockHeroLv
            break
        end
    end

    local skillLv = 0
    if skillId == nil then
        self.skillUnlock:SetActive(false)
    else
        self.skillUnlock:SetActive(true)
        if unlockLevel == heroData.level then
            self.skillUnlockTitle:SetLocalText(100213)
        else
            self.skillUnlockTitle:SetLocalText(300505, unlockLevel)
        end
        self.skillIcon:SetData(skillId, skillLv, false, 0.8, true)
        local skillName = Localization:GetString(GetTableData(TableName.SkillTab, skillId, 'name'))
        self.skillName:SetText(skillName)
    end
    
    --if heroData.quality < requireQuality then
    --    self.requireHeroCell:InitWithConfigId(heroData.heroId, requireQuality, heroData.level)
    --    self.textTipRequire:SetLocalText(129114, string.format("<color='%s'>%s</color>", HeroUtils.GetQualityColorStr(requireQuality),  HeroUtils.GetQualityName(requireQuality)))
    --else
        self.spendGold = HeroUtils.GetLevelUpSpeedGold(heroData.level)
        self.textValueBeyondCost:SetText(string.GetFormattedSeperatorNum(self.spendGold))

        local redColor = Color32.New(232/255, 66/255, 66/255, 1)
        local goldHave = LuaEntry.Resource:GetCntByResType(ResourceType.Money)
        self.textValueBeyondCost:SetColor(goldHave < self.spendGold and redColor or Color32.white)

        local outlines = self.textValueBeyondCost.gameObject:GetComponents(UnityOutline)
        if outlines ~= nil then
            for i = 0, outlines.Length -1 do
                outlines[i].enabled = goldHave >= self.spendGold
            end
        end
    --end
end


local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.ResourceUpdated, self.RefreshView)
    self:AddUIListener(EventId.RefreshItems, self.RefreshView)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.ResourceUpdated, self.RefreshView)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshView)
    base.OnRemoveListener(self)
end

local function OnBtnConfirmClick(self)
    local have = LuaEntry.Resource:GetCntByResType(ResourceType.Money)
    if have < self.spendGold then
        local lackTab = {}
        local param = {}
        param.type = ResLackType.Res
        param.id = ResourceType.Money
        param.targetNum = self.spendGold
        table.insert(lackTab,param)
        GoToResLack.GoToItemResLackList(lackTab)
        self.ctrl:CloseSelf()
        return
    end

    SFSNetwork.SendMessage(MsgDefines.HeroLvBeyond, self.heroUuid)
    self.ctrl:CloseSelf()
end

local function OnBtnCancelClick(self)
    self.ctrl:CloseSelf()
end

local function OnBtnGoClick(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIHeroBeyond)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIHeroInfo)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance, { anim = true, hideTop = true })
end

local function GetNextBeyondLevel(self, heroData)
    local level = heroData.level +1
    local finalLevel = heroData:GetFinalLevel()
    local ret = level
    for k = level, finalLevel do
        local spend = HeroUtils.GetLevelUpSpeedGold(k)
        ret = k
        if spend > 0 then
            break
        end
    end
    
    return ret
end

local function UpdateRequireCell(self, reqQuality)

end    
    
    
UIHeroBeyond.OnCreate= OnCreate
UIHeroBeyond.OnDestroy = OnDestroy
UIHeroBeyond.ComponentDefine = ComponentDefine
UIHeroBeyond.ComponentDestroy = ComponentDestroy

UIHeroBeyond.OnAddListener = OnAddListener
UIHeroBeyond.OnRemoveListener = OnRemoveListener

UIHeroBeyond.RefreshView = RefreshView

UIHeroBeyond.GetNextBeyondLevel = GetNextBeyondLevel
UIHeroBeyond.UpdateRequireCell = UpdateRequireCell

UIHeroBeyond.OnBtnConfirmClick = OnBtnConfirmClick
UIHeroBeyond.OnBtnCancelClick = OnBtnCancelClick
UIHeroBeyond.OnBtnGoClick = OnBtnGoClick





return UIHeroBeyond
