---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 6/29/21 12:11 PM
---



local UIHeroLvUpView = BaseClass("UIHeroLvUpView",UIBaseView)
local base = UIBaseView

local UIItemCell = require "UI.UIHero2.UIHeroLvUp.Component.UIItemCell"
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"
local UILackItemTitle = require "UI.UIHero2.UIHeroLvUp.Component.UILackItemTitle"
local UILackItems = require "UI.UIHero2.UIHeroLvUp.Component.UILackItems"
local Localization = CS.GameEntry.Localization
local TweenShortCut = CS.DG.Tweening.ShortcutExtensions


local txt_title_path ="UICommonPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonPopUpTitle/panel"
local slider_path = "ImgBg/SliderBg/Slider"
local slider_txt_path = "ImgBg/SliderBg/LeftTime"
local hero_cell_small_path = "ImgBg/SliderBg/UIHeroCellSmall"

local scroll_path = "ImgBg/LoopScroll"
local scroll_content_path = "ImgBg/LoopScroll/Viewport/Content"

local more_btn_go_path = "ImgBg/MoreBtnGo"
local more_btn_path = "ImgBg/MoreBtnGo/MoreBtn/UseCountBtn"
local more_btn_name_path = "ImgBg/MoreBtnGo/MoreBtn/UseCountBtn/UseCountBtnName"
local no_item_text_path = "ImgBg/NoItemText"


local MoreBtnLocalPosX = 350
local MoreBtnPos = Vector3.New(0,0,0)

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

local function OnDestroy(self)
    self:ResetAddExpTip()
    self:ResetLvUpTip()
    
    self:ToggleMoreBtn(false)
    
    self:SetAllCellsDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.slider_txt = self:AddComponent(UITextMeshProUGUIEx, slider_txt_path)
    
    self.textLvUpTip1 = self:AddComponent(UITextMeshProUGUIEx, "ImgBg/SliderBg/TextLvUpTip1")
    self.textLvUpTip2 = self:AddComponent(UITextMeshProUGUIEx, "ImgBg/SliderBg/TextLvUpTip2")
    self.textAddExpTip = self:AddComponent(UITextMeshProUGUIEx, "ImgBg/SliderBg/TextAddExpTip")
    
    
    self.heroCellSmall = self:AddComponent(UIHeroCellSmall, hero_cell_small_path)
    
    self.more_btn_go = self:AddComponent(UIAnimator, more_btn_go_path)
    self.more_btn = self:AddComponent(UIButton, more_btn_path)
    self.more_btn_name = self:AddComponent(UITextMeshProUGUIEx, more_btn_name_path)
    self.no_item_text = self:AddComponent(UITextMeshProUGUIEx, no_item_text_path)
    --self.scroll_view = self:AddComponent(UIScrollView, scroll_path)

    self.btnBeyond = self:AddComponent(UIButton, 'ImgBg/BtnBeyond')
    self.btnBeyond:SetOnClick(BindCallback(self, self.OnBtnBeyondClick))

    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)

    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    --self.scroll_view:SetOnValueChanged(function(eventData)
    --    self:OnBeginDrag(eventData)
    --end)
    self.more_btn:SetOnClick(function()  
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:MoreBtnClick()
    end)

    self.textLvUpTip1:SetLocalText(100091)

    self.content = self:AddComponent(UIBaseContainer, scroll_content_path)
    self.scroll_view = self:AddComponent(UILoopListView2, scroll_path)
    self.scroll_view:InitListView(0, function(loopView, index)
        return self:OnGetItemByIndex(loopView, index)
    end)
    
    self.addExpTipOriginPos = self.textAddExpTip.transform.localPosition
    self.initPosTextLvUpTip = self.textLvUpTip1.transform.localPosition
end

local function ComponentDestroy(self)
    self.more_btn_go:SetActive(false)
    
    self.txt_title = nil
    self.close_btn = nil
    self.return_btn = nil
    self.slider = nil
    self.slider_txt = nil
    self.heroCellSmall = nil

    self.textLvUpTip1 = nil
    self.textLvUpTip2 = nil
    self.textAddExpTip = nil
    
    self.more_btn_go = nil
    self.more_btn = nil
    self.more_btn_name = nil
    self.no_item_text = nil
    self.scroll_view = nil
end

local function DataDefine(self)
    self.heroUuid = nil
    self.hero = nil
    self.template = nil
    self.cells = {}
    self.maxExp = 0
    self.refreshItemAllCell = nil
    self.refreshHeroAllCell = nil
    self.moreBtnIsShow = false
end

local function DataDestroy(self)
    self.heroUuid = nil
    self.hero = nil
    self.template = nil
    self.cells = nil
    self.maxExp = nil
    self.refreshItemAllCell = nil
    self.refreshHeroAllCell = nil
    self.moreBtnIsShow = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ReInit(self)
    self.txt_title:SetLocalText(100070) 
    self.more_btn_go:SetActive(false)
    
    self.heroUuid, self.ctrl.callback = self:GetUserData()
    self.heroCellSmall:SetData(self.heroUuid)
    
    self:RefreshPanel()
    self:ShowScroll()
end

local function RefreshPanel(self)
    self.hero = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    self.levelLimit = self.hero:GetCurMaxLevel()
    self.maxExp = HeroUtils.GetLevelUpNeedExp(self.hero.level)

    self:UpdateSlider()

    --突破限制
    self.btnBeyond:SetActive(self.hero:IsReachBreakLimit())
end

local function UpdateSlider(self)
    --self.hero_level_text:SetText(self.hero.level)
    self.heroCellSmall:SetDisplayLevel(self.hero.level)
    self.slider_txt:SetText(self.hero.exp .. "/" .. self.maxExp)
    self.slider:SetValue(self.hero.exp / self.maxExp)
end

local function SetAllCellsDestroy(self)
    self:ClearScroll()
end

local function ClearScroll(self)
    --self.cells = {}
    --self.scroll_view:ClearCells()
    --self.scroll_view:RemoveComponents(UIItemCell)
    self.content:RemoveComponents(UIItemCell)
    self.content:RemoveComponents(UILackItems)
    self.content:RemoveComponents(UILackItemTitle)
    self.scroll_view:ClearAllItems()
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.RefreshItems, self.RefreshItemSignal)
    self:AddUIListener(EventId.MsgHeroesUpdate, self.HeroesUpdateSignal)
    self:AddUIListener(EventId.HeroLvUpSuccess, self.OnHeroLvUpSuccess)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshItemSignal)
    self:RemoveUIListener(EventId.MsgHeroesUpdate, self.HeroesUpdateSignal)
    self:RemoveUIListener(EventId.HeroLvUpSuccess, self.OnHeroLvUpSuccess)
end

local function ShowMoreBtnName(self)
    local leftCount = self.maxExp - self.hero.exp
    local oneCount = self.dataList[self.moreIndex].addNum
    
    self.moreBtnMax = math.floor(leftCount / oneCount)
    if self.moreBtnMax > self.dataList[self.moreIndex].count then
        self.moreBtnMax = self.dataList[self.moreIndex].count
    end
    
    if self.moreBtnMax > 0 then
        self.more_btn_name:SetText("x"..self.moreBtnMax)
    else
        self.more_btn_go:SetActive(false)
    end
end

local function ShowMoreBtn(self, positionY)
    MoreBtnPos.y = positionY
    self.more_btn_go.transform.position = MoreBtnPos
    local temp = self.more_btn_go.transform.localPosition
    temp.x = MoreBtnLocalPosX
    self.more_btn_go.transform.localPosition = temp
    self.more_btn_go:Play("ShowMoreBtn",0,0)
    self.moreBtnIsShow = true
end

local function HideMoreBtn(self)
    if self.moreBtnIsShow then
        self.more_btn_go:Play("CloseMoreBtn",0,0)
        self.moreBtnIsShow = false
    end
end


local function ToggleMoreBtn(self, visible, ani)
    local itemCell = self.cells[self.moreIndex]
    if itemCell == nil then
        return
    end
    
    local beyondLvLimit = self.hero:GetCurMaxLevel()
    local finalLevel = self.hero:GetFinalLevel()
    local reachLevelLimit = self.hero.level >= finalLevel or self.hero.level == beyondLvLimit
    if reachLevelLimit or (not visible) then
        itemCell:ToggleMoreBtn(false, ani)
        return
    end
    if self.dataList[self.moreIndex] == nil or self.dataList[self.moreIndex].addNum == nil then
        return
    end    
    local reqExp = self.maxExp - self.hero.exp
    local oneItemAdd = self.dataList[self.moreIndex].addNum
    local have = self.dataList[self.moreIndex].count
    
    --如果升级后达到最大等级则此次向下取整 否则向上取整
    --local willReach = self.hero.level +1 >= qualityLvLimit or (self.hero.level+1 == beyondLvLimit and self.hero.exp == self.maxExp)
    local batchNum = (self.hero.level +1 >= beyondLvLimit) and math.floor(reqExp / oneItemAdd)  or math.ceil(reqExp / oneItemAdd)
    local needItemNum = math.min(batchNum, have)
    self.moreBtnMax = needItemNum

    itemCell:ToggleMoreBtn(needItemNum > 1, ani, needItemNum)
end


local function SortItem(a, b)
    if a.order > b.order then
        return false
    elseif a.order < b.order then
        return true
    else
        if a.id > b.id then
            return true
        elseif a.id < b.id then
            return false
        end
    end
    return false
end

local function CellsCallBack(self, index)
    self:ToggleMoreBtn(false)
    self.moreIndex = index

    --local ret, uuid = DataCenter.HeroDataManager:IsTheOptimalHeroInSameId(self.hero)
    --if not ret then
    --    local optimalHero = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
    --    --您已拥有更高等级的{0},无法对该英雄进行操作
    --    local heroNameStr = string.format("<color='%s'>%s</color>", HeroUtils.GetQualityColorStr(optimalHero.quality), optimalHero:GetName())
    --    UIUtil.ShowMessage(Localization:GetString("129125", heroNameStr), 1, GameDialogDefine.CONFIRM)
    --    
    --    return
    --end

    if not self.hero.isMaster then
        return
    end
    
    self:CheckUse(index, 1)
end

local function ConfirmUse(self, index, count, level, exp, maxExp)
    local itemUuid = self.dataList[index].uuid
    --SFSNetwork.SendMessage(MsgDefines.ItemUse, { uuid = uuid, num = count ,heroId = self.hero.heroId})
    SFSNetwork.SendMessage(MsgDefines.HeroLvUp, self.heroUuid, count)
    
    self.hero.exp = exp
    self.maxExp = maxExp
    self.hero.level = level
    self.refreshHeroAllCell = false
    self.refreshItemAllCell = false
    DataCenter.ItemData:SetItemCountByUuid(itemUuid, self.dataList[index].count - count)
    self:UpdateSlider()
    self.dataList[index].count = self.dataList[index].count - count
    -- more btn
    if self.dataList[index].count >= 1 then
        --if count > 1 then
        --    self.more_btn_go:SetActive(false)
        --else
        --    self.more_btn_go:SetActive(true)
        --    self:ShowMoreBtn(self.cells[self.moreIndex].transform.position.y)
        --    self:ShowMoreBtnName()
        --end

        if self.cells[self.moreIndex] ~= nil then
            self.cells[self.moreIndex]:RefreshOwnCount(self.dataList[index].count)
        end
        
        self:ToggleMoreBtn(true, true)
    else
        --self.more_btn_go:SetActive(false)
        self:ToggleMoreBtn(false, true)
        self:ShowScroll()
    end
    
end

local function CheckUse(self, index, count)
    --策划新需求：品阶和等级上限无关了
    local reachFinalLevel = self.hero.level >= self.hero:GetFinalLevel()  --reachQualityLv and self.hero.quality >= self.hero:GetMaxQuality()
    local reachBreakLimit = self.hero:IsReachBreakLimit()

    if reachFinalLevel then
        UIUtil.ShowTipsId(129085) --已达最大等级
        return
    end
    
    --突破限制
    if reachBreakLimit then
        UIUtil.ShowTipsId(129085) --英雄已达限制等级，请前往突破
        return
    end
    
    local levelLimit = self.hero:GetCurMaxLevel() 
    
    local srcLevel = self.hero.level
    local itemData = self.dataList[index]
    local addTotalExp = itemData.addNum * count
    local outMax = 0
    local level = srcLevel
    local exp = self.hero.exp + addTotalExp
    local maxExp = self.maxExp

    --求出使用完经验道具后的目标等级和目标经验，及目标等级的maxExp
    while exp >= maxExp do
        if level >= levelLimit-1 then --如果升级后是[突破等级] 则升级后经验为0 突破后方才能继续增加经验
            level = level + 1
            outMax = exp - maxExp
            exp = 0--maxExp
            maxExp = HeroUtils.GetLevelUpNeedExp(level)
            
            break
        end

        level = level + 1
        exp = exp - maxExp
        maxExp = HeroUtils.GetLevelUpNeedExp(level)
    end

    local function Confirm()
        self:ConfirmUse(index, count, level, exp, maxExp)
        
        if level > srcLevel then
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Hero_Upgrade1)
            self:ShowLvUpTip(level)
        else
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Hero_Upgrade)
        end

        --show item use tips
        UIUtil.ShowTips(Localization:GetString("150158", DataCenter.ItemTemplateManager:GetName(itemData.id), count))
        self:ShowAddExpTips(addTotalExp)
    end

    local threshold = LuaEntry.DataConfig:TryGetNum("hero_exp_minnum", "k1") 
    if outMax > threshold then
        UIUtil.ShowMessage(Localization:GetString("126004", outMax), 2, "", "", Confirm, nil, nil, '100378')
    else
        Confirm()
    end
end

local function MoreBtnClick(self)
    self:CheckUse(self.moreIndex, self.moreBtnMax)
    self:ToggleMoreBtn(true, true)
end

local function OnBeginDrag(self, _)
    --self:HideMoreBtn()
    self:ToggleMoreBtn(false)
end

local function RefreshItemSignal(self)
    self:ShowScroll()
end

local function HeroesUpdateSignal(self)
    self.btnBeyond:SetActive(self.hero:IsReachBreakLimit())
    if self.hero.level < self.hero:GetCurMaxLevel() then
        if self.refreshHeroAllCell then
            self:RefreshPanel()
        else
            self.refreshHeroAllCell = true
        end
    else
        self.ctrl:CloseSelf()
    end
end

local function ShowAddExpTips(self, addExp)
    self:ResetAddExpTip()
    
    self.textAddExpTip:SetText('+' .. addExp)
    
    local sequence = CS.DG.Tweening.DOTween.Sequence()
    --sequence:OnPause(BindCallback(self, self.ResetAddExpTip))
    sequence:Append(self.textAddExpTip.transform:DOScale(Vector3.one, 0.3))
    sequence:AppendInterval(1)
    sequence:Append(self.textAddExpTip.transform:DOLocalMoveY(self.addExpTipOriginPos.y + 30, 0.3))
    sequence:AppendCallback(function()
        self.textAddExpTip.transform:Set_localScale(0, 0, 0)
        self.textAddExpTip.transform.localPosition = self.addExpTipOriginPos
    end)

    self.addExpSequence = sequence
end

local function ResetAddExpTip(self)
    if self.addExpSequence ~= nil then
        self.addExpSequence:Pause()
        self.addExpSequence:Kill()
        self.addExpSequence = nil
    end

    DOTween.Kill(self.textAddExpTip.transform)

    self.textAddExpTip.transform:Set_localScale(0, 0, 0)
    self.textAddExpTip.transform.localPosition = self.addExpTipOriginPos
    self.textAddExpTip:SetActive(true)
end

local function ShowLvUpTip(self)
    self:ResetLvUpTip()

    local atkAdd, defAdd, armyAdd, powerAdd = self.hero:GetLvUpChangedAttr()
    self.textLvUpTip2:SetLocalText(150159,  armyAdd,  atkAdd,  defAdd) 
    
    local sequence = CS.DG.Tweening.DOTween.Sequence()
    --sequence:OnPause(BindCallback(self, self.ResetLvUpTip))
    --sequence:SetLoops(-1)
    sequence:Append(self.textLvUpTip1.transform:DOScale(Vector3.one, 0.3))
    sequence:AppendInterval(2)
    sequence:Append(self.textLvUpTip1.transform:DOLocalMoveY(self.initPosTextLvUpTip.y + 20, 0.3))
    sequence:Append(self.textLvUpTip1.transform:DOScale(Vector3.zero, 0))
    sequence:Append(self.textLvUpTip2.transform:DOScale(Vector3.one, 0.3))
    sequence:AppendInterval(2)
    sequence:Append(self.textLvUpTip2.transform:DOLocalMoveY(self.initPosTextLvUpTip.y + 20, 0.3))
    sequence:Append(self.textLvUpTip2.transform:DOScale(Vector3.zero, 0))


    self.lvUpTipSequence = sequence
    
    if powerAdd > 0 then
        UIUtil.ShowTips(Localization:GetString("150160", powerAdd))
    end
end

local function ResetLvUpTip(self)
    if self.lvUpTipSequence ~= nil then
        self.lvUpTipSequence:Pause()
        self.lvUpTipSequence:Kill()
        self.lvUpTipSequence = nil
    end

    DOTween.Kill(self.textLvUpTip1.transform)
    DOTween.Kill(self.textLvUpTip2.transform)

    self.textLvUpTip1.transform:Set_localScale(0, 0, 0)
    self.textLvUpTip2.transform:Set_localScale(0, 0, 0)
    self.textLvUpTip1.transform:Set_localPosition(self.initPosTextLvUpTip.x, self.initPosTextLvUpTip.y, self.initPosTextLvUpTip.z)
    self.textLvUpTip2.transform:Set_localPosition(self.initPosTextLvUpTip.x, self.initPosTextLvUpTip.y, self.initPosTextLvUpTip.z)
    self.textLvUpTip1:SetActive(true)
    self.textLvUpTip2:SetActive(true)
end

local function OnHeroLvUpSuccess(self, heroUuid)
    if heroUuid ~= self.heroUuid then
        return
    end

    if self.hero == nil then
        return
    end
    
    self.btnBeyond:SetActive(self.hero:IsReachBreakLimit())

    if self.hero.level > self.hero.lastLevel then
        self:ShowLvUpTip()
    end
end

local function OnBtnBeyondClick(self)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    local maxLevel = HeroUtils.GetHeroCurrentMaxLevel(heroData.heroId, heroData.quality, heroData:GetCurMilitaryRankId())

    if heroData.level >= maxLevel then
        local name = Localization:GetString(heroData.config["name"])
        local heroName = string.format("<color='%s'>%s</color>", HeroUtils.GetRarityColorStr(heroData.rarity), name)
        local str = ""
        if HeroUtils.IsUseMainLvMaxLevel() then
            local needLv = DataCenter.HeroLevelUpTemplateManager:GetNeedMainLv()
            str = Localization:GetString(GameDialogDefine.HERO_UPGRADE_MAX_LEVEL_NEED_MAIN_LEVEL_TIP, heroName, needLv)
        elseif HeroUtils.IsNewMaxLevel() then
            local rankId = HeroUtils.GetNextMaxLevelByRankId(heroData.heroId, heroData:GetCurMilitaryRankId(), heroData.level)
            local rankName = GetTableData(TableName.HeroMilitaryRank, rankId, "name")
            str = Localization:GetString("129287", heroName, Localization:GetString(rankName))
        else
            local star =  HeroUtils.GetNextMaxLevelByQuality(heroData.heroId, heroData.quality, heroData.level)
            if star <= 0 then
                return
            end

            star = Mathf.Round((star - 1) / 2)
            str = Localization:GetString("129232", heroName, tostring(star))
        end
        

        UIUtil.ShowMessage(str, 1, GameDialogDefine.GOTO, GameDialogDefine.CANCEL, function()
            if HeroUtils.IsUseMainLvMaxLevel() then
                GoToUtil.GotoCityByBuildId(BuildingTypes.FUN_BUILD_MAIN, WorldTileBtnType.City_Upgrade)
            elseif HeroUtils.IsNewMaxLevel() then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroMilitaryRank, self.heroUuid)
            else
                local window = UIManager:GetInstance():GetWindow(UIWindowNames.UIHeroInfo)
                if window ~= nil and window.View then
                    window.View.modelViewer:ToggleSceneVisible(false)
                end
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance, self.heroUuid)
            end
            self.ctrl:CloseSelf()
        end)
        return
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroBeyond, self.heroUuid, self.ctrl.callback)
    self.ctrl:CloseSelf()
end


local function ShowScroll(self)
    self.more_btn_go:SetActive(false)
    self.no_item_text:SetActive(false)
    self.dataList = self.ctrl:GetPanelData(self.heroUuid)
    local count = table.count(self.dataList)

    self.scroll_view:SetListItemCount(count, false, false)
    self.scroll_view:RefreshAllShownItem()
end

local function OnGetItemByIndex(self, loopScroll, index)
    index = index + 1
    if index < 1 or index > #self.dataList then
        return nil
    end

    local data = self.dataList[index]

    --标题行-- titleLine
    if data.type == 1 then
        local item = loopScroll:NewListViewItem('UISpeedCell')
        local script = self.content:GetComponent(item.gameObject.name, UIItemCell)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end
            script = self.content:AddComponent(UIItemCell, objectName)
        end
        data.index = index
        data.callBack = function(index) self:CellsCallBack(index) end
        script:ReInit(data)
        self.cells[index] = script
        return item
    elseif data.type == 3 then
        local item = loopScroll:NewListViewItem('desObj')
        local script = self.content:GetComponent(item.gameObject.name, UILackItemTitle)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end
            script = self.content:AddComponent(UILackItemTitle, objectName)
        end
        return item
    end

    --数据行
    local item = loopScroll:NewListViewItem('LackResource')
    local script = self.content:GetComponent(item.gameObject.name, UILackItems)
    if script == nil then
        local objectName = self:GetItemNameSequence()
        item.gameObject.name = objectName
        if (not item.IsInitHandlerCalled) then
            item.IsInitHandlerCalled = true
        end

        script = self.content:AddComponent(UILackItems, objectName)
    end

    script:SetData(data, index)
    return item
end

local function GetItemNameSequence(self)
    NameCount = NameCount + 1
    return tostring(NameCount)
end

UIHeroLvUpView.ShowScroll = ShowScroll
UIHeroLvUpView.OnGetItemByIndex = OnGetItemByIndex
UIHeroLvUpView.GetItemNameSequence = GetItemNameSequence
UIHeroLvUpView.OnCreate= OnCreate
UIHeroLvUpView.OnDestroy = OnDestroy
UIHeroLvUpView.OnEnable = OnEnable
UIHeroLvUpView.OnDisable = OnDisable
UIHeroLvUpView.ClearScroll = ClearScroll
UIHeroLvUpView.OnAddListener = OnAddListener
UIHeroLvUpView.OnRemoveListener = OnRemoveListener
UIHeroLvUpView.ComponentDefine = ComponentDefine
UIHeroLvUpView.ComponentDestroy = ComponentDestroy
UIHeroLvUpView.DataDefine = DataDefine
UIHeroLvUpView.DataDestroy = DataDestroy
UIHeroLvUpView.ReInit = ReInit
UIHeroLvUpView.SetAllCellsDestroy = SetAllCellsDestroy

UIHeroLvUpView.ShowMoreBtnName = ShowMoreBtnName
UIHeroLvUpView.ShowMoreBtn = ShowMoreBtn
UIHeroLvUpView.HideMoreBtn = HideMoreBtn

UIHeroLvUpView.ToggleMoreBtn = ToggleMoreBtn

UIHeroLvUpView.SortItem = SortItem
UIHeroLvUpView.CellsCallBack = CellsCallBack
UIHeroLvUpView.ConfirmUse = ConfirmUse
UIHeroLvUpView.MoreBtnClick = MoreBtnClick
UIHeroLvUpView.OnBeginDrag = OnBeginDrag
UIHeroLvUpView.RefreshItemSignal = RefreshItemSignal
UIHeroLvUpView.RefreshPanel = RefreshPanel
UIHeroLvUpView.UpdateSlider = UpdateSlider
UIHeroLvUpView.HeroesUpdateSignal = HeroesUpdateSignal
UIHeroLvUpView.CheckUse = CheckUse

UIHeroLvUpView.ShowAddExpTips = ShowAddExpTips
UIHeroLvUpView.ResetAddExpTip = ResetAddExpTip
UIHeroLvUpView.ShowLvUpTip = ShowLvUpTip
UIHeroLvUpView.ResetLvUpTip = ResetLvUpTip
UIHeroLvUpView.OnHeroLvUpSuccess = OnHeroLvUpSuccess

UIHeroLvUpView.OnBtnBeyondClick = OnBtnBeyondClick

return UIHeroLvUpView