---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/2/21 4:55 PM
---

local UIHeroPageAdvance = BaseClass("UIHeroPageAdvance", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIHeroAdvanceCell = require("UI.UIHero2.UIHeroAdvance.Component.UIHeroAdvanceCell")
local UIHeroAdvanceSlot = require("UI.UIHero2.UIHeroAdvance.Component.UIHeroAdvanceSlot")
local UIHeroAdvanceListTitleLine = require("UI.UIHero2.UIHeroAdvance.Component.UIHeroAdvanceListTitleLine")
local UIHeroAdvanceListRow = require("UI.UIHero2.UIHeroAdvance.Component.UIHeroAdvanceListRow")
local UIHeroCell = require "UI.UIHero2.Common.UIHeroCellSmall_TextMeshPro"
local UIGray = CS.UIGray
local AdvanceReqData = require 'DataCenter.HeroData.AdvanceReqData'

local Toggle1_Index = 1
local Toggle2_Index = 2
local Toggle3_Index = 3

local AdvanceReqDatas = {}
--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.HeroReset)
end

-- 销毁
local function OnDestroy(self)
    HeroAdvanceController:GetInstance():SetAdvanceHeroUuid(nil)
    self:SetAllCellsDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.tabCamps = {}
    self.redPot = {}

    self.blueHero = true
    for i = 0, 3 do
        local path = string.format("RightPanel/TabContent/%s", i)
        local tab = self:AddComponent(UIButton, path)
        tab:SetOnClick(function()  
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
            self:OnSwitchCamp(i)
        end)
        local red = self:AddComponent(UIBaseContainer, path.."/".."RedPoint_"..i)
        self.tabCamps[i] = tab
        self.redPot[i] = red
    end
    self.rightPanel = self:AddComponent(UIBaseContainer, "RightPanel")
    self.rightPanel:SetActive(true)
    self.content = self:AddComponent(UIBaseContainer, 'RightPanel/layout/LoopScroll/Viewport/Content')
    self.scroll_view_hero = self:AddComponent(UILoopListView2, 'RightPanel/layout/LoopScroll')
    self.scroll_view_hero:InitListView(0, function(loopView, index)
        return self:OnGetItemByIndex(loopView, index)
    end)

    self.content_food = self:AddComponent(UIBaseContainer, 'RightPanel/layout/LoopScroll_Food/Viewport/Content_Food')
    self.scroll_view_food = self:AddComponent(UILoopListView2, 'RightPanel/layout/LoopScroll_Food')
    self.scroll_view_food:InitListView(0, function(loopView, index)
        return self:OnGetFoodItemByIndex(loopView, index)
    end)

    self.objHero = self:AddComponent(UIBaseContainer, "ObjHero")
    self.imgQualityBg = self:AddComponent(UIImage, "ObjHero/ImgQualityBg")
    self.imgCamp = self:AddComponent(UIImage, "ObjHero/ImgQualityBg/ImgCamp")
    self.textHeroName = self:AddComponent(UITextMeshProUGUIEx, "ObjHero/ImgQualityBg/TextHeroName")
    self.textHeroNickName = self:AddComponent(UITextMeshProUGUIEx, "ObjHero/ImgQualityBg/TextNickName")
    self.nodeStarBox      = self:AddComponent(UIBaseContainer, "ObjHero/ImgQualityBg/StarBox")

    
    self.btnAdvance = self:AddComponent(UIButton, "RightPanel/layout/BtnAdvance")
    self.btnAdvance:SetOnClick(function()  
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBtnAdvanceClick()
    end)
    
    self.textTip1 = self:AddComponent(UITextMeshProUGUIEx, 'RightPanel/layout/TextTip1')
    self.textTip1:SetLocalText(129124)
    
    self.textAdvance = self:AddComponent(UITextMeshProUGUIEx,"RightPanel/layout/BtnAdvance/BtnText")
    self.textAdvance:SetLocalText(150115)

    self.btnGetMore = self:AddComponent(UIButton, "RightPanel/layout/BtnGetMore")
    self.btnGetMore:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnGetMoreClick()
    end)
    self.btnGetMore:SetActive(false)
    self.textGetMore = self:AddComponent(UITextMeshProUGUIEx,"RightPanel/layout/BtnGetMore/BtnGetMoreText")
    self.textGetMore:SetLocalText(129253)

    self.oneKey = self:AddComponent(UIBaseContainer, "RightPanel/layout/OneKey")
    self.btnOneKeyAdvance = self:AddComponent(UIButton, "RightPanel/layout/OneKey/BtnOneKeyAdvance")
    self.btnOneKeyAdvance:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        local openFlag = self:CheckToggleIsOpen()
        if openFlag == false then
            self:ShowOneKeyCondition()
            return
        end

        self:OnOneKeyBtnAdvanceClick(self.oneKeyQuality)
    end)

    self.btnOneKeyAdvanceText = self:AddComponent(UITextMeshProUGUIEx,"RightPanel/layout/OneKey/BtnOneKeyAdvance/BtnOneKeyAdvanceText")
    self.btnOneKeyAdvanceText:SetLocalText(129222)

    self.coreHeroSlot = self:AddComponent(UIHeroCell, "ObjHero/HeroAdvanceContent/UIAdvanceCore/UIHeroCellSmall")
    local btnCoreHero = self:AddComponent(UIButton, "ObjHero/HeroAdvanceContent/UIAdvanceCore")
    btnCoreHero:SetOnClick(function()  
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnCancelCore()
    end)
    local btnCoreHeroCancel = self:AddComponent(UIButton, "ObjHero/HeroAdvanceContent/UIAdvanceCore/CoreClose")
    btnCoreHeroCancel:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnCancelCore()
    end)

    self.consumeObjList = {}
    for i = 1, HeroUtils.ConsumeSlotMax do
        local slot = self:AddComponent(UIHeroAdvanceSlot, "ObjHero/HeroAdvanceContent/ConsumeSlot" .. i)
        slot:SetParent(self)
        self.consumeObjList[i] = slot
    end
    self.oneKeyConfig = self:AddComponent(UIButton, "RightPanel/layout/OneKey/BtnOneKeyConfig")
    self.oneKeyConfig:SetActive(false)
    self.oneKeyConfig:SetOnClick(function()
        self:OneKeyConfigClick()
    end)

    self.choosePanel = self:AddComponent(UIBaseContainer, "RightPanel/layout/OneKey/ChoosePanel")
    self.choosePanelTitle = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/layout/OneKey/ChoosePanel/ChoosePanelTitle")
    self.choosePanelTitle:SetLocalText(129233)
    self.choosePanel:SetActive(false)
    self.toggle1 = self:AddComponent(UIToggle, "RightPanel/layout/OneKey/ChoosePanel/toggleGroup/Toggle1")
    self.toggle2 = self:AddComponent(UIToggle, "RightPanel/layout/OneKey/ChoosePanel/toggleGroup/Toggle2")
    self.toggle3 = self:AddComponent(UIToggle, "RightPanel/layout/OneKey/ChoosePanel/toggleGroup/Toggle3")

    self.toggle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS(Toggle1_Index, 3)
        end
    end)
    self.toggle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS(Toggle2_Index, 5)
        end
    end)
    self.toggle3:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS(Toggle3_Index, 7)
        end
    end)
    self.currentToggle = Toggle1_Index
    self.oneKeyQuality = 3
    if self.toggle1:GetIsOn() then
        self:ToggleControlBorS(Toggle1_Index, 3)
    elseif self.toggle2:GetIsOn() then
        self:ToggleControlBorS(Toggle2_Index, 5)
    elseif self.toggle3:GetIsOn() then
        self:ToggleControlBorS(Toggle3_Index, 7)
    end

    local openFlag = self:CheckToggleIsOpen()
    self.oneKeyConfig:SetActive(openFlag)
    
    self.oneKeyBg = self:AddComponent(UIButton, "RightPanel/layout/OneKey/ChoosePanel/OneKeyBg")
    self.oneKeyBg:SetOnClick(function()
        self:OneKeyConfigClick()
    end)
    self.holeImg = self:AddComponent(UIBaseContainer, "HoleImg")
    self.maskImg = self:AddComponent(UIImage, "HoleImg/MaskImg")
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    self.maskImg.rectTransform.sizeDelta = Vector2.New(Screen.width * scaleFactor, Screen.height * scaleFactor)

    self.holeImg:SetActive(false)
    
    self.exchangeBtn = self:AddComponent(UIButton, "BtnExchange")
    self.exchangeIcon = self:AddComponent(UIImage, "BtnExchange/BtnExchangeIcon")
    self.exchangeNum = self:AddComponent(UITextMeshProUGUIEx, "BtnExchange/BtnExchangeNum")
    self.exchangeText = self:AddComponent(UITextMeshProUGUIEx, "BtnExchange/BtnExchangeText")
    self.exchangeText:SetLocalText(110029)
    self.exchangeBtn:SetActive(false)
    self.exchangeBtn:SetOnClick(function()
        self:OnExchangeClick()
    end)
    self.emptyTip = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/EmptyTip")
    self.emptyTip:SetActive(false)
end

local function OnGetFoodItemByIndex(self, loopScroll, index)
    index = index + 1 --C#控件索引从0开始 
    if index < 1 or index > #self.dogFoodsList then
        return nil
    end

    local dt = self.dogFoodsList[index]

    --标题行-- titleLine
    if type(dt) == 'number' then
        local item = loopScroll:NewListViewItem('TitleLine_Food')
        local script = self.content_food:GetComponent(item.gameObject.name, UIHeroAdvanceListTitleLine)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end

            script = self.content_food:AddComponent(UIHeroAdvanceListTitleLine, objectName)
        end

        script:SetActive(true)
        script:SetData(dt)
        return item
    end

    --数据行
    local item = loopScroll:NewListViewItem('HeroRow_Food')
    local script = self.content_food:GetComponent(item.gameObject.name, UIHeroAdvanceListRow)
    if script == nil then
        local objectName = self:GetItemNameSequence()
        item.gameObject.name = objectName
        if (not item.IsInitHandlerCalled) then
            item.IsInitHandlerCalled = true
        end

        script = self.content_food:AddComponent(UIHeroAdvanceListRow, objectName)
    end

    script:SetActive(true)
    script:SetData(dt, BindCallback(self, self.OnCellClick), self.pointer, nil, nil, nil, index)

    --self.cells[index] = script
    return item
end

local function OnGetItemByIndex(self, loopScroll, index)
    index = index + 1 --C#控件索引从0开始 
    if index < 1 or index > #self.dataList then
        return nil
    end

    local dt = self.dataList[index]

    --标题行-- titleLine
    if type(dt) == 'number' then
        local item = loopScroll:NewListViewItem('TitleLine')
        local script = self.content:GetComponent(item.gameObject.name, UIHeroAdvanceListTitleLine)
        if script == nil then
            local objectName = self:GetItemNameSequence()
            item.gameObject.name = objectName
            if (not item.IsInitHandlerCalled) then
                item.IsInitHandlerCalled = true
            end

            script = self.content:AddComponent(UIHeroAdvanceListTitleLine, objectName)
        end

        script:SetActive(true)
        script:SetData(dt)
        return item
    end

    --数据行
    local item = loopScroll:NewListViewItem('HeroRow')
    local script = self.content:GetComponent(item.gameObject.name, UIHeroAdvanceListRow)
    if script == nil then
        local objectName = self:GetItemNameSequence()
        item.gameObject.name = objectName
        if (not item.IsInitHandlerCalled) then
            item.IsInitHandlerCalled = true
        end

        script = self.content:AddComponent(UIHeroAdvanceListRow, objectName)
    end

    script:SetActive(true)
    script:SetData(dt, BindCallback(self, self.OnCellClick), self.pointer, self.newHeroes, self.showAdvanceParticle,self.maxMasterAdvanceRarity, index)
    --self.cells[index] = script
    return item
end

local function OnCellClick(self, trans, heroUuid)
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    
    local fromType = UIHeroInfoView.FromType.HeroList
    local isArrow = nil
    if self.view.ctrl:GetArrow() == ArrowTypeHero.LvUpHero then
        isArrow = 1
        self.view.ctrl:SetArrow()
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, { anim = false }, fromType, heroUuid, self.pureDataList,nil,nil,isArrow)
end

local function ComponentDestroy(self)
    self.tabCamps = nil
    self.scroll_view_hero = nil
    self.objHero = nil
    self.imgQualityBg = nil
    self.imgCamp = nil
    --self.imgHeroRarity = nil
    self.textHeroName = nil
    self.textHeroNickName = nil
    self.btnAdvance = nil
    
    self.coreHeroSlot = nil
    self.consumeObjList = nil
    self.tabCamps = nil
    self.redPot = nil
    if self.openDelayTimer ~= nil then
        self.openDelayTimer:Stop()
        self.openDelayTimer = nil
    end
end

local function OnSwitchCamp(self, camp)
    --选中核心后切阵营无效
    if  HeroAdvanceController:GetInstance():GetAdvanceHeroUuid() ~= nil then
        self:OnCancelCore()
    end
    for k, tab in pairs(self.tabCamps) do
        tab.transform:Find("selected").gameObject:SetActive(k == camp)
        tab.transform:Find("normal").gameObject:SetActive(k ~= camp)
    end
    self.selectCamp = camp
    self:ResetRedPoint()
    self:ShowHeroScroll(true)
end

local function OnBtnAdvanceClick(self)
    if self.isSend == true then
        return
    end
    
    if not HeroAdvanceController:GetInstance():IsConsumeFull() then
        return
    end
    
    local function Confirm()
        local coreHeroUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
        local consumeMap = HeroAdvanceController:GetInstance():GetCurConsumeMap()

        local data = DataCenter.HeroDataManager:GetHeroByUuid(coreHeroUuid)
        if not data.isMaster then
            --SFSNetwork.SendMessage(MsgDefines.HeroAdvance, coreHeroUuid, table.values(consumeMap))
            if self.view.ctrl:DoWhenAdvance(coreHeroUuid, table.values(consumeMap)) then
                self.isSend = true
            end
            return 
        end
        
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvanceDetail, function()
            local coreHeroUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
            local consumeMap = HeroAdvanceController:GetInstance():GetCurConsumeMap()
            self.view.ctrl:DoWhenAdvance(coreHeroUuid, table.values(consumeMap))
            --发送进阶消息
            --SFSNetwork.SendMessage(MsgDefines.HeroAdvance, coreHeroUuid, table.values(consumeMap))
        end)
    end
    
    local function OptimalCheck()
        local coreHeroUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
        local coreHeroData = DataCenter.HeroDataManager:GetHeroByUuid(coreHeroUuid)
        local rarity = coreHeroData.rarity
        local nextQuality = coreHeroData.quality + 1

        if rarity ~=  HeroUtils.RarityType.S and rarity ~= HeroUtils.RarityType.A then
            Confirm()
            return
        end
        
        local ret, uuid = DataCenter.HeroDataManager:IsTheOptimalHeroInSameId(coreHeroData)
        if ret then
            Confirm()
            return
        end

        local optimalHeroData = DataCenter.HeroDataManager:GetHeroByUuid(uuid)

        --当玩家拥有[橙]品质以上的【S】将时，狗粮不能再进阶到【橙】品质以上
        local express1 = rarity == HeroUtils.RarityType.S and optimalHeroData.quality > 6 and nextQuality > 6
        --当玩家拥有红+品质以上的A将时，狗粮不能再进阶到红+品质以上
        local express2 = rarity == HeroUtils.RarityType.A and optimalHeroData.quality > 9 and nextQuality > 9
        
        --当玩家拥有红+品质以上的a将时，狗粮不能再进阶到红+品质以上
        if express1 or express2 then
            local heroName = string.format("<color='%s'>%s</color>", HeroUtils.GetRarityColorStr(optimalHeroData.rarity), optimalHeroData:GetName())
            UIUtil.ShowMessage(Localization:GetString("129127", heroName), 1, GameDialogDefine.CONFIRM)
            return
        end
        
        --当玩家此heroId的最佳英雄是紫+品质以上的s或a将时，相同英雄进阶到紫+品质以上时进行提示
        if optimalHeroData.quality > 5 and nextQuality > 5 then
            local heroName = string.format("<color='%s'>%s</color>", HeroUtils.GetRarityColorStr(optimalHeroData.rarity), optimalHeroData:GetName())
            UIUtil.ShowMessage(Localization:GetString("129126", heroName), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, Confirm)
            return
        end

        Confirm()
    end
    
    --狗粮稀有度检查
    local function CheckRarityOfConsume()
        --检查是否有s或a级其他英雄被消耗
        local ret, str = HeroAdvanceController:GetInstance():HasRaritySOrAHeroInConsume()
        if ret then
            --UIUtil.ShowMessage(Localization:GetString('129128', str), 2, '', '', OptimalCheck)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvanceRarityConfirm, OptimalCheck)
        else
            OptimalCheck()
        end
    end

    --检查是否有驻扎英雄被消耗
    local ret, _, buildNames = HeroAdvanceController:GetInstance():HasStationedHeroInConsume()
    if ret then
        local buildName = buildNames[1]
        UIUtil.ShowMessage(Localization:GetString("162011", buildName), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, CheckRarityOfConsume)
    else
        CheckRarityOfConsume()
    end
end



local function ShowHeroScroll(self, needReGenerate, newHeroes)
    self.scroll_view_food:SetActive(false)
    self.scroll_view_hero:SetActive(true)
    self.exchangeBtn:SetActive(false)

    if not needReGenerate then
        self.oneKey:SetActive(self.dataList and table.count(self.dataList) > 0)
        self.emptyTip:SetActive(self.dataList and table.count(self.dataList) == 0)

        return
    end
    newHeroes = newHeroes or {}
    self.newHeroes = newHeroes
    self.showAdvanceParticle = {}
    self.dataList, self.pointer, self.maxMasterAdvanceRarity = self.view.ctrl:GetHeroListByCamp(self.selectCamp, 4, self.isAdvanceGuide, self.advanceGuideQuality)
    local showIndex = 0
    local diffY = 0
    local heroNum = table.count(self.dataList)
    self.emptyTip:SetActive(heroNum == 0)
    self.emptyTip:SetLocalText(400113)
    self.oneKey:SetActive(heroNum > 0)

    if table.count(newHeroes) > 0 then
        for k, v in ipairs(self.dataList) do
            if type(v) ~= 'number' then
                for _, hero in ipairs(v) do
                    if newHeroes[hero.uuid] ~= nil then
                        showIndex = k - 1
                        diffY = 70
                        goto continue
                    end
                end
            end
        end
        ::continue::
    end
    showIndex = math.max(0, showIndex)
    local dataCount = table.count(self.dataList)
    --print("#zlh# dataCount:" .. dataCount)
    --local index = 0
    --local showIndex = 0
    --local diffY = 0
    --local screenSizeH = Screen.height
    --local scale = screenSizeH / 750.0
    --if needKeepPos == true then
    --    local scrollViewPosY = self.scroll_view_hero.transform.position.y + self.scroll_view_hero.rectTransform.rect.height * scale / 2
    --    while index < dataCount do
    --        local item = self.scroll_view_hero:GetShownItemByItemIndex(index)
    --        if item ~= nil then
    --            local itemPos = item.transform.position
    --            diffY = (scrollViewPosY - itemPos.y) / scale
    --            if diffY > 0 then
    --                showIndex = index
    --                break
    --            end
    --        end
    --        index = index + 1
    --    end
    --end
    
    self:RefreshOneKeyBtn()
    if self.oneKey:GetActive() then
        self.textTip1:SetActive(false)
    else
        self.textTip1:SetActive(true)
    end
    
    self.scroll_view_hero:SetListItemCount(dataCount, false, false)
    self.scroll_view_hero:MovePanelToItemIndex(showIndex, math.abs(diffY))
end

local function ClearHeroScroll(self)
    self.content:RemoveComponents(UIHeroAdvanceListRow)
    self.content:RemoveComponents(UIHeroAdvanceListTitleLine)
    self.scroll_view_hero:ClearAllItems()
end

local function ShowFoodScroll(self)
    self.scroll_view_hero:SetActive(false)
    self.scroll_view_food:SetActive(true)
    self.oneKey:SetActive(false)
    self:RefreshExchangeBtn()
    
    self.dogFoodsList, self.minRarity = self.view.ctrl:GetDogFoods(4)
    local foodsCount = table.count(self.dogFoodsList)
    self.emptyTip:SetActive(foodsCount <= 2)
    self.emptyTip:SetLocalText(121547)
    
    self.scroll_view_food:SetListItemCount(foodsCount, false, false)
    self.scroll_view_food:RefreshAllShownItem()
end

local function RefreshExchangeBtn(self)
    --local coreHeroData = HeroAdvanceController:GetInstance():GetAdvanceHeroData()
    --if coreHeroData == nil or coreHeroData.rarity ~= HeroUtils.RarityType.S then
    --    self.exchangeBtn:SetActive(false)
    --    return
    --end
    --local goodsList = DataCenter.CommonShopManager:GetGoodsListByShopType(CommonShopType.HeroReset)
    --local isInShop = false
    --if goodsList ~= nil and coreHeroData ~= nil then
    --    for _, good in ipairs(goodsList) do
    --        if not string.IsNullOrEmpty(good.hero) and toInt(good.hero) == coreHeroData.heroId then
    --            isInShop = true
    --            break
    --        end
    --    end
    --end
    --if not isInShop then
    --    self.exchangeBtn:SetActive(false)
    --    return
    --end
    --local isEmpty = true
    --local type99Items = DataCenter.ItemTemplateManager:GetTypeListByType(GOODS_TYPE.GOODS_TYPE_99)
    --for _, v in ipairs(type99Items) do
    --    if toInt(v.para2) == coreHeroData.heroId then
    --        local count = DataCenter.ItemData:GetItemCount(v.id)
    --        self.exchangeNum:SetText(string.GetFormattedSeperatorNum(count))
    --        self.exchangeIcon:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(tonumber(v.id)))
    --        isEmpty = false
    --        break
    --    end
    --end
    --if coreHeroData == nil then
    --    isEmpty = true
    --end
    --self.exchangeBtn:SetActive(not isEmpty)
end

local function ClearFoodScroll(self)
    self.content_food:RemoveComponents(UIHeroAdvanceListRow)
    self.content_food:RemoveComponents(UIHeroAdvanceListTitleLine)
    self.scroll_view_food:ClearAllItems()
end


local function DataDefine(self)
    self.selectCamp = 2
    self.newHeroes = {}
    self.showAdvanceParticle = {}
    self.isAdvanceGuide = false
    self.isSend = false
    self.advanceGuideQuality = nil
    self:ResetRedPoint()
end

local function DataDestroy(self)
    self.selectCamp = nil
    self.isAdvanceGuide = false
    self.advanceGuideQuality = nil
    self.curSelectCell = nil
    self.isSend = nil
end

local function OnEnable(self)
    base.OnEnable(self)

    HeroAdvanceController:GetInstance():SetAdvanceHeroUuid(nil)
    local camp = self:GetDefaultCamp()
    self:OnSwitchCamp(camp)
    self.objHero:SetActive(false)
    self.view.hero_image:SetActive(false)
    
    self.btnAdvance:SetActive(false)
    if self.oneKey:GetActive() then
        self.textTip1:SetActive(false)
    else
        self.textTip1:SetActive(true)
    end
    
    --UIGray.SetGray(self.btnAdvance.transform, true, false)
end

local function GetDefaultCamp(self)
    local camp = 2
    local guide = true
    if guide then
        if not HeroAdvanceController:GetInstance():GetRedPointState(camp) then
            for k, v in pairs(self.redPot) do
                if v ~= nil then
                    local showStatus = HeroAdvanceController:GetInstance():GetRedPointState(k)
                    if showStatus then
                        camp = k
                        break
                    end
                end
            end
        end
    end
    return camp
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function SetAllCellsDestroy(self)
    self:ClearHeroScroll()
    self:ClearFoodScroll()
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.HeroAdvanceSuccess, self.OnHeroAdvanceSuccess)
    self:AddUIListener(EventId.OnAdvanceSuccessClosed, self.OnAdvanceSuccessClosed)
    self:AddUIListener(EventId.OnOneKeyAdvanceSuccess, self.OnOneKeyAdvanceSuccessHandler)
    self:AddUIListener(EventId.OnOneKeyAdvanceSuccessClosed, self.OnOneKeyAdvanceSuccessClosedHandler)
    self:AddUIListener(EventId.HeroAdvanceGuide, self.DoHeroAdvanceGuide)
    self:AddUIListener(EventId.OnBuyCommonGoodsSucc, self.OnHeroStationUpdate)

end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnBuyCommonGoodsSucc, self.OnHeroStationUpdate)
    self:RemoveUIListener(EventId.HeroAdvanceSuccess, self.OnHeroAdvanceSuccess)
    self:RemoveUIListener(EventId.OnAdvanceSuccessClosed, self.OnAdvanceSuccessClosed)
    self:RemoveUIListener(EventId.OnOneKeyAdvanceSuccess, self.OnOneKeyAdvanceSuccessHandler)
    self:RemoveUIListener(EventId.OnOneKeyAdvanceSuccessClosed, self.OnOneKeyAdvanceSuccessClosedHandler)
    self:RemoveUIListener(EventId.HeroAdvanceGuide, self.DoHeroAdvanceGuide)

    base.OnRemoveListener(self)
end

local function OnHeroStationUpdate(self)
    if self.scroll_view_food:GetActive() then
        self:ShowFoodScroll()
    end
end

local function RefreshOneKeyBtn(self)
    self.oneKeyConfig:SetActive(self:CheckToggleIsOpen())
end
--- 刷新英雄相关显示 模型、名称、消耗slot
local function UpdateHeroDisplay(self)
    local coreHeroData = HeroAdvanceController:GetInstance():GetAdvanceHeroData()
    local isEmpty = coreHeroData == nil
    self.objHero:SetActive(not isEmpty)
    
    if isEmpty then
        self.view.hero_image:SetActive(false)
        self:RefreshOneKeyBtn()
        self.textTip1:SetLocalText(129124)
        self.btnAdvance:SetActive(false)
        self.btnGetMore:SetActive(false)
        if self.oneKey:GetActive() then
            self.textTip1:SetActive(false)
        else
            self.textTip1:SetActive(true)
        end
        return
    end
    local curAdvanceUuid = coreHeroData.uuid

    self.imgQualityBg:LoadSprite(HeroUtils.GetQualityBgPath(coreHeroData.quality))
    local campType = GetTableData(HeroUtils.GetHeroXmlName(), coreHeroData.heroId, "camp")
    self.imgCamp:LoadSprite(HeroUtils.GetCampIconPath(campType))
    self.textHeroName:SetLocalText(coreHeroData.config["name"])
    self.textHeroNickName:SetLocalText(coreHeroData.config["desc"])
    
    self.nodeStarBox:SetActive(coreHeroData.quality > HeroUtils.HeroColorCount)
    if coreHeroData.quality > HeroUtils.HeroColorCount then
        for i=1, HeroUtils.HeroStarMax do
            local star = self.nodeStarBox.transform:Find("star".. i)
            star.gameObject:SetActive(coreHeroData.quality >= HeroUtils.HeroColorCount + i)
        end
    end

    self.coreHeroSlot:SetData(curAdvanceUuid, nil ,nil , true)
    --self.coreHeroSlot:SetCampActive(false)
    local consumeDataMap = DeepCopy(HeroAdvanceController:GetInstance():GetCurConsumeMap())
    local requireNum = HeroAdvanceController:GetInstance():GetCurAdvanceRequireNum()
    local consume = coreHeroData:GetAdvanceConsume()
    local sameHeroQuality, sameHeroNum = consume:GetConditionByType(HeroAdvanceConsumeType.ConsumeType_Same_Hero)
    local sameCampQuality, sameCampNum = consume:GetConditionByType(HeroAdvanceConsumeType.ConsumeType_Same_Camp)
    sameHeroNum = sameHeroNum or 0
    sameCampNum = sameCampNum or 0
    
    for k=1, requireNum do
        local slot = self.consumeObjList[k]
        if k <= sameHeroNum then
            slot:SetData(consumeDataMap[k], HeroAdvanceConsumeType.ConsumeType_Same_Hero, sameHeroQuality)
        else
            slot:SetData(consumeDataMap[k], HeroAdvanceConsumeType.ConsumeType_Same_Camp, sameCampQuality)
        end
        slot:SetActive(true)
    end

    for k=requireNum+1, HeroUtils.ConsumeSlotMax do
        self.consumeObjList[k]:SetActive(false)
    end

    local isFull = HeroAdvanceController:GetInstance():IsConsumeFull()

    self.btnAdvance:SetActive(isFull)
    self.btnGetMore:SetActive(not isFull and sameHeroNum > 0 and self.pointer and self.pointer[curAdvanceUuid] == nil)
    self.textTip1:SetActive(not self.btnAdvance:GetActive() and not self.btnGetMore:GetActive())
    self.textTip1:SetLocalText(isEmpty and 129124 or 129130)
    
    UIGray.SetGray(self.btnAdvance.transform, not isFull, isFull)
    if self.openDelayTimer ~= nil then
        self.openDelayTimer:Stop()
        self.openDelayTimer = nil
    end
    if isFull and coreHeroData.isMaster then
        self.btnAdvance:SetActive(false)
    --if isFull then
        self.openDelayTimer = TimerManager:GetInstance():DelayInvoke(function()
            local consumeDataMap = HeroAdvanceController:GetInstance():GetCurConsumeMap()
            if consumeDataMap ~= nil and table.count(consumeDataMap) > 0 then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvanceSuccess, HeroAdvanceController:GetInstance():GetAdvanceHeroUuid())
                self.view:OnAdvanceSuccessShown()
                self.objHero:SetActive(false)
                self:HideAdvanceHeroHoleImg()
            end
            if self.openDelayTimer ~= nil then
                self.openDelayTimer:Stop()
                self.openDelayTimer = nil
            end
        end, 0.6)
    end
end

local function OnHeroCellClick(self, trans, heroUuid)
    print("#zlh# OnHeroCellClick clicked! heroUuid:" .. heroUuid)
end

--- 选择升阶核心
local function OnSelectCore(self, heroUuid)
    print("#zlh# OnSelectCore")
    HeroAdvanceController:GetInstance():SetAdvanceHeroUuid(heroUuid)
    self.newHeroes = {}
    self.showAdvanceParticle = {}
    EventManager:GetInstance():Broadcast(EventId.HideAdvanceNew)
    --刷新heroView
    self:UpdateHeroDisplay()
    local coreHeroData = HeroAdvanceController:GetInstance():GetAdvanceHeroData()
    self.view.hero_image:SetActive(true)
    self.view.hero_image:LoadSprite(HeroUtils.GetHeroIconPath(coreHeroData.heroId, true))
    
    --需求改为只显示狗粮
    self:ShowFoodScroll()
end

--- 取消选择升阶核心
local function OnCancelCore(self)
    print("#zlh# OnCancelCore")
    HeroAdvanceController:GetInstance():SetAdvanceHeroUuid(nil)
    --刷新heroView
    self:UpdateHeroDisplay()
    --狗粮列表转英雄列表
    self:ShowHeroScroll(false)
    if self.openDelayTimer ~= nil then
        self.openDelayTimer:Stop()
        self.openDelayTimer = nil
    end
end

--- 选择、取消选择升阶狗粮
local function OnToggleDogFood(self, dogFoodUuid)
    print("#zlh# OnToggleDogFood")
    HeroAdvanceController:GetInstance():OnToggleDogFood(dogFoodUuid)
    --self.scroll_view_hero:RefreshCells()
    --self.scroll_view_food:RefreshCells()
    self.scroll_view_food:RefreshAllShownItem()
    self:UpdateHeroDisplay()
end

--- 英雄进阶成功回调
local function OnHeroAdvanceSuccess(self, message)
    print("#zlh# UIHeroPageAdvance OnHeroAdvanceSuccess!")
    self.isSend = false
    local coreHeroUuid = nil
    if message ~= nil and message['heroInfo'] ~= nil then
        coreHeroUuid = message['heroInfo'].uuid
    end
    local newHeroes = {}
    local data = DataCenter.HeroDataManager:GetHeroByUuid(coreHeroUuid)
    if coreHeroUuid ~= nil then
        newHeroes[coreHeroUuid] = 1
    end
    self:ShowHeroScroll(true, newHeroes)
    if data ~= nil and not message["isPreMaster"] then
        self:UpdateHeroDisplay()
        self:ResetRedPoint()
    else
        self.objHero:SetActive(false)
        self:ResetRedPoint()
    end
end

local function OnAdvanceSuccessClosed(self)
    print("#zlh# UIHeroPageAdvance OnAdvanceSuccessClosed!")
    local coreHeroData = HeroAdvanceController:GetInstance():GetAdvanceHeroData()
    self:UpdateHeroDisplay()

    if coreHeroData ~= nil then
        self.scroll_view_food:RefreshAllShownItem()
    else
        self:ShowHeroScroll(false)
        self:ResetRedPoint()
    end
end

local function OnOneKeyAdvanceSuccessHandler(self, message)
    local newHeroes = {}
    if message['heros'] ~= nil then
        table.walk(message['heros'], function (k, v)
            newHeroes[v.uuid] = 1
        end)
    end

    self:ShowHeroScroll(true, newHeroes)
    self:UpdateHeroDisplay()
    self:ResetRedPoint()
    self.rightPanel:SetActive(false)
end

local function OnOneKeyAdvanceSuccessClosedHandler(self)
    self.rightPanel:SetActive(true)
end

local function ResetRedPoint(self)
    if self.redPot == nil then
        return
    end
    for k, v in pairs(self.redPot) do
        if v ~= nil then
            local showStatus = HeroAdvanceController:GetInstance():GetRedPointState(k)
            v:SetActive(showStatus)
        end
    end
end
local function GetItemNameSequence(self)
    NameCount = NameCount + 1
    return tostring(NameCount)
end

local function GetEat(self, heroData, currentQuality, toQuality, dogFoodsList, eatList, tmpEatList, exceptList, tmpExceptList)
    if currentQuality == toQuality then
        return true, {}
    end
    local advanceData = self:GetAdvanceReqData(HeroUtils.GetConfigQuality(heroData.heroId, currentQuality))
    tmpExceptList[heroData.uuid] = 1
    local tmp = {}
    if advanceData ~= nil then
        local sameHeroQuality, sameHeroNum = advanceData:GetConditionByType(HeroAdvanceConsumeType.ConsumeType_Same_Hero)
        local sameCampQuality, sameCampNum = advanceData:GetConditionByType(HeroAdvanceConsumeType.ConsumeType_Same_Camp)
        sameHeroNum = sameHeroNum or 0
        sameCampNum = sameCampNum or 0
        local currentSameHeroNum = 0
        local currentSameCampNum = 0
        for _, v in ipairs(dogFoodsList) do
            if currentSameHeroNum == sameHeroNum and currentSameCampNum == sameCampNum then
                break
            end
            --if eatList[v.uuid] == nil and tmpEatList[v.uuid] == nil and exceptList[v.uuid] == nil and tmpExceptList[v.uuid] == nil and heroData.rarity <= v.rarity then
            if eatList[v.uuid] == nil and tmpEatList[v.uuid] == nil and exceptList[v.uuid] == nil and tmpExceptList[v.uuid] == nil then
                if currentSameHeroNum < sameHeroNum and heroData.heroId == v.heroId and sameHeroQuality == v.quality then
                    tmpEatList[v.uuid] = 1
                    currentSameHeroNum = currentSameHeroNum + 1
                    tmp[v.uuid] = 1
                    goto continue
                end
                --if currentSameCampNum < sameCampNum and sameCampQuality == v.quality and v.rarity == HeroUtils.RarityType.C then
                if currentSameCampNum < sameCampNum and sameCampQuality == v.quality then
                    tmpEatList[v.uuid] = 1
                    tmp[v.uuid] = 1
                    currentSameCampNum = currentSameCampNum + 1
                    goto continue
                end
            end
            ::continue::
        end

        if currentSameHeroNum == sameHeroNum and currentSameCampNum == sameCampNum then
            local result, arr = self:GetEat(heroData, currentQuality + 1, toQuality, dogFoodsList, eatList, tmpEatList, exceptList, tmpExceptList)
            table.walk(arr, function (k, v)
                tmp[k] = v
            end)
            if result == false then
                table.walk(tmp, function (k, v)
                    tmpEatList[k] = nil
                end)
            end

            return result, tmp
        else
            for _, v in ipairs(dogFoodsList) do
                if currentSameHeroNum == sameHeroNum and currentSameCampNum == sameCampNum then
                    break
                end
                --蓝绿可以互吃了，rarity判断去掉
                --if eatList[v.uuid] == nil and tmpEatList[v.uuid] == nil and exceptList[v.uuid] == nil and tmpExceptList[v.uuid] == nil and heroData.rarity <= v.rarity then
                if eatList[v.uuid] == nil and tmpEatList[v.uuid] == nil and exceptList[v.uuid] == nil and tmpExceptList[v.uuid] == nil then
                    if currentSameHeroNum < sameHeroNum and heroData.heroId == v.heroId and sameHeroQuality > v.quality then
                        local findResult, arr = self:GetEat(v, v.quality, sameHeroQuality, dogFoodsList, eatList, tmpEatList, exceptList, tmpExceptList)
                        table.walk(arr, function (k, v)
                            tmp[k] = v
                        end)

                        if findResult == true then
                            currentSameHeroNum = currentSameHeroNum + 1
                            tmpEatList[v.uuid] = 1
                            tmp[v.uuid] = 1
                        end
                    end
                    --if currentSameCampNum < sameCampNum and sameCampQuality > v.quality and v.rarity == HeroUtils.RarityType.C then
                    if currentSameCampNum < sameCampNum and sameCampQuality > v.quality then
                        local findResult, arr = self:GetEat(v, v.quality, sameCampQuality, dogFoodsList, eatList, tmpEatList, exceptList, tmpExceptList)
                        table.walk(arr, function (k, v)
                            tmp[k] = v
                        end)

                        if findResult == true then
                            currentSameCampNum = currentSameCampNum + 1
                            tmpEatList[v.uuid] = 1
                            tmp[v.uuid] = 1
                        end
                    end
                end
            end

            if currentSameHeroNum < sameHeroNum or currentSameCampNum < sameCampNum then
                table.walk(tmp, function (k, v)
                    tmpEatList[k] = nil
                end)

                return false, tmp 
            else
                local result, arr = self:GetEat(heroData, currentQuality + 1, toQuality, dogFoodsList, eatList, tmpEatList, exceptList, tmpExceptList)
                table.walk(arr, function (k, v)
                    tmp[k] = v
                end)
                if result == false then
                    table.walk(tmp, function (k, v)
                        tmpEatList[k] = nil
                    end)
                end
                return result, tmp
            end
        end
    end
    table.walk(tmp, function (k, v)
        tmpEatList[k] = nil
    end)

    return false, tmp
end

local function OnOneKeyBtnAdvanceClick(self, quality)
    local result = {}
    local heroes1 = {}
    local heroes2 = {}
    local allHeroes = DataCenter.HeroDataManager:GetAllHeroList()
    local heroes = table.values(allHeroes)
    local campType = nil

    for _, heroData in pairs(heroes) do
        campType = GetTableData(HeroUtils.GetHeroXmlName(), heroData.heroId, "camp")
        if campType ~= self.selectCamp then
            goto continue
        end
        if heroData.isMaster then
            goto continue
        end
        if heroData.rarity == HeroUtils.RarityType.S or heroData.rarity == HeroUtils.RarityType.A then
            goto continue
        end
        if not self.blueHero and heroData.rarity == HeroUtils.RarityType.B then
            goto continue
        end
        if heroData.quality < quality and quality <= heroData:GetMaxQuality() then
            table.insert(heroes1, heroData)
        end

        table.insert(heroes2, heroData)

        ::continue::
    end

    table.sort(heroes1, function (k, v)
        if k.rarity ~= v.rarity then
            return k.rarity > v.rarity
        end
        if k.quality ~= v.quality then
            return k.quality > v.quality
        end
    end)
    
    table.sort(heroes2, function (k, v)
        if k.rarity ~= v.rarity then
            return k.rarity < v.rarity
        end
        if k.quality ~= v.quality then
            return k.quality > v.quality
        end
    end)
    
    local index = 1
    local total = #heroes1

    local eatList = {}
    local exceptList = {}
    local tmpExceptList = {}
    local tmpEatList = {}
    local findNum = 0
    while index <= total do
        local data = heroes1[index]
        tmpExceptList = {}
        tmpEatList = {}
        if exceptList[data.uuid] == nil then
            local eatResult = self:GetEat(data, data.quality, quality, heroes2, eatList, tmpEatList, exceptList, tmpExceptList)
            if eatResult == true then
                table.walk(tmpEatList, function (k, v)
                    eatList[k] = 1
                    exceptList[k] = 1
                end)

                result[data.uuid] = tmpEatList
                exceptList[data.uuid] = 1
                findNum = findNum + 1
            end
        end
        index = index + 1
    end

    if table.count(result) > 0 then
        local panelStr = ""
        if self.blueHero then
            panelStr = Localization:GetString("129239", Mathf.Round((quality - 1) / 2))
        else
            panelStr = Localization:GetString("129238", Mathf.Round((quality - 1) / 2))
        end
        UIUtil.ShowMessage(panelStr, 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
            SFSNetwork.SendMessage(MsgDefines.HeroAdvanceMulti, quality, result)
        end)
    else
        UIUtil.ShowTipsId(129235)
    end
end

local function GetAdvanceReqData(self, configQuality)
    if AdvanceReqDatas[configQuality] ~= nil then
        return AdvanceReqDatas[configQuality]
    end
    local data = AdvanceReqData.New(configQuality)
    AdvanceReqDatas[configQuality] = data
    return data
end

local function OneKeyConfigClick(self)
    self.choosePanel:SetActive(not self.choosePanel:GetActive())    
end

local function ToggleControlBorS(self, selectToggleIndex, quality)
    local flag = self:CheckToggleIsOpen(selectToggleIndex)
    if not flag then
        return
    end
    self.oneKeyQuality = quality
    self.currentToggle = selectToggleIndex
    --if self.currentToggle == Toggle3_Index then
    --    self.blueHero = true
    --else
    --    self.blueHero = false
    --end
end

local function CheckToggleIsOpen(self)
    local effect = Mathf.Round(LuaEntry.Effect:GetGameEffect(EffectDefine.HERO_ONE_KEY_OPEN))
    return effect > 0
end

local function ShowOneKeyCondition(self)
    local allVip = DataCenter.VIPTemplateManager:GetAllTemplate()
    for _, k in pairs(allVip) do
        for _, v in ipairs(k.display) do
            if tonumber(v) == EffectDefine.HERO_ONE_KEY_OPEN then
                UIUtil.ShowMessage(Localization:GetString("129248", tostring(k.level)),2, "110003", GameDialogDefine.CANCEL, function()
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIVip,{ anim = true, hideTop = true}, k.level)
                end)
                return
            end
        end
    end
end

local function ShowFirstAdvanceHeroHoleImg(self)
    local btn = self:GetGuideCoreBtn()
    if btn ~= nil then
        self.holeImg:SetActive(true)
        self.holeImg.transform:Set_position(btn.transform:Get_position())
        self.maskImg.transform:Set_position(ResetPosition)
    end
end

local function ShowFirstDogFoodHoleImg(self)
    local btn = self:GetGuideDogFoodBtn()
    if btn ~= nil then
        self.holeImg:SetActive(true)
        self.holeImg.transform:Set_position(btn.transform:Get_position())
        self.maskImg.transform:Set_position(ResetPosition)
    end
end

local function GetGuideCoreBtn(self)
    local curAdvanceUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
    if curAdvanceUuid ~= nil and curAdvanceUuid ~= 0 then
        return nil
    end
    local components = self.content:GetComponents(UIHeroAdvanceListRow)
    local btn = nil
    table.sort(components, function (k, v)
        return toInt(k.index) < toInt(v.index)
    end)
    if components then
        for _, v in ipairs(components) do
            local tmpBtn = v:GetHeroCellAdvanceGuideBtn(self.pointer)
            if tmpBtn ~= nil then
                btn = tmpBtn
                break
            end
        end
    end
    return btn
end

local function GetGuideDogFoodBtn(self)
    local curAdvanceUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
    if curAdvanceUuid == nil or curAdvanceUuid ==  0 then
        return nil
    end
    local components = self.content_food:GetComponents(UIHeroAdvanceListRow)
    local btn = nil
    table.sort(components, function (k, v)
        return toInt(k.index) < toInt(v.index)
    end)
    if components then
        for _, v in ipairs(components) do
            local tmpBtn = v:GetDogFoodGuideBtn(self.pointer)
            if tmpBtn ~= nil then
                btn = tmpBtn
                break
            end
        end
    end
    return btn
end


local function HideAdvanceHeroHoleImg(self)
    self.holeImg:SetActive(false)
end

local function DoHeroAdvanceGuide(self, param)
    local eventType = param["eventType"]
    local quality = param["quality"]
    if eventType == HeroAdvanceGuideSignalType.Enter then
        self.isAdvanceGuide = true
        self.advanceGuideQuality = quality
        local camp = self:GetDefaultCamp()
        if self.selectCamp == camp then
            self:ShowHeroScroll(true)
        else
            self:OnSwitchCamp(camp)
        end
    elseif eventType == HeroAdvanceGuideSignalType.ShowMainHeroBlack then
        self:ShowFirstAdvanceHeroHoleImg()
    elseif eventType == HeroAdvanceGuideSignalType.HideMainHeroBlack then
        self.isAdvanceGuide = false
        self.advanceGuideQuality = nil
        self:HideAdvanceHeroHoleImg()
    elseif eventType == HeroAdvanceGuideSignalType.ShowSubHeroBlack then
        self:ShowFirstDogFoodHoleImg()
    elseif eventType == HeroAdvanceGuideSignalType.HideSubHeroBlack then
        self:HideAdvanceHeroHoleImg()
    end
end

local function OnExchangeClick(self)
    local goodsList = DataCenter.CommonShopManager:GetGoodsListByShopType(CommonShopType.HeroReset)
    local coreHeroData = HeroAdvanceController:GetInstance():GetAdvanceHeroData()
    if goodsList ~= nil and coreHeroData ~= nil then
        for _, good in ipairs(goodsList) do
            if not string.IsNullOrEmpty(good.hero) and toInt(good.hero) == coreHeroData.heroId then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroExchange, {anim = true}, good)
                break
            end
        end
    end
end

local function OnGetMoreClick(self)
    local coreHeroData = HeroAdvanceController:GetInstance():GetAdvanceHeroData()
    if coreHeroData ~= nil then
        DataCenter.HeroLackTipManager:GotoGetHero(coreHeroData.heroId)
    end
end

UIHeroPageAdvance.GetGuideCoreBtn = GetGuideCoreBtn
UIHeroPageAdvance.GetGuideDogFoodBtn = GetGuideDogFoodBtn
UIHeroPageAdvance.OnCreate= OnCreate
UIHeroPageAdvance.OnDestroy = OnDestroy
UIHeroPageAdvance.OnEnable = OnEnable
UIHeroPageAdvance.OnDisable = OnDisable
UIHeroPageAdvance.OnAddListener = OnAddListener
UIHeroPageAdvance.OnRemoveListener = OnRemoveListener
UIHeroPageAdvance.ComponentDefine = ComponentDefine
UIHeroPageAdvance.ComponentDestroy = ComponentDestroy
UIHeroPageAdvance.DataDefine = DataDefine
UIHeroPageAdvance.DataDestroy = DataDestroy
UIHeroPageAdvance.SetAllCellsDestroy = SetAllCellsDestroy
UIHeroPageAdvance.ShowOneKeyCondition = ShowOneKeyCondition
UIHeroPageAdvance.ShowHeroScroll = ShowHeroScroll
UIHeroPageAdvance.ClearHeroScroll = ClearHeroScroll
UIHeroPageAdvance.OnGetMoreClick = OnGetMoreClick
UIHeroPageAdvance.ShowFoodScroll = ShowFoodScroll
UIHeroPageAdvance.ClearFoodScroll = ClearFoodScroll
UIHeroPageAdvance.GetEat = GetEat

UIHeroPageAdvance.OnSwitchCamp = OnSwitchCamp
UIHeroPageAdvance.OnBtnAdvanceClick = OnBtnAdvanceClick

UIHeroPageAdvance.UpdateHeroDisplay = UpdateHeroDisplay
UIHeroPageAdvance.OnHeroCellClick = OnHeroCellClick
UIHeroPageAdvance.OnSelectCore = OnSelectCore
UIHeroPageAdvance.OnCancelCore = OnCancelCore
UIHeroPageAdvance.OnToggleDogFood = OnToggleDogFood
UIHeroPageAdvance.OnHeroAdvanceSuccess = OnHeroAdvanceSuccess
UIHeroPageAdvance.OnAdvanceSuccessClosed = OnAdvanceSuccessClosed
UIHeroPageAdvance.ResetRedPoint = ResetRedPoint
UIHeroPageAdvance.OnGetItemByIndex = OnGetItemByIndex
UIHeroPageAdvance.OnGetFoodItemByIndex = OnGetFoodItemByIndex
UIHeroPageAdvance.GetItemNameSequence = GetItemNameSequence
UIHeroPageAdvance.OnCellClick = OnCellClick
UIHeroPageAdvance.OnOneKeyBtnAdvanceClick = OnOneKeyBtnAdvanceClick
UIHeroPageAdvance.RefreshOneKeyBtn = RefreshOneKeyBtn
UIHeroPageAdvance.OnOneKeyAdvanceSuccessHandler = OnOneKeyAdvanceSuccessHandler
UIHeroPageAdvance.OnOneKeyAdvanceSuccessClosedHandler = OnOneKeyAdvanceSuccessClosedHandler
UIHeroPageAdvance.GetAdvanceReqData = GetAdvanceReqData
UIHeroPageAdvance.OneKeyConfigClick = OneKeyConfigClick
UIHeroPageAdvance.ToggleControlBorS = ToggleControlBorS
UIHeroPageAdvance.CheckToggleIsOpen = CheckToggleIsOpen
UIHeroPageAdvance.ShowFirstAdvanceHeroHoleImg = ShowFirstAdvanceHeroHoleImg
UIHeroPageAdvance.HideAdvanceHeroHoleImg = HideAdvanceHeroHoleImg
UIHeroPageAdvance.GetDefaultCamp = GetDefaultCamp
UIHeroPageAdvance.ShowFirstDogFoodHoleImg = ShowFirstDogFoodHoleImg
UIHeroPageAdvance.DoHeroAdvanceGuide = DoHeroAdvanceGuide
UIHeroPageAdvance.OnHeroStationUpdate = OnHeroStationUpdate
UIHeroPageAdvance.RefreshExchangeBtn = RefreshExchangeBtn
UIHeroPageAdvance.OnExchangeClick = OnExchangeClick

return UIHeroPageAdvance