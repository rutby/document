---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/2/21 4:55 PM
---

local UIHeroPageReset = BaseClass("UIHeroPageReset", UIBaseContainer)
local base = UIBaseContainer
local UIHeroResetCell = require("UI.UIHero2.UIHeroAdvance.Component.UIHeroResetCell")
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"

local Localization = CS.GameEntry.Localization
local ColCountPerRow = 4


local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:SetAllCellsDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.scroll_view = self:AddComponent(UIScrollView, "RightPanel/Align/ScrollView")
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)

    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)

    self.content = self:AddComponent(UIBaseContainer, "RightPanel/Align/ScrollView/Viewport/Content")
    
    self.btnReset = self:AddComponent(UIButton, "RightPanel/Align/Bottom/NodeState2/BtnReset")
    self.btnReset:SetOnClick(BindCallback(self, self.OnBtnResetClick))
    
    self.imgReset = self:AddComponent(UIImage, "RightPanel/Align/Bottom/NodeState2/BtnReset")

    self.textReset1 = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/NodeState2/BtnReset/Align1/TextName1")
    self.textReset1:SetLocalText(150116) 

    self.textReset2 = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/NodeState2/BtnReset/Align2/TextName2")
    self.textReset2:SetLocalText(150116) 
    
    self.textTip1 = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/TextTip1")
    self.textTip2 = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/TextTip2")
    self.nodeState2 = self:AddComponent(UIBaseContainer, "RightPanel/Align/Bottom/NodeState2")
    self.textPreview = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/NodeState2/TextPreview")
    self.nodeReturnHero = self:AddComponent(UIHeroCellSmall, "RightPanel/Align/Bottom/NodeState2/NodeItemContent/UIHeroCellSmall")
    self.nodeReturnExp = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/NodeState2/NodeItemContent/ItemExp/TextNum")
    self.imgReturnExpColor = self:AddComponent(UIImage, "RightPanel/Align/Bottom/NodeState2/NodeItemContent/ItemExp/imgQuality")
    self.imgReturnExpIcon = self:AddComponent(UIImage, "RightPanel/Align/Bottom/NodeState2/NodeItemContent/ItemExp/imgIcon")
    
    self.nodeNodeReturn = self:AddComponent(UIBaseContainer, "RightPanel/Align/Bottom/NodeState2/NodeItemContent/ItemReturn")
    self.textBeyondReturn = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/NodeState2/NodeItemContent/ItemReturn/TextReturn")
    
    
    self.nodeBtnAlign1 = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/NodeState2/BtnReset/Align1")
    self.nodeBtnAlign2 = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/NodeState2/BtnReset/Align2")
    self.textCost = self:AddComponent(UITextMeshProUGUIEx, "RightPanel/Align/Bottom/NodeState2/BtnReset/Align2/NodeCost/TextCost")
    
    self.textTip1:SetLocalText(150113) 
    self.textTip2:SetLocalText(150114) 
    self.textPreview:SetLocalText(150133) 
end

local function ComponentDestroy(self)
    self.scroll_view = nil
    self.btnReset = nil
    self.textReset = nil
    self.textTip1 = nil
    self.textTip2 = nil
    self.nodeState2 = nil
    self.textPreview = nil
    self.nodeReturnHero = nil
    self.nodeReturnExp = nil
    
    self.nodeBtnAlign1 = nil
    self.nodeBtnAlign2 = nil
    
    self.textCost = nil
    self.textTip1 = nil
    self.textTip2 = nil
    self.textPreview = nil
end



local function OnCreateCell(self,itemObj, index)
    itemObj.name = tostring(index)

    local cellItem = self.scroll_view:AddComponent(UIHeroResetCell, itemObj)
    local heroUuid = self.dataList[index]
    cellItem:SetParent(self)
    cellItem:SetData(heroUuid)
    cellItem:SetActive(true)

    self.cells[index] = cellItem
end

local function OnDeleteCell(self,itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIHeroResetCell)
    self.cells[index] = nil
end

local function DataDefine(self)
    self.cells = {}
    self.heroUuid = nil
end

local function DataDestroy(self)
    self.cells = nil
    self.heroUuid = nil
    self.dataList = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self.heroUuid = nil
    self.view.modelViewer:ShowEmptyScene()

    self:UpdateView()
    --scrollview没有正常填充整个viewport 先延迟一帧
    TimerManager:GetInstance():DelayInvoke(function()
        self:ShowCells()
    end, 0.05)
end

local function OnDisable(self)
    self.heroUuid = nil
    self.nodeState2:SetActive(false)
    self:ClearScroll()

    base.OnDisable(self)
end

local function SetAllCellsDestroy(self)
    self:ClearScroll()
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.HeroResetSuccess, self.OnHeroResetSuccess)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.HeroResetSuccess, self.OnHeroResetSuccess)
    base.OnRemoveListener(self)
end

local function ShowCells(self)
    self:ClearScroll()

    self.dataList = self.view.ctrl:GetAllCanResetHeroes()
    local dataCount = table.count(self.dataList)
    print("#zlh# dataCount:" .. dataCount)

    if dataCount <= 0 then
        return
    end

    self.scroll_view:SetTotalCount(dataCount)
    self.scroll_view:RefillCells(1)
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UIHeroResetCell)

    self.cells = {}
end

local function GetResetCost(self, curLevel)
    local k1 = LuaEntry.DataConfig:TryGetNum("hero_reset", "k1") -- 默认消耗
    local k2 = LuaEntry.DataConfig:TryGetNum("hero_reset", "k2") -- k2及以下不消耗
    local k4 = LuaEntry.DataConfig:TryGetStr("hero_reset", "k4") -- 等级区间
    local k5 = LuaEntry.DataConfig:TryGetStr("hero_reset", "k5") -- 和等级区间对应的消耗

    if curLevel <= k2 then
        return 0
    end
    
    local ret = k1
    
    local levelRange = string.split(k4, '|')
    local costRange = string.split(k5, '|')
    for i, v in ipairs(levelRange) do
        if i > #costRange then
            break
        end
        
        local pair = string.split(v, ';')
        if #pair > 1 then
            local min = tonumber(pair[1])
            local max = tonumber(pair[2])

            if curLevel >= min and curLevel <= max then
                ret = tonumber(costRange[i])
                break
            end
        end
    end
    
    return ret
end

--- 刷新英雄相关显示 模型、名称、消耗slot
local function UpdateView(self)
    self.textTip2:SetActive(self.heroUuid == nil)
    self.nodeState2:SetActive(self.heroUuid ~= nil)
    
    if self.heroUuid ~= nil then
        -- set returnHero
        self.nodeReturnHero:SetData(self.heroUuid, nil, nil, true)
        self.nodeReturnHero:SetDisplayLevel(1)
        -- set returnExp
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
        local returnExp, maxColor, skillItemId = heroData:GetResetExp()
        self.nodeReturnExp:SetText(string.GetFormattedStr(returnExp))
        self.imgReturnExpColor:LoadSprite(DataCenter.ItemTemplateManager:GetToolBgByColor(maxColor))
        self.imgReturnExpIcon:LoadSprite(CommonUtil.GetResOrItemIcon(skillItemId))


        self.resetCost = self:GetResetCost(heroData.level)
        self.nodeBtnAlign1:SetActive(self.resetCost <= 0)                    
        self.nodeBtnAlign2:SetActive(self.resetCost > 0)
        
        self.textCost:SetText(string.GetFormattedStr(self.resetCost))
        self.imgReset:LoadSprite(string.format(LoadPath.CommonNewPath, self.resetCost > 0 and 'Common_btn_yellow101' or 'Common_btn_green101'))

        local k6 = LuaEntry.DataConfig:TryGetStr("hero_reset", "k6") -- 返还突破消耗的比例
        local beyondCostReturn = math.floor(HeroUtils.GetTotalCostGold(heroData.curMaxLevel) * k6)
        self.textBeyondReturn:SetText(string.GetFormattedStr(beyondCostReturn))
        self.nodeNodeReturn:SetActive(beyondCostReturn > 0)
    end
end

local function OnBtnResetClick(self)
    if self.heroUuid == nil then
        return
    end

    local gold = LuaEntry.Player.gold
    if gold < self.resetCost then
        print("gold not enough!")
        UIUtil.ShowTipsId(120020) 
        return
    end

    UIUtil.ShowMessage(Localization:GetString("129083"), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
        SFSNetwork.SendMessage(MsgDefines.HeroReset, self.heroUuid)
    end, nil)
end

local function OnSelectHero(self, heroUuid)
    print("#zlh# OnSelectHero")
    self.heroUuid = heroUuid

    self.scroll_view:RefreshCells()
    self:UpdateView()

    TimerManager:GetInstance():DelayInvoke(BindCallback(self, self.FocusToHero), 0.1)
end

local function OnCancelHero(self)
    print("#zlh# OnSelectCore")
    self.heroUuid = nil
    self.scroll_view:RefreshCells()
    self:UpdateView()
end

local function FocusToHero(self)
    local viewPortHeight = self.scroll_view.rectTransform.sizeDelta.y
    
    local coreIndex = table.indexof(self.dataList, self.heroUuid)
    --local coreRow = math.ceil(coreIndex/ ColCountPerRow)
    local cell = self.cells[coreIndex]

    local localPosVec3 = self.scroll_view.rectTransform:InverseTransformPoint(cell.transform.position)
    local localPosY = -(viewPortHeight/2) - localPosVec3.y
    localPosY = Mathf.Clamp(localPosY, 0, self.content.rectTransform.sizeDelta.y - viewPortHeight)

    if math.abs(self.content.rectTransform.anchoredPosition.y - localPosY) < 10 then
        return
    end

    --这里手动更改content的位置没有效果 应该是ScrollView中每帧都在控制content的位置 先暂时改为调用scrollToCell    
    --self.content.rectTransform.anchoredPosition.y = Vector2.New(0, localPosY)

    local focusIdx = math.max(1, coreIndex - ColCountPerRow) 
    self.scroll_view:ScrollToCell(focusIdx, 2000)
end

--- 英雄进阶成功回调
local function OnHeroResetSuccess(self)
    print("#zlh# UIHeroPageReset OnHeroResetSuccess!")
    self.heroUuid = nil
    
    self:UpdateView()
    --self:ShowCells()
    
    TimerManager:GetInstance():DelayInvoke(function()
        self:ShowCells()
    end, 0.05)
end

local function GetResetHeroUuid(self)
    return self.heroUuid
end


UIHeroPageReset.OnCreate= OnCreate
UIHeroPageReset.OnDestroy = OnDestroy
UIHeroPageReset.OnEnable = OnEnable
UIHeroPageReset.OnDisable = OnDisable
UIHeroPageReset.OnAddListener = OnAddListener
UIHeroPageReset.OnRemoveListener = OnRemoveListener
UIHeroPageReset.ComponentDefine = ComponentDefine
UIHeroPageReset.ComponentDestroy = ComponentDestroy
UIHeroPageReset.DataDefine = DataDefine
UIHeroPageReset.DataDestroy = DataDestroy
UIHeroPageReset.SetAllCellsDestroy = SetAllCellsDestroy
UIHeroPageReset.ShowCells = ShowCells
UIHeroPageReset.ClearScroll = ClearScroll

UIHeroPageReset.OnCreateCell = OnCreateCell
UIHeroPageReset.OnDeleteCell = OnDeleteCell

UIHeroPageReset.OnBtnResetClick = OnBtnResetClick

UIHeroPageReset.GetResetHeroUuid = GetResetHeroUuid
UIHeroPageReset.GetResetCost = GetResetCost
UIHeroPageReset.UpdateView = UpdateView
UIHeroPageReset.OnSelectHero = OnSelectHero
UIHeroPageReset.OnCancelHero = OnCancelHero
UIHeroPageReset.FocusToHero = FocusToHero


UIHeroPageReset.OnHeroResetSuccess = OnHeroResetSuccess



return UIHeroPageReset