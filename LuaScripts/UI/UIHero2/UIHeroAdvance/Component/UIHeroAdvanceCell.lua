---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 6/23/21 7:09 PM
---


local UIHeroAdvanceCell = BaseClass("UIHeroAdvanceCell", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local ResourceManager = CS.GameEntry.Resource
local UIHeroCell = require "UI.UIHero2.Common.UIHeroCellSmall_TextMeshPro"

local ShowAdvanceTipType = {
    TIP_TYPE_NULL = 0,
    TIP_TYPE_BIG = 1,
    TIP_TYPE_SMALL = 2,
}

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    
    self.isAlreadySelect = false
    self.canBeEaten = false
end

-- 销毁
local function OnDestroy(self)
    self.parent = nil
    self.heroUuid = nil
    self.heroData = nil
    self.isAlreadySelect = nil
    self.canBeEaten = nil
    
    self:ComponentDestroy()
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
end

-- 隐藏
local function OnDisable(self)
    base.OnDisable(self)
end


--控件的定义
local function ComponentDefine(self)
    self.heroCell = self:AddComponent(UIHeroCell, "UIHeroCellSmall")
    self.heroCell:ToggleRayCast(false)

    self.stateChecked = self:AddComponent(UIBaseContainer, "Normal/StateCheck")
    --界面上用锁来代表不能被吃 并不是锁定的意思
    self.stateLocked = self:AddComponent(UIImage, "Normal/StateLocked")
    self.stateCanConsume = self:AddComponent(UIBaseContainer, "Normal/StateCanConsume")

    self.nodeCanAdvance = self:AddComponent(UIBaseContainer, 'Normal/ImgCanAdvance')
    self.nodeCanAdvance1 = self:AddComponent(UIBaseContainer, 'Normal/ImgCanAdvance1')
    self.newDot = self:AddComponent(UIBaseContainer, "NewDot")

    self.stateOccupy = self:AddComponent(UIBaseContainer, "StateOccupy")
    self.textFormationId = self:AddComponent(UITextMeshProUGUIEx, "StateOccupy/FormationBg/TextId")
    self.textInvalidReason = self:AddComponent(UITextMeshProUGUIEx, "StateOccupy/TextInvalidReason")

    self.coreClose = self:AddComponent(UIButton, "CoreClose")
    self.coreClose:SetActive(false)
    self.coreClose:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBtnClick()
    end)

    self.btn = self:AddComponent(UIButton, "")
    self.btn:SetOnClick(function()  
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBtnClick()
    end)
end

--控件的销毁
local function ComponentDestroy(self)
    self.heroCell = nil
    self.stateChecked = nil
    self.stateLocked = nil
    self.stateCanConsume = nil
    self.stateOccupy = nil
    self.nodeCanAdvance = nil
    if self.halfRequest ~= nil then
        self.halfRequest:Destroy()
    end

    if self.oneRequest ~= nil then
        self.oneRequest:Destroy()
    end
    self.halfRequest = nil
    self.oneRequest = nil
    self.halfStarEffect = nil
    self.OneStarEffect = nil
end

-- 全部刷新
local function SetData(self, heroUuid, canShowAdvanceArrow, foodMinRarity, isAdvanceNew, showAdvanceParticle, maxMasterAdvanceRarity)
    self.heroUuid = heroUuid
    self.foodMinRarity = foodMinRarity
    self.heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroUuid)
    self.canShowAdvanceArrow = canShowAdvanceArrow
    self.isAdvanceNew = isAdvanceNew
    self.maxMasterAdvanceRarity = maxMasterAdvanceRarity
    self.showAdvanceParticle = showAdvanceParticle
    
    local rankId = self.heroData:GetCurMilitaryRankId()
    self.heroCell:SetData(heroUuid, nil, rankId >= 22, true)
    --self.heroCell:SetCampActive(false)
    self.heroCell:ToggleLevel(self.heroData.isMaster) --九章要求升阶界面海报不显示等级
    
    local path = HeroUtils.GetRarityIconPath(self.heroData.rarity)
    --self.stateOccupy:LoadSprite(path)
    --self.stateLocked:LoadSprite()
    self.stateLocked:LoadSprite("Assets/Main/Sprites/HeroIconsSmall/ui_poster_lock.png")
    self.newDot:SetActive(self.isAdvanceNew == true)

    if self.halfStarEffect ~= nil then
        self.halfStarEffect:SetActive(false)
    end
    if self.OneStarEffect ~= nil then
        self.OneStarEffect:SetActive(false)
    end

    if self.isAdvanceNew == true and self.showAdvanceParticle[self.heroUuid] == nil then
        if self.heroData.quality % 2 == 0 then
            self:addHalfStarEffect()
        else
            self:addOneStarEffect()
        end
    end
    self:UpdateHeroState()
end

local function addHalfStarEffect(self)
    if self.halfStarEffect ~= nil then
        self.halfStarEffect:SetActive(true)
        self.halfStarEffect.transform.position = self.heroCell:GetLastStarPos()
        self.showAdvanceParticle[self.heroUuid] = 1
        return
    end
    if self.halfRequest ~= nil then
        return
    end

    local request = ResourceManager:InstantiateAsync("Assets/_Art/Effect/prefab/ui/VFX_ui_shengxing_half.prefab")
    self.halfRequest = request
    request:completed('+', function()
        if request.isError then
            return
        end
        request.gameObject:SetActive(true)
        request.gameObject.transform:SetParent(self.heroCell.gameObject.transform)
        self.halfStarEffect = request.gameObject
        self.halfStarEffect.transform.position = self.heroCell:GetLastStarPos()
        self.halfStarEffect:SetActive(self.isAdvanceNew == true)
        self.showAdvanceParticle[self.heroUuid] = 1
    end)
end

local function addOneStarEffect(self)
    if self.OneStarEffect ~= nil then
        self.OneStarEffect:SetActive(true)
        self.OneStarEffect.transform.position = self.heroCell:GetLastStarPos()
        self.showAdvanceParticle[self.heroUuid] = 1
        return
    end

    if self.oneRequest ~= nil then
        return
    end
    local request = ResourceManager:InstantiateAsync("Assets/_Art/Effect/prefab/ui/VFX_ui_shengxing_one.prefab")
    self.oneRequest = request
    request:completed('+', function()
        if request.isError then
            return
        end
        request.gameObject:SetActive(true)
        request.gameObject.transform:SetParent(self.heroCell.gameObject.transform)
        self.OneStarEffect = request.gameObject
        self.OneStarEffect.transform.position = self.heroCell:GetLastStarPos()
        self.OneStarEffect:SetActive(self.isAdvanceNew == true)
        self.showAdvanceParticle[self.heroUuid] = 1
    end)
end

local function SetParent(self, parent)
    self.parent = parent
end

local function GetShowAdvanceTipType(self)
    local curAdvanceUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
    local isSelectCore = curAdvanceUuid ~= nil and curAdvanceUuid ~= 0
    
    if self.heroData == nil or isSelectCore then
        return ShowAdvanceTipType.TIP_TYPE_NULL
    end
    local redFlag = self.heroData:ShowAdvanceRedPoint(self.canShowAdvanceArrow)
    if redFlag then
        return ShowAdvanceTipType.TIP_TYPE_BIG
    end
    return ShowAdvanceTipType.TIP_TYPE_SMALL
    --local curAdvanceUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
    --local isSelectCore = curAdvanceUuid == nil or curAdvanceUuid == 0
    --local showAdvanceTip = isSelectCore and self:CanShowAdvanceTip()
    --if self.heroData == nil or not showAdvanceTip then
    --    return ShowAdvanceTipType.TIP_TYPE_NULL
    --end
    --
    --if self.heroData.isMaster then
    --    if self.maxMasterAdvanceRarity ~= nil then
    --        if self.heroData.rarity <= self.maxMasterAdvanceRarity then
    --            return ShowAdvanceTipType.TIP_TYPE_BIG
    --        end
    --    end
    --    return ShowAdvanceTipType.TIP_TYPE_SMALL
    --else
    --    return ShowAdvanceTipType.TIP_TYPE_SMALL
    --end
end

local function UpdateHeroState(self)
    local selfHeroData = self.heroData
    self.isAlreadySelect = false
    self.canBeEaten = false
    
    local curAdvanceUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
    local isSelectCore = curAdvanceUuid == nil or curAdvanceUuid == 0
    local selfIsCore = curAdvanceUuid == self.heroUuid
    local advanceType = self:GetShowAdvanceTipType()
    self.nodeCanAdvance:SetActive(advanceType == ShowAdvanceTipType.TIP_TYPE_SMALL and self.canShowAdvanceArrow)
    self.nodeCanAdvance1:SetActive(advanceType == ShowAdvanceTipType.TIP_TYPE_BIG and self.canShowAdvanceArrow)
    self.coreClose:SetActive(selfIsCore)
    --self.stateOccupy:SetEnable(true)
    
    if isSelectCore or selfIsCore then
        self.stateCanConsume:SetActive(false)
        self.stateLocked:SetActive(false)
        self.stateOccupy:SetActive(false)
        
        self.stateChecked:SetActive(selfIsCore)
        self.stateChecked.transform:Find("CheckCore").gameObject:SetActive(selfIsCore)
        self.stateChecked.transform:Find("CheckFood").gameObject:SetActive(false)
        return
    end

    local selfIsAlreadySelect = HeroAdvanceController:GetInstance():IsAlreadySelect(self.heroUuid)
    self.isAlreadySelect = selfIsAlreadySelect
    if selfIsAlreadySelect then
        self.stateCanConsume:SetActive(false)
        self.stateLocked:SetActive(false)
        self.stateOccupy:SetActive(false)
        self.stateChecked:SetActive(true)
        self.stateChecked.transform:Find("CheckCore").gameObject:SetActive(false)
        self.stateChecked.transform:Find("CheckFood").gameObject:SetActive(true)
        
        return
    end
    
    local isConsumeFull = HeroAdvanceController:GetInstance():IsConsumeFull()
    self.stateChecked:SetActive(false)
    
    local coreHeroData = DataCenter.HeroDataManager:GetHeroByUuid(curAdvanceUuid)
    self.canBeEaten  = HeroAdvanceController:GetInstance():CanEatHero(coreHeroData, selfHeroData)
    self.isOccupy, self.marchState = self:IsOccupy()
    local isSelf = coreHeroData:CanAdvanceEatOther(selfHeroData, HeroAdvanceConsumeType.ConsumeType_Same_Hero)
    self.stateCanConsume:SetActive(not isConsumeFull and self.canBeEaten and not self.isOccupy and (isSelf or self.heroData.rarity == self.foodMinRarity))
    self.stateLocked:SetActive(not self.canBeEaten)
    if self.canBeEaten and self.isOccupy then
        self.stateOccupy:SetActive(true)--self.canBeEaten and self.isOccupy)
        --self.stateOccupy:SetEnable(self.marchState and self.marchState == ArmyFormationState.March)
    else
        self.stateOccupy:SetActive(false)--self.canBeEaten and self.isOccupy)
        --self.stateOccupy:SetEnable(true)
    end
end

---是否显示可升阶提示箭头
local function CanShowAdvanceTip(self)
    if self.canShowAdvanceArrow and self.heroData.rarity == HeroUtils.RarityType.A and not self.heroData.isMaster then
        local masterUid = DataCenter.HeroDataManager:GetHeroUuidByHeroId(self.heroData.heroId)
        local master = DataCenter.HeroDataManager:GetHeroByUuid(masterUid)
        if master ~= nil then
            return master.quality >= Purple_Poster_Hero_Show_AdvanceFlag_Need_Master_Level, true
        end
    end
    if self.heroData.rarity == HeroUtils.RarityType.C then
        if self.heroData.isMaster then
            return false, true
        end
    end
    
    return self.canShowAdvanceArrow
end

local function IsOccupy(self)
    local isInFormation, formationId, marchState = self.heroData:IsInFormation()
    if isInFormation then
        self.stateOccupy:SetActive(isInFormation)
        self.textFormationId:SetText(formationId)
        self.textInvalidReason:SetLocalText(120166) 
        return true, marchState
    end
    
    return false
end

local function OnBtnClick(self)
    local curAdvanceUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
    -- 选择核心
    if curAdvanceUuid == nil or curAdvanceUuid == 0 then
        if self.heroData:IsMaxQuality() then
            if not self.heroData.isMaster and (self.heroData.rarity == HeroUtils.RarityType.A or self.heroData.rarity == HeroUtils.RarityType.S) then
                UIUtil.ShowTipsId(162061) --已达最大品
            else
                UIUtil.ShowTipsId(162060) --已达最大品
            end
            
            return
        end
        --local flag, flag1 = self:CanShowAdvanceTip()
        --if not flag and flag1 == nil then
        --    local canAdvanceWithoutCheckMasterQuality = HeroAdvanceController:GetInstance():HasFullDogForCore(self.heroData, false)
        --    if canAdvanceWithoutCheckMasterQuality then
        --        UIUtil.ShowTipsId(129223)--海报星级不能大于英雄本体，请提升英雄星级
        --        return
        --    end
        --end
        
        self.view:GetPageAdvance():OnSelectCore(self.heroUuid)
        return
    end
    
    --取消核心
    if curAdvanceUuid == self.heroUuid then
        self.view:GetPageAdvance():OnCancelCore()
        return
    end

    -- 取消狗粮
    if self.isAlreadySelect then
        self.view:GetPageAdvance():OnToggleDogFood(self.heroUuid)
        return
    end

    if HeroAdvanceController:GetInstance():IsConsumeFull() then
        print("#zlh# Consume Is Full!")
        return
    end
    
    if self.heroData:IsLocked() then
        UIUtil.ShowTipsId(150502) --英雄已锁
        return
    end

    if self.isOccupy then
        if self.marchState and self.marchState == ArmyFormationState.March then
            UIUtil.ShowTipsId(129214)
        else
            UIUtil.ShowMessage(Localization:GetString("129215"), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                self.view:GetPageAdvance():OnToggleDogFood(self.heroUuid)
            end, function() end);
        end
        
        return
    end
    
    if self.heroData:GetBelongFormation() ~= nil then
        UIUtil.ShowTipsId(162197) --在编队
        return
    end

    if not self.canBeEaten then
        UIUtil.ShowTipsId(150161)
        return
    end
    
    --todo: check驻扎 如果英雄在建筑驻扎 弹确认窗让玩家选择是否继续

    --选择狗粮
    self.view:GetPageAdvance():OnToggleDogFood(self.heroUuid)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.HideAdvanceNew, self.OnHideAdvanceNew)

end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.HideAdvanceNew, self.OnHideAdvanceNew)
    base.OnRemoveListener(self)
end

local function OnHideAdvanceNew(self)
    self.newDot:SetActive(false)
    if self.halfStarEffect ~= nil then
        self.halfStarEffect:SetActive(false)
    end

    if self.OneStarEffect ~= nil then
        self.OneStarEffect:SetActive(false)
    end
end

local function GetGuideClickBtn(self)
    return self.btn
end

local function GetDogFoodGuideBtn(self)
    local curAdvanceUuid = HeroAdvanceController:GetInstance():GetAdvanceHeroUuid()
    if self.heroData == nil or curAdvanceUuid == nil or curAdvanceUuid == 0 or curAdvanceUuid == self.heroData.uuid or self.isAlreadySelect or not self:GetActive() then
        return nil
    end
    return self.btn
end

UIHeroAdvanceCell.GetDogFoodGuideBtn = GetDogFoodGuideBtn
UIHeroAdvanceCell.GetGuideClickBtn = GetGuideClickBtn
UIHeroAdvanceCell.OnCreate = OnCreate
UIHeroAdvanceCell.OnDestroy = OnDestroy
UIHeroAdvanceCell.OnEnable = OnEnable
UIHeroAdvanceCell.OnDisable = OnDisable
UIHeroAdvanceCell.ComponentDefine = ComponentDefine
UIHeroAdvanceCell.ComponentDestroy = ComponentDestroy
UIHeroAdvanceCell.SetData = SetData
UIHeroAdvanceCell.SetParent = SetParent
UIHeroAdvanceCell.OnAddListener = OnAddListener
UIHeroAdvanceCell.OnRemoveListener = OnRemoveListener
UIHeroAdvanceCell.UpdateHeroState = UpdateHeroState
UIHeroAdvanceCell.IsOccupy = IsOccupy
UIHeroAdvanceCell.CanShowAdvanceTip = CanShowAdvanceTip
UIHeroAdvanceCell.GetShowAdvanceTipType = GetShowAdvanceTipType
UIHeroAdvanceCell.OnBtnClick = OnBtnClick
UIHeroAdvanceCell.OnHideAdvanceNew = OnHideAdvanceNew
UIHeroAdvanceCell.addHalfStarEffect = addHalfStarEffect
UIHeroAdvanceCell.addOneStarEffect = addOneStarEffect

return UIHeroAdvanceCell
