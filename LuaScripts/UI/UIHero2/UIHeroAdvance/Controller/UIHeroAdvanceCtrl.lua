---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 2021/6/23 下午3:08
---



local UIHeroAdvanceCtrl = BaseClass("UIHeroAdvanceCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization

local function CloseSelf(self)
    if self.onClose ~= nil then
        self.onClose()
        self.onClose = nil
    end
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIHeroAdvance)
end

--做个缓存加速排序
local canAdvanceCache = {}
local canAdvanceHeroIdCache = {}
local HeroType =
{
    Page = 0,--海报
    Hero = 1,--英雄
}
local function IsCanAdvance(hero)
    local uuid = hero.uuid
    if canAdvanceCache[uuid] ~= nil then
        return canAdvanceCache[uuid]
    end
    local heroId = hero.heroId
    local heroIdCache = canAdvanceHeroIdCache[heroId]
    if heroIdCache == nil then
        heroIdCache = {}
        canAdvanceHeroIdCache[heroId] = heroIdCache
    end

    local heroType = hero.isMaster and HeroType.Hero or HeroType.Page
    local heroTypeCache = heroIdCache[heroType]
    if heroTypeCache == nil then
        heroTypeCache = {}
    end

    local quality = hero.quality
    if heroTypeCache[quality] ~= nil then
        return heroTypeCache[quality]
    end

    local canAdvance = HeroAdvanceController:GetInstance():HasFullDogForCore(hero)
    canAdvanceCache[uuid] = canAdvance
    heroTypeCache[quality] = canAdvance

    return canAdvance
end

local function bool_to_number(b)
    return b and 1 or 0
end

local function SortForSameType(heroA, heroB, masterToInt)
    if masterToInt == 1 then
        if heroA.rarity ~= heroB.rarity then
            return heroA.rarity < heroB.rarity
        end

        if heroA.quality ~= heroB.quality then
            return heroA.quality > heroB.quality
        end
    else
        if heroA.quality ~= heroB.quality then
            return heroB.quality < heroA.quality
        end
        
        local rarityA = heroA.rarity
        local rarityB = heroB.rarity
        if rarityA == HeroUtils.RarityType.C then
            rarityA = HeroUtils.RarityType.B
        end
        if rarityB == HeroUtils.RarityType.C then
            rarityB = HeroUtils.RarityType.B
        end
        
        --if rarityA == HeroUtils.RarityType.B then
        --    if heroA.rarity ~= heroB.rarity then
        --        return heroA.rarity < heroB.rarity
        --    end
        --end

        if rarityA ~= rarityB then
            return rarityA < rarityB
        end

        if heroA.heroId ~= heroB.heroId then
            return heroA.heroId < heroB.heroId
        end
    end
    return false
end

local function GetHeroListByCamp(self, camp, colMax, isGuide, guideQality)
    canAdvanceHeroIdCache = {}
    canAdvanceCache = {}
    isGuide = isGuide or false

    local maxMasterAdvanceRarity = HeroUtils.RarityType.B
    local canTipAdvanceNum = {} --改了排序，这个也得改
    local heroDict = {[HeroType.Page] = {}, [HeroType.Hero] = {}} --将英雄分为 英雄、档案俩类
    local allHeroes = DataCenter.HeroDataManager:GetAllHeroList()
    if allHeroes ~= nil then
        local campType = nil
        for _, v in pairs(allHeroes) do
            campType = GetTableData(HeroUtils.GetHeroXmlName(), v.heroId, "camp")
            if campType == camp or camp == -1 then
                if v.isMaster then
                    table.insert(heroDict[HeroType.Hero], v)
                    if v.rarity < maxMasterAdvanceRarity then
                        maxMasterAdvanceRarity = v.rarity
                    end
                else
                    table.insert(heroDict[HeroType.Page], v)
                end
                if IsCanAdvance(v) then
                    canTipAdvanceNum[v.uuid] = 1
                end
            end
        end
    end
    
    for masterToInt, heroList in pairs(heroDict) do
        table.sort(heroList, function(heroA, heroB)
            --同类型通用排序： 稀有度 》 品质  》 等级 》 阵营  》  英雄Id 》 Uuid
            return SortForSameType(heroA, heroB, masterToInt)
        end)
    end
    local keys = table.keys(heroDict)
    table.sort(keys, function(a, b) return a > b end)

    if isGuide == true and guideQality ~= nil then
        local find = false
        for _, masterToInt in ipairs(keys) do
            local heroList = heroDict[masterToInt]
            for k, hero in ipairs(heroList) do
                if hero.quality == guideQality and canTipAdvanceNum[hero.uuid] ~= nil then
                    table.remove(heroList, k)
                    table.insert(heroList, 1, hero)
                    find = true
                    break
                end
            end
            if find then
                break
            end
        end
    end

    local showDataList = {} --列表行数据(包含稀有度标题)

    for _, masterToInt in ipairs(keys) do
        --插入标题 [英雄/海报]
        if masterToInt == 0 then
            table.insert(showDataList, masterToInt)
        end

        --插入当前masterLv对应的数据列表
        local heroList = heroDict[masterToInt]
        local row = math.ceil(#heroList / colMax)

        for k = 1, row do
            local startIndex = colMax * (k-1) +1
            local endIndex = math.min(startIndex + colMax-1, #heroList)
            local rowData = {table.unpack (heroList,  startIndex, endIndex)}

            table.insert(showDataList, rowData)
        end
    end
    
    return showDataList, canTipAdvanceNum, maxMasterAdvanceRarity
end

local function GetDogFoods(self, colMax)
    --todo: get sorted dog foods
    local coreHeroData = HeroAdvanceController:GetInstance():GetAdvanceHeroData()

    local dogFoods = {}
    local allHeroes = DataCenter.HeroDataManager:GetAllHeroList()
    local minRarity = HeroUtils.RarityType.S

    for _, v in pairs(allHeroes) do
        if v.uuid == coreHeroData.uuid or (v.isMaster and (v.rarity == HeroUtils.RarityType.S or v.rarity == HeroUtils.RarityType.A)) then
            goto continue
        end

        if coreHeroData:CanAdvanceEatOther(v, HeroAdvanceConsumeType.ConsumeType_Same_Hero) or coreHeroData:CanAdvanceEatOther(v, HeroAdvanceConsumeType.ConsumeType_Same_Camp) then
            table.insert(dogFoods, v)
            if minRarity < v.rarity then
                minRarity = v.rarity
            end
        end

        ::continue::
    end
    local inFormation = {}
    table.sort(dogFoods, function(heroA, heroB)
        if heroA.isMaster ~= heroB.isMaster then
            return heroB.isMaster
        end
        local a_isInFormation = inFormation[heroA.uuid]
        if a_isInFormation == nil then
            a_isInFormation = heroA:IsInFormation()
            inFormation[heroA.uuid] = a_isInFormation
        end
        local b_isInFormation = inFormation[heroB.uuid]
        if b_isInFormation == nil then
            b_isInFormation = heroB:IsInFormation()
            inFormation[heroB.uuid] = b_isInFormation
        end

        if a_isInFormation ~= b_isInFormation then
            return bool_to_number(a_isInFormation) < bool_to_number(b_isInFormation)
        end
        local rarityA = heroA.rarity
        local rarityB = heroB.rarity
        
        if rarityA == HeroUtils.RarityType.C then
            rarityA = HeroUtils.RarityType.B
        elseif rarityA == HeroUtils.RarityType.B then
            rarityA = HeroUtils.RarityType.C
        end
        if rarityB == HeroUtils.RarityType.C then
            rarityB = HeroUtils.RarityType.B
        elseif rarityB == HeroUtils.RarityType.B then
            rarityB = HeroUtils.RarityType.C
        end
        
        if rarityA ~= rarityB then
            return rarityA < rarityB
        end

        if heroA.level ~= heroB.level then
            return heroA.level < heroB.level
        end

        if heroA.heroId ~= heroB.heroId then
            if heroA.heroId == coreHeroData.heroId then
                return true
            end

            if heroB.heroId == coreHeroData.heroId then
                return false
            end
            
            return heroA.heroId < heroB.heroId
        end

        return heroA.uuid < heroB.uuid
    end)

    --local result = {}
    
    --将核心自身加到首位
    local showDataList = {} --列表行数据(包含稀有度标题)
    --table.insert(result, coreHeroData.uuid)

    local rowData = {coreHeroData}
    table.insert(showDataList, rowData)
    table.insert(showDataList, 0)

    --for _, heroData in pairs(dogFoods) do
    --    table.insert(result, heroData.uuid)
    --end
    --加英雄碎片
    --先看是否能兑换
    --local advanceCondition = coreHeroData:GetAdvanceConsume()
    --local _, sameHeroNum = advanceCondition:GetConditionByType(HeroAdvanceConsumeType.ConsumeType_Same_Hero)
    --sameHeroNum = sameHeroNum or 0
    --if coreHeroData.rarity == HeroUtils.RarityType.S and sameHeroNum > 0 then
    --    local goodsList = DataCenter.CommonShopManager:GetGoodsListByShopType(CommonShopType.HeroReset)
    --    local canExchange = false
    --    if goodsList ~= nil then
    --        for k, good in ipairs(goodsList) do
    --            if not string.IsNullOrEmpty(good.hero) and toInt(good.hero) == coreHeroData.heroId then
    --                canExchange = true
    --                break
    --            end
    --        end
    --    end
    --    if canExchange then
    --        local type99Items = DataCenter.ItemTemplateManager:GetTypeListByType(GOODS_TYPE.GOODS_TYPE_99)
    --        for _, v in ipairs(type99Items) do
    --            if toInt(v.para2) == coreHeroData.heroId then
    --                local param = {}
    --                param.uuid = toInt(v.id)
    --                local insertFlag = false
    --                for k, hero in ipairs(dogFoods) do
    --                    if hero.heroId ~= coreHeroData.heroId then
    --                        table.insert(dogFoods, k, param)
    --                        insertFlag = true
    --                        break
    --                    end
    --                end
    --                if not insertFlag then
    --                    table.insert(dogFoods, param)
    --                end
    --                break
    --            end
    --        end
    --    end
    --end

    ----橙色加万能碎片
    --if coreHeroData.rarity == HeroUtils.RarityType.S then
    --    local itemId = HeroUtils.GetGoldHeroDebrisId()
    --    if itemId ~= nil then
    --        local param = {}
    --        param.uuid = itemId
    --        table.insert(dogFoods, 1, param)
    --    end
    --end
    local row = math.ceil(#dogFoods / colMax)

    for k = 1, row do
        local startIndex = colMax * (k-1) +1
        local endIndex = math.min(startIndex + colMax-1, #dogFoods)
        local rowData = {table.unpack (dogFoods,  startIndex, endIndex)}
        table.insert(showDataList, rowData)
    end

    return showDataList, minRarity
end

local function GetAllCanResetHeroes(self)
    local allHeroes = DataCenter.HeroDataManager:GetAllHeroList()
    local heroes = table.values(allHeroes)
    local campA = nil
    local campB = nil
    table.sort(heroes, function(heroA, heroB)
        if heroA.level ~= heroB.level then
            return heroA.level > heroB.level
        end

        if heroA.quality ~= heroB.quality then
            return heroA.quality > heroB.quality
        end

        campA = heroA.camp
        campB = heroB.camp
        if campA ~= campB then
            return campA < campB
        end

        if heroA.heroId ~= heroB.heroId then
            return heroA.heroId < heroB.heroId
        end

        return heroA.uuid < heroB.uuid
    end)

    local result = {}
    for _, heroData in pairs(heroes) do
        if heroData.level > 1 then
            table.insert(result, heroData.uuid)
        end
    end
    
    return result
end

local function OnClickGoldBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGiftPackage, {anim = true})
end

local function DoWhenAdvance(self, coreHeroUuid, consumeMap)
    local hasOfficial = false
    local hasMaster = false
    local officialHeroNames = ""
    local masterHeroNames = ""

    for _, v in ipairs(consumeMap) do
        local data = DataCenter.HeroDataManager:GetHeroByUuid(v)
        if data ~= nil and data.isMaster then
            local nameStr = HeroUtils.GetHeroNameByConfigId(data.heroId)
            if string.IsNullOrEmpty(masterHeroNames) then
                masterHeroNames = nameStr
            else
                masterHeroNames = masterHeroNames..","..nameStr
            end
            if data.level > 1 or data.rarity == HeroUtils.RarityType.S or data.rarity == HeroUtils.RarityType.A  then
                hasMaster = true
            end
            local official = DataCenter.HeroOfficialManager:GetHeroPos(v)
            if official ~= nil then
                hasOfficial = true
                if string.IsNullOrEmpty(officialHeroNames) then
                    officialHeroNames = nameStr
                else
                    officialHeroNames = officialHeroNames..","..nameStr
                end
            end
        end
    end
    if hasOfficial then
        UIUtil.ShowMessage(Localization:GetString("129277", officialHeroNames), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
            SFSNetwork.SendMessage(MsgDefines.HeroAdvance, coreHeroUuid, table.values(consumeMap))
        end)
    elseif hasMaster then
        UIUtil.ShowMessage(Localization:GetString("129276", masterHeroNames), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
            SFSNetwork.SendMessage(MsgDefines.HeroAdvance, coreHeroUuid, table.values(consumeMap))
        end)
    else
        SFSNetwork.SendMessage(MsgDefines.HeroAdvance, coreHeroUuid, table.values(consumeMap))
        return true
    end
end

UIHeroAdvanceCtrl.CloseSelf = CloseSelf
UIHeroAdvanceCtrl.GetHeroListByCamp = GetHeroListByCamp
UIHeroAdvanceCtrl.GetDogFoods = GetDogFoods
UIHeroAdvanceCtrl.GetAllCanResetHeroes = GetAllCanResetHeroes
UIHeroAdvanceCtrl.OnClickGoldBtn = OnClickGoldBtn
UIHeroAdvanceCtrl.DoWhenAdvance = DoWhenAdvance

return UIHeroAdvanceCtrl