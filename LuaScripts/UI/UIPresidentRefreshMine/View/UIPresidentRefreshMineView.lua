---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/4/10 17:07
---

local UIPresidentRefreshMineView = BaseClass("UIPresidentRefreshMineView",UIBaseView)
local base = UIBaseView
local confirm_btn_path = "BtnGo/common_btn_confirm"
local cancel_btn_path = "BtnGo/common_btn_cancel"

local btn_go_path = "BtnGo"

local back_btn_path = "common_bg3/back_btn"

local trigger_path = "bg"
local title_path = "common_bg3/title"
local desc_path = "common_bg3/des"

local PanelMode = {
    Model_Null = 0,
    Model_Mine = 1,
    Model_Map = 2,
}

local TilePosDelta =
{
    Vector3.New(0,0,0),
    Vector3.New(-0.5,0,-0.5),
    Vector3.New(-1,0,-1),
    Vector3.New(-1.5,0,-1.5),
    Vector3.New(-2,0,-2.5),
}

--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

-- 销毁
local function OnDestroy(self)
    self:ClosePanel()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.confirm_btn = self:AddComponent(UIButton, confirm_btn_path)
    self.confirm_img = self:AddComponent(UIImage, confirm_btn_path)
    self.cancel_btn = self:AddComponent(UIButton, cancel_btn_path)
    self.title = self:AddComponent(UIText, title_path)
    self.desc = self:AddComponent(UIText, desc_path)
    self.title:SetLocalText(305037)
    self.desc:SetLocalText(305039)
    self.back_btn = self:AddComponent(UIButton, back_btn_path)
    
    self.btns = self:AddComponent(UIBaseContainer, btn_go_path)
    self.confirm_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnConfirmBtnClick()
    end)
    self.cancel_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnCancelBtnClick()
    end)
    self.back_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBackClick()
    end)

    self.event_trigger = self:AddComponent(UIEventTrigger, trigger_path)
    self.event_trigger:OnDrag(function(eventData)
        self:OnDrag(eventData)
    end)
    self.event_trigger:OnBeginDrag(function(eventData)
        self:OnBeginDrag(eventData)
    end)
    self.event_trigger:OnEndDrag(function(eventData)
        self:OnEndDrag(eventData)
    end)
    self.event_trigger:OnPointerClick(function(eventData)
        self:OnPointerClick(eventData)
    end)
end

local function ComponentDestroy(self)
    if self.actDelayTimer then
        self.actDelayTimer:Stop()
        self.actDelayTimer = nil
    end

end

local function OnDrag(self, eventData)
    if self.curModel == PanelMode.Model_Mine then
        local curPos = eventData.position
        local posV3 = Vector3.New(curPos.x, curPos.y,0)
        local tilePos =  CS.SceneManager.World:GetRaycastGroundPoint(posV3)
        local posIndex = SceneUtils.WorldToTileIndex(tilePos)
        self:ChangeIndex(posIndex)
    elseif self.curModel == PanelMode.Model_Map then
        local totalW = Screen.width
        local totalH = Screen.height
        local adjustX = self.prePos.x - eventData.position.x
        local adjustY = self.prePos.y - eventData.position.y
        self.prePos = eventData.position
        local pos = CS.SceneManager.World:ScreenPointToWorld(Vector3.New(totalW / 2 + adjustX, totalH / 2 + adjustY), 0)
        CS.SceneManager.World:Lookat(pos)
        self:ResetBtnPos()
    end
end

local function OnBeginDrag(self, eventData)
    local curPos = eventData.position
    local posV3 = Vector3.New(curPos.x, curPos.y,0)
    local tilePos =  CS.SceneManager.World:GetRaycastGroundPoint(posV3)
    local posIndex = SceneUtils.WorldToTileIndex(tilePos)
    for _, v in ipairs(self.data.tiles) do
        local pos = SceneUtils.TileIndexToWorld(self.curIndex) + Vector3(v.x, 0, v.z)
        local index = SceneUtils.WorldToTileIndex(pos)
        if index == posIndex then
            self.curModel = PanelMode.Model_Mine
            return
        end
    end
    self.curModel = PanelMode.Model_Map
    self.prePos = eventData.position
end

local function OnEndDrag(self)
    self.curModel = PanelMode.Model_Null
    self:ResetBtnPos()
end

local function OnPointerClick(self, eventData)
    if self.curModel ~= PanelMode.Model_Null then
        return
    end
    local curPos = eventData.position
    local posV3 = Vector3.New(curPos.x, curPos.y,0)
    local tilePos =  CS.SceneManager.World:GetRaycastGroundPoint(posV3)
    local posIndex = SceneUtils.WorldToTileIndex(tilePos)
    self:ChangeIndex(posIndex)
end

local function DataDefine(self)
    self.curIndex = 0--当前所在坐标点
    self.putState = BuildPutState.None
    self.curModel = PanelMode.Model_Null
    self.allMines = {}
end

local function DataDestroy(self)
    self.curIndex = nil
    self.putState = nil
    self.curModel = PanelMode.Model_Null
    self.allMines = {}
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ReInit(self)
    self.data = self.ctrl:GetPanelData()
    self.needDoCancelFunction = true
    if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UIMain) then
        EventManager:GetInstance():Broadcast(EventId.UIMAIN_VISIBLE,false)
    end
    CS.SceneManager.World:SetUseInput(false)
    self.tile = self.data.numPerLine

    local willPos = CS.SceneManager.World.CurTarget
    GoToUtil.GotoWorldPos(willPos + TilePosDelta[self.tile], 30, LookAtFocusTime,function()
        CS.SceneManager.World:SetCameraMaxHeight(69)
    end,LuaEntry.Player:GetCurServerId())
    self.btns:SetActive(false)
    self.actDelayTimer = TimerManager:GetInstance():DelayInvoke(function()
        self:ResetBtnPos()
        self.btns:SetActive(true)
        if self.actDelayTimer then
            self.actDelayTimer:Stop()
            self.actDelayTimer = nil
        end
    end, LookAtFocusTime + 0.05)
    
    self:LoadBuildSelect()
    self:AddAllMine()
    self:ChangeIndex(SceneUtils.WorldToTileIndex(willPos))
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function ClosePanel(self)
    if CS.SceneManager.World ~= nil then
        CS.SceneManager.World:SetUseInput(true)
        CS.SceneManager.World:ResetCameraMaxHeight()
        CS.SceneManager.World:SetTouchInputControllerEnable(true)
        CS.SceneManager.World.touchPickablePos:Clear()
    end
end

local function OnConfirmBtnClick(self)
    DataCenter.PresidentMineRefreshManager:KingRefreshDesert(self.curIndex)
    self.ctrl:CloseSelf()
end

local function OnCancelBtnClick(self)
    self.ctrl:CloseSelf()
end

local function OnBackClick(self)
    self:OnCancelBtnClick()
end

local function LoadBuildSelect(self)
    --self:GameObjectInstantiateAsync(string.format(UIAssets.BuildSelect, self.tile, self.tile) , function(request)
    --    if request.isError then
    --        return
    --    end
    --    local go = request.gameObject
    --    if go ~= nil then
    --        go:SetActive(true)
    --        go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
    --        self.buildSelect = go:GetComponent(typeof(CS.BuildSelect))
    --        self:RefreshBuildSelect()
    --    end
    --end)
end

local function RefreshBuildSelect(self)
    if self.buildSelect ~= nil then
        local v = SceneUtils.TileIndexToWorld(self.curIndex) + BlockPos
        self.buildSelect.transform:Set_position(v.x, v.y, v.z)
        self.buildSelect:ChangeColor(self.putState == BuildPutState.Ok)
    end
    self:ResetMinePosition()
end

local function ChangeIndex(self,index)
    self.curIndex = index
    local lastPutState = self.putState
    
    self.putState = self:GetPutState()
    self:RefreshNoReason(lastPutState ~= self.putState,lastPutState == BuildPutState.None or ((lastPutState == BuildPutState.Ok) ~= (self.putState == BuildPutState.Ok)))
    self:RefreshBuildSelect()
    self:ResetBtnPos()
end

local function RefreshNoReason(self, isChangeOk)
    if isChangeOk then
        if self.putState == BuildPutState.Ok then
            self.confirm_btn:SetInteractable(true)
            self.confirm_img:LoadSprite("Assets/Main/Sprites/UI/UIBuildBtns/uibuild_btn_confirm")
        else
            self.confirm_btn:SetInteractable(false)
            self.confirm_img:LoadSprite("Assets/Main/Sprites/UI/UIBuildBtns/uibuild_btn_confirm_gray")
        end
    end
end

local function AddAllMine(self, arr)
    for k, v in ipairs(self.data.tiles) do
        self:AddOneMine(v)
    end
end

local function AddOneMine(self, data)
    if data.type == 0 then
        return
    end
    
    self:GameObjectInstantiateAsync(data.prefabPath, function(request)
        if request.isError then
            return
        end
        local go = request.gameObject
        if go ~= nil then
            go:SetActive(true)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local v = SceneUtils.TileIndexToWorld(self.curIndex) + Vector3(data.x, 0.1, data.z)
            go.transform:Set_position(v.x, v.y, v.z)
            local levelText = go.transform:Find("icon/name"):GetComponent(typeof(CS.SuperTextMesh))
            levelText.text = self.data.level
            self.allMines[data.index] = go
        end
    end)
end

local function ResetMinePosition(self)
    if self.data == nil then
        return
    end
    for _, v in ipairs(self.data.tiles) do
        if self.allMines[v.index] ~= nil then
            local pos = SceneUtils.TileIndexToWorld(self.curIndex) + Vector3(v.x, 0.1, v.z)
            self.allMines[v.index].transform:Set_position(pos.x, pos.y, pos.z)
        end
    end
end

local function ResetBtnPos(self)
    local v3 = SceneUtils.TileIndexToWorld(self.curIndex)
    v3.x = v3.x - self.data.numPerLine + 1
    v3.y = v3.y
    v3.z = v3.z - self.data.numPerLine - 1

    local pos = CS.SceneManager.World:WorldToScreenPoint(v3)
    self.btns.transform.position = pos
end

local function GetPutState(self)
    for _, v in ipairs(self.data.tiles) do
        local pos = SceneUtils.TileIndexToWorld(self.curIndex) + Vector3(v.x, 0, v.z)
        local index = SceneUtils.WorldToTileIndex(pos)
        if CS.SceneManager.World:IsInMapByIndex(index) == false then
            return BuildPutState.OutUnlockRange
        end
        local v2 = SceneUtils.IndexToTilePos(index, ForceChangeScene.World)
        if DataCenter.BirthPointTemplateManager:IsInAllianceCityRange(v2.x,v2.y) then
            return BuildPutState.AlCityBuilding
        end

        local worldTileInfo = CS.SceneManager.World:GetWorldTileInfo(index)
        if worldTileInfo ~= nil then
            local desertInfo = worldTileInfo:GetWorldDesertInfo()
            if desertInfo ~= nil then
                return BuildPutState.Building
            end
        end
        if SceneUtils.IsInBlackRange(index) then
            return BuildPutState.InBlackLandRange
        end
        if  DataCenter.DesertDataManager:CanBuildByPointId(index, BuildingTypes.FUN_BUILD_MAIN, false) ==false then
            return BuildPutState.NoInAllianceCenterRange
        end

        local temp =  DataCenter.WorldPointManager:GetPointInfo(index)
        if temp ~= nil then
            if temp.PointType == WorldPointType.PlayerBuilding then
                return BuildPutState.Building
            elseif temp.PointType == WorldPointType.WorldCollectResource then
                return BuildPutState.Collect
            elseif temp.PointType == WorldPointType.WorldResource then
                return BuildPutState.OnWorldResource
            elseif temp.PointType == WorldPointType.SAMPLE_POINT or temp.PointType == WorldPointType.SAMPLE_POINT_NEW then
                return BuildPutState.OnSample
            elseif temp.PointType == WorldPointType.EXPLORE_POINT or temp.PointType == WorldPointType.DETECT_EVENT_PVE then
                return BuildPutState.OnExplore
            elseif temp.PointType == WorldPointType.GARBAGE then
                return BuildPutState.OnGarbage
            elseif temp.PointType == WorldPointType.MONSTER_REWARD then
                return BuildPutState.MONSTER_REWARD
            end
        end
    end
    return BuildPutState.Ok
end

UIPresidentRefreshMineView.GetPutState = GetPutState
UIPresidentRefreshMineView.ResetBtnPos = ResetBtnPos
UIPresidentRefreshMineView.ResetMinePosition = ResetMinePosition
UIPresidentRefreshMineView.AddAllMine = AddAllMine
UIPresidentRefreshMineView.AddOneMine = AddOneMine
UIPresidentRefreshMineView.OnCreate= OnCreate
UIPresidentRefreshMineView.OnDestroy = OnDestroy
UIPresidentRefreshMineView.OnEnable = OnEnable
UIPresidentRefreshMineView.OnDisable = OnDisable
UIPresidentRefreshMineView.OnAddListener = OnAddListener
UIPresidentRefreshMineView.OnRemoveListener = OnRemoveListener
UIPresidentRefreshMineView.ComponentDefine = ComponentDefine
UIPresidentRefreshMineView.ComponentDestroy = ComponentDestroy
UIPresidentRefreshMineView.DataDefine = DataDefine
UIPresidentRefreshMineView.DataDestroy = DataDestroy
UIPresidentRefreshMineView.ReInit = ReInit
UIPresidentRefreshMineView.ClosePanel = ClosePanel
UIPresidentRefreshMineView.OnConfirmBtnClick = OnConfirmBtnClick
UIPresidentRefreshMineView.OnCancelBtnClick = OnCancelBtnClick
UIPresidentRefreshMineView.RefreshBuildSelect = RefreshBuildSelect
UIPresidentRefreshMineView.LoadBuildSelect = LoadBuildSelect
UIPresidentRefreshMineView.ChangeIndex = ChangeIndex
UIPresidentRefreshMineView.RefreshNoReason = RefreshNoReason
UIPresidentRefreshMineView.OnBackClick = OnBackClick
UIPresidentRefreshMineView.OnDrag = OnDrag
UIPresidentRefreshMineView.OnBeginDrag = OnBeginDrag
UIPresidentRefreshMineView.OnEndDrag = OnEndDrag
UIPresidentRefreshMineView.OnPointerClick = OnPointerClick

return UIPresidentRefreshMineView