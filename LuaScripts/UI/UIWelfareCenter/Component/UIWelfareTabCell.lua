---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2024/4/9 21:07
---
local UIWelfareTabCell = BaseClass("UIWelfareTabCell",UIBaseContainer)
local base = UIBaseContainer
local name1_path = "text1"
local name2_path = "checkText1"
local red_point_path = "RedPoint"
local red_num_path = "RedPoint/RedNum"
local new_dot_path = "NewDot"
local select_img_path = "TypeButton/select"
local btn_path = "TypeButton"
local icon_path = "text1/Icon"
local checkIcon_path = "checkText1/checkIcon"
local toEnd_path = "toEnd"
local toEndTxt_path = "toEnd/Bg/toEndTxt"
local toEndEff_path = "toEnd/toEndEff"
local open_condition_path = "openCondition"

function UIWelfareTabCell:OnCreate(id,sourceType)
    base.OnCreate(self)
    
    self.id = id
    self.sourceType = sourceType
    self.name = self:AddComponent(UITextMeshProUGUIEx, name1_path)
    self.nameSelect = self:AddComponent(UITextMeshProUGUIEx, name2_path)
    self.redPoint = self:AddComponent(UIImage, red_point_path)
    self.redNum = self:AddComponent(UITextMeshProUGUIEx, red_num_path)
    self.newDot = self:AddComponent(UIBaseContainer, new_dot_path)
    self.select = self:AddComponent(UIImage, select_img_path)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.btn:SetOnClick(function ()
        self:OnClick()
    end)
    self.icon = self:AddComponent(UIImage,icon_path)
    self.checkIcon = self:AddComponent(UIImage,checkIcon_path)
    self.toEndN = self:AddComponent(UIBaseContainer, toEnd_path)
    self.toEndTxtN = self:AddComponent(UITextMeshProUGUIEx, toEndTxt_path)
    self.toEndTxtN:SetLocalText(208255)
    self.toEndEffN = self:AddComponent(UIBaseContainer, toEndEff_path)
    self.open_condition = self:AddComponent(UITextMeshProUGUIEx, open_condition_path)
    self.open_condition:SetActive(false)
end

function UIWelfareTabCell:OnDestroy()
    self.id = nil

    -- Component
    self.name = nil
    self.nameSelect = nil
    self.redPoint = nil
    self.redNum = nil
    self.newDot = nil
    self.select = nil
    self.btn = nil
    self.icon = nil
    self.checkIcon = nil

    base.OnDestroy(self)
end

function UIWelfareTabCell:SetData(cellData)
    self.open_condition:SetActive(false)
    self.cellData = cellData
    self.id = cellData.id
    self.sourceType = cellData.sourceType
    self:RefreshRedDot(cellData)
    local currentId = self.view.ctrl:GetCurrentActivityId()
    if currentId == self.data.id then
        self:SetSelect()
    else
        self:SetUnSelect()
    end
end

function UIWelfareTabCell:RefreshRedDot(cellData)
    local isNew = false
    local isToEnd = false
    local showEff = false
    if cellData.sourceType == ActivitySource.activity then
        self.data = self.view.ctrl:GetActivityDataById(cellData.id)
        isNew = DataCenter.ActivityListDataManager:IsActivityNew(self.id)
        isToEnd, showEff = DataCenter.ActivityListDataManager:CheckIfIsToEnd(self.id)
        self.open_condition:SetActive(not string.IsNullOrEmpty(self.data.unlockStr))
        if not string.IsNullOrEmpty(self.data.unlockStr) then
            self.open_condition:SetText(self.data.unlockStr)
        end
        if not self.data or not self.data.type then
            return
        end
        self:SetActive(true)
        self.name:SetText(self.data.name)
        self.nameSelect:SetText(self.data.name)
        if isNew then
            self.newDot:SetActive(true)
            self.redPoint:SetActive(false)
            self.toEndN:SetActive(false)
        elseif isToEnd then
            self.newDot:SetActive(false)
            self.toEndN:SetActive(true)
            self.redPoint:SetActive(false)
            self.toEndEffN:SetActive(showEff)
        elseif self.data.canGet > 0 then
            self.newDot:SetActive(false)
            self.toEndN:SetActive(false)
            self.redPoint:SetActive(true)
            self.redNum:SetText(self.data.canGet)
        else
            self.newDot:SetActive(false)
            self.toEndN:SetActive(false)
            self.redPoint:SetActive(false)
        end
    elseif cellData.sourceType == ActivitySource.shop then
        self:SetActive(true)
        self.data = cellData
        self.name:SetLocalText(cellData:getName())
        self.nameSelect:SetLocalText(cellData:getName())
        if cellData:getType() == WelfareTagType.HeroMonthCardNew and DataCenter.HeroMonthCardManager:ShowNewFlag() then
            isNew = true
        elseif cellData:getType() == WelfareTagType.KeepPay then
            local id = GetTableData("recharge", cellData.id, "para2")
            local data = DataCenter.KeepPayManager:GetData(id)
            isNew = (data and data:IsNew())
        elseif cellData:getType() == WelfareTagType.ChainPay then
            local actId = GetTableData("recharge", cellData.id, "para3")
            local data = DataCenter.ChainPayManager:GetData(actId)
            isNew = (data and data:IsNew())
        elseif cellData:getType() == WelfareTagType.GrowthPlan then
            local packId = GetTableData("recharge", cellData.id, "para1")
            local str = Setting:GetPrivateString(SettingKeys.GROWTH_PLAN_VISITED .. packId, "")
            isNew = string.IsNullOrEmpty(str)
        end
        local curWelfareData = self.view.ctrl:GetWelfareDataByWelfareId(cellData.id)
        if curWelfareData and curWelfareData:getRedDotNum() > 0 then
            self.redPoint:SetActive(true)
            self.redNum:SetText("")
        else
            self.redPoint:SetActive(false)
        end
        self.newDot:SetActive(isNew)
        self.toEndN:SetActive(false)
    end
end

function UIWelfareTabCell:SetRedDot()
    self:RefreshRedDot(self.cellData)
end

function UIWelfareTabCell:SetUnSelect()
    self.select:SetActive(false)
    self.nameSelect:SetActive(false)
    self.name:SetActive(true)
end

function UIWelfareTabCell:SetSelect()
    self.select:SetActive(true)
    self.nameSelect:SetActive(true)
    self.name:SetActive(false)
end

function UIWelfareTabCell:OnClick()
    self.view:OnActivityItemClick(tonumber(self.id),self.cellData)
end

return UIWelfareTabCell