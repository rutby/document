---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2024/4/9 18:54
---
local UIPersonalArms = require "UI.UIActivityCenterTable.Component.UIPersonalArms"
local AllianceArms = require "UI.UIActivityCenterTable.Component.AllianceArms.AllianceArmsActivityMain"
local UISevenDay = require "UI.UIActivityCenterTable.Component.NoviceSevenDay.SevenDay"
local UISevenDayVip = require "UI.UIActivityCenterTable.Component.NoviceSevenDay.SevenDayVip"
local UIActivityEdenWar = require "UI.UIActivityCenterTable.Component.EdenWar.UIActivityEdenWar"
local LeadingQuest = require "UI.UIActivityCenterTable.Component.LeadingTarget.LeadingQuestMain"
local LeadingQuestOther = require "UI.UIActivityCenterTable.Component.LeadingTarget.LeadingQuestOther"
local RobotWarsMain = require "UI.UIActivityCenterTable.Component.RobotWars.RobotWarsMain"
local UIGloryPreview = require "UI.UIGlory.UIGloryMain.Component.UIGloryMainPreview"
local UICampScore = require "UI.UIGlory.UIGloryMain.Component.UICampScore"
local UIGloryMain = require "UI.UIGlory.UIGloryMain.Component.UIGloryMain"
local BarterShop = require "UI.UIActivityCenterTable.Component.BarterShop.BarterShopMain"
local ActWorldBoss = require "UI.UIActivityCenterTable.Component.ActBoss.ActWorldBoss"
local BarterShopNoticeMain = require "UI.UIActivityCenterTable.Component.BarterShopNotice.BarterShopNoticeMain"
local DigActivityMain = require "UI.UIActivityCenterTable.Component.Dig.DigActivityMain"
local SeasonPassMain = require "UI.UIActivityCenterTable.Component.SeasonPass.SeasonPassMain"
local ThroneMain = require "UI.UIActivityCenterTable.Component.Throne.ThroneMain"
local HeroGrowthMain = require "UI.UIActivityCenterTable.Component.HeroGrowth.HeroGrowthMain"
local UILuckyRoll = require "UI.UIActivityCenterTable.Component.UILuckyRoll.UILuckyRoll"
local UIBattlePass = require "UI.UIActivityCenterTable.Component.UIBattlePass.UIBattlePass"
local UIGolloesCards = require "UI.UIActivityCenterTable.Component.GolloesCards.UIGolloesCards"
local JigsawPuzzle = require "UI.UIActivityCenterTable.Component.JigsawPuzzle.JigsawPuzzleMain"
local AlContributeMain = require "UI.UIActivityCenterTable.Component.AlContribute.AlContributeMain"
local ActSevenDay = require "UI.UIActivityCenterTable.Component.UIActivitySevenDay.ActSevenDay"
local MonsterTower = require "UI.UIActivityCenterTable.Component.MonsterTower.UIMonsterTower"
local ChristmasCelebrateMain = require "UI.UIActivityCenterTable.Component.ChristmasCelebrate.ChristmasCelebrateMain"
local LuckyShopMain = require "UI.UIActivityCenterTable.Component.LuckyShop.LuckyShopMain"
local ActSevenLogin = require "UI.UIActivityCenterTable.Component.SevenLogin.ActSevenLogin"
local UIGiftBox = require "UI.UIActivityCenterTable.Component.GiftBox.UIGiftBox"
local UISeasonWeekCard = require "UI.UIActivityCenterTable.Component.SeasonWeekCard.UISeasonWeekCard"
local UISeasonRank = require "UI.UIActivityCenterTable.Component.SeasonRank.UISeasonRank"
local UIAllianceSeasonForce = require "UI.UIActivityCenterTable.Component.AllianceSeasonForce.UIAllianceSeasonForce"
local DecorationGiftPackage = require "UI.UIActivityCenterTable.Component.DecorationGiftPackage.DecorationGiftPackageMain"
local UIWorldTrend = require "UI.UIActivityCenterTable.Component.UIWorldTrend.UIWorldTrend"
local UIBlackKnightMain = require "UI.UIActivityCenterTable.Component.UIBlackKnight.UIBlackKnightMain"
local UIActivityDonateSoldier = require "UI.UIActivityCenterTable.Component.UIActivityDonateSoldier.UIActivityDonateSoldier"
local UIChaseDeer = require "UI.UIChaseDeer.UIChaseDeerAct.Component.UIChaseDeerAct"
local HeroEvolveMainView = require "UI.UIActivityCenterTable.Component.HeroEvolve.HeroEvolveMainView"
local UIPersonSeasonRank = require "UI.UIActivityCenterTable.Component.PersonSeasonRank.UIPersonSeasonRank"
local UIPresidentAuthorityMain = require "UI.UIActivityCenterTable.Component.PresidentAuthority.UIPresidentAuthorityMain"
local UIActivityALVSMain = require "UI.UIActivityCenterTable.Component.UIActivityALVSDonateSoldier.UIActivityALVSMain"
local UIScratchOffGame = require "UI.UIActivityCenterTable.Component.ScratchOffGame.ScratchOffGame"
local UIMining = require "UI.UIActivityCenterTable.Component.Mining.Mining"
local SeasonShop = require "UI.UIActivityCenterTable.Component.SeasonShop.SeasonShop"
local Mysterious = require "UI.UIActivityCenterTable.Component.Mysterious.Mysterious"
local UIAllianceActMine = require"UI.UIActivityCenterTable.Component.AllianceActMine.AllianceActMine"
local UIActivityAllianceBoss = require("UI.UIAllianceBoss.UIActivityAllianceBoss.UIActivityAllianceBoss")
local UIHeroTrial = require "UI.UIActivityCenterTable.Component.UIHeroTrial.UIHeroTrial"
local ActMastery = require "UI.UIMastery.Component.ActMastery"
local GolloBox = require "UI.UIActivityCenterTable.Component.GolloBox.GolloBox"
local UIDoubleSeasonScore = require "UI.UIActivityCenterTable.Component.UIDoubleSeasonScore.UIDoubleSeasonScore"
local UIActDragon = require "UI.UIActivityCenterTable.Component.ActDragon.UIActDragon"
local UIActDragonNotice = require "UI.UIActivityCenterTable.Component.ActDragon.UIActDragonNotice"
local UICrossDesert = require "UI.UIActivityCenterTable.Component.CrossServerDesert.UICrossDesert"
local MineCaveMain = require "UI.UIActivityCenterTable.Component.MineCave.MineCaveMain"--矿洞
local UIColonizeWarRank = require "UI.UIActivityCenterTable.Component.ColonizeWarRank.UIColonizeWarRank"
local UIEdenKill = require "UI.UIEdenKill.UIEdenKill"
local UIEdenCrossWar = require "UI.UIActivityCenterTable.Component.EdenCrossWar.UIEdenCrossWar"
local ActAllianceRecord = require "UI.UIActivityCenterTable.Component.ActAllianceRecord.ActAllianceRecord"
local UITurfWar = require "UI.UITurfWar.UITurfWar"
local UIChangeNameAndPic = require "UI.UIActivityCenterTable.Component.UIChangeNameAndPic.UIChangeNameAndPic"
local UICountryRating = require "UI.UIActivityCenterTable.Component.UICountryRating.UICountryRating"
local UIDrakeBoss = require "UI.UIActivityCenterTable.Component.UIDrakeBoss.UIDrakeBoss"
local DispatchTask = require "UI.UIActivityCenterTable.Component.DispatchTask.DispatchTask"

local UIGainDiamonds = require "UI.UIGiftPackage.Component.UIGainDiamonds"
local GiftPackagePagePanel = require "UI.UIGiftPackage.Component.GiftPackagePagePanel"
local WeeklyPackageMain = require "UI.UIGiftPackage.Component.WeeklyPackage.WeeklyPackageMain"
local WeeklyPackageNewMain = require "UI.UIGiftPackage.Component.WeeklyPackageNew.WeeklyPackageNewMain"
local WeekCardMain = require "UI.UIGiftPackage.Component.WeekCard.WeekCardMain"
local HeroMedalPackageMain = require "UI.UIGiftPackage.Component.HeroMedal.HeroMedalPackageMain"
local PaidLotteryMain = require "UI.UIGiftPackage.Component.PaidLottery.PaidLotteryMain"
local UIGolloesMonthCardPanel = require "UI.UIGiftPackage.Component.MonthCard.UIGolloesMonthCardContent"
local UIRobotPackPanel = require "UI.UIGiftPackage.Component.UIRobotPackPanel"
local UIPiggyBankPanel = require "UI.UIGiftPackage.Component.UIPiggyBankPanel"
local UIEnergyBankPanel = require "UI.UIGiftPackage.Component.UIEnergyBankPanel"
local UIGrowthPlanPanel = require "UI.UIGiftPackage.Component.UIGrowthPlanPanel"
local UIScrollPackContent = require "UI.UIScrollPack.Component.UIScrollPackContent"
local HeroMonthCardPanel = require "UI.UIGiftPackage.Component.HeroMonthCard.HeroMonthCardMain"
local CumulativeRecharge = require "UI.UIGiftPackage.Component.CumulativeRecharge"
local DailyCumulativeRecharge = require "UI.UIGiftPackage.Component.DailyCumulativeRecharge.DailyCumulativeRecharge"
local UIKeepPayPanel = require "UI.UIGiftPackage.Component.UIKeepPayPanel"
local UIChainPayPanel = require "UI.UIGiftPackage.Component.UIChainPayPanel"
local DailyPackage = require "UI.UIGiftPackage.Component.DailyPackage"
local UIFirstCharge = require "UI.UIGiftPackage.Component.FirstCharge.UIFirstCharge"
local UILWDailyMustBuyMain = require "UI.UIGiftPackage.Component.DailyMustBuy.UILWDailyMustBuyMain"
--Panel 枚举
local PanelEnum =
{
    GainDiamonds = "UIGainDiamonds",
    GiftPackagePagePanel = "GiftPackagePagePanel",
    RobotPackPanel = "UIRobotPackPanel",
    WeeklyPackagePanel = "UIweeklyPackage",
    WeeklyPackageNewPanel = "WeeklyPackageNewPanel",
    WeekCardPanel = "WeekCardPanel",
    HeroMedalPackagePanel = "HeroMedalPackagePanel",
    GolloesMonthCardPanel = "UIGolloesMonthCardPanel",
    PiggyBankPanel = "UIPiggyBankPanel",
    EnergyBankPanel = "UIEnergyBankPanel",
    GrowthPlanPanel = "UIGrowthPlanPanel",
    ScrollPackContent = "UIScrollPackContent",
    HeroMonthCardPanel = "HeroMonthCardMain",
    CumulativeRecharge = "CumulativeRecharge",
    DailyCumulativeRecharge = "DailyCumulativeRecharge",
    KeepPayPanel = "KeepPayPanel",
    ChainPayPanel = "ChainPayPanel",
    DailyPackage = "DailyPackage",
    PaidLottery = "PaidLottery",
    FirstCharge = "FirstCharge",
    DailyMustBuy = "DailyMustBuy",
}

local PanelConf = {
    [PanelEnum.GainDiamonds] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/UIGainDiamonds.prefab",
        Script = UIGainDiamonds,
        Container = "UIGainDiamonds"
    },
    [PanelEnum.GiftPackagePagePanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/GiftPackagePagePanel.prefab",
        Script = GiftPackagePagePanel,
        Container = "GiftPackagePagePanel"
    },
    [PanelEnum.RobotPackPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/UIRobotPackPanel.prefab",
        Script = UIRobotPackPanel,
        Container = "UIRobotPackPanel"
    },
    [PanelEnum.WeeklyPackagePanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/WeeklyPackageMain.prefab",
        Script = WeeklyPackageMain,
        Container = "UIweeklyPackage"
    },
    [PanelEnum.WeeklyPackageNewPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/WeeklyPackageNew/WeeklyPackageNewMain.prefab",
        Script = WeeklyPackageNewMain,
        Container = "WeeklyPackageNewPanel"
    },
    [PanelEnum.WeekCardPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/WeekCard/WeekCardMain.prefab",
        Script = WeekCardMain,
        Container = "WeekCardPanel"
    },
    [PanelEnum.HeroMedalPackagePanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/HeroMedalPackageMain.prefab",
        Script = HeroMedalPackageMain,
        Container = "HeroMedalPackagePanel"
    },
    [PanelEnum.PaidLottery] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/PaidLottery/PaidLotteryMain.prefab",
        Script = PaidLotteryMain,
        Container = "PaidLotteryPanel"
    },
    [PanelEnum.GolloesMonthCardPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/UIGolloesMonthCardItem.prefab",
        Script = UIGolloesMonthCardPanel,
        Container = "UIGolloesMonthCardPanel"
    },
    [PanelEnum.PiggyBankPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/UIPiggyBankPanel.prefab",
        Script = UIPiggyBankPanel,
        Container = "UIPiggyBankPanel"
    },
    [PanelEnum.EnergyBankPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/UIEnergyBankPanel.prefab",
        Script = UIEnergyBankPanel,
        Container = "UIEnergyBankPanel"
    },
    [PanelEnum.GrowthPlanPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/GrowthPlan/UIGrowthPlanPanel.prefab",
        Script = UIGrowthPlanPanel,
        Container = "UIGrowthPlanPanel"
    },
    [PanelEnum.ScrollPackContent] = {
        Asset = "Assets/Main/Prefab_Dir/UI/UIScrollPack/UIScrollPackContent.prefab",
        Script = UIScrollPackContent,
        Container = "UIScrollPackContent"
    },
    [PanelEnum.HeroMonthCardPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/HeroMonthCard/HeroMonthCardMain.prefab",
        Script = HeroMonthCardPanel,
        Container = "HeroMonthCardMain"
    },
    [PanelEnum.KeepPayPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/KeepPay/UIKeepPayPanel.prefab",
        Script = UIKeepPayPanel,
        Container = "UIKeepPayPanel"
    },
    [PanelEnum.ChainPayPanel] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/ChainPay/UIChainPayPanel.prefab",
        Script = UIChainPayPanel,
        Container = "UIChainPayPanel"
    },
    [PanelEnum.DailyPackage] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/DailyPackage/DailyPackage.prefab",
        Script = DailyPackage,
        Container = "DailyPackage"
    },
    [PanelEnum.FirstCharge] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/FirstCharge/UIFirstCharge.prefab",
        Script = UIFirstCharge,
        Container = "UIFirstChargePanel"
    },
    [PanelEnum.DailyMustBuy] = {
        Asset = "Assets/Main/Prefab_Dir/UI/GiftPackage/DailyMustBuy/DailyMustBuy.prefab",
        Script = UILWDailyMustBuyMain,
        Container = "UILWDailyMustBuyMain"
    },
}

local UIWelfareCenterView = BaseClass("UIWelfareCenterView",UIBaseView)
local UIWelfareTabCell = require "UI.UIWelfareCenter.Component.UIWelfareTabCell"
local base = UIBaseView

local close_btn_path = "UICommonFullTop/CloseBtn"
local tabScrollView_path = "UICommonFullTop/Bg2/LeftScrollView"
local content_path = "UICommonFullTop/Bg2/LeftScrollView/Viewport/Content"
local rightContent_path = "UICommonFullTop/Bg2/RightView"
local titleTxt_path = "UICommonFullTop/imgTitle/Common_img_title/titleText"

function UIWelfareCenterView:OnCreate()
    base.OnCreate(self)
    local userdata = self:GetUserData() or nil
    self.param = userdata
    self.ctrl:InitData()
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.tabScrollViewN = self:AddComponent(UIScrollRect, tabScrollView_path)
    self.content = self:AddComponent(UIBaseContainer, content_path)
    self.rightContent = self:AddComponent(UIBaseContainer,rightContent_path)
    self.titleTxt = self:AddComponent(UITextMeshProUGUIEx, titleTxt_path)
    self.titleTxt:SetLocalText(320006)
    self.lastCurType = 0
    self.goID = 0 --跳转活动ID
    self.panelList = {}
    self.panelComponentList = {}
    self.panels = {}
    self:ReInit()
    self.playSound = false
end

function UIWelfareCenterView:OnDestroy()
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    self:SetAllTabGroupDestroy()
    self.rightContent = nil
    self.close_btn = nil
    self.lastCurType = 0
    self.goID = nil
    self.panels = nil
    self.tabList = nil
    self.groupItems = nil
    self.groupDataList = nil
    self.loadedGroupNum = nil
    self.tabKeyIndex = nil
    self.playSound = nil
    base.OnDestroy(self)
end

function UIWelfareCenterView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.RefreshWelfareRedDot, self.OnRefreshWelfareRedDot)
    self:AddUIListener(EventId.RefreshActivityRedDot, self.OnRefreshWelfareRedDot)
    self:AddUIListener(EventId.OnSelectWelfareTypeChange,self.OnSelectWelfareTypeChange)
end


function UIWelfareCenterView:OnRemoveListener()
    self:RemoveUIListener(EventId.RefreshWelfareRedDot, self.OnRefreshWelfareRedDot)
    self:RemoveUIListener(EventId.RefreshActivityRedDot, self.OnRefreshWelfareRedDot)
    self:RemoveUIListener(EventId.OnSelectWelfareTypeChange,self.OnSelectWelfareTypeChange)
    base.OnRemoveListener(self)
end

function UIWelfareCenterView:OnRefreshWelfareRedDot()
    for index, cell in pairs(self.groupItems) do
        cell:SetRedDot()
    end
end

function UIWelfareCenterView:ReInit()
    --self.goID, self.forceToFirst,self.actParam = self:GetUserData()
    --if self.goID then
    --    self.goID = tonumber(self.goID)
    --end
    self:OnRefreshTopNew()
end

function UIWelfareCenterView:OnRefreshTopNew()
    self:SetAllTabGroupDestroy()
    self.loadedGroupNum = 0
    self.selectTabIndex = 1
    self.tableDataList = self.ctrl:GetTableGroupList()

    self.groupItems = {}
    self.tabList = {}
    self.tabKeyIndex = {}
    for i, v in ipairs(self.tableDataList) do
        self.tabList[v.id] = self:GameObjectInstantiateAsync(UIAssets.UIWelfareTabCell, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.content.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = v.id
            local cell = self.content:AddComponent(UIWelfareTabCell, go.name, v)
            cell:SetData(v)
            table.insert(self.tabKeyIndex,tonumber(v.id))
            self.groupItems[tonumber(v.id)] = cell
            if table.count(self.groupItems) == #self.tableDataList then
                self:OnCellLoadFinish()
            end
        end)
    end
end

function UIWelfareCenterView:OnCellLoadFinish()
    if self.param and self.param.selectId then
        self:ExecuteClickEventById(self.param.selectId)
    else
        local selectId,index = self.ctrl:GetDefaultSelectTabId(self.tableDataList)
        self:ExecuteClickEventById(selectId)
    end
end

function UIWelfareCenterView:OnSelectWelfareTypeChange(activityId)
    if activityId then
        self:ExecuteClickEventById(activityId)
    end
end

function UIWelfareCenterView:ExecuteClickEventById(selectId)
    if self.groupItems[tonumber(selectId)] then
        self.groupItems[tonumber(selectId)]:OnClick()
    end
    local finalIndex = 1
    for index,id in ipairs(self.tabKeyIndex) do
        if tonumber(id) == tonumber(selectId) then
            break
        end
        finalIndex = finalIndex + 1
    end
    self:SetScrollRectPos(finalIndex)
end

function UIWelfareCenterView:SetScrollRectPos(index)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
    local contentSize = self.content.rectTransform.rect
    local srSize = self.tabScrollViewN.rectTransform.rect
    local tabSizeY = 219
    local groupSizeY = -5
    local targetPosY = 0
    targetPosY = targetPosY + groupSizeY + index * tabSizeY
    local prog = 0
    if targetPosY > srSize.width then
        prog = (targetPosY - srSize.width) / (contentSize.width - srSize.width)
    end
    self.tabScrollViewN:SetHorizontalNormalizedPosition(prog)
end

function UIWelfareCenterView:SetAllTabGroupDestroy()
    if self.content then
        self.content:RemoveComponents(UIWelfareTabCell)
    end
    if self.tabList~=nil then
        for k,v in pairs(self.tabList) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

function UIWelfareCenterView:GotoButtonType(type)
    local firstMallData = self.ctrl:GetGotoMallData(type)
    if firstMallData then
        local userdata = {}
        userdata["targetPackageId"] = firstMallData:getID()
        userdata["welfareTagType"] = firstMallData:getType()
        GoToUtil.GotoOpenView(UIWindowNames.UIGiftPackage,{anim = true},userdata)
    end
end

function UIWelfareCenterView:OnActivityItemClick(id,cellData)
    local oldId = self.ctrl:GetCurrentActivityId()
    self.cellData = cellData
    if tonumber(oldId) ~= tonumber(id) then
        if oldId and oldId ~= "" then
            self.groupItems[tonumber(oldId)]:SetUnSelect()
        end
        self.groupItems[tonumber(id)]:SetSelect()
        if cellData.sourceType == ActivitySource.activity then
            self.ctrl:SetCurrentActivityId(tostring(id))
            self:RefreshActivityWindowContent()
        elseif cellData.sourceType == ActivitySource.shop then
            self.ctrl:SetCurrentActivityId(id)
            self:RefreshShopWindowContent()
        end

        if self.playSound then
            SoundUtil.PlayEffect("Effect_common_switch")
        else
            self.playSound = true
        end
    end
end

function UIWelfareCenterView:RefreshShopWindowContent()
     self.curWelfareType = self.cellData:getType()
    self:ShowClickTypeButtonList()
    EventManager:GetInstance():Broadcast(EventId.CacheGoldStoreOpenType, self.curWelfareType)
end
function UIWelfareCenterView:ShowClickTypeButtonList()
    local tempComp = nil
    if self.lastActivityId ~= self.cellData.id then
        --self.panelComponentList[self.lastCurType]:SetActive(false)
        tempComp = self.panelComponentList[self.lastActivityId]
    end
    self.lastActivityId = self.cellData.id
    self.showMainType = ""
    self.showSubType = ""
    self.goldExchangeId = ""
    if self.curWelfareType == WelfareTagType["PackStore"] then -- 礼包商城
        self.goldExchangeId = self.userdata.goldExchangeId or ""
        self:ShowGiftPanel()
    elseif self.curWelfareType == WelfareTagType.ScrollPack then
        if self.panelList[self.cellData.id] then
            local packs = GiftPackageData.GetAllAvailablePackageByRechargeId(self.cellData.id, false)
            if packs[1] then
                local packId = packs[1]:getID()
                self.panelComponentList[self.cellData.id]:SetData(packId)
                self.panelComponentList[self.cellData.id]:SetActive(true)
            else
                self.ctrl:CloseSelf()
            end
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[self.cellData.id] = self:GameObjectInstantiateAsync("Assets/Main/Prefab_Dir/UI/UIScrollPack/UIScrollPackContent.prefab", function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = self.cellData.id
            local cell = self.rightContent:AddComponent(UIScrollPackContent, go.name)
            self.panelComponentList[self.cellData.id] = cell
            local packs = GiftPackageData.GetAllAvailablePackageByRechargeId(self.cellData.id, false)
            if packs[1] then
                local packId = packs[1]:getID()
                self.panelComponentList[self.cellData.id]:SetData(packId)
                self.panelComponentList[self.cellData.id]:SetActive(true)
            else
                self.ctrl:CloseSelf()
            end
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif self.curWelfareType == WelfareTagType.CumulativeRecharge then
        if self.panelList[self.cellData.id] then
            local id = GetTableData("recharge", self.cellData.id, "para2")
            local index = self.ctrl:GetWelfareIndexByWelfareId(self.cellData.id)
            self.welfarelist = self.ctrl:GetWelfareList()
            self.panelComponentList[self.cellData.id]:ReInit(self.welfarelist,tonumber(id),index,self.cellData.id)
            self.panelComponentList[self.cellData.id]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[self.cellData.id] = self:GameObjectInstantiateAsync( "Assets/Main/Prefab_Dir/UI/GiftPackage/CumulativeRecharge.prefab", function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = self.cellData.id
            local cell = self.rightContent:AddComponent(CumulativeRecharge, go.name)
            self.panelComponentList[self.cellData.id] = cell
            local id = GetTableData("recharge", self.cellData.id, "para2")
            local index = self.ctrl:GetWelfareIndexByWelfareId(self.cellData.id)
            self.welfarelist = self.ctrl:GetWelfareList()
            self.panelComponentList[self.cellData.id]:ReInit(self.welfarelist,tonumber(id),index,self.cellData.id)
            self.panelComponentList[self.cellData.id]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif self.curWelfareType == WelfareTagType.DailyCumulativeRecharge then
        if self.panelList[self.cellData.id] then
            local id = GetTableData("recharge", self.cellData.id, "para2")
            local index = self.ctrl:GetWelfareIndexByWelfareId(self.cellData.id)
            self.welfarelist = self.ctrl:GetWelfareList()
            self.panelComponentList[self.cellData.id]:ReInit(self.welfarelist,tonumber(id),index,self.cellData.id)
            self.panelComponentList[self.cellData.id]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[self.cellData.id] = self:GameObjectInstantiateAsync( "Assets/Main/Prefab_Dir/UI/GiftPackage/DailyCumulativeRecharge.prefab", function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = self.cellData.id
            local cell = self.rightContent:AddComponent(DailyCumulativeRecharge, go.name)
            self.panelComponentList[self.cellData.id] = cell
            local id = GetTableData("recharge", self.cellData.id, "para2")
            local index = self.ctrl:GetWelfareIndexByWelfareId(self.cellData.id)
            self.welfarelist = self.ctrl:GetWelfareList()
            self.panelComponentList[self.cellData.id]:ReInit(self.welfarelist,tonumber(id),index,self.cellData.id)
            self.panelComponentList[self.cellData.id]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    end
end

function UIWelfareCenterView:SetPanelActive(panel)
    for k, v in pairs(self.panelComponentList) do
        v:SetActive(k == panel)
    end
end

function UIWelfareCenterView:ShowGiftPanel()
    self:SetPanelActive(PanelEnum.GiftPackagePagePanel);
    if self.panels[PanelEnum.GiftPackagePagePanel] then
        local param = {}
        param.showMainType = self.showMainType
        param.showSubType = self.showSubType
        param.goldExchangeId = self.goldExchangeId
        param.welfareTagType = self.curWelfareType
        param.targetShowType = self.targetShowType
        param.targetPackageId = self.targetPackageId
        self.targetShowType = nil
        self.targetPackageId = nil
        param.callBack = function() self:CallBackActive() end
        self.panels[PanelEnum.GiftPackagePagePanel]:ReInit(param)
    else
        self:LoadPanel(PanelEnum.GiftPackagePagePanel)
    end
end

function UIWelfareCenterView:LoadPanel(targetPanel)
    local tempConf = PanelConf[targetPanel]
    if not self.panelList[targetPanel] then
        if not self.panelList then
            self.panelList = {}
        end
        if self.panelList[targetPanel] then
            return
        end
        self.panelList[targetPanel] = self:GameObjectInstantiateAsync("Assets/Main/Prefab_Dir/UI/GiftPackage/UIGainDiamonds.prefab", function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = self.cellData.id
            local cell = self.rightContent:AddComponent(tempConf.Script, go.name)
            self.panelComponentList[self.cellData.id] = cell
            self:ShowClickTypeButtonList()
        end)
    end
end


function UIWelfareCenterView:ShowCumulativeRechargePanel()
    self:SetPanelActive(self.cellData.id)
    if self.panelComponentList[PanelEnum.CumulativeRecharge] then
        local id = GetTableData("recharge", self.cellData.id, "para2")
        self.panelComponentList[PanelEnum.CumulativeRecharge]:ReInit(self.welfarelist,tonumber(id),self.selectTypeIndex,self.curRechargeId)
    else
        self:LoadPanel(PanelEnum.CumulativeRecharge)
    end
end

function UIWelfareCenterView:ShowDailyCumulativeRechargePanel()
    self:SetPanelActive(self.cellData.id)
    if self.panels[PanelEnum.DailyCumulativeRecharge] then
        local id = GetTableData("recharge", self.curRechargeId, "para2")
        self.panels[PanelEnum.DailyCumulativeRecharge]:ReInit(self.welfarelist,tonumber(id),self.selectTypeIndex,self.curRechargeId)
    else
        self:LoadPanel(PanelEnum.DailyCumulativeRecharge)
    end
end

function UIWelfareCenterView:RefreshActivityWindowContent()
    local currentActivity = self.ctrl:GetCurrentActivity()
    if currentActivity.type == self.lastCurType and currentActivity.activityId == self.lastActivityId then
        return
    end

    --local tempActId = self.ctrl:GetCurrentActivityId()
    if self.lastActivityId then
        DataCenter.ActivityListDataManager:SetActivityLastVisitTime(self.lastActivityId)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end

    --取消上一次选中
    local tempComp = nil
    if self.lastCurType ~= 0 and currentActivity.activityId ~= self.lastActivityId then
        --self.panelComponentList[self.lastCurType]:SetActive(false)
        tempComp = self.panelComponentList[self.lastActivityId]
    end
    self.lastCurType = currentActivity.type
    self.lastActivityId = currentActivity.activityId
    if currentActivity.type == EnumActivity.BarterShopNotice.Type then
        --兑换活动说明
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end

        local prefabName = string.IsNullOrEmpty(currentActivity.activity_pic) and "BarterShopNotice" or currentActivity.activity_pic
        local tempPath = string.format("Assets/Main/Prefab_Dir/UI/ActivityCenter/BarterShopNotice/%s.prefab", prefabName)
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(tempPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(BarterShopNoticeMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.DigActivity.Type then
        --挖掘活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.DigActivityMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(DigActivityMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.Throne.Type then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ThroneMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ThroneMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.SeasonPass.Type then
        --挖掘活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.SeasonPassMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(SeasonPassMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.HeroGrowth.Type then
        --英雄试炼
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local assetPath = UIAssets.HeroGrowthMain
        local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.id)
        if actListData.sub_type == 2 then
            assetPath = UIAssets.HeroGrowthMain_Box
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(HeroGrowthMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.ChristmasCelebrate.Type then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ChristmasCelebrateMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ChristmasCelebrateMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.AllianceCompete.Type then
        --联盟军备
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:RefreshAll()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceArms, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(AllianceArms,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:InitUI()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.Arms then
        --个人军备
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id,self.actParam)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local assetPath = UIAssets.PersonalArms
        local permanentData = DataCenter.ActPersonalArmsInfo:GetPermanentAct()
        local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.id)
        if permanentData and next(permanentData) and actListData.personalEventType ~= PersonalEventType.Kill then
            assetPath = UIAssets.PersonalArmsNew
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIPersonalArms,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id,self.actParam)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.SevenDay then
        --七日活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SendData()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local path = UIAssets.UIActivitySevenDay
        local script = UISevenDay
        if LuaEntry.DataConfig:CheckSwitch("dayact_vip") then
            path = UIAssets.UIActivitySevenDayVip
            script = UISevenDayVip
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(path, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(script,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SendData()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.LeadingQuest.Type then
        --战力提升活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.activityId)
        if activityInfo ~= nil then
            if activityInfo.sub_type == ActivityEnum.ActivitySubType.DrakeBoss then
                self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIDrakeBoss, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject
                    go.transform:SetParent(self.rightContent.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go.transform:Set_sizeDelta(0, 0)
                    go.transform:Set_anchoredPosition(0, 0)
                    go.name = currentActivity.activityId
                    local cell = self.rightContent:AddComponent(UIDrakeBoss,go.name)
                    self.panelComponentList[currentActivity.activityId] = cell
                    self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
                    self.panelComponentList[currentActivity.activityId]:SetActive(true)

                    if tempComp then
                        tempComp:SetActive(false)
                    end
                end)
            else
                local assetPath = string.IsNullOrEmpty(activityInfo.activity_pic) and UIAssets.LeadingQuest or ("Assets/Main/Prefab_Dir/UI/ActivityCenter/LeadingQuest/LeadingQuestMain_" .. activityInfo.activity_pic .. ".prefab")
                self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject;
                    go.transform:SetParent(self.rightContent.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go.transform:Set_sizeDelta(0, 0)
                    go.transform:Set_anchoredPosition(0, 0)
                    go.name = currentActivity.activityId
                    local cell = self.rightContent:AddComponent(LeadingQuest,go.name)
                    self.panelComponentList[currentActivity.activityId] = cell
                    self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
                    self.panelComponentList[currentActivity.activityId]:SetActive(true)

                    if tempComp then
                        tempComp:SetActive(false)
                    end
                end)
            end
        end
    elseif currentActivity.type == EnumActivity.RobotWars.Type then
        --赛季活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, { showPreviewGo = true })
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
        local uiAssetPath
        local script
        local actData = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.activityId)
        if seasonId > 2 then
            --if actData:HasGloryAct() then
            uiAssetPath = "Assets/Main/Prefabs/UI/UIGlory/UIGloryMain/UIGloryMain.prefab"
            script = UIGloryMain
        else
            uiAssetPath = string.format(UIAssets.RobotWars, seasonId)
            script = RobotWarsMain
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(uiAssetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(script, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, { showPreviewGo = true })
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.GloryPreview then
        -- S3星球大战预告
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, { showPreviewGo = false })
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIGloryPreview, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIGloryPreview, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, { showPreviewGo = false })
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            cell:SetSeasonId()

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceActMine then   --活动联盟矿
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceActMine, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIAllianceActMine, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.EdenAllianceActMine then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceActMine, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIAllianceActMine, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.EdenAllianceCrossActMine then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceActMine, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIAllianceActMine, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.JigsawPuzzle.Type then
        --拼图活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.JigsawPuzzle, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(JigsawPuzzle,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.AlContribute.Type then
        --拼图活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AlContributeMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(AlContributeMain,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.BarterShop.Type then
        --兑换活动
        local acrBarterInfo = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.id)
        if acrBarterInfo.SetIsNew then
            acrBarterInfo:SetIsNew(false)
        end
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local prefabName = string.IsNullOrEmpty(acrBarterInfo.activity_pic) and "BarterShopMain" or acrBarterInfo.activity_pic
        --UI不是Main的话都是皮肤兑换活动
        local tempPath = string.format("Assets/Main/Prefab_Dir/UI/ActivityCenter/BarterShop/%s.prefab", prefabName)
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(tempPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(BarterShop,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.EdenWar then
        --世界争霸
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActivityEdenWar, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform.localScale = ResetScale
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActivityEdenWar,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.WorldBoss then
        --世界 Boss
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ReInit(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActivityPirates, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ActWorldBoss,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ReInit(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.LuckyRoll then
        --幸运转盘
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.LuckyRoll, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UILuckyRoll,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.DispatchTask.Type then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActivityDispatchTask, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(DispatchTask,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ScratchOffGame then
        --刮刮乐
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ScratchOffGame, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIScratchOffGame,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.BattlePass then
        --战令
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIBattlePass, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIBattlePass,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.GolloesCards then
        --翻牌子
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIGolloesCards, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIGolloesCards,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ActSevenDay then
        --七日活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        if currentActivity.sub_type == 3 then  --英雄试炼
            self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.HeroTrial, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.transform:SetParent(self.rightContent.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.transform:Set_sizeDelta(0, 0)
                go.transform:Set_anchoredPosition(0, 0)
                go.name = currentActivity.activityId
                local cell = self.rightContent:AddComponent(UIHeroTrial, go.name)
                self.panelComponentList[currentActivity.activityId] = cell
                self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
                self.panelComponentList[currentActivity.activityId]:SetActive(true)
                if tempComp then
                    tempComp:SetActive(false)
                end
            end)
        else
            local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.activityId)
            local assetPath = string.IsNullOrEmpty(activityInfo.activity_pic) and UIAssets.UIActivitySevenDay or UIAssets.UIActSevenDayNew
            self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.transform:SetParent(self.rightContent.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = currentActivity.activityId
                local cell = self.rightContent:AddComponent(ActSevenDay,go.name)
                self.panelComponentList[currentActivity.activityId] = cell
                self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
                self.panelComponentList[currentActivity.activityId]:SetActive(true)

                if tempComp then
                    tempComp:SetActive(false)
                end
            end)
        end
    elseif currentActivity.type == ActivityEnum.ActivityType.MonsterTower then
        --怪物爬塔
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local prefabName = string.IsNullOrEmpty(currentActivity.activity_pic) and "UIMonsterTower" or currentActivity.activity_pic
        local tempPath = string.format(UIAssets.UIMonsterTower, prefabName)
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(tempPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(MonsterTower,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.LuckyShop then
        --幸运商店
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UILuckyShop, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(LuckyShopMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ActSevenLogin then
        --七日登陆
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.SevenLogin, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ActSevenLogin, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.GiftBox then
        --礼盒
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIGiftBox, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIGiftBox, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.SeasonWeekCard then
        --赛季周卡
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UISeasonWeekCard, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UISeasonWeekCard, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.SeasonRank then
        --赛季打地块排行榜 个人
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UISeasonRank, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UISeasonRank, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceSeasonForce then
        --赛季积分排行榜 联盟
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIAllianceSeasonForce, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIAllianceSeasonForce, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.DecorationGiftPackage then
        --皮肤礼包活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end

        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIDecorationGiftPackage, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(DecorationGiftPackage, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.WorldTrend then
        --天下大势
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIWorldTrend, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIWorldTrend, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.BlackKnight then
        --黑骑士活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIBlackKnight, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIBlackKnightMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.DonateSoldierActivity then
        --捐兵活动 先判断是否有联盟
        local allianceId = LuaEntry.Player.allianceId
        if allianceId~=nil and allianceId~="" then
            if self.panelComponentList[currentActivity.activityId] then
                self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
                self.panelComponentList[currentActivity.activityId]:SetActive(true)
                if tempComp then
                    tempComp:SetActive(false)
                end
                return
            end
            self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.DonateSoldierPrefabPath, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.transform:SetParent(self.rightContent.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = currentActivity.activityId
                local cell = self.rightContent:AddComponent(UIActivityDonateSoldier, go.name)
                self.panelComponentList[currentActivity.activityId] = cell
                self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
                self.panelComponentList[currentActivity.activityId]:SetActive(true)
                if tempComp then
                    tempComp:SetActive(false)
                end
            end)

            DataCenter.ActivityDonateSoldierManager:SetIsNew(false)
            EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
        end
    elseif currentActivity.type == ActivityEnum.ActivityType.ChaseDeer then
        -- 群雄逐鹿
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIChaseDeer, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIChaseDeer, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.HeroEvolve then
        if CommonUtil.CheckIsLessThanTargetVersion("1.250.231") then
            UIUtil.ShowVersionMessage()
            return
        end
        --英雄特训
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.HeroEvolve, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(HeroEvolveMainView, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.PersonSeasonRank then
        --个人势力排行榜
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIPersonSeasonRank, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIPersonSeasonRank, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.PresidentAuthority then
        --总统特权
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end

        local tempPath = UIAssets.PresidentAuthority
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(tempPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIPresidentAuthorityMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ALVSDonateSoldier then
        -- 新捐兵活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ALVSDonateSoldierPrefabPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActivityALVSMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)

        DataCenter.ActivityALVSDonateSoldierManager:SetIsNew(false)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    elseif currentActivity.type == ActivityEnum.ActivityType.ScratchOffGame then
        --刮刮乐
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ScratchOffGame, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIScratchOffGame,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.Mining then
        --矿产大亨
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.Mining, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIMining,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.SeasonShop then
        --赛季商店
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.SeasonShop, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(SeasonShop,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.Mysterious then
        --数字寻宝
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.Mysterious, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(Mysterious,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceBoss then
        --联盟boss活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceBossPrefabPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActivityAllianceBoss, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
        DataCenter.AllianceBossManager:SetIsNew(false)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceOccupy then
        --联盟占领
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.activityId)
        local assetPath ="Assets/Main/Prefab_Dir/UI/ActivityCenter/LeadingQuest/LeadingQuestMain_" .. activityInfo.activity_pic .. ".prefab"
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(LeadingQuestOther,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.Mastery then
        -- 专精手册
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local assetPath ="Assets/Main/Prefab_Dir/UI/UIMastery/ActMastery.prefab"
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ActMastery, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.GolloBox then
        -- 咕噜专精
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.GolloBox, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(GolloBox,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.DoubleSeasonScore then
        --双倍赛季积分活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIDoubleSeasonScore, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIDoubleSeasonScore, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ActDragon then
        --巨龙活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActDragon, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActDragon, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.DragonNotice then
        --巨龙活动预告
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActDragonNotice, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActDragonNotice, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.CrossDesert then
        --跨服打地
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ShowPanel(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UICrossDesert, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UICrossDesert, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ShowPanel(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.MineCave.Type then
        --矿脉增殖
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.MineCave, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(MineCaveMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ColonizeWarRank then
        --殖民战争排行榜
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIColonizeWarRank, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIColonizeWarRank, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.CampScore then
        --阵营积分

        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UICampScore, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UICampScore, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.EdenKill then
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIEdenKill, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIEdenKill, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.TurfWar then
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UITurfWar, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UITurfWar, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.CrossCityWar then
        -- 伊甸园杀敌
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIEdenCrossWar, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIEdenCrossWar, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceCityRecord then
        -- 伊甸园杀敌
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.RuinsKillingEnemy, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ActAllianceRecord, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ChangeNameAndPic then
        -- 改名/换头像活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIChangeNameAndPic, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIChangeNameAndPic, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.CountryRating then
        -- 国家评分
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.CountryRating, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UICountryRating, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    end
end

return  UIWelfareCenterView

