---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/12/4 20:23
---
local UIMainChatItem = BaseClass("UIMainChatItem", UIBaseContainer)
local base = UIBaseContainer
local rapidjson = require "rapidjson"
local MailInfo = require "DataCenter.MailData.MailInfo"

local Localization = CS.GameEntry.Localization
local chat_go_path ="ChatBg"

local chat_obj1_path = "ChatBg/ChatObj_1"
local chat_obj2_path = "ChatBg/ChatObj_2"
local chat_obj3_path = "ChatBg/ChatObj_3"

local name_text1_path = "ChatBg/ChatObj_1/ChatDialogName01"
local name_text2_path = "ChatBg/ChatObj_2/ChatDialogName02"
local name_text3_path = "ChatBg/ChatObj_3/ChatDialogName03"

local content_text1_path = "ChatBg/ChatObj_1/ChatDialogName01/ChatDialogText01"
local content_text2_path = "ChatBg/ChatObj_2/ChatDialogName02/ChatDialogText02"
local content_text3_path = "ChatBg/ChatObj_3/ChatDialogName03/ChatDialogText03"

local chat_unread_num_path = "Chat_UnRead/DotText"
local chat_unread_path = "Chat_UnRead"

local btn_path =""

local img_1_path = "Image1"
local img_2_path = "Image2"
local px = 8
local py1 = -60
local py2 = -12
local py3 = 20
local py4 = 54

local chat_max_width = 400
local chat_text_gap_x = 7
local chat_text_height = 30

local ChatTextIndex = {
    ChatTextIndex_1 = 1,
    ChatTextIndex_2 = 2,
    ChatTextIndex_3 = 3,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
    self:AddUIListener(ChatInterface.getEventEnum().CHAT_RECIEVE_ROOM_MSG, self.OnReceiveChatMessage)
    self:AddUIListener(ChatInterface.getEventEnum().CHAT_ENTER_ROOM_OK, self.ReInit)
    self:AddUIListener(ChatInterface.getEventEnum().CHAT_LOGIN_SUCCESS, self.ReInit)
    self:AddUIListener(EventId.OnGetNewAllianceAutoInvite, self.RefreshChatSignal)
    self:AddUIListener(ChatInterface.getEventEnum().CHAT_ROOM_SEL, self.RefreshChatSignal)
    self:AddUIListener(EventId.RefreshGuide, self.OnGuideShow)
    self:AddUIListener(EventId.CloseChatView, self.OnCloseChatView)
    self:AddUIListener(EventId.UPDATE_MSG_USERINFO, self.OnUserInfoUpdate)
    self:AddUIListener(EventId.LOAD_COMPLETE, self.OnEnterScene)
    self:AddUIListener(EventId.AllianceQuitOK, self.AllianceQuit)
end

-- 隐藏
local function OnDisable(self)
    self:RemoveUIListener(ChatInterface.getEventEnum().CHAT_ROOM_SEL, self.RefreshChatSignal)
    self:RemoveUIListener(ChatInterface.getEventEnum().CHAT_RECIEVE_ROOM_MSG, self.OnReceiveChatMessage)
    self:RemoveUIListener(ChatInterface.getEventEnum().CHAT_ENTER_ROOM_OK, self.ReInit)
    self:RemoveUIListener(ChatInterface.getEventEnum().CHAT_LOGIN_SUCCESS, self.ReInit)
    self:RemoveUIListener(EventId.OnGetNewAllianceAutoInvite, self.RefreshChatSignal)
    self:RemoveUIListener(EventId.RefreshGuide, self.OnGuideShow)
    self:RemoveUIListener(EventId.CloseChatView, self.OnCloseChatView)
    self:RemoveUIListener(EventId.UPDATE_MSG_USERINFO, self.OnUserInfoUpdate)
    self:RemoveUIListener(EventId.LOAD_COMPLETE, self.OnEnterScene)
    self:RemoveUIListener(EventId.AllianceQuitOK, self.AllianceQuit)

    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.chat_go = self:AddComponent(UIBaseContainer, chat_go_path)

    self.chat_obj1 = self:AddComponent(UIBaseContainer, chat_obj1_path)
    self.chat_obj2 = self:AddComponent(UIBaseContainer, chat_obj2_path)
    self.chat_obj3 = self:AddComponent(UIBaseContainer, chat_obj3_path)

    self.name_text1 = self:AddComponent(UITextMeshProUGUIEx, name_text1_path)
    self.name_text2 = self:AddComponent(UITextMeshProUGUIEx, name_text2_path)
    self.name_text3 = self:AddComponent(UITextMeshProUGUIEx, name_text3_path)

    self.content_text1 = self:AddComponent(UIText, content_text1_path)
    self.content_text2 = self:AddComponent(UIText, content_text2_path)
    self.content_text3 = self:AddComponent(UIText, content_text3_path)
    
    self.img_1 = self:AddComponent(UIImage,img_1_path)
    self.img_1:SetActive(false)
    self.img_2 = self:AddComponent(UIImage,img_2_path)
    self.img_2:SetActive(false)
    self.btn = self:AddComponent(UIButton, btn_path)

    self.chat_unread_num = self:AddComponent(UITextMeshProUGUIEx, chat_unread_num_path)
    self.chat_unread = self:AddComponent(UIBaseComponent, chat_unread_path)
    self.chat_unread:SetActive(false)
    self.btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClick()
    end)
end

local function ComponentDestroy(self)
    self.chat_go = nil
    self.btn = nil
end

local function DataDefine(self)
    self.curRoomId = ""
    self.state = nil
    self.ballData = nil
    self.showTextList = {}
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime()
    end
    self.firstShow = true

    --self.rankChangeLevel1 = LuaEntry.DataConfig:TryGetNum("quest_chat", "k1")--<=大本等级 排序2， >大本等级排序1
    self.rankChangeLevel2 = LuaEntry.DataConfig:TryGetNum("quest_chat", "k6")--<=大本等级 排序2， >大本等级排序1
    self.oneChatShowMaxTime = LuaEntry.DataConfig:TryGetNum("quest_chat", "k4") * 1000--单个聊天得累计显示时长上限
    self.initShowAllianceChatTime =  LuaEntry.DataConfig:TryGetNum("quest_chat", "k5") * 1000--
    self.k7 =  LuaEntry.DataConfig:TryGetNum("quest_chat", "k7") * 1000--如果联盟内有k5时间以内的信息（已读），并且当前显示为任务时，每隔k7秒会切换到联盟聊天
    self.currentChatSign = ""
    self.currentChatShowStartTime = 0
    --self.showingHeroStationSkillId = nil
    self.lang_service_k1 = LuaEntry.DataConfig:TryGetNum("Local_lang_channel","k1")
    self.lastState = nil
end

local function DataDestroy(self)
    self:DeleteTimer()
    self.curRoomId = nil
    self.state = nil
    self.ballData = nil
    self.showTextList = nil
    self.timer_action = nil
    self.firstShow = nil
    self.currentChatSign = nil
    self.currentChatShowStartTime = nil
    self.oneChatShowMaxTime = nil
end

local function GetOneChatShowMaxTime(self)
    local lv = DataCenter.BuildManager.MainLv
    if lv >= self.rankChangeLevel2 then
        return LongMaxValue
    end
    return self.oneChatShowMaxTime
end

local function GetEmptyChatData(self, channelName, roomId)
    local param = {}
    param.uid = LuaEntry.Player:GetUid()
    param.name = Localization:GetString("290046", channelName)
    param.head = LuaEntry.Player:GetPic()
    param.headPicVer = LuaEntry.Player.picVer
    param.time = self.currentChatShowStartTime
    param.sign = ""
    -- GM特殊处理
    if (roomId == ChatGMRoomId) then
        param.uid = ChatGMUserId
        param.head = ChatGMUserIcon
        param.headPicVer = 0
    end
    return param
end

local function SetImage1(self,value)
    if self.img_1~=nil then
        self.img_1:SetActive(value)
    end
end
local function SetImage2(self,value)
    if self.img_2~=nil then
        self.img_2:SetActive(value)
    end
end
local function GetChatDes(self, needCheckTime)
    local data = nil
    local data1 = nil
    if self.curRoomId == nil or self.curRoomId =="" then
        data = self:GetEmptyChatData("")
        data1 = self:GetEmptyChatData("")
        return data,data1
    end

    local chatmsglist = ChatInterface.getRoomMgr():GetLast2MsgChat(self.curRoomId)

    if (chatmsglist == nil or #chatmsglist == 0) then
        if self.currentChatShowStartTime > 0 and UITimeManager:GetInstance():GetServerTime() - self.currentChatShowStartTime > self:GetOneChatShowMaxTime() then
            return ""
        else
            if self.curRoomId == ChatGMRoomId then
                data = self:GetEmptyChatData(Localization:GetString("100619"), ChatGMRoomId)
                data1 = self:GetEmptyChatData(Localization:GetString("100619"), ChatGMRoomId)
            else
                local roomData = ChatInterface.getRoomData(self.curRoomId)
                if roomData then
                    local channelName = roomData:getRoomName()
                    data = self:GetEmptyChatData(channelName)
                    data1 = self:GetEmptyChatData(Localization:GetString("100619"))
                else
                    data = self:GetEmptyChatData("")
                    data1 = self:GetEmptyChatData("")
                    return data,data1
                end
            end
        end
    else
        local chatData = nil
        local chatData1 = nil
        --if (chatData.post == PostType.Text_MemberJoin or chatData.post == PostType.Text_MemberQuit) then
        local roomData = ChatInterface.getRoomData(self.curRoomId)
        --chatData = nil
        --chatData1 = nil
        if (roomData ~= nil) then
            local lists = roomData["msgs"]
            local index = #lists
            while index > 0 do
                local tmpData = lists[index]
                if tmpData ~= nil and self:CanShowInItem(tmpData.post) == true then
                    if chatData == nil then
                        chatData = tmpData
                    else
                        if chatData1 == nil then
                            chatData1 = tmpData
                            break
                        end
                    end
                end
                index = index - 1
            end
        end
        if chatData == nil then
            local channelName = roomData:getRoomName()
            data = self:GetEmptyChatData(channelName)
            data1 = self:GetEmptyChatData(channelName)
        end
        --end

        local function getchatmsg(chatdata)
            local _senderUid = chatdata["senderUid"]
            local _userinfo = ChatInterface.getUserData(_senderUid)
            local name = _userinfo:GetUserName()
            Logger.Log("user_name_"..name)
            local param = {}
            param.uid = _userinfo.uid
            param.textColorSelfAlliance = false
            if self.curRoomId == ChatInterface.getRoomMgr():GetCountryRoomId() and _userinfo.allianceSimpleName ~= nil and _userinfo.allianceSimpleName ~= "" then
                param.name = "[".._userinfo.allianceSimpleName.."] "..name .. ": "
            else
                param.name = name .. ": "
            end

            local tempDes = ""
            if chatdata.post == PostType.Text_BattleReportContentShare then
                local mailInfo = MailInfo.New()
                local attachmentId = chatdata["attachmentId"] or ""
                local strContent = rapidjson.decode(attachmentId) or {}
                local message = {}
                local reportContent = strContent.reportContent or ""
                message.contents = "{\"b\":{},\"obj\":{\"battleContent\":\""..reportContent.."\"}}"
                message.type = strContent.mailType or MailType.NEW_FIGHT
                message.title = "{\"h\":{}}"
                message.uid = 0
                mailInfo:ParseBaseData(message)
                mailInfo.senderUid = _senderUid
                mailInfo.isChat = true
                tempDes = MailShowHelper.GetMailSummary(mailInfo, true, _senderUid)
            else
                tempDes = chatdata:getMessageWithExtra(false)
            end
            param.des = tempDes

            local allianceData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
            if allianceData ~= nil and _userinfo.allianceSimpleName == allianceData.abbr then
                if allianceData.abbr ~= "" then
                    param.textColorSelfAlliance = true
                end
            end
            param.shareData = chatdata:getMessageParam(false)


            local head = _userinfo.headPic or ""
            if _userinfo:IsGmUser() then
                head = _userinfo:GetGMIcon()
            end
            param.head = head
            param.headPicVer = _userinfo.headPicVer or 0
            param.headSkinId = _userinfo.headSkinId
            param.headSkinET = _userinfo.headSkinET
            param.time = chatdata["serverTime"]
            param.sign = chatdata["senderUid"]..chatdata["msg"]..math.ceil(param.time / 10000)
            local isRedPcake = false
            if chatdata["extra"] then
                if chatdata["extra"]["post"] and chatdata["extra"]["post"] == PostType.RedPackge then
                    local redData = DataCenter.AllianceRedPacketManager:GetRedPacketByUUid(chatdata["extra"]["redPackets"])
                    if redData and redData.status == RedPacketState.VALID then
                        isRedPcake = true
                        param.extra = chatdata["extra"]
                    end
                end
            end
            if chatdata.extra and chatdata.extra.post then
                if chatdata.extra.post == PostType.Text_AllianceTaskShare then
                    param.blState = UIMainLeftBottomState.AllianceTaskShare
                end
            end
            param.isRedPcaket = isRedPcake
            return param
        end
        if data == nil then
            data = getchatmsg(chatData)
            if chatData1 ~= nil then
                data1 = getchatmsg(chatData1)
            end
        end
    end
    if data == nil then
        return nil
    end
    if needCheckTime == true then
        if data.sign ~= self.currentChatSign and data.sign ~= "" then
            self.currentChatSign = data.sign
        else
            if self.currentChatShowStartTime > 0 and UITimeManager:GetInstance():GetServerTime() - self.currentChatShowStartTime > self:GetOneChatShowMaxTime() then
                return nil
            end
        end
        self.currentChatShowStartTime = UITimeManager:GetInstance():GetServerTime()
    end
    if data.isRedPcaket then
        self.chatRedData = data
    end
    return data, data1
end

local function OnClick(self)
    self.view.ctrl:OnBtnClick(UIMainFunctionInfo.Chat, self.curRoomId)
end

local function OnUpdateRedPot(self)

end

local function OnReceiveChatMessage(self,data)
    if data == 0 or self:CanShowInItem(data.post) == false then
        return
    end
    local allianceRoomId = ChatInterface.getRoomMgr():GetAllianceRoomId()
    local roomId = data["roomId"]
    if roomId == allianceRoomId then
        self:SetCurRoomId(roomId)
    else
        local countryRoomId = ChatInterface.getRoomMgr():GetCountryRoomId()
        if roomId == countryRoomId and self.curRoomId == allianceRoomId and self:LastShowAllianceChatIsInK5Time() == false then
            self:SetCurRoomId(roomId)
            return
        end
        self:RefreshChatSignal()
    end
end

local function OnUserInfoUpdate(self)
    self:RefreshChatSignal()
end

function UIMainChatItem:SetCurRoomId(chatroomid)
    if self.curRoomId ~= chatroomid then
        self.curRoomId = chatroomid
        self.currentChatShowStartTime = 0
        self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_1, "", "")
        self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_2, "", "")
        self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_3, "", "")
        self.currentText2 = nil
        self.currentText1 = nil
    end
    self:RefreshChatSignal()
end

local function RefreshStateMethod1(self)
    self.state = UIMainLeftBottomState.OnlyChat
end

local function RefreshState(self)
    self:RefreshStateMethod1()
end

local function ReInit(self)
    self.showIndex = 0
    self:InitChatChannel()
    self:RefreshState()
    self:RefreshShow()
end

local function OnEnterScene(self)
    self.curRoomId = ""
    self:InitChatChannel()
end

--联盟聊天里面受否有《k5的信息
local function LastShowAllianceChatIsInK5Time(self)
    local allianceRoomId = ChatInterface.getRoomMgr():GetAllianceRoomId()
    local roomData = ChatInterface.getRoomData(allianceRoomId)
    if (roomData ~= nil) then
        local lists = roomData["msgs"]
        local index = #lists
        local now = UITimeManager:GetInstance():GetServerTime()
        while index > 0 do
            local tmpData = lists[index]
            if tmpData ~= nil and self:CanShowInItem(tmpData.post) == true then
                local dataTime = tmpData.serverTime
                local diff = now - dataTime
                if diff > self.initShowAllianceChatTime then
                    return false
                else
                    return true
                end
                break
            end
            index = index - 1
        end
    end
    return false
end

local function InitChatChannel(self)
    if self.curRoomId == nil or self.curRoomId == "" then
        --先检测联盟聊天频道
        local allianceRoomId = ChatInterface.getRoomMgr():GetAllianceRoomId()
        local roomData = ChatInterface.getRoomData(allianceRoomId)
        if (roomData ~= nil) then
            local num = roomData:getNewMsgNum()
            if num > 0 then
                local lists = roomData["msgs"]
                local index = #lists
                local now = UITimeManager:GetInstance():GetServerTime()
                while index > 0 do
                    local tmpData = lists[index]
                    if tmpData ~= nil and self:CanShowInItem(tmpData.post) == true then
                        local dataTime = tmpData.serverTime
                        local diff = now - dataTime
                        if diff < self.initShowAllianceChatTime then
                            self.curRoomId = allianceRoomId
                            break
                        end
                    end
                    index = index - 1
                end
            end
        end

        -->=k6检查世界频道
        if self.curRoomId == nil or self.curRoomId == "" then
            local lv = DataCenter.BuildManager.MainLv
            local state = (lv >= self.rankChangeLevel2)
            if state then
                local countryRoomId = ChatInterface.getRoomMgr():GetCountryRoomId()
                local roomData = ChatInterface.getRoomData(countryRoomId)
                if (roomData ~= nil) then
                    local num = roomData:getNewMsgNum()
                    if num > 0 then
                        local lists = roomData["msgs"]
                        local index = #lists
                        local now = UITimeManager:GetInstance():GetServerTime()
                        while index > 0 do
                            local tmpData = lists[index]
                            if tmpData ~= nil and self:CanShowInItem(tmpData.post) == true then
                                local dataTime = tmpData.serverTime
                                local diff = now - dataTime
                                if diff < self.initShowAllianceChatTime then
                                    self.curRoomId = countryRoomId
                                    break   
                                end
                                
                            end
                            index = index - 1
                        end
                    end
                end
            end
        end
        if self.curRoomId == nil or self.curRoomId == "" then
            allianceRoomId = ChatInterface.getRoomMgr():GetAllianceRoomId()
            local msg = ChatInterface.getRoomMgr():GetLastChatByRoom(allianceRoomId)
            if (msg ~= nil) then
                self.curRoomId = allianceRoomId
            end
            --if ChatInterface.isLangOpen() then
            --    if DataCenter.BuildManager.MainLv < self.lang_service_k1 then
            --        if ChatManager2:GetInstance().Net:IsRunning() then
            --            local RoomId = ChatInterface.getRoomMgr():GetLangRoomId()
            --            local langdata = ChatInterface.getRoomData(RoomId)
            --            if (langdata ~= nil) then
            --                self.curRoomId = RoomId
            --            end
            --        end
            --    end
            --end
        end
        if self.curRoomId == nil or self.curRoomId == "" then
            local countryRoomId = ChatInterface.getRoomMgr():GetCountryRoomId()
            if (countryRoomId ~= nil and countryRoomId~="") then
                self.curRoomId = countryRoomId
            end
        end
    end
end

--聊天服连接成功时看下房间ID是否还是空
local function CheckRoom(self)
    if self.curRoomId == nil or self.curRoomId == "" then
        self:InitChatChannel()
        self:RefreshState()
    end
end

local function RefreshShow(self)
    self:DeleteTimer()
    self.showTextList = {}
    if self.state == UIMainLeftBottomState.OnlyChat then
        if self.firstShow or not self.chat_go:GetActive() then
            self.chat_go:SetActive(true)
            self.firstShow = false
        end
        local param = {}
        param.state = UIMainShowTextType.Chat
        local chat1, chat2 = self:GetChatDes()
        param.name = chat1.name
        param.des = chat1.des

        param.textColorSelfAlliance = chat1.textColorSelfAlliance
        if chat2 ~= nil then
            param.name1 = chat2.name
            param.des1 = chat2.des

            param.textColorSelfAlliance1 = chat2.textColorSelfAlliance
        end
        self:RefreshText(param)
        local totalTime = (self:GetOneChatShowMaxTime() - (UITimeManager:GetInstance():GetServerTime() - self.currentChatShowStartTime)) / 1000
        totalTime = math.max(1, totalTime)
        totalTime = math.min(self:GetOneChatShowMaxTime() / 1000, totalTime)
        totalTime = totalTime + 2.0--多加2s
        self:AddTimer(totalTime)
    end
end

local function RefreshTime(self)
    self:RefreshState()
    self:RefreshShow()
end

local function AddTimer(self,time)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(time, self.timer_action , self, true,false,false)
        self.timer:Start()
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function RefreshText(self,param)
    self.chat_unread:SetActive(false)
    if param.state == UIMainShowTextType.Chat then
        self.chat_go:SetActive(true)

        local unreadNum = 0
        if ChatManager2:GetInstance().Room ~= nil then
            unreadNum = ChatManager2:GetInstance().Room:GetAllRoomNewMsgCount()
        end

        local redPacketNum =  DataCenter.AllianceRedPacketManager:GetValidRedPacketNum()
        unreadNum = unreadNum + redPacketNum

        local unreadAlAutoInvite = DataCenter.AllianceAutoInviteManager:GetUnreadCount()
        unreadNum = unreadNum + unreadAlAutoInvite
        --local roomData = ChatInterface.getRoomData(self.curRoomId)
        --if roomData ~= nil then
        --    unreadNum = roomData:getNewMsgNum()
        --end
        if unreadNum > 0 then
            self.chat_unread:SetActive(true)
            if unreadNum > 99 then
                self.chat_unread_num:SetText("99+")
            else
                self.chat_unread_num:SetText(tostring(unreadNum))
            end
        end
        local GetTextColor = function(textColorSelfAlliance)
            if textColorSelfAlliance == true then
                return ChatColorAlliance
            end
            return ChatColorNormal
        end
        local GetStoreText = function(name, des, isAllianceColor)
            local nameStr = name or ""
            local desStr = des or ""
            local result = nameStr..desStr
            if isAllianceColor == true then
                result = result.."_1"
            else
                result = result.."_0"
            end
            return result
        end

        --只有一条
        if param.des1 == nil then
            self:StopChatAnim()
            self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_2, param.name, param.des, GetTextColor(param.textColorSelfAlliance))
            self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_1, "", "")
            self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_3, "", "")
            self.currentText1 = nil
            self.currentText2 = GetStoreText(param.name, param.des, param.textColorSelfAlliance)
        else
            --初始显示状态
            if self.currentText1 == nil then
                self:StopChatAnim()
                self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_1, param.name1, param.des1, GetTextColor(param.textColorSelfAlliance1))
                self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_2, param.name, param.des, GetTextColor(param.textColorSelfAlliance))
                self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_3, "", "")
            else
                --文本有变换播动画
                if self.currentText1 ~= GetStoreText(param.name1, param.des1, param.textColorSelfAlliance1) or self.currentText2 ~= GetStoreText(param.name, param.des, param.textColorSelfAlliance) then
                    self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_2, param.name1, param.des1, GetTextColor(param.textColorSelfAlliance1))
                    self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_3, param.name, param.des, GetTextColor(param.textColorSelfAlliance))
                    self:ShowChatAnim()
                else
                    --没有变化最后一个设置成空
                    if self.addExpSequence == nil then
                        self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_3, "", "")
                    end
                end
            end
            self.currentText1 = GetStoreText(param.name1, param.des1, param.textColorSelfAlliance1)
            self.currentText2 = GetStoreText(param.name, param.des, param.textColorSelfAlliance)
            Logger.Log("showText_"..self.currentText1.."_"..self.currentText2)
        end
    end
end

local function RefreshSignal(self)
    self:RefreshState()
    self:RefreshShow()
end

local function RefreshChatSignal(self, roomId)
    if roomId ~= nil then
        self:SetCurRoomId(roomId)
    else
        self:RefreshSignal(UIMainLeftBottomType.Chat)
    end
end

local function OnCloseChatView(self, roomId)
    if roomId == self.curRoomId then
        return
    end
    self.curRoomId = nil
    self:SetCurRoomId(roomId)
end

local function OnGuideShow(self)
end

local function StopChatAnim(self)
    if self.addExpSequence ~= nil then
        self.addExpSequence:Pause()
        self.addExpSequence:Kill()
        self.addExpSequence = nil

        local name2 = self.name_text2:GetText()
        local content2 = self.content_text2:GetText()
        local color2 = self.name_text2:GetColor()

        local name3 = self.name_text3:GetText()
        local content3 = self.content_text3:GetText()
        local color3 = self.name_text3:GetColor()

        self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_1, name2, content2, color2)
        self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_2, name3, content3, color3)
    end
    self.chat_obj1.transform:Set_localPosition(px, py3, 0)
    self.chat_obj2.transform:Set_localPosition(px, py2, 0)
    self.chat_obj3.transform:Set_localPosition(px, py1, 0)

    self:SetTextAlpha(self.name_text1, 1)
    self:SetTextAlpha(self.name_text2, 1)
    self:SetTextAlpha(self.name_text3, 0)

    self:SetTextAlpha(self.content_text1, 1)
    self:SetTextAlpha(self.content_text2, 1)
    self:SetTextAlpha(self.content_text3, 0)

    self:SetChatTextAndColor(ChatTextIndex.ChatTextIndex_3, "", "")
end

local function SetTextAlpha(self, text, alpha)
    if text ~= nil then
        local color = text:GetColor()
        color.a = alpha
        text:SetColor(color)
    end
end

local function ShowChatAnim(self)
    if self.addExpSequence ~= nil then
        self.addExpSequence:Pause()
        self.addExpSequence:Kill()
        self.addExpSequence = nil
    end

    self.chat_obj1.transform:Set_localPosition(px, py3, 0)
    self.chat_obj2.transform:Set_localPosition(px, py2, 0)
    self.chat_obj3.transform:Set_localPosition(px, py1, 0)

    self:SetTextAlpha(self.name_text1, 1)
    self:SetTextAlpha(self.name_text2, 1)
    self:SetTextAlpha(self.name_text3, 0)

    self:SetTextAlpha(self.content_text1, 1)
    self:SetTextAlpha(self.content_text2, 1)
    self:SetTextAlpha(self.content_text3, 0)

    local moveTime = 0.5

    local sequence = CS.DG.Tweening.DOTween.Sequence()
    sequence:Join(self.chat_obj1.transform:DOLocalMoveY(py4, moveTime))
    sequence:Join(self.chat_obj2.transform:DOLocalMoveY(py3, moveTime))
    sequence:Join(self.chat_obj3.transform:DOLocalMoveY(py2, moveTime))

    sequence:Join(self.name_text1.unity_tmpro:DOFade(0, moveTime))
    sequence:Join(self.content_text1.unity_text:DOFade(0, moveTime))

    sequence:Join(self.name_text3.unity_tmpro:DOFade(1, moveTime))
    sequence:Join(self.content_text3.unity_text:DOFade(1, moveTime))

    sequence:AppendCallback(function()
        self:StopChatAnim()
    end)

    self.addExpSequence = sequence
end

local function SetChatTextAndColor(self, chatIndex, nameStr, contentStr, color)
    local nameText = self["name_text"..chatIndex]
    local contentText = self["content_text"..chatIndex]
    if contentText ~= nil and nameText ~= nil then
        nameText:SetText(nameStr)
        CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(nameText.transform)

        local textW = nameText.rectTransform.sizeDelta.x
        local contentW = chat_max_width - chat_text_gap_x - textW
        contentText.rectTransform:Set_sizeDelta(contentW, chat_text_height)

        contentText:SetText(contentStr)
        if color ~= nil then
            nameText:SetColor(color)
            contentText:SetColor(color)
        end
    end
end

local function CanShowInItem(self, type)
    if type == PostType.Text_MemberJoin or type == PostType.Text_MemberQuit or type == PostType.Text_ChatRoomSystemMsg
            or type == PostType.Text_AllianceMemberInOut or type == PostType.Text_AllianceRankChange or type == PostType.Text_AllianceOfficialChange
            or type == PostType.Text_AllianceOfficialSet or type == PostType.Text_AllianceOfficialCancel then
        return false
    end
    return true
end

local function AllianceQuit(self)
    local countryRoomId = ChatInterface.getRoomMgr():GetCountryRoomId()
    if self.curRoomId ~= countryRoomId then
        self:SetCurRoomId(countryRoomId)
    end
end

UIMainChatItem.OnCreate =OnCreate
UIMainChatItem.OnDestroy =OnDestroy
UIMainChatItem.OnEnable =OnEnable
UIMainChatItem.OnDisable =OnDisable
UIMainChatItem.ComponentDefine =ComponentDefine
UIMainChatItem.ComponentDestroy =ComponentDestroy
UIMainChatItem.DataDefine =DataDefine
UIMainChatItem.DataDestroy =DataDestroy
UIMainChatItem.OnUpdateRedPot = OnUpdateRedPot
UIMainChatItem.OnClick = OnClick
UIMainChatItem.GetChatDes = GetChatDes
UIMainChatItem.RefreshState = RefreshState
UIMainChatItem.ReInit = ReInit
UIMainChatItem.RefreshShow = RefreshShow
UIMainChatItem.AddTimer = AddTimer
UIMainChatItem.DeleteTimer = DeleteTimer
UIMainChatItem.RefreshTime = RefreshTime
UIMainChatItem.RefreshText = RefreshText
UIMainChatItem.RefreshSignal = RefreshSignal
UIMainChatItem.RefreshChatSignal = RefreshChatSignal
UIMainChatItem.OnReceiveChatMessage = OnReceiveChatMessage
UIMainChatItem.RefreshStateMethod1 = RefreshStateMethod1
UIMainChatItem.OnGuideShow = OnGuideShow
UIMainChatItem.OnCloseChatView = OnCloseChatView
UIMainChatItem.GetEmptyChatData = GetEmptyChatData
UIMainChatItem.InitChatChannel = InitChatChannel
UIMainChatItem.ShowChatAnim = ShowChatAnim
UIMainChatItem.StopChatAnim = StopChatAnim
UIMainChatItem.SetTextAlpha = SetTextAlpha
UIMainChatItem.SetChatTextAndColor = SetChatTextAndColor
UIMainChatItem.CanShowInItem = CanShowInItem
UIMainChatItem.GetOneChatShowMaxTime = GetOneChatShowMaxTime
UIMainChatItem.LastShowAllianceChatIsInK5Time = LastShowAllianceChatIsInK5Time
UIMainChatItem.OnUserInfoUpdate = OnUserInfoUpdate
UIMainChatItem.OnEnterScene = OnEnterScene
UIMainChatItem.CheckRoom = CheckRoom
UIMainChatItem.AllianceQuit = AllianceQuit
UIMainChatItem.SetImage1 =SetImage1
UIMainChatItem.SetImage2 = SetImage2
return UIMainChatItem