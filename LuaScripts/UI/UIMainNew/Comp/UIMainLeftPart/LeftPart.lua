---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/12/26 19:17
---

local LeftPart = BaseClass("LeftPart", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIMainTroops = require "UI.UIMainNew.Comp.UIMainLeftPart.UIMainTroops"
local UITroopsList = require "UI.UIMainNew.Comp.UIMainLeftPart.TroopList.MainTroopList"
local UIMainStormTime = require "UI.UIMainNew.Comp.UIMainLeftPart.UIMainStormTime"
local UIMainSiege = require "UI.UIMainNew.Comp.UIMainLeftPart.UIMainSiege"
local UIMainQueueItem  = require "UI.UIMainNew.Comp.UIMainLeftPart.UIMainQueueItem"
local UIMainVitaLayout = require "UI.UIMainNew.Comp.UIMainLeftPart.UIMainVitaLayout"
local UIMainVipItem = require "UI.UIMainNew.Comp.UIMainLeftPart.UIMainVipItem"
local troop_obj_path = "troopObj"
local troop_list_obj_path = "troopList"
local layout_obj_path = "layout"
local storm_go_path = "layout/storm_go"
local siege_path = "layout/Siege"
local vita_matter_path = "layout/VitaMatterLayout"
local queue_obj_path = "queue_go"
local vip_obj_path = "layout/vipObj"
function LeftPart : OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

function LeftPart : OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function LeftPart : OnEnable()
    base.OnEnable(self)
end

function LeftPart : OnDisable()
    base.OnDisable(self)
end

function LeftPart : ComponentDefine()
    self.troopListObj = self:AddComponent(UITroopsList, troop_list_obj_path)
    self.troop_obj = self:AddComponent(UIMainTroops, troop_obj_path)
    self.storm_go = self:AddComponent(UIMainStormTime, storm_go_path)
    self.siege = self:AddComponent(UIMainSiege, siege_path)
    self.queue_obj = self:AddComponent(UIMainQueueItem,queue_obj_path)
    self.vita_matter = self:AddComponent(UIMainVitaLayout,vita_matter_path)
    self.vip_obj = self:AddComponent(UIMainVipItem,vip_obj_path)
    self.layout_obj = self:AddComponent(UIBaseContainer,layout_obj_path)
end

function LeftPart : ComponentDestroy()

end

function LeftPart : DataDefine()
    self.lodCache  = 0
end

function LeftPart : DataDestroy()

end

function LeftPart : OnAddListener()
    base.OnAddListener(self)
    
end

function LeftPart : OnRemoveListener()
    base.OnRemoveListener(self)
end

function LeftPart : RefreshAll()
    self.troop_obj:ReInit()
    self.storm_go:ReInit()
    self.siege:Refresh()
    self.vita_matter:RemoveAll()
    self:CheckQueueShow()
    self:CheckVipShow()
    --self.map
end
function LeftPart :CheckVipShow()
    local k3 = LuaEntry.DataConfig:TryGetNum("vip_aps", "k4")
    if k3 <= DataCenter.BuildManager.MainLv then
        self.vip_obj:SetActive(true)
    else
        self.vip_obj:SetActive(false)
    end
end

function LeftPart :CheckQueueShow()
    if SceneUtils.GetIsInCity() then
        local show = false
        local k2 = LuaEntry.DataConfig:TryGetStr("QuickOperate", "k2")
        local arr2 = string.split(k2,"|")
        if #arr2>0 then
            local lv = toInt(arr2[1])
            local chapterId = DataCenter.ChapterTaskManager:GetCurChapterId()
            show = chapterId > lv
        end
        if show ==false then
            local k1 = LuaEntry.DataConfig:TryGetStr("QuickOperate", "k1")
            local arr1 = string.split(k1,"|")
            if #arr1>0 then
                local buildNum = toInt(arr1[1])
                local temp = math.modf(buildNum / 1000) * 1000
                local lv = buildNum % 1000
                if DataCenter.BuildManager:HasBuildByIdAndLevel(temp,lv) then
                    show = true
                end
            end
        end
        if show then
            self.queue_obj:SetActive(true)
            self.queue_obj:Refresh()
        else
            self.queue_obj:SetActive(false)
        end
        
    else
        self.queue_obj:SetActive(false)
    end
end

function LeftPart:UpdateLod(lod)
    self.lodCache = lod
    if SceneUtils.GetIsInWorld() then
        if lod>3 then
            self.layout_obj:SetActive(false)
            self.troop_obj:SetActive(false)
            self:HideTroopList()
        else
            self.layout_obj:SetActive(true)
            if self.view.ctrl:IsShowCarTroop() then
                self.troop_obj:SetActive(true)
                if self.troop_obj.showTroopList == true and self:IsTroopListShow()==false then
                    self:ShowTroopList()
                end
            else
                self.troop_obj:SetActive(false)
                self:HideTroopList()
            end
        end
    else
        self.troop_obj:SetActive(false)
        self.layout_obj:SetActive(true)
        self:SetTroopListShow(false)
    end
end
---march start
function LeftPart:SetTroopListShow(show)
    if show and self.lodCache <= 3 then
        self.troop_obj.showTroopList = true
        self:ShowTroopList()
    else
        self.troop_obj.showTroopList = false
        self:HideTroopList()
    end
end
function LeftPart:ShowTroopList()
    self.troopListObj:SetActive(true)
    self.troopListObj:OnRefresh(true)
end
function LeftPart:HideTroopList()
    self.troopListObj:SetActive(false)
    self.view.ctrl:SetSelectFormationUuid(0)
    self.view:HideAllShowTip()
end
function LeftPart:IsTroopListShow()
    return self.troopListObj ~= nil and self.troopListObj:GetActive()
end

function LeftPart:HideAllShowTip()
    self.troopListObj:HideAllShowTip()
end
function LeftPart:ShowFormationRallyTip(x,y,dataInfo)
    self.troopListObj:ShowFormationRallyTip(x,y,dataInfo)
end
function LeftPart:OnSelectClick(uuid)
    self.troopListObj:OnSelectClick(uuid)
end
function LeftPart:ShowFormationCreateTip(x,y,dataInfo)
    self.troopListObj:ShowFormationCreateTip(x,y,dataInfo)
end
function LeftPart:OnAtkClick(uuid)
    self.troopListObj:OnAtkClick(uuid)
end
function LeftPart:OnCreateClick(uuid)
    self.troopListObj:OnCreateClick(uuid)
end
function LeftPart:OnEditClick(uuid,needAutoAdd)
    self.troopListObj:OnEditClick(uuid,needAutoAdd)
end
function LeftPart:GetTimeInFormation(uuid)
    return self.troopListObj:GetTimeInFormation(uuid)
end
function LeftPart:OnClickStartInvestigate(targetPointId)
    self.troopListObj:OnClickStartInvestigate(targetPointId)
end
function LeftPart:ResetScoutSelectTipPosition(posX,posY)
    return self.troopListObj:ResetScoutSelectTipPosition(posX,posY)
end
function LeftPart:OnClickScoutTroopItem(formationIndex)
    return self.troopListObj:OnClickScoutTroopItem(formationIndex)
end
function LeftPart:GetScoutTroopUnlockLv(formationIndex)
    return self.troopListObj:GetScoutTroopUnlockLv(formationIndex)
end
function LeftPart:ShowFormationArmyTip(x,y,dataInfo)
    self.troopListObj:ShowFormationArmyTip(x,y,dataInfo)
end
---march end
---
function LeftPart:RefreshStormSignal()
    self.storm_go:Refresh()
end

function LeftPart:RefreshTaskSignal()
    self.storm_go:RefreshRedDot()
    self.siege:Refresh()
end

function LeftPart:CloseUISignal()
    self.storm_go:CloseUISignal()
end

function LeftPart:OnEnterWorld()
    self.storm_go:Refresh()
    self.siege:Refresh()
    self.vita_matter:RemoveAll()
    if self.view.ctrl:IsShowCarTroop() then
        self.troop_obj:SetActive(true)
        self:SetTroopListShow(true)
    end
    self:CheckQueueShow()
end

function LeftPart:OnEnterCity()
    self.storm_go:Refresh()
    self.siege:Refresh()
    self:CheckQueueShow()
end

function LeftPart:BuildDataSignal(bUuid)
    if bUuid ~= nil then
        local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(tonumber(bUuid))
        if buildData ~= nil then
            if buildData.itemId ==  BuildingTypes.FUN_BUILD_MAIN then
                self:CheckQueueShow()
                self:CheckVipShow()
            end
        end
    end
end

return LeftPart