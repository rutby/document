---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 17/1/2024 下午7:12
---
local UIMainQueueItem = BaseClass("UIMainQueueItem", UIBaseContainer)
local base = UIBaseContainer

local Btn_path = "Button"
local red_dot_path = "Button/RedDot"
function UIMainQueueItem : OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

function UIMainQueueItem : OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIMainQueueItem : OnEnable()
    base.OnEnable(self)
end

function UIMainQueueItem : OnDisable()
    base.OnDisable(self)
end

function UIMainQueueItem : ComponentDefine()
    self.Btn = self:AddComponent(UIButton, Btn_path)
    self.Btn:SetOnClick(function ()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickBtn()
    end)
    self.red = self:AddComponent(UIBaseComponent,red_dot_path)
end

function UIMainQueueItem : ComponentDestroy()

end

function UIMainQueueItem : DataDefine()
    self.isCreateView = false
end

function UIMainQueueItem : DataDestroy()
    self.isCreateView = true
end

function UIMainQueueItem :OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnScienceQueueResearch, self.RefreshRedDot)
    self:AddUIListener(EventId.OnScienceQueueFinish, self.RefreshRedDot)
    self:AddUIListener(EventId.TrainingArmy, self.RefreshRedDot)
    self:AddUIListener(EventId.TrainArmyData, self.RefreshRedDot)
    self:AddUIListener(EventId.TrainingArmyFinish, self.RefreshRedDot)
    self:AddUIListener(EventId.AddSpeedSuccess,self.RefreshRedDot)
    self:AddUIListener(EventId.CloseUI,self.OnViewClose)
    self:AddUIListener(EventId.BuildUpgradeStart,self.RefreshRedDot)
    self:AddUIListener(EventId.BuildUpgradeFinish,self.RefreshRedDot)
    self:AddUIListener(EventId.AddBuildSpeedSuccess,self.RefreshRedDot)
end

function UIMainQueueItem :OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnScienceQueueResearch, self.RefreshRedDot)
    self:RemoveUIListener(EventId.OnScienceQueueFinish, self.RefreshRedDot)
    self:RemoveUIListener(EventId.TrainingArmy, self.RefreshRedDot)
    self:RemoveUIListener(EventId.TrainArmyData, self.RefreshRedDot)
    self:RemoveUIListener(EventId.TrainingArmyFinish, self.RefreshRedDot)
    self:RemoveUIListener(EventId.AddSpeedSuccess,self.RefreshRedDot)
    self:RemoveUIListener(EventId.CloseUI,self.OnViewClose)
    self:RemoveUIListener(EventId.BuildUpgradeStart,self.RefreshRedDot)
    self:RemoveUIListener(EventId.BuildUpgradeFinish,self.RefreshRedDot)
    self:RemoveUIListener(EventId.AddBuildSpeedSuccess,self.RefreshRedDot)

end

function UIMainQueueItem : OnClickBtn()
    self:SetViewShow()
end

function UIMainQueueItem : Refresh()
    self.Btn:SetActive(self.isCreateView==false)
    self:RefreshRedDot()
end

function UIMainQueueItem: RefreshRedDot()
    local show = self:IsShowRed()
    self.red:SetActive(show)
end

function UIMainQueueItem:SetViewShow()
    if self.isCreateView == false then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIQueueList,{anim = true})
        self.isCreateView = true
        self.Btn:SetActive(false)
    end
end
function UIMainQueueItem:OnViewClose(viewName)
    if viewName == UIWindowNames.UIQueueList then
        self:SetViewHide()
    end
end
function UIMainQueueItem:SetViewHide()
    if self.isCreateView == true then
        self.isCreateView = false
        self.Btn:SetActive(true)
    end
end

function UIMainQueueItem:IsShowRed()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_INFANTRY_BARRACK)
    if buildData ~= nil and buildData.level > 0 then
        local buildEndTime = buildData.updateTime
        if buildEndTime==nil or buildEndTime<=curTime then
            local list = DataCenter.QueueDataManager:GetAllQueueByType(NewQueueType.FootSoldier)
            if list~=nil then
                for k,v in pairs(list) do
                    if v.state == NewQueueState.Free or v.state == NewQueueState.Finish then
                        return true
                    end
                end
            end
        end
    end
    buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_CAR_BARRACK)
    if buildData ~= nil and buildData.level > 0 then
        local buildEndTime = buildData.updateTime
        if buildEndTime==nil or buildEndTime<=curTime then
            local list = DataCenter.QueueDataManager:GetAllQueueByType(NewQueueType.CarSoldier)
            if list~=nil then
                for k,v in pairs(list) do
                    if v.state == NewQueueState.Free or v.state == NewQueueState.Finish then
                        return true
                    end
                end
            end
        end
    end
    buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_AIRCRAFT_BARRACK)
    if buildData ~= nil and buildData.level > 0 then
        local buildEndTime = buildData.updateTime
        if buildEndTime==nil or buildEndTime<=curTime then
            local list = DataCenter.QueueDataManager:GetAllQueueByType(NewQueueType.BowSoldier)
            if list~=nil then
                for k,v in pairs(list) do
                    if v.state == NewQueueState.Free or v.state == NewQueueState.Finish then
                        return true
                    end
                end
            end
        end
        
    end
    buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_SCIENE)
    if buildData ~= nil and buildData.level > 0 then
        local buildEndTime = buildData.updateTime
        if buildEndTime==nil or buildEndTime<=curTime then
            local list = DataCenter.QueueDataManager:GetAllQueueByType(NewQueueType.Science)
            if list~=nil then
                for k,v in pairs(list) do
                    if v.state == NewQueueState.Free or v.state == NewQueueState.Finish then
                        return true
                    end
                end
            end
        end
    end

    local list = DataCenter.BuildQueueManager:GetQueueValueList()
    for k,v in pairs(list) do
        if v:CanUse() then
            return true
        end
    end
end
return UIMainQueueItem