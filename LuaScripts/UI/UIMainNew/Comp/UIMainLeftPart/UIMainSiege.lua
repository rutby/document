---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/4/2 11:02
---

local UIMainSiege = BaseClass("UIMainSiege", UIBaseContainer)
local base = UIBaseContainer

local this_path = ""
local name_path = "storm_long_go/storm_name_text"
local long_time_path = "storm_long_go/storm_long_time_text"
local short_time_path = "storm_short_go/storm_short_time_text"
local effect_path = "storm_short_go/Eff_UI_sangshilaixi_fire"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
    self:ReInit()
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.btn = self:AddComponent(UIButton, this_path)
    self.btn:SetOnClick(function()
        self:OnClick()
    end)
    self.anim = self:AddComponent(UIAnimator, this_path)
    self.name_text = self:AddComponent(UITextMeshProUGUIEx, name_path)
    self.long_time_text = self:AddComponent(UITextMeshProUGUIEx, long_time_path)
    self.short_time_text = self:AddComponent(UITextMeshProUGUIEx, short_time_path)
    self.effect_go = self:AddComponent(UIBaseContainer, effect_path)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    
end

local function DataDestroy(self)
    self:RemoveTimer()
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(0.49, self.TimerAction, self, false, false, false)
        self.timer:Start()
        self:TimerAction()
    end
end

local function RemoveTimer(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.CitySiegeUpdate, self.Refresh)
    self:AddUIListener(EventId.CitySiegeStateChange, self.Refresh)
    self:AddUIListener(EventId.CitySiegeTypeChanged, self.Refresh)
    self:AddUIListener(EventId.VitaDayNightChange, self.Refresh)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.CitySiegeUpdate, self.Refresh)
    self:RemoveUIListener(EventId.CitySiegeStateChange, self.Refresh)
    self:RemoveUIListener(EventId.CitySiegeTypeChanged, self.Refresh)
    self:RemoveUIListener(EventId.VitaDayNightChange, self.Refresh)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.anim:Play("Eff_Ani_UIMainNew_Sangshilaixi_1_Loop", 0, 0)
    self:Refresh()
end

local function Refresh(self)
    if not SceneUtils.GetIsInCity() then
        self:SetActive(false)
        self:RemoveTimer()
        return
    end
    
    local attackData = DataCenter.CitySiegeManager:GetAttackData()
    local state = attackData:GetState()
    if state == CitySiegeAttackState.PreTask then
        self.long_time_text:SetActive(false)
        self.short_time_text:SetActive(false)
        self:SetActive(true)
        self:RemoveTimer()
    elseif state == CitySiegeAttackState.Ready then
        self:SetActive(true)
        self:AddTimer()
    elseif state == CitySiegeAttackState.Playing then
        self:SetActive(true)
        self:AddTimer()
    else
        self.long_time_text:SetActive(false)
        self.short_time_text:SetActive(false)
        self:SetActive(false)
        self:RemoveTimer()
    end
end

local function TimerAction(self)
    local attackData = DataCenter.CitySiegeManager:GetAttackData()
    local state = attackData:GetState()
    if state == CitySiegeAttackState.PreTask then
        self.long_time_text:SetActive(false)
        self.short_time_text:SetActive(false)
        self.effect_go:SetActive(false)
    elseif state == CitySiegeAttackState.Ready then
        self.long_time_text:SetActive(true)
        self.short_time_text:SetActive(true)
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local callTime = DataCenter.CitySiegeManager:GetCallTime()
        local restTime = callTime - curTime
        local restTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(restTime)
        self.long_time_text:SetText(restTimeStr)
        self.short_time_text:SetText(restTimeStr)
        self.effect_go:SetActive(false)
    elseif state == CitySiegeAttackState.Playing then
        self.long_time_text:SetActive(false)
        self.short_time_text:SetActive(false)
        local siegeType = DataCenter.CitySiegeManager:GetSiegeType()
        self.effect_go:SetActive(siegeType == CitySiegeType.Big)
    else
        self.long_time_text:SetActive(false)
        self.short_time_text:SetActive(false)
        self.effect_go:SetActive(false)
    end
end

local function OnClick(self)
    local attackData = DataCenter.CitySiegeManager:GetAttackData()
    local state = attackData:GetState()
    if state == CitySiegeAttackState.PreTask or
       state == CitySiegeAttackState.Ready then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICitySiegeQuest, NormalPanelAnim)
    else
        SoundUtil.PlayEffect("Effect_zombie_click_1")
        DataCenter.CitySiegeManager:LocateBoss()
    end
end

UIMainSiege.OnCreate = OnCreate
UIMainSiege.OnDestroy = OnDestroy
UIMainSiege.OnEnable = OnEnable
UIMainSiege.OnDisable = OnDisable
UIMainSiege.ComponentDefine = ComponentDefine
UIMainSiege.ComponentDestroy = ComponentDestroy
UIMainSiege.DataDefine = DataDefine
UIMainSiege.DataDestroy = DataDestroy
UIMainSiege.OnAddListener = OnAddListener
UIMainSiege.OnRemoveListener = OnRemoveListener
UIMainSiege.AddTimer = AddTimer
UIMainSiege.RemoveTimer = RemoveTimer

UIMainSiege.ReInit = ReInit
UIMainSiege.Refresh = Refresh
UIMainSiege.TimerAction = TimerAction
UIMainSiege.OnClick = OnClick

return UIMainSiege