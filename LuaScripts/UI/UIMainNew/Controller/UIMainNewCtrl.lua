---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/11/21 16:09
---

local UIMainNewCtrl = BaseClass("UIMainNewCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization
local function CloseSelf(self)
    --UIManager.Instance:DestroyWindow(UIWindowNames.UIMain)
end

local function Close(self)
    UIManager.Instance:DestroyWindowByLayer(UILayer.Scene, false)
end

local function OnBtnClick(self,btnType,targetRoomId)
    if btnType == UIMainFunctionInfo.Alliance then
        if LuaEntry.Player:IsInAlliance() ==false then
            if LuaEntry.Player.isFirstJoin == FirstJoinAllianceType.Yes then
                GoToUtil.GotoOpenView(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
            else
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIJoinOrCreateAlliance,1)
            end
        else
            GoToUtil.GotoOpenView(UIWindowNames.UIAllianceMainTable)
        end
    elseif btnType == UIMainFunctionInfo.Hero then
        GoToUtil.GotoOpenView(UIWindowNames.UIHeroList,{anim = false,UIMainAnim = UIMainAnimType.AllHide})
    elseif btnType == UIMainFunctionInfo.Store then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonShop)
    elseif btnType == UIMainFunctionInfo.Goods then
        GoToUtil.GotoOpenView(UIWindowNames.UICapacityTableNew, UICapacityTableTab.Item)
    elseif btnType == UIMainFunctionInfo.Mail then
        if DataCenter.MailDataManager:IsMailRequestOver() then
            GoToUtil.GotoOpenView(UIWindowNames.UIMailNew)
        else
            UIUtil.ShowTipsId(208276)
        end
    elseif btnType == UIMainFunctionInfo.Chat then
        local roomId = targetRoomId
        if roomId == nil then
            roomId = ""
        end
        local param = {}
        param["roomId"] = roomId
        GoToUtil.GotoOpenView(UIWindowNames.UIChatNew, {anim = false}, param)
    elseif btnType == UIMainFunctionInfo.Search then
        GoToUtil.GotoOpenView(UIWindowNames.UISearch)
    elseif btnType == UIMainFunctionInfo.Story then
        if not DataCenter.LandManager:TryJumpToNextBlock() then
            GoToUtil.GotoOpenView(UIWindowNames.UIJeepAdventureMain, { anim = true })
            --if DataCenter.StoryManager:CanShowBubble() then
            --    --打开挂机奖励
            --    UIManager:GetInstance():OpenWindow(UIWindowNames.UIJeepAdventureReward, NormalPanelAnim)
            --end
        end
    elseif btnType == UIMainFunctionInfo.Radar then
        if SceneUtils.GetIsInWorld() then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIDetectEvent)
        else
            GoToUtil.GotoCityByBuildId(BuildingTypes.FUN_BUILD_RADAR_CENTER, WorldTileBtnType.RadarCenter_Alert)
        end
    elseif btnType == UIMainFunctionInfo.Notice then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIMainNotice,{ anim = true,isBlur = true })
    elseif btnType == UIMainFunctionInfo.MonsterReward then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICollectReward,{ anim = true,isBlur = true })
    end
end
--只判断是否显示红点，不关注红点数量
local function IsShowRed(self,btnType)
    local show = false
    if btnType == UIMainFunctionInfo.Radar then
        local count = DataCenter.RadarCenterDataManager:GetRadarRallyTotalNum()
        show = (count > 0)
    elseif btnType == UIMainFunctionInfo.Hero then
        show = DataCenter.HeroDataManager:ShowHeroRed()
    elseif btnType == UIMainFunctionInfo.Story then
        if DataCenter.LandManager:IsFunctionEnd() and DataCenter.StoryManager:CanShowBubble() then
            show = true
        end
    end
    return show
end
--获取红点数量
local function GetShowRedNum(self,btnType)
    local count = 0
    if btnType == UIMainFunctionInfo.Mail then
        count = DataCenter.MailDataManager:GetMailUnReadCountAll()
    elseif btnType == UIMainFunctionInfo.Alliance then
        if LuaEntry.Player:IsInAlliance() ==true then
            local giftNum = DataCenter.AllianceGiftDataManager:GetGiftNum()
            if DataCenter.WorldNewsDataManager:GetShowAttackerRedPot() then
                count = count+1
            end
            count = DataCenter.AllianceHelpDataManager:GetHelpNum()+giftNum
        else
            count = 1
        end
    elseif btnType == UIMainFunctionInfo.MonsterReward then
        count = DataCenter.CollectRewardDataManager:GetRewardCount()
    elseif btnType == UIMainFunctionInfo.Radar then
        count = DataCenter.RadarCenterDataManager:GetRadarRallyTotalNum()
    end
    return count
end
    
local function GetCurrentPosState(self)
    local showData = {}
    showData.serverId = LuaEntry.Player:GetCurServerId()
    local pos = CS.SceneManager.World.CurTarget
    local tile = SceneUtils.WorldToTileIndex(pos)
    local v2 = SceneUtils.IndexToTilePos(tile)
    showData.x = v2.x
    showData.y = v2.y
    return showData
end

local function OnClickBackHomeBtn(self, targetPos)
    if targetPos then
        GoToUtil.GotoWorldPos(targetPos, CS.SceneManager.World.InitZoom)
    else
        GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(LuaEntry.Player:GetMainWorldPos()), CS.SceneManager.World.InitZoom)
    end
end

local function GetAllMarch(self)
    local allMarch = {}
    local allianceId = LuaEntry.Player.allianceId
    local world = CS.SceneManager.World
    if world then
        local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, allianceId)
        if selfMarch~=nil then
            table.walk(selfMarch,function (k,v)
                if v:GetMarchStatus() ~= MarchStatus.IN_TEAM then
                    table.insert(allMarch,v)
                else
                    local march = DataCenter.WorldMarchDataManager:GetAllianceMarchesInTeam(allianceId,v.teamUuid)
                    if march~=nil then
                        table.insert(allMarch,march)
                    end
                end
            end)
        end
    end
    return allMarch
end

local function GetAllScoutFormations(self)
    local formations = DataCenter.ArmyFormationDataManager:GetInvestigateFormationList()
    table.sort(formations, function(a, b)
        if a.index ~= b.index then
            return a.index < b.index
        else
            return false
        end
    end)

    return formations
end


--编队列表用 --start
function UIMainNewCtrl:GetFormationListData()
    local oneData = {}
    oneData.curMarchNum = DataCenter.ArmyFormationDataManager:GetAlreadySetCountInArmyFormation()
    oneData.maxNum = FormationMaxNum
    oneData.list = DataCenter.ArmyFormationDataManager:GetArmyFormationIdList()
    return oneData
end

function UIMainNewCtrl:OnChangeMarchInGuide()
end

function UIMainNewCtrl:OnAtkClick()
end

function UIMainNewCtrl:OnCreateMarchInGuide(uuid,needAutoFix)
    local needFix = 0
    if needAutoFix == true then
        needFix = 1
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationTableNew,uuid,-1,-1,0,-1,1,0,nil,needFix)
end

function UIMainNewCtrl:OnCreateClick()
end

function UIMainNewCtrl:OnEditClick(uuid,needAutoFix)
    if self.targetType >= 0 then
    else
        local needFix = 0
        if needAutoFix == true then
            needFix = 1
        end
        self.selectFormationUuid = 0
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationTableNew,uuid,-1,-1,0,-1,1,0,nil,needFix)
        --UIUtil.ShowTipsId(120090) 
    end
end

function UIMainNewCtrl:ShowExplorePower(marchTargetType)
    return marchTargetType == MarchTargetType.EXPLORE
end

function UIMainNewCtrl:GetExploreFormationPowerByUuidAndEventId(formationUuid, eventId)
    local totalPower = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        totalPower = MarchUtil.GetExploreFormationPower(formation:GetCurHeroes(), eventId, formation.index,MarchUtil.GetCampAddParam(formation:GetCurHeroes()))
    end
    return totalPower
end

function UIMainNewCtrl:GetFormationPowerByUuid(formationUuid)
    local totalPower = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        totalPower = MarchUtil.GetFormationPower(formation:GetCurHeroes(),formation.soldiers,formation.index,MarchUtil.GetCampAddParam(formation:GetCurHeroes()))
    end
    return totalPower
end

function UIMainNewCtrl:GetMaxCanAddSoldierNum(formationUuid)
    local totalNum = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        totalNum = MarchUtil.GetMaxCanAddSoldierNum(formation:GetCurHeroes(),formation.index)
    end
    return totalNum
end
function UIMainNewCtrl:GetFormationFormMaxNum(formationUuid)
    local maxNum = 0
    local formationForm = DataCenter.ArmyFormationDataManager:GetArmyFormInfoByUuid(formationUuid)
    if formationForm~=nil then
        maxNum = formationForm.maxNum
    end
    return maxNum
end

function UIMainNewCtrl:GetCurSoldierNum(formationUuid)
    local totalNum = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        table.walk(formation.soldiers,function(k,v)
            if v>0 then
                totalNum = totalNum+v
            end
        end)
    end
    return totalNum
end
function UIMainNewCtrl:GetIsAssemble()
    return self.targetType
end

function UIMainNewCtrl:GetScoutStartPoint(formationIndex)
    local startPointID = nil
    if formationIndex then
        local tempFormationInfo = self:GetInvesFormationInfoByIndex(formationIndex)
        local formationUuid = tempFormationInfo.FormationInfo.uuid
        local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, formationUuid, LuaEntry.Player.allianceId)
        if march~=nil then
            local troop = nil
            if SceneUtils.GetIsInWorld() then
                troop = WorldTroopManager:GetInstance():GetTroop(march.uuid)
            end
            if troop~=nil then
                startPointID = SceneUtils.WorldToTileIndex(troop:GetPosition())
            else
                startPointID =SceneUtils.WorldToTileIndex(march:GetMarchCurPos())
            end
        else
            local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_RADAR_CENTER)
            startPointID = buildData.pointId
        end
    else
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_RADAR_CENTER)
        startPointID = buildData.pointId
    end
    return startPointID
end

function UIMainNewCtrl:GetInvesFormationInfoByIndex(tempIndex)
    local retParam = {}
    local tempFormationInfo = DataCenter.ArmyFormationDataManager:GetInvestigateFormationInfoByIndex(tempIndex)
    retParam.FormationInfo = tempFormationInfo
    if tempFormationInfo and tempFormationInfo.state == 1 then
        local marchInfo = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, tempFormationInfo.uuid, LuaEntry.Player.allianceId)
        retParam.MarchInfo =  marchInfo
    else
        retParam.MarchInfo = nil
    end
    return retParam
end

function UIMainNewCtrl:GetInvesDistance(targetPointID, formationIndex)
    local startPointID = self:GetScoutStartPoint(formationIndex)

    local distance = Vector3.Distance(SceneUtils.TileIndexToWorld(startPointID),SceneUtils.TileIndexToWorld(targetPointID))
    distance = distance / CS.SceneManager.World.TileSize
    return distance
end

function UIMainNewCtrl:GetInvesFormationUnlockLv(formationIndex)
    local unlockLv = self.InvesFormationUnlockLvs[formationIndex]
    return (unlockLv and unlockLv or 0)
end



function UIMainNewCtrl:StartInvestigate(scoutType, targetUuid, pointId, formationUuid)
end
function UIMainNewCtrl:SetSelectFormationUuid(uuid)
    self.selectFormationUuid = uuid
end

function UIMainNewCtrl:GetTimeFormCurPosToTarPos(uuid)
    local data = self:GetFormationItemData(uuid)
    local speed = 1
    local distance = Vector3.Distance(SceneUtils.TileIndexToWorld(data.startPos),SceneUtils.TileIndexToWorld(self.targetPoint))
    if data.isMarch == 1 then
        speed = data.speed*CS.SceneManager.World.TileSize
    else
        local k1 = LuaEntry.DataConfig:TryGetNum("armyspeed", "k1")
        local addEffect = LuaEntry.Effect:GetGameEffect(EffectDefine.ARMY_SPEED_ADD)
        local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(uuid)
        if formation~=nil then
            local heroes = formation:GetCurHeroes()
            for k,v in pairs(heroes) do
                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                if heroData~=nil then
                    addEffect= addEffect + heroData:GetEffectNum(EffectDefine.ARMY_SPEED_ADD)
                end
            end
            local indexAdd = MarchUtil.GetFormationSpeedAddByIndex(formation.index)
            local joinAddSpeed =0
            local joinRallyForBossSpeed = 0
            if self.targetType == MarchTargetType.JOIN_RALLY then
                joinAddSpeed = LuaEntry.Effect:GetGameEffect(EffectDefine.CAREER_JOIN_TEAM_SPEED_ADD_PERCENT)
                if self.rallyType == MarchTargetType.RALLY_FOR_BOSS then
                    joinRallyForBossSpeed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k5")
                end
            elseif self.targetType == MarchTargetType.RALLY_FOR_BOSS then
                joinRallyForBossSpeed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k6")
            end
            speed = CS.SceneManager.World.TileSize * k1*(1+(addEffect/100)+(indexAdd/100)+(joinAddSpeed/100) + joinRallyForBossSpeed)
        end
    end
    local time = distance/ speed
    return time
end

function UIMainNewCtrl:GetFormationItemData(uuid)
    local oneData = {}
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(uuid)
    local Player = LuaEntry.Player
    if formation~=nil then
        oneData.uuid = formation.uuid
        oneData.index = formation.index
        oneData.canMove = false
        oneData.stamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formation.uuid)
        local config = DataCenter.ArmyFormationDataManager:GetConfigData()
        if config~=nil then
            oneData.maxStamina = config.FormationStaminaMax
        end
        local march = nil
        march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(Player.uid, formation.uuid, Player.allianceId)
        oneData.isMarch = formation.state
        oneData.power = 0
        oneData.startPos = 0
        oneData.isBattle = false
        oneData.useForm = false
        oneData.startTime =0
        oneData.endTime = 0
        oneData.speed = 1
        oneData.serverId = -1
        oneData.stateImg = MarchUtil.GetMarchStateIconByType()
        if march~=nil then
            oneData.power = self:GetFormationPowerByUuid(formation.uuid)
            oneData.isMarch = 1
            if march:GetMarchType() == NewMarchType.ASSEMBLY_MARCH or march:GetMarchType() == NewMarchType.EXPLORE or march:GetMarchStatus() == MarchStatus.WAIT_RALLY  or march:GetMarchStatus() == MarchStatus.IN_TEAM then
                oneData.canMove = true
            end
            if march:GetMarchStatus() == MarchStatus.IN_TEAM then
                local teamMarch = DataCenter.WorldMarchDataManager:GetAllianceMarchesInTeam(Player.allianceId, march.teamUuid)
                if teamMarch~=nil then
                    march = teamMarch
                else
                    local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(march.teamUuid)
                    if data and data.leaderMarchInfo then
                        march = data.leaderMarchInfo
                    end
                end
            end
            oneData.marchUuid = march.uuid
            oneData.serverId = march.serverId
            oneData.isBattle = march.inBattle
            oneData.speed = 1
            if march:GetMarchStatus()== MarchStatus.DESTROY_WAIT then
                oneData.isBattle = true
            end
            if march:GetMarchStatus()== MarchStatus.CHASING or march:GetMarchStatus() == MarchStatus.MOVING or march:GetMarchStatus() == MarchStatus.IN_WORM_HOLE or march:GetMarchStatus() == MarchStatus.COLLECTING or march:GetMarchStatus() == MarchStatus.CROSS_SERVER or march:GetMarchStatus() == MarchStatus.COLLECTING_ASSISTANCE then
                oneData.startTime = march.startTime
                oneData.endTime = march.endTime
            end
            local troop = nil
            if SceneUtils.GetIsInWorld() then
                troop = WorldTroopManager:GetInstance():GetTroop(march.uuid)
            end
            if troop~=nil then
                local point = SceneUtils.WorldToTileIndex(troop:GetPosition())
                oneData.startPos = point
            else
                oneData.startPos =SceneUtils.WorldToTileIndex(march:GetMarchCurPos())
            end
            oneData.stateImg = MarchUtil.GetMarchStateIconByType(march)
            oneData.maxhp = march:GetMaxHP()
            oneData.hp = march:GetHP()
            oneData.heroDataList ={}
            local heroData = formation:GetCurHeroes()
            if heroData~=nil and table.count(heroData)>0 then
                table.walksort(heroData,function (leftKey,rightKey)
                    return heroData[leftKey] < heroData[rightKey]
                end,function(k,v)
                    if k~=nil then
                        local heroOneData = {}
                        heroOneData.heroUuid = k
                        table.insert(oneData.heroDataList,heroOneData)
                    end
                end)
            end
        else
            oneData.startPos = LuaEntry.Player:GetMainWorldPos()

            local formationForm = DataCenter.ArmyFormationDataManager:GetArmyFormInfoByUuid(uuid)
            if formationForm~=nil then
                local allHeroes = formationForm:GetCurHeroes()
                if table.count(allHeroes)>0 then
                    oneData.useForm = true
                end
            end
            if oneData.useForm==false then
                if formation.state == ArmyFormationState.March then
                    local allHeroes = formation:GetCurHeroes()
                    if table.count(allHeroes)>0 then
                        oneData.useForm = true
                    end
                end
            end
            if oneData.useForm == true then
                oneData.power = self:GetFormationPowerByUuid(formation.uuid)
                oneData.heroDataList ={}
                local heroData = formation:GetCurHeroes()
                if heroData~=nil and table.count(heroData)>0 then
                    table.walksort(heroData,function (leftKey,rightKey)
                        return heroData[leftKey] < heroData[rightKey]
                    end,function(k,v)
                        if k~=nil then
                            local heroOneData = {}
                            heroOneData.heroUuid = k
                            table.insert(oneData.heroDataList,heroOneData)
                        end
                    end)
                end
            end
        end
        local refitData = DataCenter.GarageRefitManager:GetGarageRefitData(GarageBuildIds[formation.index])
        if refitData then
            oneData.level = refitData.level
        end
    end
    return oneData
end

function UIMainNewCtrl:InitData()
    self.currentFormationUuid =0
    self.formationType =  1
    self.targetType =  -1
    self.targetPoint = -1
    self.targetUuid =  0
    self.timeIndex = -1
    self.autoBackHome =  1
    self.selectFormationUuid = 0
    if self.targetType>-1 then
        CS.SceneManager.World:AutoFocus(SceneUtils.TileIndexToWorld(pointIndex),CS.LookAtFocusState.Formation,LookAtFocusTime)
    end
    self.rallyType =  nil

    self.RallyTimeList = {}
    local k1 = LuaEntry.DataConfig:TryGetStr("world_rally", "k1")
    local k2 = LuaEntry.DataConfig:TryGetStr("world_rally", "k2")
    local k3 = LuaEntry.DataConfig:TryGetStr("world_rally", "k3")
    local k4 = LuaEntry.DataConfig:TryGetStr("world_rally", "k4")
    self.RallyTimeList[1] = k1
    self.RallyTimeList[2] = k2
    self.RallyTimeList[3] = k3
    self.RallyTimeList[4] = k4

    --是否点击过任务
    self.isClickChat = false
end


function UIMainNewCtrl:InitScoutData()
    self.InvesFormationUnlockLvs = {}
    --local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(BuildingTypes.FUN_BUILD_RADAR_CENTER)
    --if buildTemplate~=nil then
    --    --todo:建筑解析
    --    --local vecPara1 = string.split(buildTemplate.para1, "|")
    --    --if vecPara1~=nil and #vecPara1>0 then
    --    --    for i, v in ipairs(vecPara1) do
    --    --        local ver1 = string.split(v,";")
    --    --        if #ver1 >= 2 then
    --    --            self.InvesFormationUnlockLvs[tonumber(ver1[2])] = ver1[1]
    --    --        end
    --    --    end
    --    --end
    --    
    --end
   
end

function UIMainNewCtrl:GetElecCost(targetPointID)
    local k1 = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k1") -- elec cost param
    local distance = self:GetInvesDistance(targetPointID)
    local k2_maxElec = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k2") -- elec cost max limit param
    local tempCost = distance * k1
    tempCost = math.ceil(math.min(k2_maxElec, tempCost))
    return tempCost
end



function UIMainNewCtrl:GetRallyTimeList()
    return self.RallyTimeList
end

function UIMainNewCtrl:NeedTakeArmy()
    return self.targetType ~= MarchTargetType.EXPLORE
end

function UIMainNewCtrl:ChangeMarchByType(formationUuid)
end

function UIMainNewCtrl:CheckCanBattle(uuid)
    local canBattle =false
    return canBattle
end

function UIMainNewCtrl:SetTargetPoint(pos)
    self.targetPoint = pos
end


function UIMainNewCtrl:GetCostStaminaByTargetType(type)
    return MarchUtil.GetCostStaminaByTargetType(type,self.rallyType)
end


function UIMainNewCtrl:GetFormationBuildNameByIndex(index)
    local level = 0
    local buildId = MarchUtil.GetFormationBuildNameByIndex(index)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(buildId)
    if buildData ~= nil then
        level = buildData.level
    end
    return Localization:GetString(GetTableData(DataCenter.BuildTemplateManager:GetTableName(), buildId + level,"name"))
end

function UIMainNewCtrl:ShowCost(marchTargetType)
    return marchTargetType ~= MarchTargetType.EXPLORE
end
function UIMainNewCtrl:SetTimeIndex(timeIndex)
    self.timeIndex = timeIndex
end

--end 


--新手引导是否建造了车库
local function IsShowCarTroop(self)
    return MarchUtil.CheckFormationUnlock(1)
end

UIMainNewCtrl.CloseSelf = CloseSelf
UIMainNewCtrl.Close = Close
UIMainNewCtrl.OnBtnClick = OnBtnClick
UIMainNewCtrl.GetCurrentPosState = GetCurrentPosState
UIMainNewCtrl.OnClickBackHomeBtn =OnClickBackHomeBtn
UIMainNewCtrl.GetAllMarch = GetAllMarch
UIMainNewCtrl.GetAllScoutFormations = GetAllScoutFormations
UIMainNewCtrl.IsShowCarTroop =IsShowCarTroop
UIMainNewCtrl.IsShowRed = IsShowRed
UIMainNewCtrl.GetShowRedNum = GetShowRedNum
return UIMainNewCtrl