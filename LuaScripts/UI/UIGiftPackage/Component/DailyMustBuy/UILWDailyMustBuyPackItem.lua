---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/2/16 12:12
---
local UILWDailyMustBuyPackItem = BaseClass("UILWDailyMustBuyPackItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"
local UICommonItem = require "UI.UICommonItem.UICommonItem"
-- local UIGiftPackChooseResItem = require "UI.LWGift.BuyDiamond.Component.UIGiftPackChooseResItem"
local UILWDailyMustBuyPackBackGround = require "UI.UIGiftPackage.Component.DailyMustBuy.UILWDailyMustBuyPackBackGround"

local giftNameText_path = "Txt_GiftName"
local bg_path = "Bg"
local reward_path = "Rect_Reward"
local buyBtn_path = "Btn_Buy"
local buyBtnPriceText_path = "Btn_Buy/Txt_Price"
local buyBtnGiftPackPoint_path = "Btn_Buy/UIGiftPackagePoint"
local discount_path = "ActDiscount"
local discountText1_path = "ActDiscount/Discount"

-- 创建
function UILWDailyMustBuyPackItem:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end
-- 销毁
function UILWDailyMustBuyPackItem:OnDestroy()
    self:ClearBackGround()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end
--控件的定义
function UILWDailyMustBuyPackItem:ComponentDefine()
    self.root = self:AddComponent(UIBaseContainer, "")
    self.giftNameText = self:AddComponent(UITextMeshProUGUIEx, giftNameText_path)
    self.bg = self:AddComponent(UIBaseContainer, bg_path)
    self.buyBtn = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtn:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    --self.buyBtn:SetSafeClickMode(true)
    self.buyBtnPriceText = self:AddComponent(UITextMeshProUGUIEx, buyBtnPriceText_path)
    self.buyBtnGiftPackPoint = self:AddComponent(UIGiftPackagePoint, buyBtnGiftPackPoint_path)
    self.discount = self:AddComponent(UIBaseContainer, discount_path)
    self.discountText1 = self:AddComponent(UITextMeshProUGUIEx, discountText1_path)

    self.rewardScrollView = self:AddComponent(UIScrollView, reward_path)
    self.rewardScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.rewardScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
end
--控件的销毁
function UILWDailyMustBuyPackItem:ComponentDestroy()

end
--变量的定义
function UILWDailyMustBuyPackItem:DataDefine()
    self.packageInfo = nil
    self.rewardList = {}
    self.rewardItemRequests = {}
end
--变量的销毁
function UILWDailyMustBuyPackItem:DataDestroy()
    self.packageInfo = nil
    self.rewardList = nil
    self.rewardItemRequests = nil
end

function UILWDailyMustBuyPackItem:OnAddListener()
    base.OnAddListener(self)
    -- self:AddUIListener(EventId.UpdateGiftPackData, self.RefreshUI)
end

function UILWDailyMustBuyPackItem:OnRemoveListener()
    -- self:RemoveUIListener(EventId.UpdateGiftPackData, self.RefreshUI)
    base.OnRemoveListener(self)
end

function UILWDailyMustBuyPackItem:SetItem(tempPackage)
    if not tempPackage then
        self:SetActive(false)
        return
    else
        self:SetActive(true)
    end
    self.packageInfo = tempPackage
    self.rewardList = self.packageInfo:GetRewardList(true)
    --联盟礼物
    local arrAlliance = self.packageInfo:getAllianceGift()
    if arrAlliance ~= nil and #arrAlliance > 0 then
        for k,v in ipairs(arrAlliance) do
            local arr = string.split(v,";")
            if #arr > 4 then
                local param = {}
                param.rewardType = RewardType.GOODS
                param.iconName = string.format(LoadPath.UIAllianceGift, arr[1])
                param.itemName = arr[2]
                param.itemDesc = arr[3]
                param.count = arr[4]
                param.itemColor = arr[5]
                table.insert(self.rewardList,param)
            end
        end
    end
    
    self.packageId = tempPackage:getID()

    self:RefreshUI()
end

function UILWDailyMustBuyPackItem:RefreshUI()
    self.giftNameText:SetLocalText(self.packageInfo:getName())
    self:RefreshScroll()

    local percent = self.packageInfo:getPercent()
    if percent then
        self.discount:SetActive(true)
        self.discountText1:SetText(string.format("%s%%", tostring(percent)))
    else
        self.discount:SetActive(false)
    end

    self.buyBtnPriceText:SetText(self.packageInfo:getPriceText())
    self.buyBtnGiftPackPoint:RefreshPoint(self.packageInfo)
    
    -- 背景底板
    local bgPath = self.packageInfo:getPopupImageB()
    if string.IsNullOrEmpty(bgPath) then
        bgPath = 'DailyMustBuyBackGround1'
    end 
    local iconPath = self.packageInfo:getPopupImageH()
    if self.bgPath == nil or self.bgPath ~= bgPath then
        self:ClearBackGround()
        self.bgPath = bgPath
        
        local realPath = string.format(LoadPath.UIDailyMustBuyBackGround, self.bgPath)
        self.backGroundRequest = self:GameObjectInstantiateAsync(realPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.bg.transform)
            go.transform:Set_localScale(1,1,1)
            go.transform:Set_anchoredPosition(0,0)
            go.name ="backGround"
            self.backGround = self.bg:AddComponent(UILWDailyMustBuyPackBackGround, go.name)
            self.backGround:SetImg(iconPath)
            --self.backGround:SetSiblingIndex(0)
        end)
    else
        if self.backGround then
            self.backGround:SetImg(iconPath)
        end
    end
end

function UILWDailyMustBuyPackItem:RefreshScroll()
    self:ClearScroll()

    local count = #self.rewardList
    if count > 0 then
        self.rewardScrollView:SetTotalCount(count)
        self.rewardScrollView:RefillCells()
    end
end

function UILWDailyMustBuyPackItem:ClearScroll()
    self.rewardScrollView:ClearCells()
    self.rewardScrollView:RemoveComponents(UICommonItem)
end

function UILWDailyMustBuyPackItem:OnItemMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.rewardScrollView:AddComponent(UICommonItem, itemObj)
    cellItem:ReInit(self.rewardList[index])
    self.rewardScrollView[index] = cellItem
end

function UILWDailyMustBuyPackItem:OnItemMoveOut(itemObj, index)
    self.rewardScrollView:RemoveComponent(itemObj.name, UICommonItem)
end


function UILWDailyMustBuyPackItem:OnClickBuyBtn()
    if self.packageInfo then
        -- if self.packageInfo._serverData and self.packageInfo._serverData.item_combine then
        --     local chooseIndex = self.packageInfo:getChooseIndex()
        --     if chooseIndex < 1 then
        --         chooseIndex = 1
        --     end
        --     DataCenter.PayManager:BuyGift(self.packageInfo, chooseIndex)
        -- else
        --     DataCenter.PayManager:BuyGift(self.packageInfo)
        -- end
        self.view.ctrl:BuyGift(self.packageInfo)
    end
end

function UILWDailyMustBuyPackItem:ClearBackGround()
    if self.backGroundRequest then
        self:RemoveComponents(UILWDailyMustBuyPackBackGround)
        self.backGroundRequest:Destroy()
        self.backGroundRequest = nil
    end
    self.backGround = nil
end

return UILWDailyMustBuyPackItem