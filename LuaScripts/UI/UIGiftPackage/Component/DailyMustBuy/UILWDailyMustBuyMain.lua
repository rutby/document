---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/2/16 12:12
---

local UILWDailyMustBuyMain = BaseClass("UILWDailyMustBuyMain", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local UILWDailyMustBuyPackItem = require "UI.UIGiftPackage.Component.DailyMustBuy.UILWDailyMustBuyPackItem"
local UILWDailyMustBuyTargetItem = require "UI.UIGiftPackage.Component.DailyMustBuy.UILWDailyMustBuyTargetItem"

local emptyTip_path = "Rect_Package/Rect_Bottom/EmptyTipText"
local packageScrollView_path = "Rect_Package/Rect_Bottom/PackageScroll"
local descText_path = "Rect_Package/Rect_Top/Txt_Desc"
local titleText_path = "Rect_Package/Rect_Top/Txt_GiftTitle"
local progress_slider_path = "Rect_Package/Rect_Top/TargetArea/Slider"
local progress_text_path = "Rect_Package/Rect_Top/TargetArea/ProgressText"
local progress_rewards_item_path = "Rect_Package/Rect_Top/TargetArea/TargetRewards/TargetItem%d"
local remainTimeText_path = "Rect_Package/Rect_Top/ActTime/remainTime"

-- 创建
function UILWDailyMustBuyMain:OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end
-- 销毁
function UILWDailyMustBuyMain:OnDestroy()
    self:ClearScroll()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end
--控件的定义
function UILWDailyMustBuyMain:ComponentDefine()
    self.packageItemsTb = {}
    self.emptyTipN = self:AddComponent(UITextMeshProUGUIEx, emptyTip_path)
    self.emptyTipN:SetLocalText(GameDialogDefine.GIFT_PACKAGE_SOLD_OUT)
    self.emptyTipN:SetActive(false)
    
    self.packageScrollViewN = self:AddComponent(UIScrollView, packageScrollView_path)
    self.packageScrollViewN:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.packageScrollViewN:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)

    self.descTextN = self:AddComponent(UITextMeshProUGUIEx, descText_path)
    self.titleTextN = self:AddComponent(UITextMeshProUGUIEx, titleText_path)
    self.titleTextN:SetLocalText(321563)
    self.progress_sliderN = self:AddComponent(UISlider, progress_slider_path)
    self.progress_textN = self:AddComponent(UITextMeshProUGUIEx, progress_text_path)
    self.progress_rewards_itemN = {}
    for i = 1, 5 do
        self.progress_rewards_itemN[i] = self:AddComponent(UILWDailyMustBuyTargetItem, string.format(progress_rewards_item_path, i))
    end
    self.remainTimeTextN = self:AddComponent(UITextMeshProUGUIEx, remainTimeText_path)
    self.remainTimeTextN:SetText("")
end
--控件的销毁
function UILWDailyMustBuyMain:ComponentDestroy()

end
--变量的定义
function UILWDailyMustBuyMain:DataDefine()
    self.itemIndex = 1
    self.hasInitPacks = false
    self.initRewardTargets = false
    self.timer_action = function()
        self:RefreshTime()
    end
    self.packageList = {}
    self.cellList = {}
end
--变量的销毁
function UILWDailyMustBuyMain:DataDestroy()
    self.itemIndex = nil
    self.hasInitPacks = nil
    self.initRewardTargets = nil
    self.timer_action = nil
    self.packageList = {}
    self.cellList = {}
end

function UILWDailyMustBuyMain:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateGiftPackData, self.RefreshPackages)
    self:AddUIListener(EventId.RefreshResourceItem, self.RefreshStageInfo)
    self:AddUIListener(EventId.OnDailyMustBuyDataChanged, self.RefreshStageInfo)
end

function UILWDailyMustBuyMain:OnRemoveListener()
    self:RemoveUIListener(EventId.UpdateGiftPackData, self.RefreshPackages)
    self:RemoveUIListener(EventId.RefreshResourceItem, self.RefreshStageInfo)
    self:RemoveUIListener(EventId.OnDailyMustBuyDataChanged, self.RefreshStageInfo)
    base.OnRemoveListener(self)
end

function UILWDailyMustBuyMain:OnRefreshAll()
    self:RefreshAll()
end

function UILWDailyMustBuyMain:RefreshStageInfo()
    self:RefreshStageData()
    self:RefreshSlider()
    self:RefreshTargetText()
    self:SetClaimRewardState()
end

function UILWDailyMustBuyMain:RefreshStageData()
    self.stages = DataCenter.DailyMustBuyManager:GetStages()
end

function UILWDailyMustBuyMain:ReInit(rechargeId)
    self.rechargeId = rechargeId
    if self.rechargeId then
        self.rechargeData = WelfareController.getShowTagInfoById(self.rechargeId)
    end

    self:RefreshStageData()
    if table.IsNullOrEmpty(self.stages) then
        DataCenter.DailyMustBuyManager:RequestClaimedReward()
        return
    end
    self:RefreshAll()
end

function UILWDailyMustBuyMain:RefreshAll()
    self:RefreshStageInfo()
    self:RefreshPackages()
end

function UILWDailyMustBuyMain:RefreshPackages()
    local oldCount = #self.packageList
    if self.rechargeData then
        self.packageList = self.rechargeData:getInfo()
    end
    local count = #self.packageList
    if oldCount == count then
        for i, item in pairs(self.cellList) do
            item:SetItem(self.packageList[i])
        end
    else
        if count > 0 then
            self.packageScrollViewN:SetTotalCount(count)
            self.packageScrollViewN:RefillCells()
            self.packageScrollViewN:SetActive(true)
            self.emptyTipN:SetActive(false)
        else
            self.packageScrollViewN:SetActive(false)
            self.emptyTipN:SetActive(true)
        end
    end
end

function UILWDailyMustBuyMain:ClearScroll()
    self.packageScrollViewN:ClearCells()
    self.packageScrollViewN:RemoveComponents(UILWDailyMustBuyPackItem)
end

function UILWDailyMustBuyMain:OnCellMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.packageScrollViewN:AddComponent(UILWDailyMustBuyPackItem, itemObj)
    cellItem:SetItem(self.packageList[index])
    self.cellList[index] = cellItem
end

function UILWDailyMustBuyMain:OnCellMoveOut(itemObj, index)
    self.cellList[index] = nil
    self.packageScrollViewN:RemoveComponent(itemObj.name, UILWDailyMustBuyPackItem)
end

function UILWDailyMustBuyMain:RefreshTime()
    if not self.nextWeekDayTime then
        self.nextWeekDayTime = UITimeManager:GetInstance():GetNextWeekDay(1)
    end
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.nextWeekDayTime - curTime
    if remainTime <= 0 then
        self.nextWeekDayTime = UITimeManager:GetInstance():GetNextWeekDay(1)
        remainTime = self.nextWeekDayTime - curTime
    end
    self.remainTimeTextN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
end

function UILWDailyMustBuyMain:DeleteTimer()
	if self.timer ~= nil then
		self.timer:Stop()
		self.timer = nil
	end
end

function UILWDailyMustBuyMain:AddTimer()
	if self.timer == nil then
		self.timer = TimerManager:GetInstance():GetTimer(0.8, self.timer_action, self, false,false,false)
	end

	self.timer:Start()
end

-- 显示
function UILWDailyMustBuyMain:OnEnable()
    base.OnEnable(self)
    self:AddTimer()
    self:RefreshTime()
end

-- 隐藏
function UILWDailyMustBuyMain:OnDisable()
    self:DeleteTimer()
    base.OnDisable(self)
end

function UILWDailyMustBuyMain:RefreshSlider()
    local curScore = DataCenter.DailyMustBuyManager:GetCurScore()
    local progress = 0
    local step = 1 / #self.stages
    for i, v in pairs(self.stages) do
        if v.score > curScore then
            progress = progress + (curScore / v.score) * step
            break
        else
            progress = progress + step
        end
    end
    progress = progress > 1 and 1 or progress
    self.progress_sliderN:SetValue(progress)
end

function UILWDailyMustBuyMain:RefreshTargetText()
    if not self.stages then
        self.progress_textN:SetText("")
        return
    end


    -- 找到下一个未领取的阶段
    local nextStage = nil
    for i, v in pairs(self.stages) do
        if v.state == 0 then
            nextStage = v
            break
        end
    end
    if not nextStage then
        self.progress_textN:SetText("")
        return
    end
    local curScore = DataCenter.DailyMustBuyManager:GetCurScore()
    self.progress_textN:SetText(string.format("%d/%d", curScore, nextStage.score))
end

function UILWDailyMustBuyMain:SetClaimRewardState()
    if not self.stages then
        for i = 1, #self.progress_rewards_itemN do
            self.progress_rewards_itemN[i]:SetActive(false)
        end
        return
    end
    if not self.initRewardTargets then
        for i = 1, #self.progress_rewards_itemN do
            self.progress_rewards_itemN[i]:SetActive(true)
            self.progress_rewards_itemN[i]:SetItem(self.stages[i])
        end
        self.initRewardTargets = true
    end

    for i, v in pairs(self.progress_rewards_itemN) do
        local stage = self.stages[i]
        self.progress_rewards_itemN[i]:RefreshData(stage)
    end
end

return UILWDailyMustBuyMain