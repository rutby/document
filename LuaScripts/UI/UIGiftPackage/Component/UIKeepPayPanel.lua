---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/1/3 22:10
---

local UIKeepPay = BaseClass("UIKeepPay", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIKeepPayItem = require "UI.UIGiftPackage.Component.UIKeepPayItem"
local UICommonItemChange = require "UI.UICommonItem.UICommonItemChange"

local title_path = "Content/Title"
local info_path = "Content/Title/Info"
local desc1_path = "Content/Desc1"
local desc2_path = "Content/Desc2"
local stage_scroll_view_path = "Content/StageScrollView"
local reward_scroll_view_path = "Content/BottomBg/RewardScrollView"
local pay_btn_path = "Content/BottomBg/Pay"
local pay_text_path = "Content/BottomBg/Pay/PayText"
local receive_btn_path = "Content/BottomBg/Receive"
local receive_text_path = "Content/BottomBg/Receive/ReceiveText"
local received_bg_path = "Content/BottomBg/ReceivedBg"
local received_path = "Content/BottomBg/ReceivedBg/Received"
local progress_path = "Content/BottomBg/Progress"
local time_path = "Content/TimeBg/Time"
local clover_num_path = "Clover/CloverNum"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UIText, title_path)
    self.info_btn = self:AddComponent(UIButton, info_path)
    self.info_btn:SetOnClick(function()
        self:OnInfoClick()
    end)
    self.desc1_text = self:AddComponent(UIText, desc1_path)
    self.desc1_text:SetLocalText(320578)
    self.desc2_text = self:AddComponent(UIText, desc2_path)
    self.stage_scroll_view = self:AddComponent(UIScrollView, stage_scroll_view_path)
    self.stage_scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateStageCell(itemObj, index)
    end)
    self.stage_scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteStageCell(itemObj, index)
    end)
    self.reward_scroll_view = self:AddComponent(UIScrollView, reward_scroll_view_path)
    self.reward_scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateRewardCell(itemObj, index)
    end)
    self.reward_scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteRewardCell(itemObj, index)
    end)
    self.pay_btn = self:AddComponent(UIButton, pay_btn_path)
    self.pay_btn:SetOnClick(function()
        self:OnPayClick()
    end)
    self.pay_text = self:AddComponent(UIText, pay_text_path)
    self.pay_text:SetLocalText(110003)
    self.receive_btn = self:AddComponent(UIButton, receive_btn_path)
    self.receive_btn:SetOnClick(function()
        self:OnReceiveClick()
    end)
    self.receive_text = self:AddComponent(UIText, receive_text_path)
    self.receive_text:SetLocalText(170004)
    self.received_bg_go = self:AddComponent(UIBaseContainer, received_bg_path)
    self.received_text = self:AddComponent(UIText, received_path)
    self.received_text:SetLocalText(170003)
    self.progress_text = self:AddComponent(UIText, progress_path)
    self.time_text = self:AddComponent(UIText, time_path)
    self.clover_num_text = self:AddComponent(UIText, clover_num_path)
end

local function ComponentDestroy(self)
    self.title_text = nil
    self.info_btn = nil
    self.desc1_text = nil
    self.desc2_text = nil
    self.stage_scroll_view = nil
    self.reward_scroll_view = nil
    self.pay_btn = nil
    self.pay_text = nil
    self.receive_btn = nil
    self.receive_text = nil
    self.received_bg_go = nil
    self.received_text = nil
    self.progress_text = nil
    self.time_text = nil
    self.clover_num_text = nil
end

local function DataDefine(self)
    self.data = nil
    self.rewards = {}
    self.stageItems = {}
    self.rewardItems = {}
    self.refreshTime = -1
    self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
    self.timer:Start()
end

local function DataDestroy(self)
    self.data = nil
    self.rewards = nil
    self.stageItems = nil
    self.rewardItems = nil
    self.refreshTime = nil
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.KeepPayUpdate, self.OnKeepPayUpdate)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.KeepPayUpdate, self.OnKeepPayUpdate)
    base.OnRemoveListener(self)
end

local function ShowStageCells(self)
    local count = self.data:GetMaxLevel()
    if count > 0 then
        self.stage_scroll_view:SetTotalCount(count)
        self.stage_scroll_view:RefillCells()
    end
end

local function ClearStageScroll(self)
    self.stage_scroll_view:ClearCells()
    self.stage_scroll_view:RemoveComponents(UIKeepPayItem)
end

local function OnCreateStageCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local stage = self.data.stages[index]
    local item = self.stage_scroll_view:AddComponent(UIKeepPayItem, itemObj)
    item:SetData(self.data, stage)
    item:SetOnClick(function()
        self:OnItemClick(index)
    end)
    self.stageItems[index] = item
end

local function OnDeleteStageCell(self, itemObj, index)
    self.stage_scroll_view:RemoveComponent(itemObj.name, UIKeepPayItem)
    self.stageItems[index] = nil
end

local function ShowRewardCells(self)
    local count = #self.rewards
    if count > 0 then
        self.reward_scroll_view:SetTotalCount(count)
        self.reward_scroll_view:RefillCells()
    end
end

local function ClearRewardScroll(self)
    self.reward_scroll_view:ClearCells()
    self.reward_scroll_view:RemoveComponents(UICommonItemChange)
end

local function OnCreateRewardCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local item = self.reward_scroll_view:AddComponent(UICommonItemChange, itemObj)
    item:ReInit(self.rewards[index])
    item:SetCheckActive(self.data:IsTodayReceived())
    self.rewardItems[index] = item
end

local function OnDeleteRewardCell(self, itemObj, index)
    self.reward_scroll_view:RemoveComponent(itemObj.name, UICommonItemChange)
    self.rewardItems[index] = nil
end

local function ReInit(self, id)
    self.data = DataCenter.KeepPayManager:GetData(id)
    if self.data == nil then
        return
    end

    self.title_text:SetLocalText(self.data.name)

    local curTime = UITimeManager:GetInstance():GetServerTime()
    Setting:SetPrivateString(SettingKeys.KEEP_PAY_VISIT_TIME .. id, tostring(curTime))
    DataCenter.KeepPayManager:SendGetInfo(id)
end

local function Refresh(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local level = self.data:GetTodayLevel()
    local stage = self.data.stages[level]
    local score = self.data:GetTodayScore()

    self.rewards = stage.rewards
    self.desc2_text:SetLocalText(320577, stage.needScore)
    self.clover_num_text:SetText(score)
    self.pay_btn:SetActive(stage.state == 0 and score < stage.needScore)
    self.receive_btn:SetActive(stage.state == 0 and score >= stage.needScore)
    self.received_bg_go:SetActive(stage.state == 1)
    self.progress_text:SetText(score .. "/" .. stage.needScore)
    self.progress_text:SetActive(stage.state == 0)
    self:ShowStageCells()
    self:ShowRewardCells()
    self:TimerAction()
    self.refreshTime = curTime
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local restTime = math.floor(self.data.endTime - curTime)
    if restTime >= 0 then
        local restTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(restTime)
        self.time_text:SetText(restTimeStr)
    end
    if self.refreshTime > 0 then
        local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, self.refreshTime // 1000)
        if not sameDay then
            self.refreshTime = -1
            DataCenter.KeepPayManager:SendGetInfo(self.data.id)
        end
    end
end

local function OnInfoClick(self)
    UIUtil.ShowIntro(Localization:GetString(self.data.name), Localization:GetString("100239"), Localization:GetString("320576"))
end

local function OnItemClick(self, index)
    local stage = self.data.stages[index]
    if stage == nil then
        return
    end

    if stage.level == self.data:GetTodayLevel() then
        if self.data:GetTodayScore() >= stage.needScore and not self.data:IsTodayReceived() then
            DataCenter.KeepPayManager:SendReceiveReward(self.data.id, stage.id)
        end
    else
        local item = self.stageItems[index]
        if item then
            local pos = item.transform.position
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityRewardTip, Localization:GetString("130065"),
                -4, pos.x, pos.y, false, stage.level, nil, self.data.id)
        end
    end
end

local function OnPayClick(self)
    local infoList = WelfareController.getShowTagInfos()
    for _, info in ipairs(infoList) do
        if info:getType() ~= WelfareTagType.KeepPay then
            self.view:GotoButtonType(info:getType())
            break
        end
    end
end

local function OnReceiveClick(self)
    local index = self.data:GetTodayLevel()
    self:OnItemClick(index)
end

local function OnKeepPayUpdate(self, id)
    if self.data and self.data.id == id then
        self:Refresh()
    end
end

UIKeepPay.OnCreate = OnCreate
UIKeepPay.OnDestroy = OnDestroy
UIKeepPay.OnEnable = OnEnable
UIKeepPay.OnDisable = OnDisable
UIKeepPay.ComponentDefine = ComponentDefine
UIKeepPay.ComponentDestroy = ComponentDestroy
UIKeepPay.DataDefine = DataDefine
UIKeepPay.DataDestroy = DataDestroy
UIKeepPay.OnAddListener = OnAddListener
UIKeepPay.OnRemoveListener = OnRemoveListener

UIKeepPay.ShowStageCells = ShowStageCells
UIKeepPay.ClearStageScroll = ClearStageScroll
UIKeepPay.OnCreateStageCell = OnCreateStageCell
UIKeepPay.OnDeleteStageCell = OnDeleteStageCell

UIKeepPay.ShowRewardCells = ShowRewardCells
UIKeepPay.ClearRewardScroll = ClearRewardScroll
UIKeepPay.OnCreateRewardCell = OnCreateRewardCell
UIKeepPay.OnDeleteRewardCell = OnDeleteRewardCell

UIKeepPay.ReInit = ReInit
UIKeepPay.Refresh = Refresh
UIKeepPay.TimerAction = TimerAction
UIKeepPay.OnInfoClick = OnInfoClick
UIKeepPay.OnItemClick = OnItemClick
UIKeepPay.OnPayClick = OnPayClick
UIKeepPay.OnReceiveClick = OnReceiveClick

UIKeepPay.OnKeepPayUpdate = OnKeepPayUpdate

return UIKeepPay