---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/6 15:26
---PaidLotteryMain.lua

local PaidLotteryMain = BaseClass("PaidLotteryMain", UIBaseView)
local base = UIBaseView
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local RewardUtil = require "Util.RewardUtil"
local Localization = CS.GameEntry.Localization

local ROLLING_MAX_SPEED = -360
local ROLLING_ACCELERATION = -360
local SLOT_COUNT = 8
local SLOT_ANGLE = 360 / SLOT_COUNT

local title_path = "title"
local infoBtn_path = "content/infoBtn"
local subTitle_path = "subTitle"
local time_path = "actTime"
local getScoreBtn_path = "content/getScore/getScoreBtn"
local getScoreBtnTxt_path = "content/getScore/getScoreBtn/getScoreBtnTxt"
local slot_path = "content/roll/bg/slot_"--tb
local costTicketIcon_path = "content/startBtn/layout/ticketCost/ticketIcon"
local costTicketCount_path = "content/startBtn/layout/ticketCost"
local beginBtn_path = "content/startBtn"
local beginBtnTxt_path = "content/startBtn/layout/startBtnTxt"
local beginBtnRed_path = "content/startBtn/startBtnRed"
local skipAnimTog_path = "content/skipAnimTog"
local skipAnimTip_path = "content/skipAnimTog/Label"
local scoreProg_path = "content/tickets/progress/Slider"
local rewardTicket_path = "content/tickets/progress/Points/step_"--tb
local ticketIcon_path = "ticket/ownTicketIcon"
local ticketCount_path = "ticket/ownTicketNum"
local rollingPanel_path = "content/roll/bg"
local mask_path = "mask"
local curScore_path = "content/getScore/curScore"
local scoreIcon_path = "content/getScore/scoreImg"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function Update(self)
    if self.isRolling then
        local angleX, angleY, angleZ = self.rollingPanelN:GetEulerAnglesXYZ()
        
        --self.rollingSpeed = math.max(self.rollingSpeed, ROLLING_MAX_SPEED)
        local angleOffset = self.rollingSpeed * Time.deltaTime
        angleZ = angleZ + angleOffset
        self.rolledAngle = self.rolledAngle + angleOffset
        if self.rolledAngle <= self.rollingFinalAngle then
            angleZ = self.rollingFinalAngle
            self.isRolling = false
            self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
                DataCenter.PaidLotteryManager:DisplayCachedRollingReward()
                self.maskN:SetActive(false)
                self:RefreshAll()
                self.delayTimer = nil
            end, 1)
        end
        self.rollingPanelN:SetEulerAnglesXYZ(0, 0, angleZ)
        self:SetSlotSelected(angleZ)
        for i, v in ipairs(self.rollingTbN) do
            v:SetEulerAnglesXYZ(0, 0, 0)
        end

        if self.rolledAngle > self.rollingStartAngle - 360 then
            self.rollingSpeed = self.rollingSpeed + ROLLING_ACCELERATION * Time.deltaTime
        end
        if self.rolledAngle < self.rollingFinalAngle + 360 then
            self.rollingSpeed = self.rollingSpeed -  ROLLING_ACCELERATION * Time.deltaTime
            self.rollingSpeed = math.min(self.rollingSpeed, -15)
        end
    end
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
    self.maskN:SetActive(false)
    self.isRolling = false
    self:RefreshAll()
end

-- 隐藏
local function OnDisable(self)
    if self.delayTimer then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end
    self.curPointingIndex = nil
    self.maskN:SetActive(false)
    self:DelCountDownTimer()
    base.OnDisable(self)
end


local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnPaidLotteryInfoUpdate, self.RefreshAll)
    self:AddUIListener(EventId.OnClaimPaidLotteryTicketSucc, self.RefreshAll)
    self:AddUIListener(EventId.OnPaidLotteryScoreChange, self.RefreshAll)
    self:AddUIListener(EventId.OnGetPaidLotteryRollResult, self.BeginRolling)
    self:AddUIListener(EventId.RefreshItems, self.RefreshAll)
end


local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnPaidLotteryInfoUpdate, self.RefreshAll)
    self:RemoveUIListener(EventId.OnClaimPaidLotteryTicketSucc, self.RefreshAll)
    self:RemoveUIListener(EventId.OnPaidLotteryScoreChange, self.RefreshAll)
    self:RemoveUIListener(EventId.OnGetPaidLotteryRollResult, self.BeginRolling)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshAll)
    base.OnRemoveListener(self)
end

--控件的定义
local function ComponentDefine(self)
    self.animatorN = self:AddComponent(UIAnimator, "")
    self.titleN = self:AddComponent(UIText, title_path)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)
    self.subTitleN = self:AddComponent(UIText, subTitle_path)
    self.timeN = self:AddComponent(UIText, time_path)
    self.getScoreBtnN = self:AddComponent(UIButton, getScoreBtn_path)
    self.getScoreBtnN:SetOnClick(function()
        self:OnClickGetScoreBtn()
    end)
    self.getScoreBtnTxtN = self:AddComponent(UIText, getScoreBtnTxt_path)
    self.getScoreBtnTxtN:SetLocalText(320413)
    self.slotTbN = {}
    self.rollingTbN = {}
    self.slotSelectedTbN = {}
    for i = 1, 8 do
        local go = self:AddComponent(UIBaseContainer, slot_path .. i)
        local newItem = go:AddComponent(UICommonItem, "resItem")
        local newCount = go:AddComponent(UIText, "bg/remainCount")
        local newSelected = go:AddComponent(UIBaseContainer, "resItem/clickBtn/select")
        table.insert(self.slotSelectedTbN, newSelected)
        local newGo = {}
        newGo.rootN = go
        newGo.itemN = newItem
        table.insert(self.rollingTbN, newItem)
        newGo.remainCountN = newCount
        table.insert(self.rollingTbN, newCount)
        table.insert(self.slotTbN, newGo)
    end
    self.costTicketIconN = self:AddComponent(UIImage, costTicketIcon_path)
    self.costTicketCountN = self:AddComponent(UIText, costTicketCount_path)
    self.beginBtnN = self:AddComponent(UIButton, beginBtn_path)
    self.beginBtnN:SetOnClick(function()
        self:OnClickBeginBtn()
    end)
    self.beginBtnRedN = self:AddComponent(UIBaseContainer, beginBtnRed_path)
    self.beginBtnTxtN = self:AddComponent(UIText, beginBtnTxt_path)
    self.beginBtnTxtN:SetLocalText(302606)
    self.skipTogN = self:AddComponent(UIToggle, skipAnimTog_path)
    self.skipTogN:SetOnValueChanged(function(tf)
        DataCenter.PaidLotteryManager:SetSkipLotteryAnim(tf)
    end)
    self.skipAnimTipN = self:AddComponent(UIText, skipAnimTip_path)
    self.skipAnimTipN:SetLocalText(372228)
    self.scoreProgN = self:AddComponent(UISlider, scoreProg_path)
    self.stageTbN = {}
    for i = 1, 8 do
        local stageGo = self:AddComponent(UIBaseContainer, rewardTicket_path .. i)
        --local ticketImg = stageGo:AddComponent(UIImage, "offset/ticket")
        --local ticketNum = stageGo:AddComponent(UIText, "offset/ticket/ticketNum")
        local ticketItem = stageGo:AddComponent(UICommonItem, "offset/ticketItem")
        local needScore = stageGo:AddComponent(UIText, "offset/needScore")
        local claimed = stageGo:AddComponent(UIBaseContainer, "offset/claimed")
        local eff = stageGo:AddComponent(UIBaseContainer, "offset/eff")
        local claimBtn = stageGo:AddComponent(UIButton, "offset/claimBtn")
        local particle = stageGo:AddComponent(UIBaseContainer, "offset/eff/VFX_ui_zhuanpan_dailingqu")
        claimBtn:SetOnClick(function()
            self:OnClickClaimTicketBtn(i)
        end)
        local newStage = {}
        newStage.rootN = stageGo
        --newStage.ticketImgN = ticketImg
        --newStage.ticketNumN = ticketNum
        newStage.ticketItemN = ticketItem
        newStage.needScoreN = needScore
        newStage.effN = eff
        newStage.particleN = particle
        newStage.claimBtnN = claimBtn
        newStage.claimedN = claimed
        table.insert(self.stageTbN, newStage)
    end
    self.ticketIconN = self:AddComponent(UIImage, ticketIcon_path)
    self.ticketCountN = self:AddComponent(UIText, ticketCount_path)
    self.rollingPanelN = self:AddComponent(UIBaseContainer, rollingPanel_path)
    self.maskN = self:AddComponent(UIBaseContainer, mask_path)
    self.curScoreN = self:AddComponent(UIText, curScore_path)
    self.scoreIconN = self:AddComponent(UIImage, scoreIcon_path)
end

--控件的销毁
local function ComponentDestroy(self)
    self.titleN = nil
    self.infoBtnN = nil
    self.subTitleN = nil
    self.timeN = nil
    self.getScoreBtnN = nil
    self.getScoreBtnTxtN = nil
    self.slotTbN = nil
    self.rollingTbN = nil
    self.slotSelectedTbN = nil
    self.costTicketIconN = nil
    self.costTicketCountN = nil
    self.beginBtnN = nil
    self.beginBtnRedN = nil
    self.beginBtnTxtN = nil
    self.skipTogN = nil
    self.skipAnimTipN = nil
    self.scoreProgN = nil
    self.stageTbN = nil
    self.ticketIconN = nil
    self.ticketCountN = nil
    self.rollingPanelN = nil
    self.maskN = nil
    self.curScoreN = nil
    self.scoreIconN = nil
end

--变量的定义
local function DataDefine(self)
    self.activityInfo = nil
    self.lotteryInfo = nil
    self.countDownTimer = nil
    self.curPointingIndex = nil
    self.rollingStartAngle = 0
    self.rollingFinalAngle = 0
    self.isRolling = false
    self.rolledAngle = 0
    self.playSoundIndex = 0
end

--变量的销毁
local function DataDestroy(self)
    self.activityInfo = nil
    self.lotteryInfo = nil
    self.countDownTimer = nil
    self.curPointingIndex = nil
    self.rollingStartAngle = nil
    self.rollingFinalAngle = nil
    self.isRolling = nil
    self.rolledAngle = nil
    self.playSoundIndex = nil
end


local function SetData(self, rechargeId)
    self.rechargeId = rechargeId
    self:RefreshAll()
end

local function RefreshAll(self)
    if IsNull(self.gameObject) then
        return
    end
    self.activityInfo = DataCenter.PaidLotteryManager:GetActivityInfo()
    if not self.activityInfo then
        return
    end

    self.lotteryInfo = DataCenter.PaidLotteryManager:GetPaidLotteryInfo()
    if not self.lotteryInfo then
        return
    end

    if not string.IsNullOrEmpty(self.rechargeId) then
        local scoreIcon = GetTableData("recharge", self.rechargeId, "image2")
        self.scoreIconN:LoadSprite(string.format(LoadPath.ItemPath, scoreIcon))
    end 
    
    self.titleN:SetText(Localization:GetString(self.activityInfo.name))
    self.subTitleN:SetText(Localization:GetString(self.activityInfo.desc_info))
    self:RefreshActivityTime()
    
    self.curScoreN:SetText(self.lotteryInfo.score)

    self.skipTogN:SetIsOn(DataCenter.PaidLotteryManager:GetSkipLotteryAnim())
    
    local pic = RewardUtil.GetPic(RewardType.GOODS, self.lotteryInfo.costGoodsId)
    self.costTicketIconN:LoadSprite(pic)
    self.costTicketCountN:SetText(self.lotteryInfo.costNum)
    self.ticketIconN:LoadSprite(pic)
    local ticketCount = DataCenter.ItemData:GetItemCount(self.lotteryInfo.costGoodsId)
    self.ticketCountN:SetText(ticketCount)

    if ticketCount >= self.lotteryInfo.costNum then
        CS.UIGray.SetGray(self.beginBtnN.transform, false, true)
        local hasTimes = DataCenter.PaidLotteryManager:CheckIfHasRollingTimes()
        self.beginBtnRedN:SetActive(hasTimes)
    else
        CS.UIGray.SetGray(self.beginBtnN.transform, true, false)
        self.beginBtnRedN:SetActive(false)
    end
    
    self:RefreshSlots()
    self:RefreshStages()
end

local function RefreshSlots(self)
    if self.curPointingIndex == nil then
        local tempAngle = (self.curPointingIndex or 0) * SLOT_ANGLE
        self.rollingPanelN:SetEulerAnglesXYZ(0, 0, tempAngle)
        for i, v in ipairs(self.rollingTbN) do
            v:SetEulerAnglesXYZ(0, 0, 0)
        end
        self:SetSlotSelected()
    end

    local list = self.lotteryInfo.itemsList
    for i, v in ipairs(self.slotTbN) do
        if i <= #list then
            v.rootN:SetActive(true)
            local param = {
                rewardType = list[i].goods.rewardType,
                itemId = list[i].goods.itemId,
                count = list[i].goods.count,
                useCircle = true,
            }
            v.itemN:ReInit(param)
            v.remainCountN:SetText(list[i].remainCount)
            CS.UIGray.SetGray(v.rootN.transform, list[i].remainCount <= 0, true)
        else
            v.rootN:SetActive(false)
        end
    end
end

local function RefreshStages(self)
    local list = self.lotteryInfo.stageList
    local ticketPath = RewardUtil.GetPic(RewardType.GOODS, self.lotteryInfo.costGoodsId)
    for i, v in ipairs(self.stageTbN) do
        if i <= #list then
            v.rootN:SetActive(true)
            local count = list[i]:GetTargetRewardCount(RewardType.GOODS, self.lotteryInfo.costGoodsId)
            local reward = {
                rewardType = RewardType.GOODS,
                itemId = self.lotteryInfo.costGoodsId,
                count = count,
            }
            v.ticketItemN:ReInit(reward)
            --v.ticketImgN:LoadSprite(ticketPath)
            --v.ticketNumN:SetText(count)
            v.needScoreN:SetText(list[i].needScore)
            local showEff = list[i].needScore <= self.lotteryInfo.score and list[i].state == 0
            v.effN:SetActive(showEff)
            v.particleN:SetActive(true)
            v.claimBtnN:SetActive(showEff)
            v.claimedN:SetActive(list[i].state == 1)
        else
            v.rootN:SetActive(false)
        end
    end

    local tempProg = nil
    local stepL = 1 / #list
    for i = #list, 1, -1 do
        if self.lotteryInfo.score >= list[i].needScore then
            if i == #list then
                tempProg = 1
                break
            else
                tempProg = i * stepL
                local extra = self.lotteryInfo.score - list[i].needScore
                tempProg = extra / (list[i + 1].needScore - list[i].needScore) * stepL + tempProg
                break
            end
        end
    end
    if tempProg == nil then
        tempProg = self.lotteryInfo.score / list[1].needScore * stepL
    end
    self.scoreProgN:SetValue(tempProg)
end

local function RefreshActivityTime(self)
    self.endTime = self.activityInfo.endTime
    self:AddCountDownTimer()
    self:RefreshRemainTime()
end

local function BeginRolling(self, finalId)
    if IsNull(self.gameObject) then
        return
    end
    
    local finalIndex = 0
    for i, v in ipairs(self.lotteryInfo.itemsList) do
        if v.id == finalId then
            finalIndex = i - 1
        end
    end
    
    local finalAngle = (finalIndex + 0.25) * SLOT_ANGLE
    local tempPointingIndex = self.curPointingIndex and (self.curPointingIndex - 0.25) or -0.5
    local tempAngle = (tempPointingIndex + 0.5) * SLOT_ANGLE
    local offsetAngle = (finalAngle - tempAngle - 360) % 360
    offsetAngle = offsetAngle - 3 * 360

    --self.rollingPanelN:SetEulerAnglesXYZ(0, 0, tempAngle)
    self.rollingStartAngle = tempAngle
    self.rolledAngle = tempAngle
    self.rollingFinalAngle = tempAngle + offsetAngle
    self.rollingSpeed = 0
    self.isRolling = true
    self.curPointingIndex = finalIndex
    
    self.animatorN:Play("V_ui_zhuanpan_zhuanquan", 0, 0)

    self.maskN:SetActive(true)
end

local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime > 0 then
        self.timeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.timeN:SetText("")
        self:DelCountDownTimer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function SetSlotSelected(self, angle)
    local targetIndex = -1
    if angle then
        angle = (angle + 360) % 360
        targetIndex = math.ceil(angle / SLOT_ANGLE)
    end
    for i, v in ipairs(self.slotSelectedTbN) do
        if i == targetIndex then
            if i ~= self.playSoundIndex then
                self.playSoundIndex = i
                SoundUtil.PlayEffect(SoundAssets.Music_Effect_Lucky_Select)
            end
            v:SetActive(true)
        else
            v:SetActive(false)
        end
    end
end


local function OnClickGetScoreBtn(self)
    local welfareList = self.view.ctrl:GetTypeButtonList()
    if welfareList and #welfareList > 0 then
        local jumpType = welfareList[1]:getType()
        if jumpType == WelfareTagType.PaidLottery and #welfareList > 1 then
            jumpType = welfareList[2]:getType()
        end 
        self.view:GotoButtonType(jumpType, true)
    end
end

local function OnClickClaimTicketBtn(self, stageIndex)
    if not self.lotteryInfo then
        return
    end
    local list = self.lotteryInfo.stageList
    if list[stageIndex].needScore <= self.lotteryInfo.score and list[stageIndex].state == 0 then
        DataCenter.PaidLotteryManager:ClaimTicketsReq(stageIndex)
    end
end

local function OnClickBeginBtn(self)
    local hasTimes = DataCenter.PaidLotteryManager:CheckIfHasRollingTimes()
    if not hasTimes then
        UIUtil.ShowTipsId(302608)
        return
    end
    
    DataCenter.PaidLotteryManager:BeginRollReq()
end

local function OnClickInfoBtn(self)
    UIUtil.ShowIntro(Localization:GetString("302603"), Localization:GetString("100239"),Localization:GetString("302605"))
end



PaidLotteryMain.OnCreate = OnCreate
PaidLotteryMain.OnDestroy = OnDestroy
PaidLotteryMain.Update = Update
PaidLotteryMain.OnAddListener = OnAddListener
PaidLotteryMain.OnRemoveListener = OnRemoveListener
PaidLotteryMain.ComponentDefine = ComponentDefine
PaidLotteryMain.ComponentDestroy = ComponentDestroy
PaidLotteryMain.DataDefine = DataDefine
PaidLotteryMain.DataDestroy = DataDestroy
PaidLotteryMain.OnEnable = OnEnable
PaidLotteryMain.OnDisable = OnDisable

PaidLotteryMain.SetData = SetData
PaidLotteryMain.RefreshAll = RefreshAll
PaidLotteryMain.RefreshStages = RefreshStages
PaidLotteryMain.RefreshActivityTime = RefreshActivityTime
PaidLotteryMain.BeginRolling = BeginRolling
PaidLotteryMain.RefreshSlots = RefreshSlots
PaidLotteryMain.AddCountDownTimer = AddCountDownTimer
PaidLotteryMain.RefreshRemainTime = RefreshRemainTime
PaidLotteryMain.DelCountDownTimer = DelCountDownTimer
PaidLotteryMain.SetSlotSelected = SetSlotSelected
PaidLotteryMain.OnClickGetScoreBtn = OnClickGetScoreBtn
PaidLotteryMain.OnClickClaimTicketBtn = OnClickClaimTicketBtn
PaidLotteryMain.OnClickBeginBtn = OnClickBeginBtn
PaidLotteryMain.OnClickInfoBtn = OnClickInfoBtn

return PaidLotteryMain