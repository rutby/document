---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/2/16 11:47
---


local HeroMedalPackageMain = BaseClass("HeroMedalPackageMain", UIBaseView)
local base = UIBaseView
local HeroMedalPackagePack = require "UI.UIGiftPackage.Component.HeroMedal.HeroMedalPackagePack"

local svPacks_path = "Scroll"
local emptyTip_path = "WarnGo/WarnText"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    --self:ClearScroll()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
end

-- 隐藏
local function OnDisable(self)
    self:UpdateCacheHeroMedalPack()
    base.OnDisable(self)
end


local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.UpdateGold, self.RefreshDiamondCount)
end


local function OnRemoveListener(self)
    --self:RemoveUIListener(EventId.UpdateGold, self.RefreshDiamondCount)
    base.OnRemoveListener(self)
end

--控件的定义
local function ComponentDefine(self)
    self.svPacksN = self:AddComponent(UIScrollView, svPacks_path)
    self.svPacksN:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.svPacksN:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.emptyTipN = self:AddComponent(UIText, emptyTip_path)
    self.emptyTipN:SetText("")
end

--控件的销毁
local function ComponentDestroy(self)
    self.svPacksN = nil
end

--变量的定义
local function DataDefine(self)
    self.heroPackList = {}
end

--变量的销毁
local function DataDestroy(self)
    self.heroPackList = nil
end


local function ReInit(self)
    self.heroPackList = GiftPackageData.GetHeroMedalPackageList()
    --local remainTimesForSort = {}
    --table.sort(self.heroPackList, function(a, b )
    --    if not remainTimesForSort[a.heroId] then
    --        local hasTimesA = false
    --        for i, packageId in ipairs(a.packageIdList) do
    --            local tempPackage = GiftPackageData.get(packageId)
    --            local tempTimes = tempPackage:getBuyTimes() - tempPackage:getHasGetCount()
    --            tempTimes = tempTimes < 0 and 0 or tempTimes
    --            if tempTimes > 0 then
    --                hasTimesA = true
    --                break
    --            end
    --        end
    --        remainTimesForSort[a.heroId] = hasTimesA and 1 or 0
    --    end
    --    if not remainTimesForSort[b.heroId] then
    --        local hasTimesB = false
    --        for i, packageId in ipairs(b.packageIdList) do
    --            local tempPackage = GiftPackageData.get(packageId)
    --            local tempTimes = tempPackage:getBuyTimes() - tempPackage:getHasGetCount()
    --            tempTimes = tempTimes < 0 and 0 or tempTimes
    --            if tempTimes > 0 then
    --                hasTimesB = true
    --                break
    --            end
    --        end
    --        remainTimesForSort[b.heroId] = hasTimesB and 1 or 0
    --    end
    --    if remainTimesForSort[a.heroId] ~= remainTimesForSort[b.heroId] then
    --        return remainTimesForSort[a.heroId] == 1
    --    else
    --        return a.heroId > b.heroId
    --    end
    --end)
    self:RefreshPacks()
end

local function RefreshPacks(self)
    if #self.heroPackList > 0 then
        self.svPacksN:SetActive(true)
        self.emptyTipN:SetActive(false)

        self.svPacksN:SetTotalCount(#self.heroPackList)
        self.svPacksN:RefillCells()
        self.svPacksN:SetActive(false)
        self.svPacksN:SetActive(true)
    else
        self.svPacksN:SetActive(false)
        self.emptyTipN:SetActive(true)
    end
end


local function OnItemMoveIn(self, itemObj, index)
    itemObj.name = tostring(index)
    local packItem = self.svPacksN:AddComponent(HeroMedalPackagePack, itemObj)
    local tempPackage = self.heroPackList[index]
    packItem:SetItem(tempPackage, self.svPacksN)
end

local function OnItemMoveOut(self, itemObj, index)
    self.svPacksN:RemoveComponent(itemObj.name, HeroMedalPackagePack)
end

local function UpdateCacheHeroMedalPack(self)
    local packList = GiftPackageData.GetHeroMedalPackageList()
    local strHeros = ""
    for i, v in ipairs(packList) do
         strHeros = strHeros ..";" .. v.heroId
    end
    CS.GameEntry.Setting:SetString("CacheHeroMedalPack_" .. LuaEntry.Player.uid, strHeros)
end


HeroMedalPackageMain.OnCreate = OnCreate
HeroMedalPackageMain.OnDestroy = OnDestroy
HeroMedalPackageMain.OnAddListener = OnAddListener
HeroMedalPackageMain.OnRemoveListener = OnRemoveListener
HeroMedalPackageMain.ComponentDefine = ComponentDefine
HeroMedalPackageMain.ComponentDestroy = ComponentDestroy
HeroMedalPackageMain.DataDefine = DataDefine
HeroMedalPackageMain.DataDestroy = DataDestroy
HeroMedalPackageMain.OnEnable = OnEnable
HeroMedalPackageMain.OnDisable = OnDisable

HeroMedalPackageMain.ReInit = ReInit
HeroMedalPackageMain.InitData = InitData
HeroMedalPackageMain.RefreshPacks = RefreshPacks
HeroMedalPackageMain.OnItemMoveIn = OnItemMoveIn
HeroMedalPackageMain.OnItemMoveOut = OnItemMoveOut
HeroMedalPackageMain.UpdateCacheHeroMedalPack = UpdateCacheHeroMedalPack
--HeroMedalPackageMain.AddTimer = AddTimer
--HeroMedalPackageMain.SetRemainTime = SetRemainTime
--HeroMedalPackageMain.DelTimer = DelTimer

return HeroMedalPackageMain