---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/2/16 11:49
---

local HeroMedalPackageItem = BaseClass("HeroMedalPackageItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIGiftItem = require "UI.UIGiftPackage.Component.UIGiftItem"
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"
local discount_path = "discount"
local discountTxt_path = "discount/discountTxt"
local limitTip_path = "limit"
local buyBtn_path = "Btn_Go"
local buyBtnTxt_path = "Btn_Go/Txt_Go"
local soldOut_path = "soldOut"
local rewards_path = "Rect_Reward/reward%s"
local point_path = "Btn_Go/UIGiftPackagePoint"
-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.discountN = self:AddComponent(UIBaseContainer, discount_path)
    self.discountTxtN = self:AddComponent(UIText, discountTxt_path)
    self.limitTipN = self:AddComponent(UIText, limitTip_path)
    self.buyBtnN = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.buyBtnTxtN = self:AddComponent(UIText, buyBtnTxt_path)
    self.soldOutN = self:AddComponent(UIText, soldOut_path)
    self.soldOutN:SetLocalText(320268)
    self.rewardsTbN = nil

    self.point_rect = self:AddComponent(UIGiftPackagePoint,point_path)
end

--控件的销毁
local function ComponentDestroy(self)
    self.discountN = nil
    self.discountTxtN = nil
    self.limitTipN = nil
    self.buyBtnN = nil
    self.buyBtnTxtN = nil
    self.soldOutN = nil
    self.rewardsTbN = nil
    self.point_rect = nil
end

--变量的定义
local function DataDefine(self)
    self.delayTimer = nil
    self.packageId = nil
    self.packageInfo = nil
    self.rewardList = {}
end

--变量的销毁
local function DataDestroy(self)
    self:RemoveDelayTimer()
    self.delayTimer = nil
    self.packageId = nil
    self.packageInfo = nil
    self.rewardList = {}
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateGiftPackData, self.RefreshUI)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateGiftPackData, self.RefreshUI)
    base.OnRemoveListener(self)
end


local function SetItem(self, packageId)
    self.packageId = packageId
    self:AddDelayTimer()
end

local function RefreshUI(self)
    self.packageInfo = GiftPackageData.get(self.packageId)
    self.rewardList = self:GetCellsList()
    
    if not self.packageInfo then
        return 
    end
    
    local discountTips = self.packageInfo:GetDiscountTips()
    
    -- 折扣3
    if discountTips and discountTips[3] then
        self.discountN:SetActive(true)
        self.discountTxtN:SetText(discountTips[3])
    else
        local hasPercent = self.packageInfo:hasPercent()
        if hasPercent then
            self.discountN:SetActive(true)
            self.discountTxtN:SetText(string.format("%s%%", self.packageInfo:getPercent()))
        else
            self.discountN:SetActive(false)
        end
    end

    self:InitRewardsTbN()
    --物品
    for i, tempItem in ipairs(self.rewardsTbN) do
        if i <= #self.rewardList then
            tempItem:SetActive(true)
            tempItem:ReInit(self.rewardList[i])
        else
            tempItem:SetActive(false)
        end
    end

    local strPrice = DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID())
    self.buyBtnTxtN:SetText(strPrice)
    local boughtNum = self.packageInfo:getHasGetCount()
    local maxNum = self.packageInfo:getBuyTimes()
    if boughtNum >= maxNum then
        self.buyBtnN:SetActive(false)
        self.soldOutN:SetActive(true)
    else
        self.soldOutN:SetActive(false)
        self.buyBtnN:SetActive(true)
    end
    
    --积分
    self.point_rect:RefreshPoint(self.packageInfo)
    
    local remainTimes = maxNum - boughtNum
    remainTimes = remainTimes < 0 and 0 or remainTimes
    if remainTimes > 0 then
        self.limitTipN:SetText(Localization:GetString("320319", remainTimes))
    else
        self.limitTipN:SetText("")
    end
end


local function GetCellsList(self)
    local listParam = {}
    local info = self.packageInfo

    -- 英雄
    local heroStr = info:getHeroesStr()
    if (not string.IsNullOrEmpty(heroStr)) then
        local arr = string.split(heroStr, ";")
        if (#arr == 2) then
            local param = {}-- UIGiftPackageCell.Param.New()
            param.heroId = arr[1]
            param.count = arr[2]
            table.insert(listParam,param)
        end
    end

    -- 普通道具
    local str = info:getItemsStr()
    local _item_use = info:getItemUse()
    if _item_use ~= nil and _item_use ~= "" then
        str = _item_use .. "|" .. str
    end

    local arrMiddle = string.split(str,"|")
    if arrMiddle ~= nil and #arrMiddle > 0 then
        for k,v in ipairs(arrMiddle) do
            local arr = string.split(v,";")
            if arr[1] ~= "" then
                local param = {}-- UIGiftPackageCell.Param.New()
                param.itemId = arr[1]
                param.count = arr[2]
                table.insert(listParam,param)
            end
        end
    end

    local arrAlliance = info:getAllianceGift()
    if arrAlliance ~= nil and #arrAlliance > 0 then
        for k,v in ipairs(arrAlliance) do
            local arr = string.split(v,";")
            if #arr > 4 then
                local param = {}-- UIGiftPackageCell.Param.New()
                param.iconName = string.format(LoadPath.UIAllianceGift, arr[1])
                param.itemName = arr[2]
                param.itemDes = arr[3]
                param.count = arr[4]
                param.itemColor = arr[5]
                table.insert(listParam,param)
            end
        end
    end

    local goldParam = {}
    local goldNum = tonumber(info:getDiamond())
    if goldNum > 0 then
        goldParam.count = string.GetFormattedSeperatorNum(goldNum)
        goldParam.itemId = ResourceType.Gold
        table.insert(listParam, 2, goldParam)
        --table.insert(listParam,goldParam)
    end


    return listParam
end

local function OnClickBuyBtn(self)
    self.view.ctrl:BuyGift(self.packageInfo)
end

local function AddDelayTimer(self)
    self:RemoveDelayTimer()
    self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
        self.delayTimer = nil
        self:RefreshUI()
    end, DelayCreateTime)
end
local function RemoveDelayTimer(self)
    if self.delayTimer ~= nil then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end
end

local function InitRewardsTbN(self)
    if self.rewardsTbN == nil then
        self.rewardsTbN = {}
        for i = 1, 3 do
            local rewardItem = self:AddComponent(UIGiftItem, string.format(rewards_path, i))
            table.insert(self.rewardsTbN, rewardItem)
        end
    end
end


HeroMedalPackageItem.OnCreate = OnCreate
HeroMedalPackageItem.OnDestroy = OnDestroy
HeroMedalPackageItem.ComponentDefine = ComponentDefine
HeroMedalPackageItem.ComponentDestroy = ComponentDestroy
HeroMedalPackageItem.DataDefine = DataDefine
HeroMedalPackageItem.DataDestroy = DataDestroy
HeroMedalPackageItem.OnAddListener = OnAddListener
HeroMedalPackageItem.OnRemoveListener = OnRemoveListener

HeroMedalPackageItem.SetItem = SetItem
HeroMedalPackageItem.RefreshUI = RefreshUI
HeroMedalPackageItem.GetCellsList = GetCellsList
HeroMedalPackageItem.OnClickBuyBtn = OnClickBuyBtn
HeroMedalPackageItem.AddDelayTimer = AddDelayTimer
HeroMedalPackageItem.RemoveDelayTimer = RemoveDelayTimer
HeroMedalPackageItem.InitRewardsTbN = InitRewardsTbN

return HeroMedalPackageItem