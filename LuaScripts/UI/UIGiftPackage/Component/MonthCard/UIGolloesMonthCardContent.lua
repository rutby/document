---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/2/17 16:08
---
local MonthCardBenefitItem = require "UI.UIGiftPackage.Component.MonthCard.MonthCardBenefitItem"
local RewardItem = require "UI.UIWorldPoint.Component.WorldPointRewardItem"
local UIGolloesMonthCardContent = BaseClass("UIGolloesMonthCardContent", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"

local title_txt_path = "titleTxt"
local des_txt_path ="desTxt"
local benefit_content_path = "Benefits"

local continue_obj_path = "ContinueObj"
local time_des_path = "ContinueObj/timeDes"
local left_time_path = "ContinueObj/leftTime"
local reward_txt_path = "rewardBg/rewardObj/rewardTxt"
local reward_content_path = "rewardBg/rewardObj/rewardScroll/Viewport/Content"
local gold_num_path = "rewardBg/rewardObj/GoldObj/goldNum"
local today_reward_txt_path = "rewardBg/todayRewardObj/todayRewardTxt"
local today_reward_content_path = "rewardBg/todayRewardObj/todayRewardScroll/Viewport/todayContent"
local get_obj_path = "layout/getObj"
local get_btn_path = "layout/getObj/getBtn"
local get_txt_path = "layout/getObj/getBtn/getBtnText"
local get_rest_path = "layout/getObj/getRsetNum"
local buy_obj_path = "layout/buyObj"
local buy_btn_path = "layout/buyObj/buyBtn"
local buy_txt_path = "layout/buyObj/buyBtn/buyBtnText"
local point_path = "layout/buyObj/buyBtn/UIGiftPackagePoint"

local bate_num_path = "bateBg/bateNum"
local bate_des_path = "bateBg/bateDes"
-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MonthCardInfoUpdated, self.RefreshUI)
end


local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.MonthCardInfoUpdated, self.RefreshUI)
    base.OnRemoveListener(self)
end

local function ComponentDefine(self)
    
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_txt_path)
    self.desN = self:AddComponent(UITextMeshProUGUIEx,des_txt_path)
    self.benefit_content = self:AddComponent(UIBaseContainer,benefit_content_path)
    self.continue_obj = self:AddComponent(UIBaseContainer,continue_obj_path)
    self.time_des = self:AddComponent(UITextMeshProUGUIEx,time_des_path)
    self.left_time = self:AddComponent(UITextMeshProUGUIEx,left_time_path)
    self.reward_txt = self:AddComponent(UITextMeshProUGUIEx,reward_txt_path)
    self.reward_content =self:AddComponent(UIBaseContainer,reward_content_path)
    self.gold_num =self:AddComponent(UITextMeshProUGUIEx,gold_num_path)
    self.today_reward_txt = self:AddComponent(UITextMeshProUGUIEx,today_reward_txt_path)
    self.today_reward_content = self:AddComponent(UIBaseContainer,today_reward_content_path)
    self.get_obj = self:AddComponent(UIBaseContainer,get_obj_path)
    self.get_btn = self:AddComponent(UIButton, get_btn_path)
    self.get_btn:SetOnClick(function()
        self:OnClickGetBtn()
    end)
    self.get_txt =self:AddComponent(UITextMeshProUGUIEx,get_txt_path)
    self.get_rest = self:AddComponent(UITextMeshProUGUIEx,get_rest_path)
    self.buy_obj = self:AddComponent(UIBaseContainer,buy_obj_path)
    self.buy_btn = self:AddComponent(UIButton, buy_btn_path)
    self.buy_btn:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.buy_txt =self:AddComponent(UITextMeshProUGUIEx,buy_txt_path)
    self.bate_num = self:AddComponent(UITextMeshProUGUIEx,bate_num_path)
    self.bate_des = self:AddComponent(UITextMeshProUGUIEx,bate_des_path)
    self.bate_des:SetLocalText(320556)
    self.point_rect = self:AddComponent(UIGiftPackagePoint,point_path)
end

--控件的销毁
local function ComponentDestroy(self)
    self:SetRewardCellDestroy()
    self:SetTodayRewardCellDestroy()
    self:SetBenefitCellDestroy()
end

--变量的定义
local function DataDefine(self)
    self.param = nil
    self.view = nil
    self.isBought = false
    self.benefitsList = nil
    self.isInit = false
end

--变量的销毁
local function DataDestroy(self)
    self.param = nil
    self.view = nil
    self.isInit = false
    self.isBought = nil
    self.benefitsList = nil
end

local function ReInit(self, param, view)
    self.param = param
    self.view = view
    self.isBought = self.param.monthCardInfo:IsBought()

    --初始化特权信息
    if self.isInit == false then
        self.isInit = true
        self.benefitsList = {}
        self.todayRewardsList = {}
        self.rewardsList = {}
        self.goldNum = 0
        local monthCardConf = LocalController:instance():getLine("monthcard",self.param.monthCardInfo:GetId())
        if monthCardConf then
            local names = string.split(monthCardConf.right_name, "|")
            for i = 1, #names do
                local arr = string.split(names[i],";")
                if #arr>0 then
                    local dialog = arr[1]
                    local strs = {}
                    if #arr>1 then
                        for j=2,#arr do
                            table.insert(strs,arr[j])
                        end
                        local des = Localization:GetString(dialog, table.unpack(strs))
                        table.insert(self.benefitsList,des)
                    else
                        local des = Localization:GetString(dialog)
                        table.insert(self.benefitsList,des)
                    end
                end
            end
            local strRewards = monthCardConf.reward_show or ""
            local strArrRewards = string.split(strRewards, "|")
            for i =1,#strArrRewards do
                local str = strArrRewards[i]
                if str~=nil and str~="" then
                    local strVec = string.split(str,";")
                    if #strVec>2 then
                        local id = tonumber(strVec[1])
                        local rewardType = tonumber(strVec[2])
                        local num = tonumber(strVec[3])
                        local item = {}
                        item.firstKill = false
                        if rewardType ==  RewardType.GOODS then
                            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                            if goods~=nil then
                                item.itemId = id
                                item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                                item.count = num
                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                                item.rewardType = rewardType
                                item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                                item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                                item.isLocal = true
                                --item.itemName = goods.name
                                --item.itemDesc = goods.description
                                local itemType = goods.type
                                if itemType == 2 or goods.type == GOODS_TYPE.GOODS_TYPE_202 then -- SPD
                                    if goods.para1 ~= nil and goods.para1 ~= "" then
                                        local para1 = goods.para1
                                        local temp = string.split(para1,';')
                                        if temp ~= nil and #temp > 1 then
                                            item.itemFlag = temp[1]..temp[2]
                                        end
                                    end
                                elseif itemType == 3 then -- USE
                                    local type2 = goods.type2
                                    if type2 ~= 999 and goods.para ~= nil then
                                        local res_num = tonumber(goods.para)
                                        item.itemFlag = string.GetFormattedStr(res_num)
                                    end
                                end
                                table.insert(self.todayRewardsList,item)
                            end
                        else
                            local resourceType = RewardToResType[rewardType]
                            if resourceType~=nil then
                                item.itemId = id
                                item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.PURPLE)
                                item.rewardType = rewardType
                                item.itemDesc = CommonUtil.GetResourceDescriptionByType(resourceType)
                                item.count = num
                                item.itemName = DataCenter.ResourceManager:GetResourceNameByType(resourceType)
                                item.isLocal = true
                                table.insert(self.todayRewardsList,item)
                            end
                        end
                    end
                end
            end
            
            local giftPackage = self.param.monthCardInfo:GetPackageData()
            if giftPackage~=nil then
                local diamondWorth = tonumber(giftPackage:getDiamond())
                if diamondWorth and diamondWorth > 0 then
                    self.goldNum = diamondWorth
                end
                local str = giftPackage:getItemsStr()
                local _item_use = giftPackage:getItemUse()
                if _item_use ~= nil and _item_use ~= "" then
                    str = _item_use .. "|" .. str
                end
                local arrMiddle = string.split(str,"|")
                if arrMiddle ~= nil and #arrMiddle > 0 then
                    for k,v in ipairs(arrMiddle) do
                        local arr = string.split(v,";")
                        if arr[1] ~= "" then
                            local item = {}
                            item.firstKill = false
                            local id = arr[1]
                            local num = tonumber(arr[2])
                            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                            if goods~=nil then
                                item.itemId = id
                                item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                                item.count = num
                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                                item.rewardType = RewardType.GOODS
                                item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                                item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                                item.isLocal = true
                                local itemType = goods.type
                                if itemType == 2 or goods.type == GOODS_TYPE.GOODS_TYPE_202 then -- SPD
                                    if goods.para1 ~= nil and goods.para1 ~= "" then
                                        local para1 = goods.para1
                                        local temp = string.split(para1,';')
                                        if temp ~= nil and #temp > 1 then
                                            item.itemFlag = temp[1]..temp[2]
                                        end
                                    end
                                elseif itemType == 3 then -- USE
                                    local type2 = goods.type2
                                    if type2 ~= 999 and goods.para ~= nil then
                                        local res_num = tonumber(goods.para)
                                        item.itemFlag = string.GetFormattedStr(res_num)
                                    end
                                end
                                table.insert(self.rewardsList,item)
                            end
                        end
                    end
                end
                local resourceStr = giftPackage:getResourceStr()
                if resourceStr and resourceStr ~= "" then
                    local resource = string.split(resourceStr,";")
                    if #resource >0 then
                        local resourceType = tonumber(resource[1])
                        local num = tonumber(resource[2])
                        local item = {}
                        item.itemId = 0
                        item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.PURPLE)
                        item.rewardType = ResTypeToReward[resourceType]
                        item.itemDesc = CommonUtil.GetResourceDescriptionByType(resourceType)
                        item.count = num
                        item.itemName = DataCenter.ResourceManager:GetResourceNameByType(resourceType)
                        item.isLocal = true
                        table.insert(self.rewardsList,item)
                    end
                end
            end
        end
        self:RefreshRewards()
    end
    self:RefreshUI()
    
end

local function RefreshUI(self)
    self.titleN:SetLocalText(321400)
    self.desN:SetLocalText(321399)
    self.time_des:SetLocalText(321398)
    self.reward_txt:SetLocalText(320570)
    self.today_reward_txt:SetLocalText(320034)
    self.get_txt:SetLocalText(110317)
    local prize = ""
    local discount = 0
    local giftPackage = self.param.monthCardInfo:GetPackageData()
    if giftPackage~=nil then
        prize = DataCenter.PayManager:GetDollarText(giftPackage:getPrice(), giftPackage:getProductID())
        discount = giftPackage:hasPercent() and tonumber(giftPackage:getPercent()) or 0
    end
    self.gold_num:SetText("+"..string.GetFormattedSeperatorNum(toInt(self.goldNum)))
    self.buy_txt:SetText(prize)
    self.bate_num:SetText(string.format("%s%%", discount))
    self.point_rect:RefreshPoint(giftPackage)
    
    if self.param.monthCardInfo:IsBought() then
        self.get_obj:SetActive(true)
        self.buy_obj:SetActive(false)
        --self.continue_obj:SetActive(true)
        self.time_des:SetLocalText(321398)
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local remainTime = self.param.monthCardInfo.endTime - curTime
        local days = math.ceil(remainTime / (OneDayTime * 1000))
        self.left_time:SetText(toInt(days))
        if not self.isBought then
            self.isBought = true
        end
        local restTime = days
        local todayClaimed = self.param.monthCardInfo:IsTodayClaimed()
        if todayClaimed then
            restTime = restTime-1
            CS.UIGray.SetGray(self.get_btn.transform, true, false)
        else
            CS.UIGray.SetGray(self.get_btn.transform, false, true)
        end
        self.get_rest:SetText(Localization:GetString("110315",toInt(restTime)))
    else
        self.get_obj:SetActive(false)
        self.buy_obj:SetActive(true)
        --self.continue_obj:SetActive(false)
        self.time_des:SetLocalText(321397)
        self.left_time:SetText("30")
    end
end

local function RefreshRewards(self)
    self:SetTodayRewardCellDestroy()
    if self.todayRewardsList~=nil and #self.todayRewardsList>0 then
        for i = 1, table.length(self.todayRewardsList) do
            local item = self.todayRewardsList[i]
            self.model_today[i] = self:GameObjectInstantiateAsync(UIAssets.WorldPointRewardItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.today_reward_content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local quaternion = Quaternion.Euler(0, 0, 0)
                go.transform:Set_localRotation(quaternion.x, quaternion.y, quaternion.z, quaternion.w)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.today_reward_content:AddComponent(RewardItem,nameStr)
                cell:RefreshData(item)
            end)
        end
    end
    self:SetBenefitCellDestroy()
    if self.benefitsList~=nil and #self.benefitsList>0 then
        for i = 1, table.length(self.benefitsList) do
            local item = self.benefitsList[i]
            self.benefit_model[i] = self:GameObjectInstantiateAsync(UIAssets.MonthCardBenefitItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.benefit_content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local quaternion = Quaternion.Euler(0, 0, 0)
                go.transform:Set_localRotation(quaternion.x, quaternion.y, quaternion.z, quaternion.w)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.benefit_content:AddComponent(MonthCardBenefitItem,nameStr)
                cell:RefreshData(item)
            end)
        end
    end
    self:SetRewardCellDestroy()
    if self.rewardsList~=nil and #self.rewardsList>0 then
        for i = 1, table.length(self.rewardsList) do
            local item = self.rewardsList[i]
            self.model[i] = self:GameObjectInstantiateAsync(UIAssets.WorldPointRewardItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.reward_content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local quaternion = Quaternion.Euler(0, 0, 0)
                go.transform:Set_localRotation(quaternion.x, quaternion.y, quaternion.z, quaternion.w)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.reward_content:AddComponent(RewardItem,nameStr)
                cell:RefreshData(item)
            end)
        end
    end
end


local function SetTodayRewardCellDestroy(self)
    self.today_reward_content:RemoveComponents(RewardItem)
    if self.model_today~=nil then
        for k,v in pairs(self.model_today) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.model_today ={}
end

local function SetRewardCellDestroy(self)
    self.reward_content:RemoveComponents(RewardItem)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.model ={}
end

local function SetBenefitCellDestroy(self)
    self.benefit_content:RemoveComponents(MonthCardBenefitItem)
    if self.benefit_model~=nil then
        for k,v in pairs(self.benefit_model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.benefit_model = {}
end


local function OnClickGetBtn(self)
    local mcId = self.param.monthCardInfo:GetId()
    if mcId~=nil then
        SFSNetwork.SendMessage(MsgDefines.ClaimGolloesDailyReward, mcId)
    end
    
end
local function OnClickBuyBtn(self)
    if self.param.monthCardInfo:IsBought() then
        GoToUtil.GotoCityByBuildId(BuildingTypes.FUN_BUILD_GROCERY_STORE, WorldTileBtnType.GolloesCamp)
    else
        self.view.ctrl:BuyGift(self.param.monthCardInfo.packageData)
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Ue_GetPayReward)
    end
end


UIGolloesMonthCardContent.OnCreate = OnCreate
UIGolloesMonthCardContent.OnDestroy = OnDestroy
UIGolloesMonthCardContent.OnAddListener = OnAddListener
UIGolloesMonthCardContent.OnRemoveListener = OnRemoveListener
UIGolloesMonthCardContent.ComponentDefine = ComponentDefine
UIGolloesMonthCardContent.ComponentDestroy = ComponentDestroy
UIGolloesMonthCardContent.DataDefine = DataDefine
UIGolloesMonthCardContent.DataDestroy = DataDestroy

UIGolloesMonthCardContent.ReInit = ReInit
UIGolloesMonthCardContent.RefreshUI = RefreshUI
UIGolloesMonthCardContent.SetBenefitCellDestroy= SetBenefitCellDestroy
UIGolloesMonthCardContent.SetRewardCellDestroy = SetRewardCellDestroy
UIGolloesMonthCardContent.SetTodayRewardCellDestroy = SetTodayRewardCellDestroy
UIGolloesMonthCardContent.OnClickGetBtn = OnClickGetBtn
UIGolloesMonthCardContent.OnClickBuyBtn = OnClickBuyBtn
UIGolloesMonthCardContent.RefreshRewards = RefreshRewards

return UIGolloesMonthCardContent