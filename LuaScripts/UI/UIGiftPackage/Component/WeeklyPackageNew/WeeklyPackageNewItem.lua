---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/2/16 12:12
---
local WeeklyPackageNewItem = BaseClass("WeeklyPackageNewItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"
local UICommonItem = require "UI.UICommonItem.UICommonItem"

local offset_path = "offset"
local package_path = "offset/pckage"
local bgImg_path = "offset/pckage/Bg"
local discount_path = "offset/pckage/PercentBg"
local discountTxt_path = "offset/pckage/PercentBg/Percent"
local limitTip_path = "offset/pckage/limit"
local buyBtn_path= "offset/pckage/BuyButton"
local buyBtnTxt_path = "offset/pckage/BuyButton/BuyButtonText"
local endTime_path = "offset/pckage/Img_TimeIcon/Txt_Times"
local isHot_path = "offset/pckage/isHot"
local isHotTxt_path = "offset/pckage/isHot/isHotTxt"
local mask_path = "offset/pckage/mask"
local rewardContent_path = "offset/pckage/ScrollView/Viewport/rewardContent"
local title_path = "offset/pckage/Title"

local point_path = "offset/pckage/BuyButton/UIGiftPackagePoint"
local pointimg_path = "offset/pckage/BuyButton/UIGiftPackagePoint/Image"
local pointTxt_path = "offset/pckage/BuyButton/UIGiftPackagePoint/Txt_Point"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    if self.delayTimer then
        self.delayTimer:Stop()
    end
    self:DelTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.offsetN = self:AddComponent(UIBaseContainer, offset_path)
    self.canvasGroupN = self:AddComponent(UICanvasGroup, offset_path)
    self.packageN = self:AddComponent(UIBaseContainer, package_path)
    self.bgImgN = self:AddComponent(UIImage, bgImg_path)
    self.discountN = self:AddComponent(UIBaseContainer, discount_path)
    self.discountTxtN = self:AddComponent(UITextMeshProUGUIEx, discountTxt_path)
    --self.rewardsTbN = {}
    --for i = 1, 3 do
    --    local newN = {}
    --    local tempReward = self:AddComponent(UIBaseContainer, reward_path .. i)
    --    newN.rootN = tempReward
    --    newN.iconN = tempReward:AddComponent(UIImage, "clickBtn/ItemIcon")
    --    newN.numN = tempReward:AddComponent(UITextMeshProUGUIEx, "clickBtn/NumText")
    --    newN.nameN = tempReward:AddComponent(UITextMeshProUGUIEx, "clickBtn/NameText")
    --    newN.btnN = tempReward:AddComponent(UIButton, "clickBtn")
    --    newN.btnN:SetOnClick(function()
    --        self:ShowRewardTips(i, newN.btnN)
    --    end)
    --    table.insert(self.rewardsTbN, newN)
    --end
    self.limitTipN = self:AddComponent(UITextMeshProUGUIEx, limitTip_path)
    self.buyBtnN = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtnimgN = self:AddComponent(UIImage, buyBtn_path)
    self.buyBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.buyBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, buyBtnTxt_path)
    self.endTimeN = self:AddComponent(UITextMeshProUGUIEx, endTime_path)
    self.isHotN = self:AddComponent(UIBaseContainer, isHot_path)
    self.isHotTxtN = self:AddComponent(UITextMeshProUGUIEx, isHotTxt_path)
    self.maskN = self:AddComponent(UIImage, mask_path)
    self.point_rect = self:AddComponent(UIGiftPackagePoint,point_path)
    self.pointBgN = self:AddComponent(UIImage,point_path)
    self.pointImgN = self:AddComponent(UIImage,pointimg_path)
    self.pointTxtN = self:AddComponent(UITextMeshProUGUIEx,pointTxt_path)
    self.rewardContent = self:AddComponent(UIBaseContainer,rewardContent_path)
    self.title = self:AddComponent(UITextMeshProUGUIEx,title_path)
    --local eff1 = self:AddComponent(UIBaseContainer, particleEff1_path)
    --local eff2 = self:AddComponent(UIBaseContainer, particleEff2_path)
    --self.particleEffsTb = {}
    --table.insert(self.particleEffsTb, eff1)
    --table.insert(self.particleEffsTb, eff2)
end

--控件的销毁
local function ComponentDestroy(self)
    self.offsetN = nil
    self.packageN = nil
    self.bgImgN = nil
    self.discountN = nil
    self.discountTxtN = nil
    self.rewardsTbN = nil
    self.limitTipN = nil
    self.buyBtnN = nil
    self.buyBtnTxtN = nil
    self.point_rect = nil
    self.particleEffsTb = nil
end

--变量的定义
local function DataDefine(self)
    self.packageInfo = nil
    self.packageId = nil
end

--变量的销毁
local function DataDestroy(self)
    self.packageInfo = nil
    self.packageId = nil
end

local function UpdateByExternal(self)
    self:SetOffset()
    self:SetAlpha()
end

local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.UpdateGiftPackData, self.RefreshUI)
end

local function OnRemoveListener(self)
    --self:RemoveUIListener(EventId.UpdateGiftPackData, self.RefreshUI)
    base.OnRemoveListener(self)
end


local function SetItem(self, tempPackage, originN)
    self.originN = originN
    self.packageInfo = tempPackage
    self.packageId = tempPackage:getID()
    if self.packageId == "-1" then
        self.packageN:SetActive(false)
    else
        self.packageN:SetActive(true)
        self:RefreshUI()
    end
    if self.delayTimer then
        self.delayTimer:Stop()
    end
    self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
        self:UpdateByExternal()
        self.delayTimer = nil
    end, 0.1)
    
end

local function RefreshUI(self)
    if self.packageId then
        self.packageInfo = GiftPackageData.get(self.packageId)
        self.rewardList =  self.packageInfo:GetRewardList(true)
        
        local arrAlliance = self.packageInfo:getAllianceGift()
        if arrAlliance ~= nil and #arrAlliance > 0 then
            for k,v in ipairs(arrAlliance) do
                local arr = string.split(v,";")
                if #arr > 4 then
                    local param = {}
                    param.rewardType = RewardType.GOODS
                    param.iconName = string.format(LoadPath.UIAllianceGift, arr[1])
                    param.itemName = arr[2]
                    param.itemDesc = arr[3]
                    param.count = arr[4]
                    param.itemColor = arr[5]
                    table.insert(self.rewardList,param)
                end
            end
        end
    end

    --背景
    --local bgParam = self.packageInfo:getPopupImageH()
    --if bgParam and bgParam ~= "" then
    --    local bgPath = string.format("Assets/Main/TextureEx/UIWeeklyPackage/%s", bgParam)
    --    self.bgImgN:LoadSprite(bgPath)
    --end

    local discountTips = self.packageInfo:GetDiscountTips()
    ----下方限购提示1
    --if discountTips and discountTips[1] then
    --    self.limitTipN:SetText(discountTips[1])
    --else
    --    self.limitTipN:SetText("")
    --end
    --左上折扣提示2
    if discountTips and discountTips[2] then
        self.isHotN:SetActive(true)
        self.isHotTxtN:SetText(discountTips[2])
    else
        self.isHotN:SetActive(false)
    end

    -- 折扣3
    if discountTips and discountTips[3] then
        self.discountN:SetActive(true)
        self.discountTxtN:SetText(discountTips[3])
    else
        local hasPercent = self.packageInfo:hasPercent()
        if hasPercent then
            self.discountN:SetActive(true)
            self.discountTxtN:SetText(string.format("%s%%", self.packageInfo:getPercent()))
        else
            self.discountN:SetActive(false)
        end
    end
    
    --local replaceDic = (discountTips and discountTips[4]) and discountTips[4] or {}
    --for i, v in ipairs(self.rewardsTbN) do
    --    if i <= #self.rewardList then
    --        local reward = self.rewardList[i]
    --        if replaceDic[i] then
    --            reward = replaceDic[i]
    --        end
    --        v.rootN:SetActive(true)
    --        local icon = self:GetRewardIcon(reward)
    --        if i == 1 then
    --            icon = icon .. "_big"
    --        end
    --        v.iconN:LoadSprite(icon)
    --        v.numN:SetText("x" .. reward.count)
    --        v.nameN:SetText(self:GetItemName(reward))
    --    else
    --        v.rootN:SetActive(false)
    --    end
    --end
    self:RefreshReward()
    local strPrice = DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID())
    self.buyBtnTxtN:SetText(strPrice)
    
    local maxNum = self.packageInfo:getBuyTimes()
    local boughtNum = self.packageInfo:getHasGetCount()
    local remainTimes = maxNum - boughtNum
    remainTimes = remainTimes < 0 and 0 or remainTimes
    if remainTimes > 0 then
        self.limitTipN:SetText(Localization:GetString("320319", remainTimes))
    else
        self.limitTipN:SetText("")
    end
    self.title:SetText(self.packageInfo:getNameText())
    self.bgImgN:LoadSprite(PackageImgPath.WeeklyPackageItem..self.packageInfo:getPopupImageH())
    --积分
    self.point_rect:RefreshPoint(self.packageInfo)
    
    --self:RefreshRemainTime()
    --self:AddTimer()
end

local function RefreshReward(self)
    local list = self.rewardList
    self:ClearScroll()
    self.model = {}
    for i = 1, table.length(list) do
        --复制基础prefab，每次循环创建一次
        self.model[i] = self:GameObjectInstantiateAsync(UIAssets.UICommonItemSize, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.rewardContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name ="item" .. i
            local cell = self.rewardContent:AddComponent(UICommonItem,go.name)
            cell:ReInit(list[i])
            -- cell.rectTransform.sizeDelta = { x=85,y=85 }
        end)
    end
end

local function ClearScroll(self)
    self.rewardContent:RemoveComponents(UICommonItem)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

local function SetOffset(self)
    if self.originN then
        local dist = math.abs(self.originN.transform.position.x - self.offsetN.transform.position.x)
        local tempScale = 1 - dist / 2000;
        tempScale = tempScale < 0.88 and 0.88 or tempScale
        self.offsetN.transform:Set_localScale(tempScale, tempScale, 1)
        --self:SetParticles(dist < 800)
    end
end

local function SetParticles(self, isShow)
    for i, v in ipairs(self.particleEffsTb) do
        v:SetActive(isShow)
    end
end

local function SetAlpha(self)
    if self.originN then
        local dist = math.abs(self.originN.transform.position.x - self.offsetN.transform.position.x)
        local tempA = dist / 832;
        tempA = tempA > 0.66 and 0.66 or tempA
        self.maskN:SetAlpha(tempA)
        self.buyBtnimgN:SetAlpha(1-tempA)
        self.pointBgN:SetAlpha(1-tempA)
        self.pointImgN:SetAlpha(1-tempA)
        self.buyBtnTxtN:SetColor(Color.New(1, 1, 1, 1-tempA))
        self.pointTxtN:SetColor(Color.New(1, 1, 1, 1-tempA))
    end
end

local function GetRewardIcon(self, param)
    if param.rewardType == RewardType.GOODS then
        if param.itemId == nil then
            --联盟道具
            return param.iconName
        else
            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(param.itemId)
            if goods ~= nil then
                return string.format(LoadPath.ItemPath, goods.icon)
            end
        end
    elseif param.rewardType == RewardType.GOLD then
        return DataCenter.ResourceManager:GetResourceIconByType(ResourceType.Gold)
    elseif param.rewardType == RewardType.OIL or param.rewardType == RewardType.METAL
            or param.rewardType == RewardType.WATER
            or param.rewardType == RewardType.MONEY or param.rewardType == RewardType.ELECTRICITY then
        return DataCenter.RewardManager:GetPicByType(param.rewardType)
    elseif param.rewardType == RewardType.ARM then
        return string.format(LoadPath.SoldierIcons,army.icon)
    elseif param.rewardType == RewardType.EQUIP then
        local xmlData = LocalController:instance():getLine("equip_info_new_equip", param.itemId)
        if xmlData ~= nil then
            return xmlData:GetString("icon")
        end
    elseif param.rewardType == RewardType.HERO then
        local xmlData = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), param.itemId)
        if xmlData ~= nil then
            return LoadPath.HeroIconsSmallPath .. xmlData["hero_icon"]
        end
    elseif param.rewardType == RewardType.HONOR or param.rewardType == RewardType.ALLIANCE_POINT then
        return DataCenter.RewardManager:GetPicByType(param.rewardType,param.itemId)
    elseif param.rewardType == RewardType.MATERIAL then
        self:SetFlagActive(false)
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(param.itemId)
        if goods ~= nil then
            return goods.icon
        end
    end
end

local function GetItemName(self, reward)
    if reward.rewardType == RewardType.GOODS then
        if reward.itemId == nil then
            return ""
        else
            return DataCenter.ItemTemplateManager:GetName(reward.itemId)
        end
    elseif reward.rewardType == RewardType.GOLD then
        return Localization:GetString(ResourceTypeTxt[reward.rewardType])
    elseif reward.rewardType == RewardType.OIL or reward.rewardType == RewardType.METAL
            or reward.rewardType == RewardType.WATER
            or reward.rewardType == RewardType.MONEY or reward.rewardType == RewardType.ELECTRICITY then
        return Localization:GetString(ResourceTypeTxt[reward.rewardType])
    end
    return ""
end


--非礼包通用方法
local function GetCellsList(self)
    local listParam = {}
    local info = self.packageInfo

    
    --联盟礼物不在周礼包显示
    --local arrAlliance = info:getAllianceGift()
    --if arrAlliance ~= nil and #arrAlliance > 0 then
    --    for k,v in ipairs(arrAlliance) do
    --        local arr = string.split(v,";")
    --        if #arr > 4 then
    --            local param = {}-- UIGiftPackageCell.Param.New()
    --            param.iconName = string.format(LoadPath.UIAllianceGift, arr[1])
    --            param.itemName = arr[2]
    --            param.itemDes = arr[3]
    --            param.count = arr[4]
    --            param.itemColor = arr[5]
    --            table.insert(listParam,param)
    --        end
    --    end
    --end
    
    

    -- 英雄
    local heroStr = info:getHeroesStr()
    if (not string.IsNullOrEmpty(heroStr)) then
        local arr = string.split(heroStr, ";")
        if (#arr == 2) then
            local param = {}-- UIGiftPackageCell.Param.New()
            param.rewardType = RewardType.HERO
            param.itemId = arr[1]
            param.count = tonumber(arr[2])
            table.insert(listParam,param)
        end
    end

    -- 普通道具
    local str = info:getItemsStr()
    local _item_use = info:getItemUse()
    if _item_use ~= nil and _item_use ~= "" then
        str = _item_use .. "|" .. str
    end

    local arrMiddle = string.split(str,"|")
    if arrMiddle ~= nil and #arrMiddle > 0 then
        for k,v in ipairs(arrMiddle) do
            local arr = string.split(v,";")
            if arr[1] ~= "" then
                local param = {}-- UIGiftPackageCell.Param.New()
                param.rewardType = RewardType.GOODS
                param.itemId = arr[1]
                local numCount = tonumber(arr[2])
                param.count = string.GetFormattedSeperatorNum(numCount)
                table.insert(listParam,param)
            end
        end
    end

    local goldParam = {}
    local goldNum = tonumber(info:getDiamond())
    if goldNum > 0 then
        goldParam.rewardType = RewardType.GOLD
        goldParam.count = tonumber(string.GetFormattedSeperatorNum(goldNum))
        goldParam.itemId = ResourceType.Gold
        table.insert(listParam, 2, goldParam)
        --table.insert(listParam,goldParam)
    end

    return listParam
end

local function OnClickBuyBtn(self)
    self.view.ctrl:BuyGift(self.packageInfo)
end

local function ShowArrow(self)
    local param = {}
    param.position = self.buyBtnN.transform.position
    param.arrowType = ArrowType.Normal
    param.positionType = PositionType.Screen
    TimerManager:GetInstance():DelayInvoke(function()
        DataCenter.ArrowManager:ShowArrow(param)
    end, 0.1)
end

local function ShowRewardTips(self, index, comp)
    local reward = self.rewardList[index]
    
    local discountTips = self.packageInfo:GetDiscountTips()
    local replaceDic = (discountTips and discountTips[4]) and discountTips[4] or {}
    if replaceDic[index] then
        reward = replaceDic[index]
    end
    
    if reward.rewardType == RewardType.GOODS then
        if reward.itemId ~= nil then
            local param = {}
            param["itemId"] = reward.itemId
            param["alignObject"] = comp
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
        elseif reward.iconName ~= nil then
            local param = {}
            param["itemName"] = reward.itemName
            param["itemDesc"] = reward.itemDesc
            param["alignObject"] = comp
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
        end
    elseif reward.rewardType == RewardType.HERO then
        local param = {}
        param["itemId"] = reward.itemId
        param["rewardType"] = RewardType.HERO
        param["alignObject"] = comp
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
    else
        local desc = DataCenter.RewardManager:GetDescByType(reward.rewardType, reward.itemId)
        local name = DataCenter.RewardManager:GetNameByType(reward.rewardType, reward.itemId)
        local param = {}
        param["itemName"] = name
        param["itemDesc"] = desc
        param["alignObject"] = comp
        param.isLocal = true

        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
    end
end

local function AddTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.packageInfo:getEndTime() - curTime
    if remainTime > 0 then
        self.endTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.endTimeN:SetText("")
        self:DelTimer()
    end
end

local function DelTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end


WeeklyPackageNewItem.OnCreate = OnCreate
WeeklyPackageNewItem.OnDestroy = OnDestroy
WeeklyPackageNewItem.ComponentDefine = ComponentDefine
WeeklyPackageNewItem.ComponentDestroy = ComponentDestroy
WeeklyPackageNewItem.DataDefine = DataDefine
WeeklyPackageNewItem.DataDestroy = DataDestroy
WeeklyPackageNewItem.OnAddListener = OnAddListener
WeeklyPackageNewItem.OnRemoveListener = OnRemoveListener

WeeklyPackageNewItem.SetItem = SetItem
WeeklyPackageNewItem.UpdateByExternal = UpdateByExternal
WeeklyPackageNewItem.RefreshUI = RefreshUI
WeeklyPackageNewItem.GetCellsList = GetCellsList
WeeklyPackageNewItem.OnClickBuyBtn = OnClickBuyBtn
WeeklyPackageNewItem.ShowArrow = ShowArrow
WeeklyPackageNewItem.GetRewardIcon = GetRewardIcon
WeeklyPackageNewItem.SetOffset = SetOffset
WeeklyPackageNewItem.ShowRewardTips = ShowRewardTips
WeeklyPackageNewItem.SetAlpha = SetAlpha
WeeklyPackageNewItem.AddTimer = AddTimer
WeeklyPackageNewItem.RefreshRemainTime = RefreshRemainTime
WeeklyPackageNewItem.DelTimer = DelTimer
WeeklyPackageNewItem.GetItemName = GetItemName
WeeklyPackageNewItem.SetParticles = SetParticles
WeeklyPackageNewItem.RefreshReward = RefreshReward
WeeklyPackageNewItem.ClearScroll = ClearScroll

return WeeklyPackageNewItem