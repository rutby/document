---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/1/6 14:58
---

local UIChainPay = BaseClass("UIChainPay", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIChainPayItem = require "UI.UIGiftPackage.Component.UIChainPayItem"

local title_path = "TitleBg/Title"
local info_path = "TitleBg/Info"
local desc_path = "TitleBg/Desc"
local root_path = "ItemList/Root"
local item_path = "ItemList/Root/UIChainPayItem_%s"
local time_path = "TitleBg/TimeBg/Time"

local ItemCount = 4
local ItemWidth = 361
local ScrollDuration = 0.5

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.info_btn = self:AddComponent(UIButton, info_path)
    self.info_btn:SetOnClick(function()
        self:OnInfoClick()
    end)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.root_go = self:AddComponent(UIBaseContainer, root_path)
    self.items = {}
    for i = 1, ItemCount do
        self.items[i] = self:AddComponent(UIChainPayItem, string.format(item_path, i))
    end
    self.time_text = self:AddComponent(UITextMeshProUGUIEx, time_path)
end

local function ComponentDestroy(self)
    self.title_text = nil
    self.info_btn = nil
    self.desc_text = nil
    self.root_go = nil
    self.items = nil
    self.time_text = nil
end

local function DataDefine(self)
    self.actId = 0
    self.actData = nil -- ActivityInfoData
    self.data = nil -- ChainPayData
    self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
    self.timer:Start()
    self.tween = nil
end

local function DataDestroy(self)
    self.actId = nil
    self.actData = nil
    self.data = nil
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    if self.tween then
        self.tween:Kill()
        self.tween = nil
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.ChainPayGetInfo, self.OnChainPayGetInfo)
    self:AddUIListener(EventId.ChainPayReceiveReward, self.OnChainPayReceiveReward)
    self:AddUIListener(EventId.ChainPayUpdateState, self.OnChainPayUpdateState)
    self:AddUIListener(EventId.ChainPayRefresh, self.OnChainPayRefresh)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.ChainPayGetInfo, self.OnChainPayGetInfo)
    self:RemoveUIListener(EventId.ChainPayReceiveReward, self.OnChainPayReceiveReward)
    self:RemoveUIListener(EventId.ChainPayUpdateState, self.OnChainPayUpdateState)
    self:RemoveUIListener(EventId.ChainPayRefresh, self.OnChainPayRefresh)
    base.OnRemoveListener(self)
end

local function ReInit(self, actId)
    self.actId = actId
    self.actData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(actId))
    if self.actData == nil then
        return
    end
    
    self.title_text:SetLocalText(self.actData.name)
    self.desc_text:SetLocalText(self.actData.desc_info)
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    Setting:SetPrivateString(SettingKeys.CHAIN_PAY_VISIT_TIME .. actId, tostring(curTime))
    DataCenter.ChainPayManager:SendGetInfo(actId)
end

-- useLastReceivedIndex: 将已购买的礼包显示在第一个
local function Refresh(self, useLastReceivedIndex)
    self.data = DataCenter.ChainPayManager:GetData(self.actId)
    if self.data == nil then
        return
    end
    
    self:SetItemsData(useLastReceivedIndex)
    self:TimerAction()
end

local function SetItemsData(self, useLastReceivedIndex)
    local startBoxIndex = self.data:GetLastReceivedIndex()
    if not useLastReceivedIndex then
        startBoxIndex = startBoxIndex + 1
    end
    startBoxIndex = math.min(startBoxIndex, #self.data.boxes - 2)
    
    for itemIndex = 1, ItemCount do
        local item = self.items[itemIndex]
        local boxIndex = startBoxIndex + itemIndex - 1
        local box = self.data.boxes[boxIndex]
        if box then
            item:SetActive(true)
            item:SetData(self.data, box)
            item:SetOnClick(function(b)
                self:OnItemClick(b)
            end, function(b)
                self:OnItemRefreshClick(b)
            end)
        else
            item:SetActive(false)
        end
    end
end

local function TryScroll(self, callback)
    if self.data:GetLastReceivedIndex() < #self.data.boxes - 2 then
        if self.tween then
            self.tween:Kill()
        end
        self.tween = self.root_go.transform:DOLocalMoveY(ItemWidth, ScrollDuration):OnComplete(function()
            self.root_go.transform.localPosition = Vector3.zero
            callback()
        end)
    else
        callback()
    end
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local restTime = math.floor(self.actData.endTime - curTime)
    if restTime >= 0 then
        local restTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(restTime)
        self.time_text:SetText(restTimeStr)
    end
end

local function OnInfoClick(self)
    UIUtil.ShowIntro(Localization:GetString("320583"), Localization:GetString("100239"), Localization:GetString("320585"))
end

local function OnItemClick(self, box)
    if box:IsFree() then
        DataCenter.ChainPayManager:SendReceiveReward(self.data.actId, box.id)
    else
        if box.state == ChainPayBoxState.Default then
            local pack = box:GetPack()
            if pack then
                DataCenter.PayManager:BuyGift(pack)
            end
        elseif box.state == ChainPayBoxState.Unlocked then
            DataCenter.ChainPayManager:SendReceiveReward(self.data.actId, box.id)
        end
    end
end

local function OnItemRefreshClick(self, box)
    if box:IsFree() or box.state ~= ChainPayBoxState.Default or DataCenter.ChainPayManager:IsRefreshing() then
        return
    end
    
    UIUtil.ShowMessage(Localization:GetString("320599"), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
        DataCenter.ChainPayManager:SendRefresh(self.data.actId, box.group)
    end)
end

local function OnChainPayGetInfo(self, actId)
    if self.actData and tonumber(self.actData.id) == actId then
        self:Refresh(false)
    end
end

local function OnChainPayReceiveReward(self, actId)
    if self.actData and tonumber(self.actData.id) == actId then
        self:Refresh(true)
        self:TryScroll(function()
            self:Refresh(false)
        end)
    end
end

local function OnChainPayUpdateState(self, actId)
    if self.actData and tonumber(self.actData.id) == actId then
        self:Refresh(true)
        self:TryScroll(function()
            self:Refresh(false)
        end)
    end
end

local function OnChainPayRefresh(self, actId)
    if self.actData and tonumber(self.actData.id) == actId then
        self:Refresh(false)
        UIUtil.ShowTipsId(372335)
    end
end

UIChainPay.OnCreate = OnCreate
UIChainPay.OnDestroy = OnDestroy
UIChainPay.OnEnable = OnEnable
UIChainPay.OnDisable = OnDisable
UIChainPay.ComponentDefine = ComponentDefine
UIChainPay.ComponentDestroy = ComponentDestroy
UIChainPay.DataDefine = DataDefine
UIChainPay.DataDestroy = DataDestroy
UIChainPay.OnAddListener = OnAddListener
UIChainPay.OnRemoveListener = OnRemoveListener

UIChainPay.ReInit = ReInit
UIChainPay.Refresh = Refresh
UIChainPay.SetItemsData = SetItemsData
UIChainPay.TryScroll = TryScroll
UIChainPay.TimerAction = TimerAction
UIChainPay.OnInfoClick = OnInfoClick
UIChainPay.OnItemClick = OnItemClick
UIChainPay.OnItemRefreshClick = OnItemRefreshClick

UIChainPay.OnChainPayGetInfo = OnChainPayGetInfo
UIChainPay.OnChainPayReceiveReward = OnChainPayReceiveReward
UIChainPay.OnChainPayUpdateState = OnChainPayUpdateState
UIChainPay.OnChainPayRefresh = OnChainPayRefresh

return UIChainPay