---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/2/16 12:12
---
local WeekCardItem = BaseClass("WeekCardItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"
local UICommonItem = require "UI.UICommonItem.UICommonItem_TextMeshPro"

local PackageStatus = {
    CanBuy = 1,
    CanClaim = 2,
    BuyAgain = 3,
    CannotBuy = 4,
}

local Bg2Color = {
    UIWeekCard_img_card_gold = Color.New(183/255,102/255,48/255),
    UIWeekCard_img_card_purple = Color.New(161/255,70/255,169/255)
}
local Bg2Outline = {
    UIWeekCard_img_card_gold = Color.New(212/255,146/255,62/255),
    UIWeekCard_img_card_purple = Color.New(161/255,70/255,169/255),
}

local bg_path = "Image"
local fg_path = "Image/icon"
local discount_path = "Image/discount"
local discountTxt_path = "Image/discount/discountTxt"
local name_path = "Image/name"
local mainDescTxt_path = "Image/desc/layout/desc"
local mainDesc_path = "Image/desc/layout"
local imageLayout_path = "Image/desc/layout/imagelayout"
local mainDescImg_path = "Image/desc/layout/imagelayout/getImage"
local subDesc_path = "Image/desc/subDesc"
local claimBtn_path = "Image/claimBtn"
local claimBtnTxt_path = "Image/claimBtn/claimBtnTxt"
local buyBtn_path = "Image/buyBtn"
local buyBtnTxt_path = "Image/buyBtn/TxtPrice2"
local buyAgainBtn_path = "Image/buyAgainBtn"
local buyAgainBtnTxt_path = "Image/buyAgainBtn/buyAgainTxt"
local claimRed_path = "Image/claimBtn/redDot"
local isHot_path = "Image/isHot"
local isHotTxt_path = "Image/isHot/isHotTxt"
local remainDays_path = "Image/remainDays"
local giftPackagePoint_path = "Image/GiftPackagePoint"
local selectBtn_path = "Image/selectBtn"
local selectBtnTxt_path = "Image/selectBtn/selectBtnTxt"
local selectBtnRed_path = "Image/selectBtn/selectBtnRed"
local reselectBtn_path = "Image/reselectBtn"
local rewards_path = "Image/desc/rewards"
local rewardItems_path = "Image/desc/rewards/UICommonItem_"
local emptyItems_path = "Image/desc/rewards/empty_"
local claimedBtn_path = "Image/claimedGo"
local claimedBtnTxt_path = "Image/claimedGo/claimedTxt"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    self:DelTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.bgN = self:AddComponent(UIImage, bg_path)
    self.fgN = self:AddComponent(UIImage, fg_path)
    self.discountN = self:AddComponent(UIBaseContainer, discount_path)
    self.discountTxtN = self:AddComponent(UITextMeshProUGUIEx, discountTxt_path)
    self.nameN = self:AddComponent(UITextMeshProUGUIEx, name_path)
    self.mainDescN = self:AddComponent(UIBaseContainer, mainDesc_path)
    self.mainDescTxtN = self:AddComponent(UITextMeshProUGUIEx, mainDescTxt_path)
    self.MainDescImgLayoutN = self:AddComponent(UIBaseContainer, imageLayout_path)
    self.mainDescImgN = self:AddComponent(UIImage, mainDescImg_path)
    self.subDescN = self:AddComponent(UITextMeshProUGUIEx, subDesc_path)
    self.claimBtnN = self:AddComponent(UIButton, claimBtn_path)
    self.claimBtnN:SetOnClick(function()
        self:OnClickClaimBtn()
    end)
    self.claimBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, claimBtnTxt_path)
    self.claimBtnTxtN:SetLocalText(170004)
    self.buyBtnN = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.buyBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, buyBtnTxt_path)
    self.buyAgainBtnN = self:AddComponent(UIButton, buyAgainBtn_path)
    self.buyAgainBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.buyAgainBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, buyAgainBtnTxt_path)
    self.buyAgainBtnTxtN:SetLocalText(320489)
    self.claimRedN =self:AddComponent(UIBaseContainer, claimRed_path)
    self.isHotN = self:AddComponent(UIBaseContainer, isHot_path)
    self.isHotN:SetActive(false)
    self.isHotTxtN = self:AddComponent(UITextMeshProUGUIEx, isHotTxt_path)
    self.remainDaysN = self:AddComponent(UITextMeshProUGUIEx, remainDays_path)
    self.giftPackagePointN = self:AddComponent(UIGiftPackagePoint, giftPackagePoint_path)
    self.selectBtnN = self:AddComponent(UIButton, selectBtn_path)
    self.selectBtnN:SetOnClick(function()
        self:OnClickSelectBtn()
    end)
    self.selectBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, selectBtnTxt_path)
    self.selectBtnTxtN:SetLocalText(110108)
    self.selectBtnRedN = self:AddComponent(UIBaseContainer, selectBtnRed_path)
    self.reselectBtnN = self:AddComponent(UIButton, reselectBtn_path)
    self.reselectBtnN:SetOnClick(function()
        self:OnClickReselectBtn()
    end)
    self.rewardsN = self:AddComponent(UIBaseContainer, rewards_path)
    self.rewardsTbN = {}
    for i = 1, 4 do
        local emptyGo = self:AddComponent(UIButton, emptyItems_path .. i)
        emptyGo:SetOnClick(function()
            self:OnClickReselectBtn()
        end)
        local itemGo = self:AddComponent(UICommonItem, rewardItems_path .. i)
        local reward = {
            emptyN = emptyGo,
            itemN = itemGo
        }
        table.insert(self.rewardsTbN, reward)
    end
    self.claimedBtnN = self:AddComponent(UIBaseContainer, claimedBtn_path)
    self.claimedBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, claimedBtnTxt_path)
    self.claimedBtnTxtN:SetLocalText(110461)
end

--控件的销毁
local function ComponentDestroy(self)
    self.bgN = nil
    self.fgN = nil
    self.discountN = nil
    self.discountTxtN = nil
    self.nameN = nil
    self.mainDescN = nil
    self.mainDescTxtN = nil
    self.mainDescImgN = nil
    self.subDescN = nil
    self.claimBtnN = nil
    self.claimBtnTxtN = nil
    self.buyBtnN = nil
    self.buyBtnTxtN = nil
    self.buyAgainBtnN = nil
    self.buyAgainBtnTxtN = nil
    self.claimRedN =nil
    self.isHotN = nil
    self.isHotTxtN = nil
    self.remainDaysN = nil
    self.giftPackagePointN = nil
end

--变量的定义
local function DataDefine(self)
    self.weekCardInfo = nil
    self.packageInfo = nil
end

--变量的销毁
local function DataDestroy(self)
    self.weekCardInfo = nil
    self.packageInfo = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnWeekCardOneInfoChange, self.RefreshAll)
    self:AddUIListener(EventId.OnWeekCardCustomRewardUpdate, self.RefreshAll)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnWeekCardOneInfoChange, self.RefreshAll)
    self:RemoveUIListener(EventId.OnWeekCardCustomRewardUpdate, self.RefreshAll)
    base.OnRemoveListener(self)
end


local function SetItem(self, weekCardInfo)
    self.weekCardInfo = weekCardInfo
    self.packageInfo = GiftPackManager.get(self.weekCardInfo.exchangeId)
    
    self:RefreshAll()
end

local function RefreshAll(self, targetCardId)
    if targetCardId and targetCardId ~= self.weekCardInfo.id then
        return
    end
    if self.weekCardInfo.typeFunction == 1 and not self.packageInfo then
        return
    end
    --背景
    local bgArr = string.split(self.weekCardInfo.image, ";")
    local fgImg = #bgArr >= 1 and bgArr[1] or nil
    local bgImg = #bgArr >= 2 and bgArr[2] or nil
    if fgImg then
        local fgPath = string.format("Assets/Main/Sprites/UI/UIWeekCard/%s", fgImg)
        self.fgN:LoadSprite(fgPath)
    end
    if bgImg then
        local bgPath = string.format("Assets/Main/Sprites/UI/UIWeekCard/%s", bgImg)
        self.subDescN:SetColor(Bg2Color[bgImg])
        self.bgN:LoadSprite(bgPath)
    end
    
    self.nameN:SetLocalText(self.weekCardInfo.name)
    local strMainDesc = ""
    local mainDescArr = string.split(self.weekCardInfo.desc, "|")
    if #mainDescArr == 2 then
        local paramArr = string.split(mainDescArr[2], ";")
        strMainDesc = Localization:GetString(mainDescArr[1], table.unpack(paramArr))
    else
        strMainDesc = string.IsNullOrEmpty(mainDescArr[1]) and "" or Localization:GetString(mainDescArr[1])
    end
    self.mainDescTxtN:SetText(strMainDesc)
    if not string.IsNullOrEmpty(self.weekCardInfo.itemImg) then
        self.mainDescImgN:LoadSprite(string.format(LoadPath.ItemPath, self.weekCardInfo.itemImg))
    end
    local subDescArr = string.split(self.weekCardInfo.subDesc, "|")
    local strSubDesc = ""
    if #subDescArr == 2 then
        local paramArr = string.split(subDescArr[2], ";")
        strSubDesc = Localization:GetString(subDescArr[1], table.unpack(paramArr))
    else
        strSubDesc = string.IsNullOrEmpty(subDescArr[1]) and "" or Localization:GetString(subDescArr[1])
    end
    self.subDescN:SetText(strSubDesc)
    if self.weekCardInfo.discount > 0 then
        self.discountN:SetActive(true)
        self.discountTxtN:SetText(string.format("%s%%", self.weekCardInfo.discount))
    else
        self.discountN:SetActive(false)
    end
    
    self:RefreshByStatus()

    local serverTime = UITimeManager:GetInstance():GetServerTime()
    self.expireTime = self.weekCardInfo.endTime
    if self.expireTime > serverTime then
        self:AddTimer()
        self:RefreshRemainTime()
    else
        self:DelTimer()
        self.remainDaysN:SetText(Localization:GetString("320485", self.weekCardInfo.validDays))
    end
end

local function RefreshByStatus(self)
    local status = 0
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local lastClaimT = math.modf(self.weekCardInfo.lastRecvTime / 1000)
    local serverTimeS = math.modf(serverTime / 1000)
    local hasBought = self.weekCardInfo.endTime > serverTime
    local todayClaimed = UITimeManager:GetInstance():IsSameDayForServer(lastClaimT, serverTimeS)
    local isValid = self.weekCardInfo.conditionFit
    if hasBought and not todayClaimed then
        status = PackageStatus.CanClaim
    elseif hasBought and todayClaimed then
        status = PackageStatus.BuyAgain
    elseif not isValid then
        status = PackageStatus.CannotBuy
    else
        status = PackageStatus.CanBuy
    end
    
    if self.weekCardInfo.typeFunction == 1 then
        self.rewardsN:SetActive(false)
        self.reselectBtnN:SetActive(false)
        self.selectBtnN:SetActive(false)
        self.claimedBtnN:SetActive(false)
        self.mainDescN:SetActive(true)
        self.subDescN:SetActive(true)
        self.MainDescImgLayoutN:SetActive(true)
        self:ShowWeekCardType_1(status)
    elseif self.weekCardInfo.typeFunction == 2 then
        self.buyBtnN:SetActive(false)
        self.buyAgainBtnN:SetActive(false)
        self.MainDescImgLayoutN:SetActive(false)
        self:ShowWeekCardType_2(status)
    end
end

local function ShowWeekCardType_1(self, status)
    
    if status == PackageStatus.CannotBuy then
        self.buyBtnN:SetActive(true)
        self.claimBtnN:SetActive(false)
        self.buyAgainBtnN:SetActive(false)
        UIGray.SetGray(self.buyBtnN.transform, true, false)
    elseif status == PackageStatus.CanBuy then
        self.buyBtnN:SetActive(true)
        self.claimBtnN:SetActive(false)
        self.buyAgainBtnN:SetActive(false)
        UIGray.SetGray(self.buyBtnN.transform, false, true)
    elseif status == PackageStatus.BuyAgain then
        self.buyAgainBtnN:SetActive(false)
        self.buyBtnN:SetActive(false)
        self.claimBtnN:SetActive(false)
        self.claimedBtnN:SetActive(true)
    elseif status == PackageStatus.CanClaim then
        self.buyAgainBtnN:SetActive(false)
        self.buyBtnN:SetActive(false)
        self.claimBtnN:SetActive(true)
    end
    
    local strPrice = DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID())
    self.buyBtnTxtN:SetText(strPrice)
    
    local showPackagePoint = (status == PackageStatus.CanBuy --[[or status == PackageStatus.BuyAgain]])
    if showPackagePoint then
        self.giftPackagePointN:SetActive(true)
        self.giftPackagePointN:RefreshPoint(self.packageInfo)
    else
        self.giftPackagePointN:SetActive(false)
    end
end

local function ShowWeekCardType_2(self, status)
    self.mainDescN:SetActive(false)
    self.subDescN:SetActive(false)
    self.rewardsN:SetActive(false)
    self.selectBtnRedN:SetActive(false)
    if status == PackageStatus.CannotBuy then
        self.claimBtnN:SetActive(false)
        self.reselectBtnN:SetActive(false)
        self.claimedBtnN:SetActive(false)
        self.selectBtnN:SetActive(true)
        self.selectBtnTxtN:SetLocalText(320784)
        self.mainDescN:SetActive(true)
        self.subDescN:SetActive(true)
        UIGray.SetGray(self.selectBtnN.transform, true, false)
    elseif status == PackageStatus.CanBuy then
        self.claimBtnN:SetActive(false)
        self.reselectBtnN:SetActive(false)
        self.claimedBtnN:SetActive(false)
        self.selectBtnN:SetActive(true)
        self.selectBtnTxtN:SetLocalText(320784)
        self.mainDescN:SetActive(true)
        self.subDescN:SetActive(true)
        UIGray.SetGray(self.selectBtnN.transform, false, true)
    elseif status == PackageStatus.BuyAgain then
        self.claimBtnN:SetActive(false)
        self.selectBtnN:SetActive(false)
        self.claimedBtnN:SetActive(true)
        self.rewardsN:SetActive(true)
        self.reselectBtnN:SetActive(true)
        self:ShowCustomRewards()
    elseif status == PackageStatus.CanClaim then
        self.reselectBtnN:SetActive(true)
        self.claimedBtnN:SetActive(false)
        local isSelected = false
        if not string.IsNullOrEmpty(self.weekCardInfo.selectedGoods) then
            local stageArr = string.split(self.weekCardInfo.selectedGoods, "|")
            if #stageArr == self.weekCardInfo.unlockStage then
                isSelected = true
            end
        end
        if isSelected then
            self.claimBtnN:SetActive(true)
            self.selectBtnN:SetActive(false)
        else
            self.selectBtnN:SetActive(true)
            self.selectBtnRedN:SetActive(true)
            self.selectBtnTxtN:SetLocalText(110108)
            self.claimBtnN:SetActive(false)
        end
        self.rewardsN:SetActive(true)
        self:ShowCustomRewards()
    end

    self.giftPackagePointN:SetActive(false)
end

local function ShowCustomRewards(self)
    if string.IsNullOrEmpty(self.weekCardInfo.selectedGoods) then
        local selectCount = 0
        if self.weekCardInfo.unlockStage > 0 then
            for i, v in ipairs(self.weekCardInfo.goodsSelectList) do
                if i <= self.weekCardInfo.unlockStage then
                    selectCount = v.selectCount + selectCount
                end
            end
        end
        for i, v in ipairs(self.rewardsTbN) do
            v.itemN:SetActive(false)
            v.emptyN:SetActive(i <= selectCount)
        end
        self.reselectBtnN:SetActive(false)
    else
        local rewardList = {}
        local stageArr = string.split(self.weekCardInfo.selectedGoods, "|")
        for i, v in ipairs(stageArr) do
            local indexArr = string.split(v, ";")
            for m, n in ipairs(indexArr) do
                local tempIndex = tonumber(n)
                local reward = self.weekCardInfo.goodsSelectList[i].rewardList[tempIndex]
                table.insert(rewardList, reward)
            end
        end
        for i, v in ipairs(self.rewardsTbN) do
            if i <= #rewardList then
                v.emptyN:SetActive(false)
                v.itemN:SetActive(true)
                v.itemN:ReInit(rewardList[i])
            else
                v.emptyN:SetActive(false)
                v.itemN:SetActive(false)
            end
        end
        self.reselectBtnN:SetActive(true)
    end
end

local function AddTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.expireTime - curTime
    if remainTime > 0 then
        self.remainDaysN:SetText(UITimeManager:GetInstance():MillisionSecToWeekCardFormat(remainTime))
    else
        self:DelTimer()
        self:RefreshAll()
    end
end

local function DelTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function OnClickBuyBtn(self)
    self.view.ctrl:BuyGift(self.packageInfo)
end

local function OnClickClaimBtn(self)
    SFSNetwork.SendMessage(MsgDefines.ClaimWeekCardReward, self.weekCardInfo.id)
end

local function OnClickSelectBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIWeekCardSelectReward,{anim = true}, self.weekCardInfo)
end

local function OnClickReselectBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIWeekCardSelectReward,{anim = true}, self.weekCardInfo) 
end

WeekCardItem.OnCreate = OnCreate
WeekCardItem.OnDestroy = OnDestroy
WeekCardItem.ComponentDefine = ComponentDefine
WeekCardItem.ComponentDestroy = ComponentDestroy
WeekCardItem.DataDefine = DataDefine
WeekCardItem.DataDestroy = DataDestroy
WeekCardItem.OnAddListener = OnAddListener
WeekCardItem.OnRemoveListener = OnRemoveListener

WeekCardItem.SetItem = SetItem
WeekCardItem.RefreshAll = RefreshAll
WeekCardItem.RefreshByStatus = RefreshByStatus
WeekCardItem.ShowWeekCardType_1 = ShowWeekCardType_1
WeekCardItem.ShowWeekCardType_2 = ShowWeekCardType_2
WeekCardItem.ShowCustomRewards = ShowCustomRewards
WeekCardItem.OnClickBuyBtn = OnClickBuyBtn
WeekCardItem.OnClickClaimBtn = OnClickClaimBtn
WeekCardItem.AddTimer = AddTimer
WeekCardItem.RefreshRemainTime = RefreshRemainTime
WeekCardItem.DelTimer = DelTimer
WeekCardItem.OnClickSelectBtn = OnClickSelectBtn
WeekCardItem.OnClickReselectBtn = OnClickReselectBtn

return WeekCardItem