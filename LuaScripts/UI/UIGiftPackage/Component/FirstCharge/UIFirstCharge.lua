---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime:
---首充

local UIFirstCharge = BaseClass("UIFirstCharge", UIBaseView)
local base = UIBaseView
local UIGray = CS.UIGray
local UIFirstChargeItem = require "UI.UIGiftPackage.Component.FirstCharge.UIFirstChargeItem"
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"

local boxDefPath = {string.format(LoadPath.UIFirstCharge,"UIfirstcharge_box_purple_close"),string.format(LoadPath.UIFirstCharge,"UIfirstcharge_box_orange_close"),string.format(LoadPath.UIFirstCharge,"UIfirstcharge_box_gold_close")}
local boxOpenPath = {string.format(LoadPath.UIFirstCharge,"UIfirstcharge_box_purple_open"),string.format(LoadPath.UIFirstCharge,"UIfirstcharge_box_orange_open"),string.format(LoadPath.UIFirstCharge,"UIfirstcharge_box_gold_open")}
local bgPath = {"purple","orange","gold"}
local DefColor = Color.New(0.6862745,0.6862745,0.6862745,1)
local GrayColor = Color.New(0.6,0.6,0.6,1)
function UIFirstCharge:OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

function UIFirstCharge:OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIFirstCharge:OnEnable()
    base.OnEnable(self)
end

function UIFirstCharge:OnDisable()
    base.OnDisable(self)
    if self.moveTime ~= nil then
        self.moveTime:Stop()
        self.moveTime = nil
    end
end

function UIFirstCharge:ComponentDefine()
    
    self._bg_img = self:AddComponent(UIImage,"Rect_Package/Img_Bg")
    
    self.content = {}
    for i = 1, 3 do
        self.content[i] = {}
        self.content[i] = self:AddComponent(UIFirstChargeItem,"Rect_Package/ImageTop/Rect_Bottom/Rect_Gift/Rect_GiftContent"..i,i)
    end
    
    self.giftBoxList = {}
    for i = 1, 3 do
        self.giftBoxList[i] = {}
        self.giftBoxList[i].btn = self:AddComponent(UIButton,"Rect_Package/ImageTop/Rect_Top/Rect_Gift"..i)
        self.giftBoxList[i].btn:SetOnClick(function()
            self:OnClickBox(i)
        end)
        self.giftBoxList[i].anim = self:AddComponent(UIAnimator,"Rect_Package/ImageTop/Rect_Top/Rect_Gift"..i)
        self.giftBoxList[i].icon = self:AddComponent(UIImage,"Rect_Package/ImageTop/Rect_Top/Rect_Gift"..i.."/Img_Gift"..i)
        self.giftBoxList[i].name = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/ImageTop/Rect_Top/Rect_Gift"..i.."/Txt_GiftName"..i)
        self.giftBoxList[i].select = self:AddComponent(UIBaseContainer,"Rect_Package/ImageTop/Rect_Top/Rect_Gift"..i.."/Rect_Select"..i)
        self.giftBoxList[i].percent = self:AddComponent(UIImage,"Rect_Package/ImageTop/Rect_Top/Rect_Gift"..i.."/Rect_Percent"..i)
        self.giftBoxList[i].percentTxt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/ImageTop/Rect_Top/Rect_Gift"..i.."/Rect_Percent"..i.."/Txt_Percent"..i)
        --self.giftBoxList[i].vfx = self:AddComponent(UIBaseContainer,"Rect_Package/ImageTop/Rect_Top/Rect_Gift"..i.."/VFX_Effect"..i)
    end
    
    self._firstGold_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/ImageTop/Rect_Bottom/Txt_FirstGold")
    self._firstGold1_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/ImageTop/Rect_Bottom/Txt_FirstGold/Txt_FirstGold1")
    
    self._buy_btn		= self:AddComponent(UIButton,"Rect_Package/ImageTop/Rect_Bottom/Btn_Buy")
    self._buy_btn:SetOnClick(function()
        self:OnClickBuyBtn()
    end)

    self._receive_btn		= self:AddComponent(UIButton,"Rect_Package/ImageTop/Rect_Bottom/Btn_Receive")
    self._receive_btn:SetOnClick(function()
        self:OnClickReceiveBtn()
    end)
    self._receiveRed_rect = self:AddComponent(UIBaseContainer,"Rect_Package/ImageTop/Rect_Bottom/Btn_Receive/Rect_ReceiveRed")
    
    self._price_txt		= self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/ImageTop/Rect_Bottom/Btn_Buy/Txt_Price")
    self._point_rect	= self:AddComponent(UIGiftPackagePoint,"Rect_Package/ImageTop/Rect_Bottom/Btn_Buy/UIGiftPackagePoint")
    self._receive_txt		= self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/ImageTop/Rect_Bottom/Btn_Receive/Txt_Receive")
    
    self._buyTips_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/ImageTop/Rect_Bottom/Txt_BuyTips")

    self._heroTips1_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/bg_HeroTips1/Txt_HeroTips1")
    self._heroTips2_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/bg_HeroTips2/Txt_HeroTips2")

    --self._vfx_bg = self:AddComponent(UIBaseContainer,"Rect_Package/VFX_Bg")
end


function UIFirstCharge:ComponentDestroy()
   
end

function UIFirstCharge:DataDefine()
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
end

function UIFirstCharge:DataDestroy()
    if self.delayTimer then
        self.delayTimer:Stop()
    end
    self.delayTimer = nil
    self:DeleteTimer()
    self.chooseCur = 0
end

function UIFirstCharge:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.RefreshFirstChargeUI, self.RefreshView)
    self:AddUIListener(EventId.UpdateFirstChargeUI, self.BuyCallBack)
end

function UIFirstCharge:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.RefreshFirstChargeUI, self.RefreshView)
    self:RemoveUIListener(EventId.UpdateFirstChargeUI, self.BuyCallBack)
end

function UIFirstCharge:ReInit(rechargeId)
    self.chooseCur = 0  --默认档位没有选择
    self.selectChoose = 1 --默认选择当前显示的档位
    self.giftInfo = nil
    self._receiveRed_rect:SetActive(false)
    --self._vfx_bg:SetActive(false)
    --每个档位第一天的礼包直接读取
    local firstDayGift = LuaEntry.DataConfig:TryGetStr("first_pay_choosen", "k1")
    if firstDayGift then
        self.giftList = string.split(firstDayGift,";")
        self.maxGiftInfo =  GiftPackageData.get(self.giftList[#self.giftList])
        for i = 1, 3 do
            local packageInfo =  GiftPackageData.get(self.giftList[i])
            self.giftBoxList[i].name:SetText(packageInfo:getNameText())
            local percent = packageInfo:getPercent()
            if percent ~= nil then
                self.giftBoxList[i].percent:SetActive(true)
                self.giftBoxList[i].percentTxt:SetText(percent .. "%")
            else
                self.giftBoxList[i].percent:SetActive(false)
            end
            self.giftBoxList[i].icon:LoadSprite(boxDefPath[i])
            --self.giftBoxList[i].vfx:SetActive(false)
        end
    end
    self._bg_img:LoadSprite(string.format(LoadPath.UIFirstChargeEx,bgPath[1]))
    self._receive_txt:SetLocalText(170004)
    self._buyTips_txt:SetLocalText(321177)
    self._firstGold1_txt:SetLocalText(321176)
    self._heroTips1_txt:SetLocalText(320805)
    self._heroTips2_txt:SetLocalText(151006)
    self:HandleRechargeStr(rechargeId)

    self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
        self.giftBoxList[3].anim:Play("V_ui_Firstcharge_Rect_gift3_daiji", 0, 0)
    end, 0.6)
   
    
    DataCenter.ActFirstChargeData:SendChargeInfo()
end

function UIFirstCharge:HandleRechargeStr(rechargeId)
    self.giftDes = {}
    if rechargeId == nil then
        LocalController:instance():visitTable("recharge",function(id,lineData)
            if tonumber(lineData.type) == WelfareTagType.FirstCharge then
                rechargeId = tonumber(lineData.id)
            end
        end)
    end
    local rechargeStr = GetTableData("recharge",rechargeId, "para1")
    local str1 = string.split(rechargeStr,"#")
    for i = 1, #str1 do
        self.giftDes[i] = {}
        local str2 = string.split(str1[i],"|")
        for k = 1, #str2 do
            self.giftDes[i][k] = {}
            local str3 = string.split(str2[k],";")
            self.giftDes[i][k] = str3
        end
    end
end

---@param chooseArr table {chooseIndex,dayArr = {reward,day,state}} state:1已经领取 0 未领取   day:从2开启
---@param choose number 当前选择的档位  0 表示还没买
---@param startTime number 开启时间
function UIFirstCharge:RefreshView()
    self.giftInfo = DataCenter.ActFirstChargeData:GetChargeInfo()
    UIGray.SetGray(self._receive_btn.transform, false, true)
    --检查是否有选择过的档位
    if self.giftInfo.choose == 0 then
        self.chooseCur = 0
        self._buy_btn:SetActive(true)
        self._firstGold_txt:SetActive(true)
        self._receive_btn:SetActive(false)
    else
        self.chooseCur = self.giftInfo.choose
        self._buy_btn:SetActive(false)
        self._firstGold_txt:SetActive(false)

        self:DeleteTimer()
        --先检查是否领取完
        local isShow = DataCenter.ActFirstChargeData:CheckIsShow()
        if isShow then
            local state,endTime = DataCenter.ActFirstChargeData:CheckIsReceive()
            self._receive_btn:SetActive(true)
            self._receiveRed_rect:SetActive(state)
            if not state and endTime then
                UIGray.SetGray(self._receive_btn.transform, true, false)
                self:AddTimer()
                self:RefreshTime()
            end
        else
            self._receive_btn:SetActive(false)
        end
    end
    
    if self.chooseCur == 0 then
        self.selectChoose = 1
    else
        self.selectChoose = self.chooseCur
    end
    
    --积分
    self._point_rect:RefreshPoint(self.packageInfo)
    
    --处理显示的奖励
    self:ShowReward()
end

--礼包内容
function UIFirstCharge:ShowReward()
    local chooseArr = self.giftInfo.chooseArr

    self._bg_img:LoadSprite(string.format(LoadPath.UIFirstChargeEx,bgPath[self.selectChoose]))
    
    --第一天内容
    if self.giftList then
        self.content[1]:ReInitFirst(self.giftList[self.selectChoose],self.chooseCur and self.chooseCur ~= 0)
    end
    
    --获取当前档位要显示的信息
    local curGiftInfo = nil
    for i = 1, table.count(chooseArr) do
        if chooseArr[i].chooseIndex == self.selectChoose then
            curGiftInfo = chooseArr[i]
            break
        end
    end
    
    --第二三天内容
    if curGiftInfo then
        local dayArr = curGiftInfo.dayArr
        for i = 1, table.count(dayArr) do
            self.content[dayArr[i].day]:ReInit(dayArr[i])
        end
    end
    
    --描述
    for i = 1, 3 do
        self.content[i]:RefreshDes(self.giftDes[self.selectChoose][i])
    end

    self.packageInfo = GiftPackageData.get(self.giftList[self.selectChoose])
    self._price_txt:SetText(self.packageInfo:getPriceText())
    --第一天奖励钻石数量
    local diamondWorth = tonumber(self.packageInfo:getDiamond())
    if diamondWorth and diamondWorth > 0 then
        self._firstGold_txt:SetText(string.GetFormattedSeperatorNum(diamondWorth))
    end

    for i = 1, 3 do
        if self.chooseCur and self.chooseCur ~= 0 then
            if self.chooseCur == i then
                self.giftBoxList[i].icon:SetColor(WhiteColor)
                self.giftBoxList[i].percent:SetColor(WhiteColor)
                self.giftBoxList[i].percentTxt:SetColor(WhiteColor)
            else
                self.giftBoxList[i].icon:SetColor(GrayColor)
                self.giftBoxList[i].percent:SetColor(GrayColor)
                self.giftBoxList[i].percentTxt:SetColor(GrayColor)
            end
        end
        if self.selectChoose == i then
            self.giftBoxList[i].name:SetColor(WhiteColor)
            self.giftBoxList[i].icon:LoadSprite(boxOpenPath[i])
            self.giftBoxList[i].select:SetActive(true)
            --self.giftBoxList[i].vfx:SetActive(true)
        else
            self.giftBoxList[i].name:SetColor(DefColor)
            self.giftBoxList[i].icon:LoadSprite(boxDefPath[i])
            self.giftBoxList[i].select:SetActive(false)
            --self.giftBoxList[i].vfx:SetActive(false)
        end
    end
end

--首充后推送返回
function UIFirstCharge:BuyCallBack()
    self.giftInfo = DataCenter.ActFirstChargeData:GetChargeInfo()
    self.chooseCur = self.giftInfo.choose
    --第一天状态设为已领取
    if self.giftList then
        self.content[1]:ReInitFirst(self.giftList[self.selectChoose],self.chooseCur and self.chooseCur ~= 0)
    end
    if self.chooseCur ~= 0 then
        self._buy_btn:SetActive(false)
        self._firstGold_txt:SetActive(false)
        self:RefreshView()
    end
end

--切换礼包档位
function UIFirstCharge:OnClickBox(index)
    if not self.giftInfo or self.chooseCur ~= 0 then
        if self.chooseCur ~= 0 then
            UIUtil.ShowTipsId(321236)
        end
        return
    end
    
    if index ~= self.selectChoose then
        self.selectChoose = index
        --self._vfx_bg:SetActive(self.selectChoose == 3)
        self:ShowReward()
    end
end

--领取奖励
function UIFirstCharge:OnClickReceiveBtn()
    DataCenter.ActFirstChargeData:SendChargeDayReward()
end

function UIFirstCharge:OnClickBuyBtn()
    if self.packageInfo then
        if self.selectChoose ~= 3 then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFirstChargeTip,self.selectChoose)
        else
            DataCenter.PayManager:CallPayment(self.maxGiftInfo)
        end
        --self.view.ctrl:BuyGift(self.packageInfo)
    end
end

function UIFirstCharge:AddTimer(endTime)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action ,endTime , false,false,false)
    end
    self.timer:Start()
end

function UIFirstCharge:RefreshTime()
    local resTime = UITimeManager:GetInstance():GetResSecondsTo24()
    if resTime < 1 then
        self:DeleteTimer()
        DataCenter.ActFirstChargeData:SendChargeInfo()
    else
        self._receive_txt:SetLocalText(311161,UITimeManager:GetInstance():SecondToFmtString(resTime))
    end
end

function UIFirstCharge:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

return UIFirstCharge