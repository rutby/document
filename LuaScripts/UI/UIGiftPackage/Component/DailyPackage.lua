---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime:
---每日特惠

local DailyPackage = BaseClass("DailyPackage", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray
local UIDailyPackageGift = require "UI.UIGiftPackage.Component.UIDailyPackageGift"
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"
function DailyPackage:OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    self.TimerAction = function()
        self:RefreshRemainTime()
    end
end

function DailyPackage:OnDestroy()
    self:DelTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function DailyPackage:OnEnable()
    base.OnEnable(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    self.endTime = (UITimeManager:GetInstance():GetTodayZeroServerTime(curTime / 1000)+ 24*60*60)* 1000
    self:RefreshRemainTime()
    self:AddTimer()
end

function DailyPackage:OnDisable()
    self:DelTimer()
    base.OnDisable(self)
end

function DailyPackage:ComponentDefine()
    
    self._giftTitle_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/Rect_Top/Txt_GiftTitle")
    self._desc_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/Rect_Top/Txt_Desc")
    self.hero_img = self:AddComponent(UIImage,"Rect_Package/Image/heroImg")
    self.hero_name = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/Rect_Top/heroNameBg/txtHeroName")
    self._middle_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/Rect_Middle/Txt_Middle")
    self._middleDesc_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/Rect_Middle/Txt_MiddleDesc")
    self._buy_btn = self:AddComponent(UIButton,"Rect_Package/buy_btn")
    self._buy_btn:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self._cost_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/buy_btn/btnText")
    self._buy_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/buy_btn/buy_btn_text")
    self._point_rect = self:AddComponent(UIGiftPackagePoint,"Rect_Package/buy_btn/UIGiftPackagePoint")
    
    self._giftState_txt  = self:AddComponent(UITextMeshProUGUIEx,"Rect_Package/Rect_Middle/Txt_GiftState")
    self._giftState_txt:SetLocalText(320268)
    
    self.giftList = {}
    for i = 1 ,3 do
        self.giftList[i] = self:AddComponent(UIDailyPackageGift,"Rect_Package/Rect_Bottom/Rect_Gift/Rect_Gift"..i)
    end

    self.freePackageBtnN = self:AddComponent(UIButton, "Rect_Package/Rect_Top/freePackageBtn")
    self.freePackageBtnN:SetOnClick(function()
        self:OnClickClaimFreePackage()
    end)
    self.freePackageOpenN = self:AddComponent(UIImage, "Rect_Package/Rect_Top/freePackageBtn/opened")
    self.freePackageUnopenN = self:AddComponent(UIImage, "Rect_Package/Rect_Top/freePackageBtn/unopen")
    self.freeTxtN = self:AddComponent(UITextMeshProUGUIEx, "Rect_Package/Rect_Top/freePackageBtn/freeTxt")
    self.leftTimeN = self:AddComponent(UITextMeshProUGUIEx, "Rect_Package/Rect_Top/ActTime/remainTime")

    self._change_btn = self:AddComponent(UIButton,"Rect_Package/Rect_Top/changeBtn")
    self._change_btn:SetOnClick(function()
        self:OnClickChange()
    end)
    self.red_dot = self:AddComponent(UIBaseContainer,"Rect_Package/Rect_Top/changeBtn/redIcon")
    
end


function DailyPackage:ComponentDestroy()
    self._score_txt = nil
    self._time_txt = nil
    self._getMore_btn = nil
    self.title_txt = nil
    self.desc_txt_path = nil
    self.intro_btn = nil
end

function DailyPackage:DataDefine()

end

function DailyPackage:DataDestroy()

end

function DailyPackage:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.GetDailyPackageInfos, self.ReInit)
    self:AddUIListener(EventId.DailyPackageSelectHero, self.RefreshPackage)
    self:AddUIListener(EventId.RefreshWelfareRedDot, self.RefreshRedDot)
    
end

function DailyPackage:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.GetDailyPackageInfos, self.ReInit)
    self:RemoveUIListener(EventId.DailyPackageSelectHero, self.RefreshPackage)
    self:RemoveUIListener(EventId.RefreshWelfareRedDot, self.RefreshRedDot)
end

function DailyPackage:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction , self, false,false,false)
    end
    self.timer:Start()
end

function DailyPackage:RefreshRemainTime()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime > 0 then
        self.leftTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        DataCenter.DailyPackageManager:GetDailyPackagePreview()
        self:DelTimer()
    end
end

function DailyPackage:DelTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function DailyPackage:ReInit()
    self._giftTitle_txt:SetLocalText(320456)
    self._desc_txt:SetLocalText(320803)
    self._middleDesc_txt:SetLocalText(320804)
    
    --礼包ID配置在item里
    self:RefreshTop()           --免费礼包
    self:RefreshPackage()
end

function DailyPackage:RefreshPackage()
    self.canChange = false
    local curId = DataCenter.DailyPackageManager:GetCurSelectId()
    local list = DataCenter.DailyPackageManager:GetPackageList()
    local hasBuy = false
    local itemStr = GetTableData("custom_dailypackage", curId, "item")
    if itemStr~=nil and itemStr~="" then
        local arr = string.split(itemStr,"|")
        if #arr>0 then
            if self:RefreshMiddle(curId,arr) == true then
                hasBuy = true
            end       --打包礼包
            if self:RefreshBottom(curId,arr) == true then
                hasBuy = true
            end
                --单体礼包
        end
    end
    self.canChange = (hasBuy ==false)
    if #list>1 then
        self._change_btn:SetActive(true)
        if self.canChange then
            UIGray.SetGray(self._change_btn.transform, false, true)
            self:RefreshRedDot()
        else
            self.red_dot:SetActive(false)
            UIGray.SetGray(self._change_btn.transform, true, true)
        end
    else
        self._change_btn:SetActive(false)
    end
end

function DailyPackage:RefreshRedDot()
    self.red_dot:SetActive(DataCenter.DailyPackageManager:CheckShowRed())
end

function DailyPackage:RefreshMiddle(itemId,packageArr)
    local str = packageArr[#packageArr]
    local arr = string.split(str,";")
    local hasBuy = false
    self.packageInfo = GiftPackageData.get(tostring(arr[#arr]))
    if self.packageInfo  then
        local price = DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID())
        self._buy_txt:SetText(price)
        self._middle_txt:SetText(self.packageInfo:getPercent().."%")
        --检查打包礼包是否购买过
        if self.packageInfo:isBought() then
            hasBuy = true
            self._giftState_txt:SetActive(true)
            self._buy_btn:SetActive(false)
        else
            self._giftState_txt:SetActive(false)
            self._buy_btn:SetActive(true)
        end

        --积分
        self._point_rect:RefreshPoint(self.packageInfo)
    end
    local heroId = GetTableData("custom_dailypackage",itemId, "hero")
    if heroId~=nil then
        local picPath = HeroUtils.GetHeroBigPic(heroId)
        self.hero_img:LoadSprite(picPath)
        self.hero_name:SetText(HeroUtils.GetHeroNameByConfigId(heroId))
    end
    return hasBuy
end

function DailyPackage:RefreshBottom(itemId,packageArr)
    self.isGray = false        --检查单独礼包是否购买过
    local allPrice = 0
    for i = 1 ,3 do
        if i < #packageArr then
            local arr = string.split(packageArr[i], ";")
            local giftPackageId = arr[#arr]
            local info = GiftPackageData.get(tostring(giftPackageId))
            if info ~= nil then
                local price = DataCenter.PayManager:GetDollarText(info:getPrice(), info:getProductID())
                local pattern = self:PriceHandle(price)
                if pattern then
                    allPrice = allPrice + pattern 
                else
                    local errorStr = price
                    local now = UITimeManager:GetInstance():GetServerSeconds()
                    local errorMsgStr = "the price is Null:"..errorStr
                    CommonUtil.SendErrorMessageToServer(now, now, errorMsgStr)
                end
                
                self.giftList[i]:SetActive(true)
                if info:isBought() then
                    self.isGray = true
                end
                self.giftList[i]:ReInit(info, arr,self.packageInfo:isBought())
            else
                self.giftList[i]:SetActive(false)
            end
        else
            self.giftList[i]:SetActive(false)
        end
    end
    if self.isGray then
        UIGray.SetGray(self._buy_btn.transform, true, false)
    else
        UIGray.SetGray(self._buy_btn.transform, false, true)
    end
    self._cost_txt:SetText(tostring(allPrice))
    return self.isGray
end

--简单字符串处理数字
function DailyPackage:PriceHandle(price)
    local str1 = price:gsub("%D+"," ")
    local str2 = str1:gsub("%s",".")
    local str3 = string.split(str2,".")
    local price1 = 0
    for i = #str3 ,1,-1 do
        if str3[i] == "" or tonumber(str3[i]) == nil then
            table.remove(str3,i)
        end
    end
    if #str3 == 1 then
        price1 = tonumber(str3[1])
    elseif #str3 > 1 then
        price1 = tonumber(str3[1].."."..str3[2])
    end
    return price1
end
function DailyPackage:RefreshTop()
    if not GiftPackageData.CheckIfHasFreeWeeklyPackage() then
        self.freePackageOpenN:SetActive(true)
        self.freePackageUnopenN:SetActive(false)
        self.freeTxtN:SetLocalText(170003)
    else
        self.freePackageOpenN:SetActive(false)
        self.freePackageUnopenN:SetActive(true)
        self.freeTxtN:SetLocalText(320227)
    end
end

function DailyPackage:OnClickClaimFreePackage()
    local hasFree = GiftPackageData.CheckIfHasFreeWeeklyPackage()
    if hasFree then
        self.claimFreeTimer = TimerManager:GetInstance():DelayInvoke(function()
            SFSNetwork.SendMessage(MsgDefines.BuyFreeWeeklyPackage)
            self.claimFreeTimer = nil
        end, 0.5)
    else
        UIUtil.ShowTipsId(170003)
    end
end


function DailyPackage:OnClickBuyBtn()
    if self.isGray then
        return UIUtil.ShowTipsId(320478)
    end
    self.view.ctrl:BuyGift(self.packageInfo)
end

function DailyPackage:OnClickChange()
    if self.canChange then
        local curId = DataCenter.DailyPackageManager:GetCurSelectId()
        local list = DataCenter.DailyPackageManager:GetPackageList()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIDailyPackageChangePanel,{anim= true,isBlur = true},curId,list)
    else
        UIUtil.ShowTipsId(321418)
    end
    
end
return DailyPackage