---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/3/28 16:48
---

local HeroMonthCardItem = BaseClass("HeroMonthCardItem", UIBaseContainer)
local base = UIBaseContainer
local day_text_path = "day_text"
local item_bg_path = "itemBg"
local lock_icon_path = "lock_icon"
local reward_get_icon_path = "reward_get_icon"
local icon_path = "ItemIcon"
local icon_bg_path = "ItemIconBg"
local num_text_path = "NumText"
local reward_effect_path = "reward_effect"
local btn_path = "btn"
local cover_path = "cover"
local itemCover_path = "ItemCover"
local line_img_path = "LineImg"
local flag_path = "FlagGo"
local flag_num_path = "FlagGo/FlagText"
local eff_path = "Eff"
local UIHeroTipsView = require "UI.UIHeroTips.View.UIHeroTipsView"
local Localization = CS.GameEntry.Localization
local lockcolor = Color.New(190/255, 190/255, 190/255, 1.0)

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.day_text = self:AddComponent(UITextMeshProUGUIEx, day_text_path)
    self.itemBg = self:AddComponent(UIImage, item_bg_path)
    self.lock_icon = self:AddComponent(UIImage, lock_icon_path)
    self.reward_get_icon = self:AddComponent(UIImage, reward_get_icon_path)
    self.icon = self:AddComponent(UIImage, icon_path)
    self.icon_bg = self:AddComponent(UIImage, icon_bg_path)
    self.num_text = self:AddComponent(UITextMeshProUGUIEx, num_text_path)
    self.reward_effect = self:AddComponent(UIBaseContainer, reward_effect_path)
    self.cover = self:AddComponent(UIImage, cover_path)
    self.Itemcover = self:AddComponent(UIImage, itemCover_path)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.line_img = self:AddComponent(UIImage, line_img_path)
    self.btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnRewardClick()
    end)
    self.flag = self:AddComponent(UIBaseContainer, flag_path)
    self.flag_num = self:AddComponent(UITextMeshProUGUIEx, flag_num_path)
    self.eff = self:AddComponent(UIBaseContainer, eff_path)
end

--控件的销毁
local function ComponentDestroy(self)
    self.day_text = nil
    self.lock_icon = nil
    self.reward_get_icon = nil
    self.icon = nil
    self.reward = nil
    self.reward_effect = nil
    self.num_text = nil
    self.cover = nil
end

--变量的定义
local function DataDefine(self)
    self.day = 1
end

--变量的销毁
local function DataDestroy(self)
    self.day = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.RefreshHeroMonthCardSingle, self.DoWhenDayDataChange)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.RefreshHeroMonthCardSingle, self.DoWhenDayDataChange)
    base.OnRemoveListener(self)
end


local function SetItem(self, day, showLine)
    self.day = day
    self.showLine = showLine
    self:RefreshUI()
end

local function RefreshUI(self)
    --self.line_img:SetActive(self.showLine)
    local rewardData = DataCenter.HeroMonthCardManager:GetHeroMonthCardReward(self.day)
    self.showUnlockTip = false
    self.flag:SetActive(false)
    if rewardData ~= nil then
        self.day_text:SetLocalText(320360, self.day)
        --self.day_text:SetText(tostring(self.day))
        local rewardState = DataCenter.HeroMonthCardManager:GetRewardState(rewardData)
        self.lock_icon:SetActive(rewardState == HeroMonthCardRewardState.REWARD_STATE_LOCK)
        self.reward_get_icon:SetActive(rewardState == HeroMonthCardRewardState.REWARD_STATE_RECEIVED)
        --self.Itemcover:SetActive(rewardState == HeroMonthCardRewardState.REWARD_STATE_RECEIVED)
        self.reward_effect:SetActive(rewardState == HeroMonthCardRewardState.REWARD_STATE_CAN_RECEIVE)
        self.icon:SetColor(rewardState == HeroMonthCardRewardState.REWARD_STATE_RECEIVED and lockcolor or WhiteColor)
        self.itemBg:LoadSprite(rewardState == HeroMonthCardRewardState.REWARD_STATE_CAN_RECEIVE and string.format(LoadPath.UIHeroMonthCard,"monthly_img_frame02") or string.format(LoadPath.UIHeroMonthCard,"monthly_img_frame01"))
        self.eff:SetActive(rewardState == HeroMonthCardRewardState.REWARD_STATE_CAN_RECEIVE)
        if rewardData.reward ~= nil and table.count(rewardData.reward) > 0 then
            local reward = rewardData.reward[1]
            self.icon:LoadSprite(DataCenter.RewardManager:GetPicByType(reward.rewardType, reward.itemId))

            local itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.WHITE)
            if reward.rewardType == RewardType.GOODS then
                if reward.itemId ~= nil then
                    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(reward.itemId)
                    itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                    --local type2 = goods.type2
                    --if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                    --    local res_num = tonumber(goods.para)
                    --    self.flag_num:SetText(string.GetFormattedStr(res_num))
                    --    self.flag:SetActive(true)
                    --end

                end
            end
            self.icon_bg:LoadSprite(itemColor)
            local numStr = "x"..string.GetFormattedSeperatorNum(reward.count)
            self.num_text:SetText(numStr)
        end
        
        local coverShowFlag = false
        if rewardState == HeroMonthCardRewardState.REWARD_STATE_LOCK then
            local data = DataCenter.HeroMonthCardManager:GetHeroMonthCardInfo()
            if data ~= nil then
                local now = UITimeManager:GetInstance():GetServerTime()
                if now < OneDayTime * 1000 * (self.day - 1) + data.startTime then
                    coverShowFlag = true
                else
                    self.reward_effect:SetActive(true)
                    self.itemBg:LoadSprite(string.format(LoadPath.UIHeroMonthCard,"monthly_img_frame02"))
                    self.eff:SetActive(true)
                    self.showUnlockTip = true
                end
            end
        end
        if rewardState == HeroMonthCardRewardState.REWARD_STATE_UNRECEIVED then
            coverShowFlag = true
        end
        self.cover:SetActive(coverShowFlag)
        
    end
end

local function OnRewardClick(self)
    if self.showUnlockTip == true then
        UIUtil.ShowTipsId(320358)
    end
    local rewardData = DataCenter.HeroMonthCardManager:GetHeroMonthCardReward(self.day)
    if rewardData ~= nil then
        local rewardState = DataCenter.HeroMonthCardManager:GetRewardState(rewardData)
        if rewardState == HeroMonthCardRewardState.REWARD_STATE_CAN_RECEIVE then
            DataCenter.HeroMonthCardManager:GetReward(self.day)
        else
            --self.icon:OnBtnClick()
            if rewardData.reward ~= nil and table.count(rewardData.reward) > 0 then
                local reward = rewardData.reward[1]
                if reward.rewardType == RewardType.GOODS then
                    if reward.itemId ~= nil then
                        local param = {}
                        param["itemId"] = reward.itemId
                        param["alignObject"] = self.icon
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
                    elseif reward.iconName ~= nil then
                        local param = {}
                        param["itemName"] = reward.itemName
                        param["itemDesc"] = reward.itemDesc
                        param["alignObject"] = self.icon
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
                    end
                elseif reward.rewardType == RewardType.HERO then
                    local heroId = reward.itemId
                    local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), tonumber(heroId))
                    local param = UIHeroTipsView.Param.New()
                    param.heroId = heroId
                    param.title = Localization:GetString(heroConfig.name)
                    param.content = Localization:GetString(heroConfig.brief_desc)
                    param.dir = UIHeroTipsView.Direction.ABOVE
                    param.defWidth = 300
                    param.pivot = 0.5
                    local rt = self.rectTransform
                    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
                    param.position = self.transform.position + Vector3.New(rt.sizeDelta.x / 2 * scaleFactor, rt.sizeDelta.y * scaleFactor, 0)
                    param.bindObject = self.gameObject
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTips, { anim = false }, param)
                else
                    local desc = DataCenter.RewardManager:GetDescByType(reward.rewardType, reward.itemId)
                    local name = DataCenter.RewardManager:GetNameByType(reward.rewardType, reward.itemId)
                    local param = {}
                    param["itemName"] = name
                    param["itemDesc"] = desc
                    param["alignObject"] = self.icon
                    param.isLocal = true

                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
                end
            end
        end
    end
end

local function DoWhenDayDataChange(self, day)
    if day ~= self.day then
        return
    end
    self:RefreshUI()
end

HeroMonthCardItem.OnCreate = OnCreate
HeroMonthCardItem.OnDestroy = OnDestroy
HeroMonthCardItem.ComponentDefine = ComponentDefine
HeroMonthCardItem.ComponentDestroy = ComponentDestroy
HeroMonthCardItem.DataDefine = DataDefine
HeroMonthCardItem.DataDestroy = DataDestroy
HeroMonthCardItem.OnAddListener = OnAddListener
HeroMonthCardItem.OnRemoveListener = OnRemoveListener
HeroMonthCardItem.DoWhenDayDataChange = DoWhenDayDataChange
HeroMonthCardItem.SetItem = SetItem
HeroMonthCardItem.RefreshUI = RefreshUI
HeroMonthCardItem.OnRewardClick = OnRewardClick

return HeroMonthCardItem