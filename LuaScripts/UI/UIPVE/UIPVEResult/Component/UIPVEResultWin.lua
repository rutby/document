---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/1/2 16:39
---

local UIPVEResultWin = BaseClass("UIPVEResultWin", UIBaseContainer)
local base = UIBaseContainer
local UICommonItemChange = require "UI.UICommonItem.UICommonItemChange"
local Localization = CS.GameEntry.Localization

local title_path = "Ani/ImgWin/Title"
local reward_desc_path = "RewardDesc"
local scroll_view_path = "ScrollView"
local next_path = "layout/NextDesc/Next"
local next_check_path = "layout/NextDesc/Next/NextCheck"
local next_desc_path = "layout/NextDesc"

local ColCount = 4
local CellWidth = 127.5
local CellSpace = 32

local AutoDuration = 3500

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title_text:SetLocalText(390186)
    self.reward_desc_text = self:AddComponent(UITextMeshProUGUIEx, reward_desc_path)
    self.reward_desc_text:SetLocalText(104294)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
    self.next_btn = self:AddComponent(UIButton, next_path)
    self.next_btn:SetOnClick(function()
        self:OnNextClick()
    end)
    self.next_check_go = self:AddComponent(UIBaseContainer, next_check_path)
    self.next_desc_text = self:AddComponent(UITextMeshProUGUIEx, next_desc_path)
    self.next_desc_text:SetLocalText(321386)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.startTime = 0
    self.autoTime = 0
end

local function DataDestroy(self)
    
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function OnCreateCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local reward = self.rewardList[index]
    local item = self.scroll_view:AddComponent(UICommonItemChange, itemObj)
    item:ReInit(reward)
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UICommonItemChange)
end

local function ShowCells(self)
    local count = #self.rewardList
    if count > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:SetActive(false)
    end
end

local function Refresh(self)
    local entranceType = DataCenter.BattleLevel:GetEntranceType()
    if entranceType == PveEntrance.Story then
        self.reward_desc_text:SetActive(true)
        self.rewardList = DataCenter.RewardManager:ReturnRewardParamForMessage(DataCenter.StoryManager.reward) or {}
        
        local autoNeedLv = LuaEntry.DataConfig:TryGetNum("aps_pve_config", "k15")
        if DataCenter.BattleLevel.levelParam.storyLevel >= autoNeedLv then
            self.next_desc_text:SetActive(true)
            self.next_check_go:SetActive(DataCenter.StoryManager.autoNext)
            if DataCenter.StoryManager.autoNext then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                self.autoTime = curTime + AutoDuration
            end
        else
            self.next_desc_text:SetActive(false)
        end
    elseif entranceType == PveEntrance.LandBlock then
        self.next_desc_text:SetActive(false)
        self.reward_desc_text:SetActive(true)
        self.rewardList = DataCenter.RewardManager:ReturnRewardParamForMessage(DataCenter.LandManager.pveReward) or {}
    elseif entranceType == PveEntrance.DetectEventPve then
        self.next_desc_text:SetActive(false)
        self.reward_desc_text:SetActive(false)
        self.rewardList = self:GetDetectEventReward()
    else
        self.next_desc_text:SetActive(false)
        self.reward_desc_text:SetActive(false)
        self.rewardList = {}
    end

    local colCount = math.min(#self.rewardList, ColCount)
    local size = self.scroll_view.rectTransform.sizeDelta
    size.x = colCount * CellWidth + (colCount - 1) * CellSpace
    self.scroll_view.rectTransform.sizeDelta = size
    self:ShowCells()
end

local function TimerAction(self)
    local entranceType = DataCenter.BattleLevel:GetEntranceType()
    if entranceType == PveEntrance.Story then
        if self.autoTime > 0 then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            local restTime = self.autoTime - curTime
            if restTime > 0 then
                self.view.continue_text:SetText(Localization:GetString("321385") .. " (" .. math.floor(restTime / 1000) .. ")")
            else
                self.view:OnContinueClick()
                self.autoTime = 0
            end
        else
            self.view.continue_text:SetLocalText(321385)
        end
    end
end

local function GetDetectEventReward(self)
    local rewardList = {}
    local monsterId = GetTableData(TableName.Pve, DataCenter.BattleLevel.levelParam.levelId, "monster")
    local rewardStrs = DataCenter.MonsterTemplateManager:GetShowReward(monsterId)
    for _, str in ipairs(rewardStrs) do
        local spls = string.split(str,";")
        if #spls >= 3 then
            local id = tonumber(spls[1])
            local rewardType = tonumber(spls[2])
            local count = tonumber(spls[3])
            if rewardType ==  RewardType.GOODS then
                local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                if itemTemplate then
                    local reward = {}
                    reward.itemId = id
                    reward.iconName = string.format(LoadPath.ItemPath, itemTemplate.icon)
                    reward.count = count
                    reward.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(itemTemplate.color)
                    reward.rewardType = rewardType
                    reward.itemName = DataCenter.ItemTemplateManager:GetName(id)
                    reward.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                    reward.isLocal = true
                    local itemType = itemTemplate.type
                    if itemType == 2 then -- SPD
                        if itemTemplate.para1 ~= nil and itemTemplate.para1 ~= "" then
                            local para1 = itemTemplate.para1
                            local temp = string.split(para1,';')
                            if temp ~= nil and #temp > 1 then
                                reward.itemFlag = temp[1]..temp[2]
                            end
                        end
                    elseif itemType == 3 then -- USE
                        local type2 = itemTemplate.type2
                        if type2 ~= 999 and itemTemplate.para ~= nil then
                            local res_num = tonumber(itemTemplate.para)
                            reward.itemFlag = string.GetFormattedStr(res_num)
                        end
                    end
                    table.insert(rewardList, reward)
                end
            else
                local resourceType = RewardToResType[rewardType]
                if resourceType~=nil then
                    local reward = {}
                    reward.itemId = id
                    reward.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                    reward.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                    reward.rewardType = rewardType
                    reward.count = count
                    reward.itemName = ResourceTypeTxt[rewardType]
                    reward.isLocal = false
                    table.insert(rewardList, reward)
                end
            end
        end
    end
    return rewardList
end

local function OnNextClick(self)
    local autoNext = not DataCenter.StoryManager.autoNext
    DataCenter.StoryManager.autoNext = autoNext
    self.next_check_go:SetActive(autoNext)
    if autoNext then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        self.autoTime = curTime + AutoDuration
    else
        self.autoTime = 0
    end
end

UIPVEResultWin.OnCreate = OnCreate
UIPVEResultWin.OnDestroy = OnDestroy
UIPVEResultWin.OnEnable = OnEnable
UIPVEResultWin.OnDisable = OnDisable
UIPVEResultWin.ComponentDefine = ComponentDefine
UIPVEResultWin.ComponentDestroy = ComponentDestroy
UIPVEResultWin.DataDefine = DataDefine
UIPVEResultWin.DataDestroy = DataDestroy
UIPVEResultWin.OnAddListener = OnAddListener
UIPVEResultWin.OnRemoveListener = OnRemoveListener

UIPVEResultWin.OnCreateCell = OnCreateCell
UIPVEResultWin.OnDeleteCell = OnDeleteCell
UIPVEResultWin.ShowCells = ShowCells

UIPVEResultWin.Refresh = Refresh
UIPVEResultWin.TimerAction = TimerAction
UIPVEResultWin.GetDetectEventReward = GetDetectEventReward
UIPVEResultWin.OnNextClick = OnNextClick

return UIPVEResultWin