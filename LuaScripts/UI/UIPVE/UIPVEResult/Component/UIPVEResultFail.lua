---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/1/2 16:50
---

local UIPVEResultFail = BaseClass("UIPVEResultFail", UIBaseContainer)
local base = UIBaseContainer
local UICommonItemChange = require "UI.UICommonItem.UICommonItemChange"
local UIPVEPowerLackScrollView = require "UI.UIPVE.UIPVEPowerLack.Component.UIPVEPowerLackScrollView"

local title_path = "Ani/ImgFail/Title"
local desc_path = "Desc"
local scroll_view_path = "UIPVEPowerLackScrollView"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title_text:SetLocalText(390187)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    --self.desc_text:SetLocalText(110382)
    self.desc_text:SetText("")
    self.scroll_view = self:AddComponent(UIPVEPowerLackScrollView, scroll_view_path)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)

end

local function DataDestroy(self)

end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function OnCreateCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local reward = self.rewardList[index]
    local item = self.scroll_view:AddComponent(UICommonItemChange, itemObj)
    item:ReInit(reward)
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UICommonItemChange)
end

local function ShowCells(self)
    local count = #self.rewardList
    if count > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
        self.desc_text:SetActive(true)
    else
        self.desc_text:SetActive(false)
        self.scroll_view:SetActive(false)
    end
end

local function Refresh(self)
    local tips = {}
    for _, tip in ipairs(PvePowerLackShowTips[PvePowerLackType.Fail]) do
        local templates = DataCenter.ResLackManager:GetTemplatesByTip(math.abs(tip))
        for _, template in ipairs(templates) do
            if template:CheckMainLevel() then
                table.insert(tips, tip)
                break
            end
        end
    end
    self.scroll_view:SetData(PvePowerLackType.Fail, tips, false)

    local entranceType = DataCenter.BattleLevel:GetEntranceType()
    if entranceType == PveEntrance.Story then
        DataCenter.StoryManager.autoNext = false
    end
end

local function TimerAction(self)
    
end

local function ShowPowerLack(self, show)
    self.scroll_view:SetActive(show)
end

UIPVEResultFail.OnCreate = OnCreate
UIPVEResultFail.OnDestroy = OnDestroy
UIPVEResultFail.OnEnable = OnEnable
UIPVEResultFail.OnDisable = OnDisable
UIPVEResultFail.ComponentDefine = ComponentDefine
UIPVEResultFail.ComponentDestroy = ComponentDestroy
UIPVEResultFail.DataDefine = DataDefine
UIPVEResultFail.DataDestroy = DataDestroy
UIPVEResultFail.OnAddListener = OnAddListener
UIPVEResultFail.OnRemoveListener = OnRemoveListener

UIPVEResultFail.OnCreateCell = OnCreateCell
UIPVEResultFail.OnDeleteCell = OnDeleteCell
UIPVEResultFail.ShowCells = ShowCells

UIPVEResultFail.Refresh = Refresh
UIPVEResultFail.TimerAction = TimerAction
UIPVEResultFail.ShowPowerLack = ShowPowerLack

return UIPVEResultFail