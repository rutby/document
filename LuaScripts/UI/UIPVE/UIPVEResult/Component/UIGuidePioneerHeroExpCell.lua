---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/11/9 19:19
---

local UIGuidePioneerHeroExpCell = BaseClass("UIGuidePioneerHeroExpCell", UIBaseContainer)
local base = UIBaseContainer
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"

local hero_path = "objRoot/objHero/objHeroAvator/UIHeroCellSmall"
local exp_bg_path = "objRoot/objHero/objExpBar"
local exp_bar_path = "objRoot/objHero/objExpBar/imgExpBar"
local exp_text_path = "objRoot/objHero/objExpBar/txtExp"
local max_bg_path = "objRoot/objHero/objMaxExpBar"
local max_text_path = "objRoot/objHero/objMaxExpBar/txtMaxExp"
local yellow_effect_path = "objRoot/objHero/objHeroAvator/objEffectLevelUp" -- 升级后显示
local blue_effect_path = "objRoot/VFX_ui_hero_oldcell_glow_blue" -- 每升一级显示一次

local BAR_WIDTH = 100
local BAR_HEIGHT = 10
local TOTAL_DURATION = 2

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.hero = self:AddComponent(UIHeroCellSmall, hero_path)
    self.exp_bg_go = self:AddComponent(UIBaseContainer, exp_bg_path)
    self.exp_bar_go = self:AddComponent(UIBaseContainer, exp_bar_path)
    self.exp_text = self:AddComponent(UIText, exp_text_path)
    self.max_bg_go = self:AddComponent(UIBaseContainer, max_bg_path)
    self.max_text = self:AddComponent(UIText, max_text_path)
    self.yellow_effect_go = self:AddComponent(UIBaseContainer, yellow_effect_path)
    self.blue_effect_particle = self.transform:Find(blue_effect_path):GetComponent(typeof(CS.UnityEngine.ParticleSystem))
end

local function ComponentDestroy(self)
    self.hero = nil
    self.exp_bg_go = nil
    self.exp_bar_go = nil
    self.exp_text = nil
    self.max_bg_go = nil
    self.max_text = nil
    self.yellow_effect_go = nil
    self.blue_effect_particle = nil
end

local function DataDefine(self)
    self.heroExpInfo = nil
    self.heroData = nil
    self.seq = nil
end

local function DataDestroy(self)
    self.heroExpInfo = nil
    self.heroData = nil
    if self.seq ~= nil then
        self.seq:Kill()
        self.seq = nil
    end
end

local function InitData(self, heroExpInfo)
    self.heroExpInfo = heroExpInfo
    self:Refresh()
end

local function Refresh(self)
    if self.heroExpInfo == nil then
        return
    end
    
    local heroUuid = self.heroExpInfo["heroUuid"]
    self.heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    if self.heroData == nil then
        return
    end
    
    local backup = PveActorMgr:GetInstance():GetHeroDataBackup()
    local oldInfo
    if backup ~= nil then
        oldInfo = backup[heroUuid]
    end
    
    self.hero:SetData(heroUuid, function()
        if not DataCenter.BattleLevel:IsAutoPlay() then
            self:OnClick()
        end
    end)
    self.hero:SetStarActive(false)
    self.yellow_effect_go:SetActive(false)
    
    local oldLevel = self.heroExpInfo["oldLevel"] or oldInfo["oldLevel"] or 0
    local newLevel = self.heroExpInfo["level"]
    local oldExp = self.heroExpInfo["oldExp"] or oldInfo["oldExp"] or 0
    local newExp = self.heroExpInfo["nowExp"]
    local addExp = self.heroExpInfo["expAdd"]
    
    if oldLevel < self.heroData.curMaxLevel then
        -- add
        self.exp_bg_go:SetActive(true)
        self.max_bg_go:SetActive(false)
        self.exp_text:SetText("+" .. string.GetFormattedSeperatorNum(addExp))
        self:Play(oldLevel, newLevel, oldExp, newExp)
    else
        -- max
        self:ShowMaxed(oldLevel)
    end
end

local function Play(self, oldLevel, newLevel, oldExp, newExp)
    if self.seq ~= nil then
        self.seq:Kill()
    end
    self.seq = DOTween.Sequence()
    local duration = TOTAL_DURATION / (newLevel - oldLevel + 1)
    for level = oldLevel, newLevel do
        local maxExp = HeroUtils.GetLevelUpNeedExp(level)
        local from, to = 0, 1
        if level == oldLevel then
            from = Mathf.Clamp(oldExp / maxExp, 0, 1)
        end
        if level == newLevel then
            to = Mathf.Clamp(newExp / maxExp, 0, 1)
        end
        self.seq:AppendCallback(function()
            self.exp_bar_go.rectTransform.sizeDelta = Vector2.New(BAR_WIDTH * from, BAR_HEIGHT)
        end)
        self.seq:Append(self.exp_bar_go.rectTransform:DOSizeDelta(Vector2.New(BAR_WIDTH * to, BAR_HEIGHT), duration))
        self.seq:AppendCallback(function()
            if to == 1 then
                self.yellow_effect_go:SetActive(true)
                self.blue_effect_particle:Play()
                if newLevel >= self.heroData.curMaxLevel then
                    self:ShowMaxed(newLevel)
                else
                    self.exp_bar_go.rectTransform.sizeDelta = Vector2.New(0, BAR_HEIGHT)
                end
            end
        end)
    end
end

local function ShowMaxed(self, level)
    self.exp_bg_go:SetActive(false)
    self.max_bg_go:SetActive(true)
    if level < self.heroData.finalLevel then
        -- 可突破
        self.max_text:SetLocalText(400014)
    else
        -- 已满级
        self.max_text:SetLocalText(400013)
    end
end

local function OnClick(self)
    local heroUuid = self.heroExpInfo["heroUuid"]
    local newLevel = self.heroExpInfo["level"]
    if newLevel >= self.heroData.curMaxLevel and newLevel < self.heroData.finalLevel then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroBeyond, { anim = true, UIMainAnim = UIMainAnimType.AllHide }, heroUuid)
    end
end

local function OnHeroBeyond(self)
    self.heroData = DataCenter.HeroDataManager:GetHeroByUuid(self.heroData.uuid)
    self.hero:SetData(self.heroData.uuid)
    self.hero:SetStarActive(false)
    self.yellow_effect_go:SetActive(false)
    self.exp_bg_go:SetActive(true)
    self.max_bg_go:SetActive(false)
    local maxExp = HeroUtils.GetLevelUpNeedExp(self.heroData.level)
    local p = Mathf.Clamp(self.heroData.exp / maxExp, 0, 1)
    self.exp_bar_go.rectTransform.sizeDelta = Vector2.New(BAR_WIDTH * p, BAR_HEIGHT)
    self.exp_text:SetText("+" .. string.GetFormattedSeperatorNum(self.heroExpInfo["expAdd"]))
end

UIGuidePioneerHeroExpCell.OnCreate = OnCreate
UIGuidePioneerHeroExpCell.OnDestroy = OnDestroy
UIGuidePioneerHeroExpCell.ComponentDefine = ComponentDefine
UIGuidePioneerHeroExpCell.ComponentDestroy = ComponentDestroy
UIGuidePioneerHeroExpCell.DataDefine = DataDefine
UIGuidePioneerHeroExpCell.DataDestroy = DataDestroy

UIGuidePioneerHeroExpCell.InitData = InitData
UIGuidePioneerHeroExpCell.Refresh = Refresh
UIGuidePioneerHeroExpCell.Play = Play
UIGuidePioneerHeroExpCell.ShowMaxed = ShowMaxed
UIGuidePioneerHeroExpCell.OnClick = OnClick
UIGuidePioneerHeroExpCell.OnHeroBeyond = OnHeroBeyond

return UIGuidePioneerHeroExpCell