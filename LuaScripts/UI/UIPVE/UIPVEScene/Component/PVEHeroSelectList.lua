---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cola.
--- DateTime: 2022/3/25 下午3:58
---

local PVEHeroSelectList = BaseClass("PVEHeroSelectList", UIBaseContainer)
local base = UIBaseContainer
local PVEHeroSelectCell = require "UI.UIPVE.UIPVEScene.Component.PVEHeroSelectCell"

local scroll_view_path = "ScrollView"
local hero_num_path ="heroNum"
local hero_select_btn_path ="HeroStateButton"
local select_txt_path = "HeroStateButton/selectText"
local select_icon_path = "HeroStateButton/selectImg"
local select_bar_path = "HeroStateChoose"
local toggle_0_path = "HeroStateChoose/toggleGroup/ToggleAll"
local toggle_1_path = "HeroStateChoose/toggleGroup/Toggle1"
local toggle_2_path = "HeroStateChoose/toggleGroup/Toggle2"
local toggle_3_path = "HeroStateChoose/toggleGroup/Toggle3"
local toggle_4_path = "HeroStateChoose/toggleGroup/Toggle4"
local empty_path = "Empty"

local function OnCreate(self)
    base.OnCreate(self)
    
    self.select_txt = self:AddComponent(UITextMeshProUGUIEx,select_txt_path)
    self.select_icon = self:AddComponent(UIImage,select_icon_path)
    self.hero_num = self:AddComponent(UITextMeshProUGUIEx,hero_num_path)
    self.hero_select_btn = self:AddComponent(UIButton,hero_select_btn_path)
    self.hero_select_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnShowSelectBar()
    end)
    
    self.select_bar = self:AddComponent(UIBaseContainer,select_bar_path)
    self.select_bar:SetActive(false)
    self.showSelect =false
    self.toggleList = {}
    local toggle0 = self:AddComponent(UIToggle,toggle_0_path)
    toggle0:SetIsOn(true)
    self.toggleList[0] = toggle0
    local toggle1 = self:AddComponent(UIToggle,toggle_1_path)
    self.toggleList[1] = toggle1
    local toggle2 = self:AddComponent(UIToggle,toggle_2_path)
    self.toggleList[2] = toggle2
    local toggle3 = self:AddComponent(UIToggle,toggle_3_path)
    self.toggleList[3] = toggle3
    local toggle4 = self:AddComponent(UIToggle,toggle_4_path)
    self.toggleList[4] = toggle4
    table.walk(self.toggleList,function(k,v)
        v:SetOnValueChanged(function(tf)
            if tf then
                self:ToggleControlBorS()
            end
        end)
    end)

    self.ScrollView = self:AddComponent(UIScrollView,scroll_view_path)
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.list ={}
    self.heroCampIndex = 0
    self.heroItemList = {}
    self.empty_text = self:AddComponent(UITextMeshProUGUIEx, empty_path)
    self.empty_text:SetLocalText(400113)
end

local function OnDestroy(self)
    self.ScrollView = nil
    table.walk(self.toggleList,function(k,v)
        v = nil
    end)
    self.select_txt = nil
    self.select_icon = nil
    self.hero_num = nil
    self.select_bar = nil
    self.toggleList = nil
    self.empty_text = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:RefreshData()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ToggleControlBorS(self)
    table.walk(self.toggleList,function(k,v)
        if v:GetIsOn() == true then
            self.heroCampIndex = k
        end
    end)
    self:RefreshData()
    self:OnShowSelectBar()
end

local function RefreshData(self)
    if self.heroCampIndex ==0 then
        self.select_txt:SetActive(true)
        self.select_txt:SetText("ALL")
        self.select_icon:SetActive(false)
    else
        self.select_txt:SetActive(false)
        self.select_icon:SetActive(true)
        self.select_icon:LoadSprite(HeroUtils.GetCampIconPath(self.heroCampIndex-1))
    end
    self:ClearScroll(self)
    self.list = self.view.ctrl:GetCurrentHeroDataList(self.heroCampIndex-1)
    --for i = 1, #self.list do
    --    print(string.format("beef heroUuid[%s]: %s", i, self.list[i]))
    --end
    self.hero_num:SetText("0")
    if self.list~=nil and #self.list > 0 then
        self.hero_num:SetText(table.count(self.list))
        self.ScrollView:SetActive(true)
        self.ScrollView:SetTotalCount(#self.list)
        self.ScrollView:RefillCells()
        self.empty_text:SetActive(false)
    else
        self.ScrollView:SetActive(false)
        self.empty_text:SetActive(true)
    end
end

local function OnItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(PVEHeroSelectCell, itemObj)
    cellItem:SetItemShow(self.list[index])
    self.heroItemList[self.list[index]] = cellItem
end

local function OnItemMoveOut(self, itemObj, index)
    local uuid = self.list[index]
    if uuid~=nil then
        self.heroItemList[uuid] =nil
    end
    self.ScrollView:RemoveComponent(itemObj.name, PVEHeroSelectCell)

end

local function ClearScroll(self)
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(PVEHeroSelectCell)
    self.heroItemList = {}
end

local function OnShowSelectBar(self)
    self.showSelect = not self.showSelect
    self.select_bar:SetActive(self.showSelect)
end

local function GetAddHeroObj(self,heroUuid)
    if self.heroItemList~=nil and self.heroItemList[heroUuid]~=nil then
        return self.heroItemList[heroUuid]:GetAddObj()
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end


local function GetHeroObjByHeroId(self,heroId)
    local heroUuid = DataCenter.HeroDataManager:GetHeroUuidByHeroId(heroId)
    if heroUuid ~= 0 then
        for i =1 ,#self.list do
            local uuid = self.list[i]
            if uuid == heroUuid then
                self.ScrollView:StopMovement()
                self.ScrollView:ScrollToCell(i,10000)
                local obj = self:GetAddHeroObj(heroUuid)
                if obj~=nil then
                    return obj
                end
            end
        end
    end
end

local function ScrollToHero(self, heroUuid, showArrow)
    for i, uuid in ipairs(self.list) do
        if uuid == heroUuid then
            self.ScrollView:StopMovement()
            self.ScrollView:ScrollToCell(i, 2000)
            if showArrow then
                TimerManager:GetInstance():DelayInvoke(function()
                    local item = self.heroItemList[uuid]
                    if item then
                        local param = {}
                        param.positionType = PositionType.Screen
                        param.position = item.transform.position
                        DataCenter.ArrowManager:ShowArrow(param)
                    end
                end, 0.8)
            end
            break
        end
    end
end

local function ResetHeroList(self)
    self.select_bar:SetActive(false)
    if self.toggleList[0]:GetIsOn() then
        self:RefreshData()
    else
        self.toggleList[0]:SetIsOn(true)
    end
end

local function OnPveHeroCancel(self,heroUuid)
    if self.heroItemList~=nil and self.heroItemList[heroUuid]~=nil then
        self.heroItemList[heroUuid]:OnSelectClick()
    else
        local data = self.view.ctrl:GetHeroDataByUuid(heroUuid)
        if data ~= nil and data.index ~= nil then
            local index = data.index
            self.view.ctrl:OnDeleteHeroByIndex(index)
            self.view:OnSelectHeroFinish(data, false)
        end
    end
end

PVEHeroSelectList.OnCreate = OnCreate
PVEHeroSelectList.OnDestroy = OnDestroy
PVEHeroSelectList.RefreshData = RefreshData
PVEHeroSelectList.OnEnable = OnEnable
PVEHeroSelectList.OnDisable = OnDisable
PVEHeroSelectList.OnItemMoveIn = OnItemMoveIn
PVEHeroSelectList.OnItemMoveOut = OnItemMoveOut
PVEHeroSelectList.ClearScroll = ClearScroll
PVEHeroSelectList.ToggleControlBorS = ToggleControlBorS
PVEHeroSelectList.OnShowSelectBar= OnShowSelectBar
PVEHeroSelectList.GetAddHeroObj =GetAddHeroObj
PVEHeroSelectList.OnAddListener = OnAddListener
PVEHeroSelectList.OnRemoveListener = OnRemoveListener
PVEHeroSelectList.GetRarityMinHero =GetRarityMinHero
PVEHeroSelectList.GetHeroObjByHeroId = GetHeroObjByHeroId
PVEHeroSelectList.ScrollToHero = ScrollToHero
PVEHeroSelectList.ResetHeroList = ResetHeroList
PVEHeroSelectList.OnPveHeroCancel = OnPveHeroCancel

return PVEHeroSelectList