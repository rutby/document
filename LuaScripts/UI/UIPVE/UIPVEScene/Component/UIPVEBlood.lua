---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/7/12 17:05
---

local UIPVEBlood = BaseClass("UIPVEBlood", UIBaseContainer)
local base = UIBaseContainer
local UIPVEBloodItem = require "UI.UIPVE.UIPVEScene.Component.UIPVEBloodItem"
local Resource = CS.GameEntry.Resource

local ITEM_TOTAL_COUNT = 30
local FRAME_DURATION = 0.02

local function OnCreate(self)
    base.OnCreate(self)
    self.targetVal = 0
    self.maxVal = 0
    self.maxKey = 0
    self.curIndex = 0
    self.targetIndex = 0
    self.reqs = {}
    self.items = {}
    self.tween = nil
    self.active = true
    self.durationPerItem = 0
    self.valPerItem = LuaEntry.DataConfig:TryGetNum("aps_pve_config", "k6") or 10
end

local function OnDestroy(self)
    self.targetVal = nil
    self.maxVal = nil
    self.maxKey = nil
    self.curIndex = nil
    self.targetIndex = nil
    self.reqs = nil
    self.items = nil
    if self.tween then
        self.tween:Kill()
    end
    self.tween = nil
    self.active = nil
    self.durationPerItem = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
end

local function OnDisable(self)
    self:ClearItems()
    self.active = false
    base.OnDisable(self)
end

local function SetMaxVal(self, maxVal)
    self.maxVal = math.floor(maxVal)
    self.maxKey = (self.maxVal - 1) // self.valPerItem
    return self:SetTargetVal(self.maxVal)
end

local function SetMaxValImmediately(self, maxVal, empty, callback)
    self.maxVal = math.floor(maxVal)
    self.maxKey = (self.maxVal - 1) // self.valPerItem
    if empty then
        self.targetVal = 0
        self.targetIndex = 0
        self.curIndex = 0
    else
        self.targetVal = math.floor(maxVal)
        self.targetIndex = math.max((self.targetVal - 1) // self.valPerItem, 0)
        self.curIndex = self.targetIndex
    end
    
    local cur, total = 0, 0
    local function CheckFinish()
        if cur >= total and callback then
            callback()
        end
    end
    
    local indexStart = self.targetIndex // ITEM_TOTAL_COUNT * ITEM_TOTAL_COUNT
    for i = 0, ITEM_TOTAL_COUNT - 1 do
        local index = indexStart + i
        local k = empty and 0 or index // ITEM_TOTAL_COUNT -- 背景色 k, 前景色 k+1
        local key = index % ITEM_TOTAL_COUNT
        local item = self:GetItem(index)
        local percent
        
        if index > self.targetIndex then
            percent = 0
        elseif index < self.targetIndex then
            percent = 1
        else
            percent = (self.targetVal - self.curIndex * self.valPerItem) / self.valPerItem
        end
        
        if item then
            if key <= self.maxKey then
                item:SetActive(true)
                item:SetColor(k, percent)
            else
                item:SetActive(false)
            end
        else
            total = total + 1
            self:CreateItem(index, function()
                item = self:GetItem(index)
                if key <= self.maxKey then
                    item:SetActive(true)
                    item:SetColor(k, percent)
                else
                    item:SetActive(false)
                end
                cur = cur + 1
                CheckFinish()
            end)
        end
    end
    CheckFinish()
end

local function SetTargetVal(self, targetVal)
    self.targetVal = math.floor(targetVal)
    self.targetIndex = math.max((self.targetVal - 1) // self.valPerItem, 0)
    local indexDelta = math.abs(self.targetIndex - self.curIndex)
    self.durationPerItem = self:GetTweenDuration(indexDelta)
    self:Tween()
    return self.durationPerItem * (indexDelta + 1)
end

local function Tween(self)
    if not self.active then
        return
    end
    if self.tween then
        self.tween:Kill()
    end
    
    if self.curIndex > self.targetIndex then
        local duration = math.max(FRAME_DURATION, self.durationPerItem)
        while duration > self.durationPerItem and self.curIndex > self.targetIndex + 1 do
            duration = duration - self.durationPerItem
            self:SetItemColor(self.curIndex, 0)
            self.curIndex = self.curIndex - 1
        end
        self:SetItemColor(self.curIndex, 0, duration, function()
            self.curIndex = self.curIndex - 1
            self:Tween()
        end)
    elseif self.curIndex < self.targetIndex then
        local duration = math.max(FRAME_DURATION, self.durationPerItem)
        while duration > self.durationPerItem and self.curIndex < self.targetIndex - 1 do
            duration = duration - self.durationPerItem
            self:SetItemColor(self.curIndex, 1)
            self.curIndex = self.curIndex + 1
        end
        self:SetItemColor(self.curIndex, 1, duration, function()
            self.curIndex = self.curIndex + 1
            self:Tween()
        end)
    else
        local percent = (self.targetVal - self.curIndex * self.valPerItem) / self.valPerItem
        self:SetItemColor(self.curIndex, percent, self.durationPerItem)
    end
end

local function SetItemColor(self, index, percent, duration, callback)
    if not self.active then
        return
    end
    
    duration = duration or 0
    local key = index % ITEM_TOTAL_COUNT
    local item = self:GetItem(index)
    if item then
        item:SetActive(true)
        local k = index // ITEM_TOTAL_COUNT -- 背景色 k, 前景色 k+1
        self.tween = item:TweenColor(k, percent, duration):OnComplete(function()
            if k == 0 and percent == 0 and key > self.maxKey then
                item:SetActive(false)
            end
            if self.active and callback then
                callback()
            end
        end)
    else
        self:CreateItem(index, function()
            self:SetItemColor(index, percent, duration, callback)
        end)
    end
end

local function CreateItem(self, index, callback)
    local key = index % ITEM_TOTAL_COUNT
    local req = self.reqs[key]
    if req then
        req:Destroy()
    end

    req = Resource:InstantiateAsync(UIAssets.UIPVEBloodItem)
    req:completed('+', function()
        if req.isError or not self.active then
            req:Destroy()
            return
        end
        
        local go = req.gameObject
        go.name = tostring(key)
        go:SetActive(true)
        local tf = go.transform
        tf:SetParent(self.transform)
        tf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
        local item = self:AddComponent(UIPVEBloodItem, go.name)
        self.items[key] = item
        if self.active and callback then
            callback()
        end
    end)
    self.reqs[key] = req
end

local function GetItem(self, index)
    local key = index % ITEM_TOTAL_COUNT
    return self.items[key]
end

local function ClearItems(self)
    self:RemoveComponents(UIPVEBloodItem)
    for _, req in pairs(self.reqs) do
        req:Destroy()
    end
    self.items = {}
    self.reqs = {}
end

local function GetTweenDuration(self, indexDelta)
    if indexDelta > 0 then
        local cfgStr = LuaEntry.DataConfig:TryGetStr("aps_pve_config", "k7")
        for _, str in ipairs(string.split(cfgStr, "|")) do
            local spls = string.split(str, ";")
            if #spls == 3 then
                local min = tonumber(spls[1])
                local max = tonumber(spls[2])
                local spd = tonumber(spls[3])
                if min <= indexDelta and indexDelta < max then
                    return 1 / spd
                end
            end
        end
    end
    return 0.02
end

UIPVEBlood.OnCreate= OnCreate
UIPVEBlood.OnDestroy = OnDestroy
UIPVEBlood.OnEnable = OnEnable
UIPVEBlood.OnDisable = OnDisable

UIPVEBlood.SetMaxVal = SetMaxVal
UIPVEBlood.SetMaxValImmediately = SetMaxValImmediately
UIPVEBlood.SetTargetVal = SetTargetVal
UIPVEBlood.Tween = Tween
UIPVEBlood.SetItemColor = SetItemColor
UIPVEBlood.CreateItem = CreateItem
UIPVEBlood.GetItem = GetItem
UIPVEBlood.ClearItems = ClearItems
UIPVEBlood.GetTweenDuration = GetTweenDuration

return UIPVEBlood