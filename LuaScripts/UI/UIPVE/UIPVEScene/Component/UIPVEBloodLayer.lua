---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 24224.
--- DateTime: 2022/5/18 16:28
---
local UIPVEBloodLayer = BaseClass("UIPVEBloodLayer", UIBaseContainer)
local base = UIBaseContainer
local UIPVEBloodLayerItem = require "UI.UIPVE.UIPVEScene.Component.UIPVEBloodLayerItem"

local content = ""

local function OnCreate(self)
    base.OnCreate(self)
    self.content =self:AddComponent(UIBaseContainer,content)
    self.per = LuaEntry.DataConfig:TryGetNum("aps_pve_config", "k6")
    self.speedList = {}
    self.animDataArr = {}
    local configStr = LuaEntry.DataConfig:TryGetStr("aps_pve_config", "k7")
    local configArr = string.split(configStr,"|")
    if #configArr>0 then
        for i= 1,#configArr do
            local str = configArr[i]
            local arr = string.split(str,";")
            local oneData = {}
            oneData.left = tonumber(arr[1])
            oneData.right = tonumber(arr[2])
            oneData.speed = tonumber(arr[3])
            table.insert(self.speedList,oneData)
        end
    end
    self.refreshConfig = LuaEntry.DataConfig:TryGetStr("aps_pve_config", "k7")
    self.maxItemNum = 30
    self.model = {}
    self.list = {}
    self.doUpdate = false
    self.needRefreshDataList = {}
    self.refreshSpeed = Time.deltaTime
    self.startTimeStamp = 0
    self.doInit = false
end

local function OnDestroy(self)
    self:ClearContent()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end



local function Update(self)
    if self.doUpdate == true then
        if self.startTimeStamp >= self.refreshSpeed then
            self.startTimeStamp = self.startTimeStamp-self.refreshSpeed
            if #self.needRefreshDataList>0 then
                local animData = table.remove(self.needRefreshDataList,1)
                if animData.restLimit == -1 then
                    self:DeleteOneCell(animData.index)
                else
                    self:RefreshOneCell(animData.index,self.refreshSpeed)
                end
                self.startTimeStamp = self.startTimeStamp+Time.deltaTime
            else
                self.doUpdate = false
                self.startTimeStamp = 0
                self:RefreshList()
            end
        else
            self.startTimeStamp = self.startTimeStamp+Time.deltaTime
        end
        
    end
end
local function OnDisable(self)
    base.OnDisable(self)
end
local function ClearContent(self)
    self.content:RemoveComponents(UIPVEBloodLayerItem)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.model ={}
end

local function InitSoldierNum(self,curSolider,maxSolider)
    if self.isCreate==nil or self.isCreate == false then
        self:ClearContent()
    end
    self.isCreate = true
    local animData = {}
    animData.curSolider = curSolider
    animData.maxSolider = maxSolider
    animData.dataList = self:GetAnimData(curSolider,maxSolider)
    table.insert(self.animDataArr,animData)
    if self.doInit == false then
        self:RefreshListImmediately()
    else
        self.doUpdate = true
    end
end

local function GetAnimData(self,curSolider,maxSolider)
    local createNum = math.ceil(maxSolider/self.per)
    if createNum>self.maxItemNum then
        createNum = self.maxItemNum
    end
    local curSoldierTimes = math.floor(curSolider/self.per)
    local curSoliderDelta = curSolider- (curSoldierTimes*self.per)
    local layers = math.ceil(math.max(curSoldierTimes,1)/self.maxItemNum)
    local dataList = {}
    for i=1,createNum do
        local oneData = {}
        local curRealNum = (i+(layers-1)* self.maxItemNum)*self.per
        if curRealNum<=curSolider then
            oneData.index = i
            oneData.layer = layers
            oneData.restNum = self.per
            oneData.restLimit = self.per
        elseif curSoliderDelta>0 and curRealNum+curSoliderDelta-self.per<= curSolider then
            oneData.index = i
            oneData.layer = layers
            oneData.restNum = curSoliderDelta
            oneData.restLimit = self.per
        else
            oneData.index = i
            oneData.layer = layers-1
            oneData.restNum = self.per
            oneData.restLimit = self.per
        end
        table.insert(dataList,oneData)
    end
    return dataList
end

local function RefreshListImmediately(self)
    local data = self.animDataArr[#self.animDataArr]
    self.curSolider = data.curSolider
    self.maxSolider = data.maxSolider
    self.dataList = data.dataList
    local createNum = #self.dataList
    if table.count(self.model) > createNum then
        for k,v in pairs(self.model) do
            if k>createNum then
                self:DeleteOneCell(k)
            end
        end
    end
    for i=1,createNum do
        self:RefreshOneCell(i)
    end
    self.animDataArr = {}
    self.doUpdate = true
    self.needRefreshDataList = {}
    self.refreshSpeed = Time.deltaTime
    self.startTimeStamp = Time.deltaTime
    self.doInit = true
end

local function RefreshList(self)
    self.refreshSpeed = Time.deltaTime
    local data = table.remove(self.animDataArr,1)
    if data == nil then
        return
    end
    local dataList = data.dataList
    self.needRefreshDataList = {}
    local maxNum = math.max(#self.dataList,#dataList)
    for i =1 ,maxNum do
        local curData = dataList[i]
        local oldData = self.dataList[i]
        if oldData==nil then
            if curData~=nil then
                local oneData = {}
                oneData.index = curData.index
                oneData.layer = curData.layer
                oneData.restNum = curData.restNum
                oneData.restLimit = curData.restLimit
                oneData.isCreate = 1
                table.insert(self.needRefreshDataList,oneData)
            end

        elseif curData == nil then
            if oldData~=nil then
                local oneData = {}
                oneData.index = oldData.index
                oneData.layer = oldData.layer
                oneData.restLimit = -1
                oneData.restNum = 0
                oneData.isCreate = 0
                table.insert(self.needRefreshDataList,oneData)
            end
        else
            if curData.layer ~=oldData.layer or curData.restNum ~=oldData.restNum then
                local oneData = {}
                oneData.index = curData.index
                oneData.layer = curData.layer
                oneData.restNum = curData.restNum
                oneData.restLimit = curData.restLimit
                oneData.isCreate = 0
                table.insert(self.needRefreshDataList,oneData)
            end
        end
    end
    if data.curSolider>self.curSolider or data.maxSolider>self.maxSolider then --正序
        table.sort(self.needRefreshDataList,function(a,b)
            if a.isCreate~=b.isCreate then
                return a.isCreate > b.isCreate
            elseif a.isCreate ==1 then
                return a.index < b.index
            else
                if a.layer~=b.layer then
                    return a.layer < b.layer
                end
                return a.index < b.index
            end
        end)
    else--倒序
        table.sort(self.needRefreshDataList,function(a,b)
            if a.layer~=b.layer then
                return a.layer > b.layer
            end
            return a.index > b.index
        end)
    end
    local count = #self.needRefreshDataList
    for k,v in pairs(self.speedList) do
        if v.left<=count and v.right>=count then
            local speed = v.speed
            if speed<0 then
                self.refreshSpeed = (1/speed)
            end
        end
    end
    if count>0 then
        self.curSolider = data.curSolider
        self.maxSolider = data.maxSolider
        self.dataList = data.dataList
        self.doUpdate = true
        self.startTimeStamp = self.refreshSpeed
    end
end

local function DeleteOneCell(self,index)
    local model = self.model[index]
    if model~=nil then
        if model.gameObject~=nil then
            local nameStr = model.gameObject.name
            self.content:RemoveComponent(nameStr,UIPVEBloodLayerItem)
        end
        self:GameObjectDestroy(model)
        self.model[index] =nil
    end
    self.list[index] = nil
    
    
end

local function RefreshOneCell(self,index,time)
    if self.model[index] ==nil then
        self.model[index] = self:GameObjectInstantiateAsync(UIAssets.UIPVEBloodLayerItem, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.content.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local nameStr = tostring(NameCount)
            go.name = nameStr
            NameCount = NameCount + 1
            self.list[index] = self.content:AddComponent(UIPVEBloodLayerItem,nameStr)
            self.list[index]:InitData(self.dataList,index,time)
        end)
    elseif self.list[index]~=nil then
        self.list[index]:InitData(self.dataList,index,time)
    end
end

local function SetPercent(self,soldierNum)
    if self.getFirstPercent==nil or self.getFirstPercent == false then
        if #self.animDataArr<=0 then
            local animData = {}
            animData.curSolider = self.curSolider
            animData.maxSolider = self.maxSolider
            animData.dataList = self.dataList
            table.insert(self.animDataArr,animData)
        end
        self:RefreshListImmediately()
        self.getFirstPercent = true
        return 
    end
    self.getFirstPercent = true
    local maxNum = self.maxSolider
    if #self.animDataArr>0 then
        local data = self.animDataArr[#self.animDataArr]
        maxNum = data.maxSolider
    end
    local animData = {}
    animData.curSolider = soldierNum
    animData.maxSolider = maxNum
    animData.dataList = self:GetAnimData(soldierNum,maxNum)
    table.insert(self.animDataArr,animData)
    if self.doInit == false then
        self:RefreshListImmediately()
    else
        self.doUpdate = true
    end
end


UIPVEBloodLayer.OnCreate = OnCreate
UIPVEBloodLayer.OnDestroy = OnDestroy
UIPVEBloodLayer.OnEnable = OnEnable
UIPVEBloodLayer.OnDisable = OnDisable
UIPVEBloodLayer.RefreshList =RefreshList
UIPVEBloodLayer.SetPercent = SetPercent
UIPVEBloodLayer.InitSoldierNum =InitSoldierNum
UIPVEBloodLayer.ClearContent =ClearContent
UIPVEBloodLayer.GetAnimData =GetAnimData
UIPVEBloodLayer.Update = Update
UIPVEBloodLayer.RefreshListImmediately =RefreshListImmediately
UIPVEBloodLayer.DeleteOneCell =DeleteOneCell
UIPVEBloodLayer.RefreshOneCell =RefreshOneCell
return UIPVEBloodLayer