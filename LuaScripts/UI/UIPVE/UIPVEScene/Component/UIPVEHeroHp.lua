---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/1/23 15:00
---

local UIPVEHeroHp = BaseClass("UIPVEHeroHp", UIBaseContainer)
local base = UIBaseContainer

local root_path = "Root"
local hp_back_path = "Root/HpBack"
local hp_front_path = "Root/HpFront"

local HpWidth = 96
local HpHeight = 11
local HpBackSpeed = 150
local SelfColor = Color32.New(92 / 255,221 / 255,21 / 255,1)
local EnemyColor = Color32.New(251 / 255,77 / 255,86 / 255,1)

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.root_go = self:AddComponent(UIBaseContainer, root_path)
    self.hp_back_image = self:AddComponent(UIImage, hp_back_path)
    self.hp_front_image = self:AddComponent(UIImage, hp_front_path)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.isSelf = nil
    self.cur = 0
    self.max = 0
    self.tween = nil
end

local function DataDestroy(self)
    if self.tween then
        self.tween:Kill()
        self.tween = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function SetSelf(self, isSelf)
    if self.isSelf == isSelf then
        return
    end
    self.isSelf = isSelf
    self:SetColor(isSelf and SelfColor or EnemyColor)
end

local function SetColor(self, color)
    self.hp_front_image:SetColor(color)
end

local function SetHp(self, cur, max)
    if self.cur == cur and self.max == max then
        return
    end

    if cur > 0 and max > 0 then
        if cur < max then
            local percent = 0
            if max ~= 0 then
                percent = Mathf.Clamp(cur / max, 0, 1)
            end
            local size = Vector2.New(HpWidth * percent, HpHeight)
            self.hp_front_image.rectTransform.sizeDelta = size

            if self.tween then
                self.tween:Kill()
            end
            if cur < self.cur then
                self.tween = self.hp_back_image.rectTransform:DOSizeDelta(size, HpBackSpeed):SetEase(CS.DG.Tweening.Ease.Linear):SetSpeedBased()
            else
                self.hp_back_image.rectTransform.sizeDelta = size
            end

            self:SetActive(true)
        else
            local size = Vector2.New(HpWidth, HpHeight)
            self.hp_front_image.rectTransform.sizeDelta = size
            self.hp_back_image.rectTransform.sizeDelta = size
            self:SetActive(false)
        end
    else
        self:SetActive(false)
    end

    self.cur = cur or self.cur
    self.max = max or self.max
end

UIPVEHeroHp.OnCreate= OnCreate
UIPVEHeroHp.OnDestroy = OnDestroy
UIPVEHeroHp.ComponentDefine = ComponentDefine
UIPVEHeroHp.ComponentDestroy = ComponentDestroy
UIPVEHeroHp.DataDefine = DataDefine
UIPVEHeroHp.DataDestroy = DataDestroy
UIPVEHeroHp.OnEnable = OnEnable
UIPVEHeroHp.OnDisable = OnDisable
UIPVEHeroHp.OnAddListener = OnAddListener
UIPVEHeroHp.OnRemoveListener = OnRemoveListener

UIPVEHeroHp.SetSelf = SetSelf
UIPVEHeroHp.SetColor = SetColor
UIPVEHeroHp.SetHp = SetHp

return UIPVEHeroHp