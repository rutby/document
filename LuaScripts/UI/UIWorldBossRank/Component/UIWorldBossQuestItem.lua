---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/10/30 16:52
---

local UIPirateQuestCell = BaseClass("UIPirateQuestCell", UIBaseContainer)
local base = UIBaseContainer
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local UIGray = CS.UIGray

local desc_path = "Desc"
local reward_list_path = "RewardList"
local btn_path = "Btn"
local btn_text_path = "Btn/BtnText"
local complete_path = "Complete"
local progress_path = "Progress"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.reward_list_go = self:AddComponent(UIBaseContainer, reward_list_path)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.btn:SetOnClick(function()
        self:OnClick()
    end)
    self.btn_text = self:AddComponent(UITextMeshProUGUIEx, btn_text_path)
    self.btn_text:SetLocalText(170004)
    self.complete_go = self:AddComponent(UIBaseContainer, complete_path)
    self.progress_text = self:AddComponent(UITextMeshProUGUIEx, progress_path)
end

local function ComponentDestroy(self)
end

local function DataDefine(self)
    self.onClick = nil
    self.req = {}
end

local function DataDestroy(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function SetTaskId(self, taskId)
    local taskInfo = DataCenter.TaskManager:FindTaskInfo(tostring(taskId))
    local template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), taskId)
    self.desc_text:SetText(DataCenter.QuestTemplateManager:GetDesc(template))
    if taskInfo.state == TaskState.NoComplete then
        self.btn:SetActive(true)
        self.complete_go:SetActive(false)
        UIGray.SetGray(self.btn.transform, true, false)
    elseif taskInfo.state == TaskState.CanReceive then
        self.btn:SetActive(true)
        self.complete_go:SetActive(false)
        UIGray.SetGray(self.btn.transform, false, true)
    elseif taskInfo.state == TaskState.Received then
        self.btn:SetActive(false)
        self.complete_go:SetActive(true)
    end

    self:DestroyAllReq()
    local rewardList = taskInfo.rewardList or {}
    local count = #rewardList
    if count > 0 then
        for k, v in ipairs(rewardList) do
            self.req[k] = self:GameObjectInstantiateAsync(UIAssets.UICommonItemSize, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject
                local go_tf = go.transform
                go.gameObject:SetActive(true)
                go_tf:SetParent(self.reward_list_go.transform)
                go_tf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go_tf:Set_localPosition(ResetPosition.x, ResetPosition.y, ResetPosition.z)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local item = self.reward_list_go:AddComponent(UICommonItem, nameStr)
                item:ReInit(v)
            end)
        end
    end

    if tonumber(template.progressshow) == 1 then
        self.progress_text:SetLocalText(GameDialogDefine.SPLIT, string.GetFormattedSeperatorNum(taskInfo.num), string.GetFormattedSeperatorNum(template.para2))
        self.progress_text:SetActive(true)
    else
        self.progress_text:SetActive(false)
    end
end

local function SetOnClick(self, onClick)
    self.onClick = onClick
end

local function OnClick(self)
    if self.onClick then
        self.onClick()
    end
end

local function DestroyAllReq(self)
    for k, v in ipairs(self.req) do
        v:Destroy()
    end
    self.req = {}
end

UIPirateQuestCell.OnCreate = OnCreate
UIPirateQuestCell.OnDestroy = OnDestroy
UIPirateQuestCell.ComponentDefine = ComponentDefine
UIPirateQuestCell.ComponentDestroy = ComponentDestroy
UIPirateQuestCell.DataDefine = DataDefine
UIPirateQuestCell.DataDestroy = DataDestroy
UIPirateQuestCell.OnAddListener = OnAddListener
UIPirateQuestCell.OnRemoveListener = OnRemoveListener
UIPirateQuestCell.OnEnable = OnEnable
UIPirateQuestCell.OnDisable = OnDisable

UIPirateQuestCell.SetTaskId = SetTaskId
UIPirateQuestCell.SetOnClick = SetOnClick
UIPirateQuestCell.OnClick = OnClick
UIPirateQuestCell.DestroyAllReq = DestroyAllReq

return UIPirateQuestCell