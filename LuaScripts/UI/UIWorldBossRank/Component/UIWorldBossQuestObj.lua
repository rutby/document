---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/10/30 17:30
---

local UIPirateQuest = BaseClass("UIPirateQuest", UIBaseContainer)
local base = UIBaseContainer
local UIPirateQuestCell = require "UI.UIWorldBossRank.Component.UIWorldBossQuestItem"
local Localization = CS.GameEntry.Localization

local desc_path = "Desc"
local scroll_view_path = "ScrollView"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ClearScroll()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.desc_text:SetText(Localization:GetString("302626") .. "\n" .. Localization:GetString("302627"))
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    self.taskIds = {}
    self.cells = {}
    self.isArchive = false
end

local function DataDestroy(self)

end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.QuestRewardSuccess, self.OnQuestRewardSuccess)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.QuestRewardSuccess, self.OnQuestRewardSuccess)
    base.OnRemoveListener(self)
end

local function OnCellMoveIn(self, itemObj, index)
    itemObj.name = tostring(index)
    local cell = self.scroll_view:AddComponent(UIPirateQuestCell, itemObj)
    cell:SetTaskId(self.taskIds[index])
    cell:SetOnClick(function()
        self:OnCellClick(index)
    end)
    self.cells[index] = cell
end

local function OnCellMoveOut(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIPirateQuestCell)
    self.cells[index] = nil
end

local function ShowScroll(self)
    self:ClearScroll()
    local count = #self.taskIds
    if count > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:SetActive(false)
    end
end

local function Refresh(self, isArchive)
    self.isArchive = isArchive
    self.desc_text:SetActive(not isArchive)
    self.taskIds = {}
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
    if not table.IsNullOrEmpty(dataList) then
        local data = dataList[1]
        local subData = DataCenter.ActivityListDataManager:GetActivityDataById(data.para5)
        if subData then
            if isArchive then
                for _, str in ipairs(string.split(subData.para5, ";")) do
                    local taskId = tonumber(str)
                    local template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), taskId)
                    if template then
                        local task = DataCenter.TaskManager:FindTaskInfo(tostring(taskId))
                        if task then
                            table.insert(self.taskIds, taskId)
                        end
                    end
                end
            else
                for _, taskId in ipairs(subData.taskList or {}) do
                    local template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), taskId)
                    if template then
                        local task = DataCenter.TaskManager:FindTaskInfo(tostring(taskId))
                        if task then
                            table.insert(self.taskIds, taskId)
                        end
                    end
                end
            end
        end
    end
    table.sort(self.taskIds, function(taskIdA, taskIdB)
        local taskA = DataCenter.TaskManager:FindTaskInfo(tostring(taskIdA))
        local taskB = DataCenter.TaskManager:FindTaskInfo(tostring(taskIdB))
        local orderA = TaskStateOrder[taskA.state] or 999
        local orderB = TaskStateOrder[taskB.state] or 999
        if orderA ~= orderB then
            return orderA < orderB
        end

        local templateA = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), taskIdA)
        local templateB = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), taskIdB)
        return templateA.order < templateB.order
    end)
    DataCenter.ActBossDataManager:SetActBossTaskList()
    self:ShowScroll()
end

local function OnCellClick(self, index)
    local taskId = self.taskIds[index]
    local taskInfo = DataCenter.TaskManager:FindTaskInfo(tostring(taskId))
    if taskInfo.state == TaskState.CanReceive then
        SFSNetwork.SendMessage(MsgDefines.TaskRewardGet, { id = tostring(taskId) })
    end
end

local function OnQuestRewardSuccess(self)
    self:Refresh(self.isArchive)
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UIPirateQuestCell)
end

UIPirateQuest.OnCreate = OnCreate
UIPirateQuest.OnDestroy = OnDestroy
UIPirateQuest.OnEnable = OnEnable
UIPirateQuest.OnDisable = OnDisable
UIPirateQuest.ComponentDefine = ComponentDefine
UIPirateQuest.ComponentDestroy = ComponentDestroy
UIPirateQuest.DataDefine = DataDefine
UIPirateQuest.DataDestroy = DataDestroy
UIPirateQuest.OnAddListener = OnAddListener
UIPirateQuest.OnRemoveListener = OnRemoveListener

UIPirateQuest.OnCellMoveIn = OnCellMoveIn
UIPirateQuest.OnCellMoveOut = OnCellMoveOut
UIPirateQuest.ShowScroll = ShowScroll

UIPirateQuest.Refresh = Refresh
UIPirateQuest.OnCellClick = OnCellClick
UIPirateQuest.OnQuestRewardSuccess = OnQuestRewardSuccess
UIPirateQuest.ClearScroll =ClearScroll
return UIPirateQuest