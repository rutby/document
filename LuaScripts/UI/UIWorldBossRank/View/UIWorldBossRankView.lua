---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/4/24 12:01
---
local UIWorldBossRankObj = require "UI.UIWorldBossRank.Component.UIWorldBossRankObj"
local UIWorldBossRewardObj = require "UI.UIWorldBossRank.Component.UIWorldBossRewardObj"
local UIWorldBossAtkTimeRewardObj = require "UI.UIWorldBossRank.Component.UIWorldBossAtkTimeRewardObj"
local UIWorldBossQuestObj = require "UI.UIWorldBossRank.Component.UIWorldBossQuestObj"
local UIWorldBossRankView = BaseClass("UIWorldBossRankView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local txt_title_path ="UICommonPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonPopUpTitle/panel"
local tab_path = "layout/Tab"
local toggle1_path = "layout/Tab/Toggle1"
local toggle2_path = "layout/Tab/Toggle2"
local toggle3_path = "layout/Tab/Toggle3"
local toggle3_red_path = "layout/Tab/Toggle3/Toggle3Red"
local boss_rank_obj_path = "layout/bossRankObj"
local boss_reward_obj_path = "layout/bossRewardObj"
local boss_atk_time_reward_obj_path = "layout/bossAtkTimeRewardObj"
local boss_quest_obj_path = "layout/bossQuestObj"
local function OnCreate(self)
    base.OnCreate(self)
    local uuid, isArchive = self:GetUserData()
    self.uuid = tonumber(uuid)
    self.isArchive = isArchive
    SFSNetwork.SendMessage(MsgDefines.UserGetActBossRank,uuid)
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.tab_go = self:AddComponent(UIBaseContainer, tab_path)
    self.toggle1 = self:AddComponent(UIToggle, toggle1_path)
    self.toggle1.choose = self.toggle1:AddComponent(UIBaseContainer, "Choose")
    self.toggle1.unselectName = self.toggle1:AddComponent(UITextMeshProUGUIEx, "unselectName")
    self.toggle1.selectName = self.toggle1:AddComponent(UITextMeshProUGUIEx, "Choose/selectName")
    self.toggle1.unselectName:SetLocalText(302043)
    self.toggle1.selectName:SetLocalText(302043)
    self.toggle2 = self:AddComponent(UIToggle, toggle2_path)
    self.toggle2.choose = self.toggle2:AddComponent(UIBaseContainer, "Choose")
    self.toggle2.unselectName = self.toggle2:AddComponent(UITextMeshProUGUIEx, "unselectName")
    self.toggle2.selectName = self.toggle2:AddComponent(UITextMeshProUGUIEx, "Choose/selectName")
    self.toggle2.unselectName:SetLocalText(130065)
    self.toggle2.selectName:SetLocalText(130065)
    self.toggle3 = self:AddComponent(UIToggle, toggle3_path)
    self.toggle3.choose = self.toggle3:AddComponent(UIBaseContainer, "Choose")
    self.toggle3.unselectName = self.toggle3:AddComponent(UITextMeshProUGUIEx, "unselectName")
    self.toggle3.selectName = self.toggle3:AddComponent(UITextMeshProUGUIEx, "Choose/selectName")
    self.toggle3.unselectName:SetLocalText(141147)
    self.toggle3.selectName:SetLocalText(141147)
    self.toggle3_red_go = self:AddComponent(UIBaseContainer, toggle3_red_path)
    if isArchive then
        self.tab_go:SetActive(false)
        self.toggle1:SetIsOn(false)
        self.toggle2:SetIsOn(false)
        self.toggle3:SetIsOn(true)
    else
        self.tab_go:SetActive(true)
        self.toggle1:SetIsOn(true)
        self.toggle2:SetIsOn(false)
        self.toggle3:SetIsOn(false)
    end
    self.toggle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle3:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)

    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.boss_rank_obj = self:AddComponent(UIWorldBossRankObj, boss_rank_obj_path)
    self.boss_reward_obj = self:AddComponent(UIWorldBossRewardObj, boss_reward_obj_path)
    self.boss_atk_time_reward_obj =  self:AddComponent(UIWorldBossAtkTimeRewardObj, boss_atk_time_reward_obj_path)
    self.boss_quest_obj = self:AddComponent(UIWorldBossQuestObj, boss_quest_obj_path)
end

local function OnDestroy(self)
    self.txt_title = nil
    self.toggle1 = nil
    self.toggle2 = nil
    self.toggle3 = nil
    self.close_btn = nil
    self.return_btn = nil
    self.playSound = nil
    base.OnDestroy(self)
end

local function ToggleControlBorS(self)
    if self.playSound then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_common_switch)
    else
        self.playSound = true
    end
    self.toggle1.choose:SetActive(self.toggle1:GetIsOn())
    self.toggle2.choose:SetActive(self.toggle2:GetIsOn())
    self.toggle3.choose:SetActive(self.toggle3:GetIsOn())
    self:RefreshList()
end

local function OnEnable(self)
    base.OnEnable(self)
    self.playSound = false
    self:ToggleControlBorS()
end

local function OnDisable(self)
    base.OnDisable(self)
end


local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnActBossRankRefresh,self.OnRankListRefresh)
    self:AddUIListener(EventId.QuestRewardSuccess,self.RefreshList)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnActBossRankRefresh,self.OnRankListRefresh)
    self:RemoveUIListener(EventId.QuestRewardSuccess,self.RefreshList)
end

local function OnRankListRefresh(self)
    if self.toggle1:GetIsOn() == true then
        self.boss_rank_obj:RefreshData(self.uuid)
    end
end
local function RefreshList(self)
    if self.toggle1:GetIsOn() == true then
        self.txt_title:SetLocalText(302179)
        self.boss_rank_obj:SetActive(true)
        self.boss_reward_obj:SetActive(false)
        self.boss_atk_time_reward_obj:SetActive(false)
        self.boss_rank_obj:RefreshData(self.uuid)
        self.boss_quest_obj:SetActive(false)
        self.toggle1.selectName:SetActive(true)
        self.toggle1.unselectName:SetActive(false)
        self.toggle2.selectName:SetActive(false)
        self.toggle2.unselectName:SetActive(true)
        self.toggle3.selectName:SetActive(false)
        self.toggle3.unselectName:SetActive(true)
    elseif self.toggle2:GetIsOn() == true then
        self.txt_title:SetLocalText(302181)
        self.boss_rank_obj:SetActive(false)
        self.boss_reward_obj:SetActive(true)
        self.boss_atk_time_reward_obj:SetActive(false)
        self.boss_reward_obj:RefreshData()
        self.boss_quest_obj:SetActive(false)
        self.toggle2.selectName:SetActive(true)
        self.toggle2.unselectName:SetActive(false)
        self.toggle1.selectName:SetActive(false)
        self.toggle1.unselectName:SetActive(true)
        self.toggle3.selectName:SetActive(false)
        self.toggle3.unselectName:SetActive(true)
    elseif self.toggle3:GetIsOn() == true then
        self.txt_title:SetLocalText(self.isArchive and 302644 or 302241)
        self.boss_rank_obj:SetActive(false)
        self.boss_reward_obj:SetActive(false)
        --self.boss_atk_time_reward_obj:SetActive(true)
        --self.boss_atk_time_reward_obj:RefreshData()
        self.boss_atk_time_reward_obj:SetActive(false)
        self.boss_quest_obj:SetActive(true)
        self.boss_quest_obj:Refresh(self.isArchive)
        self.toggle3.selectName:SetActive(true)
        self.toggle3.unselectName:SetActive(false)
        self.toggle2.selectName:SetActive(false)
        self.toggle2.unselectName:SetActive(true)
        self.toggle1.selectName:SetActive(false)
        self.toggle1.unselectName:SetActive(true)
    end
    if self.isArchive then
        self.toggle3_red_go:SetActive(DataCenter.ActBossDataManager:GetArchiveRedNum() > 0)
    else
        self.toggle3_red_go:SetActive(DataCenter.ActBossDataManager:GetRewardRedNum() > 0)
    end
end

UIWorldBossRankView.OnCreate= OnCreate
UIWorldBossRankView.OnDestroy = OnDestroy
UIWorldBossRankView.ToggleControlBorS = ToggleControlBorS
UIWorldBossRankView.OnEnable = OnEnable
UIWorldBossRankView.OnDisable = OnDisable
UIWorldBossRankView.OnAddListener = OnAddListener
UIWorldBossRankView.OnRemoveListener = OnRemoveListener
UIWorldBossRankView.RefreshList = RefreshList
UIWorldBossRankView.OnRankListRefresh = OnRankListRefresh
return UIWorldBossRankView