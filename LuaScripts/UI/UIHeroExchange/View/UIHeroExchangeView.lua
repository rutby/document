---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/9/15 16:38
---

local base = UIBaseView--Variable
local UIHeroExchangeView = BaseClass("UIHeroExchangeView", base)--Variable
local Localization = CS.GameEntry.Localization
local UIHeroCell = require "UI.UIHero2.Common.UIHeroCellSmall"
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local UIHeroTipsView = require "UI.UIHeroTips.View.UIHeroTipsView"
local title_path = "UICommonMidPopUpTitle/bg_mid/titleText"
local closeBtn_path = "UICommonMidPopUpTitle/bg_mid/CloseBtn"
local UIHeroCellSmall = "List/UIHeroCellSmall"
local item1_path = "List/Rect_Exchange/UICommonItem1"
local item1_txt_path = "List/Rect_Exchange/UICommonItem1/Txt_Item1"
local item2_path = "List/Rect_Exchange/UICommonItem2"
local convert_txt_path = "List/Rect_Exchange/UICommonItem2/Txt_Convert"
local exchangeTips_path = "List/Txt_ExchangeTips"
local exchange_btn_path = "ConfirmBtn"
local exchange_txt_path = "ConfirmBtn/ConfirmText"
local refresh_rect_path = "refresh"
local refresh_img_path = "refresh/refreshIcon"
local refresh_txt_path = "refresh/refreshCost"
local function OnCreate(self)
    base.OnCreate(self)
    self.param = self:GetUserData()
    self:ComponentDefine()
    self:DataDefine()
    self:InitUI()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.titleN:SetLocalText(129227)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        self:OnClickCloseBtn()
    end)
    self.hero = self:AddComponent(UIHeroCell,UIHeroCellSmall)
    self.hero_btn = self:AddComponent(UIButton,UIHeroCellSmall)
    self.hero_btn:SetOnClick(function()
        self:OnClickHero()
    end)
    self.item1 = self:AddComponent(UICommonItem,item1_path)
    self.item1_txt = self:AddComponent(UIText,item1_txt_path)
    self.item2 = self:AddComponent(UICommonItem,item2_path)
    self.convert_txt = self:AddComponent(UIText,convert_txt_path)
    
    self.exchange_btn = self:AddComponent(UIButton,exchange_btn_path)
    self.exchange_btn:SetOnClick(function()
        self:OnClickExchange()
    end)
    self.exchange_txt = self:AddComponent(UIText,exchange_txt_path)
    
    self.exchangeTips = self:AddComponent(UIText,exchangeTips_path)
    self.exchangeTips:SetLocalText(104227)
    
    self.refresh_rec = self:AddComponent(UIBaseContainer,refresh_rect_path)
    self.refresh_img = self:AddComponent(UIImage,refresh_img_path)
    self.refresh_txt = self:AddComponent(UIText,refresh_txt_path)
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.closeBtnN = nil
end

local function DataDefine(self)
    
end

local function DataDestroy(self)
    self.item2:SetItemCountColor(WhiteColor)
end

local function InitUI(self)
    self.hero:InitWithConfigIdByPoster(self.param.hero)
    self:ReInitLeftItem()
end

local function OnClickHero(self)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local heroId = self.param.hero
    local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), tonumber(heroId))
    local param = UIHeroTipsView.Param.New()
    param.heroId = heroId
    param.title = Localization:GetString(heroConfig.name)
    param.content = Localization:GetString(heroConfig.brief_desc)
    param.dir = UIHeroTipsView.Direction.RIGHT
    param.defWidth = 300
    param.pivot = 0.5
    param.position = self.hero_btn.transform.position + Vector3.New(scaleFactor*self.hero_btn.rectTransform.rect.width, -scaleFactor*self.hero_btn.rectTransform.rect.height*0.5, 0)
    param.bindObject = self.hero_btn.gameObject
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTips, { anim = false }, param)
end

local function ReInitLeftItem(self)
    local param = {}
    param.rewardType = self.param.currencyType
    param.itemId = self.param.currencyId
    self.item1:ReInit(param)
    local item = DataCenter.ItemData:GetItemById(self.param.currencyId)
    local num = 0
    if item then
        num = item.count
    end
    if num > self.param.costNum then
        self.item1Num = self.param.costNum
    else
        self.item1Num = num
    end
    self.item1_txt:SetLocalText(150033,num,self.param.costNum)
    if num < self.param.costNum then            --碎片不够
        self.convert_txt:SetActive(true)
        self:ReInitRightItem(num)
        self.isConvert = true
    else                                        --碎片够
        self.convert_txt:SetActive(false)
        self.item2:SetActive(false)
        self.refresh_rec:SetActive(false)
        self.isConvert = false
    end
    self.exchange_txt:SetLocalText(110029)
end

local function ReInitRightItem(self,nowNum)
    self.item2:SetActive(true)
    local param = {}
    param.rewardType = self.param.currencyType
    param.itemId = self.param.currency_change
    local extraItem = DataCenter.ItemData:GetItemById(self.param.currency_change)
    local num = 0
    if extraItem then
        num = extraItem.count
    end
    
    local selfNum = self.param.costNum - nowNum     --还差x个
    self.supply = 0
    if selfNum > num then           --所需要的比拥有的多
        self.supply = 0
    else
        self.supply = selfNum
    end
    self.convert_txt:SetText("+" ..selfNum)
    param.count = selfNum
    self.item2:ReInit(param)
 
  
    self:RefreshTop(selfNum)
end

local function RefreshTop(self,selfNum)
    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.param.currency_change)
    if goods then
        self.refresh_rec:SetActive(true)
        self.refresh_img:LoadSprite(string.format(LoadPath.ItemPath, goods.icon))
        local item = DataCenter.ItemData:GetItemById(self.param.currency_change)
        if item then
            self.refresh_txt:SetLocalText(130128,string.GetFormattedSeperatorNum(tonumber(item.count)))
            if item.count < selfNum then
                self.item2:SetItemCountColor(RedColor)
            else
                self.item2:SetItemCountColor(WhiteColor)
            end
        else
            self.item2:SetItemCountColor(WhiteColor)
            self.refresh_txt:SetLocalText(130128,0)
        end
    end
end

local function OnClickExchange(self)
    local goodsArr = {}
    --检查是否需要补充碎片
    if self.isConvert then
        if self.supply == 0 then  --资源不够本次兑换
            return UIUtil.ShowTipsId(104228)
        end
        goodsArr[self.param.currency_change] = self.supply
    end
    if self.item1Num ~= 0 then
        goodsArr[self.param.currencyId] = self.item1Num
    end
    SFSNetwork.SendMessage(MsgDefines.BuyCommonShopGoods,self.param.id,goodsArr)
    self:OnClickCloseBtn()
end

local function OnClickCloseBtn(self)
    self.ctrl:CloseSelf()
end

UIHeroExchangeView.OnCreate = OnCreate
UIHeroExchangeView.OnDestroy = OnDestroy
UIHeroExchangeView.ComponentDefine = ComponentDefine
UIHeroExchangeView.ComponentDestroy = ComponentDestroy
UIHeroExchangeView.DataDefine = DataDefine
UIHeroExchangeView.DataDestroy = DataDestroy

UIHeroExchangeView.InitUI = InitUI
UIHeroExchangeView.ReInitLeftItem = ReInitLeftItem
UIHeroExchangeView.ReInitRightItem = ReInitRightItem
UIHeroExchangeView.OnClickExchange = OnClickExchange
UIHeroExchangeView.OnClickHero = OnClickHero
UIHeroExchangeView.OnClickCloseBtn = OnClickCloseBtn
UIHeroExchangeView.RefreshTop = RefreshTop

return UIHeroExchangeView