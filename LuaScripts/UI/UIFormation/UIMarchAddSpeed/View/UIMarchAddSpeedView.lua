
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/3/14 10:48
---
local MarchAddSpeedItem = require "UI.UIFormation.UIMarchAddSpeed.Component.MarchAddSpeedItem"
local UIMarchAddSpeedView = BaseClass("UIMarchAddSpeedView",UIBaseView)
local slider_path = "Bg/sliderBg/Slider"
local total_num_path = "Bg/sliderBg/totalNum"
local base = UIBaseView
local Localization = CS.GameEntry.Localization
function UIMarchAddSpeedView:OnCreate()
    base.OnCreate(self)
    local marchUuid = self:GetUserData()
    self.marchUuid = marchUuid
    self:ComponentDefine()
    self:DataDefine()
end

function UIMarchAddSpeedView:ComponentDefine()
    self._close_btn = self:AddComponent(UIButton,"UICommonPopUpTitle/bg_mid/CloseBtn")
    self._close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)

    self._return_btn = self:AddComponent(UIButton,"UICommonPopUpTitle/panel")
    self._return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self._title_txt = self:AddComponent(UITextMeshProUGUIEx,"UICommonPopUpTitle/bg_mid/titleText")
    self._title_txt:SetLocalText(320818)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.total_num = self:AddComponent(UITextMeshProUGUIEx, total_num_path)
    self.empty_txt = self:AddComponent(UITextMeshProUGUIEx, "TxtEmpty")
    self.empty_txt:SetLocalText(320830)
    self.timer_action = function(temp)
        self:RefreshTime()
    end
    self.ScrollView = self:AddComponent(UIScrollView, "Bg/ScrollView")
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.showDatalist ={}
    self.startTime = 0
    self.endTime = 0
    self.isSendMsg = false
end

function UIMarchAddSpeedView:DataDefine()
end

function UIMarchAddSpeedView:OnDestroy()
    self:ClearScroll()
    base.OnDestroy(self)
end

function UIMarchAddSpeedView:OnEnable()
    base.OnEnable(self)
    self:ReInit()
    self:AddTimer()
end

function UIMarchAddSpeedView:OnDisable()
    base.OnDisable(self)
    self:DeleteTimer()
end

function UIMarchAddSpeedView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.MarchItemUpdateSelf, self.RefreshMarchData)
    self:AddUIListener(EventId.UseItemSuccess, self.RefreshList)
    self:AddUIListener(EventId.PlayerNitrogenUpdate, self.RefreshList)
end

function UIMarchAddSpeedView:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MarchItemUpdateSelf,self.RefreshMarchData)
    self:RemoveUIListener(EventId.UseItemSuccess, self.RefreshList)
    self:RemoveUIListener(EventId.PlayerNitrogenUpdate, self.RefreshList)
end

function UIMarchAddSpeedView:ClearScroll()
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(MarchAddSpeedItem)
    self.showDatalist = {}
end

function UIMarchAddSpeedView:OnItemMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(MarchAddSpeedItem, itemObj)
    cellItem:SetItemShow(self.showDatalist[index])
end

function UIMarchAddSpeedView:OnItemMoveOut(itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name, MarchAddSpeedItem)
end
function UIMarchAddSpeedView:ReInit()
    self:RefreshList()
    self:RefreshMarchData()
end

function UIMarchAddSpeedView:RefreshMarchData()
    local state = self:RefreshMarch()
    if state == false then
        self.ctrl:CloseSelf()
    else
        self:RefreshTime()
    end
end
function UIMarchAddSpeedView:RefreshMarch()
    self.startTime = 0
    self.endTime = 0
    local marchData = self.ctrl:GetMarchData(self.marchUuid)
    if marchData~=nil then
        self.startTime = marchData.startTime
        self.endTime = marchData.endTime
        return true
    else
        return true
    end
end

function UIMarchAddSpeedView:RefreshList()
    self.isSendMsg = false
    self:ClearScroll()
    self.showDatalist = self.ctrl:GetItemList()
    if #self.showDatalist > 0 then
        self.ScrollView:SetTotalCount(#self.showDatalist)
        self.ScrollView:RefillCells()
        self.empty_txt:SetActive(false)
    else
        self.empty_txt:SetLocalText(302186)
        self.empty_txt:SetActive(true)
    end
end

function UIMarchAddSpeedView:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

function UIMarchAddSpeedView:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function UIMarchAddSpeedView:RefreshTime()
    if self.endTime>0 and self.startTime>0 then
        local totalTime =self.endTime-self.startTime
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local deltaTime = self.endTime - curTime
        if totalTime>0 and deltaTime >0 then
            local percent = math.min((1-(deltaTime/totalTime)),1)
            self.slider:SetValue(percent)
            self.total_num:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
            return
        end
    end
    self.slider:SetValue(1)
    self.total_num:SetText(Localization:GetString("300542"))
    local state = self:RefreshMarch()
    if state == false then
        self.ctrl:CloseSelf()
    end
end

function UIMarchAddSpeedView:SetIsOnMsgSend()
    self.isSendMsg = true
end

return UIMarchAddSpeedView