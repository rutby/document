---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jinpeng.
--- DateTime: 2023/6/21 15:58
---
local UIFormationDispatchTaskCtrl = BaseClass("UIFormationDispatchTaskCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization

local WAIT_RALLY = MarchStatus.WAIT_RALLY
local IN_TEAM = MarchStatus.IN_TEAM

function UIFormationDispatchTaskCtrl:CloseSelf()
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIFormationDispatchTask)
end

function UIFormationDispatchTaskCtrl:Close()
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

---获取符合要求的英雄列表
function UIFormationDispatchTaskCtrl:GetHeroList(taskInfo)
    --DataCenter.ActDispatchTaskDataManager:ParseTaskCondition(taskInfo)
    ----1-阵营；参数-1,2,3（坦克、火炮、飞机）
    ----2-品质；参数-3~5（蓝紫橙）
    ----3-星星；参数-6,11,16,21,26，分别对应1-5星
    ----4-等级；参数-1~100
    --local parsed_conditions = taskInfo.cfg.parsed_conditions
    --local cond1Param  -- ==指定职业
    --local cond2Param  -- >=指定品质
    --local cond3Param  -- >=星级
    --local cond4Param  -- >=指定等级
    --for k, v in pairs(parsed_conditions) do
    --    if k == 1 then
    --        cond1Param = v[1]
    --    elseif k == 2 then
    --        cond2Param = v[1]
    --    elseif k == 3 then
    --        cond3Param = v[1]
    --    elseif k == 4 then
    --        cond4Param = v[1]
    --    end
    --end
    
    local heroList = {}
    local usedHeroList = DataCenter.ActDispatchTaskDataManager:GetAllUsedHeroList()
    local heroDataList = DataCenter.HeroDataManager:GetAllHeroBySort()
    for uuid,heroData in pairs(heroDataList) do
        if table.indexof(usedHeroList, heroData.uuid) == false then
            --if cond1Param and heroData.camp == cond1Param then
            --    table.insert(heroList, heroData)
            --elseif cond2Param and heroData.rarity <= cond2Param then
            --    table.insert(heroList, heroData)
            --elseif cond3Param and heroData:GetRank() >= cond3Param then
            --    table.insert(heroList, heroData)
            --elseif cond4Param and heroData.level >= cond4Param then
                table.insert(heroList, heroData)
            --end
        end
    end
    
    --table.sort(heroList,function(a,b)
    --    return a.power > b.power
    --end)
    return heroList
end

local function CalcMatchCount(hero, cond1Param, cond2Param, cond3Param, cond4Param)
    local matchCount = 0
    if hero.ok1 and cond1Param then
        matchCount = matchCount + 1
    end
    if hero.ok2 and cond2Param then
        matchCount = matchCount + 1
    end
    if hero.ok3 and cond3Param then
        matchCount = matchCount + 1
    end
    if hero.ok4 and cond4Param then
        matchCount = matchCount + 1
    end
    return matchCount
end

local function IsMatch(hero, cond1Param, cond2Param, cond3Param, cond4Param)
    if hero.ok1 ~= true and cond1Param then
        return false
    end
    if hero.ok2 ~= true and cond2Param then
        return false
    end
    if hero.ok3 ~= true and cond3Param then
        return false
    end
    if hero.ok4 ~= true and cond4Param then
        return false
    end
    return true
end

local function CleanData2(hero, cond1Param, cond2Param, cond3Param, cond4Param)
    if hero.ok1 and cond1Param then
        cond1Param.count = cond1Param.count - 1
        cond1Param.heroCount = cond1Param.heroCount - 1
        cond1Param.heroList[hero.uuid] = nil
        if cond1Param.count == 0 then
            cond1Param = nil
        end
    end
    if hero.ok2 and cond2Param then
        cond2Param.count = cond2Param.count - 1
        cond2Param.heroCount = cond2Param.heroCount - 1
        cond2Param.heroList[hero.uuid] = nil
        if cond2Param.count == 0 then
            cond2Param = nil
        end
    end
    if hero.ok3 and cond3Param then
        cond3Param.count = cond3Param.count - 1
        cond3Param.heroCount = cond3Param.heroCount - 1
        cond3Param.heroList[hero.uuid] = nil
        if cond3Param.count == 0 then
            cond3Param = nil
        end
    end
    if hero.ok4 and cond4Param then
        cond4Param.count = cond4Param.count - 1
        cond4Param.heroCount = cond4Param.heroCount - 1
        cond4Param.heroList[hero.uuid] = nil
        if cond4Param.count == 0 then
            cond4Param = nil
        end
    end
    return cond1Param, cond2Param, cond3Param, cond4Param
end

local function CleanData1(ret, condParam, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList)
    local uuidList = table.keys(condParam.heroList)
    for _, uuid in ipairs(uuidList) do
        if ret[uuid] == nil then
            ret[uuid] = condParam.heroList[uuid]
            okHeroList[uuid] = nil
            cond1Param, cond2Param, cond3Param, cond4Param = CleanData2(ret[uuid], cond1Param, cond2Param, cond3Param, cond4Param)
        end
    end
    return ret, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList
end

---一键上阵的英雄[核心算法，哪个条件缺，就上满足对应条件的英雄]
---符合条件的英雄按照条件个数加分
function UIFormationDispatchTaskCtrl:GetRecommendHeroList(taskInfo)
    DataCenter.ActDispatchTaskDataManager:ParseTaskCondition(taskInfo)
    --1-阵营；参数-1,2,3（坦克、火炮、飞机）
    --2-品质；参数-3~5（蓝紫橙）
    --3-星星；参数-6,11,16,21,26，分别对应1-5星
    --4-等级；参数-1~100
    local parsed_conditions = taskInfo.cfg.parsed_conditions
    local cond1Param = nil  -- ==指定职业
    local cond2Param = nil  -- >=指定品质
    local cond3Param = nil  -- >=星级
    local cond4Param = nil  -- >=指定等级
    local cond_count = 0 -- 有几个条件
    for k, v in pairs(parsed_conditions) do
        if k == 1 then
            cond_count = cond_count + 1
            cond1Param = { data = v[1], count = v[2], heroList = {}, heroCount = 0 }
            --【职业】data 是条件要求，count 是人数要求，heroList 是满足要求的人员列表
        elseif k == 2 then
            cond_count = cond_count + 1
            cond2Param = { data = v[1], count = v[2], heroList = {}, heroCount = 0 }
            --【品质】data 是条件要求，count 是人数要求，heroList 是满足要求的人员列表
        elseif k == 3 then
            cond_count = cond_count + 1
            cond3Param = { data = v[1], count = v[2], heroList = {}, heroCount = 0 }
            --【星级】data 是条件要求，count 是人数要求，heroList 是满足要求的人员列表
        elseif k == 4 then
            cond_count = cond_count + 1
            cond4Param = { data = v[1], count = v[2], heroList = {}, heroCount = 0 }
            --【等级】data 是条件要求，count 是人数要求，heroList 是满足要求的人员列表
        end
    end
    local usedHeroList = DataCenter.ActDispatchTaskDataManager:GetAllUsedHeroList()
    local heroDataList = DataCenter.HeroDataManager:GetAllHeroBySort()
    local okHeroList = {} -- 至少满足一个条件的人
    for i,heroData in pairs(heroDataList) do
        local uuid = heroData.uuid
        if table.indexof(usedHeroList, uuid) == false then
            -- score 该英雄满足几个条件
            -- uuid  英雄ID
            -- power 英雄战力
            local heroWithScore = 
            {score=0,
             uuid=heroData.uuid,
             rarity = heroData.rarity,
             --camp = heroData.camp,
             power=heroData.power,
             --rankId = heroData:GetCurMilitaryRankId(),
             --level = heroData.level,
             ok1=false, ok2=false, ok3=false, ok4=false}
            if cond1Param and heroData.camp == cond1Param.data then
                heroWithScore.score = heroWithScore.score + 1 -- 满足一个条件就+1
                heroWithScore.ok1 = true
                cond1Param.heroList[uuid] = heroWithScore
                cond1Param.heroCount = cond1Param.heroCount + 1
            end
            if cond2Param and heroData.rarity <= cond2Param.data then
                heroWithScore.score = heroWithScore.score + 1 -- 满足一个条件就+1
                heroWithScore.ok2 = true
                cond2Param.heroList[uuid] = heroWithScore
                cond2Param.heroCount = cond2Param.heroCount + 1
            end
            if cond3Param and heroData:GetCurMilitaryRankId() >= cond3Param.data then
                heroWithScore.score = heroWithScore.score + 1 -- 满足一个条件就+1
                heroWithScore.ok3 = true
                cond3Param.heroList[uuid] = heroWithScore
                cond3Param.heroCount = cond3Param.heroCount + 1
            end
            if cond4Param and heroData.level >= cond4Param.data then
                heroWithScore.score = heroWithScore.score + 1 -- 满足一个条件就+1
                heroWithScore.ok4 = true
                cond4Param.heroList[uuid] = heroWithScore
                cond4Param.heroCount = cond4Param.heroCount + 1
            end
            if heroWithScore.score ~= 0 then
                okHeroList[uuid] = heroWithScore -- 至少满足一个条件的人
            end
        end
    end
    if (cond1Param and cond1Param.heroCount < cond1Param.count) then
        return nil, false -- 满足【职业】条件的人数不够
    end
    if (cond2Param and cond2Param.heroCount < cond2Param.count) then
        return nil, false -- 满足【品质】条件的人数不够
    end
    if (cond3Param and cond3Param.heroCount < cond3Param.count) then
        return nil, false -- 满足【星级】条件的人数不够
    end
    if (cond4Param and cond4Param.heroCount < cond4Param.count) then
        return nil, false -- 满足【等级】条件的人数不够
    end
    local ret = {}
    if (cond1Param and cond1Param.heroCount == cond1Param.count) then
        -- 满足【职业】条件的人数刚刚好，必须全选
        ret, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList = CleanData1(ret, cond1Param, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList)
        cond1Param = nil
    end
    if (cond2Param and cond2Param.heroCount == cond2Param.count) then
        -- 满足【品质】条件的人数刚刚好，必须全选
        ret, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList = CleanData1(ret, cond2Param, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList)
        cond2Param = nil
    end
    if (cond3Param and cond3Param.heroCount == cond3Param.count) then
        -- 满足【星级】条件的人数刚刚好，必须全选
        ret, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList = CleanData1(ret, cond3Param, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList)
        cond3Param = nil
    end
    if (cond4Param and cond4Param.heroCount == cond4Param.count) then
        -- 满足【等级】条件的人数刚刚好，必须全选
        ret, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList = CleanData1(ret, cond4Param, cond1Param, cond2Param, cond3Param, cond4Param, okHeroList)
        cond4Param = nil
    end
    local find_count = table.count(ret)
    if find_count > 3 then
        return nil, false -- 人数超了
    end
    if cond1Param == nil and cond2Param == nil and cond3Param == nil and cond4Param == nil and find_count < 4 then
        return table.keys(ret), true -- 已经选到了要求的人数，条件也全部满足了
    end
    -- 至少满足一个条件的人，按照符合条件的个数排序
    --1-阵营；参数-1,2,3（坦克、火炮、飞机）
    --2-品质；参数-3~5（蓝紫橙）
    --3-星星；参数-6,11,16,21,26，分别对应1-5星
    --4-等级；参数-1~100
    local tmpHeroList = table.values(okHeroList)
    table.sort(tmpHeroList,function(a,b)
        if a.score == b.score then
            if a.rarity == b.rarity then
                return a.power < b.power  -- 品质相同选战力最低
            end
            return a.rarity > b.rarity -- 积分相同选品质最低
        end
        return a.score > b.score
    end)
    local offset = 0
    repeat
        cond_count = (cond1Param and 1 or 0) + (cond2Param and 1 or 0) + (cond3Param and 1 or 0) + (cond4Param and 1 or 0)
        if cond_count > 0 then
            for index, hero in ipairs(tmpHeroList) do
                if ret[hero.uuid] == nil then
                    local match_count = hero.score -- CalcMatchCount(hero, cond1Param, cond2Param, cond3Param, cond4Param)
                    if match_count + offset == cond_count and IsMatch(hero, cond1Param, cond2Param, cond3Param, cond4Param) then
                        ret[hero.uuid] = hero
                        okHeroList[hero.uuid] = nil
                        cond1Param, cond2Param, cond3Param, cond4Param = CleanData2(hero, cond1Param, cond2Param, cond3Param, cond4Param)
                        cond_count = (cond1Param and 1 or 0) + (cond2Param and 1 or 0) + (cond3Param and 1 or 0) + (cond4Param and 1 or 0)
                        if cond_count == 0 then
                            break
                        end
                    end
                end
            end
        end
        cond_count = (cond1Param and 1 or 0) + (cond2Param and 1 or 0) + (cond3Param and 1 or 0) + (cond4Param and 1 or 0)
        find_count = table.count(ret)
        if find_count > 3 then
            return nil, false -- 人数超了
        end
        if cond_count == 0 and find_count < 4 then
            return table.keys(ret), true -- 已经选到了要求的人数，条件也全部满足了
        end
        offset = offset - 1
    until( offset < -4 )
    cond_count = (cond1Param and 1 or 0) + (cond2Param and 1 or 0) + (cond3Param and 1 or 0) + (cond4Param and 1 or 0)
    if cond_count > 0 then
        --table.sort(tmpHeroList,function(a,b)
        --    if a.score == b.score then
        --        if a.quality == b.quality then
        --            return a.power < b.power  -- 品质相同选战力最低
        --        end
        --        return a.quality < b.quality  -- 积分相同选品质最低
        --    end
        --    return a.score < b.score
        --end)
        for index, hero in ipairs(tmpHeroList) do
            if ret[hero.uuid] == nil then
                local match_count = CalcMatchCount(hero, cond1Param, cond2Param, cond3Param, cond4Param)
                if match_count > 0 then
                    ret[hero.uuid] = hero
                    okHeroList[hero.uuid] = nil
                    cond1Param, cond2Param, cond3Param, cond4Param = CleanData2(hero, cond1Param, cond2Param, cond3Param, cond4Param)
                    cond_count = (cond1Param and 1 or 0) + (cond2Param and 1 or 0) + (cond3Param and 1 or 0) + (cond4Param and 1 or 0)
                    if cond_count == 0 then
                        break
                    end
                end
            end
        end
    end
    cond_count = (cond1Param and 1 or 0) + (cond2Param and 1 or 0) + (cond3Param and 1 or 0) + (cond4Param and 1 or 0)
    find_count = table.count(ret)
    if find_count > 3 then
        return nil, false -- 人数超了
    end
    if cond_count == 0 and find_count < 4 then
        return table.keys(ret), true -- 已经选到了要求的人数，条件也全部满足了
    end
    return nil, false
end

return UIFormationDispatchTaskCtrl