---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jinpeng.
--- DateTime: 2023/6/21 15:58
---
---@class UIFormationDispatchTaskView:UIBaseView
local UIHeroEtoileList = require "UI.UIHero2.Common.UIHeroEtoileList"
local HeroBountySelectHeroItem = require "UI.UIHeroBountyTask.Component.HeroBountySelectHeroItem"
local HeroBountyCampItem = require "UI.UIHeroBountyTask.Component.HeroBountyCampItem"
local UIFormationDispatchTaskView = BaseClass("UIFormationDispatchTaskView",UIBaseView)
local base = UIBaseView

local RewardItem = require "UI.UIWorldPoint.Component.WorldPointRewardItem"
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"

local Localization = CS.GameEntry.Localization
local ResourceManager = CS.GameEntry.Resource

local close_bg_path = "closeBg"
local quick_btn_path = "Area/layout/quickBtn"
local quick_txt_path = "Area/layout/quickBtn/quickText"
local enter_btn_path = "Area/layout/enterBtn"
local start_txt_path = "Area/layout/enterBtn/enterText"
local cd_text_path = "Area/cdText"
local reward_txt_path = "Area/rewardText"
local title_text_path = "Area/titleText"
local reward_content_path = "Area/RewardContent"
local hero_des_txt_path = "Area/dispatchBg/dispatchTipText"
local u_i_hero_cell_small1_path = "Area/dispatchBg/heroLayout/dispatchHero1/GameObject/UIHeroCellSmall1"
local u_i_hero_cell_small2_path = "Area/dispatchBg/heroLayout/dispatchHero2/GameObject/UIHeroCellSmall2"
local u_i_hero_cell_small3_path = "Area/dispatchBg/heroLayout/dispatchHero3/GameObject/UIHeroCellSmall3"
local task_des_txt_path = "Area/taskDesLayout/requireTipText"
local level_limit_path = "Area/taskDesLayout/limitLayout/levelLimit"
local level_OK_img_path ="Area/taskDesLayout/limitLayout/levelLimit/levelIsOk"
local level_num_path = "Area/taskDesLayout/limitLayout/levelLimit/level_num"
local level_des_path = "Area/taskDesLayout/limitLayout/levelLimit/levelDes"
local level_txt_path = "Area/taskDesLayout/limitLayout/levelLimit/levelText"
local star_limit_path = "Area/taskDesLayout/limitLayout/starLimit"
local star_des_path = "Area/taskDesLayout/limitLayout/starLimit/starDes"
local star_OK_img_path = "Area/taskDesLayout/limitLayout/starLimit/starIsOk"
local star_num_path = "Area/taskDesLayout/limitLayout/starLimit/star_num"
local rarity_limit_path = "Area/taskDesLayout/limitLayout/rarityLimit"
local rarity_OK_img_path = "Area/taskDesLayout/limitLayout/rarityLimit/rarityIsOk"
local rarity_num_path = "Area/taskDesLayout/limitLayout/rarityLimit/rarity_num"
local rarity_img_path = "Area/taskDesLayout/limitLayout/rarityLimit/rarityImg"
local camp_limit_path = "Area/taskDesLayout/limitLayout/campLayout"
local camp1_path = "Area/taskDesLayout/limitLayout/campLayout/layout/camp1"
local camp2_path = "Area/taskDesLayout/limitLayout/campLayout/layout/camp2"
local camp3_path = "Area/taskDesLayout/limitLayout/campLayout/layout/camp3"
local camp_num_path ="Area/taskDesLayout/limitLayout/campLayout/campNum"
local camp_ok_img_path = "Area/taskDesLayout/limitLayout/campLayout/campIsOk"
local hero_tip_txt_path = "Area/heroListTipText"
local scroll_view_path = "Area/ScrollView"
local empty_go_path = "Area/EmptyGo"
local cd_text_path = "Area/time/cdText"

function UIFormationDispatchTaskView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

function UIFormationDispatchTaskView:OnDestroy()
    self:ClearScroll()
    self:ClearContent()
    --self:HideTroopLine()
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

function UIFormationDispatchTaskView:ComponentDefine()
    self.close_bg = self:AddComponent(UIButton, close_bg_path)
    self.close_bg:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.quick_btn = self:AddComponent(UIButton, quick_btn_path)
    self.quick_btn:SetOnClick(function()
        self:OnFastJoinClick()
    end)
    self.start_txt = self:AddComponent(UITextMeshProUGUIEx, quick_txt_path)
    self.start_txt:SetLocalText(320928)
    self.enter_btn = self:AddComponent(UIButton, enter_btn_path)
    self.enter_btn:SetOnClick(function()
        self:OnStartClick()
    end)
    self.start_txt = self:AddComponent(UITextMeshProUGUIEx, start_txt_path)
    self.start_txt:SetLocalText(390146)
    --self.cd_text = self:AddComponent(UIText, cd_text_path)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
    self.reward_txt = self:AddComponent(UITextMeshProUGUIEx,reward_txt_path)
    self.reward_txt:SetLocalText(132231)
    self.reward_content = self:AddComponent(UIBaseContainer, reward_content_path)
    self.hero_des_txt = self:AddComponent(UITextMeshProUGUIEx, hero_des_txt_path)
    self.hero_des_txt:SetLocalText(132202)
    self.task_des_txt = self:AddComponent(UITextMeshProUGUIEx, task_des_txt_path)
    self.task_des_txt:SetLocalText(130060)
    self.u_i_hero_cell_small1 = self:AddComponent(UIHeroCellSmall, u_i_hero_cell_small1_path)
    self.u_i_hero_cell_small2 = self:AddComponent(UIHeroCellSmall, u_i_hero_cell_small2_path)
    self.u_i_hero_cell_small3 = self:AddComponent(UIHeroCellSmall, u_i_hero_cell_small3_path)
    
    self.level_limit = self:AddComponent(UIBaseContainer,level_limit_path)
    self.level_OK_img =  self:AddComponent(UIBaseContainer,level_OK_img_path)
    self.level_num = self:AddComponent(UITextMeshProUGUIEx,level_num_path)
    self.level_des = self:AddComponent(UITextMeshProUGUIEx,level_des_path)
    self.level_des:SetLocalText(100082)
    self.level_txt = self:AddComponent(UITextMeshProUGUIEx,level_txt_path)

    self.star_limit = self:AddComponent(UIBaseContainer,star_limit_path)
    self.starNeed = self:AddComponent(UIHeroEtoileList, "Area/taskDesLayout/limitLayout/starLimit/UIHeroEtoileList")
    self.star_OK_img =  self:AddComponent(UIBaseContainer,star_OK_img_path)
    self.star_num = self:AddComponent(UITextMeshProUGUIEx,star_num_path)
    self.cd_text = self:AddComponent(UITextMeshProUGUIEx, cd_text_path)
    self.rarity_limit = self:AddComponent(UIBaseContainer,rarity_limit_path)
    self.rarity_OK_img =  self:AddComponent(UIBaseContainer,rarity_OK_img_path)
    self.rarity_num = self:AddComponent(UITextMeshProUGUIEx,rarity_num_path)
    self.rarity_img = self:AddComponent(UIImage,rarity_img_path)
    self.rarity_btn = self:AddComponent(UIButton,rarity_img_path)
    self.rarity_btn:SetOnClick(function()
        self:OnRarityDesClick()
    end)
    self.camp_limit = self:AddComponent(UIBaseContainer,camp_limit_path)

    self.camp1 = self:AddComponent(HeroBountyCampItem,camp1_path)
    self.camp2 = self:AddComponent(HeroBountyCampItem,camp2_path)
    self.camp3 = self:AddComponent(HeroBountyCampItem,camp3_path)

    self.camp_num = self:AddComponent(UITextMeshProUGUIEx,camp_num_path)
    self.camp_ok_img = self:AddComponent(UIBaseContainer,camp_ok_img_path)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)

    self.hero_tip_txt = self:AddComponent(UITextMeshProUGUIEx,hero_tip_txt_path)
    self.hero_tip_txt:SetLocalText(300539)
    
    --self.empty_go = self:AddComponent(UIBaseContainer, empty_go_path)
end

function UIFormationDispatchTaskView:ComponentDestroy()
end

function UIFormationDispatchTaskView:DataDefine()
    -- 任务和世界点的uuid
    self.uuid = self:GetUserData()
    
    self.clickHeroCellCallBack = BindCallback(self, self.OnClickHeroCell)
    
    --哈希表,需要位置信息
    self.selectedUUID = {}
    
    self.itemReqs = {}
    self.itemList = {}
    self.troopLine = nil
    self.meetAllCondition = false
end

function UIFormationDispatchTaskView:DataDestroy()
    self.heroList = nil
    self.itemReqs = nil
    self.itemList = nil
    self.selectedUUID = nil
    self.meetAllCondition = nil
end

function UIFormationDispatchTaskView:OnEnable()
    base.OnEnable(self)
    self:RefreshContent()
end

function UIFormationDispatchTaskView:OnDisable()
    base.OnDisable(self)
end

function UIFormationDispatchTaskView:OnAddListener()
    base.OnAddListener(self)
end

function UIFormationDispatchTaskView:OnRemoveListener()
    base.OnRemoveListener(self)
end

function UIFormationDispatchTaskView:ClearScroll()
    if self.scroll_view then
        self.scroll_view:ClearCells()
        self.scroll_view:RemoveComponents(HeroBountySelectHeroItem)
    end
end
function UIFormationDispatchTaskView:GetRewardList(reward_str)
    local rewardShowList = {}
    if reward_str~=nil and reward_str~="" then
        local rewardList = string.split(reward_str,"|")
        table.walk(rewardList,function (k,v)
            local str = v
            if str~=nil and str~="" then
                local strVec = string.split(str,";")
                if #strVec>2 then
                    local id = tonumber(strVec[1])
                    local rewardType = tonumber(strVec[2])
                    local num = tonumber(strVec[3])
                    local item = {}
                    item.firstKill = false
                    if rewardType ==  RewardType.GOODS then
                        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                        if goods~=nil then
                            item.itemId = id
                            item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                            item.count = num
                            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                            item.rewardType = rewardType
                            item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                            item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                            item.isLocal = true
                            --item.itemName = goods.name
                            --item.itemDesc = goods.description
                            local itemType = goods.type
                            if itemType == 2 then -- SPD
                                if goods.para1 ~= nil and goods.para1 ~= "" then
                                    local para1 = goods.para1
                                    local temp = string.split(para1,';')
                                    if temp ~= nil and #temp > 1 then
                                        item.itemFlag = temp[1]..temp[2]
                                    end
                                end
                            elseif itemType == 3 then -- USE
                                local type2 = goods.type2
                                if type2 ~= 999 and goods.para ~= nil then
                                    local res_num = tonumber(goods.para)
                                    item.itemFlag = string.GetFormattedStr(res_num)
                                end
                            end
                            if item.firstKill == true then
                                table.insert(rewardShowList,item)
                            else
                                table.insert(rewardShowList,item)
                            end

                        end
                    else
                        local resourceType = RewardToResType[rewardType]
                        if resourceType~=nil then
                            item.itemId = id
                            item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                            item.rewardType = rewardType
                            item.itemDesc = CommonUtil.GetResourceDescriptionByType(resourceType)
                            item.count = num
                            item.itemName = DataCenter.ResourceManager:GetResourceNameByType(resourceType)
                            item.isLocal = true
                            if item.firstKill == true then
                                table.insert(rewardShowList,item)
                            else
                                table.insert(rewardShowList,item)
                            end
                        end
                    end
                end
            end
        end)
    end
    return rewardShowList
end
function UIFormationDispatchTaskView:RefreshContent()
    local taskInfo = DataCenter.ActDispatchTaskDataManager:GetSingleTaskByUuid(self.uuid)
    if taskInfo == nil then
        --self.ctrl:CloseSelf()
        return
    end
    
    ---- 非vip不能用 -- self.quick_btn 暂时不显示了
    local isOpen = LuaEntry.Effect:GetGameEffect(EffectDefine.LW_DISPATCH_TASK_FASTJOIN_FUNCTION_OPEN)
    CS.UIGray.SetGray(self.quick_btn.transform, (isOpen<=0), true)
    
    --任务其他信息显示
    --self.cd_text:SetText(UITimeManager:GetInstance():SecondToFmtString(taskInfo.cfg.times))
    self.title_text:SetLocalText(taskInfo.cfg.name)
    local time = taskInfo.cfg.times
    self.cd_text:SetText(UITimeManager:GetInstance():MilliSecondToFmtStringSpecial(time*1000))
    local rewList = self:GetRewardList(taskInfo.cfg.base_reward_show)
    self:RefreshReward(rewList)

    --[[
    "任务条件：
类型;类型参数;数量|类型;类型参数;数量
0-阵营；参数-1,2,3（坦克、火炮、飞机）
1-品质；参数-3~5（蓝紫橙）
2-军阶；参数-2~26 星级
3-等级；参数-1~100"
    ]]--
    DataCenter.ActDispatchTaskDataManager:ParseTaskCondition(taskInfo)
    local parsed_conditions = taskInfo.cfg.parsed_conditions
    local campCondition = parsed_conditions[1]
    self.campNeed = nil
    self.campNum =0
    if campCondition~=nil then
        local campIndex = toInt(campCondition[1])
        local count = toInt(campCondition[2])
        self.campNeed = campIndex
        self.campNum = count
        self.camp_limit:SetActive(true)
        if count>=1 then
            self.camp1:SetActive(true)
            self.camp1:InitData(campIndex,1)
            table.insert(self.campNeedList,self.camp1)
            if count>=2 then
                self.camp2:SetActive(true)
                self.camp2:InitData(campIndex,2)
                table.insert(self.campNeedList,self.camp2)
                if count>=3 then
                    self.camp3:SetActive(true)
                    self.camp3:InitData(campIndex,3)
                    table.insert(self.campNeedList,self.camp3)
                else
                    self.camp3:SetActive(false)
                end
            else
                self.camp2:SetActive(false)
                self.camp3:SetActive(false)
            end
            self.camp_ok_img:SetActive(false)
            self.camp_num:SetText("<color=red>".."0" .."</color>".."/"..math.floor(count))
        else
            self.camp_ok_img:SetActive(false)
            self.camp_limit:SetActive(false)
        end
    else
        self.camp_ok_img:SetActive(false)
        self.camp_limit:SetActive(false)
    end
    self.rarity_requirement = nil
    self.rarity_num_requirement = 0
    local rarityCondition = parsed_conditions[2]
    if rarityCondition~=nil then
        self.rarity_num_requirement = toInt(rarityCondition[2])
        self.rarity_requirement = tonumber(rarityCondition[1])
        if self.rarity_requirement~=nil and self.rarity_num_requirement>0 then
            self.rarity_limit:SetActive(true)
            self.rarity_img:LoadSprite(HeroUtils.GetRarityIconName(self.rarity_requirement, true))
            self.rarity_OK_img:SetActive(false)
            self.rarity_num:SetText("<color=red>".."0" .."</color>".. "/"..math.floor(self.rarity_num_requirement))
        else
            self.rarity_limit:SetActive(false)
        end
    else
        self.rarity_limit:SetActive(false)
    end

    self.star_requirements = 0
    self.star_requirements_num = 0
    local starRequire = parsed_conditions[3]
    if starRequire~=nil then
        self.star_requirements = toInt(starRequire[1])
        self.star_requirements_num = toInt(starRequire[2])
        if self.star_requirements>0 and self.star_requirements_num>0 then
            self.starNeed:SetRankIdSpecial(self.star_requirements)
            self.star_limit:SetActive(true)
            self.star_OK_img:SetActive(false)
            self.star_num:SetText("<color=red>".."0" .."</color>".. "/" ..math.floor(self.star_requirements_num))
        else
            self.star_limit:SetActive(false)
        end
    else
        self.star_limit:SetActive(false)
    end
    self.level_requirement = nil
    self.level_num_requirement = 0
    local levelRequire = parsed_conditions[4]
    if levelRequire~=nil then
        self.level_num_requirement = toInt(levelRequire[2])
        self.level_requirement = toInt(levelRequire[1])
        if self.level_num_requirement>0 and self.level_requirement>0 then
            self.level_txt:SetText(self.level_requirement)
            self.level_limit:SetActive(true)
            self.level_OK_img:SetActive(false)
            self.level_num:SetText("<color=red>".."0" .."</color>".. "/" .. math.floor(self.level_num_requirement))
        else
            self.level_limit:SetActive(false)
        end
    else
        self.level_limit:SetActive(false)
    end
    

    -- 获取符合条件的英雄列表
    self.heroList = self.ctrl:GetHeroList(taskInfo)
    self:ClearScroll()
    local count = table.count(self.heroList)
    if count > 0 then
        --self.empty_go:SetActive(false)
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        --self.empty_go:SetActive(true)
        self.scroll_view:SetActive(false)
    end
    self:RefreshSelectHero(taskInfo)
    --self:ShowTroopLine(MarchUtil.GetFormationStartPos(), taskInfo.pointId)
end

---选中的英雄有变更后的刷新
function UIFormationDispatchTaskView:RefreshSelectHero(taskInfo)
    self.u_i_hero_cell_small1:SetActive(false)
    self.u_i_hero_cell_small2:SetActive(false)
    self.u_i_hero_cell_small3:SetActive(false)

    if not taskInfo then
        taskInfo = DataCenter.ActDispatchTaskDataManager:GetSingleTaskByUuid(self.uuid)
    end
    
    --local cond1Num = 0  -- 这个职业英雄数
    --local cond2Num = 0  -- >=指定品质的英雄数
    --local cond3Num = 0  -- 星星总数
    --local cond4Num = 0  -- >=指定等级的英雄数
    local condNumTable = {0, 0, 0, 0}

    DataCenter.ActDispatchTaskDataManager:ParseTaskCondition(taskInfo)
    local parsed_conditions = taskInfo.cfg.parsed_conditions
    local cond1Param  -- ==指定职业
    local cond2Param  -- >=指定品质
    local cond3Param  -- >=星级
    local cond4Param  -- >=指定等级
    for k, v in pairs(parsed_conditions) do
        if k == 1 then
            cond1Param = v[1]
        elseif k == 2 then
            cond2Param = v[1]
        elseif k == 3 then
            cond3Param = v[1]
        elseif k == 4 then
            cond4Param = v[1]
        end
    end
    for i, v in pairs(self.selectedUUID) do
        if v ~= nil then
            local heroCell = self["u_i_hero_cell_small"..i]
            heroCell:SetActive(true)
            heroCell:SetData(v, self.clickHeroCellCallBack) -- 点击可取消上阵
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
            if heroData then
                if cond1Param and heroData.camp == cond1Param then
                    condNumTable[1] = condNumTable[1] + 1
                end
                if cond2Param and heroData.rarity <= cond2Param then
                    condNumTable[2] = condNumTable[2] + 1
                end
                if cond3Param then
                    local rankId = heroData:GetCurMilitaryRankId()
                    if rankId>=cond3Param then
                        condNumTable[3] = condNumTable[3]+1
                    end
                    
                end
                if cond4Param and heroData.level >= cond4Param then
                    condNumTable[4] = condNumTable[4] + 1
                end
            end
        end
    end
    local isStarFinish = false
    local isRarityFinish = false
    local isCampFinish = false
    local isLevelFinish = false
    if self.star_requirements~=nil and self.star_requirements>0 and self.star_requirements_num>0 then
        local num = condNumTable[3]
        if num >= self.star_requirements_num then
            isStarFinish = true
            self.star_OK_img:SetActive(true)
            self.star_num:SetText("<color=green>"..math.floor(num) .."</color>".. "/"..math.floor(self.star_requirements_num))
        else
            self.star_num:SetText("<color=red>"..math.floor(num) .."</color>".. "/"..math.floor(self.star_requirements_num))
            self.star_OK_img:SetActive(false)
        end
    else
        isStarFinish = true
    end
    if self.level_requirement~=nil and  self.level_num_requirement>0 then
        local num = condNumTable[4]
        if num >= self.level_num_requirement then
            isLevelFinish = true
            self.level_OK_img:SetActive(true)
            self.level_num:SetText("<color=green>"..math.floor(num) .."</color>".. "/"..math.floor(self.level_num_requirement))
        else
            self.level_OK_img:SetActive(false)
            self.level_num:SetText("<color=red>"..math.floor(num) .."</color>".. "/"..math.floor(self.level_num_requirement))
        end
        
    else
        isLevelFinish = true
    end

    if self.rarity_requirement~=nil and self.rarity_num_requirement~=nil then
        local num = condNumTable[2]
        if num>=self.rarity_num_requirement then
            isRarityFinish = true
            self.rarity_OK_img:SetActive(true)
            self.rarity_num:SetText("<color=green>"..math.floor(num) .."</color>".. "/"..math.floor(self.rarity_num_requirement))
        else
            self.rarity_OK_img:SetActive(false)
            self.rarity_num:SetText("<color=red>"..math.floor(num) .."</color>".. "/"..math.floor(self.rarity_num_requirement))
        end
    else
        isRarityFinish = true
    end
    if self.campNeed~=nil and self.camp_num>0 then
        isCampFinish = true
        local count = condNumTable[1]
        for i =1,#self.campNeedList do
            if i>count then
                isCampFinish =false
            end
            self.campNeedList[i]:SetIsFinishByCampIndex(i<=count)
        end
        if isCampFinish then
            self.rarity_num:SetText("<color=green>"..math.floor(count) .."</color>".. "/"..math.floor(#self.campNeedList))
            self.camp_ok_img:SetActive(true)
        else
            self.rarity_num:SetText("<color=red>"..math.floor(count) .."</color>".. "/"..math.floor(#self.campNeedList))
            self.camp_ok_img:SetActive(false)
        end
    else
        isCampFinish = true
    end
    self.isStarFinish = isStarFinish
    self.isRarityFinish = isRarityFinish
    self.isCampFinish = isCampFinish
    self.isLevelFinish = isLevelFinish
    local gray = (self.isStarFinish == false or self.isRarityFinish == false or self.isCampFinish == false or self.isLevelFinish ==false)
    CS.UIGray.SetGray(self.enter_btn.transform, gray, true)
end

function UIFormationDispatchTaskView:ClearContent()
    self.reward_content:RemoveComponents(RewardItem)
    if self.itemReqs~=nil then
        for k,v in pairs(self.itemReqs) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.itemReqs ={}
end

-- 刷新奖励
function UIFormationDispatchTaskView:RefreshReward(rewardList)
    self:ClearContent()
    if rewardList~=nil then
        local num =0
        for i = 1, table.length(rewardList) do
            --复制基础prefab，每次循环创建一次
            num = num+1
            self.itemReqs[i] = self:GameObjectInstantiateAsync(UIAssets.WorldPointRewardItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.reward_content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.reward_content:AddComponent(RewardItem,nameStr)
                cell:RefreshData(rewardList[i],true)
            end)
        end
    end
end

---看看目标uuid是否被选中
local function hasSelectUuid(uuids, uuid)
    if uuids and uuid then
        for i, v in pairs(uuids) do
            if v == uuid then
                 return true
            end
        end
    end
    return false
end

function UIFormationDispatchTaskView:OnCellMoveIn(itemObj, index)
    local uuid = self.heroList[index].uuid
    itemObj.name = uuid
    local cellItem = self.scroll_view:AddComponent(HeroBountySelectHeroItem, itemObj)
    cellItem:SetData(uuid, self.clickHeroCellCallBack)
    cellItem:SetActive(true)
    --检测是否要勾选
    cellItem:SetSelected(hasSelectUuid(self.selectedUUID, uuid))
end

function UIFormationDispatchTaskView:OnCellMoveOut(itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, HeroBountySelectHeroItem)
end

function UIFormationDispatchTaskView:OnClickHeroCell(transform, heroUuid)
    local emptyTable = {1, 2, 3}
    for i, v in pairs(self.selectedUUID) do
        emptyTable[i] = nil
        if v == heroUuid then
            -- 相同的取消
            self.selectedUUID[i] = nil
            local heroCell = self.scroll_view:GetComponent(tostring(heroUuid), HeroBountySelectHeroItem)
            if heroCell then
                heroCell:SetSelected(false)
            end
            self:RefreshSelectHero()
            return
        end
    end
    emptyTable = table.values(emptyTable)
    
    --走到这里说明没有一样的
    if #emptyTable > 0 then
        local heroCell = self.scroll_view:GetComponent(tostring(heroUuid), HeroBountySelectHeroItem)
        if heroCell then
            heroCell:SetSelected(true)
        end
        self.selectedUUID[emptyTable[1]] = heroUuid
        self:RefreshSelectHero()
    end
end
--
--function UIFormationDispatchTaskView:ShowTroopLine(startPos,endPos)
--    if self.troopLine ==nil and self.dragInstance==nil then
--        self.dragInstance = ResourceManager:InstantiateAsync(CS.GameDefines.EntityAssets.TroopLineDrag)
--        self.dragInstance:completed('+', function()
--            if self.dragInstance.isError then
--                return
--            end
--            self.dragInstance.gameObject:SetActive(true)
--            self.dragInstance.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
--            self.simpleAnim = self.dragInstance.gameObject:GetComponent(typeof(CS.SimpleAnimation))
--            if self.simpleAnim then
--                self.simpleAnim:Play("Default")
--            end
--            self.troopLine = self.dragInstance.gameObject:GetComponent(typeof(CS.WorldTroopLine))
--            if self.troopLine~=nil then
--                self.troopLine:SetDragPath(SceneUtils.TileIndexToWorld(startPos), SceneUtils.TileIndexToWorld(endPos))
--            end
--        end)
--    elseif self.troopLine~=nil then
--        self.troopLine:SetDragPath(SceneUtils.TileIndexToWorld(startPos), SceneUtils.TileIndexToWorld(endPos));
--    end
--end
--
--function UIFormationDispatchTaskView:HideTroopLine()
--    if self.simpleAnim then
--        self.simpleAnim:Play("Hide")
--        TimerManager:GetInstance():GetTimer(0.5, function()
--            if self.dragInstance~=nil then
--                self.dragInstance:Destroy()
--                self.dragInstance =nil
--            end
--        end,self,true,false,false)
--    else
--        if self.dragInstance~=nil then
--            self.dragInstance:Destroy()
--            self.dragInstance =nil
--        end
--    end
--    self.troopLine = nil
--end

function UIFormationDispatchTaskView:CalculateMarchTime(endIndex)
    local startPt = SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(), ForceChangeScene.World)
    local endPt = SceneUtils.IndexToTilePos(endIndex, ForceChangeScene.World)
    local dis = Vector2.Distance(startPt, endPt)
    local speed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k2") -- speed
    local time = math.ceil(dis * 1000 / speed)
    return time
end

function UIFormationDispatchTaskView:OnStartClick()
    if self.isStarFinish == true and self.isRarityFinish == true and self.isCampFinish == true and self.isLevelFinish ==true then
        --再次确认下状态
        local mgr = DataCenter.ActDispatchTaskDataManager
        local dispatchTask = mgr:GetSingleTaskByUuid(self.uuid)
        if dispatchTask and dispatchTask.completionTime == 0 then
            --判断行军数量
            local formationNum = 0
            local list = DataCenter.ArmyFormationDataManager:GetArmyFormationIdList()
            if list~=nil and #list>0 then
                for i =1,#list do
                    local showUnLock = true
                    local formationInfo = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(list[i])
                    local index = i
                    if formationInfo~=nil then
                        index = formationInfo.index
                        if index == 4 then
                            local hasMonthCard = DataCenter.MonthCardNewManager:CheckIfMonthCardActive()
                            if hasMonthCard == false then
                                if formationInfo then
                                    local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, formationInfo.uuid, LuaEntry.Player.allianceId)
                                    if march ==nil then
                                        showUnLock = false
                                    end
                                else
                                    showUnLock = false
                                end
                            end
                        end
                    else
                        showUnLock = false
                    end

                    if showUnLock == true then
                        formationNum = formationNum+1
                    end
                end
            end
            
            local maxMarch = tonumber(mgr:GetDispatchSetting('max_taskqueue'))
            maxMarch = maxMarch * formationNum
            if DataCenter.ActDispatchTaskDataManager:GetSingleTaskIngCount() >= maxMarch then
                UIUtil.ShowTipsId(461058)
            else
                SFSNetwork.SendMessage(MsgDefines.DispatchStart, self.uuid, table.values(self.selectedUUID), self:CalculateMarchTime(dispatchTask.pointId))
            end
        else
            UIUtil.ShowTipsId(461024)
        end
        self.ctrl:CloseSelf()
    else
        UIUtil.ShowTipsId(461060)
    end
end

function UIFormationDispatchTaskView:OnFastJoinClick()
    local isOpen = LuaEntry.Effect:GetGameEffect(EffectDefine.LW_DISPATCH_TASK_FASTJOIN_FUNCTION_OPEN)
    if isOpen < 1 then
        UIUtil.ShowTipsId(461061)
        return
    end
    -- 一键上阵,满足条件后更换
    local heroList, meetCondition = self.ctrl:GetRecommendHeroList(DataCenter.ActDispatchTaskDataManager:GetSingleTaskByUuid(self.uuid))
    if heroList and meetCondition then
        for i, v in ipairs(self.selectedUUID) do
            local heroCell = self.scroll_view:GetComponent(tostring(v), UIHeroCellSmall)
            if heroCell then
                heroCell:SetSelected(false)
            end
        end
        self.selectedUUID = heroList
        for i, v in ipairs(self.selectedUUID) do
            local heroCell = self.scroll_view:GetComponent(tostring(v), UIHeroCellSmall)
            if heroCell then
                heroCell:SetSelected(true)
            end
        end
        self:RefreshSelectHero()
    else
        UIUtil.ShowTipsId(461064)
    end
end

return UIFormationDispatchTaskView