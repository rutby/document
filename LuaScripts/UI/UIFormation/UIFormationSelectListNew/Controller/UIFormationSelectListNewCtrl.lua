---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/16 15:02
---
local UIFormationSelectListNewCtrl = BaseClass("UIFormationSelectListNewCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization

local WAIT_RALLY = MarchStatus.WAIT_RALLY
local IN_TEAM = MarchStatus.IN_TEAM

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIFormationSelectListNew)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

--formationType:1,行军；2,侦查
local function InitData(self, formationType, marchTargetType, pointIndex, uuid, index,backHome,rallyType,targetServerId,chooseCrossWormUuid)
    self.currentFormationUuid =0
    self.formationType = tonumber(formationType)or 1
    self.targetType = tonumber(marchTargetType) or -1
    self.targetPoint = tonumber(pointIndex) or -1
    self.targetUuid = tonumber(uuid) or 0
    self.timeIndex = -1
    self.autoBackHome = MarchUtil.GetAutoBackHomeState(self.targetType)
    self.directionWaitResult = false
    self.selectFormationUuid = 0
    self.targetServerId = tonumber(targetServerId)or -1
    self.rallyType = tonumber(rallyType) or nil
    self.chooseCrossWormUuid = tonumber(chooseCrossWormUuid) or -1
    if self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING then
        self.alMineMax = DataCenter.AllianceMineManager:GetAllianceMineSlotCountForConstruct(self.targetUuid)
    end
end

local function RefreshAutoBack(self)
    self.autoBackHome = MarchUtil.GetAutoBackHomeState(self.targetType)
end

local function InitScoutData(self)
    local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(BuildingTypes.FUN_BUILD_RADAR_CENTER, 0)
    self.InvesFormationUnlockLvs = {}
    local vecPara1 = string.split(levelTemplate.para1, "|")
    for i, v in ipairs(vecPara1) do
        local ver1 = string.split(v,";")
        if #ver1 >= 2 then
            self.InvesFormationUnlockLvs[tonumber(ver1[2])] = ver1[1]
        end
    end
end

local function GetAllScoutFormations(self)
    local formations = DataCenter.ArmyFormationDataManager:GetInvestigateFormationList()
    table.sort(formations, function(a, b)
        if a.index ~= b.index then
            return a.index < b.index
        else
            return false
        end
    end)

    return formations
end

local function GetInvesFormationUnlockLv(self, formationIndex)
    local unlockLv = self.InvesFormationUnlockLvs[formationIndex]
    return (unlockLv and unlockLv or 0)
end

local function GetInvesFormationInfoByIndex(self, tempIndex)
    local retParam = {}
    local tempFormationInfo = DataCenter.ArmyFormationDataManager:GetInvestigateFormationInfoByIndex(tempIndex)
    retParam.FormationInfo = tempFormationInfo
    if tempFormationInfo and tempFormationInfo.state == 1 then
        local marchInfo = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, tempFormationInfo.uuid, LuaEntry.Player.allianceId)
        retParam.MarchInfo =  marchInfo
    else
        retParam.MarchInfo = nil
    end
    return retParam
end

local function GetAllMarch(self)
    local allMarch = {}
    local allianceId = LuaEntry.Player.allianceId
    local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, allianceId)
    if selfMarch~=nil then
        table.walk(selfMarch,function (k,v)
            if v:GetMarchStatus() ~= MarchStatus.IN_TEAM then
                table.insert(allMarch,v)
            else
                local march = DataCenter.WorldMarchDataManager:GetAllianceMarchesInTeam(allianceId,v.teamUuid)
                if march~=nil then
                    table.insert(allMarch,march)
                end
            end
        end)
    end
    return allMarch
end

local function GetInvesDistance(self, targetPointID, formationIndex)
    local startPointID = self:GetScoutStartPoint(formationIndex)

    local distance = Vector3.Distance(SceneUtils.TileIndexToWorld(startPointID),SceneUtils.TileIndexToWorld(targetPointID))
    distance = distance / CS.SceneManager.World.TileSize
    return distance
end

local function GetScoutStartPoint(self, formationIndex)
    local startPointID = 0
    if formationIndex then
        local tempFormationInfo = self:GetInvesFormationInfoByIndex(formationIndex)
        local formationUuid = tempFormationInfo.FormationInfo.uuid
        local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, formationUuid, LuaEntry.Player.allianceId)
        if march~=nil then
            local troop = WorldTroopManager:GetInstance():GetTroop(march.uuid)
            if troop~=nil then
                startPointID = SceneUtils.WorldToTileIndex(troop:GetPosition())
            else
                startPointID =SceneUtils.WorldToTileIndex(march:GetMarchCurPos())
            end
        else
            startPointID = MarchUtil.GetFormationStartPos()
            
        end
    else
        startPointID = MarchUtil.GetFormationStartPos()
    end
    return startPointID
end

local function GetElecCost(self, targetPointID, formationIndex)
    local k1 = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k1") -- elec cost param
    local distance = self:GetInvesDistance(targetPointID, formationIndex)
    local k2_maxElec = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k2") -- elec cost max limit param
    local tempCost = distance * k1
    tempCost = math.ceil(math.min(k2_maxElec, tempCost))
    return tempCost
end


local function StartInvestigate(self, scoutType, targetUuid, pointId, formationUuid)
    local realPoint = pointId
    if scoutType == MarchTargetType.SCOUT_BUILDING then
        local pointInfo = DataCenter.WorldPointManager:GetBuildDataByUuid(targetUuid)
        if pointInfo then
            if pointInfo.itemId == BuildingTypes.FUN_BUILD_MAIN then
                scoutType = MarchTargetType.SCOUT_CITY
            else
                scoutType = MarchTargetType.SCOUT_BUILDING
            end
        end
    elseif scoutType == MarchTargetType.SCOUT_ALLIANCE_CITY then
        local worldPos = SceneUtils.TileIndexToWorld(pointId)
        worldPos.x = worldPos.x-6
        worldPos.z = worldPos.z-6
        realPoint = SceneUtils.WorldToTileIndex(worldPos)
    end

    local sfsObj = SFSObject.New()
    sfsObj:PutLong("uuid", formationUuid)
    local formationArray = SFSArray.New()
    sfsObj:PutSFSArray("formations", formationArray)
    local heroArray = SFSArray.New()
    sfsObj:PutSFSArray("heroInfos", heroArray)
    local dataObj = sfsObj
    local pos = MarchUtil.GetFormationStartPos()
    local curServerId = LuaEntry.Player:GetCurServerId()
    if CrossServerUtil:GetIsCrossServer() then
        local crossBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.WORM_HOLE_CROSS)
        if crossBuildData~=nil then
            if crossBuildData.server == curServerId then
                pos = crossBuildData.pointId
                MarchUtil.StartMarch(scoutType, realPoint, targetUuid, -1, 0, formationUuid, 1, dataObj,pos,curServerId)
            end
        end
        self:CloseSelf()
        return
    end
    MarchUtil.StartMarch(scoutType, realPoint, targetUuid, -1, 0, formationUuid, 1, dataObj,pos)
    self:CloseSelf()
end


local function GetRallyTimeList(self)
    return self.RallyTimeList
end

local function GetFormationListData(self)
    local oneData = {}
    oneData.curMarchNum = DataCenter.ArmyFormationDataManager:GetAlreadySetCountInArmyFormation()
    oneData.maxNum = FormationMaxNum
    oneData.list = {}
    for i = 1,FormationMaxNum do
        local formationInfo = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByIndex(i)
        if formationInfo~=nil then
            table.insert(oneData.list,formationInfo.uuid)
        else
            table.insert(oneData.list,0)
        end
        
    end
    return oneData
end
local function GetFormationItemData(self,uuid)
    local oneData = {}
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(uuid)
    local Player = LuaEntry.Player
    if formation~=nil then
        oneData.uuid = formation.uuid
        oneData.index = formation.index
        oneData.canMove = false
        oneData.stamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formation.uuid)
        local config = DataCenter.ArmyFormationDataManager:GetConfigData()
        if config~=nil then
            oneData.maxStamina = config.FormationStaminaMax
        end
        local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(Player.uid, formation.uuid, Player.allianceId)
        oneData.isMarch = formation.state
        oneData.power = 0
        oneData.startPos = 0
        oneData.isBattle =false
        oneData.useForm = false
        oneData.speed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k1")
        oneData.startTime =0
        oneData.endTime = 0
        oneData.serverId = -1
        oneData.stateImg = MarchUtil.GetMarchStateIconByType()
        if march~=nil then
            oneData.power = self:GetFormationPowerByUuid(formation.uuid)
            oneData.isMarch = 1
            if march:GetMarchType() == NewMarchType.ASSEMBLY_MARCH or march:GetMarchType() == NewMarchType.EXPLORE or march:GetMarchStatus() == WAIT_RALLY  or march:GetMarchStatus() == IN_TEAM  or march:GetMarchType() == NewMarchType.DIRECT_MOVE_MARCH then
                oneData.canMove = true
            end
            if march:GetMarchStatus()== IN_TEAM then
                local teamMarch = DataCenter.WorldMarchDataManager:GetAllianceMarchesInTeam(Player.allianceId, march.teamUuid)
                if teamMarch~=nil then
                    march = teamMarch
                else
                    local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(march.teamUuid)
                    if data and data.leaderMarchInfo then
                        march = data.leaderMarchInfo
                    end
                end
            end
            oneData.marchUuid = march.uuid
            oneData.isBattle = march.inBattle
            oneData.serverId = march.serverId
            oneData.speed = march.speed
            if march:GetMarchStatus() == MarchStatus.DESTROY_WAIT then
                oneData.isBattle = true
            end
            if march:GetMarchStatus() == MarchStatus.CHASING or march:GetMarchStatus() == MarchStatus.MOVING or march:GetMarchStatus() == MarchStatus.IN_WORM_HOLE or march:GetMarchStatus() == MarchStatus.COLLECTING or march:GetMarchStatus() == MarchStatus.CROSS_SERVER or march:GetMarchStatus() == MarchStatus.COLLECTING_ASSISTANCE then
                oneData.startTime = march.startTime
                oneData.endTime = march.endTime
            end
            local troop = WorldTroopManager:GetInstance():GetTroop(march.uuid)
            if troop~=nil then
                local point = SceneUtils.WorldToTileIndex(troop:GetPosition(),ForceChangeScene.World)
                oneData.startPos = point
            else
                oneData.startPos =SceneUtils.WorldToTileIndex(march:GetMarchCurPos(),ForceChangeScene.World)
            end
            oneData.stateImg = MarchUtil.GetMarchStateIconByType(march)
            oneData.maxhp = march:GetMaxHP()
            oneData.hp = march:GetHP()
            oneData.heroDataList ={}
            local heroData = formation:GetCurHeroes()
            if heroData~=nil and table.count(heroData)>0 then
                table.walksort(heroData,function (leftKey,rightKey)
                    return heroData[leftKey] < heroData[rightKey]
                end,function(k,v)
                    if k~=nil then
                        local heroOneData = {}
                        heroOneData.heroUuid = k
                        table.insert(oneData.heroDataList,heroOneData)
                    end
                end)
            end
        else
            oneData.startPos = MarchUtil.GetFormationStartPos()
            local formationForm = DataCenter.ArmyFormationDataManager:GetArmyFormInfoByUuid(uuid)
            if formationForm~=nil then
                local allHeroes = formationForm:GetCurHeroes()
                if table.count(allHeroes)>0 then
                    oneData.useForm = true
                end
            end
            if self.targetType == MarchTargetType.COLLECT or self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
                oneData.useForm = true
            end
            if oneData.useForm==false then
                if formation.state == ArmyFormationState.March then
                    local allHeroes = formation:GetCurHeroes()
                    if table.count(allHeroes)>0 then
                        oneData.useForm = true
                    end
                end
            end
            if oneData.useForm == true then
                oneData.power = self:GetFormationPowerByUuid(formation.uuid)
                oneData.heroDataList ={}
                local heroData = formation:GetCurHeroes()
                if heroData~=nil and table.count(heroData)>0 then
                    table.walksort(heroData,function (leftKey,rightKey)
                        return heroData[leftKey] < heroData[rightKey]
                    end,function(k,v)
                        if k~=nil then
                            local heroOneData = {}
                            heroOneData.heroUuid = k
                            table.insert(oneData.heroDataList,heroOneData)
                        end
                    end)
                end
            end
        end
        local refitData = DataCenter.GarageRefitManager:GetGarageRefitData(GarageBuildIds[formation.index])
        if refitData then
            oneData.level = refitData.level
        end
    end
    return oneData
end

local function OnEditClick(self,uuid,needAutoFix, destroyTimeIndex)
    if self.targetType >= 0 then
        local needFix = 0
        if needAutoFix == true then
            needFix = 1
        end
        self.selectFormationUuid = 0
        local data = self:GetFormationItemData(uuid)
        if data~=nil then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationTableNew,uuid,self.targetType,self.targetPoint,self.targetUuid,self.timeIndex,self.autoBackHome,data.startPos,self.rallyType,needFix,nil,nil,nil,self.directionWaitResult,self.targetServerId, destroyTimeIndex,self.chooseCrossWormUuid)
        end
    else
        --local needFix = 0
        --if needAutoFix == true then
        --    needFix = 1
        --end
        self.selectFormationUuid = 0
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationTableNew,uuid,-1,-1,0,-1,1,0,nil,0)
        --UIUtil.ShowTipsId(120090) 
    end
end

local function OnAtkClick(self,uuid, attackTimesIndex)
    if self.targetType >= 0 then
        local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, uuid,LuaEntry.Player.allianceId)
        if march~=nil then
            if march:GetMarchStatus() == MarchStatus.CHASING or march:GetMarchStatus() == MarchStatus.MOVING then
                if self.targetType ~= MarchTargetType.BACK_HOME then
                    --if LuaEntry.Effect:GetGameEffect(EffectDefine.ALLOW_DRAG_MARCH)<=0 then
                    --    UIUtil.ShowTipsId(300041)
                    --    return
                    --end
                end
            end
                --CS.SceneManager.World.MarchDataManager:StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.selectFormationUuid, self.autoBackHome)
            local oriSpeed = march.oriSpeed
            local newSpeed = march.speed
            local showWarning = false

            if oriSpeed~=nil and newSpeed~=nil and oriSpeed>0 and newSpeed>0 and oriSpeed~= newSpeed then
                if march:GetMarchStatus() == MarchStatus.CHASING or march:GetMarchStatus() == MarchStatus.MOVING or march:GetMarchStatus() == MarchStatus.BACK_HOME then
                    showWarning = true
                end
            end
            if showWarning ==true then
                UIUtil.ShowMessage(Localization:GetString("320823"),2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                    self:DoAttack(uuid,attackTimesIndex)
                    self:CloseSelf()
                end)
            else
                self:DoAttack(uuid,attackTimesIndex)
                self:CloseSelf()
            end
        end
    else
        UIUtil.ShowSingleTip(Localization:GetString("120090"))
        self:CloseSelf()
    end
end

local function DoAttack(self,uuid,attackTimesIndex)
    if self.targetType == MarchTargetType.RALLY_FOR_BOSS then
        local distance = LuaEntry.DataConfig:TryGetNum("world_auto_join_team", "k5")
        local data = self:GetFormationItemData(uuid)
        if data ~= nil then
            local distanceV3 = Vector3.Distance(SceneUtils.TileIndexToWorld(data.startPos,ForceChangeScene.World), SceneUtils.TileIndexToWorld(self.targetPoint,ForceChangeScene.World))
            if distanceV3 > distance * 2 then
                UIUtil.ShowMessage(Localization:GetString("110203"), 2, GameDialogDefine.CANCEL, "400027", nil, function()
                    self:ChangeMarchByType(uuid)
                end)
                return
            end
        end
    end
    if self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType == MarchTargetType.RALLY_FOR_BOSS then
        local distance = LuaEntry.DataConfig:TryGetNum("world_auto_join_team", "k6")
        local data = self:GetFormationItemData(uuid)
        if data~=nil then
            local targetPoint =0
            local teamInfo = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(self.targetUuid)
            if teamInfo~=nil then
                targetPoint = teamInfo.targetPointId
                if targetPoint>0 then
                    local distanceV3 = Vector3.Distance(SceneUtils.TileIndexToWorld(data.startPos,ForceChangeScene.World),SceneUtils.TileIndexToWorld(targetPoint,ForceChangeScene.World))
                    if distanceV3>distance*2 then
                        UIUtil.ShowMessage(Localization:GetString("110204"), 2, GameDialogDefine.CANCEL, "400027", nil, function()
                            self:ChangeMarchByType(uuid)
                        end)
                        return
                    end
                end
                
            end
        end
    end
    if self.targetType == MarchTargetType.TRANSPORT_ACT_BOSS then
        local time = 0
        if LuaEntry.Player.serverType == ServerType.NORMAL then
            time = self:GetTimeFormCurPosToTarPos(uuid)
        end
        
        local limitTime = LuaEntry.DataConfig:TryGetNum("ship_boss", "k13")
        local showFlag = Setting:GetPrivateInt("SHOW_TRANS_WARN", 1)
        if time < limitTime and showFlag == 1 then
            UIUtil.ShowSecondMessage(Localization:GetString("100378"), Localization:GetString("302194"), 2, "", "", function()
                self:ChangeMarchByType(uuid)
            end, function()
                Setting:SetPrivateInt("SHOW_TRANS_WARN", 0)
            end)
        else
            self:ChangeMarchByType(uuid)
        end
    elseif self.targetType ==  MarchTargetType.ATTACK_ALLIANCE_CITY then
        self:ChangeMarchByType(uuid, attackTimesIndex)
    elseif self.targetType ==  MarchTargetType.TRAIN_DESERT and LuaEntry.Effect:GetGameEffect(EffectDefine.SEASON_WEEK_CARD_DESERT_SWEEP_FIELD) ~= 0 then
        self:ChangeMarchByType(uuid, attackTimesIndex)
    else
        self:ChangeMarchByType(uuid)
    end
end

local function OnCheckTime(self,uuid, destroyTimeIndex)
    local time = 0
    if self.targetType == MarchTargetType.RALLY_FOR_BOSS then
        local distance = LuaEntry.DataConfig:TryGetNum("world_auto_join_team", "k5")
        local data = self:GetFormationItemData(uuid)
        if data ~= nil then
            local distanceV3 = Vector3.Distance(SceneUtils.TileIndexToWorld(data.startPos,ForceChangeScene.World), SceneUtils.TileIndexToWorld(self.targetPoint,ForceChangeScene.World))
            if distanceV3 > distance * 2 then
                UIUtil.ShowMessage(Localization:GetString("110203"), 2, GameDialogDefine.CANCEL, "400027", nil, function()
                    self:OnCreateClick(uuid, destroyTimeIndex)
                end)
                return
            end
        end
    end
    if self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType == MarchTargetType.RALLY_FOR_BOSS then
        local distance = LuaEntry.DataConfig:TryGetNum("world_auto_join_team", "k6")
        local data = self:GetFormationItemData(uuid)
        if data~=nil then
            local targetPoint =0
            local teamInfo = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(self.targetUuid)
            if teamInfo~=nil then
                targetPoint = teamInfo.targetPointId
                if targetPoint>0 then
                    local distanceV3 = Vector3.Distance(SceneUtils.TileIndexToWorld(data.startPos,ForceChangeScene.World),SceneUtils.TileIndexToWorld(targetPoint,ForceChangeScene.World))
                    if distanceV3>distance*2 then
                        UIUtil.ShowMessage(Localization:GetString("110204"), 2, GameDialogDefine.CANCEL, "400027", nil, function()
                            self:OnCreateClick(uuid, destroyTimeIndex)
                        end)
                        return
                    end
                end
                
            end
        end
    end
    
    if LuaEntry.Player.serverType == ServerType.NORMAL then
        time = self:GetTimeFormCurPosToTarPos(uuid)
    end
    --时间大于20分钟时
    if self.targetType == MarchTargetType.TRANSPORT_ACT_BOSS then
        local limitTime = LuaEntry.DataConfig:TryGetNum("ship_boss", "k13")
        local showFlag = Setting:GetPrivateInt("SHOW_TRANS_WARN", 1)
        if time < limitTime and showFlag == 1 then
            UIUtil.ShowSecondMessage(Localization:GetString("100378"), Localization:GetString("302194"), 2, "", "", function()
                self:OnCreateClick(uuid)
            end, function()
                Setting:SetPrivateInt("SHOW_TRANS_WARN", 0)
            end)
        else
            self:OnCreateClick(uuid)
        end
    elseif self.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS then
        self:OnCreateClick(uuid)
    elseif time > 1200 then
        local state = DataCenter.ArmyFormationDataManager:GetConfirmFlag()
        if state then
            UIUtil.ShowSecondMessage(Localization:GetString("100378"), Localization:GetString("120997"), 2, "", "", function()
                self:OnCreateClick(uuid, destroyTimeIndex)
            end, function()
                DataCenter.ArmyFormationDataManager:SetConfirmFlag(false)
            end)
        else
            self:OnCreateClick(uuid, destroyTimeIndex)
        end
    else
        
        self:OnCreateClick(uuid, destroyTimeIndex)
    end
end

local function OnCreateClick(self,uuid, destroyTimeIndex)
    if self.targetType >= 0 then
        if self:CheckCanBattle(uuid) then
            local showGuide = self.directionWaitResult
            local targetMonsterLevel = 0
            if self.targetType~=MarchTargetType.STATE and self.targetType~=MarchTargetType.SCOUT_ALLIANCE_CITY 
                    and self.targetType~=MarchTargetType.SCOUT_ARMY_COLLECT and self.targetType~=MarchTargetType.SCOUT_BUILDING 
                    and self.targetType~=MarchTargetType.SCOUT_CITY
                    and self.targetType~= MarchTargetType.SCOUT_TROOP and self.targetType ~= MarchTargetType.SCOUT_ALLIANCE_BUILDING 
                    and self.targetType ~= MarchTargetType.SCOUT_DRAGON_BUILDING and self.targetType ~= MarchTargetType.SCOUT_ACT_ALLIANCE_MINE 
            then
                local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(uuid)
                if formation~=nil then
                    if self.targetType ~= MarchTargetType.ATTACK_MONSTER or showGuide == false then
                        local canAddNum = MarchUtil.GetCanAddHeroNum(formation:GetCurHeroes(), formation.index)
                        if canAddNum > 0 then
                            local show = Setting:GetPrivateInt("SHOW_ADD_HERO", 1)
                            if show <= 0 then
                                UIUtil.ShowSecondMessage(Localization:GetString("121006"), Localization:GetString("121007"), 1, 121008, "", function()
                                    self:OnEditClick(uuid, false)
                                end, function(needSellConfirm)
                                    if needSellConfirm == false then
                                        Setting:SetPrivateInt("SHOW_ADD_HERO", 1)
                                    else
                                        Setting:SetPrivateInt("SHOW_ADD_HERO", 0)
                                    end
                                end)
                                if showGuide == true then
                                    EventManager:GetInstance():Broadcast(EventId.StartAttackMonsterWithoutMsgTip, 0)
                                end
                                return
                            end
                        end
                        if self.targetType ~= MarchTargetType.COLLECT and self.targetType ~= MarchTargetType.BUILD_ALLIANCE_BUILDING and self.targetType ~= MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE and self.targetType ~= MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
                            local k5 = LuaEntry.DataConfig:TryGetNum("res_lack", "k5")
                            local heroUuid,targetHeroUuid = DataCenter.ArmyFormationDataManager:GetFormationHeroCanChangeHigherUuid(uuid)
                            if DataCenter.BuildManager.MainLv<=k5 and heroUuid~=nil and heroUuid~=0 and targetHeroUuid~=nil and targetHeroUuid~=0 then
                                local needGuide = DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.ClickMarchNeedChangeHero, SaveGuideDoneValue)
                                UIUtil.ShowMessage(Localization:GetString("104245"), 1, 121008,"", function()
                                    if needGuide then
                                        local data = self:GetFormationItemData(uuid)
                                        if data~=nil then
                                            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationTableNew,uuid,self.targetType,self.targetPoint,self.targetUuid,self.timeIndex,
                                                    self.autoBackHome,data.startPos,self.rallyType,false,heroUuid,targetHeroUuid,nil,self.directionWaitResult,self.targetServerId, destroyTimeIndex,self.chooseCrossWormUuid)
                                        end
                                        self:CloseSelf()
                                    else
                                        self:OnEditClick(uuid, false)
                                    end
                                end)
                                if showGuide == true then
                                    EventManager:GetInstance():Broadcast(EventId.StartAttackMonsterWithoutMsgTip, 0)
                                end
                                return
                            end
                        else
                            local heroList = formation:GetCurHeroes()
                            local useFormHeroList = {}
                            local useNoCollectHero = false
                            local fromFormList = {}
                            for k,v in pairs(heroList) do
                                local patternData = DataCenter.ArmyFormationDataManager:GetFormationFormDataByHeroUuid(k)
                                if patternData~=nil and patternData.uuid ~= uuid then
                                    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                                    if heroData~=nil then
                                        fromFormList[patternData.index] = 1
                                        local heroName = string.format("<color=%s>%s</color>", HeroUtils.GetRarityColorStr(heroData.rarity), heroData:GetName())
                                        table.insert(useFormHeroList,heroName)
                                    end
                                end
                                if #useFormHeroList<=0 and useNoCollectHero == false then
                                    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                                    if heroData~=nil then
                                        local id = heroData.heroId
                                        local tags = HeroUtils.GetTagsByHeroId(id)
                                        local isCollectHero = false
                                        for a,b in pairs(tags) do
                                            if b == 13 then --采集类英雄
                                                isCollectHero = true
                                            end
                                        end
                                        if isCollectHero or heroData.rarity>=3 then

                                        else
                                            useNoCollectHero = true
                                        end
                                    end
                                end
                            end
                            if #useFormHeroList>0 then
                                local formStr = ""
                                local length = table.count(fromFormList)
                                local num = 0
                                for p,q in pairs(fromFormList) do
                                    num = num+1
                                    if num<length then
                                        formStr = formStr..Localization:GetString("302254")..p..","
                                    else
                                        formStr = formStr..Localization:GetString("302254")..p
                                    end
                                end
                                num = 0
                                local str = Localization:GetString("105085",(Localization:GetString("302254")..formation.index))
                                for a,b in pairs(useFormHeroList) do
                                    num = num+1
                                    if num<#useFormHeroList then
                                        str = str..b..","
                                    else
                                        str = str..b
                                    end
                                end
                                UIUtil.ShowMessage(str,2,"","", function()
                                    MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,true,self.targetServerId, destroyTimeIndex,self.chooseCrossWormUuid)
                                    self:CloseSelf()
                                end, function()
                                end)
                                return
                            end
                            if useNoCollectHero == true then
                                local show = Setting:GetPrivateInt("SHOW_NOT_COLLECT_HERO", 0)
                                if show <= 0 then
                                    UIUtil.ShowSecondMessage(Localization:GetString("121006"), Localization:GetString("110328"), 2, "", "", function()
                                        MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,true,self.targetServerId, destroyTimeIndex,self.chooseCrossWormUuid)
                                        self:CloseSelf()
                                    end, function(needSellConfirm)
                                        if needSellConfirm == false then
                                            Setting:SetPrivateInt("SHOW_NOT_COLLECT_HERO", 1)
                                        else
                                            Setting:SetPrivateInt("SHOW_NOT_COLLECT_HERO", 0)
                                        end
                                    end,nil,nil,nil,Localization:GetString("110329"))
                                    return
                                end
                            end
                        end
                    end

                    if self.targetType == MarchTargetType.ATTACK_MONSTER then
                        local needShow  = Setting:GetPrivateInt("SHOW_ADD_SOLDIER",0)
                        if needShow<=0 then
                            local totalPower = MarchUtil.GetFormationPower(formation:GetCurHeroes(),formation.soldiers,formation.index,MarchUtil.GetCampAddParam(formation:GetCurHeroes()))
                            local targetPower = 0
                            local targetLevel= 0
                            local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(self.targetUuid)
                            local marchInfo = nil
                            if pointInfo~=nil then
                                marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
                            end
                            local isCheckPower = true
                            if marchInfo~=nil then
                                if marchInfo.type == NewMarchType.CHALLENGE_BOSS or marchInfo.type == NewMarchType.PUZZLE_BOSS then
                                    isCheckPower = false
                                end
                                targetPower = DataCenter.MonsterTemplateManager:GetRecommendPower(marchInfo.monsterId)
                                local level = DataCenter.MonsterTemplateManager:GetTableValue(marchInfo.monsterId,"level")
                                local power_tip = DataCenter.MonsterTemplateManager:GetTableValue(marchInfo.monsterId,"power_tip")
                                targetLevel = tonumber(level)
                                targetMonsterLevel = targetLevel
                                if power_tip ==1 then
                                    targetPower = 0
                                end
                            end
                            if isCheckPower then
                                local percent = (totalPower-targetPower)/math.max(1,targetPower)
                                if percent<0 then
                                    local k2 = LuaEntry.DataConfig:TryGetNum("res_lack", "k2")
                                    local configOpenState = LuaEntry.DataConfig:CheckSwitch("detect_monster")
                                    if configOpenState then
                                        UIUtil.ShowMessage(Localization:GetString("121010"),1,nil,nil,nil, nil,function(needSellConfirm)
                                            if needSellConfirm== false then
                                                Setting:SetPrivateInt("SHOW_ADD_SOLDIER",1)
                                            else
                                                Setting:SetPrivateInt("SHOW_ADD_SOLDIER",0)
                                            end
                                        end,121009)
                                    elseif LuaEntry.Player.pveLevel<=k2 then
                                        --UIUtil.ShowTipsId(121010)
                                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationLackPower,{anim= true,isBlur = true},targetLevel,uuid,totalPower,targetPower)
                                        self:CloseSelf()
                                    else
                                        UIUtil.ShowSecondMessage(Localization:GetString("121009"),Localization:GetString("121010"),1,150122,"", function()
                                            MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,true,self.targetServerId,-1,self.chooseCrossWormUuid)
                                        end, function(needSellConfirm)
                                            if needSellConfirm== false then
                                                Setting:SetPrivateInt("SHOW_ADD_SOLDIER",1)
                                            else
                                                Setting:SetPrivateInt("SHOW_ADD_SOLDIER",0)
                                            end
                                        end)
                                    end
                                    if showGuide == true then
                                        EventManager:GetInstance():Broadcast(EventId.StartAttackMonsterWithoutMsgTip,0)
                                    end
                                    return
                                end
                            end
                        end
                    end

                    if self.targetType == MarchTargetType.ATTACK_DESERT or self.targetType ==  MarchTargetType.TRAIN_DESERT then
                        local needShow  = Setting:GetPrivateInt("UIShowHeroWarning",0)
                        if needShow<=0 then
                            local heroUuid = 0
                            local heroName = ""
                            local heroNameList = {}
                            local isReachBreakLimit = false
                            local isReachLevelLimit = false
                            local targetType = self.targetType
                            local timeIndex = destroyTimeIndex
                            local heroDic = formation:GetCurHeroes()
                            for k,v in pairs(heroDic) do
                                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                                if heroData~=nil then
                                    if heroUuid==0 and isReachBreakLimit == false then
                                        if heroData:IsReachBreakLimit() == true then
                                            isReachBreakLimit = true
                                            heroUuid = k
                                        end
                                    end
                                    if heroData:IsReachBreakLimit() == true then
                                        table.insert(heroNameList,heroData:GetName())
                                    end
                                end
                            end
                            if heroUuid~=0 and (isReachBreakLimit == true or isReachLevelLimit == true) then
                                local total = #heroNameList
                                local num = 0
                                table.walk(heroNameList,function(k,v)
                                    num = num+1
                                    if num<total then
                                        heroName = heroName.."<color=#ff0000>"..v.."</color>"..","
                                    else
                                        heroName = heroName.."<color=#ff0000>"..v.."</color>"
                                    end
                                end)
                                local content = Localization:GetString("161022",heroName)
                                UIUtil.ShowSecondMessage(Localization:GetString("100378"),content, 2, "161030", "161023",function()
                                    MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,true,self.targetServerId,timeIndex,self.chooseCrossWormUuid)
                                end,function(needSellConfirm)
                                    if needSellConfirm== false then
                                        Setting:SetPrivateInt("UIShowHeroWarning",1)
                                    else
                                        Setting:SetPrivateInt("UIShowHeroWarning",0)
                                    end
                                end, function()
                                    if isReachBreakLimit == true then
                                        local heroList = {}
                                        table.insert(heroList,heroUuid)
                                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, 1, heroUuid, heroList)
                                    elseif isReachLevelLimit == true then
                                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance)
                                    end
                                end)
                                return
                            end
                        end
                    end
                end
                
            end
            --参与集结时判断下是否满足条件，不满足弹个提示
            if self.targetType == MarchTargetType.JOIN_RALLY then
                local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(self.targetUuid)
                local pow = DataCenter.MonsterTemplateManager:GetRecommendPower(tonumber(data.targetUid)) / data.assemblyMarchMax * 0.5
                local selfPow = self:GetFormationPowerByUuid(uuid)
                if pow > selfPow then
                    UIUtil.ShowMessage(Localization:GetString("141079"),2,"","", function()
                        if self:NeedTakeArmy() == false then
                            MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,false,self.targetServerId,-1,self.chooseCrossWormUuid)
                        else
                            MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,true,self.targetServerId,-1,self.chooseCrossWormUuid)
                        end
                        self:CloseSelf()
                    end)
                    return
                end
            end
            if self:NeedTakeArmy() == false then
                MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,false,self.targetServerId,-1,self.chooseCrossWormUuid)
            else
                local data = DataCenter.RadarCenterDataManager:GetDetectEventInfoByPointId(self.targetPoint)
                if data ~= nil then
                end
                if self.targetType == MarchTargetType.ATTACK_MONSTER then
                    if showGuide == true then
                        EventManager:GetInstance():Broadcast(EventId.StartAttackMonsterWithoutMsgTip,1)
                    end
                end
                if self.targetType == MarchTargetType.TRAIN_DESERT then
                    local num = 1
                    if LuaEntry.Effect:GetGameEffect(EffectDefine.SEASON_WEEK_CARD_DESERT_SWEEP_FIELD) ~= 0 then
                        num = destroyTimeIndex
                    end
                    MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,true,self.targetServerId, num,self.chooseCrossWormUuid)
                else
                    MarchUtil.SendCreateMarchMessage(uuid,self.targetType, self.targetPoint, self.targetUuid,self.timeIndex,self.autoBackHome,true,self.targetServerId, destroyTimeIndex,self.chooseCrossWormUuid)
                end
                
            end
            --
            --local hasHero = false
            --local hasSolider = false
            --local curSoldiers ={}
            --local curHeroes = {}
            --local pos = 0
            --local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.selectFormationUuid)
            --if formation~=nil then
            --    curSoldiers = formation.soldiers
            --    curHeroes =  formation.heroes
            --    if self:NeedTakeArmy() == false then
            --        curSoldiers = {}
            --    end
            --    local tempFormationTable = {}
            --    tempFormationTable.uuid = formation.uuid
            --    tempFormationTable.index = formation.index
            --    tempFormationTable.soldiers = curSoldiers
            --    tempFormationTable.ownerUid = LuaEntry.Player.uid
            --    tempFormationTable.heroes = curHeroes
            --    DataCenter.ArmyFormationDataManager:RefreshFormationModelToJson(tempFormationTable)
            --
            --    table.walk(curSoldiers,function(k,v)
            --        if v>0 then
            --            hasSolider = true
            --        end
            --    end)
            --    table.walk(curHeroes,function(k,v)
            --        if k~=0 then
            --            hasHero = true
            --        end
            --    end)
            --    if hasHero and (hasSolider or self:NeedTakeArmy() == false) then
            --        local sfsObj = SFSObject.New()
            --        sfsObj:PutLong("uuid", self.selectFormationUuid)
            --        local formationArray = SFSArray.New()
            --        table.walk(curSoldiers,function (k,v)
            --            local obj = SFSObject.New()
            --            obj:PutUtfString("armyId",k)
            --            obj:PutInt("count", v)
            --            formationArray:AddSFSObject(obj)
            --        end)
            --
            --        sfsObj:PutSFSArray("formations", formationArray)
            --
            --        local heroArray = SFSArray.New()
            --        table.walk(curHeroes,function (k,v)
            --            local obj = SFSObject.New()
            --            obj:PutLong("heroUuid",k)
            --            obj:PutInt("index", v)
            --            heroArray:AddSFSObject(obj)
            --        end)
            --        sfsObj:PutSFSArray("heroInfos", heroArray)
            --        local dataObj = sfsObj:ToBinary()
            --        local buildId = MarchUtil.GetFormationBuildNameByIndex(formation.index)
            --        local buildList = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(buildId)
            --        if buildList~=nil and buildList.Count > 0 and buildList[0]~=nil then
            --            pos = buildList[0].pointId
            --        else
            --            local mainBuildList = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(BuildingTypes.FUN_BUILD_MAIN)
            --            if mainBuildList~=nil and mainBuildList.Count > 0 and mainBuildList[0]~=nil then
            --                pos = mainBuildList[0].pointId
            --
            --            end
            --        end
            --        
            --    else
            --        UIUtil.ShowTipsId(GameDialogDefine.ADD_SOLDIER) 
            --    end
            --end
        end
    else
        UIUtil.ShowTipsId(120090)
    end
    self:CloseSelf()
end

local function NeedTakeArmy(self)
    return self.targetType ~= MarchTargetType.EXPLORE
end

local function ChangeMarchByType(self,formationUuid, attackTimesIndex)
    if self.targetType>-1 then
        local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, formationUuid,LuaEntry.Player.allianceId)
        if march~=nil then
            if march:GetIsBroken() == true then
                UIUtil.ShowTipsId(120003)
                return
            end
            local marchUuid = march.uuid
            if self.targetType == MarchTargetType.ATTACK_MONSTER then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local info = DataCenter.WorldPointManager:GetPointInfoByUuid(self.targetUuid)
                if info~=nil then
                    MarchUtil.OnAttackMonster(marchUuid,info,curStamina,nil,self.autoBackHome, self.directionWaitResult)
                end
            elseif self.targetType == MarchTargetType.ATTACK_ARMY then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local info = DataCenter.WorldMarchDataManager:GetMarch(self.targetUuid)
                if info~=nil then
                    MarchUtil.OnAttackArmy(marchUuid,info,curStamina)
                end
            elseif self.targetType == MarchTargetType.SAMPLE then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetSamplePointInfoByIndex(self.targetPoint)
                if pointInfo~=nil then
                    if pointInfo~=nil then
                        MarchUtil.OnCollectSimple(marchUuid,pointInfo,curStamina)
                    end
                end
            elseif self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.targetPoint)
                if pointInfo~=nil then
                    if pointInfo~=nil then
                        MarchUtil.OnAttackCollectBuild(marchUuid,pointInfo,curStamina)
                    end
                end
            elseif self.targetType == MarchTargetType.ASSISTANCE_BUILD then
                local pointInfo = DataCenter.WorldPointManager:GetBuildDataByPointIndex(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAssistanceBuild(marchUuid,pointInfo)
                end
            elseif self.targetType == MarchTargetType.ASSISTANCE_CITY then
                local pointInfo = DataCenter.WorldPointManager:GetBuildDataByPointIndex(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAssistanceOtherCity(marchUuid,pointInfo)
                end
            elseif self.targetType == MarchTargetType.ASSISTANCE_DESERT then
                MarchUtil.OnAssistanceDesert(marchUuid,self.targetPoint,self.targetUuid,false)
            elseif self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY then
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAssistanceAllianceCity(marchUuid,pointInfo)
                end
            elseif self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING then
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAssistanceAllianceBuild(marchUuid,pointInfo)
                end
            elseif self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(self.targetUuid)
                if pointInfo~=nil then
                    attackTimesIndex = attackTimesIndex or 1
                    MarchUtil.OnAttackAllianceCity(marchUuid,pointInfo,curStamina, nil,attackTimesIndex)
                end
            elseif self.targetType == MarchTargetType.ATTACK_BUILDING then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetBuildDataByPointIndex(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAttackOtherBuild(marchUuid,pointInfo,curStamina)
                end
            elseif self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAttackAllianceBuild(marchUuid,pointInfo,curStamina)
                end
            elseif self.targetType == MarchTargetType.ATTACK_DRAGON_BUILDING then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAttackDragonBuild(marchUuid,pointInfo,curStamina)
                end
            elseif self.targetType == MarchTargetType.ASSISTANCE_DRAGON_BUILDING then
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAssistanceDragonBuild(marchUuid,pointInfo)
                end
            elseif self.targetType == MarchTargetType.TRIGGER_DRAGON_BUILDING then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnTriggerDragonBuild(marchUuid,pointInfo,curStamina)
                end
            elseif self.targetType == MarchTargetType.PICK_SECRET_KEY then
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnPickSecretKey(marchUuid,pointInfo)
                end
            elseif self.targetType == MarchTargetType.TAKE_SECRET_KEY then
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnTakeSecretKey(marchUuid,pointInfo)
                end
            elseif self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAttackActAllianceBuild(marchUuid,pointInfo,curStamina)
                end
            elseif self.targetType == MarchTargetType.ATTACK_CITY or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetBuildDataByPointIndex(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnAttackOtherCity(marchUuid,pointInfo,curStamina,self.targetType)
                end
            elseif self.targetType == MarchTargetType.EXPLORE then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetExplorePointInfoByIndex(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnExplore(marchUuid,pointInfo,curStamina)
                end
            elseif self.targetType == MarchTargetType.PICK_GARBAGE then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local pointInfo = DataCenter.WorldPointManager:GetGarbagePointInfoByIndex(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnCollectGarbage(marchUuid,pointInfo,curStamina)
                end
            elseif self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnTargetAllianceMine(marchUuid, pointInfo,self.targetType)
                end
            elseif self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
                local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnCollectActAllianceBuild(marchUuid, pointInfo,self.targetType)
                end
            elseif self.targetType == MarchTargetType.GO_WORM_HOLE then
                UIUtil.ShowTipsId(143611)
            elseif self.targetType == MarchTargetType.CROSS_SERVER_WORM then
                MarchUtil.OnGotoCrossServerWormHole(marchUuid,false,self.targetServerId)
            elseif self.targetType == MarchTargetType.BUILD_WORM_HOLE then
                local pointInfo = DataCenter.WorldPointManager:GetBuildDataByPointIndex(self.targetPoint)
                if pointInfo~=nil then
                    MarchUtil.OnBuildWormHole(marchUuid,pointInfo)
                end
            elseif self.targetType == MarchTargetType.COLLECT then
                local collectPoint =DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.targetPoint)
                if collectPoint~=nil then
                    MarchUtil.OnGotoCollect(marchUuid,collectPoint,self.targetPoint,false)
                end
            elseif self.targetType == MarchTargetType.ATTACK_DESERT then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                local needShow  = Setting:GetPrivateInt("UIShowHeroWarning",0)
                if needShow<=0 then
                    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
                    if formation~=nil then
                        local heroUuid = 0
                        local heroName = ""
                        local heroNameList = {}
                        local isReachBreakLimit = false
                        local isReachLevelLimit = false
                        local targetPoint = self.targetPoint
                        local heroDic = formation:GetCurHeroes()
                        for k,v in pairs(heroDic) do
                            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                            if heroData~=nil then
                                if heroUuid==0 and isReachBreakLimit == false then
                                    if heroData:IsReachBreakLimit() == true then
                                        isReachBreakLimit = true
                                        heroUuid = k
                                    end
                                end
                                if heroData:IsReachBreakLimit() == true then
                                    table.insert(heroNameList,heroData:GetName())
                                end
                            end
                        end
                        if heroUuid~=0 and (isReachBreakLimit == true or isReachLevelLimit == true) then
                            local total = #heroNameList
                            local num = 0
                            table.walk(heroNameList,function(k,v)
                                num = num+1
                                if num<total then
                                    heroName = heroName.."<color=#ff0000>"..v.."</color>"..","
                                else
                                    heroName = heroName.."<color=#ff0000>"..v.."</color>"
                                end
                            end)
                            local content = Localization:GetString("161022",heroName)
                            UIUtil.ShowSecondMessage(Localization:GetString("100378"),content, 2, "161030", "161023",function()
                                MarchUtil.OnAttackDesert(marchUuid,targetPoint,curStamina,false)
                            end,function(needSellConfirm)
                                if needSellConfirm== false then
                                    Setting:SetPrivateInt("UIShowHeroWarning",1)
                                else
                                    Setting:SetPrivateInt("UIShowHeroWarning",0)
                                end
                            end, function()
                                if isReachBreakLimit == true then
                                    local heroList = {}
                                    table.insert(heroList,heroUuid)
                                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, 1, heroUuid, heroList)
                                elseif isReachLevelLimit == true then
                                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance)
                                end
                            end)
                            return
                        end
                    end
                end
                MarchUtil.OnAttackDesert(marchUuid,self.targetPoint,curStamina,false)
            elseif self.targetType == MarchTargetType.JOIN_RALLY then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(formationUuid)
                --参与集结时判断下是否满足条件，不满足弹个提示
                local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(self.targetUuid)
                local pow = DataCenter.MonsterTemplateManager:GetRecommendPower(tonumber(data.targetUid)) / data.assemblyMarchMax * 0.5
                local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
                if formation~=nil then
                    local totalPower = MarchUtil.GetFormationPower(formation:GetCurHeroes(),formation.soldiers,formation.index,MarchUtil.GetCampAddParam(formation:GetCurHeroes()))
                    if pow > totalPower then
                        UIUtil.ShowMessage(Localization:GetString("141079"),2,"","", function()
                            MarchUtil.OnJoinRally(marchUuid,self.rallyType,self.targetUuid,self.targetPoint,curStamina)
                        end)
                        return
                    end
                end
                MarchUtil.OnJoinRally(marchUuid,self.rallyType,self.targetUuid,self.targetPoint,curStamina)
            elseif self.targetType == MarchTargetType.STATE then
                MarchUtil.OnStation(marchUuid,self.targetPoint)
            else
                if self.targetType == MarchTargetType.TRAIN_DESERT then
                    local time = 1
                    local value = LuaEntry.Effect:GetGameEffect(EffectDefine.SEASON_WEEK_CARD_DESERT_SWEEP_FIELD)
                    if value ~= 0 then
                        time = attackTimesIndex
                    end
                    local needShow  = Setting:GetPrivateInt("UIShowHeroWarning",0)
                    if needShow<=0 then
                        local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
                        if formation~=nil then
                            local heroUuid = 0
                            local heroName = ""
                            local heroNameList = {}
                            local isReachBreakLimit = false
                            local isReachLevelLimit = false
                            local targetPoint = self.targetPoint
                            local targetType = self.targetType
                            local targetUuid = self.targetUuid
                            local timeIndex = self.timeIndex
                            local selectFormationUuid = self.selectFormationUuid
                            local autoBackHome = self.autoBackHome
                            local targetServerId = self.targetServerId
                            local chooseCrossWormUuid = self.chooseCrossWormUuid
                            local heroDic = formation:GetCurHeroes()
                            for k,v in pairs(heroDic) do
                                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                                if heroData~=nil then
                                    if heroUuid==0 and isReachBreakLimit == false then
                                        if heroData:IsReachBreakLimit() == true then
                                            isReachBreakLimit = true
                                            heroUuid = k
                                        end
                                    end
                                    if heroData:IsReachBreakLimit() == true then
                                        table.insert(heroNameList,heroData:GetName())
                                    end
                                end
                            end
                            if heroUuid~=0 and (isReachBreakLimit == true or isReachLevelLimit == true) then
                                local total = #heroNameList
                                local num = 0
                                table.walk(heroNameList,function(k,v)
                                    num = num+1
                                    if num<total then
                                        heroName = heroName.."<color=#ff0000>"..v.."</color>"..","
                                    else
                                        heroName = heroName.."<color=#ff0000>"..v.."</color>"
                                    end
                                end)
                                local content = Localization:GetString("161022",heroName)
                                UIUtil.ShowSecondMessage(Localization:GetString("100378"),content, 2, "161030", "161023",function()
                                    MarchUtil.StartMarch(targetType, targetPoint, targetUuid, timeIndex, 0, selectFormationUuid, autoBackHome,nil,0,targetServerId,time,chooseCrossWormUuid)
                                end,function(needSellConfirm)
                                    if needSellConfirm== false then
                                        Setting:SetPrivateInt("UIShowHeroWarning",1)
                                    else
                                        Setting:SetPrivateInt("UIShowHeroWarning",0)
                                    end
                                end, function()
                                    if isReachBreakLimit == true then
                                        local heroList = {}
                                        table.insert(heroList,heroUuid)
                                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, 1, heroUuid, heroList)
                                    elseif isReachLevelLimit == true then
                                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance)
                                    end
                                end)
                                return
                            end
                        end
                    end
                    MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.selectFormationUuid, self.autoBackHome,nil,0,self.targetServerId,time,self.chooseCrossWormUuid)
                else
                    MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.selectFormationUuid, self.autoBackHome,nil,0,self.targetServerId,-1,self.chooseCrossWormUuid)
                end
                
            end
        end
    end
end

local function CheckCanBattle(self,uuid)
    local canBattle =false
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(uuid)
    if formation~=nil then
        if self.targetType == MarchTargetType.COLLECT then
            local own = LuaEntry.Resource:GetCntByResType(ResourceType.Steel)
            local info = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.targetPoint)
            if info ~= nil then
                local type = GetTableData(TableName.GatherResource,info.id,"resource_type")
                local itemId = GetTableData(TableName.GatherResource,info.id,"param")
                local state = MarchUtil.GetResourcePointUnlockStateByType(tonumber(type), itemId)
                if state == 0 then
                    local scienceId = GetTableData(TableName.GatherResource,info.id,"unlock_science")
                    if scienceId ~= "" and not DataCenter.ScienceManager:HasScienceByIdAndLevel(tonumber(scienceId),1) then
                        local template = DataCenter.ScienceTemplateManager:GetScienceTemplate(scienceId,1)
                        UIUtil.ShowTips(Localization:GetString("129055",Localization:GetString(template.name),Localization:GetString(GetTableData(TableName.GatherResource,info.id,"name"))))
                    end
                else
                    local k1 = GetTableData(TableName.GatherResource,info.id,"collect_power")
                    if own < k1 then
                        UIUtil.ShowTipsId(129023)
                        local lackTab = {}
                        local param = {}
                        param.type = ResLackType.Res
                        param.id = ResourceType.Steel
                        param.targetNum = k1
                        table.insert(lackTab,param)
                        GoToResLack.GoToItemResLackList(lackTab)
                    else
                        canBattle = true
                    end
                end
            end
        elseif self.targetType == MarchTargetType.PICK_GARBAGE then
            local k2 = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k3")
            local own = LuaEntry.Resource:GetCntByResType(ResourceType.Steel)
            if own < k2 then
                UIUtil.ShowTipsId(129023)
                local lackTab = {}
                local param = {}
                param.type = ResLackType.Res
                param.id = ResourceType.Steel
                param.targetNum = k2
                table.insert(lackTab,param)
                GoToResLack.GoToItemResLackList(lackTab)
            else
                canBattle = true
            end
        elseif self.targetType == MarchTargetType.SAMPLE then
            local k3 = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k3")
            local own = LuaEntry.Resource:GetCntByResType(ResourceType.Steel)
            if own < k3 then
                UIUtil.ShowTipsId(129023)
                local lackTab = {}
                local param = {}
                param.type = ResLackType.Res
                param.id = ResourceType.Steel
                param.targetNum = k3
                table.insert(lackTab,param)
                GoToResLack.GoToItemResLackList(lackTab)
            else
                canBattle = true
            end
        elseif self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY then
            local protectTime = 0
            local openTime = 0
            local curTime = UITimeManager:GetInstance():GetServerSeconds()
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(self.targetUuid)
            if info~=nil then
                if info~=nil then
                    local allianceCityPointInfo = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.AllianceCityPointInfo")
                    if allianceCityPointInfo~=nil then
                        openTime = allianceCityPointInfo["openTime"]
                        if openTime> curTime or openTime == -1 then
                            UIUtil.ShowTipsId(300708)
                            return false
                        end
                        protectTime = allianceCityPointInfo["protectTime"]
                        if protectTime> curTime then
                            UIUtil.ShowTipsId(300709)
                            return false
                        end
                        local cityId = allianceCityPointInfo["cityId"]
                        local level = GetTableData(TableName.WorldCity,cityId, "level")
                        if DataCenter.WorldAllianceCityDataManager:GetAllianceAlreadyHaveCity(LuaEntry.Player.allianceId)==true then
                            if DataCenter.WorldAllianceCityDataManager:GetCityIsNearBySelfAlliance(LuaEntry.Player.allianceId,cityId) ==false then
                                UIUtil.ShowTipsId(300711)
                                return false
                            end
                            if DataCenter.WorldAllianceCityDataManager:GetCityIsNearByAllianceDesert(LuaEntry.Player.allianceId,cityId) ==false then
                                UIUtil.ShowTipsId(110250)
                                return
                            end
                        else
                            if level>1 then
                                UIUtil.ShowTipsId(300710)
                                return false
                            end
                        end
                        local staminaCost = MarchUtil.GetCostStaminaByTargetType(MarchTargetType.ATTACK_ALLIANCE_CITY)
                        local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(uuid)
                        if curStamina <staminaCost then
                            UIUtil.ShowTipsId(GameDialogDefine.STAMINA_IS_NOT_ENOUGH)
                            return false
                        end
                        return true
                    end
                end
            end
        else
            local cost = self:GetCostStaminaByTargetType(self.targetType)
            if cost>0 then
                local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(uuid)
                if curStamina <cost then
                    UIUtil.ShowTipsId(GameDialogDefine.STAMINA_IS_NOT_ENOUGH)
                else
                    canBattle = true
                end
            else
                canBattle = true
            end
        end
    else
        UIUtil.ShowTipsId(300007)
    end
    return canBattle
end


local function SetSelectFormationUuid(self,uuid)
    self.selectFormationUuid = uuid
    --if targetType == MarchTargetType.ATTACK_CITY or targetType == MarchTargetType.DIRECT_ATTACK_CITY then
    --    self.targetType = MarchUtil.GetAttackCityTargetType(uuid, self.targetType)
    --end
end


local function GetTimeFormCurPosToTarPos(self,uuid)
    if self.targetType == MarchTargetType.CROSS_SERVER_WORM then
        local wormTime = LuaEntry.DataConfig:TryGetNum("crossServerFight", "k1")
        return wormTime
    end
    local data = self:GetFormationItemData(uuid)
    local speed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k1")
    if data.isMarch == 1 then
        speed = data.speed*CS.SceneManager.World.TileSize
    else
        local k1 = LuaEntry.DataConfig:TryGetNum("armyspeed", "k1")
        local detectEvent = DataCenter.RadarCenterDataManager:GetDetectEventInfoByPointId(self.targetPoint)
        local k7 = 1
        --雷达怪固定k1 * k7
        if detectEvent ~= nil then
            k7 = LuaEntry.DataConfig:TryGetNum("armyspeed", "k7")
            if k7 == 0 then
                k7 = 1
            end
            speed = CS.SceneManager.World.TileSize * k1 * k7
        else
            local addEffect = LuaEntry.Effect:GetGameEffect(EffectDefine.ARMY_SPEED_ADD)
            local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(uuid)
            if formation~=nil then
                local heroes = formation:GetCurHeroes()
                for k,v in pairs(heroes) do
                    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                    if heroData~=nil then
                        addEffect= addEffect + heroData:GetEffectNum(EffectDefine.ARMY_SPEED_ADD)
                    end
                end
                local indexAdd = MarchUtil.GetFormationSpeedAddByIndex(formation.index)
                indexAdd = indexAdd + DataCenter.EquipmentDataManager:GetEffectValue(formation.index, EffectDefine.ARMY_SPEED_ADD)
                local joinAddSpeed =0
                local joinRallyForBossSpeed = 0
                if self.targetType == MarchTargetType.JOIN_RALLY then
                    joinAddSpeed = LuaEntry.Effect:GetGameEffect(EffectDefine.CAREER_JOIN_TEAM_SPEED_ADD_PERCENT)
                    if self.rallyType == MarchTargetType.RALLY_FOR_BOSS then
                        joinRallyForBossSpeed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k5")
                    end
                elseif self.targetType == MarchTargetType.RALLY_FOR_BOSS then
                    joinRallyForBossSpeed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k6")
                end

                local alScienceEff = 0
                if self.targetType == MarchTargetType.ASSISTANCE_BUILD or self.targetType == MarchTargetType.ASSISTANCE_CITY
                        or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY  or self.targetType == MarchTargetType.ASSISTANCE_DESERT or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
                    alScienceEff = LuaEntry.Effect:GetGameEffect(EffectDefine.ASSIST_SPEED_ADD)
                    local isAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfIsAlTerritory(self.targetPoint)
                    if isAlTerritory then
                        local k8 = LuaEntry.DataConfig:TryGetNum("armyspeed", "k8")
                        alScienceEff = k8+alScienceEff
                    end
                end

                speed = CS.SceneManager.World.TileSize * k1 *(1+(addEffect/100)+(indexAdd/100)+(joinAddSpeed/100)+(alScienceEff/100) + (joinRallyForBossSpeed))
            end
        end
    end
    local needTime =-1
    if speed~=nil and speed>0 then
        local time = 0
        local startPos = data.startPos
        local needWormHole = false
        local directDistance = -1
        local distanceFromWorm = -1
        local distanceBaseToWormHole = -1
        local hasDoFindPath = false
        if data.isMarch ~=1 and (self.targetServerId == -1 or self.targetServerId == LuaEntry.Player:GetSelfServerId())then
            if self.targetType == MarchTargetType.STATE
                    or self.targetType == MarchTargetType.ATTACK_MONSTER
                    or self.targetType == MarchTargetType.COLLECT
                    or self.targetType == MarchTargetType.ATTACK_BUILDING
                    or self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING
                    or self.targetType == MarchTargetType.ATTACK_ARMY
                    or self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT
                    or self.targetType == MarchTargetType.ATTACK_CITY
                    or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY
                    or self.targetType == MarchTargetType.ASSISTANCE_CITY
                    or self.targetType == MarchTargetType.ASSISTANCE_BUILD
                    or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY
                    or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING
                    or self.targetType == MarchTargetType.ASSISTANCE_DESERT
                    or self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY
                    or self.targetType == MarchTargetType.ATTACK_DESERT
                    or self.targetType == MarchTargetType.TRAIN_DESERT
                    or self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING
                    or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE
                    or self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE
                    or self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE
            then
                local useWormHold,dirDistance,distanceWormHole,distance1,chooseUuid,wormHolePointId = MarchUtil.ChoosePathInWormHoleOrDirect(self.targetPoint,startPos)
                needWormHole = useWormHold
                if needWormHole== true then
                    startPos = wormHolePointId
                end
                directDistance = dirDistance
                distanceFromWorm = distance1
                distanceBaseToWormHole = distanceWormHole
                hasDoFindPath = true
            elseif self.targetType == MarchTargetType.GO_WORM_HOLE and self.chooseCrossWormUuid~=nil and self.chooseCrossWormUuid~=-1 then
                local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(self.chooseCrossWormUuid)
                if buildData ~= nil then
                    local pos = buildData.pointId
                    local dirPath = startPos..";"..pos
                    distanceBaseToWormHole = SceneUtils.CalculateDistanceV3(dirPath)
                    distanceFromWorm = 0
                    directDistance = 0
                    needWormHole = true
                    hasDoFindPath = true
                end
            end
        end
        local extraTime = 0
        if needWormHole == true then
            local k3 = 1
            if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
                k3 = LuaEntry.DataConfig:TryGetNum("worm_b", "k3")
            end
            
            local wormHoleSpeedAdd = 1+(LuaEntry.Effect:GetGameEffect(EffectDefine.APS_WORM_SPEED_ADD_PERCENT)*k3/100)
            extraTime = distanceBaseToWormHole/(speed*wormHoleSpeedAdd )
        end
        if hasDoFindPath ==false then --没有执行寻路就再寻一遍
            local dirPath = SceneUtils.GetPathFormAToB(startPos,self.targetPoint)
            if dirPath ~= nil and dirPath ~= "" then
                directDistance = SceneUtils.CalculateDistanceV3(dirPath)
            end
        end
        local calcBlackDesert = false
        local distance = 0
        if LuaEntry.Player.serverType == ServerType.NORMAL then
            local dec = DataCenter.BirthPointTemplateManager:GetBlackLandSpeedByServerId(LuaEntry.Player:GetCurServerId())
            local startInBlackLand = SceneUtils.IsInBlackRange(startPos)
            local endInBlackLand = SceneUtils.IsInBlackRange(self.targetPoint)
            if startInBlackLand == true and endInBlackLand ==true then
                distance = Vector3.Distance(SceneUtils.TileIndexToWorld(startPos),SceneUtils.TileIndexToWorld(self.targetPoint))
                time = distance/ (speed*dec)
                calcBlackDesert = true
            else
                local pointA,pointB = SceneUtils.GetCrossPointByTroopLineAndBlackRange(startPos,self.targetPoint)
                if pointA ~= nil then
                    --从黑土地外进入
                    if startInBlackLand == false then
                        --没出去
                        if pointB == nil then
                            local emptyDis = Vector3.Distance(SceneUtils.TileIndexToWorld(startPos),SceneUtils.TileIndexToWorld(pointA))
                            local blackDis = Vector3.Distance(SceneUtils.TileIndexToWorld(self.targetPoint),SceneUtils.TileIndexToWorld(pointA))
                            time = (emptyDis/speed) + (blackDis/(speed*dec))
                        else
                            --出去了
                            local inDis = Vector3.Distance(SceneUtils.TileIndexToWorld(startPos),SceneUtils.TileIndexToWorld(pointA))
                            local blackDis = Vector3.Distance(SceneUtils.TileIndexToWorld(pointA),SceneUtils.TileIndexToWorld(pointB))
                            local outDis = Vector3.Distance(SceneUtils.TileIndexToWorld(self.targetPoint),SceneUtils.TileIndexToWorld(pointB))
                            time = ((inDis+outDis)/speed) + (blackDis/(speed*dec))
                        end
                    else
                        --起始在黑土地，出去了
                        local emptyDis = Vector3.Distance(SceneUtils.TileIndexToWorld(self.targetPoint),SceneUtils.TileIndexToWorld(pointA))
                        local blackDis = Vector3.Distance(SceneUtils.TileIndexToWorld(startPos),SceneUtils.TileIndexToWorld(pointA))
                        time = (emptyDis/speed) + (blackDis/(speed*dec))
                    end
                    calcBlackDesert = true
                end
            end
        end
        if calcBlackDesert ==false then
            if needWormHole == true then
                time = distanceFromWorm/ (speed)
                needTime = time+extraTime
            elseif directDistance >=0 then
                time = directDistance/ (speed)
                needTime = time+extraTime
            end
        else
            needTime = time+extraTime
        end
    end
    return needTime
end

local function GetDistanceFormAtoB(self,startPos,endPos)
    local path = CS.SceneManager.World:FindingPathForEden(startPos,endPos)
    Logger.LogError("path:"..path)
end
local function SetTargetPoint(self,pos)
    self.targetPoint = pos
end

local function GetIsAssemble(self)
    return self.targetType
end

local function GetCostStaminaByTargetType(self,type)
    if type == MarchTargetType.TRAIN_DESERT or type == MarchTargetType.ATTACK_DESERT then
        local isEmptyDesert = true
        local worldTileInfo = CS.SceneManager.World:GetWorldTileInfo(self.targetPoint)
        if worldTileInfo ~= nil then
            local pointData = worldTileInfo:GetPointInfo()
            if pointData == nil then
                local desertInfo = worldTileInfo:GetWorldDesertInfo()
                if desertInfo~=nil then
                    local level = GetTableData(TableName.Desert, desertInfo.desertId, "desert_level")
                    if level>0 then
                        isEmptyDesert = false
                    end
                end
            end
        end
        return MarchUtil.GetCostStaminaByTargetType(type,self.rallyType,self.selectFormationUuid, self.destroyTimes,isEmptyDesert)
    end
    return MarchUtil.GetCostStaminaByTargetType(type,self.rallyType,self.selectFormationUuid, self.destroyTimes)
end

local function GetFormationPowerByUuid(self,formationUuid)
    local totalPower = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        totalPower = MarchUtil.GetFormationPower(formation:GetCurHeroes(),formation.soldiers,formation.index,MarchUtil.GetCampAddParam(formation:GetCurHeroes()))
    end
    return totalPower
end

local function GetExploreFormationPowerByUuidAndEventId(self, formationUuid, eventId)
    local totalPower = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        totalPower = MarchUtil.GetExploreFormationPower(formation:GetCurHeroes(), eventId, formation.index,MarchUtil.GetCampAddParam(formation:GetCurHeroes()))
    end
    return totalPower
end

local function GetMaxCanAddSoldierNum(self,formationUuid)
    local totalNum = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        totalNum = MarchUtil.GetMaxCanAddSoldierNum(formation:GetCurHeroes(),formation.index)
    end
    return totalNum
end

local function GetFormationFormMaxNum(self,formationUuid)
    local maxNum = 0
    local formationForm = DataCenter.ArmyFormationDataManager:GetArmyFormInfoByUuid(formationUuid)
    if formationForm~=nil then
        maxNum = formationForm.maxNum
    end
    return maxNum
end
local function GetCurSoldierNum(self,formationUuid)
    local totalNum = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        table.walk(formation.soldiers,function(k,v)
            if v>0 then
                totalNum = totalNum+v
            end
        end)
    end
    return totalNum
end

local function GetFormationBuildNameByIndex(self,index)
    local level = 0
    local buildId = MarchUtil.GetFormationBuildNameByIndex(index)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(buildId)
    if buildData ~= nil then
        level = buildData.level
    end
    return Localization:GetString(GetTableData(DataCenter.BuildTemplateManager:GetTableName(), buildId + level,"name"))
end

local function ShowCost(self, marchTargetType)
    return marchTargetType ~= MarchTargetType.EXPLORE
end

local function ShowExplorePower(self, marchTargetType)
    return marchTargetType == MarchTargetType.EXPLORE
end
local function GetCanGatherResourceNum(self,formationUuid,resourceType,itemId)
    local totalNum = 0
    local Player = LuaEntry.Player
    local partNum = 0.001
    if resourceType == ResourceType.AllianceDragonPoint then
        local basePartNum = LuaEntry.DataConfig:TryGetNum("dragon_war","k2")
        local minPartNum = LuaEntry.DataConfig:TryGetNum("dragon_war","k3")
        partNum = math.max(minPartNum,basePartNum)
    else
        local strK = "k"..(resourceType+1)
        local basePartNum = LuaEntry.DataConfig:TryGetNum("res_weight",strK)
        local minPartNum = LuaEntry.DataConfig:TryGetNum("res_weight_min",strK)
        local percent = 0
        if resourceType == ResourceType.Money then
            percent = LuaEntry.Effect:GetGameEffect(EffectDefine.APS_MONEY_WEIGHT_PERCENT)
        elseif resourceType == ResourceType.Electricity then
            percent = LuaEntry.Effect:GetGameEffect(EffectDefine.APS_ELECTRICITY_WEIGHT_PERCENT)
        end
        local realNum = basePartNum*(1-(percent/100))
        partNum = math.max(minPartNum,realNum)
    end
    if partNum ==nil or partNum<=0 then
        Logger.LogError("can not get weight")
        partNum = 1
    end
    local remainRes = 0
    if self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.targetUuid)
        if mineInfo ~=nil then
            remainRes = IntMaxValue   --矿点当前储存数量
        end
    elseif self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
        if mineInfo ~=nil then
            remainRes = IntMaxValue   --矿点当前储存数量
        end
    elseif self.targetType == MarchTargetType.COLLECT then
        local data = DataCenter.WorldPointDetailManager:GetDetailByPointId(self.targetPoint)
        if data then
            remainRes = data.remainRes    --矿点当前储存数量
        end
    end
    local decNum = 0
    local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(Player.uid, formationUuid, Player.allianceId)
    if march~=nil then
        --local weight = march.armyWeight
        decNum = MarchUtil.GetCurArmyWeight(march.plunderRes)
        --local value = math.max((weight-curNum),0)
        --totalNum = math.max((value/partNum),0)
        --if remainRes~=nil and remainRes>0 then
        --    totalNum= math.min(totalNum,remainRes)
        --end
    end
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(formationUuid)
    if formation~=nil then
        local value = 0
        local soldiers = formation.soldiers
        local heroes = formation:GetCurHeroes()
        local totalSoliderNum = 0
        local index = formation.index
        local load = 0
        for k,v in pairs(soldiers) do
            local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
            if template ~= nil then
                if load<=0 then
                    load = template.load
                end
                totalSoliderNum = totalSoliderNum+v
            end
        end
        local effectNum = LuaEntry.Effect:GetGameEffect(EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT)
        for k,v in pairs(heroes) do
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                effectNum= effectNum + heroData:GetEffectNum(EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT)
            end
        end
        effectNum= effectNum + DataCenter.EquipmentDataManager:GetEffectValue(index,EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT)
        local addValue = MarchUtil.GetFormationAddWeightPercentByFormationIndex(index)
        local careerValue = LuaEntry.Effect:GetGameEffect(EffectDefine.CAREER_COLLECT_ADD_PERCENT)
        for k,v in pairs(heroes) do
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                careerValue = careerValue + heroData:GetEffectNum(EffectDefine.CAREER_COLLECT_ADD_PERCENT)
            end
        end
        careerValue= careerValue + DataCenter.EquipmentDataManager:GetEffectValue(index,EffectDefine.CAREER_COLLECT_ADD_PERCENT)
        local addNum = MarchUtil.GetFormationAddWeightNumByFormationIndex(index)
        local const = (careerValue/100)+(effectNum/100)+(addValue/100)+1
        local k1 = LuaEntry.DataConfig:TryGetNum("gather_weight","k1")
        local k2 = LuaEntry.DataConfig:TryGetNum("gather_weight","k2")
        local k3 = LuaEntry.DataConfig:TryGetNum("gather_weight","k3")
        if k1<=0 then
            k1 =1
        end
        local specialAdd =  Mathf.Pow(k2,k1)*load*const+addNum
        if totalSoliderNum>=k2 then
            value = Mathf.Pow((totalSoliderNum-k2),k3)*load*const+specialAdd
        else
            value = Mathf.Pow(totalSoliderNum,k1)*load*const+addNum
        end
        local specialPart = math.max((specialAdd/partNum),0)
        totalNum = math.max((value/partNum),0)
        totalNum = totalNum-decNum
        if remainRes ~= 0 then --编队在家，自动分配士兵数量
            if totalNum > remainRes then
                if march~=nil then
                    return remainRes,remainRes
                end
                local deltaNum = remainRes
                local powK = k1
                local x = deltaNum * partNum
                local soliderTemp = math.max(1,(x - addNum))/(const*load)   --所有兵的负重
                local soliderAll = Mathf.Pow(soliderTemp,(1/powK))
                if specialPart<=remainRes then
                    deltaNum = remainRes-specialPart
                    powK = k3
                    x = deltaNum * partNum
                    soliderTemp = math.max(1,x)/(const*load)  --所有兵的负重
                    soliderAll = Mathf.Pow(soliderTemp,(1/powK))+k2
                end
                local curSoldiers = {}
                local keys = table.keys(soldiers)
                table.sort(keys,function(leftKey,rightKey)
                    local aData = DataCenter.ArmyManager:FindArmy(leftKey)
                    local bData = DataCenter.ArmyManager:FindArmy(rightKey)
                    if aData~=nil and bData~=nil then
                        if aData.level ~= bData.level then
                            return aData.level < bData.level
                        end
                        return aData.id < bData.id
                    end
                    return false
                end)
                if soliderAll < 1 then
                    for i =1 ,#keys do
                        local id = keys[i]
                        curSoldiers[id] = 1
                        DataCenter.ArmyFormationDataManager:SetArmyFormationSoldier(formationUuid,curSoldiers)
                        return remainRes,remainRes
                    end
                    for k,v in pairs(soldiers) do
                        local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
                        if template ~= nil then
                            curSoldiers[k] = 1
                            DataCenter.ArmyFormationDataManager:SetArmyFormationSoldier(formationUuid,curSoldiers)
                            return remainRes,remainRes
                        end
                    end
                else
                    for i =1 ,#keys do
                        local id = keys[i]
                        local num = soldiers[id]
                        if math.ceil(soliderAll) <= num then        --所需兵力足够
                            curSoldiers[id] = math.ceil(soliderAll)
                            DataCenter.ArmyFormationDataManager:SetArmyFormationSoldier(formationUuid,curSoldiers)
                            return remainRes,remainRes
                        else    --所需兵力不够，循环添加
                            curSoldiers[id] = num
                            soliderAll = soliderAll - num
                        end
                    end

                end
            end
        end
    end
    return totalNum,remainRes
end
local function SetTimeIndex(self,timeIndex)
    if self.targetType == MarchTargetType.RALLY_FOR_BOSS then
        timeIndex = (timeIndex + 3) % 5 + 1
    end
    self.timeIndex = timeIndex
end

local function OnCreateMarchInGuide(self,uuid,needAutoFix)
    local needFix = 0
    if needAutoFix == true then
        needFix = 1
    end
    local data = self:GetFormationItemData(uuid)
    if data~=nil then
        self:CloseSelf()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationTableNew,uuid,self.targetType,self.targetPoint,self.targetUuid,self.timeIndex,self.autoBackHome,data.startPos,self.rallyType,needFix)
    end
    
    
end

local function OnChangeMarchInGuide(self,uuid)
    local hasHero = false
    local hasSolider = false
    local curSoldiers ={}
    local curHeroes = {}
    local pos = 0
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(uuid)
    if formation~=nil then
        curSoldiers = formation.soldiers
        curHeroes =  formation:GetCurHeroes()
        table.walk(curSoldiers,function(k,v)
            if v>0 then
                hasSolider = true
            end
        end)
        table.walk(curHeroes,function(k,v)
            if k~=0 then
                hasHero = true
            end
        end)
        if hasHero and hasSolider then
            local sfsObj = SFSObject.New()
            sfsObj:PutLong("uuid", uuid)
            local formationArray = SFSArray.New()
            table.walk(curSoldiers,function (k,v)
                local obj = SFSObject.New()
                obj:PutUtfString("armyId",k)
                obj:PutInt("count", v)
                formationArray:AddSFSObject(obj)
            end)
            sfsObj:PutSFSArray("formations", formationArray)
            local heroArray = SFSArray.New()
            table.walk(curHeroes,function (k,v)
                local obj = SFSObject.New()
                obj:PutLong("heroUuid",k)
                obj:PutInt("index", v)
                heroArray:AddSFSObject(obj)
            end)
            sfsObj:PutSFSArray("heroInfos", heroArray)
            DataCenter.GuideCityManager:SetFormationParam(sfsObj)
            EventManager:GetInstance():Broadcast(EventId.CreateFormationUuid,uuid)
            self:CloseSelf()
        else
            UIUtil.ShowTipsId(GameDialogDefine.ADD_SOLDIER)
        end
    end
end

local function SetAttackTimes(self, tempTimes)
    self.destroyTimes = tempTimes
end

UIFormationSelectListNewCtrl.CloseSelf =CloseSelf
UIFormationSelectListNewCtrl.Close =Close
UIFormationSelectListNewCtrl.InitData =InitData
UIFormationSelectListNewCtrl.SetSelectFormationUuid= SetSelectFormationUuid
UIFormationSelectListNewCtrl.GetFormationListData =GetFormationListData
UIFormationSelectListNewCtrl.GetFormationItemData =GetFormationItemData
UIFormationSelectListNewCtrl.OnAtkClick = OnAtkClick
UIFormationSelectListNewCtrl.CheckCanBattle = CheckCanBattle
UIFormationSelectListNewCtrl.GetTimeFormCurPosToTarPos = GetTimeFormCurPosToTarPos
UIFormationSelectListNewCtrl.SetTargetPoint = SetTargetPoint
UIFormationSelectListNewCtrl.GetIsAssemble = GetIsAssemble
UIFormationSelectListNewCtrl.GetCostStaminaByTargetType = GetCostStaminaByTargetType
UIFormationSelectListNewCtrl.GetFormationPowerByUuid = GetFormationPowerByUuid
UIFormationSelectListNewCtrl.ChangeMarchByType =ChangeMarchByType
UIFormationSelectListNewCtrl.GetFormationBuildNameByIndex = GetFormationBuildNameByIndex
UIFormationSelectListNewCtrl.NeedTakeArmy = NeedTakeArmy
UIFormationSelectListNewCtrl.OnCheckTime = OnCheckTime
UIFormationSelectListNewCtrl.OnCreateClick = OnCreateClick
UIFormationSelectListNewCtrl.OnEditClick = OnEditClick
UIFormationSelectListNewCtrl.GetCurSoldierNum = GetCurSoldierNum
UIFormationSelectListNewCtrl.GetMaxCanAddSoldierNum = GetMaxCanAddSoldierNum
UIFormationSelectListNewCtrl.ShowCost = ShowCost
UIFormationSelectListNewCtrl.ShowExplorePower = ShowExplorePower
UIFormationSelectListNewCtrl.GetExploreFormationPowerByUuidAndEventId = GetExploreFormationPowerByUuidAndEventId
UIFormationSelectListNewCtrl.SetTimeIndex = SetTimeIndex
UIFormationSelectListNewCtrl.GetRallyTimeList = GetRallyTimeList
UIFormationSelectListNewCtrl.OnChangeMarchInGuide = OnChangeMarchInGuide
UIFormationSelectListNewCtrl.OnCreateMarchInGuide = OnCreateMarchInGuide
UIFormationSelectListNewCtrl.GetCanGatherResourceNum = GetCanGatherResourceNum
UIFormationSelectListNewCtrl.InitScoutData = InitScoutData
UIFormationSelectListNewCtrl.GetAllScoutFormations = GetAllScoutFormations
UIFormationSelectListNewCtrl.GetInvesFormationUnlockLv = GetInvesFormationUnlockLv
UIFormationSelectListNewCtrl.GetInvesFormationInfoByIndex = GetInvesFormationInfoByIndex
UIFormationSelectListNewCtrl.GetInvesDistance = GetInvesDistance
UIFormationSelectListNewCtrl.GetScoutStartPoint = GetScoutStartPoint
UIFormationSelectListNewCtrl.GetElecCost = GetElecCost
UIFormationSelectListNewCtrl.StartInvestigate = StartInvestigate
UIFormationSelectListNewCtrl.GetAllMarch = GetAllMarch
UIFormationSelectListNewCtrl.GetFormationFormMaxNum = GetFormationFormMaxNum
UIFormationSelectListNewCtrl.SetAttackTimes = SetAttackTimes
UIFormationSelectListNewCtrl.RefreshAutoBack =RefreshAutoBack
UIFormationSelectListNewCtrl.DoAttack = DoAttack
UIFormationSelectListNewCtrl.GetDistanceFormAtoB =GetDistanceFormAtoB
return UIFormationSelectListNewCtrl