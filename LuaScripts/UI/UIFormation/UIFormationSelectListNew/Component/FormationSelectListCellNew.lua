---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/16 15:03
---
local FormationSelectListCellNew = BaseClass("FormationSelectListCellNew",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local focus_img_path = "unLockObj/marchObj/selectImg"
local unlock_obj_path = "unLockObj"
local btn_path = ""
local empty_obj_path ="unLockObj/emptyObj"
local name_txt_path = "nameNum"
local num_txt_path = "unLockObj/powerNum"
local lock_obj_path ="lockObj"
local march_obj_path = "unLockObj/marchObj"
local state_icon_path = "unLockObj/marchObj/stateIcon"
local attack_effect_path = "unLockObj/marchObj/stateIcon/MarchAttackStateIcon"
local blood_slider_path = "unLockObj/marchObj/bloodSlider"
local blood_img_path = "unLockObj/marchObj/bloodSlider/FillArea/Fill"
local level_path = "unLockObj/Level"
local img_bg_path = "ImageBg"
local quality_path = "unLockObj/marchObj/qualityBg"
local quality_fg_path = "unLockObj/marchObj/qualityFg"
local img_path = "unLockObj/marchObj/mask/che"
local WAIT_RALLY = MarchStatus.WAIT_RALLY
local COLLECTING = MarchStatus.COLLECTING
local IN_TEAM = MarchStatus.IN_TEAM
local ASSISTANCE = MarchStatus.ASSISTANCE
local UIGray = CS.UIGray
local function OnCreate(self)
    base.OnCreate(self)
    self.focus_img = self:AddComponent(UIImage, focus_img_path)
    self.img_bg = self:AddComponent(UIImage, img_bg_path)
    self.focus_img:SetActive(false)
    self.onDrag = false
    self.btn = self:AddComponent(UIButton, btn_path)
    self.btn:SetOnClick(function ()
        self:OnAtkClick(true)
    end)
    self.empty_obj = self:AddComponent(UIBaseContainer, empty_obj_path)
    self.march_obj = self:AddComponent(UIBaseContainer, march_obj_path)
    self.unlock_obj = self:AddComponent(UIBaseContainer,unlock_obj_path)
    self.lock_obj = self:AddComponent(UIBaseContainer, lock_obj_path)
    self.name_txt = self:AddComponent(UITextMeshProUGUIEx, name_txt_path)
    self.num_txt = self:AddComponent(UITextMeshProUGUIEx, num_txt_path)
    self.state_icon = self:AddComponent(UIImage, state_icon_path)
    self.quality = self:AddComponent(UIImage, quality_path)
    self.quality_fg = self:AddComponent(UIImage, quality_fg_path)
    self.img = self:AddComponent(UIImage, img_path)
    self.attack_effect = self:AddComponent(UIBaseContainer, attack_effect_path)
    self.blood_slider = self:AddComponent(UISlider, blood_slider_path)
    self.blood_img = self:AddComponent(UIImage, blood_img_path)
    self.model ={}
    self.event_trigger = self:AddComponent(UIEventTrigger, btn_path)
    self.event_trigger:OnBeginDrag(function(eventData)
        self:OnBeginDrag(eventData)
    end)
    self.event_trigger:OnEndDrag(function(eventData)
        self.onDrag = false
        self.view.ctrl:SetSelectFormationUuid(0)
        self.view:HideAllShowTip()
        self.view.ctrl:CloseSelf()
    end)
    self.level_text = self:AddComponent(UITextMeshProUGUIEx, level_path)
    self.isUpdate = false
    self.startTime = 0
    self.endTime = 0
    self.canClick = true
end

local function OnDestroy(self)
    self.state_icon = nil
    self.attack_effect =nil
    self.blood_slider =nil
    self.blood_img = nil
    self.lock_obj =nil
    self.unlock_obj = nil
    self.empty_obj = nil
    self.name_txt = nil
    self.num_txt = nil
    self.march_obj =nil
    self.level_text = nil
    base.OnDestroy(self)
end

local function OnBeginDrag(self,eventData)
    self.onDrag = true
    if self.canClick == false then
        UIUtil.ShowTipsId(121423)
        return
    end
    if self.dataInfo~=nil and self.view.ctrl.targetType<0 then
        if self.dataInfo.canMove ==false and self.dataInfo.isMarch>0 then
            local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, self.dataInfo.uuid, LuaEntry.Player.allianceId)
            if march~=nil then
                if march:GetMarchStatus() == MarchStatus.IN_WORM_HOLE or march:GetMarchStatus() == MarchStatus.CROSS_SERVER then
                    UIUtil.ShowTipsId(142514)
                    return
                end
                CS.WorldScene.selectMarchUuid = march.uuid
                CS.SceneManager.World.marchUuid = march.uuid
                DataCenter.WorldMarchDataManager:TrackMarch(0)
                if march:GetMarchStatus() ~= MarchStatus.ASSISTANCE and march:GetMarchStatus() ~= MarchStatus.COLLECTING then
                    self.view.ctrl:SetSelectFormationUuid(self.uuid)
                    self.view:OnSelectClick(self.uuid)
                else
                    self.view.ctrl:SetSelectFormationUuid(0)
                    self.view:OnSelectClick(0)
                end
                WorldMarchTileUIManager:GetInstance():ShowTroop(march.uuid)
                self.view:HideAllShowTip()
            end
        elseif self.dataInfo.useForm == true then
            self.view.ctrl:SetSelectFormationUuid(0)
            self.view:OnSelectClick(0)
            local startPos = MarchUtil.GetFormationStartPos()
            
            CS.SceneManager.World:SetDragFormationData(self.dataInfo.uuid,startPos)
            self.view:HideAllShowTip()
        end
    end

end


local function RefreshData(self,show)
    self.isUpdate = false
    self.startTime = 0
    self.endTime = 0
    self.canClick= true
    self.num_txt:SetText("")
    if self.uuid~=nil then
        local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
        if formation.state == ArmyFormationState.Free then
            if self.view.ctrl.targetType == MarchTargetType.COLLECT then
                local collectPoint = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.view.ctrl.targetPoint)
                if collectPoint then
                    local resourceType= GetTableData(TableName.GatherResource,collectPoint.id,"resource_type")
                    DataCenter.ArmyFormationDataManager:AutoInitFormationDataForCollect(self.uuid,tonumber(resourceType),nil,self.view.ctrl.targetType)
                else
                    DataCenter.ArmyFormationDataManager:AutoInitFormationData(self.uuid,self.view.ctrl.targetType)
                end
            elseif self.view.ctrl.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING then
                local  mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.view.ctrl.targetUuid)
                if mineInfo ~=nil then
                    local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
                    if template~=nil then
                        local resourceType =template.collectType
                        DataCenter.ArmyFormationDataManager:AutoInitFormationDataForCollect(self.uuid,resourceType,self.view.ctrl.alMineMax,self.view.ctrl.targetType)
                    end
                end
            elseif self.view.ctrl.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
                local mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.view.ctrl.targetUuid)
                if mineInfo ~=nil then
                    local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
                    if template~=nil then
                        local resourceType =template.collectType
                        DataCenter.ArmyFormationDataManager:AutoInitFormationDataForCollect(self.uuid,resourceType,nil,self.view.ctrl.targetType)
                    end
                end
            elseif self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
                local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
                if mineInfo ~=nil then
                    local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
                    if template~=nil then
                        local resourceType =template.collectType
                        DataCenter.ArmyFormationDataManager:AutoInitFormationDataForCollect(self.uuid,resourceType,nil,self.view.ctrl.targetType)
                    end
                end
            else
                DataCenter.ArmyFormationDataManager:AutoInitFormationData(self.uuid,self.view.ctrl.targetType)
            end
        end
        self.unlock_obj:SetActive(true)
        self.dataInfo = self.view.ctrl:GetFormationItemData(self.uuid)
        local heroList = self.dataInfo.heroDataList
        if heroList~=nil then
            local tmpData = heroList[1]
            if tmpData~=nil then
                local hUuid = tmpData.heroUuid
                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(hUuid)
                if heroData~=nil then
                    local rarity = heroData.rarity
                    self.quality:LoadSprite(HeroUtils.GetRarityIconPath(rarity))
                    self.quality_fg:LoadSprite(HeroUtils.GetRarityFgIconPath(rarity))
                    local iconPath = HeroUtils.GetHeroIconPath(heroData.heroId)
                    self.img:LoadSprite(iconPath)
                end
            end
        end

        local serverId = self.dataInfo.serverId
        if serverId ==nil or serverId<=0 then
            serverId = LuaEntry.Player:GetSelfServerId()
        end
        if self.view.ctrl.targetType ~= MarchTargetType.CROSS_SERVER_WORM then
            if  serverId~= LuaEntry.Player:GetCurServerId() and self.dataInfo.isMarch >0 then
                self.canClick = false
            end
        else
            if serverId~= LuaEntry.Player:GetSelfServerId() and self.dataInfo.isMarch >0 then
                self.canClick = false
            end
        end
       
        UIGray.SetGray(self.img.transform, self.canClick==false,true)
        --self.num_txt:SetText(math.floor(self.dataInfo.stamina))
        self.level_text:SetText(self.dataInfo.level and ("Lv." .. self.dataInfo.level) or "")
        if self.dataInfo.isMarch>0 or self.dataInfo.useForm == true then
            --self:OnClearHeroList()
            if self.dataInfo.isMarch>0 then
                self.state_icon:SetActive(true)
                self.attack_effect:SetActive(self.dataInfo.isBattle)
                self.state_icon:LoadSprite(self.dataInfo.stateImg)
                self.blood_slider:SetActive(true)
                self:RefreshSlider(self.dataInfo.marchUuid,self.dataInfo.hp,self.dataInfo.maxhp)
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if self.dataInfo.endTime> curTime then
                    self.startTime = self.dataInfo.startTime
                    self.endTime =self.dataInfo.endTime
                    self.isUpdate = true
                    self:UpdateTime()
                end
            else
                self.state_icon:SetActive(false)
                self.blood_slider:SetActive(false)
            end
            self.march_obj:SetActive(true)
            self.empty_obj:SetActive(false)
            self.lock_obj:SetActive(false)
        else
            self.march_obj:SetActive(false)
            self.empty_obj:SetActive(true)
            self.lock_obj:SetActive(false)
        end
        if self.view.ctrl.selectFormationUuid == self.uuid then
            self:OnAtkClick()
        end
    else
        self.unlock_obj:SetActive(false)
        self.lock_obj:SetActive(true)
    end
    if type(show) == "number" and show == self.index then
        self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
            local param = {}
            param.position = self.transform.position
            param.positionType = PositionType.Screen
            if param.position ~= nil then
                DataCenter.ArrowManager:ShowArrow(param)
            end
        end, 0.4)
    end
end


local function ResetFormationModel(self,notResetUuid)
    if self.uuid~=nil and self.uuid~= notResetUuid then
        local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
        if formation.state == ArmyFormationState.Free then
            DataCenter.ArmyFormationDataManager:AutoInitFormationData(self.uuid,self.view.ctrl.targetType)
        end
    end
end

local function RefreshMarchData(self)
    self.isUpdate = false
    self.startTime = 0
    self.endTime = 0
    self.num_txt:SetText("")
    self.canClick = true
    if self.uuid~=nil then
        local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
        if formation.state == ArmyFormationState.March then
            self.dataInfo = self.view.ctrl:GetFormationItemData(self.uuid)
            local serverId = self.dataInfo.serverId
            if serverId ==nil or serverId<=0 then
                serverId = LuaEntry.Player:GetSelfServerId()
            end
            if self.view.ctrl.targetType ~= MarchTargetType.CROSS_SERVER_WORM then
                if serverId~= LuaEntry.Player:GetCurServerId() and self.dataInfo.isMarch>0 then
                    self.canClick = false
                end
            else
                if serverId~= LuaEntry.Player:GetSelfServerId() and self.dataInfo.isMarch >0 then
                    self.canClick = false
                end
            end
            UIGray.SetGray(self.img.transform, self.canClick == false,true)
            --self.num_txt:SetText(math.floor(self.dataInfo.stamina))
            if self.dataInfo.isMarch>0 then
                self.state_icon:SetActive(true)
                self.attack_effect:SetActive(self.dataInfo.isBattle)
                self.state_icon:LoadSprite(self.dataInfo.stateImg)
                self.blood_slider:SetActive(true)
                self:RefreshSlider(self.dataInfo.marchUuid,self.dataInfo.hp,self.dataInfo.maxhp)
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if self.dataInfo.endTime> curTime then
                    self.startTime = self.dataInfo.startTime
                    self.endTime =self.dataInfo.endTime
                    self.isUpdate = true
                    self:UpdateTime()
                end
            end
            if self.view.ctrl.selectFormationUuid == self.uuid then
                self:OnAtkClick()
            end
        else
            self:RefreshData()
        end
    end
end

local function SetUuidAndIndex(self,index,uuid)
    self.index = index
    self.name_txt:SetText(self.index)
    self.uuid = uuid
end


local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    self.onDrag = false
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.ShowFormationBlood, self.UpdateFormationBlood)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.ShowFormationBlood,self.UpdateFormationBlood)
end

local function UpdateFormationBlood(self,data)
    if data~=nil then
        self:RefreshSlider(data.marchUuid,data.health,data.initHealth)
    end
end

local function RefreshSlider(self,uuid,hp,maxhp)
    if uuid~=nil and self.dataInfo~=nil and self.dataInfo.marchUuid~=nil and uuid == self.dataInfo.marchUuid then
        local percent =  hp/math.max(maxhp,1)
        if maxhp~=nil and maxhp<=0 then
            percent =1
        end
        if percent<0.3 then
            self.blood_img:SetColorRGBA(0.96,0.15,0.19,1)
        elseif percent>=0.3 and percent<0.7 then
            self.blood_img:SetColorRGBA(1,0.51,0.12,1)
        elseif percent>=0.7 then
            self.blood_img:SetColorRGBA(0.45,0.96,0.15,1)
        end
        if percent>1 then
            percent =1
        end
        self.blood_slider:SetValue(percent)
    end
end

local function OnAtkClick(self,isInClick)
    if self.onDrag == true and isInClick==true then
        return
    end
    if isInClick == true and self.canClick==false then
        local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, self.uuid, LuaEntry.Player.allianceId)
        if march~=nil then
            if march:GetMarchStatus() == MarchStatus.IN_WORM_HOLE or march:GetMarchStatus() == MarchStatus.CROSS_SERVER then
                UIUtil.ShowTipsId(142514)
                return
            else
                if self.view.ctrl.targetType == MarchTargetType.CROSS_SERVER_WORM then
                    UIUtil.ShowTips(Localization:GetString("121422",self.view.ctrl.targetServerId))
                    return
                end
            end
        end
        if self.view.ctrl.targetType >=0 then
            UIUtil.ShowTipsId(121423)
            return
        end
    end
    if self.uuid~=nil then
        self.dataInfo = self.view.ctrl:GetFormationItemData(self.uuid)
    end
    if self.view.ctrl.targetType>=0 then
        if self.uuid~=nil then
            local addValue = 0
            local scaleFactor = UIManager:GetInstance():GetScaleFactor()
            if self.index == 1 then
                addValue = 40*scaleFactor
            elseif self.index == 4 then
                addValue = -40*scaleFactor
            end
            local posX = self.img_bg.transform.position.x+addValue
            local posY = self.img_bg.transform.position.y
            if self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_BOSS or self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_CITY
                    or self.view.ctrl.targetType ==  MarchTargetType.RALLY_THRONE or self.view.ctrl.targetType ==  MarchTargetType.RALLY_ASSISTANCE_THRONE or self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.view.ctrl.targetType == MarchTargetType.RALLY_DRAGON_BUILDING
                    or self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_BUILDING or self.view.ctrl.targetType == MarchTargetType. RALLY_FOR_ALLIANCE_CITY  or self.view.ctrl.targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING then
                if self.dataInfo.isMarch>0 then
                    self.view:HideAllShowTip()
                    UIUtil.ShowSingleTip(Localization:GetString("129110"))
                else
                    self.view.ctrl:SetSelectFormationUuid(self.uuid)
                    self.view:ShowFormationRallyTip(posX,posY,self.dataInfo)
                    self.view:OnSelectClick(self.uuid)
                end
            else
                if self.dataInfo.isMarch>0 then
                    if self.view.ctrl.targetType == MarchTargetType.EXPLORE then
                        self.view:HideAllShowTip()
                        UIUtil.ShowSingleTip(Localization:GetString("129109"))
                    elseif self.view.targetType == MarchTargetType.JOIN_RALLY and self.view.rallyType == MarchTargetType.RALLY_FOR_BOSS then
                        self.view:HideAllShowTip()
                        UIUtil.ShowSingleTip(Localization:GetString("129109"))
                    elseif self.view.ctrl.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS then
                        self.view:HideAllShowTip()
                        UIUtil.ShowSingleTip(Localization:GetString("302244"))
                    elseif self.view.ctrl.targetType == MarchTargetType.GO_WORM_HOLE then
                        self.view:HideAllShowTip()
                        UIUtil.ShowSingleTip(Localization:GetString("143611"))
                    elseif self.view.ctrl.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY then
                        self.view.ctrl:SetSelectFormationUuid(self.uuid)
                        self.view:ShowFormationAttackAlCityTip(posX,posY,self.dataInfo, true)
                        self.view:OnSelectClick(self.uuid)
                    elseif self.view.ctrl.targetType == MarchTargetType.TRAIN_DESERT and LuaEntry.Effect:GetGameEffect(EffectDefine.SEASON_WEEK_CARD_DESERT_SWEEP_FIELD) ~= 0 then
                        self.view.ctrl:SetSelectFormationUuid(self.uuid)
                        self.view:ShowFormationAttackAlCityTip(posX,posY,self.dataInfo, true)
                        self.view:OnSelectClick(self.uuid)
                    else
                        self.view.ctrl:SetSelectFormationUuid(self.uuid)
                        self.view:ShowFormationArmyTip(posX,posY,self.dataInfo)
                        self.view:OnSelectClick(self.uuid)
                    end
                elseif self.view.ctrl.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY then
                    self.view.ctrl:SetSelectFormationUuid(self.uuid)
                    self.view:ShowFormationAttackAlCityTip(posX,posY,self.dataInfo, self.dataInfo.useForm)
                    self.view:OnSelectClick(self.uuid)
                elseif self.dataInfo.useForm == true then
                    if self.view.ctrl.targetType == MarchTargetType.TRAIN_DESERT and LuaEntry.Effect:GetGameEffect(EffectDefine.SEASON_WEEK_CARD_DESERT_SWEEP_FIELD) ~= 0 then
                        self.view.ctrl:SetSelectFormationUuid(self.uuid)
                        self.view:ShowFormationAttackAlCityTip(posX,posY,self.dataInfo, self.dataInfo.useForm)
                        self.view:OnSelectClick(self.uuid)
                    else
                        self.view.ctrl:SetSelectFormationUuid(self.uuid)
                        self.view:ShowFormationArmyTip(posX,posY,self.dataInfo)
                        self.view:OnSelectClick(self.uuid)
                    end
                else
                    self.view.ctrl:SetSelectFormationUuid(self.uuid)
                    self.view:ShowFormationCreateTip(posX,posY,self.dataInfo)
                    self.view:OnSelectClick(self.uuid)
                end
            end
        end
    else
        if self.canClick == false then
            if isInClick~=nil and isInClick == true then
                self.dataInfo = self.view.ctrl:GetFormationItemData(self.uuid)
                local serverId = self.dataInfo.serverId
                if serverId ==nil or serverId<=0 then
                    serverId = LuaEntry.Player:GetSelfServerId()
                end
                local str = Localization:GetString("110216",serverId)
                UIUtil.ShowMessage(str,2,"","", function()
                    self:OnJumpToFormationPos(isInClick)
                end)
            end
        else
            self:OnJumpToFormationPos(isInClick)
        end
    end
    if self.uuid==nil then
        self.view:HideAllShowTip()
        --local name = self.view.ctrl:GetFormationBuildNameByIndex(self.index)
        --UIUtil.ShowSingleTip(Localization:GetString(GameDialogDefine.UNLOCK_ARMY_FORMATION,name))
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAdd,{anim = true,isBlur = true})
    end

end

local function OnJumpToFormationPos(self,isInClick)
    if self.uuid~=nil then
        local marchInfo = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, self.uuid,LuaEntry.Player.allianceId)
        if marchInfo~=nil then
            if marchInfo:GetMarchStatus() == MarchStatus.IN_WORM_HOLE or marchInfo:GetMarchStatus() == MarchStatus.CROSS_SERVER then
                GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
            elseif marchInfo:GetMarchType() == NewMarchType.EXPLORE then
                local troop = WorldTroopManager:GetInstance():GetTroop(marchInfo.uuid)
                if troop~=nil then
                    GoToUtil.GotoWorldPos(troop:GetPosition(),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
                else
                    GoToUtil.GotoWorldPos(marchInfo:GetMarchCurPos(),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
                end
                self.view:HideAllShowTip()
            elseif marchInfo:GetMarchStatus()== COLLECTING then
                GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId,marchInfo.worldId)
                local position = SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World)
                WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
                --self.view.ctrl:SetSelectFormationUuid(self.uuid)
                --self.view:OnSelectClick(self.uuid)
                self.view:HideAllShowTip()
            elseif marchInfo:GetMarchStatus()== ASSISTANCE or marchInfo:GetMarchStatus() == MarchStatus.BUILD_ALLIANCE_BUILDING or marchInfo:GetMarchStatus() == MarchStatus.BUILD_WORM_HOLE or marchInfo:GetMarchStatus() == MarchStatus.COLLECTING_ASSISTANCE then
                GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId,marchInfo.worldId)
                
                local position = SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World)
                position.x = position.x-1
                position.y = position.y
                position.z = position.z-1
                WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
                --self.view.ctrl:SetSelectFormationUuid(self.uuid)
                --self.view:OnSelectClick(self.uuid)
                if self.img_bg.transform~=nil then
                    local addValue = 0
                    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
                    if self.index == 1 then
                        addValue = 40*scaleFactor
                    elseif self.index == 4 then
                        addValue = -40*scaleFactor
                    end
                    local posX = self.img_bg.transform.position.x+addValue
                    local posY = self.img_bg.transform.position.y
                    self.view:ShowFormationArmyTip(posX,posY,self.dataInfo)
                end
            elseif marchInfo:GetMarchStatus()== WAIT_RALLY then
                GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId,marchInfo.worldId)
                local position = SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World)
                position.x = position.x-1
                position.y = position.y
                position.z = position.z-1
                WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
                self.view:HideAllShowTip()
            elseif marchInfo:GetMarchStatus()== IN_TEAM then
                local teamMarch = DataCenter.WorldMarchDataManager:GetAllianceMarchesInTeam(LuaEntry.Player.allianceId, marchInfo.teamUuid)
                if teamMarch == nil then
                    local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(marchInfo.teamUuid)
                    if data and data.leaderMarchInfo then
                        teamMarch = data.leaderMarchInfo
                    end
                end
                if teamMarch~=nil then
                    if isInClick~=nil and isInClick == true then
                        if teamMarch:GetMarchStatus() == WAIT_RALLY then
                            GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(teamMarch.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,teamMarch.serverId,teamMarch.worldId)
                            local position = SceneUtils.TileIndexToWorld(teamMarch.startPos,ForceChangeScene.World)
                            position.x = position.x-1
                            position.y = position.y
                            position.z = position.z-1
                            WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
                        else
                            self.view.ctrl:SetSelectFormationUuid(self.uuid)
                            self.view:OnSelectClick(self.uuid)
                            local curServerId = LuaEntry.Player:GetCurServerId()
                            --if marchInfo.serverId~= curServerId  then
                            if SceneUtils.GetIsInWorld() == true then
                                local marchData = DataCenter.WorldMarchDataManager:GetMarch(teamMarch.uuid)
                                if marchData~=nil and teamMarch.serverId == curServerId then
                                    if isInClick ~= nil and isInClick == true then
                                        DataCenter.WorldMarchDataManager:TrackMarch(teamMarch.uuid)
                                    end
                                    WorldMarchTileUIManager:GetInstance():ShowTroop(teamMarch.uuid)
                                    self.view:HideAllShowTip()
                                    return
                                end
                            end
                            GoToUtil.GotoWorldPos(teamMarch:GetMarchCurPos(), nil, nil, function()
                                if isInClick ~= nil and isInClick == true then
                                    local marchData = DataCenter.WorldMarchDataManager:GetMarch(teamMarch.uuid)
                                    if marchData ~= nil then
                                        DataCenter.WorldMarchDataManager:TrackMarch(teamMarch.uuid)
                                    end
                                end
                                WorldMarchTileUIManager:GetInstance():ShowTroop(teamMarch.uuid)
                                self.view:HideAllShowTip()
                            end, teamMarch.serverId)
                        end
                    end
                    --local troop = WorldTroopManager:GetInstance():GetTroop(teamMarch.uuid)
                    --if troop~=nil then
                    --    
                    --    
                    --else
                    --    GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(teamMarch.startPos))
                    --    local position = SceneUtils.TileIndexToWorld(teamMarch.startPos)
                    --    position.x = position.x-1
                    --    position.y = position.y
                    --    position.z = position.z-1
                    --    WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
                    --end
                end
                self.view:HideAllShowTip()
            else
                self.view.ctrl:SetSelectFormationUuid(self.uuid)
                self.view:OnSelectClick(self.uuid)
                local curServerId = LuaEntry.Player:GetCurServerId()
                --if marchInfo.serverId~= curServerId  then
                if SceneUtils.GetIsInWorld() == true then
                    local marchData = DataCenter.WorldMarchDataManager:GetMarch(marchInfo.uuid)
                    if marchData~=nil and marchInfo.serverId == curServerId then
                        if isInClick ~= nil and isInClick == true then
                            DataCenter.WorldMarchDataManager:TrackMarch(marchInfo.uuid)
                        end
                        WorldMarchTileUIManager:GetInstance():ShowTroop(marchInfo.uuid)
                        self.view:HideAllShowTip()
                        return
                    end
                end
                GoToUtil.GotoWorldPos(marchInfo:GetMarchCurPos(), nil, nil, function()
                    if isInClick ~= nil and isInClick == true then
                        local marchData = DataCenter.WorldMarchDataManager:GetMarch(marchInfo.uuid)
                        if marchData ~= nil then
                            DataCenter.WorldMarchDataManager:TrackMarch(marchInfo.uuid)
                        end
                    end
                    WorldMarchTileUIManager:GetInstance():ShowTroop(marchInfo.uuid)
                    self.view:HideAllShowTip()
                end, marchInfo.serverId)
                --else
                --    
                --    if isInClick~=nil and isInClick == true then
                --        DataCenter.WorldMarchDataManager:TrackMarch(marchInfo.uuid)
                --    end
                --    WorldMarchTileUIManager:GetInstance():ShowTroop(marchInfo.uuid)
                --    self.view:HideAllShowTip()
                --end
            end
        else
            if self.dataInfo~=nil and self.dataInfo.useForm == true then
                self.view.ctrl:SetSelectFormationUuid(self.uuid)
                self.view:OnSelectClick(self.uuid)
                if self.img_bg.transform~=nil then
                    local addValue = 0
                    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
                    if self.index == 1 then
                        addValue = 40*scaleFactor
                    elseif self.index == 4 then
                        addValue = -40*scaleFactor
                    end
                    local posX = self.img_bg.transform.position.x+addValue
                    local posY = self.img_bg.transform.position.y
                    self.view:ShowFormationArmyTip(posX,posY,self.dataInfo)
                end
            else
                self.view.ctrl:SetSelectFormationUuid(self.uuid)
                self.view:OnSelectClick(self.uuid)
                if self.img_bg.transform~=nil then
                    local addValue = 0
                    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
                    if self.index == 1 then
                        addValue = 40*scaleFactor
                    elseif self.index == 4 then
                        addValue = -40*scaleFactor
                    end
                    local posX = self.img_bg.transform.position.x+addValue
                    local posY = self.img_bg.transform.position.y
                    self.view:ShowFormationCreateTip(posX,posY,self.dataInfo)
                end
            end
        end
    end
end

local function OnSelectClick(self,uuid)
    if self.uuid~=nil and self.uuid == uuid then
        self.focus_img:SetActive(true)
        if self.dataInfo~=nil and self.view.ctrl.targetType>=0 then
            --if self.view.ctrl.targetType == MarchTargetType.COLLECT or self.view.ctrl.targetType == MarchTargetType.PICK_GARBAGE or self.view.ctrl.targetType == MarchTargetType.SAMPLE then
            --    self.num_txt:SetText(math.floor(self.dataInfo.stamina))
            --else
            --    local costPoint = self.view.ctrl:GetCostStaminaByTargetType(self.view.ctrl.targetType)
            --    if costPoint<1 then
            --        self.num_txt:SetText(math.floor(self.dataInfo.stamina))
            --    else
            --        local numStr = string.format("<color=#dd2828> %s</color>",("-"..math.floor(costPoint)))
            --        self.num_txt:SetText(math.floor(self.dataInfo.stamina)..numStr)
            --    end
            --end
            if self.dataInfo.marchUuid~=nil then
                CS.SceneManager.World.marchUuid = self.dataInfo.marchUuid
            end
        elseif self.dataInfo~=nil then
            --self.num_txt:SetText(math.floor(self.dataInfo.stamina))
            if self.dataInfo.marchUuid~=nil then
                CS.SceneManager.World.marchUuid = self.dataInfo.marchUuid
            end
        end
    else
        self.focus_img:SetActive(false)
        if self.dataInfo~=nil then
            --self.num_txt:SetText(math.floor(self.dataInfo.stamina))
        end

    end
end

--local function RefreshStamina(self)
--    if self.uuid~=nil then
--        local curStamina = DataCenter.ArmyFormationDataManager:GetCurStaminaByUuid(self.uuid)
--        local costPoint = self.view.ctrl:GetCostStaminaByTargetType(self.view.ctrl.targetType)
--        if costPoint>1 and self.view.ctrl.targetType>=0 and self.view.ctrl.selectFormationUuid == self.uuid then
--            local numStr = string.format("<color=#dd2828> %s</color>",("-"..math.floor(costPoint)))
--            self.num_txt:SetText(math.floor(curStamina)..numStr)
--        else
--            self.num_txt:SetText(math.floor(curStamina))
--        end
--    end
--end


local function UpdateTime(self)
    if self.isUpdate then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local deltaTime = self.endTime-curTime
        if deltaTime >0 then
            self.num_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtStringSpecial(deltaTime))
        else
            self.num_txt:SetText("")
            self.isUpdate = false
        end
    end
end

FormationSelectListCellNew.OnCreate = OnCreate
FormationSelectListCellNew.OnDestroy = OnDestroy
FormationSelectListCellNew.OnEnable = OnEnable
FormationSelectListCellNew.OnDisable = OnDisable
FormationSelectListCellNew.RefreshData = RefreshData
FormationSelectListCellNew.SetUuidAndIndex =SetUuidAndIndex
FormationSelectListCellNew.OnAtkClick = OnAtkClick
FormationSelectListCellNew.OnSelectClick = OnSelectClick
FormationSelectListCellNew.RefreshSlider = RefreshSlider
FormationSelectListCellNew.OnBeginDrag = OnBeginDrag
--FormationSelectListCellNew.RefreshStamina =RefreshStamina
FormationSelectListCellNew.RefreshMarchData = RefreshMarchData
FormationSelectListCellNew.UpdateTime =UpdateTime
FormationSelectListCellNew.OnJumpToFormationPos = OnJumpToFormationPos
FormationSelectListCellNew.OnAddListener =OnAddListener
FormationSelectListCellNew.OnRemoveListener =OnRemoveListener
FormationSelectListCellNew.UpdateFormationBlood =UpdateFormationBlood
FormationSelectListCellNew.ResetFormationModel =ResetFormationModel
return FormationSelectListCellNew