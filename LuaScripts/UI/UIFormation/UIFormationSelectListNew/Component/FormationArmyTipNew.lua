---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/16 15:04
---
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local FormationArmyTipNew = BaseClass("FormationArmyTipNew", UIBaseContainer)
local FormationHeroItem = require "UI.UIFormation.UIFormationSelectListNew.Component.FormationHeroItem"
local FormationHeroAdd = require "UI.UIFormation.UIFormationSelectListNew.Component.FormationHeroAdd"
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local layout_1_path = "bg/layout1"
local layout_2_path = "bg/layout2"
local res_des_path = "bg/layout2/resDes"
local add_des_path = "bg/layout2/addDes"
local cost_img_path = "bg/layout2/resDes/consumeIcon"
local cost_add_img_path = "bg/layout2/addDes/cost_add_img"
local cost_num_path = "bg/layout2/resNum"
local cost_add_num_path = "bg/layout2/addNum"
local left_power_path = "bg/layout1/img/powerLeft"
local right_power_path = "bg/layout1/img/powerRight"
local battle_des_path ="bg/layout1/battle_state/battleDes"
local gray_path = "Gray"
local state_icon_path = "bg/layout1/battle_state/battleDes/battle_img"
local state_btn_path = "bg/layout1/battle_state/battleDes/battle_img"

local solider_slider_path = "bg/top/soldierSlider"
local solider_des_path = "bg/top/soldierDes"
local solider_num_path = "bg/top/funNum"

local hero_1_obj_path = "bg/top/layout/HeroObj1"
local hero_2_obj_path = "bg/top/layout/HeroObj2"
local hero_3_obj_path = "bg/top/layout/HeroObj3"
local hero_4_obj_path = "bg/top/layout/HeroObj4"
local hero_5_obj_path = "bg/top/layout/HeroObj5"

local recommend_txt_path = "bg/commendText"

local bottom_path = "bg/bottom"
local enter_btn_path ="bg/bottom/enterBtn"
local btn_txt_path = "bg/bottom/enterBtn/btnDes/Txt1"
local btn_num_path = "bg/bottom/enterBtn/btnDes/txt2"
local no_path_btn_path = "bg/bottom/noPathBtn"
local no_path_btn_txt_path = "bg/bottom/noPathBtn/noPathBtn_txt"
local edit_btn_path = "bg/bottom/editBtn"
local edit_btn_txt_path = "bg/bottom/editBtn/edit_txt"
local setting_btn_path = "bg/bottom/settingBtn"
local back_toggle_path = "bg/bottom/backToggle"
local back_toggle_txt_path = "bg/bottom/backToggle/backToggle_txt"

local time_obj_path = "bg/timeObj"

local des_path = "bg/timeObj/timeDes"
local toggle1_path = "bg/timeObj/checkObj/item1"
local toggle2_path = "bg/timeObj/checkObj/item2"
local toggle3_path = "bg/timeObj/checkObj/item3"
local toggle4_path = "bg/timeObj/checkObj/item4"

local arrow_path = "common_img_tipsarrow"
local function OnCreate(self)
    base.OnCreate(self)
    self.arrow = self:AddComponent(UIBaseContainer,arrow_path)
    self.bottom = self:AddComponent(UIBaseContainer, bottom_path)
    self.layout1 = self:AddComponent(UIBaseContainer, layout_1_path)
    self.layout2 = self:AddComponent(UIBaseContainer, layout_2_path)
    
    self.cost_num = self:AddComponent(UITextMeshProUGUIEx, cost_num_path)
    self.cost_add_num = self:AddComponent(UITextMeshProUGUIEx, cost_add_num_path)
    
    self.consumeIcon = self:AddComponent(UIImage,cost_img_path)
    self.cost_add_img = self:AddComponent(UIImage,cost_add_img_path)
    
    self.res_des =self:AddComponent(UITextMeshProUGUIEx,res_des_path)
    self.res_des:SetLocalText(300642)
    self.add_des =self:AddComponent(UITextMeshProUGUIEx,add_des_path)
    self.btn_txt = self:AddComponent(UITextMeshProUGUIEx, btn_txt_path)
    self.btn_num = self:AddComponent(UITextMeshProUGUIEx, btn_num_path)
    self.edit_btn_txt = self:AddComponent(UITextMeshProUGUIEx, edit_btn_txt_path)
    self.leftPower = self:AddComponent(UITextMeshProUGUIEx,left_power_path)
    self.rightPower = self:AddComponent(UITextMeshProUGUIEx,right_power_path)
    self.battle_des = self:AddComponent(UITextMeshProUGUIEx,battle_des_path)
    self.state_icon = self:AddComponent(UIImage,state_icon_path)
    self.btn_txt:SetLocalText(GameDialogDefine.CREATE_MARCH)
    --self.effect = self:AddComponent(UIBaseContainer, effect_path)
    self.recommend_txt = self:AddComponent(UITextMeshProUGUIEx, recommend_txt_path)
    self.enter_btn = self:AddComponent(UIButton, enter_btn_path)
    self.enter_btn:SetOnClick(function ()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Start_March)
        self:OnAtkClick()
    end)
    self.edit_btn = self:AddComponent(UIButton, edit_btn_path)
    self.edit_btn:SetOnClick(function ()
        self:OnEditClick()
    end)
    self.no_path_btn_txt = self:AddComponent(UITextMeshProUGUIEx, no_path_btn_txt_path)
    self.no_path_btn_txt:SetLocalText(111147)
    self.no_path_btn = self:AddComponent(UIButton, no_path_btn_path)
    self.no_path_btn:SetOnClick(function ()
        UIUtil.ShowTipsId(111070)
    end)
    self.setting_btn = self:AddComponent(UIButton, setting_btn_path)
    self.setting_btn:SetOnClick(function ()
        self:OnSetClick()
    end)
    self.state_btn = self:AddComponent(UIButton, state_btn_path)
    self.state_btn:SetOnClick(function ()
        self:OnBattleStateClick()
    end)
    
    self.solider_slider = self:AddComponent(UISlider,solider_slider_path)
    self.solider_des = self:AddComponent(UITextMeshProUGUIEx,solider_des_path)
    self.solider_des:SetLocalText(120979)
    self.soldier_num = self:AddComponent(UITextMeshProUGUIEx,solider_num_path)
    
    self.back_toggle = self:AddComponent(UIToggle, back_toggle_path)
    self.back_toggle:SetIsOn(true)
    self.back_toggle_txt = self:AddComponent(UITextMeshProUGUIEx,back_toggle_txt_path)
    self.back_toggle_txt:SetLocalText(104309)
    self.autoBackHome = MarchUtil.GetAutoBackHomeState(self.view.ctrl.targetType) --1自动返回，0为留在原地
    self.back_toggle:SetIsOn(self.autoBackHome ==1)
    self.back_toggle:SetOnValueChanged(function()
        self:ToggleControlBorS()
    end)
    self.gray_image = self:AddComponent(UIImage,gray_path)
    self.gray = self.gray_image:GetMaterial()
    self.heroList = {}
    local hero_1 = self:AddComponent(UIBaseContainer, hero_1_obj_path)
    self.heroList[1] = hero_1
    local hero_2 = self:AddComponent(UIBaseContainer, hero_2_obj_path)
    self.heroList[2] = hero_2
    local hero_3 = self:AddComponent(UIBaseContainer, hero_3_obj_path)
    self.heroList[3] = hero_3
    local hero_4 = self:AddComponent(UIBaseContainer, hero_4_obj_path)
    self.heroList[4] = hero_4
    local hero_5 = self:AddComponent(UIBaseContainer, hero_5_obj_path)
    self.heroList[5] = hero_5

    self.time_obj = self:AddComponent(UIBaseContainer,time_obj_path)
    self.des = self:AddComponent(UITextMeshProUGUIEx,des_path)
    self.des:SetLocalText(390138)
    self.toggle1 = self:AddComponent(UIToggle, toggle1_path)
    self.toggle1:SetIsOn(true)
    self.toggle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorSTime()
        end
    end)
    self.toggle1.text = self.toggle1:AddComponent(UITextMeshProUGUIEx, "Text_num")

    self.toggle2 = self:AddComponent(UIToggle, toggle2_path)
    self.toggle2:SetIsOn(false)
    self.toggle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorSTime()
        end
    end)
    self.toggle2.text = self.toggle2:AddComponent(UITextMeshProUGUIEx, "Text_num")

    self.toggle3 = self:AddComponent(UIToggle, toggle3_path)
    self.toggle3:SetIsOn(false)
    self.toggle3:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorSTime()
        end
    end)
    self.toggle3.text = self.toggle3:AddComponent(UITextMeshProUGUIEx, "Text_num")

    self.toggle4 = self:AddComponent(UIToggle, toggle4_path)
    self.toggle4:SetIsOn(false)
    self.toggle4:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorSTime()
        end
    end)
    self.toggle4.text = self.toggle4:AddComponent(UITextMeshProUGUIEx, "Text_num")
    
    
    
    
    self.model ={}
    self.oldUuid = 0
    self.showLackStamina = false
    self.collectMaxNum = 0
    self.isReturn = false
    self.isCanNotReach = false
end

local function OnDestroy(self)
    table.walk(self.heroList,function(k,v)
        v:RemoveComponents(FormationHeroItem)
    end)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.btn_txt = nil
    self.enter_btn = nil
    base.OnDestroy(self)
end
local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ToggleControlBorSTime(self)
    self.timeIndex =0
    if self.toggle1:GetIsOn() then
        self.timeIndex = 1
    elseif self.toggle2:GetIsOn() then
        self.timeIndex = 2
    elseif self.toggle3:GetIsOn() then
        self.timeIndex = 3
    elseif self.toggle4:GetIsOn() then
        self.timeIndex = 4
    end
    self.view.ctrl:SetTimeIndex(self.timeIndex)
end

local function OnClearHeroList(self)
    table.walk(self.heroList,function(k,v)
        v:RemoveComponents(FormationHeroItem)
        v:RemoveComponents(FormationHeroAdd)
    end)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.model = {}
end

local function ResetOldUuid(self)
    self.oldUuid = 0
    self.oldInMarch = -1
end
local function RefreshHeroList(self,formationData)
    if self.oldUuid~=self.uuid or self.oldInMarch~= self.inMarch then
        self.oldUuid = self.uuid
        self.oldInMarch = self.inMarch
        self:OnClearHeroList()
        if self.inMarch>0 or self.canCreate == true then
            local count = #formationData.heroDataList
            local maxHeroNum = MarchUtil.GetMaxHeroValueByFormationIndex(self.index)
            table.walk(self.heroList,function(k,v)
                if k<=count then
                    if self.model[k]==nil then
                        self.model[k] = self:GameObjectInstantiateAsync(UIAssets.FormationHeroItem, function(request)
                            if request.isError then
                                return
                            end
                            local go = request.gameObject
							local go_tf = go.transform
                            go.gameObject:SetActive(true)
							go_tf:SetParent(v.transform)
							go_tf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
							go_tf:Set_localPosition(ResetPosition.x, ResetPosition.y, ResetPosition.z)
                            go.name = k
                            local cell = v:AddComponent(FormationHeroItem,go.name)
                            cell:InitData(formationData.heroDataList[k].heroUuid)
                        end)
                    end
                else
                    if self.model[k]==nil then
                        self.model[k] = self:GameObjectInstantiateAsync(UIAssets.FormationSelectHeroAdd, function(request)
                            if request.isError then
                                return
                            end
                            local go = request.gameObject
							local go_tf = go.transform
                            go.gameObject:SetActive(true)
							go_tf:SetParent(v.transform)
							go_tf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
							go_tf:Set_localPosition(ResetPosition.x, ResetPosition.y, ResetPosition.z)
                            go.name = k
                            local cell = v:AddComponent(FormationHeroAdd,go.name)
                            cell:RefreshData(k,self.uuid,self.canCreate,GarageBuildIds[self.index])
                        end)
                    end
                end
            end)
        end
    end
end
local function RefreshData(self,posX,posY,formationData,needSelectTime)
    self.needSelectTime = false
    if needSelectTime then
        self.needSelectTime = needSelectTime
    end
    if self.view.ctrl.targetType == MarchTargetType.ATTACK_DESERT or self.view.ctrl.targetType == MarchTargetType.ATTACK_CITY or self.view.ctrl.targetType == MarchTargetType.ATTACK_DRAGON_BUILDING
            or self.view.ctrl.targetType == MarchTargetType.ATTACK_ARMY or self.view.ctrl.targetType == MarchTargetType.ATTACK_BUILDING or self.view.ctrl.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING 
            or self.view.ctrl.targetType == MarchTargetType.TRAIN_DESERT or self.view.ctrl.targetType == MarchTargetType.ATTACK_MONSTER or self.view.ctrl.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE then
        self.back_toggle:SetActive(true)
    else
        self.back_toggle:SetActive(false)
    end
    self.uuid =  formationData.uuid
    self.canCreate = formationData.useForm
    self.inMarch = formationData.isMarch
    self.index = formationData.index
    self.isExplore = false
    self:RefreshHeroList(formationData)
    self.formation = formationData
    local show = false
    if self.inMarch ==1 then
        show = false
    else
        if self.view.ctrl.targetType == MarchTargetType.COLLECT or self.view.ctrl.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.view.ctrl.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
            self.recommend_txt:SetLocalText(121065)
            show = true
        elseif self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_BUILD or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_CITY
                or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY  or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_DESERT or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_DRAGON_BUILDING then
            self.recommend_txt:SetLocalText(104334)
            show = true
        end
    end
    self.recommend_txt:SetActive(show)
    self.isReturn = false
    self.canClick = true
    self.extraTime = 0
    local serverId = formationData.serverId
    if serverId ==nil or serverId<=0 then
        serverId = LuaEntry.Player:GetSelfServerId()
    end
    if self.view.ctrl.targetType ~= MarchTargetType.CROSS_SERVER_WORM then
        if serverId~= LuaEntry.Player:GetCurServerId() and self.inMarch>0 then
            self.canClick = false
        end
    else
        if serverId~= LuaEntry.Player:GetSelfServerId() and self.inMarch>0 then
            self.canClick = false
        end
    end
    --已经出征的队列，如果目标点是explore不显示行军按钮
    if self.view.ctrl.targetType < 0 then
        if self.inMarch then
            local marchInfo = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, self.uuid,LuaEntry.Player.allianceId)
            if marchInfo~=nil then
                if marchInfo:GetMarchStatus() == MarchStatus.ASSISTANCE then
                    self.isReturn = true
                end
                if marchInfo:GetMarchType() == NewMarchType.EXPLORE then
                    self.isExplore = true
                end
            end
        end
    end
    self:CostRefresh()
    self:UpdateSoldierNum()
    self:UpdatePower()
    self:UpdateTimeSelect()
    self:SetButtonState()
    self:SetPosition(posX,posY)
    self:RefreshStaminaState()
    self:RefreshEditBtnText()
    self:RefreshBtnActive()
end

local function ToggleControlBorS(self)
    local autoBackHome =1
    if self.back_toggle:GetIsOn() then
        autoBackHome =1
    else
        autoBackHome = 0
    end
    if self.autoBackHome~=autoBackHome then
        if autoBackHome ==1 then
            UIUtil.ShowTipsId(104310)
        else
            UIUtil.ShowTipsId(104311)
        end
        self.autoBackHome = autoBackHome
    end
    MarchUtil.SetAutoBackHomeState(self.view.ctrl.targetType,self.autoBackHome)
    self.view.ctrl:RefreshAutoBack()
end

local function SetButtonState(self)
    if self.inMarch == 1 and self.formation.canMove == true then
        self.enter_btn:SetMaterial(self.gray)
        self.isAssemble = true
    elseif self.inMarch == 1 and 
            (self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_BOSS or self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_CITY
                    or self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_BUILDING or self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY  or self.view.ctrl.targetType ==  MarchTargetType.RALLY_THRONE or self.view.ctrl.targetType ==  MarchTargetType.RALLY_ASSISTANCE_THRONE
                    or self.view.ctrl.targetType == MarchTargetType.EXPLORE 
                    or self.view.ctrl.targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.view.ctrl.type == MarchTargetType.RALLY_DRAGON_BUILDING
                    or self.view.ctrl.targetType == MarchTargetType.CROSS_SERVER_WORM or self.view.ctrl.targetType == MarchTargetType.GO_WORM_HOLE) then
        self.isAssemble = true
        self.enter_btn:SetMaterial(self.gray)
    else
        self.isAssemble = false
        if self.canCreate == false and self.inMarch ~= 1 then
            self.enter_btn:SetMaterial(self.gray)
            self.isAssemble = true
        else
            self.enter_btn:SetMaterial(nil)
        end
    end
end

local function UpdateSoldierNum(self)
    if self.uuid~=nil then
        self:RefreshTimeByUuid(self.uuid)
        local maxNum = self.view.ctrl:GetMaxCanAddSoldierNum(self.uuid)
        local curNum = self.view.ctrl:GetCurSoldierNum(self.uuid)
        local maxNumStr = string.GetFormattedSeperatorNum(math.floor(maxNum))
        local percent = math.min(1,curNum/maxNum)
        self.solider_slider:SetValue(percent)
        if curNum<1 then
            local numStr = string.format("<color=#f26a67> %s</color>",string.GetFormattedSeperatorNum(math.floor(curNum)))
            self.soldier_num:SetText(numStr.."/"..maxNumStr)
        else
            self.soldier_num:SetText(string.GetFormattedSeperatorNum(math.floor(curNum)).."/"..maxNumStr)
        end
    end
end

local function UpdatePower(self)
    if self.view.ctrl.targetType < 0 or self.view.ctrl.targetType == MarchTargetType.COLLECT or self.view.ctrl.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.view.ctrl.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        self.layout1:SetActive(false)
    else
        self.layout1:SetActive(true)
        self.battleStateStr = ""
        self.battleTargetNum = 0
        if self.uuid~=nil then
            local power = self.view.ctrl:GetFormationPowerByUuid(self.uuid)
            self.leftPower:SetText(string.GetFormattedSeperatorNum(math.floor(power)))
            if self.view.ctrl:GetIsAssemble() == MarchTargetType.ATTACK_MONSTER then
                
                local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(self.view.ctrl.targetUuid)
                local marchInfo = nil
                if pointInfo~=nil then
                    marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
                end
                if marchInfo~=nil then
                    local targetPower = DataCenter.MonsterTemplateManager:GetRecommendPower(marchInfo.monsterId)
                    self.rightPower:SetText(string.GetFormattedSeperatorNum(math.floor(targetPower)))
                    self.battleStateStr = ""
                    self.battleTargetNum = targetPower
                    local battleNum = targetPower
                    if battleNum~=nil then
                        local percent = (power-battleNum)/battleNum
                        local k19 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k19")
                        if percent>k19 then
                            self.state_icon:LoadSprite(string.format(LoadPath.CommonNewPath, "UITroops_btn_combat01"))
                            self.battleStateStr = Localization:GetString("150121")
                        elseif percent< 0 then
                            local numStr = string.format("<color=#f26a67> %s</color>",string.GetFormattedSeperatorNum(math.floor(power)))
                            self.cost_num:SetText(numStr)
                            self.state_icon:LoadSprite(string.format(LoadPath.CommonNewPath, "UITroops_btn_combat03"))
                            self.battleStateStr = Localization:GetString("150119")
                        else
                            self.state_icon:LoadSprite(string.format(LoadPath.CommonNewPath, "UITroops_btn_combat02"))
                            self.battleStateStr = Localization:GetString("150120")
                        end
                    end
                end
            else
                self.rightPower:SetLocalText(130262)
                self.state_icon:LoadSprite(string.format(LoadPath.CommonNewPath, "UITroops_btn_combat02"))
                self.battleStateStr = Localization:GetString("150120")
            end
            self.battle_des:SetText(self.battleStateStr)
        end
    end
end

--采集刷新
local function CostRefresh(self)
    if self.view.ctrl.targetType == MarchTargetType.COLLECT or self.view.ctrl.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.view.ctrl.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        self.layout2:SetActive(true)
        if self.view.ctrl.targetType == MarchTargetType.COLLECT then
            local info = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.view.ctrl.targetPoint)
            if info then
                local type = LocalController:instance():getStrValue(TableName.GatherResource,info.id, "resource_type")
                local itemId = GetTableData(TableName.GatherResource,info.id,"param")
                local canGetResourceNum,remainRes = self.view.ctrl:GetCanGatherResourceNum(self.uuid,tonumber(type),itemId)
                if remainRes==nil or remainRes<canGetResourceNum or remainRes>=IntMaxValue then
                    remainRes = canGetResourceNum
                end
                self.collectMaxNum = canGetResourceNum
                self.cost_num:SetText(string.GetFormattedSeperatorNum(math.floor(canGetResourceNum)).."/"..string.GetFormattedSeperatorNum(math.floor(remainRes)))
                --self.consumeIcon:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(type)))
                self.cost_add_img:LoadSprite("Assets/Main/Sprites/UI/Common/New/Common_icon_time_green.png")
                self.consumeIcon:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(type)))
                local addPercent =0
                local addPercent2 =0
                local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
                if formation~=nil then
                    addPercent,addPercent2 = MarchUtil.GetFormationCollectSpeedAdd(formation:GetCurHeroes(),tonumber(type), formation.index)
                    local baseSpeed = tonumber(GetTableData(TableName.GatherResource,info.id,"gathering"))
                    if baseSpeed ==nil then
                        baseSpeed = 1
                    end
                    local realSpeed = baseSpeed*(1+(addPercent/100))*(1+(addPercent2/100))
                    local needTime = math.ceil(self.collectMaxNum/realSpeed)
                    local endTime = UITimeManager:GetInstance():GetServerSeconds() + needTime
                    self.add_des:SetLocalText(300641)
                    self.cost_add_num:SetText( UITimeManager:GetInstance():SecondToFmtString(math.floor(needTime)))
                    self.recommend_txt:SetActive(true)
                    self.recommend_txt:SetLocalText(360011,UITimeManager:GetInstance():TimeStampToTimeForServer(endTime*1000))
                end
                
                --self.cost_add_num:SetText(string.GetFormattedPercentStr(addPercent/100))
                --self.cost_num:SetText(GetTableData(TableName.ResourcesCollect,collectPoint:GetResourceType(),"collect_power"))
            end
            --self.consumeIcon:LoadSprite(string.format(LoadPath.CommonPath,"Common_icon_electricity"))
        elseif self.view.ctrl.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.view.ctrl.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING then
            local mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.view.ctrl.targetUuid)
            if mineInfo ~=nil then
                local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
                if template~=nil then
                    local resourceType =template.collectType
                    local itemId = template.param
                    local canGetResourceNum = self.view.ctrl:GetCanGatherResourceNum(self.uuid,tonumber(resourceType),itemId)
                    self.collectMaxNum = canGetResourceNum
                    self.cost_num:SetText(string.GetFormattedSeperatorNum(math.floor(canGetResourceNum)))
                    self.cost_add_img:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType)))
                    self.consumeIcon:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType)))
                    local addPercent =0
                    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
                    if formation~=nil then
                        addPercent = MarchUtil.GetFormationCollectSpeedAdd(formation:GetCurHeroes(),tonumber(resourceType), formation.index)
                    end
                    self.add_des:SetLocalText(121066)
                    self.cost_add_num:SetText(string.GetFormattedPercentStr(addPercent/100))
                end
            end
        elseif self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
            local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
            if mineInfo ~=nil then
                local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
                if template~=nil then
                    local resourceType =template.collectType
                    local itemId = template.param
                    local canGetResourceNum = self.view.ctrl:GetCanGatherResourceNum(self.uuid,tonumber(resourceType),itemId)
                    self.collectMaxNum = canGetResourceNum
                    self.cost_num:SetText(string.GetFormattedSeperatorNum(math.floor(canGetResourceNum)))
                    self.cost_add_img:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType)))
                    self.consumeIcon:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType)))
                    local addPercent =0
                    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
                    if formation~=nil then
                        addPercent = MarchUtil.GetFormationCollectSpeedAdd(formation:GetCurHeroes(),tonumber(resourceType), formation.index)
                    end
                    self.add_des:SetLocalText(121066)
                    self.cost_add_num:SetText(string.GetFormattedPercentStr(addPercent/100))
                end
            end
        elseif self.view.ctrl.targetType == MarchTargetType.PICK_GARBAGE then
            local k2 = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k3")
            self.cost_num:SetText(string.GetFormattedSeperatorNum(math.floor(k2)))
            self.consumeIcon:LoadSprite(string.format(LoadPath.CommonPath,"Common_icon_electricity"))
        elseif self.view.ctrl.targetType == MarchTargetType.SAMPLE then
            local k3 = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k3")
            self.cost_num:SetText(string.GetFormattedSeperatorNum(math.floor(k3)))
            self.consumeIcon:LoadSprite(string.format(LoadPath.CommonPath,"Common_icon_electricity"))
        else
            self.consumeIcon:LoadSprite(string.format("Assets/Main/Sprites/UI/Common/New/UITroopsNew_icon3.png"))
            local power = self.view.ctrl:GetFormationPowerByUuid(self.uuid)
            self.cost_num:SetText(string.GetFormattedSeperatorNum(math.floor(power)))
        end
    else
        self.layout2:SetActive(false)
    end
    
end

local function UpdateTimeSelect(self)
    if self.needSelectTime == true then
        self.time_obj:SetActive(true)
        self.RallyTimeList = {}
        if self.view.ctrl.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY then
            local k1 = LuaEntry.DataConfig:TryGetStr("destroy_times", "k1")
            local k2 = LuaEntry.DataConfig:TryGetStr("destroy_times", "k2")
            local k3 = LuaEntry.DataConfig:TryGetStr("destroy_times", "k3")
            local k4 = LuaEntry.DataConfig:TryGetStr("destroy_times", "k4")
            self.RallyTimeList[1] = k1
            self.RallyTimeList[2] = k2
            self.RallyTimeList[3] = k3
            self.RallyTimeList[4] = k4
        elseif self.view.ctrl.targetType == MarchTargetType.TRAIN_DESERT then
            local k1 = LuaEntry.DataConfig:TryGetStr("desert_train_times", "k1")
            local k2 = LuaEntry.DataConfig:TryGetStr("desert_train_times", "k2")
            local k3 = LuaEntry.DataConfig:TryGetStr("desert_train_times", "k3")
            local k4 = LuaEntry.DataConfig:TryGetStr("desert_train_times", "k4")
            self.RallyTimeList[1] = k1
            self.RallyTimeList[2] = k2
            self.RallyTimeList[3] = k3
            self.RallyTimeList[4] = k4
        elseif self.view.ctrl.targetType == MarchTargetType.RALLY_FOR_BOSS then
            local k1 = LuaEntry.DataConfig:TryGetStr("world_rally", "k1")
            local k2 = LuaEntry.DataConfig:TryGetStr("world_rally", "k2")
            local k3 = LuaEntry.DataConfig:TryGetStr("world_rally", "k3")
            local k5 = LuaEntry.DataConfig:TryGetStr("world_rally", "k5")
            self.RallyTimeList[1] = k5
            self.RallyTimeList[2] = k1
            self.RallyTimeList[3] = k2
            self.RallyTimeList[4] = k3
        else
            local k1 = LuaEntry.DataConfig:TryGetStr("world_rally", "k1")
            local k2 = LuaEntry.DataConfig:TryGetStr("world_rally", "k2")
            local k3 = LuaEntry.DataConfig:TryGetStr("world_rally", "k3")
            local k4 = LuaEntry.DataConfig:TryGetStr("world_rally", "k4")
            self.RallyTimeList[1] = k1
            self.RallyTimeList[2] = k2
            self.RallyTimeList[3] = k3
            self.RallyTimeList[4] = k4
        end
        self.toggle1.text:SetText(self.RallyTimeList[1]..Localization:GetString("100165"))
        self.toggle2.text:SetText(self.RallyTimeList[2]..Localization:GetString("100165"))
        self.toggle3.text:SetText(self.RallyTimeList[3]..Localization:GetString("100165"))
        self.toggle4.text:SetText(self.RallyTimeList[4]..Localization:GetString("100165"))
        self:ToggleControlBorSTime()
    else
        self.time_obj:SetActive(false)
    end
end


local function RefreshTimeByUuid(self,uuid)
    self.isCanNotReach = false
    if uuid~=nil and self.uuid~=nil and uuid == self.uuid then
        if self.view.ctrl.targetType == MarchTargetType.TRANSPORT_ACT_BOSS or self.view.ctrl.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS then
            self.btn_num:SetText("00:00:01")
        else
            local time = self.view:GetTimeInFormation(self.uuid)
            if time<0 then
                self.isCanNotReach = true
            else
                local realTime = time*1000 +self.extraTime
                self.btn_num:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(realTime))
            end
            
            
        end
        
    end
end

local function SetPosition(self,posX,posY)
    if self.view.WindowName == UIWindowNames.UIMain then
        local v3 = self.transform.position
        --v3.x = posX
        v3.y = posY
        self.transform.position = v3
    else
        local v3 = self.arrow.transform.position
        v3.x = posX
        self.arrow.transform.position = v3
    end

end

local function OnAtkClick(self)
    if  self.isAssemble then
        return
    end
    if self.showLackStamina == true then
        return
    end
    if (self.view.ctrl:GetIsAssemble() == MarchTargetType.COLLECT or self.view.ctrl.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.view.ctrl.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.view.ctrl.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE) and self.collectMaxNum<=0 then
        UIUtil.ShowSingleTip(Localization:GetString("121064"))
        return 
    end
    if self.canClick == false then
        UIUtil.ShowTipsId(121423)
        return
    end
   
    if self.inMarch ==1 then
        local march = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, self.uuid, LuaEntry.Player.allianceId)
        if march~=nil then
            if march:GetMarchStatus() == MarchStatus.IN_WORM_HOLE or march:GetMarchStatus() == MarchStatus.CROSS_SERVER then
                UIUtil.ShowTipsId(142514)
                return
            end
            if self.view.ctrl.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING then
                local totalNum = march:GetSoliderNum()
                if totalNum > self.view.ctrl.alMineMax then
                    UIUtil.ShowTipsId(300757)
                    return
                end
            end
        end
        
        self.view:OnAtkClick(self.uuid)
    elseif self.canCreate == true and self.inMarch~=1 then
        self.view:OnCreateClick(self.uuid,self.timeIndex)
    end
end
local function OnSetClick(self)
    if self.inMarch ==1 then
        if self.isReturn then
            local marchInfo = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, self.uuid,LuaEntry.Player.allianceId)
            if marchInfo~=nil then
                MarchUtil.OnBackHome(marchInfo.uuid)
                self.view:HideAllShowTip()
            end
        else
            UIUtil.ShowSingleTip(Localization:GetString("121049"))
        end
        return
    end
    --if self.view.ctrl.targetType ~= MarchTargetType.CROSS_SERVER_WORM then
    --    if CrossServerUtil:GetIsCrossServer() then
    --        UIUtil.ShowTipsId(121423)
    --        return
    --    end
    --end
    self.view:HideAllShowTip()
    self.view:OnEditClick(self.uuid,false)
end
local function OnEditClick(self)
    --if CrossServerUtil:GetIsCrossServer() then
    --    if DataCenter.CrossWormManager:GetCurArmyNum(true) == 0 then
    --        UIUtil.ShowMessage(Localization:GetString("143656"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
    --            UIManager:GetInstance():OpenWindow(UIWindowNames.UICrossWorm, 1)
    --        end)
    --        return
    --    end
    --end
    if self.showLackStamina == true then
        --UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAddStamina)
        local lackTab = {}
        local param = {}
        param.type = ResLackType.Res
        param.id = ResourceType.FORMATION_STAMINA
        local maxNum = LuaEntry.Player:GetMaxPveStamina()
        if maxNum > 0 then
            maxNum = Mathf.Floor(maxNum)
        end
        param.targetNum = maxNum
        table.insert(lackTab,param)
        GoToResLack.GoToItemResLackList(lackTab)
        return
    end
    if self.inMarch ==1 then
        if self.isReturn then
            local marchInfo = DataCenter.WorldMarchDataManager:GetOwnerFormationMarch(LuaEntry.Player.uid, self.uuid,LuaEntry.Player.allianceId)
            if marchInfo~=nil then
                MarchUtil.OnBackHome(marchInfo.uuid)
                self.view:HideAllShowTip()
            end
        else
            UIUtil.ShowSingleTip(Localization:GetString("121049"))
        end
        return
    end
    --if self.view.ctrl.targetType ~= MarchTargetType.CROSS_SERVER_WORM then
    --    if CrossServerUtil:GetIsCrossServer() then
    --        UIUtil.ShowTipsId(121423)
    --        return
    --    end
    --end
    self.view:HideAllShowTip()
    self.view:OnEditClick(self.uuid,false)
end

--local function OnMaxClick(self)
--    self.view:OnChangeFormationSoldier(self.uuid,self.index)
--    self:UpdatePower()
--end

local function OnBattleStateClick(self)
    local showMessage = false
    local targetLevel = 0
    local power =0
    local k2 = LuaEntry.DataConfig:TryGetNum("res_lack", "k2")
    if LuaEntry.Player.pveLevel<=k2 then
        if self.view.ctrl:GetIsAssemble() == MarchTargetType.ATTACK_MONSTER then

            local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(self.view.ctrl.targetUuid)
            local marchInfo = nil
            if pointInfo~=nil then
                marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
            end
            if marchInfo~=nil then
                local level = DataCenter.MonsterTemplateManager:GetTableValue(marchInfo.monsterId, "level")
                targetLevel = tonumber(level)
                power = self.view.ctrl:GetFormationPowerByUuid(self.uuid)
                local percent = (power-self.battleTargetNum)/math.max(1,self.battleTargetNum)
                if percent<=0 then
                    showMessage=true
                end
            end
        end
    end
    local configOpenState = LuaEntry.DataConfig:CheckSwitch("detect_monster")
    if configOpenState then
        UIUtil.ShowMessage(Localization:GetString("121010"),1,nil,nil,nil, nil,function(needSellConfirm)
            if needSellConfirm== false then
                Setting:SetPrivateInt("SHOW_ADD_SOLDIER",1)
            else
                Setting:SetPrivateInt("SHOW_ADD_SOLDIER",0)
            end
        end,121009)
    elseif showMessage==true then
        --UIUtil.ShowTipsId(121010)
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationLackPower,{anim= true,isBlur = true},targetLevel,self.uuid,power,self.battleTargetNum)
    else
        local scaleFactor = UIManager:GetInstance():GetScaleFactor()
        local position = self.state_btn.gameObject.transform.position + Vector3.New(42, 60, 0) * scaleFactor
        local param = UIHeroTipView.Param.New()
        param.title = self.battleStateStr
        param.content = Localization:GetString("300695")..": "..string.GetFormattedSeperatorNum(self.battleTargetNum)
        param.dir = UIHeroTipView.Direction.ABOVE
        param.defWidth = 200
        param.pivot = 0.5
        param.position = position
        param.deltaX = -71
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
    end
   
end


local function RefreshStaminaState(self)
    if self.view.ctrl.targetType>0 then
        if self.uuid~=nil then
            if self.isAssemble == false then
                local costPoint = self.view.ctrl:GetCostStaminaByTargetType(self.view.ctrl.targetType)
                if costPoint>1 then
                    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
                    if formation~=nil then
                        local curStamina = LuaEntry.Player:GetCurStamina()
                        if curStamina < costPoint then
                            self.showLackStamina = true
                            return
                        end
                    end
                end
            end
        end
    end
    if self.showLackStamina == true then
        self.showLackStamina = false
    end
end

local function RefreshEditBtnText(self)
    if self.showLackStamina then
        self.edit_btn_txt:SetLocalText(GameDialogDefine.ADD_STAMINA)
    elseif self.isReturn then
        self.edit_btn_txt:SetLocalText(300520)
    else
        self.edit_btn_txt:SetLocalText(121008)
    end
end

local function RefreshBtnActive(self)
    
    if self.view.ctrl.targetType < 0 then
        --self.bottom:SetActive(false)
        self.enter_btn:SetActive(false)
        self.setting_btn:SetActive(false)
        self.edit_btn:SetActive(true)
        self.no_path_btn:SetActive(false)
    elseif self.showLackStamina then
        self.enter_btn:SetActive(false)
        self.setting_btn:SetActive(true)
        self.edit_btn:SetActive(true)
        self.no_path_btn:SetActive(false)
    else
        if self.isCanNotReach then
            self.enter_btn:SetActive(false)
            self.setting_btn:SetActive(true)
            self.edit_btn:SetActive(false)
            self.no_path_btn:SetActive(true)
        else
            self.enter_btn:SetActive(true)
            self.setting_btn:SetActive(true)
            self.edit_btn:SetActive(false)
            self.no_path_btn:SetActive(false)
        end
        
        --self.bottom:SetActive(true)
    end
end

FormationArmyTipNew.OnDestroy = OnDestroy
FormationArmyTipNew.OnCreate = OnCreate
FormationArmyTipNew.OnEnable = OnEnable
FormationArmyTipNew.OnDisable = OnDisable
FormationArmyTipNew.RefreshData = RefreshData
FormationArmyTipNew.SetPosition = SetPosition
FormationArmyTipNew.RefreshTimeByUuid = RefreshTimeByUuid
FormationArmyTipNew.OnAtkClick= OnAtkClick
FormationArmyTipNew.CostRefresh = CostRefresh
FormationArmyTipNew.OnEditClick= OnEditClick
FormationArmyTipNew.UpdateSoldierNum =UpdateSoldierNum
FormationArmyTipNew.UpdatePower = UpdatePower
--FormationArmyTipNew.OnMaxClick = OnMaxClick
FormationArmyTipNew.OnClearHeroList = OnClearHeroList
FormationArmyTipNew.OnBattleStateClick = OnBattleStateClick
FormationArmyTipNew.RefreshHeroList = RefreshHeroList
FormationArmyTipNew.ResetOldUuid= ResetOldUuid
FormationArmyTipNew.RefreshStaminaState =RefreshStaminaState
FormationArmyTipNew.SetButtonState =SetButtonState
FormationArmyTipNew.RefreshEditBtnText = RefreshEditBtnText
FormationArmyTipNew.RefreshBtnActive = RefreshBtnActive
FormationArmyTipNew.ToggleControlBorS = ToggleControlBorS
FormationArmyTipNew.UpdateTimeSelect = UpdateTimeSelect
FormationArmyTipNew.ToggleControlBorSTime = ToggleControlBorSTime
FormationArmyTipNew.OnSetClick= OnSetClick
return FormationArmyTipNew