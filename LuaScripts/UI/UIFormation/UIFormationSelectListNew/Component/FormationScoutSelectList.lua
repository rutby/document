---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/11/1 15:41
---

local FormationScoutSelectList = BaseClass("FormationScoutSelectList", UIBaseContainer)
local base = UIBaseContainer

local FormationScoutSelectTip = require "UI.UIFormation.UIFormationSelectListNew.Component.FormationScoutSelectTip"
local ScoutSelectItem = require "UI.UIFormation.UIFormationSelectListNew.Component.FormationScoutSelectItem"

local ResourceManager = CS.GameEntry.Resource

local troop_num_path = "safeArea/Bg/Num"
local troop_item_path = "layout/scoutFormation"
local troopLayout_path = "layout"
local troop_info_path = "ScoutSelectTip"


--创建
local function OnCreate(self)
    base.OnCreate(self)
    self.view.ctrl:InitScoutData()
    self:ComponentDefine()
    self:DataDefine()
    self.targetUuid = self.view.ctrl.targetUuid
    self.pointId = self.view.ctrl.targetPoint
    self.scoutType = self.view.ctrl.targetType
    --self:InitUI()
    --self:RefreshTipOnSelectChange()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    self:HideTroopLine()
    base.OnDestroy(self)
end

local function Update(self)
    --self:RefreshMarchLine()
end

local function ComponentDefine(self)
    --self.Title = self:AddComponent(UITextMeshProUGUIEx, troop_num_path)
    self.TroopsTb = {}
    for i = 1, InvestigateTroopMaxNum do
        local temp = self:AddComponent(ScoutSelectItem, troop_item_path .. i)
        temp:SetActive(true)
        table.insert(self.TroopsTb, temp)
    end
    self.troopLayoutN = self:AddComponent(UIBaseContainer, troopLayout_path)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.troopLayoutN.transform)
    self.ScoutSelectTip = self:AddComponent(FormationScoutSelectTip, troop_info_path)
end

local function ComponentDestroy(self)
    --self.Title = nil
    self.TroopsTb = nil
    self.ScoutSelectTip = nil
end


local function DataDefine(self)
    self.curSelectedIndex = -1
    self.targetUuid = nil
    self.pointId = nil
end

local function DataDestroy(self)
    self.curSelectedIndex = nil
    self.targetUuid = nil
    self.pointId = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.ReturnTimeFromCurPosToTargetPos, self.OnCalcElecCostFinish)
    self:AddUIListener(EventId.MarchItemUpdateSelf, self.RefreshScoutSelectItems)
    self:AddUIListener(EventId.ArmyFormatUpdate, self.RefreshScoutSelectItems)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.ReturnTimeFromCurPosToTargetPos,self.OnCalcElecCostFinish)
    self:RemoveUIListener(EventId.MarchItemUpdateSelf,self.RefreshScoutSelectItems)
    self:RemoveUIListener(EventId.ArmyFormatUpdate,self.RefreshScoutSelectItems)

end


local function InitUI(self)
    --self.Title:SetText(#allInvesFormations .. "/" .. InvestigateTroopMaxNum)
    self:TrySelectReadyFormation()
    self:InitScoutSelectTip()
    self:RefreshScoutSelectItems()
    --self:ShowMarchLine()
    self:RefreshTipOnSelectChange()
    self:RefreshMarchLine()
end

local function InitScoutSelectTip(self)
     if self.curSelectedIndex <= 0 then
        self.ScoutSelectTip:SetActive(false)
    else
        self.ScoutSelectTip:SetActive(true)
        self.ScoutSelectTip:InitUI(self.pointId, self.curSelectedIndex)
    end
end

local function RefreshScoutTime(self)
    if self.TroopsTb~=nil then
        for i = 1, #self.TroopsTb do
            self.TroopsTb[i]:UpdateTime()
        end
    end
end
local function RefreshScoutSelectItems(self)
    for i = 1, #self.TroopsTb do
        self.TroopsTb[i]:RefreshUI(i)
        self.TroopsTb[i]:SetSelected(i == self.curSelectedIndex)
    end
end

local function TrySelectReadyFormation(self)
    if not self.pointId or self.pointId <= 0 then
        self.curSelectedIndex = -1
        return
    end
    
    local allInvesFormations = self.view.ctrl:GetAllScoutFormations()
    local unlockCount = DataCenter.ArmyFormationDataManager:GetMaxInvesFormationCount()
    for i, v in ipairs(allInvesFormations) do
        if self.curSelectedIndex == -1 then
            self.curSelectedIndex = i
        end
        if i <= unlockCount then
            if v.state == 0 then
                self.curSelectedIndex = i
                break
            end
        end
    end
end

local function ShowMarchLine(self)
    --if self.troopLine~=nil then
    --    CS.SceneManager.World.TroopLineManager:DestroyTroopLine(self.troopLine);
    --end

    self:HideTroopLine()

    local lookAtFocusTime = 0.4
    CS.SceneManager.World:AutoFocus(SceneUtils.TileIndexToWorld(self.pointId),CS.LookAtFocusState.Formation,lookAtFocusTime)
end

local function RefreshMarchLine(self)
    if not self.pointId or self.pointId <= 0 then
        return
    end 
    
    local startPointID = self.view.ctrl:GetScoutStartPoint(self.curSelectedIndex)

    if self.troopLine ==nil and self.dragInstance==nil then
        self.dragInstance = ResourceManager:InstantiateAsync(CS.GameDefines.EntityAssets.TroopLineDrag)
        self.dragInstance:completed('+', function()
            if self.dragInstance.isError then
                return
            end
            self.dragInstance.gameObject:SetActive(true)
            self.dragInstance.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
            self.troopLine = self.dragInstance.gameObject:GetComponent(typeof(CS.WorldTroopLine));
            if self.troopLine~=nil then
                self.troopLine:SetDragPath(SceneUtils.TileIndexToWorld(startPointID), SceneUtils.TileIndexToWorld(self.pointId));
                --self.troopLine:SetDragPath(SceneUtils.TileIndexToWorld(startPos), SceneUtils.TileIndexToWorld(endPos));
            end
        end)
    elseif self.troopLine~=nil then
        self.troopLine:SetDragPath(SceneUtils.TileIndexToWorld(startPointID), SceneUtils.TileIndexToWorld(self.pointId));
    end

    --if not self.troopLine then
    --    self.troopLine = CS.SceneManager.World.TroopLineManager:ShowTroopLineNoFade(self.troopLine, CS.GameDefines.EntityAssets.TroopLineDrag);
    --end
    --self.troopLine:SetDragPath(SceneUtils.TileIndexToWorld(startPointID), SceneUtils.TileIndexToWorld(self.pointId));
end

local function HideTroopLine(self)
    if self.dragInstance~=nil then
        self.dragInstance:Destroy()
    end
    self.dragInstance =nil
    self.troopLine =nil
end

local function RefreshTipOnSelectChange(self)
    if self.pointId and self.pointId > 0 then
        self.ScoutSelectTip:RefreshUI(self.curSelectedIndex)
    end
end

local function ResetTipPosition(self, posX, posY)
    local v3 = self.ScoutSelectTip.transform.position
    v3.x = posX
    v3.y = posY + 100
    self.ScoutSelectTip.transform.position = v3
end

local function GetInvesFormationStateDes(self)
    local invesFormationInfo = self.view.ctrl:GetInvesFormationInfoByIndex(self.curSelectedIndex)

    if invesFormationInfo.MarchInfo == nil then
        return "129005"
    else
        if invesFormationInfo.MarchInfo:GetMarchTargetType() == MarchTargetType.BACK_HOME then
            return "129007"
        else
            return "129006"
        end
    end
end

local function GetInvesCostTime(self, targetPointID)
    local k2_speed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k2") -- speed
    local distance = self.view.ctrl:GetInvesDistance(targetPointID, self.curSelectedIndex)
    return math.floor(distance / k2_speed)
end

local function GetUnlockLv(self, formationIndex)
    local unlockLv = self.view.ctrl:GetInvesFormationUnlockLv(formationIndex)
    return unlockLv
end


local function OnSelectTroopBtnClick(self, tempIndex)
    if self.curSelectedIndex > 0 then
        self.TroopsTb[self.curSelectedIndex]:SetSelected(false)
    end
    if self.pointId and self.pointId > 0 and tempIndex ~= self.curSelectedIndex then
        self.curSelectedIndex = tempIndex
        self:RefreshTipOnSelectChange()
        self:RefreshMarchLine()
    end
end

local function OnClickStartInvestigate(self)
    local invesFormationInfo = self.view.ctrl:GetInvesFormationInfoByIndex(self.curSelectedIndex)
    if invesFormationInfo and invesFormationInfo.FormationInfo then
        self.view.ctrl:StartInvestigate(self.scoutType, self.targetUuid, self.pointId, invesFormationInfo.FormationInfo.uuid)
    end

end


local function OnCalcElecCostFinish(self, strReuslt)
    --local invesFormationInfo = self.view.ctrl:GetInvesFormationInfoByIndex(self.curSelectedIndex)
    --
    --local result = string.split(strReuslt,";")
    --if result[1] == tostring(invesFormationInfo.FormationInfo.uuid) then
    --    local realDistance = tonumber(result[2])
    --
    --    local baseSpeed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k2") -- speed
    --    local extraSpeed = LuaEntry.Effect:GetGameEffect(EffectDefine.DETECT_ARMY_SPEED)
    --    local curSpeed = baseSpeed * (1+extraSpeed/100)
    --    local timeRealCost = math.ceil(realDistance / (curSpeed))
    --
    --    local k1 = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k1") -- elec cost param
    --    local k2_maxElec = LuaEntry.DataConfig:TryGetNum("Reconnaissance_power_consumption", "k2") -- elec cost max limit param
    --    local realCost = math.floor(realDistance * k1)
    --    realCost = math.floor(math.min(k2_maxElec, realCost))
    --    self.ScoutSelectTip:ResetCosts(realCost, timeRealCost)
    --end
end

FormationScoutSelectList.OnCreate = OnCreate
FormationScoutSelectList.OnDestroy = OnDestroy
FormationScoutSelectList.OnEnable = OnEnable
FormationScoutSelectList.OnDisable = OnDisable
FormationScoutSelectList.Update = Update
FormationScoutSelectList.ComponentDefine = ComponentDefine
FormationScoutSelectList.ComponentDestroy = ComponentDestroy
FormationScoutSelectList.DataDefine = DataDefine
FormationScoutSelectList.DataDestroy = DataDestroy
FormationScoutSelectList.OnAddListener = OnAddListener
FormationScoutSelectList.OnRemoveListener = OnRemoveListener

FormationScoutSelectList.InitUI = InitUI
FormationScoutSelectList.InitScoutSelectTip = InitScoutSelectTip
FormationScoutSelectList.RefreshScoutSelectItems = RefreshScoutSelectItems
FormationScoutSelectList.GetInvesFormationStateDes = GetInvesFormationStateDes
FormationScoutSelectList.RefreshTipOnSelectChange = RefreshTipOnSelectChange
FormationScoutSelectList.TrySelectReadyFormation = TrySelectReadyFormation
FormationScoutSelectList.GetInvesCostTime = GetInvesCostTime
FormationScoutSelectList.GetUnlockLv = GetUnlockLv
FormationScoutSelectList.OnCalcElecCostFinish = OnCalcElecCostFinish
FormationScoutSelectList.RefreshMarchLine = RefreshMarchLine
FormationScoutSelectList.OnSelectTroopBtnClick = OnSelectTroopBtnClick
FormationScoutSelectList.OnClickStartInvestigate = OnClickStartInvestigate
FormationScoutSelectList.ResetTipPosition = ResetTipPosition
FormationScoutSelectList.ShowMarchLine = ShowMarchLine
FormationScoutSelectList.HideTroopLine = HideTroopLine
FormationScoutSelectList.RefreshScoutTime = RefreshScoutTime
return FormationScoutSelectList