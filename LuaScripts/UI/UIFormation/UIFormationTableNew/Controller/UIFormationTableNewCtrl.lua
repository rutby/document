---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/29 14:46
---
local UIFormationTableNewCtrl = BaseClass("UIFormationTableNewCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization
local Setting = CS.GameEntry.Setting
local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIFormationTableNew)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function SetCurIndex(self,index)
    self.curIndex = index
end
local function GetAtkImage(self)
    local imgStr = ""
    if self.targetType == MarchTargetType.ATTACK_MONSTER or self.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS or self.targetType == MarchTargetType.RALLY_FOR_BOSS or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_FOR_BOSS) then
        imgStr ="Assets/Main/Sprites/UI/UITroopsNew/UITroopsNew_icon_attack.png"
    elseif self.targetType == MarchTargetType.ATTACK_CITY or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY or self.targetType == MarchTargetType.ATTACK_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY
            or self.targetType == MarchTargetType.RALLY_FOR_CITY or self.targetType == MarchTargetType.RALLY_FOR_BUILDING or self.targetType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE
            or self.targetType ==  MarchTargetType.RALLY_THRONE or self.targetType == MarchTargetType.RALLY_DRAGON_BUILDING or self.targetType == MarchTargetType.ATTACK_DRAGON_BUILDING or self.targetType == MarchTargetType.TRIGGER_DRAGON_BUILDING
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and (self.rallyType==MarchTargetType.RALLY_FOR_BUILDING or self.rallyType==MarchTargetType.RALLY_FOR_CITY or self.rallyType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.rallyType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.rallyType ==  MarchTargetType.RALLY_THRONE or self.rallyType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.rallyType == MarchTargetType.RALLY_DRAGON_BUILDING)) then
        imgStr = "Assets/Main/Sprites/UI/UITroopsNew/UITroopsNew_icon_city.png"

    elseif self.targetType == MarchTargetType.ATTACK_ARMY or self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT
            or self.targetType == MarchTargetType.ASSISTANCE_BUILD or self.targetType == MarchTargetType.ASSISTANCE_CITY or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING
            or self.targetType ==  MarchTargetType.RALLY_ASSISTANCE_THRONE or self.targetType == MarchTargetType.ASSISTANCE_DRAGON_BUILDING or self.targetType == MarchTargetType.TAKE_SECRET_KEY or self.targetType == MarchTargetType.PICK_SECRET_KEY
            or self.targetType == MarchTargetType.GO_WORM_HOLE or self.targetType == MarchTargetType.STATE or self.targetType == MarchTargetType.CROSS_SERVER_WORM or self.targetType ==MarchTargetType.ASSISTANCE_DESERT
            or self.targetType == MarchTargetType.STATE or self.targetType == MarchTargetType.SAMPLE or self.targetType == MarchTargetType.EXPLORE or self.targetType == MarchTargetType.PICK_GARBAGE
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_ASSISTANCE_THRONE) then
        imgStr="Assets/Main/Sprites/UI/UITroopsNew/UITroopsNew_icon_IncreaseAttack.png"
    elseif self.targetType == MarchTargetType.COLLECT then
        local data = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.targetPoint)
        local resourceType = GetTableData(TableName.GatherResource,data.id,"resource_type")
        imgStr = DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType))
    elseif self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.targetUuid)
        if mineInfo ~=nil then
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
            if template~=nil then
                local resourceType =template.collectType
                imgStr = DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType))
            end
        end
    elseif self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
        if mineInfo ~=nil then
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
            if template~=nil then
                local resourceType =template.collectType
                imgStr = DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType))
            end
        end
    end
    return imgStr
end
local function GetAtkValue(self)
    local value = 0
    if self.targetType == MarchTargetType.ATTACK_MONSTER or self.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS or self.targetType == MarchTargetType.RALLY_FOR_BOSS or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_FOR_BOSS) then
        value = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_MONSTER)
        table.walk(self.curHeroes,function(v,k)
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                value= value + heroData:GetEffectNum(EffectDefine.ATTACK_MONSTER)
            end
        end)
    elseif self.targetType == MarchTargetType.ATTACK_CITY or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY or self.targetType == MarchTargetType.ATTACK_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY
            or self.targetType == MarchTargetType.RALLY_FOR_CITY or self.targetType == MarchTargetType.RALLY_FOR_BUILDING or self.targetType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE
            or self.targetType ==  MarchTargetType.RALLY_THRONE or self.targetType == MarchTargetType.RALLY_DRAGON_BUILDING or self.targetType == MarchTargetType.ATTACK_DRAGON_BUILDING or self.targetType == MarchTargetType.TRIGGER_DRAGON_BUILDING
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and (self.rallyType==MarchTargetType.RALLY_FOR_BUILDING or self.rallyType==MarchTargetType.RALLY_FOR_CITY or self.rallyType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.rallyType ==  MarchTargetType.RALLY_ALLIANCE_BUILDING or self.rallyType ==  MarchTargetType.RALLY_THRONE or self.rallyType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.rallyType == MarchTargetType.RALLY_DRAGON_BUILDING)) then
        local cityWar = LuaEntry.DataConfig:TryGetNum("city_wall", "k7")
        local totalSoliderDestroyNum = 0
        table.walk(self.curSoldiers,function(k,v)
            local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
            if template ~= nil then
                local destory = template.destory
                totalSoliderDestroyNum = totalSoliderDestroyNum + (destory*v)
            end
        end)
        local effectNum = LuaEntry.Effect:GetGameEffect(EffectDefine.SIEGE_DAMAGE_ADD_PERCENT)
        table.walk(self.curHeroes,function(v,k)
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                effectNum= effectNum + heroData:GetEffectNum(EffectDefine.SIEGE_DAMAGE_ADD_PERCENT)
            end
        end)
        value = cityWar*totalSoliderDestroyNum*((effectNum/100)+1)

    elseif self.targetType == MarchTargetType.ATTACK_ARMY or self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT
            or self.targetType == MarchTargetType.RALLY_ASSISTANCE_THRONE
            or self.targetType == MarchTargetType.ASSISTANCE_BUILD or self.targetType == MarchTargetType.ASSISTANCE_CITY or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY or self.targetType ==MarchTargetType.ASSISTANCE_DESERT or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING
            or self.targetType == MarchTargetType.ASSISTANCE_DRAGON_BUILDING or self.targetType == MarchTargetType.TAKE_SECRET_KEY or self.targetType == MarchTargetType.PICK_SECRET_KEY
            or self.targetType == MarchTargetType.GO_WORM_HOLE  or self.targetType == MarchTargetType.CROSS_SERVER_WORM or self.targetType == MarchTargetType.STATE or self.targetType == MarchTargetType.SAMPLE or self.targetType == MarchTargetType.EXPLORE or self.targetType == MarchTargetType.PICK_GARBAGE
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_ASSISTANCE_THRONE)
    then
        value = LuaEntry.Effect:GetGameEffect(EffectDefine.WAR_ATTACK)
        table.walk(self.curHeroes,function(v,k)
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                value = value + heroData:GetEffectNum(EffectDefine.WAR_ATTACK)
            end
        end)
        local atkAdd = MarchUtil.GetFormationAtkAddNumByFormationIndex(self.curIndex)
        value = value + atkAdd
    elseif self.targetType == MarchTargetType.COLLECT then
        local data = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.targetPoint)
        if data~=nil then
            local resourceType = GetTableData(TableName.GatherResource,data.id,"resource_type")
            local heroDic = {}
            table.walk(self.curHeroes,function(v,k)
                heroDic[k] = v
            end)
            value = MarchUtil.GetFormationCollectSpeedAdd(heroDic,tonumber(resourceType), self.curIndex)
            
        end
    elseif self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.targetUuid)
        if mineInfo ~=nil then
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
            if template~=nil then
                local resourceType =template.collectType
                local heroDic = {}
                table.walk(self.curHeroes,function(v,k)
                    heroDic[k] = v
                end)
                value = MarchUtil.GetFormationCollectSpeedAdd(heroDic,tonumber(resourceType), self.curIndex)
            end
        end
    elseif self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
        if mineInfo ~=nil then
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
            if template~=nil then
                local resourceType =template.collectType
                local heroDic = {}
                table.walk(self.curHeroes,function(v,k)
                    heroDic[k] = v
                end)
                value = MarchUtil.GetFormationCollectSpeedAdd(heroDic,tonumber(resourceType), self.curIndex)
            end
        end
    end
    return value
end
local function GetDefImage(self)
    local imgStr = ""
    if self.targetType == MarchTargetType.ATTACK_MONSTER or self.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS or self.targetType == MarchTargetType.RALLY_FOR_BOSS or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_FOR_BOSS) then
        imgStr = "Assets/Main/Sprites/UI/UITroopsNew/UITroopsNew_icon_defense.png"
    elseif self.targetType == MarchTargetType.ATTACK_CITY or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY or self.targetType == MarchTargetType.ATTACK_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY or self.targetType == MarchTargetType.ATTACK_DRAGON_BUILDING or self.targetType == MarchTargetType.TRIGGER_DRAGON_BUILDING
            or self.targetType == MarchTargetType.RALLY_FOR_CITY or self.targetType == MarchTargetType.RALLY_FOR_BUILDING or self.targetType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.targetType == MarchTargetType.RALLY_THRONE or self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_DRAGON_BUILDING
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and (self.rallyType==MarchTargetType.RALLY_FOR_BUILDING or self.rallyType==MarchTargetType.RALLY_FOR_CITY or self.rallyType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.rallyType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.rallyType == MarchTargetType.RALLY_THRONE or self.rallyType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.rallyType == MarchTargetType.RALLY_DRAGON_BUILDING)) then
        imgStr = "Assets/Main/Sprites/UI/UITroopsNew/UITroopsNew_icon_load.png"

    elseif self.targetType == MarchTargetType.ATTACK_ARMY or self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT
    or self.targetType == MarchTargetType.RALLY_ASSISTANCE_THRONE
            or self.targetType == MarchTargetType.ASSISTANCE_BUILD or self.targetType == MarchTargetType.ASSISTANCE_CITY or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY or self.targetType ==MarchTargetType.ASSISTANCE_DESERT or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING
            or self.targetType == MarchTargetType.ASSISTANCE_DRAGON_BUILDING or self.targetType == MarchTargetType.TAKE_SECRET_KEY or self.targetType == MarchTargetType.PICK_SECRET_KEY
            or self.targetType == MarchTargetType.GO_WORM_HOLE or self.targetType == MarchTargetType.CROSS_SERVER_WORM or self.targetType == MarchTargetType.STATE or self.targetType == MarchTargetType.SAMPLE or self.targetType == MarchTargetType.EXPLORE or self.targetType == MarchTargetType.PICK_GARBAGE
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_ASSISTANCE_THRONE)
    then
        
        imgStr = "Assets/Main/Sprites/UI/UITroopsNew/UITroopsNew_icon_Reduce-attack.png"
    elseif self.targetType == MarchTargetType.COLLECT then
        local data = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.targetPoint)
        local resourceType = GetTableData(TableName.GatherResource,data.id,"resource_type")
        imgStr = DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType))
    elseif self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.targetUuid)
        if mineInfo ~=nil then
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
            if template~=nil then
                local resourceType =template.collectType
                imgStr = DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType))
            end
        end
    elseif self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
        if mineInfo ~=nil then
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
            if template~=nil then
                local resourceType =template.collectType
                imgStr = DataCenter.ResourceManager:GetResourceIconByType(tonumber(resourceType))
            end
        end
    end
    return imgStr
end
local function GetDefValue(self)
    local value = 0
    if self.targetType == MarchTargetType.ATTACK_MONSTER or self.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS or self.targetType == MarchTargetType.RALLY_FOR_BOSS or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_FOR_BOSS) then
        value = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_MONSTER)
        table.walk(self.curHeroes,function(v,k)
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                value= value + heroData:GetEffectNum(EffectDefine.DEFENCE_MONSTER)
            end
        end)
    elseif self.targetType == MarchTargetType.ATTACK_CITY or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY or self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ATTACK_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY or self.targetType == MarchTargetType.ATTACK_DRAGON_BUILDING or self.targetType == MarchTargetType.TRIGGER_DRAGON_BUILDING or self.targetType == MarchTargetType.TRIGGER_DRAGON_BUILDING
            or self.targetType == MarchTargetType.RALLY_FOR_CITY or self.targetType == MarchTargetType.RALLY_FOR_BUILDING or self.targetType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.targetType == MarchTargetType.RALLY_THRONE or self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_DRAGON_BUILDING
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and (self.rallyType==MarchTargetType.RALLY_FOR_BUILDING or self.rallyType==MarchTargetType.RALLY_FOR_CITY or self.rallyType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.rallyType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.rallyType == MarchTargetType.RALLY_THRONE or self.rallyType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.rallyType == MarchTargetType.RALLY_DRAGON_BUILDING)) then
        local totalSoliderLoadNum = 0
        table.walk(self.curSoldiers,function(k,v)
            local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
            if template ~= nil then
                local load = template.load
                totalSoliderLoadNum = totalSoliderLoadNum + (load*v)
            end
        end)
        local effectNum = LuaEntry.Effect:GetGameEffect(EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT)
        table.walk(self.curHeroes,function(v,k)
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                effectNum= effectNum + heroData:GetEffectNum(EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT)
            end
        end)
        local addValue = MarchUtil.GetFormationAddWeightPercentByFormationIndex(self.curIndex)
        local addNum = MarchUtil.GetFormationAddWeightNumByFormationIndex(self.curIndex)
        local careerValue = LuaEntry.Effect:GetGameEffect(EffectDefine.CAREER_COLLECT_ADD_PERCENT)
        local attackCityAdd = 0
        if self.targetType == MarchTargetType.ATTACK_CITY or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY or self.targetType == MarchTargetType.RALLY_FOR_CITY
                or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and (self.rallyType==MarchTargetType.RALLY_FOR_CITY)) then
            attackCityAdd = LuaEntry.Effect:GetGameEffect(EffectDefine.CAREER_ATTACK_CITY_COLLECT_ADD_PERCENT)
        end
        value = totalSoliderLoadNum*((careerValue/100)+(effectNum/100)+(addValue/100)+(attackCityAdd/100)+1)+addNum
    elseif self.targetType == MarchTargetType.ATTACK_ARMY or self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT
            or self.targetType == MarchTargetType.ASSISTANCE_BUILD or self.targetType == MarchTargetType.ASSISTANCE_CITY or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY or self.targetType ==MarchTargetType.ASSISTANCE_DESERT or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING
            or self.targetType == MarchTargetType.ASSISTANCE_DRAGON_BUILDING or self.targetType == MarchTargetType.TAKE_SECRET_KEY or self.targetType == MarchTargetType.PICK_SECRET_KEY
            or self.targetType == MarchTargetType.GO_WORM_HOLE or self.targetType == MarchTargetType.CROSS_SERVER_WORM or self.targetType == MarchTargetType.STATE  or self.targetType == MarchTargetType.SAMPLE
            or self.targetType == MarchTargetType.RALLY_ASSISTANCE_THRONE
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_ASSISTANCE_THRONE)
            or self.targetType == MarchTargetType.EXPLORE or self.targetType == MarchTargetType.PICK_GARBAGE then
        value = LuaEntry.Effect:GetGameEffect(EffectDefine.WAR_DEFENCE)
        table.walk(self.curHeroes,function(v,k)
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                value = value + heroData:GetEffectNum(EffectDefine.WAR_DEFENCE)
            end
        end)
        local defAdd = MarchUtil.GetFormationDefAddNumByFormationIndex(self.curIndex)
        value = value + defAdd
    elseif self.targetType == MarchTargetType.COLLECT then
        local info = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.targetPoint)
        if info then
            local type = LocalController:instance():getStrValue(TableName.GatherResource,info.id, "resource_type")
            local itemId = GetTableData(TableName.GatherResource,info.id,"param")
            local canGetResourceNum = self:GetCanGatherResourceNum(tonumber(type),itemId)
            value = canGetResourceNum
        end
    elseif self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.targetUuid)
        if mineInfo ~=nil then
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
            if template~=nil then
                local resourceType =template.collectType
                local itemId = template.param
                local canGetResourceNum = self:GetCanGatherResourceNum(tonumber(resourceType),itemId)
                value = canGetResourceNum
            end
        end
    elseif self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
        if mineInfo ~=nil then
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
            if template~=nil then
                local resourceType =template.collectType
                local itemId = template.param
                local canGetResourceNum = self:GetCanGatherResourceNum(tonumber(resourceType),itemId)
                value = canGetResourceNum
            end
        end
    end
    return value
end

local function GetCanGatherResourceNum(self,resourceType,itemId)
    local totalNum = 0
    local partNum = 0.001
    if resourceType == ResourceType.AllianceDragonPoint then
        local basePartNum = LuaEntry.DataConfig:TryGetNum("dragon_war","k2")
        local minPartNum = LuaEntry.DataConfig:TryGetNum("dragon_war","k3")
        partNum = math.max(minPartNum,basePartNum)
    else
        local strK = "k"..(resourceType+1)
        local basePartNum = LuaEntry.DataConfig:TryGetNum("res_weight",strK)
        local minPartNum = LuaEntry.DataConfig:TryGetNum("res_weight_min",strK)
        local percent = 0
        if resourceType == ResourceType.Money then
            percent = LuaEntry.Effect:GetGameEffect(EffectDefine.APS_MONEY_WEIGHT_PERCENT)
        elseif resourceType == ResourceType.Electricity then
            percent = LuaEntry.Effect:GetGameEffect(EffectDefine.APS_ELECTRICITY_WEIGHT_PERCENT)
        end
        local realNum = basePartNum*(1-(percent/100))
        partNum = math.max(minPartNum,realNum)
    end
    if partNum ==nil or partNum<=0 then
        Logger.LogError("can not get weight")
        partNum = 1
    end
    
    local remainRes = 0
    if self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.targetUuid)
        if mineInfo ~=nil then
            remainRes = IntMaxValue   --矿点当前储存数量
        end
    elseif self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
        if mineInfo ~= nil then
            remainRes = IntMaxValue   --矿点当前储存数量
        end
    elseif self.targetType == MarchTargetType.COLLECT then
        local data = DataCenter.WorldPointDetailManager:GetDetailByPointId(self.targetPoint)
        if data then
            remainRes = data.remainRes    --矿点当前储存数量
        end
    end
    
    local totalSoliderLoadNum = 0
    local totalSoliderNum = 0
    table.walk(self.curSoldiers,function(k,v)
        local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
        if template ~= nil then
            local load = template.load
            totalSoliderLoadNum = totalSoliderLoadNum + (load*v)
            totalSoliderNum = totalSoliderNum+v
        end
    end)
    local effectNum = LuaEntry.Effect:GetGameEffect(EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT)
    for v,k in pairs(self.curHeroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
        if heroData~=nil then
            effectNum= effectNum + heroData:GetEffectNum(EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT)
        end
    end
    effectNum= effectNum + DataCenter.EquipmentDataManager:GetEffectValue(self.curIndex,EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT)
    local careerValue = LuaEntry.Effect:GetGameEffect(EffectDefine.CAREER_COLLECT_ADD_PERCENT)
    for v,k in pairs(self.curHeroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
        if heroData~=nil then
            careerValue = careerValue + heroData:GetEffectNum(EffectDefine.CAREER_COLLECT_ADD_PERCENT)
        end
    end
    careerValue= careerValue + DataCenter.EquipmentDataManager:GetEffectValue(self.curIndex,EffectDefine.CAREER_COLLECT_ADD_PERCENT)
    local addValue = MarchUtil.GetFormationAddWeightPercentByFormationIndex(self.curIndex)
    local addNum = MarchUtil.GetFormationAddWeightNumByFormationIndex(self.curIndex)
    local const = (careerValue/100)+(effectNum/100)+(addValue/100)+1
    local k1 = LuaEntry.DataConfig:TryGetNum("gather_weight","k1")
    local k2 = LuaEntry.DataConfig:TryGetNum("gather_weight","k2")
    local k3 = LuaEntry.DataConfig:TryGetNum("gather_weight","k3")
    if k1<=0 then
        k1 =1
    end
    local value = 0
    local specialAdd =  Mathf.Pow(k2,k1)*(totalSoliderLoadNum/math.max(totalSoliderNum,1))*const
    if totalSoliderNum>=k2 then
        value = Mathf.Pow((totalSoliderNum-k2),k3)*(totalSoliderLoadNum/math.max(totalSoliderNum,1))*const+addNum+specialAdd
    else
        value = Mathf.Pow(totalSoliderNum,k1)*(totalSoliderLoadNum/math.max(totalSoliderNum,1))*const+addNum
    end
    totalNum = math.max((value/partNum),0)
    if totalNum>remainRes then
        return remainRes
    end
    return totalNum
end
local function GetDefDes(self)
    local value = ""
    if self.targetType == MarchTargetType.ATTACK_MONSTER or self.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS or self.targetType == MarchTargetType.RALLY_FOR_BOSS or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_FOR_BOSS) then
        value = Localization:GetString("150204")
    elseif self.targetType == MarchTargetType.ATTACK_CITY or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY or self.targetType == MarchTargetType.ATTACK_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY
            or self.targetType == MarchTargetType.RALLY_FOR_CITY or self.targetType == MarchTargetType.RALLY_FOR_BUILDING or self.targetType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING
            or self.targetType == MarchTargetType.RALLY_THRONE or self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_DRAGON_BUILDING or self.targetType == MarchTargetType.ATTACK_DRAGON_BUILDING
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and (self.rallyType==MarchTargetType.RALLY_FOR_BUILDING or self.rallyType==MarchTargetType.RALLY_FOR_CITY or self.rallyType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.rallyType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.rallyType == MarchTargetType.RALLY_THRONE or self.rallyType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.rallyType == MarchTargetType.RALLY_DRAGON_BUILDING)) then
        value = Localization:GetString("150205")
    elseif self.targetType == MarchTargetType.ATTACK_ARMY or self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT
    or self.targetType == MarchTargetType.RALLY_ASSISTANCE_THRONE
            or self.targetType == MarchTargetType.ASSISTANCE_BUILD or self.targetType == MarchTargetType.ASSISTANCE_CITY or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY or self.targetType ==MarchTargetType.ASSISTANCE_DESERT or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING
            or self.targetType == MarchTargetType.ASSISTANCE_DRAGON_BUILDING or self.targetType == MarchTargetType.TAKE_SECRET_KEY or self.targetType == MarchTargetType.PICK_SECRET_KEY
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_ASSISTANCE_THRONE)
            or self.targetType == MarchTargetType.GO_WORM_HOLE or self.targetType == MarchTargetType.CROSS_SERVER_WORM or self.targetType == MarchTargetType.STATE or self.targetType == MarchTargetType.SAMPLE or self.targetType == MarchTargetType.EXPLORE or self.targetType == MarchTargetType.PICK_GARBAGE then
        value = Localization:GetString("150208")
    elseif self.targetType == MarchTargetType.COLLECT or self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        value = Localization:GetString("121061")
    end
    return value
end
local function GetAtkDes(self)
    local value = ""
    if self.targetType == MarchTargetType.ATTACK_MONSTER or self.targetType == MarchTargetType.DIRECT_ATTACK_ACT_BOSS or self.targetType == MarchTargetType.RALLY_FOR_BOSS or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_FOR_BOSS) then
        value = Localization:GetString("150203")
    elseif self.targetType == MarchTargetType.ATTACK_CITY or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY or self.targetType == MarchTargetType.ATTACK_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY
            or self.targetType == MarchTargetType.RALLY_THRONE or self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.targetType == MarchTargetType.ATTACK_DRAGON_BUILDING or self.targetType == MarchTargetType.TRIGGER_DRAGON_BUILDING
            or self.targetType == MarchTargetType.RALLY_FOR_CITY or self.targetType == MarchTargetType.RALLY_FOR_BUILDING or self.targetType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.targetType == MarchTargetType.RALLY_DRAGON_BUILDING
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and (self.rallyType==MarchTargetType.RALLY_FOR_BUILDING or self.rallyType==MarchTargetType.RALLY_FOR_CITY or self.rallyType == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.rallyType == MarchTargetType.RALLY_ALLIANCE_BUILDING or self.rallyType == MarchTargetType.RALLY_THRONE or self.rallyType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE or self.rallyType == MarchTargetType.RALLY_DRAGON_BUILDING)) then
        value = Localization:GetString("150206")

    elseif self.targetType == MarchTargetType.ATTACK_ARMY or self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT
            or self.targetType == MarchTargetType.ASSISTANCE_BUILD or self.targetType == MarchTargetType.ASSISTANCE_CITY or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY or self.targetType ==MarchTargetType.ASSISTANCE_DESERT or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING
            or self.targetType == MarchTargetType.ASSISTANCE_DRAGON_BUILDING or self.targetType == MarchTargetType.TAKE_SECRET_KEY or self.targetType == MarchTargetType.PICK_SECRET_KEY
            or self.targetType == MarchTargetType.RALLY_ASSISTANCE_THRONE
            or (self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType~=nil and self.rallyType==MarchTargetType.RALLY_ASSISTANCE_THRONE)
            or self.targetType == MarchTargetType.GO_WORM_HOLE or self.targetType == MarchTargetType.CROSS_SERVER_WORM or self.targetType == MarchTargetType.STATE
            or self.targetType == MarchTargetType.EXPLORE or self.targetType == MarchTargetType.PICK_GARBAGE then
        value = Localization:GetString("150207")
    elseif self.targetType == MarchTargetType.COLLECT or self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        value = Localization:GetString("121066")
    end
    return value
end
local function GetMaxNum(self)
    local heroes = {}
    table.walk(self.curHeroes,function(k,v)
        if v~=nil then
            heroes[v] = k
        end
    end)
    local asPlayerMaxSoldiers = MarchUtil.GetMaxCanAddSoldierNum(heroes,self.curIndex)
    if self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING then
        local alMineMax = DataCenter.AllianceMineManager:GetAllianceMineSlotCountForConstruct(self.targetUuid)
        asPlayerMaxSoldiers = math.min(alMineMax, asPlayerMaxSoldiers)
    end
    return asPlayerMaxSoldiers
end
local function CheckMaxSoliderNum(self)
    local totalSoliderNum = self:GetTotalSoldierNum()
    local maxNum = self.maxNum
    if maxNum < totalSoliderNum then
        local totalNum =0
        local curSoldiers = {}
        table.walksort(self.curSoldiers,function (leftKey,rightKey)
            local aData = DataCenter.ArmyManager:FindArmy(leftKey)
            local bData = DataCenter.ArmyManager:FindArmy(rightKey)
            if aData.level ~= bData.level then
                return aData.level > bData.level
            end
            return aData.id > bData.id
        end, function (k,v)
            if v>0 then
                local addNum = math.min(maxNum-totalNum,v)
                if addNum>0 then
                    curSoldiers[k] = addNum
                    totalNum = totalNum + addNum
                end
            end
        end)
        self.curSoldiers = curSoldiers
        EventManager:GetInstance():Broadcast(EventId.ArmyFormationSave)
    end
end
local function InitData(self,formationUuid, marchTargetType, pointIndex, uuid, index,backHome,startPointId,rallyType,needAutoFix,guideChangeHeroUuid,guideTargetHeroUuid,isMarch,directionWaitResult,targetServerId, destroyTimeIndex,chooseCrossWormUuid)
    self.currentFormationUuid =0
    self.targetType = tonumber(marchTargetType) or -1
    self.targetPoint = tonumber(pointIndex) or -1
    self.targetUuid = tonumber(uuid) or 0
    self.timeIndex = tonumber(index) or -1
    self.autoBackHome = tonumber(backHome) or 1
    self.uuid = formationUuid
    self.startPointId = tonumber(startPointId) or -1
    self.rallyType = tonumber(rallyType) or nil
    self.needAutoFix = tonumber(needAutoFix) or 1
    self.guideChangeHeroUuid = tonumber(guideChangeHeroUuid) or nil
    self.guideTargetHeroUuid = tonumber(guideTargetHeroUuid) or nil
    self.isMarch = tonumber(isMarch) or 0
    self.directionWaitResult = directionWaitResult or false
    self.targetServerId = tonumber(targetServerId)or -1
    self.destroyTimeIndex = tonumber(destroyTimeIndex) or 1
    self.chooseCrossWormUuid = tonumber(chooseCrossWormUuid) or -1
    if self.needAutoFix == 1 then
        if self.targetType == MarchTargetType.COLLECT then
            local data = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.targetPoint)
            local resourceType = GetTableData(TableName.GatherResource,data.id,"resource_type")
            DataCenter.ArmyFormationDataManager:AutoAddHeroForCollect(self.uuid,resourceType)
            DataCenter.ArmyFormationDataManager:AutoAddSoldierForCollect(self.uuid,false)
        elseif self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING then
            local  mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.targetUuid)
            if mineInfo ~=nil then
                local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
                if template~=nil then
                    local resourceType =template.collectType
                    DataCenter.ArmyFormationDataManager:AutoAddHeroForCollect(self.uuid,resourceType)
                    local alMineMax = DataCenter.AllianceMineManager:GetAllianceMineSlotCountForConstruct(self.targetUuid)
                    DataCenter.ArmyFormationDataManager:AutoAddSoldierForCollect(self.uuid,false,alMineMax)
                end
            end
        elseif self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
            local  mineInfo = DataCenter.AllianceMineManager:GetAllianceMineInfoByUuid(self.targetUuid)
            if mineInfo ~=nil then
                local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
                if template~=nil then
                    local resourceType =template.collectType
                    DataCenter.ArmyFormationDataManager:AutoAddHeroForCollect(self.uuid,resourceType)
                    DataCenter.ArmyFormationDataManager:AutoAddSoldierForCollect(self.uuid,false)
                end
            end
        elseif self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
            local  mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
            if mineInfo ~=nil then
                local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(mineInfo.buildId)
                if template~=nil then
                    local resourceType =template.collectType
                    DataCenter.ArmyFormationDataManager:AutoAddHeroForCollect(self.uuid,resourceType)
                    DataCenter.ArmyFormationDataManager:AutoAddSoldierForCollect(self.uuid,false)
                end
            end
        else
            DataCenter.ArmyFormationDataManager:AutoAddHero(self.uuid)
            if self:NeedTakeArmy() then
                DataCenter.ArmyFormationDataManager:AutoAddSoldier(self.uuid)
            else
            end
        end
        
    end
    local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
    local soldiers = formation.soldiers
    local heroes = formation:GetCurHeroes()
    self:SetCurIndex(formation.index)
    local buildId = MarchUtil.GetFormationBuildNameByIndex(formation.index)
    self.formationUnLockIndex = {}
    local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, 0)
    if levelTemplate~=nil then
        local vecPara1 = string.split(levelTemplate.para1,"|")
        for k,v in pairs(vecPara1) do
            local vec1 = string.split(v,";")
            if #vec1 >= 2 then
                self.formationUnLockIndex[tonumber(vec1[1])] = tonumber(vec1[2])
            end
        end
    end

    self.curHeroes = {}
    self.curSoldiers = {}
    self.initHeroes = {}
    table.walk(soldiers,function (k,v)
        self.curSoldiers[k] = v
    end)
    table.walk(heroes,function (k,v)
        self.curHeroes[v] = k
    end)
    if self.needAutoFix ~=1 then
        table.walk(heroes,function (k,v)
            self.initHeroes[v] = k
        end)
    end
    self.maxNum = self:GetMaxNum()
    local freeSoldiers = DataCenter.ArmyFormationDataManager:GetArmyUnFormationList()
    self.maxSoldiers ={}
    table.walksort(freeSoldiers,function (leftKey,rightKey)
        local aData = DataCenter.ArmyManager:FindArmy(leftKey)
        local bData = DataCenter.ArmyManager:FindArmy(rightKey)
        if aData.level ~= bData.level then
            return aData.level > bData.level
        end
        return aData.id > bData.id
    end, function (k,v)
        if v>0 then
            self.maxSoldiers[k] = v
        end
    end)

    if self.targetType == MarchTargetType.ATTACK_MONSTER then
        local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(self.targetUuid)
        local marchInfo = nil
        if pointInfo~=nil then
            marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
        end
        if marchInfo~=nil then
            self.targetPower = DataCenter.MonsterTemplateManager:GetRecommendPower(marchInfo.monsterId)
        end

    end
end
local function GetCurHeroData(self)
    return self.curHeroes
end

local function GetMaxHeroNum(self)
    return MarchUtil.GetMaxHeroValueByFormationIndex(self.curIndex)
end
local function GetCurCampData(self)
    local curHeroes = {}
    table.walk(self.curHeroes,function(k,v)
        if v ~= 0 then
            curHeroes[v] = k
        end
    end)
    return MarchUtil.GetCampAddParam(curHeroes)
end

function UIFormationTableNewCtrl:GetCurHeroDataList()
    local result = {}
    for _, heroUuid in pairs(self.curHeroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if heroData then
            table.insert(result, heroData)
        end
    end
    return result
end

local function GetCurrentHeroDataList(self,camp)
    local result = {}
    local heroes = DataCenter.HeroDataManager:GetAllHeroBySort()
    for _, heroData in pairs(heroes) do
        if camp ~=nil and camp>-1 then
            local targetCamp = heroData:GetCamp()
            if targetCamp == camp then
                table.insert(result, heroData.uuid)
            end
        else
            table.insert(result, heroData.uuid)
        end
    end
    return result
end
local function GetHeroDataByUuid(self,heroUuid)
    local data = {}
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    local heroConfig = heroData:GetConfig()
    local camp = heroData:GetCamp()
    local rarity = heroConfig.rarity
    data.hero_rarity = HeroUtils.GetRarityIconName(rarity, true)
    data.rankId = heroData:GetCurMilitaryRankId()
    data.heroUuid = heroUuid
    data.heroId = heroData.heroId
    data.qualityIndex = heroData.quality
    data.isWaken = heroData:IsWakeUp()
    data.quality = HeroUtils.GetQualityBgInTroopsByPath(rarity,data.isWaken)
    data.icon = HeroUtils.GetHeroBodyByHeroId(heroData.heroId)
    data.level = heroData.level
    data.camp  = HeroUtils.GetCampIconPath(camp)
    data.index = 0
    data.season = heroConfig.season
    data.isInMarch = false
    data.rarity =rarity
    if heroData.state == ArmyFormationState.March then
        data.isInMarch = true
    end
    data.isSelect = false
    data.isLock = false
    data.formIndex = 0
    local formData = DataCenter.ArmyFormationDataManager:GetFormationFormDataByHeroUuid(heroUuid)
    if formData~=nil then
        data.formIndex = formData.index
    end
    local inMarchHeroId = DataCenter.HeroDataManager:GetHeroIdListInMarch()
    if inMarchHeroId[heroData.heroId]~=nil then
        data.isLock = true
    else
        table.walk(self.curHeroes,function (k,v)
            if v== heroUuid then
                data.index = k
                data.isSelect = true
            else
                local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
                if tempHeroData~=nil then
                    if tempHeroData.heroId == heroData.heroId then
                        data.isLock = true
                    end
                end
            end
        end)
    end

    return data
end
local function SelectHeroByUuid(self,heroUuid)
    local tempIndex = 0
    local maxHeroNum = self:GetMaxHeroNum()
    for i =1,maxHeroNum do
        if tempIndex<=0 then
            if self.curHeroes[i]==nil then
                tempIndex = i
            end
        end
    end
    if tempIndex>0 then
        self.curHeroes[tempIndex]= heroUuid
        self.maxNum = self:GetMaxNum()
        self:OnOneKeyFillClick()
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if heroData~=nil then
            EventManager:GetInstance():Broadcast(EventId.OnSelectHeroSelect,heroData.heroId)
        end
        self:ShowChangeHeroWarning(heroUuid)
    else
        --if self.curHeroes[1]~=nil then
        --    self:OnDeleteHeroByIndex(1)
        --end
        --self.curHeroes[1] = heroUuid
    end

end

local function ShowChangeHeroWarning(self,heroUuid)
    local data = DataCenter.ArmyFormationDataManager:GetFormationFormDataByHeroUuid(heroUuid)
    if data~=nil then
        local index = data.index
        if index~=self.curIndex then
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
            if heroData~=nil then
                UIUtil.ShowTips(Localization:GetString("150214",heroData:GetName(),index,self.curIndex))
            end

        end
    end
end
local function OnDeleteHeroByIndex(self,index)
    if self.curHeroes[index]~=nil then
        local uuid =0
        uuid = self.curHeroes[index]
        self.curHeroes[index] =nil
        local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
        if tempHeroData~=nil then
            EventManager:GetInstance():Broadcast(EventId.OnCancelHeroSelect,tempHeroData.heroId)
        end
        self.maxNum = self:GetMaxNum()
        self:CheckMaxSoliderNum()
    end
end
local function GetCurrentSoliderDataList(self)
    local list = {}
    if self:NeedTakeArmy() == false then
        return list
    end
    table.walk(self.curSoldiers,function(k,v)
        local oneData ={}
        oneData.armyId =k
        oneData.name =""
        oneData.icon =""
        oneData.level = 1
        oneData.count = v
        local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
        if template ~= nil then
            oneData.icon = string.format(LoadPath.SoldierIcons,template.icon)
            oneData.name = Localization:GetString(template.name)
            oneData.level =template.level
        end
        table.insert(list,oneData)
    end)
    table.sort(list,function(a,b)
        if a.level~=b.level then
            return a.level>b.level
        end
        return a.armyId > b.armyId
    end)
    return list
end
local function GetSoliderState(self)
    local oneData = {}
    oneData.curNum = self:GetTotalSoldierNum()
    oneData.maxNum = self.maxNum
    return oneData
end

local function GetCurrentSoldierNum(self,armyId)
    local num =0
    if self.curSoldiers[armyId]~=nil and self.curSoldiers[armyId]>0 then
        num = self.curSoldiers[armyId]
    end
    return num
end
local function SetCurrentSoldierNum(self,armyId,num)
    if num>0 then
        self.curSoldiers[armyId] = num
    else
        self.curSoldiers[armyId] = nil
    end

end
local function GetTotalSoldierNum(self)
    local count =0
    table.walk(self.curSoldiers,function (k,v)
        count = count +v
    end)
    return count
end
local function GetMaxSoldierNum(self)
    local count =0
    table.walk(self.maxSoldiers,function (k,v)
        count = count +v
    end)
    return count
end
local function CheckMax(self,armyId,num)

    local oneMaxNum = self.maxSoldiers[armyId]
    local oneCurrentNum = self:GetCurrentSoldierNum(armyId)
    local currentTotalNum = self:GetTotalSoldierNum()
    local restNum = currentTotalNum - oneCurrentNum

    local checkMax = math.min(oneMaxNum,num)--滑动条最大限度
    local totalRest = self.maxNum - restNum -- 剩余兵空间最大限度

    local final =math.min(totalRest,checkMax)
    if final<0 then
        final =0
    end
    return final
end

local function GetCanAddHeroNum(self)
    local heroList = {}
    for k,v in pairs(self.curHeroes) do
        if v~=nil and v ~=0 then
            heroList[v]= k
        end
    end
    return MarchUtil.GetCanAddHeroNum(heroList,self.curIndex)
end

local function GetIsHeroInCurFormation(self,uuid)
    local isIn = false
    for k,v in pairs(self.curHeroes) do
        if v == uuid then
            return true
        end
    end
    return false
end
--local function OnAddClick(self)
--    self:SaveHeroData()
--    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSoldierChoose,self.uuid)
--end
local function SaveHeroData(self)
    local heroData = {}
    table.walk(self.curHeroes,function(k,v)
        if v~=nil and v>0 then
            heroData[v] = k
        end
    end)
    DataCenter.ArmyFormationDataManager:SetArmyFormationHero(self.uuid,heroData)
end

local function OnFormationSave(self)
    local hasHero = false
    local hasSolider = false
    table.walk(self.curSoldiers,function(k,v)
        if v>0 then
            hasSolider = true
        end
    end)
    table.walk(self.curHeroes,function(k,v)
        if v>0 then
            hasHero = true
        end
    end)
    if (hasSolider or self:NeedTakeArmy() == false)then
        if hasHero ==false then
            local tempFormationTable = ArmyFormationInfo.New()
            tempFormationTable.uuid = self.uuid
            tempFormationTable.index = self.curIndex
            tempFormationTable.soldiers = {}
            tempFormationTable.ownerUid = LuaEntry.Player.uid
            tempFormationTable.heroes = {}
            DataCenter.ArmyFormationDataManager:RefreshFormationModelToJson(tempFormationTable)
            DataCenter.ArmyFormationDataManager:AutoClearFormationData(self.uuid)
            EventManager:GetInstance():Broadcast(EventId.ArmyFormationSave)
            self:CloseSelf()
        else
            local tempFormationTable = ArmyFormationInfo.New()
            tempFormationTable.uuid = self.uuid
            tempFormationTable.index = self.curIndex
            tempFormationTable.soldiers = self.curSoldiers
            tempFormationTable.ownerUid = LuaEntry.Player.uid
            tempFormationTable.heroes = {}
            local count =0
            table.walksort(self.curHeroes,function (leftKey,rightKey)
                return leftKey < rightKey
            end,function(k,v)
                if v~=nil then
                    count = count+1
                    tempFormationTable.heroes[v] = count
                end
            end)
            DataCenter.ArmyFormationDataManager:RefreshFormationModelToJson(tempFormationTable)
            EventManager:GetInstance():Broadcast(EventId.ArmyFormationSave)
            self:CloseSelf()
        end
        UIUtil.ShowTipsId(300056)
    else
        self:CloseSelf()
    end

end
local function CheckNeedResetModel(self)
    local isNeedReset = false
    if self.targetType == MarchTargetType.COLLECT or self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        if self.uuid~=nil then
            local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
            if formation.state == ArmyFormationState.Free then
                DataCenter.ArmyFormationDataManager:AutoAddHero(self.uuid)
                DataCenter.ArmyFormationDataManager:AutoAddSoldier(self.uuid)
                isNeedReset = true
            end
        end
    end
    return isNeedReset
end
local function CheckIsChangeHero(self)
    local isChange = false
    if table.count(self.initHeroes) == table.count(self.curHeroes) then
        for k,v in pairs(self.initHeroes) do
            if isChange ==false then
                if self.curHeroes[k]==nil or self.curHeroes[k]~=v then
                    isChange = true
                end
            end

        end
    else
        isChange = true
    end
    return isChange
end

local function OnStartClick(self)
    if self.targetType>=0 then
        local showGuide = self.directionWaitResult
        local hasHero = false
        local hasSolider = false
        table.walk(self.curSoldiers,function(k,v)
            if v>0 then
                hasSolider = true
            end
        end)
        table.walk(self.curHeroes,function(k,v)
            if v>0 then
                hasHero = true
            end
        end)
        if hasHero and (hasSolider or self:NeedTakeArmy() == false) then
            --if self:NeedTakeArmy() == true then
            local tempFormationTable = ArmyFormationInfo.New()
            tempFormationTable.uuid = self.uuid
            tempFormationTable.index = self.curIndex
            tempFormationTable.soldiers = self.curSoldiers
            tempFormationTable.ownerUid = LuaEntry.Player.uid
            tempFormationTable.heroes = {}
            local count =0
            table.walksort(self.curHeroes,function (leftKey,rightKey)
                return leftKey < rightKey
            end,function(k,v)
                if v~=nil then
                    count = count+1
                    tempFormationTable.heroes[v] = count
                end
            end)

            DataCenter.ArmyFormationDataManager:RefreshFormationModelToJson(tempFormationTable)
            --end
            self:SaveHeroData()
            DataCenter.ArmyFormationDataManager:SetArmyFormationSoldier(self.uuid,self.curSoldiers)

            local sfsObj = SFSObject.New()
            sfsObj:PutLong("uuid", self.uuid)
            local formationArray = SFSArray.New()
            table.walk(self.curSoldiers,function (k,v)
                local obj = SFSObject.New()
                obj:PutUtfString("armyId",k)
                obj:PutInt("count", v)
                formationArray:AddSFSObject(obj)
            end)

            sfsObj:PutSFSArray("formations", formationArray)

            local heroArray = SFSArray.New()
            table.walk(self.curHeroes,function (k,v)
                local obj = SFSObject.New()
                obj:PutLong("heroUuid",v)
                obj:PutInt("index", k)
                heroArray:AddSFSObject(obj)
            end)

            sfsObj:PutSFSArray("heroInfos", heroArray)
            local dataObj = sfsObj
            local pos = 0
            pos = LuaEntry.Player:GetMainWorldPos()
            if CrossServerUtil:GetIsCrossServer() then
                local crossBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.WORM_HOLE_CROSS)
                if crossBuildData~=nil then
                    pos = crossBuildData.pointId
                end
            end
            if self.targetType == MarchTargetType.ATTACK_MONSTER then
                local needShow  = Setting:GetPrivateInt("SHOW_ADD_SOLDIER",0)
                if needShow<=0 then
                    local totalPower = MarchUtil.GetFormationPower(tempFormationTable.heroes,tempFormationTable.soldiers,tempFormationTable.index,MarchUtil.GetCampAddParam(tempFormationTable.heroes))
                    local targetPower = 0
                    local targetLevel = 0
                    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(self.targetUuid)
                    local marchInfo = nil
                    if pointInfo~=nil then
                        marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
                    end
                    if marchInfo~=nil and  marchInfo.type ~= NewMarchType.CHALLENGE_BOSS and marchInfo.type ~= NewMarchType.PUZZLE_BOSS then
                        targetPower = DataCenter.MonsterTemplateManager:GetRecommendPower(marchInfo.monsterId)
                        local level = DataCenter.MonsterTemplateManager:GetTableValue(marchInfo.monsterId,"level")
                        local power_tip = DataCenter.MonsterTemplateManager:GetTableValue(marchInfo.monsterId,"power_tip")
                        targetLevel = tonumber(level)
                        if power_tip ==1 then
                            targetPower = 0
                        end
                    end
                    local percent = (totalPower-targetPower)/math.max(1,targetPower)

                    if percent<0 then
                        local k2 = LuaEntry.DataConfig:TryGetNum("res_lack", "k2")
                        local configOpenState = LuaEntry.DataConfig:CheckSwitch("detect_monster")
                        if configOpenState then
                            UIUtil.ShowMessage(Localization:GetString("121010"),1,nil,nil,nil, nil,function(needSellConfirm)
                                if needSellConfirm== false then
                                    Setting:SetPrivateInt("SHOW_ADD_SOLDIER",1)
                                else
                                    Setting:SetPrivateInt("SHOW_ADD_SOLDIER",0)
                                end
                            end,121009)
                        elseif LuaEntry.Player.pveLevel<=k2 then
                            --UIUtil.ShowTipsId(121010)
                            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationLackPower,{anim= true,isBlur = true},targetLevel,self.uuid,totalPower,targetPower)
                            self:CloseSelf()
                        else
                            UIUtil.ShowSecondMessage(Localization:GetString("121009"),Localization:GetString("121010"),1,150122,"", function()
                                MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.uuid, self.autoBackHome,dataObj,pos,self.targetServerId,-1,self.chooseCrossWormUuid)
                                self:CloseSelf()
                            end, function(needSellConfirm)
                                if needSellConfirm== false then
                                    Setting:SetPrivateInt("SHOW_ADD_SOLDIER",1)
                                else
                                    Setting:SetPrivateInt("SHOW_ADD_SOLDIER",0)
                                end
                            end)
                        end
                        if showGuide == true then
                            EventManager:GetInstance():Broadcast(EventId.StartAttackMonsterWithoutMsgTip, 0)
                        end
                        return
                    end
                end
                local heroUuid = 0
                local heroName = ""
                local heroNameList = {}
                local isReachBreakLimit = false
                local isReachLevelLimit = false
                local show =  Setting:GetPrivateInt("UIShowHeroWarning",0)
                --if show<=0 and showGuide == false then
                --    if self.curHeroes then
                --        table.walk(self.curHeroes,function(v,k)
                --            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                --            if heroData~=nil then
                --                if heroUuid==0 and isReachBreakLimit == false and isReachLevelLimit == false  then
                --                    if heroData:IsReachBreakLimit() == true then
                --                        isReachBreakLimit = true
                --                        heroUuid = k
                --                    elseif heroData:IsReachLevelLimit() == true then
                --                        isReachLevelLimit = true
                --                        heroUuid = k
                --                    end
                --                end
                --                if heroData:IsReachBreakLimit() == true or heroData:IsReachLevelLimit() == true then
                --                    table.insert(heroNameList,heroData:GetName())
                --                end
                --            end
                --
                --        end)
                --    end
                --end

                if heroUuid~=0 and (isReachBreakLimit == true or isReachLevelLimit == true) and showGuide == false then
                    local total = #heroNameList
                    local num = 0
                    table.walk(heroNameList,function(k,v)
                        num = num+1
                        if num<total then
                            heroName = heroName.."<color=#ff0000>"..v.."</color>"..","
                        else
                            heroName = heroName.."<color=#ff0000>"..v.."</color>"
                        end
                    end)
                    local content = Localization:GetString("161022",heroName)
                    local targetType = self.targetType
                    local targetPoint = self.targetPoint
                    local targetUuid = self.targetUuid
                    local timeIndex = self.timeIndex
                    local uuid = self.uuid
                    local autoBackHome = self.autoBackHome
                    local targetServer = self.targetServerId
                    local chooseWormUuid = self.chooseCrossWormUuid
                    UIUtil.ShowSecondMessage(Localization:GetString("100378"),content, 2,"161030", "161023",function()
                        MarchUtil.StartMarch(targetType, targetPoint, targetUuid, timeIndex, 0, uuid, autoBackHome,dataObj,pos,targetServer,-1,chooseWormUuid)
                    end,function(needSellConfirm)
                        if needSellConfirm== false then
                            Setting:SetPrivateInt("UIShowHeroWarning",1)
                        else
                            Setting:SetPrivateInt("UIShowHeroWarning",0)
                        end
                    end, function()
                        if isReachBreakLimit == true then
                            local heroList = {}
                            table.insert(heroList,heroUuid)
                            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, 1, heroUuid, heroList)
                        elseif isReachLevelLimit == true then
                            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance)
                        end
                    end)
                else
                    if showGuide == true then
                        EventManager:GetInstance():Broadcast(EventId.StartAttackMonsterWithoutMsgTip, 1)
                    end
                    MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.uuid, self.autoBackHome,dataObj,pos,self.targetServerId,-1,self.chooseCrossWormUuid)
                end
            elseif self.targetType == MarchTargetType.ATTACK_DESERT or self.targetType == MarchTargetType.TRAIN_DESERT then
                local heroUuid = 0
                local heroName = ""
                local heroNameList = {}
                local isReachBreakLimit = false
                local isReachLevelLimit = false
                local show = Setting:GetPrivateInt("UIShowHeroWarning", 0)
                if show<=0 and showGuide == false then
                    if self.curHeroes then
                        table.walk(self.curHeroes,function(v,k)
                            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                            if heroData~=nil then
                                if heroUuid==0 and isReachBreakLimit == false then
                                    if heroData:IsReachBreakLimit() == true then
                                        isReachBreakLimit = true
                                        heroUuid = k
                                    end
                                end
                                if heroData:IsReachBreakLimit() == true then
                                    table.insert(heroNameList,heroData:GetName())
                                end
                            end

                        end)
                    end
                end
                if heroUuid ~= 0 and (isReachBreakLimit == true or isReachLevelLimit == true) and showGuide == false then
                    local total = #heroNameList
                    local num = 0
                    table.walk(heroNameList, function(k, v)
                        num = num + 1
                        if num < total then
                            heroName = heroName .. "<color=#ff0000>" .. v .. "</color>" .. ","
                        else
                            heroName = heroName .. "<color=#ff0000>" .. v .. "</color>"
                        end
                    end)
                    local content = Localization:GetString("161022", heroName)
                    local targetType = self.targetType
                    local targetPoint = self.targetPoint
                    local targetUuid = self.targetUuid
                    local timeIndex = self.timeIndex
                    local uuid = self.uuid
                    local autoBackHome = self.autoBackHome
                    local targetServer = self.targetServerId
                    local chooseWormUuid = self.chooseCrossWormUuid
                    local destroyTimeIndex = self.destroyTimeIndex
                    UIUtil.ShowSecondMessage(Localization:GetString("100378"), content, 2, "161030", "161023", function()
                        MarchUtil.StartMarch(targetType, targetPoint, targetUuid, timeIndex, 0, uuid, autoBackHome, dataObj, pos, targetServer,destroyTimeIndex,chooseWormUuid)
                    end, function(needSellConfirm)
                        if needSellConfirm == false then
                            Setting:SetPrivateInt("UIShowHeroWarning", 1)
                        else
                            Setting:SetPrivateInt("UIShowHeroWarning", 0)
                        end
                    end, function()
                        if isReachBreakLimit == true then
                            local heroList = {}
                            table.insert(heroList, heroUuid)
                            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, 1, heroUuid, heroList)
                        elseif isReachLevelLimit == true then
                            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroAdvance)
                        end
                    end)
                else
                    MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.uuid, self.autoBackHome, dataObj, pos, self.targetServerId,self.destroyTimeIndex,self.chooseCrossWormUuid)
                end
                
            else
                --参与集结时判断下是否满足条件，不满足弹个提示
                local targetMonsterId = nil
                local assemblyMarchMax
                if self.targetType == MarchTargetType.RALLY_FOR_BOSS then
                    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(self.targetUuid)
                    local marchInfo = nil
                    if pointInfo~=nil then
                        marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
                    end
                    if marchInfo~=nil then
                        targetMonsterId = marchInfo.monsterId
                        assemblyMarchMax = LuaEntry.Effect:GetGameEffect(EffectDefine.APS_ALLIANCE_TEAM_MAX_ARMY)
                    end
                elseif  self.targetType == MarchTargetType.JOIN_RALLY  then
                    local data = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(self.targetUuid)
                    assemblyMarchMax = data.assemblyMarchMax
                    targetMonsterId = data.targetUid
                end
                if self.targetType == MarchTargetType.RALLY_FOR_BOSS or (self.targetType == MarchTargetType.JOIN_RALLY  and self.rallyType == MarchTargetType.RALLY_FOR_BOSS) then
                    if targetMonsterId ~= nil then
                        local pow = DataCenter.MonsterTemplateManager:GetRecommendPower(tonumber(targetMonsterId)) / assemblyMarchMax * 0.8
                        local totalPower = MarchUtil.GetFormationPower(tempFormationTable.heroes,tempFormationTable.soldiers,tempFormationTable.index,MarchUtil.GetCampAddParam(tempFormationTable.heroes))
                        if pow > totalPower then
                            UIUtil.ShowMessage(Localization:GetString("141079"),2,"","", function()
                                MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.uuid, self.autoBackHome,dataObj,pos,self.targetServerId,-1,self.chooseCrossWormUuid)
                                self:CloseSelf()
                            end)
                            return
                        end
                    end
                end
                if self.targetType == MarchTargetType.RALLY_FOR_BOSS then
                    local distance = LuaEntry.DataConfig:TryGetNum("world_auto_join_team", "k5")
                    local distanceV3 = Vector3.Distance(SceneUtils.TileIndexToWorld(self.startPointId,ForceChangeScene.World), SceneUtils.TileIndexToWorld(self.targetPoint,ForceChangeScene.World))
                    if distanceV3 > distance * 2 then
                        UIUtil.ShowMessage(Localization:GetString("110203"), 2, GameDialogDefine.CANCEL, "400027", nil, function()
                            MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.uuid, self.autoBackHome,dataObj,pos,self.targetServerId,-1,self.chooseCrossWormUuid)
                            self:CloseSelf()
                        end)
                        return
                    end
                end
                if self.targetType == MarchTargetType.JOIN_RALLY and self.rallyType == MarchTargetType.RALLY_FOR_BOSS then
                    local distance = LuaEntry.DataConfig:TryGetNum("world_auto_join_team", "k6")
                    local targetPoint =0
                    local teamInfo = DataCenter.AllianceWarDataManager:GetAllianceWarDataByUuid(self.targetUuid)
                    if teamInfo~=nil then
                        targetPoint = teamInfo.targetPointId
                        if targetPoint>0 then
                            local distanceV3 = Vector3.Distance(SceneUtils.TileIndexToWorld(self.startPointId,ForceChangeScene.World),SceneUtils.TileIndexToWorld(targetPoint,ForceChangeScene.World))
                            if distanceV3>distance*2 then
                                UIUtil.ShowMessage(Localization:GetString("110204"), 2, GameDialogDefine.CANCEL, "400027", nil, function()
                                    MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.uuid, self.autoBackHome,dataObj,pos,self.targetServerId,-1,self.chooseCrossWormUuid)
                                    self:CloseSelf()
                                end)
                                return
                            end
                        end

                    end
                end
                --if self.targetType == MarchTargetType.RALLY_FOR_BOSS then
                --    local time = 0
                --    if LuaEntry.Player.serverType == ServerType.NORMAL then
                --        time = self:GetCostTime()
                --    end
                --    local timeLimit = LuaEntry.DataConfig:TryGetNum("assembly_monster_toplimit", "k2")
                --    if timeLimit > 0 and time > (timeLimit * 60) then
                --        UIUtil.ShowMessage(Localization:GetString("110203", timeLimit), 2, GameDialogDefine.CANCEL, "400027", function()
                --            self:CloseSelf()
                --        end , function()
                --            MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.uuid, self.autoBackHome,dataObj,pos,self.targetServerId,-1,self.chooseCrossWormUuid)
                --            self:CloseSelf()
                --        end)
                --        return
                --    end
                --end
                MarchUtil.StartMarch(self.targetType, self.targetPoint, self.targetUuid, self.timeIndex, 0, self.uuid, self.autoBackHome,dataObj,pos,self.targetServerId, self.destroyTimeIndex,self.chooseCrossWormUuid)
            end
            self:CloseSelf()
        else
            if showGuide == true then
                EventManager:GetInstance():Broadcast(EventId.StartAttackMonsterWithoutMsgTip, 0)
            end
            UIUtil.ShowTipsId(GameDialogDefine.ADD_SOLDIER)
        end

    else
        UIUtil.ShowTipsId(120090)
    end
end
local function ClearFormation(self)
    DataCenter.ArmyFormationDataManager:AutoClearFormationData(self.uuid)
end
local function GetCostTime(self)
    if self.targetType == MarchTargetType.CROSS_SERVER_WORM then
        local wormTime = LuaEntry.DataConfig:TryGetNum("crossServerFight", "k1")
        return wormTime
    end
    local speed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k1")
    local k1 = LuaEntry.DataConfig:TryGetNum("armyspeed", "k1")
    local detectEvent = DataCenter.RadarCenterDataManager:GetDetectEventInfoByPointId(self.targetPoint)
    local k7 = 1
    --雷达怪固定k1 * k7
    if detectEvent ~= nil then
        k7 = LuaEntry.DataConfig:TryGetNum("armyspeed", "k7")
        if k7 == 0 then
            k7 = 1
        end
        speed = CS.SceneManager.World.TileSize * k1 * k7
    else
        local addEffect = LuaEntry.Effect:GetGameEffect(EffectDefine.ARMY_SPEED_ADD)
        for k,v in pairs(self.curHeroes) do
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v)
            if heroData~=nil then
                addEffect= addEffect + heroData:GetEffectNum(EffectDefine.ARMY_SPEED_ADD)
            end
            local indexAdd = MarchUtil.GetFormationSpeedAddByIndex(self.curIndex)
            indexAdd = indexAdd + DataCenter.EquipmentDataManager:GetEffectValue(self.curIndex, EffectDefine.ARMY_SPEED_ADD)
            local joinAddSpeed =0
            local joinRallyForBossSpeed = 0
            if self.targetType == MarchTargetType.JOIN_RALLY then
                joinAddSpeed = LuaEntry.Effect:GetGameEffect(EffectDefine.CAREER_JOIN_TEAM_SPEED_ADD_PERCENT)
                if self.rallyType == MarchTargetType.RALLY_FOR_BOSS then
                    joinRallyForBossSpeed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k5")
                end
            elseif self.targetType == MarchTargetType.RALLY_FOR_BOSS then
                joinRallyForBossSpeed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k6")
            end
            local alScienceEff = 0
            if self.targetType == MarchTargetType.ASSISTANCE_BUILD or self.targetType == MarchTargetType.ASSISTANCE_CITY or self.targetType ==MarchTargetType.ASSISTANCE_DESERT
                    or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING then
                alScienceEff = LuaEntry.Effect:GetGameEffect(EffectDefine.ASSIST_SPEED_ADD)
                local isAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfIsAlTerritory(self.targetPoint)
                if isAlTerritory then
                    local k8 = LuaEntry.DataConfig:TryGetNum("armyspeed", "k8")
                    alScienceEff = k8+alScienceEff
                end
            end
            speed = CS.SceneManager.World.TileSize * k1*(1+(addEffect/100)+(indexAdd/100)+(joinAddSpeed/100)+(alScienceEff/100) + joinRallyForBossSpeed)
        end
    end
    local needTime =-1
    if speed~=nil and speed>0 then
        local time = 0
        local startPos = self.startPointId
        local needWormHole = false
        local directDistance = -1
        local distanceFromWorm = -1
        local distanceBaseToWormHole = -1
        local hasDoFindPath = false
        if (self.targetServerId == -1 or self.targetServerId == LuaEntry.Player:GetSelfServerId())then
            if self.targetType == MarchTargetType.STATE
                    or self.targetType == MarchTargetType.ATTACK_MONSTER
                    or self.targetType == MarchTargetType.COLLECT
                    or self.targetType == MarchTargetType.ATTACK_BUILDING
                    or self.targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING
                    or self.targetType == MarchTargetType.ATTACK_ARMY
                    or self.targetType == MarchTargetType.ATTACK_ARMY_COLLECT
                    or self.targetType == MarchTargetType.ATTACK_CITY
                   
                    or self.targetType == MarchTargetType.DIRECT_ATTACK_CITY
                    or self.targetType == MarchTargetType.ASSISTANCE_CITY
                    or self.targetType == MarchTargetType.ASSISTANCE_BUILD
                    or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_CITY
                    or self.targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING
                    or self.targetType == MarchTargetType.ASSISTANCE_DESERT
                    or self.targetType == MarchTargetType.ATTACK_ALLIANCE_CITY
                    or self.targetType == MarchTargetType.ATTACK_DESERT
                    or self.targetType == MarchTargetType.TRAIN_DESERT
                    or self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING
                    or self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE
                    or self.targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE
                    or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE
            then
                local useWormHold,dirDistance,distanceWormHole,distance1,chooseUuid,wormHolePointId = MarchUtil.ChoosePathInWormHoleOrDirect(self.targetPoint,startPos)
                needWormHole = useWormHold
                if needWormHole== true then
                    startPos = wormHolePointId
                end
                directDistance = dirDistance
                distanceFromWorm = distance1
                distanceBaseToWormHole = distanceWormHole
                hasDoFindPath = true
            elseif self.targetType == MarchTargetType.GO_WORM_HOLE and self.chooseCrossWormUuid~=nil and self.chooseCrossWormUuid~=-1 then
                local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(self.chooseCrossWormUuid)
                if buildData ~= nil then
                    local pos = buildData.pointId
                    local dirPath = startPos..";"..pos
                    distanceBaseToWormHole = SceneUtils.CalculateDistanceV3(dirPath)
                    distanceFromWorm = 0
                    directDistance = 0
                    needWormHole = true
                    hasDoFindPath = true
                end
            end
        end
        local extraTime = 0
        if needWormHole == true then
            local k3 = 1
            if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
                k3 = LuaEntry.DataConfig:TryGetNum("worm_b", "k3")
            end
            local wormHoleSpeedAdd = 1+(LuaEntry.Effect:GetGameEffect(EffectDefine.APS_WORM_SPEED_ADD_PERCENT)*k3)/100
            extraTime = distanceBaseToWormHole/(speed*wormHoleSpeedAdd )
        end
        if hasDoFindPath ==false then --没有执行寻路就再寻一遍
            local dirPath = SceneUtils.GetPathFormAToB(startPos,self.targetPoint)
            if dirPath ~= nil and dirPath ~= "" then
                directDistance = SceneUtils.CalculateDistanceV3(dirPath)
            end
        end
        local calcBlackDesert = false
        local distance = 0
        if LuaEntry.Player.serverType == ServerType.NORMAL then
            local dec = DataCenter.BirthPointTemplateManager:GetBlackLandSpeedByServerId(LuaEntry.Player:GetCurServerId())
            local startInBlackLand = SceneUtils.IsInBlackRange(startPos)
            local endInBlackLand = SceneUtils.IsInBlackRange(self.targetPoint)
            if startInBlackLand == true and endInBlackLand ==true then
                distance = Vector3.Distance(SceneUtils.TileIndexToWorld(startPos),SceneUtils.TileIndexToWorld(self.targetPoint))
                time = distance/ (speed*dec)
                calcBlackDesert = true
            else
                local pointA,pointB = SceneUtils.GetCrossPointByTroopLineAndBlackRange(startPos,self.targetPoint)
                if pointA ~= nil then
                    --从黑土地外进入
                    if startInBlackLand == false then
                        --没出去
                        if pointB == nil then
                            local emptyDis = Vector3.Distance(SceneUtils.TileIndexToWorld(startPos),SceneUtils.TileIndexToWorld(pointA))
                            local blackDis = Vector3.Distance(SceneUtils.TileIndexToWorld(self.targetPoint),SceneUtils.TileIndexToWorld(pointA))
                            time = (emptyDis/speed) + (blackDis/(speed*dec))
                        else
                            --出去了
                            local inDis = Vector3.Distance(SceneUtils.TileIndexToWorld(startPos),SceneUtils.TileIndexToWorld(pointA))
                            local blackDis = Vector3.Distance(SceneUtils.TileIndexToWorld(pointA),SceneUtils.TileIndexToWorld(pointB))
                            local outDis = Vector3.Distance(SceneUtils.TileIndexToWorld(self.targetPoint),SceneUtils.TileIndexToWorld(pointB))
                            time = ((inDis+outDis)/speed) + (blackDis/(speed*dec))
                        end
                    else
                        --起始在黑土地，出去了
                        local emptyDis = Vector3.Distance(SceneUtils.TileIndexToWorld(self.targetPoint),SceneUtils.TileIndexToWorld(pointA))
                        local blackDis = Vector3.Distance(SceneUtils.TileIndexToWorld(startPos),SceneUtils.TileIndexToWorld(pointA))
                        time = (emptyDis/speed) + (blackDis/(speed*dec))
                    end
                    calcBlackDesert = true
                end
            end
        end
        if calcBlackDesert ==false then
            if needWormHole == true then
                time = distanceFromWorm/ (speed)
                needTime = time+extraTime
            elseif directDistance >=0 then
                time = directDistance/ (speed)
                needTime = time+extraTime
            end
        else
            needTime = time+extraTime
        end
    end

    return needTime
end
local function GetArmyIdList(self)
    if self:NeedTakeArmy() == false then
        return {}
    end
    return table.keys(self.maxSoldiers)
end
local function GetArmyData(self,armyId)
    local oneData ={}
    oneData.name =""
    oneData.armyId = armyId
    oneData.maxNum = self.maxSoldiers[armyId]
    oneData.icon =""
    oneData.level = 0
    local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(armyId)
    if template ~= nil then
        oneData.icon = string.format(LoadPath.SoldierIcons,template.icon)
        oneData.name = Localization:GetString(template.name)
        oneData.level = template.level
    end
    return oneData
end
local function OnOneKeyFillClick(self)
    if self:NeedTakeArmy() == false then
        return
    end
    self:SaveHeroData()
    self.curSoldiers ={}
    if self.targetType == MarchTargetType.COLLECT or self.targetType == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or self.targetType == MarchTargetType.BUILD_ALLIANCE_BUILDING or self.targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
        table.walksort(self.maxSoldiers,function (leftKey,rightKey)
            local aData = DataCenter.ArmyManager:FindArmy(leftKey)
            local bData = DataCenter.ArmyManager:FindArmy(rightKey)
            if aData.level ~= bData.level then
                return aData.level < bData.level
            end
            return aData.id < bData.id
        end, function (k,v)
            local num = self:CheckMax(k,v)
            self:SetCurrentSoldierNum(k,num)
        end)
    else
        local effectList = {}
        local checkList = {"arm_1","arm_2","arm_3","arm_4"}
        local formation = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(self.uuid)
        if formation~=nil then
            local heroes = formation:GetCurHeroes()
            local buffEffectDict = nil
            for k,v in pairs(checkList) do
                local typeAtkEffectNum = MarchUtil.GetEffectNumInFormation(heroes,GetTableData("effect",EffectCoupleType.BASE_ATTACK,v), buffEffectDict)
                local typeDefEffectNum = MarchUtil.GetEffectNumInFormation(heroes,GetTableData("effect",EffectCoupleType.BASE_DEFEND,v), buffEffectDict)
                local typeHealthEffectNum = MarchUtil.GetEffectNumInFormation(heroes,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,v), buffEffectDict)
                local total = typeAtkEffectNum+typeDefEffectNum+typeHealthEffectNum
                effectList[v] = total
            end
        end
        
        table.walksort(self.maxSoldiers,function (leftKey,rightKey)
            local aData = DataCenter.ArmyManager:FindArmy(leftKey)
            local bData = DataCenter.ArmyManager:FindArmy(rightKey)
            if aData.level ~= bData.level then
                return aData.level > bData.level
            end
            local leftAdd = 0
            local rightAdd = 0
            local leftType = aData:GetAddValueEffectName()
            local rightType = bData:GetAddValueEffectName()
            if leftType~=nil and effectList[leftType]~=nil then
                leftAdd = effectList[leftType]
            end
            if rightType~=nil and effectList[rightType]~=nil then
                rightAdd = effectList[rightType]
            end
            if leftAdd ~= rightAdd then
                return leftAdd>rightAdd
            end
            return aData.id > bData.id
        end, function (k,v)
            local num = self:CheckMax(k,v)
            self:SetCurrentSoldierNum(k,num)
        end)
    end
    
end
local function OnOneKeyClearClick(self)
    self.curSoldiers ={}
    table.walk(self.maxSoldiers,function (k,v)
        self:SetCurrentSoldierNum(k,0)
    end)
end

local function OnSaveClick(self)
    DataCenter.ArmyFormationDataManager:SetArmyFormationSoldier(self.uuid,self.curSoldiers)
    EventManager:GetInstance():Broadcast(EventId.ArmyFormationSave)
end

local function GetCostStaminaByTargetType(self,type)
    if type == MarchTargetType.TRAIN_DESERT or type == MarchTargetType.ATTACK_DESERT then
        local isEmptyDesert = true
        local worldTileInfo = CS.SceneManager.World:GetWorldTileInfo(self.targetPoint)
        if worldTileInfo ~= nil then
            local pointData = worldTileInfo:GetPointInfo()
            if pointData == nil then
                local desertInfo = worldTileInfo:GetWorldDesertInfo()
                if desertInfo~=nil then
                    local level = GetTableData(TableName.Desert, desertInfo.desertId, "desert_level")
                    if level>0 then
                        isEmptyDesert = false
                    end
                end
            end
        end
        return MarchUtil.GetCostStaminaByTargetType(type,self.rallyType,self.uuid,nil,isEmptyDesert)
    end
    return MarchUtil.GetCostStaminaByTargetType(type,self.rallyType,self.uuid)
end

local function GetFormationPower(self)
    local curHeroes = {}
    table.walk(self.curHeroes,function(k,v)
        if v ~= 0 then
            curHeroes[v] = k
        end

    end)
    local campData = self:GetCurCampData()
    if self.targetType == MarchTargetType.EXPLORE then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(self.targetUuid)
        if info ~= nil then
            return MarchUtil.GetExploreFormationPower(curHeroes, info.eventId, self.curIndex,campData)
        end
    end
    return MarchUtil.GetFormationPower(curHeroes,self.curSoldiers,self.curIndex,campData)
end

local function GetTargetPower(self)
    return self.targetPower
end

local function NeedTakeArmy(self)
    return self.targetType ~= MarchTargetType.EXPLORE
end

local function GetScienceIdByUnlock(self,index)
    Logger.Log("GetScienceIdByUnlockIndex", index)
    if self.formationUnLockIndex[index]~=nil then
        Logger.Log("GetScienceIdByUnlock", self.formationUnLockIndex[index])
        return self.formationUnLockIndex[index]
    end
end
local function OnChangeMarchInGuide(self)
    local hasHero = false
    local hasSolider = false
    table.walk(self.curSoldiers,function(k,v)
        if v>0 then
            hasSolider = true
        end
    end)
    table.walk(self.curHeroes,function(k,v)
        if v>0 then
            hasHero = true
        end
    end)
    if hasHero and hasSolider then
        local tempFormationTable = ArmyFormationInfo.New()
        tempFormationTable.uuid = self.uuid
        tempFormationTable.index = self.curIndex
        tempFormationTable.soldiers = self.curSoldiers
        tempFormationTable.ownerUid = LuaEntry.Player.uid
        tempFormationTable.heroes = {}
        local count =0
        table.walksort(self.curHeroes,function (leftKey,rightKey)
            return leftKey < rightKey
        end,function(k,v)
            if v~=nil then
                count = count+1
                tempFormationTable.heroes[v] = count
            end
        end)
        DataCenter.ArmyFormationDataManager:RefreshFormationModelToJson(tempFormationTable)
        local sfsObj = SFSObject.New()
        sfsObj:PutLong("uuid", self.uuid)
        local formationArray = SFSArray.New()
        table.walk(self.curSoldiers,function (k,v)
            local obj = SFSObject.New()
            obj:PutUtfString("armyId",k)
            obj:PutInt("count", v)
            formationArray:AddSFSObject(obj)
        end)

        sfsObj:PutSFSArray("formations", formationArray)

        local heroArray = SFSArray.New()
        table.walk(self.curHeroes,function (k,v)
            local obj = SFSObject.New()
            obj:PutLong("heroUuid",v)
            obj:PutInt("index", k)
            heroArray:AddSFSObject(obj)
        end)

        sfsObj:PutSFSArray("heroInfos", heroArray)
        DataCenter.GuideCityManager:SetFormationParam(sfsObj)
        self:CloseSelf()
        EventManager:GetInstance():Broadcast(EventId.CreateFormationUuid,self.uuid)
    else
        UIUtil.ShowTipsId(GameDialogDefine.ADD_SOLDIER)
    end

end

local function OnTroopClick(self)
    self:CloseSelf()
    local buildId = MarchUtil.GetFormationBuildNameByIndex(self.curIndex)
    local needMainLv = DataCenter.GarageRefitManager.needMainLv
    if DataCenter.BuildManager.MainLv >= needMainLv then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGarageRefit, buildId)
    else
        UIUtil.ShowTips(Localization:GetString("140339", needMainLv))
    end
end

local function GetFormationHeroCanChangeHigherUuidByQuality(self,formationUuid,heroUuid)
    local heroIdList = {}
    local minRarity = -1
    local minHeroUuid = 0
    local targetHeroUuid = 0
    for b,a in pairs(self.curHeroes)do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(a)
        if heroData~=nil then
            if heroData~=nil then
                local heroId = heroData.heroId
                heroIdList[heroId] = 1
                if a == heroUuid then
                    minHeroUuid = a
                    minRarity = heroData.rarity
                    minHeroUuid = heroData.uuid
                end
            end
        end
    end
    if minHeroUuid~=0 then
        local formHeroList = {}
        local FormationFormList = DataCenter.ArmyFormationDataManager:GetArmyFormList()
        for c,d in pairs(FormationFormList) do
            if c~=formationUuid then
                local tempHeroList =d.heroes
                for e,f in pairs(tempHeroList) do
                    formHeroList[e] = 1
                end
            end

        end
        local allHeroes = DataCenter.HeroDataManager:GetAllHeroBySort()
        for k,v in pairs(allHeroes) do
            local heroId = v.heroId
            if heroIdList[heroId]==nil and formHeroList[v.uuid] == nil and v.state == ArmyFormationState.Free then
                if v.rarity< minRarity then
                    targetHeroUuid = v.uuid
                    return minHeroUuid,targetHeroUuid
                end
            end
        end
    end
end

UIFormationTableNewCtrl.GetCurrentSoldierNum =GetCurrentSoldierNum
UIFormationTableNewCtrl.CheckMax = CheckMax
UIFormationTableNewCtrl.GetArmyIdList = GetArmyIdList
UIFormationTableNewCtrl.GetArmyData = GetArmyData
UIFormationTableNewCtrl.OnOneKeyFillClick = OnOneKeyFillClick
UIFormationTableNewCtrl.OnOneKeyClearClick = OnOneKeyClearClick
UIFormationTableNewCtrl.CloseSelf =CloseSelf
UIFormationTableNewCtrl.Close =Close
UIFormationTableNewCtrl.InitData =InitData
UIFormationTableNewCtrl.GetTotalSoldierNum = GetTotalSoldierNum
UIFormationTableNewCtrl.SetCurrentSoldierNum = SetCurrentSoldierNum
UIFormationTableNewCtrl.GetSoliderState = GetSoliderState
UIFormationTableNewCtrl.GetCurrentSoliderDataList = GetCurrentSoliderDataList
UIFormationTableNewCtrl.OnDeleteHeroByIndex = OnDeleteHeroByIndex
UIFormationTableNewCtrl.SelectHeroByUuid = SelectHeroByUuid
UIFormationTableNewCtrl.GetHeroDataByUuid = GetHeroDataByUuid
UIFormationTableNewCtrl.GetCurrentHeroDataList = GetCurrentHeroDataList
UIFormationTableNewCtrl.GetMaxNum = GetMaxNum
UIFormationTableNewCtrl.OnDeleteHeroByIndex = OnDeleteHeroByIndex
UIFormationTableNewCtrl.GetCurHeroData = GetCurHeroData
UIFormationTableNewCtrl.GetCurCampData = GetCurCampData
UIFormationTableNewCtrl.SetCurIndex =SetCurIndex
UIFormationTableNewCtrl.OnStartClick = OnStartClick
UIFormationTableNewCtrl.ClearFormation = ClearFormation
UIFormationTableNewCtrl.GetCostTime = GetCostTime
UIFormationTableNewCtrl.SaveHeroData = SaveHeroData
UIFormationTableNewCtrl.OnSaveClick = OnSaveClick
UIFormationTableNewCtrl.GetMaxHeroNum = GetMaxHeroNum
UIFormationTableNewCtrl.GetCostStaminaByTargetType = GetCostStaminaByTargetType
UIFormationTableNewCtrl.GetFormationPower = GetFormationPower
UIFormationTableNewCtrl.GetTargetPower = GetTargetPower
UIFormationTableNewCtrl.GetAtkValue = GetAtkValue
UIFormationTableNewCtrl.GetDefValue = GetDefValue
UIFormationTableNewCtrl.GetAtkDes = GetAtkDes
UIFormationTableNewCtrl.GetDefDes = GetDefDes
UIFormationTableNewCtrl.NeedTakeArmy = NeedTakeArmy
UIFormationTableNewCtrl.GetAtkImage = GetAtkImage
UIFormationTableNewCtrl.GetDefImage = GetDefImage
UIFormationTableNewCtrl.GetCanAddHeroNum  = GetCanAddHeroNum
UIFormationTableNewCtrl.GetIsHeroInCurFormation = GetIsHeroInCurFormation
UIFormationTableNewCtrl.CheckMaxSoliderNum =CheckMaxSoliderNum
UIFormationTableNewCtrl.GetMaxSoldierNum = GetMaxSoldierNum
UIFormationTableNewCtrl.GetScienceIdByUnlock = GetScienceIdByUnlock
UIFormationTableNewCtrl.OnChangeMarchInGuide = OnChangeMarchInGuide
UIFormationTableNewCtrl.OnFormationSave = OnFormationSave
UIFormationTableNewCtrl.ShowChangeHeroWarning = ShowChangeHeroWarning
UIFormationTableNewCtrl.CheckIsChangeHero = CheckIsChangeHero
UIFormationTableNewCtrl.GetCanGatherResourceNum = GetCanGatherResourceNum
UIFormationTableNewCtrl.CheckNeedResetModel = CheckNeedResetModel
UIFormationTableNewCtrl.OnTroopClick =OnTroopClick
UIFormationTableNewCtrl.GetFormationHeroCanChangeHigherUuidByQuality =GetFormationHeroCanChangeHigherUuidByQuality
return UIFormationTableNewCtrl