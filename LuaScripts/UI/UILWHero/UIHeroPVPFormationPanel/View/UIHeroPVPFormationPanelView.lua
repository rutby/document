---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 23/1/4 17:06
---

local UIHeroPVPFormationPanelView = BaseClass("UIHeroPVPFormationPanelView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray
local Resource = CS.GameEntry.Resource
local HeroSquadModelViewer = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.HeroSquadModelViewer"
local UIFormationHeroCell = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.UIFormationHeroCell"
local UIHeroInfoBar = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.UIHeroInfoBar"
local FormationBuffView = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.FormationBuffView"
local ChooseSquadPopup = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.ChooseSquadPopup"
local Arena3V3ChooseSquadPopup = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.Arena3V3ChooseSquadPopup"
local UIHeroPVPArena3V3Container = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.UIHeroPVPArena3V3Container"
local ChooseTWSkillChipSetPopup = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.ChooseTWSkillChipSetPopup"

local bottomBarPath = "Root/BottomBar"
local heroScrollPath = "Root/BottomBar/HeroList"
local heroListPath = "Root/BottomBar/HeroList/Content"
local saveBtnPath = "Root/BottomBar/SaveBtn"
local saveBtnTextPath = "Root/BottomBar/SaveBtn/SaveBtnText"
local backBtnPath = "Root/BottomBar/BtnBack"
local allTypeHeroTogglePath = "Root/BottomBar/Rect_List/AllTypeToggle"
local allTypeHeroToggleTextPath = "Root/BottomBar/Rect_List/AllTypeToggle/AllTypeHeroToggleText"
local tankTypeHeroTogglePath = "Root/BottomBar/Rect_List/TankTypeToggle"
local tankTypeHeroToggleIconPath = "Root/BottomBar/Rect_List/TankTypeToggle/TankTypeIcon"
local missileTypeTogglePath = "Root/BottomBar/Rect_List/MissileTypeToggle"
local missileTypeToggleIconPath = "Root/BottomBar/Rect_List/MissileTypeToggle/MissileTypeIcon"
local airForceTypeTogglePath = "Root/BottomBar/Rect_List/AirForceTypeToggle"
local airForceTypeToggleIconPath = "Root/BottomBar/Rect_List/AirForceTypeToggle/AirForceTypeIcon"
local middleContentContainerPath = "Root/MiddleContentContainer"
local formationContentPath = "Root/MiddleContentContainer/FormationContent"
local formationBgPath = "Root/MiddleContentContainer/FormationContent/FormationBg"
local formationRtPath = "Root/MiddleContentContainer/FormationContent/FormationRT"
local powerInfoPath = "Root/MiddleContentContainer/PowerInfo"
local powerInfoTextPath = "Root/MiddleContentContainer/PowerInfo/PowerNumberText"
local slotAreaContainerPath = "Root/MiddleContentContainer/FormationContent/SlotAreas"
local slotAreaPath = "Root/MiddleContentContainer/FormationContent/SlotAreas/Slot%dArea"
local heroInfoBarContainerPath = "Root/MiddleContentContainer/FormationContent/HeroInfoBars"
local heroInfoBarPath = "Root/MiddleContentContainer/FormationContent/HeroInfoBars/Slot%dHeroInfoBar"
local heroListTipTextPath = "Root/BottomBar/HeroListTipText"
local glowEffectPath = "Root/MiddleContentContainer/FormationContent/Eff_ui_bdmb_glow"
local shangZhenEffectPath = "Root/MiddleContentContainer/FormationContent/Eff_ui_bdmb_shangzhen%d"
local chooseSquadBtnPath = "Root/MiddleContentContainer/FormationContent/LeftBottomContainer/btnChooseSquad"
local chooseSquadBtnTextPath = "Root/MiddleContentContainer/FormationContent/LeftBottomContainer/btnChooseSquad/txtChooseSquad"
local chooseSquadPopupPath = "popupChooseSquad"
local arena3V3ChooseSquadBtnPath = "3V3PopupChooseSquad"
local arena3V3ContainerPath = "Root/3V3DefenceContainer"
local tacticalWeaponBtnPath = "Root/MiddleContentContainer/FormationContent/LeftBottomContainer/TacticalWeapon"
local tacticalWeaponLevelNumberTextPath = "Root/MiddleContentContainer/FormationContent/LeftBottomContainer/TacticalWeapon/TacticalWeaponLevelNumberText"
local btn_choose_skill_chip_set_path = "Root/MiddleContentContainer/FormationContent/LeftBottomContainer/btnChooseSkillChipSet"
local txt_choose_skill_chip_set_path = "Root/MiddleContentContainer/FormationContent/LeftBottomContainer/btnChooseSkillChipSet/txtChooseSkillChipSet"
local popup_choose_skill_chip_set_path = "PopupChooseSkillChipSet"

local Sound = CS.GameEntry.Sound

local function ClearHeroScroll(self)
    self.heroScroll:RemoveComponents(UIFormationHeroCell)
    self.heroList:DestroyChildNode()
end

local function ShowGlowEffectOn(self,index)
    self.glowEffect:SetActive(false)
    self.glowEffect.transform:SetParent(self.slotAreas[index].transform)
    self.glowEffect.transform.localPosition = Vector3.New(6.6,5.7,0)
    self.glowEffect:SetActive(true)
end

local function HideGlowEffect(self)
    self.glowEffect:SetActive(false)
    self.glowEffect.transform:SetParent(self.formationContent.transform)
end

local function HideAllShangZhenEffect(self)
    for i=1,5 do
        self.shangZhenEffects[i]:SetActive(false)
        self.shangZhenEffects[i].transform:SetParent(self.formationContent.transform)
    end
    if self.delayHide then
        self.delayHide:Stop()
        self.delayHide = nil
    end
end

local function ShowShangZhenEffectOn(self,indices)
    if table.IsNullOrEmpty(indices) then
        return
    end

    if self.delayHide then
        self.delayHide:Stop()
        self.delayHide = nil
    end
    for i=1,5 do
        if indices[i] then
            self.shangZhenEffects[i]:SetActive(false)
            self.shangZhenEffects[i].transform:SetParent(self.slotAreas[i].transform)
            self.shangZhenEffects[i].transform.localPosition = Vector3.New(9.7,10,0)
            self.shangZhenEffects[i]:SetActive(true)
        else
            self.shangZhenEffects[i]:SetActive(false)
            self.shangZhenEffects[i].transform:SetParent(self.formationContent.transform)
        end
    end
    self.delayHide = TimerManager:GetInstance():DelayInvoke(function()
        HideAllShangZhenEffect(self)
    end, 1)
end


local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:OnOpen()
end

local function OnDestroy(self)
    HideGlowEffect(self)
    HideAllShangZhenEffect(self)
    self:ResetDragAreaPos(self)
    if self.formationRt then
        self.formationRt:ResetPositions()
    end
    ClearHeroScroll(self)
    self:ComponentDestroy()
    self:DataDestroy()
    self:ClearSound()
    base.OnDestroy(self)
end

local function CanEdit(self)
    if self.source == EnterHeroSquadPanelWay.Marching then
        return false
    end
    return true
end


local function OnBackBtnClick(self)
    if self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
        local isDiff = self.squadData:CheckLoacalRemoteDiff()
        if not isDiff then
            isDiff = not table.IsNullOrEmpty(DataCenter.LW3V3Manager:GetDirtySelfDefTeams())
        end
        if isDiff then
            local emptyTeamIndex = DataCenter.LW3V3Manager:GetSelfEmptyDefTeam()
            UIUtil.ShowMessage(Localization:GetString(500215), 2, "500231", "500232", function()
                self:ClosePanel()
            end, function()
                if emptyTeamIndex ~= nil then
                    UIUtil.ShowMessage(Localization:GetString(500214, emptyTeamIndex), 2, "500231", "500230",
                        function()
                            self:ClosePanel()
                        end, function()
                            self:ChangeSquadIndex(emptyTeamIndex)
                        end, nil)
                else
                    DataCenter.LW3V3Manager:SaveDefTeams()
                    self:ClosePanel()
                end
            end, nil)
            -- end
        else
            self:ClosePanel()
        end
    else
        self:OnSaveBtnClick()
    end
end


local function OnSaveBtnClick(self)
    if self.squadData then
        -- TODO:现在编队本地数据存在armyformationinfo中 如果步骤中少了还原 小概率可能出现污染原始数据问题 应该迁移本地数据的编辑 在界面生命周期创建编队副本 编辑副本数据 保存时将副本数据同步到服务器
        local isDiff = self.squadData:CheckLoacalRemoteDiff()

        -- PVP竞技场防守阵容只换了车队加成也需要保存
        if not isDiff then
            if self.source == EnterHeroSquadPanelWay.PVPArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaV2Defence then
                isDiff = self.squadIndex ~= self.remoteSquadIndex
            elseif self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
                isDiff = not table.IsNullOrEmpty(DataCenter.LW3V3Manager:GetDirtySelfDefTeams())
            end
        end
        
        if isDiff then
            local curHeroes = self.squadData:GetLocalAllHeroes()
            local curChipSetId = self.squadData:GetLocalTWSkillChipSetId()

            local saveType = 1
            if self.source == EnterHeroSquadPanelWay.Gate then
                SFSNetwork.SendMessage(MsgDefines.DefenseInfoSave, self.squadData.uuid, curHeroes)
            elseif self.source == EnterHeroSquadPanelWay.TruckDeparture then
                EventManager:GetInstance():Broadcast(EventId.RefreshTruckDefenceHero)
            elseif self.source == EnterHeroSquadPanelWay.PVPArenaDefence then
                SFSNetwork.SendMessage(MsgDefines.SavePVPArenaDefence, curHeroes, self.squadIndex,curChipSetId)
                UIUtil.ShowTipsId(300056)
            elseif self.source == EnterHeroSquadPanelWay.ActivityArenaDefence then
                SFSNetwork.SendMessage(MsgDefines.ActivityArenaSave, curHeroes, self.squadIndex, self.activityId,curChipSetId)
                UIUtil.ShowTipsId(300056)
            elseif self.source == EnterHeroSquadPanelWay.ActivityArenaV2Defence then
                SFSNetwork.SendMessage(MsgDefines.ActivityArenaV2Save, curHeroes, self.squadIndex, self.activityId,curChipSetId)
                UIUtil.ShowTipsId(300056)
            elseif self.source == EnterHeroSquadPanelWay.Arena3V3Defence then

                local emptyTeamIndex = DataCenter.LW3V3Manager:GetSelfEmptyDefTeam()
                if emptyTeamIndex ~= nil then
                    UIUtil.ShowMessage(Localization:GetString(500214,emptyTeamIndex), 1, "500230", nil ,function()
                        self:ChangeSquadIndex(emptyTeamIndex)
                    end)
                else
                    DataCenter.LW3V3Manager:SaveDefTeams()
                end
                -- 点保存按钮不返回
                return
            elseif self.source < EnterHeroSquadPanelWay.PVE then
                SFSNetwork.SendMessage(MsgDefines.NormalFormationInfoSave, self.squadData.uuid, curHeroes, saveType,curChipSetId)
            end
        else
            if self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
                UIUtil.ShowTipsId(801154)
                return
            end
        end
    end

    self:ClosePanel()
end

--- 尝试撤下对应位置的英雄
---@param index number
local function TryTakeDownHeroAtIndex(self,index)

    local canEdit = self:CanEdit()
    if not canEdit then
        UIUtil.ShowTipsId(120209)
        return
    end

    if self.squadData then
        local heroUuid = self.squadData:GetLocalHeroAtSlotIndex(index)
        if heroUuid then
            self:TakeDownHero(self.squadIndex,heroUuid)
        end
    end
end

local function OnBeginDragHeroSlot(self,eventData,index)

    if self.dragingIndex then
        return
    end

    -- 判断对应位置是否有英雄，如果有，进入拖拽状态
    if self.squadData then
        local heroUuid = self.squadData:GetLocalHeroAtSlotIndex(index)
        if heroUuid then
            self.isInDragMode = true
            self.dragingIndex = index
            self.lastDragPosX = eventData.position.x
            self.lastDragPosY = eventData.position.y

            self.slotAreas[index].transform:SetAsFirstSibling()
            self.heroInfoBars[index].transform:SetParent(self.slotAreas[index].transform)
        end
    end
end

local function ResetDragAreaPos(self)
    for k,v in pairs(self.slotAreas) do
        v.transform.localPosition = self.slotPos[k]
    end
    for k,v in pairs(self.heroInfoBars) do
        v.transform:SetParent(self.heroInfoBarContainer.transform)
        v.transform.localPosition = self.heroInfoBarsPos[k]
    end
end

local function SwitchHeroSlot(self,fromIndex,toIndex)
    if self.squadData then
        local fromHeroUuid = self.squadData:GetLocalHeroAtSlotIndex(fromIndex)
        local toHeroUuid = self.squadData:GetLocalHeroAtSlotIndex(toIndex)
        self.squadData:SetLocalHero(fromIndex,nil)
        self.squadData:SetLocalHero(toIndex,nil)
        self.squadData:SetLocalHero(fromIndex,toHeroUuid)
        self.squadData:SetLocalHero(toIndex,fromHeroUuid)
    end
end

local function OnDragEndHeroSlot(self,eventData,index)
    if self.isInDragMode and self.dragingIndex == index then

        ResetDragAreaPos(self)
        self.formationRt:ResetPositions()
        if self.toSwitchIndex then

            local canEdit = self:CanEdit()
            if not canEdit then
                UIUtil.ShowTipsId(120209)
            else
                SwitchHeroSlot(self,self.dragingIndex,self.toSwitchIndex)
            end
            self:RefreshHeroInfo()
        end

        self.isInDragMode = false
        self.dragingIndex = nil
        self.toSwitchIndex = nil
        self.lastDragPosX = nil
        self.lastDragPosY = nil

        HideGlowEffect(self)
    end
end

local function OnDragHeroSlot(self,eventData,index)

    if self.isInDragMode and self.dragingIndex == index then
        
        --- 碰撞区域跟随拖拽移动
        local curPosX = eventData.position.x
        local curPosY = eventData.position.y
        local offsetX = (curPosX - self.lastDragPosX)/self.uiScaleFactor
        local offsetY = (curPosY - self.lastDragPosY)/self.uiScaleFactor
        self.lastDragPosX = curPosX
        self.lastDragPosY = curPosY

        local curPos = self.slotAreas[index].transform.localPosition
        self.slotAreas[index].transform.localPosition = Vector3.New(curPos.x + offsetX,curPos.y + offsetY,curPos.z)
        -- local uiPos = PosConverse.ScreenToUIPos(self.slotAreasContainer.rectTransform,Vector2.New(curPosX,curPosY))
        -- self.slotAreas[index].transform.localPosition = Vector3.New(uiPos.x,uiPos.y) --Vector3.New(curPos.x + offsetX,curPos.y + offsetY,curPos.z)
        
        local areaCenterPos = PosConverse.UIWorldToScreenPos(self.slotAreas[index].transform.position)

        -- 小队场景
        local pos = Vector2.New(areaCenterPos.x,areaCenterPos.y)
        local rtScreenPos = pos - self.formationRtOrigin
        
        rtScreenPos.x = rtScreenPos.x / self.formationRtScale.x
        rtScreenPos.y = rtScreenPos.y / self.formationRtScale.y

        if rtScreenPos.x < -8 or rtScreenPos.x > self.formationRtRealSize + 8 then
            OnDragEndHeroSlot(self,eventData,self.dragingIndex)
            return
        end

        if rtScreenPos.y < -8 or rtScreenPos.y > self.formationRtRealSize + 8 then
            OnDragEndHeroSlot(self,eventData,self.dragingIndex)
            return
        end

        -- rtScreenPos.x = math.max(rtScreenPos.x,0)
        -- rtScreenPos.x = math.min(rtScreenPos.x,self.formationRtRealSize)
        -- rtScreenPos.y = math.max(rtScreenPos.y,0)
        -- rtScreenPos.y = math.min(rtScreenPos.y,self.formationRtRealSize)
        self.formationRt:MoveHeroSlotPos(index,rtScreenPos)

    end
end


local function OnPointerEnterHeroSlot(self,eventData,index)

    if not self.isInDragMode then
        return
    end

    if self.isInDragMode and self.dragingIndex == index then
        return
    end

    if self.toSwitchIndex then
        return
    end

    self.toSwitchIndex = index
    self.formationRt:HeroSlotMoveToIndex(self.toSwitchIndex,self.dragingIndex)
    self.heroInfoBars[self.toSwitchIndex].transform.localPosition = self.heroInfoBarsPos[self.dragingIndex]
    ShowGlowEffectOn(self,self.toSwitchIndex)
end

local function OnPointerExitHeroSlot(self,eventData,index)
    if not self.isInDragMode then
        return
    end

    if self.isInDragMode and self.dragingIndex == index then
        return
    end

    if self.toSwitchIndex ~= index then
        return
    end

    self.formationRt:HeroSlotMoveToIndex(self.toSwitchIndex,self.toSwitchIndex)
    self.heroInfoBars[self.toSwitchIndex].transform.localPosition = self.heroInfoBarsPos[self.toSwitchIndex]
    HideGlowEffect(self)
    self.toSwitchIndex = nil
end

local function ComponentDefine(self)
    self.bottomBar = self:AddComponent(UIBaseContainer, bottomBarPath)
    self.heroList = self:AddComponent(GridInfinityScrollView, heroListPath)
    self.heroScroll = self:AddComponent(UIBaseContainer, heroScrollPath)
    self.saveBtn = self:AddComponent(UIButton, saveBtnPath)
    self.saveBtn:SetOnClick(function ()
        OnSaveBtnClick(self)
    end)
    self.saveBtnText = self:AddComponent(UIText, saveBtnTextPath)
    self.backBtn = self:AddComponent(UIButton, backBtnPath)
    self.backBtn:SetOnClick(function ()
        OnBackBtnClick(self)
        -- self:ClosePanel()
    end)
    self.allTypeHeroToggle = self:AddComponent(UIToggle, allTypeHeroTogglePath)
    self.allTypeHeroToggle:SetOnValueChanged(function (isOn)
        if isOn then
            self:OnChangeTypeToggle(HeroType.All)
        end
    end)
    self.allTypeHeroToggleText = self:AddComponent(UIText, allTypeHeroToggleTextPath)
    self.tankTypeHeroToggle = self:AddComponent(UIToggle, tankTypeHeroTogglePath)
    self.tankTypeHeroToggle:SetOnValueChanged(function (isOn)
        if isOn then
            self:OnChangeTypeToggle(HeroType.Tank)
        end
    end)
    self.tankTypeHeroToggleIcon = self:AddComponent(UIImage, tankTypeHeroToggleIconPath)
    self.missileTypeToggle = self:AddComponent(UIToggle, missileTypeTogglePath)
    self.missileTypeToggle:SetOnValueChanged(function (isOn)
        if isOn then
            self:OnChangeTypeToggle(HeroType.Missile)
        end
    end)
    self.missileTypeToggleIcon = self:AddComponent(UIImage, missileTypeToggleIconPath)
    self.airForceTypeToggle = self:AddComponent(UIToggle, airForceTypeTogglePath)
    self.airForceTypeToggle:SetOnValueChanged(function (isOn)
        if isOn then
            self:OnChangeTypeToggle(HeroType.Aircraft)
        end
    end)
    self.formationBtn = self:AddComponent(UIButton, "Root/MiddleContentContainer/FormationContent/formationBtn")
    self.formationBuffIcon = self:AddComponent(UIImage,"Root/MiddleContentContainer/FormationContent/formationBtn/infoImage")
    self.firmationBufflView = self:AddComponent(FormationBuffView,"Root/MiddleContentContainer/FormationContent/buffInfo")
    self.buffCom = self:AddComponent(UIBaseComponent,"Root/MiddleContentContainer/FormationContent/buffInfo")
    self.buffViewCloseBtn = self:AddComponent(UIButton,"Root/MiddleContentContainer/FormationContent/buffInfo/closeBtn")
    self.buffViewCloseBtn:SetOnClick(function ()
        self:SetBuffViewActive()
    end)
    self.formationBtn:SetOnClick(function ()
        self:SetBuffViewActive()
    end)
    self.airForceTypeToggleIcon = self:AddComponent(UIImage, airForceTypeToggleIconPath)
    self.middleContentContainer = self:AddComponent(UIBaseContainer, middleContentContainerPath)
    self.formationContent = self:AddComponent(UIBaseContainer, formationContentPath)
    self.formationBg = self:AddComponent(UIRawImage, formationBgPath)
    self.formationRt = self:AddComponent(HeroSquadModelViewer, formationRtPath)
    self.uiScaleFactor = UIManager:GetInstance():GetScaleFactor()--UIUtil.GetScaleFactor()
    self.formationRtOrigin = PosConverse.UIWorldToScreenPos(self.formationRt.transform.position)
    self.formationRtRealSize = self.formationRt.rtSize
    self.formationRtScale = Vector2.New(self.formationRt:GetSizeDelta().x * self.uiScaleFactor / self.formationRt.rtSize,
    self.formationRt:GetSizeDelta().y * self.uiScaleFactor / self.formationRtRealSize)

    self.powerInfo = self:AddComponent(UIBaseContainer, powerInfoPath)
    self.powerInfoText = self:AddComponent(UIText, powerInfoTextPath)

    self.slotAreasContainer = self:AddComponent(UIBaseContainer, slotAreaContainerPath)
    self.slotAreas = {}
    self.slotPos = {}
    for i=1,5 do
        local slotArea = self:AddComponent(UIEventTrigger, string.format(slotAreaPath,i))
        slotArea:OnPointerClick(function ()
            if not self.isInDragMode then
                TryTakeDownHeroAtIndex(self,i)
            end
        end)
        slotArea:OnBeginDrag(function (eventData)
            OnBeginDragHeroSlot(self,eventData,i)
        end)
        slotArea:OnDrag(function (eventData)
            OnDragHeroSlot(self,eventData,i)
        end)
        slotArea:OnEndDrag(function (eventData)
            OnDragEndHeroSlot(self,eventData,i)
        end)
        slotArea:OnPointerEnter(function (eventData)
            OnPointerEnterHeroSlot(self,eventData,i)
        end)
        slotArea:OnPointerExit(function (eventData)
            OnPointerExitHeroSlot(self,eventData,i)
        end)
        table.insert(self.slotAreas,slotArea)

        local slotPos = slotArea.transform.localPosition
        table.insert(self.slotPos,slotPos)
    end

    self.heroInfoBarContainer = self:AddComponent(UIBaseContainer, heroInfoBarContainerPath)
    self.heroInfoBars = {}
    self.heroInfoBarsPos = {}
    for i=1,5 do
        local heroInfoBar = self:AddComponent(UIHeroInfoBar, string.format(heroInfoBarPath,i))
        table.insert(self.heroInfoBars,heroInfoBar)

        local heroInfoBarPos = heroInfoBar.transform.localPosition
        table.insert(self.heroInfoBarsPos,heroInfoBarPos)
    end

    self.heroListTipText = self:AddComponent(UIText, heroListTipTextPath)

    self.glowEffect = self:AddComponent(UIBaseContainer, glowEffectPath)
    self.glowEffect:SetActive(false)

    self.shangZhenEffects = {}
    for i=1,5 do 
        local shangZhenEffect = self:AddComponent(UIBaseContainer, string.format(shangZhenEffectPath,i))
        shangZhenEffect:SetActive(false)
        table.insert(self.shangZhenEffects,shangZhenEffect)
    end

    self.chooseSquadBtn = self:AddComponent(UIButton, chooseSquadBtnPath)
    self.chooseSquadBtn:SetOnClick(function ()

        local position = self.chooseSquadBtn.transform.position
        local x = position.x + 40
        local y = position.y
        if self.source == EnterHeroSquadPanelWay.PVPArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaV2Defence then
            self.chooseSquadPopup:SetPosition(x,y)
            self.chooseSquadPopup:Popup(self.squadIndex, function(idx)
                    self.squadIndex = idx
                    self.formationBg:LoadSprite(string.format("Assets/Main/TextureEx/UILWHeroSquad/biandui_cheku_%d.png", self.squadIndex))
                    self.chooseSquadBtnText:SetText("T"..self.squadIndex)
                    self:RefreshHeroInfo()
            end)
        elseif self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
            self.arena3V3ChooseSquadPopup:SetPosition(x,y)
            self.arena3V3ChooseSquadPopup:Popup(self.squadIndex)
        end
    end)
    self.chooseSquadBtnText = self:AddComponent(UIText, chooseSquadBtnTextPath)
    self.chooseSquadPopup = self:AddComponent(ChooseSquadPopup, chooseSquadPopupPath,false)
    self.chooseSquadPopup:SetActive(false)
    self.arena3V3ChooseSquadPopup = self:AddComponent(Arena3V3ChooseSquadPopup,arena3V3ChooseSquadBtnPath)
    self.arena3V3ChooseSquadPopup:SetActive(false)
    self.arena3V3ChooseSquadPopup:SetIsDef(true)
    self.arena3V3Container = self:AddComponent(UIHeroPVPArena3V3Container,arena3V3ContainerPath)
    self.weaponBtn = self:AddComponent(UIButton,tacticalWeaponBtnPath)
    self.weaponBtn:SetOnClick(function ()
        if self.weaponData then
            local selfEquips = DataCenter.TacticalWeaponManager:GetAllSelfWearingEquips()
            local skillChips = nil
            local useSetId = self.squadData:GetLocalTWSkillChipSetId()
            if useSetId ~= nil and useSetId > 0 then
                skillChips = DataCenter.TWSkillChipManager:GetChipsByMasterSet(useSetId)
            end
            UIManager:GetInstance():OpenWindow(UIWindowNames.UILWTacticalWeaponTip,{ anim = true},self.weaponData,selfEquips,self.weaponBtn,nil,skillChips)
        end
    end)
    self.weaponLevelNumberText = self:AddComponent(UIText,tacticalWeaponLevelNumberTextPath)

    self.chooseSkillChipSetBtn = self:AddComponent(UIButton, btn_choose_skill_chip_set_path)
    self.chooseSkillChipSetBtn:SetOnClick(function ()
        if self.squadData then
            local position = self.chooseSkillChipSetBtn.transform.position
            local x = position.x + 40
            local y = position.y - 20

            local chipSetIndex = self.squadData:GetLocalTWSkillChipSetId()
            self.chooseTWSkillChipSetPopup:SetPosition(x,y)
            self.chooseTWSkillChipSetPopup:Popup(chipSetIndex, function(idx)
                local canEdit = self:CanEdit()
                if not canEdit then
                    UIUtil.ShowTipsId(120209)
                    return
                end
                self.squadData:SetLocalTWSkillChipSetId(idx)
                local logic = DataCenter.LWBattleManager:GetCurBattleLogic()
                local logicType = DataCenter.LWBattleManager:GetCurBattleType()
                if logic and 
                logicType == PVEType.Parkour and
                logicType == PVEType.Barrage and
                -- 可能有CountMasters？
                logic.ChangeTWSkillChipSetId then
                    logic:ChangeTWSkillChipSetId(idx)
                end
                self:RefreshHeroInfo()
            end)
        end
    end)
    self.chooseSkillChipSetBtnText = self:AddComponent(UIText, txt_choose_skill_chip_set_path)
    self.chooseTWSkillChipSetPopup = self:AddComponent(ChooseTWSkillChipSetPopup, popup_choose_skill_chip_set_path)
end

local function SetBuffViewActive(self)
    local isOn = self.buffCom:GetActive()
    if not isOn then
        self.firmationBufflView:ReInit(self.formationBuffInfo)
    end
    self.buffCom:SetActive(not isOn)
end

local function DataDefine(self)
    self.heroListGO = {}
    self.heroItems = {}
    self.hasInitHeroList = false
    self.heroType = nil
    self.squadIndex = 1
    self.cachedHeroUuids = {}
    self.prevHeroes = nil
    self.hasAddListener = false
end

local function ComponentDestroy(self)
    self.bottomBar = nil
    self.heroList = nil
    self.heroScroll = nil
    self.saveBtn = nil
    self.saveBtnText = nil
    self.backBtn = nil
    self.allTypeHeroToggle = nil
    self.allTypeHeroToggleText = nil
    self.tankTypeHeroToggle = nil
    self.tankTypeHeroToggleIcon = nil
    self.missileTypeToggle = nil
    self.missileTypeToggleIcon = nil
    self.airForceTypeToggle = nil
    self.airForceTypeToggleIcon = nil
    self.middleContentContainer = nil
    self.formationContent = nil
    self.formationBg = nil
    self.formationRt = nil
    self.powerInfo = nil
    self.powerInfoText = nil
    self.slotAreasContainer = nil
    self.slotAreas = nil
    self.slotPos = nil
    self.heroInfoBarContainer = nil
    self.heroInfoBars = nil
    self.heroInfoBarsPos = nil
    self.heroListTipText = nil
    self.chooseSquadBtn = nil
    self.chooseSquadBtnText = nil
    self.chooseSquadPopup = nil
    self.arena3V3ChooseSquadPopup = nil
    self.arena3V3Container = nil
    self.weaponBtn = nil
    self.weaponLevelNumberText = nil
end

local function DataDestroy(self)
    self.heroListGO = nil
    self.heroItems = nil
    self.hasInitHeroList = false
    self.heroType = nil
    self.squadIndex = nil
    self.cachedHeroUuids = nil
    self.prevHeroes = nil
    self.weaponData = nil
end

local function OnUpdateArmyFormationList(self)

    -- 遍历之前缓存的要上阵的其他编队英雄
    for i, heroUuid in pairs(self.cachedHeroUuids) do
        local squadIndex = DataCenter.ArmyFormationDataManager:GetHeroSquadIndex(heroUuid)
        if not squadIndex then
            if self.squadData then
                local index = self.squadData:GetEmptySlotIndex()
                local hasEmptySlot = index ~= nil
                if hasEmptySlot then
                    self.squadData:SetLocalHero(index,heroUuid)
                end
            end
            table.remove(self.cachedHeroUuids, i)
        end
    end

    self:RefreshHeroList(false)
    self:RefreshHeroInfo()
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.ArmyFormatUpdate, OnUpdateArmyFormationList)
    self:AddUIListener(EventId.Arena3V3BuffChange, self.RefreshChooseSquadBtn)
    self:AddUIListener(EventId.Arena3V3SwitchDefTeamOrder, self.OnArena3V3SwitchDefTeam)
    self.hasAddListener = true
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    if self.hasAddListener then
        self:RemoveUIListener(EventId.ArmyFormatUpdate, OnUpdateArmyFormationList)
        self:RemoveUIListener(EventId.Arena3V3BuffChange, self.RefreshChooseSquadBtn)
        self:RemoveUIListener(EventId.Arena3V3SwitchDefTeamOrder, self.OnArena3V3SwitchDefTeam)
        self.hasAddListener = false
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
    if self.squadData then
        self:RefreshHeroInfo()
    end
end

local function OnDisable(self)
    base.OnDisable(self)
    self.active = false
end

--- 刷新Toggle显示
local function RefreshToggleShow(self)

    if self.heroType == HeroType.All then
        self.allTypeHeroToggleText:SetColorRGBA(0,0,0,1)
    else
        -- RGBA(119,113,133,255)
        self.allTypeHeroToggleText:SetColorRGBA(0.467,0.443,0.522,1)    
    end

    if self.heroType == HeroType.Tank then
        self.tankTypeHeroToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_tanke_da.png")
    else
        self.tankTypeHeroToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_tanke_xiao.png")
    end

    if self.heroType == HeroType.Missile then
        self.missileTypeToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_daodan_da.png")
    else
        self.missileTypeToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_daodan_xiao.png")
    end

    if self.heroType == HeroType.Aircraft then
        self.airForceTypeToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_feiji_da.png")
    else
        self.airForceTypeToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_feiji_xiao.png")
    end
end

function UIHeroPVPFormationPanelView:RefreshBuffViewContent()
    self.firmationBufflView:RefillContent()
end

local function RefreshChooseSquadBtn(self)
    if self.source == EnterHeroSquadPanelWay.PVPArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaV2Defence then
        self.chooseSquadBtnText:SetText("T"..self.squadIndex)
        self.chooseSquadBtn:SetActive(true)
    elseif self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
        if self.squadData.localSquadNo == nil or self.squadData.localSquadNo <= 0 then
            self.chooseSquadBtnText:SetText("")
        else
            self.chooseSquadBtnText:SetText("T"..self.squadData.localSquadNo)
            -- 切换车库增益后刷新战力
            self:RefreshHeroInfo()
        end
        self.chooseSquadBtn:SetActive(true)
    else
        self.chooseSquadBtn:SetActive(false)
    end
end

local function RefreshTWSkillChipBtn(self)
    local functionUnlock = DataCenter.TWSkillChipManager:IsFunctionUnlock()
    self.chooseSkillChipSetBtn:SetActive(functionUnlock)
end

local function OnOpen(self)
    local paramData
    self.source,paramData,self.activityId = self:GetUserData()
    self.source = self.source or EnterHeroSquadPanelWay.ParkingLotBuilding--EnterHeroSquadPanelWay.Marching
    self.arena3V3Container:SetActive(self.source == EnterHeroSquadPanelWay.Arena3V3Defence)
    if self.source == EnterHeroSquadPanelWay.ParkingLotBuilding then
        local squadData = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByBuildingUuid(paramData)
        if squadData ~= nil then
            squadData:ResetLocalData()
            self.squadIndex = squadData.index
            self:RefreshSquadData()
        else
            self:ClosePanel()
            return
        end
        self.formationBg:LoadSprite(string.format("Assets/Main/TextureEx/UILWHeroSquad/biandui_cheku_%d.png",self.squadIndex))
    elseif self.source == EnterHeroSquadPanelWay.TruckDeparture then
        local squadData = DataCenter.LWMyStationDataManager:GetDefenceFormation(paramData)
        if squadData ~= nil then
            self.squadData = squadData
            self.squadIndex = squadData.index
            self.slotCount = 5
        else
            self:ClosePanel()
            return
        end
        self.formationBg:LoadSprite(string.format("Assets/Main/TextureEx/UILWHeroSquad/biandui_cheku_%d.png",self.squadIndex))
    elseif self.source == EnterHeroSquadPanelWay.Gate then
        local squadData = DataCenter.ArmyFormationDataManager:GetDefenceFormation()
        self.squadIndex = 1 -- 城防目前只需要一个队伍
        if squadData ~= nil then
            squadData:ResetLocalData()
        end
        self:RefreshSquadData()
        self.formationBg:LoadSprite("Assets/Main/TextureEx/UILWHeroSquad/biandui_cheku_defend.png")
    elseif self.source == EnterHeroSquadPanelWay.MainUI or self.source == EnterHeroSquadPanelWay.Marching or self.source == EnterHeroSquadPanelWay.ToMarch then
        local squadData = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByUuid(paramData)
        if squadData ~= nil then
            self.squadIndex = squadData.index
            squadData:ResetLocalData()
            self:RefreshSquadData()
        else
            self:ClosePanel()
            return
        end
        self.formationBg:LoadSprite(string.format("Assets/Main/TextureEx/UILWHeroSquad/biandui_cheku_%d.png",self.squadIndex))
    elseif self.source == EnterHeroSquadPanelWay.PVPArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaV2Defence then
        self.squadData = ArmyFormationInfo.New()
        self.squadData:ParseData(paramData)
        self.slotCount = 5
        self.squadIndex = paramData.squadNo
        self.remoteSquadIndex = paramData.squadNo
        self.formationBg:LoadSprite(string.format("Assets/Main/TextureEx/UILWHeroSquad/biandui_cheku_%d.png",self.squadIndex))
    elseif self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
        self.squadData = DataCenter.LW3V3Manager:GetSelfDefTeamByIndex(paramData)
        self.slotCount = 5
        self.squadIndex = paramData
        self.remoteSquadIndex = paramData
        self.formationBg:LoadSprite(string.format("Assets/Main/TextureEx/UILWHeroSquad/biandui_cheku_%d.png",self.squadIndex))
        self.arena3V3Container:RefreshShow(self.squadIndex)
    end
    

    self:RefreshChooseSquadBtn()
    
    local state = self.allTypeHeroToggle:GetIsOn()
    if state then
        self:OnChangeTypeToggle(HeroType.All)
    else
        self.allTypeHeroToggle:SetIsOn(true)
    end
    self:RefreshFormationBuffInfo()
    self.firmationBufflView:ReInit(self.formationBuffInfo)
    self:RefreshHeroInfo()
    self:RefreshWeaponInfo()
    self:RefreshTWSkillChipBtn()
end

local function RefreshSquadData(self)
    self.squadData =DataCenter.ArmyFormationDataManager:GetFormationByType(self.source,self.squadIndex)

    if self.source == EnterHeroSquadPanelWay.Gate then
        self.slotCount = self.squadData.slots
    elseif self.source < EnterHeroSquadPanelWay.PVE then
        if self.squadData ~= nil then
            self.slotCount = self.squadData.slots
        end
    else
        self.slotCount = self.squadData.slots
    end
    
    -- self:RefreshHeroInfo()
end


---返回英雄列表数据
local function GetHeroList(self,heroType)
    local heroList = {}
    local heroDataList = DataCenter.HeroDataManager:GetAllHeroList()
    for uuid,heroData in pairs(heroDataList) do
        local displayData = {}

        if heroType > 0 then
            if heroData.heroType ~= heroType then
                goto continue
            end
        end

        if self.source == EnterHeroSquadPanelWay.TruckDeparture then
            displayData.squadIndex = DataCenter.LWMyStationDataManager:GetHeroSquadIndex(heroData.heroId)
        elseif self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
            displayData.squadIndex = DataCenter.LW3V3Manager:GetHeroInSelfDefTeamIndex(uuid)
        elseif self.source ~= EnterHeroSquadPanelWay.Gate then
            displayData.squadIndex = DataCenter.ArmyFormationDataManager:GetHeroSquadIndex(uuid)
        else
            local inSquad = self.squadData:HasLocalHero(uuid)
            if inSquad then
                displayData.squadIndex = self.squadIndex
            end
        end
        displayData.heroData = heroData
        table.insert(heroList,displayData)
        ::continue::
    end

    table.sort(heroList,function(a,b)
        return a.heroData.power > b.heroData.power
    end)

    return heroList
end



local function OnInitHeroScroll(self,go,index)
    local item = self.heroScroll:AddComponent(UIFormationHeroCell, go)
    self.heroListGO[go] = item
end

local function OnUpdateHeroScroll(self,go,index)
    go.transform:Set_localScale(1.16,1.16,1)
    local item = self.heroListGO[go]
    local heroSquadData = self.heroDataList[index+1]
    item:SetActive(heroSquadData ~= nil)

    local isInOtherFormation = false
    if heroSquadData.squadIndex then
        isInOtherFormation = heroSquadData.squadIndex ~= self.squadIndex
    end
    item:SetData(heroSquadData,isInOtherFormation and self.source ~= EnterHeroSquadPanelWay.PVPArenaDefence and self.source ~= EnterHeroSquadPanelWay.ActivityArenaDefence and self.source ~= EnterHeroSquadPanelWay.ActivityArenaV2Defence)
    local isSelected = false
    if self.squadData then
        isSelected = self.squadData:HasLocalHero(heroSquadData.heroData.uuid)
        item:SetSelected(isSelected)
    end

    self.heroItems[heroSquadData.heroData.uuid] = item

    if isSelected == false then
        self.clickGuideDelayTimer = TimerManager:GetInstance():DelayInvoke(function()
            self:TryGuideClickHeroInList(item.heroCell)
        end, 0.85)
    end
end

local function OnDestroyHeroScrollItem(self,go, index)
    local heroSquadData = self.heroDataList[index+1]
    if heroSquadData and heroSquadData.heroData then
        self.heroItems[heroSquadData.heroData.uuid] = nil
    end
end

--- 撤下对应编队的英雄
local function TakeDownHero(self,squadIndex,heroUuid)

    if squadIndex ~= self.squadIndex then
        -- Get the current formation data of the other squad
        local otherSquad = DataCenter.ArmyFormationDataManager:GetFormationByType(self.source, squadIndex)
        -- If the other squad exists
        if otherSquad then
            -- Get the index of the hero to be taken down in the other squad
            local index = otherSquad:GetLocalHeroIndex(heroUuid)
            -- Remove the hero from the other squad
            otherSquad:SetLocalHero(index, nil)

            -- Get the current formation data of the other squad
            local curHeroes = otherSquad:GetLocalAllHeroes()
            -- Send a message to the server to update the formation data of the other squad
            SFSNetwork.SendMessage(MsgDefines.NormalFormationInfoSave, otherSquad.uuid, curHeroes, 0)

            -- Add the hero to the cache
            table.insert(self.cachedHeroUuids, heroUuid)
        end
    else
        -- Get the index of the hero to be taken down in the current squad
        local index = self.squadData:GetLocalHeroIndex(heroUuid)
        if index then
            DataCenter.LWSoundManager:PlaySound(10013)--下阵音效
            -- Remove the hero from the current squad
            self.squadData:SetLocalHero(index, nil)
            -- Refresh the hero list
            self:RefreshHeroList(false)
            -- Refresh the hero information
            self:RefreshHeroInfo()
        end
    end
end

function UIHeroPVPFormationPanelView:RefreshFormationBuffInfo()
    local heros = self.squadData:GetLocalAllHeroes()
    local type = self.formationBuffInfo and self.formationBuffInfo.type
    self.formationBuffInfo = HeroUtils.GetFormationBuffInfoList(heros)
    self.formationBuffInfo.heros = HeroUtils.SortFormationHeros(heros)
    if self.formationBuffInfo.type ~= type then
        if self.formationBuffInfo.type ~= 0 then
            local isFormationBuffOpen = UIUtil.IsFormationBuffInfoOpen()
            if isFormationBuffOpen then
                UIUtil.PlayScaleAnim(self.formationBtn.rectTransform)
            end
        end
    end
end

local function RefreshFormationBuff(self)
    self:RefreshFormationBuffInfo()
    
    local isFormationBuffOpen = UIUtil.IsFormationBuffInfoOpen()
    if isFormationBuffOpen then
        if self.formationBuffInfo.type == 0 then
            self.formationBuffIcon:SetActive(false)
        else
            self.formationBuffIcon:SetActive(true)
            local path = string.format(LoadPath.HeroCommonPath,self.formationBuffInfo.icon)
            self.formationBuffIcon:LoadSprite(path)
        end
    else
        self.formationBuffIcon:SetActive(true)
        local path = string.format(LoadPath.HeroCommonPath,"od_biandui_zhenyingsuo")
        self.formationBuffIcon:LoadSprite(path)
    end

    if self.buffCom:GetActive() then
        self.firmationBufflView:ReInit(self.formationBuffInfo)
    end
end

local function OnClickHeroCell(self,heroDisplayData,heroItem)

    if not heroDisplayData then
        return
    end

    local canEdit = self:CanEdit()
    if not canEdit then
        UIUtil.ShowTipsId(120209)
        return
    end

    local heroUuid = heroDisplayData.heroData.uuid
    -- 在当前编队中，点击下阵
    local squadPos = self.squadData:GetLocalHeroIndex(heroUuid)
    local isInSquad = squadPos ~= nil
    if isInSquad then
        self.squadData:SetLocalHero(squadPos,nil)
        heroDisplayData.squadIndex = nil
        heroItem:SetSelected(false)
        self:RefreshHeroInfo()
        DataCenter.LWSoundManager:PlaySound(10013)--下阵音效
        return
    end

    -- 空闲，不在当前编队，且不在其他编队中，阵容有空位，点击上阵
    local isInOtherFormation = false
    if self.source == EnterHeroSquadPanelWay.Gate or self.source == EnterHeroSquadPanelWay.PVPArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaV2Defence then

    elseif self.source == EnterHeroSquadPanelWay.TruckDeparture then
        local inSquadIndex = DataCenter.LWMyStationDataManager:GetHeroSquadIndex(heroDisplayData.heroData.heroId)
        isInOtherFormation = inSquadIndex ~= nil and inSquadIndex ~= self.squadIndex
    elseif self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
        local inSquadIndex = DataCenter.LW3V3Manager:GetHeroInSelfDefTeamIndex(heroUuid)
        isInOtherFormation = inSquadIndex ~= nil and inSquadIndex ~= self.squadIndex
    else
        local inSquadIndex = DataCenter.ArmyFormationDataManager:GetHeroSquadIndex(heroUuid)
        isInOtherFormation = inSquadIndex ~= nil and inSquadIndex ~= self.squadIndex
    end
    local index = self.squadData:GetEmptySlotIndex()
    local hasEmptySlot = index ~= nil

    
    if hasEmptySlot then
        if not isInOtherFormation then
            heroDisplayData.squadIndex = self.squadIndex
            self.squadData:SetLocalHero(index, heroUuid)
            heroItem:SetSelected(true)
            self:RefreshHeroInfo()
            DataCenter.LWSoundManager:PlaySound(10012)--上阵音效

            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
            if heroData then
                local meta = heroData.meta
                if meta then
                    local soundAsset = meta.sound_show
                    if not string.IsNullOrEmpty(soundAsset) then
                        self.soundHandle = DataCenter.LWSoundManager:PlayHeroSound(soundAsset, SoundGround.Hero)
                    end
                end
            end
            return
        else
            -- 如果在其他编队，并且阵容有空位，点击先让英雄在之前的编队下阵，等收到编队更新消息后，再让英雄在当前编队上阵
            if self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
                local otherSquad = DataCenter.LW3V3Manager:GetSelfDefTeamByIndex(heroDisplayData.squadIndex)
                if otherSquad then
                    local heroName = heroDisplayData.heroData:GetName()
                    local squadName = ""
                    UIUtil.ShowMessage(Localization:GetString(500263, heroName, squadName), 1, "110006", nil, function()
                        otherSquad:SetLocalHero(otherSquad:GetLocalHeroIndex(heroUuid), nil)
                        self.squadData:SetLocalHero(index, heroUuid)
                        self:RefreshHeroList(false)
                        self:RefreshHeroInfo()
                    end, nil, nil)
                    return
                    -- else
                else
                    UIUtil.ShowTipsId(120211)
                end

            else
                local otherSquad = DataCenter.ArmyFormationDataManager:GetFormationByType(self.source,
                    heroDisplayData.squadIndex)
                if otherSquad.state == 0 and self.source ~= EnterHeroSquadPanelWay.TruckDeparture then
                    local heroName = heroDisplayData.heroData:GetName()
                    local squadName = DataCenter.BuildManager:GetBuildingNameByUuid(otherSquad.buildingUuid)
                    UIUtil.ShowMessage(Localization:GetString(120212, heroName, squadName), 1, "110006", nil, function()
                        TakeDownHero(self, heroDisplayData.squadIndex, heroUuid)
                    end, nil, nil)
                    return
                    -- else
                else
                    UIUtil.ShowTipsId(120211)
                end
            end
            return
        end
    else
        UIUtil.ShowTipsId(120210)
    end
end

local function ClearSound(self)
    if self.soundHandle then
        Sound:StopSound(self.soundHandle)
        self.soundHandle = nil
    end
end

--- 刷新英雄列表
local function RefreshHeroList(self,moveToTop)
    self.heroDataList = GetHeroList(self,self.heroType)
    local count  = table.count(self.heroDataList)
    
    if count > 0 then
        self.heroScroll:SetActive(true)
        if not self.hasInitHeroList then
            local bindFunc1 = BindCallback(self, OnInitHeroScroll)
            local bindFunc2 = BindCallback(self, OnUpdateHeroScroll)
            local bindFunc3 = BindCallback(self, OnDestroyHeroScrollItem)
            self.heroList:Init(bindFunc1, bindFunc2, bindFunc3)
        end
        self.hasInitHeroList = true
        self.heroList:SetItemCount(count)
        self.heroList:ForceUpdate()
        if moveToTop then
            self.heroList:MoveItemByIndex(0)
        end
        self.heroListTipText:SetActive(false)
    else
        self.heroScroll:SetActive(false)
        self.heroListTipText:SetActive(true)
    end
end

local function OnSelectTypeToggle(self)
    RefreshHeroList(self,true)
end

local function OnChangeTypeToggle(self,heroType)
    if self.heroType == heroType then
        return
    end
    self.heroType = heroType
    OnSelectTypeToggle(self)
    RefreshToggleShow(self)
end

local function RefreshHeroInfo(self)

    self.heroes = self.squadData:GetLocalAllHeroes()
    local totalCombatPower = 0

    local heroCount = 0
    for i = 1, self.slotCount do
        local hasHero = self.heroes[i] ~= nil
        if hasHero then
            local heroUuid = self.heroes[i]
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
            if heroData ~= nil then
                -- self.heroSlots[i]:SetData(false,heroData.quality)
                self.heroInfoBars[i]:SetData(heroData.level, heroUuid)

                totalCombatPower = totalCombatPower + heroData.power
            end
            heroCount = heroCount + 1
        else
            -- self.heroSlots[i]:SetData(true)
            self.heroInfoBars[i]:SetData(nil)
        end
    end

    -- if heroCount > 0 then
    -- self.formationRt:SetActive(true)
    self.formationRt:SetHeroesUuid(self.heroes)
    -- else
    --     self.formationRt:SetActive(false)
    -- end

    -- 2类型战力 需要计算上车库战力
    totalCombatPower = totalCombatPower + self.squadData:GetEquipCapacity() + self.squadData:GetTWSkillChipCapacity()

    --竞技场计算总战力靠后
    if self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
        totalCombatPower = self.squadData:GetTotalCapacity()
    elseif self.source == EnterHeroSquadPanelWay.PVPArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaDefence or self.source == EnterHeroSquadPanelWay.ActivityArenaV2Defence then
        local squadIndex = self.squadIndex
        totalCombatPower = self.squadData:GetPVPTotalCapacity(squadIndex)
    end
    
    self.powerInfoText:SetText(string.GetFormattedStr(totalCombatPower))
    self:RefreshFormationBuff()
    if self.prevHeroes then
        local newHeroIndices = {}
        for index, heroUuid in pairs(self.heroes) do
            local prevHeroUuid = self.prevHeroes[index]
            if prevHeroUuid == nil then
                newHeroIndices[index] = true
                -- elseif prevHeroUuid ~= heroUuid then
                --     newHeroIndices[index] = true
            end
        end
        ShowShangZhenEffectOn(self, newHeroIndices)
    end
    self.prevHeroes = DeepCopy(self.heroes)

    local localChipSetId = self.squadData:GetLocalTWSkillChipSetId()
    if localChipSetId and localChipSetId > 0 then
        self.chooseSkillChipSetBtnText:SetLocalText("800323", localChipSetId)
    else
        self.chooseSkillChipSetBtnText:SetText("")
    end
end

local function RefreshWeaponInfo(self)
    self.weaponData = DataCenter.TacticalWeaponManager:GetFirstWeaponInfo()
    local appearanceMeta = nil
    if self.weaponData then
        appearanceMeta = DataCenter.TacticalWeaponManager:GetWeaponAppearance(self.weaponData.id)
        self.weaponBtn:SetActive(true)
        self.weaponLevelNumberText:SetText(self.weaponData.level)
    else
        self.weaponBtn:SetActive(false)
    end
    if appearanceMeta then
        self.formationRt:SetWeaponMeta(appearanceMeta)
    else
        self.formationRt:CheckRemoveTacticalWeapon()
    end
end

local function UpdateView(self)
    -- self:RefreshSquadData()
end

local function OnSetHero(self)
    self:UpdateView()
end

local function ClosePanel(self)
    if self.squadData ~= nil and self.source ~= EnterHeroSquadPanelWay.TruckDeparture then
        self.squadData:ResetLocalData()
    end

    if self.closePanelCallBack then
        self.closePanelCallBack()
    end
    self.ctrl:CloseSelf()
end

local function TryGuideClickHeroInList(self, heroCell)
    if DataCenter.LWGuideFlowManager:IsRunning() then
        return
    end
    if self.squadData:GetEmptySlotIndex() ~= nil and not self.guidedClickHero then-- and CommonUtil.PlayerPrefsGetInt("PVE_FORMATION_CLICK_HERO_GUIDE", 0) == 0 then
        --CommonUtil.PlayerPrefsSetInt("PVE_FORMATION_CLICK_HERO_GUIDE", 1)
        self.guidedClickHero = true
        self.clickFingerHandle = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefabs/Guide/UIArrowFinger.prefab")
        self.clickFingerHandle:completed('+', function(handle)
            if handle.isError then return end
            local gameObject = handle.gameObject
            local transform = gameObject.transform
            transform:SetParent(UIManager:GetInstance():GetLayer(UILayer.Guide.Name).transform, false)
            transform.localScale = Vector3.one
            if heroCell then
                transform.position = heroCell.img_icon.transform.position
            end
            TimerManager:GetInstance():DelayInvoke(function()
                if not IsNull(self.clickFingerHandle) then
                    self.clickFingerHandle:Destroy()
                    self.clickFingerHandle = nil
                end
            end, 2)
        end)
    end
end

local function ChangeSquadIndex(self, newIndex,needToResetLocalData)
    if self.squadIndex == newIndex then
        return
    end
    self.squadData = DataCenter.LW3V3Manager:GetSelfDefTeamByIndex(newIndex)
    if self.squadData and needToResetLocalData then
        self.squadData:ResetLocalData()
    end
    self.squadIndex = newIndex

    if self.source == EnterHeroSquadPanelWay.Arena3V3Defence then
        self.arena3V3Container:RefreshShow(self.squadIndex)
    end

    local state = self.allTypeHeroToggle:GetIsOn()
    if state then
        self:OnChangeTypeToggle(HeroType.All)
    else
        self.allTypeHeroToggle:SetIsOn(true)
    end
    self:RefreshChooseSquadBtn()
    self:RefreshFormationBuffInfo()
    self.firmationBufflView:ReInit(self.formationBuffInfo)
    self:RefreshHeroList(false)
    self:RefreshHeroInfo()
end

local function OnArena3V3SwitchDefTeam(self,changeData)
    local index1 = changeData.oldIndex
    local index2 = changeData.newIndex
    if self.squadIndex == index1 then
        self:ChangeSquadIndex(index2)
    elseif self.squadIndex == index2 then
        self:ChangeSquadIndex(index1)
    end
end

UIHeroPVPFormationPanelView.OnCreate= OnCreate
UIHeroPVPFormationPanelView.OnDestroy = OnDestroy
UIHeroPVPFormationPanelView.OnEnable = OnEnable
UIHeroPVPFormationPanelView.OnDisable = OnDisable
UIHeroPVPFormationPanelView.UpdateView = UpdateView
UIHeroPVPFormationPanelView.OnAddListener = OnAddListener
UIHeroPVPFormationPanelView.OnRemoveListener = OnRemoveListener
UIHeroPVPFormationPanelView.ComponentDefine = ComponentDefine
UIHeroPVPFormationPanelView.DataDefine = DataDefine
UIHeroPVPFormationPanelView.ComponentDestroy = ComponentDestroy
UIHeroPVPFormationPanelView.DataDestroy = DataDestroy

UIHeroPVPFormationPanelView.OnOpen = OnOpen
UIHeroPVPFormationPanelView.RefreshSquadData = RefreshSquadData
UIHeroPVPFormationPanelView.RefreshHeroInfo = RefreshHeroInfo
UIHeroPVPFormationPanelView.OnSetHero = OnSetHero
UIHeroPVPFormationPanelView.ClosePanel = ClosePanel
UIHeroPVPFormationPanelView.OnSelectTypeToggle = OnSelectTypeToggle
UIHeroPVPFormationPanelView.OnChangeTypeToggle = OnChangeTypeToggle
UIHeroPVPFormationPanelView.OnClickHeroCell = OnClickHeroCell
UIHeroPVPFormationPanelView.RefreshHeroList = RefreshHeroList
UIHeroPVPFormationPanelView.TakeDownHero = TakeDownHero
UIHeroPVPFormationPanelView.ResetDragAreaPos = ResetDragAreaPos
UIHeroPVPFormationPanelView.CanEdit = CanEdit
UIHeroPVPFormationPanelView.RefreshFormationBuff = RefreshFormationBuff
UIHeroPVPFormationPanelView.SetBuffViewActive = SetBuffViewActive
UIHeroPVPFormationPanelView.TryGuideClickHeroInList = TryGuideClickHeroInList
UIHeroPVPFormationPanelView.RefreshChooseSquadBtn = RefreshChooseSquadBtn
UIHeroPVPFormationPanelView.ChangeSquadIndex = ChangeSquadIndex
UIHeroPVPFormationPanelView.OnArena3V3SwitchDefTeam = OnArena3V3SwitchDefTeam
UIHeroPVPFormationPanelView.OnSaveBtnClick = OnSaveBtnClick
UIHeroPVPFormationPanelView.RefreshWeaponInfo = RefreshWeaponInfo
UIHeroPVPFormationPanelView.ClearSound = ClearSound
UIHeroPVPFormationPanelView.RefreshTWSkillChipBtn = RefreshTWSkillChipBtn

return UIHeroPVPFormationPanelView
