---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 23/1/4 17:06
---

local UIHeroPVEFormationPanelView = BaseClass("UIHeroPVEFormationPanelView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray
local Resource = CS.GameEntry.Resource
local HeroPVERenderTexture = require "UI.UILWHero.UIHeroPVEFormationPanel.Component.HeroPVERenderTexture"
local UIFormationHeroCell = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.UIFormationHeroCell"
local UIHeroInfoBar = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.UIHeroInfoBar"
--local FormationBuffView = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.FormationBuffView"
--local ChooseTWSkillChipSetPopup = require "UI.UILWHero.UIHeroPVPFormationPanel.Component.ChooseTWSkillChipSetPopup"

local bottomBarPath = "Root/BottomBar"
local heroScrollPath = "Root/BottomBar/HeroList"
local heroListPath = "Root/BottomBar/HeroList/Content"
local battleBtnPath = "Root/BottomBar/BattleBtn"
local battleBtnTextPath = "Root/BottomBar/BattleBtn/BattleBtnText"
local backBtnPath = "Root/BottomBar/BtnBack"
local allTypeHeroTogglePath = "Root/BottomBar/Rect_List/AllTypeToggle"
local allTypeHeroToggleTextPath = "Root/BottomBar/Rect_List/AllTypeToggle/AllTypeHeroToggleText"
local tankTypeHeroTogglePath = "Root/BottomBar/Rect_List/TankTypeToggle"
local tankTypeHeroToggleIconPath = "Root/BottomBar/Rect_List/TankTypeToggle/TankTypeIcon"
local missileTypeTogglePath = "Root/BottomBar/Rect_List/MissileTypeToggle"
local missileTypeToggleIconPath = "Root/BottomBar/Rect_List/MissileTypeToggle/MissileTypeIcon"
local airForceTypeTogglePath = "Root/BottomBar/Rect_List/AirForceTypeToggle"
local airForceTypeToggleIconPath = "Root/BottomBar/Rect_List/AirForceTypeToggle/AirForceTypeIcon"
local middleContentContainerPath = "Root/MiddleContentContainer"
local formationContentPath = "Root/MiddleContentContainer/FormationContent"
local formationBgPath = "Root/MiddleContentContainer/FormationContent/FormationBg"
local powerInfoPath = "Root/MiddleContentContainer/TopBar/PowerInfo"
local powerInfoTextPath = "Root/MiddleContentContainer/TopBar/PowerInfo/PowerNumberText"
local slotAreaContainerPath = "Root/MiddleContentContainer/FormationContent/SlotAreas"
local slotAreaPath = "Root/MiddleContentContainer/FormationContent/SlotAreas/Slot%dArea"
local heroInfoBarContainerPath = "Root/MiddleContentContainer/FormationContent/HeroInfoBars"
local heroInfoBarPath = "Root/MiddleContentContainer/FormationContent/HeroInfoBars/Slot%dHeroInfoBar"
local heroListTipTextPath = "Root/BottomBar/HeroListTipText"
local recommandHeroPowerTextPath = "Root/MiddleContentContainer/TopBar/RecommandPowerInfo/RecPowerNumberText"
local stageNameTextPath = "Root/MiddleContentContainer/TopBar/StageNameText"
local rootPath = "Root"
local selfPlayerHeadPath = "Root/MiddleContentContainer/TopBar/SelfPlayerHead/HeadIcon"
local zombieHeadPath = "Root/MiddleContentContainer/TopBar/ZombieHead/ZombieHeadIcon"
--local tacticalWeaponBtnPath = "Root/BottomBar/LeftBottomContainer/TacticalWeapon"
--local tacticalWeaponLevelTextPath = "Root/BottomBar/LeftBottomContainer/TacticalWeapon/TacticalWeaponLevelNumberText"
--local btn_choose_skill_chip_set_path = "Root/BottomBar/LeftBottomContainer/btnChooseSkillChipSet"
--local txt_choose_skill_chip_set_path = "Root/BottomBar/LeftBottomContainer/btnChooseSkillChipSet/txtChooseSkillChipSet"
--local popup_choose_skill_chip_set_path = "PopupChooseSkillChipSet"

local Sound = CS.GameEntry.Sound


local function ClearHeroScroll(self)
    self.heroScroll:RemoveComponents(UIFormationHeroCell)
    self.heroList:DestroyChildNode()
end

local function SetVisible(self,state)
    if self.root then
        self.root:SetActive(state)
    end
end

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    SetVisible(self,true)
    self:OnOpen()
end

local function OnDestroy(self)
    --self.guidedSwitch = nil
    --if self.clickGuideDelayTimer then
    --    self.clickGuideDelayTimer:Stop()
    --    self.clickGuideDelayTimer = nil
    --end
    --if self.switchGuideDelayTimer then
    --    self.switchGuideDelayTimer:Stop()
    --    self.switchGuideDelayTimer = nil
    --end
    --if self.switchGuideTween then
    --    self.switchGuideTween:Kill()
    --    self.switchGuideTween = nil
    --end
    if not IsNull(self.clickFingerHandle) then
        self.clickFingerHandle:Destroy()
        self.clickFingerHandle = nil
    end
    if not IsNull(self.switchFingerHandle) then
        self.switchFingerHandle:Destroy()
        self.switchFingerHandle = nil
    end

    self:ResetDragAreaPos(self)
    -- if self.formationRt then
    --     self.formationRt:ResetPositions()
    -- end
    ClearHeroScroll(self)
    self:ComponentDestroy()
    self:DataDestroy()
    self:ClearSound()
    base.OnDestroy(self)
end


local function OnBattleBtnClick(self)
    if self.squadData then
        local heroes = self.squadData:GetLocalAllHeroes()
        if table.IsNullOrEmpty(heroes) then
            return
        end
        DataCenter.LWSoundManager:PlaySound(10014)
        -- DS 无战术装备
        local curChipSetId = 0
        --local curChipSetId = self.squadData:GetLocalTWSkillChipSetId()
        if self.source == EnterHeroSquadPanelWay.PveEnterBattle then
            if self.stageGroupId and self.stageId then
                -- TODO: Beef 这里先跳过服务器
                --SFSNetwork.SendMessage(MsgDefines.StartPveStage, self.stageGroupId, self.stageId, 1, nil, heroes,curChipSetId)
                DataCenter.ZombieBattleManager:StartBattle()
            end
        elseif self.source == EnterHeroSquadPanelWay.DetectEventPVE then
            if self.detectEventUuid then
                SFSNetwork.SendMessage(MsgDefines.StartDetectEventPve, self.detectEventUuid, 1, heroes,curChipSetId)
            end
        elseif self.source == EnterHeroSquadPanelWay.TowerupJeepAdventure then
            if self.cfgId then
                SFSNetwork.SendMessage(MsgDefines.FormationSave,1,heroes,1,curChipSetId)
                DataCenter.ZombieBattleManager:StartBattle()
            end
        end
        -- self:ClosePanel()
    end
end

--- 尝试撤下对应位置的英雄
---@param index number
local function TryTakeDownHeroAtIndex(self,index)

    if self.squadData then
        local heroUuid = self.squadData:GetLocalHeroAtSlotIndex(index)
        if heroUuid then
            self:TakeDownHero(self.squadIndex,heroUuid)
        end
    end
end

local function OnBeginDragHeroSlot(self,eventData,index)

    if self.dragingIndex then
        return
    end

    -- 判断对应位置是否有英雄，如果有，进入拖拽状态
    if self.squadData then
        local heroUuid = self.squadData:GetLocalHeroAtSlotIndex(index)
        if heroUuid then
            self.isInDragMode = true
            self.dragingIndex = index
            self.lastDragPosX = eventData.position.x
            self.lastDragPosY = eventData.position.y

            self.slotAreas[index].transform:SetAsFirstSibling()
            self.heroInfoBars[index].transform:SetParent(self.slotAreas[index].transform)
        end
    end
end

local function ResetDragAreaPos(self)
    for k,v in pairs(self.slotAreas) do
        v.transform.localPosition = self.slotPos[k]
    end
    for k,v in pairs(self.heroInfoBars) do
        v.transform:SetParent(self.heroInfoBarContainer.transform)
        v.transform.localPosition = self.heroInfoBarsPos[k]
    end
end

local function SwitchHeroSlot(self,fromIndex,toIndex)
    if self.squadData then
        local fromHeroUuid = self.squadData:GetLocalHeroAtSlotIndex(fromIndex)
        local toHeroUuid = self.squadData:GetLocalHeroAtSlotIndex(toIndex)
        self.squadData:SetLocalHero(fromIndex,nil)
        self.squadData:SetLocalHero(toIndex,nil)
        self.squadData:SetLocalHero(fromIndex,toHeroUuid)
        self.squadData:SetLocalHero(toIndex,fromHeroUuid)
    end
end

local function OnDragEndHeroSlot(self,eventData,index)
    if self.isInDragMode and self.dragingIndex == index then

        ResetDragAreaPos(self)
        self.formationRt:ResetPositions()
        if self.toSwitchIndex then


            SwitchHeroSlot(self, self.dragingIndex, self.toSwitchIndex)
            self:RefreshHeroInfo()
        end

        self.isInDragMode = false
        self.dragingIndex = nil
        self.toSwitchIndex = nil
        self.lastDragPosX = nil
        self.lastDragPosY = nil
    end
end

local function OnDragHeroSlot(self,eventData,index)

    if self.isInDragMode and self.dragingIndex == index then
        
        --- 碰撞区域跟随拖拽移动
        local curPosX = eventData.position.x
        local curPosY = eventData.position.y

        -- local offsetX = (curPosX - self.lastDragPosX)/self.uiScaleFactor
        -- local offsetY = (curPosY - self.lastDragPosY)/self.uiScaleFactor
        self.lastDragPosX = curPosX
        self.lastDragPosY = curPosY

        -- local curPos = self.slotAreas[index].transform.localPosition
        -- self.slotAreas[index].transform.localPosition = Vector3.New(curPos.x + offsetX,curPos.y + offsetY,curPos.z)
        local uiPos = PosConverse.ScreenToUIPos(self.slotAreasContainer.rectTransform,Vector2.New(curPosX,curPosY))
        self.slotAreas[index].transform.localPosition = Vector3.New(uiPos.x,uiPos.y) --Vector3.New(curPos.x + offsetX,curPos.y + offsetY,curPos.z)
        
        local areaCenterPos = PosConverse.UIWorldToScreenPos(self.slotAreas[index].transform.position)

        -- 小队场景
        local pos = Vector2.New(areaCenterPos.x,areaCenterPos.y)
        -- local pos = Vector2.New(curPosX,curPosY)
        local rtScreenPos = pos -- - self.formationRtOrigin
        
        -- rtScreenPos.x = rtScreenPos.x / self.formationRtScale.x
        -- rtScreenPos.y = rtScreenPos.y / self.formationRtScale.y

        if rtScreenPos.x < -8 or rtScreenPos.x > self.screenWidth + 8 then
            OnDragEndHeroSlot(self,eventData,self.dragingIndex)
            return
        end

        if rtScreenPos.y < -8 or rtScreenPos.y > self.screenHeight + 8 then
            OnDragEndHeroSlot(self,eventData,self.dragingIndex)
            return
        end

        self.formationRt:MoveHeroSlotPos(index,rtScreenPos)
    end
end

local function OnPointerEnterHeroSlot(self,eventData,index)

    if not self.isInDragMode then
        return
    end

    if self.isInDragMode and self.dragingIndex == index then
        return
    end

    if self.toSwitchIndex then
        return
    end

    self.toSwitchIndex = index
    self.formationRt:HeroSlotMoveToIndex(self.toSwitchIndex,self.dragingIndex)
    self.heroInfoBars[self.toSwitchIndex].transform.localPosition = self.heroInfoBarsPos[self.dragingIndex]
end

local function OnPointerExitHeroSlot(self,eventData,index)
    if not self.isInDragMode then
        return
    end

    if self.isInDragMode and self.dragingIndex == index then
        return
    end

    if self.toSwitchIndex ~= index then
        return
    end

    self.formationRt:HeroSlotMoveToIndex(self.toSwitchIndex,self.toSwitchIndex)
    self.heroInfoBars[self.toSwitchIndex].transform.localPosition = self.heroInfoBarsPos[self.toSwitchIndex]
    self.toSwitchIndex = nil
end

local function ComponentDefine(self)
    self.bottomBar = self:AddComponent(UIBaseContainer, bottomBarPath)
    self.heroList = self:AddComponent(GridInfinityScrollView, heroListPath)
    self.heroScroll = self:AddComponent(UIBaseContainer, heroScrollPath)
    self.battleBtn = self:AddComponent(UIButton, battleBtnPath)
    self.battleBtn:SetOnClick(function ()
        OnBattleBtnClick(self)
    end)
    self.battleBtnText = self:AddComponent(UIText, battleBtnTextPath)
    self.backBtn = self:AddComponent(UIButton, backBtnPath)
    self.backBtn:SetOnClick(function ()
        self:ClosePanel()
    end)
    self.allTypeHeroToggle = self:AddComponent(UIToggle, allTypeHeroTogglePath)
    self.allTypeHeroToggle:SetOnValueChanged(function (isOn)
        if isOn then
            self:OnChangeTypeToggle(HeroType.All)
        end
    end)
    self.allTypeHeroToggleText = self:AddComponent(UIText, allTypeHeroToggleTextPath)
    self.tankTypeHeroToggle = self:AddComponent(UIToggle, tankTypeHeroTogglePath)
    self.tankTypeHeroToggle:SetOnValueChanged(function (isOn)
        if isOn then
            self:OnChangeTypeToggle(HeroType.Tank)
        end
    end)
    self.tankTypeHeroToggleIcon = self:AddComponent(UIImage, tankTypeHeroToggleIconPath)
    self.missileTypeToggle = self:AddComponent(UIToggle, missileTypeTogglePath)
    self.missileTypeToggle:SetOnValueChanged(function (isOn)
        if isOn then
            self:OnChangeTypeToggle(HeroType.Missile)
        end
    end)
    self.missileTypeToggleIcon = self:AddComponent(UIImage, missileTypeToggleIconPath)
    self.airForceTypeToggle = self:AddComponent(UIToggle, airForceTypeTogglePath)
    self.airForceTypeToggle:SetOnValueChanged(function (isOn)
        if isOn then
            self:OnChangeTypeToggle(HeroType.Aircraft)
        end
    end)
    self.airForceTypeToggleIcon = self:AddComponent(UIImage, airForceTypeToggleIconPath)
    self.middleContentContainer = self:AddComponent(UIBaseContainer, middleContentContainerPath)
    self.formationContent = self:AddComponent(UIBaseContainer, formationContentPath)
    self.formationRt = self:AddComponent(HeroPVERenderTexture, "")
    self.uiScaleFactor = UIManager:GetInstance():GetScaleFactor()--UIUtil.GetScaleFactor()
    --self.formationBtn = self:AddComponent(UIButton, "Root/MiddleContentContainer/FormationContent/formationBtn")
    --self.formationBuffIcon = self:AddComponent(UIImage,"Root/MiddleContentContainer/FormationContent/formationBtn/infoImage")
    --self.firmationBufflView = self:AddComponent(FormationBuffView,"Root/MiddleContentContainer/FormationContent/FormationBuffInfo")
    --self.buffViewCloseBtn = self:AddComponent(UIButton,"Root/MiddleContentContainer/FormationContent/FormationBuffInfo/closeBtn")
    --self.buffViewCloseBtn:SetOnClick(function ()
    --    self:SetBuffViewActive()
    --end)
    --self.formationBtn:SetOnClick(function ()
    --    local isOn = self.firmationBufflView:GetActive()
    --    if not isOn then
    --        self.firmationBufflView:ReInit(self.formationBuffInfo)
    --    end
    --    self.firmationBufflView:SetActive(not isOn)
    --end)
    -- self.formationRtOrigin = PosConverse.UIWorldToScreenPos(self.formationRt.transform.position)
    -- self.formationRtRealWidth = self.formationRt.rtWidth
    -- self.formationRtRealHeight = self.formationRt.rtHeight
    -- self.formationRtScale = Vector2.New(self.formationRt:GetSizeDelta().x * self.uiScaleFactor / self.formationRtRealWidth,
    -- self.formationRt:GetSizeDelta().y * self.uiScaleFactor / self.formationRtRealHeight)

    self.powerInfo = self:AddComponent(UIBaseContainer, powerInfoPath)
    self.powerInfoText = self:AddComponent(UIText, powerInfoTextPath)

    self.screenWidth = Screen.width
    self.screenHeight = Screen.height

    local heroWorldPos = DataCenter.ZombieBattleManager:GetSquadMemberPosition()
    local heroScreenPos = {}
    for i=1,5 do
        local worldPos =  heroWorldPos[i] or Vector3.zero
        heroScreenPos[i] = PosConverse.WorldToScreenPos(worldPos,CS.UnityEngine.Camera.main)
    end

    self.slotAreasContainer = self:AddComponent(UIBaseContainer, slotAreaContainerPath)
    self.slotAreas = {}
    self.slotPos = {}
    for i=1,5 do
        local slotArea = self:AddComponent(UIEventTrigger, string.format(slotAreaPath,i))
        slotArea:OnPointerClick(function ()
            if not self.isInDragMode then
                TryTakeDownHeroAtIndex(self,i)
            end
        end)
        slotArea:OnBeginDrag(function (eventData)
            OnBeginDragHeroSlot(self,eventData,i)
        end)
        slotArea:OnDrag(function (eventData)
            OnDragHeroSlot(self,eventData,i)
        end)
        slotArea:OnEndDrag(function (eventData)
            OnDragEndHeroSlot(self,eventData,i)
        end)
        slotArea:OnPointerEnter(function (eventData)
            OnPointerEnterHeroSlot(self,eventData,i)
        end)
        slotArea:OnPointerExit(function (eventData)
            OnPointerExitHeroSlot(self,eventData,i)
        end)
        table.insert(self.slotAreas,slotArea)

        -- slotArea.rectTransform:Set_sizeDelta(slotAreaStandardWidth * self.uiScaleFactor,slotAreaStandardHeight * self.uiScaleFactor)

        -- 矫正位置，世界坐标转换到屏幕坐标，再转换到UI坐标
        local screenPos = heroScreenPos[i]
        local localPos = PosConverse.ScreenToUIPos(self.slotAreasContainer.rectTransform,screenPos)
        local pos = Vector3.New(localPos.x,localPos.y,0)
        slotArea.transform.localPosition = pos

        local slotPos = slotArea.transform.localPosition
        table.insert(self.slotPos,slotPos)
    end

    self.heroInfoBarContainer = self:AddComponent(UIBaseContainer, heroInfoBarContainerPath)
    self.heroInfoBars = {}
    self.heroInfoBarsPos = {}
    for i=1,5 do
        local heroInfoBar = self:AddComponent(UIHeroInfoBar, string.format(heroInfoBarPath,i))
        table.insert(self.heroInfoBars,heroInfoBar)


        -- 矫正位置，世界坐标转换到屏幕坐标，再转换到UI坐标
        local screenPos = heroScreenPos[i]
        screenPos.y = screenPos.y + 100 * self.screenHeight/1440
        local localPos = PosConverse.ScreenToUIPos(self.heroInfoBarContainer.rectTransform, screenPos)
        local pos = Vector3.New(localPos.x,localPos.y,0)
        heroInfoBar.transform.localPosition = pos

        local heroInfoBarPos = heroInfoBar.transform.localPosition
        table.insert(self.heroInfoBarsPos,heroInfoBarPos)
    end

    self.heroListTipText = self:AddComponent(UIText, heroListTipTextPath)

    self.recommandHeroPowerText = self:AddComponent(UIText, recommandHeroPowerTextPath)
    self.stageNameText = self:AddComponent(UIText, stageNameTextPath)

    self.root = self:AddComponent(UIBaseContainer, rootPath)
    self.selfPlayerHead = self:AddComponent(UIPlayerHead, selfPlayerHeadPath)
    self.zombieHeadIcon = self:AddComponent(UIImage, zombieHeadPath)
    --self.tacticalWeaponBtn = self:AddComponent(UIButton, tacticalWeaponBtnPath)
    --self.tacticalWeaponBtn:SetOnClick(function ()
    --    if self.weaponInfo then
    --        local selfEquips = DataCenter.TacticalWeaponManager:GetAllSelfWearingEquips()
    --        UIManager:GetInstance():OpenWindow(UIWindowNames.UILWTacticalWeaponTip,{ anim = true},self.weaponInfo,selfEquips,self.tacticalWeaponBtn)
    --    end
    --end)
    --self.tacticalWeaponLevelText = self:AddComponent(UIText, tacticalWeaponLevelTextPath)
    --self.chooseSkillChipSetBtn = self:AddComponent(UIButton, btn_choose_skill_chip_set_path)
    --self.chooseSkillChipSetBtn:SetOnClick(function ()
    --    if self.squadData then
    --        local position = self.chooseSkillChipSetBtn.transform.position
    --        local x = position.x + 40
    --        local y = position.y - 20
    --
    --        local chipSetIndex = self.squadData:GetLocalTWSkillChipSetId()
    --        self.chooseTWSkillChipSetPopup:SetPosition(x,y)
    --        self.chooseTWSkillChipSetPopup:Popup(chipSetIndex, function(idx)
    --            self.squadData:SetLocalTWSkillChipSetId(idx)
    --            self:RefreshHeroInfo()
    --        end)
    --    end
    --end)
    --self.chooseSkillChipSetBtnText = self:AddComponent(UIText, txt_choose_skill_chip_set_path)
    --self.chooseTWSkillChipSetPopup = self:AddComponent(ChooseTWSkillChipSetPopup, popup_choose_skill_chip_set_path)
end

--local function SetBuffViewActive(self)
--    local isOn = self.firmationBufflView:GetActive()
--    if not isOn then
--        self.firmationBufflView:ReInit(self.formationBuffInfo)
--    end
--    self.firmationBufflView:SetActive(not isOn)
--end

--function UIHeroPVEFormationPanelView:RefreshFormationBuffInfo()
--    local heros = self.squadData:GetLocalAllHeroes()
--    local type = self.formationBuffInfo and self.formationBuffInfo.type
--    self.formationBuffInfo = HeroUtils.GetFormationBuffInfoList(heros)
--    self.formationBuffInfo.heros = HeroUtils.SortFormationHeros(heros)
--    if self.formationBuffInfo.type ~= type then
--        if self.formationBuffInfo.type ~= 0 then
--            local isFormationBuffOpen = UIUtil.IsFormationBuffInfoOpen()
--            if isFormationBuffOpen then
--                UIUtil.PlayScaleAnim(self.formationBtn.rectTransform)
--            end
--        end
--    end
--end

--local function RefreshFormationBuff(self)
--    self:RefreshFormationBuffInfo()
--
--    local isFormationBuffOpen = UIUtil.IsFormationBuffInfoOpen()
--    if isFormationBuffOpen then
--        if self.formationBuffInfo.type == 0 then
--            self.formationBuffIcon:SetActive(false)
--        else
--            self.formationBuffIcon:SetActive(true)
--            local path = string.format(LoadPath.HeroCommonPath,self.formationBuffInfo.icon)
--            self.formationBuffIcon:LoadSprite(path)
--        end
--    else
--        self.formationBuffIcon:SetActive(true)
--        local path = string.format(LoadPath.HeroCommonPath,"od_biandui_zhenyingsuo")
--        self.formationBuffIcon:LoadSprite(path)
--    end
--    
--    if self.firmationBufflView:GetActive() then
--        self.firmationBufflView:ReInit(self.formationBuffInfo)
--    end
--end


local function DataDefine(self)
    self.heroListGO = {}
    self.heroItems = {}
    self.hasInitHeroList = false
    self.heroType = nil
    self.squadIndex = 1
    self.cachedHeroUuids = {}
end

local function ComponentDestroy(self)
    self.bottomBar = nil
    self.heroList = nil
    self.heroScroll = nil
    self.battleBtn = nil
    self.battleBtnText = nil
    self.backBtn = nil
    self.allTypeHeroToggle = nil
    self.allTypeHeroToggleText = nil
    self.tankTypeHeroToggle = nil
    self.tankTypeHeroToggleIcon = nil
    self.missileTypeToggle = nil
    self.missileTypeToggleIcon = nil
    self.airForceTypeToggle = nil
    self.airForceTypeToggleIcon = nil
    self.middleContentContainer = nil
    self.formationContent = nil
    self.formationRt = nil
    self.powerInfo = nil
    self.powerInfoText = nil
    self.slotAreasContainer = nil
    self.slotAreas = nil
    self.slotPos = nil
    self.heroInfoBarContainer = nil
    self.heroInfoBars = nil
    self.heroInfoBarsPos = nil
    self.heroListTipText = nil
    self.recommandHeroPowerText = nil
    self.stageNameText = nil
    self.root = nil
    self.selfPlayerHead = nil
    self.zombieHeadIcon = nil
    --self.tacticalWeaponBtn = nil
    --self.tacticalWeaponLevelText = nil
end

local function DataDestroy(self)
    self.heroListGO = nil
    self.heroItems = nil
    self.hasInitHeroList = false
    self.heroType = nil
    self.squadIndex = nil
    self.cachedHeroUuids = nil
    self.screenWidth = nil
    self.screenHeight = nil
    self.weaponInfo = nil
end

local function OnUpdateArmyFormationList(self)

    -- self:RefreshHeroList(false)
    -- self:RefreshHeroInfo()
end

local function OnHide(self)
    SetVisible(self,false)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.ArmyFormatUpdate, OnUpdateArmyFormationList)
    self:AddUIListener(EventId.HidePVEFormationPanel, OnHide)
    self:AddUIListener(EventId.OnKeyCodeEscape, self.OnKeyCodeEscape)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.ArmyFormatUpdate, OnUpdateArmyFormationList)
    self:RemoveUIListener(EventId.HidePVEFormationPanel, OnHide)
    self:RemoveUIListener(EventId.OnKeyCodeEscape, self.OnKeyCodeEscape)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
    if self.squadData then
        self:RefreshHeroInfo()
    end
end

local function OnDisable(self)
    base.OnDisable(self)
    self.active = false
end

local function OnKeyCodeEscape(self)
    TimerManager:GetInstance():DelayFrameInvoke(function()
        self:ClosePanel()
    end, 1)
end


--- 刷新Toggle显示
local function RefreshToggleShow(self)

    if self.heroType == HeroType.All then
        self.allTypeHeroToggleText:SetColorRGBA(0,0,0,1)
    else
        -- RGBA(119,113,133,255)
        self.allTypeHeroToggleText:SetColorRGBA(0.467,0.443,0.522,1)    
    end

    if self.heroType == HeroType.Tank then
        self.tankTypeHeroToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_tanke_da.png")
    else
        self.tankTypeHeroToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_tanke_xiao.png")
    end

    if self.heroType == HeroType.Missile then
        self.missileTypeToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_daodan_da.png")
    else
        self.missileTypeToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_daodan_xiao.png")
    end

    if self.heroType == HeroType.Aircraft then
        self.airForceTypeToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_feiji_da.png")
    else
        self.airForceTypeToggleIcon:LoadSprite("Assets/Main/Sprites/UI/UILWHeroSquad/zyf_biandui_feiji_xiao.png")
    end
end

local function RefreshStageInfo(self)
    if self.stageId then
        local line = LocalController:instance():getLine(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage), self.stageId)
        if line then
            -- self.stageNameText:SetText(line.order)--:SetLocalText(line.name,line.order)
            local format = string.gsub(Localization:GetString(300665), '{0}', line.level)
            self.stageNameText:SetText(format)
            self.recommandHeroPowerText:SetText(string.GetFormattedStr(tonumber(line.pow_rec)))
        end
    end
end

local function RefreshPlayerHead(self)
    local uid = LuaEntry.Player:GetUid()
    local pic = LuaEntry.Player:GetPic()
    local picVer = LuaEntry.Player.picVer
    self.selfPlayerHead:SetData(uid, pic, picVer)
end

--local function RefreshTacticalWeapon(self)
--    local weaponInfo = DataCenter.TacticalWeaponManager:GetFirstWeaponInfo()
--    if weaponInfo then
--        self.tacticalWeaponBtn:SetActive(true)
--        self.tacticalWeaponLevelText:SetText(weaponInfo.level)
--        self.weaponInfo = weaponInfo
--    else
--        self.tacticalWeaponBtn:SetActive(false)
--    end
--end

--local function RefreshTWSkillChipBtn(self)
--    local functionUnlock = DataCenter.TWSkillChipManager:IsFunctionUnlock()
--    self.chooseSkillChipSetBtn:SetActive(functionUnlock)
--end

local function OnOpen(self)
    local param1
    local param2
    self.source,param1,param2 = self:GetUserData()

    if self.source == EnterHeroSquadPanelWay.PveEnterBattle then
        self.stageGroupId = param1
        self.stageId = param2
    elseif self.source == EnterHeroSquadPanelWay.DetectEventPVE then
        self.detectEventUuid = param1
        if not self.detectEventUuid then
            self:ClosePanel()
            return
        end
        local data = DataCenter.RadarCenterDataManager:GetDetectEventInfo(self.detectEventUuid)
        local template = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(data.eventId)
        self.stageId = template.para
    elseif self.source == EnterHeroSquadPanelWay.TowerupJeepAdventure then
        self.cfgId = param1
        self.stageId = param2
    end

    RefreshStageInfo(self)
    --RefreshTacticalWeapon(self)
    --RefreshTWSkillChipBtn(self)

    self.squadIndex = 1
    self:RefreshSquadData()

    local state = self.allTypeHeroToggle:GetIsOn()
    if state then
        self:OnChangeTypeToggle(HeroType.All)
    else
        self.allTypeHeroToggle:SetIsOn(true)
    end

    self:RefreshHeroInfo()

    -- 玩家头像
    RefreshPlayerHead(self)

    -- 对面僵尸头像
    local line = LocalController:instance():getLine(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage), self.stageId)
    if line then
        local zombieHeadPath = line.stage_icon
        self.zombieHeadIcon:LoadSprite(zombieHeadPath)
    end
    local isSBttle = DataCenter.MonopolyManager:GetSpontaneousBattle()
    if isSBttle then
        self.delayBattleStart = TimerManager:GetInstance():DelayInvoke(function()
            OnBattleBtnClick(self)
        end,1)
    end
end

local function RefreshSquadData(self)
    self.squadData =DataCenter.ArmyFormationDataManager:GetFormationByType(self.source,self.squadIndex)
    self.slotCount = 5
    
    self:RefreshHeroInfo()
end


---返回英雄列表数据
local function GetHeroList(self,heroType)
    local heroList = {}
    local heroDataList = DataCenter.HeroDataManager:GetAllHeroList()
    for uuid,heroData in pairs(heroDataList) do
        local displayData = {}

        if heroType > 0 then
            if heroData.heroType ~= heroType then
                goto continue
            end
        end

        local inSquad = self.squadData:HasLocalHero(uuid)
        if inSquad then
            displayData.squadIndex = self.squadIndex
        end
        displayData.heroData = heroData
        table.insert(heroList,displayData)
        ::continue::
    end

    table.sort(heroList,function(a,b)
        return a.heroData.power > b.heroData.power
    end)

    return heroList
end


local function OnInitHeroScroll(self,go,index)
    local item = self.heroScroll:AddComponent(UIFormationHeroCell, go)
    self.heroListGO[go] = item
end

local function OnUpdateHeroScroll(self,go,index)
    go.transform:Set_localScale(1.16,1.16,1)
    local item = self.heroListGO[go]
    local heroSquadData = self.heroDataList[index+1]
    item:SetActive(heroSquadData ~= nil)
    
    item:SetData(heroSquadData,false)
    local isSelected = self.squadData:HasLocalHero(heroSquadData.heroData.uuid)
    item:SetSelected(isSelected)
    
    self.heroItems[heroSquadData.heroData.uuid] = item

    --if isSelected == false then
    --    self.clickGuideDelayTimer = TimerManager:GetInstance():DelayInvoke(function()
    --        self:TryGuideClickHeroInList(item.heroCell)
    --    end, 0.85)
    --end
end

local function OnDestroyHeroScrollItem(self,go, index)
    local heroSquadData = self.heroDataList[index+1]
    if heroSquadData and heroSquadData.heroData then
        self.heroItems[heroSquadData.heroData.uuid] = nil
    end
end

--- 撤下对应编队的英雄
local function TakeDownHero(self,squadIndex,heroUuid)

    if squadIndex ~= self.squadIndex then
        -- -- Get the current formation data of the other squad
        -- local otherSquad = DataCenter.ArmyFormationDataManager:GetFormationByType(self.source, squadIndex)
        -- -- If the other squad exists
        -- if otherSquad then
        --     -- Get the index of the hero to be taken down in the other squad
        --     local index = otherSquad:GetLocalHeroIndex(heroUuid)
        --     -- Remove the hero from the other squad
        --     otherSquad:SetLocalHero(index, nil)

        --     -- Get the current formation data of the other squad
        --     local curHeroes = otherSquad:GetLocalAllHeroes()
        --     -- Send a message to the server to update the formation data of the other squad
        --     SFSNetwork.SendMessage(MsgDefines.NormalFormationInfoSave, otherSquad.uuid, curHeroes, 1)

        --     -- Add the hero to the cache
        --     table.insert(self.cachedHeroUuids, heroUuid)
        -- end
    else
        DataCenter.LWSoundManager:PlaySound(10013)--下阵音效
        -- Get the index of the hero to be taken down in the current squad
        local index = self.squadData:GetLocalHeroIndex(heroUuid)
        -- Remove the hero from the current squad
        self.squadData:SetLocalHero(index, nil)
        -- Refresh the hero list
        self:RefreshHeroList(false)
        -- Refresh the hero information
        self:RefreshHeroInfo()
    end
end


local function OnClickHeroCell(self,heroDisplayData,heroItem)

    if not heroDisplayData then
        return
    end

    local heroUuid = heroDisplayData.heroData.uuid
    -- 在当前编队中，点击下阵
    local isInSquad = heroDisplayData.squadIndex == self.squadIndex
    if isInSquad then
        local index = self.squadData:GetLocalHeroIndex(heroUuid)
        self.squadData:SetLocalHero(index,nil)
        heroItem:SetSelected(false)
        self:RefreshHeroInfo()
        heroDisplayData.squadIndex = nil
        DataCenter.LWSoundManager:PlaySound(10013)
        return
    end

    -- 空闲，不在当前编队，且不在其他编队中，阵容有空位，点击上阵
    local index = self.squadData:GetEmptySlotIndex()
    local hasEmptySlot = index ~= nil

    
    if hasEmptySlot then
        self.squadData:SetLocalHero(index, heroUuid)
        heroItem:SetSelected(true)
        self:RefreshHeroInfo()
        heroDisplayData.squadIndex = self.squadIndex
        DataCenter.LWSoundManager:PlaySound(10012)--上阵音效

        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if heroData then
            local meta = heroData.meta
            if meta then
                local soundAsset = meta.sound_show
                if not string.IsNullOrEmpty(soundAsset) then
                    self.soundHandle = DataCenter.LWSoundManager:PlayHeroSound(soundAsset, SoundGround.Hero)
                end
            end
        end
    end
end

local function ClearSound(self)
    if self.soundHandle then
        Sound:StopSound(self.soundHandle)
        self.soundHandle = nil
    end
end

--- 刷新英雄列表
local function RefreshHeroList(self,moveToTop)
    self.heroDataList = GetHeroList(self,self.heroType)
    local count  = table.count(self.heroDataList)
    
    if count > 0 then
        self.heroScroll:SetActive(true)
        if not self.hasInitHeroList then
            local bindFunc1 = BindCallback(self, OnInitHeroScroll)
            local bindFunc2 = BindCallback(self, OnUpdateHeroScroll)
            local bindFunc3 = BindCallback(self, OnDestroyHeroScrollItem)
            self.heroList:Init(bindFunc1, bindFunc2, bindFunc3)
        end
        self.hasInitHeroList = true
        self.heroList:SetItemCount(count)
        self.heroList:ForceUpdate()
        if moveToTop then
            self.heroList:MoveItemByIndex(0)
        end
        self.heroListTipText:SetActive(false)
    else
        self.heroScroll:SetActive(false)
        self.heroListTipText:SetActive(true)
    end
end

local function OnSelectTypeToggle(self)
    RefreshHeroList(self,true)
end

local function OnChangeTypeToggle(self,heroType)
    if self.heroType == heroType then
        return
    end
    self.heroType = heroType
    OnSelectTypeToggle(self)
    RefreshToggleShow(self)
end

local function RefreshHeroInfo(self)
    self.heroes = self.squadData:GetLocalAllHeroes()
    
    local hero40010inFront = nil
    local hero30002atBack = nil
    
    local totalCombatPower = 0
    local heroCount = 0
    for i=1,self.slotCount do
        local hasHero = self.heroes[i] ~= nil
        if hasHero then
            local heroUuid = self.heroes[i]
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
            if heroData ~= nil then
                -- self.heroSlots[i]:SetData(false,heroData.quality)
                self.heroInfoBars[i]:SetData(heroData.level,heroUuid)
                totalCombatPower = totalCombatPower + heroData.power
                if i >= 1 and i <= 2 and heroData.heroId == 40010 then
                    hero40010inFront = i
                end
                if i >= 3 and i <= 5 and heroData.heroId == 30002 then
                    hero30002atBack = i
                end
            end
            heroCount = heroCount + 1
        else
            -- self.heroSlots[i]:SetData(true)
            self.heroInfoBars[i]:SetData(nil)
        end
    end

    -- if heroCount > 0 then
        -- self.formationRt:SetActive(true)
        -- self.formationRt:SetHeroesUuid(self.heroes)
    -- else
    --     self.formationRt:SetActive(false)
    -- end

    local heroDatas = {}
    for index,heroUuid in pairs(self.heroes) do
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if heroData ~= nil then
            -- table.insert(heroDatas,heroData)
            heroDatas[index] = heroData
        end
    end

    DataCenter.ZombieBattleManager:SetHeroers(heroDatas)

    self.powerInfoText:SetText(string.GetFormattedStr(totalCombatPower))

    --if not self.guidedSwitch and hero40010inFront and hero30002atBack then
    --    self.guidedSwitch = true
    --    self.switchGuideDelayTimer = TimerManager:GetInstance():DelayInvoke(function()
    --        self:GuideSwitchHeros(self.slotAreas[hero30002atBack], self.slotAreas[hero40010inFront])
    --    end, 0.5)
    --end
    --self:RefreshFormationBuff()

    --local localChipSetId = self.squadData:GetLocalTWSkillChipSetId()
    --if localChipSetId and localChipSetId > 0 then
    --    self.chooseSkillChipSetBtnText:SetLocalText("800323", localChipSetId)
    --else
    --    self.chooseSkillChipSetBtnText:SetText("")
    --end
end

local function UpdateView(self)
    -- self:RefreshSquadData()
end

local function OnSetHero(self)
    self:UpdateView()
end

local function ClosePanel(self)
    -- if self.squadData ~= nil then
    --     self.squadData:ResetLocalData()
    -- end

    -- if self.closePanelCallBack then
    --     self.closePanelCallBack()
    -- end
    -- self.ctrl:CloseSelf()

    local exitStageId = DataCenter.LWBattleManager:GetCurBattleLogic():GetStageId()
    self.ctrl:CloseSelf()
    -- DataCenter.ZombieBattleManager:Exit()

    local stageTemp = LocalController:instance():getLine(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage), exitStageId)
    if self.source == EnterHeroSquadPanelWay.DetectEventPVE then
        DataCenter.ZombieBattleManager:Exit()
    elseif self.source == EnterHeroSquadPanelWay.PveEnterBattle then
        DataCenter.ZombieBattleManager:Exit()
    elseif self.source == EnterHeroSquadPanelWay.TowerupJeepAdventure then
        DataCenter.ZombieBattleManager:Exit()
    end
end

--local function TryGuideClickHeroInList(self, heroCell)
--    if DataCenter.LWGuideFlowManager:IsRunning() then
--        return
--    end
--    if self.squadData:GetEmptySlotIndex() ~= nil and not self.guidedClickHero then-- and CommonUtil.PlayerPrefsGetInt("PVE_FORMATION_CLICK_HERO_GUIDE", 0) == 0 then
--        --CommonUtil.PlayerPrefsSetInt("PVE_FORMATION_CLICK_HERO_GUIDE", 1)
--        self.guidedClickHero = true
--        self.clickFingerHandle = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefabs/Guide/UIArrowFinger.prefab")
--        self.clickFingerHandle:completed('+', function(handle)
--            if handle.isError then return end
--            local gameObject = handle.gameObject
--            local transform = gameObject.transform
--            transform:SetParent(UIManager:GetInstance():GetLayer(UILayer.Guide.Name).transform, false)
--            transform.localScale = Vector3.one
--            if heroCell then
--                transform.position = heroCell.img_icon.transform.position
--            end
--            TimerManager:GetInstance():DelayInvoke(function()
--                if not IsNull(self.clickFingerHandle) then
--                    self.clickFingerHandle:Destroy()
--                    self.clickFingerHandle = nil
--                end
--            end, 2)
--        end)
--    end
--end

--local function GuideSwitchHeros(self, srcSlot, tarSlot)
--    self.switchFingerHandle = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefabs/Guide/UIArrowFinger_hold.prefab")
--    self.switchFingerHandle:completed('+', function(handle)
--        if handle.isError then return end
--        local gameObject = handle.gameObject
--        local transform = gameObject.transform
--        transform:SetParent(UIManager:GetInstance():GetLayer(UILayer.Guide.Name).transform, false)
--        transform.position = srcSlot.transform.position
--        transform.localScale = Vector3.one
--        local img = transform:GetComponentInChildren(typeof(CS.UnityEngine.UI.Image))
--        self.switchGuideTween = DOTween.Sequence()
--        if not IsNull(img) then
--            self.switchGuideTween:Append(
--                img:DOFade(0, 0)
--            )
--            self.switchGuideTween:Append(
--                img:DOFade(1, 0.5)
--            )
--        end
--        self.switchGuideTween:Append(
--            transform:DOMove(tarSlot.transform.position, 0.5)
--        )
--        if not IsNull(img) then
--            self.switchGuideTween:Append(
--                img:DOFade(0, 0.5)
--            )
--        end
--        self.switchGuideTween:SetLoops(2)
--        self.switchGuideTween:OnComplete(function()
--            if not IsNull(self.switchFingerHandle) then
--                self.switchFingerHandle:Destroy()
--                self.switchFingerHandle = nil
--            end
--        end)
--    end)
--end

UIHeroPVEFormationPanelView.OnCreate= OnCreate
UIHeroPVEFormationPanelView.OnDestroy = OnDestroy
UIHeroPVEFormationPanelView.OnEnable = OnEnable
UIHeroPVEFormationPanelView.OnDisable = OnDisable
UIHeroPVEFormationPanelView.UpdateView = UpdateView
UIHeroPVEFormationPanelView.OnAddListener = OnAddListener
UIHeroPVEFormationPanelView.OnRemoveListener = OnRemoveListener
UIHeroPVEFormationPanelView.ComponentDefine = ComponentDefine
UIHeroPVEFormationPanelView.DataDefine = DataDefine
UIHeroPVEFormationPanelView.ComponentDestroy = ComponentDestroy
UIHeroPVEFormationPanelView.DataDestroy = DataDestroy

UIHeroPVEFormationPanelView.OnOpen = OnOpen
UIHeroPVEFormationPanelView.RefreshSquadData = RefreshSquadData
UIHeroPVEFormationPanelView.RefreshHeroInfo = RefreshHeroInfo
UIHeroPVEFormationPanelView.OnSetHero = OnSetHero
UIHeroPVEFormationPanelView.ClosePanel = ClosePanel
UIHeroPVEFormationPanelView.OnSelectTypeToggle = OnSelectTypeToggle
UIHeroPVEFormationPanelView.OnChangeTypeToggle = OnChangeTypeToggle
UIHeroPVEFormationPanelView.OnClickHeroCell = OnClickHeroCell
UIHeroPVEFormationPanelView.RefreshHeroList = RefreshHeroList
UIHeroPVEFormationPanelView.TakeDownHero = TakeDownHero
UIHeroPVEFormationPanelView.ResetDragAreaPos = ResetDragAreaPos
--UIHeroPVEFormationPanelView.TryGuideClickHeroInList = TryGuideClickHeroInList
--UIHeroPVEFormationPanelView.GuideSwitchHeros = GuideSwitchHeros
--UIHeroPVEFormationPanelView.RefreshFormationBuff = RefreshFormationBuff
UIHeroPVEFormationPanelView.OnKeyCodeEscape = OnKeyCodeEscape
--UIHeroPVEFormationPanelView.SetBuffViewActive = SetBuffViewActive
UIHeroPVEFormationPanelView.ClearSound = ClearSound
--UIHeroPVEFormationPanelView.RefreshTWSkillChipBtn = RefreshTWSkillChipBtn

return UIHeroPVEFormationPanelView
