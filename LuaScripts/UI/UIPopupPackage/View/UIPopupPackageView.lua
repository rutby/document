---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/9/15 16:38
---

local base = UIBaseView
local UIPopupPackageView = BaseClass("UIPopupPackageView", base)
local UIPopupPackageCell = require "UI.UIPopupPackage.Component.UIPopupPackageCell"

local panel_path = "UICommonPanel"
local bg_path = "Bg"
local close_path = "Bg/Close"
local title_path = "Bg/Title"
local hero_mask_path = "Bg/HeroMask"
local hero_image_path = "Bg/HeroMask/HeroImage"
local hero_spine_path = "Bg/HeroMask/HeroSpine"
local hero_spine_rect_path = "Bg/HeroMask/HeroSpineRect"
local spine_frontBg_path = "Bg/HeroMask/spineFrontBg"
local descBg_path = "Bg/HeroMask/descBg"
local desc_path = "Bg/Desc"
local time_path = "Bg/Time"
local scroll_view_path = "Bg/ScrollView"
local discount_bg_path = "Bg/DiscountBg"
local discount_path = "Bg/DiscountBg/Discount"
local buy_path = "Bg/Buy"
local buy_text_path = "Bg/Buy/BuyText"
local left_tab_path = "TabList/LeftTab"
local left_name_path = "TabList/LeftTab/LeftName"
local cur_tab_path = "TabList/CurTab"
local cur_name_path = "TabList/CurTab/CurName"
local right_tab_path = "TabList/RightTab"
local right_name_path = "TabList/RightTab/RightName"

local BgPath = "Assets/Main/TextureEx/UIGiftPackage/UIPopupPackage_bg_"
local TabPath = "Assets/Main/Sprites/UI/UIPopupPackage/UIPopupPackage_tab_"
local DescImagePath = "Assets/Main/TextureEx/UIGiftPackage/UIPopupPackage_bg_flag_"

local ConvertHeroId =
{
    ["OfficerWomanGift"] = 1017,
    ["SheriffGift"] = 1003,
    ["SisterGift"] = 11001,
    ["KillerManGift"] = 1006,
    ["BlackWomanGift"] = 1012,
    ["MafiaGodfatherGift"] = 22001,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.panel_btn = self:AddComponent(UIButton, panel_path)
    self.panel_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.bg_image = self:AddComponent(UIImage, bg_path)
    self.descBg = self:AddComponent(UIImage, descBg_path)
    self.spine_frontBg = self:AddComponent(UIImage, spine_frontBg_path)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.goTextMat = self.transform:Find("Bg/Title/goTextMat"):GetComponent(typeof(CS.UnityEngine.MeshRenderer))
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.time_text = self:AddComponent(UITextMeshProUGUIEx, time_path)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)
    self.discount_bg_go = self:AddComponent(UIBaseContainer, discount_bg_path)
    self.discount_text = self:AddComponent(UITextMeshProUGUIEx, discount_path)
    self.buy_btn = self:AddComponent(UIButton, buy_path)
    self.buy_btn:SetOnClick(function()
        self:OnBuyClick()
    end)
    self.buy_text = self:AddComponent(UITextMeshProUGUIEx, buy_text_path)
    self.left_tab_btn = self:AddComponent(UIButton, left_tab_path)
    self.left_tab_btn:SetOnClick(function()
        self:OnLeftTabClick()
    end)
    self.left_name_text = self:AddComponent(UITextMeshProUGUIEx, left_name_path)
    self.cur_tab_btn = self:AddComponent(UIButton, cur_tab_path)
    self.cur_tab_btn:SetOnClick(function()
        self:OnCurTabClick()
    end)
    self.cur_name_text = self:AddComponent(UITextMeshProUGUIEx, cur_name_path)
    self.right_tab_btn = self:AddComponent(UIButton, right_tab_path)
    self.right_tab_btn:SetOnClick(function()
        self:OnRightTabClick()
    end)
    self.right_name_text = self:AddComponent(UITextMeshProUGUIEx, right_name_path)
    
    self.hero_mask = self:AddComponent(UIBaseContainer, hero_mask_path)
    self.hero_image = self:AddComponent(UIImage, hero_image_path)
    self.hero_spine = self.transform:Find(hero_spine_path):GetComponent(typeof(CS.Spine.Unity.SkeletonGraphic))
    self.hero_spine_rect_go = self:AddComponent(UIBaseContainer, hero_spine_rect_path)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.pack = nil
    self.rewardList = {}
    self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
    self.timer:Start()
end

local function DataDestroy(self)
    self.pack = nil
    self.rewardList = {}
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function RefreshHero(self)
    local packName = self.pack:getPopupImageH()
    local heroId = ConvertHeroId[packName]
    if heroId == nil then
        self.hero_mask:SetActive(false)
        return
    end
    self.hero_mask:SetActive(true)
    local curSpinePath = HeroUtils.GetSpinePath(heroId)
    if curSpinePath then
        self.hero_image:SetActive(false)
        if self.spinePath ~= curSpinePath then
            if self.spinePath then
                CommonUtil.UnloadAsset(self.spinePath, "UIHeroInfoSpine")
            end
            self.spinePath = curSpinePath
            CommonUtil.LoadAsset(self.spinePath, "UIHeroInfoSpine", typeof(CS.Spine.Unity.SkeletonDataAsset), function(asset)
                if asset then
                    self.hero_spine.gameObject:SetActive(true)
                    self.hero_spine.skeletonDataAsset = asset
                    self.hero_spine:Initialize(true)
                    self.hero_spine.AnimationState:SetAnimation(0, "Idle", true)
                end
            end)
        else
            self.hero_spine.gameObject:SetActive(true)
        end
    else
        local picPath = HeroUtils.GetHeroBigPic(heroId)
        self.hero_image:LoadSprite(picPath)
        self.hero_image:SetActive(true)
        self.hero_spine.gameObject:SetActive(false)
    end
end

local function OnCellMoveIn(self, itemObj, index)
    itemObj.name = tostring(index)
    local item = self.scroll_view:AddComponent(UIPopupPackageCell, itemObj)
    item:SetData(self.rewardList[index])
end

local function OnCellMoveOut(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIPopupPackageCell)
end

local function ShowScroll(self)
    local count = #self.rewardList
    if count > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:SetActive(false)
    end
end

local function ReInit(self)
    self.pack = self:GetUserData()
    self:Refresh()
end

local function Refresh(self)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_First_Pay)
    local packName = self.pack:getPopupImageH()
    local config = PopupPackageConfig[packName] or PopupPackageConfig["Default"]
    self.leftPack, self.rightPack = self:GetLeftRightPack()
    self.bg_image:LoadSprite(BgPath .. packName)
    self.descBg:LoadSprite(DescImagePath .. config.DescImage)
    self.spine_frontBg:LoadSprite("Assets/Main/Sprites/UI/UIPopupPackage/" .. config.FrontBg)
    self.title_text:SetLocalText(self.pack:getName())
    self.title_text:SetColorGradient(config.TitleTopColor, config.TitleTopColor, config.TitleBottomColor, config.TitleBottomColor)
    self.title_text:SetMaterial(self.goTextMat.sharedMaterials[config.OutlineNum])
    self.desc_text:SetText(self.pack:getDescText())
    self.desc_text:SetColor(config.DescTextColor)
    local discount = self.pack:hasPercent() and tonumber(self.pack:getPercent()) or 0
    self.discount_bg_go:SetActive(discount > 0)
    self.discount_text:SetText(string.format("%s%%", discount))
    self.buy_text:SetText(DataCenter.PayManager:GetDollarText(self.pack:getPrice(), self.pack:getProductID()))
    self.cur_tab_btn:LoadSprite(TabPath .. packName)
    self.cur_name_text:SetLocalText(self.pack:getName())
    if self.leftPack then
        self.left_tab_btn:SetActive(true)
        self.left_tab_btn:LoadSprite(TabPath .. self.leftPack:getPopupImageH())
        self.left_name_text:SetLocalText(self.leftPack:getName())
    else
        self.left_tab_btn:SetActive(false)
    end
    if self.rightPack then
        self.right_tab_btn:SetActive(true)
        self.right_tab_btn:LoadSprite(TabPath .. self.rightPack:getPopupImageH())
        self.right_name_text:SetLocalText(self.rightPack:getName())
    else
        self.right_tab_btn:SetActive(false)
    end
    self.rewardList = self:GetRewardListInternal()
    self:ShowScroll()
    self:TimerAction()
    self:RefreshHero()
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local endTime = self.pack:getEndTime()
    local restTime = endTime - curTime
    if restTime > 0 then
        local restTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(restTime)
        self.time_text:SetText(restTimeStr)
    else
        self.ctrl:CloseSelf()
    end
end

local function GetLeftRightPack(self)
    local packId = self.pack:getID()
    local rechargeLine = self.pack:getRechargeLineData()
    local rechargeId = rechargeLine.id
    local packs = GiftPackageData.GetAllAvailablePackageByRechargeId(rechargeId, true)
    for i = 1, #packs do
        if packs[i]:getID() == packId then
            return packs[i - 1], packs[i + 1]
        end
    end
    return nil, nil
end

--Copy from GoldExchangeNormalLuaView.lua
local function GetRewardListInternal(self)
    local rewardList = {}

    local diamond = tonumber(self.pack:getDiamond()) or 0
    if diamond > 0 then
        local reward = {}
        reward.rewardType = RewardType.GOLD
        reward.count = diamond
        table.insert(rewardList, reward)
    end

    -- 英雄
    local heroStr = self.pack:getHeroesStr()
    if (not string.IsNullOrEmpty(heroStr)) then
        local arr = string.split(heroStr, ";")
        if (#arr == 2) then
            local reward = {}
            reward.rewardType = RewardType.HERO
            reward.heroId = arr[1]
            reward.count = arr[2]
            table.insert(rewardList, reward)
        end
    end

    -- 普通道具
    local str = self.pack:getItemsStr()
    local _item_use = self.pack:getItemUse()
    if _item_use ~= nil and _item_use ~= "" then
        str = _item_use .. "|" .. str
    end

    local arrMiddle = string.split(str,"|")
    if arrMiddle ~= nil and #arrMiddle > 0 then
        for k,v in ipairs(arrMiddle) do
            local arr = string.split(v,";")
            if arr[1] ~= "" then
                local reward = {}
                reward.rewardType = RewardType.GOODS
                reward.itemId = arr[1]
                reward.count = arr[2]
                table.insert(rewardList, reward)
            end
        end
    end

    --联盟礼物
    local arrAlliance = self.pack:getAllianceGift()
    if arrAlliance ~= nil and #arrAlliance > 0 then
        for k,v in ipairs(arrAlliance) do
            local arr = string.split(v,";")
            if #arr > 4 then
                local reward = {}
                reward.rewardType = RewardType.GOODS
                reward.iconName = string.format(LoadPath.UIAllianceGift, arr[1])
                reward.itemName = arr[2]
                reward.itemDesc = arr[3]
                reward.count = arr[4]
                reward.itemColor = arr[5]
                table.insert(rewardList, reward)
            end
        end
    end

    return rewardList
end

local function OnBuyClick(self)
    self.ctrl:BuyGift(self.pack)
end

local function OnLeftTabClick(self)
    if self.leftPack then
        self.pack = self.leftPack
        self:Refresh()
    end
end

local function OnCurTabClick(self)
    
end

local function OnRightTabClick(self)
    if self.rightPack then
        self.pack = self.rightPack
        self:Refresh()
    end
end

UIPopupPackageView.OnCreate = OnCreate
UIPopupPackageView.OnDestroy = OnDestroy
UIPopupPackageView.ComponentDefine = ComponentDefine
UIPopupPackageView.ComponentDestroy = ComponentDestroy
UIPopupPackageView.DataDefine = DataDefine
UIPopupPackageView.DataDestroy = DataDestroy
UIPopupPackageView.OnEnable = OnEnable
UIPopupPackageView.OnDisable = OnDisable

UIPopupPackageView.OnCellMoveIn = OnCellMoveIn
UIPopupPackageView.OnCellMoveOut = OnCellMoveOut
UIPopupPackageView.ShowScroll = ShowScroll

UIPopupPackageView.ReInit = ReInit
UIPopupPackageView.Refresh = Refresh
UIPopupPackageView.TimerAction = TimerAction
UIPopupPackageView.GetLeftRightPack = GetLeftRightPack
UIPopupPackageView.GetRewardListInternal = GetRewardListInternal
UIPopupPackageView.OnBuyClick = OnBuyClick
UIPopupPackageView.OnLeftTabClick = OnLeftTabClick
UIPopupPackageView.OnCurTabClick = OnCurTabClick
UIPopupPackageView.OnRightTabClick = OnRightTabClick
UIPopupPackageView.RefreshHero = RefreshHero
return UIPopupPackageView