---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/4/3 14:36
---
local Localization = CS.GameEntry.Localization
local base = require "UI.UICityHud.Component.UICityHudBase"
local UICityHudSiegeBossTime = BaseClass("UICityHudSiegeBossTime", base)

local this_path = ""
-- local level_path = "Root/Name/Level"
local name_path = "Root/Name"
local time_path = "Root/ActTime/remainTime"
local timeBg_path = "Root/ActTime"

local ShowDuration = 0.5

local function ComponentDefine(self)
    base.ComponentDefine(self)
    self.anim = self:AddComponent(UIAnimator, this_path)
    self.anim:Play(CityHubAnimName.DefaultHide, 0, 0)
    -- self.level_text = self:AddComponent(UITextMeshProUGUIEx, level_path)
    self.name_text = self:AddComponent(UITextMeshProUGUIEx, name_path)
    self.time_text = self:AddComponent(UITextMeshProUGUIEx, time_path)
    self.timeBg = self:AddComponent(UIBaseContainer, timeBg_path)
end

local function DataDefine(self)
    base.DataDefine(self)
    self.isBigBoss = false
    self.isShowing = false
    self.hideTimer = nil
end

local function DataDestroy(self)
    if self.hideTimer then
        self.hideTimer:Stop()
        self.hideTimer = nil
    end
    base.DataDestroy(self)
end

local function SetParam(self, param)
    base.SetParam(self, param)

    local line = LocalController:instance():getLine(TableName.CitySiegeZombie, self.param.zombieId)
    self.isBigBoss = (line.BossType == CityResidentDefines.BossType.Big)
    -- self.level_text:SetText(line.Level)
    self.name_text:SetText("Lv."..line.Level.." "..Localization:GetString(line.Name))
    self.timeBg:SetActive(self.isBigBoss)
    self:TimerAction()
end

local function TimerAction(self)
    if self.isBigBoss then
        local attackData = DataCenter.CitySiegeManager:GetAttackData()
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local endTime = attackData.endTime
        local restTime = toInt(math.max(endTime - curTime, 0))
        local restTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(restTime)
        self.time_text:SetText(restTimeStr)
    end
end

local function SetInView(self, isInView)
    if self.isInView == isInView then
        return
    end
    self.isInView = isInView
    self.root_go:SetActive(self.isInLod and self.isInView)

    if isInView then
        if self.isShowing then
            self.anim:Play(CityHubAnimName.DefaultShow, 0, 0)
        else
            self.anim:Play(CityHubAnimName.DefaultHide, 0, 0)
        end
    else
        self.anim:Play(CityHubAnimName.DefaultHide, 0, 0)
    end
end

local function OnWorldInputDragBegin(self)
    if self.hideTimer then
        self.hideTimer:Stop()
    end
    if not self.isShowing then
        self.isShowing = true
        if self.isInView then
            self.anim:Play(CityHubAnimName.HideToShow, 0, 0)
        end
    end
end

local function OnWorldInputDragEnd(self)
    if self.hideTimer then
        self.hideTimer:Stop()
    end
    self.hideTimer = TimerManager:GetInstance():DelayInvoke(function()
        if self.isShowing then
            self.isShowing = false
            if self.isInView then
                self.anim:Play(CityHubAnimName.ShowToHide, 0, 0)
            end
        end
    end, ShowDuration)
end

UICityHudSiegeBossTime.ComponentDefine = ComponentDefine
UICityHudSiegeBossTime.DataDefine = DataDefine
UICityHudSiegeBossTime.DataDestroy = DataDestroy
UICityHudSiegeBossTime.OnEnable = OnEnable
UICityHudSiegeBossTime.SetParam = SetParam
UICityHudSiegeBossTime.TimerAction = TimerAction
UICityHudSiegeBossTime.SetInView = SetInView
UICityHudSiegeBossTime.OnWorldInputDragBegin = OnWorldInputDragBegin
UICityHudSiegeBossTime.OnWorldInputDragEnd = OnWorldInputDragEnd

return UICityHudSiegeBossTime