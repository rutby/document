---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/29 15:34
---

local base = require "UI.UICityHud.Component.UICityHudBase"
local UICityHudProductSlider = BaseClass("UICityHudProductSlider", base)

local icon_path = "Root/Icon"
local fill_path = "Root/Fill"

local IconWidth = 35.84

function UICityHudProductSlider:ComponentDefine()
    base.ComponentDefine(self)
    self.icon_image = self:AddComponent(UIImage, icon_path)
    self.fill_image = self:AddComponent(UIImage, fill_path)
end

function UICityHudProductSlider:ComponentDestroy()
    base.ComponentDestroy(self)
end

function UICityHudProductSlider:OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UICityHudProductSlider:DataDefine()
    base.DataDefine(self)
    self.tween = nil
    self.lodMax = 2
end

function UICityHudProductSlider:DataDestroy()
    if self.tween then
        self.tween:Kill()
        self.tween = nil
    end
    if self.param.fUuid ~= nil then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        DataCenter.FurnitureProductManager:SetStopTime(self.param.fUuid, curTime)
    end
    base.DataDestroy(self)
end

function UICityHudProductSlider:SetParam(param)
    base.SetParam(self, param)
    self.transform.localScale = Vector3.one * (param.scale or 1)
    self.root_go.transform.localPosition = param.offset or Vector3.zero
    
    if param.icon then
        self.icon_image:SetActive(true)
        self.icon_image:LoadSprite(param.icon, nil, function()
            if self.active then
                self.icon_image:SetNativeSize()
                local size = self.icon_image.rectTransform.sizeDelta
                size.y = size.y / size.x * IconWidth
                size.x = IconWidth
                self.icon_image.rectTransform.sizeDelta = size
            end
        end)
    else
        self.icon_image:SetActive(false)
    end
    
    if self.tween then
        self.tween:Kill()
    end
    local pro = 0
    local time = param.duration
    --if self.param.fUuid ~= nil then
    --    local productParam = DataCenter.FurnitureProductManager:GetFurnitureProductByUuid(self.param.fUuid)
    --    if productParam ~= nil and productParam.endTime > 0 then
    --        if productParam.stopTime ~= 0 and productParam.stopTime < productParam.endTime then
    --            pro = (productParam.stopTime - productParam.startTime) / (productParam.endTime - productParam.startTime)
    --            time = (1 - pro) * param.duration
    --        end
    --    end
    --    local curTime = UITimeManager:GetInstance():GetServerTime()
    --    DataCenter.FurnitureProductManager:SetTime(self.param.fUuid, curTime, curTime + param.duration * 1000)
    --end
    
    self.fill_image:SetFillAmount(pro)
    self.tween = self.fill_image.unity_image:DOFillAmount(1, time):SetEase(CS.DG.Tweening.Ease.Linear):OnComplete(param.callback)
end

return UICityHudProductSlider