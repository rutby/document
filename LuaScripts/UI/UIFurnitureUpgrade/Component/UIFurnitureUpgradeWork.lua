---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/9 15:36
---

local UIFurnitureUpgradeWork = BaseClass("UIFurnitureUpgradeWork", UIBaseContainer)
local base = UIBaseContainer
local UIFurnitureUpgradeWorkSlot = require "UI.UIFurnitureUpgrade.Component.UIFurnitureUpgradeWorkSlot"
local UIGray = CS.UIGray
local Localization = CS.GameEntry.Localization

local list_path = "List"
local add_path = "CountBg/Add"
local sub_path = "CountBg/Sub"
local count_path = "CountBg/Count"

local CellWidth = 150
local CellSpace = 75
local ListHeight1 = 192
local ListHeight2 = 380

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.list_go = self:AddComponent(UIBaseContainer, list_path)
    self.add_btn = self:AddComponent(UIButton, add_path)
    self.add_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Add)
        self:OnAddClick()
    end)
    self.sub_btn = self:AddComponent(UIButton, sub_path)
    self.sub_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Dec)
        self:OnSubClick()
    end)
    self.count_text = self:AddComponent(UITextMeshProUGUIEx, count_path)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    self.bUuid = 0
    self.needWorkerFurnitureInfo = nil
    self.residentDataList = {}
    
    self.reqs = {}
    self.items = {}
end

local function DataDestroy(self)
    for _, req in pairs(self.reqs) do
        req:Destroy()
    end
    self.reqs = {}
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.VitaSetResidentWork, self.OnSetResidentWork)
    self:AddUIListener(EventId.VitaSetResidentWorkBatch, self.OnSetResidentWork)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.VitaSetResidentWork, self.OnSetResidentWork)
    self:RemoveUIListener(EventId.VitaSetResidentWorkBatch, self.OnSetResidentWork)
    base.OnRemoveListener(self)
end

local function SetData(self, bUuid)
    self.bUuid = bUuid
    self:Refresh()
end

local function Refresh(self)
    self.isWaiting = false
    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(self.bUuid)
    local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildData.itemId, 0)
    local maxWorkerCount = levelTemplate.need_worker
    local needWorkerCount = 0
    
    self.residentDataList = {}
    self.needWorkerFurnitureInfo = nil
    local furnitureInfoList = DataCenter.FurnitureManager:GetFurnitureListByBUuid(self.bUuid)
    for _, furnitureInfo in ipairs(furnitureInfoList) do
        local furnitureLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(furnitureInfo.fId, furnitureInfo.lv)
        needWorkerCount = needWorkerCount + furnitureLevelTemplate.need_worker
        
        local furnitureResidentDataList = DataCenter.VitaManager:GetResidentDataListByFurnitureUuid(furnitureInfo.uuid)
        if self.needWorkerFurnitureInfo == nil then
            if #furnitureResidentDataList < furnitureLevelTemplate.need_worker then
                self.needWorkerFurnitureInfo = furnitureInfo
            end
        end
     
        for _, residentData in ipairs(furnitureResidentDataList) do
            table.insert(self.residentDataList, residentData)
        end
    end
    
    self.count_text:SetText(#self.residentDataList .. "/" .. needWorkerCount)
    
    local restingCount = #DataCenter.VitaManager:GetRestingResidentDataList()
    local slotDataList = {}
    for i = 1, maxWorkerCount do
        local slotData = {}
        slotData.onAddClick = function()
            self:OnAddClick()
        end
        if i <= #self.residentDataList then
            slotData.residentData = self.residentDataList[i]
            slotData.type = UIFurnitureUpgradeWorkSlot.Type.Worker
            table.insert(slotDataList, slotData)
        elseif i <= needWorkerCount then
            slotData.canAdd = restingCount > 0
            restingCount = restingCount - 1
            slotData.type = UIFurnitureUpgradeWorkSlot.Type.Empty
            table.insert(slotDataList, slotData)
        else
            slotData.type = UIFurnitureUpgradeWorkSlot.Type.Lock
            local curMax = DataCenter.FurnitureManager:GetCurMaxWork(buildData.itemId, buildData.level)
            if curMax > needWorkerCount then
                slotData.showTips = Localization:GetString(GameDialogDefine.CLICK_LOCK_WORK_FURNITURE_TIPS)
            else
                local desTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildData.itemId)
                if desTemplate ~= nil then
                    for level = buildData.level + 1, desTemplate:GetBuildMaxLevel(), 1 do
                        if curMax < DataCenter.FurnitureManager:GetCurMaxWork(buildData.itemId, level) then
                            local name = Localization:GetString(GetTableData(DataCenter.BuildTemplateManager:GetTableName(), buildData.itemId + level,"name"))
                                    slotData.showTips = Localization:GetString(GameDialogDefine.CLICK_LOCK_WORK_BUILD_TIPS,
                                            name, level)
                            break
                        end
                    end
                end
            end
            table.insert(slotDataList, slotData)
            break -- 只显示一个锁定的
        end
    end
    local slotCount = #slotDataList
    for i = 1, math.max(#self.reqs, slotCount) do
        if i <= slotCount then
            if self.items[i] then
                self.items[i]:SetActive(true)
                self.items[i]:SetData(slotDataList[i])
            else
                if self.reqs[i] then
                    self.reqs[i]:Destroy()
                end
                self.reqs[i] = self:GameObjectInstantiateAsync(UIAssets.UIFurnitureUpgradeWorkSlot, function(req)
                    local go = req.gameObject
                    go.name = "WorkSlot_" .. i
                    go.transform:SetParent(self.list_go.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    self.items[i] = self.list_go:AddComponent(UIFurnitureUpgradeWorkSlot, go.name)
                    self.items[i]:SetData(slotDataList[i])
                end)
            end
        else
            self.reqs[i]:Destroy()
        end
    end
    local colCount = math.min(slotCount, 3)
    local listWidth = colCount * CellWidth + (colCount - 1) * CellSpace
    local listHeight = slotCount <= 3 and ListHeight1 or ListHeight2
    self.list_go.rectTransform.sizeDelta = Vector2.New(listWidth, listHeight)
    
    local canAdd = (self.needWorkerFurnitureInfo ~= nil)
    local canSub = (#self.residentDataList > 0)
    UIGray.SetGray(self.add_btn.transform, not canAdd, true)
    UIGray.SetGray(self.sub_btn.transform, not canSub, true)
end

local function OnAddClick(self)
    if self.isWaiting then
        return
    end
    
    if self.needWorkerFurnitureInfo == nil then
        UIUtil.ShowTipsId(GameDialogDefine.SET_WORKER_NO_POSITION_TIP)
        return
    end

    local residentDataList = DataCenter.VitaManager:GetRestingResidentDataList()
    if #residentDataList == 0 then
        -- 无空闲幸存者
        if #DataCenter.VitaManager:GetReadyResidentDataList() > 0 then
            -- 有待加入幸存者
            if DataCenter.CityResidentManager.readyCanCome then
                --TimerManager:GetInstance():DelayInvoke(function()
                --    local param = {}
                --    param.positionType = PositionType.Screen
                --    param.position = UIUtil.GetUIMainSavePos(UIMainSavePosType.VitaMessage)
                --    DataCenter.ArrowManager:ShowArrow(param)
                --end, 0.5)
                local _, toPos = DataCenter.CityResidentManager:GetReadyQueuePos(1)
                if toPos then
                    CS.SceneManager.World:AutoLookat(toPos, CS.SceneManager.World.InitZoom, LookAtFocusTime, function()
                        local hudItem = DataCenter.CityHudManager:GetHudItemByType(CityHudType.ReadyQueue)
                        if hudItem then
                            local param = {}
                            param.positionType = PositionType.Screen
                            param.position = hudItem.transform.position + Vector3.New(0, 80, 0)
                            DataCenter.ArrowManager:ShowArrow(param)
                        end
                    end)
                    UIUtil.ShowTipsId(441049)
                end
                self.view:Close(false)
            else
                UIUtil.ShowTipsId(441074)
            end
        else
            -- 无待加入幸存者
            UIUtil.ShowTipsId(GameDialogDefine.SET_WORKER_NO_WORKER_TIP)
        end
        return
    end
    DataCenter.VitaManager:SendSetResidentWork(residentDataList[1].uuid, self.needWorkerFurnitureInfo.uuid)
    self.isWaiting = true
end

local function OnSubClick(self)
    if self.isWaiting then
        return
    end
    
    for _, residentData in ipairs(self.residentDataList) do
        if residentData.state ~= VitaDefines.ResidentState.Normal then
            DataCenter.VitaManager:SendSetResidentWork(residentData.uuid, 0)
            self.isWaiting = true
            return
        end
    end
    --倒序下
    for i = #self.residentDataList, 1, -1 do
        local residentData = self.residentDataList[i]
        if residentData.state == VitaDefines.ResidentState.Normal then
            DataCenter.VitaManager:SendSetResidentWork(residentData.uuid, 0)
            self.isWaiting = true
            return
        end
    end
end

local function OnSetResidentWork(self)
    self:Refresh()
end

--获取箭头指示的坐标
function UIFurnitureUpgradeWork:GetAddBtnPosition()
    return self.add_btn:GetPosition()
end

UIFurnitureUpgradeWork.OnCreate = OnCreate
UIFurnitureUpgradeWork.OnDestroy = OnDestroy
UIFurnitureUpgradeWork.OnEnable = OnEnable
UIFurnitureUpgradeWork.OnDisable = OnDisable
UIFurnitureUpgradeWork.ComponentDefine = ComponentDefine
UIFurnitureUpgradeWork.ComponentDestroy = ComponentDestroy
UIFurnitureUpgradeWork.DataDefine = DataDefine
UIFurnitureUpgradeWork.DataDestroy = DataDestroy
UIFurnitureUpgradeWork.OnAddListener = OnAddListener
UIFurnitureUpgradeWork.OnRemoveListener = OnRemoveListener

UIFurnitureUpgradeWork.SetData = SetData
UIFurnitureUpgradeWork.Refresh = Refresh
UIFurnitureUpgradeWork.OnAddClick = OnAddClick
UIFurnitureUpgradeWork.OnSubClick = OnSubClick
UIFurnitureUpgradeWork.OnSetResidentWork = OnSetResidentWork

return UIFurnitureUpgradeWork