---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime:
---
local UIItemCell = require "UI.UIMasteryPointReset.Component.UIItemCell"
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"
local UIMasteryPointResetView = BaseClass("UIMasteryPointResetView",UIBaseView)
local base = UIBaseView
local txt_title_path ="UICommonPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonPopUpTitle/panel"
local layout_path = "Bg"
local packageCell_path = "Bg/AdvCell"
local packageNameTxt_path = "Bg/AdvCell/Common_bg1/NameText"
local packageImgB_path = "Bg/AdvCell/Common_bg1/packageIcon"
local resourceImgB_path = "Bg/AdvCell/Common_bg1/resourceIcon"
local packageDescTxt_path = "Bg/AdvCell/Common_bg1/DesTextBg/DesText"
local packageBuyBtn_path = "Bg/AdvCell/Common_bg1/BuyBtn"
local packageBuyBtnTxt_path = "Bg/AdvCell/Common_bg1/BuyBtn/BuyBtnLabel"
local packageCloseBtn_path = "Bg/AdvCell/CloseBtnBg/PackageCloseBtn"
local packageJumpBtn_path = "Bg/AdvCell/Common_bg1/jumpBtn"
local noItemTips_path = "NoItemTips"
local scroll_view_path = "Bg/ScrollView"
local content_path = "Bg/ScrollView/Content"
local point_path = "Bg/AdvCell/Common_bg1/BuyBtn/UIGiftPackagePoint"
local ResetItemId = {251109,251110}


--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

-- 销毁
local function OnDestroy(self)
    EventManager:GetInstance():Broadcast(EventId.HideMainUIExtraResource,UIWindowNames.UIResourceBag)
    self:ClearScroll()
    self.content:SetAnchoredPosition(Vector2.New(0,0))
    self.content:Dispose()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.layout = self:AddComponent(UIHorizontalOrVerticalLayoutGroup, layout_path)
    
    self.noItemTips = self:AddComponent(UIText,noItemTips_path)
    
    self.packageCell = self:AddComponent(UIBaseContainer, packageCell_path)
    self.packageNameTxt = self:AddComponent(UIText, packageNameTxt_path)
    self.packageImgB = self:AddComponent(UIImage, packageImgB_path)
    self.resourceImgB = self:AddComponent(UIImage,resourceImgB_path)
    self.packageDescTxt = self:AddComponent(UIText, packageDescTxt_path)
    self.packageBuyBtn = self:AddComponent(UIButton, packageBuyBtn_path)
    self.packageBuyBtn:SetOnClick(function()
        if self.packageInfo then
            self.ctrl:BuyGift(self.packageInfo)
        end
    end)
    self.packageBuyBtnTxt = self:AddComponent(UIText, packageBuyBtnTxt_path)
    self.packageCloseBtn = self:AddComponent(UIButton, packageCloseBtn_path)
    self.packageCloseBtn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.packageJumpBtn = self:AddComponent(UIButton, packageJumpBtn_path)
    self.packageJumpBtn:SetOnClick(function()
        self:OnClickJumpToPackBtn()
    end)
    
    self.close_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    
    self.return_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    self.scrollview = self:AddComponent(UIBaseContainer, scroll_view_path)
    self.content = self:AddComponent(GridInfinityScrollView, content_path)

    self.point_rect = self:AddComponent(UIGiftPackagePoint,point_path)
end

local function ComponentDestroy(self)
    self.txt_title = nil
    self.close_btn = nil
    self.return_btn = nil
    self.scroll_view = nil
    self.noItemTips = nil
    self.layout = nil
    self.point_rect = nil
end


local function DataDefine(self)
    self.template = {}
    self.items = {}
    self.cells = {}
    self.itemNum = 0
end

local function DataDestroy(self)
    self.template = nil
    self.items = nil
    self.cells = nil
    self.itemNum = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ReInit(self)
    self.txt_title:SetLocalText(100024)
    self.listGO = {}
    self.isCreateScroll = false
    self:ShowCells()
    self:TryShowPackage()
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateGiftPackData, self.OnBuyPackageSucc)
    
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateGiftPackData, self.OnBuyPackageSucc)
end

local function OnBuyPackageSucc(self)
    self:ShowCells()
    self:TryShowPackage()
end

local function TryShowPackage(self)
    self.packageInfo = nil
    for i = 1 ,2 do
        self.packageInfo = self.ctrl:GetQuickPackageInfo(ResetItemId[i])
        if self.packageInfo then
            break
        end
    end
    if self.packageInfo then
        self.packageCell:SetActive(true)
        self.packageNameTxt:SetLocalText(self.packageInfo:getName())
        local packageIcon = self.packageInfo:getPopupImageB()
        if packageIcon == "" then
            self.packageImgB:SetActive(true)
            self.resourceImgB:SetActive(false)
        else
            local iconPath = string.format("Assets/Main/Sprites/Resource/UIResource_Banner_band_%s.png", packageIcon)
            self.resourceImgB:LoadSprite(iconPath)
            self.packageImgB:SetActive(false)
            self.resourceImgB:SetActive(true)
        end
        self.packageDescTxt:SetText(self.packageInfo:getDescText())
        local price = DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID())
        self.packageBuyBtnTxt:SetText(price)

        --积分
        self.point_rect:RefreshPoint(self.packageInfo)
    else
        self.packageCell:SetActive(false)
    end
end

local function ShowCells(self)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate( self.layout.rectTransform)
    self:GetAllItems()
    local count = #self.items
    if count > 0 then
        self.content:SetActive(true)
        if not self.isCreateScroll then
            local bindFunc1 = BindCallback(self, self.OnInitScroll)
            local bindFunc2 = BindCallback(self, self.OnUpdateScroll)
            local bindFunc3 = BindCallback(self, self.OnDestroyScrollItem)
            self.content:Init(bindFunc1,bindFunc2, bindFunc3)
        end
        self.content:SetAnchoredPosition(Vector2.New(0,0))
        self.isCreateScroll = true
        self.content:SetItemCount(count)
        self.content:ForceUpdate()
    else
        self.content:SetActive(false)
    end
    self.noItemTips:SetActive(count < 1)
    self.noItemTips:SetLocalText(110181)
end

local function ClearScroll(self)
    self.scrollview:RemoveComponents(UIItemCell)
    self.content:DestroyChildNode()
end

local function OnInitScroll(self,go,index)
    local item = self.scrollview:AddComponent(UIItemCell, go)
    self.listGO[go] = item
end

local function OnUpdateScroll(self,go,index)
    local cellItem = self.listGO[go]
    if not cellItem then
        return
    end
    local param = {}
    if self.items[index + 1].count then
        param.itemId = self.items[index + 1].itemId
        param.btnType =  UIResourceBagBtnType.Use
        param.count =  self.items[index + 1].count
        param.template = self:GetItemTemplate(self.items[index + 1].itemId)
    else
        param.btnType = UIResourceBagBtnType.Buy
        param.template = self.items[index + 1]
    end
    param.callBack = function(i,template,pos,isBuy) self:CellsCallBack(i,template,pos,isBuy) end
    param.index = index + 1
    if not param.btnType then
       return
    end
    cellItem:ReInit(param)
    self.cells[index + 1] = cellItem
end

local function OnDestroyScrollItem(self,go, index)

end

local function GetAllItems(self)
    local buyItems,itemss = DataCenter.ItemData:GetMasteryPointItem()
    self.items = table.mergeArray(buyItems,itemss)
    table.sort(self.items,function(a,b)
        local aId = a.itemId and a.itemId or a.id
        local bId = b.itemId and b.itemId or b.id
        if tonumber(aId) < tonumber(bId) then
            return true
        end
        return false
    end)
    self.itemNum = #self.items
end

local function GetItemTemplate(self,id)
    local temp = self.template[id]
    if temp == nil then
        self.template[id] = DataCenter.ItemTemplateManager:GetItemTemplate(id)
    end
    return self.template[id]
end

local function CellsCallBack(self,index,template,pos)
    self.moreIndex = index
    local item
    for i = 1, #self.items do
        if self.items[i].itemId == template.id then
            item = self.items[i]
            break
        end
    end
    if not item then
        return
    end
    SFSNetwork.SendMessage(MsgDefines.ItemUse, { uuid = item.uuid,num = 1,useResetItemType = 0})
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIMasteryPointReset)
end

local function OnClickJumpToPackBtn(self)
    if self.packageInfo then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIScrollPack, {anim = true}, self.packageInfo)
    end
end


UIMasteryPointResetView.OnCreate= OnCreate
UIMasteryPointResetView.OnDestroy = OnDestroy
UIMasteryPointResetView.OnEnable = OnEnable
UIMasteryPointResetView.OnDisable = OnDisable
UIMasteryPointResetView.ClearScroll = ClearScroll
UIMasteryPointResetView.OnAddListener = OnAddListener
UIMasteryPointResetView.OnRemoveListener = OnRemoveListener
UIMasteryPointResetView.ComponentDefine = ComponentDefine
UIMasteryPointResetView.ComponentDestroy = ComponentDestroy
UIMasteryPointResetView.DataDefine = DataDefine
UIMasteryPointResetView.DataDestroy = DataDestroy
UIMasteryPointResetView.ReInit = ReInit
UIMasteryPointResetView.ShowCells = ShowCells
UIMasteryPointResetView.GetAllItems = GetAllItems
UIMasteryPointResetView.GetItemTemplate = GetItemTemplate
UIMasteryPointResetView.CellsCallBack = CellsCallBack
UIMasteryPointResetView.TryShowPackage = TryShowPackage
UIMasteryPointResetView.OnBuyPackageSucc = OnBuyPackageSucc
UIMasteryPointResetView.OnClickJumpToPackBtn = OnClickJumpToPackBtn
UIMasteryPointResetView.OnInitScroll = OnInitScroll
UIMasteryPointResetView.OnUpdateScroll = OnUpdateScroll
UIMasteryPointResetView.OnDestroyScrollItem = OnDestroyScrollItem

return UIMasteryPointResetView