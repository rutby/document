---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/9/27 21:05
---

---
--- 通用选兵滑窗
---

local UISelectArmy = BaseClass("UISelectArmy", UIBaseView)
local base = UIBaseView
local UISelectArmyItem = require "UI.UISelectArmy.Component.UISelectArmyItem"
local Localization = CS.GameEntry.Localization

local close_path = "Close"
local panel_path = "SafeArea/Panel"
local num_path = "SafeArea/Panel/Num"
local clear_btn_path = "SafeArea/Panel/Clear"
local clear_text_path = "SafeArea/Panel/Clear/ClearText"
local scroll_view_path = "SafeArea/Panel/ScrollView"
local energy_bg_path = "SafeArea/Panel/EnergyBg"
local energy_path = "SafeArea/Panel/EnergyBg/Energy"
local info_path = "SafeArea/Panel/EnergyBg/Info"
local go_btn_path = "SafeArea/Panel/Confirm"
local go_text_path = "SafeArea/Panel/Confirm/ConfirmText"
local desc_path = "SafeArea/Panel/Desc"

local PANEL_X = 190
local PANEL_Y = 21
local PANEL_DURATION = 0.2

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self:Hide()
    end)
    self.panel_go = self:AddComponent(UIBaseContainer, panel_path)
    self.num_text = self:AddComponent(UIText, num_path)
    self.clear_btn = self:AddComponent(UIButton, clear_btn_path)
    self.clear_btn:SetOnClick(function()
        self:OnClearClick()
    end)
    self.clear_text = self:AddComponent(UIText, clear_text_path)
    self.clear_text:SetLocalText(150141)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateItem(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteItem(itemObj, index)
    end)
    self.energy_bg_go = self:AddComponent(UIBaseContainer, energy_bg_path)
    self.energy_text = self:AddComponent(UIText, energy_path)
    self.info_btn = self:AddComponent(UIButton, info_path)
    self.info_btn:SetOnClick(function()
        self:OnInfoClick()
    end)
    self.go_btn = self:AddComponent(UIButton, go_btn_path)
    self.go_btn:SetOnClick(function()
        self:OnConfirmClick()
    end)
    self.go_text = self:AddComponent(UIText, go_text_path)
    self.desc_text = self:AddComponent(UIText, desc_path)
end

local function ComponentDestroy(self)
    self.close_btn = nil
    self.panel_go = nil
    self.num_text = nil
    self.clear_btn = nil
    self.clear_text = nil
    self.scroll_view = nil
    self.energy_bg_go = nil
    self.energy_text = nil
    self.info_btn = nil
    self.go_btn = nil
    self.go_text = nil
    self.desc_text = nil
end

local function DataDefine(self)
    self.param = nil
    self.curArmyDict = {} -- Dict<id, count>
    self.dataList = {}
    self.itemDict = {}
    self.tween = nil
end

local function DataDestroy(self)
    self.param = nil
    self.curArmyDict = nil
    self.dataList = nil
    self.itemDict = nil
    if self.tween then
        self.tween:Kill()
        self.tween = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    local param = self:GetUserData()
    self:ReInit(param)
    self.panel_go.rectTransform:Set_anchoredPosition(PANEL_X, PANEL_Y)
    self:Show()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function OnCreateItem(self, itemObj, index)
    itemObj.name = tostring(index)
    local data = self.dataList[index]
    local item = self.scroll_view:AddComponent(UISelectArmyItem, itemObj)
    item:SetData(data)
    item:SetCurCount(self.curArmyDict[data.id] or 0)
    item:SetOnValueChanged(function(id, count)
        self:OnItemValueChanged(id, count)
    end)
    self.itemDict[index] = item
end

local function OnDeleteItem(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UISelectArmyItem)
    self.itemDict[index] = nil
end

local function ShowScroll(self)
    self.scroll_view:SetTotalCount(#self.dataList)
    if #self.dataList > 0 then
        self.scroll_view:RefillCells()
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearItems()
    self.scroll_view:RemoveComponents(UISelectArmyItem)
end

-- param: {}
-- goText: string 确认按钮文本
-- confirmTip: string 确认时提示文本
-- confirmSecondTip: string 确认时提示文本，可勾选不在提示
-- descText: string 描述文本
-- energyCost: int 消耗体力
-- armyDict: Dict<armyId, count> 可用部队
-- includeTrap: bool 可以选择陷阱
-- initFillArmyCount: int 第一次自动选择的最大部队数量
-- maxArmyCount: int 最大部队数量
-- onHide: function 关闭时回调
-- onConfirm: function 确认时回调
-- onCheck: string 提示文本勾选不在提示时回调
local function ReInit(self, param)
    self.param = param
    
    self.go_text:SetText(self.param.goText or Localization:GetString("110003"))
    self.desc_text:SetText(self.param.descText or "")
    if self.param.energyCost then
        self.energy_bg_go:SetActive(true)
        self.energy_text:SetText(string.format("%s <color=red>%s</color>", math.floor(LuaEntry.Player:GetCurPveStamina()), self.param.energyCost))
    else
        self.energy_bg_go:SetActive(false)
    end
    
    self.dataList = self:GetDataListByArmy(self.param.armyDict or {})
    self:ShowScroll()
    self:AutoFill(true)
end

local function Show(self)
    if self.tween then
        self.tween:Kill()
    end
    self.tween = self.panel_go.rectTransform:DOAnchorPosX(-PANEL_X, PANEL_DURATION)
end

local function Hide(self)
    if self.tween then
        self.tween:Kill()
    end
    self.tween = self.panel_go.rectTransform:DOAnchorPosX(PANEL_X, PANEL_DURATION):OnComplete(function()
        self.ctrl:CloseSelf()
    end)
    if self.param.onHide then
        self.param.onHide()
    end
end

local function RefreshNumAndItem(self)
    if self.param.maxArmyCount > 0 then
        self.num_text:SetText(string.GetFormattedSeperatorNum(self:GetCurArmyCount()) .. "/" .. string.GetFormattedSeperatorNum(self.param.maxArmyCount))
    else
        self.num_text:SetText(string.GetFormattedSeperatorNum(self:GetCurArmyCount()))
    end

    for i, item in pairs(self.itemDict) do
        local data = self.dataList[i]
        if data then
            item:SetCurCount(self.curArmyDict[data.id] or 0)
        end
    end
end

local function GetDataListByArmy(self, armyDict)
    local list = {}
    for id, count in pairs(armyDict) do
        local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(id)
        if template and (template.arm ~= ArmType.Trap or self.param.includeTrap) then
            if count > 0 then
                local data = {}
                data.id = id
                data.count = count
                table.insert(list, data)
            end
        end
    end
    table.sort(list, function(dataA, dataB)
        local templateA = DataCenter.ArmyTemplateManager:GetArmyTemplate(dataA.id)
        local templateB = DataCenter.ArmyTemplateManager:GetArmyTemplate(dataB.id)
        if templateA.level ~= templateB.level then
            return templateA.level > templateB.level
        else
            return templateA.arm > templateB.arm
        end
    end)
    return list
end

local function GetCurArmyCount(self, exceptId)
    local total = 0
    for id, count in pairs(self.curArmyDict) do
        if id ~= exceptId then
            total = total + count
        end
    end
    return total
end

local function SetArmy(self, id, count)
    if self.param.maxArmyCount > 0 then
        local restCount = self.param.maxArmyCount - self:GetCurArmyCount(id)
        count = math.min(count, restCount)
    end
    count = math.max(count, 0)
    self.curArmyDict[id] = count
    self:RefreshNumAndItem()
end

local function AutoFill(self, isInit)
    local limitCount = IntMaxValue
    if isInit and self.param.initFillArmyCount then
        limitCount = self.param.initFillArmyCount
    end
    for _, data in ipairs(self.dataList) do
        local count = math.min(limitCount, data.count)
        self:SetArmy(data.id, count)
        limitCount = limitCount - count
    end
end

local function OnItemValueChanged(self, id, count)
    self:SetArmy(id, count)
end

local function OnClearClick(self)
    self.curArmyDict = {}
    self:RefreshNumAndItem()
end

local function OnInfoClick(self)
    
end

local function OnConfirmClick(self)
    if self:GetCurArmyCount() <= 0 then
        UIUtil.ShowSingleTip(Localization:GetString("121063"))
        return
    end
    if self.param.onConfirm then
        if self.param.confirmTip then
            UIUtil.ShowMessage(self.param.confirmTip, 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                self.param.onConfirm(self.curArmyDict)
                self:Hide()
            end)
        elseif self.param.confirmSecondTip then
            UIUtil.ShowSecondMessage(Localization:GetString("100378"), self.param.confirmSecondTip, 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                self.param.onConfirm(self.curArmyDict)
                self:Hide()
            end, function(b)
                self.param.onCheck(not b)
            end)
        else
            self.param.onConfirm(self.curArmyDict)
            self:Hide()
        end
    end
end

UISelectArmy.OnCreate = OnCreate
UISelectArmy.OnDestroy = OnDestroy
UISelectArmy.ComponentDefine = ComponentDefine
UISelectArmy.ComponentDestroy = ComponentDestroy
UISelectArmy.DataDefine = DataDefine
UISelectArmy.DataDestroy = DataDestroy
UISelectArmy.OnEnable = OnEnable
UISelectArmy.OnDisable = OnDisable
UISelectArmy.OnAddListener = OnAddListener
UISelectArmy.OnRemoveListener = OnRemoveListener

UISelectArmy.OnCreateItem = OnCreateItem
UISelectArmy.OnDeleteItem = OnDeleteItem
UISelectArmy.ShowScroll = ShowScroll
UISelectArmy.ClearScroll = ClearScroll

UISelectArmy.ReInit = ReInit
UISelectArmy.Show = Show
UISelectArmy.Hide = Hide
UISelectArmy.RefreshNumAndItem = RefreshNumAndItem
UISelectArmy.GetDataListByArmy = GetDataListByArmy
UISelectArmy.GetCurArmyCount = GetCurArmyCount
UISelectArmy.SetArmy = SetArmy
UISelectArmy.AutoFill = AutoFill

UISelectArmy.OnItemValueChanged = OnItemValueChanged
UISelectArmy.OnClearClick = OnClearClick
UISelectArmy.OnInfoClick = OnInfoClick
UISelectArmy.OnConfirmClick = OnConfirmClick

return UISelectArmy