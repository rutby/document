---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 22/2/2024 上午10:16
---
local LuckRollRewardRank = BaseClass("LuckRollRewardRank", UIBaseContainer)
local base = UIBaseContainer
local LuckyRollRewardItem = require "UI.UILuckyRollRank.Component.LuckyRollRewardItem"
local MailRewardItem = require "UI.UIMailNew.UIMailMainPanel.Component.MailRewardItem"
function LuckRollRewardRank:OnCreate()
    base.OnCreate(self)
    self.rank_txt = self:AddComponent(UITextMeshProUGUIEx,"selfRank/Txt_MyRank")
    self._noRank_txt = self:AddComponent(UITextMeshProUGUIEx,"selfRank/Txt_NoRank")
    self.contentN = self:AddComponent(UIBaseContainer,"selfRank/Rewards")
    self.scroll_view = self:AddComponent(UIScrollView, "ScrollView")
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnRankItemMoveIn(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnRankItemMoveOut(itemObj, index)
    end)
    self.isInit = false
end

function LuckRollRewardRank:OnDestroy()
    self:ClearScroll()
    self:SetAllRewardsDestroy()
    base.OnDestroy(self)
end

function LuckRollRewardRank:OnEnable()
    base.OnEnable(self)
end

function LuckRollRewardRank:OnDisable()
    base.OnDisable(self)
end

function LuckRollRewardRank:OnRefresh(actData)
    if self.isInit == true then
        return
    end
    self.actData = actData
    self:ClearScroll()
    self:SetAllRewardsDestroy()
    if self.actData then
        self:ClearScroll()
        self.rankList = self.actData.rankReward
        if self.rankList and #self.rankList >0 then
            local selfRank = self.actData.selfRank
            if selfRank ~= -1 then
                self.rank_txt:SetText(selfRank)
                local list = {}
                for i = 1 ,#self.rankList do
                    if selfRank >= self.rankList[i].startN and selfRank <= self.rankList[i].endN then
                        list = self.rankList[i].reward
                        break
                    end
                end
                if next(list) then
                    self.rewardModelCount =0
                    for i = 1, table.length(list) do
                        --复制基础prefab，每次循环创建一次
                        self.rewardModelCount= self.rewardModelCount+1
                        if self.rewardModelCount<=5 then
                            self.rewardModels[self.rewardModelCount] = self:GameObjectInstantiateAsync(UIAssets.UICommonItemSize, function(request)
                                if request.isError then
                                    return

                                end
                                local go = request.gameObject;
                                go.gameObject:SetActive(true)
                                go.transform:SetParent(self.contentN.transform)
                                go.transform.localScale = Vector3.one
                                local nameStr = tostring(NameCount)
                                go.name = nameStr
                                NameCount = NameCount + 1
                                local cell = self.contentN:AddComponent(MailRewardItem,nameStr)
                                cell:ShowCount(hideCount)
                                local param = {}
                                param.itemId = list[i].itemId
                                param.rewardType = list[i].rewardType
                                param.count = list[i].count
                                cell:RefreshData(param)
                                cell:SetNameText("")
                                CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.rectTransform)
                                table.insert(self.rewardItemsList,cell)
                            end)
                        end

                    end
                end
            else
                self.rank_txt:SetText("999+")
                self._noRank_txt:SetActive(true)
                self._noRank_txt:SetLocalText(470098)
            end
            self.scroll_view:SetTotalCount(#self.rankList)
            self.scroll_view:RefillCells()
               
        end
        self.isInit = true
    end
end

function LuckRollRewardRank:OnRankItemMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.scroll_view:AddComponent(LuckyRollRewardItem, itemObj)
    cellItem:ShowRewards(self.rankList[index])
end

function LuckRollRewardRank:OnRankItemMoveOut( itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, LuckyRollRewardItem)
end

function LuckRollRewardRank:ClearScroll()
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(LuckyRollRewardItem)
end

function LuckRollRewardRank:SetAllRewardsDestroy()
    self.contentN:RemoveComponents(MailRewardItem)
    if self.rewardModels~=nil then
        for k,v in pairs(self.rewardModels) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.rewardModels ={}
    self.rewardItemsList = {}
end

return LuckRollRewardRank