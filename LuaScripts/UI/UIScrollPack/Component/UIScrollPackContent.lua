---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/2/16 17:51
---

local UIScrollPackContent = BaseClass("UIScrollPackContent", UIBaseContainer)
local base = UIBaseContainer
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"

local bg_path = "Bg"
local percent_bg_path = "Bg/LineImage/DiscountBg"
local percent_path = "Bg/LineImage/DiscountBg/Discount"
local title_path = "Bg/TitleText"
local desc_path = "Bg/DescText"
-- local diamond_bg_path = "Bg/LineImage/DiamondBg"
local diamond_icon_path = "Bg/LineImage/RobotImage"
local diamond_text_path = "Bg/LineImage/DiamondNum"
local diamond_discount_bg_path = "Bg/LineImage/DiamondImage"
local diamond_discount_text_path = "Bg/LineImage/DiamondText"
local time_bg_path = "Bg/ActTime"
local time_path = "Bg/ActTime/remainTime"
local scroll_view_path = "Bg/LineImage/ScrollView"
local limit_path = "Bg/Limit"
local buy_btn_path = "Bg/BuyButton"
local buy_text_path = "Bg/BuyButton/PriceText"

local point_path = "Bg/BuyButton/UIGiftPackagePoint"

local Config =
{
    ["Default"] =
    {
        TitleTopColor = Color.New(1, 1, 1),
        TitleBottomColor = Color.New(1, 1, 1),
    },
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.bg_image = self:AddComponent(UIImage, bg_path)
    self.percent_bg_go = self:AddComponent(UIBaseContainer, percent_bg_path)
    self.percent_text = self:AddComponent(UITextMeshProUGUIEx, percent_path)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    -- self.diamond_bg_go = self:AddComponent(UIBaseContainer, diamond_bg_path)
    self.diamond_icon_go = self:AddComponent(UIBaseContainer, diamond_icon_path)
    self.diamond_text = self:AddComponent(UITextMeshProUGUIEx, diamond_text_path)
    self.diamond_discount_bg_go = self:AddComponent(UIBaseContainer, diamond_discount_bg_path)
    self.diamond_discount_text = self:AddComponent(UITextMeshProUGUIEx, diamond_discount_text_path)
    self.time_bg_go = self:AddComponent(UIBaseContainer, time_bg_path)
    self.time_text = self:AddComponent(UITextMeshProUGUIEx, time_path)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
    self.limit_text = self:AddComponent(UITextMeshProUGUIEx, limit_path)
    self.buy_btn = self:AddComponent(UIButton, buy_btn_path)
    self.buy_btn:SetOnClick(function()
        self:OnBuyClick()
    end)
    self.buy_text = self:AddComponent(UITextMeshProUGUIEx, buy_text_path)
    self.point_rect = self:AddComponent(UIGiftPackagePoint, point_path)
end

local function ComponentDestroy(self)
    self.bg_image = nil
    self.percent_bg_go = nil
    self.percent_text = nil
    self.title_text = nil
    self.desc_text = nil
    -- self.diamond_bg_go = nil
    self.diamond_icon_go = nil
    self.diamond_text = nil
    self.diamond_discount_bg_go = nil
    self.diamond_discount_text = nil
    self.time_bg_go = nil
    self.time_text = nil
    self.scroll_view = nil
    self.limit_text = nil
    self.buy_btn = nil
    self.buy_text = nil
    self.point_rect = nil
end

local function DataDefine(self)
    self.pack = nil
    self.rewardList = nil
    self.timer = nil
    self.onBuy = nil
end

local function DataDestroy(self)
    self.pack = nil
    self.rewardList = nil
    if self.timer ~= nil then
        self.timer:Stop()
    end
    self.timer = nil
    self.onBuy = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function ShowCells(self)
    local count = table.count(self.rewardList)
    if count > 0 then
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UICommonItem)
end

local function OnCreateCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local item = self.scroll_view:AddComponent(UICommonItem, itemObj)
    self.rewardList[index].showSpecialHeroRecruitItemTip = self.showSpecialHeroRecruitItemTip
    item:ReInit(self.rewardList[index])--, self.showSpecialHeroRecruitItemTip
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UICommonItem)
end

local function SetData(self, packId, onBuy, showSpecialHeroRecruitItemTip)
    local pack = GiftPackManager.get(packId)
    self.pack = pack
    self.onBuy = onBuy
    self.rewardList = DataCenter.RewardManager:ParsePackReward(pack)
    self.showSpecialHeroRecruitItemTip = showSpecialHeroRecruitItemTip == true
    
    local imgName = pack:getPopupImageH()
    local percent = pack:getPercent()
    if percent ~= nil then
        self.percent_bg_go:SetActive(true)
        self.percent_text:SetText(percent .. "%")
    else
        self.percent_bg_go:SetActive(false)
    end

    local diamond = tonumber(pack:getDiamond())
    if diamond > 0 then
        -- self.diamond_bg_go:SetActive(true)
        self.diamond_icon_go:SetActive(true)
        self.diamond_text:SetActive(true)
        self.diamond_text:SetText(string.GetFormattedSeperatorNum(diamond))


        local discountNum = 0
        local discountTips = pack:GetDiscountTips()
        if discountTips and discountTips[5] then
            discountNum = tonumber(discountTips[5]) or 0
        end

        if discountNum > 0 then
            self.diamond_icon_go:SetActive(false)
            self.diamond_discount_text:SetText(string.format("+%s%%", discountNum))
        else
            self.diamond_icon_go:SetActive(true)
        end
    else
        -- self.diamond_bg_go:SetActive(false)
        self.diamond_text:SetActive(true)
        self.diamond_icon_go:SetActive(true)
    end

    self.title_text:SetText(pack:getNameText())
    self.desc_text:SetText(pack:getDescText())
    self.buy_text:SetText(DataCenter.PayManager:GetDollarText(pack:getPrice(), pack:getProductID()))

    if self.timer ~= nil then
        self.timer:Stop()
    end
    if pack:getTimeType() ~= PackTimeType.AlwaysHideTime then
        self.time_bg_go:SetActive(true)
        self.timer = TimerManager:GetInstance():GetTimer(0.1, self.TimerAction, self, false, false, false)
        self.timer:Start()
    else
        self.time_bg_go:SetActive(false)
    end

    self:ShowCells()

    --self.bg_image:LoadSprite(string.format(PackageImgPath.ScrollPack, imgName))
    
    local boughtNum = pack:getHasGetCount()
    local maxNum = pack:getBuyTimes()
    local remainNum = math.max(maxNum - boughtNum, 0)
    self.limit_text:SetLocalText(320319, remainNum)
    
    --积分
    self.point_rect:RefreshPoint(pack)
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local leftTime = UITimeManager:GetInstance():GetResSecondsToOneWeek()
    local restTime = leftTime--self.pack:getEndTime() - curTime
    if restTime < 0 then
        return
    end
    
    
    self.time_text:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(restTime))
end

local function OnBuyClick(self)
    if self.onBuy then
        self.onBuy()
    end
    DataCenter.PayManager:BuyGift(self.pack)
end

UIScrollPackContent.OnCreate = OnCreate
UIScrollPackContent.OnDestroy = OnDestroy
UIScrollPackContent.OnEnable = OnEnable
UIScrollPackContent.OnDisable = OnDisable
UIScrollPackContent.ComponentDefine = ComponentDefine
UIScrollPackContent.ComponentDestroy = ComponentDestroy
UIScrollPackContent.DataDefine = DataDefine
UIScrollPackContent.DataDestroy = DataDestroy
UIScrollPackContent.OnAddListener = OnAddListener
UIScrollPackContent.OnRemoveListener = OnRemoveListener

UIScrollPackContent.ShowCells = ShowCells
UIScrollPackContent.ClearScroll = ClearScroll
UIScrollPackContent.OnCreateCell = OnCreateCell
UIScrollPackContent.OnDeleteCell = OnDeleteCell

UIScrollPackContent.SetData = SetData
UIScrollPackContent.TimerAction = TimerAction
UIScrollPackContent.OnBuyClick = OnBuyClick

return UIScrollPackContent