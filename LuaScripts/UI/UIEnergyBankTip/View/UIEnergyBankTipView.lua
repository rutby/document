---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/9/30 17:12
---

local UIEnergyBankTip = BaseClass("UIEnergyBankTip", UIBaseView)
local base = UIBaseView
local ResourceManager = CS.GameEntry.Resource

local tip_path = "Tip"
local pig_path = "Tip/Pig"
local slider_path = "Tip/Slider"
local slider_glow_path = "Tip/SliderGlow"
local fill_path = "Tip/Slider/FillArea/Fill"
local progress_path = "Tip/Progress"
local drops_path = "Tip/Drops"
local add_path = "Tip/Add"
local max_path = "Tip/Max"

local PROGRESS_YELLOW = "Common_pro_yellow"
local PROGRESS_GREEN = "Common_pro_green"

local MOVE_DURATION = 0.4
local DELAY_BEFORE = 0.4
local PIG_DURATION = 0.2
local DURATION = 1.2
local DELAY_AFTER = 1.6

local MOVE_X = 500
local PIG_SCALE = 1.25
local DROP_X_RANGE = 50
local DROP_FROM = 200
local DROP_TO = 50
local DROP_DURATION = 0.5
local DROP_INTERVAL = 0.125
local DROP_SCALE = 1.5

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    local param = self:GetUserData()
    self:ReInit()
    self:Refresh(param, 2)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.tip_btn = self:AddComponent(UIButton, tip_path)
    self.tip_btn:SetOnClick(function()
        self:OnClick()
    end)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.slider_glow_go = self:AddComponent(UIBaseContainer, slider_glow_path)
    self.pig_image = self:AddComponent(UIImage, pig_path)
    self.progress_text = self:AddComponent(UITweenNumberText, progress_path)
    self.progress_text:SetSeparator(true)
    self.fill_image = self:AddComponent(UIImage, fill_path)
    self.drops_go = self:AddComponent(UIBaseContainer, drops_path)
    self.add_text = self:AddComponent(UIText, add_path)
    self.max_text = self:AddComponent(UIText, max_path)
    self.defined = true
end

local function ComponentDestroy(self)
    self.defined = nil
    self.tip_btn = nil
    self.slider = nil
    self.slider_glow_go = nil
    self.pig_image = nil
    self.progress_text = nil
    self.fill_image = nil
    self.drops_go = nil
    self.add_text = nil
    self.max_text = nil
end

local function DataDefine(self)
    self.seq = nil
    self.dropSeq = nil
end

local function DataDestroy(self)
    if self.seq ~= nil then
        self.seq:Kill()
    end
    self.seq = nil
    if self.dropSeq ~= nil then
        self.dropSeq:Kill()
    end
    self.seq = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    local posY = self.tip_btn.rectTransform.anchoredPosition.y;
    self.tip_btn.rectTransform.anchoredPosition = Vector2.New(MOVE_X, posY)
end

local function Refresh(self, param, delay)
    if not self.defined then
        return
    end

    local pack = GiftPackageData.getEnergyBankPack()
    local max = pack._serverData.maxMoney
    local before = math.min(param.money - param.add, max)
    local after = math.min(param.money, max)
    local posY = self.tip_btn.rectTransform.anchoredPosition.y;

    self:SetPro(before, max)
    self.slider:SetValue(before / max)
    self.progress_text:SetNum(before)
    self.pig_image.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
    self.add_text:SetActive(false)
    self.max_text:SetActive(false)
    self.slider_glow_go:SetActive(false)
    
    if self.seq ~= nil then
        self.seq:Kill()
    end
    
    if before < after then
        self.seq = DOTween.Sequence()
        :AppendInterval(delay)
        :Append(self.tip_btn.rectTransform:DOAnchorPos(Vector2.New(0, posY), MOVE_DURATION))
        :AppendInterval(DELAY_BEFORE)
        :Append(self.pig_image.transform:DOScale(Vector3.one * PIG_SCALE, PIG_DURATION))
        :AppendCallback(function()
            self.progress_text:TweenToNum(after, DURATION)
            self:StartDropCoin()
        end)
        :Append(self.slider.unity_uislider:DOValue(after / max, DURATION))
        :AppendCallback(function()
            self.add_text:SetActive(true)
            self.add_text:SetText("+" .. string.GetFormattedSeperatorNum(param.add))
            self:SetPro(after, max)
            self:StopDropCoin()
        end)
        :Append(self.pig_image.transform:DOScale(Vector3.one, PIG_DURATION))
        :AppendInterval(DELAY_AFTER)
        :Append(self.tip_btn.rectTransform:DOAnchorPos(Vector2.New(MOVE_X, posY), MOVE_DURATION))
        :AppendCallback(function()
            self.ctrl:CloseSelf()
        end)
    else
        self.seq = DOTween.Sequence()
        :AppendInterval(delay)
        :Append(self.tip_btn.rectTransform:DOAnchorPos(Vector2.New(0, posY), MOVE_DURATION))
        :AppendCallback(function()
            self.max_text:SetActive(true)
            self.slider_glow_go:SetActive(true)
        end)
        :AppendInterval(DELAY_BEFORE + DURATION + DELAY_AFTER)
        :Append(self.tip_btn.rectTransform:DOAnchorPos(Vector2.New(MOVE_X, posY), MOVE_DURATION))
        :AppendCallback(function()
            self.ctrl:CloseSelf()
        end)
    end
end

local function SetPro(self, cur, max)
    if cur < max then
        self.fill_image:LoadSprite(string.format(LoadPath.CommonPath, PROGRESS_YELLOW))
    else
        self.fill_image:LoadSprite(string.format(LoadPath.CommonPath, PROGRESS_GREEN))
        self.max_text:SetActive(true)
        self.slider_glow_go:SetActive(true)
    end
end

local function StartDropCoin(self)
    self:StopDropCoin()
    self.dropSeq = DOTween.Sequence()
    :AppendInterval(DROP_INTERVAL)
    :AppendCallback(function()
        self:DropCoin()
    end)
    :SetLoops(-1)
end

local function StopDropCoin(self)
    if self.dropSeq ~= nil then
        self.dropSeq:Kill()
    end
end

local function DropCoin(self)
    local request = ResourceManager:InstantiateAsync(UIAssets.UIEnergyBankDropCoin)
    request:completed('+', function()
        if request.isError then
            return
        end

        local go = request.gameObject
        go:SetActive(true)
        
        local tf = go.transform
        tf:SetParent(self.drops_go.transform)
        tf.localScale = Vector3.one * DROP_SCALE
        
        local xOffset = math.random(-DROP_X_RANGE, DROP_X_RANGE)
        local startPos = self.pig_image.rectTransform.anchoredPosition + Vector2.New(xOffset, DROP_FROM)
        local endPos = self.pig_image.rectTransform.anchoredPosition + Vector2.New(0, DROP_TO)
        tf.anchoredPosition = startPos
        
        local img = go:GetComponent(typeof(CS.UnityEngine.UI.Image))
        img:Set_color_a(1)
        
        DOTween.Sequence()
        :Append(tf:DOAnchorPos(endPos, DROP_DURATION))
        :Join(tf:DOScale(Vector3.one, DROP_DURATION))
        :Join(img:DOFade(0, DROP_DURATION):SetEase(CS.DG.Tweening.Ease.InQuint))
        :AppendCallback(function()
            if request then
                request:Destroy()
            end
        end)
    end)
end

local function OnClick(self)
    if self.seq ~= nil then
        self.seq:Kill()
    end
    self.ctrl:CloseSelf()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGiftPackage, { anim = true }, { welfareTagType = WelfareTagType.EnergyBank })
end

UIEnergyBankTip.OnCreate = OnCreate
UIEnergyBankTip.OnDestroy = OnDestroy
UIEnergyBankTip.OnEnable = OnEnable
UIEnergyBankTip.OnDisable = OnDisable
UIEnergyBankTip.ComponentDefine = ComponentDefine
UIEnergyBankTip.ComponentDestroy = ComponentDestroy
UIEnergyBankTip.DataDefine = DataDefine
UIEnergyBankTip.DataDestroy = DataDestroy
UIEnergyBankTip.OnAddListener = OnAddListener
UIEnergyBankTip.OnRemoveListener = OnRemoveListener

UIEnergyBankTip.ReInit = ReInit
UIEnergyBankTip.Refresh = Refresh
UIEnergyBankTip.SetPro = SetPro
UIEnergyBankTip.CheckReady = CheckReady
UIEnergyBankTip.IsReady = IsReady
UIEnergyBankTip.StartDropCoin = StartDropCoin
UIEnergyBankTip.StopDropCoin = StopDropCoin
UIEnergyBankTip.DropCoin = DropCoin
UIEnergyBankTip.OnClick = OnClick

return UIEnergyBankTip