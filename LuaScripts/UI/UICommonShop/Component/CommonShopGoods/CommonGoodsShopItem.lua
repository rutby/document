---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/1/19 16:55
---

local base = UIBaseContainer--Variable
local CommonGoodsShopItem = BaseClass("CommonGoodsShopItem", base)--Variable
local Localization = CS.GameEntry.Localization
local UICommonItem = require "UI.UICommonItem.UICommonItem_TextMeshPro"
local RewardUtil = require "Util.RewardUtil"
local UIGray = CS.UIGray

local goodsItem_path = "Ani/UICommonItem"
local goodsName_path = "Ani/name"
local limitTxt_path = "Ani/limit"
local soldOutBg_path = "Ani/soldOutBg"
local soldOut_path = "Ani/soldOutBg/soldOut"
local buyBtn_path = "Ani/buyBtn"
local price_path = "Ani/buyBtn/price"
local consumeIcon_path = "Ani/buyBtn/price/icon"
local needVip_path = "Ani/needVip"
local discountBg_path = "Ani/discountBg"
local discountBgOut_path = "Ani/discountBg/discountBgOut"
local discount_path = "Ani/discountBg/discount"
local buyFreeBtn_path = "Ani/buyBtnFree"
local buyFreeBtnTxt_path = "Ani/buyBtnFree/priceFree"
local buyFreeRed_path = "Ani/buyBtnFree/redDot"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.goodsItemN = self:AddComponent(UICommonItem, goodsItem_path)
    self.goodsNameN = self:AddComponent(UITextMeshProUGUIEx, goodsName_path)
    self.limitTxtN = self:AddComponent(UITextMeshProUGUIEx, limitTxt_path)
    self.soldOutN = self:AddComponent(UITextMeshProUGUIEx, soldOut_path)
    self.soldOutBgN = self:AddComponent(UIBaseContainer, soldOutBg_path)
    self.discountBgOutN = self:AddComponent(UIBaseContainer, discountBgOut_path)
    self.soldOutN:SetLocalText(320268)
    self.buyBtnN = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickBuyBtn()
    end)
    self.priceN = self:AddComponent(UITextMeshProUGUIEx, price_path)
    self.consumeIconN = self:AddComponent(UIImage, consumeIcon_path)
    self.needVipN = self:AddComponent(UITextMeshProUGUIEx, needVip_path)
    self.discountN = self:AddComponent(UITextMeshProUGUIEx, discount_path)
    self.discountBgN = self:AddComponent(UIImage, discountBg_path)
    self.buyFreeBtnN = self:AddComponent(UIButton, buyFreeBtn_path)
    self.buyFreeBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickBuyBtn()
    end)
    self.buyFreeBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, buyFreeBtnTxt_path)
    self.buyFreeBtnTxtN:SetLocalText(130126)
    self.buyFreeRedN = self:AddComponent(UIBaseContainer, buyFreeRed_path)
end

local function ComponentDestroy(self)
    self.goodsItemN = nil
    self.goodsNameN = nil
    self.limitTxtN = nil
    self.soldOutN = nil
    self.buyBtnN = nil
    self.priceN = nil
    self.consumeIconN = nil
    self.needVipN = nil
    self.discountN = nil
end

local function DataDefine(self)
    self.goodsConf = nil
    self.cacheBuyCount = 0
end

local function DataDestroy(self)
    self.goodsConf = nil
    self.cacheBuyCount = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateOneCommonShopGoods, self.RefreshAll)
    self:AddUIListener(EventId.UpdateGold, self.RefreshAll)
    self:AddUIListener(EventId.OnBuyCommonGoodsSucc, self.OnBuySuccCallBack)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateOneCommonShopGoods, self.RefreshAll)
    self:RemoveUIListener(EventId.UpdateGold, self.RefreshAll)
    self:RemoveUIListener(EventId.OnBuyCommonGoodsSucc, self.OnBuySuccCallBack)
    base.OnRemoveListener(self)
end

local function SetItem(self, goodsConf)
    self.goodsConf = goodsConf
    
    self:RefreshAll()
end

local function OnBuySuccCallBack(self, goodsId)
    if self.goodsConf and goodsId == self.goodsConf.id then
        local rewardType = RewardType.GOODS
        local itemId = self.goodsConf.itemId
        if string.IsNullOrEmpty(itemId)  then
            rewardType = RewardType.HERO
            itemId = self.goodsConf.hero
        end
        local pic =RewardUtil.GetPic(rewardType,itemId)
        local img = self.goodsItemN.item_icon
        if pic~="" then
            local flyNum = self.cacheBuyCount > 5 and 6 or self.cacheBuyCount
            UIUtil.DoFly(tonumber(rewardType),flyNum,pic,img.transform.position,Vector3.New(0,0,0))
        end
    end
end

local function RefreshAll(self, goodsId)
    if not self.goodsConf then
        return
    end
    
    local param = {}
    if not string.IsNullOrEmpty(self.goodsConf.itemId) then
        param = {
            rewardType = RewardType.GOODS,
            itemId = self.goodsConf.itemId,
            count = self.goodsConf.itemNum
        }
    else
        param = {
            rewardType = RewardType.HERO,
            itemId = self.goodsConf.hero,
            count = self.goodsConf.itemNum
        }
    end
    self.goodsItemN:ReInit(param)

    if not string.IsNullOrEmpty(self.goodsConf.itemId) then
        local itemName = DataCenter.ItemTemplateManager:GetName(self.goodsConf.itemId)
        self.goodsNameN:SetText(itemName)
    else
        local heroName = HeroUtils.GetHeroNameByConfigId(self.goodsConf.hero)
        self.goodsNameN:SetText(heroName)
    end
    
    self.buyBtnN:SetActive(false)
    self.buyFreeBtnN:SetActive(false)
    self.soldOutBgN:SetActive(false)
    self.discountBgOutN:SetActive(false)
    self.needVipN:SetActive(false)
    self.discountBgN:SetActive(false)
    self.limitTxtN:SetActive(false)

    if self.goodsConf.discount and self.goodsConf.discount > 0 then
        self.discountBgN:SetActive(true)
        self.discountN:SetText("-" .. math.modf(self.goodsConf.discount) .. "%")
        if self.goodsConf.discount <= 49 then
            self.discountBgN:LoadSprite("Assets/Main/Sprites/UI/UIGiftPackageNew/shop_jianlv.png")
        else
            self.discountBgN:LoadSprite("Assets/Main/Sprites/UI/UIGiftPackageNew/shop_jianhong.png")
        end
    end

    if self.goodsConf.shopType == CommonShopType.Vip then
        if self.goodsConf.vipLevel and self.goodsConf.vipLevel > 0 then
            local vipInfo = DataCenter.VIPManager:GetVipData()
            if vipInfo and self.goodsConf.vipLevel > vipInfo.level then
                self.needVipN:SetActive(true)
                self.needVipN:SetText(Localization:GetString("104210", self.goodsConf.vipLevel))
                UIGray.SetGray(self.transform, false, true)
                return
            end
        end
    elseif self.goodsConf.shopType == CommonShopType.AlContribute then
        local rank = DataCenter.CommonShopManager:GetSelfExploitRank()
        if rank < self.goodsConf.needRank then
            self.needVipN:SetActive(true)
            local needRankName = DataCenter.AlContributeManager:GetExploitNameByRank(self.goodsConf.needRank)
            self.needVipN:SetText(Localization:GetString("372860", needRankName))
            UIGray.SetGray(self.transform, false, true)
            return
        end
    end

    if self.goodsConf.maxTimes and self.goodsConf.maxTimes > 0 then
        local goodsInfo = DataCenter.CommonShopManager:GetGoodsInfoById(self.goodsConf.shopType, self.goodsConf.id)
        local boughtTimes = goodsInfo and goodsInfo.boughtTimes or  0

        if boughtTimes < self.goodsConf.maxTimes then
            UIGray.SetGray(self.transform, false, true)
            if self.goodsConf.shopType == CommonShopType.LimitTime then
                self.limitTxtN:SetActive(false)
            else
                self.limitTxtN:SetActive(true)
                self.limitTxtN:SetLocalText(GameDialogDefine.SHOP_LEFT_WITH, self.goodsConf.maxTimes - boughtTimes)
            end
        else
            UIGray.SetGray(self.transform, true, false)
            self.limitTxtN:SetActive(false)
            self.soldOutBgN:SetActive(true)
            self.discountBgOutN:SetActive(true)
            return
        end
    else
        UIGray.SetGray(self.transform, false, true)
    end
    
    local resType = RewardToResType[self.goodsConf.currencyType]
    if self.goodsConf.costNum > 0 then
        self.buyBtnN:SetActive(true)
        self.buyFreeBtnN:SetActive(false)
        
        self.priceN:SetActive(true)
        if resType and resType == ResourceType.Gold then
            self.priceN:SetText(string.GetFormattedSeperatorNum(self.goodsConf.costNum))
        else
            self.priceN:SetText(string.GetFormattedStr(self.goodsConf.costNum))
        end
        self:SetConsumeIcon()
        if self:CheckCostEnough(false) then
            self.priceN:SetColor(WhiteColor)

        else
            self.priceN:SetColor(RedColor)            
            
        end
    else
        self.buyBtnN:SetActive(false)
        self.buyFreeBtnN:SetActive(true)
    end

end

local function SetConsumeIcon(self)
    local resType = RewardToResType[self.goodsConf.currencyType]
    if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
        self.consumeIconN:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(RewardToResType[self.goodsConf.currencyType]))
    else
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.goodsConf.currencyId)
        self.consumeIconN:LoadSprite(string.format(LoadPath.ItemPath, goods.icon))
    end
end

local function OnClickBuyBtn(self)
    local param = {}
    param.goodsInfo = {}
    if not string.IsNullOrEmpty(self.goodsConf.itemId) then
        param.goodsInfo.rewardType = RewardType.GOODS
        param.goodsInfo.itemId = self.goodsConf.itemId
        param.goodsInfo.count = self.goodsConf.itemNum

        local goodsInfo = DataCenter.CommonShopManager:GetGoodsInfoById(self.goodsConf.shopType, self.goodsConf.id)
        local boughtTimes = goodsInfo and goodsInfo.boughtTimes or  0
        local limit = self.goodsConf.maxTimes - boughtTimes
        limit = math.max(limit, 0)


        param.goodsInfo.limitCount = limit == 0 and 9999 or limit
        param.goodsInfo.eachPrice = self.goodsConf.costNum
    else
        param.goodsInfo.rewardType = RewardType.HERO
        param.goodsInfo.itemId = self.goodsConf.hero
        param.goodsInfo.count = self.goodsConf.itemNum
    end
    param.consumeInfo = {}
    param.consumeInfo.currencyType = self.goodsConf.currencyType
    param.consumeInfo.currencyId = self.goodsConf.currencyId
    param.callback = function(buyCount)
        self:ProcessPurchase(buyCount)
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMultiBuy,NormalBlurPanelAnim, param)
end

local function ProcessPurchase(self, buyCount)
    if not self:CheckCostEnough(true) then
        return
    end
    self.cacheBuyCount = buyCount
    --对于英雄纪念章 有购买上限限制 会溢出 所以要加一个二次确认 
    --英雄勋章溢出后 溢出的部分会消失
    local medalItemId = DataCenter.HeroMedalShopDataManager:GetHeroMedalItemId()
    if medalItemId == tonumber(self.goodsConf.itemId) then
        local template = DataCenter.ItemTemplateManager:GetItemTemplate(medalItemId)
        if template ~= nil and template.max_stock > 0 then
            local ownCount = DataCenter.ItemData:GetItemCount(medalItemId)
            if ownCount + buyCount * self.goodsConf.itemNum > template.max_stock then
                --如果超过最大值
                UIUtil.ShowSecondMessage(Localization:GetString("100378"), Localization:GetString("320829"), 2, "", "", function()
                    self:ConfirmProcessPurchase()
                end, nil)
                return
            end
        end
    end

    if self.goodsConf.shopType == CommonShopType.SeasonShop then
        local itemId = tonumber(self.goodsConf.itemId)
        local template = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
        if template ~= nil and template.max_stock > 0 then
            local ownCount = DataCenter.ItemData:GetItemCount(itemId)
            if ownCount + buyCount * self.goodsConf.itemNum > template.max_stock then
                --如果超过最大值
                UIUtil.ShowMessage(Localization:GetString(GameDialogDefine.PLEASE_USE_THEN_BUY_WITH,
                        string.GetFormattedSeperatorNum(template.max_stock), Localization:GetString(template.name)), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL)
                return
            end
        end
    end

    SFSNetwork.SendMessage(MsgDefines.BuyCommonShopGoods, self.goodsConf.id, nil, buyCount)
end

local function ConfirmProcessPurchase(self)
    SFSNetwork.SendMessage(MsgDefines.BuyCommonShopGoods, self.goodsConf.id, nil, self.cacheBuyCount)
end

local function CheckCostEnough(self, showTip)
    local resType = RewardToResType[self.goodsConf.currencyType]
    if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
        if resType == ResourceType.Gold then
            if LuaEntry.Player.gold < self.goodsConf.costNum then
                if showTip then
                    GoToUtil.GotoPayTips()
                end
                return false
            end
        else
            local cnt = LuaEntry.Resource:GetCntByResType(resType)
            if cnt < self.goodsConf.costNum then
                if showTip then
                    local lackTab = {}
                    local param = {}
                    param.type = ResLackType.Res
                    param.id = resType
                    param.targetNum = self.goodsConf.costNum
                    table.insert(lackTab,param)
                    GoToResLack.GoToItemResLackList(lackTab)
                end
                return false
            end
        end
    else
        local curNum = DataCenter.ItemData:GetItemCount(self.goodsConf.currencyId)
        if curNum < self.goodsConf.costNum then
            if showTip then
                UIUtil.ShowTipsId(GameDialogDefine.NO_ITEM)
            end
            return false
        end
    end
    return true
end


CommonGoodsShopItem.OnCreate = OnCreate
CommonGoodsShopItem.OnDestroy = OnDestroy
CommonGoodsShopItem.OnAddListener = OnAddListener
CommonGoodsShopItem.OnRemoveListener = OnRemoveListener
CommonGoodsShopItem.ComponentDefine = ComponentDefine
CommonGoodsShopItem.ComponentDestroy = ComponentDestroy
CommonGoodsShopItem.DataDefine = DataDefine
CommonGoodsShopItem.DataDestroy = DataDestroy

CommonGoodsShopItem.SetItem = SetItem
CommonGoodsShopItem.RefreshAll = RefreshAll
CommonGoodsShopItem.SetConsumeIcon = SetConsumeIcon
CommonGoodsShopItem.CheckCostEnough = CheckCostEnough
CommonGoodsShopItem.ProcessPurchase = ProcessPurchase
CommonGoodsShopItem.OnClickBuyBtn = OnClickBuyBtn
CommonGoodsShopItem.OnBuySuccCallBack = OnBuySuccCallBack
CommonGoodsShopItem.ConfirmProcessPurchase = ConfirmProcessPurchase

return CommonGoodsShopItem