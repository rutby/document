---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/9/15 16:38
---

local base = UIBaseView--Variable
local UICommonShopView = BaseClass("UICommonShopView", base)--Variable
local Localization = CS.GameEntry.Localization
local CommonGoodsShopPanel = require "UI.UICommonShop.Component.CommonShopGoods.CommonGoodsShopPanel"
local CommonVipShopPanel = require "UI.UICommonShop.Component.CommonShopVip.CommonVipShopPanel"
local CommonLimitTimeShopPanel = require "UI.UICommonShop.Component.CommonShopLimitTime.CommonLimitTimeShopPanel"
local CommonShopAlContributePanel = require "UI.UICommonShop.Component.CommonShopAlContribute.CommonShopAlContributePanel"
local UICommonToggleBtnTab = require "UI.UICommonTab.UICommonToggleBtnTab"

local title_path = "fullTop/imgTitle/Common_img_title/titleText"
local closeBtn_path = "fullTop/CloseBtn"
local gold_num_text_path = "fullTop/gold_btn/gold_num_text"

local panelContainer_path = "Container"
local toggle_btn_path = "ToggleBtnGroup/ToggleBtn"

local assetsPath = "Assets/Main/Prefab_Dir/UI/UICommonShop/%s.prefab"
local subPanelConf = {
    {
        ShopType = CommonShopType.LimitTime,
        Asset = "CommonLimitTimeShopPanel",
        Script = CommonLimitTimeShopPanel,
        Switch = "APS_shop_limit",
        TabName = "134018",
    },
    {
        ShopType = CommonShopType.Vip,
        Asset = "CommonVipShopPanel",
        Script = CommonVipShopPanel,
        Switch = "APS_shop_vip",
        TabName = "320222",
    },
    {
        ShopType = CommonShopType.Goods,
        Asset = "CommonGoodsShopPanel",
        Script = CommonGoodsShopPanel,
        Switch = "APS_shop_general",
        TabName = "100080",
    },
    {
        ShopType = CommonShopType.AlContribute,
        Asset = "CommonAlContributeShopPanel",
        Script = CommonShopAlContributePanel,
        Switch = "aps_exploit_shop",
        TabName = "372751",
    },
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:InitUI()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        self:OnClickCloseBtn()
    end)

    self.toggle_btn = {}
    for i = 1, #subPanelConf, 1 do
        self.toggle_btn[i] = self:AddComponent(UICommonToggleBtnTab, toggle_btn_path .. i)
    end
    self.panelContainerN = self:AddComponent(UIBaseContainer, panelContainer_path)
    self.gold_num_text = self:AddComponent(UITextMeshProUGUIEx, gold_num_text_path)
end

local function ComponentDestroy(self)
end

local function DataDefine(self)
    self.panelList = {}
    self.reqList = {}
    self.shopInitList = {}
    self.on_tab_callback = function(tabType)
        self:OnTabClick(tabType)
    end
end

local function DataDestroy(self)
end

--  [[
local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnCommonShopRedChange, self.RefreshToggleRed)
    self:AddUIListener(EventId.UpdateGold, self.UpdateGoldSignal)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnCommonShopRedChange, self.RefreshToggleRed)
    self:RemoveUIListener(EventId.UpdateGold, self.UpdateGoldSignal)
    base.OnRemoveListener(self)
end
--]]

local function InitUI(self)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Open_Common_Shop)
    local targetTabIndex = self:GetUserData()
    targetTabIndex = targetTabIndex or 0
    self:GetTabList(targetTabIndex)
    for k, v in pairs(self.toggle_btn) do
        local tabParam = self.tabList[k]
        if tabParam == nil then
            v:SetActive(false)
        else
            v:ReInit(tabParam)
        end
    end
    
    self:Refresh()
    self:RefreshGold()
    self:RefreshToggleRed()
end


function UICommonShopView:GetTabList(selectTabType)
    self.tabList = {}
    local index = 0
    local showIndex = 0
    self.curTabIndex = 0
    for k, param in ipairs(subPanelConf) do
        index = index + 1
        local tabParam = {}
        tabParam.index = index
        tabParam.tabType = k
        tabParam.visible = self:CheckIfShopVisible(param)
        if tabParam.visible and showIndex == 0 then
            showIndex = index
        end
        if selectTabType == k then
            if tabParam.visible then
                tabParam.select = true
                self.curTabIndex = index
            else
                tabParam.select = false
            end
        else
            tabParam.select = false
        end
        
        tabParam.callback = self.on_tab_callback
        tabParam.name = Localization:GetString(param.TabName)
        table.insert(self.tabList, tabParam)
    end
    
    if self.curTabIndex == 0 and showIndex ~= 0 then
        self.curTabIndex = showIndex
        self.tabList[showIndex].select = true
    end
end

function UICommonShopView:Refresh()
    if self.prefabName == subPanelConf[self.curTabIndex].Asset then
        self:RefreshOnShowPanel()
    else
        local lastPrefabName = self.prefabName
        self.prefabName = subPanelConf[self.curTabIndex].Asset
        if self.reqList[self.prefabName] == nil then
            local assetFullPath = string.format(assetsPath, self.prefabName)
            self.reqList[self.prefabName] = self:GameObjectInstantiateAsync(assetFullPath, function(request)
                if request.isError then
                    return
                end
                --在新预制加载完之前仍然显示之前的界面
                if self.panelList[lastPrefabName] ~= nil then
                    self.panelList[lastPrefabName]:SetActive(false)
                end

                local go = request.gameObject;
                go.transform:SetParent(self.panelContainerN.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local cell = self.panelContainerN:AddComponent(subPanelConf[self.curTabIndex].Script, go)
                self.panelList[self.prefabName] = cell
                self.panelList[self.prefabName]:SetActive(true)
                self:RefreshOnShowPanel()
            end)
        else
            if self.panelList[lastPrefabName] ~= nil then
                self.panelList[lastPrefabName]:SetActive(false)
            end
            if self.panelList[self.prefabName] ~= nil then
                self.panelList[self.prefabName]:SetActive(true)
                self:RefreshOnShowPanel()
            end
        end
    end
end

local function RefreshToggleRed(self)
    for k,v in ipairs(self.toggle_btn) do
        if v.param.visible then
            local redCount = DataCenter.CommonShopManager:GetRedCount(subPanelConf[k].ShopType)
            if redCount > 0 then
                v:SetRedNum(true, redCount)
            else
                v:SetRedNum(false, redCount)
            end
        end
    end
end

local function RefreshOnShowPanel(self)
    local tempPanel = subPanelConf[self.curTabIndex].Asset
    if self.curTabIndex == 1 then
        self.titleN:SetLocalText(372235)
    elseif self.curTabIndex == 2 then
        self.titleN:SetLocalText(104207)
    elseif self.curTabIndex == 3 then
        self.titleN:SetLocalText(104206)
    elseif self.curTabIndex == 4 then
        self.titleN:SetLocalText(104239)
    elseif self.curTabIndex == 5 then
        self.titleN:SetLocalText(372751)
    end
    local shopType = subPanelConf[self.curTabIndex].ShopType
    if not table.hasvalue(self.shopInitList, shopType) then
        SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, shopType)
        table.insert(self.shopInitList, shopType)
    end
    self.panelList[tempPanel]:ShowPanel(shopType)
end

local function CheckIfShopVisible(self, shopConf)
    if LuaEntry.DataConfig:CheckSwitch(shopConf.Switch) then
        --限时商店关联大本等级
        if shopConf.ShopType == CommonShopType.LimitTime then
            local limitShopNeedBaseLv = LuaEntry.DataConfig:TryGetNum("shop_random", "k4")
            if limitShopNeedBaseLv > DataCenter.BuildManager.MainLv then
                return false
            else
                return true
            end
        elseif shopConf.ShopType == CommonShopType.AlContribute then
            local infoList = DataCenter.ActivityListDataManager:GetActivityDataByType(EnumActivity.AlContribute.Type)
            if infoList and #infoList > 0 then
                local isOpen = DataCenter.ActivityListDataManager:CheckIsSend(infoList[1])
                return isOpen
            else
                return false
            end
        else
            return true
        end
    else
        return false
    end
end


local function OnClickCloseBtn(self)
    self.ctrl:CloseSelf()
end

function UICommonShopView:UpdateGoldSignal()
    self:RefreshGold()
end


function UICommonShopView:RefreshGold()
    self.gold_num_text:SetText(string.GetFormattedSeperatorNum(LuaEntry.Player.gold))
end

function UICommonShopView:OnTabClick(tabIndex)
    if self.curTabIndex == tabIndex then
        return
    end
    self:RefreshTabSelect(self.curTabIndex, false)
    self.curTabIndex = tabIndex
    self:RefreshTabSelect(self.curTabIndex, true)
    self:Refresh()
end

function UICommonShopView:RefreshTabSelect(tabType, isSelect)
    if self.toggle_btn[tabType] ~= nil then
        self.toggle_btn[tabType]:SetSelect(isSelect)
    end
end

UICommonShopView.OnCreate = OnCreate 
UICommonShopView.OnDestroy = OnDestroy
--UICommonShopView.OnAddListener = OnAddListener
--UICommonShopView.OnRemoveListener = OnRemoveListener
UICommonShopView.ComponentDefine = ComponentDefine
UICommonShopView.ComponentDestroy = ComponentDestroy
UICommonShopView.DataDefine = DataDefine
UICommonShopView.DataDestroy = DataDestroy
UICommonShopView.OnAddListener = OnAddListener
UICommonShopView.OnRemoveListener = OnRemoveListener

UICommonShopView.InitUI = InitUI
UICommonShopView.RefreshToggleRed = RefreshToggleRed
UICommonShopView.RefreshOnShowPanel = RefreshOnShowPanel
UICommonShopView.CheckIfShopVisible = CheckIfShopVisible
UICommonShopView.OnClickCloseBtn = OnClickCloseBtn

return UICommonShopView