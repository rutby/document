---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/9/15 16:38
---

local base = UIBaseView--Variable
local UIMultiBuyView = BaseClass("UIMultiBuyView", base)--Variable
local Localization = CS.GameEntry.Localization
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"

local title_path = "UICommonMidPopUpTitle/bg_mid/titleText"
local closeBtn_path = "UICommonMidPopUpTitle/bg_mid/CloseBtn"
local bgBtn_path = "UICommonMidPopUpTitle/panel"
local goodsItem_path = "offset/goodsCell"
local heroItem_path = "offset/heroCell"
local name_path = "offset/name"
local eachPrice_path = "offset/perPrice"
local totalPrice_path = "offset/totalPrice"
local subBtn_path = "offset/InputGo/DesBg/DecBtn"
local addBtn_path = "offset/InputGo/DesBg/AddBtn"
local slider_path = "offset/InputGo/DesBg/Slider"
local curNumIpt_path = "offset/InputGo/DesBg/InputField"
local buyBtn_path = "offset/buyBtn"
local buyCost_path = "offset/buyBtn/cost"
local buyBtnTxt_path = "offset/buyBtn/cost/buyTxt"
local costItemIcon_path = "offset/buyBtn/cost/icon_go/consumeIcon"
local costItemCount_path = "offset/buyBtn/cost/buyPrice"
local buyFreeTxt_path = "offset/buyBtn/buyFreeTxt"
local topRes_path = "resObj"
local topResIcon_path = "resObj/resIcon"
local topResCount_path = "resObj/resCount"


local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:InitData()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.titleN:SetLocalText(110027)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.bgBtnN = self:AddComponent(UIButton, bgBtn_path)
    self.bgBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.goodsItemN = self:AddComponent(UICommonItem, goodsItem_path)
    self.heroItemN = self:AddComponent(UIHeroCellSmall, heroItem_path)
    self.nameN = self:AddComponent(UITextMeshProUGUIEx, name_path)
    self.eachPriceN = self:AddComponent(UITextMeshProUGUIEx, eachPrice_path)
    self.totalPriceN = self:AddComponent(UITextMeshProUGUIEx, totalPrice_path)
    self.subBtnN = self:AddComponent(UIButton, subBtn_path)
    self.subBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Dec)
        self:OnClickSubBtn()
    end)
    self.addBtnN = self:AddComponent(UIButton, addBtn_path)
    self.addBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Add)
        self:OnClickAddBtn()
    end)
    self.sliderN = self:AddComponent(UISlider, slider_path)
    self.sliderN:SetOnValueChanged(function (value)
        self:OnSliderValueChange(value)
    end)
    self.curNumIptN = self:AddComponent(UITMPInput, curNumIpt_path)
    self.curNumIptN:SetOnEndEdit(function (value)
        self:OnCurNumIptValueChange(value)
    end)
    self.buyBtnN = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickBuyBtn()
    end)
    self.buyCostN = self:AddComponent(UIBaseContainer, buyCost_path)
    self.buyBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, buyBtnTxt_path)
    self.buyBtnTxtN:SetLocalText(110080)
    self.consumeIconN = self:AddComponent(UIImage, costItemIcon_path)
    self.costCountN = self:AddComponent(UITextMeshProUGUIEx, costItemCount_path)
    self.buyFreeTxtN = self:AddComponent(UITextMeshProUGUIEx, buyFreeTxt_path)
    self.buyFreeTxtN:SetLocalText(130126)
    self.topResN = self:AddComponent(UIBaseContainer, topRes_path)
    self.topResIconN = self:AddComponent(UIImage, topResIcon_path)
    self.topResCountN = self:AddComponent(UITextMeshProUGUIEx, topResCount_path)
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.closeBtnN = nil
    self.bgBtnN = nil
    self.goodsItemN = nil
    self.heroItemN = nil
    self.eachPriceN = nil
    self.totalPriceN = nil
    self.subBtnN = nil
    self.addBtnN = nil
    self.sliderN = nil
    self.curNumIptN = nil
    self.buyBtnN = nil
    self.buyBtnTxtN = nil
    self.consumeIconN = nil
    self.costCountN = nil
end

local function DataDefine(self)
    self.curCount = 1
    self.goodsInfo = nil
    self.consumeInfo = nil
    self.confirmCallBack = nil
end

local function DataDestroy(self)
    self.curCount = nil
    self.goodsInfo = nil
    self.consumeInfo = nil
    self.confirmCallBack = nil
end

--[[
local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end
--]]


--[[
self.param = {
    goodsInfo = {
        rewardType = RewardType.GOODS,
        itemId = "",
        count = 1,
        isPoster = false,
        limitCount = 9999,
        eachPrice = 1,
    },
    consumeInfo = {
        currencyType = RewardType.GOODS,
        currencyId = "",
    }, 
    callback = nil
}
--]]
local function InitData(self)
    local tempParam = self:GetUserData()
    if not tempParam then
        return
    end
    self.goodsInfo = tempParam.goodsInfo
    self.consumeInfo = tempParam.consumeInfo
    self.showResBar = tempParam.showResBar
    self.confirmCallBack = tempParam.callback
    
    self:InitUI()
end

local function InitUI(self)
    if not self.goodsInfo or not self.consumeInfo then
        return
    end

    if self.goodsInfo.isPoster then
        self.heroItemN:SetActive(true)
        self.goodsItemN:SetActive(false)
        self.heroItemN:InitWithConfigIdByPoster(self.goodsInfo.itemId)
    else
        self.heroItemN:SetActive(false)
        self.goodsItemN:SetActive(true)
        local param = {
            rewardType = self.goodsInfo.rewardType,
            itemId = self.goodsInfo.itemId,
            count = self.goodsInfo.count
        }
        self.goodsItemN:ReInit(param)
    end

    local strName = ""
    if self.goodsInfo.rewardType == RewardType.GOODS then
        local itemName = DataCenter.ItemTemplateManager:GetName(self.goodsInfo.itemId)
        strName = itemName
    else
        local heroName = HeroUtils.GetHeroNameByConfigId(self.goodsInfo.itemId)
        strName = heroName
    end
    self.nameN:SetText(strName)
    
    self.eachPriceN:SetLocalText(320495,self.goodsInfo.eachPrice)
    
    self.curNumIptN:SetText(self.curCount)

    if self.goodsInfo.eachPrice > 0 then
        self.buyCostN:SetActive(true)
        self.buyFreeTxtN:SetActive(false)
        self.buyBtnN:LoadSprite("Assets/Main/Sprites/UI/Common/New/Common_btn_yellow101")
        local resType = RewardToResType[self.consumeInfo.currencyType]
        if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
            self.topResN:SetActive(self.showResBar)
            local resIcon = DataCenter.ResourceManager:GetResourceIconByType(RewardToResType[self.consumeInfo.currencyType])
            self.topResIconN:LoadSprite(resIcon)
            local tempCount = 0
            if resType == ResourceType.Gold then
                tempCount = LuaEntry.Player.gold
            else
                tempCount = LuaEntry.Resource:GetCntByResType(resType)
            end
            self.topResCountN:SetText(tempCount)
            self.consumeIconN:LoadSprite(resIcon)
        else
            self.topResN:SetActive(false)
            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.consumeInfo.currencyId)
            self.consumeIconN:LoadSprite(string.format(LoadPath.ItemPath, goods.icon))
        end
    else
        self.buyBtnN:LoadSprite("Assets/Main/Sprites/UI/Common/New/Common_btn_green101")
        self.topResN:SetActive(false)
        self.buyCostN:SetActive(false)
        self.buyFreeTxtN:SetActive(true)
        self.curCount = self.goodsInfo.limitCount
    end
    
    self:TrySetCurNum(self.curCount)
end

local function TrySetCurNum(self, tempNum)
    tempNum = tonumber(tempNum) or self.curCount
    if tempNum <= 0 then
        tempNum = 1
    elseif tempNum > self.goodsInfo.limitCount then
        tempNum = self.goodsInfo.limitCount
    end
    tempNum = Mathf.Round(tempNum)
    self.curCount = tempNum
    
    local costEnough = self:CheckCostEnough(false)
    local costColor1 = costEnough and GreenColor or RedColor
    local costColor2 = costEnough and WhiteColor or RedColor
    self.curNumIptN:SetText(self.curCount)
    self.sliderN:SetValue(self.curCount / self.goodsInfo.limitCount)
    local tempTotalPrice = self.curCount * self.goodsInfo.eachPrice
    self.totalPriceN:SetLocalText(320496,tempTotalPrice)
    self.totalPriceN:SetColor(costColor1)
    self.costCountN:SetText(tempTotalPrice)
    self.costCountN:SetColor(costColor2)
end

local function CheckCostEnough(self, showTip)
    local tempTotalPrice = self.curCount * self.goodsInfo.eachPrice
    local resType = RewardToResType[self.consumeInfo.currencyType]
    if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
        if resType == ResourceType.Gold then
            if LuaEntry.Player.gold < tempTotalPrice then
                if showTip then
                    GoToUtil.GotoPayTips()
                end
                return false
            end
        else
            local cnt = LuaEntry.Resource:GetCntByResType(resType)
            if cnt < tempTotalPrice then
                if showTip then
                    local lackTab = {}
                    local param = {}
                    param.type = ResLackType.Res
                    param.id = resType
                    param.targetNum = tempTotalPrice
                    table.insert(lackTab,param)
                    GoToResLack.GoToItemResLackList(lackTab)
                end
                return false
            end
        end
    else
        local curNum = DataCenter.ItemData:GetItemCount(self.consumeInfo.currencyId)
        if curNum < tempTotalPrice then
            if showTip then
                UIUtil.ShowTipsId(GameDialogDefine.NO_ITEM)
            end
            return false
        end
    end
    return true
end

local function OnClickSubBtn(self)
    local num = self.curCount - 1
    self:TrySetCurNum(num)
end

local function OnClickAddBtn(self)
    local num = self.curCount + 1
    self:TrySetCurNum(num)
end

local function OnSliderValueChange(self, value)
    local num = self.goodsInfo.limitCount * value
    self:TrySetCurNum(num)
end

local function OnCurNumIptValueChange(self, value)
    self:TrySetCurNum(value)
end

local function OnClickBuyBtn(self)
    if not self:CheckCostEnough(true) then
        return
    end
    self.ctrl:CloseSelf()
    if self.confirmCallBack then
        self.confirmCallBack(self.curCount)
    end
end

UIMultiBuyView.OnCreate = OnCreate 
UIMultiBuyView.OnDestroy = OnDestroy
--UIMultiBuyView.OnAddListener = OnAddListener
--UIMultiBuyView.OnRemoveListener = OnRemoveListener
UIMultiBuyView.ComponentDefine = ComponentDefine
UIMultiBuyView.ComponentDestroy = ComponentDestroy
UIMultiBuyView.DataDefine = DataDefine
UIMultiBuyView.DataDestroy = DataDestroy

UIMultiBuyView.InitData = InitData
UIMultiBuyView.InitUI = InitUI
UIMultiBuyView.TrySetCurNum = TrySetCurNum
UIMultiBuyView.CheckCostEnough = CheckCostEnough
UIMultiBuyView.OnClickSubBtn = OnClickSubBtn
UIMultiBuyView.OnClickAddBtn = OnClickAddBtn
UIMultiBuyView.OnSliderValueChange = OnSliderValueChange
UIMultiBuyView.OnCurNumIptValueChange = OnCurNumIptValueChange
UIMultiBuyView.OnClickBuyBtn = OnClickBuyBtn

return UIMultiBuyView