---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local UINoticeEquipTipsView = BaseClass("UINoticeEquipTipsView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local content_text_path = "Root/Rect_Top/Txt_Content"
local point_num_text_path = "Root/Points/Num_"
local root_path = "Root"
local this_path = ""
local slider_path = "Root/Slider"

local TrueSliderState = {0.2, 0.625, 1}
local DelayCloseTime = 1.6
local ContinueTime = 0.2

function UINoticeEquipTipsView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

function UINoticeEquipTipsView:ComponentDefine()
    self._content_txt = self:AddComponent(UITextMeshProUGUIEx, content_text_path)
    self.scorePoint = {}
    for i = 1, 4, 1 do
        local point = point_num_text_path .. i
        self.scorePoint[i] = self:AddComponent(UITextMeshProUGUIEx, point)
    end
    self.root          = self:AddComponent(UIBaseContainer, root_path)
    self.animator      = self:AddComponent(UIAnimator, this_path)
    self.slider   = self:AddComponent(UISlider, slider_path)
end

function UINoticeEquipTipsView:ComponentDestroy()
end

function UINoticeEquipTipsView:DataDefine()
    self.param = {}
    self.sliderValueList = {}--分段slider
    self.last = 0
    self.cur = 0
    self.delay_timer_action = function() 
        self:DelayTimeCallBack()
    end
    self.activityId = 0--喝actId 不一样
    self.tween = nil
end

function UINoticeEquipTipsView:DataDestroy()
    self:KillAnim()
    self:RemoveDelayTimer()
    self.param = {}
    self.sliderValueList = {}--分段slider
    self.last = 0
    self.cur = 0
    self.delay_timer_action = nil
    self.activityId = 0--喝actId 不一样
end

function UINoticeEquipTipsView:OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UINoticeEquipTipsView:OnEnable()
    base.OnEnable(self)
end

function UINoticeEquipTipsView:OnDisable()
    base.OnDisable(self)
end

function UINoticeEquipTipsView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.RefreshUINoticeEquipTips, self.RefreshUINoticeEquipTipsSignal)
end

function UINoticeEquipTipsView:OnRemoveListener()
    self:RemoveUIListener(EventId.RefreshUINoticeEquipTips, self.RefreshUINoticeEquipTipsSignal)
    base.OnRemoveListener(self)
end

function UINoticeEquipTipsView:ReInit()
    local param, activityId = self:GetUserData()
    self.param = param
    self.activityId = activityId
    local eventInfo = DataCenter.ActPersonalArmsInfo:GetEventInfo(self.activityId)
    if eventInfo ~= nil then
        self.sliderValueList = {}
        for k, v in ipairs(eventInfo.rewardScoreIndexArr) do
            self.sliderValueList[k] = v
        end

        --当前目标所需积分数
        for i=1,4,1 do
            if i == 1 then
                self.scorePoint[i]:SetText("0")
            else
                self.scorePoint[i]:SetText(string.GetFormattedSeperatorNum(self.sliderValueList[i-1]))
            end
        end
        self._content_txt:SetText(Localization:GetString("372160",self.param.addScore))
        --当前值
        local score = tonumber(self.param.score)
        self.cur = self:GetSliderValue(score)
        --增加的值
        local add = tonumber(self.param.addScore)
        --上一次的值
        self.last = self:GetSliderValue(score - add )
        self.slider:SetValue(self.last)
        --self.animator:Enable(true)
        self.root.transform:Set_localScale(1, 1, 1)
        local ret, time = 0--self.animator:GetAnimationReturnTime('UIRecruitLotteryTip_show')
        local showTime = (ret and time or 0) + ContinueTime
        self:PlayAnim(showTime)
    end
end

--获取对应分数slider的值
function UINoticeEquipTipsView:GetSliderValue(num)
    local minSlider = 0
    local startNum = 0
    for k, v in ipairs(self.sliderValueList) do
        if num <= v then
            return minSlider + (TrueSliderState[k] - minSlider) * ((num - startNum) / (v - startNum))
        else
            minSlider = TrueSliderState[k]
            startNum = v
        end
    end
    return 1
end

function UINoticeEquipTipsView:AddDelayTimer()
    if self.delayTime == nil then
        self.delayTime = TimerManager:GetInstance():GetTimer(DelayCloseTime, self.delay_timer_action , self, true, false, false)
        self.delayTime:Start()
    end
end

function UINoticeEquipTipsView:RemoveDelayTimer()
    if self.delayTime ~= nil then
        self.delayTime:Stop()   
        self.delayTime = nil
    end
end

function UINoticeEquipTipsView:DelayTimeCallBack()
    self:RemoveDelayTimer()
    self:KillAnim()
    local rootRt = self.root.transform
    if rootRt ~= nil then
        rootRt:Set_localScale(1, 1, 1)
        self.tween = rootRt:DOScale(Vector3.New(1.2, 1.2, 1.2), 0.15):OnComplete(function()
            self.tween = rootRt:DOScale(Vector3.zero, 0.25):OnComplete(function()
                self.ctrl:CloseSelf()
            end)
        end)
    end
end


function UINoticeEquipTipsView:CheckScore()
    local data = DataCenter.ActivityListDataManager:GetActScore(self.param.actId)
    if data ~= nil then
        self.cur = self:GetSliderValue(tonumber(data.score))
    end
    DataCenter.ActivityListDataManager:ClearActScore()
    if self.cur > self.last then
        self:PlayAnim(ContinueTime)
    end
end

function UINoticeEquipTipsView:RefreshUINoticeEquipTipsSignal()
    self:CheckScore()
end

function UINoticeEquipTipsView:PlayAnim(showTime)
    self:RemoveDelayTimer()
    self:KillAnim()
    local function OnProGet()
        return self.last
    end

    local function OnProSet(x)
        self.last = x
        self.slider:SetValue(x)
    end

    local function OnProAniEnd()
        self:KillAnim()
        self:AddDelayTimer()
    end

    self.tween = DOTween.To(OnProGet, OnProSet, self.cur, 1):OnComplete(OnProAniEnd):SetDelay(showTime)
    self.tween:Play()
end

function UINoticeEquipTipsView:KillAnim()
    if self.tween ~= nil then
        self.tween:Kill()
        self.tween = nil
    end
end

return UINoticeEquipTipsView