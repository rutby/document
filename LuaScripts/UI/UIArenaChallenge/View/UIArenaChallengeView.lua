---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/9/15 16:38
---

local base = UIBaseView--Variable
local UIArenaChallengeView = BaseClass("UIArenaChallengeView", base)--Variable
local Localization = CS.GameEntry.Localization
local ArenaChallengeItem = require "UI.UIArenaChallenge.Component.ArenaChallengeItem"

local title_path = "UICommonPopUpTitle/bg_mid/titleText"
local closeBtn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local refreshBtn_path = "refreshBtn"
local refreshBtnTxt_path = "refreshBtn/refreshBtnTxt"
local challengeTimes_path = "top/tickets/challengeTimes"
local ticket_path = "top/tickets"
local ticketCount_path = "top/tickets/ticketNum"
local buyTicketBtn_path = "top/tickets/Common_btn_add"
local svTarget_path = "ScrollView"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:InitData()
end

local function OnDestroy(self)
    self:DelCountDownTimer()
    self:ClearScroll()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.titleN:SetLocalText(372258)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    --self.selfObjN = self:AddComponent(ArenaChallengeItem, selfObj_path)
    self.refreshBtnN = self:AddComponent(UIButton, refreshBtn_path)
    CS.UIGray.SetGray(self.refreshBtnN.transform, false, true)
    self.refreshBtnN:SetOnClick(function()
        self:OnClickRefreshBtn()
    end)
    self.refreshBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, refreshBtnTxt_path)
    self.refreshBtnTxtN:SetLocalText(110028)
    self.challengeTimesN = self:AddComponent(UITextMeshProUGUIEx, challengeTimes_path)
    self.ticketN = self:AddComponent(UIBaseContainer, ticket_path)
    --self.ticketN:SetActive(false)
    self.ticketCountN = self:AddComponent(UITextMeshProUGUIEx, ticketCount_path)
    self.buyTicketBtnN = self:AddComponent(UIButton, buyTicketBtn_path)
    self.buyTicketBtnN:SetOnClick(function()
        self:OnClickBuyTicketBtn()
    end)
    self.svTargetN = self:AddComponent(UIScrollView, svTarget_path)
    self.svTargetN:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.svTargetN:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.closeBtnN = nil
    self.refreshBtnN = nil
    self.refreshBtnTxtN = nil
    self.challengeTimesN = nil
    self.ticketCountN = nil
    self.buyTicketBtnN = nil
    self.playerTxtN = nil
    self.scoreTxtN = nil
    self.svTargetN = nil
end

local function DataDefine(self)
    self.targetList = nil
    self.challengeItemsDic = {}
    self.curDetailIndex = nil
    self.nextRefreshTime = 0
end

local function DataDestroy(self)
    self.targetList = nil
    self.challengeItemsDic = nil
    self.curDetailIndex = nil
    self.nextRefreshTime = nil
end

--  [[
local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnUpdateArenaBaseInfo, self.RefreshAll)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnUpdateArenaBaseInfo, self.RefreshAll)
    base.OnRemoveListener(self)
end
--]]

local function InitData(self)
    self:RefreshAll()
    SFSNetwork.SendMessage(MsgDefines.GetArenaInfo, 1)
end

local function RefreshAll(self)
    
    local selfInfo = DataCenter.ArenaManager:GetSelfInfo()
    local maxChallengeTimes = LuaEntry.DataConfig:TryGetNum("arena","k2")
    self.challengeTimesN:SetText(Localization:GetString("372262", maxChallengeTimes - selfInfo.fightTimes .. "/" .. maxChallengeTimes))

    local good = DataCenter.ItemData:GetItemById(ArenaTicketId)
    local num = good and good.count or 0
    self.ticketCountN:SetText(num)
    
    --self.selfObjN:SetItem()
    
    self.targetList = DataCenter.ArenaManager:GetChallengeTargetList()
    if #self.targetList > 0 then
        self.svTargetN:SetActive(true)
        self.svTargetN:SetTotalCount(#self.targetList)
        self.svTargetN:RefillCells(1)
    else
        self.svTargetN:SetActive(false)
    end
end

local function OnItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.svTargetN:AddComponent(ArenaChallengeItem, itemObj)
    local param = {}
    param.showChallenge = true
    param.index = index
    param.isShowHeroes = self.curDetailIndex == index
    param.callback = function(targetIndex)
        self:JumpToIndex(targetIndex)
    end
    cellItem:SetItem(self.targetList[index], param)
    self.challengeItemsDic[index] = cellItem
end

local function OnItemMoveOut(self, itemObj, index)
    self.challengeItemsDic[index] = nil
    self.svTargetN:RemoveComponent(itemObj.name, ArenaChallengeItem)
end

local function ClearScroll(self)
    self.svTargetN:ClearCells()
    self.svTargetN:RemoveComponents(ArenaChallengeItem)
end

local function JumpToIndex(self, targetIndex)
    if self.curDetailIndex and self.challengeItemsDic[self.curDetailIndex] then
    end
    if not self.curDetailIndex or targetIndex ~= self.curDetailIndex then
        self.svTargetN:ScrollToCell(targetIndex, 1000)
        self.curDetailIndex = targetIndex
    else
        self.curDetailIndex = nil
        TimerManager:GetInstance():DelayInvoke(function()
            self.svTargetN:StopMovement()
        end, 0.1)
    end
end

local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.nextRefreshTime - curTime
    if remainTime > 0 then
        self.refreshBtnTxtN:SetText(UITimeManager:GetInstance():MilliSecondToFmtStringSpecial(remainTime))
    else
        self.refreshBtnTxtN:SetLocalText(110028)
        CS.UIGray.SetGray(self.refreshBtnN.transform, false, true)
        self:DelCountDownTimer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end


--local function JumpToIndex(self, index)
--    self.svTargetN:ScrollToCell(index, 10000)
--end

local function OnClickRefreshBtn(self)
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    if serverTime < self.nextRefreshTime then
        UIUtil.ShowTipsId(120289)
    else
        SFSNetwork.SendMessage(MsgDefines.GetArenaInfo, 1)
        local confS = LuaEntry.DataConfig:TryGetNum("arena", "k20")
        confS = confS == 0 and 5 or confS
        self.nextRefreshTime = serverTime + confS * 1000
        self:AddCountDownTimer()
        self:RefreshRemainTime()
        CS.UIGray.SetGray(self.refreshBtnN.transform, true, true)
    end
end

local function OnClickBuyTicketBtn(self)
    local price = DataCenter.ArenaManager:GetTicketPrice()
    local str = Localization:GetString("372261",price)
    UIUtil.ShowBuyMessage(str,2,nil,nil, function()
        SFSNetwork.SendMessage(MsgDefines.BuyArenaTicket)
    end,nil,nil,nil,price,nil)
end


UIArenaChallengeView.OnCreate = OnCreate 
UIArenaChallengeView.OnDestroy = OnDestroy
UIArenaChallengeView.OnAddListener = OnAddListener
UIArenaChallengeView.OnRemoveListener = OnRemoveListener
UIArenaChallengeView.ComponentDefine = ComponentDefine
UIArenaChallengeView.ComponentDestroy = ComponentDestroy
UIArenaChallengeView.DataDefine = DataDefine
UIArenaChallengeView.DataDestroy = DataDestroy

UIArenaChallengeView.InitData = InitData
UIArenaChallengeView.RefreshAll = RefreshAll
UIArenaChallengeView.OnItemMoveIn = OnItemMoveIn
UIArenaChallengeView.OnItemMoveOut = OnItemMoveOut
UIArenaChallengeView.ClearScroll = ClearScroll
UIArenaChallengeView.JumpToIndex = JumpToIndex
UIArenaChallengeView.AddCountDownTimer = AddCountDownTimer
UIArenaChallengeView.RefreshRemainTime = RefreshRemainTime
UIArenaChallengeView.DelCountDownTimer = DelCountDownTimer
UIArenaChallengeView.OnClickRefreshBtn = OnClickRefreshBtn
UIArenaChallengeView.OnClickBuyTicketBtn = OnClickBuyTicketBtn
return UIArenaChallengeView