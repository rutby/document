---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/7/15 14:36
---
local UISellConfirmView = BaseClass("UISellConfirmView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local panel_path = "UICommonMiniPopUpTitle/panel" 
local title_text_path = "UICommonMiniPopUpTitle/Bg_mid/titleText"
local close_btn_path = "UICommonMiniPopUpTitle/Bg_mid/CloseBtn"
local content_text_path = "UICommonMiniPopUpTitle/DesName"

local left_btn_path = "UICommonMiniPopUpTitle/BtnGo/LeftBtn"
local left_btn_text_path = "UICommonMiniPopUpTitle/BtnGo/LeftBtn/LeftBtnName"

local right_btn_path = "UICommonMiniPopUpTitle/BtnGo/RightBtn"
local right_btn_text_path = "UICommonMiniPopUpTitle/BtnGo/RightBtn/RightBtnName"

local back_toggle_path = "backToggle"
local checkbox_text = "backToggle/Text"

local left_btn_pic_name_path = "UICommonMiniPopUpTitle/BtnGo/LeftBtn/LeftBtnWithPicName"
local left_btn_pic_icon_path = "UICommonMiniPopUpTitle/BtnGo/LeftBtn/icon_go/LeftBtnWithPicIcon"
local right_btn_pic_name_path = "UICommonMiniPopUpTitle/BtnGo/RightBtn/RightBtnWithPicName"
local right_btn_pic_icon_path = "UICommonMiniPopUpTitle/BtnGo/RightBtn/icon_go/RightBtnWithPicIcon"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function ()
        self.ctrl:CloseSelf()
    end)
    self.panel = self:AddComponent(UIButton, panel_path)
    self.panel:SetOnClick(function ()
        self.ctrl:CloseSelf()
    end)
    self.content_text = self:AddComponent(UITextMeshProUGUIEx, content_text_path)

    self.left_btn = self:AddComponent(UIButton, left_btn_path)
    self.left_btn_text = self:AddComponent(UITextMeshProUGUIEx, left_btn_text_path)

    self.right_btn = self:AddComponent(UIButton, right_btn_path)
    self.right_btn_text = self:AddComponent(UITextMeshProUGUIEx, right_btn_text_path)

    self.right_btn:SetOnClick(function ()
        self:OnCancelClick()
    end)
    
    self.checkbox_text = self:AddComponent(UITextMeshProUGUIEx, checkbox_text)

    self.back_toggle = self:AddComponent(UIToggle, back_toggle_path)
    self.back_toggle:SetIsOn(false)

    self.left_btn_pic_name = self:AddComponent(UITextMeshProUGUIEx, left_btn_pic_name_path)
    self.left_btn_pic_icon = self:AddComponent(UIImage, left_btn_pic_icon_path)
    self.right_btn_pic_name = self:AddComponent(UITextMeshProUGUIEx, right_btn_pic_name_path)
    self.right_btn_pic_icon = self:AddComponent(UIImage, right_btn_pic_icon_path)
end


local function OnCancelClick(self)
    self.ctrl:OnCancelClick()
end

local function ToggleControlBorS(self)
    self.ctrl:OnCheckBoxClick(self.back_toggle:GetIsOn())
end

-- title:标题文本
-- contentText:描述文本
-- btnNum:按钮个数
-- text1:左边按钮名称（当btnNoUseDialog为true时表示内容，为空时表示多语言）
-- text2:右边按钮名称（当btnNoUseDialog为true时表示内容，为空时表示多语言）
-- sureAction:点击左边按钮回调函数
-- toggleAction:点击中间复选框按钮回调函数
-- cancelAction:点击右边按钮回调函数
-- closeAction:点击x和黑色背景回调函数
-- isChangeImg:为true 左边红色按钮，右边黄色按钮  为空 左边蓝色按钮，右边黄色按钮
-- toggleText:中间复选框文本描述
-- btnNoUseDialog:text1和text2类型 为true表示文本 为空表示多语言
-- leftBtnPicName:左边按钮图片路径
-- rightBtnPicName:右边按钮图片路径
local function SetData(self,title,contentText,btnNum,text1,text2,sureAction,toggleAction,cancelAction,closeAction,isChangeImg,toggleText, btnNoUseDialog, leftBtnPicName, rightBtnPicName)
    self.title = title
    self.content = contentText
    self.btnNum = btnNum
    self.sureAction = sureAction
    self.cancelAction = cancelAction
    self.closeAction = closeAction
    self.toggleAction =toggleAction
    self.isChangeImg = isChangeImg
    self.text1 = text1
    self.text2 = text2
    self.OnCloseClick = false
    self.toggleText = toggleText
    self.btnNoUseDialog = btnNoUseDialog
    self.leftBtnPicName = leftBtnPicName
    self.rightBtnPicName = rightBtnPicName
end

local function RefreshView(self)
  --  self.title_text:SetLocalText(128001)  
  --  self.content_text:SetLocalText(128004)
    if self.toggleText~=nil and self.toggleText~="" then
        self.checkbox_text:SetText(self.toggleText)
    else
        self.checkbox_text:SetLocalText(120059)
    end
    if self.title~=nil and self.title~="" then
        self.title_text:SetText(self.title)
    else
        self.title_text:SetLocalText(100378)
    end
    if self.content~=nil and self.content~="" then
        self.content_text:SetText(self.content)
    else
        self.content_text:SetText("")
    end
    if self.btnNum~=nil then
        self.left_btn:SetActive(self.btnNum>0)
        self.right_btn:SetActive(self.btnNum>1)
        if self.btnNum > 2  then
            self.btnNum = 2
        end
    else
        self.left_btn:SetActive(false)
        self.right_btn:SetActive(false)
    end
    if self.left_btn:GetActive() then
        if self.sureAction then
            self.left_btn:SetOnClick(function ()
                self:OnCloseInTimer()
                self.sureAction()
            end)
        else
            self.left_btn:SetOnClick(function ()
                self:OnCancelClick()
            end)
        end

        local useText = nil
        if self.leftBtnPicName == nil or self.leftBtnPicName == "" then
            self.left_btn_text:SetActive(true)
            self.left_btn_pic_name:SetActive(false)
            self.left_btn_pic_icon:SetActive(false)
            useText = self.left_btn_text
        else
            self.left_btn_text:SetActive(false)
            self.left_btn_pic_name:SetActive(true)
            self.left_btn_pic_icon:SetActive(true)
            useText = self.left_btn_pic_name
            self.left_btn_pic_icon:LoadSprite(self.leftBtnPicName)
        end
        
        if self.text1~=nil and self.text1~="" then
            if self.btnNoUseDialog then
                useText:SetText(self.text1)
            else
                useText:SetLocalText(self.text1)
            end
        else
            useText:SetLocalText(GameDialogDefine.CONFIRM)
        end
    end
    if self.right_btn:GetActive() then
        if self.cancelAction then
            self.right_btn:SetOnClick(function ()
                self:OnCloseInTimer()
                self.cancelAction()
            end)
        else
            self.right_btn:SetOnClick(function ()
                self:OnCancelClick()
            end)
        end
        local useText = nil
        if self.rightBtnPicName == nil or self.rightBtnPicName == "" then
            self.right_btn_text:SetActive(true)
            self.right_btn_pic_name:SetActive(false)
            self.right_btn_pic_icon:SetActive(false)
            useText = self.right_btn_text
        else
            self.right_btn_text:SetActive(false)
            self.right_btn_pic_name:SetActive(true)
            self.right_btn_pic_icon:SetActive(true)
            useText = self.right_btn_pic_name
            self.right_btn_pic_icon:LoadSprite(self.rightBtnPicName)
        end

        if self.text2~=nil and self.text2~="" then
            if self.btnNoUseDialog then
                useText:SetText(self.text2)
            else
                useText:SetLocalText(self.text2)
            end
        else
            useText:SetLocalText(GameDialogDefine.CANCEL)
        end
    end
    if self.closeAction then
        self.close_btn:SetOnClick(function ()
            self:OnCloseInTimer()
            self.closeAction()
        end)
    else
        self.close_btn:SetOnClick(function ()
            self:OnCancelClick()
        end)
    end
    
    self.back_toggle:SetOnValueChanged(nil)
    self.back_toggle:SetIsOn(false)
    self.back_toggle:SetOnValueChanged(function()
        if self.toggleAction then
            self.toggleAction(not self.back_toggle:GetIsOn() )
        end
    end)

    if self.toggleAction == nil then
        --如果没有设置中间不再提示的按钮回调 这个按钮就是没作用的 所以要隐藏
        self.back_toggle:SetActive(false)
    else
        --设置了回调的话 需要显示
        self.back_toggle:SetActive(true)
    end

    if self.isChangeImg then
        self.left_btn:LoadSprite(string.format(LoadPath.CommonNewPath,"Common_btn_red101"))
        self.right_btn:LoadSprite(string.format(LoadPath.CommonNewPath,"Common_btn_yellow101"))
    else
        self.right_btn:LoadSprite(string.format(LoadPath.CommonNewPath,"Common_btn_yellow101"))
        self.left_btn:LoadSprite(string.format(LoadPath.CommonNewPath,"Common_btn_green101"))
    end
end

local function OnDestroy(self)
    self.title_text = nil
    self.close_btn = nil
    self.content_text = nil

    self.left_btn = nil
    self.left_btn_text = nil
    
    self.right_btn = nil
    self.right_btn_text = nil
    
    self.checkbox_text = nil
    self.back_toggle = nil
    self.isChangeImg = nil

    self.toggleText = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:RefreshView()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end


local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function OnCloseInTimer(self)
    self.OnCloseClick =true
    local closeTimer = TimerManager:GetInstance():GetTimer(0.1, function()
        if self.OnCloseClick and self.ctrl then
            self.ctrl:CloseSelf()
        end
    end, nil, true, false, false)

    closeTimer:Start()
end

UISellConfirmView.OnCreate = OnCreate
UISellConfirmView.OnDestroy = OnDestroy
UISellConfirmView.OnEnable = OnEnable
UISellConfirmView.OnDisable = OnDisable
UISellConfirmView.OnAddListener = OnAddListener
UISellConfirmView.OnRemoveListener = OnRemoveListener
UISellConfirmView.ComponentDefine = ComponentDefine
UISellConfirmView.OnCancelClick = OnCancelClick
UISellConfirmView.RefreshView = RefreshView
UISellConfirmView.ToggleControlBorS = ToggleControlBorS
UISellConfirmView.SetData = SetData
UISellConfirmView.OnCloseInTimer =OnCloseInTimer
return UISellConfirmView