---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/8/24 16:58
---
local UIActMTTaskCell = BaseClass("UIActMTTaskCell", UIBaseContainer)
local base = UIBaseContainer
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local Localization = CS.GameEntry.Localization
local tipTxt_path = "rewardBg/Tip"
local content_path = "rewardBg/Rewards"
local pro_txt_path = "rewardBg/Txt_Pro"
local getReward_btn_path = "rewardBg/Btn_GetReward"
local getReward_txt_path = "rewardBg/Btn_GetReward/Txt_GetReward"
local completed_txt_path = "rewardBg/Txt_Completed"
local gray_txt_path = "rewardBg/Btn_GetReward/Txt_Gray"
local UIGray = CS.UIGray

local function OnCreate(self)
    base.OnCreate(self)

    self.rewardModels ={}
    self.rewardItemsList = {}
    
    self.tipN = self:AddComponent(UITextMeshProUGUIEx, tipTxt_path)
    self.contentN = self:AddComponent(UIBaseContainer, content_path)
    self._pro_txt = self:AddComponent(UITextMeshProUGUIEx,pro_txt_path)
    self._getReward_btn = self:AddComponent(UIButton,getReward_btn_path)
    self._getReward_btn:SetOnClick(function()
        self:GetRewardClick()
    end)
    self._getReward_txt = self:AddComponent(UITextMeshProUGUIEx,getReward_txt_path)
    
    self._completed_txt = self:AddComponent(UITextMeshProUGUIEx,completed_txt_path)
    self._gray_txt = self:AddComponent(UITextMeshProUGUIEx,gray_txt_path)
end

local function OnDestroy(self)
    self.rewardModels = nil
    self.rewardItemsList = nil
    
    self.tipN = nil
    self.contentN = nil
    base.OnDestroy(self)
end

local function ShowRewards(self,param,str,curDifficulty)
    self.param = param
    local template = string.split(str,";")
    local templateMonster = DataCenter.ActMonsterTowerData:GetTemplateByIndex(tonumber(template[3]))
    local difficulty_des =  Localization:GetString(templateMonster.difficulty_des)
    local difficulty_des_color = self:GetColorByDifficult(tonumber(template[3]))
    local countColor = self:GetCountColorByState(param.state)
    self.tipN:SetLocalText(tonumber(template[1]),string.format(TextColorStr, countColor, template[2]),string.format(TextColorStr, difficulty_des_color, difficulty_des) ,template[4])
    self._pro_txt:SetActive(param.state ~= 1)
    self._pro_txt:SetLocalText(150033,param.num,template[2])
    local isGray = false
    if param.state == 1 or param.num < tonumber(template[2]) then
        isGray = true
    end
    UIGray.SetGray(self._getReward_btn.transform, isGray, param.num >= tonumber(template[2]))
    self._completed_txt:SetActive(param.state == 1)
    self._completed_txt:SetLocalText(371068) 
    self._getReward_btn:SetActive(param.state ~= 1)
    self._gray_txt:SetActive(isGray)
    self._getReward_txt:SetActive(not isGray)
    self._gray_txt:SetLocalText(param.state == 1 and 371068 or 170004)
    self._getReward_txt:SetLocalText(param.state == 1 and 371068 or 170004)
    self:SetAllRewardsDestroy()
    self.rewardModelCount =0
    local list = param.reward
    if list~=nil and #list>0 then
        for i = 1, table.length(list) do
            --复制基础prefab，每次循环创建一次
            self.rewardModelCount= self.rewardModelCount+1
            self.rewardModels[self.rewardModelCount] = self:GameObjectInstantiateAsync(UIAssets.UICommonItemSize, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.contentN.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                -- go.transform.localScale = Vector3.New(0.54, 0.54, 1)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.contentN:AddComponent(UICommonItem,nameStr)
                cell:ReInit(list[i])
                table.insert(self.rewardItemsList,cell)
            end)
        end
    end
end

local function GetCountColorByState(self,state)
    if state == 1 then
        return TextColorGreen
    end
    return TextColorRed
end

local function GetColorByDifficult(self,difficulty)
    if difficulty == 1 then
        return TextColorGreen
    elseif difficulty == 2 then
        return TextQualityColorBlue
    elseif difficulty == 3 then
        return TextQualityColorPurple
    elseif difficulty == 4 then
        return TextQualityColorOrange
    elseif difficulty == 5 then
        return TextColorRed
    end
    return TextColorGreen
end

local function SetAllRewardsDestroy(self)
    self.contentN:RemoveComponents(UICommonItem)
    if self.rewardModels~=nil then
        for k,v in pairs(self.rewardModels) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.rewardModels ={}
    self.rewardItemsList = {}
end

local function GetRewardClick(self)
    if self.param.state == 1 then
        return
    end
    SFSNetwork.SendMessage(MsgDefines.ReceiveChallengeActTaskReward, self.view.actId,self.param.id)
end

UIActMTTaskCell.OnCreate = OnCreate
UIActMTTaskCell.OnDestroy = OnDestroy


UIActMTTaskCell.ShowRewards = ShowRewards
UIActMTTaskCell.SetAllRewardsDestroy = SetAllRewardsDestroy
UIActMTTaskCell.GetRewardClick = GetRewardClick
UIActMTTaskCell.GetColorByDifficult = GetColorByDifficult
UIActMTTaskCell.GetCountColorByState = GetCountColorByState

return UIActMTTaskCell