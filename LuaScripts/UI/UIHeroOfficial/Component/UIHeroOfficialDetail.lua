---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/7/26 18:01
---

local UIHeroOfficialDetail = BaseClass("UIHeroOfficialDetail", UIBaseContainer)
local base = UIBaseContainer
local UIHeroOfficialHeroItem = require "UI.UIHeroOfficial.Component.UIHeroOfficialHeroItem"
local UIHeroOfficialSlot = require "UI.UIHeroOfficial.Component.UIHeroOfficialSlot"
local UIHeroOfficialDetailTip = require "UI.UIHeroOfficial.Component.UIHeroOfficialDetailTip"
local Localization = CS.GameEntry.Localization

local root_path = "Root"
local title_path = "Root/Left/TitleBg/Title"
local effect_area_path = "Root/Left/EffectArea"
local subtitle_path = "Root/Left/EffectArea/Line/Subtitle"
local effect_bg_path = "Root/Left/EffectArea/EffectBg"
local effect_val_path = "Root/Left/EffectArea/EffectBg/EffectVal"
local effect_info_path = "Root/Left/EffectArea/EffectBg/EffectInfo"
local cond_area_path = "Root/Left/CondArea"
local desc_path = "Root/Left/CondArea/Desc"
local cond_go_path = "Root/Left/CondArea/CondList/Cond_%s"
local cond_icon_path = "Root/Left/CondArea/CondList/Cond_%s/CondIcon_%s"
local cond_check_path = "Root/Left/CondArea/CondList/Cond_%s/CondCheck_%s"
local slot_path = "Root/Left/UIHeroOfficialSlot"
local confirm_btn_path = "Root/Left/ConfirmBtn"
local confirm_text_path = "Root/Left/ConfirmBtn/ConfirmText"
local scroll_view_path = "Root/Right/ScrollView"
local back_path = "safeArea/Back"
local close_path = "UICommonPanel"
local detail_tip_path = "UIHeroOfficialDetailTip"

local EffectAreaY = { 150, 192 }
local SlotY = { -64, -124 }

local COND_COUNT = 2
local TIP_OFFSET_Y = 25

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.root_anim = self:AddComponent(UIAnimator, root_path)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.subtitle_text = self:AddComponent(UITextMeshProUGUIEx, subtitle_path)
    self.subtitle_text:SetLocalText(133005)
    self.effect_area_go = self:AddComponent(UIBaseContainer, effect_area_path)
    self.effect_bg_go = self:AddComponent(UIBaseContainer, effect_bg_path)
    self.effect_val_text = self:AddComponent(UITweenNumberText_TextMeshPro, effect_val_path)
    self.effect_val_text:SetDecimal(true)
    self.effect_info_btn = self:AddComponent(UIButton, effect_info_path)
    self.effect_info_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:ShowDetailTipForEffect()
    end)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.cond_area_go = self:AddComponent(UIBaseContainer, cond_area_path)
    self.cond_gos = {}
    self.cond_icon_btns = {}
    self.cond_check_gos = {}
    for i = 1, COND_COUNT do
        self.cond_gos[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(cond_go_path, i))
        self.cond_icon_btns[i] = self:AddComponent(UIButton, string.format(cond_icon_path, i, i))
        self.cond_icon_btns[i]:SetOnClick(function()
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
            self:ShowDetailTipForCondition(i)
        end)
        self.cond_check_gos[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(cond_check_path, i, i))
    end
    self.slot = self:AddComponent(UIHeroOfficialSlot, slot_path)
    self.slot:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnSlotClick()
    end)
    self.confirm_btn = self:AddComponent(UIButton, confirm_btn_path)
    self.confirm_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnConfirmClick()
    end)
    self.confirm_text = self:AddComponent(UITextMeshProUGUIEx, confirm_text_path)
    self.confirm_text:SetLocalText(GameDialogDefine.CONFIRM)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
    self.back_btn = self:AddComponent(UIButton, back_path)
    self.back_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBackClick()
    end)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBackClick()
    end)
    self.detail_tip = self:AddComponent(UIHeroOfficialDetailTip, detail_tip_path)
end

local function ComponentDestroy(self)
    self.root_anim = nil
    self.title_text = nil
    self.subtitle_text = nil
    self.effect_area_go = nil
    self.effect_bg_go = nil
    self.effect_val_text = nil
    self.effect_info_btn = nil
    self.desc_text = nil
    self.cond_area_go = nil
    self.cond_gos = nil
    self.cond_icon_btns = nil
    self.cond_check_gos = nil
    self.slot = nil
    self.confirm_btn = nil
    self.confirm_text = nil
    self.scroll_view = nil
    self.back_btn = nil
    self.close_btn = nil
    self.detail_tip = nil
end

local function DataDefine(self)
    self.camp = 0
    self.pos = 0
    self.heroUuidList = {}
    self.selectHeroUuid = nil
    self.itemDict = {}
end

local function DataDestroy(self)
    self.camp = nil
    self.pos = nil
    self.heroUuidList = nil
    self.selectHeroUuid = nil
    self.itemDict = nil
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.SetHeroOfficial, self.OnSetHeroOfficial)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.SetHeroOfficial, self.OnSetHeroOfficial)
    base.OnRemoveListener(self)
end

local function OnCreateCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local heroUuid = self.heroUuidList[index]
    local item = self.scroll_view:AddComponent(UIHeroOfficialHeroItem, itemObj)
    item:SetData(self.camp, self.pos, heroUuid)
    item:SetSelected(self.selectHeroUuid == heroUuid)
    item:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnItemClick(heroUuid)
    end)
    self.itemDict[index] = item
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UIHeroOfficialHeroItem)
    self.itemDict[index] = nil
end

local function ShowScroll(self)
    self.heroUuidList = self:GetHeroUuidList()
    self.scroll_view:SetTotalCount(#self.heroUuidList)
    if #self.heroUuidList > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:SetActive(false)
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UIHeroOfficialHeroItem)
end

local function SetData(self, camp, pos)
    self.camp = camp
    self.pos = pos
    self.template = DataCenter.HeroOfficialManager:GetTemplate(camp, pos)
    self.data = DataCenter.HeroOfficialManager:GetData(self.template.id)

    local heroUuid = self.data and self.data.heroUuid
    self.selectHeroUuid = heroUuid

    self.title_text:SetLocalText(self.template.name)

    local extraVal = self.template.extraVal
    if self.template:GetValType() == "1" then
        extraVal = extraVal .. "%"
    end
    self.desc_text:SetLocalText(133018, extraVal)

    self:ShowScroll()
    self:Refresh(true)
    self.detail_tip:SetActive(false)
end

local function Refresh(self, isInit)
    self.slot:SetCamp(self.camp)
    self.slot:SetHeroUuid(self.selectHeroUuid)
    for _, item in pairs(self.itemDict) do
        item:SetSelected(item.heroUuid == self.selectHeroUuid)
    end

    local posYIndex = 1
    for i, condition in ipairs(self.template.extraCondition) do
        if condition ~= 0 then
            local icon = ""
            if i == 1 then
                icon = HeroUtils.GetRarityIconName(condition, true)
            elseif i == 2 then
                icon = HeroUtils.GetTagIconAndName(condition)
            end
            local check = DataCenter.HeroOfficialManager:CheckHeroExtraCondition(self.camp, self.pos, self.selectHeroUuid, i)
            self.cond_gos[i]:SetActive(true)
            self.cond_icon_btns[i]:LoadSprite(icon)
            self.cond_check_gos[i]:SetActive(check)
            posYIndex = 2
        else
            self.cond_gos[i]:SetActive(false)
        end
    end
    self.cond_area_go:SetActive(posYIndex == 2)
    self.effect_area_go.rectTransform:Set_anchoredPosition(0, EffectAreaY[posYIndex])
    self.slot.rectTransform:Set_anchoredPosition(0, SlotY[posYIndex])

    local val = DataCenter.HeroOfficialManager:GetEffectVal(self.camp, self.pos, self.selectHeroUuid)
    local maxVal = DataCenter.HeroOfficialManager:GetEffectMaxVal(self.camp, self.pos)
    if isInit or math.abs(self.effect_val_text:GetCurNum() - val) < 0.2 then
        local desc = GetTableData(TableName.EffectNumDesc, self.template.effect, "des")
        local format = "<color=white>%s:</color> +%s"
        if self.template:GetValType() == "1" then
            format = format .. "%%"
        end
        
        self.effect_val_text:SetTextFunc(function(v)
            local str = string.format(format, Localization:GetString(desc), v)
            if v == maxVal then
                str = str .. " " .. Localization:GetString("110019")
            end
            return str
        end)
        self.effect_val_text:SetNum(val)
    else
        self.effect_val_text:TweenToNum(val, 0.3)
    end

    -- unity problem
    TimerManager:GetInstance():DelayInvoke(function()
        if self.effect_bg_go ~= nil then
            CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.effect_bg_go.rectTransform)
        end
    end, 0.05)
end

local function Show(self)
    self:SetActive(true)
    self.root_anim:Play("CommonPopup_movein", 0, 0)
end

local function Send(self)
    SFSNetwork.SendMessage(MsgDefines.SetHeroOfficial, self.template.id, self.selectHeroUuid or 0)
end

local function ShowDetailTipForEffect(self)
    local maxVal = DataCenter.HeroOfficialManager:GetEffectMaxVal(self.camp, self.pos)
    if self.template:GetValType() == "1" then
        maxVal = maxVal .. "%"
    end
    local str = Localization:GetString("133044", maxVal)

    local position = self.effect_info_btn.transform.position
    position.y = position.y + TIP_OFFSET_Y
    self.detail_tip.root_anim.transform.position = position
    self.detail_tip:SetData(str)
    self.detail_tip:Show()
end

local function ShowDetailTipForCondition(self, i)
    local str = ""
    if i == 1 then
        local rarityName = HeroUtils.GetRarityName(self.template.extraCondition[i])
        str = Localization:GetString("133003", rarityName)
    elseif i == 2 then
        local _, tagName = HeroUtils.GetTagIconAndName(self.template.extraCondition[i])
        str = Localization:GetString("133004", tagName)
    end

    local position = self.cond_icon_btns[i].transform.position
    position.y = position.y + TIP_OFFSET_Y
    self.detail_tip.root_anim.transform.position = position
    self.detail_tip:SetData(str)
    self.detail_tip:Show()
end

local function GetHeroUuidList(self)
    local heroDataDict = DataCenter.HeroDataManager:GetMasterHeroList()
    local heroDataList = {}
    local heroUuidList = {}
    local campType = nil
    for _, heroData in pairs(heroDataDict) do
        campType = GetTableData(HeroUtils.GetHeroXmlName(), heroData.heroId, "camp")
        if campType == self.camp then
            table.insert(heroDataList, heroData)
        end
    end
    table.sort(heroDataList, function(heroDataA, heroDataB)
        if heroDataA.uuid == self.selectHeroUuid then
            return true
        elseif heroDataB.uuid == self.selectHeroUuid then
            return false
        end
        
        local posA = DataCenter.HeroOfficialManager:GetHeroPos(heroDataA.uuid)
        local posB = DataCenter.HeroOfficialManager:GetHeroPos(heroDataB.uuid)
        if posA == nil and posB ~= nil then
            return true
        elseif posA ~= nil and posB == nil then
            return false
        end
        
        local valA = DataCenter.HeroOfficialManager:GetEffectVal(self.camp, self.pos, heroDataA.uuid)
        local valB = DataCenter.HeroOfficialManager:GetEffectVal(self.camp, self.pos, heroDataB.uuid)
        if valA ~= valB then
            return valA > valB
        end
        
        if heroDataA.rarity ~= heroDataB.rarity then
            return heroDataA.rarity < heroDataB.rarity
        elseif heroDataA.quality ~= heroDataB.quality then
            return heroDataA.quality > heroDataB.quality
        elseif heroDataA.level ~= heroDataB.level then
            return heroDataA.level > heroDataB.level
        else
            return heroDataA.heroId < heroDataB.heroId
        end
    end)
    for _, heroData in ipairs(heroDataList) do
        table.insert(heroUuidList, heroData.uuid)
    end
    return heroUuidList
end

local function OnConfirmClick(self)
    self:SetActive(false)
end

local function OnBackClick(self)
    self:SetActive(false)
end

local function OnItemClick(self, heroUuid)
    if self.selectHeroUuid ~= heroUuid then
        local oldPos = DataCenter.HeroOfficialManager:GetHeroPos(heroUuid)
        if oldPos ~= nil and oldPos ~= self.pos then
            local oldTemplate = DataCenter.HeroOfficialManager:GetTemplate(self.camp, oldPos)
            local tip = Localization:GetString("133007", Localization:GetString(tostring(oldTemplate.name)))
            UIUtil.ShowMessage(tip, 2, GameDialogDefine.CANCEL, GameDialogDefine.CONFIRM, nil, function()
                self.selectHeroUuid = heroUuid
                self:Refresh(false)
                self:Send()
            end)
        else
            self.selectHeroUuid = heroUuid
            self:Refresh(false)
            self:Send()
        end
    else
        self.selectHeroUuid = nil
        self:Refresh(false)
        self:Send()
    end
end

local function OnSlotClick(self)
    if self.selectHeroUuid ~= nil then
        self.selectHeroUuid = nil
        self:Refresh(false)
        self:Send()
    else
        UIUtil.ShowTipsId(132232)
    end
end

local function OnSetHeroOfficial(self)
    self:Refresh(false)
end

UIHeroOfficialDetail.OnCreate= OnCreate
UIHeroOfficialDetail.OnDestroy = OnDestroy
UIHeroOfficialDetail.ComponentDefine = ComponentDefine
UIHeroOfficialDetail.ComponentDestroy = ComponentDestroy
UIHeroOfficialDetail.DataDefine = DataDefine
UIHeroOfficialDetail.DataDestroy = DataDestroy
UIHeroOfficialDetail.OnEnable = OnEnable
UIHeroOfficialDetail.OnDisable = OnDisable
UIHeroOfficialDetail.OnAddListener = OnAddListener
UIHeroOfficialDetail.OnRemoveListener = OnRemoveListener

UIHeroOfficialDetail.OnCreateCell = OnCreateCell
UIHeroOfficialDetail.OnDeleteCell = OnDeleteCell
UIHeroOfficialDetail.ShowScroll = ShowScroll
UIHeroOfficialDetail.ClearScroll = ClearScroll

UIHeroOfficialDetail.SetData = SetData
UIHeroOfficialDetail.Refresh = Refresh
UIHeroOfficialDetail.Show = Show
UIHeroOfficialDetail.Send = Send
UIHeroOfficialDetail.ShowDetailTipForEffect = ShowDetailTipForEffect
UIHeroOfficialDetail.ShowDetailTipForCondition = ShowDetailTipForCondition
UIHeroOfficialDetail.GetHeroUuidList = GetHeroUuidList
UIHeroOfficialDetail.OnConfirmClick = OnConfirmClick
UIHeroOfficialDetail.OnBackClick = OnBackClick
UIHeroOfficialDetail.OnItemClick = OnItemClick
UIHeroOfficialDetail.OnSlotClick = OnSlotClick

UIHeroOfficialDetail.OnSetHeroOfficial = OnSetHeroOfficial

return UIHeroOfficialDetail