---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/3/20 21:46
---
local UIThroneDetailCtrl = BaseClass("UIThroneDetailCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization
local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIThroneDetail)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function SetMemberData(self,list,uuid,leaderUuid)
    self.memberList = list
    self.teamUuid = uuid
    self.leaderUuid = leaderUuid
end
local function OnCloseClick(self)
    self:CloseSelf()
end

local function GetPlayerIdList(self)
    local list = {}
    if self.memberList ~= nil then
        table.insertto(list, table.keys(self.memberList))
    end
    return list
end

local function GetPlayerItemData(self, marchUuid)
    local oneData = {}
    if self.memberList~=nil then
        if self.memberList[marchUuid] ~= nil then
            local data  = self.memberList[marchUuid]
            oneData.ownerName = data.ownerName
            oneData.status = data.status
            oneData.endTime = data.endTime
            oneData.startTime =data.startTime
            oneData.leader = false
            oneData.cancel = false
            oneData.ownerUid = data.ownerUid
            oneData.teamUuid = data.teamUuid
            oneData.ownerIcon = data.ownerIcon
            oneData.ownerIconVer = data.ownerIconVer
            oneData.headBg = data:GetHeadBgImg()
        end
    end
    return oneData
end

--获取玩家出兵信息
local function GetPlayerSoldierData(self, marchUuid)
    local showList = {}
    if self.memberList ~= nil then
        --所参与人员
        if next(self.memberList) and self.memberList[marchUuid] then
            local data = self.memberList[marchUuid].armyInfos
            if marchUuid == self.leaderUuid then
                data = self.memberList[marchUuid].armyInfo
            end
            local heros = data.heros
            showList.heros = {}
            for i = 1, #heros do
                showList.heros[i] = {}
                showList.heros[i].heroId = heros[i].heroId
                showList.heros[i].quality = heros[i].heroQuality
                showList.heros[i].lv = heros[i].heroLevel
                showList.heros[i].rankLv = heros[i].rankLv
                showList.heros[i].stage = heros[i].stage
                showList.heros[i].skillInfos = heros[i].skillInfos
                showList.heros[i].rankId = 1
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heros[i].heroId)
                if config == nil then
                    Logger.LogError('hero config not found! heroId:' .. heros[i].heroId)
                    return
                end
                local maxMilitaryRankId = config['max_rank_level'] or 1
                for rankId = 1, maxMilitaryRankId do
                    local mailLevel = GetTableData(TableName.HeroMilitaryRank, rankId, 'level')
                    --local mailStage = GetTableData(TableName.HeroMilitaryRank, rankId, 'stage')
                    if  heros[i].rankLv == mailLevel then
                        showList.heros[i].rankId = rankId
                        break
                    end
                end
            end
            local soldiers = data.soldiers
            showList.soldiers = {}
            for i = 1, #soldiers do
                showList.soldiers[i] = {}
                showList.soldiers[i].armsId = soldiers[i].armsId
                showList.soldiers[i].type = soldiers[i].type
                showList.soldiers[i].data = DataCenter.ArmyTemplateManager:GetArmyTemplate(soldiers[i].armsId)
                showList.soldiers[i].count = soldiers[i].total - soldiers[i].lost
            end
        end
    end
    return showList
end



local function OnRetreatClick(self,marchUuid)
    if self.memberList ~= nil and self.memberList[marchUuid] ~= nil then
        self.memberList[marchUuid] = nil
        SFSNetwork.SendMessage(MsgDefines.AllianceWarRetreat,self.teamUuid,marchUuid)
        --self:CloseSelf()
    end
end
local function OnCancelClick(self,bUuid,uuid)
    SFSNetwork.SendMessage(MsgDefines.AssistanceTeamRetreat, bUuid, uuid)
end

local function OnOpenClick(self)
    
end

UIThroneDetailCtrl.CloseSelf = CloseSelf
UIThroneDetailCtrl.Close = Close
UIThroneDetailCtrl.GetPlayerSoldierData = GetPlayerSoldierData
UIThroneDetailCtrl.GetPlayerIdList = GetPlayerIdList
UIThroneDetailCtrl.GetPlayerItemData = GetPlayerItemData
UIThroneDetailCtrl.OnRetreatClick = OnRetreatClick
UIThroneDetailCtrl.OnCloseClick = OnCloseClick
UIThroneDetailCtrl.SetMemberData =SetMemberData
UIThroneDetailCtrl.OnCancelClick =OnCancelClick
UIThroneDetailCtrl.OnOpenClick= OnOpenClick
return UIThroneDetailCtrl