---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/29 15:18
---

local base = UIBaseView
local UIUseItemView = BaseClass("UIUseItemView", base)--Variable
local UICommonItem = require "UI.UICommonItem.UICommonItem"

local title_path = "UICommonMidPopUpTitle/bg_mid/titleText"
local closeBtn_path = "UICommonMidPopUpTitle/bg_mid/CloseBtn"
local bgBtn_path = "UICommonMidPopUpTitle/panel"
local goodsItem_path = "offset/goodsCell"
local subBtn_path = "offset/subBtn"
local addBtn_path = "offset/addBtn"
local slider_path = "offset/Slider"
local curNumIpt_path = "offset/curCountIpt"

local use_btn_path = "offset/useBtn"
local use_btn_text_path = "offset/useBtn/useBtnText"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:InitData()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.titleN:SetLocalText(100161)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickCloseBtn()
    end)
    self.bgBtnN = self:AddComponent(UIButton, bgBtn_path)
    self.bgBtnN:SetOnClick(function()
        self:OnClickCloseBtn()
    end)
    self.goodsItemN = self:AddComponent(UICommonItem, goodsItem_path)
    self.subBtnN = self:AddComponent(UIButton, subBtn_path)
    self.subBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Dec)
        self:OnClickSubBtn()
    end)
    self.addBtnN = self:AddComponent(UIButton, addBtn_path)
    self.addBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Add)
        self:OnClickAddBtn()
    end)
    self.sliderN = self:AddComponent(UISlider, slider_path)
    self.sliderN:SetOnValueChanged(function (value)
        self:OnSliderValueChange(value)
    end)
    self.curNumIptN = self:AddComponent(UIInput, curNumIpt_path)
    self.curNumIptN:SetOnEndEdit(function (value)
        self:OnCurNumIptValueChange(value)
    end)
    self.use_btn = self:AddComponent(UIButton, use_btn_path)
    self.use_btn_text = self:AddComponent(UIText, use_btn_text_path)
    self.use_btn_text:SetLocalText(110046)
    self.use_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnUseClick()
    end)
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.closeBtnN = nil
    self.bgBtnN = nil
    self.goodsItemN = nil
    self.subBtnN = nil
    self.addBtnN = nil
    self.sliderN = nil
    self.curNumIptN = nil
    self.use_btn = nil
    self.use_btn_text = nil
end

local function DataDefine(self)
    self.curCount = 1
end

local function DataDestroy(self)
    self.curCount = 1
end

local function InitData(self)
    local itemId = self:GetUserData()
    self.itemId = itemId
    self:InitUI()
end

local function InitUI(self)
    local para = {}
    para.rewardType = RewardType.GOODS
    para.itemId = self.itemId
    local itemCount = DataCenter.ItemData:GetItemCount(self.itemId)
    para.count = itemCount
    self.limitCount = itemCount
    self.goodsItemN:ReInit(para)
    self.curNumIptN:SetText(self.curCount)
    self:TrySetCurNum(self.curCount)
end

local function TrySetCurNum(self, tempNum)
    tempNum = tonumber(tempNum) or self.curCount
    if tempNum <= 0 then
        tempNum = 1
    elseif tempNum > self.limitCount then
        tempNum = self.limitCount
    end
    tempNum = Mathf.Round(tempNum)
    self.curCount = tempNum

    self.curNumIptN:SetText(self.curCount)
    self.sliderN:SetValue(self.curCount / self.limitCount)
end

local function OnClickCloseBtn(self)
    self.ctrl:CloseSelf()
end

local function OnClickSubBtn(self)
    local num = self.curCount - 1
    self:TrySetCurNum(num)
end

local function OnClickAddBtn(self)
    local num = self.curCount + 1
    self:TrySetCurNum(num)
end

local function OnSliderValueChange(self, value)
    local num = self.limitCount * value
    self:TrySetCurNum(num)
end

local function OnCurNumIptValueChange(self, value)
    self:TrySetCurNum(value)
end

local function OnUseClick(self)
    local data = DataCenter.ItemData:GetItemById(self.itemId)
    if self.curCount <= 0 or data == nil or data.count < self.curCount then
        return
    end
    SFSNetwork.SendMessage(MsgDefines.ItemUse, {uuid = data.uuid, num = self.curCount ,useItemFromType = 1})
    self.ctrl:CloseSelf()
end

UIUseItemView.OnCreate = OnCreate
UIUseItemView.OnDestroy = OnDestroy
UIUseItemView.ComponentDefine = ComponentDefine
UIUseItemView.ComponentDestroy = ComponentDestroy
UIUseItemView.DataDefine = DataDefine
UIUseItemView.DataDestroy = DataDestroy
UIUseItemView.InitData = InitData
UIUseItemView.InitUI = InitUI
UIUseItemView.TrySetCurNum = TrySetCurNum
UIUseItemView.OnClickCloseBtn = OnClickCloseBtn
UIUseItemView.OnClickSubBtn = OnClickSubBtn
UIUseItemView.OnClickAddBtn = OnClickAddBtn
UIUseItemView.OnSliderValueChange = OnSliderValueChange
UIUseItemView.OnCurNumIptValueChange = OnCurNumIptValueChange
UIUseItemView.OnUseClick = OnUseClick

return UIUseItemView