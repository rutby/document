---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/9/20 11:20
---
--local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local WorldMarchDetailItem = BaseClass("WorldMarchDetailItem", UIBaseContainer)
local FormationHeroItem = require "UI.UIFormation.UIFormationSelectListNew.Component.FormationHeroItem"
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local hero_1_obj_path = "mainContent/layout/HeroObj1"
local hero_2_obj_path = "mainContent/layout/HeroObj2"
local hero_3_obj_path = "mainContent/layout/HeroObj3"
local hero_4_obj_path = "mainContent/layout/HeroObj4"
local hero_5_obj_path = "mainContent/layout/HeroObj5"
local index_txt_path = "mainContent/leader/index"
local pos_txt_path = "mainContent/posTxt"
local target_txt_path = "mainContent/stateTxt"
local solider_num_path = "mainContent/soldierNum"
local slider_path = "mainContent/sliderLayout/Slider"
local state_txt_path = "mainContent/sliderLayout/Slider/FillArea/progressTxt"
local state_out_txt_path = "mainContent/sliderLayout/stateOutTxt"
local time_txt_path =  "mainContent/sliderLayout/Slider/FillArea/TimeTxt"
local return_btn_path = "mainContent/sliderLayout/returnButton"
local goto_left_btn_path = "mainContent/gotoLeftButton"
local goto_right_btn_path = "mainContent/gotoRightButton"
local function OnCreate(self)
    base.OnCreate(self)
    self.heroList = {}
    local hero_1 = self:AddComponent(UIBaseContainer, hero_1_obj_path)
    self.heroList[1] = hero_1
    local hero_2 = self:AddComponent(UIBaseContainer, hero_2_obj_path)
    self.heroList[2] = hero_2
    local hero_3 = self:AddComponent(UIBaseContainer, hero_3_obj_path)
    self.heroList[3] = hero_3
    local hero_4 = self:AddComponent(UIBaseContainer, hero_4_obj_path)
    self.heroList[4] = hero_4
    local hero_5 = self:AddComponent(UIBaseContainer, hero_5_obj_path)
    self.heroList[5] = hero_5
    self.index_txt = self:AddComponent(UIText, index_txt_path)
    self.pos_txt = self:AddComponent(UIText, pos_txt_path)
    self.target_txt = self:AddComponent(UIText, target_txt_path)
    self.solider_num = self:AddComponent(UIText, solider_num_path)
    self.state_txt_out = self:AddComponent(UIText, state_out_txt_path)
    self.state_txt = self:AddComponent(UIText, state_txt_path)
    self.time_txt = self:AddComponent(UIText, time_txt_path)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.return_btn = self:AddComponent(UIButton,return_btn_path)
    self.return_btn:SetOnClick(function ()
        self:OnReturnClick()
    end)
    self.goto_left_btn = self:AddComponent(UIButton,goto_left_btn_path)
    self.goto_left_btn:SetOnClick(function ()
        self:OnLeftClick()
    end)
    self.goto_right_btn = self:AddComponent(UIButton,goto_right_btn_path)
    self.goto_right_btn:SetOnClick(function ()
        self:OnRightClick()
    end)
    self.isUpdate = false
end

local function OnDestroy(self)
    self:OnClearHeroList()
    base.OnDestroy(self)
end
local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnClearHeroList(self)
    table.walk(self.heroList,function(k,v)
        v:RemoveComponents(FormationHeroItem)
    end)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.model = {}
end

local function RefreshHeroList(self,formationData)
    self:OnClearHeroList()
    local count = #formationData.heroDataList
    table.walk(self.heroList,function(k,v)
        if k<=count then
            if self.model[k]==nil then
                self.model[k] = self:GameObjectInstantiateAsync(UIAssets.FormationHeroItem, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject
                    local go_tf = go.transform
                    go.gameObject:SetActive(true)
                    go_tf:SetParent(v.transform)
                    go_tf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go_tf:Set_localPosition(ResetPosition.x, ResetPosition.y, ResetPosition.z)
                    go.name = k
                    local cell = v:AddComponent(FormationHeroItem,go.name)
                    cell:InitData(formationData.heroDataList[k].heroUuid)
                end)
            end
        end
    end)
end

local function InitData(self,armyData)
    self.uuid = armyData.uuid
    self.data = self.view.ctrl:GetMarchData(self.uuid)
    if self.data~=nil then
        self.marchUuid = self.data.marchUuid
        self:RefreshHeroList(self.data)
        self.index_txt:SetText(self.data.index)
        self:RefreshState()
    end
end

local function RefreshData(self)
    self.data = self.view.ctrl:GetMarchData(self.uuid)
    self:RefreshState()
end
local function RefreshState(self)
    self.isUpdate = false
    self.startTime = 0
    self.endTime = 0
    local curTime = UITimeManager:GetInstance():GetServerTime()
    self.solider_num:SetText(string.GetFormattedSeperatorNum(math.floor(self.data.curSoldierNum)))
    self:ShowMarchPos()
    self.target_txt:SetText(Localization:GetString(self.view.ctrl:GetTargetDes(self.data.targetType)))
    if self.data.endTime> curTime then
        self.state_txt:SetText(Localization:GetString(self.view.ctrl:GetStateDes(self.data.status)))
        self.state_txt_out:SetText("")
        self.startTime = self.data.startTime
        self.endTime =self.data.endTime
        self.isUpdate = true
        self.slider:SetActive(true)
        self:RefreshTime()
    else
        self.state_txt:SetText("")
        self.state_txt_out:SetText(Localization:GetString(self.view.ctrl:GetStateDes(self.data.status)))
        self.slider:SetActive(false)
        self.time_txt:SetText("")
        self.isUpdate = false
    end
    if self.data.marchType == NewMarchType.ASSEMBLY_MARCH or self.data.marchType == NewMarchType.EXPLORE or self.data.status == MarchStatus.WAIT_RALLY  or self.data.status == MarchStatus.IN_TEAM  or self.data.marchType == NewMarchType.DIRECT_MOVE_MARCH then
        self.return_btn:SetActive(false)
    else
        self.return_btn:SetActive(true)
    end
end

local function ShowMarchPos(self)
    local info = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if info~=nil then
        local posV3 = info:GetMarchCurPos()
        local v2 = SceneUtils.WorldToTile(posV3,ForceChangeScene.World)
        local strPoint = "X:" .. v2.x .. " Y:" .. v2.y
        self.pos_txt:SetText(strPoint)
    end
end

local function RefreshTime(self)
    if self.isUpdate == true then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local deltaTime = self.endTime-curTime
        local totalTime = self.endTime - self.startTime
        if deltaTime >0 then
            self.time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtStringSpecial(deltaTime))
            local percent = math.min((1-(deltaTime/math.max(totalTime,1))),1)
            self.slider:SetValue(percent)
        else
            self.state_txt:SetText("")
            if self.data~=nil then
                self.state_txt_out:SetText(Localization:GetString(self.view.ctrl:GetStateDes(self.data.status)))
            end
            self.slider:SetActive(false)
            self.time_txt:SetText("")
            self.isUpdate = false
        end
        self:ShowMarchPos()
    end
end

local function OnReturnClick(self)
    MarchUtil.OnBackHome(self.marchUuid)
end

local function OnLeftClick(self)
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        if marchInfo:GetMarchStatus() == MarchStatus.IN_WORM_HOLE or marchInfo:GetMarchStatus() == MarchStatus.CROSS_SERVER then
            GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
        elseif marchInfo:GetMarchType() == NewMarchType.EXPLORE then
            local troop = WorldTroopManager:GetInstance():GetTroop(marchInfo.uuid)
            if troop~=nil then
                GoToUtil.GotoWorldPos(troop:GetPosition(),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
            else
                GoToUtil.GotoWorldPos(marchInfo:GetMarchCurPos(),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
            end
            self.view.ctrl:CloseSelf()
        elseif marchInfo:GetMarchStatus()== NewMarchType.COLLECTING then
            GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World))
            local position = SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World)
            WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
            self.view.ctrl:CloseSelf()
        elseif marchInfo:GetMarchStatus()== NewMarchType.ASSISTANCE then
            GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
            local position = SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World)
            position.x = position.x-1
            position.y = position.y
            position.z = position.z-1
            WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
            self.view.ctrl:CloseSelf()
        elseif marchInfo:GetMarchStatus()== NewMarchType.WAIT_RALLY then
            GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
            local position = SceneUtils.TileIndexToWorld(marchInfo.startPos,ForceChangeScene.World)
            position.x = position.x-1
            position.y = position.y
            position.z = position.z-1
            WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
            self.view.ctrl:CloseSelf()
        elseif marchInfo:GetMarchStatus()== NewMarchType.IN_TEAM then
            local teamMarch = DataCenter.WorldMarchDataManager:GetAllianceMarchesInTeam(LuaEntry.Player.allianceId, marchInfo.teamUuid)
            if teamMarch~=nil then
                if teamMarch:GetMarchStatus() == NewMarchType.WAIT_RALLY then
                    GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(teamMarch.startPos,ForceChangeScene.World),CS.SceneManager.World.InitZoom,nil,nil,marchInfo.serverId)
                    local position = SceneUtils.TileIndexToWorld(teamMarch.startPos,ForceChangeScene.World)
                    position.x = position.x-1
                    position.y = position.y
                    position.z = position.z-1
                    WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
                else
                    GoToUtil.GotoWorldPos(teamMarch:GetMarchCurPos(),nil,nil,function()
                        DataCenter.WorldMarchDataManager:TrackMarch(teamMarch.uuid)
                        WorldMarchTileUIManager:GetInstance():ShowTroop(teamMarch.uuid)
                    end,marchInfo.serverId)
                end
            end
            self.view.ctrl:CloseSelf()
        else
            GoToUtil.GotoWorldPos(marchInfo:GetMarchCurPos(),nil,nil,function()
                DataCenter.WorldMarchDataManager:TrackMarch(marchInfo.uuid)
                WorldMarchTileUIManager:GetInstance():ShowTroop(marchInfo.uuid)
            end,marchInfo.serverId)
            self.view.ctrl:CloseSelf()
        end
    end
end

local function OnRightClick(self)
    if self.data~=nil then
        local point = self.data.targetPoint
        local serverId = self.data.serverId
        self.view.ctrl:CloseSelf()
        GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(point,ForceChangeScene.World),nil,nil,nil,serverId)
    end
end

WorldMarchDetailItem.OnDestroy = OnDestroy
WorldMarchDetailItem.OnCreate = OnCreate
WorldMarchDetailItem.OnEnable = OnEnable
WorldMarchDetailItem.OnDisable = OnDisable
WorldMarchDetailItem.OnClearHeroList = OnClearHeroList
WorldMarchDetailItem.RefreshHeroList = RefreshHeroList
WorldMarchDetailItem.RefreshTime = RefreshTime
WorldMarchDetailItem.OnRightClick =OnRightClick
WorldMarchDetailItem.OnLeftClick =OnLeftClick
WorldMarchDetailItem.OnReturnClick =OnReturnClick
WorldMarchDetailItem.ShowMarchPos =ShowMarchPos
WorldMarchDetailItem.RefreshState = RefreshState
WorldMarchDetailItem.RefreshData =RefreshData
WorldMarchDetailItem.InitData = InitData
return WorldMarchDetailItem