---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 7/9/21 11:27 AM
---

local UIMailInfoView = BaseClass("UIMailInfoView", UIBaseView)
local base  = UIBaseView
-- 右侧邮件内容容器
local MailContentContainer = require "UI.UIMailNew.UIMailMainPanel.Component.MailContentContainer"
local Localization = CS.GameEntry.Localization

--[[
    控件定义部分
]]
local _cp_btnClose = "fullTop/CloseBtn"
local title_text_path = "fullTop/imgTitle/Common_img_title/titleText"
local _cp_rightMailContent = "fullTop/Bg2/RightScrollView/Viewport/Content"  -- 右侧
local _cp_btnContent = "fullTop/Bg2/btn_underneath/content"
local _cp_btnOneCollect = "fullTop/Bg2/btn_underneath/content/btnOneCollect"
local _cp_btnTranslate = "fullTop/Bg2/btn_underneath/content/btnTranslate"
local _cp_btnShare = "fullTop/Bg2/btn_underneath/content/btnShare"
local _cp_btnOneDelete = "fullTop/Bg2/btn_underneath/content/btnOneDelete"
local _cp_rightScrollView = "fullTop/Bg2/RightScrollView"
local _cp_common_bg = "fullTop/Bg2/Image"
local _cp_btnRelay = "fullTop/Bg2/btn_underneath/content/btnRelay"
local view_port = "fullTop/Bg2/RightScrollView/Viewport"
function UIMailInfoView:ComponentDefine()
    self._btnClose = self:AddComponent(UIButton, _cp_btnClose)
    self._btnClose:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickBtnClose()
    end)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
    self._common_bg = self:AddComponent(UIBaseContainer, _cp_common_bg)
    self._rightMailContent = self:AddComponent(MailContentContainer, _cp_rightMailContent)
    self._cp_btnContent = self:AddComponent(UIBaseContainer,_cp_btnContent)
    self._btnOneCollect = self:AddComponent(UIButton, _cp_btnOneCollect)
    self._btnOneCollect:SetOnClick(BindCallback(self, self.OnClickBtnOneCollect))
    self._btnTranslate = self:AddComponent(UIButton, _cp_btnTranslate)
    self._btnTranslate:SetOnClick(BindCallback(self, self.OnClickTranslateBtn))
    self._btnRelay = self:AddComponent(UIButton, _cp_btnRelay)
    self._btnRelay:SetOnClick(BindCallback(self, self.OnClickReplayBtn))
    self._btnShare = self:AddComponent(UIButton, _cp_btnShare)
    self._btnShare:SetOnClick(BindCallback(self, self.OnClickBtnShare))
    self._btnOneDelete = self:AddComponent(UIButton, _cp_btnOneDelete)
    self._btnOneDelete:SetOnClick(BindCallback(self, self.OnClickBtnOneDelete))
    self._rightScrollView = self:AddComponent(UIScrollRect, _cp_rightScrollView)
    self._viewPort= self:AddComponent(UIBaseContainer,view_port)
end

function UIMailInfoView:OnEnable() 
    base.OnEnable(self)
    self.title_text:SetLocalText(GameDialogDefine.MAIL)
end


function UIMailInfoView:OnClickBtnClose()
    local childCnt = self._rightMailContent.transform.childCount
    for i = 0, childCnt-1, 1 do
        local child = self._rightMailContent.transform:GetChild(i)
        child.gameObject:SetActive(false);
    end
    
    self.ctrl:CloseSelf()
end

function UIMailInfoView:SelectCancelOne(param)
    if self.isChoose then
        --选中
        if param.state then
            --检查是否存在，不存在的话保存起来
            if not table.hasvalue(self.batchSelectAll,param.uid) then
                for i = 1 ,table.count(self.ctrl.mailList) do
                    if self.ctrl.mailList[i].uid == param.uid then
                        table.insert(self.batchSelectAll,param.uid)
                        break
                    end
                end
            end
            local key = table.hasvalueForKey(self.batchSelectTab,param.uid)
            if key then
                table.remove(self.batchSelectTab,key)
            end
        else
            --检查是否存在，如果存在，剔除
            local key = table.hasvalueForKey(self.batchSelectAll,param.uid)
            if key then
                table.remove(self.batchSelectAll,key)
                --如果有点过全选的话
                if self.selectBatch then
                    self.isBatchAllSelect = false
                end
                table.insert(self.batchSelectTab,param.uid)
            end
        end
    end
end

function UIMailInfoView:OnClickBtnShare()
    local maildata = self.ctrl:GetCurrentMail()
    MailShowHelper.TryShareMail(maildata)
end

function UIMailInfoView:OnClickBtnOneCollect()
    self.ctrl:AddMailToFavor()
    -- 当邮件数量小于10封的时候,删除完后要拉取剩下的邮件
    --self:CheckIsGetMore()
end

function UIMailInfoView:OnClickTranslateBtn()
    local showTranslated = self.ctrl:GetShowTranslated()
    local tempShow = (not showTranslated)
    self.ctrl:SetShowTranslated(tempShow)
    if tempShow then
        self:SetButtonTxt(self._btnTranslate, "text", "100163")
    else
        self:SetButtonTxt(self._btnTranslate, "text", "290042")
    end
    local mailInfo = self.ctrl:GetCurrentMail()
    if not mailInfo then
        return
    end
    if tempShow then
        local tempLang = Localization:GetLanguageName()
        tempLang = DataCenter.MailTranslateManager:GetLangString(tempLang)
        if not mailInfo.translateMsg or mailInfo.translatedLang ~= tempLang then
            DataCenter.MailTranslateManager:TranslateMail(mailInfo)
        else
            EventManager:GetInstance():Broadcast(EventId.ChangeShowTranslatedStatus, mailInfo)
        end
    else
        EventManager:GetInstance():Broadcast(EventId.ChangeShowTranslatedStatus, mailInfo)
    end
end

function UIMailInfoView:OnClickBtnOneDelete()
    local mailInfo = self.ctrl:GetCurrentMail()
    if (mailInfo == nil) then
        return
    end
    if (mailInfo.rewardStatus == 0) then
        return
    end
    UIUtil.ShowMessage(Localization:GetString("310020"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
        self.ctrl:DeleteCurrentMail()
    end, function()
    end);
end

function UIMailInfoView:InitDialog()
    -- 删除
    self:SetButtonTxt(self._btnOneDelete, "text", "100190")
    -- 收藏
    self:SetButtonTxt(self._btnOneCollect, "text", "310102")
    -- 分享
    self:SetButtonTxt(self._btnShare, "text", "110073")
    -- 翻译
    self:SetButtonTxt(self._btnTranslate, "text", "290042")
    -- 翻译
    self:SetButtonTxt(self._btnRelay, "text", "372265")
end

function UIMailInfoView:SetButtonTxt( button, txtPath, dialogId)
    local txtBtn = button.transform:Find(txtPath):GetComponent(typeof(CS.TextMeshProUGUIEx))
    txtBtn.text = Localization:GetString(dialogId)
end

-- 事件监听
function UIMailInfoView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.CLICK_MAIL_ITEM, self.OnRecvMailItemClick)
    self:AddUIListener(EventId.Mail_DeleteMailDone, self.OnMailDeleteDone)
    self:AddUIListener(EventId.Mail_DeleteBatchMailDone, self.OnMailBatchDeleteDone)
    self:AddUIListener(EventId.MailBatchDelete,self.OnMailBatchDelete)
    self:AddUIListener(EventId.SelectCancelOne, self.SelectCancelOne)
end

function UIMailInfoView:OnRemoveListener()
    self:RemoveUIListener(EventId.CLICK_MAIL_ITEM, self.OnRecvMailItemClick)
    self:RemoveUIListener(EventId.Mail_DeleteMailDone, self.OnMailDeleteDone)
    self:RemoveUIListener(EventId.Mail_DeleteBatchMailDone, self.OnMailBatchDeleteDone)
    self:RemoveUIListener(EventId.MailBatchDelete,self.OnMailBatchDelete)
    self:RemoveUIListener(EventId.SelectCancelOne, self.SelectCancelOne)
    base.OnRemoveListener(self)
end

--[[
    在删除的时候,如果有上一封或者下一封,删除之后使用附近的一封邮件作为当前邮件显示
]]
function UIMailInfoView:OnMailDeleteDone()
    self.ctrl:GetCurrentMailListByType(self.ctrl.currentTab)
    local toShowMailId = ""
    if (self.ctrl._nextShowMailId ~= "") then
        toShowMailId = self.ctrl._nextShowMailId
    end
    self.ctrl:SetCurrentMailId(toShowMailId)
    self:ShowMailContentView()
    -- 当邮件数量小于10封的时候,删除完后要拉取剩下的邮件
    self:CheckIsGetMore()
end

function UIMailInfoView:OnMailBatchDeleteDone()
    self.ctrl:GetCurrentMailListByType(self.ctrl.currentTab)
    self.ctrl:SetCurrentMailId("")
    -- 显示指定邮件内容
    self:ShowMailContentView()
end

--批量删除
function UIMailInfoView:OnMailBatchDelete()
    DataCenter.MailDataManager:ReqMore(self.ctrl.currentTab, function ()
        self.ctrl:GetCurrentMailListByType(self.ctrl.currentTab)
        self.ctrl:SetCurrentMailId()
        self:ShowMailContentView()
    end)
end

function UIMailInfoView:CheckIsGetMore()
end

function UIMailInfoView:OnCreate()
    base.OnCreate(self)
    self.selectUid = self:GetUserData()
    self.ctrl:InitData()
    self:ComponentDefine()
    self:InitDialog()
    self.ctrl:SetCurrentMailId(self.selectUid)
    self:ShowMailContentView()
end

function UIMailInfoView:OnDestroy()
    self.ctrl.currentTab = -1
    self.ctrl.currentMail = ""
    if self._rightMailContent~=nil then
        self._rightMailContent:OnDestroy()
    end
    base.OnDestroy(self)
end

function UIMailInfoView:OnRecvMailItemClick( mailid )
    self.ctrl:SetCurrentMailId(mailid)
    self:ShowMailContentView()
end

--[[
    右侧邮件内容 - 这个地方异步加载prefab
]]
function UIMailInfoView:ShowMailContentView()
    local currentMail = self.ctrl:GetCurrentMail()
    self.ctrl:SetShowTranslated(false)
    self:SetButtonTxt(self._btnTranslate, "text", "290042")
    self._btnRelay:SetActive(false)
    -- 没有邮件信息,直接设置成空
    if (currentMail == nil) then
        self._common_bg:SetActive(false)
        self._btnOneDelete:SetActive(false)
    else
        -- 如果是采集邮件和战报,则采用自身的滑动事件
        if (currentMail ~= nil) then
            local sizeFitter = self._rightMailContent.transform:GetComponent(typeof(CS.UnityEngine.UI.ContentSizeFitter))
            if (currentMail["type"] == MailType["NEW_COLLECT_MAIL"]) or currentMail["type"] == MailType.MONSTER_COLLECT_REWARD or currentMail.type == MailType.NEW_FIGHT or currentMail.type == MailType.SHORT_KEEP_FIGHT_MAIL or currentMail.type == MailType.NEW_FIGHT_BLACK_KNIGHT or currentMail.type == MailType.NEW_FIGHT_EXPEDITIONARY_DUEL or currentMail.type == MailType.ELITE_FIGHT_MAIL then
                self._rightScrollView:SetEnable(false)
                sizeFitter.enabled = false
                --CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._rightScrollView.rectTransform)
                local x, y = self._viewPort.rectTransform:Get_sizeDelta()
                self._rightMailContent.rectTransform:Set_sizeDelta(x, y)
            else
                self._rightScrollView:SetEnable(true)
                sizeFitter.enabled = true
            end
        end
        
        if currentMail.type == MailType.NEW_FIGHT or currentMail.type == MailType.SHORT_KEEP_FIGHT_MAIL or currentMail.type == MailType.ELITE_FIGHT_MAIL then
            local version = currentMail:GetMailExt():GetVersion()
            if version==nil or version<=0 then
                UIUtil.ShowTipsId(390843)
                return
            end
        end
        self._common_bg:SetActive(true)
        self._btnOneDelete:SetActive(true)
        self._rightMailContent:ShowData(currentMail)
    end
    self._rightScrollView.unity_uiscrollRect.verticalNormalizedPosition = 1;
    -- 如果是采集邮件,则不显示收藏按钮
    -- 这个地方是统一按钮处处理,还会有一个处理是,如果当前当前单封邮件类型是采集,不显示删除删除按钮
    if (self.ctrl.currentTab == MailInternalGroup.MAIL_IN_favor) then
        self._btnOneCollect:SetActive(false)
        if currentMail and (currentMail.type == MailType.MAIL_ALLIANCE_ALL or currentMail.type == MailType.MAIL_PRESIDENT_SEND) then
            self._btnTranslate:SetActive(true)
        else
            self._btnTranslate:SetActive(false)
        end
    else
        if (currentMail ~= nil and
                (currentMail["type"] == MailType["NEW_COLLECT_MAIL"] or
                        currentMail["type"] == MailType.RESOURCE_HELP_FROM or
                        currentMail["type"] == MailType.RESOURCE_HELP_TO or
                        currentMail["type"] == MailType.NEW_FIGHT_BLACK_KNIGHT or
                        currentMail["type"] == MailType.NEW_FIGHT_EXPEDITIONARY_DUEL or
                        currentMail["type"] == MailType.MONSTER_COLLECT_REWARD)) then
            self._btnOneCollect:SetActive(false)
        elseif currentMail == nil then
            self._btnOneCollect:SetActive(false)
        else
            self._btnOneCollect:SetActive(true)
        end

        if currentMail and (currentMail.type == MailType.MAIL_ALLIANCE_ALL or currentMail.type == MailType.MAIL_PRESIDENT_SEND) then
            self._btnTranslate:SetActive(true)
        else
            self._btnTranslate:SetActive(false)
        end
    end
    if (currentMail ~= nil) then
        local canShare =
        currentMail["type"] == MailType.NEW_FIGHT or
        currentMail["type"] == MailType.SHORT_KEEP_FIGHT_MAIL or
                currentMail["type"] == MailType.MAIL_SCOUT_RESULT or
                currentMail["type"] == MailType.ELITE_FIGHT_MAIL or
                currentMail["type"] == MailType.MAIL_SCOUT_ALERT
        self._btnShare:SetActive(canShare)
        if currentMail["type"] == MailType.NEW_FIGHT or currentMail["type"] == MailType.SHORT_KEEP_FIGHT_MAIL then
            local showReplay =  currentMail:GetMailExt():GetCanRePlay()
            self._btnRelay:SetActive(false)
        end
    else
        self._btnShare:SetActive(false)
    end
    
    -- 标记已读
    if (currentMail ~= nil and currentMail.status ~= 1) then
        self.ctrl:ReadOneMail(currentMail.uid)
    end
end

function UIMailInfoView:GetMoreMail()
    DataCenter.MailDataManager:ReqMore(self.ctrl.currentTab, function ()
        self.ctrl:GetCurrentMailListByType(self.ctrl.currentTab)
    end)
end

function UIMailInfoView:RefreshToBottomBtn(btnGetReward)
    -- 如果：1.系统邮件；2.有奖励可领；3.领奖按钮超过视口下方，则显示跳转按钮
    local showToBottom = false
    self.btnGetReward = btnGetReward
    if self.ctrl.currentTab == MailInternalGroup.MAIL_IN_system then
        if btnGetReward ~= nil and btnGetReward:GetActive() then
            local standardScale = GetStandardScale()
            local posY = btnGetReward.transform.position.y + btnGetReward.rectTransform.sizeDelta.y / 2 * standardScale
            local bottom = self._rightScrollView.transform.position.y - self._rightScrollView.rectTransform.sizeDelta.y / 2 * standardScale
            if posY < bottom then
                showToBottom = true
            end
        end
    end
end

function UIMailInfoView:OnClickReplayBtn()
    if LuaEntry.DataConfig:CheckSwitch("new_army_power") then
        self:OnClickReplayBtnNew()
        return
    end
    local currentMail = self.ctrl:GetCurrentMail()
    if currentMail ==nil or (currentMail["type"] ~= MailType.NEW_FIGHT and currentMail["type"]~= MailType.SHORT_KEEP_FIGHT_MAIL) then
        return
    end
    local count = currentMail:GetMailExt():GetTotalRoundCnt()
    if count==1 then
        local pveTemplate = DataCenter.PveLevelTemplateManager:GetTemplate(BattlePlayBackLevelId)
        if pveTemplate ~= nil then
            local param = {}
            local _showData = currentMail:GetMailExt():GetShowRoundListDataByIndex(1)
            if (_showData == nil) then
                return
            end
            local roundFight = currentMail:GetMailExt():GetFightReportByRoundIndex(1)
            if ( roundFight == nil ) then
                return
            end
            local bigRoundIndex = _showData._roundIndex
            local bigRoundUuid = _showData.roundUuid
            local selfHealth = roundFight:GetTroopHealth(true)
            local otherHealth = roundFight:GetTroopHealth(false)
            local leftUuid = _showData.leftUuid
            local rightUuid = _showData.rightUuid
            local leftFightData = _showData.leftData
            local rightFightData = _showData.rightData
            local leftBattleEffect = currentMail:GetMailExt():GetMySideBattleEffect(leftUuid)
            local rightBattleEffect = currentMail:GetMailExt():GetOtherSideBattleEffect(rightUuid)
            local leftHero = {}
            local rightHero ={}
            local leftSoliderList = {}
            local rightSoliderList = {}
            local leftPower = 0
            local rightPower = 0
            local rightMonsterId = 0
            local function GetHeroInfo(heroData)
                local oneData = {}
                local power = 0
                local level = heroData["heroLevel"]
                local heroId = heroData["heroId"]
                local rankLv = heroData["rankLv"] or 0
                local stage = heroData["stage"] or 0
                local quality = heroData["heroQuality"] or 0
                local maxLevel = heroData["maxLevel"] or 0
                local curMilitaryRankId = HeroUtils.GetRankIdByLvAndStage(heroId, rankLv, stage)
                local k1 = LuaEntry.DataConfig:TryGetNum("power_setting", "k1")
                local beyondTimes = HeroUtils.GetBeyondTimesByLevel(maxLevel)
                local curAtk, curDef = HeroUtils.GetHeroAttr(heroId,quality,level,beyondTimes,curMilitaryRankId)
                local k5 = LuaEntry.DataConfig:TryGetNum("power_setting", "k5")
                if k5 <=0 then
                    k5 = 1
                end
                power = Mathf.Round(Mathf.Pow((curAtk + curDef),k5) * k1)
                local skillData = heroData["skillInfos"]
                local firstSkillId  = HeroUtils.GetHeroFirstSkillId(heroId, rankLv)
                local skillLv = 0
                for a,b in pairs(skillData) do
                    local id = b["skillId"]
                    local skillLevel = b["skillLv"]
                    if id == firstSkillId then
                        skillLv = skillLevel
                    end
                    local powerStr = GetTableData(TableName.SkillTab, id, 'power')
                    local strArr = string.split(powerStr,"|")
                    if #strArr>=skillLevel then
                        power  =  power  + tonumber(strArr[skillLevel])
                    end
                end
                oneData.heroId = tostring(heroId)
                oneData.heroLv = level
                oneData.heroQuality = quality
                oneData.rankId = curMilitaryRankId
                oneData.index = heroData["index"]
                oneData.power = power
                oneData.damage = HeroUtils.GetHeroSkillDamage(firstSkillId,skillLv)
                return oneData
            end

            local function GetEffectNum(battleEffect,effectId)
                if battleEffect~=nil then
                    return battleEffect:GetValue(effectId)
                end
                return 0
            end

            if leftFightData.unitData~=nil then
                local attr = leftFightData.unitAttrInfo
                if attr==nil then
                    return
                end
                local heroes = leftFightData.unitData:GetPlayerHeroes()
                if table.count(heroes) == 0 then
                    return
                end
                local heroList = table.values(heroes)
                table.sort(heroList, function(heroA, heroB)
                    return heroA["index"] < heroB["index"]
                end)
                local heroKey = {}
                local sumSkillDamage = 0
                for i =1,#heroList do
                    local heroData = heroList[i]
                    local oneData = GetHeroInfo(heroData)
                    sumSkillDamage = sumSkillDamage+oneData.damage
                    table.insert(heroKey,oneData)
                    table.insert(leftHero,oneData)
                end
                local heroAtk =  attr:GetAtkAttrByType(AtkDefReason.HERO)
                local heroDef =  attr:GetDefAttrByType(AtkDefReason.HERO)
                local leftEffectList ={}
                for k,v in pairs(CheckHeroCampAddEffectList) do
                    local leftValue = 0
                    if leftBattleEffect~=nil then
                        leftValue = leftBattleEffect:GetValue(v)
                    end
                    if leftValue>0 then
                        local oneData = {}
                        oneData.effectId = v
                        oneData.value = leftValue
                        table.insert(leftEffectList,oneData)
                    end
                end
                local campAtkAdd = MarchUtil.GetCampBonusExtraVal(heroKey,leftEffectList)
                --士兵攻击力
                local soldierBasicAtk = 0
                --士兵防御力
                local soldierBasicDef= 0
                --士兵血量
                local soldierBasicHealth = 0
                --兵数
                local soldierTotalNum =0
                local soliderList = leftFightData.unitData:GetSoldiers()
                local index = leftFightData.unitData:GetFormationIndex()
                local formationAtkAddNum = GetEffectNum(leftBattleEffect,MarchUtil.GetFormationAtkAddEffectEnumByIndex(index))
                local formationDefAddNum = GetEffectNum(leftBattleEffect,MarchUtil.GetFormationDefAddEffectEnumByIndex(index))
                local totalFormationAtkAdd = GetEffectNum(leftBattleEffect,EffectDefine.APS_BATTLE_TROOP_TOTAL_ATK_INCR_PERCENT)
                local totalFormationDefAdd = GetEffectNum(leftBattleEffect,EffectDefine.APS_BATTLE_TROOP_TOTAL_DEF_INCR_PERCENT)
                local baseAtkEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_ATTACK,"arm_all"))
                local baseDefEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_DEFEND,"arm_all"))
                local baseHealthEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,"arm_all"))
                for k,v in pairs(soliderList) do
                    local armId = k
                    local num = v[eMailSoldierAttr.Total]-v[eMailSoldierAttr.Lost]
                    local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
                    if template ~= nil then
                        local atk = template.attack
                        local def = template.defence
                        local health = template.health
                        local typeStr = template:GetAddValueEffectName()
                        local typeAtkEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_ATTACK,typeStr))
                        local typeDefEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_DEFEND,typeStr))
                        local typeHealthEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,typeStr))
                        soldierBasicAtk = soldierBasicAtk + (atk*(1+((totalFormationAtkAdd+formationAtkAddNum+baseAtkEffectNum+typeAtkEffectNum)/100))*num)
                        soldierBasicDef = soldierBasicDef + (def*(1+((totalFormationDefAdd+formationDefAddNum + baseDefEffectNum+typeDefEffectNum)/100))*num)
                        soldierBasicHealth = soldierBasicHealth + (health*(1+((baseHealthEffectNum+typeHealthEffectNum)/100))*num)
                        soldierTotalNum = soldierTotalNum +num
                        leftSoliderList[armId] = num
                    end
                end
                if soldierTotalNum>0 then
                    local k1 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k1")
                    local k2 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k2")
                    local k3 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k3")
                    local k15 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k15")
                    local k16 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k16")
                    local k18 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k18")
                    local totalPower = (Mathf.Pow((soldierTotalNum*k1),k2)*(soldierBasicAtk/soldierTotalNum)*(soldierBasicDef/soldierTotalNum)*(soldierBasicHealth/soldierTotalNum)*Mathf.Pow((heroAtk),k3)*Mathf.Pow((heroDef),k3)*(1+(math.min(campAtkAdd,35)/100)))*(1+(sumSkillDamage/10))*soldierTotalNum/math.max(1,k15)
                    leftPower = Mathf.Pow(totalPower,k18)
                end
            end

            if rightFightData.unitData~=nil then
                --if rightFightData.battleType == BattleType.Monster then
                --    rightMonsterId = rightFightData.monsterId
                --    if rightMonsterId==nil or rightMonsterId == "" or rightMonsterId == 0 then
                --        return
                --    end
                --else
                    local attr = rightFightData.unitAttrInfo
                    if attr==nil then
                        return
                    end
                    local heroes = rightFightData.unitData:GetPlayerHeroes()
                    if table.count(heroes) == 0 then
                        return
                    end
                    local heroList = table.values(heroes)
                    table.sort(heroList, function(heroA, heroB)
                        return heroA["index"] < heroB["index"]
                    end)
                local heroKey = {}
                local sumSkillDamage = 0
                for i = 1, #heroList do
                    local heroData = heroList[i]
                    local oneData = GetHeroInfo(heroData)
                    sumSkillDamage = sumSkillDamage + oneData.damage
                    table.insert(heroKey, oneData)
                    table.insert(rightHero,oneData)
                end
                    local heroAtk =  attr:GetAtkAttrByType(AtkDefReason.HERO)
                    local heroDef =  attr:GetDefAttrByType(AtkDefReason.HERO)
                local rightEffectList = {}
                for k,v in pairs(CheckHeroCampAddEffectList) do
                    local rightValue = 0
                    if rightBattleEffect~=nil then
                        rightValue = rightBattleEffect:GetValue(v)
                    end
                    if rightValue>0 then
                        local oneData = {}
                        oneData.effectId = v
                        oneData.value = rightValue
                        table.insert(rightEffectList,oneData)
                    end
                end
                local campAtkAdd = MarchUtil.GetCampBonusExtraVal(heroKey,rightEffectList)
                    --士兵攻击力
                    local soldierBasicAtk = 0
                    --士兵防御力
                    local soldierBasicDef= 0
                    --士兵血量
                    local soldierBasicHealth = 0
                    --兵数
                    local soldierTotalNum =0
                    local soliderList = rightFightData.unitData:GetSoldiers()
                local index = rightFightData.unitData:GetFormationIndex()
                local formationAtkAddNum = GetEffectNum(rightBattleEffect,MarchUtil.GetFormationAtkAddEffectEnumByIndex(index))
                local formationDefAddNum = GetEffectNum(rightBattleEffect,MarchUtil.GetFormationDefAddEffectEnumByIndex(index))
                    local totalFormationAtkAdd = GetEffectNum(rightBattleEffect,EffectDefine.APS_BATTLE_TROOP_TOTAL_ATK_INCR_PERCENT)
                    local totalFormationDefAdd = GetEffectNum(rightBattleEffect,EffectDefine.APS_BATTLE_TROOP_TOTAL_DEF_INCR_PERCENT)
                    local baseAtkEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_ATTACK,"arm_all"))
                    local baseDefEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_DEFEND,"arm_all"))
                    local baseHealthEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,"arm_all"))
                    for k,v in pairs(soliderList) do
                        local armId = k
                        local num = v[eMailSoldierAttr.Total]-v[eMailSoldierAttr.Lost]
                        local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
                        if template ~= nil then
                            local atk = template.attack
                            local def = template.defence
                            local health = template.health
                            local typeStr = template:GetAddValueEffectName()
                            local typeAtkEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_ATTACK,typeStr))
                            local typeDefEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_DEFEND,typeStr))
                            local typeHealthEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,typeStr))
                            soldierBasicAtk = soldierBasicAtk + (atk*(1+((totalFormationAtkAdd+formationAtkAddNum+baseAtkEffectNum+typeAtkEffectNum)/100))*num)
                            soldierBasicDef = soldierBasicDef + (def*(1+((totalFormationDefAdd+formationDefAddNum+baseDefEffectNum+typeDefEffectNum)/100))*num)
                            soldierBasicHealth = soldierBasicHealth + (health*(1+((baseHealthEffectNum+typeHealthEffectNum)/100))*num)
                            soldierTotalNum = soldierTotalNum +num
                            rightSoliderList[armId] = num
                        end
                    end
                    if soldierTotalNum>0 then
                        local k1 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k1")
                        local k2 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k2")
                        local k3 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k3")
                        local k15 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k15")
                        local k16 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k16")
                        local k18 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k18")
                        local totalPower = (Mathf.Pow((soldierTotalNum*k1),k2)*(soldierBasicAtk/soldierTotalNum)*(soldierBasicDef/soldierTotalNum)*(soldierBasicHealth/soldierTotalNum)*Mathf.Pow((heroAtk),k3)*Mathf.Pow((heroDef),k3)*(1+(math.min(campAtkAdd,35)/100)))*(1+(sumSkillDamage/10))*soldierTotalNum/math.max(1,k15)
                        rightPower = Mathf.Pow(totalPower,k18)
                    end
                --end
            end
            param.leftPower = leftPower
            param.rightPower = rightPower
            param.leftHero = leftHero
            param.rightHero = rightHero
            param.leftSoliderList = leftSoliderList
            param.rightSoliderList = rightSoliderList
            param.rightMonsterId = rightMonsterId
            param.selfHealth = selfHealth
            param.otherHealth = otherHealth
            param.bigRoundUuid = bigRoundUuid
            param.bigRoundIndex = bigRoundIndex
            param.pveEntrance = PveEntrance.BattlePlayBack
            param.levelId = BattlePlayBackLevelId
            param.mailId = currentMail["uid"]
            param.battleResult = currentMail:GetMailExt():GetBattleWinInPve()
            param.jumpType = PlayBackEndJumpType.Mail
            param.leftHeadParam  ={}
            if leftFightData.unitData~=nil then
                param.leftHeadParam.uid = leftFightData.unitData:GetUserId()
                param.leftHeadParam.pic = leftFightData.unitData.pic
                param.leftHeadParam.picVer = leftFightData.unitData.picVer
            end
            param.rightHeadParam = {}
            if rightFightData.battleType == BattleType.Monster or rightFightData.battleType == BattleType.BLACK_KNIGHT then
                param.rightHeadParam.monsterPic = "Assets/Main/Sprites/UI/UIMail/world_monster_boss_coin.png"
            else
                if rightFightData.unitData~=nil then
                    param.rightHeadParam.uid = rightFightData.unitData:GetUserId()
                    param.rightHeadParam.pic = rightFightData.unitData.pic
                    param.rightHeadParam.picVer = rightFightData.unitData.picVer
                end
            end
            DataCenter.BattleLevel:Enter(param)
        end
    end
    
end

function UIMailInfoView:OnClickReplayBtnNew()
    local currentMail = self.ctrl:GetCurrentMail()
    if currentMail ==nil or (currentMail["type"] ~= MailType.NEW_FIGHT and currentMail["type"]~= MailType.SHORT_KEEP_FIGHT_MAIL) then
        return
    end
    local count = currentMail:GetMailExt():GetTotalRoundCnt()
    if count==1 then
        local pveTemplate = DataCenter.PveLevelTemplateManager:GetTemplate(BattlePlayBackLevelId)
        if pveTemplate ~= nil then
            local param = {}
            local _showData = currentMail:GetMailExt():GetShowRoundListDataByIndex(1)
            if (_showData == nil) then
                return
            end
            local roundFight = currentMail:GetMailExt():GetFightReportByRoundIndex(1)
            if ( roundFight == nil ) then
                return
            end
            local bigRoundIndex = _showData._roundIndex
            local bigRoundUuid = _showData.roundUuid
            local selfHealth = roundFight:GetTroopHealth(true)
            local otherHealth = roundFight:GetTroopHealth(false)
            local leftUuid = _showData.leftUuid
            local rightUuid = _showData.rightUuid
            local leftFightData = _showData.leftData
            local rightFightData = _showData.rightData
            local leftBattleEffect = currentMail:GetMailExt():GetMySideBattleEffect(leftUuid)
            local rightBattleEffect = currentMail:GetMailExt():GetOtherSideBattleEffect(rightUuid)
            local leftHero = {}
            local rightHero ={}
            local leftSoliderList = {}
            local rightSoliderList = {}
            local leftPower = 0
            local rightPower = 0
            local rightMonsterId = 0
            local str = LuaEntry.DataConfig:TryGetStr("battle_config", "k28") or ""
            local spls = string.split(str, ";")
            local function GetHeroInfo(heroData,spl)
                local oneData = {}
                local power = 0
                local level = heroData["heroLevel"]
                local heroId = heroData["heroId"]
                local rankLv = heroData["rankLv"] or 0
                local stage = heroData["stage"] or 0
                local quality = heroData["heroQuality"] or 0
                local maxLevel = heroData["maxLevel"] or 0
                local rarity = GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'rarity')
                local curMilitaryRankId = HeroUtils.GetRankIdByLvAndStage(heroId, rankLv, stage)
                local k1 = LuaEntry.DataConfig:TryGetNum("power_setting", "k1")
                local beyondTimes = HeroUtils.GetBeyondTimesByLevel(maxLevel)
                local curAtk, curDef = HeroUtils.GetHeroAttr(heroId,quality,level,beyondTimes,curMilitaryRankId)
                local k5 = LuaEntry.DataConfig:TryGetNum("power_setting", "k5")
                if k5 <=0 then
                    k5 = 1
                end
                power = Mathf.Round(Mathf.Pow((curAtk + curDef),k5) * k1)
                local skillData = heroData["skillInfos"]
                local firstSkillId  = HeroUtils.GetHeroFirstSkillId(heroId, rankLv)
                local skillLv = 0
                local showSkillId = nil
                if #spl>= rarity then
                    showSkillId = tonumber(spl[rarity])
                end
                for a,b in pairs(skillData) do
                    local id = b["skillId"]
                    local skillLevel = b["skillLv"]
                    if id == firstSkillId then
                        skillLv = skillLevel
                    end
                    local powerStr = GetTableData(TableName.SkillTab, id, 'power')
                    local strArr = string.split(powerStr,"|")
                    if #strArr>=skillLevel then
                        power  =  power  + tonumber(strArr[skillLevel])
                    end
                end
                oneData.heroId = tostring(heroId)
                oneData.heroLv = level
                oneData.heroQuality = quality
                oneData.rankId = curMilitaryRankId
                oneData.index = heroData["index"]
                oneData.power = power
                oneData.damage = 0
                if showSkillId~=nil then
                    oneData.damage = HeroUtils.GetHeroSkillDamage(showSkillId,skillLv)
                end
                return oneData
            end

            local function GetEffectNum(battleEffect,effectId)
                if battleEffect~=nil then
                    return battleEffect:GetValue(effectId)
                end
                return 0
            end

            if leftFightData.unitData~=nil then
                local attr = leftFightData.unitAttrInfo
                if attr==nil then
                    return
                end
                local heroes = leftFightData.unitData:GetPlayerHeroes()
                if table.count(heroes) == 0 then
                    return
                end
                local heroList = table.values(heroes)
                table.sort(heroList, function(heroA, heroB)
                    return heroA["index"] < heroB["index"]
                end)
                local heroKey = {}
                local sumSkillDamage = 0
                for i =1,#heroList do
                    local heroData = heroList[i]
                    local oneData = GetHeroInfo(heroData,spls)
                    sumSkillDamage = sumSkillDamage+oneData.damage
                    table.insert(heroKey,oneData)
                    table.insert(leftHero,oneData)
                end
                local heroAtk =  attr:GetAtkAttrByType(AtkDefReason.HERO)
                local heroDef =  attr:GetDefAttrByType(AtkDefReason.HERO)
                local leftEffectList ={}
                for k,v in pairs(CheckHeroCampAddEffectList) do
                    local leftValue = 0
                    if leftBattleEffect~=nil then
                        leftValue = leftBattleEffect:GetValue(v)
                    end
                    if leftValue>0 then
                        local oneData = {}
                        oneData.effectId = v
                        oneData.value = leftValue
                        table.insert(leftEffectList,oneData)
                    end
                end
                local campAtkAdd = MarchUtil.GetCampBonusExtraVal(heroKey,leftEffectList)
                --士兵攻击力
                local soldierBasicAtk = 0
                --士兵防御力
                local soldierBasicDef= 0
                --士兵血量
                local soldierBasicHealth = 0
                --兵数
                local soldierTotalNum =0
                local soliderList = leftFightData.unitData:GetSoldiers()
                local index = leftFightData.unitData:GetFormationIndex()
                local formationAtkAddNum = GetEffectNum(leftBattleEffect,MarchUtil.GetFormationAtkAddEffectEnumByIndex(index))
                local formationDefAddNum = GetEffectNum(leftBattleEffect,MarchUtil.GetFormationDefAddEffectEnumByIndex(index))
                local totalFormationAtkAdd = GetEffectNum(leftBattleEffect,EffectDefine.APS_BATTLE_TROOP_TOTAL_ATK_INCR_PERCENT)
                local totalFormationDefAdd = GetEffectNum(leftBattleEffect,EffectDefine.APS_BATTLE_TROOP_TOTAL_DEF_INCR_PERCENT)
                local baseAtkEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_ATTACK,"arm_all"))
                local baseDefEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_DEFEND,"arm_all"))
                local baseHealthEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,"arm_all"))
                local heroAtkValue = heroAtk/100
                local heroDefValue = heroDef/100
                for k,v in pairs(soliderList) do
                    local armId = k
                    local num = v[eMailSoldierAttr.Total]-v[eMailSoldierAttr.Lost]
                    local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
                    if template ~= nil then
                        local atk = template.attack
                        local def = template.defence
                        local health = template.health
                        local typeStr = template:GetAddValueEffectName()
                        local typeAtkEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_ATTACK,typeStr))
                        local typeDefEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_DEFEND,typeStr))
                        local typeHealthEffectNum = GetEffectNum(leftBattleEffect,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,typeStr))
                        soldierBasicAtk = soldierBasicAtk + (atk*(1+((heroAtkValue+campAtkAdd+totalFormationAtkAdd+formationAtkAddNum+baseAtkEffectNum+typeAtkEffectNum)/100))*num)
                        soldierBasicDef = soldierBasicDef + (def*(1+((heroDefValue+totalFormationDefAdd+formationDefAddNum + baseDefEffectNum+typeDefEffectNum)/100))*num)
                        soldierBasicHealth = soldierBasicHealth + (health*(1+((baseHealthEffectNum+typeHealthEffectNum)/100))*num)
                        soldierTotalNum = soldierTotalNum +num
                        leftSoliderList[armId] = num
                    end
                end
                if soldierTotalNum>0 then
                    local k25 = LuaEntry.DataConfig:TryGetNum("battle_config", "k25")
                    local k26 = LuaEntry.DataConfig:TryGetNum("battle_config", "k26")
                    local k27 = LuaEntry.DataConfig:TryGetNum("battle_config", "k27")
                    local totalPower = (Mathf.Pow(soldierTotalNum,k25))*(soldierBasicAtk/soldierTotalNum)*(soldierBasicDef/soldierTotalNum)*(soldierBasicHealth/soldierTotalNum)*(1+(sumSkillDamage/10))*soldierTotalNum
                    leftPower = Mathf.Pow(totalPower,k26)*k27
                end
            end

            if rightFightData.unitData~=nil then
                --if rightFightData.battleType == BattleType.Monster then
                --    rightMonsterId = rightFightData.monsterId
                --    if rightMonsterId==nil or rightMonsterId == "" or rightMonsterId == 0 then
                --        return
                --    end
                --else
                local attr = rightFightData.unitAttrInfo
                if attr==nil then
                    return
                end
                local heroes = rightFightData.unitData:GetPlayerHeroes()
                if table.count(heroes) == 0 then
                    return
                end
                local heroList = table.values(heroes)
                table.sort(heroList, function(heroA, heroB)
                    return heroA["index"] < heroB["index"]
                end)
                local heroKey = {}
                local sumSkillDamage = 0
                for i = 1, #heroList do
                    local heroData = heroList[i]
                    local oneData = GetHeroInfo(heroData,spls)
                    sumSkillDamage = sumSkillDamage + oneData.damage
                    table.insert(heroKey, oneData)
                    table.insert(rightHero,oneData)
                end
                local heroAtk =  attr:GetAtkAttrByType(AtkDefReason.HERO)
                local heroDef =  attr:GetDefAttrByType(AtkDefReason.HERO)
                local rightEffectList = {}
                for k,v in pairs(CheckHeroCampAddEffectList) do
                    local rightValue = 0
                    if rightBattleEffect~=nil then
                        rightValue = rightBattleEffect:GetValue(v)
                    end
                    if rightValue>0 then
                        local oneData = {}
                        oneData.effectId = v
                        oneData.value = rightValue
                        table.insert(rightEffectList,oneData)
                    end
                end
                local campAtkAdd = MarchUtil.GetCampBonusExtraVal(heroKey,rightEffectList)
                --士兵攻击力
                local soldierBasicAtk = 0
                --士兵防御力
                local soldierBasicDef= 0
                --士兵血量
                local soldierBasicHealth = 0
                --兵数
                local soldierTotalNum =0
                local soliderList = rightFightData.unitData:GetSoldiers()
                local index = rightFightData.unitData:GetFormationIndex()
                local formationAtkAddNum = GetEffectNum(rightBattleEffect,MarchUtil.GetFormationAtkAddEffectEnumByIndex(index))
                local formationDefAddNum = GetEffectNum(rightBattleEffect,MarchUtil.GetFormationDefAddEffectEnumByIndex(index))
                local totalFormationAtkAdd = GetEffectNum(rightBattleEffect,EffectDefine.APS_BATTLE_TROOP_TOTAL_ATK_INCR_PERCENT)
                local totalFormationDefAdd = GetEffectNum(rightBattleEffect,EffectDefine.APS_BATTLE_TROOP_TOTAL_DEF_INCR_PERCENT)
                local baseAtkEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_ATTACK,"arm_all"))
                local baseDefEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_DEFEND,"arm_all"))
                local baseHealthEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,"arm_all"))
                local heroAtkValue = heroAtk/100
                local heroDefValue = heroDef/100
                for k,v in pairs(soliderList) do
                    local armId = k
                    local num = v[eMailSoldierAttr.Total]-v[eMailSoldierAttr.Lost]
                    local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
                    if template ~= nil then
                        local atk = template.attack
                        local def = template.defence
                        local health = template.health
                        local typeStr = template:GetAddValueEffectName()
                        local typeAtkEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_ATTACK,typeStr))
                        local typeDefEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_DEFEND,typeStr))
                        local typeHealthEffectNum = GetEffectNum(rightBattleEffect,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,typeStr))
                        soldierBasicAtk = soldierBasicAtk + (atk*(1+((heroAtkValue+campAtkAdd+totalFormationAtkAdd+formationAtkAddNum+baseAtkEffectNum+typeAtkEffectNum)/100))*num)
                        soldierBasicDef = soldierBasicDef + (def*(1+((heroDefValue+totalFormationDefAdd+formationDefAddNum+baseDefEffectNum+typeDefEffectNum)/100))*num)
                        soldierBasicHealth = soldierBasicHealth + (health*(1+((baseHealthEffectNum+typeHealthEffectNum)/100))*num)
                        soldierTotalNum = soldierTotalNum +num
                        rightSoliderList[armId] = num
                    end
                end
                if soldierTotalNum>0 then
                    local k25 = LuaEntry.DataConfig:TryGetNum("battle_config", "k25")
                    local k26 = LuaEntry.DataConfig:TryGetNum("battle_config", "k26")
                    local k27 = LuaEntry.DataConfig:TryGetNum("battle_config", "k27")
                    local totalPower = (Mathf.Pow(soldierTotalNum,k25))*(soldierBasicAtk/soldierTotalNum)*(soldierBasicDef/soldierTotalNum)*(soldierBasicHealth/soldierTotalNum)*(1+(sumSkillDamage/10))*soldierTotalNum
                    rightPower = Mathf.Pow(totalPower,k26)*k27
                end
                --end
            end
            param.leftPower = leftPower
            param.rightPower = rightPower
            param.leftHero = leftHero
            param.rightHero = rightHero
            param.leftSoliderList = leftSoliderList
            param.rightSoliderList = rightSoliderList
            param.rightMonsterId = rightMonsterId
            param.selfHealth = selfHealth
            param.otherHealth = otherHealth
            param.bigRoundUuid = bigRoundUuid
            param.bigRoundIndex = bigRoundIndex
            param.pveEntrance = PveEntrance.BattlePlayBack
            param.levelId = BattlePlayBackLevelId
            param.mailId = currentMail["uid"]
            param.battleResult = currentMail:GetMailExt():GetBattleWinInPve()
            param.jumpType = PlayBackEndJumpType.Mail
            param.leftHeadParam  ={}
            if leftFightData.unitData~=nil then
                param.leftHeadParam.uid = leftFightData.unitData:GetUserId()
                param.leftHeadParam.pic = leftFightData.unitData.pic
                param.leftHeadParam.picVer = leftFightData.unitData.picVer
            end
            param.rightHeadParam = {}
            if rightFightData.battleType == BattleType.Monster or rightFightData.battleType == BattleType.BLACK_KNIGHT then
                param.rightHeadParam.monsterPic = "Assets/Main/Sprites/UI/UIMail/world_monster_boss_coin.png"
            else
                if rightFightData.unitData~=nil then
                    param.rightHeadParam.uid = rightFightData.unitData:GetUserId()
                    param.rightHeadParam.pic = rightFightData.unitData.pic
                    param.rightHeadParam.picVer = rightFightData.unitData.picVer
                end
            end
            DataCenter.BattleLevel:Enter(param)
        end
    end

end
return UIMailInfoView