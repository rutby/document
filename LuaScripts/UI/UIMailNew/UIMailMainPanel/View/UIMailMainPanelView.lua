---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 7/9/21 11:27 AM
---

local UIMailMainPanelView = BaseClass("UIMailMainPanelView", UIBaseView)
local base  = UIBaseView
local Localization = CS.GameEntry.Localization
local MailChannelItem = require "UI.UIMailNew.UIMailMainPanel.Component.MailChannelItem" -- 邮件分类 上方的toggle
local MailListItem = require "UI.UIMailNew.UIMailMainPanel.Component.MailListItem"

local _cp_btnClose = "fullTop/CloseBtn"
local title_text_path = "fullTop/imgTitle/Common_img_title/titleText"
local _cp_txtNoMail = "fullTop/Bg2/txtNoMail"
local _cp_toggleTop = "fullTop/Bg2/ToggleGroup/Toggle"
local _cp_AllReadContent = "fullTop/Bg2/btn_underneath/AllReadContent"
local _cp_btnAllRead = "fullTop/Bg2/btn_underneath/AllReadContent/btnAllRead"
local _cp_AllReadRed = "fullTop/Bg2/btn_underneath/AllReadContent/btnAllRead/Image/AllReadRed"
local _cp_btnBatchDelte = "fullTop/Bg2/btn_underneath/AllReadContent/btnBatchDelete"
local _cp_batchContent = "fullTop/Bg2/btn_underneath/batchContent"
local _cp_btnBatchDele = "fullTop/Bg2/btn_underneath/batchContent/btnBatchOneDelete"
local _cp_btnBatchCancel = "fullTop/Bg2/btn_underneath/batchContent/btnCancel"
local _cp_BatchAllSelect = "fullTop/Bg2/btn_underneath/batchContent/btnAllSelect"
local _cp_imgAllSelect = "fullTop/Bg2/btn_underneath/batchContent/btnAllSelect/bgSelect/Img_AllSelect"
local _cp_scrollMailList = "fullTop/Bg2/scrollBg/LeftScrollView"
local _cp_scrollMailListContent = "fullTop/Bg2/scrollBg/LeftScrollView/viewport/Content"
local _cp_to_bottom = "fullTop/Bg2/ToBottom"
local _cp_txt_to_bottom = "fullTop/Bg2/ToBottom/ToBottomText"

local tabBtnArray = {
    MailInternalGroup["MAIL_IN_battle"],
    MailInternalGroup["MAIL_IN_report"],
    MailInternalGroup["MAIL_IN_alliance"],
    MailInternalGroup["MAIL_IN_system"],
    --MailInternalGroup["MAIL_IN_scout"],
    MailInternalGroup["MAIL_IN_favor"],
}

function UIMailMainPanelView:ComponentDefine()
    self._btnClose = self:AddComponent(UIButton, _cp_btnClose)
    self._btnClose:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickBtnClose()
    end)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
    self._txtNoMail = self:AddComponent(UITextMeshProUGUIEx, _cp_txtNoMail)
    self._cp_AllReadContent = self:AddComponent(UIBaseContainer,_cp_AllReadContent)
    self._btnAllRead = self:AddComponent(UIButton, _cp_btnAllRead)
    self._btnAllRead:SetOnClick( BindCallback(self, self.OnClickBtnAllRead))
    self._cp_readRed = self:AddComponent(UIBaseContainer,_cp_AllReadRed)
    self._btnBatchDelete = self:AddComponent(UIButton, _cp_btnBatchDelte)
    self._btnBatchDelete:SetOnClick(BindCallback(self, self.OnClickBtnBatch))
	self._batchContent = self:AddComponent(UIBaseContainer,_cp_batchContent)
    --删除
    self._cp_btnBatchDele = self:AddComponent(UIButton,_cp_btnBatchDele)
    self._cp_btnBatchDele:SetOnClick(BindCallback(self, self.OnClickBtnAllDelete))
    --取消
    self._cp_btnBatchCancel = self:AddComponent(UIButton,_cp_btnBatchCancel)
    self._cp_btnBatchCancel:SetOnClick(BindCallback(self, self.OnClickBtnBatchCancel))
    --全选
    self._cp_BatchAllSelect = self:AddComponent(UIButton,_cp_BatchAllSelect)
    self._cp_BatchAllSelect:SetOnClick(BindCallback(self, self.SelectBatchAll))
    self._cp_imgAllSelect = self:AddComponent(UIBaseContainer,_cp_imgAllSelect)
    self._cp_imgAllSelect:SetActive(false)
    self._scrollviewContent = self:AddComponent(UIBaseContainer, _cp_scrollMailListContent)
    self._scrollMailList = self:AddComponent(UILoopListView2, _cp_scrollMailList)
    self._scrollMailList:InitListView(0, function (listview, index)
        return self:GetScrollItem(listview, index)
    end)
    self._scrollMailList:SetOnDragingAction(function (  )
        self:OnDragingAction()
    end)
    self._scrollMailList:SetOnEndDragAction(function ( ... )
        self:OnEndDragAction()
    end)
    
    self._toggles = {}
    for i = 1, table.count(tabBtnArray) do
        local togglePath = _cp_toggleTop .. i
        local toggleBtn = self:AddComponent(MailChannelItem, togglePath)
        self._toggles[#self._toggles+1] = toggleBtn
        toggleBtn:InitData(tabBtnArray[i], nil)
    end
    
    self._btnToBottom = self:AddComponent(UIButton, _cp_to_bottom)
    self._btnToBottom:SetOnClick(BindCallback(self, self.OnClickToBottomBtn))
    self._btnToBottom:SetActive(false)
    self._txtToBottom = self:AddComponent(UITextMeshProUGUIEx, _cp_txt_to_bottom)
    self._txtToBottom:SetLocalText(208213)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._btnToBottom.rectTransform)
end

-- 因为UI会放在缓存池里,所以需要刚进入的时候对UI进行一次初始化
function UIMailMainPanelView:InitOriginState()
    
end

function UIMailMainPanelView:OnEnable() 
    base.OnEnable(self)
    local selectTab = MailInternalGroup.MAIL_IN_system
    local isRedSort = false
    --检查是否有红点
    --红点顺序
    local redTabArray = {
        MailInternalGroup["MAIL_IN_system"],
        MailInternalGroup["MAIL_IN_battle"],
        MailInternalGroup["MAIL_IN_report"],
        MailInternalGroup["MAIL_IN_alliance"],
    }
    for i = 1, table.count(redTabArray) do
        local cnt = DataCenter.MailDataManager:GetMailUnReadCountByGroup(redTabArray[i])
        if cnt > 0 then
            selectTab = redTabArray[i]
            isRedSort = true
            break
        end
    end
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local str = CS.GameEntry.Setting:GetString(SettingKeys.MAIL_MAIN_FIRST..LuaEntry.Player.uid,"")
    CS.GameEntry.Setting:SetString(SettingKeys.MAIL_MAIN_FIRST..LuaEntry.Player.uid,math.floor(curTime))
    --没有红点检查上次打开记录
    if not isRedSort then
        --此次是否同一天
        if str == "" or not UITimeManager:GetInstance():IsSameDayForServer(tonumber(str) // 1000, tonumber(curTime) // 1000) then
            selectTab = MailInternalGroup.MAIL_IN_system
        else
            local lastGroup = DataCenter.MailDataManager:GetLastGroup()
            for i = 1, table.count(tabBtnArray) do
                if (tabBtnArray[i] == lastGroup) then
                    selectTab = lastGroup
                end
            end
        end
    end
    if self.selectTab~=nil then
        selectTab  =self.selectTab
        self.selectTab = nil
    end
    for i = 1, table.count(tabBtnArray) do
        if (tabBtnArray[i] == selectTab) then
            self._toggles[i]:SetSelected()
        end
    end
    self._cp_readRed:SetActive(false)
    self.title_text:SetLocalText(GameDialogDefine.MAIL)
end


function UIMailMainPanelView:OnClickBtnClose()
    self.ctrl:CloseSelf()
end

function UIMailMainPanelView:OnClickBtnAllRead()
    if self.ctrl.currentTab == MailInternalGroup.MAIL_IN_system or self.ctrl.currentTab == MailInternalGroup.MAIL_IN_report 
    or self.ctrl.currentTab == MailInternalGroup.MAIL_IN_alliance  then
        DataCenter.MailDataManager:SetAllAndOne(true)
        DataCenter.MailDataManager:SetAllReward(true)
    end
    self.ctrl:ReadMailByGroup()
    if not self.isAllRed then
        UIUtil.ShowTipsId(312080)
    end
end

--全部删除
function UIMailMainPanelView:OnClickBtnAllDelete()
    if self.isBatchAllSelect then
        UIUtil.ShowMessage(Localization:GetString("310020"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
            self.ctrl:DeleteMailByGroup()
            self:OnClickBtnBatchCancel()
        end, function()
        end);
    else
        if self.batchSelectAll and next(self.batchSelectAll) then
            UIUtil.ShowMessage(Localization:GetString("310020"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                DataCenter.MailDataManager:DeleteSelectMail(self.batchSelectAll)
                self:OnClickBtnBatchCancel()
            end, function()
            end);
        else
            UIUtil.ShowTipsId(312118)
        end
    end

end

--进入批量模式
function UIMailMainPanelView:OnClickBtnBatch()
    if self.ctrl and self.ctrl.mailList and next(self.ctrl.mailList) then
        self.isChoose = true    --批量模式
        self.selectBatch = false --全选状态
        self.isBatchAllSelect = false   --点击全选状态
        self._cp_AllReadContent:SetActive(false)
        self._batchContent:SetActive(true)
        self._cp_imgAllSelect:SetActive(false)
        self.batchSelectTab = {}    --不删除的邮件
        self.batchSelectAll = {} --要删除的邮件
        EventManager:GetInstance():Broadcast(EventId.SelectBatchMail,true)
    end
end
--退出批量模式
function UIMailMainPanelView:OnClickBtnBatchCancel()
    self.isChoose = false
    self.selectBatch = false --全选状态
    self._cp_AllReadContent:SetActive(true)
    self._batchContent:SetActive(false)
    self._cp_imgAllSelect:SetActive(false)
    self.batchSelectTab = {}
    self.batchSelectAll = {}
    EventManager:GetInstance():Broadcast(EventId.SelectBatchMail,false)
    EventManager:GetInstance():Broadcast(EventId.SelectBatchAll,false)
end
--批量全选状态
function UIMailMainPanelView:SelectBatchAll()
    self.isClickBatch = true
    --全选应该是把当前已经获取到的邮件进行操作
    if self.isBatchAllSelect then
        self.selectBatch = false
        self.isBatchAllSelect = false
        self.batchSelectAll = {}
        self.batchSelectTab = {}
    else
        self.selectBatch = true
        self.isBatchAllSelect = true
        --全选时把当前已获取到的邮件保存起来
        local _maillist = self.ctrl.mailList
        for i = 1 ,table.count(_maillist) do
                table.insert(self.batchSelectAll,_maillist[i].uid)
        end
        self.batchSelectTab = {}
    end
    self.batchSelectTab = {}
    self._cp_imgAllSelect:SetActive(self.isBatchAllSelect)
    EventManager:GetInstance():Broadcast(EventId.SelectBatchAll,self.selectBatch)
end                                                                                                                                                                                         

function UIMailMainPanelView:SelectCancelOne(param)
    if self.isChoose then
        --选中
        if param.state then
            --检查是否存在，不存在的话保存起来
            if not table.hasvalue(self.batchSelectAll,param.uid) then
                for i = 1 ,table.count(self.ctrl.mailList) do
                    if self.ctrl.mailList[i].uid == param.uid then
                        table.insert(self.batchSelectAll,param.uid)
                        break
                    end
                end
            end
            local key = table.hasvalueForKey(self.batchSelectTab,param.uid)
            if key then
                table.remove(self.batchSelectTab,key)
            end
            local _maillist = self.ctrl.mailList
            if table.count(_maillist) == table.count(self.batchSelectAll) then
                self.isBatchAllSelect = true
                self._cp_imgAllSelect:SetActive(true)
            end
        else
            --检查是否存在，如果存在，剔除
            local key = table.hasvalueForKey(self.batchSelectAll,param.uid)
            if key then
                table.remove(self.batchSelectAll,key)
                --如果有点过全选的话
                if self.selectBatch then
                    self.isBatchAllSelect = false
                    self._cp_imgAllSelect:SetActive(false)
                end
                table.insert(self.batchSelectTab,param.uid)
            end
        end
    end
end

function UIMailMainPanelView:OnClickToBottomBtn()
    self._btnToBottom:SetActive(false)
end

function UIMailMainPanelView:InitDialog()

    
    -- 全部删除
    --self:SetButtonTxt(self._btnAllDelete, "text", "310103")
    self:SetButtonTxt(self._btnBatchDelete, "text", "312119")
    -- 全部领取
    self:SetButtonTxt(self._btnAllRead, "text", "310104")
    --删除
    self:SetButtonTxt(self._cp_btnBatchDele, "text", "100190")
    --全选
    self:SetButtonTxt(self._cp_BatchAllSelect, "text", "110282")
    -- 取消
    self:SetButtonTxt(self._cp_btnBatchCancel, "text", "110106")
    
end

function UIMailMainPanelView:SetButtonTxt( button, txtPath, dialogId)
    local txtBtn = button.transform:Find(txtPath):GetComponent(typeof(CS.TextMeshProUGUIEx))
    txtBtn.text = Localization:GetString(dialogId)
end

-- 事件监听
function UIMailMainPanelView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.CLICK_MAIL_ITEM, self.OnRecvMailItemClick)
    self:AddUIListener(EventId.Mail_DeleteMailDone, self.OnMailDeleteDone)
    self:AddUIListener(EventId.Mail_DeleteBatchMailDone, self.OnMailBatchDeleteDone)
    self:AddUIListener(EventId.MailBatchDelete,self.OnMailBatchDelete)
    self:AddUIListener(EventId.Mail_Select_Channel, self.OnSelectChannel)
    self:AddUIListener(EventId.MailPush, self.RefreshAllRed)
    self:AddUIListener(EventId.SelectCancelOne, self.SelectCancelOne)
end

function UIMailMainPanelView:OnRemoveListener()
    self:RemoveUIListener(EventId.CLICK_MAIL_ITEM, self.OnRecvMailItemClick)
    self:RemoveUIListener(EventId.Mail_DeleteMailDone, self.OnMailDeleteDone)
    self:RemoveUIListener(EventId.Mail_DeleteBatchMailDone, self.OnMailBatchDeleteDone)
    self:RemoveUIListener(EventId.MailBatchDelete,self.OnMailBatchDelete)
    self:RemoveUIListener(EventId.Mail_Select_Channel, self.OnSelectChannel)
    self:RemoveUIListener(EventId.MailPush, self.RefreshAllRed)
    self:RemoveUIListener(EventId.SelectCancelOne, self.SelectCancelOne)
    base.OnRemoveListener(self)
end

function UIMailMainPanelView:OnSelectChannel( mailChannelType )
    
    -- 设置当前频道
    if (self.ctrl.currentTab == mailChannelType) then
        return
    end
    DataCenter.MailDataManager:SetLastGroup(mailChannelType)
    local forceMoveToTop = self.ctrl.currentTab ~= -1
    if self.ctrl.currentTab~=-1 then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_change_toggle)
    end
    self.ctrl.currentTab = mailChannelType
    self.isChoose = false
    self.selectBatch = false
    self._cp_AllReadContent:SetActive(true)
    self._batchContent:SetActive(false)
    
    -- 更新数据
    self.ctrl:GetCurrentMailListByType(mailChannelType)
    local selectIndex = -1
    if self.selectUid ~=nil then
        for i, v in pairs(self.ctrl.mailList) do
            if (v.uid == self.selectUid) then
                selectIndex = i
            end
        end
    end
    if selectIndex~=-1 then
        self.ctrl:SetCurrentMailId(self.selectUid)
    else
        self.ctrl:SetCurrentMailId()
    end
    
    -- 显示第一封邮件内容
    self:ShowMailContentView()
    -- 设置左侧滑动列表
    self:ShowMailItemList(forceMoveToTop,selectIndex)
    self._btnToBottom:SetActive(false)
    
    --全部领取红点刷新
   -- self:RefreshAllRed()
end

function UIMailMainPanelView:RefreshAllRed()
    self.isAllRed = false
    if self.ctrl.currentTab then
        local list =  DataCenter.MailDataManager:GetGroupMailList(self.ctrl.currentTab)
        for k = 1, #list do
            if list[k].rewardStatus == 0 and list[k].type ~= MailType.MAIL_UPDATE then
                self._cp_readRed:SetActive(true)
                self.isAllRed = true
                return
            end
        end
    end
    return self._cp_readRed:SetActive(false)
end

--[[
    左侧滑动列表刷新
]]
function UIMailMainPanelView:ShowMailItemList(forceMoveToTop,toIndex)
    forceMoveToTop = forceMoveToTop or false
    local _maillist = self.ctrl.mailList
    if toIndex~=nil and toIndex~=-1 then
        self._scrollMailList:SetListItemCount(#_maillist, false,false)
        self._scrollMailList:RefreshAllShownItem()
        self._scrollMailList:MovePanelToItemIndex(toIndex,104)
        self._scrollMailList.unity_looplistview2:ForceUpdate()
    else
        self._scrollMailList:SetListItemCount(#_maillist, forceMoveToTop, true)
        self._scrollMailList:RefreshAllShownItem()
    end
    
end

--[[
    在删除的时候,如果有上一封或者下一封,删除之后使用附近的一封邮件作为当前邮件显示
]]
function UIMailMainPanelView:OnMailDeleteDone()
    self.ctrl:GetCurrentMailListByType(self.ctrl.currentTab)
    local toShowMailId = ""
    if (self.ctrl._nextShowMailId ~= "") then
        toShowMailId = self.ctrl._nextShowMailId
    end
    self.ctrl:SetCurrentMailId(toShowMailId)
    self:ShowMailContentView()
    self:ShowMailItemList()
    -- 当邮件数量小于10封的时候,删除完后要拉取剩下的邮件
    self:CheckIsGetMore()
end

function UIMailMainPanelView:OnMailBatchDeleteDone()
    self.ctrl:GetCurrentMailListByType(self.ctrl.currentTab)
    self.ctrl:SetCurrentMailId("")
    -- 显示指定邮件内容
    self:ShowMailContentView()
    self:ShowMailItemList()
    self:OnClickBtnBatchCancel()
end

--批量删除
function UIMailMainPanelView:OnMailBatchDelete()
    DataCenter.MailDataManager:ReqMore(self.ctrl.currentTab, function ()
        self.ctrl:GetCurrentMailListByType(self.ctrl.currentTab)
        self.ctrl:SetCurrentMailId()
        self:ShowMailContentView()
        self:ShowMailItemList()
        self:OnClickBtnBatchCancel()
    end)
end

function UIMailMainPanelView:CheckIsGetMore()
    local _maillist = self.ctrl.mailList
    if (#_maillist < 10) then
        self:GetMoreMail()
    end
end

function UIMailMainPanelView:OnCreate()
    base.OnCreate(self)
    local selectTab,selectUid = self:GetUserData()
    self.selectTab = selectTab
    self.selectUid = selectUid
    self.ctrl:InitData()
    self._cellList = {}
    self:ComponentDefine()
    
    self:InitDialog()
end

function UIMailMainPanelView:OnDestroy()
    self.ctrl.currentTab = -1
    self.ctrl.currentMail = ""
    if self._scrollviewContent~=nil then
        self._scrollviewContent:RemoveComponents(MailListItem)
    end
    if self._scrollMailList~=nil then
        self._scrollMailList:ClearAllItems()
    end
    base.OnDestroy(self)
end

function UIMailMainPanelView:OnRecvMailItemClick( mailid )
    self.ctrl:SetCurrentMailId(mailid)
    self:ShowMailContentView()
end

--[[
    右侧邮件内容 - 这个地方异步加载prefab
]]
function UIMailMainPanelView:ShowMailContentView()
    local currentMail = self.ctrl:GetCurrentMail()
    --self.ctrl:SetShowTranslated(false)
    ---- 没有邮件信息,直接设置成空
    --if (currentMail == nil) then
    --    self._txtNoMail:SetActive(true)
    --    self._txtNoMail:SetLocalText(311043)
    --    self._btnBatchDelete:SetActive(false)
    --else
    --    if currentMail.type == MailType.NEW_FIGHT or currentMail.type == MailType.SHORT_KEEP_FIGHT_MAIL or currentMail.type == MailType.ELITE_FIGHT_MAIL then
    --        local version = currentMail:GetMailExt():GetVersion()
    --        if version==nil or version<=0 then
    --            UIUtil.ShowTipsId(390843)
    --            return
    --        end
    --    end
    --    self._btnBatchDelete:SetActive(true)
    --    self._txtNoMail:SetActive(false)
    --end
    ---- 如果是采集邮件,则不显示收藏按钮
    ---- 这个地方是统一按钮处处理,还会有一个处理是,如果当前当前单封邮件类型是采集,不显示删除删除按钮
    --if (self.ctrl.currentTab == MailInternalGroup.MAIL_IN_favor) then
    --    self._btnAllRead:SetActive(false)
    --else
    --    self._btnAllRead:SetActive(currentMail ~= nil)
    --end
    --
    ---- 标记已读
    --if (currentMail ~= nil and currentMail.status ~= 1) then
    --    self.ctrl:ReadOneMail(currentMail.uid)
    --end
end

--[[
    左侧滑动列表
]]
function UIMailMainPanelView:GetScrollItem( listview, index)
    local _maillist = self.ctrl.mailList
    index = index + 1
    if (index < 1 or index > #_maillist) then
        return nil
    end
    local item = listview:NewListViewItem("UImail_list_items")
    if (self._cellList[item] == nil) then
        NameCount = NameCount + 1
        local nameStr = tostring(NameCount)
        item.gameObject.name = nameStr
        local mailItem = self._scrollviewContent:AddComponent(MailListItem, nameStr)
        self._cellList[item] = mailItem
    end
    self._cellList[item]:SetItemShow(self.ctrl.mailList[index])
    self._cellList[item]:RefreshChoose(self.isChoose)
    self._cellList[item]:RefreshState(self.selectBatch)
    return item
end

function UIMailMainPanelView:OnDragingAction()
    local _totalCnt = #self.ctrl.mailList
    if (self._loadingMail == true) then
        return
    end
    local _lastItem = self._scrollMailList:GetShownItemByItemIndex(_totalCnt-1)
    if (_lastItem == nil) then
        return
    end
    local _lastItemY = self._scrollMailList:GetItemCornerPosInViewPort(_lastItem).y
    local _viewPortSize = self._scrollMailList.unity_looplistview2.ViewPortSize
    if (_lastItemY + _viewPortSize >= 50) then
        self._toLoadMore = true
    end
end

function UIMailMainPanelView:OnEndDragAction()
    if (self._toLoadMore == true) then
        self._loadingMail = false
        self._toLoadMore = false
        self:GetMoreMail()
    end
end

function UIMailMainPanelView:GetMoreMail()
    DataCenter.MailDataManager:ReqMore(self.ctrl.currentTab, function ()
        self.ctrl:GetCurrentMailListByType(self.ctrl.currentTab)
        self:ShowMailItemList()
    end)
end

function UIMailMainPanelView:RefreshToBottomBtn(btnGetReward)
    -- 如果：1.系统邮件；2.有奖励可领；3.领奖按钮超过视口下方，则显示跳转按钮
    local showToBottom = false
    self.btnGetReward = btnGetReward
    if self.ctrl.currentTab == MailInternalGroup.MAIL_IN_system then
        if btnGetReward ~= nil and btnGetReward:GetActive() then
            showToBottom = true
        end
    end
    self._btnToBottom:SetActive(showToBottom)
end

function UIMailMainPanelView:Update()
    if self.btnGetReward ~= nil and self.btnGetReward:GetActive() and self._btnToBottom:GetActive() and not IsNull(self.btnGetReward.gameObject) then
        self._btnToBottom:SetActive(false)
    end
end

return UIMailMainPanelView