---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/4 18:39
---
local MailRewardItem = BaseClass("MailRewardItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local RewardUtil = require "Util.RewardUtil"

local item_bg_path = "clickBtn/item_bg"
local item_quality_path = "clickBtn/ImgQuality"
local item_icon_path = "clickBtn/ItemIcon"
local num_text_path = "clickBtn/NumText"
local name_text_path = "clickBtn/NameText"
local flag_text_path = "clickBtn/FlagGo/FlagText"
local flag_obj_path = "clickBtn/FlagGo"
local btn_path ="clickBtn"
local extra_path = "clickBtn/ImgExtra"
local hero_quality_path = "clickBtn/HeroQuality"
local select_path = "clickBtn/select"
local rece_img_path = "clickBtn/ImgRece"
local camp_img_path = "clickBtn/ImgCamp"

-- 创建

local function OnCreate(self)
    base.OnCreate(self)
    self.item_bg = self:AddComponent(UIBaseContainer, item_bg_path)
    self.item_quality = self:AddComponent(UIImage, item_quality_path)
    self.item_icon = self:AddComponent(UIImage, item_icon_path)
    self.num_text = self:AddComponent(UITextMeshProUGUIEx, num_text_path)
    self.name_text = self:AddComponent(UITextMeshProUGUIEx, name_text_path)
    self.flag_text = self:AddComponent(UITextMeshProUGUIEx, flag_text_path)
    self.objFlag = self:AddComponent(UIBaseContainer, flag_obj_path)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.imgExtra = self:AddComponent(UIImage, extra_path)
    self.btn:SetOnClick(function()  
SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBtnClick()
    end)
    self.hero_quality = self:AddComponent(UIImage, hero_quality_path)
    self.select = self:AddComponent(UIImage,select_path)
    self.rece_img = self:AddComponent(UIImage,rece_img_path)
    self.camp_img = self:AddComponent(UIImage,camp_img_path)
end

-- 销毁
local function OnDestroy(self)
    self.item_bg = nil
    self.item_quality = nil
    self.item_icon = nil
    self.num_text = nil
    self.name_text = nil
    self.flag_text = nil
    self.btn = nil
    self.param = nil
    self.hero_quality = nil
    self.select = nil
    self.rece_img = nil
    self.camp_img = nil
    self.redDot_img = nil
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
end

-- 隐藏
local function OnDisable(self)
    base.OnDisable(self)
end

-- 全部刷新
local function RefreshData(self,data,hideName)
    self.param = data
    local itemId = data["itemId"]
    local count = tonumber(data["count"])
    count = (count < 0 and "" or count)
    --count = (count == 0 and "" or count)
    local rewardType = data["rewardType"]
    local resourceType = data["resourceType"]
    if rewardType == nil and resourceType == nil then
        return
    end

    
    self.imgExtra:SetActive(false)
    self.item_bg:SetActive(false)
    
    self.hero_quality:SetActive(false)
    self.select:SetActive(false)
    self.rece_img:SetActive(false)
    self.camp_img:SetActive(false)
    self.item_icon:SetActive(true)
    self.item_quality:SetActive(false)

    if (resourceType ~= nil) then
        self.objFlag:SetActive(false)
        self.item_icon:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(self.param.resourceType))
        self.name_text:SetText( DataCenter.ResourceManager:GetResourceNameByType(self.param.resourceType))
        self.num_text:SetText(string.GetFormattedSeperatorNum(math.floor(count)))
        self.name_text:SetActive(false)
        return
    end
    self.item_icon:LoadSprite(DataCenter.RewardManager:GetPicByType(rewardType,itemId), nil, function()
        -- if rewardType == RewardType.ARM then
        --     self.item_icon:SetNativeSize()
        -- else
        --     self.item_icon:SetSizeDelta({x = 118,y = 118})
        -- end
    end)
    self.name_text:SetText(DataCenter.RewardManager:GetNameByType(rewardType,itemId))
    if (rewardType == RewardType.GOODS) then
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
        if (goods == nil) then
            return
        end
        self.num_text:SetText(string.GetFormattedSeperatorNum(math.floor(count)))
        local itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
        self.item_bg:SetActive(true)
        self.item_quality:SetActive(true)
        self.item_quality:LoadSprite(itemColor)
        --self.name_text:SetActive(true)--true
        local itemFlag = ""
        local itemType = goods.type
        if itemType == 2 then -- SPD
            if goods.para1 ~= nil and goods.para1 ~= "" then
                local para1 = goods.para1
                local temp = string.split(para1,';')
                if temp ~= nil and #temp > 1 then
                    itemFlag = temp[1]..temp[2]
                end
            end
        elseif itemType == 3 or goods.type == GOODS_TYPE.GOODS_TYPE_91 then -- USE
            local type2 = goods.type2
            if type2 ~= 999 and not string.IsNullOrEmpty(goods.para) and tonumber(goods.para) > 1 then
                local res_num = tonumber(goods.para)
                itemFlag = string.GetFormattedStr(res_num)
            end
        elseif itemType == 5 then
            if goods.para3 ~= nil and goods.para3 ~= "" then
                local res_num = tonumber(goods.para3)
                itemFlag = string.GetFormattedStr(res_num)
            end
        end
        self.flag_text:SetText(itemFlag)
        if (string.IsNullOrEmpty(itemFlag)) then
            self.objFlag:SetActive(false)
        else
            self.objFlag:SetActive(true)
        end
    elseif rewardType == RewardType.OIL or rewardType == RewardType.METAL
            or rewardType == RewardType.WATER or rewardType == RewardType.MONEY or rewardType == RewardType.ELECTRICITY 
            or rewardType == RewardType.PVE_POINT or rewardType == RewardType.DETECT_EVENT or rewardType == RewardType.FORMATION_STAMINA
            or rewardType == RewardType.EXP or rewardType == RewardType.WOOD
            or rewardType == RewardType.PLANK or rewardType == RewardType.STEEL or rewardType == RewardType.MEAL or rewardType == RewardType.FOOD then

        self.objFlag:SetActive(false)
        self.num_text:SetText(string.GetFormattedSeperatorNum(math.floor(count)))
        self.name_text:SetActive(false)
    elseif rewardType == RewardType.GOLD then
        self.objFlag:SetActive(false)
        self.num_text:SetText(count)
        self.name_text:SetActive(false)
    elseif rewardType == RewardType.MATERIAL  then
        self.objFlag:SetActive(false)
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.param.itemId)
        if goods ~= nil then
            self.item_quality:SetActive(true)
            self.item_quality:LoadSprite(DataCenter.ItemTemplateManager:GetToolBgByColor(tonumber(goods.color)))
            self.num_text:SetText(string.GetFormattedSeperatorNum(math.floor(count)))
        end
    elseif rewardType == RewardType.ARM then
        self.objFlag:SetActive(false)
        
        local army = DataCenter.ArmyTemplateManager:GetArmyTemplate(itemId)
        if army ~= nil then
            self.item_quality:SetActive(false)
            self.num_text:SetText(string.GetFormattedSeperatorNum(math.floor(count)))
            --self.name_text:SetActive(true)--true
        end
    elseif rewardType == RewardType.FLINT then
        self.objFlag:SetActive(false)
        self.num_text:SetText(string.GetFormattedSeperatorNum(count))
        self.name_text:SetActive(false)
    end
    if hideName~=nil and hideName == true then
        self.name_text:SetActive(false)
    end
end

local function ShowCount(self, hideCount)
    self.num_text:SetActive(not hideCount)
end

local function SetNameText(self, name)
    self.name_text:SetText(name)
end


local function OnBtnClick(self)
    local itemType = self.param.rewardType
    if itemType ~= RewardType.GOODS then
        return
    end
    if self.param.itemId ~= nil then
        local param = {}
        param["rewardType"] = self.param.rewardType
        param["itemId"] = self.param.itemId
        param["alignObject"] = self.item_icon
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
    end
end

local function ShowFlyEff(self)
    local rewardType = self.param.rewardType
    local itemId = self.param.itemId
    local pic = RewardUtil.GetPic(rewardType,itemId)
    if pic~="" then
        local flyNum = tonumber(self.param.count)
        flyNum = flyNum > 5 and 5 or flyNum
        UIUtil.DoFly(tonumber(rewardType),flyNum,pic,self.item_icon.transform.position,Vector3.New(0,0,0))
    end
end


MailRewardItem.OnCreate = OnCreate
MailRewardItem.OnDestroy = OnDestroy
MailRewardItem.OnBtnClick = OnBtnClick
MailRewardItem.OnEnable = OnEnable
MailRewardItem.OnDisable = OnDisable
MailRewardItem.RefreshData = RefreshData
MailRewardItem.ShowCount = ShowCount
MailRewardItem.SetNameText = SetNameText
MailRewardItem.ShowFlyEff = ShowFlyEff

return MailRewardItem