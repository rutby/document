---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 7/9/21 2:51 PM
---
local MailListItem = BaseClass("MailListItem",UIBaseContainer)
local base = UIBaseContainer

local name_path = "content/txtTitle"
local des_txt_path = "content/txtSubTitle"
local time_path = "content/txtTime"
local red_point_path = "content/RedPoint"
local btn_path = "content"
local img_gift_icon = "content/img_gift_icon"
local _cp_mailIcon = "content/mailIcon"
local _cp_txtTitleFight = "content/txtTitleFight"

local choose_path = "choose"
local select_btn_path = "choose/Btn_Select"
local choose_img_path = "choose/Btn_Select/Img_Choose"

local function OnCreate(self)
    base.OnCreate(self)
    self._txtTitleFight = self:AddComponent(UITextMeshProUGUIEx, _cp_txtTitleFight)
    self._mailIcon = self:AddComponent(UIImage, _cp_mailIcon)
    self.name = self:AddComponent(UITextMeshProUGUIEx,name_path)
    self.des = self:AddComponent(UITextMeshProUGUIEx,des_txt_path)
    self.time = self:AddComponent(UITextMeshProUGUIEx,time_path)
    self.redPoint = self:AddComponent(UIImage,red_point_path)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.img_gift_icon = self:AddComponent(UIBaseContainer, img_gift_icon)
    self.btn:SetOnClick(function ()
        self:OnClick()
    end)
    
    self.choose_path = self:AddComponent(UIBaseContainer,choose_path)
    self.select_btn = self:AddComponent(UIButton,select_btn_path)
    self.select_btn:SetOnClick(function ()
        self:OnClickChoose()
    end)
    self.choose_img = self:AddComponent(UIBaseContainer,choose_img_path)
end

local function SetItemShow(self, ...)
    local mailData = ...
    self._maildata = mailData
    self.itemId = mailData.uid
    local currentMail = self.view.ctrl:GetCurrentMail()
	local active = currentMail and (mailData.uid == currentMail.uid) or false
	
    -- 主标题
    local mainTitle = MailShowHelper.GetMainTitle(mailData)
    self.name:SetText(mainTitle)
    self._txtTitleFight:SetText(mainTitle)
    local subTitle = MailShowHelper.GetMailSubTitle(mailData)
    self.des:SetText(subTitle)
    local createTime = MailShowHelper.GetRelativeCreateTime(mailData)
    self.time:SetText(createTime)
    self.redPoint:SetActive(mailData.status~=1)
    local defaultIcon = string.format(LoadPath.UIMail, "UIMail_icon_daily")
    local mailIcon = MailShowHelper.GetMailIcon(mailData)
    if string.IsNullOrEmpty(mailIcon) then
        self._mailIcon:LoadSprite(defaultIcon)
    else
        mailIcon = string.format(LoadPath.UIMail, mailIcon)
        self._mailIcon:LoadSprite(mailIcon, defaultIcon)
    end
    

    self.img_gift_icon:SetActive(mailData.rewardStatus == 0)
	
    -- 检测邮件类型和胜负来显示主标题
    if (mailData.type == MailType.NEW_FIGHT) or mailData.type == MailType.SHORT_KEEP_FIGHT_MAIL or mailData.type == MailType.MARCH_DESTROY_MAIL then
        self._txtTitleFight:SetActive(true)
        self.name:SetActive(false)
        local resultState = mailData:GetMailExt():GetBattleResultStatus()
        if resultState == FightResult.SELF_WIN then
            self._txtTitleFight:SetColor(Color.New(101/255, 124/255, 20/255, 1))
        elseif resultState == FightResult.DRAW then
            self._txtTitleFight:SetColor(Color.New(72/255, 46/255, 40/255, 1))
        else
            self._txtTitleFight:SetColor(Color.New(174/255, 53/255, 33/255, 1))
        end
    else
        self._txtTitleFight:SetActive(false)
        self.name:SetActive(true)
    end
end

local function RefreshChoose(self,isChoose)
    self.choose_path:SetActive(isChoose)
    if isChoose then
        self.isSelectSelf = 0   --是否选中了自己   打开时默认未选择
    end
end

--批量全选，退出批量模式
local function RefreshToggle(self,isSelect)
    if isSelect then
        self.isSelectSelf = 1
    else
        self.isSelectSelf = 0
    end
    if self.isSelectSelf == 1 then
        self.choose_img:SetActive(true)
    else
        self.choose_img:SetActive(false)
    end
    EventManager:GetInstance():Broadcast(EventId.SelectCancelOne,{uid = self.itemId,state = isSelect})
end

local function RefreshState(self,isSelect)
    if isSelect then
        self:StateSet(isSelect)
    else
        if self.view.isClickBatch and not isSelect  then
            self.isSelectSelf = 0
            self.choose_img:SetActive(false)
        else
            self:StateSet()
        end
    end
    EventManager:GetInstance():Broadcast(EventId.SelectCancelOne,{uid = self.itemId,state = self.isSelectSelf == 1})
end

--在刷新过程中，只通过是否保存过该uid判断是否手动点过
local function StateSet(self,isSelect)
    if self.view.batchSelectAll and self.view.batchSelectTab then
        local state = table.hasvalue(self.view.batchSelectAll,self.itemId)  --要删除的
        local state2 = table.hasvalue(self.view.batchSelectTab,self.itemId)  --不要删除的
        if state then
            self.isSelectSelf = 1
            self.choose_img:SetActive(true)
        elseif state2 then
            self.isSelectSelf = 0
            self.choose_img:SetActive(false)
        else
            if isSelect then
                self.isSelectSelf = 1
                self.choose_img:SetActive(true)
            else
                self.isSelectSelf = 0
                self.choose_img:SetActive(false)
            end
        end
    else
        self.isSelectSelf = 0
        self.choose_img:SetActive(false)
    end
end

local function OnClickChoose(self)
    local state = table.hasvalue(self.view.batchSelectAll,self.itemId)
    if state then
        self.isSelectSelf = 0
        self.selectState = false
    else
        self.isSelectSelf = 1
        self.selectState = true
    end
    self.choose_img:SetActive(self.selectState)
    EventManager:GetInstance():Broadcast(EventId.SelectCancelOne,{uid = self.itemId,state = self.selectState})
end

local function OnClick(self)
    self.view.ctrl:ReadOneMail(self.itemId)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMailInfo, {anim = true, UIMainAnim = UIMainAnimType.AllHide}, self.itemId)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MailPush, self.RefreshRedPoint)
    self:AddUIListener(EventId.SelectBatchMail, self.RefreshChoose)
    self:AddUIListener(EventId.SelectBatchAll, self.RefreshToggle)
    
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MailPush, self.RefreshRedPoint)
    self:RemoveUIListener(EventId.SelectBatchMail, self.RefreshChoose)
    self:RemoveUIListener(EventId.SelectBatchAll, self.RefreshToggle)
end

local function RefreshItemState(self,data)
    if self.itemId == data then
        self.redPoint:SetActive(false)
    else
        local mailData = self.view.ctrl:GetOneMailByUid(self.itemId)
		if mailData then
        	self.redPoint:SetActive(mailData.status~=1)
		end
    end
end

local function RefreshRedPoint(self)
    local mailData = self.view.ctrl:GetOneMailByUid(self.itemId)
    if mailData then
        self.redPoint:SetActive(mailData.status~=1)
        self.img_gift_icon:SetActive(mailData.rewardStatus == 0)
    end
end

MailListItem.OnCreate = OnCreate
MailListItem.SetItemShow = SetItemShow
MailListItem.RefreshChoose = RefreshChoose
MailListItem.RefreshState = RefreshState
MailListItem.StateSet = StateSet
MailListItem.RefreshToggle = RefreshToggle
MailListItem.OnClickChoose = OnClickChoose
MailListItem.OnClick = OnClick
MailListItem.OnAddListener = OnAddListener
MailListItem.OnRemoveListener = OnRemoveListener
MailListItem.RefreshItemState = RefreshItemState
MailListItem.RefreshRedPoint = RefreshRedPoint

return MailListItem