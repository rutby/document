---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/5/10 14:41
---
local MailPlayerReportDefence = BaseClass("MailPlayerReportDefence",UIBaseContainer)
local base = UIBaseContainer

local title_path = "Bg/Title"
local trap_lose_path = "Bg/Vert/TrapLose"
local trap_lose_desc_path = "Bg/Vert/TrapLose/TrapLoseDesc"
local trap_lose_count_path = "Bg/Vert/TrapLose/TrapLoseCount"
local trap_kill_path = "Bg/Vert/TrapKill"
local trap_kill_desc_path = "Bg/Vert/TrapKill/TrapKillDesc"
local trap_kill_count_path = "Bg/Vert/TrapKill/TrapKillCount"
local trap_kill_detail_path = "Bg/Vert/TrapKill/TrapKillCount/TrapKillDetail"
local tower_kill_path = "Bg/Vert/TowerKill"
local tower_kill_desc_path = "Bg/Vert/TowerKill/TowerKillDesc"
local tower_kill_count_path = "Bg/Vert/TowerKill/TowerKillCount"
local tower_kill_detail_path = "Bg/Vert/TowerKill/TowerKillCount/TowerKillDetail"

local ItemData =
{
    list = {},
    name = "",
    nameColor = WhiteColor,
    total = 0,
    dead = 0,
    injured = 0,
    wounded = 0,
    cured = 0,
    alive = 0,
}

local CellData =
{
    armyId = "",
    total = 0,
    dead = 0,
    injured = 0,
    wounded = 0,
    cured = 0,
    alive = 0,
}

function MailPlayerReportDefence:OnCreate()
    base.OnCreate(self)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title_text:SetLocalText(104347)
    self.trap_lose_go = self:AddComponent(UIBaseContainer, trap_lose_path)
    self.trap_lose_desc_text = self:AddComponent(UITextMeshProUGUIEx, trap_lose_desc_path)
    self.trap_lose_desc_text:SetLocalText(312122)
    self.trap_lose_count_text = self:AddComponent(UITextMeshProUGUIEx, trap_lose_count_path)
    self.trap_kill_go = self:AddComponent(UIBaseContainer, trap_kill_path)
    self.trap_kill_desc_text = self:AddComponent(UITextMeshProUGUIEx, trap_kill_desc_path)
    self.trap_kill_desc_text:SetLocalText(312123)
    self.trap_kill_count_text = self:AddComponent(UITextMeshProUGUIEx, trap_kill_count_path)
    self.trap_kill_detail_btn = self:AddComponent(UIButton, trap_kill_detail_path)
    self.trap_kill_detail_btn:SetOnClick(function()
        self:OnTrapKillDetailClick()
    end)
    self.tower_kill_go = self:AddComponent(UIBaseContainer, tower_kill_path)
    self.tower_kill_desc_text = self:AddComponent(UITextMeshProUGUIEx, tower_kill_desc_path)
    self.tower_kill_desc_text:SetLocalText(312124)
    self.tower_kill_count_text = self:AddComponent(UITextMeshProUGUIEx, tower_kill_count_path)
    self.tower_kill_detail_btn = self:AddComponent(UIButton, tower_kill_detail_path)
    self.tower_kill_detail_btn:SetOnClick(function()
        self:OnTowerKillDetailClick()
    end)
end

function MailPlayerReportDefence:OnEnable()
    base.OnEnable(self)
end

function MailPlayerReportDefence:OnDisable()
    base.OnDisable(self)
end

function MailPlayerReportDefence:SetData(mailData)
    local ext = mailData:GetMailExt()
    local isMyCity = ext:IsMyProtectCity()
    local loseDict =
    {
        [SpecialUnitType.TRAP] = 0,
        [SpecialUnitType.TOWER] = 0,
    }
    local killDict =
    {
        [SpecialUnitType.TRAP] = 0,
        [SpecialUnitType.TOWER] = 0,
    }
    
    self.itemDataList = {}
    self.itemDataList[SpecialUnitType.TRAP] = { DeepCopy(ItemData) }
    self.itemDataList[SpecialUnitType.TOWER] = {}
    
    for i = 1, ext:GetTotalRoundCnt() do
        local showData = ext:GetShowRoundListDataByIndex(i)
        if showData then
            local type = SpecialUnitType.NONE
            local isLeft = false
            if showData.leftData.specialType == SpecialUnitType.TRAP then
                type = SpecialUnitType.TRAP
                isLeft = true
            elseif showData.rightData.specialType == SpecialUnitType.TRAP then
                type = SpecialUnitType.TRAP
                isLeft = false
            elseif showData.leftData.specialType == SpecialUnitType.TOWER then
                type = SpecialUnitType.TOWER
                isLeft = true
            elseif showData.rightData.specialType == SpecialUnitType.TOWER then
                type = SpecialUnitType.TOWER
                isLeft = false
            end
            
            if type ~= SpecialUnitType.NONE then
                local round = ext:GetFightReportByRoundIndex(showData._roundIndex)
                local defUuid, targetUuid, defData, targetData, defArmyResult, targetArmyResult
                if isLeft then
                    -- 我的防御设施
                    defUuid = showData.leftUuid
                    targetUuid = showData.rightUuid
                    defData = showData.leftData
                    targetData = showData.rightData
                    defArmyResult = round:GetSelfArmyResult()
                    targetArmyResult = round:GetOtherArmyResult()
                else
                    -- 别人的防御设施
                    defUuid = showData.rightUuid
                    targetUuid = showData.leftUuid
                    defData = showData.rightData
                    targetData = showData.leftData
                    defArmyResult = round:GetOtherArmyResult()
                    targetArmyResult = round:GetSelfArmyResult()
                end
                if defData and targetData then
                    -- def
                    local defItemData
                    if type == SpecialUnitType.TRAP then
                        defItemData = self.itemDataList[type][1]
                    end
                    if defItemData then
                        if string.IsNullOrEmpty(defItemData.name) then
                            defItemData.name = defData.unitData.name
                            if not string.IsNullOrEmpty(defData.unitData.alAbbr) then
                                defItemData.name = "[" .. defData.unitData.alAbbr .. "]" .. defItemData.name
                            end
                        end
                        defItemData.nameColor = isMyCity and TextColorGreenLight or WorldRedColor
                    end

                    local trapArmyIds = table.keys(defData.afterUnitData._tSoldiers)
                    for _, armyId in ipairs(trapArmyIds) do
                        local before = defData.unitData._tSoldiers[armyId]
                        local after = defData.afterUnitData._tSoldiers[armyId]

                        local cellData = nil
                        if defItemData then
                            for _, v in ipairs(defItemData.list) do
                                if v.armyId == armyId then
                                    cellData = v
                                    break
                                end
                            end
                        end
                        if cellData == nil then
                            if defItemData then
                                cellData = DeepCopy(CellData)
                                cellData.armyId = armyId
                                cellData.total = before.total - before.lost
                                cellData.dead = after.dead - before.dead
                                cellData.injured = after.injured - before.injured
                                cellData.wounded = after.wounded - before.wounded
                                cellData.cured = after.cure - before.cure
                                cellData.alive = after.total - after.lost
                                table.insert(defItemData.list, cellData)
                                
                                defItemData.total = defItemData.total + cellData.total
                                defItemData.dead = defItemData.dead + cellData.dead
                                defItemData.injured = defItemData.injured + cellData.injured
                                defItemData.wounded = defItemData.wounded + cellData.wounded
                                defItemData.cured = defItemData.cured + cellData.cured
                                defItemData.alive = defItemData.alive + cellData.alive
                            end

                            loseDict[type] = loseDict[type] + cellData.dead
                        end
                    end

                    -- target
                    local damagePercentInfo = targetArmyResult:GetDamagePercentInfo()
                    local dmgInfo = damagePercentInfo and damagePercentInfo[targetUuid] and damagePercentInfo[targetUuid][defUuid] or {}
                    local itemData = DeepCopy(ItemData)
                    itemData.name = targetData.unitData.name
                    if not string.IsNullOrEmpty(targetData.unitData.alAbbr) then
                        itemData.name = "[" .. targetData.unitData.alAbbr .. "]" .. itemData.name
                    end
                    itemData.nameColor = isMyCity and WorldRedColor or TextColorGreenLight

                    local targetArmyIds = table.keys(targetData.afterUnitData._tSoldiers)
                    for _, armyId in ipairs(targetArmyIds) do
                        local before = targetData.unitData._tSoldiers[armyId]
                        local after = targetData.afterUnitData._tSoldiers[armyId]

                        local total = before.total - before.lost
                        local dead = math.floor((after.dead - before.dead) * (dmgInfo.deadPercent or 0))
                        local injured = math.floor((after.injured - before.injured) * (dmgInfo.injuredPercent or 0))
                        local wounded = math.floor((after.wounded - before.wounded) * (dmgInfo.woundedPercent or 0))
                        --local cured = after.cure - before.cure
                        local cured = 0
                        local lost = dead + injured + wounded - cured
                        local alive = total - lost

                        local cellData = DeepCopy(CellData)
                        cellData.armyId = armyId
                        cellData.total = total
                        cellData.dead = dead
                        cellData.injured = injured
                        cellData.wounded = wounded
                        cellData.cured = cured
                        cellData.alive = alive
                        table.insert(itemData.list, cellData)

                        itemData.total = itemData.total + total
                        itemData.dead = itemData.dead + dead
                        itemData.injured = itemData.injured + injured
                        itemData.wounded = itemData.wounded + wounded
                        itemData.cured = itemData.cured + cured
                        itemData.alive = itemData.alive + alive

                        killDict[type] = killDict[type] + lost
                    end

                    table.insert(self.itemDataList[type], itemData)
                end
            end
        end
    end
    
    if loseDict[SpecialUnitType.TRAP] > 0 or killDict[SpecialUnitType.TRAP] > 0 then
        self.trap_lose_go:SetActive(true)
        self.trap_kill_go:SetActive(true)
        self.trap_lose_count_text:SetText(string.GetFormattedSeperatorNum(loseDict[SpecialUnitType.TRAP]))
        self.trap_kill_count_text:SetText(string.GetFormattedSeperatorNum(killDict[SpecialUnitType.TRAP]))
    else
        self.trap_lose_go:SetActive(false)
        self.trap_kill_go:SetActive(false)
    end
    
    if killDict[SpecialUnitType.TOWER]> 0 then
        self.tower_kill_go:SetActive(true)
        self.tower_kill_count_text:SetText(string.GetFormattedSeperatorNum(killDict[SpecialUnitType.TOWER]))
    else
        self.tower_kill_go:SetActive(false)
    end
end

function MailPlayerReportDefence:OnTrapKillDetailClick()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMailDefenceDetail, { anim = true }, self.itemDataList[SpecialUnitType.TRAP])
end

function MailPlayerReportDefence:OnTowerKillDetailClick()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMailDefenceDetail, { anim = true }, self.itemDataList[SpecialUnitType.TOWER])
end

return MailPlayerReportDefence