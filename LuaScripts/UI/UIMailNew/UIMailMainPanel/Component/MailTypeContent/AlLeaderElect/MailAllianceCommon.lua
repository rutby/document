---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/10/25 16:14
---

local MailAllianceCommon = BaseClass("MailAllianceCommon", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local rapidjson = require "rapidjson"
local HeroRewardItem = require "UI.UICapacityBoxSelect.Component.UICapacityBoxHeroItem"
local MailRewardItem = require "UI.UIMailNew.UIMailMainPanel.Component.MailRewardItem"

local title_path = "UIMailItemTitle/txtMainTitle"
local subTitle_path = "UIMailItemTitle/txtSubTitle"
local time_path = "UIMailItemTitle/txtTime"
local mailMsg_path = "txtContext"
local _cp_subDesc = "Image/subDesc"
local _cp_objReward = "objRewardNode"
local _cp_objGetReward = "objGetReward"
local _cp_btnGetReward = "objGetReward/btnGetReward"
local _cp_txtGetReward = "objGetReward/btnGetReward/txtGetReward"

local function OnCreate(self)
    base.OnCreate(self)

    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.subTitleN = self:AddComponent(UITextMeshProUGUIEx, subTitle_path)
    self.timeN = self:AddComponent(UITextMeshProUGUIEx, time_path)
    self.mailMsgN = self:AddComponent(UITextMeshProUGUIEx, mailMsg_path)-- self:AddComponent(UITextMeshProUGUIEx, mailMsg_path)
    self._objReward = self:AddComponent(UIBaseContainer, _cp_objReward)
    self._objGetReward = self:AddComponent(UIBaseContainer, _cp_objGetReward)
    self._btnGetReward = self:AddComponent(UIButton, _cp_btnGetReward)
    self._btnGetReward:SetOnClick(BindCallback(self, self.OnClickBtnGetReward))
    self._txtGetReward = self:AddComponent(UITextMeshProUGUIEx, _cp_txtGetReward)
    self._subDesc = self:AddComponent(UITextMeshProUGUIEx, _cp_subDesc)
    self._subDesc:SetLocalText(450062)

    self.cell_prefab = self.transform:Find("MailRewardItem").gameObject
    self.cell_prefab:GameObjectCreatePool()

    self.hero_prefab = self.transform:Find("HeroRewardItem").gameObject
    self.hero_prefab:GameObjectCreatePool()
end

local function OnDestroy(self)
    base.OnDestroy(self)
end

local function OnDisable(self)
    if IsNull(self.gameObject) then
        return
    end
    self._objReward:RemoveComponents(MailRewardItem)
    self._objReward:RemoveComponents(HeroRewardItem)
    self.cell_prefab.gameObject:GameObjectRecycleAll()
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MailPush, self.CheckRewardState)
    self:AddUIListener(EventId.ReadOneMailRespond, self.RewardSuccess)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MailPush,self.CheckRewardState)
    self:RemoveUIListener(EventId.ReadOneMailRespond, self.RewardSuccess)
end

local function CheckRewardState(self)
    self._mailData = DataCenter.MailDataManager:GetMailInfoById(self._mailData.uid)
    self:ShowRewardBtn(self._mailData)
end

local function ShowReward(self, maildata)
    local pay = maildata:GetMailPay()
    local reward = maildata:GetMailReward()
    local totalCnt = 0
    -- 检测钻石
    if pay ~= nil then
        local goldCnt = pay["gold"] or 0
        if goldCnt > 0 then
            totalCnt = totalCnt + 1
            self:ShowRewardItem({["rewardType"] = RewardType.GOLD, ["itemId"] = "gold", ["count"] = goldCnt})
        end
    end
    -- 检测道具
    if reward ~= nil and table.count(reward["rewardInfo"]) > 0 then
        local tabReward = reward["rewardInfo"]
        local heroArr = {}
        for _, iteminfo in pairs(tabReward) do
            if (iteminfo["type"] == RewardType.GOODS) then
                local itemId = iteminfo["id"]
                local itemCnt = iteminfo["num"]
                local param = {["rewardType"] = RewardType.GOODS, ["itemId"] = itemId, ["count"] = itemCnt}
                totalCnt = totalCnt + 1
                self:ShowRewardItem(param)
            else
                local itemId = iteminfo["id"]
                local itemCnt = iteminfo["num"]
                local param = {["rewardType"] = iteminfo["type"], ["itemId"] = itemId, ["count"] = itemCnt}
                totalCnt = totalCnt + 1
                if param.rewardType == RewardType.HERO then
                    table.insert(heroArr,param)
                else
                    self:ShowRewardItem(param)
                end
            end
        end
        if #heroArr>0 then
            table.sort(heroArr,function(a,b)
                local heroQualityA = GetTableData(HeroUtils.GetHeroXmlName(), a.itemId, "rarity")
                local heroQualityB = GetTableData(HeroUtils.GetHeroXmlName(), b.itemId, "rarity")
                return heroQualityA < heroQualityB
            end)
            for i=1,#heroArr do
                self:ShowRewardItem(heroArr[i])
            end
        end
    end
    if maildata.type == MailType.COLLECT_OVER_FLOW_MAIL then
        local data = maildata:GetMailSFSObj()
    end
    return totalCnt
end

local function ShowRewardItem(self, rewardData)
    NameCount = NameCount + 1
    if rewardData.rewardType == RewardType.HERO then
        local objName = rewardData["rewardType"] .. NameCount
        --复制基础prefab，每次循环创建一次
        local item = self.hero_prefab:GameObjectSpawn(self._objReward.transform)
        item.name = objName
        local obj = self._objReward:AddComponent(HeroRewardItem,item.name)
        local param = {}
        param.heroId = rewardData.itemId--.id
        param.count = rewardData.count--.num
        local heroName = GetTableData(HeroUtils.GetHeroXmlName(), rewardData.itemId, "name")
        local heroQuality = GetTableData(HeroUtils.GetHeroXmlName(), rewardData.itemId, "init_quality_level")
        param.name = string.format("<color='%s'>%s</color>",HeroUtils.GetQualityColorStr(heroQuality),Localization:GetString(heroName))
        obj:RefreshData(param)
    else
        local objName = rewardData["rewardType"] .. NameCount
        --复制基础prefab，每次循环创建一次
        local item = self.cell_prefab:GameObjectSpawn(self._objReward.transform)
        item.name = objName
        local obj = self._objReward:AddComponent(MailRewardItem,item.name)
        obj:RefreshData(rewardData)
    end
end

local function ShowRewardBtn(self, maildata)
    if maildata ~=nil then
        local reward = maildata:GetMailReward()
        if reward then
            if DataCenter.BuildManager.MainLv >= (reward.rewardLevel or 0) then
                self._txtGetReward:SetLocalText(GameDialogDefine.GET_REWARD)
                self._objGetReward:SetActive(maildata.rewardStatus == 0)
                self._btnGetReward:SetActive(maildata.rewardStatus == 0)
            end
            if self.view.RefreshToBottomBtn then
                self.view:RefreshToBottomBtn(self._btnGetReward)
            end
        else
            self._objGetReward:SetActive(false)
            self._btnGetReward:SetActive(false)
        end
    else
        self._objGetReward:SetActive(false)
        self._btnGetReward:SetActive(false)
    end
    
end

local function RewardSuccess(self)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Common_GetReward)
    local isGold = false
    local pay = self._mailData:GetMailPay()
    if pay ~= nil then
        if pay["gold"] > 0 then
            isGold = true
            UIUtil.DoFly(RewardType.GOLD,2,DataCenter.RewardManager:GetPicByType(RewardType.GOLD),self._objReward.transform:GetChild(0).gameObject.transform.position,Vector3.New(0,0,0),100,100)
        end
    end

    local reward = self._mailData:GetMailReward()
    local tempType = {}
    if reward and reward.rewardInfo then
        for i = 1, #reward.rewardInfo do
            if reward.rewardInfo[i].type ~= RewardType.MONEY and reward.rewardInfo[i].type ~= RewardType.GOLD then
                table.insert(tempType,RewardToResType[reward.rewardInfo[i].type])
            end
        end
    end
    if next(tempType) then
        EventManager:GetInstance():Broadcast(EventId.RefreshTopResByPickUp,tempType)
    end
    if reward ~= nil and table.count(reward["rewardInfo"]) > 0 then
        local count = self._objReward.transform.childCount
        if count~=nil and count>0 and count<= table.count(reward["rewardInfo"]) then
            for i = 1, self._objReward.transform.childCount do
                local child = self._objReward.transform:GetChild(i - 1)
                local img = child.gameObject.transform:Find("clickBtn/ItemIcon")
                if img~=nil then
                    local pic = DataCenter.RewardManager:GetPicByType(reward.rewardInfo[i].type,reward.rewardInfo[i].id)
                    local flyPos =Vector3.New(0,0,0)
                    UIUtil.DoFly(reward.rewardInfo[i].type,2,pic,img.gameObject.transform.position,flyPos,100,100)
                end
            end
        end
    end
end

local function setData(self, mailData)
    self._mailData = mailData
    self:ParseContent()
    self:RefreshUI()
    
    self._objReward:SetActive(false)
    self.cell_prefab.gameObject:GameObjectRecycleAll()
    self.hero_prefab.gameObject:GameObjectRecycleAll()
    self:ShowReward(mailData)
    self:ShowRewardBtn(mailData)
    local count = self:ShowReward(maildata)
    self._objReward:SetActive(count>0)
end

local function ParseContent(self)
    if self._mailData == nil then
        return;
    end
    
end

local function RefreshUI(self)
    local strMainTitle = MailShowHelper.GetMainTitle(self._mailData)
    self.titleN:SetText(strMainTitle)
    local strSubTitle = MailShowHelper.GetMailSubTitle(self._mailData)
    self.subTitleN:SetText(strSubTitle)
    local strTime = MailShowHelper.GetAbstractCreateTime(self._mailData)
    self.timeN:SetText(strTime)
    local mailMsg = self._mailData:GetMailMessage()
    self.mailMsgN:SetText(mailMsg)
end

local function OnClickBtnGetReward(self)
    DataCenter.MailDataManager:SetAllAndOne(false)
    DataCenter.MailDataManager:SetAllReward(false)
    DataCenter.MailDataManager:RewardMail(self._mailData.uid)
end

MailAllianceCommon.OnCreate = OnCreate
MailAllianceCommon.OnDestroy = OnDestroy
MailAllianceCommon.OnAddListener = OnAddListener
MailAllianceCommon.OnRemoveListener = OnRemoveListener
MailAllianceCommon.CheckRewardState = CheckRewardState
MailAllianceCommon.ShowReward = ShowReward
MailAllianceCommon.ShowRewardItem = ShowRewardItem
MailAllianceCommon.ShowRewardBtn = ShowRewardBtn
MailAllianceCommon.RewardSuccess = RewardSuccess
MailAllianceCommon.setData = setData
MailAllianceCommon.ParseContent = ParseContent
MailAllianceCommon.RefreshUI = RefreshUI
MailAllianceCommon.OnClickBtnGetReward = OnClickBtnGetReward

return MailAllianceCommon