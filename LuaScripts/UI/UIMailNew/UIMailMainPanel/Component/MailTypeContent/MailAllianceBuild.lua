---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/3/1 14:03
---
local MailAllianceBuild = BaseClass("MailAllianceBuild",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local base64 = require "Framework.Common.base64"
local rapidjson = require "rapidjson"
local MailParseHelper = require "DataCenter.MailData.MailParseHelper"
local _cp_this = ""
local _cp_txtMainTitle = "UIMailItemTitle/txtMainTitle"
local _cp_txtSubTitle = "UIMailItemTitle/txtSubTitle"
local _cp_txtTime = "UIMailItemTitle/txtTime"
local _cp_txtDesc = "txtDesc"
local obj_path = "GameObject"
local headIconPath = "GameObject/head/ImageNormal"
local nameTextPath = "GameObject/nameText"
local jumpBtnPath = "GameObject/jumpBtnObj"
local jumpBtnTextPath = "GameObject/jumpBtnObj/jumpText"


function MailAllianceBuild:OnCreate()
    base.OnCreate(self)
    self.go = self:AddComponent(UIBaseContainer, _cp_this)
    self._txtMainTitle = self:AddComponent(UITextMeshProUGUIEx, _cp_txtMainTitle)
    self._txtSubTitle = self:AddComponent(UITextMeshProUGUIEx, _cp_txtSubTitle)
    self._txtTime = self:AddComponent(UITextMeshProUGUIEx, _cp_txtTime)
    self._txtDesc = self:AddComponent(UITextMeshProUGUIEx, _cp_txtDesc)
    self._txtDesc:OnPointerClick(function (eventData)
        self:OnPointerClick(eventData.position)
    end)
    self.obj = self:AddComponent(UIBaseContainer, obj_path)
    self.headIcon = self:AddComponent(CircleImage, headIconPath)
    self.nameText = self:AddComponent(UITextMeshProUGUIEx, nameTextPath)
    self.jumpBtn = self:AddComponent(UIButton, jumpBtnPath)
    self.jumpBtnText = self:AddComponent(UITextMeshProUGUIEx, jumpBtnTextPath)
    self.jumpBtnText:SetLocalText(110003)

    self.jumpBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickBtnPos()
    end)

end


function MailAllianceBuild:OnDisable()
    base.OnDisable(self)
end

function MailAllianceBuild:OnClickBtnPos()
    if self.extData~=nil then
        local point = self.extData.building.pointId or 0
        local serverId = self.extData.building.serverId
        GoToUtil.CloseAllWindows()
        EventManager:GetInstance():Broadcast(EventId.UIMAIN_VISIBLE, true)
        local position = SceneUtils.TileIndexToWorld(point,ForceChangeScene.World)
        GoToUtil.GotoWorldPos(position,nil,nil,function()
            WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
        end,serverId)
    end
    --GoToUtil.CloseAllWindows()
    --EventManager:GetInstance():Broadcast(EventId.UIMAIN_VISIBLE, true)
    --local pointId = self.mailData["needCollectReward"]["pointId"] or 0

end

function MailAllianceBuild:OnPointerClick( clickPos )
    if (self._txtDesc == nil) then
        return
    end
    local pos = clickPos
    local x = pos.x
    local y = pos.y
    local vec3 = Vector3.New(x, y, 0)
    local linkIndex = CS.TMPro.TMP_TextUtilities.FindIntersectingLink(self._txtDesc.unity_tmpro, vec3, nil);
    if (linkIndex == -1) then
        return
    end
    local linkInfo = self._txtDesc:GetLinkInfo()
    if (linkInfo == nil) then
        return
    end
    local linkItem = linkInfo[linkIndex]
    local linkId = linkItem:GetLinkID()
    if (string.IsNullOrEmpty(linkId)) then
        return
    end
    local linkMsg = base64.decode(linkId)
    linkMsg = rapidjson.decode(linkMsg)
    self:OnHandleLink(linkMsg)
end

function MailAllianceBuild:OnHandleLink(linkMsg)
    if (linkMsg["action"] == "Jump") then
        self:OnMoveToPos(linkMsg)
    end
end

function MailAllianceBuild:OnMoveToPos(linkMsg)
    self:OnClickBtnPos()
end

function MailAllianceBuild:setData( maildata )
    self._mailData = maildata
    -- 设置数据
    local _strTitle = MailShowHelper.GetMainTitle(maildata)
    self._txtMainTitle:SetText(_strTitle)
    local _strSubTitle = MailShowHelper.GetMailSubTitle(maildata)
    self._txtSubTitle:SetText(_strSubTitle)
    local _strTime = MailShowHelper.GetAbstractCreateTime(maildata)
    self._txtTime:SetText(_strTime)
    local ext = self._mailData:GetMailExt()
    local buildName = ""
    local strDes = ""
    local img = ""
    if ext~=nil then
        self.extData = ext
        if self.extData~=nil then
            local playerName = ""
            if self.extData.placeUser~=nil then
                playerName = self.extData.placeUser.name
            end
            local buildId = self.extData.building.buildId
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(buildId)
            if template~=nil then
                buildName = Localization:GetString(template.name)
                img = template:GetCircleIconPath()
            end
            local point = self.extData.building.pointId or 0
            local vecPos = SceneUtils.IndexToTilePos(point,ForceChangeScene.World)
            local serverId = self.extData.building.serverId
            local msg = {}
            msg.x = vecPos.x
            msg.y = vecPos.y
            msg.server = serverId
            local strPoint = MailParseHelper:DecodePoint(msg)
            if self.extData.type ==1 then
                strDes = Localization:GetString("110571",playerName,buildName,strPoint)
                self.obj:SetActive(true)
            elseif self.extData.type ==2 then
                strDes = Localization:GetString("110573",playerName,buildName,strPoint)
                self.obj:SetActive(true)
            elseif self.extData.type == 3 then
                strDes = Localization:GetString("110567",playerName,strPoint,buildName)
                self.obj:SetActive(false)
            elseif self.extData.type == 4 then
                strDes = Localization:GetString("110991",strPoint,buildName)
                self.obj:SetActive(false)
            end
        end
    end
    self._txtDesc:SetText(strDes)
    self.nameText:SetText(buildName)
    self.headIcon:LoadSprite(img)
end

return MailAllianceBuild