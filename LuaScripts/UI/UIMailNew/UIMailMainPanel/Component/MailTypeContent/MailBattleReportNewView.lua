---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 8/5/21 11:12 AM
---
local MailBattleReportNewView = BaseClass("MailBattleReportNewView",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UnityUILoopListViewInitParam = typeof(CS.SuperScrollView.LoopListViewInitParam)
local MailContentTitle = require "UI.UIMailNew.UIMailMainPanel.Component.MailContentTitle"
local MailPlayerReport = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.BattleTypeNew.MailPlayerReport"
local MailPlayerReportTotal = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.BattleTypeNew.MailPlayerReportTotal"
local MailPlayerReportDefence = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.BattleTypeNew.MailPlayerReportDefence"
local _cp_looplistview = "ScrollView"
local _cp_looplistview_content = "ScrollView/Viewport/Content"

local eConfigType = {
    eContentTitle = 1,      -- 标题
    eBattleTotal = 2,    -- 伤害汇总信息
    eBattleTeamItem = 3,    -- 双方队伍信息
    --eBattleTopUserInfo = 3, -- 个人信息简述
    --eBattleTotalSummary = 4 -- 自己这一方的信息汇总
    eBattleDefence = 5, -- 防御设施信息
}

local eConfig = {
    [eConfigType.eContentTitle] = {
        ["Prefab"] = "UIMailItemTitle",
        ["Script"] = MailContentTitle    
    },
    [eConfigType.eBattleTotal] = {
        ["Prefab"] = "MailPlayerReportTotal",
        ["Script"] = MailPlayerReportTotal
    },
    [eConfigType.eBattleTeamItem] = {
        ["Prefab"] = "MailPlayerReport",
        ["Script"] = MailPlayerReport
    },
    
    --[eConfigType.eBattleTotalSummary] = {
    --    ["Prefab"] = "ObjBattleTotalSummary",
    --    ["Script"] = MailBattleTotalSummary
    --}
    [eConfigType.eBattleDefence] = {
        ["Prefab"] = "MailPlayerReportDefence",
        ["Script"] = MailPlayerReportDefence
    },
}


function MailBattleReportNewView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.Event_ShowBattleReportDetail, self.ShowBattleReportDetail)

end

function MailBattleReportNewView:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.Event_ShowBattleReportDetail,self.ShowBattleReportDetail)
end

function MailBattleReportNewView:ShowBattleReportDetail( message )
    if (table.IsNullOrEmpty(message)) then
        return
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMailDetailReportView,{anim = false, isBlur = true}, message)
end

function MailBattleReportNewView:OnCreate()
    base.OnCreate(self)
    self._totalItemCnt = 0
    self._cellList = {}
    self._looplistview = self:AddComponent(UILoopListView2, _cp_looplistview)
    self._looplistview_content = self:AddComponent(UIBaseContainer, _cp_looplistview_content)
    local listInitDefaultPara = CS.SuperScrollView.LoopListViewInitParam.CopyDefaultInitParam()
    --listInitDefaultPara.mDistanceForRecycle0 = 1750
    --listInitDefaultPara.mDistanceForRecycle1 = 1750
    --listInitDefaultPara.mSmoothDumpRate = 0.04
    self._looplistview:InitListViewParam(0, function (listview, index)
        return self:GetScrollItem(listview, index)
    end,listInitDefaultPara)
end

function MailBattleReportNewView:OnDestroy()
    self._cellList = {}
    for _, config in pairs(eConfig) do
        local component = config["Script"]
        self._looplistview_content:RemoveComponents(component)
    end
    self._looplistview:ClearAllItems()
end

function MailBattleReportNewView:OnDisable()
    base.OnDisable(self)
end

function MailBattleReportNewView:GetScrollItem(listview, index)
    index = index + 1
    local data = self.dataList[index]
    if data == nil then
        return nil
    end
    local config = eConfig[data.type]
    local item = listview:NewListViewItem(config["Prefab"])
    if self._cellList[item] == nil then
        NameCount = NameCount + 1
        local nameStr = tostring(NameCount)
        item.gameObject.name = nameStr
        local mailItem = self._looplistview_content:AddComponent(config["Script"], nameStr)
        self._cellList[item] = mailItem
    end
    self:SetItemData(self._cellList[item], index)
    return item
end

function MailBattleReportNewView:SetItemData(handler, index)
    local data = self.dataList[index]
    if data.type == eConfigType.eContentTitle then
        self:SetItemData_CommonTitle(handler)
    elseif data.type == eConfigType.eBattleTotal then
        handler:SetData(self._maildata)
    elseif data.type == eConfigType.eBattleDefence then
        handler:SetData(self._maildata)
    elseif data.type == eConfigType.eBattleTeamItem then
        handler:SetData(self._maildata, data.index, self.needShowReplay, self.jumpType)
    end
end

function MailBattleReportNewView:SetItemData_CommonTitle(handler)
    local param = {}
    if self._maildata.type == MailType.NEW_FIGHT_MINECAVE then
        param["main"] = Localization:GetString("302207")
        param["showShare"] = (self.jumpType == PlayBackEndJumpType.MineCave)
    elseif self._maildata.type == MailType.NEW_FIGHT_ARENA then
        param["main"] = Localization:GetString("372255")
        param["showShare"] = (self.jumpType == PlayBackEndJumpType.Arena)
    else
        param["showShare"] = false
        param["main"] = MailShowHelper.GetMainTitle(self._maildata)
        param["score"] = MailShowHelper.GetMainTitle(self._maildata)
    end
    param["sub"] = MailShowHelper.GetMailSummary(self._maildata, nil, self._maildata.senderUid)
    param["time"] = MailShowHelper.GetAbstractCreateTime(self._maildata)
    param["mailInfo"] = self._maildata
    handler:SetData(param)
end

function MailBattleReportNewView:setData( maildata ,showReplay,jumpType)
    self._maildata = maildata
    self.needShowReplay = showReplay
    self.jumpType = jumpType
    local ext = self._maildata:GetMailExt()
    ext:SortRound()
    self.dataList = self:GetDataListInternal()
    self._looplistview:SetListItemCount(#self.dataList, true, true)
    self._looplistview:RefreshAllShownItem()
end

function MailBattleReportNewView:GetDataListInternal()
    local ext = self._maildata:GetMailExt()
    
    local dataList = {}
    -- 标题
    table.insert(dataList, { type = eConfigType.eContentTitle })
    
    local teamRounds = {} -- Dict<roundIndex, showRoundList 的 index>
    local hasDefence = false
    
    for i, showRound in ipairs(ext.showRoundList) do
        if ext:IsDefenceShowRound(i) then
            hasDefence = true
        else
            table.insert(teamRounds,i)
        end
    end
    
    if #teamRounds > 1 and self._maildata.type ~= MailType.ELITE_FIGHT_MAIL then
        -- 汇总信息
        table.insert(dataList, { type = eConfigType.eBattleTotal })
    end
    
    for roundIndex, index in ipairs(teamRounds) do
        -- 双方队伍信息
        table.insert(dataList, { type = eConfigType.eBattleTeamItem, index = index })
        
        if roundIndex == 1 and hasDefence then
            -- 防御设施信息，放在第二个
            table.insert(dataList, { type = eConfigType.eBattleDefence })
        end
    end
    
    return dataList
end

return MailBattleReportNewView