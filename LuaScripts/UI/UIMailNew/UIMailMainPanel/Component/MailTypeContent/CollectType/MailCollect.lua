---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 7/23/21 9:58 AM
---
local MailCollect = BaseClass("MailCollect",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local rapidjson = require "rapidjson"
local Setting = CS.GameEntry.Setting

local MailCollectItem = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.CollectType.MailCollectItem"
local MailContentTitle = require "UI.UIMailNew.UIMailMainPanel.Component.MailContentTitle"


local _cp_looplist = "ScrollRect"
local _cp_loopContent = "ScrollRect/Viewport/ScrollContent"


function MailCollect:DataDefine()
    self._lastCollectCnt = 0 -- 用来记录上次请求数据,服务器返回的采集邮件个数,如果此时和上次的个数相同就不需要刷新界面了
    self._collectMail = {} -- mail信息 -- 重组后的采集集合信息  一封采集邮件中可以包含多次采集的信息,部队在外面可以采集多个资源点再返回
    self._objList = {} -- 节点集合
    self._toLoadMore = false
    self._loadingMail = false
    self._openTimeStamp = UITimeManager:GetInstance():GetServerSeconds()
end

function MailCollect:OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self._looplist = self:AddComponent(UILoopListView2, _cp_looplist)
    self._scrollviewContent = self:AddComponent(UIBaseContainer, _cp_loopContent)

    self._looplist:InitListView(0, function (listview, index)
        return self:GetScrollItem(listview, index)
    end)
    self._looplist:SetOnDragingAction(function (  )
        self:OnDragingAction()
    end)
    self._looplist:SetOnEndDragAction(function ( ... )
        self:OnEndDragAction()
    end)
    
end

function MailCollect:OnDestroy()
    self._looplist:SetListItemCount(0, true, true)
    Setting:SetPrivateInt(SettingKeys.MAIL_COLLECT_LAST_OPEN, self._openTimeStamp)
end

function MailCollect:GetScrollItem(listview, index)
    if (index < 0 or index > #self._collectMail) then
        return nil
    end
    local itemObj = nil
    local baseCom = nil
    if (index == 0) then -- 使用标题
        itemObj = listview:NewListViewItem("UIMailItemTitle")
        baseCom = MailContentTitle
    else
        itemObj = listview:NewListViewItem("MailCollectItem")
        baseCom = MailCollectItem
    end
    if (self._objList[itemObj] == nil) then
        NameCount = NameCount + 1
        local nameStr = tostring(NameCount)
        itemObj.gameObject.name = nameStr
        local mailItem = self._scrollviewContent:AddComponent(baseCom, nameStr)
        self._objList[itemObj] = mailItem
        -- 修正位置
        local oldPosY = mailItem.rectTransform.anchoredPosition.y
        mailItem.rectTransform.anchoredPosition = Vector2.New(0, oldPosY)
    end
    if (index == 0) then
        -- 使用第一封的时间
        local param = {}
        param["main"] = Localization:GetString("310121")
        param["sub"] = CommonUtil.GetResourceNameByType(self._collectMail[1]["resourceType"])
        local mailTime = self._collectMail[1]["createTime"] or 0
        local strMailTime = UITimeManager:GetInstance():TimeStampToTimeForLocal(mailTime)
        param["time"] = strMailTime
        self._objList[itemObj]:SetData(param)
    else
        self._objList[itemObj]:SetData(self._collectMail[index])
    end
    return itemObj
end

function MailCollect:OnDragingAction()
    local _totalCnt = #self._collectMail
    if (self._loadingMail == true) then
        return
    end
    local _lastItem = self._looplist:GetShownItemByItemIndex(_totalCnt-1)
    if (_lastItem == nil) then
        return
    end
    local _lastItemY = self._looplist:GetItemCornerPosInViewPort(_lastItem).y
    local _viewPortSize = self._looplist.unity_looplistview2.ViewPortSize
    if (_lastItemY + _viewPortSize >= 50) then
        self._toLoadMore = true
    end
end

function MailCollect:OnEndDragAction()
    if (self._toLoadMore == true) then
        self._loadingMail = false
        self._toLoadMore = false
        self:GetMoreMail()
    end
end

function MailCollect:GetMoreMail()
    DataCenter.MailDataManager:ReqMore(MailInternalGroup["MAIL_IN_gather"], function ()
        self:Refresh(false)
    end)
end

function MailCollect:setData( maildata )
    self._virtualGatherItem = maildata
    self:Refresh(true)
end

function MailCollect:Refresh(resetPos)
    local collectMail = DataCenter.MailDataManager:GetGroupMailList(MailInternalGroup["MAIL_IN_gather"])
    local collectMailCnt = table.count(collectMail)
    if (collectMailCnt ~= 0 and collectMailCnt == self._lastCollectCnt) then
        return
    end
    self._lastCollectCnt = table.count(collectMail)
    self._collectMail = {}
    -- 重组数据
    for _, mailInfo in pairs(collectMail) do
        local tabMailInfo = rapidjson.decode(mailInfo["contents"])
        local mailObj = tabMailInfo["obj"] or {}
        local collectReport = mailObj["collectReport"] or {}
        for _, collectInfo in pairs(collectReport) do
            self._collectMail[#self._collectMail+1] = collectInfo
            self._collectMail[#self._collectMail]["createTime"] = mailInfo["createTime"]
        end
    end
    local mailCount = #self._collectMail
    if mailCount > 0  then
        mailCount  = mailCount + 1
    end
    self._looplist:SetListItemCount(mailCount, resetPos, true)  -- 做一个+1是因为还有一个标题,在loopview中返回的index=0的时候，使用标题
    self._looplist:RefreshAllShownItem()
    
end

return MailCollect