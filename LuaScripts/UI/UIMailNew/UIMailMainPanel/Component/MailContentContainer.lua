---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 7/9/21 6:19 PM
---
local MailContentContainer = BaseClass("MailContentContainer",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
-- 系统邮件
local MailSystem = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailSystem"
-- 采集邮件
local MailCollect = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.CollectType.MailCollect"
-- 集结boss后的奖励
local MailBossReward = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailBossRewardView"

local MailAllianceBuild = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailAllianceBuild"
-- 新战斗邮件
local MailBattleReportViewNew = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailBattleReportNewView"

local MailScoutResult = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailScoutResult"

local MailResSupport = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailResSupport"
local MailResSupportFail = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailResSupportFail"

local MailAlCompeteWeekResult = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailAlCompeteWeekReport"

--探索邮件
local Explore = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.Explore.ExploreView"
--捡垃圾邮件
local PickGarbage = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.PickGarbage.PickGarbageView"

local MailAllianceMark = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailAllianceMark"

local AlLeaderElect = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.AlLeaderElect.MailAlLeaderElect"
local AlLeaderChange = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.AlLeaderElect.MailAlLeaderChange"
local AlLeaderVote = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.AlLeaderElect.MailAlLeaderVote"
local AlCommonMail = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.AlLeaderElect.MailAllianceCommon"
local MailMonsterReward = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MonsterReward.MailMonsterReward"
local AlElectResult = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.AlElect.MailAlElectResult"

local MailDestroyBuild = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailDestroyBuild"
local MailDestroyRankList = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailDestroyRankList"
local MailAllianceInvite = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.AllianceInvite.MailAllianceInvite"

local MailGiftReceive = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailGiftReceive"
local MailBlackKnightDetail = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailBlackKnightDetail"
local MailBlackKnightGroup = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailBlackKnightGroup"
local MailMigrateApply = require "UI.UIMailNew.UIMailMainPanel.Component.MailTypeContent.MailMigrateApply"
local _cp_scrollContent = ""

--[[
    prefab和组件的对应
]]
local eMailConfigType = {
    System_Type = 1,        -- 系统邮件
    BattleReport = 2,       -- 战报
    Collect_Type = 3,       -- 采集邮件
    BossReward_Type = 4,    -- 集结boss后的奖励
    ScoutResult_Type = 5,   --  侦查
    AlCompeteWeekReport_Type = 6,    --联盟军备-周邮件
    PickGarbage_Type = 7, --捡垃圾邮件
    Explore_Type = 8,       --探索邮件
    ResourceHelpFrom_Type = 9,--收到资源援助
    ResourceHelpTo_Type = 10,--给出资源援助
    ResourceHelpFail_Type = 11,--给出资源援助失败
    AllianceMarkAdd_Type = 12,   --联盟标记新增
    AlLeaderElect = 13,--联盟盟主竞选
    AlLeaderVote = 14,--联盟投票选择盟主
    AlCommonMail = 15,--联盟通用邮件（标题和正文）
    AlLeaderChange = 16,--联盟盟主变更
    MonsterReward_Type = 17, --打怪奖励
    DestroyBuild_Type = 18,
    AllianceDestroyRankList = 19,
    AlElectResult = 20,--联盟选举结果展示
    AllianceInvite = 21,--联盟邀请
    GiftReceive = 22,--收到别人赠送的物品
    AllianceBuild = 23,--联盟建筑邮件
    BlackKnightDetail = 24,--黑骑士详细邮件
    BlackKnightGroup = 25,--黑骑士组合邮件
    MigrateApply = 26,--移民申请
}
local eMailConfig = {
    [eMailConfigType.System_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailSystem.prefab",
        ["Script"] = MailSystem,
    },
    --[eMailConfigType.BattleReport] = {
    --    ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailNormalBattle.prefab",
    --    ["Script"] = MailBattleReportView
    --},
    [eMailConfigType.Collect_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailCollect.prefab",
        ["Script"] = MailCollect
    },
    [eMailConfigType.BossReward_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailSystem.prefab",
        ["Script"] = MailSystem,
    },
    [eMailConfigType.BattleReport] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailBattleReportNew.prefab",
        ["Script"] = MailBattleReportViewNew
    },
    [eMailConfigType.ScoutResult_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailScoutResult.prefab",
        ["Script"] = MailScoutResult,
    },
    [eMailConfigType.AlCompeteWeekReport_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailAlCompeteWeekReport.prefab",
        ["Script"] = MailAlCompeteWeekResult,
    },
    [eMailConfigType.PickGarbage_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/PickGarbage.prefab",
        ["Script"] = PickGarbage,
    },
    [eMailConfigType.Explore_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/Explore.prefab",
        ["Script"] = Explore,
    },
    [eMailConfigType.ResourceHelpFrom_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailResSupport.prefab",
        ["Script"] = MailResSupport,
    },
    [eMailConfigType.ResourceHelpTo_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailResSupport.prefab",
        ["Script"] = MailResSupport,
    },
    [eMailConfigType.ResourceHelpFail_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailResSupportFail.prefab",
        ["Script"] = MailResSupportFail,
    },
    [eMailConfigType.AllianceMarkAdd_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailAllianceMark.prefab",
        ["Script"] = MailAllianceMark,
    },
    [eMailConfigType.AlLeaderElect] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/AlLeaderElect/MailAlLeaderElect.prefab",
        ["Script"] = AlLeaderElect,
    },
    [eMailConfigType.AlLeaderChange] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/AlLeaderElect/MailAlLeaderChange.prefab",
        ["Script"] = AlLeaderChange,
    },
    [eMailConfigType.AlElectResult] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/AlElect/MailAlLeaderElectResult.prefab",
        ["Script"] = AlElectResult,
    },
    [eMailConfigType.AlLeaderVote] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/AlLeaderElect/MailAlLeaderVote.prefab",
        ["Script"] = AlLeaderVote,
    },
    [eMailConfigType.AlCommonMail] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/AlLeaderElect/MailAlCommon.prefab",
        ["Script"] = AlCommonMail,
    },
    [eMailConfigType.MonsterReward_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailMonsterReward.prefab",
        ["Script"] = MailMonsterReward, 
    },
    [eMailConfigType.DestroyBuild_Type] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailDestroyBuild.prefab",
        ["Script"] = MailDestroyBuild,
    },
    [eMailConfigType.AllianceDestroyRankList] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailDestroyRankList.prefab",
        ["Script"] = MailDestroyRankList,
    },
    [eMailConfigType.AllianceInvite] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/AllianceInvite/MailAllianceInvite.prefab",
        ["Script"] = MailAllianceInvite,
    },
    [eMailConfigType.GiftReceive] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailGiftReceive.prefab",
        ["Script"] = MailGiftReceive,
    },
    [eMailConfigType.AllianceBuild] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailAllianceBuild.prefab",
        ["Script"] = MailAllianceBuild,
    },
    [eMailConfigType.BlackKnightDetail] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailBlackKnightDetail.prefab",
        ["Script"] = MailBlackKnightDetail,
    },
    [eMailConfigType.BlackKnightGroup] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailBlackKnightGroup.prefab",
        ["Script"] = MailBlackKnightGroup,
    },
    [eMailConfigType.MigrateApply] = {
        ["Prefab"] = "Assets/Main/Prefab_Dir/Mail/ObjMail/MailMigrateApply.prefab",
        ["Script"] = MailMigrateApply,
    },
}



function MailContentContainer:OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self._scrollContent = self:AddComponent(UIBaseContainer, _cp_scrollContent)
end

function MailContentContainer:DataDefine()
    self._reqlist = {}
end


function MailContentContainer:ShowData( maildata,showReplay,jumpType)
    self:RecycleAll()
    if (maildata == nil) then
        return false
    end
    local mailType = maildata["type"]
    local mailConfigType = -1
    if mailType == MailType["NEW_FIGHT"] or mailType == MailType.SHORT_KEEP_FIGHT_MAIL then
        local ext = maildata:GetMailExt()
        if ext ~= nil and (ext:IsExistBlackKnightBattle() or ext:IsExistExpeditionaryDuelBattle()) then
            mailConfigType = eMailConfigType.BlackKnightDetail
        else
            mailConfigType = eMailConfigType.BattleReport
        end
    elseif mailType == MailType.NEW_FIGHT_ARENA or mailType == MailType.NEW_FIGHT_MINECAVE then
        mailConfigType = eMailConfigType.BattleReport
    elseif mailType == MailType.ELITE_FIGHT_MAIL then
        mailConfigType = eMailConfigType.BattleReport
    elseif mailType == MailType["NEW_COLLECT_MAIL"] then
        mailConfigType = eMailConfigType.Collect_Type
    elseif mailType == MailType["MAIL_BOSS_REWARD"] then
        mailConfigType = eMailConfigType.BossReward_Type
    elseif mailType == MailType["MAIL_SCOUT_RESULT"] then
        mailConfigType = eMailConfigType.ScoutResult_Type
    elseif mailType == MailType["RESOURCE_HELP_FROM"] then
        mailConfigType = eMailConfigType.ResourceHelpFrom_Type
    elseif mailType == MailType["RESOURCE_HELP_TO"] then
        mailConfigType = eMailConfigType.ResourceHelpTo_Type
    elseif mailType == MailType["RESOURCE_HELP_FAIL"] then
        mailConfigType = eMailConfigType.ResourceHelpFail_Type
    elseif mailType == MailType["MAIL_ALCOMPETE_WEEK_REPORT"] then
        mailConfigType = eMailConfigType.AlCompeteWeekReport_Type
    elseif mailType == MailType.MAIL_PICK_GARBAGE then
        mailConfigType = eMailConfigType.PickGarbage_Type
    elseif mailType == MailType.MAIL_EXPLORE then
        mailConfigType = eMailConfigType.Explore_Type
    elseif mailType == MailType["MAIL_ALLIANCE_MARK_ADD"] then
        mailConfigType = eMailConfigType.AllianceMarkAdd_Type
    elseif mailType == MailType.MAIL_AL_LEADER_ELECT then
        mailConfigType = eMailConfigType.AlLeaderElect
    elseif mailType == MailType.MAIL_AL_LEADER_VOTE then
        mailConfigType = eMailConfigType.AlLeaderVote
    elseif mailType == MailType.MAIL_AL_LEADER_CHANGE then
        mailConfigType = eMailConfigType.AlLeaderChange
    elseif mailType == MailType.MAIL_AL_ELECT_RESULT_R4 then
        mailConfigType = eMailConfigType.AlElectResult
    elseif mailType == MailType.MAIL_AL_ELECT_RESULT_LEADER then
        mailConfigType = eMailConfigType.AlElectResult
    elseif mailType == MailType.MAIL_GOLLOES_TRADE_REWARDS then
        mailConfigType = eMailConfigType.System_Type
    elseif mailType == MailType.MAIL_AL_AL_COMMON then
        mailConfigType = eMailConfigType.AlCommonMail
    elseif mailType == MailType.MONSTER_COLLECT_REWARD then
        mailConfigType = eMailConfigType.MonsterReward_Type
    elseif mailType == MailType.MARCH_DESTROY_MAIL then
        mailConfigType = eMailConfigType.DestroyBuild_Type
    elseif mailType == MailType.ALLIANCE_CITY_RANK then
        mailConfigType = eMailConfigType.AllianceDestroyRankList
    elseif mailType == MailType.MAIL_ALLIANCE_INVITE then
        mailConfigType = eMailConfigType.AllianceInvite
    elseif mailType == MailType.MAIL_GIFT_RECEIVE then
        mailConfigType = eMailConfigType.GiftReceive
    elseif mailType == MailType.PLACE_ALLIANCE_BUILD_MAIL then
        mailConfigType = eMailConfigType.AllianceBuild
    elseif mailType == MailType.MIGRATE_APPLY then
        mailConfigType = eMailConfigType.MigrateApply
    elseif mailType == MailType.NEW_FIGHT_BLACK_KNIGHT then
        mailConfigType = eMailConfigType.BlackKnightGroup
    elseif mailType == MailType.NEW_FIGHT_EXPEDITIONARY_DUEL then
        mailConfigType = eMailConfigType.BlackKnightGroup
    else
        mailConfigType = eMailConfigType.System_Type
    end

        if (mailConfigType == -1) then
    assert("error no prefabpath mailtype: " .. tostring(mailType) )
    return false
    end
    self:ShowContent(maildata, mailConfigType,showReplay,jumpType)
    return true
end


function MailContentContainer:ShowContent( maildata, configType,showReplay,jumpType)
    self:RecycleAll()
    local _mailConfig = eMailConfig[configType]
    if (_mailConfig == nil) then
        return
    end
    local req = self:GameObjectInstantiateAsync(_mailConfig["Prefab"],
            function(request)
                self:onCreateRoom(request, maildata, configType,showReplay,jumpType)
            end)
    self._reqlist[#self._reqlist+1] = req
end

function MailContentContainer:OnDestroy()
    self:RecycleAll()
end

-- 将所有当前正在使用的节点放入空闲列表中
function MailContentContainer:RecycleAll()
    for k,v in pairs(self._reqlist) do
        if v ~= nil then
            self:GameObjectDestroy(v)
        end
    end
    self._reqlist ={}
    -- 清空Content节点下的组件
    for _, config in pairs(eMailConfig) do
        local component = config["Script"]
        self._scrollContent:RemoveComponents(component)
    end
end

-- 创建房间异步结束
function MailContentContainer:onCreateRoom(request, maildata, configType,showReplay,jumpType)
    if request.isError then
        return
    end
    local _mailConfig = eMailConfig[configType]
    local prefabName = PathUtil.GetFileNameWithoutExtension(_mailConfig["Prefab"])
    local ObjScript = _mailConfig["Script"]
    -- 如果是采集邮件和战报,则采用自身的滑动事件
    local mailType = maildata["type"]
    if (mailType ~= nil) then
        if (mailType == MailType["NEW_COLLECT_MAIL"]) or mailType == MailType.MONSTER_COLLECT_REWARD or mailType == MailType.NEW_FIGHT or mailType == MailType.SHORT_KEEP_FIGHT_MAIL or mailType == MailType.NEW_FIGHT_BLACK_KNIGHT or mailType == MailType.NEW_FIGHT_EXPEDITIONARY_DUEL then
        else
        end
    end
    local go = request.gameObject
    go.transform:SetParent(self._scrollContent.transform)
    go.transform:SetAsLastSibling()
    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
    NameCount = NameCount + 1
    go.name = prefabName.."..."..NameCount
    local temp = self._scrollContent:AddComponent(ObjScript, go.name)
    go:SetActive(true)
    temp:setData(maildata,showReplay,jumpType)
end


return MailContentContainer