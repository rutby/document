---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 8/16/21 5:44 PM
---
local UIMailTroopInfoSubItem = require "UI.UIMailNew.UIMailTroopInfoListView.Component.UIMailTroopInfoSubItem"
local UIMailTroopInfoItem = BaseClass("UIMailTroopInfoItem",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local _cp_objMsg = "totalMsg"
local _cp_objInfoList = "objInfolist"
local _cp_btnShow = "titleObj/btnShow"
local _cp_imgClose = "titleObj/btnShow/imgClose"
local _cp_imgOpen = "titleObj/btnShow/imgOpen"
local _cp_root = ""
local _cp_txtUserName = "titleObj/txtUserName"
local _cp_txttotal = "titleObj/txttotal"
local _cp_txtdead = "titleObj/txtdead"
local _cp_txtinjure = "titleObj/txtinjure"
local _cp_txtwounded = "titleObj/txtwounded"
local _cp_txtalive = "titleObj/txtalive"
local _cp_txtCurve = "titleObj/txtcurve"
function UIMailTroopInfoItem:OnCreate()
    base.OnCreate(self)
    self._root = self:AddComponent(UILayoutElement, _cp_root)
    self._txtUserName = self:AddComponent(UITextMeshProUGUI, _cp_txtUserName)
    self._txtTotal = self:AddComponent(UITextMeshProUGUI, _cp_txttotal)
    self._txtDead = self:AddComponent(UITextMeshProUGUI, _cp_txtdead)
    self._txtInjure = self:AddComponent(UITextMeshProUGUI, _cp_txtinjure)
    self._txtWounded = self:AddComponent(UITextMeshProUGUI, _cp_txtwounded)
    self._txtAlive = self:AddComponent(UITextMeshProUGUI, _cp_txtalive)
    self._txtCurve = self:AddComponent(UITextMeshProUGUI, _cp_txtCurve)
    self._prefab_objMsg = self.transform:Find(_cp_objMsg).gameObject
    self._objInfoList = self:AddComponent(UIBaseContainer, _cp_objInfoList)
    self._btnShow = self:AddComponent(UIButton, _cp_btnShow)
    self._btnShow:SetOnClick(BindCallback(self, self.OnClickBtnShow))
    self._imgClose = self:AddComponent(UIImage, _cp_imgClose)
    self._imgOpen = self:AddComponent(UIImage, _cp_imgOpen)
    self._sCells = {}
    self._showState = false
end

function UIMailTroopInfoItem:OnClickBtnShow()
    self._showState = not self._showState
    self._imgOpen:SetActive(self._showState)
    self._imgClose:SetActive(not self._showState)
    for _, cellNode in pairs(self._sCells) do
        cellNode:SetActive(self._showState)
    end
end

function UIMailTroopInfoItem:SetData( sItemList )
    self.fightData = sItemList.fightData
    self.playerType = sItemList.type
    self:SetTitle()
    self._prefab_objMsg.gameObject:GameObjectRecycleAll()
    self._objInfoList:RemoveComponents(UIMailTroopInfoSubItem)
    self._sCells = {}
    local beforeSolider =self.fightData.unitData:GetSoldiers()
    local afterSolider = self.fightData.afterUnitData:GetSoldiers()
    local dataList = {}
    for sId, sInfo in pairs(beforeSolider) do
        local afterSoliderData = afterSolider[sId]
        if afterSoliderData~=nil then
            local oneData = {}
            local level = 1
            local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(sId)
            if template~=nil then
                level = template.level
            end
            oneData.soliderData = sInfo
            oneData.afterSoliderData = afterSoliderData
            oneData.level = level
            table.insert(dataList,oneData)
        end
    end
    table.sort(dataList,function(a,b)
        return a.level>b.level 
    end)
    for index, item in pairs(dataList) do
        self._sCells[#self._sCells+1] = self:AddTroopNode(item)
    end
    for _, cellNode in pairs(self._sCells) do
        cellNode:SetActive(self._showState)
    end
    self._imgOpen:SetActive(self._showState)
    self._imgClose:SetActive(not self._showState)
end

function UIMailTroopInfoItem:SetTitle()
    local Abbr = self.fightData.unitData.alAbbr
    local name = self.fightData.unitData.name
    local battleType = self.fightData.battleType
    local specialType = self.fightData.unitData:GetSpecialType()
    if battleType == BattleType.Monster or battleType == BattleType.Boss or battleType == BattleType.ACT_BOSS or battleType == BattleType.PUZZLE_BOSS or battleType == BattleType.CHALLENGE_BOSS or battleType == BattleType.BLACK_KNIGHT then
        self._txtUserName:SetText(self.fightData.name)
    elseif specialType == SpecialUnitType.BUILDING_STATION then
        self._txtUserName:SetText(Localization:GetString("140311"))
    elseif specialType == SpecialUnitType.ALLIANCE_CITY_NPC or specialType == SpecialUnitType.ALLIANCE_CITY_POLICE_NPC then
        self._txtUserName:SetText(Localization:GetString("302119"))
    else
        if name == "" then
            name = Localization:GetString("100184")
        end
        local nameStr = ""
        if Abbr~=nil and Abbr~="" then
            nameStr = "["..Abbr.."]"..name
        else
            nameStr = name
        end
        self._txtUserName:SetText(nameStr)
    end
    if self.playerType ==1 then
        self._txtUserName:SetColor(LightGreenColor)
    else
        self._txtUserName:SetColor(WorldRedColor)
    end
    
    local beforeTotal = self.fightData.unitData:GetAttTotalCnt(eMailSoldierAttr.Total)
    local beforeLost = self.fightData.unitData:GetAttTotalCnt(eMailSoldierAttr.Lost)
    local beforeDead = self.fightData.unitData:GetAttTotalCnt(eMailSoldierAttr.Dead)
    local beforeWounded = self.fightData.unitData:GetAttTotalCnt(eMailSoldierAttr.Wounded)
    local beforeInjured = self.fightData.unitData:GetAttTotalCnt(eMailSoldierAttr.Injured)
    local beforeCure = self.fightData.unitData:GetAttTotalCnt(eMailSoldierAttr.Cure)
    local afterLost = self.fightData.afterUnitData:GetAttTotalCnt(eMailSoldierAttr.Lost)
    local afterDead = self.fightData.afterUnitData:GetAttTotalCnt(eMailSoldierAttr.Dead)
    local afterWounded = self.fightData.afterUnitData:GetAttTotalCnt(eMailSoldierAttr.Wounded)
    local afterInjured = self.fightData.afterUnitData:GetAttTotalCnt(eMailSoldierAttr.Injured)
    local afterCure = self.fightData.afterUnitData:GetAttTotalCnt(eMailSoldierAttr.Cure)
    local deadPercent = 0
    local woundedPercent = 0
    local injuredPercent = 0
    if self.fightData.damagePercent~=nil then
        deadPercent = self.fightData.damagePercent.deadPercent
        woundedPercent = self.fightData.damagePercent.woundedPercent
        injuredPercent = self.fightData.damagePercent.injuredPercent
    end
    
    
    local total = math.max(0,(beforeTotal-beforeLost))
    self._txtTotal:SetText(string.GetFormattedSeperatorNum(math.floor(total)))
    local dead = (afterDead-beforeDead)*deadPercent
    self._txtDead:SetText(string.GetFormattedSeperatorNum(math.floor(dead)))
    local injure = (afterInjured-beforeInjured)*injuredPercent
    self._txtInjure:SetText(string.GetFormattedSeperatorNum(math.floor(injure)))
    local wounded = (afterWounded-beforeWounded+afterCure-beforeCure)*woundedPercent
    self._txtWounded:SetText(string.GetFormattedSeperatorNum(math.floor(wounded)))
    local alive = beforeTotal - afterLost
    self._txtAlive:SetText(string.GetFormattedSeperatorNum(math.floor(alive)))
    local curve = (afterCure-beforeCure)*woundedPercent
    self._txtCurve:SetText(string.GetFormattedSeperatorNum(math.floor(curve)))
end
function UIMailTroopInfoItem:AddTroopNode(sItem)
    local damagePercent =self.fightData.damagePercent
    local item = self._prefab_objMsg:GameObjectSpawn(self._objInfoList.transform)
    NameCount = NameCount + 1
    item.name = NameCount
    local obj = self._objInfoList:AddComponent(UIMailTroopInfoSubItem, item.name)
    obj:SetData(sItem,damagePercent)
    return obj
end

return UIMailTroopInfoItem