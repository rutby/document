---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 1/18/22 11:53 AM
---
local Localization = CS.GameEntry.Localization
local UIShareMailView = BaseClass("UIShareMailView",UIBaseView)
local base = UIBaseView
-- 右侧邮件内容容器
local MailContentContainer = require "UI.UIMailNew.UIMailMainPanel.Component.MailContentContainer"

local _cp_btnClose = "UICommonPopUpTitle/bg_mid/CloseBtn"
local _cp_txtTitle = "UICommonPopUpTitle/bg_mid/titleText"
local _cp_content = "RightScrollView/Viewport/Content"
local _cp_btnShare = "UICommonPopUpTitle/shareBtn"
local panel_btn_path = "UICommonPopUpTitle/panel"

function UIShareMailView:OnCreate()
    base.OnCreate(self)
    self._btnClose = self:AddComponent(UIButton, _cp_btnClose)
    self._btnClose:SetOnClick(BindCallback(self, self.OnClickBtnClose))
    self._txtTitle = self:AddComponent(UITextMeshProUGUIEx, _cp_txtTitle)
    self._rightScrollView = self:AddComponent(UIScrollRect, "RightScrollView")
    self._viewPort= self:AddComponent(UIBaseContainer,"RightScrollView/Viewport")
    self._rightMailContent = self:AddComponent(MailContentContainer, _cp_content)
    self._btnShare = self:AddComponent(UIButton, _cp_btnShare)
    self._btnShare:SetOnClick(function()
        self:OnClickShareBtn()
    end)
    self.panel_btn = self:AddComponent(UIButton, panel_btn_path)
    self.panel_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
end

function UIShareMailView:OnClickBtnClose()
    self.ctrl:CloseSelf()
end

function UIShareMailView:OnEnable()
    base.OnEnable(self)
    local mailInfo, shareParam,playbackJumpType, extraContent = self:GetUserData()
    self.mailInfo = mailInfo
    self.shareParam = shareParam
    self.playbackJumpType = playbackJumpType
    self.extraContent = extraContent--用于矿洞和竞技场战报分享
    local sizeFitter = self._rightMailContent.transform:GetComponent(typeof(CS.UnityEngine.UI.ContentSizeFitter))
    if self.mailInfo.type == MailType.NEW_FIGHT or self.mailInfo.type == MailType.SHORT_KEEP_FIGHT_MAIL then
        local ext = self.mailInfo:GetMailExt()
        if ext ~= nil and (ext:IsExistBlackKnightBattle() or ext:IsExistExpeditionaryDuelBattle()) then
            self._txtTitle:SetText(MailShowHelper.GetBlackKnightRoundName(self.mailInfo, true))
        else
            self._txtTitle:SetLocalText(311132)
        end
        self._rightScrollView:SetEnable(false)
        sizeFitter.enabled = false
        local x, y = self._viewPort.rectTransform:Get_sizeDelta()
        self._rightMailContent.rectTransform:Set_sizeDelta(x, y)
    elseif self.mailInfo.type == MailType.NEW_FIGHT_ARENA or self.mailInfo.type == MailType.NEW_FIGHT_MINECAVE then
        self._txtTitle:SetLocalText(311132)
        self._rightScrollView:SetEnable(false)
        sizeFitter.enabled = false
        local x, y = self._viewPort.rectTransform:Get_sizeDelta()
        self._rightMailContent.rectTransform:Set_sizeDelta(x, y)
    elseif self.mailInfo.type == MailType.MAIL_SCOUT_RESULT then
        self._txtTitle:SetLocalText(300617)
        self._rightScrollView:SetEnable(true)
        sizeFitter.enabled = true
    elseif self.mailInfo.type == MailType.ELITE_FIGHT_MAIL then
        self._txtTitle:SetLocalText(302022)
        self._rightScrollView:SetEnable(false)
        sizeFitter.enabled = false
        local x, y = self._viewPort.rectTransform:Get_sizeDelta()
        self._rightMailContent.rectTransform:Set_sizeDelta(x, y)
    elseif self.mailInfo.type == MailType.MAIL_SCOUT_ALERT then
        self._txtTitle:SetLocalText(310178)
        self._rightScrollView:SetEnable(false)
        sizeFitter.enabled = false
        local x, y = self._viewPort.rectTransform:Get_sizeDelta()
        self._rightMailContent.rectTransform:Set_sizeDelta(x, y)
    else
        self._rightScrollView:SetEnable(true)
        sizeFitter.enabled = true
    end
    self:CheckShowShareBtn()
    local showReplay = false
    if self.mailInfo.type == MailType.NEW_FIGHT or self.mailInfo.type == MailType.SHORT_KEEP_FIGHT_MAIL or self.mailInfo.type == MailType.NEW_FIGHT_ARENA or self.mailInfo.type == MailType.NEW_FIGHT_MINECAVE then
        showReplay =  self.mailInfo:GetMailExt():GetCanRePlay()
    end
    self._rightMailContent:ShowData(self.mailInfo,showReplay,self.playbackJumpType)
    
    local pos = self._rightMailContent.rectTransform.localPosition
    pos.y = 0
    self._rightMailContent.rectTransform.localPosition = pos
end

function UIShareMailView:OnClickShareBtn()
    if self.mailInfo.type == MailType.ELITE_FIGHT_MAIL then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPositionShare, {anim = true}, self.shareParam)
    else
        MailShowHelper.TryShareMail(self.mailInfo)
    end
end

function UIShareMailView:CheckShowShareBtn()
    self._btnShare:SetActive(self.mailInfo.type == MailType.ELITE_FIGHT_MAIL and self.shareParam ~= nil)
end

function UIShareMailView:TryShareMail()
    local mailType = MailType.NEW_FIGHT
    if self.playbackJumpType == PlayBackEndJumpType.Arena then
        mailType = MailType.NEW_FIGHT_ARENA
    elseif self.playbackJumpType == PlayBackEndJumpType.MineCave then
        mailType = MailType.NEW_FIGHT_MINECAVE
    end
    if not string.IsNullOrEmpty(self.extraContent) then
        self.ctrl:TryShareToChat(self.extraContent, mailType, self.mailInfo)
    end
end

return UIShareMailView