---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/3/8 17:02
---
local UIMailBattleAttrDetailCtrl = BaseClass("UIMailBattleAttrDetailCtrl", UIBaseCtrl)

local needCheckList =
{
    GameEffectReason.Building,
    GameEffectReason.Science,
    GameEffectReason.Hero,
    GameEffectReason.VIP,
    GameEffectReason.Status,
    GameEffectReason.World_Alliance_City,
    GameEffectReason.Tank,
    GameEffectReason.Career,
    GameEffectReason.Alliance_Career,
    GameEffectReason.Alliance_Science,
    GameEffectReason.FormationBuff,
    GameEffectReason.FormationRestraintValue,
    GameEffectReason.BASE_TALENT,
    GameEffectReason.HERO_OFFICIAL,
    GameEffectReason.ARTIFACT,
    GameEffectReason.SKIN,
    GameEffectReason.BUABLE,
    GameEffectReason.SEASON_WEEK_CARD,
    GameEffectReason.HERO_INTENSIFY,
    GameEffectReason.DESERT_TALENT,
    GameEffectReason.CAR_EQUIP,
    GameEffectReason.KINGDOM_POSITION,
    GameEffectReason.SEASON_BATTLE_PASS,
    GameEffectReason.ExtraAdd,
    GameEffectReason.Revenge,
    GameEffectReason.EnemyDec,
    GameEffectReason.HERO_PLUGIN,
}

local sortList =
{
    [GameEffectReason.Hero] = 1,
    [GameEffectReason.Science] = 2,
    [GameEffectReason.Building] = 3,
    [GameEffectReason.CAR_EQUIP] = 4,
    [GameEffectReason.Tank] = 5,
    [GameEffectReason.HERO_OFFICIAL] =6,
    [GameEffectReason.HERO_INTENSIFY] = 7,
    [GameEffectReason.BUABLE] = 8,
    --[GameEffectReason.PLAYER_LEVEL] = 8,
    [GameEffectReason.Career] = 9,
    [GameEffectReason.BASE_TALENT] = 10,
    [GameEffectReason.DESERT_TALENT] = 11,
    [GameEffectReason.KINGDOM_POSITION] = 12,
    [GameEffectReason.World_Alliance_City] =13,
    [GameEffectReason.Alliance_Science] = 14,
    [GameEffectReason.Alliance_Career] = 15,
    [GameEffectReason.SKIN] =16,
    [GameEffectReason.ARTIFACT] = 17,
    [GameEffectReason.VIP] =18,
    [GameEffectReason.Status] =19,
    [GameEffectReason.SEASON_BATTLE_PASS] =21,
    [GameEffectReason.SEASON_WEEK_CARD] = 22,
    [GameEffectReason.FormationBuff] = 23,
    [GameEffectReason.FormationRestraintValue] = 24,
    [GameEffectReason.Revenge] = 25,
    [GameEffectReason.HERO_PLUGIN] = 26,
    [GameEffectReason.ExtraAdd] = 27,
    [GameEffectReason.EnemyDec] = 28,
}
local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIMailBattleAttrDetail)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function GetDetailList(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)
    local showList = {}
    --table.insert(showList,self:GetHeroAttackData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid))
    --table.insert(showList,self:GetHeroDefenceData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid))
    --local leftHeroRestraint,rightHeroRestraint = self:GetHeroRestraintValue(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local leftHeroCampAdd,rightHeroCampAdd = self:GetHeroCampAdd(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    
    local attackAddData = self:GetAttackAddData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)
    if attackAddData~=nil and  attackAddData.reasonList~=nil then
        local reason2 = attackAddData.reasonList[GameEffectReason.FormationBuff]
        attackAddData.leftNum = attackAddData.leftNum+leftHeroCampAdd
        attackAddData.rightNum = attackAddData.rightNum+rightHeroCampAdd
        reason2.leftData.totalNum = reason2.leftData.totalNum+leftHeroCampAdd
        reason2.rightData.totalNum = reason2.rightData.totalNum+rightHeroCampAdd
    end
    table.insert(showList,attackAddData)
    local defenceAddData = self:GetDefenceAddData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)
    --if defenceAddData~=nil and  defenceAddData.reasonList~=nil then
    --    local reason1 = defenceAddData.reasonList[GameEffectReason.FormationRestraintValue]
    --    defenceAddData.leftNum = defenceAddData.leftNum+leftHeroRestraint
    --    defenceAddData.rightNum = defenceAddData.rightNum+rightHeroRestraint
    --    reason1.leftData.totalNum = reason1.leftData.totalNum+leftHeroRestraint
    --    reason1.rightData.totalNum = reason1.rightData.totalNum+rightHeroRestraint
    --end
    table.insert(showList,defenceAddData)
    table.insert(showList,self:GetHealthAddData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid))
    table.insert(showList,self:GetMarchLimitAddData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid))
    --local skillHurtData = self:GetSkillHurtAddData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    --local normalHurtData = self:GetNormalHurtAddData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    --local backHurtData = self:GetBackHurtAddData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    --table.insert(showList,skillHurtData)
    --table.insert(showList,normalHurtData)
    --table.insert(showList,backHurtData)
    --table.insert(showList,self:GetSkillHurtDecData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid))
    --table.insert(showList,self:GetNormalHurtDecData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid))
    --table.insert(showList,self:GetBackHurtDecData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid))
    table.insert(showList,self:GetCurveData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid))
    return showList
end

local function GetAttackAddData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)
    local oneData = {}
    oneData.dialogId = "163138"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.AttackAdd
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData

    end
    --	【部队攻击力35000】
    --	单兵攻击力【35001】【35002】【35003】（根据兵力配比打包生成一个【兵种混合攻击力】）
    --	【野外战斗攻击加成类35024】
    --	【攻城战斗攻击增益35040】
    --	【驻防建筑攻击增益35048】
    --	【打怪攻击力加成类35056】
    --	【加入集结时攻击力提升35032】只有集结时出现
    --	【增援别人城市或者中立城市时攻击力提升35133】只有增援时出现
    --	【编队1~4攻城攻击力增益%】
    --	【编队1~4攻击力增益%】
    local aLeftData = self:GetEffectDataByEffectId(35000,leftBattleEffect,leftFightData,leftUuid)
    local aRightData = self:GetEffectDataByEffectId(35000,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + aLeftData.totalNum
    oneData.rightNum = oneData.rightNum + aRightData.totalNum
    self:SetReasonShowList(35000,129030,reasonList,aLeftData,aRightData,1,1)

    local bLeftPercent = 0
    local bRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        bLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Tank)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        bRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Tank)
    end
    local bLeftData = self:GetEffectDataByEffectId(35001,leftBattleEffect,leftFightData,leftUuid)
    local bRightData = self:GetEffectDataByEffectId(35001,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (bLeftData.totalNum*bLeftPercent)
    oneData.rightNum = oneData.rightNum + (bRightData.totalNum*bRightPercent)
    self:SetReasonShowList(35001,220050,reasonList,bLeftData,bRightData,bLeftPercent,bRightPercent)

    local cLeftPercent = 0
    local cRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        cLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Robot)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        cRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Robot)
    end
    local cLeftData = self:GetEffectDataByEffectId(35002,leftBattleEffect,leftFightData,leftUuid)
    local cRightData = self:GetEffectDataByEffectId(35002,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (cLeftData.totalNum*cLeftPercent)
    oneData.rightNum = oneData.rightNum + (cRightData.totalNum*cRightPercent)
    self:SetReasonShowList(35002,220051,reasonList,cLeftData,cRightData,cLeftPercent,cRightPercent)

    local dLeftPercent = 0
    local dRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        dLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Plane)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        dRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Plane)
    end
    local dLeftData = self:GetEffectDataByEffectId(35003,leftBattleEffect,leftFightData,leftUuid)
    local dRightData = self:GetEffectDataByEffectId(35003,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (dLeftData.totalNum*dLeftPercent)
    oneData.rightNum = oneData.rightNum + (dRightData.totalNum*dRightPercent)
    self:SetReasonShowList(35003,220052,reasonList,dLeftData,dRightData,dLeftPercent,dRightPercent)

    if rightBattleEffect~=nil then
        local effectNum = rightBattleEffect:GetValue(35195)
        local tempData = reasonList[GameEffectReason.EnemyDec]
        if tempData~=nil then
            oneData.leftNum = oneData.leftNum- effectNum
            tempData.leftData.totalNum = tempData.leftData.totalNum - effectNum
        end
    end
    if leftBattleEffect~=nil then
        local effectNum = leftBattleEffect:GetValue(35195)
        local tempData = reasonList[GameEffectReason.EnemyDec]
        if tempData~=nil then
            oneData.rightNum = oneData.rightNum- effectNum
            tempData.rightData.totalNum = tempData.rightData.totalNum - effectNum
        end
    end

    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.battleType == BattleType.Building or leftFightData.battleType == BattleType.CROSS_WORM or leftFightData.battleType == BattleType.City
                or leftFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or leftFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or leftFightData.battleType == BattleType.THRONE_ARMY
                or leftFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILDING or leftFightData.battleType == BattleType.ACT_ALLIANCE_MINE or leftFightData.battleType == BattleType.DRAGON_BUILDING
                or leftFightData.battleType == BattleType.CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or leftFightData.battleType == BattleType.Turret then
            local LeftData = self:GetEffectDataByEffectId(35048,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35048,220097,reasonList,LeftData,nil,1,1)
        end
        if rightFightData.battleType == BattleType.Building or rightFightData.battleType == BattleType.CROSS_WORM or rightFightData.battleType == BattleType.City
                or rightFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or rightFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or rightFightData.battleType == BattleType.THRONE_ARMY
                or rightFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILDING or  rightFightData.battleType == BattleType.ACT_ALLIANCE_MINE or rightFightData.battleType == BattleType.DRAGON_BUILDING
                or rightFightData.battleType == BattleType.CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or rightFightData.battleType == BattleType.Turret then
            local RightData = self:GetEffectDataByEffectId(35048,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35048,220097,reasonList,nil,RightData,1,1)
        end

        if rightFightData.battleType == BattleType.Building or rightFightData.battleType == BattleType.CROSS_WORM or rightFightData.battleType == BattleType.City
                or rightFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or rightFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or rightFightData.battleType == BattleType.THRONE_ARMY
                or rightFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILDING or rightFightData.battleType == BattleType.ACT_ALLIANCE_MINE or rightFightData.battleType == BattleType.DRAGON_BUILDING
                or rightFightData.battleType == BattleType.CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or rightFightData.battleType == BattleType.Turret then
            local LeftData = self:GetEffectDataByEffectId(35040,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35040,220089,reasonList,LeftData,nil,1,1)
        end
        if leftFightData.battleType == BattleType.Building or leftFightData.battleType == BattleType.CROSS_WORM or leftFightData.battleType == BattleType.City
                or leftFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or leftFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or leftFightData.battleType == BattleType.THRONE_ARMY
                or leftFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILDING or leftFightData.battleType == BattleType.ACT_ALLIANCE_MINE or leftFightData.battleType == BattleType.DRAGON_BUILDING
                or leftFightData.battleType == BattleType.CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or leftFightData.battleType == BattleType.Turret then
            local RightData = self:GetEffectDataByEffectId(35040,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35040,220089,reasonList,nil,RightData,1,1)
        end

        if (leftFightData.battleType == BattleType.RallyFormation or leftFightData.battleType == BattleType.Formation or leftFightData.buildId == BuildingTypes.APS_BUILD_WORMHOLE_SUB or BuildingUtils.IsInEdenSubwayGroup(leftFightData.buildId)==true ) and (rightFightData.battleType == BattleType.RallyFormation or rightFightData.battleType == BattleType.Formation or rightFightData.buildId == BuildingTypes.APS_BUILD_WORMHOLE_SUB) then
            local LeftData = self:GetEffectDataByEffectId(35024,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35024,220073,reasonList,LeftData,nil,1,1)
            local RightData = self:GetEffectDataByEffectId(35024,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35024,220073,reasonList,nil,RightData,1,1)
            if leftFightData.unitData~=nil and leftBattleEffect~=nil then
                local index = leftFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40108
                elseif index ==2 then
                    effectId = 40109
                elseif index ==3 then
                    effectId = 40110
                elseif index ==4 then
                    effectId = 40108
                end
                if effectId>0 then
                    local effectNum = leftBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.leftNum = oneData.leftNum+ effectNum
                        tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                    end
                end
            end
            if rightFightData.unitData~=nil and rightBattleEffect~=nil then
                local index = rightFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40108
                elseif index ==2 then
                    effectId = 40109
                elseif index ==3 then
                    effectId = 40110
                elseif index ==4 then
                    effectId = 40108
                end
                if effectId>0 then
                    local effectNum = rightBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.rightNum = oneData.rightNum+ effectNum
                        tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                    end
                end
            end
        end
        if (leftFightData.battleType == BattleType.RallyFormation or leftFightData.battleType == BattleType.Formation) and (rightFightData.battleType == BattleType.Monster or rightFightData.battleType == BattleType.ACT_BOSS or rightFightData.battleType == BattleType.Boss or rightFightData.battleType == BattleType.PUZZLE_BOSS or rightFightData.battleType == BattleType.CHALLENGE_BOSS or rightFightData.battleType == BattleType.BLACK_KNIGHT) then
            local LeftData = self:GetEffectDataByEffectId(35056,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35056,220105,reasonList,LeftData,nil,1,1)
            local RightData = self:GetEffectDataByEffectId(35056,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35056,220105,reasonList,nil,RightData,1,1)
            if leftFightData.unitData~=nil and leftBattleEffect~=nil then
                local index = leftFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40108
                elseif index ==2 then
                    effectId = 40109
                elseif index ==3 then
                    effectId = 40110
                elseif index == 4 then
                    effectId = 40108
                end
                if effectId>0 then
                    local effectNum = leftBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.leftNum = oneData.leftNum+ effectNum
                        tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                    end
                end
            end
            if rightFightData.unitData~=nil and rightBattleEffect~=nil then
                local index = rightFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40108
                elseif index ==2 then
                    effectId = 40109
                elseif index ==3 then
                    effectId = 40110
                elseif index == 4 then
                    effectId = 40108
                end
                if effectId>0 then
                    local effectNum = rightBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.rightNum = oneData.rightNum+ effectNum
                        tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                    end
                end
            end
        end

        if (leftFightData.battleType == BattleType.RallyFormation) then
            local LeftData = self:GetEffectDataByEffectId(35032,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35032,220081,reasonList,LeftData,nil,1,1)
        end

        if (rightFightData.battleType == BattleType.RallyFormation) then
            local RightData = self:GetEffectDataByEffectId(35032,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35032,220081,reasonList,nil,RightData,1,1)
        end
        if leftFightData.battleType == BattleType.Building or leftFightData.battleType == BattleType.CROSS_WORM or leftFightData.battleType == BattleType.City
                or leftFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or leftFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or leftFightData.battleType == BattleType.THRONE_ARMY
                or leftFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILDING or leftFightData.battleType == BattleType.ACT_ALLIANCE_MINE or leftFightData.battleType == BattleType.DRAGON_BUILDING
                or leftFightData.battleType == BattleType.CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or leftFightData.battleType == BattleType.Turret then
            if leftFightData.unitData~=nil then
                if leftFightData.unitData:GetSpecialType() == SpecialUnitType.NONE then
                    local LeftData = self:GetEffectDataByEffectId(35133,leftBattleEffect,leftFightData,leftUuid)
                    oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
                    self:SetReasonShowList(35133,163158,reasonList,LeftData,nil,1,1)
                end
            end
            if leftFightData.unitData~=nil and leftBattleEffect~=nil then
                local index = leftFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40116
                elseif index ==2 then
                    effectId = 40117
                elseif index ==3 then
                    effectId = 40118
                elseif index == 4 then
                    effectId = 40116
                end
                if effectId>0 then
                    local effectNum = leftBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.leftNum = oneData.leftNum+ effectNum
                        tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                    end
                end
            end
        end
        if rightFightData.battleType == BattleType.Building or rightFightData.battleType == BattleType.CROSS_WORM or rightFightData.battleType == BattleType.City
                or rightFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or rightFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or rightFightData.battleType == BattleType.THRONE_ARMY
                or rightFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILDING or rightFightData.battleType == BattleType.ACT_ALLIANCE_MINE or rightFightData.battleType == BattleType.DRAGON_BUILDING
                or rightFightData.battleType == BattleType.CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or rightFightData.battleType == BattleType.Turret then
            if rightFightData.unitData~=nil then
                if rightFightData.unitData:GetSpecialType() == SpecialUnitType.NONE then
                    local RightData = self:GetEffectDataByEffectId(35133,rightBattleEffect,rightFightData,rightUuid)
                    oneData.rightNum = oneData.rightNum + (RightData.totalNum)
                    self:SetReasonShowList(35133,163158,reasonList,nil,RightData,1,1)
                end
            end
            if rightFightData.unitData~=nil and rightBattleEffect~=nil then
                local index = rightFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40116
                elseif index ==2 then
                    effectId = 40117
                elseif index ==3 then
                    effectId = 40118
                elseif index ==4 then
                    effectId = 40116
                end
                if effectId>0 then
                    local effectNum = rightBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.rightNum = oneData.rightNum+ effectNum
                        tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                    end
                end
            end
        end
        if leftFightData.unitData~=nil then
            local index = leftFightData.unitData:GetFormationIndex()
            local effectId = 0
            if rightFightData.battleType == BattleType.Building or rightFightData.battleType == BattleType.CROSS_WORM or rightFightData.battleType == BattleType.City
                    or rightFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or rightFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or rightFightData.battleType == BattleType.THRONE_ARMY
                    or rightFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILDING or rightFightData.battleType == BattleType.ACT_ALLIANCE_MINE or rightFightData.battleType == BattleType.DRAGON_BUILDING
                    or rightFightData.battleType == BattleType.CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                    or rightFightData.battleType == BattleType.Turret then
                if index == 1 then
                    effectId = 40051
                elseif index ==2 then
                    effectId = 40052
                elseif index ==3 then
                    effectId = 40053
                elseif index == 4 then
                    effectId = 40051
                end
                if effectId>0 then
                    local effectNum = leftBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.Tank]
                    if tempData~=nil then
                        oneData.leftNum = oneData.leftNum+ effectNum
                        tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                    end
                end
            end
            effectId =0
            if index == 1 then
                effectId = 40036
            elseif index ==2 then
                effectId = 40037
            elseif index ==3 then
                effectId = 40038
            elseif index == 4 then
                effectId = 40036
            end
            if effectId>0 then
                local effectNum = leftBattleEffect:GetValue(effectId)
                local tempData = reasonList[GameEffectReason.Tank]
                if tempData~=nil then
                    oneData.leftNum = oneData.leftNum+ effectNum
                    tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                end
            end
        end
        if rightFightData.unitData~=nil then
            local index = rightFightData.unitData:GetFormationIndex()
            local effectId = 0
            if leftFightData.battleType == BattleType.Building or leftFightData.battleType == BattleType.CROSS_WORM or leftFightData.battleType == BattleType.City
                    or leftFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or leftFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or leftFightData.battleType == BattleType.THRONE_ARMY
                    or leftFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILDING or leftFightData.battleType == BattleType.ACT_ALLIANCE_MINE or leftFightData.battleType == BattleType.DRAGON_BUILDING
                    or leftFightData.battleType == BattleType.CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                    or leftFightData.battleType == BattleType.Turret then
                if index == 1 then
                    effectId = 40051
                elseif index ==2 then
                    effectId = 40052
                elseif index ==3 then
                    effectId = 40053
                elseif index == 4 then
                    effectId = 40051
                end
                if effectId>0 then
                    local effectNum = rightBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.Tank]
                    if tempData~=nil then
                        oneData.rightNum = oneData.rightNum +effectNum
                        tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                    end
                end
            end
            effectId =0
            if index == 1 then
                effectId = 40036
            elseif index ==2 then
                effectId = 40037
            elseif index ==3 then
                effectId = 40038
            elseif index == 4 then
                effectId = 40036
            end
            if effectId>0 then
                local effectNum = rightBattleEffect:GetValue(effectId)
                local tempData = reasonList[GameEffectReason.Tank]
                if tempData~=nil then
                    oneData.rightNum = oneData.rightNum +effectNum
                    tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                end
            end
        end
    end
    local addList = self:GetHeroAttackData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)

    if addList~=nil and addList.reasonList~=nil then
        for k,v in pairs (addList.reasonList) do
            if k~= GameEffectReason.ExtraAdd then
                local heroList = reasonList[k]
                local addHeroList = v
                if addHeroList~=nil and heroList~=nil then
                    local leftData = heroList.leftData
                    local addLeftData = addHeroList.leftData
                    if addLeftData.totalNum>0 and addLeftData.totalReason~=nil then
                        local tempList = addLeftData.totalReason
                        for i = 1,#tempList do
                            local one = tempList[i]
                            if one~=nil and one.addNum>0 then
                                local num = one.addNum
                                num = num/100
                                local tempData = {}
                                tempData.effectId = one.effectId
                                tempData.dialog = one.dialog
                                tempData.addNum = num
                                oneData.leftNum = oneData.leftNum+num
                                heroList.leftData.totalNum = heroList.leftData.totalNum+num
                                table.insert(leftData.totalReason,tempData)
                            end
                        end
                    end
                    local rightData = heroList.rightData
                    local addRightData = addHeroList.rightData
                    if addRightData.totalNum>0 and addRightData.totalReason~=nil then
                        local tempList = addRightData.totalReason
                        for i = 1,#tempList do
                            local one = tempList[i]
                            if one~=nil and one.addNum>0 then
                                local num = one.addNum
                                num = num/100
                                local tempData = {}
                                tempData.effectId = one.effectId
                                tempData.dialog = one.dialog
                                tempData.addNum = num
                                oneData.rightNum = oneData.rightNum+num
                                heroList.rightData.totalNum = heroList.rightData.totalNum+num
                                table.insert(rightData.totalReason,tempData)
                            end
                        end
                    end
                end
            end

        end

        local extraList = reasonList[GameEffectReason.ExtraAdd]
        local addExtraList = addList.reasonList[GameEffectReason.ExtraAdd]
        if extraList~=nil and addExtraList~=nil then
            local leftAdd = (addExtraList.leftData.totalNum/100)
            local rightAdd = (addExtraList.rightData.totalNum/100)
            extraList.leftData.totalNum = extraList.leftData.totalNum + leftAdd
            oneData.leftNum = oneData.leftNum+leftAdd
            extraList.rightData.totalNum = extraList.rightData.totalNum + rightAdd
            oneData.rightNum = oneData.rightNum+rightAdd
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetDefenceAddData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)
    local oneData = {}
    oneData.dialogId = "163139"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.DefenceAdd
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	【部队防御力35004】
    --	单兵防御力【35005】【35006】【35007】（根据兵力配比打包生成一个【兵种混合防御力】）
    --	【野外战斗攻击加成类35028】
    --	【攻城战斗攻击增益35044】
    --	【驻防建筑攻击增益35052】
    --	【打怪攻击力加成类35060】
    --	【编队1~4攻城防御力增益%】
    --	【编队1~4防御力增益%】
    --	【加入集结时攻击力提升35036】只有集结时出现
    --	【增援别人城市或者中立城市时攻击力提升35134】只有增援时出现

    local aLeftData = self:GetEffectDataByEffectId(35004,leftBattleEffect,leftFightData,leftUuid)
    local aRightData = self:GetEffectDataByEffectId(35004,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + aLeftData.totalNum
    oneData.rightNum = oneData.rightNum + aRightData.totalNum
    self:SetReasonShowList(35004,220053,reasonList,aLeftData,aRightData,1,1)

    local bLeftPercent = 0
    local bRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        bLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Tank)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        bRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Tank)
    end
    local bLeftData = self:GetEffectDataByEffectId(35005,leftBattleEffect,leftFightData,leftUuid)
    local bRightData = self:GetEffectDataByEffectId(35005,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (bLeftData.totalNum*bLeftPercent)
    oneData.rightNum = oneData.rightNum + (bRightData.totalNum*bRightPercent)
    self:SetReasonShowList(35005,220054,reasonList,bLeftData,bRightData,bLeftPercent,bRightPercent)

    local cLeftPercent = 0
    local cRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        cLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Robot)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        cRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Robot)
    end
    local cLeftData = self:GetEffectDataByEffectId(35006,leftBattleEffect,leftFightData,leftUuid)
    local cRightData = self:GetEffectDataByEffectId(35006,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (cLeftData.totalNum*cLeftPercent)
    oneData.rightNum = oneData.rightNum + (cRightData.totalNum*cRightPercent)
    self:SetReasonShowList(35006,220055,reasonList,cLeftData,cRightData,cLeftPercent,cRightPercent)

    local dLeftPercent = 0
    local dRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        dLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Plane)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        dRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Plane)
    end
    local dLeftData = self:GetEffectDataByEffectId(35007,leftBattleEffect,leftFightData,leftUuid)
    local dRightData = self:GetEffectDataByEffectId(35007,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (dLeftData.totalNum*dLeftPercent)
    oneData.rightNum = oneData.rightNum + (dRightData.totalNum*dRightPercent)
    self:SetReasonShowList(35007,220056,reasonList,dLeftData,dRightData,dLeftPercent,dRightPercent)

    if rightBattleEffect~=nil then
        local effectNum = rightBattleEffect:GetValue(35196)
        local tempData = reasonList[GameEffectReason.EnemyDec]
        if tempData~=nil then
            oneData.leftNum = oneData.leftNum- effectNum
            tempData.leftData.totalNum = tempData.leftData.totalNum - effectNum
        end
    end
    if leftBattleEffect~=nil then
        local effectNum = leftBattleEffect:GetValue(35196)
        local tempData = reasonList[GameEffectReason.EnemyDec]
        if tempData~=nil then
            oneData.rightNum = oneData.rightNum- effectNum
            tempData.rightData.totalNum = tempData.rightData.totalNum - effectNum
        end
    end

    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.battleType == BattleType.Building or leftFightData.battleType == BattleType.CROSS_WORM or leftFightData.battleType == BattleType.City
                or leftFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or leftFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or leftFightData.battleType == BattleType.THRONE_ARMY
                or leftFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILDING or leftFightData.battleType == BattleType.ACT_ALLIANCE_MINE or leftFightData.battleType == BattleType.DRAGON_BUILDING
                or leftFightData.battleType == BattleType.CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or leftFightData.battleType == BattleType.Turret then
            local LeftData = self:GetEffectDataByEffectId(35052,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35052,220101,reasonList,LeftData,nil,1,1)
        end
        if rightFightData.battleType == BattleType.Building or rightFightData.battleType == BattleType.CROSS_WORM or rightFightData.battleType == BattleType.City
                or rightFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or rightFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or rightFightData.battleType == BattleType.THRONE_ARMY
                or rightFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILDING or rightFightData.battleType == BattleType.ACT_ALLIANCE_MINE or rightFightData.battleType == BattleType.DRAGON_BUILDING
                or rightFightData.battleType == BattleType.CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or rightFightData.battleType == BattleType.Turret then
            local RightData = self:GetEffectDataByEffectId(35052,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35052,220101,reasonList,nil,RightData,1,1)
        end

        if rightFightData.battleType == BattleType.Building or rightFightData.battleType == BattleType.CROSS_WORM or rightFightData.battleType == BattleType.City
                or rightFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or rightFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or rightFightData.battleType == BattleType.THRONE_ARMY
                or rightFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILDING or rightFightData.battleType == BattleType.ACT_ALLIANCE_MINE or rightFightData.battleType == BattleType.DRAGON_BUILDING
                or rightFightData.battleType == BattleType.CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or rightFightData.battleType == BattleType.Turret then
            local LeftData = self:GetEffectDataByEffectId(35044,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35044,220093,reasonList,LeftData,nil,1,1)
        end
        if leftFightData.battleType == BattleType.Building or leftFightData.battleType == BattleType.CROSS_WORM or leftFightData.battleType == BattleType.City
                or leftFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or leftFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or leftFightData.battleType == BattleType.THRONE_ARMY
                or leftFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILDING or leftFightData.battleType == BattleType.ACT_ALLIANCE_MINE or leftFightData.battleType == BattleType.DRAGON_BUILDING
                or leftFightData.battleType == BattleType.CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or leftFightData.battleType == BattleType.Turret then
            local RightData = self:GetEffectDataByEffectId(35044,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35044,220093,reasonList,nil,RightData,1,1)
        end

        if (leftFightData.battleType == BattleType.RallyFormation or leftFightData.battleType == BattleType.Formation or leftFightData.buildId == BuildingTypes.APS_BUILD_WORMHOLE_SUB or BuildingUtils.IsInEdenSubwayGroup(leftFightData.buildId)==true) and (rightFightData.battleType == BattleType.RallyFormation or rightFightData.battleType == BattleType.Formation or rightFightData.buildId == BuildingTypes.APS_BUILD_WORMHOLE_SUB) then
            local LeftData = self:GetEffectDataByEffectId(35028,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35028,220077,reasonList,LeftData,nil,1,1)
            local RightData = self:GetEffectDataByEffectId(35028,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35028,220077,reasonList,nil,RightData,1,1)

            if leftFightData.unitData~=nil and leftBattleEffect~=nil then
                local index = leftFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40112
                elseif index ==2 then
                    effectId = 40113
                elseif index ==3 then
                    effectId = 40114
                elseif index ==4 then
                    effectId = 40112
                end
                if effectId>0 then
                    local effectNum = leftBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.leftNum = oneData.leftNum+ effectNum
                        tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                    end
                end
            end
            if rightFightData.unitData~=nil and rightBattleEffect~=nil then
                local index = rightFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40112
                elseif index ==2 then
                    effectId = 40113
                elseif index ==3 then
                    effectId = 40114
                elseif index ==4 then
                    effectId = 40112
                end
                if effectId>0 then
                    local effectNum = rightBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.rightNum = oneData.rightNum+ effectNum
                        tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                    end
                end
            end

        end
        if (leftFightData.battleType == BattleType.RallyFormation or leftFightData.battleType == BattleType.Formation) and (rightFightData.battleType == BattleType.Monster or rightFightData.battleType == BattleType.ACT_BOSS or rightFightData.battleType == BattleType.Boss or rightFightData.battleType == BattleType.PUZZLE_BOSS or rightFightData.battleType == BattleType.CHALLENGE_BOSS or rightFightData.battleType == BattleType.BLACK_KNIGHT) then
            local LeftData = self:GetEffectDataByEffectId(35060,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35060,220109,reasonList,LeftData,nil,1,1)
            local RightData = self:GetEffectDataByEffectId(35060,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35060,220109,reasonList,nil,RightData,1,1)
            if leftFightData.unitData~=nil  and leftBattleEffect~=nil then
                local index = leftFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40112
                elseif index ==2 then
                    effectId = 40113
                elseif index ==3 then
                    effectId = 40114
                elseif index ==4 then
                    effectId = 40112
                end
                if effectId>0 then
                    local effectNum = leftBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.leftNum = oneData.leftNum+ effectNum
                        tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                    end
                end
            end
            if rightFightData.unitData~=nil and rightBattleEffect~=nil then
                local index = rightFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40112
                elseif index ==2 then
                    effectId = 40113
                elseif index ==3 then
                    effectId = 40114
                elseif index ==4 then
                    effectId = 40112
                end
                if effectId>0 then
                    local effectNum = rightBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.rightNum = oneData.rightNum+ effectNum
                        tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                    end
                end
            end
        end

        if (leftFightData.battleType == BattleType.RallyFormation) then
            local LeftData = self:GetEffectDataByEffectId(35036,leftBattleEffect,leftFightData,leftUuid)
            oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
            self:SetReasonShowList(35036,220085,reasonList,LeftData,nil,1,1)
        end

        if (rightFightData.battleType == BattleType.RallyFormation) then
            local RightData = self:GetEffectDataByEffectId(35036,rightBattleEffect,rightFightData,rightUuid)
            oneData.rightNum = oneData.rightNum + (RightData.totalNum)
            self:SetReasonShowList(35036,220085,reasonList,nil,RightData,1,1)
        end
        if leftFightData.battleType == BattleType.Building or leftFightData.battleType == BattleType.CROSS_WORM or leftFightData.battleType == BattleType.City
                or leftFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or leftFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or leftFightData.battleType == BattleType.THRONE_ARMY
                or leftFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILDING or leftFightData.battleType == BattleType.ACT_ALLIANCE_MINE or leftFightData.battleType == BattleType.DRAGON_BUILDING
                or leftFightData.battleType == BattleType.CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or leftFightData.battleType == BattleType.Turret then
            if leftFightData.unitData~=nil then
                if leftFightData.unitData:GetSpecialType() == SpecialUnitType.NONE then
                    local LeftData = self:GetEffectDataByEffectId(35134,leftBattleEffect,leftFightData,leftUuid)
                    oneData.leftNum = oneData.leftNum + (LeftData.totalNum)
                    self:SetReasonShowList(35134,163159,reasonList,LeftData,nil,1,1)
                end
            end
            if leftFightData.unitData~=nil and leftBattleEffect~=nil then
                local index = leftFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40120
                elseif index ==2 then
                    effectId = 40121
                elseif index ==3 then
                    effectId = 40122
                elseif index ==4 then
                    effectId = 40120
                end
                if effectId>0 then
                    local effectNum = leftBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.leftNum = oneData.leftNum+ effectNum
                        tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                    end
                end
            end
        end
        if rightFightData.battleType == BattleType.Building or rightFightData.battleType == BattleType.CROSS_WORM or rightFightData.battleType == BattleType.City
                or rightFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or rightFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or rightFightData.battleType == BattleType.THRONE_ARMY
                or rightFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILDING or rightFightData.battleType == BattleType.ACT_ALLIANCE_MINE or rightFightData.battleType == BattleType.DRAGON_BUILDING
                or rightFightData.battleType == BattleType.CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                or rightFightData.battleType == BattleType.Turret then
            if rightFightData.unitData~=nil then
                if rightFightData.unitData:GetSpecialType() == SpecialUnitType.NONE then
                    local RightData = self:GetEffectDataByEffectId(35134,rightBattleEffect,rightFightData,rightUuid)
                    oneData.rightNum = oneData.rightNum + (RightData.totalNum)
                    self:SetReasonShowList(35134,163159,reasonList,nil,RightData,1,1)
                end
            end
            if rightFightData.unitData~=nil and rightBattleEffect~=nil then
                local index = rightFightData.unitData:GetFormationIndex()
                local effectId = 0
                if index == 1 then
                    effectId = 40120
                elseif index ==2 then
                    effectId = 40121
                elseif index ==3 then
                    effectId = 40122
                elseif index ==4 then
                    effectId = 40120
                end
                if effectId>0 then
                    local effectNum = rightBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.DESERT_TALENT]
                    if tempData~=nil then
                        oneData.rightNum = oneData.rightNum+ effectNum
                        tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                    end
                end
            end
        end
        if leftFightData.unitData~=nil then
            local index = leftFightData.unitData:GetFormationIndex()
            local effectId = 0
            if rightFightData.battleType == BattleType.Building or rightFightData.battleType == BattleType.CROSS_WORM or rightFightData.battleType == BattleType.City
                    or rightFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or rightFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or rightFightData.battleType == BattleType.THRONE_ARMY
                    or rightFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILDING or rightFightData.battleType == BattleType.ACT_ALLIANCE_MINE or rightFightData.battleType == BattleType.DRAGON_BUILDING
                    or rightFightData.battleType == BattleType.CITY_GUARD or rightFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                    or rightFightData.battleType == BattleType.Turret then
                if index == 1 then
                    effectId = 40055
                elseif index ==2 then
                    effectId = 40056
                elseif index ==3 then
                    effectId = 40057
                elseif index == 4 then
                    effectId = 40055
                end
                if effectId>0 then
                    local effectNum = leftBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.Tank]
                    if tempData~=nil then
                        oneData.leftNum = oneData.leftNum+ effectNum
                        tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                    end
                end
            end
            effectId =0
            if index == 1 then
                effectId = 40040
            elseif index ==2 then
                effectId = 40041
            elseif index ==3 then
                effectId = 40042
            elseif index == 4 then
                effectId = 40040
            end
            if effectId>0 then
                local effectNum = leftBattleEffect:GetValue(effectId)
                local tempData = reasonList[GameEffectReason.Tank]
                if tempData~=nil then
                    oneData.leftNum = oneData.leftNum+ effectNum
                    tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                end
            end
        end
        if rightFightData.unitData~=nil then
            local index = rightFightData.unitData:GetFormationIndex()
            local effectId = 0
            if leftFightData.battleType == BattleType.Building or leftFightData.battleType == BattleType.CROSS_WORM or leftFightData.battleType == BattleType.City
                    or leftFightData.battleType == BattleType.ALLIANCE_OCCUPIED_CITY or leftFightData.battleType == BattleType.ALLIANCE_NEUTRAL_CITY or leftFightData.battleType == BattleType.THRONE_ARMY
                    or leftFightData.battleType == BattleType.ALLIANCE_CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILDING or leftFightData.battleType == BattleType.ACT_ALLIANCE_MINE or leftFightData.battleType == BattleType.DRAGON_BUILDING
                    or leftFightData.battleType == BattleType.CITY_GUARD or leftFightData.battleType == BattleType.ALLIANCE_BUILD_GUARD
                    or leftFightData.battleType == BattleType.Turret then
                if index == 1 then
                    effectId = 40055
                elseif index ==2 then
                    effectId = 40056
                elseif index ==3 then
                    effectId = 40057
                elseif index == 4 then
                    effectId = 40055
                end
                if effectId>0 then
                    local effectNum = rightBattleEffect:GetValue(effectId)
                    local tempData = reasonList[GameEffectReason.Tank]
                    if tempData~=nil then
                        oneData.rightNum = oneData.rightNum +effectNum
                        tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                    end
                end
            end
            effectId =0
            if index == 1 then
                effectId = 40040
            elseif index ==2 then
                effectId = 40041
            elseif index ==3 then
                effectId = 40042
            elseif index == 4 then
                effectId = 40040
            end
            if effectId>0 then
                local effectNum = rightBattleEffect:GetValue(effectId)
                local tempData = reasonList[GameEffectReason.Tank]
                if tempData~=nil then
                    oneData.rightNum = oneData.rightNum +effectNum
                    tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                end
            end
        end
    end
    local addList = self:GetHeroDefenceData(leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)
    if addList~=nil and addList.reasonList~=nil then
        for k,v in pairs (addList.reasonList) do
            if k~= GameEffectReason.ExtraAdd then
                local heroList = reasonList[k]
                local addHeroList = v
                if addHeroList~=nil and heroList~=nil then
                    local leftData = heroList.leftData
                    local addLeftData = addHeroList.leftData
                    if addLeftData.totalNum>0 and addLeftData.totalReason~=nil then
                        local tempList = addLeftData.totalReason
                        for i = 1,#tempList do
                            local one = tempList[i]
                            if one~=nil and one.addNum>0 then
                                local num = one.addNum
                                num = num/100
                                local tempData = {}
                                tempData.effectId = one.effectId
                                tempData.dialog = one.dialog
                                tempData.addNum = num
                                oneData.leftNum = oneData.leftNum+num
                                heroList.leftData.totalNum = heroList.leftData.totalNum+num
                                table.insert(leftData.totalReason,tempData)
                            end
                        end
                    end
                    local rightData = heroList.rightData
                    local addRightData = addHeroList.rightData
                    if addRightData.totalNum>0 and addRightData.totalReason~=nil then
                        local tempList = addRightData.totalReason
                        for i = 1,#tempList do
                            local one = tempList[i]
                            if one~=nil and one.addNum>0 then
                                local num = one.addNum
                                num = num/100
                                local tempData = {}
                                tempData.effectId = one.effectId
                                tempData.dialog = one.dialog
                                tempData.addNum = num
                                oneData.rightNum = oneData.rightNum+num
                                heroList.rightData.totalNum = heroList.rightData.totalNum+num
                                table.insert(rightData.totalReason,tempData)
                            end
                        end
                    end
                end
            end

        end

        local extraList = reasonList[GameEffectReason.ExtraAdd]
        local addExtraList = addList.reasonList[GameEffectReason.ExtraAdd]
        if extraList~=nil and addExtraList~=nil then
            local leftAdd = (addExtraList.leftData.totalNum/100)
            local rightAdd = (addExtraList.rightData.totalNum/100)
            extraList.leftData.totalNum = extraList.leftData.totalNum + leftAdd
            oneData.leftNum = oneData.leftNum+leftAdd
            extraList.rightData.totalNum = extraList.rightData.totalNum + rightAdd
            oneData.rightNum = oneData.rightNum+rightAdd
        end
    end

    oneData.reasonList = reasonList
    return oneData
end
local function GetHealthAddData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "163140"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.HealthAdd
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	【35012】全部生命值增加
    local aLeftData = self:GetEffectDataByEffectId(35012,leftBattleEffect,leftFightData,leftUuid)
    local aRightData = self:GetEffectDataByEffectId(35012,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + aLeftData.totalNum
    oneData.rightNum = oneData.rightNum + aRightData.totalNum
    self:SetReasonShowList(35012,163160,reasonList,aLeftData,aRightData,1,1)

    local bLeftPercent = 0
    local bRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        bLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Tank)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        bRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Tank)
    end
    local bLeftData = self:GetEffectDataByEffectId(35013,leftBattleEffect,leftFightData,leftUuid)
    local bRightData = self:GetEffectDataByEffectId(35013,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (bLeftData.totalNum*bLeftPercent)
    oneData.rightNum = oneData.rightNum + (bRightData.totalNum*bRightPercent)
    self:SetReasonShowList(35013,220058,reasonList,bLeftData,bRightData,bLeftPercent,bRightPercent)

    local cLeftPercent = 0
    local cRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        cLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Robot)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        cRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Robot)
    end
    local cLeftData = self:GetEffectDataByEffectId(35014,leftBattleEffect,leftFightData,leftUuid)
    local cRightData = self:GetEffectDataByEffectId(35014,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (cLeftData.totalNum*cLeftPercent)
    oneData.rightNum = oneData.rightNum + (cRightData.totalNum*cRightPercent)
    self:SetReasonShowList(35014,220059,reasonList,cLeftData,cRightData,cLeftPercent,cRightPercent)

    local dLeftPercent = 0
    local dRightPercent = 0
    if leftFightData~=nil and leftFightData.unitData~=nil then
        dLeftPercent = leftFightData.unitData:GetSoldierPercentByType(ArmType.Plane)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        dRightPercent = rightFightData.unitData:GetSoldierPercentByType(ArmType.Plane)
    end
    local dLeftData = self:GetEffectDataByEffectId(35015,leftBattleEffect,leftFightData,leftUuid)
    local dRightData = self:GetEffectDataByEffectId(35015,rightBattleEffect,rightFightData,rightUuid)
    oneData.leftNum = oneData.leftNum + (dLeftData.totalNum*dLeftPercent)
    oneData.rightNum = oneData.rightNum + (dRightData.totalNum*dRightPercent)
    self:SetReasonShowList(35015,220060,reasonList,dLeftData,dRightData,dLeftPercent,dRightPercent)

    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.unitData~=nil then
            local heroes = leftFightData.unitData:GetPlayerHeroes()
            local addTotalNum = 0
            for k,v in pairs(heroes) do
                local heroId = v["heroId"]
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
                local camp = HeroUtils.GetCamp(v)
                local effectId = HeroUtils.GetExtraHealthByCamp(camp)
                local addNum = leftBattleEffect:GetValue(effectId)
                addTotalNum = addTotalNum+addNum
            end
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                oneData.leftNum = oneData.leftNum+ addTotalNum
                tempData.leftData.totalNum = tempData.leftData.totalNum + addTotalNum
            end
        end
        if rightFightData.unitData~=nil then
            local heroes = rightFightData.unitData:GetPlayerHeroes()
            local addTotalNum = 0
            for k,v in pairs(heroes) do
                local heroId = v["heroId"]
                local camp = HeroUtils.GetCamp(v)
                local effectId = HeroUtils.GetExtraHealthByCamp(camp)
                local addNum = rightBattleEffect:GetValue(effectId)
                addTotalNum = addTotalNum+addNum
            end
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                oneData.rightNum = oneData.rightNum+ addTotalNum
                tempData.rightData.totalNum = tempData.rightData.totalNum + addTotalNum
            end
        end
    end

    oneData.reasonList = reasonList
    return oneData
end
local function GetMarchLimitAddData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "100508"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.MarchLimitAdd
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	英雄等级  (对英雄所在编队生效）
    --	英雄军阶 （对英雄所在编队生效）
    --	英雄技能【40001】对英雄所在的编队生效
    --	军营建筑【40044~40047】
    --	科技【40001】对全体生效
    local aLeftNum = 0
    local aRightNum = 0
    if leftBattleEffect~=nil then
        aLeftNum = leftBattleEffect:GetValue(40001)
    end
    if rightBattleEffect~=nil then
        aRightNum = rightBattleEffect:GetValue(40001)
    end
    oneData.leftNum = oneData.leftNum + aLeftNum
    oneData.rightNum = oneData.rightNum + aRightNum
    local tData = reasonList[GameEffectReason.Science]
    if tData~=nil then
        tData.leftData.totalNum = tData.leftData.totalNum + aLeftNum
        tData.rightData.totalNum = tData.rightData.totalNum + aRightNum
    end
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.unitData~=nil then
            local index = leftFightData.unitData:GetFormationIndex()
            local effectId = 0
            if index == 1 then
                effectId = 40044
            elseif index ==2 then
                effectId = 40045
            elseif index ==3 then
                effectId = 40046
            elseif index == 4 then
                effectId = 40044
            end
            if effectId>0 then
                local effectNum = leftBattleEffect:GetValue(effectId)
                local tempData = reasonList[GameEffectReason.Tank]
                if tempData~=nil then
                    oneData.leftNum = oneData.leftNum+ effectNum
                    tempData.leftData.totalNum = tempData.leftData.totalNum + effectNum
                end
            end

            local heroes = leftFightData.unitData:GetPlayerHeroes()
            local limitNumInLevel = 0
            local limitNumInRarity = 0
            local limitNumInQuality = 0
            for k,v in pairs(heroes) do
                local level = v["heroLevel"]
                local heroId = v["heroId"]
                local rankLv = v["rankLv"] or 0
                local stage = v["stage"] or 0
                local heroQuality = v["heroQuality"] or 0
                local curMilitaryRankId = HeroUtils.GetRankIdByLvAndStage(heroId, rankLv, stage)
                local rarity = GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'rarity')

                local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
                if template ~= nil then
                    limitNumInLevel = limitNumInLevel + template:GetArmyNum(rarity)
                end

                local rankTroop = GetTableData(TableName.HeroMilitaryRank, curMilitaryRankId, 'troop')[rarity]
                if rankTroop ~= nil then
                    limitNumInRarity = limitNumInRarity + toInt(rankTroop)
                end
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
                local vec = string.split(config['hero_quality_attr_troops'], "|")
                --local starAddTroop = config['hero_star_troops'][math.min(#config['hero_star_troops'], curMilitaryRankId)]
                local qualityAddTroop = vec[math.min(#vec,heroQuality)]
                if qualityAddTroop ~= nil then
                    limitNumInQuality = limitNumInQuality + toInt(qualityAddTroop)
                end
                --if starAddTroop ~= nil then
                --    limitNumInRarity = limitNumInRarity + toInt(starAddTroop)
                --end
            end
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                oneData.leftNum = oneData.leftNum+ limitNumInLevel + limitNumInRarity+limitNumInQuality
                tempData.leftData.totalNum = tempData.leftData.totalNum + limitNumInLevel + limitNumInRarity+limitNumInQuality
                local levelEffectOneData = {}
                levelEffectOneData.effectId = effectId
                levelEffectOneData.dialog = "163153"
                levelEffectOneData.addNum = limitNumInLevel
                table.insert(tempData.leftData.totalReason,levelEffectOneData)
                local rankEffectOneData = {}
                rankEffectOneData.effectId = effectId
                rankEffectOneData.dialog = "163154"
                rankEffectOneData.addNum = limitNumInRarity
                table.insert(tempData.leftData.totalReason,rankEffectOneData)
                local qualityEffectOneData = {}
                qualityEffectOneData.effectId = 0
                qualityEffectOneData.dialog = "129211"
                qualityEffectOneData.addNum = limitNumInQuality
                table.insert(tempData.leftData.totalReason,qualityEffectOneData)
            end
        end
        if rightFightData.unitData~=nil then
            local index = rightFightData.unitData:GetFormationIndex()
            local effectId = 0
            if index == 1 then
                effectId = 40044
            elseif index ==2 then
                effectId = 40045
            elseif index ==3 then
                effectId = 40046
            elseif index == 4 then
                effectId = 40044
            end
            if effectId>0 then
                local effectNum = rightBattleEffect:GetValue(effectId)
                local tempData = reasonList[GameEffectReason.Tank]
                if tempData~=nil then
                    oneData.rightNum = oneData.rightNum +effectNum
                    tempData.rightData.totalNum = tempData.rightData.totalNum + effectNum
                end
            end

            local heroes = rightFightData.unitData:GetPlayerHeroes()
            local limitNumInLevel = 0
            local limitNumInRarity = 0
            local limitNumInQuality = 0
            for k,v in pairs(heroes) do
                local level = v["heroLevel"]
                local heroId = v["heroId"]
                local rankLv = v["rankLv"] or 0
                local stage = v["stage"] or 0
                local heroQuality = v["heroQuality"] or 0
                local curMilitaryRankId = HeroUtils.GetRankIdByLvAndStage(heroId, rankLv, stage)
                local rarity = GetTableData(HeroUtils.GetHeroXmlName(), heroId, 'rarity')
                local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
                if template ~= nil then
                    limitNumInLevel = limitNumInLevel + template:GetArmyNum(rarity)
                end

                local rankTroop = GetTableData(TableName.HeroMilitaryRank, curMilitaryRankId, 'troop')[rarity]
                if rankTroop ~= nil then
                    limitNumInRarity = limitNumInRarity + toInt(rankTroop)
                end
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
                local vec = string.split(config['hero_quality_attr_troops'], "|")
                local qualityAddTroop = vec[math.min(#vec,heroQuality)]
                --local starAddTroop = config['hero_star_troops'][math.min(#config['hero_star_troops'], curMilitaryRankId)]
                if qualityAddTroop ~= nil then
                    limitNumInQuality = limitNumInQuality + toInt(qualityAddTroop)
                end
                --if starAddTroop ~= nil then
                --    limitNumInRarity = limitNumInRarity + toInt(starAddTroop)
                --end
            end
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                oneData.rightNum = oneData.rightNum+ limitNumInLevel + limitNumInRarity+limitNumInQuality
                tempData.rightData.totalNum = tempData.rightData.totalNum + limitNumInLevel + limitNumInRarity+limitNumInQuality
                local levelEffectOneData = {}
                levelEffectOneData.effectId = effectId
                levelEffectOneData.dialog = "163153"
                levelEffectOneData.addNum = limitNumInLevel
                table.insert(tempData.rightData.totalReason,levelEffectOneData)
                local rankEffectOneData = {}
                rankEffectOneData.effectId = effectId
                rankEffectOneData.dialog = "163154"
                rankEffectOneData.addNum = limitNumInRarity
                table.insert(tempData.rightData.totalReason,rankEffectOneData)
                local qualityEffectOneData = {}
                qualityEffectOneData.effectId = 0
                qualityEffectOneData.dialog = "129211"
                qualityEffectOneData.addNum = limitNumInQuality
                table.insert(tempData.rightData.totalReason,qualityEffectOneData)
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetSkillHurtAddData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "163143"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.SkillHurtAdd
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	35064 所有伤害增加%
    --	35104 技能伤害增加%
    --	35084 组队进攻伤害增加%

    local effectNumla = leftBattleEffect:GetValue(35064)
    local tempDatala = reasonList[GameEffectReason.Hero]
    if tempDatala~=nil then
        oneData.leftNum = oneData.leftNum +effectNumla
        tempDatala.leftData.totalNum = tempDatala.leftData.totalNum + effectNumla
    end
    local effectNumlb = leftBattleEffect:GetValue(35104)
    local tempDatalb = reasonList[GameEffectReason.Hero]
    if tempDatalb~=nil then
        oneData.leftNum = oneData.leftNum +effectNumlb
        tempDatalb.leftData.totalNum = tempDatalb.leftData.totalNum + effectNumlb
    end
    local effectNumra = rightBattleEffect:GetValue(35064)
    local tempDatara = reasonList[GameEffectReason.Hero]
    if tempDatara~=nil then
        oneData.rightNum = oneData.rightNum +effectNumra
        tempDatara.rightData.totalNum = tempDatara.rightData.totalNum + effectNumra
    end
    local effectNumrb = rightBattleEffect:GetValue(35104)
    local tempDatarb = reasonList[GameEffectReason.Hero]
    if tempDatarb~=nil then
        oneData.rightNum = oneData.rightNum +effectNumrb
        tempDatarb.rightData.totalNum = tempDatarb.rightData.totalNum + effectNumrb
    end
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.battleType == BattleType.RallyFormation then
            local effectNumlc = leftBattleEffect:GetValue(35084)
            local tempDatalc = reasonList[GameEffectReason.Hero]
            if tempDatalc~=nil then
                oneData.leftNum = oneData.leftNum +effectNumlc
                tempDatalc.leftData.totalNum = tempDatalc.leftData.totalNum + effectNumlc
            end
        end

        if rightFightData.battleType == BattleType.RallyFormation then
            local effectNumrc = rightBattleEffect:GetValue(35084)
            local tempDatarc = reasonList[GameEffectReason.Hero]
            if tempDatarc~=nil then
                oneData.rightNum = oneData.rightNum +effectNumrc
                tempDatarc.rightData.totalNum = tempDatarc.rightData.totalNum + effectNumrc
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetNormalHurtAddData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "163144"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.NormalHurtAdd
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	35064 所有伤害增加%
    --	35104 技能伤害增加%
    --	35084 组队进攻伤害增加%

    local effectNumla = leftBattleEffect:GetValue(35064)
    local tempDatala = reasonList[GameEffectReason.Hero]
    if tempDatala~=nil then
        oneData.leftNum = oneData.leftNum +effectNumla
        tempDatala.leftData.totalNum = tempDatala.leftData.totalNum + effectNumla
    end
    local effectNumlb = leftBattleEffect:GetValue(35103)
    local tempDatalb = reasonList[GameEffectReason.Hero]
    if tempDatalb~=nil then
        oneData.leftNum = oneData.leftNum +effectNumlb
        tempDatalb.leftData.totalNum = tempDatalb.leftData.totalNum + effectNumlb
    end
    local effectNumra = rightBattleEffect:GetValue(35064)
    local tempDatara = reasonList[GameEffectReason.Hero]
    if tempDatara~=nil then
        oneData.rightNum = oneData.rightNum +effectNumra
        tempDatara.rightData.totalNum = tempDatara.rightData.totalNum + effectNumra
    end
    local effectNumrb = rightBattleEffect:GetValue(35103)
    local tempDatarb = reasonList[GameEffectReason.Hero]
    if tempDatarb~=nil then
        oneData.rightNum = oneData.rightNum +effectNumrb
        tempDatarb.rightData.totalNum = tempDatarb.rightData.totalNum + effectNumrb
    end
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.battleType == BattleType.RallyFormation then
            local effectNumlc = leftBattleEffect:GetValue(35084)
            local tempDatalc = reasonList[GameEffectReason.Hero]
            if tempDatalc~=nil then
                oneData.leftNum = oneData.leftNum +effectNumlc
                tempDatalc.leftData.totalNum = tempDatalc.leftData.totalNum + effectNumlc
            end
        end

        if rightFightData.battleType == BattleType.RallyFormation then
            local effectNumrc = rightBattleEffect:GetValue(35084)
            local tempDatarc = reasonList[GameEffectReason.Hero]
            if tempDatarc~=nil then
                oneData.rightNum = oneData.rightNum +effectNumrc
                tempDatarc.rightData.totalNum = tempDatarc.rightData.totalNum + effectNumrc
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetBackHurtAddData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "163145"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.BackHurtAdd
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	35064 所有伤害增加%
    --	35104 技能伤害增加%
    --	35084 组队进攻伤害增加%

    local effectNumla = leftBattleEffect:GetValue(35064)
    local tempDatala = reasonList[GameEffectReason.Hero]
    if tempDatala~=nil then
        oneData.leftNum = oneData.leftNum +effectNumla
        tempDatala.leftData.totalNum = tempDatala.leftData.totalNum + effectNumla
    end
    local effectNumlb = leftBattleEffect:GetValue(35105)
    local tempDatalb = reasonList[GameEffectReason.Hero]
    if tempDatalb~=nil then
        oneData.leftNum = oneData.leftNum +effectNumlb
        tempDatalb.leftData.totalNum = tempDatalb.leftData.totalNum + effectNumlb
    end
    local effectNumra = rightBattleEffect:GetValue(35064)
    local tempDatara = reasonList[GameEffectReason.Hero]
    if tempDatara~=nil then
        oneData.rightNum = oneData.rightNum +effectNumra
        tempDatara.rightData.totalNum = tempDatara.rightData.totalNum + effectNumra
    end
    local effectNumrb = rightBattleEffect:GetValue(35105)
    local tempDatarb = reasonList[GameEffectReason.Hero]
    if tempDatarb~=nil then
        oneData.rightNum = oneData.rightNum +effectNumrb
        tempDatarb.rightData.totalNum = tempDatarb.rightData.totalNum + effectNumrb
    end
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.battleType == BattleType.RallyFormation then
            local effectNumlc = leftBattleEffect:GetValue(35084)
            local tempDatalc = reasonList[GameEffectReason.Hero]
            if tempDatalc~=nil then
                oneData.leftNum = oneData.leftNum +effectNumlc
                tempDatalc.leftData.totalNum = tempDatalc.leftData.totalNum + effectNumlc
            end
        end

        if rightFightData.battleType == BattleType.RallyFormation then
            local effectNumrc = rightBattleEffect:GetValue(35084)
            local tempDatarc = reasonList[GameEffectReason.Hero]
            if tempDatarc~=nil then
                oneData.rightNum = oneData.rightNum +effectNumrc
                tempDatarc.rightData.totalNum = tempDatarc.rightData.totalNum + effectNumrc
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetSkillHurtDecData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "163146"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.SkillHurtDec
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	35064 所有伤害增加%
    --	35104 技能伤害增加%
    --	35084 组队进攻伤害增加%

    local effectNumla = leftBattleEffect:GetValue(35065)
    local tempDatala = reasonList[GameEffectReason.Hero]
    if tempDatala~=nil then
        oneData.leftNum = oneData.leftNum +effectNumla
        tempDatala.leftData.totalNum = tempDatala.leftData.totalNum + effectNumla
    end
    local effectNumlb = leftBattleEffect:GetValue(35100)
    local tempDatalb = reasonList[GameEffectReason.Hero]
    if tempDatalb~=nil then
        oneData.leftNum = oneData.leftNum +effectNumlb
        tempDatalb.leftData.totalNum = tempDatalb.leftData.totalNum + effectNumlb
    end
    local effectNumra = rightBattleEffect:GetValue(35065)
    local tempDatara = reasonList[GameEffectReason.Hero]
    if tempDatara~=nil then
        oneData.rightNum = oneData.rightNum +effectNumra
        tempDatara.rightData.totalNum = tempDatara.rightData.totalNum + effectNumra
    end
    local effectNumrb = rightBattleEffect:GetValue(35100)
    local tempDatarb = reasonList[GameEffectReason.Hero]
    if tempDatarb~=nil then
        oneData.rightNum = oneData.rightNum +effectNumrb
        tempDatarb.rightData.totalNum = tempDatarb.rightData.totalNum + effectNumrb
    end
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.battleType == BattleType.RallyFormation then
            local effectNumlc = leftBattleEffect:GetValue(35090)
            local tempDatalc = reasonList[GameEffectReason.Hero]
            if tempDatalc~=nil then
                oneData.leftNum = oneData.leftNum +effectNumlc
                tempDatalc.leftData.totalNum = tempDatalc.leftData.totalNum + effectNumlc
            end
        end

        if rightFightData.battleType == BattleType.RallyFormation then
            local effectNumrc = rightBattleEffect:GetValue(35090)
            local tempDatarc = reasonList[GameEffectReason.Hero]
            if tempDatarc~=nil then
                oneData.rightNum = oneData.rightNum +effectNumrc
                tempDatarc.rightData.totalNum = tempDatarc.rightData.totalNum + effectNumrc
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetNormalHurtDecData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "163147"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.NormalHurtDec
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	35064 所有伤害增加%
    --	35104 技能伤害增加%
    --	35084 组队进攻伤害增加%

    local effectNumla = leftBattleEffect:GetValue(35065)
    local tempDatala = reasonList[GameEffectReason.Hero]
    if tempDatala~=nil then
        oneData.leftNum = oneData.leftNum +effectNumla
        tempDatala.leftData.totalNum = tempDatala.leftData.totalNum + effectNumla
    end
    local effectNumlb = leftBattleEffect:GetValue(35099)
    local tempDatalb = reasonList[GameEffectReason.Hero]
    if tempDatalb~=nil then
        oneData.leftNum = oneData.leftNum +effectNumlb
        tempDatalb.leftData.totalNum = tempDatalb.leftData.totalNum + effectNumlb
    end
    local effectNumra = rightBattleEffect:GetValue(35065)
    local tempDatara = reasonList[GameEffectReason.Hero]
    if tempDatara~=nil then
        oneData.rightNum = oneData.rightNum +effectNumra
        tempDatara.rightData.totalNum = tempDatara.rightData.totalNum + effectNumra
    end
    local effectNumrb = rightBattleEffect:GetValue(35099)
    local tempDatarb = reasonList[GameEffectReason.Hero]
    if tempDatarb~=nil then
        oneData.rightNum = oneData.rightNum +effectNumrb
        tempDatarb.rightData.totalNum = tempDatarb.rightData.totalNum + effectNumrb
    end
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.battleType == BattleType.RallyFormation then
            local effectNumlc = leftBattleEffect:GetValue(35090)
            local tempDatalc = reasonList[GameEffectReason.Hero]
            if tempDatalc~=nil then
                oneData.leftNum = oneData.leftNum +effectNumlc
                tempDatalc.leftData.totalNum = tempDatalc.leftData.totalNum + effectNumlc
            end
        end

        if rightFightData.battleType == BattleType.RallyFormation then
            local effectNumrc = rightBattleEffect:GetValue(35090)
            local tempDatarc = reasonList[GameEffectReason.Hero]
            if tempDatarc~=nil then
                oneData.rightNum = oneData.rightNum +effectNumrc
                tempDatarc.rightData.totalNum = tempDatarc.rightData.totalNum + effectNumrc
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetBackHurtDecData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "163148"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.BackHurtDec
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	35064 所有伤害增加%
    --	35104 技能伤害增加%
    --	35084 组队进攻伤害增加%

    local effectNumla = leftBattleEffect:GetValue(35065)
    local tempDatala = reasonList[GameEffectReason.Hero]
    if tempDatala~=nil then
        oneData.leftNum = oneData.leftNum +effectNumla
        tempDatala.leftData.totalNum = tempDatala.leftData.totalNum + effectNumla
    end
    local effectNumlb = leftBattleEffect:GetValue(35101)
    local tempDatalb = reasonList[GameEffectReason.Hero]
    if tempDatalb~=nil then
        oneData.leftNum = oneData.leftNum +effectNumlb
        tempDatalb.leftData.totalNum = tempDatalb.leftData.totalNum + effectNumlb
    end
    local effectNumra = rightBattleEffect:GetValue(35065)
    local tempDatara = reasonList[GameEffectReason.Hero]
    if tempDatara~=nil then
        oneData.rightNum = oneData.rightNum +effectNumra
        tempDatara.rightData.totalNum = tempDatara.rightData.totalNum + effectNumra
    end
    local effectNumrb = rightBattleEffect:GetValue(35101)
    local tempDatarb = reasonList[GameEffectReason.Hero]
    if tempDatarb~=nil then
        oneData.rightNum = oneData.rightNum +effectNumrb
        tempDatarb.rightData.totalNum = tempDatarb.rightData.totalNum + effectNumrb
    end
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.battleType == BattleType.RallyFormation then
            local effectNumlc = leftBattleEffect:GetValue(35090)
            local tempDatalc = reasonList[GameEffectReason.Hero]
            if tempDatalc~=nil then
                oneData.leftNum = oneData.leftNum +effectNumlc
                tempDatalc.leftData.totalNum = tempDatalc.leftData.totalNum + effectNumlc
            end
        end

        if rightFightData.battleType == BattleType.RallyFormation then
            local effectNumrc = rightBattleEffect:GetValue(35090)
            local tempDatarc = reasonList[GameEffectReason.Hero]
            if tempDatarc~=nil then
                oneData.rightNum = oneData.rightNum +effectNumrc
                tempDatarc.rightData.totalNum = tempDatarc.rightData.totalNum + effectNumrc
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetCurveData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local oneData = {}
    oneData.dialogId = "163104"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.Curve
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	35064 所有伤害增加%
    --	35104 技能伤害增加%
    --	35084 组队进攻伤害增加%

    local effectNumla = 0
    local effectNumra = 0
    if leftBattleEffect~=nil then
        effectNumla = leftBattleEffect:GetValue(35114)
    end
    if rightBattleEffect~=nil then
        effectNumra = rightBattleEffect:GetValue(35114)
    end

    local tempDatala = reasonList[GameEffectReason.Hero]
    if tempDatala~=nil then
        oneData.leftNum = oneData.leftNum +effectNumla
        tempDatala.leftData.totalNum = tempDatala.leftData.totalNum + effectNumla
    end
    local tempDatara = reasonList[GameEffectReason.Hero]
    if tempDatara~=nil then
        oneData.rightNum = oneData.rightNum +effectNumra
        tempDatara.rightData.totalNum = tempDatara.rightData.totalNum + effectNumra
    end
    oneData.reasonList = reasonList
    return oneData
end
local function SetReasonShowList(self,effectId,dialog,reasonList,LeftData,RightData,leftPercent,rightPercent)

    if LeftData~=nil then
        for k,v in pairs(LeftData.dataReason) do
            local tempData = reasonList[k]
            if tempData~=nil then
                tempData.leftData.totalNum = tempData.leftData.totalNum+(v*leftPercent)
                local effectOneData = {}
                effectOneData.effectId = effectId
                effectOneData.dialog = dialog
                effectOneData.addNum = (v*leftPercent)
                table.insert(tempData.leftData.totalReason,effectOneData)
            end
        end
    end
    if RightData~=nil then
        if RightData.battleType == BattleType.Monster or RightData.battleType == BattleType.ACT_BOSS or RightData.battleType == BattleType.Boss or RightData.battleType == BattleType.Explore  or RightData.battleType == BattleType.PUZZLE_BOSS or RightData.battleType == BattleType.CHALLENGE_BOSS or RightData.battleType == BattleType.BLACK_KNIGHT then
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                tempData.rightData.totalNum = tempData.rightData.totalNum + (RightData.totalNum*rightPercent)
                local effectOneData = {}
                effectOneData.effectId = effectId
                effectOneData.dialog = dialog
                effectOneData.addNum = (RightData.totalNum*rightPercent)
                table.insert(tempData.rightData.totalReason,effectOneData)
            end
        else
            for k,v in pairs(RightData.dataReason) do
                local tempData = reasonList[k]
                if tempData~=nil then
                    tempData.rightData.totalNum = tempData.rightData.totalNum + (v*rightPercent)
                    local effectOneData = {}
                    effectOneData.effectId = effectId
                    effectOneData.dialog = dialog
                    effectOneData.addNum = v*rightPercent
                    table.insert(tempData.rightData.totalReason,effectOneData)
                end
            end
        end
    end

end
local function GetEffectDataByEffectId(self,effectId,battleEffect,FightData,uuid)
    local oneData = {}
    oneData.totalNum = 0
    local dataReason = {}
    oneData.battleType = FightData.battleType
    if battleEffect~=nil then
        oneData.totalNum = battleEffect:GetValue(effectId)
        local tempNum = battleEffect:GetValue(effectId)
        local reason = battleEffect:GetReasonList(effectId)
        for k,v in pairs(reason) do
            local num = v
            if num>0 then
                dataReason[k] = num
                tempNum = tempNum-num
            end
        end
        if tempNum>0 then
            if FightData~=nil and FightData.unitData~=nil then
                local buffList = FightData.unitData:GetBuffIdListByEffectId(effectId,uuid)
                for k,v in pairs(buffList) do
                    local type2 = GetTableData(TableName.StatusTab,k, "type2")
                    if type2 ==22 or type2 == 21 then --咕噜buff
                        dataReason[GameEffectReason.Status] = v
                        tempNum = tempNum-v
                    elseif type2 == 26 then
                        dataReason[GameEffectReason.Revenge] = v
                        tempNum = tempNum-v
                    end
                end
            end
        end
        if tempNum>0 then
            Logger.Log("extraAdd:"..effectId)
            Logger.Log("extraAddNum:"..tempNum)
            dataReason[GameEffectReason.ExtraAdd] = tempNum
        end
    end

    oneData.dataReason = dataReason
    return oneData
end
local function GetHeroRestraintValue(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,isAttack)
    local campRestraintLeft = 0
    local campRestraintRight = 0
    if leftFightData~=nil and rightFightData~=nil and leftFightData.unitData~=nil and rightFightData.unitData~=nil then
        local leftHeroes = leftFightData.unitData:GetPlayerHeroes()
        local rightHeroes = rightFightData.unitData:GetPlayerHeroes()
        local leftEffectList ={}
        local rightEffectList = {}
        for k,v in pairs(CheckHeroRestraintEffectList) do
            local leftValue = 0
            local rightValue = 0
            if leftBattleEffect~=nil then
                leftValue = leftBattleEffect:GetValue(v)
            end
            if rightBattleEffect~=nil then
                rightValue = rightBattleEffect:GetValue(v)
            end
            if leftValue>0 then
                local oneData = {}
                oneData.effectId = v
                oneData.value = leftValue
                table.insert(leftEffectList,oneData)
            end
            if rightValue>0 then
                local oneData = {}
                oneData.effectId = v
                oneData.value = rightValue
                table.insert(rightEffectList,oneData)
            end
        end
        return MarchUtil.GetBaseHeroRestraintValue(table.values(leftHeroes),table.values(rightHeroes),leftEffectList,rightEffectList,isAttack)
    end
end

local function GetHeroCampAdd(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid)
    local leftCampAdd = 0
    local rightCampAdd = 0
    local leftEffectList ={}
    local rightEffectList = {}
    for k,v in pairs(CheckHeroCampAddEffectList) do
        local leftValue = 0
        local rightValue = 0
        if leftBattleEffect~=nil then
            leftValue = leftBattleEffect:GetValue(v)
        end
        if rightBattleEffect~=nil then
            rightValue = rightBattleEffect:GetValue(v)
        end
        if leftValue>0 then
            local oneData = {}
            oneData.effectId = v
            oneData.value = leftValue
            table.insert(leftEffectList,oneData)
        end
        if rightValue>0 then
            local oneData = {}
            oneData.effectId = v
            oneData.value = rightValue
            table.insert(rightEffectList,oneData)
        end
    end
    if leftFightData~=nil and leftFightData.unitData~=nil then
        local leftHeroes = leftFightData.unitData:GetPlayerHeroes()
        local leftHeroKey = table.values(leftHeroes)
        leftCampAdd = MarchUtil.GetCampBonusExtraVal(leftHeroKey,leftEffectList)
    end
    if rightFightData~=nil and rightFightData.unitData~=nil then
        local rightHeroes = rightFightData.unitData:GetPlayerHeroes()
        local rightHeroKey = table.values(rightHeroes)
        rightCampAdd = MarchUtil.GetCampBonusExtraVal(rightHeroKey,rightEffectList)
    end
    return leftCampAdd ,rightCampAdd
end

local function GetHeroAttackData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)
    local oneData = {}
    oneData.dialogId = "220206"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.HeroAttack
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        tempData.sortIndex = sortList[v]
        tempData.index = v
        reasonList[v] = tempData
    end
    --	英雄等级
    --	英雄进阶
    --	英雄军阶
    --	英雄技能
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.unitData~=nil then
            local heroes = leftFightData.unitData:GetPlayerHeroes()
            local atkInLevel = 0
            local atkInQuality = 0
            local atkInRarity = 0
            local atkInHeroSkill = 0
            local atkRest = 0
            local heroReasonList = {}
            for k,v in pairs(heroes) do
                local level = v["heroLevel"]
                local heroId = v["heroId"]
                local rankLv = v["rankLv"] or 0
                local stage = v["stage"] or 0
                local quality = v["heroQuality"] or 0
                local maxLevel = v["maxLevel"] or 0
                local beyondTimes = HeroUtils.GetBeyondTimesByLevel(maxLevel)
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
                local curMilitaryRankId = HeroUtils.GetRankIdByLvAndStage(heroId, rankLv, stage)
                local qualityAddAttack =  config['hero_quality_attr_attack'][math.min(#config['hero_quality_attr_attack'], quality)]
                --local starAddAttack =  config['hero_star_attack'][math.min(#config['hero_star_attack'], quality)]
                local rarityAddAtt = 0
                local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
                if template ~= nil then
                    rarityAddAtt = template:GetAtk(config['rarity'])
                end

                local levelAttack =  config['base_attack'] + config['attr_attack'] *rarityAddAtt + config['special_attr_attack'] * beyondTimes
                local rankAtk = 0
                local strArr = GetTableData(TableName.HeroMilitaryRank, curMilitaryRankId, 'atk')
                if #strArr>0 then
                    rankAtk  = tonumber(strArr[config['rarity']])
                    if rankAtk==nil then
                        rankAtk = 0
                    end
                end
                atkInLevel = atkInLevel+levelAttack
                atkInQuality = atkInQuality + qualityAddAttack
                atkInRarity = atkInRarity+ rankAtk
                if leftBattleEffect~=nil then
                    local camp = HeroUtils.GetCamp(v)
                    local troopAddPercentId = HeroUtils.GetTroopExtraAtkAddByCamp(camp)
                    local addTroopNum =leftBattleEffect:GetValue(troopAddPercentId)
                    atkInHeroSkill = atkInHeroSkill+addTroopNum*100
                    local realLevelAttack = levelAttack
                    local realQualityAttack = qualityAddAttack
                    local realRankAtk = rankAtk
                    local atkAddPercentData = self:GetEffectDataByEffectId(EffectDefine.APS_BATTLE_HERO_TOTAL_ATK_PERCENT_INCR,leftBattleEffect,leftFightData,leftUuid)
                    if atkAddPercentData~=nil then
                        local reasonDic = atkAddPercentData.dataReason
                        for a,b in pairs(reasonDic) do
                            local addNum = b*(realLevelAttack+realQualityAttack+realRankAtk)/100
                            if heroReasonList[a] ==nil then
                                heroReasonList[a] = 0
                            end
                            heroReasonList[a] = heroReasonList[a]+addNum
                        end
                    end
                    local effectId = HeroUtils.GetExtraAtkByCamp(camp)
                    local aLeftData = self:GetEffectDataByEffectId(effectId,leftBattleEffect,leftFightData,leftUuid)
                    if aLeftData ~=nil then
                        local reasonDic = aLeftData.dataReason
                        for a,b in pairs(reasonDic) do
                            if heroReasonList[a] ==nil then
                                heroReasonList[a] = 0
                            end
                            heroReasonList[a] = heroReasonList[a]+b
                        end
                    end
                    if leftHeroBattleEffect~=nil then
                        local heroAddEffect = leftHeroBattleEffect:GetValue(heroId)
                        if heroAddEffect~=nil then
                            local atkHeroAddPercentData = self:GetEffectDataByEffectId(EffectDefine.APS_BATTLE_HERO_TOTAL_ATK_PERCENT_INCR,heroAddEffect,leftFightData,leftUuid)
                            if atkHeroAddPercentData ~=nil then
                                local reasonDic = atkHeroAddPercentData.dataReason
                                for a,b in pairs(reasonDic) do
                                    local addNum = b*(realLevelAttack+realQualityAttack+realRankAtk)/100
                                    if heroReasonList[GameEffectReason.HERO_PLUGIN] ==nil then
                                        heroReasonList[GameEffectReason.HERO_PLUGIN] = 0
                                    end
                                    heroReasonList[GameEffectReason.HERO_PLUGIN] = heroReasonList[GameEffectReason.HERO_PLUGIN]+addNum
                                end
                            end
                            local aHeroLeftData = self:GetEffectDataByEffectId(effectId,heroAddEffect,leftFightData,leftUuid)
                            if aHeroLeftData ~=nil then
                                local reasonDic = aHeroLeftData.dataReason
                                for a,b in pairs(reasonDic) do
                                    if heroReasonList[GameEffectReason.HERO_PLUGIN] ==nil then
                                        heroReasonList[GameEffectReason.HERO_PLUGIN] = 0
                                    end
                                    heroReasonList[GameEffectReason.HERO_PLUGIN] = heroReasonList[GameEffectReason.HERO_PLUGIN]+b
                                end
                            end
                        end
                    end
                    local extraNum = 0
                    atkRest = atkRest+extraNum
                end
            end
            local atkPluginAddData = self:GetEffectDataByEffectId(30331,leftBattleEffect,leftFightData,leftUuid)
            if atkPluginAddData ~=nil then
                local reasonDic = atkPluginAddData.dataReason
                for a,b in pairs(reasonDic) do
                    if heroReasonList[a] ==nil then
                        heroReasonList[a] = 0
                    end
                    heroReasonList[a] = heroReasonList[a]+b
                end
            end
            oneData.leftNum  =oneData.leftNum + atkInLevel + atkInQuality+atkInRarity+atkRest+atkInHeroSkill
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                tempData.leftData.totalNum = tempData.leftData.totalNum + atkInLevel + atkInQuality+atkInRarity+atkInHeroSkill
                local levelEffectOneData = {}
                levelEffectOneData.effectId = 0
                levelEffectOneData.dialog = "163153"
                levelEffectOneData.addNum = atkInLevel
                table.insert(tempData.leftData.totalReason,levelEffectOneData)
                local qualityEffectOneData = {}
                qualityEffectOneData.effectId = 0
                qualityEffectOneData.dialog = "129211"
                qualityEffectOneData.addNum = atkInQuality
                table.insert(tempData.leftData.totalReason,qualityEffectOneData)
                local rankEffectOneData = {}
                rankEffectOneData.effectId = 0
                rankEffectOneData.dialog = "163154"
                rankEffectOneData.addNum = atkInRarity
                table.insert(tempData.leftData.totalReason,rankEffectOneData)
                local skillEffectOneData = {}
                skillEffectOneData.effectId = 0
                skillEffectOneData.dialog = "163152"
                skillEffectOneData.addNum = atkInHeroSkill
                table.insert(tempData.leftData.totalReason,skillEffectOneData)
            end
            local extraData = reasonList[GameEffectReason.ExtraAdd]
            if extraData~=nil then
                if atkRest>0 then
                    extraData.leftData.totalNum = extraData.leftData.totalNum + atkRest
                    local campEffectOneData = {}
                    campEffectOneData.effectId = 0
                    campEffectOneData.dialog = "163420"
                    campEffectOneData.addNum = atkRest
                    table.insert(extraData.leftData.totalReason,campEffectOneData)
                end
            end
            for k,v in pairs(heroReasonList) do
                if v>0 then
                    if reasonList[k]~=nil then
                        local data = reasonList[k]
                        local num = v
                        oneData.leftNum  =oneData.leftNum + num
                        data.leftData.totalNum = data.leftData.totalNum+num
                        local campOneData = {}
                        campOneData.effectId = 0
                        campOneData.dialog = "220206"
                        campOneData.addNum = v
                        table.insert(data.leftData.totalReason,campOneData)
                    end
                end
            end
        end
        if rightFightData.unitData~=nil then
            local heroes = rightFightData.unitData:GetPlayerHeroes()
            local atkInLevel = 0
            local atkInQuality = 0
            local atkInRarity = 0
            local atkRest = 0
            local atkInHeroSkill = 0
            local heroReasonList = {}
            for k,v in pairs(heroes) do
                local level = v["heroLevel"]
                local heroId = v["heroId"]
                local rankLv = v["rankLv"] or 0
                local stage = v["stage"] or 0
                local quality = v["heroQuality"] or 0
                local maxLevel = v["maxLevel"] or 0
                local beyondTimes = HeroUtils.GetBeyondTimesByLevel(maxLevel)
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
                local curMilitaryRankId = HeroUtils.GetRankIdByLvAndStage(heroId, rankLv, stage)
                local qualityAddAttack =  config['hero_quality_attr_attack'][math.min(#config['hero_quality_attr_attack'], quality)]
                --local starAddAttack =  config['hero_star_attack'][math.min(#config['hero_star_attack'], quality)]
                local rarityAddAtt = 0
                local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
                if template ~= nil then
                    rarityAddAtt = template:GetAtk(config['rarity'])
                end

                local levelAttack =  config['base_attack'] + config['attr_attack'] * rarityAddAtt + config['special_attr_attack'] * beyondTimes
                local rankAtk = 0
                local strArr = GetTableData(TableName.HeroMilitaryRank, curMilitaryRankId, 'atk')
                if #strArr>0 then
                    rankAtk  = tonumber(strArr[config['rarity']])
                    if rankAtk==nil then
                        rankAtk = 0
                    end
                end
                atkInLevel = atkInLevel+levelAttack
                atkInQuality = atkInQuality + qualityAddAttack
                atkInRarity = atkInRarity+ rankAtk
                if rightBattleEffect~=nil then
                    local camp = HeroUtils.GetCamp(v)
                    local troopAddPercentId = HeroUtils.GetTroopExtraAtkAddByCamp(camp)
                    local addTroopNum =rightBattleEffect:GetValue(troopAddPercentId)
                    atkInHeroSkill = atkInHeroSkill+addTroopNum*100
                    local realLevelAttack = levelAttack
                    local realQualityAttack = qualityAddAttack
                    local realRankAtk = rankAtk
                    local atkAddPercentData = self:GetEffectDataByEffectId(EffectDefine.APS_BATTLE_HERO_TOTAL_ATK_PERCENT_INCR,rightBattleEffect,rightFightData,rightUuid)
                    if atkAddPercentData~=nil then
                        local reasonDic = atkAddPercentData.dataReason
                        for a,b in pairs(reasonDic) do
                            local addNum = b*(realLevelAttack+realQualityAttack+realRankAtk)/100
                            if heroReasonList[a] ==nil then
                                heroReasonList[a] = 0
                            end
                            heroReasonList[a] = heroReasonList[a]+addNum
                        end
                    end
                    local effectId = HeroUtils.GetExtraAtkByCamp(camp)
                    local aRightData = self:GetEffectDataByEffectId(effectId,rightBattleEffect,rightFightData,rightUuid)
                    if aRightData ~=nil then
                        local reasonDic = aRightData.dataReason
                        for a,b in pairs(reasonDic) do
                            if heroReasonList[a] ==nil then
                                heroReasonList[a] = 0
                            end
                            heroReasonList[a] = heroReasonList[a]+b
                        end
                    end
                    if rightHeroBattleEffect~=nil then
                        local heroAddEffect = rightHeroBattleEffect:GetValue(heroId)
                        if heroAddEffect~=nil then
                            local atkHeroAddPercentData = self:GetEffectDataByEffectId(EffectDefine.APS_BATTLE_HERO_TOTAL_ATK_PERCENT_INCR,heroAddEffect,rightFightData,rightUuid)
                            if atkHeroAddPercentData ~=nil then
                                local reasonDic = atkHeroAddPercentData.dataReason
                                for a,b in pairs(reasonDic) do
                                    local addNum = b*(realLevelAttack+realQualityAttack+realRankAtk)/100
                                    if heroReasonList[GameEffectReason.HERO_PLUGIN] ==nil then
                                        heroReasonList[GameEffectReason.HERO_PLUGIN] = 0
                                    end
                                    heroReasonList[GameEffectReason.HERO_PLUGIN] = heroReasonList[GameEffectReason.HERO_PLUGIN]+addNum
                                end
                            end
                            local aHeroRightData = self:GetEffectDataByEffectId(effectId,heroAddEffect,rightFightData,rightFightData)
                            if aHeroRightData ~=nil then
                                local reasonDic = aHeroRightData.dataReason
                                for a,b in pairs(reasonDic) do
                                    if heroReasonList[GameEffectReason.HERO_PLUGIN] ==nil then
                                        heroReasonList[GameEffectReason.HERO_PLUGIN] = 0
                                    end
                                    heroReasonList[GameEffectReason.HERO_PLUGIN] = heroReasonList[GameEffectReason.HERO_PLUGIN]+b
                                end
                            end
                        end
                    end
                    local extraNum = 0
                    atkRest = atkRest+extraNum
                end
            end
            local atkPluginAddData = self:GetEffectDataByEffectId(30331,rightBattleEffect,rightFightData,rightUuid)
            if atkPluginAddData ~=nil then
                local reasonDic = atkPluginAddData.dataReason
                for a,b in pairs(reasonDic) do
                    if heroReasonList[a] ==nil then
                        heroReasonList[a] = 0
                    end
                    heroReasonList[a] = heroReasonList[a]+b
                end
            end
            oneData.rightNum  =oneData.rightNum + atkInLevel + atkInQuality+atkInRarity+atkRest+atkInHeroSkill
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                tempData.rightData.totalNum = tempData.rightData.totalNum + atkInLevel + atkInQuality+atkInRarity+atkInHeroSkill
                local levelEffectOneData = {}
                levelEffectOneData.effectId = 0
                levelEffectOneData.dialog = "163153"
                levelEffectOneData.addNum = atkInLevel
                table.insert(tempData.rightData.totalReason,levelEffectOneData)
                local qualityEffectOneData = {}
                qualityEffectOneData.effectId = 0
                qualityEffectOneData.dialog = "129211"
                qualityEffectOneData.addNum = atkInQuality
                table.insert(tempData.rightData.totalReason,qualityEffectOneData)
                local rankEffectOneData = {}
                rankEffectOneData.effectId = 0
                rankEffectOneData.dialog = "163154"
                rankEffectOneData.addNum = atkInRarity
                table.insert(tempData.rightData.totalReason,rankEffectOneData)
                local skillEffectOneData = {}
                skillEffectOneData.effectId = 0
                skillEffectOneData.dialog = "163152"
                skillEffectOneData.addNum = atkInHeroSkill
                table.insert(tempData.rightData.totalReason,skillEffectOneData)
            end
            local extraData = reasonList[GameEffectReason.ExtraAdd]
            if extraData~=nil then
                if atkRest>0 then
                    extraData.rightData.totalNum = extraData.rightData.totalNum + atkRest
                    local campEffectOneData = {}
                    campEffectOneData.effectId = 0
                    campEffectOneData.dialog = "163420"
                    campEffectOneData.addNum = atkRest
                    table.insert(extraData.rightData.totalReason,campEffectOneData)
                end
            end
            for k,v in pairs(heroReasonList) do
                if v>0 then
                    if reasonList[k]~=nil then
                        local data = reasonList[k]
                        local num = v
                        oneData.rightNum  =oneData.rightNum + num
                        data.rightData.totalNum = data.rightData.totalNum+num
                        local campOneData = {}
                        campOneData.effectId = 0
                        campOneData.dialog = "220206"
                        campOneData.addNum = v
                        table.insert(data.rightData.totalReason,campOneData)
                    end
                end
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end
local function GetHeroDefenceData(self,leftFightData,rightFightData,leftBattleEffect,rightBattleEffect,leftUuid,rightUuid,leftHeroBattleEffect,rightHeroBattleEffect)
    local oneData = {}
    oneData.dialogId = "220207"
    oneData.leftNum = 0
    oneData.rightNum = 0
    oneData.showType = BattleSubTitleShowType.HeroDefence
    local reasonList = {}
    for k,v in pairs(needCheckList) do
        local tempData = {}
        tempData.leftData ={}
        tempData.leftData.totalNum = 0
        tempData.leftData.totalReason = {}
        tempData.rightData = {}
        tempData.rightData.totalNum =0
        tempData.rightData.totalReason = {}
        reasonList[v] = tempData
    end
    --	英雄等级
    --	英雄进阶
    --	英雄军阶
    --	英雄技能
    if leftFightData~=nil and rightFightData~=nil then
        if leftFightData.unitData~=nil then
            local heroes = leftFightData.unitData:GetPlayerHeroes()
            local defInLevel = 0
            local defInQuality = 0
            local defInRarity = 0
            local defInHeroSkill = 0
            local defRest = 0
            local heroReasonList = {}
            for k,v in pairs(heroes) do
                local level = v["heroLevel"]
                local heroId = v["heroId"]
                local rankLv = v["rankLv"] or 0
                local stage = v["stage"] or 0
                local quality = v["heroQuality"] or 0
                local maxLevel = v["maxLevel"] or 0
                local beyondTimes = HeroUtils.GetBeyondTimesByLevel(maxLevel)
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
                local curMilitaryRankId = HeroUtils.GetRankIdByLvAndStage(heroId, rankLv, stage)
                local qualityAddDefence = config['hero_quality_attr_defens'][math.min(#config['hero_quality_attr_defens'], quality)]
                --local starAddDefence = config['hero_star_defens'][math.min(#config['hero_star_defens'], quality)]

                local rarityAddDef = 0
                local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
                if template ~= nil then
                    rarityAddDef = template:GetDef(config['rarity'])
                end

                local levelDefence = config['base_defens'] + config['attr_defens'] * rarityAddDef+ config['special_attr_defens'] * beyondTimes
                local rankDef = 0
                local strArr = GetTableData(TableName.HeroMilitaryRank, curMilitaryRankId, 'def')
                if #strArr>0 then
                    rankDef  = tonumber(strArr[config['rarity']])
                    if rankDef==nil then
                        rankDef = 0
                    end
                end
                defInLevel = defInLevel+levelDefence
                defInQuality = defInQuality + qualityAddDefence
                defInRarity = defInRarity+ rankDef
                if leftBattleEffect~=nil then
                    local camp = HeroUtils.GetCamp(v)
                    local troopAddPercentId = HeroUtils.GetTroopExtraDefAddByCamp(camp)
                    local addTroopNum =leftBattleEffect:GetValue(troopAddPercentId)
                    defInHeroSkill = defInHeroSkill +addTroopNum*100
                    local realLevelDefence = levelDefence
                    local realQualityDefence = qualityAddDefence
                    local realRankDef = rankDef
                    local defAddPercentData = self:GetEffectDataByEffectId(EffectDefine.APS_BATTLE_HERO_TOTAL_DEF_PERCENT_INCR,leftBattleEffect,leftFightData,leftUuid)
                    if defAddPercentData~=nil then
                        local reasonDic = defAddPercentData.dataReason
                        for a,b in pairs(reasonDic) do
                            local addNum = b*(realLevelDefence+realQualityDefence+realRankDef)/100
                            if heroReasonList[a] ==nil then
                                heroReasonList[a] = 0
                            end
                            heroReasonList[a] = heroReasonList[a]+addNum
                        end
                    end
                    local effectId = HeroUtils.GetExtraDefByCamp(camp)
                    local aLeftData = self:GetEffectDataByEffectId(effectId,leftBattleEffect,leftFightData,leftUuid)
                    if aLeftData ~=nil then
                        local reasonDic = aLeftData.dataReason
                        for a,b in pairs(reasonDic) do
                            if heroReasonList[a] ==nil then
                                heroReasonList[a] = 0
                            end
                            heroReasonList[a] = heroReasonList[a]+b
                        end
                    end
                    if leftHeroBattleEffect~=nil then
                        local heroAddEffect = leftHeroBattleEffect:GetValue(heroId)
                        if heroAddEffect~=nil then
                            local atkHeroAddPercentData = self:GetEffectDataByEffectId(EffectDefine.APS_BATTLE_HERO_TOTAL_DEF_PERCENT_INCR,heroAddEffect,leftFightData,leftUuid)
                            if atkHeroAddPercentData ~=nil then
                                local reasonDic = atkHeroAddPercentData.dataReason
                                for a,b in pairs(reasonDic) do
                                    local addNum = b*(realLevelDefence+realQualityDefence+realRankDef)/100
                                    if heroReasonList[GameEffectReason.HERO_PLUGIN] ==nil then
                                        heroReasonList[GameEffectReason.HERO_PLUGIN] = 0
                                    end
                                    heroReasonList[GameEffectReason.HERO_PLUGIN] = heroReasonList[GameEffectReason.HERO_PLUGIN]+addNum
                                end
                            end
                            local aHeroLeftData = self:GetEffectDataByEffectId(effectId,heroAddEffect,leftFightData,leftUuid)
                            if aHeroLeftData ~=nil then
                                local reasonDic = aHeroLeftData.dataReason
                                for a,b in pairs(reasonDic) do
                                    if heroReasonList[GameEffectReason.HERO_PLUGIN] ==nil then
                                        heroReasonList[GameEffectReason.HERO_PLUGIN] = 0
                                    end
                                    heroReasonList[GameEffectReason.HERO_PLUGIN] = heroReasonList[GameEffectReason.HERO_PLUGIN]+b
                                end
                            end
                        end
                    end
                    local extraNum = 0
                    defRest = defRest+extraNum
                end
            end
            local defPluginAddData = self:GetEffectDataByEffectId(30332,leftBattleEffect,leftFightData,leftUuid)
            if defPluginAddData ~=nil then
                local reasonDic = defPluginAddData.dataReason
                for a,b in pairs(reasonDic) do
                    if heroReasonList[a] ==nil then
                        heroReasonList[a] = 0
                    end
                    heroReasonList[a] = heroReasonList[a]+b
                end
            end
            oneData.leftNum  =oneData.leftNum + defInLevel + defInQuality+defInRarity+defRest+defInHeroSkill
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                tempData.leftData.totalNum = tempData.leftData.totalNum + defInLevel + defInQuality+defInRarity+defInHeroSkill
                local levelEffectOneData = {}
                levelEffectOneData.effectId = 0
                levelEffectOneData.dialog = "163153"
                levelEffectOneData.addNum = defInLevel
                table.insert(tempData.leftData.totalReason,levelEffectOneData)
                local qualityEffectOneData = {}
                qualityEffectOneData.effectId = 0
                qualityEffectOneData.dialog = "129211"
                qualityEffectOneData.addNum = defInQuality
                table.insert(tempData.leftData.totalReason,qualityEffectOneData)
                local rankEffectOneData = {}
                rankEffectOneData.effectId = 0
                rankEffectOneData.dialog = "163154"
                rankEffectOneData.addNum = defInRarity
                table.insert(tempData.leftData.totalReason,rankEffectOneData)
                local skillEffectOneData = {}
                skillEffectOneData.effectId = 0
                skillEffectOneData.dialog = "163152"
                skillEffectOneData.addNum = defInHeroSkill
                table.insert(tempData.leftData.totalReason,skillEffectOneData)
            end
            local extraData = reasonList[GameEffectReason.ExtraAdd]
            if extraData~=nil then
                if defRest>0 then
                    extraData.leftData.totalNum = extraData.leftData.totalNum + defRest
                    local campEffectOneData = {}
                    campEffectOneData.effectId = 0
                    campEffectOneData.dialog = "163420"
                    campEffectOneData.addNum = defRest
                    table.insert(extraData.leftData.totalReason,campEffectOneData)
                end
            end
            for k,v in pairs(heroReasonList) do
                if v>0 then
                    if reasonList[k]~=nil then
                        local data = reasonList[k]
                        local num = v
                        oneData.leftNum  =oneData.leftNum + num
                        data.leftData.totalNum = data.leftData.totalNum+num
                        local campOneData = {}
                        campOneData.effectId = 0
                        campOneData.dialog = "220207"
                        campOneData.addNum = v
                        table.insert(data.leftData.totalReason,campOneData)
                    end
                end
            end
        end
        if rightFightData.unitData~=nil then
            local heroes = rightFightData.unitData:GetPlayerHeroes()
            local defInLevel = 0
            local defInQuality = 0
            local defInRarity = 0
            local defInHeroSkill = 0
            local defRest = 0
            local heroReasonList = {}
            for k,v in pairs(heroes) do
                local level = v["heroLevel"]
                local heroId = v["heroId"]
                local rankLv = v["rankLv"] or 0
                local stage = v["stage"] or 0
                local quality = v["heroQuality"] or 0
                local beyondTimes = HeroUtils.GetBeyondTimesByLevel(level)
                local config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
                local curMilitaryRankId = HeroUtils.GetRankIdByLvAndStage(heroId, rankLv, stage)
                local qualityAddDefence = config['hero_quality_attr_defens'][math.min(#config['hero_quality_attr_defens'], quality)]
                --local starAddDefence = config['hero_star_defens'][math.min(#config['hero_star_defens'], quality)]

                local rarityAddDef = 0
                local template = DataCenter.HeroLevelUpTemplateManager:GetTemplate(level)
                if template ~= nil then
                    rarityAddDef = template:GetDef(config['rarity'])
                end

                local levelDefence = config['base_defens'] + config['attr_defens'] * rarityAddDef + config['special_attr_defens'] * beyondTimes
                local rankDef = 0
                local strArr = GetTableData(TableName.HeroMilitaryRank, curMilitaryRankId, 'def')
                if #strArr>0 then
                    rankDef  = tonumber(strArr[config['rarity']])
                    if rankDef==nil then
                        rankDef = 0
                    end
                end
                defInLevel = defInLevel+levelDefence
                defInQuality = defInQuality + qualityAddDefence
                defInRarity = defInRarity+ rankDef
                if rightBattleEffect~=nil then
                    local camp = HeroUtils.GetCamp(v)
                    local troopAddPercentId = HeroUtils.GetTroopExtraDefAddByCamp(camp)
                    local addTroopNum =rightBattleEffect:GetValue(troopAddPercentId)
                    defInHeroSkill = defInHeroSkill +addTroopNum*100
                    local realLevelDefence = levelDefence
                    local realQualityDefence = qualityAddDefence
                    local realRankDef = rankDef
                    local defAddPercentData = self:GetEffectDataByEffectId(EffectDefine.APS_BATTLE_HERO_TOTAL_DEF_PERCENT_INCR,rightBattleEffect,rightFightData,rightUuid)
                    if defAddPercentData~=nil then
                        local reasonDic = defAddPercentData.dataReason
                        for a,b in pairs(reasonDic) do
                            local addNum = b*(realLevelDefence+realQualityDefence+realRankDef)/100
                            if heroReasonList[a] ==nil then
                                heroReasonList[a] = 0
                            end
                            heroReasonList[a] = heroReasonList[a]+addNum
                        end
                    end
                    local effectId = HeroUtils.GetExtraDefByCamp(camp)
                    local aRightData = self:GetEffectDataByEffectId(effectId,rightBattleEffect,rightFightData,rightUuid)
                    if aRightData ~=nil then
                        local reasonDic = aRightData.dataReason
                        for a,b in pairs(reasonDic) do
                            if heroReasonList[a] ==nil then
                                heroReasonList[a] = 0
                            end
                            heroReasonList[a] = heroReasonList[a]+b
                        end
                    end
                    if rightHeroBattleEffect~=nil then
                        local heroAddEffect = rightHeroBattleEffect:GetValue(heroId)
                        if heroAddEffect~=nil then
                            local atkHeroAddPercentData = self:GetEffectDataByEffectId(EffectDefine.APS_BATTLE_HERO_TOTAL_DEF_PERCENT_INCR,heroAddEffect,rightFightData,rightUuid)
                            if atkHeroAddPercentData ~=nil then
                                local reasonDic = atkHeroAddPercentData.dataReason
                                for a,b in pairs(reasonDic) do
                                    local addNum = b*(realLevelDefence+realQualityDefence+realRankDef)/100
                                    if heroReasonList[GameEffectReason.HERO_PLUGIN] ==nil then
                                        heroReasonList[GameEffectReason.HERO_PLUGIN] = 0
                                    end
                                    heroReasonList[GameEffectReason.HERO_PLUGIN] = heroReasonList[GameEffectReason.HERO_PLUGIN]+addNum
                                end
                            end
                            local aHeroLeftData = self:GetEffectDataByEffectId(effectId,heroAddEffect,rightFightData,rightUuid)
                            if aHeroLeftData ~=nil then
                                local reasonDic = aHeroLeftData.dataReason
                                for a,b in pairs(reasonDic) do
                                    if heroReasonList[GameEffectReason.HERO_PLUGIN] ==nil then
                                        heroReasonList[GameEffectReason.HERO_PLUGIN] = 0
                                    end
                                    heroReasonList[GameEffectReason.HERO_PLUGIN] = heroReasonList[GameEffectReason.HERO_PLUGIN]+b
                                end
                            end
                        end
                    end
                    local extraNum = 0
                    defRest = defRest+extraNum
                end
            end
            local defPluginAddData = self:GetEffectDataByEffectId(30332,rightBattleEffect,rightFightData,rightUuid)
            if defPluginAddData ~=nil then
                local reasonDic = defPluginAddData.dataReason
                for a,b in pairs(reasonDic) do
                    if heroReasonList[a] ==nil then
                        heroReasonList[a] = 0
                    end
                    heroReasonList[a] = heroReasonList[a]+b
                end
            end
            oneData.rightNum  =oneData.rightNum + defInLevel + defInQuality+defInRarity+defRest+defInHeroSkill
            local tempData = reasonList[GameEffectReason.Hero]
            if tempData~=nil then
                tempData.rightData.totalNum = tempData.rightData.totalNum + defInLevel + defInQuality+defInRarity+defInHeroSkill
                local levelEffectOneData = {}
                levelEffectOneData.effectId = 0
                levelEffectOneData.dialog = "163153"
                levelEffectOneData.addNum = defInLevel
                table.insert(tempData.rightData.totalReason,levelEffectOneData)
                local qualityEffectOneData = {}
                qualityEffectOneData.effectId = 0
                qualityEffectOneData.dialog = "129211"
                qualityEffectOneData.addNum = defInQuality
                table.insert(tempData.rightData.totalReason,qualityEffectOneData)
                local rankEffectOneData = {}
                rankEffectOneData.effectId = 0
                rankEffectOneData.dialog = "163154"
                rankEffectOneData.addNum = defInRarity
                table.insert(tempData.rightData.totalReason,rankEffectOneData)
                local skillEffectOneData = {}
                skillEffectOneData.effectId = 0
                skillEffectOneData.dialog = "163152"
                skillEffectOneData.addNum = defInHeroSkill
                table.insert(tempData.rightData.totalReason,skillEffectOneData)
            end
            local extraData = reasonList[GameEffectReason.ExtraAdd]
            if extraData~=nil then
                if defRest>0 then
                    extraData.rightData.totalNum = extraData.rightData.totalNum + defRest
                    local campEffectOneData = {}
                    campEffectOneData.effectId = 0
                    campEffectOneData.dialog = "163420"
                    campEffectOneData.addNum = defRest
                    table.insert(extraData.rightData.totalReason,campEffectOneData)
                end
            end
            for k,v in pairs(heroReasonList) do
                if v>0 then
                    if reasonList[k]~=nil then
                        local data = reasonList[k]
                        local num = v
                        oneData.rightNum  =oneData.rightNum + num
                        data.rightData.totalNum = data.rightData.totalNum+num
                        local campOneData = {}
                        campOneData.effectId = 0
                        campOneData.dialog = "220207"
                        campOneData.addNum = v
                        table.insert(data.rightData.totalReason,campOneData)
                    end
                end
            end
        end
    end
    oneData.reasonList = reasonList
    return oneData
end

UIMailBattleAttrDetailCtrl.CloseSelf =CloseSelf
UIMailBattleAttrDetailCtrl.Close =Close
UIMailBattleAttrDetailCtrl.GetDetailList = GetDetailList
UIMailBattleAttrDetailCtrl.GetAttackAddData = GetAttackAddData
UIMailBattleAttrDetailCtrl.GetDefenceAddData = GetDefenceAddData
UIMailBattleAttrDetailCtrl.GetHealthAddData = GetHealthAddData
UIMailBattleAttrDetailCtrl.GetMarchLimitAddData =GetMarchLimitAddData
UIMailBattleAttrDetailCtrl.GetSkillHurtAddData = GetSkillHurtAddData
UIMailBattleAttrDetailCtrl.GetNormalHurtAddData= GetNormalHurtAddData
UIMailBattleAttrDetailCtrl.GetBackHurtAddData = GetBackHurtAddData
UIMailBattleAttrDetailCtrl.GetSkillHurtDecData = GetSkillHurtDecData
UIMailBattleAttrDetailCtrl.GetNormalHurtDecData = GetNormalHurtDecData
UIMailBattleAttrDetailCtrl.GetBackHurtDecData =GetBackHurtDecData
UIMailBattleAttrDetailCtrl.GetCurveData =GetCurveData
UIMailBattleAttrDetailCtrl.SetReasonShowList =SetReasonShowList
UIMailBattleAttrDetailCtrl.GetEffectDataByEffectId =GetEffectDataByEffectId
UIMailBattleAttrDetailCtrl.GetHeroRestraintValue =GetHeroRestraintValue
UIMailBattleAttrDetailCtrl.GetHeroCampAdd =GetHeroCampAdd
UIMailBattleAttrDetailCtrl.GetHeroAttackData =GetHeroAttackData
UIMailBattleAttrDetailCtrl.GetHeroDefenceData =GetHeroDefenceData
return UIMailBattleAttrDetailCtrl