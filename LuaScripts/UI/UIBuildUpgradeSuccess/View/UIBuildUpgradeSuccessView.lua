---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/3/9 19:19
---

local UIBuildUpgradeSuccessView = BaseClass("UIBuildUpgradeSuccessView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local Resource = CS.GameEntry.Resource
local UIBuildUpgradeSuccessLine = require "UI.UIBuildUpgradeSuccess.Component.UIBuildUpgradeSuccessLine"

local title_path = "UIGarageRefitUpgrade/UICommonRewardPopUp/Panel/ImgTitleBg/TextTitle"
local next_path = "UIGarageRefitUpgrade/UICommonRewardPopUp/Panel"

local root_path = "UIGarageRefitUpgrade/Root"
local content_path = "UIGarageRefitUpgrade/Root/Content"
local pre_power_path = "UIGarageRefitUpgrade/Root/Power/LeftVal"
local current_power_path = "UIGarageRefitUpgrade/Root/Power/RightVal"
local panel_bg1_path = "UIGarageRefitUpgrade/UICommonRewardPopUp"
local panel_bg2_path = "UIGarageRefitUpgrade/PanelBg2"
local panel_bg2_bg_path = "UIGarageRefitUpgrade/PanelBg2/Root"

local posY1 = 50
local posY2 = 180

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    self:ReInit()

    local param = {}
    param.list = { ResourceType.People }
    param.uiName = UIWindowNames.UIBuildUpgradeSuccess
    param.noUseResetResource = true
    param.hideBtnList = { UIMainTopBtnType.Stamina }
    EventManager:GetInstance():Broadcast(EventId.ShowMainUIExtraResource, param)
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
    
    EventManager:GetInstance():Broadcast(EventId.HideMainUIExtraResource, UIWindowNames.UIBuildUpgradeSuccess)
end

local function ComponentDefine(self)
    self.title_text = self:AddComponent(UIText, title_path)
    
    self.next_btn = self:AddComponent(UIButton, next_path)
    self.next_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    
    --self.next1_btn = self:AddComponent(UIButton, panel_bg2_path)
    --self.next1_btn:SetOnClick(function()
    --    self.ctrl:CloseSelf()
    --end)
    self.content_go = self:AddComponent(UIBaseContainer, content_path)
    self.pre_power = self:AddComponent(UIText, pre_power_path)
    self.current_power = self:AddComponent(UIText, current_power_path)
    self.panel_bg1 = self:AddComponent(UIBaseContainer, panel_bg1_path)
    self.panel_bg2 = self:AddComponent(UIBaseContainer, panel_bg2_path)
    self.panel_bg2_bg = self:AddComponent(UIImage, panel_bg2_bg_path)
end

local function ComponentDestroy(self)
    self:ClearItems()
    if self.delayTimer ~= nil then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end

    self.title_text = nil
    self.next_btn = nil
    self.item_anim = nil
    self.content_go = nil
end

local function DataDefine(self)
    self.reqs = {}
    self.active = false
    self.levels = nil
    self.typeList = {}
    self.onClose = nil
end

local function DataDestroy(self)
    self.reqs = nil
    self.active = nil
    self.levels = nil
    self.typeList = nil
    self.onClose = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self.active = true
end

local function OnDisable(self)
    self.active = false
    base.OnDisable(self)
end

local function ReInit(self)
    self.buildingId, self.level = self:GetUserData()
    self:Show()
end

local function Show(self)
    if self.level <= 1 then
        self.ctrl:CloseSelf()
        return
    end
    local preLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(self.buildingId, self.level - 1)
    local curLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(self.buildingId, self.level)
    local buildingTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.buildingId)
    if preLevelTemplate == nil or curLevelTemplate == nil or buildingTemplate == nil then
        self.ctrl:CloseSelf()
        return
    end
    self.title_text:SetLocalText(121453, Localization:GetString(GetTableData(DataCenter.BuildTemplateManager:GetTableName(), self.buildingId + self.level,"name")))
    --self.title_text:SetText(Localization:GetString(buildingTemplate.name).." "..Localization:GetString("120062"))
    local curNums = curLevelTemplate.local_num
    local preNums = preLevelTemplate.local_num
    local maxCount = #curNums
    local diaCount = table.count(buildingTemplate.effect_local)
    if maxCount > diaCount then
        maxCount = diaCount
    end
    if maxCount == 0 then
        self.ctrl:CloseSelf()
        return
    end
    local showCount = 0
    self.pre_power:SetText(string.GetFormattedSeperatorNum(preLevelTemplate.power))
    self.current_power:SetText(string.GetFormattedSeperatorNum(curLevelTemplate.power))
    local hasChangeValue = false
    for i = 1, maxCount, 1 do
        local showParam = buildingTemplate:GetShowLocalEffect(i)
        if showParam ~= nil then
            local name = Localization:GetString(showParam[1])
            local needAdd = true
            local preValue = nil
            local curValue = nil
            if showParam[2] == EffectLocalType.Dialog then
                local val = DataCenter.BuildManager:GetEffectNumWithoutSymbolByType(curNums[i], showParam[2])
                if val == nil or val == "" then
                    needAdd = false
                end
                curValue = val
            else
                preValue = DataCenter.BuildManager:GetEffectNumWithoutSymbolByType(tonumber(preNums[i]) or 0, showParam[2])
                curValue = DataCenter.BuildManager:GetEffectNumWithoutSymbolByType(tonumber(curNums[i]) or 0, showParam[2])
                needAdd = preValue ~= curValue
            end
            if needAdd then
                hasChangeValue = true
                showCount = showCount + 1
                local req = Resource:InstantiateAsync(UIAssets.UIBuildUpgradeSuccessCell)
                req:completed('+', function()
                    if req.isError then
                        return
                    end

                    if not self.gameObject or not self.active then
                        req:Destroy()
                        return
                    end

                    local go = req.gameObject
                    go:SetActive(true)
                    go.name = "Line_" .. tostring(i)

                    local tf = go.transform
                    tf:SetParent(self.content_go.transform)
                    tf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)

                    local item = self.content_go:AddComponent(UIBuildUpgradeSuccessLine, go)
                    item:SetData(name, preValue, curValue)
                    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content_go.transform)
                    self.reqs[i] = req
                end)
            end
        end
    end
    local pos = self.content_go.transform.localPosition
    if self:NeedAutoClose() then
        self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
            UIManager:GetInstance():DestroyWindow(UIWindowNames.UITutorialAnimation)
            if self.delayTimer ~= nil then
                self.delayTimer:Stop()
                self.delayTimer = nil
            end
            self.ctrl:CloseSelf()
        end, 1.5)
        self.panel_bg1:SetActive(false)
        self.panel_bg2:SetActive(true)
        self.panel_bg2_bg.rectTransform:Set_sizeDelta(900, showCount * 46 + 20)
        self.content_go.transform.localPosition = Vector3.New(pos.x, posY2, pos.z)
    else
        self.panel_bg1:SetActive(true)
        self.panel_bg2:SetActive(false)
        self.content_go.transform.localPosition = Vector3.New(pos.x, posY1, pos.z)
    end
end

local function ClearItems(self)
    if self.content_go == nil then
        return
    end
    self.content_go:RemoveComponents(UIBuildUpgradeSuccessLine)
    for _, req in pairs(self.reqs) do
        req:Destroy()
    end
end

local function NeedAutoClose(self)
    local needMainLv = LuaEntry.DataConfig:TryGetNum("building_giftbox", "k3")
    if needMainLv < DataCenter.BuildManager.MainLv then
        return true
    end
    return false
end

UIBuildUpgradeSuccessView.OnCreate= OnCreate
UIBuildUpgradeSuccessView.OnDestroy = OnDestroy
UIBuildUpgradeSuccessView.ComponentDefine = ComponentDefine
UIBuildUpgradeSuccessView.ComponentDestroy = ComponentDestroy
UIBuildUpgradeSuccessView.DataDefine = DataDefine
UIBuildUpgradeSuccessView.DataDestroy = DataDestroy
UIBuildUpgradeSuccessView.OnEnable = OnEnable
UIBuildUpgradeSuccessView.OnDisable = OnDisable
UIBuildUpgradeSuccessView.ReInit = ReInit
UIBuildUpgradeSuccessView.ClearItems = ClearItems
UIBuildUpgradeSuccessView.Show = Show
UIBuildUpgradeSuccessView.NeedAutoClose = NeedAutoClose

return UIBuildUpgradeSuccessView