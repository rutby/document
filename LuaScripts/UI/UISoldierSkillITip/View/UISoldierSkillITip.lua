---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/5/9 20:33
---

local UISoldierSkillITip = BaseClass("UISoldierSkillITip", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local Param = DataClass("Param", ParamData)
local MinWidth  = 660

local Direction = {
    ABOVE  = 1,
    BELOW  = 2,
    LEFT   = 3,
    RIGHT  = 4,
}

local ParamData =  {
    skillId = "",
    skillLevel = 1,
    dir = Direction.ABOVE,
    pivot = 0.5,
    position = Vector2.zero,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()

    local param = self:GetUserData()
    self.param = param
    local dir = param.dir
    local pivot = param.pivot
    local rootRt = self.root.rectTransform
    local arrowRt = self.imgArrow.rectTransform

    if dir == Direction.ABOVE then
        rootRt.pivot = Vector2.New(pivot, 0)
        arrowRt.localRotation = Quaternion.Euler(0, 0, 90)
        arrowRt.anchorMin = Vector2.New(pivot, 0)
        arrowRt.anchorMax = Vector2.New(pivot, 0)
        arrowRt.anchoredPosition = Vector2.New(0, 8)
    elseif dir == Direction.BELOW then
        rootRt.pivot = Vector2.New(pivot, 1)
        arrowRt.localRotation = Quaternion.Euler(0, 0, -90)
        arrowRt.anchorMin = Vector2.New(pivot, 1)
        arrowRt.anchorMax = Vector2.New(pivot, 1)
        arrowRt.anchoredPosition = Vector2.New(0, -8)
    elseif dir == Direction.RIGHT then
        rootRt.pivot = Vector2.New(0, pivot)
        arrowRt.localRotation = Quaternion.Euler(0, 0, 0)
        arrowRt.anchorMin = Vector2.New(0, pivot)
        arrowRt.anchorMax = Vector2.New(0, pivot)
        arrowRt.anchoredPosition = Vector2.New(9, 0)
    elseif dir == Direction.LEFT then
        rootRt.pivot = Vector2.New(1, pivot)
        arrowRt.localRotation = Quaternion.Euler(0, 0, 180)
        arrowRt.anchorMin = Vector2.New(1, pivot)
        arrowRt.anchorMax = Vector2.New(1, pivot)
        arrowRt.anchoredPosition = Vector2.New(-9, 0)
    end

    local skillId, skillLevel = param.skillId, param.skillLevel
    local skillName = Localization:GetString(GetTableData(TableName.SkillTab, skillId, 'name'))
    local typeDes = GetTableData(TableName.SkillTab, skillId, 'type_des')
    local skillType = ""
    if not string.IsNullOrEmpty(typeDes) then
        skillType = Localization:GetString(typeDes)
    end
    local skillDesc, effectDesc = HeroUtils.GetSkillDescStr(skillId, skillLevel)

    self.textSkillName:SetText(skillName)
    self.textSkillType:SetText(skillType)
    self.textSkillType:SetActive(not string.IsNullOrEmpty(skillType))
    local preferredWidth = self.root.rectTransform.rect.width
    rootRt:Set_sizeDelta( math.max(MinWidth, preferredWidth), rootRt.sizeDelta.y)
    self.textSkillDesc.rectTransform:Set_sizeDelta(rootRt.sizeDelta.x - 56, 0)
    self.textSkillDesc:SetText(skillDesc)
    local descHeight = self.textSkillDesc:GetHeight()
    self.textSkillDesc.rectTransform:Set_sizeDelta(rootRt.sizeDelta.x - 56, descHeight)

    rootRt.position = param.position
    if self.sizeFitter then
        self.sizeFitter.enabled = false
        self.sizeFitter.enabled = true
    end
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(rootRt)

    local rootPreHeight = self.layoutGroup.preferredHeight
    rootRt:Set_sizeDelta( math.max(MinWidth, preferredWidth), rootPreHeight)
    self:PlayShowAnimation()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    local btnPanel = self:AddComponent(UIButton, "Panel")
    btnPanel:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))

    self.root = self:AddComponent(UIBaseContainer, "Root")
    self.sizeFitter = self.root.rectTransform:GetComponent(typeof(CS.UnityEngine.UI.ContentSizeFitter))
    self.layoutGroup = self.root.rectTransform:GetComponent(typeof(CS.UnityEngine.UI.VerticalLayoutGroup))

    self.imgArrow = self:AddComponent(UIImage, "Root/ImgArrow")

    self.textSkillName = self:AddComponent(UIText, "Root/TextSkillName")
    self.textSkillType = self:AddComponent(UIText, "Root/TextSkillType")
    self.textSkillDesc = self:AddComponent(UIText, "Root/TextSkillDesc")
end

local function ComponentDestroy(self)
    self.root = nil
    self.imgArrow = nil
    self.textSkillName = nil
    self.textSkillType = nil
    self.textSkillDesc = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self.sizeFitter.enabled = false
end

local function PlayShowAnimation(self)
    local rootRt = self.root.rectTransform
    DOTween.Kill(rootRt)
    rootRt:Set_localScale(0, 0, 0)

    local sequence = DOTween.Sequence();
    sequence:AppendInterval(0.1)
    sequence:AppendCallback(function()
    end)
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local rootH = rootRt.rect.height * scaleFactor
    local screenHeight = Screen.height
    local pos = rootRt.position
    local scale = 1
    if rootH + pos.y >= screenHeight then
        scale = (screenHeight - pos.y) / rootH
    end

    sequence:Append(rootRt:DOScale(Vector3.New(scale + 0.02, scale + 0.02, 0), 0.05))
    sequence:Append(rootRt:DOScale(Vector3.New(scale, scale, 0), 0.05))
    sequence:SetEase(CS.DG.Tweening.Ease.InOutCubic)
end

UISoldierSkillITip.Param = Param
UISoldierSkillITip.Direction = Direction

UISoldierSkillITip.OnCreate= OnCreate
UISoldierSkillITip.OnDestroy = OnDestroy
UISoldierSkillITip.OnEnable = OnEnable

UISoldierSkillITip.ComponentDefine = ComponentDefine
UISoldierSkillITip.ComponentDestroy = ComponentDestroy
UISoldierSkillITip.PlayShowAnimation = PlayShowAnimation

return UISoldierSkillITip

