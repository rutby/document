---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by w.
--- DateTime: 2022/11/30 13:00
---

local UIZombieBattleMainView = BaseClass("UIZombieBattleMainView",UIBaseView)
local base = UIBaseView
local TopStageBarCell = require "UI.UIZombieBattle.View.Cell.TopStageBarCell"
local StageUtil = require "UI.UIZombieBattle.Util.StageUtil"
local TopStageBarCellAsset = "Assets/Main/Prefabs/UI/ZombieBattle/MainUIStageCell.prefab"
local ZombieBattleHeroCell = require "UI.UIZombieBattle.Component.ZombieBattleHeroCell"
local safeArea = "SafeArea/"
local UnityRectTransform = typeof(CS.UnityEngine.RectTransform)
local Const = require("Scene.LWBattle.Const")
local UIPVEJoystickAim = require "UI.UIPVE.Component.UIPVEJoystickAim"
local Screen = CS.UnityEngine.Screen
local DEFAULT_HOLE_POSITION=Vector4.New(10,10,1,1)
local OPEN_JOYSTICK = false
--local TacticalWeaponCell = require "UI.UIZombieBattle.Component.TacticalWeaponCell"
--local TacticalWeaponSkillNodeComponent = require "UI.UIParkour.MainUI.Component.TacticalWeaponSkillNodeComponent"

local SpeedUpComp = require "UI.UIZombieBattle.Component.ZombieBattleSpeedUp"

function UIZombieBattleMainView:OnCreate()
    base.OnCreate(self)
    self.param = self:GetUserData()
    self:ComponentDefine()
    -- self:RefreshTopBar()
    self:InitWinCondition()
    self:UpdateWinConditionBar()
    if self:GetUserData().onOpen then
        self:GetUserData().onOpen()
    end
    self:InitAutoAndDouble()
end

function UIZombieBattleMainView:OnDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

function UIZombieBattleMainView:ComponentDefine()
    if CS.CommonUtils.IsDebug() then
        self.gm_win_btn = self:AddComponent(UIButton, safeArea.."GmWinBtn")
        self.GMText = self:AddComponent(UIText, safeArea.."GmWinBtn/GMText")
        self.GMText:SetText(DataCenter.LWBattleManager:GetCurBattleLogic():GetStageId())
        self.gm_win_btn:SetOnClick(function()
            DataCenter.LWBattleManager:GetCurBattleLogic():OnBattleWin()
        end)
    else
        self.transform:Find(safeArea.."GmWinBtn").gameObject:SetActive(false)
    end
    self.btns = self:AddComponent(UIBaseComponent, safeArea.."Btns")
    self.btns:SetActive(true)
    self.back_btn = self:AddComponent(UIButton, safeArea.."Btns/BackBtn")
    self.back_btn:SetOnClick(function()
        self:OnBtnHome()
    end)

    self.map_btn = self:AddComponent(UIButton, safeArea.."Map")
    self.map_btn:SetOnClick(function()
        self:OnShowMap()
    end)
    self.hangUpBtn = self:AddComponent(UIButton, safeArea.."HangUpBtn")
    self.hangUpBtn:SetOnClick(function()
        SFSNetwork.SendMessage(MsgDefines.HangUpRewardMessage,0)
    end)
    self.autoOnBtnTxt = self:AddComponent(UIText, safeArea.."Btns/AutoBtn/AutoTxt")
    self.autoOnBtnTxt:SetLocalText(100629)
    self.autoOn = self:AddComponent(UIBaseComponent, safeArea.."Btns/AutoBtn/AutoOn")
    self.autoOn:SetActive(false)
    self.autoBtn = self:AddComponent(UIButton, safeArea.."Btns/AutoBtn")
    self.autoBtn:SetOnClick(function()
        self:OnAutoClick()
    end)
    self.doubleOn = self:AddComponent(UIBaseComponent, safeArea.."Btns/DoubleBtn/DoubleOn")
    self.doubleOn:SetActive(false)
    self.doubleBtn = self:AddComponent(UIButton, safeArea.."Btns/DoubleBtn")
    self.doubleBtn:SetOnClick(function()
        self:OnDoubleClick()
    end)
    
    local autoLockLv=LuaEntry.DataConfig:TryGetNum("unlock_auto_battle", "k1", 1)
    local autoShow=DataCenter.BuildManager.MainLv >= autoLockLv and LocalController:instance():getValue(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage), self:GetUserData().levelId, "auto_skill") > 0
    self.autoBtn:SetActive(autoShow)
    if autoShow and CommonUtil.PlayerPrefsGetInt("ZOMBIE_BATTLE_UI_AUTO_ULT_BTN_GUIDE", 0) == 0 then
        CommonUtil.PlayerPrefsSetInt("ZOMBIE_BATTLE_UI_AUTO_ULT_BTN_GUIDE", 1)

        local evtParams = {}
        evtParams.plotId = 601601
        evtParams.anchor = Vector3(-300, -357, 0)
        evtParams.mode = "2D"
        EventManager:GetInstance():Broadcast(EventId.PlayPlotBubble, evtParams)
    end

    --local doubleLockLv=7
    --local doubleShow=DataCenter.BuildManager.MainLv >= doubleLockLv
    local doubleShow = CS.CommonUtils.IsDebug()
    self.doubleBtn:SetActive(doubleShow)
    
    self.winConditionArea = self.transform:Find(safeArea.."WinCondition")
    self.winConditionIcon = self:AddComponent(UIImage,safeArea.."WinCondition/WinIcon")
    self.winConditionBarImg = self:AddComponent(UIImage,safeArea.."WinCondition/Bar")
    self.spotImg = self:AddComponent(UIImage,"Spot")
    self.spotMat = self.spotImg:GetMaterial()
    self.spotImg:SetActive(false)
    for i = 1, 5 do
        self.spotMat:SetVector("_Hole"..i,DEFAULT_HOLE_POSITION)
    end
    --self.skillIcon = self:AddComponent(UIImage,safeArea.."Skill/icon")
    --self.skillNode = self:AddComponent(UIBaseComponent,safeArea.."Skill")
    --self.skillNode:SetActive(false)
    self.winConditionText = self:AddComponent(UIText,safeArea.."WinCondition/WinBarText")
    self.winConditionBarRT = self.winConditionBarImg.transform:GetComponent(UnityRectTransform)
    self.winConditionIconView = self:AddComponent(UIBaseContainer, safeArea.."WinCondition/WinIconList")
    self.winConditionIconListHolder = self.transform:Find( safeArea.."WinCondition/WinIconList/List")
    self.grayImgN = self:AddComponent(UIImage, safeArea.."gray")
    self.grayMat = self.grayImgN:GetMaterial()
    self.winConditionArea:Set_localScale(0,0,0)
    self.winBanner = self:AddComponent(UIBaseComponent, safeArea.."WinBanner")
    self.winBanner:SetActive(false)
    self.winBannerTxt = self:AddComponent(UIText, safeArea.."WinBanner/WinBannerText")
    self.winBannerTxt:SetLocalText(GameDialogDefine.MISSION_COMPLETE)
    self.winBannerAnim = self:AddComponent(UIAnimator, safeArea)

    self.missionBar = self:AddComponent(UISimpleAnimation, safeArea.."Mission")
    self.missionText = self:AddComponent(UIText, safeArea.."Mission/hengfu/Text_0")
    self.missionTarText = self:AddComponent(UIText, safeArea.."Mission/hengfu/Text_1")
    self.missionBar:SetActive(false)
    
    self.speedUpEffect = self:AddComponent(UIBaseContainer, "TopEffect/Eff_UI_suduxian" )
    self.speedUpEffect:SetActive(false)
    self.bossNoticeContainer = self:AddComponent(UIBaseContainer, "BossComing" )
    
    self.bossNotice = self:AddComponent(UIAnimator, "BossComing")
    self.bossNotice.gameObject:SetActive(false)
    self.bossNoticeText = self.bossNoticeContainer:AddComponent(UIText, "Text_0")
    self.heroCell = {}
    self.winConditionIconListCell = {}
    self.deadNum=0
    self.heroNode = self:AddComponent(UIBaseComponent, safeArea.."HeroHead")
    self.heroNode:SetActive(true)
    self.memberCount = DataCenter.ZombieBattleManager.squad:GetMemberCount()
    for i = 1, 5 do
        self.heroCell[i]=self:AddComponent(ZombieBattleHeroCell, string.format("SafeArea/HeroHead/ZombieBattleHeroCell%s",i))
        local hero = nil
        for _, h in pairs(DataCenter.ZombieBattleManager.squad.members) do
            if h.index == i then
                hero = h
            end
        end
        -- local hero = DataCenter.ZombieBattleManager.squad.members[i]
        if hero then
            self.heroCell[i].gameObject:SetActive(true)
            self.heroCell[i]:SetData(hero)
        else
            self.heroCell[i].gameObject:SetActive(false)
        end

    end

    self.stageProgressGrid = self:AddComponent(UIBaseContainer, safeArea.."StageProgressGrid")
    if OPEN_JOYSTICK then
        self.joystick = self:AddComponent(UIPVEJoystickAim, safeArea.."UIPVEJoystickAim")
        self.joystick:SetActive(true)
    end
    if self.winConditionIconListHolder then
        for _, transform in pairs(self.winConditionIconListHolder) do
            transform.gameObject:Destroy()
        end
    end
    self.spotTime={}
    self.spotMember={}
    if not self.updateTimer then
        self.updateTimer = function() self:OnUpdate() end
        UpdateManager:GetInstance():AddUpdate(self.updateTimer)
    end

    self.speedUpComp = self:AddComponent(SpeedUpComp, safeArea.."SpeedUp" )
    self.speedUpComp:SetVisible(true)


    --self.tacticalWeaponContainer = self:AddComponent(TacticalWeaponCell, safeArea.."Btns/TacticalWeapon")
    --local tacticalWeaponMember = DataCenter.ZombieBattleManager.squad.teamWeapon
    --if tacticalWeaponMember then
    --    self.tacticalWeaponContainer:SetActive(true)
    --    self.tacticalWeaponContainer:SetData(tacticalWeaponMember)
    --else
    --    self.tacticalWeaponContainer:SetActive(false)
    --end

    self.punchOK=0

    --self.tacticalWeaponSkillNodeComponent = self:AddComponent(TacticalWeaponSkillNodeComponent, "SafeArea/Btns/TacticalWeaponSkillNode")
    --self.tacticalWeaponSkillNodeComponent:SetActive(true)

end


function UIZombieBattleMainView:InitAutoAndDouble()
    if CS.CommonUtils.IsDebug() then
        self.isDouble = CommonUtil.PlayerPrefsGetBool("ZOMBIE_BATTLE_DOUBLE", true)
    else
        self.isDouble = false
    end
    Time.timeScale = self.isDouble and 2 or 1
    self.doubleOn:SetActive(self.isDouble)
    self.isAuto = CommonUtil.PlayerPrefsGetBool("ZOMBIE_BATTLE_AUTO", false)
    self.autoOn:SetActive(self.isAuto)
end

function UIZombieBattleMainView:OnDoubleClick()
    self.isDouble = not self.isDouble
    Time.timeScale = self.isDouble and 2 or 1
    self.doubleOn:SetActive(self.isDouble)
    CommonUtil.PlayerPrefsSetBool("ZOMBIE_BATTLE_DOUBLE",self.isDouble)
end

function UIZombieBattleMainView:OnAutoClick()
    self.isAuto = not self.isAuto
    self.autoOn:SetActive(self.isAuto)
    CommonUtil.PlayerPrefsSetBool("ZOMBIE_BATTLE_AUTO",self.isAuto)
end


function UIZombieBattleMainView:ComponentDestroy()
    for i = 1, 5 do
        self.spotMat:SetVector("_Hole"..i,DEFAULT_HOLE_POSITION)
    end
    self.spotMat=nil
    if self.updateTimer ~= nil then
        UpdateManager:GetInstance():RemoveUpdate(self.updateTimer)
        self.updateTimer = nil
    end
    Time.timeScale = 1
    self.back_btn = nil
    --if self.stageCells then
    --    for _, cell in ipairs(self.stageCells) do
    --        cell:Destroy()
    --    end
    --end
    if self.showTimer then 
        self.showTimer:Stop()
        self.showTimer = nil
    end
    if self.stageCellReqs ~= nil then
        for _, req in ipairs(self.stageCellReqs) do
            req:Destroy()
        end
    end

    if self.winConditionIconListHolder then
        for _, transform in pairs(self.winConditionIconListHolder) do
            transform.gameObject:Destroy()
        end
    end

    self.stageCellReqs = nil
    self.stageCells = nil
    self.curStageCell = nil
    self.joystick = nil
    self.grayMat = nil
    if self.cdTimer then
        self.cdTimer:Stop()
        self.cdTimer = nil
    end
    self.spotTime=nil
    self.spotMember=nil

    self.speedUpComp = nil
    --self.tacticalWeaponContainer = nil
    DataCenter.LWSoundManager:StopSound(self.bigWaveSoundUid)
end


function UIZombieBattleMainView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.PVEWin, self.OnPVEWin)
    self:AddUIListener(EventId.PVELose, self.OnPVELose)
    self:AddUIListener(EventId.BossEnterBattle, self.OnBossEnter)
    self:AddUIListener(EventId.BattleZombiesEnter, self.ZombieComing)
    self:AddUIListener(EventId.SquadSuperArmorStateChange, self.SquadSuperArmorChange)
    self:AddUIListener(EventId.BarrageWinConditionRefresh, self.UpdateWinConditionBar)
    self:AddUIListener(EventId.OnKeyCodeEscape, self.OnKeyCodeEscape)
end

function UIZombieBattleMainView:OnRemoveListener()
    self:RemoveUIListener(EventId.PVEWin, self.OnPVEWin)
    self:RemoveUIListener(EventId.PVELose, self.OnPVELose)
    self:RemoveUIListener(EventId.BossEnterBattle, self.OnBossEnter)
    self:RemoveUIListener(EventId.BattleZombiesEnter, self.ZombieComing)
    self:RemoveUIListener(EventId.SquadSuperArmorStateChange, self.SquadSuperArmorChange)
    self:RemoveUIListener(EventId.BarrageWinConditionRefresh, self.UpdateWinConditionBar)
    self:RemoveUIListener(EventId.OnKeyCodeEscape, self.OnKeyCodeEscape)
    base.OnRemoveListener(self)
end

function UIZombieBattleMainView:OnKeyCodeEscape()
end

function UIZombieBattleMainView:InitWinCondition()
    local winType = DataCenter.ZombieBattleManager.pveTemplate.winCondition.winType
    local spriteName = StageUtil.GetWinConditionIcon(winType)
    self.winConditionIcon:LoadSprite(spriteName)
    if winType == Const.StageWinType.Time or winType == Const.StageWinType.WayPoint then
        self.winConditionBarImg:LoadSprite("Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_jindutiao_3")
    elseif winType == Const.StageWinType.KillTargetMonster then
        self.winConditionBarImg:LoadSprite("Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_jindutiao_2")
    else
        self.winConditionBarImg:LoadSprite("Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_jindutiao_2")
    end

    self.winConditionArea.gameObject:SetActive(true)

    for _, transform in pairs(self.winConditionArea.transform) do transform.gameObject:SetActive(true) end
    if winType == Const.StageWinType.KillBoss then
        local killNum = DataCenter.ZombieBattleManager.pveTemplate.winCondition.needKillBossNum
        for _, transform in pairs(self.winConditionArea.transform) do transform.gameObject:SetActive(false) end
        
        self.winConditionIconView.gameObject:SetActive(true)
        self:SetWinConditionBoss(killNum)
    end
end

function UIZombieBattleMainView:ShowWinCondition(callback)
    if not self.missionBar then
        return
    end
    DataCenter.LWSoundManager:PlaySound(10015)
    self.missionBar:SetActive(true)
    local battleMgr = DataCenter.ZombieBattleManager
    self.missionBar.simpleAnimation:Play("Default")
    self.missionText:SetLocalText(battleMgr.pveTemplate.stageMeta.title)
    self.missionTarText:SetLocalText(battleMgr.pveTemplate.stageMeta.target,  battleMgr.pveTemplate.winCondition.needKillNum or battleMgr.pveTemplate.winCondition.timeLimit or battleMgr.pveTemplate.winCondition.needKillBossNum or (battleMgr.pveTemplate.winCondition.winType == Const.StageWinType.WayPoint and math.floor(battleMgr.wayPoint[#battleMgr.wayPoint].pos.z - battleMgr.wayPoint[1].pos.z) ))
    if battleMgr.pveTemplate.winCondition.winType == Const.StageWinType.ClearLastTrigger then
        self.missionTarText:SetLocalText(battleMgr.pveTemplate.stageMeta.target, battleMgr.finalTriggerLimit)
    end

    self.missionBar.simpleAnimation:Play("Default")
    self.showTimer = TimerManager:GetInstance():DelayInvoke(function()
        self.showTimer = nil
        self.missionBar.simpleAnimation:Play("Close")
        -- self.missionBar:SetActive(false)
        self.winConditionArea:DOScale(Vector3.New(1,1,1),0.3):Delay(1)
        callback();
    end,2.5)
end

function UIZombieBattleMainView:UpdateWinConditionBar()
    
    local battleMgr = DataCenter.ZombieBattleManager
    
    local winType = battleMgr.pveTemplate.winCondition.winType
    if winType == Const.StageWinType.KillTargetMonster then
        local curValue = battleMgr.killTargetNum
        local needValue = battleMgr.pveTemplate.winCondition.needKillNum
        self:SetWinConditionBar(math.max(0, needValue-curValue)/needValue)
        self:SetWinConditionText(string.format("%d",math.max(0, needValue-curValue)), true)
    elseif winType == Const.StageWinType.KillMonster then
        local curValue = battleMgr.killNum
        local needValue = battleMgr.pveTemplate.winCondition.needKillNum
        self:SetWinConditionBar(math.max(0, needValue-curValue)/needValue)
        self:SetWinConditionText(string.format("%d",math.max(0, needValue-curValue)), true)
    elseif winType == Const.StageWinType.ClearLastTrigger then
        local isLastTrigger = battleMgr:IsFinalWayPoint()
        self.winConditionArea.gameObject:SetActive(isLastTrigger)
        if isLastTrigger then
            local curValue = battleMgr.killTargetNum
            local needValue = battleMgr.finalTriggerLimit
            self:SetWinConditionBar(math.max(0, needValue-curValue)/needValue)
            self:SetWinConditionText(string.format("%d",math.max(0, needValue-curValue)), true)
        end
    elseif winType == Const.StageWinType.WayPoint then
        if battleMgr.wayPoint then
            local finalPos = battleMgr.wayPoint[#battleMgr.wayPoint].pos
            local startPos = battleMgr.wayPoint[1].pos
            local curPos = battleMgr.squad:GetPosition()
            self:SetWinConditionBar((curPos.z - startPos.z)/(finalPos.z - startPos.z))
            local distanceZ = finalPos.z - curPos.z
            self:SetWinConditionText(string.format("%d m",math.max(0,math.floor(distanceZ))))
        else
            self:SetWinConditionBar(0)
            self:SetWinConditionText("")
        end
    elseif winType == Const.StageWinType.Time then
        local needValue = battleMgr.pveTemplate.winCondition.timeLimit
        local curValue = battleMgr.useTime
        self:SetWinConditionBar((needValue - curValue)/needValue)
        self:SetWinConditionText(UITimeManager:GetInstance():SecondToFmtStringWithoutHour(needValue - curValue))
    elseif winType == Const.StageWinType.KillBoss then
        if battleMgr.killBossNum > 0 and battleMgr.killBossNum<=#self.winConditionIconListCell then
            self.winConditionIconListCell[battleMgr.killBossNum].effect:SetActive(true)
        end
    end
end

function UIZombieBattleMainView:SetWinConditionBar(percent)
    percent = Mathf.Clamp(percent, 0, 1)
    if self.winConditionBarImg then
        self.winConditionBarImg.transform:Set_sizeDelta(percent * 250, 30)
    end
end

function UIZombieBattleMainView:SetWinConditionText(txt, punch)
    if self.winConditionText and self.winConditionText:GetText() ~= txt then
        self.winConditionText:SetText(txt)
        if punch then
            local now = UITimeManager:GetInstance():GetServerTime()
            if self.punchOK < now then
                self.punchOK=now+PUNCH_CD*1000
                self.winConditionText.transform:DOKill()
                self.winConditionText.transform:Set_localScale(1,1,1)
                self.winConditionText.transform:DOPunchScale(Vector3.New(1,1,1),PUNCH_CD,1,0.4)
            end
        end
    end
end

function UIZombieBattleMainView:SetWinConditionBoss(needKillBossNum)
    local cell = self.winConditionIconView.transform:Find('Cell')
    for i = 1,needKillBossNum do 
        local go = cell.gameObject:GameObjectSpawn(self.winConditionIconListHolder)
        local icongo = go.transform:Find("Icon")
        local effectgo = go.transform:Find("Kill").gameObject
        icongo.name = "Icon"..tostring(i)
        local img = self.winConditionIconView:AddComponent(UIImage,icongo)
        img:LoadSprite("Assets/Main/Sprites/UI/UIZombieBattleMain/guanqia_cfm_tubiao_4")
        effectgo:SetActive(false)
        self.winConditionIconListCell[i] = {img = img,effect = effectgo,gameObject = go}
    end
end

function UIZombieBattleMainView:OnBossEnter()

    self.bossNotice.gameObject:SetActive(false)
    self.bossNotice.gameObject:SetActive(true)
    self.bossNoticeText:SetLocalText(800328)
end
--一大波丧尸来
function UIZombieBattleMainView:ZombieComing()
    DataCenter.LWSoundManager:PlaySound(10020)
    TimerManager:GetInstance():DelayInvoke(function()
        self.bigWaveSoundUid = DataCenter.LWSoundManager:PlaySound(10021,true)
    end, 1)
    self.bossNotice.gameObject:SetActive(false)
    self.bossNotice.gameObject:SetActive(true)
    self.bossNoticeText:SetLocalText(800327)
end


function UIZombieBattleMainView:OnPVEWin()
    DataCenter.LWSoundManager:StopSound(self.bigWaveSoundUid)
    self.isDouble = false
    Time.timeScale = 1
    self.btns:SetActive(false)
    self.heroNode:SetActive(false)
    DataCenter.LWSoundManager:PlaySound(10022)
    self.winBanner:SetActive(true)
    self.winBannerAnim:Play("Eff_ui_beizengmen_mubiao_wancheng", 0, 0)
    TimerManager:GetInstance():DelayInvoke(function()
        if self.winBanner then
            self.winBanner:SetActive(false)
        end
        if self.winConditionArea then
            self.winConditionArea.gameObject:SetActive(false)
        end
    end, 1.8)
    if self.speedUpComp then
        self.speedUpComp:SetVisible(false)
    end
end

function UIZombieBattleMainView:OnPVELose()
    DataCenter.LWSoundManager:StopSound(self.bigWaveSoundUid)
    self.isDouble = false
    Time.timeScale = 1
    self.btns:SetActive(false)
    self.heroNode:SetActive(false)
    if self.winConditionArea then
        self.winConditionArea.gameObject:SetActive(false)
    end
    if self.speedUpComp then
        self.speedUpComp:SetVisible(false)
    end
end

function UIZombieBattleMainView:DoPVELose()
    DataCenter.ZombieBattleManager:OnBattleLose()
end

function UIZombieBattleMainView:OnBtnHome()
    if DataCenter.ZombieBattleManager.winTimer or DataCenter.ZombieBattleManager.gameOver then
       return
    end
    self:OnExit()
end


function UIZombieBattleMainView:OnExit()
    DataCenter.LWSoundManager:StopSound(self.bigWaveSoundUid)
    local exitStageId = DataCenter.LWBattleManager:GetCurBattleLogic():GetStageId()
    --中途退出打点
    --PostEventLog.BattleResultLog(PVEType.Barrage,2)
    self.ctrl:CloseSelf()
    self:DoPVELose()
    -- DataCenter.ZombieBattleManager:Exit()

    -- local stageTemp = LocalController:instance():getLine(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage), exitStageId)
    DataCenter.ZombieBattleManager:Exit()
end

function UIZombieBattleMainView:OnEnable()
    base.OnEnable(self)
    if self.joystick then
        self.joystick:ReInit()
        DataCenter.ZombieBattleManager:SetJoystick(self.joystick)
    end
end

function UIZombieBattleMainView:OnShowMap()

    if(not DataCenter.ZombieBattleManager.gameOver and not DataCenter.ZombieBattleManager.gamePause) then
        --DataCenter.ZombieBattleManager:SetGamePause(true)
        self:DoPVELose()
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIStage, { anim = false }, nil)
end

function UIZombieBattleMainView:OnUpdate()
    local showSpot = false
    for index,time in pairs(self.spotTime) do
        if time>0 then
            local newTime = time - Time.deltaTime
            self.spotTime[index] = newTime
            if newTime>0 then
                local member = self.spotMember[index]
                if member and member:GetCurBlood()>0 then
                    showSpot = true
                    local worldPos=member:GetPosition()
                    local screenPos = CS.UnityEngine.Camera.main:WorldToScreenPoint(worldPos)
                    local x = screenPos.x/Screen.width
                    local y = screenPos.y/Screen.height
                    x=0.5-3*x
                    y=0.5-6*y
                    self.spotMat:SetVector("_Hole"..index,Vector4.New(x,y,1,1))
                else
                    self.spotMat:SetVector("_Hole"..index,DEFAULT_HOLE_POSITION)
                end
            else
                self.spotMat:SetVector("_Hole"..index,DEFAULT_HOLE_POSITION)
            end
        end
    end
    self.spotImg:SetActive(showSpot)

    if self.speedUpComp then
        self.speedUpComp:OnUpdate(Time.deltaTime)
    end
end

function UIZombieBattleMainView:Spot(member,time)
    local index = member.index
    self.spotTime[index]=time
    self.spotMember[index]=member
end



-- function UIZombieBattleMainView:RefreshTopBar()
--     if self.stageCells then
--         for _, cell in pairs(self.stageCells) do
--             cell:Destroy()
--         end
--     end
--     if self.stageCellReqs ~= nil then
--         for _, req in pairs(self.stageCellReqs) do
--             req:Destroy()
--         end
--     end
--     self.stageCellReqs = {}
--     self.stageCells = {}
--     self.curStageCell = nil
    
--     local stageGroupMeta = DataCenter.ZombieBattleManager.pveTemplate.stageGroupMeta
--     local stageMeta = DataCenter.ZombieBattleManager.pveTemplate.stageMeta
--     local spl = string.split(stageGroupMeta.stage_group,"|")

--     local showStage = {}
--     local selfIdx = 0
--     for idx, id in ipairs(spl) do
--         if tonumber(id) == stageMeta.id then
--             selfIdx = idx
--             break
--         end
--     end
--     table.insert(showStage,stageMeta.id)
--     local remain = 3
--     if spl[selfIdx + 1] then
--         table.insert(showStage,(spl[selfIdx + 1]))
--         remain = remain-1
--         if spl[selfIdx + 2] then
--             table.insert(showStage,(spl[selfIdx + 2]))
--             remain = remain-1
--             if selfIdx == 1 and spl[selfIdx + 3] then
--                 table.insert(showStage,(spl[selfIdx + 3]))
--                 remain = remain-1
--             end
--         end
--     end
--     local startOrder = selfIdx

--     for i = 1, remain do
--         if selfIdx - i > 0 then
--             table.insert(showStage,1,(spl[selfIdx - i]))
--             startOrder = selfIdx - i
--         end
--     end

--     local index = 0
--     local localStart = startOrder
--     for _, stageId in ipairs(showStage) do
--         index = index + 1
--         local id = index
--         local req = self:GameObjectInstantiateAsync(TopStageBarCellAsset, function(request)
--             local go = request.gameObject;
--             go.transform:SetParent(self.stageProgressGrid.transform)
--             go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
--             local nameStr = tostring(id)
--             go.name = nameStr
--             local cell = self.stageProgressGrid:AddComponent(TopStageBarCell,nameStr)
--             local percent = 1
--             if(tonumber(stageId) == stageMeta.id) then
--                 percent = 0
--             elseif DataCenter.StageManager:AlreadyPass(stageGroupMeta.id,stageId) then
--                 percent = 1
--             else
--                 percent = 0
--             end
            
--             cell:RefreshData(stageId,percent,localStart,id ~= #showStage)
--             localStart = localStart + 1

--             if tonumber(stageId) == stageMeta.id then
--                 self.curStageCell = cell
--                 cell.icon_img.transform:Set_localScale(1.5,1.5,1.5)
--                 cell.icon_img:SetMaterial(nil)
--                 cell.icon_bg:SetMaterial(nil)
--             else
--                 cell.icon_img.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
--                 if localStart <= selfIdx then
--                     cell.icon_img:SetMaterial(self.grayMat)
--                     cell.icon_bg:SetMaterial(self.grayMat)
--                 else
--                     cell.icon_img:SetMaterial(nil)
--                     cell.icon_bg:SetMaterial(nil)
--                 end
--             end
--             self.stageCells[id] = cell
--             self.stageCellReqs[id] = nil
--         end)
--         self.stageCellReqs[id] = req
--     end
-- end

function UIZombieBattleMainView:SquadSuperArmorChange()
    local isSuperArmor = DataCenter.ZombieBattleManager.squad:IsSuperArmor()
    self.speedUpEffect:SetActive(isSuperArmor)
    if isSuperArmor then
        DataCenter.ZombieBattleManager:AutoZoom(40)
        -- 加速效果是个粒子效果，需要缩放处理才能覆盖全屏
        local ScreenSize = self.rectTransform.rect
        local scaleWidth = ScreenSize.width / 810
        local scaleHeight = ScreenSize.height / 1440
        self.speedUpEffect:SetLocalScaleXYZ(scaleWidth, scaleHeight, 1)
    else
        DataCenter.ZombieBattleManager:AutoZoom(20)
    end
end

function UIZombieBattleMainView:IsTimeStopCD()
    return self.timeStopCD
end

function UIZombieBattleMainView:SetTimeStopCD()
    self.timeStopCD=true
    if self.cdTimer then
        self.cdTimer:Stop()
        self.cdTimer = nil
    end
    local cd = self.isAuto and TIME_STOP_CD_AI or TIME_STOP_CD
    self.cdTimer=TimerManager:DelayInvoke(function()
        self.timeStopCD=false
    end, cd)
end


return UIZombieBattleMainView
