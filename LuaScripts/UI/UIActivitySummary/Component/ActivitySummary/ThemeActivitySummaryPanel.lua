---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/12/2 15:05
---ThemeActivitySummaryPanel.lua

local base = UIBaseView--Variable
local ThemeActivitySummaryPanel = BaseClass("ThemeActivitySummaryPanel", base)--Variable
local Localization = CS.GameEntry.Localization
local ThemeActivityItem = require "UI.UIActivitySummary.Component.ThemeActivityItems.ThemeActivityItem_Activity"
local ThemeGiftPackItem = require "UI.UIActivitySummary.Component.ThemeActivityItems.ThemeActivityItem_GiftPack"
local UIScrollPackContent = require "UI.UIScrollPack.Component.UIScrollPackContent"

local title_path = "Top/title"
local closeBtn_path = "BtnClose"
local remainTime_path = "Top/remainTime"
local infoBtn_path = "Top/title/infoBtn"
local resIcon_path = "Res1/resIcon1"
local resCount_path = "Res1/resNum1"
local activityMain_path = "Top/activityMain"
local activityItem_path = "Top/activityMain/activity"
local activityItem56_path = "layoutL/activity"
local tipTxt1_path = "Top/subTitle"
local tipTxt2_path = "Top/actTime"
local packagePanel_path = "packagePanel"
local hidePackPanelBtn_path = "packagePanel/Back"
local packageItem_path = "packagePanel/UIScrollPackContent"
local pve_path = "Top/activityMain/pve"
local package_path = "layoutL/package"

local ActivityStatus = {
    Notice = 1,
    Open = 2,
    Close = 3,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DelCountDownTimer()
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    self:RefreshAll()
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.RefreshItems, self.RefreshResCount)
    self:AddUIListener(EventId.UpdateGiftPackData, self.RefreshPackage)
end


local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshResCount)
    self:RemoveUIListener(EventId.UpdateGiftPackData, self.RefreshPackage)
    base.OnRemoveListener(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UIText, title_path)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        self:OnClickCloseBtn()
    end)
    self.remainTimeN = self:AddComponent(UIText, remainTime_path)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)
    self.resIconN = self:AddComponent(UIImage, resIcon_path)
    self.resCountN = self:AddComponent(UIText, resCount_path)
    self.activityMainN = self:AddComponent(UIBaseContainer, activityMain_path)
    self.activityItemsTbN = {}
    for i = 1, 4 do
        local tempPath = activityItem_path .. i
        local tempItem = self:AddComponent(ThemeActivityItem, tempPath)
        table.insert(self.activityItemsTbN, tempItem)
    end
    for i = 5, 6 do
        local tempPath = activityItem56_path .. i
        local tempItem = self:AddComponent(ThemeActivityItem, tempPath)
        table.insert(self.activityItemsTbN, tempItem)
    end
    self.tipTxt1N = self:AddComponent(UIText, tipTxt1_path)
    self.tipTxt1N:SetText(Localization:GetString("372338"))
    self.tipTxt2N = self:AddComponent(UIText, tipTxt2_path)
    self.tipTxt2N:SetText(Localization:GetString("372391"))
    self.packagePanelN = self:AddComponent(UIBaseContainer, packagePanel_path)
    self.packageItemN = self:AddComponent(UIScrollPackContent, packageItem_path)
    self.hidePackPanelBtnN = self:AddComponent(UIButton, hidePackPanelBtn_path)
    self.hidePackPanelBtnN:SetOnClick(function()
        self:ShowPackagePanel(false)
    end)
    self.packageN = self:AddComponent(ThemeGiftPackItem, package_path)
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.closeBtnN = nil
    self.remainTimeN = nil
    self.activityItemsTbN = nil
    self.infoBtnN = nil
    self.resIconN = nil
    self.resCountN = nil
end

local function DataDefine(self)
    self.activityInfo = nil
    self.activityStatus = nil
    self.endTime = nil
    self.endTimeTip = nil
    self.isShowPackPanel = false
    self.pveActStatus = EnumActivityStatus.Open
end

local function DataDestroy(self)
    self.activityInfo = nil
    self.activityStatus = nil
    self.endTime = nil
    self.endTimeTip = nil
    self.isShowPackPanel = nil
    self.pveActStatus = nil
end

local function ShowPanel(self, actInfo)
    self.activityInfo = actInfo
    self:RefreshAll()
end

local function RefreshAll(self)
    if not self.activityInfo then
        return
    end
    
    self.titleN:SetText(Localization:GetString(self.activityInfo.name))

    local serverTime = UITimeManager:GetInstance():GetServerTime()
    if self.activityInfo.endTime > serverTime then
        self.activityStatus = ActivityStatus.Open
    else
        self.activityStatus = ActivityStatus.Close
    end

    if self.activityStatus == ActivityStatus.Open then
        self.endTime = self.activityInfo.endTime
        self.endTimeTip = "371061"
        self:AddCountDownTimer()
        self:RefreshRemainTime()
        self:ShowActivityMain()
    else
        self:DelCountDownTimer()
        self.remainTimeN:SetText(Localization:GetString("370100"))
    end

    self:RefreshResCount()
    self:RefreshPackage()
end

local function RefreshResCount(self)
    local itemId = self.activityInfo.para2

    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
    self.resIconN:LoadSprite(string.format(LoadPath.ItemPath, goods.icon))

    local item = DataCenter.ItemData:GetItemById(itemId)
    local hasCount = item and item.count or 0
    self.resCountN:SetText(hasCount)
end

local function RefreshPackage(self)
    local packageArr = string.split(self.activityInfo.para3, ";")
    for i, packageId in ipairs(packageArr) do
        local packInfo = GiftPackageData.get(packageId)
        if packInfo then
            self.curPackageInfo = packInfo
            self.packageN:SetActive(true)
            self.packageN:SetItem(self.activityInfo, packInfo)
            return
        end
    end
    self.curPackageInfo = nil
    self.packageN:SetActive(false)
end

local function ShowActivityMain(self)
    self.activityMainN:SetActive(true)

    local actIdList = string.split(self.activityInfo.para1, ";")

    self.pveActId = ActivitySummaryPveActId
    if #actIdList >= 7 and not string.IsNullOrEmpty(actIdList[7]) then
        self.pveActId = tonumber(actIdList[7])
    end

    for i, v in ipairs(self.activityItemsTbN) do
        if i <= #actIdList and not string.IsNullOrEmpty(actIdList[i]) then
            v:SetActive(true)
            v:SetItem( actIdList[i])
        else
            v:SetActive(false)
        end
    end
end

local function EndActivity(self)
    self.activityMainN:SetActive(false)
    self.activityNoticeN:SetActive(false)
end


local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime > 0 then
        self.remainTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.remainTimeN:SetText("")
        self:DelCountDownTimer()
        self:RefreshAll()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end


local function OnClickInfoBtn(self)
    UIUtil.ShowIntro(Localization:GetString(tostring(self.activityInfo.name)), Localization:GetString("100239"), Localization:GetString(tostring(self.activityInfo.story)))
end


local function ShowPackagePanel(self, isShow)
    DataCenter.ThemeActivityManager:SetPackageOld(self.activityInfo)
    self:RefreshPackage()

    if not isShow then
        self.packagePanelN:SetActive(false)
    else
        self.packagePanelN:SetActive(true)
        self.packageItemN:SetData(self.curPackageInfo, function()
            self:ShowPackagePanel(false)
        end)
    end
end


local function OnClickCloseBtn(self)
    self.view.ctrl:CloseSelf()
end




ThemeActivitySummaryPanel.OnCreate = OnCreate
ThemeActivitySummaryPanel.OnDestroy = OnDestroy
ThemeActivitySummaryPanel.OnEnable = OnEnable
ThemeActivitySummaryPanel.OnDisable = OnDisable
ThemeActivitySummaryPanel.OnAddListener = OnAddListener
ThemeActivitySummaryPanel.OnRemoveListener = OnRemoveListener
ThemeActivitySummaryPanel.ComponentDefine = ComponentDefine
ThemeActivitySummaryPanel.ComponentDestroy = ComponentDestroy
ThemeActivitySummaryPanel.DataDefine = DataDefine
ThemeActivitySummaryPanel.DataDestroy = DataDestroy

ThemeActivitySummaryPanel.ShowPanel = ShowPanel
ThemeActivitySummaryPanel.RefreshAll = RefreshAll
ThemeActivitySummaryPanel.ShowActivityMain = ShowActivityMain
ThemeActivitySummaryPanel.ShowPackagePanel = ShowPackagePanel
ThemeActivitySummaryPanel.EndActivity = EndActivity
ThemeActivitySummaryPanel.RefreshResCount = RefreshResCount
ThemeActivitySummaryPanel.RefreshPackage = RefreshPackage
ThemeActivitySummaryPanel.AddCountDownTimer = AddCountDownTimer
ThemeActivitySummaryPanel.RefreshRemainTime = RefreshRemainTime
ThemeActivitySummaryPanel.DelCountDownTimer = DelCountDownTimer
ThemeActivitySummaryPanel.OnClickCloseBtn = OnClickCloseBtn
ThemeActivitySummaryPanel.OnClickInfoBtn = OnClickInfoBtn

return ThemeActivitySummaryPanel