---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/11/24 17:57
---
local UITimeRoundPanelView = BaseClass("UITimeRoundPanelView", UIBaseView)
local base = UIBaseView

local Localization = CS.GameEntry.Localization

local panel_path = "panel"
local time_path = "BG/TimePart/time"
local light_obj_path = "BG/TimePart/light"
local dark_obj_path = "BG/TimePart/dark"
local round_dark_path = "BG/TimePart/dark/round_dark"
local round_light_path = "BG/TimePart/light/round_light"
local round_day_path= "BG/TimePart/light/zhizhen"
local round_night_path = "BG/TimePart/dark/GameObject"
local input_path = "InputField"

--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self.timer = TimerManager:GetInstance():GetTimer(0.499, self.TimerAction, self, false, false, false)
    self.timer:Start()
    self:TimerAction()
end

-- 销毁
local function OnDestroy(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.btn = self:AddComponent(UIButton, panel_path)
    self.btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.time_text = self:AddComponent(UITextMeshProUGUIEx,time_path)
    self.light_obj = self:AddComponent(UIBaseContainer,light_obj_path)
    self.dark_obj = self:AddComponent(UIBaseContainer,dark_obj_path)
    self.round_day = self:AddComponent(UIBaseContainer,round_day_path)
    self.round_night = self:AddComponent(UIBaseContainer,round_night_path)
    self.round_dark = self:AddComponent(UIImage,round_dark_path)
    self.round_light = self:AddComponent(UIImage,round_light_path)
    self.input = self:AddComponent(UITMPInput, input_path)
    self.input:SetOnEndEdit(function()
        self:OnInput()
    end)
    if not CS.CommonUtils.IsDebug() then
        self.input:SetActive(false)
    end
end

local function ComponentDestroy(self)
end


local function DataDefine(self)
end

local function DataDestroy(self)
end

local function GetStartRotation(self,startHour)
    local value = (12-startHour)*360/24
    return value
end

local function GetFillAmount(self,length)
    local value = length/24
    return value
end

local function TimerAction(self)
    self:RefreshVita()
end

local function RefreshVita(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local vitaTime = VitaUtil.RealTimeToVita(curTime)
    self.time_text:SetText(VitaUtil.VitaTimeToStringHM(vitaTime))
    local todayMinute = VitaUtil.VitaTimeTodayMinute(vitaTime)
    local rotation = (-360)*todayMinute/(60*24)
    self.round_night.rectTransform.rotation = Quaternion.Euler(0,0,rotation)
    self.round_day.rectTransform.rotation = Quaternion.Euler(0,0,rotation)
end

local function Refresh(self)
    local curSeg = DataCenter.VitaManager:GetCurSegment()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local dayNight = DataCenter.VitaManager:GetDayNight(curTime)
    if dayNight == VitaDefines.DayNight.Day then
        self.light_obj:SetActive(true)
        self.dark_obj:SetActive(false)
    else
        self.light_obj:SetActive(false)
        self.dark_obj:SetActive(true)
    end
    if curSeg~=nil then
        local _, startHour, minute = VitaUtil.VitaTimeToDHM(curSeg.startTodayVitaTime)
        local _End, endHour, minuteEnd = VitaUtil.VitaTimeToDHM(curSeg.endTodayVitaTime)
        --策划要求：休息状态不在日程表里显示，同吃饭状态合并
        if curSeg.type == VitaDefines.SegmentType.Rest then
            --获取上一状态，如果上一状态是吃饭，使用上一状态开始时间
            local showSegment =  DataCenter.VitaManager:GetSegment(VitaUtil.VitaTimeToReal(curSeg.startTodayVitaTime-2))
            if showSegment~=nil and showSegment.type == VitaDefines.SegmentType.Eat then
                _, startHour, minute = VitaUtil.VitaTimeToDHM(showSegment.startTodayVitaTime)
            end
        elseif curSeg.type == VitaDefines.SegmentType.Eat then
            --获取下一状态，如果下一状态是休息，使用下一状态结束时间
            local showSegment =  DataCenter.VitaManager:GetSegment(VitaUtil.VitaTimeToReal(curSeg.endTodayVitaTime+2))
            if showSegment~=nil and showSegment.type == VitaDefines.SegmentType.Rest then
                _End, endHour, minuteEnd = VitaUtil.VitaTimeToDHM(showSegment.endTodayVitaTime)
            end
        end

        local time = startHour+(minute/60)
        local rotation = self:GetStartRotation(time)
        if endHour<=0 then
            endHour =  24
        end
        local endTime = endHour+(minuteEnd/60)
        local amount = self:GetFillAmount(endTime-time)
        self.round_dark.rectTransform.rotation = Quaternion.Euler(0,0,rotation)
        self.round_light.rectTransform.rotation = Quaternion.Euler(0,0,rotation)
        self.round_dark:SetFillAmount(amount)
        self.round_light:SetFillAmount(amount)
    end
end


local function OnEnable(self)
    base.OnEnable(self)
    self:Refresh()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.VitaSegmentChange, self.Refresh)
end


local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.VitaSegmentChange, self.Refresh)
end

local function OnInput(self)
    local t = tonumber(self.input:GetText())
    if t then
        DataCenter.VitaManager:SendChangeTime(t)
        self.ctrl:CloseSelf()
    end
end

UITimeRoundPanelView.OnCreate = OnCreate
UITimeRoundPanelView.OnDestroy = OnDestroy
UITimeRoundPanelView.OnEnable = OnEnable
UITimeRoundPanelView.OnDisable = OnDisable
UITimeRoundPanelView.ComponentDefine = ComponentDefine
UITimeRoundPanelView.ComponentDestroy = ComponentDestroy
UITimeRoundPanelView.DataDefine = DataDefine
UITimeRoundPanelView.DataDestroy = DataDestroy
UITimeRoundPanelView.OnAddListener = OnAddListener
UITimeRoundPanelView.OnRemoveListener = OnRemoveListener
UITimeRoundPanelView.GetFillAmount= GetFillAmount
UITimeRoundPanelView.GetStartRotation = GetStartRotation
UITimeRoundPanelView.TimerAction = TimerAction
UITimeRoundPanelView.RefreshVita = RefreshVita
UITimeRoundPanelView.Refresh = Refresh
UITimeRoundPanelView.OnInput = OnInput

return UITimeRoundPanelView