---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/5/10 12:20
---
local UISoldierSkillIIntro = BaseClass("UISoldierSkillIIntro", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local skill_count = 3
local skill_path = "Root/Skills"
local SkillCell = require "UI.UISoldierSkillIIntro.Component.UISoldierSkillIIntroCell"
local root_path = "Root"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:ReInit()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    local btnPanel = self:AddComponent(UIButton, "Panel")
    btnPanel:SetOnClick(BindCallback(self.ctrl, self.ctrl.CloseSelf))
    self.textTitle = self:AddComponent(UIText, "Root/TextTitle")
    self.textTitle:SetLocalText(150106)
    self.textSkillName = self:AddComponent(UIText, "Root/TextSkillName")
    self.textSkillDesc = self:AddComponent(UIText, "Root/TextSkillDesc")
    self.skillContainer = self:AddComponent(UIBaseContainer, skill_path)
    self.skills = {}
    for i = 1, skill_count do
        local path = skill_path.."/UISoldierSkillIIntroCell"..i
        local cell = self:AddComponent(SkillCell, path)
        table.insert(self.skills, cell)
    end
    self.root = self:AddComponent(UIBaseContainer, root_path)
end

local function ComponentDestroy(self)

end

local function OnEnable(self)
    base.OnEnable(self)
end

function UISoldierSkillIIntro:ReInit()
    local param = self:GetUserData()
    self.param = param
    self:RefreshPosition()
    self:RefreshSkills()
end

local function RefreshSkills(self)
    local armyTemplate = DataCenter.ArmyTemplateManager:GetArmyTemplate(self.param.armyId)
    local skills = armyTemplate.skill
    for k, v in ipairs(self.skills) do
        local skillData = skills[k]
        if skillData == nil then
            v:SetActive(false)
        else
            v:SetActive(true)
            local skillId = skillData[1]
            local skill_icon = GetTableData(TableName.SkillTab, skillId, "icon")
            local param = {}
            param.skillId = skillId
            param.level = skillData[2]
            param.skillName = Localization:GetString(GetTableData(TableName.SkillTab, param.skillId, 'name'))
            param.skillDesc = HeroUtils.GetSkillDescStr(param.skillId, param.level)
            param.skillIcon = string.format(LoadPath.SoldierSkillIcons, skill_icon)
            param.index = k
            param.callBack = BindCallback(self, self.Select)
            v:ReInit(param)
        end
    end
    self:Select(1)
end

local function Select(self, selectIndex)
    if selectIndex == self.curSelect then
        return
    end
    self.curSelect = selectIndex
    self:RefreshCurrentSelectInfo()
end

local function RefreshCurrentSelectInfo(self)
    for _, v in ipairs(self.skills) do
        v:SetCurSelect(self.curSelect)
    end
    if self.skills[self.curSelect] ~= nil and self.skills[self.curSelect].param ~= nil then
        self.textSkillName:SetText(self.skills[self.curSelect].param.skillName)
        self.textSkillDesc:SetText(self.skills[self.curSelect].param.skillDesc)
    end
end

function UISoldierSkillIIntro:RefreshPosition()
    if self.param.position ~= nil then
        self.root.transform.position = self.param.position
    end
end

UISoldierSkillIIntro.Select = Select
UISoldierSkillIIntro.RefreshCurrentSelectInfo = RefreshCurrentSelectInfo
UISoldierSkillIIntro.OnCreate= OnCreate
UISoldierSkillIIntro.OnDestroy = OnDestroy
UISoldierSkillIIntro.OnEnable = OnEnable

UISoldierSkillIIntro.ComponentDefine = ComponentDefine
UISoldierSkillIIntro.ComponentDestroy = ComponentDestroy
UISoldierSkillIIntro.RefreshSkills = RefreshSkills

return UISoldierSkillIIntro
