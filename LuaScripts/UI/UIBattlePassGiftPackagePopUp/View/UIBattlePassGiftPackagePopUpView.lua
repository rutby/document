---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime:
--- 
local UIBattlePassGiftPackagePopUpView = BaseClass("UIBattlePassGiftPackagePopUpView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UICommonItemChange = require "UI.UICommonItem.UICommonItemChange"
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"


local close_path = "UICommonPanel"
local back_path = "UIScrollPackContent/Back"
local bg_path = "UIScrollPackContent/Bg"
local title_path = "UIScrollPackContent/Title"
local title1_path = "UIScrollPackContent/Title1"
local title2_path = "UIScrollPackContent/Title2"
local time_path = "UIScrollPackContent/ActTime/remainTime"
local scroll_view_path = "UIScrollPackContent/ScrollView"
local buy_btn_path = "UIScrollPackContent/BuyButton"
local buy_text_path = "UIScrollPackContent/BuyButton/BuyButtonText"
local txtDisCount_path = "UIScrollPackContent/ActDiscount/Discount"

local point_path = "UIScrollPackContent/BuyButton/UIGiftPackagePoint"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

local function OnDestroy(self)
    self:ClearScroll()
    self:DeleteTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.back_btn = self:AddComponent(UIButton, back_path)
    self.back_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    
    self.bg_image = self:AddComponent(UIImage, bg_path)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title1_txt = self:AddComponent(UITextMeshProUGUIEx,title1_path)
    self.title2_txt = self:AddComponent(UITextMeshProUGUIEx,title2_path)
    self._time_txt = self:AddComponent(UITextMeshProUGUIEx, time_path)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
    self.buy_btn = self:AddComponent(UIButton, buy_btn_path)
    self.buy_btn:SetOnClick(function()
        self:OnBuyClick()
    end)
    self.buy_text = self:AddComponent(UITextMeshProUGUIEx, buy_text_path)
    self.point_rect = self:AddComponent(UIGiftPackagePoint,point_path)
    self.txtDisCount = self:AddComponent(UITextMeshProUGUIEx, txtDisCount_path)
    self.goTextMat = self.transform:Find("UIScrollPackContent/Title/goTextMat"):GetComponent(typeof(CS.UnityEngine.MeshRenderer))
end

local function ComponentDestroy(self)
    self.bg_image = nil
    self.title_text = nil
    self._time_txt = nil
    self.scroll_view = nil
    self.buy_btn = nil
    self.buy_text = nil
    self.point_rect = nil
end

local function DataDefine(self)
    self.rewardList = nil
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
    self.packageInfo = nil
end

local function DataDestroy(self)
    self.rewardList = nil
    self.timer_action = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.ActBattlePassRefresh, self.ReInit)
    self:AddUIListener(EventId.DesertForceRefresh, self.RefreshSeasonPass)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.ActBattlePassRefresh, self.ReInit)
    self:RemoveUIListener(EventId.DesertForceRefresh, self.RefreshSeasonPass)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.actId,self.isGoto = self:GetUserData()
    self.actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.actId))
    if self.actListData then
        self.title_text:SetLocalText(self.actListData.name)
        
        local config = BattlePassTitleConfig[self.actListData.activity_pic] or BattlePassTitleConfig["PassBlackWoman"]
        self.title_text:SetColorGradient(config.TitleTopColor, config.TitleTopColor, config.TitleBottomColor, config.TitleBottomColor)
        self.title_text:SetMaterial(self.goTextMat.sharedMaterials[config.OutlineNum])
        if self.actListData.type == ActivityEnum.ActivityType.BattlePass then             --战令
            self.title1_txt:SetLocalText(320467)
            self.title2_txt:SetLocalText(320468)
            
            self.actData = DataCenter.ActBattlePassData:GetInfoByActId(self.actId)
            if self.actData == nil then
                return
            end
            self.packageInfo = GiftPackageData.get(self.actData:GetExchangeId())
            self.rewardList = self.actData:CheckLvGetReward(1,1,true)
            if self.actListData.activity_pic ~= "" then
                self.bg_image:LoadSprite(LoadPath.UIBattlePassBgPath..self.actListData.activity_pic.."_gift")
            end
        elseif self.actListData.type == EnumActivity.SeasonPass.Type then               --赛季pass
            DataCenter.SeasonPassManager:GetExtraRewardsReq()
            return
        end
    end
    
    if self.packageInfo and self.actData.battlePass.unlock == 0 then
        self.buy_btn:SetActive(true)
        local price = DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID())
        self.buy_text:SetText(price)
        self.point_rect:RefreshPoint(self.packageInfo)
        local discount = self.packageInfo:hasPercent() and tonumber(self.packageInfo:getPercent()) or 0
        self.txtDisCount:SetText(discount.."%")
    else
        if self.actListData.type == EnumActivity.SeasonPass.Type then
            self.buy_btn:SetActive(true)
            self.point_rect:RefreshPoint(nil)
            self.buy_text:SetLocalText(100547)
        else
            --self.buy_btn:SetActive(false)
            self.ctrl:CloseSelf()
        end
    end

    if self.actListData then
        self:RefreshTime(self.actListData)
        self:AddTimer(self.actListData)
    end
    self:ShowCells()
end

local function RefreshSeasonPass(self)
    local count = 0
    local extra = DataCenter.SeasonPassManager:GetPrivilegeExtraRewards(1)
    if extra then
        for i, v in ipairs(extra) do
            count = count + v.count
        end
    end
    self.title1_txt:SetLocalText(320635,string.GetFormattedStr(count))
    self.title2_txt:SetLocalText(320636)
    self.actData = DataCenter.SeasonPassManager:GetSeasonPassInfo(tonumber(self.actId))
    if self.actData == nil then
        return
    end
    self.rewardList = self.actData:GetSpecialReward()
    if self.packageInfo and self.actData.battlePass.unlock == 0 then
        self.buy_btn:SetActive(true)
        local price = DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID())
        self.buy_text:SetText(price)
        self.point_rect:RefreshPoint(self.packageInfo)
    else
        self.buy_btn:SetActive(true)
        self.point_rect:RefreshPoint(nil)
        self.buy_text:SetLocalText(100547)
    end

    if self.actListData then
        self:RefreshTime(self.actListData)
        self:AddTimer(self.actListData)
    end
    self:ShowCells()
end


local function ShowCells(self)
    local count = table.count(self.rewardList)
    if count > 0 then
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()
    self.scroll_view:RemoveComponents(UICommonItemChange)
end

local function OnCreateCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local item = self.scroll_view:AddComponent(UICommonItemChange, itemObj)
    item:ReInit(self.rewardList[index])
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UICommonItemChange)
end

local function AddTimer(self,actListData)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action ,actListData , false,false,false)
    end
    self.timer:Start()
end

local function RefreshTime(self,actListData)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if actListData.endTime < curTime then
        self:DeleteTimer()
    else
        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(actListData.endTime - curTime))
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnBuyClick(self)
    if self.packageInfo then
        DataCenter.PayManager:CallPayment(self.packageInfo, UIWindowNames.UIBattlePassGiftPackagePopUp)
    elseif self.actListData.type == EnumActivity.SeasonPass.Type then
        if self.isGoto then
            GoToUtil.CloseAllWindows()
            GoToUtil.GoActWindow(self.actId)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonPassPackage, self.actId)
        else
            UIManager.Instance:DestroyWindow(UIWindowNames.UIBattlePassGiftPackagePopUp)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonPassPackage, self.actId) 
        end
    end
end

UIBattlePassGiftPackagePopUpView.OnCreate = OnCreate
UIBattlePassGiftPackagePopUpView.OnDestroy = OnDestroy
UIBattlePassGiftPackagePopUpView.ComponentDefine = ComponentDefine
UIBattlePassGiftPackagePopUpView.DataDefine = DataDefine
UIBattlePassGiftPackagePopUpView.DataDestroy = DataDestroy
UIBattlePassGiftPackagePopUpView.OnAddListener = OnAddListener
UIBattlePassGiftPackagePopUpView.OnRemoveListener = OnRemoveListener
UIBattlePassGiftPackagePopUpView.ReInit = ReInit
UIBattlePassGiftPackagePopUpView.RefreshSeasonPass = RefreshSeasonPass
UIBattlePassGiftPackagePopUpView.ShowCells = ShowCells
UIBattlePassGiftPackagePopUpView.ClearScroll = ClearScroll
UIBattlePassGiftPackagePopUpView.OnCreateCell = OnCreateCell
UIBattlePassGiftPackagePopUpView.OnDeleteCell = OnDeleteCell
UIBattlePassGiftPackagePopUpView.OnBuyClick = OnBuyClick
UIBattlePassGiftPackagePopUpView.OnEnable = OnEnable
UIBattlePassGiftPackagePopUpView.OnDisable = OnDisable
UIBattlePassGiftPackagePopUpView.ComponentDestroy = ComponentDestroy
UIBattlePassGiftPackagePopUpView.AddTimer = AddTimer
UIBattlePassGiftPackagePopUpView.RefreshTime = RefreshTime
UIBattlePassGiftPackagePopUpView.DeleteTimer = DeleteTimer
return UIBattlePassGiftPackagePopUpView