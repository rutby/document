---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local UIMasteryPopGiftView = BaseClass("UIMasteryPopGiftView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UICommonItemChange = require "UI.UICommonItem.UICommonItemChange"

local scroll_view_path = "Rect_Info/Rect_Gift/Rect_Right/ScrollView"

function UIMasteryPopGiftView:OnCreate()
    base.OnCreate(self)
    self._title_txt = self:AddComponent(UIText,"Rect_Info/Rect_Gift/Txt_Title")
    self._desc_txt = self:AddComponent(UIText,"Rect_Info/Rect_Gift/Txt_Desc")
    self._buy_btn = self:AddComponent(UIButton, "Rect_Info/Rect_Gift/Rect_Right/Btn_Buy")
    self._buy_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickBuyBtn()
    end)
    self._price_txt = self:AddComponent(UIText, "Rect_Info/Rect_Gift/Rect_Right/Btn_Buy/Txt_Price")
    self._left_time = self:AddComponent(UIText, "Rect_Info/Rect_Gift/Rect_Right/leftTime")

    self._pop_img = self:AddComponent(UIImage, "Rect_Info/Rect_Gift/Img_Pop")

    self._discount_txt = self:AddComponent(UIText, "Rect_Info/Rect_Discount/Txt_Discount")
    
    self.close_btn = self:AddComponent(UIButton, "Close")
    self.close_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    self.return_btn = self:AddComponent(UIButton, "Back")
    self.return_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)

    self.leftArrowN = self:AddComponent(UIButton, "Rect_Info/arrowL")
    self.leftArrowN:SetOnClick(function()
        self:OnClickArrowL()
    end)
    self.rightArrowN = self:AddComponent(UIButton, "Rect_Info/arrowR")
    self.rightArrowN:SetOnClick(function()
        self:OnClickArrowR()
    end)
    
    self.timer_action = function(temp)
        self:TimerAction()
    end
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)
end

function UIMasteryPopGiftView:OnDestroy()
    self:DeleteTimer()
    base.OnDestroy(self)
end

function UIMasteryPopGiftView:OnEnable()
    base.OnEnable(self)
    self:InitView()
end

function UIMasteryPopGiftView:OnDisable()
    base.OnDisable(self)
end

function UIMasteryPopGiftView:InitView()
    self.packageInfo = self:GetUserData()
    
    self.list = {}
    self.groupPackages = {}
    --获取所有专精礼包
    local masteryData = GiftPackageData.GetRechargeIdListByType(WelfareTagType.MasteryPop)
    if masteryData and masteryData[1] then
        local packagesArr = GiftPackageData.GetAllAvailablePackageByRechargeId(masteryData[1], true)
        if packagesArr and packagesArr[1] then
            self.groupPackages = packagesArr
        end
    end
    
    self:ShowPackage()
end

function UIMasteryPopGiftView:ShowPackage()
    self._title_txt:SetLocalText(self.packageInfo:getName())
    self._desc_txt:SetText(self.packageInfo:getDescText())
    self._price_txt:SetText(DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID()))

    self._pop_img:LoadSprite(string.format(LoadPath.UIMasteryEx, self.packageInfo:getPopupImageH()))

    self:ShowCells()

    self._discount_txt:SetText(string.format("%s%%", self.packageInfo:getPercent()))

    local curTime = UITimeManager:GetInstance():GetServerTime()
    local leftTime,b2 = math.modf(self.packageInfo:getEndTime() - curTime)
    self.remainTime = leftTime
    if leftTime >= 0 then
        self._left_time:SetLocalText(320192, UITimeManager:GetInstance():MilliSecondToFmtString(leftTime))
        self._buy_btn:SetInteractable(true)
    else
        self._left_time:SetLocalText(120077)
        self._buy_btn:SetInteractable(false)
    end
    if self.remainTime > 0 and self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
        self.timer:Start()
    end

    self.leftArrowN:SetActive(self.groupPackages and #self.groupPackages > 0 and self.groupPackages[1]:getID() ~= self.packageInfo:getID())
    self.rightArrowN:SetActive(self.groupPackages and #self.groupPackages > 0 and self.groupPackages[#self.groupPackages]:getID() ~= self.packageInfo:getID())
end

function UIMasteryPopGiftView:TimerAction()
    if self.remainTime >= 0 then
        if self._left_time then
            self._left_time:SetLocalText(320192, UITimeManager:GetInstance():MilliSecondToFmtString(self.remainTime))
        end
        self._buy_btn:SetInteractable(true)
    else
        if self._left_time then
            self._left_time:SetLocalText(120077)
        end
        self._buy_btn:SetInteractable(false)
        self:DeleteTimer()
    end
    self.remainTime = self.remainTime - 1000
end

function UIMasteryPopGiftView:DeleteTimer()
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

function UIMasteryPopGiftView:OnClickBuyBtn()
    self.ctrl:BuyGift(self.packageInfo)
end

function UIMasteryPopGiftView:OnClickArrowL()
    for i = 1 ,table.count(self.groupPackages) do
        if self.groupPackages[i]:getID() == self.packageInfo:getID() then
            if self.groupPackages[i-1] then
                self.packageInfo = self.groupPackages[i-1]
                break
            end
        end
    end
    self:ShowPackage()
end

function UIMasteryPopGiftView:OnClickArrowR()
    for i = 1 ,table.count(self.groupPackages) do
        if self.groupPackages[i]:getID() == self.packageInfo:getID() then
            if self.groupPackages[i+1] then
                self.packageInfo = self.groupPackages[i+1]
                break
            end
        end
    end
    self:ShowPackage()
end


function UIMasteryPopGiftView:ShowCells()
    self:ClearScroll()
    self:GetDataList()
    local count = table.count(self.list)
    if count > 0 then
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    end
end

function UIMasteryPopGiftView:ClearScroll()
    self.scroll_view:ClearCells()--清循环列表数据
    self.scroll_view:RemoveComponents(UICommonItemChange)--清循环列表gameObject
end

function UIMasteryPopGiftView:OnCellMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local item = self.scroll_view:AddComponent(UICommonItemChange, itemObj)
    item:ReInit(self.list[index])
    item:SetItemCount(self.list[index].count)
end

function UIMasteryPopGiftView:OnCellMoveOut(itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UICommonItemChange)
end

function UIMasteryPopGiftView:GetDataList()
    self.list = {}
    local info = self.packageInfo
    local diamondWorth = tonumber(info:getDiamond())
    if diamondWorth and diamondWorth > 0 then
        local param = {}
        param.rewardType = RewardType.GOLD
        param.count = diamondWorth
        table.insert(self.list,param)
    end

    -- 英雄
    local heroStr = info:getHeroesStr()
    if (not string.IsNullOrEmpty(heroStr)) then
        local arr = string.split(heroStr, ";")
        if (#arr == 2) then
            local param = {}
            param.rewardType = RewardType.HERO
            param.itemId = arr[1]
            param.count = arr[2]
            table.insert(self.list,param)
        end
    end

    -- 普通道具
    local str = info:getItemsStr()
    local _item_use = info:getItemUse()
    if _item_use ~= nil and _item_use ~= "" then
        str = str.."|".. _item_use
    end

    local arrMiddle = string.split(str,"|")
    if arrMiddle ~= nil and #arrMiddle > 0 then
        for k,v in ipairs(arrMiddle) do
            local arr = string.split(v,";")
            if arr[1] ~= "" then
                local param = {}
                param.rewardType = RewardType.GOODS
                param.itemId = arr[1]
                param.count = arr[2]
                table.insert(self.list,param)
            end
        end
    end

    --联盟礼物
    local arrAlliance = info:getAllianceGift()
    if arrAlliance ~= nil and #arrAlliance > 0 then
        for k,v in ipairs(arrAlliance) do
            local arr = string.split(v,";")
            if #arr > 4 then
                local param = {}
                param.rewardType = RewardType.GOODS
                param.iconName = string.format(LoadPath.UIAllianceGift, arr[1])
                param.itemName = arr[2]
                param.itemDes = arr[3]
                param.count = arr[4]
                param.itemColor = arr[5]
                table.insert(self.list,param)
            end
        end
    end
end




return UIMasteryPopGiftView