---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/13 18:49
---

local UIMasterySkillItem = BaseClass("UIMasterySkillItem", UIBaseContainer)
local base = UIBaseContainer
local UIMasterySkillBtn = require "UI.UIMasterySkill.Component.UIMasterySkillBtn"

local icon_path = "Icon"
local skill_btn_path = "SkillBtn"
local lock_path = "Lock"
local used_bg_path = "Icon/UsedBg"
local used_text_path = "Icon/UsedBg/UsedText"
local mask_path = "Icon/Mask"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.icon_btn = self:AddComponent(UIButton, icon_path)
    self.icon_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnIconClick()
    end)
    self.skill_btn = self:AddComponent(UIMasterySkillBtn, skill_btn_path)
    self.lock_go = self:AddComponent(UIBaseContainer, lock_path)
    self.used_bg_go = self:AddComponent(UIBaseContainer, used_bg_path)
    self.used_text = self:AddComponent(UIText, used_text_path)
    self.used_text:SetLocalText(100381)
    self.mask_image = self:AddComponent(UIImage, mask_path)
end

local function ComponentDestroy(self)
    self.icon_btn = nil
    self.skill_btn = nil
    self.lock_go = nil
    self.used_bg_go = nil
    self.used_text = nil
    self.mask_image = nil
end

local function DataDefine(self)
    self.skill = 0
    self.state = MasterySkillState.None
    self.endTime = 0
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
        self.timer:Start()
    end
end

local function DataDestroy(self)
    self.skill = nil
    self.state = nil
    self.endTime = nil
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MasteryUseSkill, self.OnMasteryUseSkill)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.MasteryUseSkill, self.OnMasteryUseSkill)
    base.OnRemoveListener(self)
end

local function SetData(self, skill)
    self.skill = skill
    self.skill_btn:SetData(skill)
    self:Refresh()
end

local function Refresh(self)
    local template = DataCenter.MasteryManager:GetTemplateBySkill(self.skill)
    local skillTemplate = DataCenter.MasteryManager:GetSkillTemplate(self.skill)
    if template == nil or skillTemplate == nil then
        return
    end
    
    self.state, self.endTime = DataCenter.MasteryManager:GetSkillState(self.skill)
    
    self.icon_btn:LoadSprite(LoadPath.UIMastery .. template.tempData:getValue("icon"))
    if self.state == MasterySkillState.Closed or self.state == MasterySkillState.NoUse then
        self.lock_go:SetActive(false)
        self.used_bg_go:SetActive(false)
        self.mask_image:SetActive(true)
        self.mask_image:SetFillAmount(1)
    elseif self.state == MasterySkillState.Normal then
        self.lock_go:SetActive(false)
        self.used_bg_go:SetActive(false)
        self.mask_image:SetActive(false)
    elseif self.state == MasterySkillState.Locked then
        self.lock_go:SetActive(true)
        self.used_bg_go:SetActive(false)
        self.mask_image:SetActive(false)
    elseif self.state == MasterySkillState.CD then
        self.lock_go:SetActive(false)
        self.used_bg_go:SetActive(true)
        self.mask_image:SetActive(true)
        self:TimerAction()
    end
end

local function TimerAction(self)
    if self.state == MasterySkillState.CD then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local restTime = self.endTime - curTime
        if restTime >= 0 then
            local skillTemplate = DataCenter.MasteryManager:GetSkillTemplate(self.skill)
            local percent = restTime / (skillTemplate:getValue("cd") * 1000)
            self.mask_image:SetFillAmount(percent)
        else
            self:Refresh()
        end
    end
end

local function OnIconClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMasterySkillIntro, self.skill)
end

local function OnMasteryUseSkill(self, skill)
    if self.skill == skill then
        self:Refresh()
    end
end

UIMasterySkillItem.OnCreate= OnCreate
UIMasterySkillItem.OnDestroy = OnDestroy
UIMasterySkillItem.ComponentDefine = ComponentDefine
UIMasterySkillItem.ComponentDestroy = ComponentDestroy
UIMasterySkillItem.DataDefine = DataDefine
UIMasterySkillItem.DataDestroy = DataDestroy
UIMasterySkillItem.OnEnable = OnEnable
UIMasterySkillItem.OnDisable = OnDisable
UIMasterySkillItem.OnAddListener = OnAddListener
UIMasterySkillItem.OnRemoveListener = OnRemoveListener

UIMasterySkillItem.SetData = SetData
UIMasterySkillItem.Refresh = Refresh
UIMasterySkillItem.TimerAction = TimerAction

UIMasterySkillItem.OnIconClick = OnIconClick

UIMasterySkillItem.OnMasteryUseSkill = OnMasteryUseSkill

return UIMasterySkillItem