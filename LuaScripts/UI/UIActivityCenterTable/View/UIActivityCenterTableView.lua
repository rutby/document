---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/10/20 18:09
---
local ActivityTabGroupCell = require "UI.UIActivityCenterTable.Component.ActivityTabGroupCell"
local UIPersonalArms = require "UI.UIActivityCenterTable.Component.UIPersonalArms"
local AllianceArms = require "UI.UIActivityCenterTable.Component.AllianceArms.AllianceArmsActivityMain"
local UISevenDay = require "UI.UIActivityCenterTable.Component.NoviceSevenDay.SevenDay"
local UISevenDayVip = require "UI.UIActivityCenterTable.Component.NoviceSevenDay.SevenDayVip"
local UIActivityEdenWar = require "UI.UIActivityCenterTable.Component.EdenWar.UIActivityEdenWar"
local LeadingQuest = require "UI.UIActivityCenterTable.Component.LeadingTarget.LeadingQuestMain"
local LeadingQuestOther = require "UI.UIActivityCenterTable.Component.LeadingTarget.LeadingQuestOther"
local RobotWarsMain = require "UI.UIActivityCenterTable.Component.RobotWars.RobotWarsMain"
local UIGloryPreview = require "UI.UIGlory.UIGloryMain.Component.UIGloryMainPreview"
local UICampScore = require "UI.UIGlory.UIGloryMain.Component.UICampScore"
local UIGloryMain = require "UI.UIGlory.UIGloryMain.Component.UIGloryMain"
local BarterShop = require "UI.UIActivityCenterTable.Component.BarterShop.BarterShopMain"
local ActWorldBoss = require "UI.UIActivityCenterTable.Component.ActBoss.ActWorldBoss"
local BarterShopNoticeMain = require "UI.UIActivityCenterTable.Component.BarterShopNotice.BarterShopNoticeMain"
local DigActivityMain = require "UI.UIActivityCenterTable.Component.Dig.DigActivityMain"
local SeasonPassMain = require "UI.UIActivityCenterTable.Component.SeasonPass.SeasonPassMain"
local ThroneMain = require "UI.UIActivityCenterTable.Component.Throne.ThroneMain"
local HeroGrowthMain = require "UI.UIActivityCenterTable.Component.HeroGrowth.HeroGrowthMain"
local UILuckyRoll = require "UI.UIActivityCenterTable.Component.UILuckyRoll.UILuckyRoll"
local UIBattlePass = require "UI.UIActivityCenterTable.Component.UIBattlePass.UIBattlePass"
local UIGolloesCards = require "UI.UIActivityCenterTable.Component.GolloesCards.UIGolloesCards"
local JigsawPuzzle = require "UI.UIActivityCenterTable.Component.JigsawPuzzle.JigsawPuzzleMain"
local AlContributeMain = require "UI.UIActivityCenterTable.Component.AlContribute.AlContributeMain"
local ActSevenDay = require "UI.UIActivityCenterTable.Component.UIActivitySevenDay.ActSevenDay"
local MonsterTower = require "UI.UIActivityCenterTable.Component.MonsterTower.UIMonsterTower"
local ChristmasCelebrateMain = require "UI.UIActivityCenterTable.Component.ChristmasCelebrate.ChristmasCelebrateMain"
local LuckyShopMain = require "UI.UIActivityCenterTable.Component.LuckyShop.LuckyShopMain"
local ActSevenLogin = require "UI.UIActivityCenterTable.Component.SevenLogin.ActSevenLogin"
local UIGiftBox = require "UI.UIActivityCenterTable.Component.GiftBox.UIGiftBox"
local UISeasonWeekCard = require "UI.UIActivityCenterTable.Component.SeasonWeekCard.UISeasonWeekCard"
local UISeasonRank = require "UI.UIActivityCenterTable.Component.SeasonRank.UISeasonRank"
local UIAllianceSeasonForce = require "UI.UIActivityCenterTable.Component.AllianceSeasonForce.UIAllianceSeasonForce"
local DecorationGiftPackage = require "UI.UIActivityCenterTable.Component.DecorationGiftPackage.DecorationGiftPackageMain"
local UIWorldTrend = require "UI.UIActivityCenterTable.Component.UIWorldTrend.UIWorldTrend"
local UIBlackKnightMain = require "UI.UIActivityCenterTable.Component.UIBlackKnight.UIBlackKnightMain"
local UIActivityDonateSoldier = require "UI.UIActivityCenterTable.Component.UIActivityDonateSoldier.UIActivityDonateSoldier"
local UIChaseDeer = require "UI.UIChaseDeer.UIChaseDeerAct.Component.UIChaseDeerAct"
local HeroEvolveMainView = require "UI.UIActivityCenterTable.Component.HeroEvolve.HeroEvolveMainView"
local UIPersonSeasonRank = require "UI.UIActivityCenterTable.Component.PersonSeasonRank.UIPersonSeasonRank"
local UIPresidentAuthorityMain = require "UI.UIActivityCenterTable.Component.PresidentAuthority.UIPresidentAuthorityMain"
local UIActivityALVSMain = require "UI.UIActivityCenterTable.Component.UIActivityALVSDonateSoldier.UIActivityALVSMain"
local UIScratchOffGame = require "UI.UIActivityCenterTable.Component.ScratchOffGame.ScratchOffGame"
local UIMining = require "UI.UIActivityCenterTable.Component.Mining.Mining"
local SeasonShop = require "UI.UIActivityCenterTable.Component.SeasonShop.SeasonShop"
local Mysterious = require "UI.UIActivityCenterTable.Component.Mysterious.Mysterious"
local UIAllianceActMine = require"UI.UIActivityCenterTable.Component.AllianceActMine.AllianceActMine"
local UIActivityAllianceBoss = require("UI.UIAllianceBoss.UIActivityAllianceBoss.UIActivityAllianceBoss")
local UIHeroTrial = require "UI.UIActivityCenterTable.Component.UIHeroTrial.UIHeroTrial"
local ActMastery = require "UI.UIMastery.Component.ActMastery"
local GolloBox = require "UI.UIActivityCenterTable.Component.GolloBox.GolloBox"
local UIDoubleSeasonScore = require "UI.UIActivityCenterTable.Component.UIDoubleSeasonScore.UIDoubleSeasonScore"
local UIActDragon = require "UI.UIActivityCenterTable.Component.ActDragon.UIActDragon"
local UIActDragonNotice = require "UI.UIActivityCenterTable.Component.ActDragon.UIActDragonNotice"
local UICrossDesert = require "UI.UIActivityCenterTable.Component.CrossServerDesert.UICrossDesert"
local MineCaveMain = require "UI.UIActivityCenterTable.Component.MineCave.MineCaveMain"--矿洞
local UIColonizeWarRank = require "UI.UIActivityCenterTable.Component.ColonizeWarRank.UIColonizeWarRank"
local UIEdenKill = require "UI.UIEdenKill.UIEdenKill"
local UIEdenCrossWar = require "UI.UIActivityCenterTable.Component.EdenCrossWar.UIEdenCrossWar"
local ActAllianceRecord = require "UI.UIActivityCenterTable.Component.ActAllianceRecord.ActAllianceRecord"
local UITurfWar = require "UI.UITurfWar.UITurfWar"
local UIChangeNameAndPic = require "UI.UIActivityCenterTable.Component.UIChangeNameAndPic.UIChangeNameAndPic"
local UICountryRating = require "UI.UIActivityCenterTable.Component.UICountryRating.UICountryRating"
local UIDrakeBoss = require "UI.UIActivityCenterTable.Component.UIDrakeBoss.UIDrakeBoss"
local DispatchTask = require "UI.UIActivityCenterTable.Component.DispatchTask.DispatchTask"
local UIActivityCenterTableView = BaseClass("UIActivityCenterTableView",UIBaseView)
local base = UIBaseView
local close_btn_path = "UICommonFullTop/CloseBtn"
local tabScrollView_path = "UICommonFullTop/Bg2/LeftScrollView"
local content_path = "UICommonFullTop/Bg2/LeftScrollView/Viewport/Content"
local rightContent_path = "UICommonFullTop/Bg2/RightView"
local titleTxt_path = "UICommonFullTop/imgTitle/Common_img_title/titleText"

local function OnCreate(self)
    base.OnCreate(self)
    self.ctrl:InitData()
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self.ctrl:CloseSelf()
    end)
    self.tabScrollViewN = self:AddComponent(UIScrollRect, tabScrollView_path)
    self.content = self:AddComponent(UIBaseContainer, content_path)
    self.rightContent = self:AddComponent(UIBaseContainer,rightContent_path)
    self.titleTxt = self:AddComponent(UITextMeshProUGUIEx, titleTxt_path)
    self.titleTxt:SetLocalText(241034)
    self.lastCurType = 0
    self.goID = 0 --跳转活动ID
    self.panelList = {}
    self.panelComponentList = {}
    self:ReInit()
    self.playSound = false
end

local function OnDestroy(self)
    local tempActId = self.ctrl:GetCurrentActivityId()
    DataCenter.ActivityListDataManager:SetActivityLastVisitTime(tempActId)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    --EventManager:GetInstance():Broadcast(EventId.OnQuestRedCountChanged)
    --self:SetAllCellDestroy()
    self:SetAllTabGroupDestory()
    self.rightContent = nil
    self.close_btn = nil
    self.lastCurType = 0
    self.goID = nil
    
    self.modelGroups = nil
    self.groupItems = nil
    self.groupDataList = nil
    self.loadedGroupNum = nil
    self.playSound = nil
    
    base.OnDestroy(self)
end



local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnPassDay, self.RefreshOnPassDay)
    self:AddUIListener(EventId.HeroEvolveChoose, self.OnRecvNewActivityInfoHandler)
    self:AddUIListener(EventId.HeroEvolveSuccess, self.OnHeroEvolve)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnPassDay, self.RefreshOnPassDay)
    self:RemoveUIListener(EventId.HeroEvolveChoose, self.OnRecvNewActivityInfoHandler)
    self:RemoveUIListener(EventId.HeroEvolveSuccess, self.OnHeroEvolve)
end

local function ReInit(self)
    --actParam活动内部参数    forceToFirst页签第一个
    self.goID, self.forceToFirst,self.actParam = self:GetUserData()
    if self.goID then
        self.goID = tonumber(self.goID)
    end
    --self:OnLeftRefresh()
    self:OnLeftRefreshNew()
    --self:RefreshRightContent()
end

local function RefreshOnPassDay(self)
    self.goID = self.ctrl:GetCurrentActivityId()
    if self.lastActivityId and self.panelComponentList[self.lastActivityId] then
        self.panelComponentList[self.lastActivityId]:SetActive(false)
        self.lastActivityId = nil
    end
    self:OnLeftRefreshNew()
end

local function OnLeftRefreshNew(self)
    self:SetAllTabGroupDestory()
    self.loadedGroupNum = 0
    
    self.groupDataList = self.ctrl:GetActivityGroupList(self.goID)

    self.groupItems = {}
    self.modelGroups = {}
    for i, v in ipairs(self.groupDataList) do
        self.modelGroups[v.tabGroup] = self:GameObjectInstantiateAsync(UIAssets.ActivityTabGroupItem, function(request)
            if request.isError then
                return
            end
            
            local go = request.gameObject
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.content.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = v.tabGroup
            local cell = self.content:AddComponent(ActivityTabGroupCell, go.name, v)
            cell:RefreshGroup(v)
            self.groupItems[v.tabGroup] = cell
        end)
    end
end

local function GotoActivityByExternal(self, tempActId)
    self.goID = tempActId
    self:SelectDefaultTab()
end

local function SelectDefaultTab(self)
    --CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
    
    local focusId, groupIndex, actIndex = self.ctrl:GetDefaultFocusActivity(self.groupDataList, self.goID, self.forceToFirst)
    self.forceToFirst = nil
    local tempInfo = self.ctrl:GetActivityDataById(focusId)
    self.groupItems[tempInfo.tabGroup]:SelectTab(focusId)
    TimerManager:GetInstance():DelayInvoke(function()
        self:LocateTab(groupIndex, actIndex, tempInfo.tabGroup, focusId)
    end, 0.1)
end

local function OnGroupCellLoadFinish(self)
    self.loadedGroupNum = self.loadedGroupNum + 1
    if self.loadedGroupNum == #self.groupDataList then
        self:SelectDefaultTab()
    end
end

local function SetAllTabGroupDestory(self)
    if self.content then
        self.content:RemoveComponents(ActivityTabGroupCell)
    end
    if self.modelGroups~=nil then
        for k,v in pairs(self.modelGroups) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end
--[=[
local function OnLeftRefresh(self)
    self:SetAllCellDestroy()

    self.modelactivity = {}
    self.buttonListActivity = {}
    self.panelList = {}
    self.panelComponentList = {}
    local commonList = self.ctrl:GetActivityIdList()
    if commonList ~= nil then
        local cellList = {}
        local firstCell
        for i = 1, table.length(commonList) do
            local activityId = commonList[i]
            --复制基础prefab，每次循环创建一次
            self.modelactivity[activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActivityListItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = activityId
                local cell = self.content:AddComponent(ActivityListItem,go.name,activityId)
                cell:SetData()
                self.buttonListActivity[activityId] = cell
                cellList[activityId] = cell

                if i == 1 then
                    firstCell = cell
                end

                if i == table.length(commonList) then
                    --当有跳转时优先跳转
                    for j = 1, i do
                        if self.goID == tonumber(commonList[j]) then
                            CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
                            self:LocateTab(j)
                            cellList[commonList[j]]:OnClick()
                            return
                        end
                    end
                    -- 优先选择有红点的
                    for j = 1, i do
                        if DataCenter.ActivityListDataManager:GetActivityRedDotCount(commonList[j]) > 0 then
                            CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
                            self:LocateTab(j)
                            cellList[commonList[j]]:OnClick()
                            return
                        end
                    end
                    -- 其次选择上次的
                    for j = 1, i do
                        if commonList[j] == DataCenter.ActivityListDataManager.lastVisitActivityId then
                            CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
                            self:LocateTab(j)
                            cellList[commonList[j]]:OnClick()
                            return
                        end
                    end
                    -- 最后选第一个
                    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
                    self:LocateTab(1)
                    firstCell:OnClick()
                end
            end)
        end
    end
end


local function SetAllCellDestroy(self)
    self.content:RemoveComponents(ActivityListItem)
    if self.modelactivity~=nil then
        for k,v in pairs(self.modelactivity) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
        for k,v in pairs(self.panelList) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

--]=]
local function LocateTab(self, groupIndex, tabIndex, groupId, actId)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.rectTransform)
    local contentSize = self.content.rectTransform.rect
    local srSize = self.tabScrollViewN.rectTransform.rect
    local tabSizeY = 219
    local groupSizeY = -5
    
    local targetPosY = 0
    for i, v in ipairs(self.groupDataList) do
        if i < groupIndex then
            targetPosY = targetPosY + groupSizeY + #v.activityList * tabSizeY
        elseif i == groupIndex then
            targetPosY = targetPosY + groupSizeY
            targetPosY = targetPosY + tabIndex * tabSizeY
            break
        end
    end
    local prog = 0
    if targetPosY > srSize.width then
        prog = (targetPosY - srSize.width) / (contentSize.width - srSize.width)
    end
    self.tabScrollViewN:SetHorizontalNormalizedPosition(prog)
    --if targetPosY > contentSize.width - srSize.width then
    --    targetPosY = contentSize.width - srSize.width
    --end
    --local needPos = Vector2.New(-targetPosY ,self.content.rectTransform.anchoredPosition.y)
    --self.content.rectTransform.anchoredPosition = needPos
    
    --self.groupItems[groupId]:SelectTab(actId)
end


local function RefreshRightContent(self)
    local currentActivity = self.ctrl:GetCurrentActivity()
    if currentActivity.type == self.lastCurType and currentActivity.activityId == self.lastActivityId then
        return
    end

    if self.playSound then
        SoundUtil.PlayEffect("Effect_common_switch")
    else
        self.playSound = true
    end
    
    --local tempActId = self.ctrl:GetCurrentActivityId()
    if self.lastActivityId then
        DataCenter.ActivityListDataManager:SetActivityLastVisitTime(self.lastActivityId)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
    
    --取消上一次选中
    local tempComp = nil
    if self.lastCurType ~= 0 and currentActivity.activityId ~= self.lastActivityId then
        --self.panelComponentList[self.lastCurType]:SetActive(false)
        tempComp = self.panelComponentList[self.lastActivityId]
    end
    self.lastCurType = currentActivity.type
    self.lastActivityId = currentActivity.activityId
    if currentActivity.type == EnumActivity.BarterShopNotice.Type then
        --兑换活动说明
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end

        local prefabName = string.IsNullOrEmpty(currentActivity.activity_pic) and "BarterShopNotice" or currentActivity.activity_pic
        local tempPath = string.format("Assets/Main/Prefab_Dir/UI/ActivityCenter/BarterShopNotice/%s.prefab", prefabName)
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(tempPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(BarterShopNoticeMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.DigActivity.Type then
        --挖掘活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.DigActivityMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(DigActivityMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.Throne.Type then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ThroneMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ThroneMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.SeasonPass.Type then
        --挖掘活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.SeasonPassMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(SeasonPassMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.HeroGrowth.Type then
        --英雄试炼
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local assetPath = UIAssets.HeroGrowthMain
        local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.id)
        if actListData.sub_type == 2 then
            assetPath = UIAssets.HeroGrowthMain_Box
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(HeroGrowthMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.ChristmasCelebrate.Type then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ChristmasCelebrateMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ChristmasCelebrateMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.AllianceCompete.Type then
        --联盟军备
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:RefreshAll()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceArms, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(AllianceArms,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:InitUI()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.Arms then
        --个人军备
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id,self.actParam)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local assetPath = UIAssets.PersonalArms
        local permanentData = DataCenter.ActPersonalArmsInfo:GetPermanentAct()
        local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.id)
        if permanentData and next(permanentData) and actListData.personalEventType ~= PersonalEventType.Kill then
            assetPath = UIAssets.PersonalArmsNew
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIPersonalArms,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id,self.actParam)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.SevenDay then
        --七日活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SendData()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local path = UIAssets.UIActivitySevenDay
        local script = UISevenDay
        if LuaEntry.DataConfig:CheckSwitch("dayact_vip") then
            path = UIAssets.UIActivitySevenDayVip
            script = UISevenDayVip
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(path, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(script,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SendData()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.LeadingQuest.Type then
        --战力提升活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.activityId)
        if activityInfo ~= nil then
            if activityInfo.sub_type == ActivityEnum.ActivitySubType.DrakeBoss then
                self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIDrakeBoss, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject
                    go.transform:SetParent(self.rightContent.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go.transform:Set_sizeDelta(0, 0)
                    go.transform:Set_anchoredPosition(0, 0)
                    go.name = currentActivity.activityId
                    local cell = self.rightContent:AddComponent(UIDrakeBoss,go.name)
                    self.panelComponentList[currentActivity.activityId] = cell
                    self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
                    self.panelComponentList[currentActivity.activityId]:SetActive(true)
                    
                    if tempComp then
                        tempComp:SetActive(false)
                    end
                end)
            else
                local assetPath = string.IsNullOrEmpty(activityInfo.activity_pic) and UIAssets.LeadingQuest or ("Assets/Main/Prefab_Dir/UI/ActivityCenter/LeadingQuest/LeadingQuestMain_" .. activityInfo.activity_pic .. ".prefab")
                self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject;
                    go.transform:SetParent(self.rightContent.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go.transform:Set_sizeDelta(0, 0)
                    go.transform:Set_anchoredPosition(0, 0)
                    go.name = currentActivity.activityId
                    local cell = self.rightContent:AddComponent(LeadingQuest,go.name)
                    self.panelComponentList[currentActivity.activityId] = cell
                    self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
                    self.panelComponentList[currentActivity.activityId]:SetActive(true)
                    
                    if tempComp then
                        tempComp:SetActive(false)
                    end
                end)
            end
        end
    elseif currentActivity.type == EnumActivity.RobotWars.Type then
        --赛季活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, { showPreviewGo = true })
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
        local uiAssetPath
        local script
        local actData = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.activityId)
        if seasonId > 2 then
        --if actData:HasGloryAct() then
            uiAssetPath = "Assets/Main/Prefabs/UI/UIGlory/UIGloryMain/UIGloryMain.prefab"
            script = UIGloryMain
        else
            uiAssetPath = string.format(UIAssets.RobotWars, seasonId)
            script = RobotWarsMain
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(uiAssetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(script, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, { showPreviewGo = true })
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.GloryPreview then
        -- S3星球大战预告
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, { showPreviewGo = false })
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIGloryPreview, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIGloryPreview, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, { showPreviewGo = false })
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            cell:SetSeasonId()

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceActMine then   --活动联盟矿
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceActMine, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIAllianceActMine, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.EdenAllianceActMine then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceActMine, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIAllianceActMine, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.EdenAllianceCrossActMine then
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceActMine, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIAllianceActMine, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.JigsawPuzzle.Type then
        --拼图活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.JigsawPuzzle, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(JigsawPuzzle,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.AlContribute.Type then
        --拼图活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AlContributeMain, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(AlContributeMain,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.BarterShop.Type then
        --兑换活动
        local acrBarterInfo = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.id)
        if acrBarterInfo.SetIsNew then
            acrBarterInfo:SetIsNew(false)
        end
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local prefabName = string.IsNullOrEmpty(acrBarterInfo.activity_pic) and "BarterShopMain" or acrBarterInfo.activity_pic
        --UI不是Main的话都是皮肤兑换活动
        local tempPath = string.format("Assets/Main/Prefab_Dir/UI/ActivityCenter/BarterShop/%s.prefab", prefabName)
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(tempPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(BarterShop,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.EdenWar then
        --世界争霸
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActivityEdenWar, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform.localScale = ResetScale
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActivityEdenWar,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.WorldBoss then
        --世界 Boss
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ReInit(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActivityPirates, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ActWorldBoss,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ReInit(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.LuckyRoll then
        --幸运转盘
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.LuckyRoll, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UILuckyRoll,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.DispatchTask.Type then
        --幸运转盘
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActivityDispatchTask, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(DispatchTask,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ScratchOffGame then
        --刮刮乐
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ScratchOffGame, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIScratchOffGame,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.BattlePass then
        --战令
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIBattlePass, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIBattlePass,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.GolloesCards then
        --翻牌子
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIGolloesCards, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIGolloesCards,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ActSevenDay then
        --七日活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        if currentActivity.sub_type == 3 then  --英雄试炼
            self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.HeroTrial, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.transform:SetParent(self.rightContent.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.transform:Set_sizeDelta(0, 0)
                go.transform:Set_anchoredPosition(0, 0)
                go.name = currentActivity.activityId
                local cell = self.rightContent:AddComponent(UIHeroTrial, go.name)
                self.panelComponentList[currentActivity.activityId] = cell
                self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
                self.panelComponentList[currentActivity.activityId]:SetActive(true)
                if tempComp then
                    tempComp:SetActive(false)
                end
            end)
        else
            local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.activityId)
            local assetPath = string.IsNullOrEmpty(activityInfo.activity_pic) and UIAssets.UIActivitySevenDay or UIAssets.UIActSevenDayNew
            self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.transform:SetParent(self.rightContent.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = currentActivity.activityId
                local cell = self.rightContent:AddComponent(ActSevenDay,go.name)
                self.panelComponentList[currentActivity.activityId] = cell
                self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
                self.panelComponentList[currentActivity.activityId]:SetActive(true)

                if tempComp then
                    tempComp:SetActive(false)
                end
            end)
        end
    elseif currentActivity.type == ActivityEnum.ActivityType.MonsterTower then
        --怪物爬塔
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local prefabName = string.IsNullOrEmpty(currentActivity.activity_pic) and "UIMonsterTower" or currentActivity.activity_pic
        local tempPath = string.format(UIAssets.UIMonsterTower, prefabName)
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(tempPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(MonsterTower,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.LuckyShop then
        --幸运商店
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UILuckyShop, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(LuckyShopMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ActSevenLogin then
        --七日登陆
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.SevenLogin, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ActSevenLogin, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.GiftBox then
        --礼盒
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIGiftBox, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIGiftBox, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.SeasonWeekCard then
        --赛季周卡
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UISeasonWeekCard, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UISeasonWeekCard, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.SeasonRank then
        --赛季打地块排行榜 个人
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UISeasonRank, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UISeasonRank, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceSeasonForce then
        --赛季积分排行榜 联盟
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIAllianceSeasonForce, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIAllianceSeasonForce, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.DecorationGiftPackage then
        --皮肤礼包活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIDecorationGiftPackage, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(DecorationGiftPackage, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.WorldTrend then
        --天下大势
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIWorldTrend, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIWorldTrend, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.BlackKnight then
        --黑骑士活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIBlackKnight, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIBlackKnightMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.DonateSoldierActivity then
        --捐兵活动 先判断是否有联盟
        local allianceId = LuaEntry.Player.allianceId
        if allianceId~=nil and allianceId~="" then
            if self.panelComponentList[currentActivity.activityId] then
                self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
                self.panelComponentList[currentActivity.activityId]:SetActive(true)
                if tempComp then
                    tempComp:SetActive(false)
                end
                return
            end
            self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.DonateSoldierPrefabPath, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.transform:SetParent(self.rightContent.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = currentActivity.activityId
                local cell = self.rightContent:AddComponent(UIActivityDonateSoldier, go.name)
                self.panelComponentList[currentActivity.activityId] = cell
                self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
                self.panelComponentList[currentActivity.activityId]:SetActive(true)
                if tempComp then
                    tempComp:SetActive(false)
                end
            end)

            DataCenter.ActivityDonateSoldierManager:SetIsNew(false)
            EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
        end
    elseif currentActivity.type == ActivityEnum.ActivityType.ChaseDeer then
        -- 群雄逐鹿
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIChaseDeer, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIChaseDeer, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.HeroEvolve then
        if CommonUtil.CheckIsLessThanTargetVersion("1.250.231") then
            UIUtil.ShowVersionMessage()
            return
        end
        --英雄特训
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.HeroEvolve, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(HeroEvolveMainView, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.PersonSeasonRank then
        --个人势力排行榜
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIPersonSeasonRank, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIPersonSeasonRank, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.PresidentAuthority then
        --总统特权
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end

        local tempPath = UIAssets.PresidentAuthority
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(tempPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIPresidentAuthorityMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ALVSDonateSoldier then
        -- 新捐兵活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ALVSDonateSoldierPrefabPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActivityALVSMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)

        DataCenter.ActivityALVSDonateSoldierManager:SetIsNew(false)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    elseif currentActivity.type == ActivityEnum.ActivityType.ScratchOffGame then
        --刮刮乐
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.ScratchOffGame, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIScratchOffGame,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.Mining then
        --矿产大亨
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.Mining, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIMining,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.SeasonShop then
        --赛季商店
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.SeasonShop, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(SeasonShop,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.Mysterious then
        --数字寻宝
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.Mysterious, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(Mysterious,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceBoss then
        --联盟boss活动
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.AllianceBossPrefabPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActivityAllianceBoss, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
        DataCenter.AllianceBossManager:SetIsNew(false)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceOccupy then
        --联盟占领
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(currentActivity.activityId)
        local assetPath ="Assets/Main/Prefab_Dir/UI/ActivityCenter/LeadingQuest/LeadingQuestMain_" .. activityInfo.activity_pic .. ".prefab"
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(LeadingQuestOther,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.Mastery then
        -- 专精手册
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        local assetPath ="Assets/Main/Prefab_Dir/UI/UIMastery/ActMastery.prefab"
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(assetPath, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ActMastery, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.GolloBox then
        -- 咕噜专精
        if self.panelList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.GolloBox, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(GolloBox,go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)

            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.DoubleSeasonScore then
        --双倍赛季积分活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIDoubleSeasonScore, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIDoubleSeasonScore, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ActDragon then
        --巨龙活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActDragon, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActDragon, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.DragonNotice then
        --巨龙活动预告
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIActDragonNotice, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIActDragonNotice, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.CrossDesert then
        --跨服打地
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ShowPanel(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UICrossDesert, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UICrossDesert, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ShowPanel(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == EnumActivity.MineCave.Type then
        --矿脉增殖
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.MineCave, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.transform:Set_sizeDelta(0, 0)
            go.transform:Set_anchoredPosition(0, 0)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(MineCaveMain, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ColonizeWarRank then
        --殖民战争排行榜
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIColonizeWarRank, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIColonizeWarRank, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.CampScore then
        --阵营积分

        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UICampScore, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UICampScore, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId,currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.EdenKill then
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIEdenKill, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIEdenKill, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.TurfWar then
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UITurfWar, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UITurfWar, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.CrossCityWar then
        -- 伊甸园杀敌
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIEdenCrossWar, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIEdenCrossWar, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.AllianceCityRecord then
        -- 伊甸园杀敌
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.RuinsKillingEnemy, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(ActAllianceRecord, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.ChangeNameAndPic then
        -- 改名/换头像活动
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.UIChangeNameAndPic, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UIChangeNameAndPic, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:ReInit()
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    elseif currentActivity.type == ActivityEnum.ActivityType.CountryRating then
        -- 国家评分
        if self.panelComponentList[currentActivity.activityId] then
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            if tempComp then
                tempComp:SetActive(false)
            end
            return
        end
        self.panelList[currentActivity.activityId] = self:GameObjectInstantiateAsync(UIAssets.CountryRating, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject
            go.transform:SetParent(self.rightContent.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            go.name = currentActivity.activityId
            local cell = self.rightContent:AddComponent(UICountryRating, go.name)
            self.panelComponentList[currentActivity.activityId] = cell
            self.panelComponentList[currentActivity.activityId]:SetData(currentActivity.activityId, currentActivity.id)
            self.panelComponentList[currentActivity.activityId]:SetActive(true)
            cell.rectTransform.anchoredPosition = Vector2.zero
            cell.rectTransform.sizeDelta = Vector2.zero
            if tempComp then
                tempComp:SetActive(false)
            end
        end)
    end
end


local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnActivityItemClick(self,id)
    local oldId = self.ctrl:GetCurrentActivityId()
    
    local oldGroup = nil
    local newGroup = nil
    if tonumber(oldId) ~= tonumber(id) then
        for i, v in ipairs(self.groupDataList) do
            for m, n in ipairs(v.activityList) do
                if n.id == oldId then
                    oldGroup = v.tabGroup
                end
                if n.id == id then
                    newGroup = v.tabGroup
                end
            end
            if oldGroup and newGroup then
                break
            end
        end

        if oldGroup then
            self.groupItems[oldGroup]:SetUnSelect(oldId)
        end
        self.groupItems[newGroup]:SetSelect(id)
        
        self.ctrl:SetCurrentActivityId(id)
    end
    self:RefreshRightContent()
    DataCenter.ActivityListDataManager:SetLastVisitedActivityId(id)--lastVisitActivityId = id
    DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.OpenActivityPanel,tostring(id))
end

local function OnRecvNewActivityInfoHandler(self)
    self.goID = self.ctrl:GetCurrentActivityId()
    self:OnLeftRefreshNew()
end

local function OnHeroEvolve(self)
    self.goID = self.ctrl:GetCurrentActivityId()
    self:OnLeftRefreshNew()
end

--活动界面内跳转
local function JumpAct(self,goID,actParam)
    local focusId, groupIndex, actIndex = self.ctrl:GetDefaultFocusActivity(self.groupDataList, goID)
    local tempInfo = self.ctrl:GetActivityDataById(focusId)
    self.actParam = actParam
    self.groupItems[tempInfo.tabGroup]:SelectTab(focusId)
    TimerManager:GetInstance():DelayInvoke(function()
        self:LocateTab(groupIndex, actIndex, tempInfo.tabGroup, focusId)
    end, 0.1)
end

UIActivityCenterTableView.OnCreate = OnCreate
UIActivityCenterTableView.OnDestroy = OnDestroy
UIActivityCenterTableView.OnLeftRefresh = OnLeftRefresh
UIActivityCenterTableView.RefreshRightContent = RefreshRightContent
UIActivityCenterTableView.OnEnable = OnEnable
UIActivityCenterTableView.OnDisable = OnDisable
UIActivityCenterTableView.ReInit = ReInit
UIActivityCenterTableView.RefreshOnPassDay = RefreshOnPassDay
UIActivityCenterTableView.OnAddListener = OnAddListener
UIActivityCenterTableView.OnRemoveListener = OnRemoveListener
UIActivityCenterTableView.OnLeftRefreshNew = OnLeftRefreshNew
UIActivityCenterTableView.GotoActivityByExternal = GotoActivityByExternal
UIActivityCenterTableView.SelectDefaultTab = SelectDefaultTab
UIActivityCenterTableView.OnGroupCellLoadFinish = OnGroupCellLoadFinish
UIActivityCenterTableView.SetAllTabGroupDestory = SetAllTabGroupDestory
UIActivityCenterTableView.OnActivityItemClick = OnActivityItemClick
UIActivityCenterTableView.SetAllCellDestroy = SetAllCellDestroy
UIActivityCenterTableView.LocateTab = LocateTab
UIActivityCenterTableView.OnRecvNewActivityInfoHandler = OnRecvNewActivityInfoHandler
UIActivityCenterTableView.OnHeroEvolve = OnHeroEvolve
UIActivityCenterTableView.JumpAct = JumpAct

return UIActivityCenterTableView