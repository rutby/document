---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/1/19 16:55
---

local base = UIBaseContainer--Variable
local UIGolloesCardsShopCell = BaseClass("UIGolloesCardsShopCell", base)--Variable
local Localization = CS.GameEntry.Localization
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local RewardUtil = require "Util.RewardUtil"

local goodsItem_path = "Bg/Offset/UICommonItem"
local goodsName_path = "Bg/Offset/name"
local limitLayout_path = "Bg/Offset/limitLayout"
local limitTxt_path = "Bg/Offset/limitLayout/limit"
local limitTimes_path = "Bg/Offset/limitLayout/limitNum"
local soldOut_path = "Bg/Offset/soldOut"
local buyBtn_path = "Bg/Offset/buyBtn"
local price_path = "Bg/Offset/buyBtn/price"
local consumeIcon_path = "Bg/Offset/buyBtn/price/icon"
local needVip_path = "Bg/Offset/needVip"
local discountBg_path = "Bg/Offset/discountBg"
local discount_path = "Bg/Offset/discountBg/discount"
local buyFreeBtn_path = "Bg/Offset/buyBtnFree"
local buyFreeBtnTxt_path = "Bg/Offset/buyBtnFree/priceFree"
local buyFreeRed_path = "Bg/Offset/buyBtnFree/redDot"
local redSwitch = "Bg/Offset/redSwitch"
local redSwitchTxt = "Bg/Offset/redSwitch/redSwitchTxt"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.goodsItemN = self:AddComponent(UICommonItem, goodsItem_path)
    self.goodsNameN = self:AddComponent(UITextMeshProUGUIEx, goodsName_path)
    self.limitTimesN = self:AddComponent(UITextMeshProUGUIEx, limitTimes_path)
    self.limitTxtN = self:AddComponent(UITextMeshProUGUIEx, limitTxt_path)
    self.limitLayoutN = self:AddComponent(UIBaseContainer, limitLayout_path)
    self.soldOutN = self:AddComponent(UITextMeshProUGUIEx, soldOut_path)
    self.soldOutN:SetLocalText(320268)
    self.buyBtnN = self:AddComponent(UIButton, buyBtn_path)
    self.buyBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.priceN = self:AddComponent(UITextMeshProUGUIEx, price_path)
    self.consumeIconN = self:AddComponent(UIImage, consumeIcon_path)
    self.needVipN = self:AddComponent(UITextMeshProUGUIEx, needVip_path)
    self.discountN = self:AddComponent(UITextMeshProUGUIEx, discount_path)
    self.discountBgN = self:AddComponent(UIImage, discountBg_path)
    self.buyFreeBtnN = self:AddComponent(UIButton, buyFreeBtn_path)
    self.buyFreeBtnN:SetOnClick(function()
        self:OnClickBuyBtn()
    end)
    self.buyFreeBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, buyFreeBtnTxt_path)
    self.buyFreeBtnTxtN:SetLocalText(130126)
    self.buyFreeRedN = self:AddComponent(UIBaseContainer, buyFreeRed_path)
    
    self.redSwitchTogN = self:AddComponent(UIToggle,redSwitch)
    self.redSwitchTogN:SetActive(true)
    self.redSwitchTogN:SetOnValueChanged(function(isShow)
        self:SetRedSwitchSetting(isShow)
    end)
    self.redSwitchTxtN = self:AddComponent(UITextMeshProUGUIEx,redSwitchTxt)
    self.redSwitchTxtN:SetLocalText(302086)
end

local function ComponentDestroy(self)
    self.goodsItemN = nil
    self.goodsNameN = nil
    self.limitTimesN = nil
    self.limitTxtN = nil
    self.limitLayoutN = nil
    self.soldOutN = nil
    self.buyBtnN = nil
    self.priceN = nil
    self.consumeIconN = nil
    self.needVipN = nil
    self.discountN = nil
end

local function DataDefine(self)
    self.goodsConf = nil
end

local function DataDestroy(self)
    self.goodsConf = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateOneCommonShopGoods, self.RefreshAll)
    self:AddUIListener(EventId.UpdateGold, self.RefreshAll)
    self:AddUIListener(EventId.OnBuyCommonGoodsSucc, self.OnBuySuccCallBack)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateOneCommonShopGoods, self.RefreshAll)
    self:RemoveUIListener(EventId.UpdateGold, self.RefreshAll)
    self:RemoveUIListener(EventId.OnBuyCommonGoodsSucc, self.OnBuySuccCallBack)
    base.OnRemoveListener(self)
end

local function GetRedSwitchSetting(self,goodsConf)
    local key = "GolloesCardShopCellS_"..self.goodsConf.itemId..self.goodsConf.costNum.. LuaEntry.Player.uid
    --折扣道具默认打开兑换提示
    if goodsConf.discount and goodsConf.discount > 0 then
        return CS.GameEntry.Setting:GetBool(key, true)
    else
        return CS.GameEntry.Setting:GetBool(key, false)
    end
end

local function SetRedSwitchSetting(self, status)
    local temp = status and true or false
    local key = "GolloesCardShopCellS_"..self.goodsConf.itemId..self.goodsConf.costNum.. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetBool(key, temp)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    EventManager:GetInstance():Broadcast(EventId.ActGolloesCardRed)
end

local function SetItem(self, goodsConf)
    self.goodsConf = goodsConf
    local showRed = self:GetRedSwitchSetting(self.goodsConf)
    self.redSwitchTogN:SetIsOn(showRed)
    self:RefreshAll()
end

local function OnBuySuccCallBack(self, goodsId)
    if self.goodsConf and goodsId == self.goodsConf.id then
        local rewardType = RewardType.GOODS
        local itemId = self.goodsConf.itemId
        if string.IsNullOrEmpty(itemId)  then
            rewardType = RewardType.HERO
            itemId = self.goodsConf.hero
        end
        local pic =RewardUtil.GetPic(rewardType,itemId)
        local img = self.goodsItemN.item_icon
        if pic~="" then
            UIUtil.DoFly(tonumber(rewardType),1,pic,img.transform.position,Vector3.New(0,0,0))
        end
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    EventManager:GetInstance():Broadcast(EventId.ActGolloesCardRed)
end

local function RefreshAll(self, goodsId)
    if not self.goodsConf then
        return
    end
    
    local param = {}
    if not string.IsNullOrEmpty(self.goodsConf.itemId) then
        param = {
            rewardType = RewardType.GOODS,
            itemId = self.goodsConf.itemId,
            count = self.goodsConf.itemNum
        }
    else
        param = {
            rewardType = RewardType.HERO,
            itemId = self.goodsConf.hero,
            count = self.goodsConf.itemNum
        }
    end
    self.goodsItemN:ReInit(param)

    if not string.IsNullOrEmpty(self.goodsConf.itemId) then
        local itemName = DataCenter.ItemTemplateManager:GetName(self.goodsConf.itemId)
        self.goodsNameN:SetText(itemName)
    else
        local heroName = HeroUtils.GetHeroNameByConfigId(self.goodsConf.hero)
        self.goodsNameN:SetText(heroName)
    end
    
    self.limitLayoutN:SetActive(false)
    self.buyBtnN:SetActive(false)
    self.buyFreeBtnN:SetActive(false)
    self.soldOutN:SetActive(false)
    self.needVipN:SetActive(false)
    self.discountBgN:SetActive(false)

    if self.goodsConf.discount and self.goodsConf.discount > 0 then
        self.discountBgN:SetActive(true)
        self.discountN:SetText("-" .. math.modf(self.goodsConf.discount) .. "%")
        if self.goodsConf.discount <= 30 then
            self.discountBgN:LoadSprite("Assets/Main/Sprites/UI/Common/New/UICommon_bg_hot_green.png")
        elseif self.goodsConf.discount < 60 then
            self.discountBgN:LoadSprite("Assets/Main/Sprites/UI/Common/New/UICommon_bg_hot_yellow.png")
        else
            self.discountBgN:LoadSprite("Assets/Main/Sprites/UI/Common/New/UICommon_bg_hot_red.png")
        end
    end

    if self.goodsConf.vipLevel and self.goodsConf.vipLevel > 0 then
        local vipInfo = DataCenter.VIPManager:GetVipData()
        if vipInfo and self.goodsConf.vipLevel > vipInfo.level then
            self.needVipN:SetActive(true)
            self.needVipN:SetText(Localization:GetString("104210", self.goodsConf.vipLevel))
            return
        end
    end

    if self.goodsConf.maxTimes and self.goodsConf.maxTimes > 0 then
        local goodsInfo = DataCenter.CommonShopManager:GetGoodsInfoById(self.goodsConf.shopType, self.goodsConf.id)
        local boughtTimes = goodsInfo and goodsInfo.boughtTimes or  0
        
        if boughtTimes < self.goodsConf.maxTimes then
            self.limitLayoutN:SetActive(true)
            self.limitTxtN:SetLocalText(391039,self.goodsConf.maxTimes - boughtTimes)
            --self.limitTimesN:SetText(self.goodsConf.maxTimes - boughtTimes)
            
            -- 阿语把数字放前面
            if Localization.Language == CS.GameFramework.Localization.Language.Arabic then
                self.limitTimesN.transform:SetAsFirstSibling()
            else
                self.limitTimesN.transform:SetAsLastSibling()
            end
        else
            self.limitLayoutN:SetActive(false)
            self.soldOutN:SetActive(true)
            return
        end
    end
    
    local resType = RewardToResType[self.goodsConf.currencyType]
    if self.goodsConf.costNum > 0 then
        self.buyBtnN:SetActive(true)
        self.buyFreeBtnN:SetActive(false)
        
        self.priceN:SetActive(true)
        if resType and resType == ResourceType.Gold then
            self.priceN:SetText(string.GetFormattedSeperatorNum(self.goodsConf.costNum))
        else
            self.priceN:SetText(string.GetFormattedStr(self.goodsConf.costNum))
        end
        self:SetConsumeIcon()
        if self:CheckCostEnough(false) then
            self.priceN:SetColor(WhiteColor)

        else
            self.priceN:SetColor(RedColor)
            
            
        end
    else
        self.buyBtnN:SetActive(false)
        self.buyFreeBtnN:SetActive(true)
    end

end

local function SetConsumeIcon(self)
    local resType = RewardToResType[self.goodsConf.currencyType]
    if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
        self.consumeIconN:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(RewardToResType[self.goodsConf.currencyType]))
    else
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.goodsConf.currencyId)
        self.consumeIconN:LoadSprite(string.format(LoadPath.ItemPath, goods.icon))
    end
end

local function OnClickBuyBtn(self)
    local param = {}
    param.goodsInfo = {}
    if not string.IsNullOrEmpty(self.goodsConf.itemId) then
        param.goodsInfo.rewardType = RewardType.GOODS
        param.goodsInfo.itemId = self.goodsConf.itemId
        param.goodsInfo.count = self.goodsConf.itemNum

        local goodsInfo = DataCenter.CommonShopManager:GetGoodsInfoById(self.goodsConf.shopType, self.goodsConf.id)
        local boughtTimes = goodsInfo and goodsInfo.boughtTimes or  0
        local limit = self.goodsConf.maxTimes - boughtTimes
        limit = math.max(limit, 0)


        param.goodsInfo.limitCount = limit == 0 and 9999 or limit
        param.goodsInfo.eachPrice = self.goodsConf.costNum
    else
        param.goodsInfo.rewardType = RewardType.HERO
        param.goodsInfo.itemId = self.goodsConf.hero
        param.goodsInfo.count = self.goodsConf.itemNum
    end
    param.consumeInfo = {}
    param.consumeInfo.currencyType = self.goodsConf.currencyType
    param.consumeInfo.currencyId = self.goodsConf.currencyId
    param.callback = function(buyCount)
        self:ProcessPurchase(buyCount)
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMultiBuy,NormalBlurPanelAnim, param)
end

local function ProcessPurchase(self, buyCount)
    if not self:CheckCostEnough(true) then
        return
    end
    self.cacheBuyCount = buyCount
    SFSNetwork.SendMessage(MsgDefines.BuyCommonShopGoods, self.goodsConf.id, nil, buyCount)
end


local function CheckCostEnough(self, showTip)
    local resType = RewardToResType[self.goodsConf.currencyType]
    if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
        if resType == ResourceType.Gold then
            if LuaEntry.Player.gold < self.goodsConf.costNum then
                if showTip then
                    GoToUtil.GotoPayTips()
                end
                return false
            end
        else
            local cnt = LuaEntry.Resource:GetCntByResType(resType)
            if cnt < self.goodsConf.costNum then
                if showTip then
                    local lackTab = {}
                    local param = {}
                    param.type = ResLackType.Res
                    param.id = resType
                    param.targetNum = self.goodsConf.costNum
                    table.insert(lackTab,param)
                    GoToResLack.GoToItemResLackList(lackTab)
                end
                return false
            end
        end
    else
        local curNum = DataCenter.ItemData:GetItemCount(self.goodsConf.currencyId)
        if curNum < self.goodsConf.costNum then
            if showTip then
                UIUtil.ShowTipsId(GameDialogDefine.NO_ITEM)
            end
            return false
        end
    end
    return true
end


UIGolloesCardsShopCell.OnCreate = OnCreate
UIGolloesCardsShopCell.OnDestroy = OnDestroy
UIGolloesCardsShopCell.OnAddListener = OnAddListener
UIGolloesCardsShopCell.OnRemoveListener = OnRemoveListener
UIGolloesCardsShopCell.GetRedSwitchSetting = GetRedSwitchSetting
UIGolloesCardsShopCell.SetRedSwitchSetting = SetRedSwitchSetting
UIGolloesCardsShopCell.ComponentDefine = ComponentDefine
UIGolloesCardsShopCell.ComponentDestroy = ComponentDestroy
UIGolloesCardsShopCell.DataDefine = DataDefine
UIGolloesCardsShopCell.DataDestroy = DataDestroy

UIGolloesCardsShopCell.SetItem = SetItem
UIGolloesCardsShopCell.RefreshAll = RefreshAll
UIGolloesCardsShopCell.SetConsumeIcon = SetConsumeIcon
UIGolloesCardsShopCell.CheckCostEnough = CheckCostEnough
UIGolloesCardsShopCell.OnClickBuyBtn = OnClickBuyBtn
UIGolloesCardsShopCell.ProcessPurchase = ProcessPurchase
UIGolloesCardsShopCell.OnBuySuccCallBack = OnBuySuccCallBack


return UIGolloesCardsShopCell