---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---

local UIGolloesCards = BaseClass("UIGolloesCards", UIBaseView)
local base = UIBaseContainer
local UIGolloesCardsCell = require "UI.UIActivityCenterTable.Component.GolloesCards.UIGolloesCardsCell"
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray
local str = {[1] = 372332,[2] = 372333,[3] = 372334}
local img_bg = {[1] = "UIgolo_img_card_blue",[2] = "UIgolo_img_card_pur",[3] = "UIgolo_img_card_org"}
local img_quality = {[1] = "UIgolo_img_card_blue02",[2] = "UIgolo_img_card_pur02",[3] = "UIgolo_img_card_org02"}

function UIGolloesCards:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

function UIGolloesCards:OnDestroy()
    self:ClearDelayTime()
    self:DeleteTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIGolloesCards:OnEnable()
    base.OnEnable(self)
end

function UIGolloesCards:OnDisable()
    base.OnDisable(self)
end

function UIGolloesCards:ComponentDefine()
    self._actName_txt = self:AddComponent(UITextMeshProUGUIEx, "Root/TitleBg/Txt_ActName")
    self._actName_txt:SetLocalText(372288)
    self._time_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/TitleBg/NotStarted/Txt_Times")
    self._remaining_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/TitleBg/Txt_Remaining")

    self.toggle = self:AddComponent(UIToggle,"Root/TitleBg/redSwitch")
    self.toggle:SetIsOn(true)
    self.toggle:SetOnValueChanged(function(tf)
        self:ToggleControlBorS(tf)
    end)
    self._jumpAnim_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/TitleBg/redSwitch/redSwitchTxt")
    self._jumpAnim_txt:SetLocalText(372228)

    self._mask_rect = self:AddComponent(UIBaseContainer,"Root/Mask")

    --一键领取
    self._oneGet_btn = self:AddComponent(UIButton,"Root/Mask/Btn_List/Btn_OneGet")
    self._oneGet_btn:SetOnClick(function()
        self:OneGetClick()
    end)
    self._oneGet_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/Btn_List/Btn_OneGet/Rect_BtnGet/Txt_OneGet")
    self._costGet_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/Btn_List/Btn_OneGet/Rect_BtnGet/Txt_CostGet")
   
    self._costGet_img = self:AddComponent(UIImage,"Root/Mask/Btn_List/Btn_OneGet/Rect_BtnGet/Txt_CostGet/Img_CostGet")
    self._oneGet_txt:SetLocalText(372291)
    --刷新
    self._refresh_btn = self:AddComponent(UIButton,"Root/Mask/Btn_List/Btn_Refresh")
    self._refresh_btn:SetOnClick(function()
        self:OnClickRefresh()
    end)
    self._refresh_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/Btn_List/Btn_Refresh/Txt_Refresh")
    self._refresh_rect = self:AddComponent(UIBaseContainer,"Root/Mask/Btn_List/Btn_Refresh/Rect_BtnRefresh")
    self._ontRefresh_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/Btn_List/Btn_Refresh/Rect_BtnRefresh/Txt_OneRefresh")
    self._ontRefresh_txt:SetLocalText(110028)
    self._costRefresh_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/Btn_List/Btn_Refresh/Rect_BtnRefresh/Txt_CostRefresh")

    self.cells = {}
    for i = 1 ,9 do
        self.cells[i] = self:AddComponent(UIGolloesCardsCell,"Root/Mask/ScrollView/Content/UIGolloesCardsCell"..i)
    end

    --奖励预览
    self._rewardPreview_btn = self:AddComponent(UIButton,"Root/Btn_RewardPreview")
    self._rewardPreview_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Btn_RewardPreview/Txt_RewardPreview")
    self._rewardPreview_txt:SetLocalText(372299)
    self._rewardPreview_btn:SetOnClick(function()
        self:OnClickPreview()
    end)
    self._preview_img = self:AddComponent(UIImage,"Root/Btn_RewardPreview/Img_Preview")
    --这次翻牌消耗
    self._layout = self:AddComponent(UIBaseContainer,"Root/Mask/layout")
    self._curfree_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/Txt_freeTips")
    self._curConsume_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/layout/Txt_CurConsume")
    self._consumeTips_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/layout/Txt_ConsumeTips")

    --活动说明
    self.intro_btn = self:AddComponent(UIButton, "Root/TitleBg/Txt_ActName/Intro")
    self.intro_btn:SetOnClick(function()
        self:OnIntroClick()
    end)

    --兑换商店
    self._shop_btn = self:AddComponent(UIButton,"Root/Btn_Shop")
    self._shopRed_rect = self:AddComponent(UIBaseContainer,"Root/Btn_Shop/RedDot")
    self._shopRed_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Btn_Shop/RedDot/Txt_Red")
    self._shop_txt  = self:AddComponent(UITextMeshProUGUIEx,"Root/Btn_Shop/Txt_Shop")
    self._shop_txt:SetLocalText(372290)
    self._shop_btn:SetOnClick(function()
        self:OnClickShop()
    end)

    --排行榜
    self._rank_btn = self:AddComponent(UIButton,"Root/Btn_Rank")
    self._rank_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Btn_Rank/Txt_Rank")
    self._rankNum_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Btn_Rank/Txt_num")
    self._rank_txt:SetLocalText(390040)
    self._rank_btn:SetOnClick(function()
        self:OnClickRank()
    end)

    --当前卡牌挡位
    self._curCardLv_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Mask/Txt_CurCardLv")

    self._resNum_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Res/resNum")

    self._content_anim = self:AddComponent(UIAnimator,"Root/Mask/ScrollView/Content")

    --彩带特效
    self.effect_rect = self:AddComponent(UIBaseContainer,"Root/Mask/Rect_Effect")
end

function UIGolloesCards:ComponentDestroy()
    self._actName_txt = nil
    self._time_txt = nil
    self._remaining_txt = nil
    self._oneGet_btn = nil
end

function UIGolloesCards:DataDefine()
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
    self.previewRw = 0
end

function UIGolloesCards:DataDestroy()
    self.timer_action = nil
    self.previewRw = nil
end

function UIGolloesCards:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.ActGolloesCard, self.OnRefresh)
    self:AddUIListener(EventId.ActGolloesCardFlip, self.ActGolloesCardFlip)
    self:AddUIListener(EventId.ActGolloesCardRefresh, self.ActCardRefresh)
    self:AddUIListener(EventId.ActGolloesCardRed, self.RefreshShopRed)
    self:AddUIListener(EventId.UpdateGold, self.RefreshShopRed)
    self:AddUIListener(EventId.ActGolloesCardFlipAll, self.ActCardFlipAllRefresh)
    self:AddUIListener(EventId.ActGolloesCardRewardShow, self.DelayShowReward)
    self:AddUIListener(EventId.ActGolloesCardRank, self.OnRefreshRankNum)
end

function UIGolloesCards:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.ActGolloesCard, self.OnRefresh)
    self:RemoveUIListener(EventId.ActGolloesCardFlip, self.ActGolloesCardFlip)
    self:RemoveUIListener(EventId.ActGolloesCardRefresh, self.ActCardRefresh)
    self:RemoveUIListener(EventId.ActGolloesCardRed, self.RefreshShopRed)
    self:RemoveUIListener(EventId.UpdateGold, self.RefreshShopRed)
    self:RemoveUIListener(EventId.ActGolloesCardFlipAll, self.ActCardFlipAllRefresh)
    self:RemoveUIListener(EventId.ActGolloesCardRewardShow, self.DelayShowReward)
    self:RemoveUIListener(EventId.ActGolloesCardRank, self.OnRefreshRankNum)
end

function UIGolloesCards:ToggleControlBorS(isJumpPlay)
    Setting:SetBool(SettingKeys.ACT_GOLLOESCARD_JUMP_ANIM..LuaEntry.Player.uid, isJumpPlay)
end

function UIGolloesCards:SetData(activityId,actId)
    self.activityId = activityId

    local isJumpPlay = Setting:GetBool(SettingKeys.ACT_GOLLOESCARD_JUMP_ANIM..LuaEntry.Player.uid,false)
    self.toggle:SetIsOn(isJumpPlay)
    self:RefreshBtnState(false)
    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(actId)
    SFSNetwork.SendMessage(MsgDefines.GetGolloesCardInfo, activityId)
    SFSNetwork.SendMessage(MsgDefines.GetGolloesCardRank,activityId)
    self.effect_rect:SetActive(false)
    self._mask_rect:SetActive(true)
end

--获取卡牌信息、单抽
function UIGolloesCards:OnRefresh()
    self.actData = DataCenter.ActGolloesCardData:GetInfoByActId(tonumber(self.activityId))

    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if actListData then
        self:RefreshTime(actListData)
        self:AddTimer(actListData)

        self:RefreshBottom()
        self:RefreshCard()
        self:RefreshShopRed()
        self:ShowNeedRes()
        if self:CheckDelayTime() then
            self.isAllowClick = true
        end
    end
end

function UIGolloesCards:RefreshBtnState(isGray)
    UIGray.SetGray(self._refresh_btn.transform, isGray,not isGray)
    

end

function UIGolloesCards:OnRefreshRankNum()
    local actData = DataCenter.ActGolloesCardData:GetInfoByActId(tonumber(self.activityId))
    if actData then
        if actData.selfRank ~= -1 then
            if actData.selfRank > 0 and self.actData.selfRank < 4 then
                self._rank_btn:LoadSprite("Assets/Main/Sprites/UI/UIAlliance/rank/UIalliance_rankingbg0" .. self.actData.selfRank)
                self._rankNum_txt:SetText("")
            else
                self._rank_btn:LoadSprite(string.format(LoadPath.UIGolloesCards,"UIgolo_btn_rankinga"))
                self._rankNum_txt:SetText(self.actData.selfRank)
            end
            return
        end
    end
    self._rankNum_txt:SetText("")
end

--{{{活动时间
function UIGolloesCards:AddTimer(actListData)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action ,actListData , false,false,false)
    end
    self.timer:Start()
end

function UIGolloesCards:RefreshTime(actListData)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if actListData.endTime < curTime then
        self:DeleteTimer()
        self.actEnd = true
    else
        if actListData:CheckIfIsToEnd() then
            self._time_txt:SetColorRGBA(0.91, 0.26, 0.26, 1)
        else
            self._time_txt:SetColor(WhiteColor)
        end
        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(actListData.endTime - curTime))
        self.actEnd = false
    end
end

function UIGolloesCards:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end
--}}}

--刷新卡牌
function UIGolloesCards:RefreshCard()
    --奖励预览
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    local reward = DataCenter.RewardManager:StrRewardToNumHandle(actListData.reward_goods,self.actData.cardInfo.group)
    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(reward[1].itemId)
    if goods ~= nil then
        self.previewRw = reward[1].itemId
    end

    --当前卡牌挡位
    self._curCardLv_txt:SetLocalText(str[self.actData.cardInfo.group])

    for i = 1 ,9 do
        self.cells[i]:RefreshData(i,self.previewRw,function(tempIndex,img) self:FlipCard(tempIndex,img) end)
        self.cells[i]:RefreshState(true)
        self.cells[i]:LoadBg(img_bg[self.actData.cardInfo.group],img_quality[self.actData.cardInfo.group])
        if self.isFree then
            self.cells[i]:FreePlayEffect()
        end
    end
    for i = 1 ,#self.actData.flipCards do
        self.cells[self.actData.flipCards[i].index]:RefreshReward(self.actData.flipCards[i].reward[1])
    end
end

--更新底部信息
function UIGolloesCards:RefreshBottom()
    --今日剩余翻卡次数
    self._remaining_txt:SetText(Localization:GetString("372293")..(" "..self.actData.times-self.actData.cardInfo.flipCount))

    --翻牌消耗钻石数
    local num = self.actData.cardInfo.flipCount --今日翻卡次数
    num = num + 1
    local count = num
    --第一次免费
    if self.actData.cost_1[count] == nil then
        count = table.count(self.actData.cost_1)
    end
    if self.actData.cost_1[count] == "0" then
        self.isFree = true
        self._curfree_txt:SetLocalText(372294)
        self._layout:SetActive(false)
        self._curfree_txt:SetActive(true)
    else
        self.isFree = false
        self._consumeTips_txt:SetLocalText(372295)
        self._layout:SetActive(true)
        self._curfree_txt:SetActive(false)
        self._curConsume_txt:SetText(self.actData.cost_1[count])
    end

    --一键领取消耗钻石数
    if self.actData.cardInfo.flipAllCount < self.actData.free_all and #self.actData.flipCards < 9 then      --free_all次数前一键免费
        self._oneGet_btn:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_green101"))
        self._costGet_txt:SetLocalText(130126)
        
        self.oneGet = true
        UIGray.SetGray(self._oneGet_btn.transform, false,true)
    else
        --检查当前翻卡是否免费，一键消耗数需要减去免费次数
        local extraCount = 0
        if self.actData.cost_1[count] == "0"  then
            extraCount = 1
        end
        local allPrice = self.actData.cost_all * (9 - extraCount - #self.actData.flipCards)
        --剩一张牌一键消耗价格和单次翻卡价格一样
        if allPrice == self.actData.cost_all then
            allPrice = tonumber(self.actData.cost_1[count])
        end
        if allPrice == 0 then
            UIGray.SetGray(self._oneGet_btn.transform, true,false)
           
            --self._oneGet_btn:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_green101"))
            self.oneGet = true
        else
            UIGray.SetGray(self._oneGet_btn.transform, false,true)
            self._oneGet_btn:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_yellow101"))
           
            self.oneGet = false
        end
        self._costGet_txt:SetText(allPrice == 0 and tonumber(self.actData.cost_1[count]) or allPrice)
    end


    --免费刷新
    if #self.actData.flipCards >= 5 then   --本组翻过卡牌5个以上时 刷新免费
        self._refresh_rect:SetActive(false)
        self._refresh_btn:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_green101"))
        self._refresh_txt:SetActive(true)
        self._refresh_txt:SetLocalText(372292)
        return
    end
    local refreshCount = self.actData.cardInfo.refreshCount
    if refreshCount == 0 then
        refreshCount = 1
    end
    if self.actData.refresh_cost[refreshCount] then
        local price = self.actData.refresh_cost[refreshCount]
        if tonumber(price) == 0 then                    --免费
            self._refresh_rect:SetActive(false)
            self._refresh_btn:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_green101"))
            self._refresh_txt:SetActive(true)
            self._refresh_txt:SetLocalText(372292)
        else
            self._refresh_btn:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_yellow101"))
            self._refresh_txt:SetActive(false)
            self._refresh_rect:SetActive(true)
            self._costRefresh_txt:SetText(price)
        end
    else
        self._refresh_btn:LoadSprite(string.format(LoadPath.CommonNewPath, "Common_btn_yellow101"))
        self._refresh_txt:SetActive(false)
        self._refresh_rect:SetActive(true)
        local cost = table.count(self.actData.refresh_cost)
        self._costRefresh_txt:SetText(self.actData.refresh_cost[cost])
    end
end

--更新页签红点
function UIGolloesCards:RefreshShopRed()

    local count = DataCenter.ActGolloesCardData:GetActRed(tonumber(self.activityId))
    self._shopRed_rect:SetActive(count > 0)
    self._shopRed_txt:SetActive(count > 0)
    self._shopRed_txt:SetText(count)

    self:ShowNeedRes()
end

function UIGolloesCards:ShowNeedRes()
    local tempCount = LuaEntry.Player.gold
    self._resNum_txt:SetText(string.GetFormattedSeperatorNum(tempCount))
end

--{{{事件更新
--翻卡返回
function UIGolloesCards:ActGolloesCardFlip()
    self.actData = DataCenter.ActGolloesCardData:GetInfoByActId(tonumber(self.activityId))

    self:RefreshBottom()
    for i = 1 ,#self.actData.flipCards do
        self.cells[self.actData.flipCards[i].index]:RefreshReward(self.actData.flipCards[i].reward[1],nil,true)
    end
    self:RefreshShopRed()
    self:ShowNeedRes()
    if self:CheckDelayTime() then
        self.isAllowClick = true
    end
end

--刷新卡牌
--刷新流程 1.展示当前卡组所有奖励 2.奖励隐藏，返回初始状态
--3.刷新卡组品质(带特效) 4.再展示刷新后卡组所有奖励 5。重复2操作  6.洗牌
function UIGolloesCards:ActCardRefresh(lastActData,type)
    self.actData = DataCenter.ActGolloesCardData:GetInfoByActId(tonumber(self.activityId))

    --检查是全部翻过还是部分翻过
    local flipCard = self.actData.flipCards
    if lastActData then
        if next(lastActData) then
            flipCard = lastActData
        end
        if type == 1 then
            self.actData:ClearLastFlipCards()
        end
    end
    local playAnim = {}
    --已经翻过的卡牌
    for i = 1 ,9 do
        playAnim[i] = i
    end
    for i = 1 ,#flipCard do
        table.removebyvalue(playAnim,flipCard[i].index,true)
    end

    --一键领取关闭奖励弹窗后直接翻牌洗牌
    if type and type == 1 then
        playAnim = {}
    elseif type == nil then
        playAnim = {}
    end

    --一键翻卡显示所有奖励
    if type then
        --1.刷新后先显示所有的奖励
        local showArr = self.actData:GetShowArr()
        for i = 1 ,#playAnim do
            self.cells[playAnim[i]]:PlayAnim(showArr[i][1],self.previewRw)
        end
    end

    --如果是一键翻卡展示当前奖励就停止
    if type and type == 2 then
        return
    end

    --如果还有未领取等展示完剩下奖励在刷新
    if next(playAnim) then
        --还原未领取
        self.delayAnimTime = TimerManager:GetInstance():DelayInvoke(function()
            if self.delayAnimTime then
                self.delayAnimTime:Stop()
                self.delayAnimTime = nil
            end

            --2.所有卡牌重置
            for i = 1 ,9 do
                self.cells[i]:RefreshState()
                self.cells[i]:PlayRefreshAnim()
            end

            --3.刷新卡组品质
            self.delayAnimTime1 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime1 then
                    self.delayAnimTime1:Stop()
                    self.delayAnimTime1 = nil
                end
                for i = 1 ,9 do
                    --self.cells[i]:PlayHideAnim(img_bg[self.actData.cardInfo.group])
                    self.cells[i]:PlayEffectRefresh()
                    self.cells[i]:LoadBg(img_bg[self.actData.cardInfo.group],img_quality[self.actData.cardInfo.group])
                end
                if self.actData.cardInfo.group == 3 then
                    self.effect_rect:SetActive(true)
                end
            end,0.5)

            --重新获取当前奖励组最好奖励
            local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
            local reward = DataCenter.RewardManager:StrRewardToNumHandle(actListData.reward_goods,self.actData.cardInfo.group)
            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(reward[1].itemId)
            if goods ~= nil then
                self.previewRw = reward[1].itemId
            end

            local nextShowArr = self.actData:GetNextShowArr(reward[1].itemId)
            --4.展示刷新后卡组所有奖励
            self.delayAnimTime2 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime2 then
                    self.delayAnimTime2:Stop()
                    self.delayAnimTime2 = nil
                end

                for i = 1 ,9 do
                    self.cells[i]:RefreshReward(nextShowArr[i][1],nil,true,true)
                    self.cells[i]:PlayAnim(nextShowArr[i][1],reward[1].itemId)
                end
            end,1.5)

            --5.卡牌状态重置默认
            self.delayAnimTime3 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime3 then
                    self.delayAnimTime3:Stop()
                    self.delayAnimTime3 = nil
                end
                self.effect_rect:SetActive(false)
                for i = 1 ,9 do
                    self.cells[i]:RefreshState()
                    self.cells[i]:PlayRefreshAnim()
                end
            end,3)

            --6.洗牌
            self.delayAnimTime4 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime4 then
                    self.delayAnimTime4:Stop()
                    self.delayAnimTime4 = nil
                end
                --播放洗牌动画
                self._content_anim:Play("V_ui_golloescards_xipai",0,0)
                SoundUtil.PlayEffect(SoundAssets.Music_Effect_Golloes_Sort_Card)
            end,4)

            self.delayAnimTime5 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime5 then
                    self.delayAnimTime5:Stop()
                    self.delayAnimTime5 = nil
                end
                self._content_anim:Play("V_ui_golloescards_default",0,0)
                for i = 1 ,9 do
                    self.cells[i]:PlayDefaultAnim()
                end
                self:RefreshBtnState(false)
                self.isAllowClick = true
            end,5)
        end, 2)
    else
        local nextTime = 0
        if type then
            nextTime = 1
            --2.所有卡牌重置
            for i = 1 ,9 do
                self.cells[i]:RefreshState()
                self.cells[i]:PlayRefreshAnim()
            end
        else
            for i = 1 ,9 do
                self.cells[i]:RefreshState()
                if flipCard[i] then
                    nextTime = 1
                    self.cells[flipCard[i].index]:PlayRefreshAnim()
                end
            end
        end
        --3.刷新卡组品质
        self.delayAnimTime1 = TimerManager:GetInstance():DelayInvoke(function()
            if self.delayAnimTime1 then
                self.delayAnimTime1:Stop()
                self.delayAnimTime1 = nil
            end
            for i = 1 ,9 do
                -- self.cells[i]:PlayHideAnim(img_bg[self.actData.cardInfo.group])
                self.cells[i]:PlayEffectRefresh()
                self.cells[i]:LoadBg(img_bg[self.actData.cardInfo.group],img_quality[self.actData.cardInfo.group])
            end
            if self.actData.cardInfo.group == 3 then
                self.effect_rect:SetActive(true)
            end
        end,nextTime)

        --重新获取当前奖励组最好奖励
        local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
        local reward = DataCenter.RewardManager:StrRewardToNumHandle(actListData.reward_goods,self.actData.cardInfo.group)
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(reward[1].itemId)
        if goods ~= nil then
            self.previewRw = reward[1].itemId
        end

        --是否跳过动画
        if self.isJumpPlay then
            --5.卡牌状态重置默认
            self.delayAnimTime3 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime3 then
                    self.delayAnimTime3:Stop()
                    self.delayAnimTime3 = nil
                end
                self.effect_rect:SetActive(false)
                for i = 1 ,9 do
                    self.cells[i]:RefreshState()
                    self.cells[i]:PlayDefaultAnim()
                end
                self.isAllowClick = true
                self:RefreshBtnState(false)
            end,nextTime + 0.5)
        else
            local nextShowArr = self.actData:GetNextShowArr(reward[1].itemId)
            --4.展示刷新后卡组所有奖励
            self.delayAnimTime2 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime2 then
                    self.delayAnimTime2:Stop()
                    self.delayAnimTime2 = nil
                end

                for i = 1 ,9 do
                    self.cells[i]:RefreshReward(nextShowArr[i][1],nil,true,true)
                    self.cells[i]:PlayAnim(nextShowArr[i][1],reward[1].itemId)
                end
            end,nextTime + 1)

            --5.卡牌状态重置默认
            self.delayAnimTime3 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime3 then
                    self.delayAnimTime3:Stop()
                    self.delayAnimTime3 = nil
                end
                self.effect_rect:SetActive(false)
                for i = 1 ,9 do
                    self.cells[i]:RefreshState()
                    self.cells[i]:PlayRefreshAnim()
                end
            end,nextTime + 3)

            --6.洗牌
            self.delayAnimTime4 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime4 then
                    self.delayAnimTime4:Stop()
                    self.delayAnimTime4 = nil
                end
                --播放洗牌动画
                self._content_anim:Play("V_ui_golloescards_xipai",0,0)
                SoundUtil.PlayEffect(SoundAssets.Music_Effect_Golloes_Sort_Card)
            end,nextTime + 3.5)

            self.delayAnimTime5 = TimerManager:GetInstance():DelayInvoke(function()
                if self.delayAnimTime5 then
                    self.delayAnimTime5:Stop()
                    self.delayAnimTime5 = nil
                end
                self._content_anim:Play("V_ui_golloescards_default",0,0)
                for i = 1 ,9 do
                    self.cells[i]:PlayDefaultAnim()
                end
                self:RefreshBtnState(false)
                self.isAllowClick = true
            end,nextTime + 4.5)
        end
    end

    --清除上次翻卡记录
    self.actData:ClearFlipCards()

    --刷新完后重置一键领取所需钻石数量
    self:RefreshBottom()

    self._curCardLv_txt:SetLocalText(str[self.actData.cardInfo.group])

    self:ShowNeedRes()
end

--一键翻牌
function UIGolloesCards:ActCardFlipAllRefresh(type)
    self:RefreshShopRed()
    --lastActData为空说明一键领取之前没有过翻过牌
    local lastActData = self.actData:GetLastFlipCards()
    if type == 2 then
        self:ActCardRefresh(lastActData,type)
        return
    end
    if type == 1 and lastActData then
        self:ActCardRefresh(lastActData,type)
    end
end

--延迟显示通用奖励
function UIGolloesCards:DelayShowReward(message)
    self.delayAnimTime6 = TimerManager:GetInstance():DelayInvoke(function()
        DataCenter.RewardManager:ShowCommonReward(message)
    end, message.delayTime)
end

--清除所有延迟动画
function UIGolloesCards:CheckDelayTime()
    self.isAllowClick = true
    if self.delayAnimTime then
        self.isAllowClick = false
    end
    if self.delayAnimTime1 then
        self.isAllowClick = false
    end
    if self.delayAnimTime2 then
        self.isAllowClick = false
    end
    if self.delayAnimTime3 then
        self.isAllowClick = false
    end
    if self.delayAnimTime4 then
        self.isAllowClick = false
    end
    if self.delayAnimTime5 then
        self.isAllowClick = false
    end
    return self.isAllowClick
end

function UIGolloesCards:ClearDelayTime()
    if self.delayAnimTime then
        self.delayAnimTime:Stop()
        self.delayAnimTime = nil
    end
    if self.delayAnimTime1 then
        self.delayAnimTime1:Stop()
        self.delayAnimTime1 = nil
    end
    if self.delayAnimTime2 then
        self.delayAnimTime2:Stop()
        self.delayAnimTime2 = nil
    end
    if self.delayAnimTime3 then
        self.delayAnimTime3:Stop()
        self.delayAnimTime3 = nil
    end
    if self.delayAnimTime4 then
        self.delayAnimTime4:Stop()
        self.delayAnimTime4 = nil
    end
    if self.delayAnimTime5 then
        self.delayAnimTime5:Stop()
        self.delayAnimTime5 = nil
    end
    if self.delayAnimTime6 then
        self.delayAnimTime6:Stop()
        self.delayAnimTime6 = nil
    end
    if self.delayAnimTime7 then
        self.delayAnimTime7:Stop()
        self.delayAnimTime7 = nil
    end
end

--}}}

--{{{请求
--翻卡
function UIGolloesCards:FlipCard(index,img)

    --刷新时间内不允许翻卡
    if not self.isAllowClick then
        return
    end

    --检查是否已经翻过
    local flipCard = self.actData.flipCards
    for i = 1 ,#flipCard do
        if flipCard[i].index == index then
            local param = {}
            param["itemId"] = flipCard[i].reward[1].itemId
            param["alignObject"] = img
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
            return
        end
    end

    --检查活动是否结束
    if self.actEnd then
        return UIUtil.ShowTipsId(300708)
    end

    --检查是否还有次数
    local remain = self.actData.times-self.actData.cardInfo.flipCount
    if remain <= 0 then
        UIUtil.ShowTipsId(372304)
        return
    end

    --检查水晶是否足够
    local num = self.actData.cardInfo.flipCount
    if num == 0 then
        num = 1
    end
    local count = num
    --第一次免费
    if self.actData.cost_1[num] == nil then
        count = table.count(self.actData.cost_1)
    end
    local price = self.actData.cost_1[count]
    if tonumber(price) > LuaEntry.Player.gold then
        GoToUtil.GotoPayTips()
        return
    end
    self.isAllowClick = false
    self.cells[index]:PlayAnimClick()
    local actId = toInt(self.activityId)
    --self.delayAnimTime7 = TimerManager:GetInstance():DelayInvoke(function()
    SFSNetwork.SendMessage(MsgDefines.FlipGolloesCard,actId,index)
    --end, 0.3)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Golloes_Show_One_Card)
end

--一键领取
function UIGolloesCards:OneGetClick()

    --刷新时间内不允许翻卡
    if not self.isAllowClick then
        return
    end

    --检查活动是否结束
    if self.actEnd then
        return UIUtil.ShowTipsId(300708)
    end

    --检查是否还有次数
    local remain = self.actData.times-self.actData.cardInfo.flipCount
    if remain < 9 then
        UIUtil.ShowTipsId(372304)
        return
    end
    --不免费时检查水晶是否足够
    local price = self.actData.cost_all * (9 - #self.actData.flipCards)
    if not self.oneGet then
        if tonumber(price) > LuaEntry.Player.gold then
            GoToUtil.GotoPayTips()
            return
        end
    end

    self.isJumpPlay = Setting:GetBool(SettingKeys.ACT_GOLLOESCARD_JUMP_ANIM..LuaEntry.Player.uid,false)

    self.actData:SetLastFlipCards()
    self.isAllowClick = false
    --检查是否全部翻完
    local flipCard = self.actData.flipCards
    --手动全部翻完直接刷新
    if #flipCard == 9 then
        SFSNetwork.SendMessage(MsgDefines.RefreshGolloesCard, toInt(self.activityId))
    else
        SFSNetwork.SendMessage(MsgDefines.FlipAllGolloesCard, toInt(self.activityId))
    end
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Golloes_Show_All_Card)
end

--刷新卡牌
function UIGolloesCards:OnClickRefresh()
    --检查活动是否结束
    if self.actEnd then
        return UIUtil.ShowTipsId(300708)
    end

    if not self.isAllowClick then
        return
    end

    --大于5次翻卡免费刷新
    if #self.actData.flipCards < 5 then
        local price = self._costRefresh_txt:GetText()
        if price ~= "" then
            if tonumber(price) > LuaEntry.Player.gold then
                GoToUtil.GotoPayTips()
                return
            end
        end
    end

    self.isJumpPlay = Setting:GetBool(SettingKeys.ACT_GOLLOESCARD_JUMP_ANIM..LuaEntry.Player.uid,false)

    local actId = toInt(self.activityId)
    --检查是否有特殊奖励组
    if self.actData.cardInfo.group == 3 then
        --特殊奖励组是否已经翻完
        if  #self.actData.flipCards ~= 9 then
            UIUtil.ShowMessage(Localization:GetString("372303"), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                self:RefreshBtnState(true)
                SFSNetwork.SendMessage(MsgDefines.RefreshGolloesCard, actId)
            end)
            return
        end
    end
    self.isAllowClick = false
    self:RefreshBtnState(true)
    SFSNetwork.SendMessage(MsgDefines.RefreshGolloesCard, actId)
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Golloes_Refresh_Card)
end
--}}}

--活动说明
function UIGolloesCards:OnIntroClick()
    UIUtil.ShowIntro(Localization:GetString("372288"), Localization:GetString("100239"),Localization:GetString("372289"))
end

--查看奖励预览
function UIGolloesCards:OnClickPreview()
    if self.actData then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGolloesCardsRP,self.activityId,self.actData.cardInfo.group)
    end
end

--打开兑换商店
function UIGolloesCards:OnClickShop()
    if self.actData then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGolloesCardsExShop,self.activityId)
    end
end

--打开排行榜
function UIGolloesCards:OnClickRank()
    if self.actData then
        --检查是否属于跨服排行榜
        local serverStr = nil
        local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
        local para1 = actListData.para1
        if para1 and para1 ~= "" then
            local stage = string.split(para1,"|")
            for i = 1 ,table.count(stage) do
                local str = string.split(stage[i],",")
                if string.find(str[2],";") and string.find(str[2],"-") then
                    local strServer = string.split(str[2],";")
                    for k = 1 ,table.count(strServer) do
                        local server = string.split(strServer[k],"-")
                        if tonumber(server[1]) <= LuaEntry.Player:GetSelfServerId() and LuaEntry.Player:GetSelfServerId() <= tonumber(server[2]) then
                            local subStr = string.gsub(str[2], ";", ",")
                            serverStr = subStr
                            break
                        end
                    end
                elseif string.find(str[2],"-") then
                    local server = string.split(str[2],"-")
                    if tonumber(server[1]) <= LuaEntry.Player:GetSelfServerId() and LuaEntry.Player:GetSelfServerId() <= tonumber(server[2]) then
                        serverStr = str[2]
                        break
                    end
                elseif string.find(str[2],";") then
                    local server = string.split(str[2],";")
                    if tonumber(server[1]) == LuaEntry.Player:GetSelfServerId() or LuaEntry.Player:GetSelfServerId() == tonumber(server[2]) then
                        serverStr = server[1]..","..server[2]
                        break
                    end
                end
            end
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGolloesCardsRank,toInt(self.activityId),serverStr)
    end
end

return UIGolloesCards