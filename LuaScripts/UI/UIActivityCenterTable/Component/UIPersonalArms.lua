---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 2021/7/21
---
local UIPersonalArms = BaseClass("UIPersonalArms", UIBaseContainer)
local UIActivityTargetItem = require "UI.UIActivityCenterTable.Component.UIActivityTargetItem"
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local title_text_path = "ImageTop/Top/title"
local current_num_path = "ImageTop/Top/Img_CurrentBg/Di/Txt_CurrentNum"
local time_text_path = "ImageTop/Top/time/Di/remainTime"
local des_text_path = "ImageTop/Top/subTitle"
local info_btn_path = "ImageTop/Top/infoBtn"
local content_path = "ScrollView/Viewport/Content/ImageLowerpart"
local grayColor = Color.New(135/255, 135/255, 135/255, 1.0)
local normalColor = Color.New(255/255, 255/255, 255/255, 1.0)

function UIPersonalArms:OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

function UIPersonalArms:OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIPersonalArms:ComponentDefine()
    self._activityTitle_txt = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
    self._currentNum_txt = self:AddComponent(UITextMeshProUGUI, current_num_path)
    self._desc_txt = self:AddComponent(UITextMeshProUGUI, des_text_path)
    self.content = self:AddComponent(UIBaseContainer, content_path)
    self.time_text = self:AddComponent(UITextMeshProUGUI, time_text_path)
    self.nostartitle = self:AddComponent(UITextMeshProUGUIEx,"ImageTop/Top/NoStarBg/NoStarTitle")
    self.NoStarBg = self:AddComponent(UITextMeshProUGUIEx,"ImageTop/Top/NoStarBg")
    self.nostardes = self:AddComponent(UITextMeshProUGUIEx,"ImageTop/ImageFloor/NoStarDes")
    self.box_rectTab = {}
    for i=1,3 do
        local rectpath = "ImageTop/ImageFloor/group/box"..i
        local bgEffect_path = rectpath.."/bgEffect"..i
        local rewardEffect_path = rectpath.."/rewardEffect"..i
        local animator_path = "ImageTop/ImageFloor/group/box"..i.."/Icon"..i
        local imgpath = "ImageTop/ImageFloor/group/box"..i.."/Icon"..i
        local btnpath = "ImageTop/ImageFloor/group/box"..i.."/BtnReward"..i
        local bgGray = "ImageTop/ImageFloor/group/box"..i.."/bgGray"..i
        local lockGo = "ImageTop/ImageFloor/group/box"..i.."/lockGo"..i
        self.box_rectTab[i] = {
            rect = self:AddComponent(UIImage,rectpath),
            animator = self:AddComponent(UIAnimator, animator_path),
            btn = self:AddComponent(UIButton,btnpath),
            img = self:AddComponent(UIImage,imgpath),
            gray = self:AddComponent(UIImage,bgGray),
            lockGo = self:AddComponent(UIImage,lockGo),
            bgEffect = self:AddComponent(UIBaseContainer,bgEffect_path),
            rewardEffect = self:AddComponent(UIBaseContainer,rewardEffect_path)
        }
    end
    for i=1,3 do
        self.box_rectTab[i].btn:SetOnClick(function()
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
            self:OpenRewardTips(i)
        end)
    end
    self._cost1_txt = self:AddComponent(UITextMeshProUGUI,"ImageTop/ImageFloor/group/box1/dimondBg1/dimondTxt1")
    self._cost2_txt = self:AddComponent(UITextMeshProUGUI,"ImageTop/ImageFloor/group/box2/dimondBg2/dimondTxt2")
    self._cost3_txt = self:AddComponent(UITextMeshProUGUI,"ImageTop/ImageFloor/group/box3/dimondBg3/dimondTxt3")
    self._cost_txtTab = {[1] = self._cost1_txt,[2] = self._cost2_txt,[3] = self._cost3_txt}
    self._titleTarget_txt = self:AddComponent(UITextMeshProUGUI,"ImageTop/ImageFloor/txtbg/Txt_TitleTarget")
    self._titleTarget_txt:SetLocalText(370018) 
    self._num1_txt = self:AddComponent(UITextMeshProUGUI,"ImageTop/ImageFloor/slider/Points/Point_1/Num_1")
    self._num2_txt = self:AddComponent(UITextMeshProUGUI,"ImageTop/ImageFloor/slider/Points/Point_2/Num_2")
    self._num3_txt = self:AddComponent(UITextMeshProUGUI,"ImageTop/ImageFloor/slider/Points/Point_3/Num_3")
    self._num4_txt = self:AddComponent(UITextMeshProUGUI,"ImageTop/ImageFloor/slider/Points/Point_4/Num_4")
    self.tabTxt ={[1] = self._num1_txt,[2] = self._num2_txt,[3] = self._num3_txt,[4] = self._num4_txt}
    self.slider = self:AddComponent(UISlider,"ImageTop/ImageFloor/slider")
    self.slider1 = self:AddComponent(UISlider,"ImageTop/ImageFloor/slider/Slider1")
    self.slider2 = self:AddComponent(UISlider,"ImageTop/ImageFloor/slider/Slider2")
    self.slider3 = self:AddComponent(UISlider,"ImageTop/ImageFloor/slider/Slider3")
    self._calender_btn = self:AddComponent(UIButton,"ImageTop/Top/Btn_Calendar")
    self.text_Calendar = self:AddComponent(UITextMeshProUGUI,"ImageTop/Top/Btn_Calendar/text_Calendar")
    self.text_Calendar:SetLocalText(450111)
    self._convert_btn = self:AddComponent(UIButton,"ImageTop/Top/Btn_Convert")
    self._calender_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickCalender()
    end)
    self._convert_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickConvert()
    end)
    self._personalNew_rect = self:AddComponent(UIBaseContainer,"ImageTop/Top/Rect_PersonalNew")
    self._newStagePoint = self:AddComponent(UITextMeshProUGUI,"ImageTop/Top/Rect_PersonalNew/NewStagePointBg/NewStagePoint")
    self._newStageDesc = self:AddComponent(UITextMeshProUGUI,"ImageTop/Top/Rect_PersonalNew/NewStageDesc")
    self._newStageDesc:SetLocalText(321083)
    self._newStagePointBg = self:AddComponent(UIBaseContainer,"ImageTop/Top/Rect_PersonalNew/NewStagePointBg")
    self._newStage1 = self:AddComponent(UISlider,"ImageTop/Top/Rect_PersonalNew/NewStage1")
    self._newStage2 = self:AddComponent(UISlider,"ImageTop/Top/Rect_PersonalNew/NewStage2")
    self._newStage3 = self:AddComponent(UISlider,"ImageTop/Top/Rect_PersonalNew/NewStage3")
    self.newStageBoxPoint = {}
    self.newStageBox = {}
    self.newStageRed = {}
    self.newStageBoxIcon = {}
    self.newStageBoxAnim = {}
    for i = 1 ,3 do
        self.newStageBoxPoint[i] = self:AddComponent(UITextMeshProUGUI,"ImageTop/Top/Rect_PersonalNew/NewStageBox"..i.."/NewStagePoint"..i)
        self.newStageRed[i] = self:AddComponent(UITextMeshProUGUI,"ImageTop/Top/Rect_PersonalNew/NewStageBox"..i.."/NewStageRed"..i)
        self.newStageBoxIcon[i] = self:AddComponent(UIImage,"ImageTop/Top/Rect_PersonalNew/NewStageBox".. i .. "/NewStageIcon" .. i)
        self.newStageBoxAnim[i] = self:AddComponent(UIAnimator,"ImageTop/Top/Rect_PersonalNew/NewStageBox".. i .. "/NewStageIcon" .. i)
        self.newStageBox[i] = self:AddComponent(UIButton,"ImageTop/Top/Rect_PersonalNew/NewStageBox"..i)
        self.newStageBox[i]:SetOnClick(function()
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
            self:OpenRewardPermanentTips(i)
        end)
    end
    self.info_btn = self:AddComponent(UIButton, info_btn_path)
    self.info_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OpenTips()
    end)
end

function UIPersonalArms:ComponentDestroy()
end

function UIPersonalArms:OnEnable()
    base.OnEnable(self)
    self.alive = true
end

function UIPersonalArms:OnDisable()
    self.alive = false
    self:SetAllCellDestroy()
    base.OnDisable(self)
end

function UIPersonalArms:DataDefine()
    self.eventInfo = {}
    self.isOpen = false
    self.timer_action = function(temp)
        self:RefreshTime()
    end
    self.delayRefreshCallBack = nil
end

function UIPersonalArms:DataDestroy()
    self:DeleteTimer()
    self:SetAllCellDestroy()
    self.model = nil
    self.eventInfo = nil
    self.delayRefreshCallBack = nil
end


function UIPersonalArms:SetData(activityId,actId,actParam)
    self.activityId = activityId
    self.delayRefreshCallBack = nil
    --self:OnRefresh()
    SFSNetwork.SendMessage(MsgDefines.ActivityEventInfoGet,self.activityId)
    SFSNetwork.SendMessage(MsgDefines.GetHeroEventCalendar,self.activityId)
    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(actId)
    self.extraParam = actParam
    --检查是否有常驻军备
    self.permanentData = DataCenter.ActPersonalArmsInfo:GetPermanentAct()
    self.isExist = false
    if self.permanentData and next(self.permanentData) then
        self.isExist = true
    end
    --日历开关
    local configOpenState = LuaEntry.DataConfig:CheckSwitch("heroevent_calendar")
    local configOpenState1 = LuaEntry.DataConfig:CheckSwitch("heroevent_themechange")
    self._calender_btn:SetActive(configOpenState)
    self._convert_btn:SetActive(configOpenState1)
    self._personalNew_rect:SetActive(self.isExist)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(actId)
    if actListData and next(actListData) then
        if actListData.personalEventType and actListData.personalEventType == PersonalEventType.Kill then
            self._calender_btn:SetActive(false)
            self._convert_btn:SetActive(false)
            self._personalNew_rect:SetActive(false)
            self.isExist = false
        end
    end
    if self.isExist then
        SFSNetwork.SendMessage(MsgDefines.ActivityEventInfoGet,self.permanentData.activityId)
    end
end

function UIPersonalArms:OnRefresh()
    self.nostardes:SetLocalText(371006)
    self._desc_txt:SetLocalText(371003)
    self:SetAllCellDestroy()
    self.model = {}
    local list = self.view.ctrl:GetScoreData(self.activityId)
    if list ~= nil then
        for i = 1, table.length(list) do
            --复制基础prefab，每次循环创建一次
            self.model[i] = self:GameObjectInstantiateAsync(UIAssets.UIActivityTargetItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = i
                local cell = self.content:AddComponent(UIActivityTargetItem,go.name)
                cell:RefreshData(list[i])
                cell:SetBg(i)
            end)
        end
    end
    self.eventInfo = DataCenter.ActPersonalArmsInfo:GetEventInfo(self.activityId)
    if self.isExist and self.delayRefreshCallBack == nil then
        self:RefreshPermanent()
    end
    if self.eventInfo == nil then
        return
    end
    --标题
    if self.eventInfo.actName ~= "" then
        self._activityTitle_txt:SetLocalText(self.eventInfo.actName) 
    end
    
    self:RefreshTime()
    self:AddTimer()
    
    --当前拥有积分
    self._currentNum_txt:SetText(string.GetFormattedSeperatorNum(self.eventInfo.curScore))
    --当前排名
    --self._rank_txt:SetText(DataCenter.ActPersonalArmsInfo:GetRanking(self.activityId) == 0 and "5000+" or DataCenter.ActPersonalArmsInfo:GetRanking(self.activityId))
    
    --当前进度
    --self.slider:SetValue(self.eventInfo.curScore/self.eventInfo.rewardScoreIndexArr[3])
    if self.eventInfo.curScore <= self.eventInfo.rewardScoreIndexArr[1] then
        self.slider1:SetValue(self.eventInfo.curScore/self.eventInfo.rewardScoreIndexArr[1])
        self.slider2:SetValue(0)
        self.slider3:SetValue(0)
    elseif self.eventInfo.curScore > self.eventInfo.rewardScoreIndexArr[1] and self.eventInfo.curScore <= self.eventInfo.rewardScoreIndexArr[2] then
        self.slider1:SetValue(1)
        self.slider2:SetValue((self.eventInfo.curScore - self.eventInfo.rewardScoreIndexArr[1])/(self.eventInfo.rewardScoreIndexArr[2] - self.eventInfo.rewardScoreIndexArr[1]))
        self.slider3:SetValue(0)
    elseif self.eventInfo.curScore > self.eventInfo.rewardScoreIndexArr[2] and self.eventInfo.curScore < self.eventInfo.rewardScoreIndexArr[3] then
        self.slider1:SetValue(1)
        self.slider2:SetValue(1)
        self.slider3:SetValue((self.eventInfo.curScore - self.eventInfo.rewardScoreIndexArr[2])/(self.eventInfo.rewardScoreIndexArr[3]-self.eventInfo.rewardScoreIndexArr[2]))
    elseif self.eventInfo.curScore >= self.eventInfo.rewardScoreIndexArr[3] then
        self.slider1:SetValue(1)
        self.slider2:SetValue(1)
        self.slider3:SetValue(1)
    end
    
    for i=1,3 do
        self.box_rectTab[i].gray:SetActive(false)--self.eventInfo.curScore < self.eventInfo.rewardScoreIndexArr[i])
        self.box_rectTab[i].lockGo:SetActive(false)--self.eventInfo.curScore < self.eventInfo.rewardScoreIndexArr[i])
        self.box_rectTab[i].animator:Enable(true)
        self.box_rectTab[i].animator:Play("box_unOpen",0,0)
        --self.box_rectTab[i].img:SetColor(grayColor)
        self.box_rectTab[i].img:SetColor(normalColor)
        self.box_rectTab[i].bgEffect:SetActive(false)
        self.box_rectTab[i].rewardEffect:SetActive(false)
        if self.eventInfo.curScore >= self.eventInfo.rewardScoreIndexArr[i] then
            self.box_rectTab[i].img:SetColor(normalColor)
            self.box_rectTab[i].animator:Play("box_open",0,0)
            self.box_rectTab[i].bgEffect:SetActive(true)
            self.box_rectTab[i].rewardEffect:SetActive(true)
        end
        
        --self.box_rectTab[i].reward_effect:SetActive(self.eventInfo.curScore >= self.eventInfo.rewardScoreIndexArr[i])
        --self.box_rectTab[i].reward_light:SetActive(self.eventInfo.curScore >= self.eventInfo.rewardScoreIndexArr[i])
        
        
    end

    for i = 1, table.length(self._cost_txtTab) do
        self._cost_txtTab[i]:SetText(string.GetFormattedSeperatorNum(tonumber(self.eventInfo.cost[i])))
    end
    --当前目标所需积分数
    for i=1,4 do
        if i == 1 then
            self.tabTxt[i]:SetText("0")
        else
            self.tabTxt[i]:SetText(string.GetFormattedSeperatorNum(self.eventInfo.rewardScoreIndexArr[i-1]))
        end
    end
    for i=1,3 do
        self.box_rectTab[i].img:LoadSprite(string.format(LoadPath.UIPersonalArms,"UIactivities_icon_box"..i))
    end
    if next(self.eventInfo.hasRewardList) then
        for i = 1, #self.eventInfo.hasRewardList do
            if self.eventInfo.hasRewardList[i] ~= "" then
                self.box_rectTab[tonumber(self.eventInfo.hasRewardList[i])].img:LoadSprite(string.format(LoadPath.UIPersonalArms,"UIactivities_icon_box"..tonumber(self.eventInfo.hasRewardList[i]).."_"..1))
                self.box_rectTab[tonumber(self.eventInfo.hasRewardList[i])].animator:Play("box_unOpen",0,0)
                self.box_rectTab[tonumber(self.eventInfo.hasRewardList[i])].bgEffect:SetActive(false)
                self.box_rectTab[tonumber(self.eventInfo.hasRewardList[i])].rewardEffect:SetActive(false)
            end
        end
    end
    if self.extraParam then
        self:OpenRewardTips(self.extraParam)
        self.extraParam = nil
        self.view.actParam = nil
    end
end

--常驻军备处理
function UIPersonalArms:RefreshPermanent()
    if not self.alive then
        return
    end
    self.permanentEventInfo = DataCenter.ActPersonalArmsInfo:GetEventInfo(self.permanentData.activityId)
    if self.permanentEventInfo and next(self.permanentEventInfo) then
        self._newStagePoint:SetText(self.permanentEventInfo.curScore)
        for i = 1 ,3 do
            self.newStageBoxPoint[i]:SetText(self.permanentEventInfo.rewardScoreIndexArr[i] and self.permanentEventInfo.rewardScoreIndexArr[i] or "")
            self.newStageBoxIcon[i]:LoadSprite(string.format(LoadPath.UIPersonalArms, "UIactivities_img2_box"..i))
            if self.permanentEventInfo.curScore >= self.permanentEventInfo.rewardScoreIndexArr[i] then
                self.newStageRed[i]:SetActive(true)
                self.newStageBoxAnim[i]:Play("CanReceive",0,0)
            else
                self.newStageRed[i]:SetActive(false)
                self.newStageBoxAnim[i]:Play("NoComplete",0,0)
            end
        end
        if next(self.permanentEventInfo.hasRewardList) then
            for i = 1, #self.permanentEventInfo.hasRewardList do
                if self.permanentEventInfo.hasRewardList[i] ~= "" then
                    local index = tonumber(self.permanentEventInfo.hasRewardList[i])
                    self.newStageBoxIcon[index]:LoadSprite(string.format(LoadPath.UIPersonalArms, "UIactivities_img2_box".. index .. "_open"))
                    self.newStageBoxAnim[index]:Play("NoComplete",0,0)
                    self.newStageRed[index]:SetActive(false)
                end
            end
        end
        if self.permanentEventInfo.curScore <= self.permanentEventInfo.rewardScoreIndexArr[1] then
            self._newStage1:SetValue(self.permanentEventInfo.curScore/self.permanentEventInfo.rewardScoreIndexArr[1])
            self._newStage2:SetValue(0)
            self._newStage3:SetValue(0)
        elseif self.permanentEventInfo.curScore > self.permanentEventInfo.rewardScoreIndexArr[1] and self.permanentEventInfo.curScore <= self.permanentEventInfo.rewardScoreIndexArr[2] then
            self._newStage1:SetValue(1)
            self._newStage2:SetValue((self.permanentEventInfo.curScore - self.permanentEventInfo.rewardScoreIndexArr[1])/(self.permanentEventInfo.rewardScoreIndexArr[2] - self.permanentEventInfo.rewardScoreIndexArr[1]))
            self._newStage3:SetValue(0)
        elseif self.permanentEventInfo.curScore > self.permanentEventInfo.rewardScoreIndexArr[2] and self.permanentEventInfo.curScore < self.permanentEventInfo.rewardScoreIndexArr[3] then
            self._newStage1:SetValue(1)
            self._newStage2:SetValue(1)
            self._newStage3:SetValue((self.permanentEventInfo.curScore - self.permanentEventInfo.rewardScoreIndexArr[2])/(self.permanentEventInfo.rewardScoreIndexArr[3]-self.permanentEventInfo.rewardScoreIndexArr[2]))
        elseif self.permanentEventInfo.curScore >= self.permanentEventInfo.rewardScoreIndexArr[3] then
            self._newStage1:SetValue(1)
            self._newStage2:SetValue(1)
            self._newStage3:SetValue(1)
        end
    end
end

function UIPersonalArms:SetAllCellDestroy()
    self.content:RemoveComponents(UIActivityTargetItem)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

function UIPersonalArms:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.RefreshDataPersonalArms, self.OnRefresh)
    self:AddUIListener(EventId.CloseUI, self.CloseUISignal)
end
function UIPersonalArms:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.RefreshDataPersonalArms, self.OnRefresh)
    self:RemoveUIListener(EventId.CloseUI, self.CloseUISignal)
end

function UIPersonalArms:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

function UIPersonalArms:RefreshTime()
    if self.eventInfo.endTime == nil then
        return
    end
    local deltaTime
    local curTime = math.floor(UITimeManager:GetInstance():GetServerTime())
    --在等待时间内
    if curTime >= self.eventInfo.readyTime and curTime < self.eventInfo.startTime then
        
        
        self.NoStarBg:SetActive(true)
        self.nostardes:SetActive(true)
        for i=1,3 do
            self.box_rectTab[i].rect:SetActive(false)
        end
        self.slider:SetActive(false)
        self._titleTarget_txt:SetActive(false)
        self.content:SetActive(false)
        self.isOpen = false
        deltaTime = self.eventInfo.startTime - curTime
        if deltaTime > 0 then
            self.time_text:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
            self.nostartitle:SetLocalText(GameDialogDefine.NEXT_ACTIVITY_OPEN_WITH, UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
        end
    else
        if not self.isOpen then
            for i=1,3 do
                self.box_rectTab[i].rect:SetActive(true)
            end
            self.slider:SetActive(true)
            self._titleTarget_txt:SetActive(true)
            self.content:SetActive(true)
            self.NoStarBg:SetActive(false)
            self.nostardes:SetActive(false)
            self.isOpen = true
        end
        deltaTime = self.eventInfo.endTime - curTime
        if deltaTime > 0 then
            self.time_text:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
        else
            self.time_text:SetLocalText(370100)
        end
    end
end

function UIPersonalArms:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function UIPersonalArms:OpenRewardTips(index)
    if self.eventInfo ~= nil then
        --已领取
        for i = 1, #self.eventInfo.hasRewardList do
            if tonumber(self.eventInfo.hasRewardList[i]) == index then
                self:ShowTips(index)
                return
            end
        end
        --不可领取,查看tips
        if self.eventInfo.curScore < self.eventInfo.rewardScoreIndexArr[index] then
            self:ShowTips(index)
            return
        end
        --可领取
        if self.isExist then
            self.delayRefreshCallBack = function()  
                self:FlyIcon(index)
            end
        end
        self.view.ctrl:SendActivityGetRewardCommand(self.eventInfo.actId,self.eventInfo.rewardScoreIndexArr[index],self.eventInfo.type)
    end
end

function UIPersonalArms:ShowTips(index)
    --打开tips
    local x = self.box_rectTab[index].btn.transform.position.x
    local y = self.box_rectTab[index].btn.transform.position.y
    local offset = 50
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityRewardTip,Localization:GetString("370101",self.eventInfo.cost[index]),ActivityEventType.PERSONAL,x,y,false,self.eventInfo.rewardScoreIndexArr[index],offset,self.activityId)
end

--{{{常驻军备活动
function UIPersonalArms:OpenRewardPermanentTips(index)
    if self.permanentEventInfo ~= nil then
        --已领取
        for i = 1, #self.permanentEventInfo.hasRewardList do
            if tonumber(self.permanentEventInfo.hasRewardList[i]) == index then
                self:ShowPermanentTips(index)
                return
            end
        end
        --不可领取,查看tips
        if self.permanentEventInfo.curScore < self.permanentEventInfo.rewardScoreIndexArr[index] then
            self:ShowPermanentTips(index)
            return
        end
        --可领取
        self.view.ctrl:SendActivityGetRewardCommand(self.permanentEventInfo.actId,self.permanentEventInfo.rewardScoreIndexArr[index],self.permanentEventInfo.type)
    end
end

function UIPersonalArms:ShowPermanentTips(index)
    --打开tips
    local x = self.newStageBox[index].transform.position.x
    local y = self.newStageBox[index].transform.position.y
    local offset = 50
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityRewardTip,Localization:GetString("370101",self.permanentEventInfo.cost[index]),ActivityEventType.PERSONAL,x,y,false,self.permanentEventInfo.rewardScoreIndexArr[index],offset,self.permanentData.activityId)
end
--}}}

--军备日历
function UIPersonalArms:OnClickCalender()
    local calendarList =  DataCenter.ActPersonalArmsInfo:GetCalendar()
    local curHour = UITimeManager:GetInstance():TimeStampToTimeForServerOnlyHour(UITimeManager:GetInstance():GetServerTime())
    if calendarList then
        local nowT = UITimeManager:GetInstance():GetServerTime()
        local nowWeekday = UITimeManager:GetInstance():GetWeekdayIndex(nowT)
        local dayArr = calendarList.dayArr      
        local actTime = calendarList.actTime    --活动持续时间
        local showIndex = nil
        local listParam = {}
        local all = 0
        for i = 1 ,#dayArr, 1 do
            local count = 0
            for k = 1 ,#dayArr[i].eventArr do
                all = all + 1
                local list = {}
                list.list = {}
                if k == 1 then
                    table.insert(list.list, {des = Localization:GetString(WeekType[i])})  --星期
                else
                    table.insert(list.list, {des = ""}) 
                end
                local min = (count * actTime)/60
                local second = (count * actTime)%60
                if i == nowWeekday then
                    if tonumber(curHour) >= min then
                        showIndex = all
                    end
                end
                count = count + 1
                table.insert(list.list, {des = string.format("%02d:%02d",min,second)})--开始时间
                table.insert(list.list, {des = Localization:GetString(dayArr[i].eventArr[k].name)})--活动主题
                list.showLine = (all % 2 == 0) and (showIndex ~= all)
                table.insert(listParam, list)
            end
        end
        local param = {}
        param.list = listParam
        param.titleList = { {des = Localization:GetString(372306)},
                            {des = Localization:GetString(302040)},
                            {des = Localization:GetString(372315)}, }
        param.title = 450111
        param.showIndex = showIndex
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonItemProbability, NormalBlurPanelAnim, param)
    end
end

--转化
function UIPersonalArms:OnClickConvert()
    local chooseArr = DataCenter.ActPersonalArmsInfo:GetChooseArr(self.activityId)
    if chooseArr then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPersonalArmsConvert,{ anim = true },self.activityId,chooseArr)
    end
end

--等关闭奖励界面后再飞图标
function UIPersonalArms:FlyIcon(index)
    self.delayRefreshCallBack = nil
    local rewardType = RewardType.PERSON_POINT
    local pic = string.format(LoadPath.ItemPath, "icon_medal")
    local flyPos = self._newStagePointBg.transform.position
    UIUtil.DoFly(tonumber(rewardType), 1, pic, self.box_rectTab[index].btn.transform.position, flyPos, 73, 73, function()
        self:RefreshPermanent()
    end)
end

--关闭一个界面
function UIPersonalArms:CloseUISignal(uiName)
    if uiName == UIWindowNames.UIGiftPackageRewardGet then
        if self.delayRefreshCallBack ~= nil then
            self.delayRefreshCallBack()
        end
    end
end
function UIPersonalArms:OpenTips()
    if self.eventInfo~=nil and self.eventInfo.actName~=nil then
        UIUtil.ShowIntro(Localization:GetString(self.eventInfo.actName), Localization:GetString("100239"), Localization:GetString("450121"))
    end
    
end

return UIPersonalArms