---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/2/6 21:05
---

local DecorationGiftPackageMain = BaseClass("DecorationGiftPackageMain",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local DetectEventRewardCell = require "UI.UIRadarCenter.UIDetectEvent.Component.DetectEventRewardCell"
local UICommonItem = require "UI.UICommonItem.UICommonItem"

local GiftButton = require "UI.UIActivityCenterTable.Component.DecorationGiftPackage.GiftButton"
local bg_path = "Bg"
local name_text_path = "Root/Top/title"
local intro_btn_path = "Root/Top/title/Intro"
local desc_text_path = "Root/Top/subTitle"
local remain_time_path = "Root/Top/remainTime"
local gift_1_path = "Root/rewardBg/Btn_1"
local gift_2_path = "Root/rewardBg/Btn_2"
local gift_3_path = "Root/rewardBg/Btn_3"

local reward_btn_path = "Root/freePackageBtn"
local reward_close_img_path = "Root/freePackageBtn/unopen"
local reward_open_img_path = "Root/freePackageBtn/opened"
local reddot_path = "Root/freePackageBtn/unopen/RedDotWithoutNum"
local reward_text_btn = "Root/freePackageBtn/freeTxt"

local reward_item_path = "Root/rewardBg/RewardCell"
local scroll_view_path = "Root/rewardBg/ScrollView"
local content_path = "Root/rewardBg/ScrollView/Viewport/Content"

local reward_title_1_path = "Root/rewardBg/RewardTitle1"
local reward_title_2_path = "Root/rewardBg/RewardTitle2"

local item_use_path = "Root/itemUse"
local item_use_item_path = "Root/itemUse/itemUseItem"
local not_have_item_path = "Root/itemUse/notHaveItem"
local item_use_btn_path = "Root/itemUse/itemUseBtn"
local item_use_btn_text_path = "Root/itemUse/itemUseBtn/itemUseText"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
end

local function ComponentDefine(self)
    self.bg = self:AddComponent(UIImage, bg_path)
    self.name_text = self:AddComponent(UIText, name_text_path)
    self.remainTimeN = self:AddComponent(UIText, remain_time_path)
    self.intro_btn = self:AddComponent(UIButton, intro_btn_path)
    self.intro_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnIntroClick()
    end)

    self.desc_text = self:AddComponent(UIText, desc_text_path)

    self.gift_1 = self:AddComponent(GiftButton, gift_1_path)
    self.gift_2 = self:AddComponent(GiftButton, gift_2_path)
    self.gift_3 = self:AddComponent(GiftButton, gift_3_path)
    
    self.reward_btn = self:AddComponent(UIButton, reward_btn_path)
    self.reward_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnRewardClick()
    end)
    self.reward_close_img = self:AddComponent(UIImage, reward_close_img_path)
    self.reward_open_img = self:AddComponent(UIImage, reward_open_img_path)
    self.reddot = self:AddComponent(UIBaseContainer, reddot_path)
    self.reward_text = self:AddComponent(UIText, reward_text_btn)
    self.reward_text:SetLocalText(320752)
    self.reward_item = self:AddComponent(DetectEventRewardCell, reward_item_path)

    self.reward_title_1 = self:AddComponent(UIText, reward_title_1_path)
    self.reward_title_1:SetLocalText(320750)
    self.reward_title_2 = self:AddComponent(UIText, reward_title_2_path)
    self.reward_title_2:SetLocalText(320751)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.content = self:AddComponent(UIBaseContainer, content_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)

    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)

    self.item_use = self:AddComponent(UIBaseContainer, item_use_path)
    self.item_use_item = self:AddComponent(UICommonItem, item_use_item_path)
    self.not_have_item = self:AddComponent(UIText, not_have_item_path)
    self.not_have_item:SetLocalText(140042)
    self.item_use_btn = self:AddComponent(UIButton, item_use_btn_path)
    self.item_use_btn_text = self:AddComponent(UIText, item_use_btn_text_path)
    self.item_use_btn_text:SetLocalText(110046)
    self.item_use_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnItemUseClick()
    end)
end

local function ComponentDestroy(self)
    self:ClearScroll()
    self:DelCountDownTimer()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.DecorationActivityDataUpdate, self.RefreshView)
    self:AddUIListener(EventId.RefreshItems, self.RefreshItemUse)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshItemUse)
    self:RemoveUIListener(EventId.DecorationActivityDataUpdate, self.RefreshView)
    base.OnRemoveListener(self)
end

local function OnIntroClick(self)
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)

    UIUtil.ShowIntro(Localization:GetString(activityInfo.name), Localization:GetString("100239")
    , Localization:GetString(activityInfo.story))
end

local function OnRewardClick(self)
    if self.data.rewardState == DecorationActivityRewardState.DecorationActivityRewardState_Normal then
        UIManager:GetInstance():OpenWindow(UIWindowNames.DecorationGiftRewardIntro, { anim = true })
    elseif self.data.rewardState == DecorationActivityRewardState.DecorationActivityRewardState_Can_Receive then
        DataCenter.DecorationGiftPackageManager:GetActivityDataReward(self.activityId)
    elseif self.data.rewardState == DecorationActivityRewardState.DecorationActivityRewardState_Received then
        UIUtil.ShowTipsId(110461)
    end
end

local function SetData(self, activityId)
    self.activityId = activityId

    local actData = DataCenter.ActivityListDataManager:GetActivityDataById(activityId)
    local bgPath = string.format(LoadPath.UIDecorationBG, actData.activity_pic)
    self.bg:LoadSprite(bgPath)
    
    DataCenter.DecorationGiftPackageManager:GetActivityData(toInt(self.activityId))
    DataCenter.DecorationGiftPackageManager:SetIsNew()
    self:RefreshView()
end

local function RefreshRewardBtn(self)
    self.reward_close_img:SetActive(self.data.rewardState ~= DecorationActivityRewardState.DecorationActivityRewardState_Received)
    self.reward_open_img:SetActive(self.data.rewardState == DecorationActivityRewardState.DecorationActivityRewardState_Received)
    self.reddot:SetActive(self.data.rewardState == DecorationActivityRewardState.DecorationActivityRewardState_Can_Receive)
end

local function RefreshView(self)
    local needRefreshScroll = self.rewardList == nil
    self.data = self:GetShowData()
    if self.data.giftIds == nil then
        return
    end
    self.rewardList = self.data.reward2
    
    self.gift_1:SetData(self.data.giftIds[1], self.data.nums[1])
    self.gift_2:SetData(self.data.giftIds[2], self.data.nums[2])
    self.gift_3:SetData(self.data.giftIds[3], self.data.nums[3])
    
    if needRefreshScroll then
        local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
        self.name_text:SetLocalText(activityInfo.name)
        self.desc_text:SetLocalText(activityInfo.desc_info)
        local rewardParam = self.data.reward1
        local param = DetectEventRewardCell.Param.New()
        param.rewardType = rewardParam.rewardType
        param.itemId = rewardParam.itemId
        param.count = rewardParam.count
        self.reward_item:ReInit(param)
        self.reward_item:SetNumText("1~9")
        self:ShowRewardCells()
    end
    self:RefreshRewardBtn()
    self:AddCountDownTimer()
    self:RefreshRemainTime()
    self:RefreshItemUse()
end

local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    if self.remainTimeN == nil then
        return
    end
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if activityInfo == nil then
        return
    end
    local remainTime = activityInfo.endTime - curTime
    if remainTime > 0 then
        self.remainTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.remainTimeN:SetText("")
        self:DelCountDownTimer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function ShowRewardCells(self)
    self:ClearScroll()
    if self.rewardList == nil then
        return
    end
    local count = table.count(self.rewardList)
    if count > 0 then
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
        CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.content.transform)
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()--清循环列表数据
    self.scroll_view:RemoveComponents(DetectEventRewardCell)--清循环列表gameObject
end

local function OnCreateCell(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.scroll_view:AddComponent(DetectEventRewardCell, itemObj)
    local rewardParam = self.rewardList[index]
    local param = DetectEventRewardCell.Param.New()
    param.rewardType = rewardParam.rewardType
    param.itemId = rewardParam.itemId
    param.count = rewardParam.count
    param.showEffect = index == 1

    cellItem:ReInit(param)
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, DetectEventRewardCell)
end

local function GetShowData(self)
    local data = {}
    local giftData = DataCenter.DecorationGiftPackageManager:GetData()
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if giftData ~= nil then
        data.activityId = giftData.activityId
        data.giftIds = giftData.exchangeIds
        data.nums = string.split(activityInfo.para1, ";")
        data.rewards = giftData.reward
        data.rewardState = giftData.rewardState
    end
    if activityInfo then
        local rewardGoods = activityInfo.reward_goods
        local vec1 = string.split(rewardGoods, "@")
        if table.count(vec1) == 2 then
            local itemStr = vec1[1]
            local vec2 = string.split(vec1[2], "|")
            local GetReward = function(rewardStr)
                local result = {}
                local vec = string.split(rewardStr, ";")
                result.rewardType = RewardType.GOODS
                result.itemId = toInt(vec[1])
                result.count = toInt(vec[2])
                return result
            end
            data.reward1 = GetReward(itemStr)
            data.reward2 = {}
            for _, v in ipairs(vec2) do
                local temp = GetReward(v)
                table.insert(data.reward2, temp)
            end
        end
    end
    return data
end

local function RefreshItemUse(self)
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if activityInfo and not string.IsNullOrEmpty(activityInfo.para2) then
        local itemCount = DataCenter.ItemData:GetItemCount(tonumber(activityInfo.para2))
        if itemCount > 0 then
            self.item_use:SetActive(true)
            local param = DetectEventRewardCell.Param.New()

            param.rewardType = RewardType.GOODS
            param.itemId = tonumber(activityInfo.para2)
            param.count = itemCount
            self.item_use_item:ReInit(param)

            self.item_use_btn:SetActive(itemCount > 0)
            self.not_have_item:SetActive(itemCount <= 0)
        else
            self.item_use:SetActive(false)
        end
    else
        self.item_use:SetActive(false)    
    end
end

local function OnItemUseClick(self)
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if activityInfo and not string.IsNullOrEmpty(activityInfo.para2) then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIUseItem, {anim = true}, tonumber(activityInfo.para2))
    end
end

DecorationGiftPackageMain.OnItemUseClick = OnItemUseClick
DecorationGiftPackageMain.RefreshItemUse = RefreshItemUse
DecorationGiftPackageMain.OnCreateCell = OnCreateCell
DecorationGiftPackageMain.OnDeleteCell = OnDeleteCell
DecorationGiftPackageMain.ClearScroll = ClearScroll
DecorationGiftPackageMain.OnCreate = OnCreate
DecorationGiftPackageMain.OnDestroy = OnDestroy
DecorationGiftPackageMain.OnEnable = OnEnable
DecorationGiftPackageMain.OnDisable = OnDisable
DecorationGiftPackageMain.ComponentDefine =ComponentDefine
DecorationGiftPackageMain.ComponentDestroy =ComponentDestroy
DecorationGiftPackageMain.OnAddListener =OnAddListener
DecorationGiftPackageMain.OnRemoveListener =OnRemoveListener
DecorationGiftPackageMain.OnIntroClick = OnIntroClick
DecorationGiftPackageMain.OnRewardClick = OnRewardClick
DecorationGiftPackageMain.SetData = SetData
DecorationGiftPackageMain.RefreshRewardBtn = RefreshRewardBtn
DecorationGiftPackageMain.RefreshView = RefreshView
DecorationGiftPackageMain.ShowRewardCells = ShowRewardCells
DecorationGiftPackageMain.GetShowData = GetShowData
DecorationGiftPackageMain.AddCountDownTimer = AddCountDownTimer
DecorationGiftPackageMain.RefreshRemainTime = RefreshRemainTime
DecorationGiftPackageMain.DelCountDownTimer = DelCountDownTimer

return DecorationGiftPackageMain