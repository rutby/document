---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/31 14:39
---HeroGrowthMain.lua

local HeroGrowthMain = BaseClass("HeroGrowthMain", UIBaseView)
local base = UIBaseView
local HeroGrowthTaskItem = require "UI.UIActivityCenterTable.Component.HeroGrowth.HeroGrowthTaskItem"
local Localization = CS.GameEntry.Localization

local title_path = "RightView/Top/title"
local subTitle_path = "RightView/Top/subTitle"
local infoBtn_path = "RightView/Top/title/infoBtn"
local time_path = "RightView/Top/actTime"
local cdTime_path = "RightView/Top/remainTime"
local box_path = "RightView/score/box/box_"
local slider_path = "RightView/score/Slider"
local taskScrollView_path = "RightView/tasks/ScrollView"
local taskContent_path = "RightView/tasks/ScrollView/Viewport/Content"
local scoreImg_path = "RightView/score/score"
local scoreNum_path = "RightView/score/score/scoreNum"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
end

-- 隐藏
local function OnDisable(self)
    base.OnDisable(self)
end


local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnHeroGrowthInfoUpdate, self.RefreshAll)
    self:AddUIListener(EventId.MainTaskSuccess, self.OnScoreChangeRefresh)
    self:AddUIListener(EventId.OnHeroGrowthScoreBoxStatusUpdate, self.OnScoreBoxStatusChangeRefresh)
end


local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnHeroGrowthInfoUpdate, self.RefreshAll)
    self:RemoveUIListener(EventId.MainTaskSuccess, self.OnScoreChangeRefresh)
    self:RemoveUIListener(EventId.OnHeroGrowthScoreBoxStatusUpdate, self.OnScoreBoxStatusChangeRefresh)
    base.OnRemoveListener(self)
end

--控件的定义
local function ComponentDefine(self)
    self.titleN = self:AddComponent(UIText, title_path)
    self.subTitleN = self:AddComponent(UIText, subTitle_path)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)
    self.timeN = self:AddComponent(UIText, time_path)
    self.timeN:SetActive(false)
    self.cdTimeN = self:AddComponent(UIText, cdTime_path)
    self.scoreBoxTbN = {}
    for i = 1, 6 do
        local boxGo = self:AddComponent(UIBaseContainer, box_path .. i)
        local numGo = boxGo:AddComponent(UIText, "targetNum")
        local boxBtnGo = boxGo:AddComponent(UIButton, "box/Icon")
        local boxEffGo1 = boxGo:AddComponent(UIBaseContainer, "box/VFX_ui_box_light")
        local boxEffGo2 = boxGo:AddComponent(UIBaseContainer, "box/VFX_ui_box_reward")
        local redPoint = boxGo:AddComponent(UIBaseContainer, "box/Red")
        boxBtnGo:SetOnClick(function()
            self:OnClickBox(i)
        end)
        local newBox = {
            rootN = boxGo,
            numN = numGo,
            boxBtnN = boxBtnGo,
            effN1 = boxEffGo1,
            effN2 = boxEffGo2,
            redN = redPoint,
        }
        table.insert(self.scoreBoxTbN, newBox)
    end
    self.scoreSliderN = self:AddComponent(UISlider, slider_path)
    self.taskScrollViewN = self:AddComponent(UIScrollView, taskScrollView_path)
    self.taskScrollViewN:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.taskScrollViewN:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.taskContentN = self:AddComponent(UIBaseContainer, taskContent_path)
    self.scoreImgN = self:AddComponent(UIImage, scoreImg_path)
    self.scoreNumN = self:AddComponent(UIText, scoreNum_path)
end

--控件的销毁
local function ComponentDestroy(self)
    self.titleN = nil
    self.subTitleN = nil
    self.timeN = nil
    self.cdTimeN = nil
    self.scoreBoxTbN = nil
    self.scoreSliderN = nil
    self.taskScrollViewN = nil
    self.taskContentN = nil
end

--变量的定义
local function DataDefine(self)
    self.activityId = nil
    self.activityInfo = nil
    self.taskList = {}
end

--变量的销毁
local function DataDestroy(self)
    self.activityId = nil
    self.activityInfo = nil
    self.taskList = nil
end


local function SetData(self, activityId)
    self.activityId = activityId
    self.activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(activityId)
    self.growthInfo = DataCenter.HeroGrowthActivityManager:GetGrowthInfo(activityId)
    if not self.activityInfo or not self.growthInfo then
        return
    end
    self:RefreshAll()
end

local function RefreshAll(self)
    if IsNull(self.gameObject) then
        return
    end
    if not self.activityInfo or not self.growthInfo then
        return
    end
    self:RefreshTitle()
    self:RefreshScore()
    self:RefreshTask()
end

local function OnScoreChangeRefresh(self)
    if IsNull(self.gameObject) then
        return
    end
    if not self.activityInfo or not self.growthInfo then
        return
    end
    self:RefreshScore()
    TimerManager:GetInstance():DelayInvoke(function()
        self:RefreshTask()
    end, 0.5)
end

local function OnScoreBoxStatusChangeRefresh(self)
    if IsNull(self.gameObject) then
        return
    end
    if not self.activityInfo or not self.growthInfo then
        return
    end
    self:RefreshScore()
end

local function OnTaskStatusChange(self)
    if IsNull(self.gameObject) then
        return
    end
    if not self.activityInfo or not self.growthInfo then
        return
    end
    self:RefreshTask()
end

local function RefreshTitle(self)
    self.titleN:SetText(Localization:GetString(self.activityInfo.name))
    self.subTitleN:SetText(Localization:GetString(self.activityInfo.desc_info))
    self:AddCountDownTimer()
    self:RefreshRemainTime()
end

local function RefreshScore(self)
    local curScore = self.growthInfo.score
    local scoreList = self.growthInfo.scoreRewardList
    self.scoreNumN:SetText(curScore)
    
    local finishedIndex = 0
    local extraProg = 0
    for i, v in ipairs(scoreList) do
        if curScore >= v.needScore then
            finishedIndex = i
        else
            if i == 1 then
                extraProg = curScore / scoreList[1].needScore
            else
                extraProg = (curScore - scoreList[finishedIndex].needScore) / (v.needScore - scoreList[finishedIndex].needScore)
            end
            break
        end
    end
    local prog = (finishedIndex + extraProg) / #scoreList
    self.scoreSliderN:SetValue(prog)
    
    
    for i, v in ipairs(self.scoreBoxTbN) do
        if i <= #scoreList then
            local boxImgPath = ""
            if i == 1 then
                boxImgPath = "Assets/Main/Sprites/UI/UIPersonalArms/UIactivities_icon_box1"
            elseif i == #scoreList then
                boxImgPath = "Assets/Main/Sprites/UI/UIPersonalArms/UIactivities_icon_box3"
            else
                boxImgPath = "Assets/Main/Sprites/UI/UIPersonalArms/UIactivities_icon_box2"
            end
            
            v.rootN:SetActive(true)
            v.effN1:SetActive(false)
            v.effN2:SetActive(false)
            v.redN:SetActive(false)
            v.numN:SetText(scoreList[i].needScore)
            if curScore >= scoreList[i].needScore then
                if scoreList[i].rewardFlag == 1 then
                    v.status = DetectEventState.DETECT_EVENT_STATE_REWARDED
                    v.boxBtnN:LoadSprite(boxImgPath .. "_1")
                else
                    v.status = DetectEventState.DETECT_EVENT_STATE_FINISHED
                    v.boxBtnN:LoadSprite(boxImgPath)
                    v.effN1:SetActive(true)
                    v.effN2:SetActive(true)
                    v.redN:SetActive(true)
                end
            else
                v.status = DetectEventState.DETECT_EVENT_STATE_NOT_FINISH
                v.boxBtnN:LoadSprite(boxImgPath)
            end
        else
            v.rootN:SetActive(false)
        end
    end
    if self.activityInfo and self.activityInfo.sub_type ~= 2 then
        self.scoreBoxTbN[6].rootN:SetActive(false)
    end
end

local function RefreshTask(self)
    self.taskList = DataCenter.HeroGrowthActivityManager:GetCurTaskList(self.activityId)
    if self.taskList and #self.taskList > 0 then
        self.taskScrollViewN:SetTotalCount(#self.taskList)
        self.taskScrollViewN:RefillCells()--RefreshCells()--
    end
end

local function OnItemMoveIn(self, itemObj, index)
    itemObj.name = tostring(index)
    local packItem = self.taskScrollViewN:AddComponent(HeroGrowthTaskItem, itemObj)
    local tempTask = self.taskList[index]
    packItem:SetItem(tempTask, self.scoreImgN.transform.position,self.activityInfo)
end

local function OnItemMoveOut(self, itemObj, index)
    self.taskScrollViewN:RemoveComponent(itemObj.name, HeroGrowthTaskItem)
end


local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.activityInfo.endTime - curTime
    if remainTime > 0 then
        self.cdTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.cdTimeN:SetText("")
        self:DelCountDownTimer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function OnClickBox(self, boxIndex)
    local box = self.scoreBoxTbN[boxIndex]
    if box.status == DetectEventState.DETECT_EVENT_STATE_FINISHED then
        DataCenter.HeroGrowthActivityManager:ClaimBoxRewardReq(self.activityId, boxIndex)
    else
        local x = box.boxBtnN.transform.position.x
        local y = box.boxBtnN.transform.position.y
        local offset = 150
        local isUp = false
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityRewardTip,Localization:GetString("240620"),EnumActivity.HeroGrowth.Type,x,y,isUp,boxIndex,offset,tonumber(self.activityId))
    end
end

local function OnClickInfoBtn(self)
    UIUtil.ShowIntro(Localization:GetString(self.activityInfo.name), Localization:GetString("100239"),Localization:GetString(self.activityInfo.story))
end


HeroGrowthMain.OnCreate = OnCreate
HeroGrowthMain.OnDestroy = OnDestroy
HeroGrowthMain.OnAddListener = OnAddListener
HeroGrowthMain.OnRemoveListener = OnRemoveListener
HeroGrowthMain.ComponentDefine = ComponentDefine
HeroGrowthMain.ComponentDestroy = ComponentDestroy
HeroGrowthMain.DataDefine = DataDefine
HeroGrowthMain.DataDestroy = DataDestroy
HeroGrowthMain.OnEnable = OnEnable
HeroGrowthMain.OnDisable = OnDisable

HeroGrowthMain.SetData = SetData
HeroGrowthMain.RefreshAll = RefreshAll
HeroGrowthMain.OnScoreChangeRefresh = OnScoreChangeRefresh
HeroGrowthMain.OnScoreBoxStatusChangeRefresh = OnScoreBoxStatusChangeRefresh
HeroGrowthMain.OnTaskStatusChange = OnTaskStatusChange
HeroGrowthMain.RefreshTitle = RefreshTitle
HeroGrowthMain.RefreshScore = RefreshScore
HeroGrowthMain.RefreshTask = RefreshTask
HeroGrowthMain.OnItemMoveIn = OnItemMoveIn
HeroGrowthMain.OnItemMoveOut = OnItemMoveOut
HeroGrowthMain.AddCountDownTimer = AddCountDownTimer
HeroGrowthMain.RefreshRemainTime = RefreshRemainTime
HeroGrowthMain.DelCountDownTimer = DelCountDownTimer
HeroGrowthMain.OnClickBox = OnClickBox
HeroGrowthMain.OnClickInfoBtn = OnClickInfoBtn
--HeroGrowthMain.AddTimer = AddTimer
--HeroGrowthMain.SetRemainTime = SetRemainTime
--HeroGrowthMain.DelTimer = DelTimer

return HeroGrowthMain