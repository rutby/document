---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/31 14:39
---HeroGrowthTaskItem.lua


local HeroGrowthTaskItem = BaseClass("HeroGrowthTaskItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIHeroCell = require "UI.UIHero2.Common.UIHeroCellSmall"

local title_path = "taskName"
local subTitle_path = "taskDesc"
local heroItem_path = "heroIcon"
local skillIcon_path = "skill"
local skillLv_path = "skill/levelBg"
local skillLvTxt_path = "skill/levelBg/level"
local skillLock_path = "skill/lock"
local scoreImg_path = "scoreImg"
local scoreNum_path = "scoreImg/scoreNum"
local jumpBtn_path = "Btn_Go"
local jumpBtnTxt_path = "Btn_Go/Txt_Go"
local claimBtn_path = "Btn_Reward"
local claimBtnTxt_path = "Btn_Reward/Txt_Reward"
local completeTip_path = "Completed"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.titleN = self:AddComponent(UIText, title_path)
    self.subTitleN = self:AddComponent(UIText, subTitle_path)
    self.heroItemN = self:AddComponent(UIHeroCell, heroItem_path)
    self.skillIconN = self:AddComponent(UIImage, skillIcon_path)
    self.skillBtnN = self:AddComponent(UIButton, skillIcon_path)
    self.skillBtnN:SetOnClick(function()
        self:OnClickSkillBtn()
    end)
    self.skillLvN = self:AddComponent(UIBaseContainer, skillLv_path)
    self.skillLvTxtN = self:AddComponent(UIText, skillLvTxt_path)
    self.skillLockN = self:AddComponent(UIBaseContainer, skillLock_path)
    self.scoreImgN = self:AddComponent(UIImage, scoreImg_path)
    self.scoreNumN = self:AddComponent(UIText, scoreNum_path)
    self.jumpBtnN = self:AddComponent(UIButton, jumpBtn_path)
    self.jumpBtnN:SetOnClick(function()
        self:OnClickJumpBtn()
    end)
    self.jumpBtnTxtN = self:AddComponent(UIText, jumpBtnTxt_path)
    self.jumpBtnTxtN:SetLocalText(110003)
    self.claimBtnN = self:AddComponent(UIButton, claimBtn_path)
    self.claimBtnN:SetOnClick(function()
        self:OnClickClaimBtn()
    end)
    self.claimBtnTxtN = self:AddComponent(UIText, claimBtnTxt_path)
    self.claimBtnTxtN:SetLocalText(170004)
    self.completeTipN = self:AddComponent(UIBaseContainer, completeTip_path)
    --self.completeTipN:SetLocalText(170008)
end

--控件的销毁
local function ComponentDestroy(self)
    self.titleN = nil
    self.subTitleN = nil
    self.heroItemN = nil
    self.skillIconN = nil
    self.skillLvN = nil
    self.skillLvTxtN = nil
    self.skillLockN = nil
    self.scoreImgN = nil
    self.scoreNumN = nil
    self.jumpBtnN = nil
    self.jumpBtnTxtN = nil
    self.claimBtnN = nil
    self.claimBtnTxtN = nil
    self.completeTipN = nil
end

--变量的定义
local function DataDefine(self)
    self.taskInfo = nil
    self.questInfo = nil
    self.questTemplate = nil
end

--变量的销毁
local function DataDestroy(self)
    self.taskInfo = nil
    self.questInfo = nil
    self.questTemplate = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.OnDigOneBlockSucc, self.ShowDigSuccEff)
end

local function OnRemoveListener(self)
    --self:RemoveUIListener(EventId.OnDigOneBlockSucc, self.ShowDigSuccEff)
    base.OnRemoveListener(self)
end

local function SetItem(self, taskInfo, flyPos,actData)
    self.flyPos = flyPos
    self.taskInfo = taskInfo
    if not self.taskInfo then
        return
    end
    self.questInfo = DataCenter.TaskManager:FindTaskInfo(self.taskInfo.id)
    self.questTemplate = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), self.taskInfo.id)
    if not self.questInfo or not self.questTemplate then
        return
    end
    self.actData = actData
    local desc = DataCenter.QuestTemplateManager:GetDesc(self.questTemplate)
    self.titleN:SetText(desc)
    self.scoreNumN:SetText(self.taskInfo.point)
    
    if actData.sub_type == 2 then
        self.titleN:SetAnchoredPositionXY(30,-60)
        self:RefreshSeasonBuild()
    else
        self.titleN:SetAnchoredPositionXY(186,-34)
        self.heroId = LocalController:instance():getStrValue(TableName.ActSeven, self.taskInfo.confId, "type1")
        self.skillId = self.questTemplate.para1
        self.subTitleN:SetActive(true)
        self.skillIconN:SetActive(true)
        self.heroItemN:SetActive(true)
        self:RefreshHero()
    end
end

local function RefreshSeasonBuild(self)
    self.subTitleN:SetActive(false)
    self.skillIconN:SetActive(false)
    self.heroItemN:SetActive(false)
    self.completeTipN:SetActive(self.questInfo.state == TaskState.Received)
    self.jumpBtnN:SetActive(self.questInfo.state == TaskState.NoComplete)
    self.claimBtnN:SetActive(self.questInfo.state == TaskState.CanReceive)
end

local function RefreshHero(self)
    self.heroItemN:InitWithConfigId(self.heroId, nil, nil, nil, nil, nil, nil, function()
        local heroUuid = DataCenter.HeroDataManager:GetHeroUuidByHeroId(self.heroId)
        if heroUuid and tonumber(heroUuid) ~= 0 then
            local heroList = {}
            table.insert(heroList,heroUuid)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, 1, heroUuid, heroList)
        else
            local fromType = 3--UIHeroInfoView.FromType.SingleHeroId
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroInfo, fromType, self.heroId)
        end
    end)
    self.skillIconN:LoadSprite(HeroUtils.GetSkillIcon(self.skillId))
    
    local targetLv = tonumber(self.questTemplate.para2)
    self:RefreshSkill(targetLv)
end

local function RefreshSkill(self, targetLv)
    local hasHero, heroInfo = false, nil

    local heroUuid = DataCenter.HeroDataManager:GetHeroUuidByHeroId(self.heroId)
    if heroUuid and tonumber(heroUuid) ~= 0 then
        hasHero = true
        heroInfo = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    end

    local status = HeroGrowthTaskStatus.LackHero
    local strSubTitle = ""
    local tempSkillLv = 0
    if not hasHero then
        status = HeroGrowthTaskStatus.LackHero
    else
        local skillData = heroInfo:GetSkillData(self.skillId)
        local skillUnlock = heroInfo:IsSkillUnlock(self.skillId)
        tempSkillLv = skillData:GetLevel()
        if not skillUnlock then
            status = HeroGrowthTaskStatus.LackSkill
            strSubTitle = Localization:GetString("129216", skillData.unlockHeroLv)
        else
            if tempSkillLv < targetLv then
                status = HeroGrowthTaskStatus.SkillLvUnfit
                local skillIndex = self:GetSkillIndex(self.skillId, heroInfo) or 1
                local heroConfig = heroInfo:GetConfig()
                local rankId = self:GetSKillNextLevelRankId(skillIndex, tempSkillLv+1, heroConfig['rarity'])
                if rankId ~= -1 then
                    strSubTitle = Localization:GetString("129118", Localization:GetString(HeroUtils.GetMilitaryRankName(rankId)))
                end
            else
                if self.questInfo.state == 1 then
                    status = HeroGrowthTaskStatus.Complete
                elseif self.questInfo.state == 2 then
                    status = HeroGrowthTaskStatus.Rewarded
                else
                    status = HeroGrowthTaskStatus.SkillLvUnfit
                end
            end
        end
    end
    
    self.skillStatus = status
    self:RefreshSkillUI(strSubTitle, tempSkillLv)
end

local function GetSkillIndex(self, skillId, heroInfo)
    local heroConfig = heroInfo:GetConfig()
    if heroConfig ~= nil then
        local skillArray = heroConfig['skill']
        if type(skillArray) ~= 'table' then
            skillArray = string.split(skillArray, '|')
        end
        for i, v in ipairs(skillArray) do
            if v == skillId then
                return i
            end
        end
    end
end

local function GetSKillNextLevelRankId(self, skillIndex, skillNextLevel, rarity)
    local levelCnt, findRankId = 1, -1
    local skillIndexStr = tostring(skillIndex)
    local max = LocalController:instance():GetTableLength(TableName.HeroMilitaryRank)
    for rankId = 1, max do
        local skillIdxStr = GetTableData(TableName.HeroMilitaryRank, rankId, 'skill')[rarity] or ''
        local upSkillIdxList = string.split(skillIdxStr, ';')
        if table.hasvalue(upSkillIdxList, skillIndexStr) then
            levelCnt = levelCnt + 1
        end

        if levelCnt >= skillNextLevel then
            findRankId = rankId + 1
            break
        end
    end

    return findRankId
end


local function RefreshSkillUI(self, strSubTitle, tempSkillLv)
    self.skillLockN:SetActive(false)
    self.skillLvN:SetActive(false)
    self.jumpBtnN:SetActive(false)
    self.claimBtnN:SetActive(false)
    self.completeTipN:SetActive(false)
    if self.skillStatus == HeroGrowthTaskStatus.LackHero then
        CS.UIGray.SetGray(self.heroItemN.transform, true, true)
        CS.UIGray.SetGray(self.skillIconN.transform, true, true)
        self.skillLockN:SetActive(true)
        self.subTitleN:SetLocalText("240600")
        self.jumpBtnN:SetActive(true)
    elseif self.skillStatus == HeroGrowthTaskStatus.LackSkill then
        CS.UIGray.SetGray(self.heroItemN.transform, false, true)
        CS.UIGray.SetGray(self.skillIconN.transform, true, true)
        self.skillLockN:SetActive(true)
        self.subTitleN:SetText(strSubTitle)
        self.jumpBtnN:SetActive(true)
    elseif self.skillStatus == HeroGrowthTaskStatus.SkillLvUnfit then
        CS.UIGray.SetGray(self.heroItemN.transform, false, true)
        CS.UIGray.SetGray(self.skillIconN.transform, false, true)
        self.skillLvN:SetActive(true)
        self.skillLvTxtN:SetText(tempSkillLv)
        self.subTitleN:SetText(strSubTitle)
        self.jumpBtnN:SetActive(true)
    elseif self.skillStatus == HeroGrowthTaskStatus.Complete then
        CS.UIGray.SetGray(self.heroItemN.transform, false, true)
        CS.UIGray.SetGray(self.skillIconN.transform, false, true)
        self.skillLvN:SetActive(true)
        self.skillLvTxtN:SetText(tempSkillLv)
        self.subTitleN:SetText("")
        self.claimBtnN:SetActive(true)
    elseif self.skillStatus == HeroGrowthTaskStatus.Rewarded then
        CS.UIGray.SetGray(self.heroItemN.transform, false, true)
        CS.UIGray.SetGray(self.skillIconN.transform, false, true)
        self.skillLvN:SetActive(true)
        self.skillLvTxtN:SetText(tempSkillLv)
        self.subTitleN:SetText("")
        self.completeTipN:SetActive(true)
    end
end


local function OnClickJumpBtn(self)
    if self.actData.sub_type == 2 then
        if tonumber(self.questTemplate.gotype2) == QuestGoType.GoMastery then
            local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(EnumActivity.RobotWars.Type)
            if dataList ~= nil and #dataList > 0 then
                local actData = dataList[1]
                if actData ~= nil then
                    if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UIActivityCenterTable) then
                        self.view:JumpAct(actData.id,1)
                    else
                        GoToUtil.CloseAllWindows()
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityCenterTable, { anim = true, hideTop = true, UIMainAnim = UIMainAnimType.AllHide }, tonumber(actData.id),false,1)
                    end
                end
            end
        else
            GoToUtil.GoToByQuestId(self.questTemplate)
        end
    else
        if self.skillStatus == HeroGrowthTaskStatus.LackHero then
            GoToUtil.GoToByQuestId(self.questTemplate)
        else
            if self.skillStatus == HeroGrowthTaskStatus.LackSkill then
                GoToUtil.GoHeroSkill(self.heroId, self.skillId, 1)
            elseif self.skillStatus == HeroGrowthTaskStatus.SkillLvUnfit then
                GoToUtil.GoHeroSkill(self.heroId, self.skillId, 2)
            end
        end
    end
end

local function OnClickClaimBtn(self)
    local rewardTyp= RewardType.SEVENDAY_SCORE
    local pic= string.format(LoadPath.UISevenDay,"UI7day_icon_integral")
    UIUtil.DoFly(tonumber(rewardTyp),5,pic,self.scoreImgN.transform.position,self.flyPos,40,40)
    SFSNetwork.SendMessage(MsgDefines.TaskRewardGet,{id = self.taskInfo.id})
end

local function OnClickSkillBtn(self)
    local hasHero, heroData = false, nil
    local config = nil

    local heroUuid = DataCenter.HeroDataManager:GetHeroUuidByHeroId(self.heroId)
    if heroUuid and tonumber(heroUuid) ~= 0 then
        hasHero = true
        heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        config = heroData.config
    else
        config = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), self.heroId)
    end

    local skillId = self.skillId
    local level = HeroUtils.SkillLevelLimit     --图鉴默认最大等级
    local unlock = true
    local unlockQuality = 1
    if heroData ~= nil then
        local skillData = heroData:GetSkillData(skillId)
        if skillData ~= nil then
            level = skillData:GetLevel()
            unlock = heroData:IsSkillUnlock(skillId)
            unlockQuality = skillData.unlockQuality
        end
    else
        local type2 = tonumber(GetTableData(TableName.SkillTab, skillId, 'type2'))
        if type2 == 11 then
            level = 1 --觉醒技能始终显示1级
        end
    end
    
    local index = 1
    local skillIdList = config['skill']
    if type(skillIdList) ~= 'table' then
        skillIdList = string.split(skillIdList, '|')
    end
    for i, v in ipairs(skillIdList) do
        if v == skillId then
            index = i
        end
    end

    local scaleFactor = UIManager:GetInstance():GetScaleFactor()

    local position = self.skillIconN.transform.position

    local UIHeroSkillTipView = require "UI.UIHero2.UIHeroSkillTip.View.UIHeroSkillTipView"
    local dir = UIHeroSkillTipView.Direction.ABOVE

    local param = UIHeroSkillTipView.Param.New()
    --param.content = Localization:GetString("150155")
    param.dir = dir
    param.skillId = skillId
    param.isUnlock = unlock
    param.skillLevel = level
    param.skillIndex = index
    param.skillUnlockQuality = unlockQuality
    param.heroRarity = config['rarity']
    param.heroUuid = heroUuid
    param.pivot = 0.25
    param.position = position + Vector3.New(0,  30, 0) * scaleFactor

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroSkillTip, { anim = false }, param)
end

HeroGrowthTaskItem.OnCreate = OnCreate
HeroGrowthTaskItem.OnDestroy = OnDestroy
HeroGrowthTaskItem.ComponentDefine = ComponentDefine
HeroGrowthTaskItem.ComponentDestroy = ComponentDestroy
HeroGrowthTaskItem.DataDefine = DataDefine
HeroGrowthTaskItem.DataDestroy = DataDestroy
HeroGrowthTaskItem.OnAddListener = OnAddListener
HeroGrowthTaskItem.OnRemoveListener = OnRemoveListener

HeroGrowthTaskItem.SetItem = SetItem
HeroGrowthTaskItem.RefreshHero = RefreshHero
HeroGrowthTaskItem.RefreshSkill = RefreshSkill
HeroGrowthTaskItem.RefreshSkillUI = RefreshSkillUI
HeroGrowthTaskItem.GetSkillIndex = GetSkillIndex
HeroGrowthTaskItem.GetSKillNextLevelRankId = GetSKillNextLevelRankId
HeroGrowthTaskItem.GetSkillStatus = GetSkillStatus
HeroGrowthTaskItem.OnClickJumpBtn = OnClickJumpBtn
HeroGrowthTaskItem.OnClickClaimBtn = OnClickClaimBtn
HeroGrowthTaskItem.OnClickSkillBtn = OnClickSkillBtn

HeroGrowthTaskItem.RefreshSeasonBuild = RefreshSeasonBuild

return HeroGrowthTaskItem