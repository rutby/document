---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1020.
--- DateTime: 2023/5/23 14:47
---

local MiningCarItem = BaseClass("MiningCarItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local Bg_path = "Bg"
local Img_path = "Bg/Img"
local miningCarImg_path = "Bg/miningCarImg"
local sliderBg_path = "Bg/SliderBg"
local slider_path = "Bg/Slider"
local remainTimeTxt_path = "Bg/remainTimeTxt"
local stateTxt_path = "Bg/stateTxt"
local miningCarBtn_path = "Bg/miningCarBtn"
local effCompleted_path = "Bg/miningCarImg/effCompleted"
local effNew_path = "effNew"
local score_rect_path = "Bg/Rect_BtnScoreBg"
local score_txt_path = "Bg/Rect_BtnScoreBg/Txt_Score"

local defaultCarImg = string.format(LoadPath.UIMiningCarImg, "activit_mining_cart01")

local CarState = 
{
    Empty = 1,
    Completed = 2,
    UnLocking = 3,
    WaitForStart = 4,
}

-- 创建
function MiningCarItem : OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
function MiningCarItem : OnDestroy()
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function MiningCarItem : DataDefine()
    
end

function MiningCarItem : DataDestroy()

end

function MiningCarItem : ComponentDefine()
    self.Bg = self:AddComponent(UIImage, Bg_path)
    self.Img = self:AddComponent(UIImage, Img_path)
    self.miningCarImg = self:AddComponent(UIImage, miningCarImg_path)
    self.sliderBg = self:AddComponent(UIImage, sliderBg_path)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.remainTimeTxt = self:AddComponent(UIText, remainTimeTxt_path)
    self.stateTxt = self:AddComponent(UIText, stateTxt_path)
    self.miningCarBtn = self:AddComponent(UIButton, miningCarBtn_path)
    self.miningCarBtn:SetOnClick(function()
        self:OnClickMineCar()
    end)
    self.effCompleted = self:AddComponent(UIBaseContainer, effCompleted_path)
    self.effNew = self:AddComponent(UIBaseContainer, effNew_path)
    
    self._score_rect = self:AddComponent(UIBaseContainer,score_rect_path)
    self._score_txt = self:AddComponent(UIText,score_txt_path)
end

function MiningCarItem : ComponentDestroy()

end

function MiningCarItem:SetCallBack(callBack)
    self.callBack = callBack
end

function MiningCarItem : SetData(itemInfo, activityId, index, speedUpItemId, showNew)
    self.effNew:SetActive(false)
    if showNew then
        self.effNew:SetActive(true)
    end

    self:DelCountDownTimer()

    self.itemInfo = itemInfo
    self.activityId = activityId
    self.index = index
    self.speedUpItemId = speedUpItemId
    self._score_rect:SetActive(itemInfo ~= nil)
    if itemInfo == nil then
        self:ShowEmpty()
    elseif itemInfo.complete then
        self:ShowCompleted()
    elseif itemInfo.unLocking then
        self:ShowUnLocking()
    else
        self:ShowWaitForStart()
    end
end

function MiningCarItem : ShowCompleted()
    self.effCompleted:SetActive(true)
    self.Bg:SetAlpha(1)
    self.Img:SetColor(Color.New(1,1,1,1))
    self.miningCarImg:SetColor(Color.New(1,1,1,1))
    self.miningCarImg:LoadSprite(DataCenter.MiningManager:GetMiningCarImgPath(self.itemInfo.id))
    self._score_txt:SetText(DataCenter.MiningManager:GetMiningCarScore(self.itemInfo.id))
    self.sliderBg:SetActive(false)
    self.slider:SetActive(false)
    self.stateTxt:SetActive(true)
    self.stateTxt:SetLocalText(375014)
    self.stateTxt:SetColor(Color.New(148/255,225/255,56/255,1))
    self.remainTimeTxt:SetActive(false)

    self.state = CarState.Completed
end

function MiningCarItem : ShowUnLocking()
    self.effCompleted:SetActive(false)
    self.Bg:SetAlpha(1)
    self.Img:SetColor(Color.New(1,1,1,1))
    self.miningCarImg:SetColor(Color.New(1,1,1,1))
    self.miningCarImg:LoadSprite(DataCenter.MiningManager:GetMiningCarImgPath(self.itemInfo.id))
    self._score_txt:SetText(DataCenter.MiningManager:GetMiningCarScore(self.itemInfo.id))
    self.sliderBg:SetActive(true)
    self.slider:SetActive(true)
    self.slider:SetValue(self.itemInfo.deltaTime / self.itemInfo.costTime)
    self.stateTxt:SetActive(true)
    self.stateTxt:SetLocalText(320570)
    self.stateTxt:SetColor(Color.New(148/255,225/255,56/255,1))
    self.remainTimeTxt:SetActive(true)
    local remainTime = UITimeManager:GetInstance():MilliSecondToFmtString(self.itemInfo.costTime - self.itemInfo.deltaTime)
    self.remainTimeTxt:SetText(remainTime)
    self:AddCountDownTimer()
    
    self.state = CarState.UnLocking
end

function MiningCarItem : ShowWaitForStart()
    self.effCompleted:SetActive(false)
    self.Bg:SetAlpha(1)
    self.Img:SetColor(Color.New(1,1,1,1))
    self.miningCarImg:SetColor(Color.New(1,1,1,1))
    self.miningCarImg:LoadSprite(DataCenter.MiningManager:GetMiningCarImgPath(self.itemInfo.id))
    self._score_txt:SetText(DataCenter.MiningManager:GetMiningCarScore(self.itemInfo.id))
    self.sliderBg:SetActive(true)
    self.slider:SetActive(true)
    self.slider:SetValue(0)
    self.stateTxt:SetActive(true)
    self.stateTxt:SetLocalText(375005)
    self.stateTxt:SetColor(Color.New(1,207/255,202/255,1))
    self.remainTimeTxt:SetActive(true)
    local remainTime = UITimeManager:GetInstance():MilliSecondToFmtString(self.itemInfo.costTime - self.itemInfo.deltaTime)
    self.remainTimeTxt:SetText(remainTime)

    self.state = CarState.WaitForStart
end

function MiningCarItem : ShowEmpty()
    self.effCompleted:SetActive(false)
    self.Bg:SetAlpha(0)
    self.Img:SetColor(Color.New(188/255,188/255,188/255,1))
    self.miningCarImg:SetColor(Color.New(188/255,188/255,188/255,1))
    self.miningCarImg:LoadSprite(defaultCarImg)
    self.sliderBg:SetActive(false)
    self.slider:SetActive(false)
    self.stateTxt:SetActive(false)
    self.remainTimeTxt:SetActive(false)
    
    self.state = CarState.Empty
end

function MiningCarItem : OnClickMineCar()
    if self.state == nil then
        return
    end

    if self.state == CarState.Empty then
        UIUtil.ShowTipsId(375012)
    elseif self.state == CarState.Completed then
        if self.callBack then
            self.callBack()
        end
        SFSNetwork.SendMessage(MsgDefines.GetMiningCarRewardInfo, self.activityId, self.itemInfo.queueId, self.index)
    elseif self.state == CarState.UnLocking then
        local param = {}
        param.activityId = self.activityId
		param.carId = self.itemInfo.id
        param.speedUpItemId = self.speedUpItemId
        param.queueId = self.itemInfo.queueId
        param.remainTime = self.itemInfo.costTime - self.itemInfo.deltaTime
		param.costTime = self.itemInfo.costTime
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIMiningSpeedUp, { anim = true }, param)
    --elseif self.state == CarState.WaitForStart then
    --    --UIUtil.ShowTipsId(375013)
    --    local param = {}
    --    param.activityId = self.activityId
    --    param.carId = self.itemInfo.id
    --    param.speedUpItemId = self.speedUpItemId
    --    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMiningShowCarReward, { anim = true }, param)
    end
end

function MiningCarItem:GetPos()
    return self._score_rect.transform.position
end

function MiningCarItem : AddCountDownTimer()
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false, false, false)
        self.countDownTimer:Start()
        self:RefreshRemainTime()
    end
end

function MiningCarItem : RefreshRemainTime()
    local remainTime = self.itemInfo.costTime - self.itemInfo.deltaTime
    if remainTime >= 0 then
        self.remainTimeTxt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
        self.itemInfo.deltaTime = self.itemInfo.deltaTime + 1000
    else
        self:ShowCompleted()
        EventManager:GetInstance():Broadcast(EventId.MiningCarCompleted)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
        self:DelCountDownTimer()
    end
end

function MiningCarItem : DelCountDownTimer()
    self.CountDownTimerAction = nil
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

return MiningCarItem