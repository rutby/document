---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/10 10:57
---

local LuckyShopItem = BaseClass("LuckyShopItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local quality_path = "obj/ImgQuality"
local icon_path = "obj/ItemIcon"
local flag_path = "obj/FlagGo"
local flag_text_path = "obj/FlagGo/FlagText"
local num_text_path = "obj/NumText"
local sold_out_text_path = "obj/Sold_Out_Text"
local buy_btn_path = "obj/Buy_Btn"
local buy_btn_text_path = "obj/Buy_Btn/Buy_Btn_Text"
local cover_path = "card"
local item_path = "obj"
local cost_img_path = "obj/Buy_Btn/Buy_Btn_Text/icon"
local original_price_path = "obj/Original_Price"
local function OnCreate(self)
    base.OnCreate(self)
    self.quality = self:AddComponent(UIImage, quality_path)
    self.icon = self:AddComponent(UIImage, icon_path)
    self.itemIntroBtn = self:AddComponent(UIButton, icon_path)
    self.itemIntroBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnItemIntroClick()
    end)

    self.flag = self:AddComponent(UIBaseContainer, flag_path)
    self.flag_text = self:AddComponent(UIText, flag_text_path)
    self.num_text = self:AddComponent(UIText, num_text_path)
    self.sold_out_text = self:AddComponent(UIText, sold_out_text_path)
    self.buy_btn = self:AddComponent(UIButton, buy_btn_path)
    self.buy_btn_text = self:AddComponent(UIText, buy_btn_text_path)
    self.cover = self:AddComponent(UIButton, cover_path)
    self.item = self:AddComponent(UIBaseContainer, item_path)
    self.costImg = self:AddComponent(UIImage, cost_img_path)
    self.sold_out_text:SetLocalText(320268)
    self.original_price = self:AddComponent(UIText, original_price_path)
    self.buy_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBuyClick()
    end)
    self.cover:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnCoverClick()
    end)
end

local function OnDestroy(self)
    self.isSendBuy = nil
    base.OnDestroy(self)
end


local function OnBuyClick(self)
    if self.data == nil then
        return
    end
    if self.isSendBuy then
        return
    end
    local hasNum = 0
    if self.data.costType == LuckyShopItemType.LuckyShopItemType_Resource then
        hasNum = CommonUtil.GetResOrItemCount(self.data.costId)
        --砖石特殊处理一下
        if self.data.costId == ResourceType.Gold then
            if hasNum < self.data.costNum then
                GoToUtil.GotoPayTips()
            else
                local itemName = DataCenter.ItemTemplateManager:GetName(self.data.goodsId)
                itemName = itemName.."X"..self.data.goodsNum
                local str = Localization:GetString(GameDialogDefine.SPEND_SOMETHING_BUY_SOMETHING,
                        string.GetFormattedSeperatorNum(self.data.costNum),Localization:GetString(GameDialogDefine.DIAMOND), itemName)
                UIUtil.ShowUseDiamondConfirm(TodayNoSecondConfirmType.BuyUseDialog, str, 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                    DataCenter.LuckyShopManager:BuyItem(toInt(self.data.activityId), self.data.id)
                end, function()
                end)
            end
            return
        end
    elseif self.data.costType == LuckyShopItemType.LuckyShopItemType_Item then
        hasNum = DataCenter.ItemData:GetItemCount(self.data.costId)
    end
    if hasNum < self.data.costNum then
        return
    end
    self.isSendBuy = true
    DataCenter.LuckyShopManager:BuyItem(toInt(self.data.activityId), self.data.id)
end

local function OnCoverClick(self)
    UIUtil.ShowTipsId(320587)
end

local function SetData(self, data)
    self.data = data
    self.isSendBuy = false
    self:Refresh()
end

local function Refresh(self)
    if self.data.isNull == true then
        self.cover:SetActive(true)
        self.item:SetActive(false)
    else
        self.cover:SetActive(false)
        self.item:SetActive(true)
        self.icon:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(self.data.goodsId))
        self.num_text:SetText(self.data.goodsNum)
        self.original_price:SetText(self.data.originalPrice)
        local iconPath = ""
        if self.data.costType == LuckyShopItemType.LuckyShopItemType_Resource then
            local temp = DataCenter.ResourceTemplateManager:GetResourceTemplate(self.data.costId)
            if temp ~= nil then
                iconPath = string.format(LoadPath.CommonPath, temp.icon)
            end
        elseif self.data.costType == LuckyShopItemType.LuckyShopItemType_Item then
            iconPath = DataCenter.ItemTemplateManager:GetIconPath(self.data.costId)
        end
        self.costImg:LoadSprite(iconPath)
        self.buy_btn_text:SetText(self.data.costNum)

        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.data.goodsId)
        if goods ~= nil then
            local itemColor = self:GetColorBgByQuality(goods.color, self.data.isBuy)
            self.quality:LoadSprite(itemColor, nil, function()
                self.quality:SetNativeSize()
            end)
            if goods.type == 2 then -- SPD
                if goods.para1 ~= nil and goods.para1 ~= "" then
                    local para1 = goods.para1
                    local temp = string.split(para1,';')
                    if temp ~= nil and #temp > 1 then
                        self:SetFlagActive(true)
                        self:SetFlagText(temp[1]..temp[2])
                    else
                        self:SetFlagActive(false)
                    end
                end
            elseif goods.type == 3 then -- USE
                local type2 = goods.type2
                if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                    local res_num = tonumber(goods.para)
                    self:SetFlagText(string.GetFormattedStr(res_num))
                    self:SetFlagActive(true)
                else
                    self:SetFlagActive(false)
                end
            elseif goods.type == 5 then
                if goods.para3 ~= nil and goods.para3 ~= "" then
                    local res_num = tonumber(goods.para3)
                    self:SetFlagText(string.GetFormattedStr(res_num))
                    self:SetFlagActive(true)
                else
                    self:SetFlagActive(false)
                end
            else
                self:SetFlagActive(false)
            end
        end
        self.sold_out_text:SetActive(self.data.isBuy)
        self.buy_btn:SetActive(not self.data.isBuy)
        self.icon:SetActive(not self.data.isBuy)
        self.original_price:SetActive(not self.data.isBuy)
        self.num_text:SetActive(not self.data.isBuy)
        if self.data.isBuy then
            self:SetFlagActive(false)
        end
    end
end

local function SetFlagActive(self,value)
    if self.flagActive ~= value then
        self.flagActive = value
        self.flag:SetActive(value)
    end
end

local function SetFlagText(self,value)
    if self.flagText ~= value then
        self.flagText = value
        self.flag_text:SetText(value)
    end
end

local function GetColorBgByQuality(self, quality, isBuy)
    if isBuy then
        if quality == ItemColor.PURPLE or quality == ItemColor.ORANGE then
            return string.format(LoadPath.UILuckyShop, "UIluck_img_orderdel_purple")
        elseif quality == ItemColor.BLUE then
            return string.format(LoadPath.UILuckyShop, "UIluck_img_orderdel_blue")
        end
        return string.format(LoadPath.UILuckyShop, "UIPVEorder_img_orderdel")
    else
        if quality == ItemColor.PURPLE or quality == ItemColor.ORANGE then
            return string.format(LoadPath.UILuckyShop, "UIluck_img_paper_purple")
        elseif quality == ItemColor.BLUE then
            return string.format(LoadPath.UILuckyShop, "UIluck_img_paper_blue")
        end
    end
    return string.format(LoadPath.UILuckyShop, "UIPVEorder_img_paper")
end

local function OnItemIntroClick(self)
    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(self.data.goodsId)
    if goods then
        local param = {}
        param["itemId"] = self.data.goodsId
        param["alignObject"] = self.icon
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
    end
end

LuckyShopItem.SetFlagActive = SetFlagActive
LuckyShopItem.SetFlagText = SetFlagText
LuckyShopItem.OnCreate = OnCreate
LuckyShopItem.OnDestroy = OnDestroy
LuckyShopItem.Refresh = Refresh
LuckyShopItem.OnBuyClick = OnBuyClick
LuckyShopItem.SetData = SetData
LuckyShopItem.OnCoverClick = OnCoverClick
LuckyShopItem.GetColorBgByQuality = GetColorBgByQuality
LuckyShopItem.OnItemIntroClick = OnItemIntroClick

return LuckyShopItem
