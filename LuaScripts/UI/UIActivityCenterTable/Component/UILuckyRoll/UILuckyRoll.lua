---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 2021/7/21
---
local UILuckyRoll = BaseClass("UILuckyRoll",UIBaseContainer)
local UILuckyRollItem = require "UI.UIActivityCenterTable.Component.UILuckyRoll.UILuckyRollItem"
local UILuckyRollBox = require "UI.UIActivityCenterTable.Component.UILuckyRoll.UILuckyRollBox"
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local Screen = CS.UnityEngine.Screen
local ROLLING_MAX_SPEED = -360
local ROLLING_ACCELERATION = -360
local SLOT_COUNT = 10
local SLOT_ANGLE = 360 / SLOT_COUNT
local bgImg =  {[1] = "turntable_bg_turntable_blue",[2] = "turntable_bg_turntable_purple",[3] = "turntable_bg_turntable_yellow"}
function UILuckyRoll:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self.curChoicePos = 0   --当前选中的格子
    self.choiceNum = 0  --已经选过的奖励
    self.isFree = 0 --是否免费抽
    self.needGoldOne = 0
    self.needGoldFive = 0
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
    self.isEnd = true
end

function UILuckyRoll:ComponentDefine()
    self.box_rectTab = {}
    self.rollingPanelN = self:AddComponent(UIBaseContainer, "Rect_ShowReward/bg")
    for i=1,10 do
        local rect_path = "Rect_ShowReward/bg/UICommonResItem"..i
        self.box_rectTab[i] = self:AddComponent(UILuckyRollItem,rect_path)
    end
    self.imgList = {}
    for i=1,10 do
        local img_rect_path = "Rect_ShowReward/bg/selectList/Image"..i
        self.imgList[i] = self:AddComponent(UIImage,img_rect_path)
        self.imgList[i]:SetActive(false)
    end
    
    self._actName_txt = self:AddComponent(UITextMeshProUGUIEx,"Txt_ActName")
    self._actName_txt:SetLocalText(372231)

    self.intro_btn = self:AddComponent(UIButton, "Intro")
    self.intro_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnIntroClick()
    end)
    
    self._num_txt = self:AddComponent(UITextMeshProUGUIEx,"Btn_ExtraBox/Txt_Num")
    
    self._one_btn = self:AddComponent(UIButton,"layout/Btn_One")
    self._freeRed_img = self:AddComponent(UIButton,"layout/Btn_One/Img_FreeRed")
    self._btnOne_txt = self:AddComponent(UITextMeshProUGUIEx,"layout/Btn_One/Rect_BtnOne/Txt_BtnOne")
    self._costOne_txt = self:AddComponent(UITextMeshProUGUIEx,"layout/Btn_One/Rect_BtnOne/Txt_CostOne")
    
    self._costOne_img = self:AddComponent(UIImage,"layout/Btn_One/Rect_BtnOne/icon_go/Img_CostOne")
    self._one_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Lucky_Roll_Click)
        self:OnClickOne(0)
    end)
    self.goTextMat = self.transform:Find("layout/Btn_One/Rect_BtnOne/goTextMat"):GetComponent(typeof(CS.UnityEngine.MeshRenderer))
    self._rect_discountBgOne = self:AddComponent(UIBaseContainer,"layout/Btn_One/discountBgOne")
    self._txt_discountOne = self:AddComponent(UITextMeshProUGUIEx,"layout/Btn_One/discountBgOne/txtDiscountOne")

    self._rect_discountBgFive = self:AddComponent(UIBaseContainer,"layout/Btn_Five/discountBgFive")
    self._txt_discountFive = self:AddComponent(UITextMeshProUGUIEx,"layout/Btn_Five/discountBgFive/txtDiscountFive")

    self._five_btn = self:AddComponent(UIButton,"layout/Btn_Five")
    self._btnFive_txt = self:AddComponent(UITextMeshProUGUIEx,"layout/Btn_Five/Rect_BtnFive/Txt_BtnFive")
    self._costFive_txt = self:AddComponent(UITextMeshProUGUIEx,"layout/Btn_Five/Rect_BtnFive/Txt_CostFive")
    self._costFive_img = self:AddComponent(UIImage,"layout/Btn_Five/Rect_BtnFive/icon_go/Img_CostFive")
    self._five_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Lucky_Roll_Click)
        self:OnClickOne(1)
    end)
    
    self._topRes_btn = self:AddComponent(UIButton,"topRes/Res/Btn_add")
    self._topRes_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickResTop()
    end)
    self._resIcon_img = self:AddComponent(UIImage,"topRes/Res/resIcon")
    self._resNum_txt = self:AddComponent(UITextMeshProUGUIEx,"topRes/Res/resNum")
    
    self._extraBox_btn = self:AddComponent(UIButton,"Btn_ExtraBox")
    self._extraBox_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickExtraBox()
    end)
    
    self._mask_btn = self:AddComponent(UIButton,"Panel")
    self._mask_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickMask()
    end)
    self._mask_img = self:AddComponent(UIBaseContainer,"Mask")
    self._extra_rect = self:AddComponent(UIBaseContainer,"Rect_Extra")
    self._extraName_txt = self:AddComponent(UITextMeshProUGUIEx,"Rect_Extra/Txt_ExtraName")
    self._extraName_txt:SetLocalText(372230)
    
    self.slider1 = self:AddComponent(UISlider, "Rect_Extra/Slider1")
    self.slider2 = self:AddComponent(UISlider, "Rect_Extra/Slider2")
    self.slider3 = self:AddComponent(UISlider, "Rect_Extra/Slider3")
    self.slider4 = self:AddComponent(UISlider, "Rect_Extra/Slider4")
    self.slider5 = self:AddComponent(UISlider, "Rect_Extra/Slider5")
    self.listBox = {}
    for i = 1, 5 do
        self.listBox[i] = self:AddComponent(UILuckyRollBox,"Rect_Extra/BoxGo/Box"..i)
    end
    
    self.toggle = self:AddComponent(UIToggle,"redSwitch")
    self.toggle:SetIsOn(true)
    self.toggle:SetOnValueChanged(function(tf)
        self:ToggleControlBorS(tf)
    end)
    self._jumpAnim_txt = self:AddComponent(UITextMeshProUGUIEx,"redSwitch/redSwitchTxt")
    self._jumpAnim_txt:SetLocalText(372228)

    self._time_txt = self:AddComponent(UITextMeshProUGUIEx,"RestTimeBg/RestTime")
    
    self._surplus_txt = self:AddComponent(UITextMeshProUGUIEx,"surplusBg/surplusTxt")

    --排行榜
    self._rank_btn = self:AddComponent(UIButton,"Btn_Rank")
    self._rank_txt = self:AddComponent(UITextMeshProUGUIEx,"Btn_Rank/Txt_Rank")
    self._rank_txt:SetLocalText(390040)
    self._rank_btn:SetOnClick(function()
        self:OnClickRank()
    end)
    self.box_red_dot = self:AddComponent(UIBaseContainer,"Btn_ExtraBox/Img_Red")
    self.box_effect = self:AddComponent(UIBaseContainer,"Btn_ExtraBox/VFX_ui_box_light")
end

function UILuckyRoll:OnDestroy()
    self:ComponentDestroy()
    self.model = nil
    self.eventInfo = nil
    self:DeleteTimer()
    if self.delayTime ~= nil then
        self.delayTime:Stop()
        self.delayTime = nil
    end
    self.isEnd = nil
    base.OnDestroy(self)
end

function UILuckyRoll:ComponentDestroy()
    self._actName_txt = nil
    self._num_txt = nil
    self._one_btn = nil
    self._btnOne_txt = nil
    self._costOne_txt = nil
    self._costOne_img = nil
    self._five_btn = nil
    self._btnFive_txt = nil
    self._costFive_txt = nil
    self._costFive_img = nil
    self._resIcon_img = nil
    self._resNum_txt = nil
end

function UILuckyRoll:OnEnable()
    base.OnEnable(self)
    self._extra_rect:SetActive(false)
    self._mask_btn:SetActive(false)
    self._mask_img:SetActive(false)
end

function UILuckyRoll:OnDisable()
    base.OnDisable(self)
    self._extra_rect:SetActive(false)
    self._mask_btn:SetActive(false)
    self._mask_img:SetActive(false)
    self.isEnd = true
    if self.delayAnimTime ~= nil then
        self.delayAnimTime:Stop()
        self.delayAnimTime = nil
    end
end

function UILuckyRoll:SetData(activityId,actId)
    self.activityId = activityId
    SFSNetwork.SendMessage(MsgDefines.GetLuckyRollInfo,toInt(self.activityId))
    SFSNetwork.SendMessage(MsgDefines.GetLuckRollRank,toInt(self.activityId))
  --  DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(actId)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if actListData.sub_type and actListData.sub_type == 1 then
        self._rank_btn:SetActive(true)
    else
        self._rank_btn:SetActive(false)
    end
    --type2转盘关闭累计
    if actListData.sub_type == 2 then
        self._topRes_btn:SetActive(true)
        self._extraBox_btn:SetActive(false)
        self._num_txt:SetActive(false)
    else
        self._extraBox_btn:SetActive(true)
        self._num_txt:SetActive(true)
        self._topRes_btn:SetActive(false)
    end
end

--更新信息
function UILuckyRoll:OnRefresh(state)
    self.choiceNum = 0
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    self.actData = DataCenter.ActLuckyRollInfo:GetInfoByActId(tonumber(self.activityId))
    if self.actData == nil then
        return
    end
    self.actListData = actListData
    if actListData.sub_type ~= 2 then
        --抽奖第几阶段
        self.curStage = DataCenter.ActLuckyRollInfo:GetCurStage(tonumber(self.activityId))    --获取当前在第几阶段
        if self.curStage then
            local str = self.actData.rollInfo.totalLotteryCount.."/"..self.actData.stageArr[self.curStage].needLotteryNum
            self._num_txt:SetText(str)
        end
        self:RefreshSliderInfo()
        self:RefreshExtraBoxInfo()
    end
   
    --处理奖励
    for i = 1, 10 do
        local callback = function(position) self:ClickItemArrIndex(position) end
        local item = self.actData.rollItemArr[i]
        if self.imgList[i]~=nil then
            if item.type ==0 then
                self.imgList[i]:SetActive(false)
            else
                self.imgList[i]:SetActive(true)
                self.imgList[i]:LoadSprite(string.format(LoadPath.UIActivity,bgImg[item.type]))
            end
        end
        self.box_rectTab[i]:RefreshData(item,callback)
        self.box_rectTab[i]:SetSelect(false)
        if self.actData.rollItemArr[i].type ~= 0 then
            if self.actData.rollItemArr[i].chooseIndex ~= 0 then
                self.choiceNum = self.choiceNum + 1
            else
                --可选奖励1个处理成直接选
                if table.count(self.actData.rollItemArr[i].reward) == 1 then
                    SFSNetwork.SendMessage(MsgDefines.LuckyRollChooseItem,toInt(self.activityId),self.actData.rollItemArr[i].itemId,1)
                    self.box_rectTab[i]:SelectUpdateItem(1)
                    if self.choiceNum ~= 3 then
                        self.choiceNum = self.choiceNum + 1
                    end
                end
            end
        end
    end

    if state then
        self.toggle:SetIsOn(state)
    else
        local isJumpPlay = Setting:GetBool(SettingKeys.ActLuckyRollJumpAnim..LuaEntry.Player.uid,false)
        self.toggle:SetIsOn(isJumpPlay)
    end
    self:ShowNeedRes()
    self:RefreshOneInfo()
    self:RefreshFiveInfo()
    self:RefreshTime(actListData)
    self:AddTimer(actListData)
    
    local num = self.actData.drawMax - (self.actData.rollInfo.oneLotteryCount + self.actData.rollInfo.fiveLotteryCount*5)
    if num > 0 then
        self._surplus_txt:SetLocalText(372302,num)
    else
        self._surplus_txt:SetLocalText(372304) 
    end
    self:RefreshBoxRedDot()
end

function UILuckyRoll:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.ActLuckyRollUpdate, self.OnRefresh)
    self:AddUIListener(EventId.ActLuckyRollChoiceItem, self.ChoiceItem)
    self:AddUIListener(EventId.ActLuckyRollGetReward, self.GetRewardRefresh)
    self:AddUIListener(EventId.UpdateGold, self.RefreshGold)
    self:AddUIListener(EventId.ActLuckyRollRankUpdate, self.OnRefreshRankNum)
end

function UILuckyRoll:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.ActLuckyRollUpdate, self.OnRefresh)
    self:RemoveUIListener(EventId.ActLuckyRollChoiceItem, self.ChoiceItem)
    self:RemoveUIListener(EventId.ActLuckyRollGetReward, self.GetRewardRefresh)
    self:RemoveUIListener(EventId.UpdateGold, self.RefreshGold)
    self:RemoveUIListener(EventId.ActLuckyRollRankUpdate, self.OnRefreshRankNum)
end

function UILuckyRoll:RefreshGold()
    self:ShowNeedRes()
end

function UILuckyRoll:OnRefreshRankNum()
    self.actData = DataCenter.ActLuckyRollInfo:GetInfoByActId(tonumber(self.activityId))
    if self.actData then
        if self.actData.selfRank ~= -1 then
            if self.actData.selfRank > 0 and self.actData.selfRank < 4 then
                self._rank_btn:LoadSprite("Assets/Main/Sprites/UI/UIAlliance/rank/UIalliance_rankingbg0" .. self.actData.selfRank)
                --self._rankNum_txt:SetText("")
            else
                self._rank_btn:LoadSprite(string.format(LoadPath.UIActivity,"zombie_btn_ranking"))
                --self._rankNum_txt:SetText(self.actData.selfRank)
            end
            return
        end
    end
    --self._rankNum_txt:SetText("")
end

--选则奖励
function UILuckyRoll:ClickItemArrIndex(position)
    self.curChoicePos = position
end

function UILuckyRoll:ChoiceItem(index)
    if self.curChoicePos ~= 0 then
        SFSNetwork.SendMessage(MsgDefines.LuckyRollChooseItem,toInt(self.activityId),self.actData.rollItemArr[self.curChoicePos].itemId,index)
        self.box_rectTab[self.curChoicePos]:SelectUpdateItem(index)
        self.curChoicePos = 0
        if self.choiceNum == 3 then
          return
        end
        self.choiceNum = self.choiceNum + 1
    end
end


--单抽
function UILuckyRoll:RefreshOneInfo()
    self._btnOne_txt:SetLocalText(372226)
    self._freeRed_img:SetActive(false)
    --这一次抽奖消耗
    if  self.actData.cost_1[self.actData.rollInfo.oneLotteryCount+1] then
        --是否免费
        if self.actData.cost_1[self.actData.rollInfo.oneLotteryCount+1] == 0 then
            self._one_btn:LoadSprite(string.format(LoadPath.CommonNewPath,"Common_btn_green101"))
            self._costOne_txt:SetLocalText(130126)
            self.isFree = 1
            self._freeRed_img:SetActive(true)
            self._rect_discountBgOne:SetActive(false)
            self._costOne_txt:SetMaterial(self.goTextMat.sharedMaterials[2])
            self._btnOne_txt:SetMaterial(self.goTextMat.sharedMaterials[1])
        else
            self._one_btn:LoadSprite(string.format(LoadPath.CommonNewPath,"Common_btn_yellow101"))
            self._costOne_txt:SetMaterial(self.goTextMat.sharedMaterials[1])
            self._btnOne_txt:SetMaterial(self.goTextMat.sharedMaterials[1])
            local count = table.count(self.actData.cost_1)
            local price = self.actData.cost_1[self.actData.rollInfo.oneLotteryCount+1]
            if self.actData.rollInfo.oneLotteryCount+1 == count then
                self._rect_discountBgOne:SetActive(false)
            else
                self._rect_discountBgOne:SetActive(true)
                local value = 1 - price/self.actData.cost_1[count]
                local value1 = Mathf.Ceil(100*value)
                self._txt_discountOne:SetText("-"..value1.."%")
            end
            self._costOne_txt:SetText(price)
            self.isFree = 0
            self.needGoldOne = price
        end
    else
        self._one_btn:LoadSprite(string.format(LoadPath.CommonNewPath,"Common_btn_yellow101"))
        self._costOne_txt:SetMaterial(self.goTextMat.sharedMaterials[1])
        self._btnOne_txt:SetMaterial(self.goTextMat.sharedMaterials[1])
        self._rect_discountBgOne:SetActive(false)
        local count  = table.count(self.actData.cost_1)
        self._costOne_txt:SetText(self.actData.cost_1[count])
        self.needGoldOne = self.actData.cost_1[count]
        self.isFree = 0
    end
    local str = string.split(self.actData.cost_item,";")
    if tonumber(str[1]) == 1 then   --资源 都是钻石
        self._costOne_img:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(str[2])))
    elseif tonumber(str[1]) == 2 then --道具
        self._costOne_img:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(tonumber(str[2])))
    end
end

--五连
function UILuckyRoll:RefreshFiveInfo()
    self._btnFive_txt:SetLocalText(372227)

    --这一次抽奖消耗
    if  self.actData.cost_5[self.actData.rollInfo.fiveLotteryCount+1] then
        local price = self.actData.cost_5[self.actData.rollInfo.fiveLotteryCount+1]
        self._costFive_txt:SetText(price)
        self.needGoldFive = price
        local count = table.count(self.actData.cost_5)
        if self.actData.rollInfo.fiveLotteryCount+1 == count then
            self._rect_discountBgFive:SetActive(false)
        else
            local value = 1 - price/self.actData.cost_5[count]
            self._rect_discountBgFive:SetActive(true)
            local value1 = Mathf.Ceil(100*value)
            self._txt_discountFive:SetText("-"..value1.."%")
        end
    else
        local count  = table.count(self.actData.cost_5)
        self._costFive_txt:SetText(self.actData.cost_5[count])
        self.needGoldFive = self.actData.cost_5[count]
        self._rect_discountBgFive:SetActive(false)
    end
    local str = string.split(self.actData.cost_item,";")
    if tonumber(str[1]) == 1 then   --资源 都是钻石
        self._costFive_img:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(str[2])))
    elseif tonumber(str[1]) == 2 then --道具
        self._costFive_img:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(tonumber(str[2])))
    end
end

function UILuckyRoll:RefreshSliderInfo()
    if self.actData.rollInfo.totalLotteryCount <= self.actData.stageArr[1].needLotteryNum then
        self.slider1:SetValue(self.actData.rollInfo.totalLotteryCount/self.actData.stageArr[1].needLotteryNum)
        self.slider2:SetValue(0)
        self.slider3:SetValue(0)
        self.slider4:SetValue(0)
        self.slider5:SetValue(0)
    elseif self.actData.rollInfo.totalLotteryCount > self.actData.stageArr[1].needLotteryNum and self.actData.rollInfo.totalLotteryCount <= self.actData.stageArr[2].needLotteryNum  then
        self.slider1:SetValue(1)
        self.slider2:SetValue((self.actData.rollInfo.totalLotteryCount - self.actData.stageArr[1].needLotteryNum)/(self.actData.stageArr[2].needLotteryNum - self.actData.stageArr[1].needLotteryNum))
        self.slider3:SetValue(0)
        self.slider4:SetValue(0)
        self.slider5:SetValue(0)
    elseif self.actData.rollInfo.totalLotteryCount > self.actData.stageArr[2].needLotteryNum and self.actData.rollInfo.totalLotteryCount <= self.actData.stageArr[3].needLotteryNum then
        self.slider1:SetValue(1)
        self.slider2:SetValue(1)
        self.slider3:SetValue((self.actData.rollInfo.totalLotteryCount - self.actData.stageArr[2].needLotteryNum)/(self.actData.stageArr[3].needLotteryNum - self.actData.stageArr[2].needLotteryNum))
        self.slider4:SetValue(0)
        self.slider5:SetValue(0)
    elseif self.actData.rollInfo.totalLotteryCount > self.actData.stageArr[3].needLotteryNum and self.actData.rollInfo.totalLotteryCount <= self.actData.stageArr[4].needLotteryNum then
        self.slider1:SetValue(1)
        self.slider2:SetValue(1)
        self.slider3:SetValue(1)
        self.slider4:SetValue((self.actData.rollInfo.totalLotteryCount - self.actData.stageArr[3].needLotteryNum)/(self.actData.stageArr[4].needLotteryNum - self.actData.stageArr[3].needLotteryNum))
        self.slider5:SetValue(0)
    elseif self.actData.rollInfo.totalLotteryCount > self.actData.stageArr[4].needLotteryNum and self.actData.rollInfo.totalLotteryCount <= self.actData.stageArr[5].needLotteryNum then
        self.slider1:SetValue(1)
        self.slider2:SetValue(1)
        self.slider3:SetValue(1)
        self.slider4:SetValue(1)
        self.slider5:SetValue((self.actData.rollInfo.totalLotteryCount - self.actData.stageArr[4].needLotteryNum)/(self.actData.stageArr[5].needLotteryNum - self.actData.stageArr[4].needLotteryNum))
    elseif self.actData.rollInfo.totalLotteryCount > self.actData.stageArr[5].needLotteryNum then
        self.slider1:SetValue(1)
        self.slider2:SetValue(1)
        self.slider3:SetValue(1)
        self.slider4:SetValue(1)
        self.slider5:SetValue(1)
    end
end

function UILuckyRoll:RefreshExtraBoxInfo()
    for i = 1, 5 do
        self.listBox[i]:RefreshData(self.actData.stageArr[i],self.actData.rollInfo.totalLotteryCount,toInt(self.activityId))
    end
end


function UILuckyRoll:ToggleControlBorS(isJumpPlay)
    Setting:SetBool(SettingKeys.ActLuckyRollJumpAnim..LuaEntry.Player.uid, isJumpPlay)
end

function UILuckyRoll:Update()
    if not self.isEnd then
        local angleX, angleY, angleZ = self.rollingPanelN:GetEulerAnglesXYZ()

        --self.rollingSpeed = math.max(self.rollingSpeed, ROLLING_MAX_SPEED)
        local angleOffset = self.rollingSpeed * Time.deltaTime
        angleZ = angleZ + angleOffset
        self.rolledAngle = self.rolledAngle + angleOffset
        if self.rolledAngle <= self.rollingFinalAngle then
            angleZ = self.rollingFinalAngle
            self.isEnd = true
            self:SetItemSelect()
            self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
                self:OnRollFinish()
                self.delayTimer = nil
            end, 1)
        end
        self.rollingPanelN:SetEulerAnglesXYZ(0, 0, angleZ)
        --self:SetSlotSelected(angleZ)
        for i, v in pairs(self.box_rectTab) do
            v:SetEulerAnglesXYZ(0, 0, 0)
        end
        if self.rolledAngle > self.rollingStartAngle - 360 then
            self.rollingSpeed = self.rollingSpeed + ROLLING_ACCELERATION * Time.deltaTime
        end
        if self.rolledAngle < self.rollingFinalAngle + 360 then
            self.rollingSpeed = self.rollingSpeed -  ROLLING_ACCELERATION * Time.deltaTime
            self.rollingSpeed = math.min(self.rollingSpeed, -15)
        end
    end
end

function UILuckyRoll:OnRollFinish()
    self.isEnd = true
    self._mask_img:SetActive(false)
    table.remove(self.tab.curRewardIndex,1)
    if next(self.tab.curRewardIndex) then
        self:BeginRolling(self.tab.curRewardIndex[1])
    else
        for i, v in pairs(self.box_rectTab) do
            v:SetSelect(false)
        end
        DataCenter.RewardManager:ShowCommonReward(self.tab.message)
        self.isEnd = true
        self.tab = {}
    end
end
function UILuckyRoll:SetItemSelect()
    local index = self.tab.curRewardIndex[1]
    if index~=nil then
        if self.box_rectTab[index]~=nil then
            self.box_rectTab[index]:SetSelect(true)
        end
    end
end
--{{{活动时间
function UILuckyRoll:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function UILuckyRoll:AddTimer(actListData)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action ,actListData , false,false,false)
    end
    self.timer:Start()
end

function UILuckyRoll:RefreshTime(actListData)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if actListData.endTime < curTime then
       self:DeleteTimer()
    else
        if actListData:CheckIfIsToEnd() then
            self._time_txt:SetColorRGBA(0.91, 0.26, 0.26, 1)
        else
            self._time_txt:SetColor(WhiteColor)
        end
        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(actListData.endTime - curTime))
    end
end
--}}}

--{{{抽奖返回处理
function UILuckyRoll:GetRewardRefresh(message)
    self.ring = 0
    self.titleRing = 0
    self.boxRing = 0
    self.signRefresh = false
    local state = Setting:GetBool(SettingKeys.ActLuckyRollJumpAnim..LuaEntry.Player.uid,true)
    self:OnRefresh(state)
    
    --检查下是否跳过动画
    if state then
        --跳过动画直接展示奖励
        self._mask_img:SetActive(false)
        for i, v in pairs(self.box_rectTab) do
            v:SetSelect(false)
        end
        DataCenter.RewardManager:ShowCommonReward(message)
        self.isEnd = true
    else
        --开始转动
        local curRewardIndex = DataCenter.ActLuckyRollInfo:GetCurRewardIndex()
        for i = 1, #curRewardIndex do
            if curRewardIndex[i] > 10 then
                local value = curRewardIndex[i] % 10
                if value == 0 then
                    curRewardIndex[i] = 10
                else
                    curRewardIndex[i] = value
                end
            end
        end
        self.tab = {curRewardIndex = curRewardIndex,message = message}
        if #curRewardIndex>1 then
            ROLLING_ACCELERATION = -360* #curRewardIndex
        else
            ROLLING_ACCELERATION = -360
        end
        self:BeginRolling(curRewardIndex[1])
    end
end
function UILuckyRoll:BeginRolling(index)
    local finalIndex = index-1
    local finalAngle = (finalIndex) * SLOT_ANGLE
    local tempPointingIndex = self.curPointingIndex and (self.curPointingIndex) or 0
    local tempAngle = (tempPointingIndex) * SLOT_ANGLE
    local offsetAngle = (finalAngle - tempAngle - 360) % 360
    offsetAngle = offsetAngle - 3 * 360

    --self.rollingPanelN:SetEulerAnglesXYZ(0, 0, tempAngle)
    self.rollingStartAngle = tempAngle
    self.rolledAngle = tempAngle
    self.rollingFinalAngle = tempAngle + offsetAngle
    self.rollingSpeed = 0
    self.isEnd = false
    self.curPointingIndex = finalIndex
    self._mask_img:SetActive(true)
end

--}}}

function UILuckyRoll:OnClickOne(type)
    if not self.isEnd then
        return
    end
    local num = self.actData.drawMax - (self.actData.rollInfo.oneLotteryCount + self.actData.rollInfo.fiveLotteryCount*5)
    if self.choiceNum ~= 3 then
        local param = {}
        for i = 1, 10 do
            if self.actData.rollItemArr[i].type ~= 0 and self.actData.rollItemArr[i].chooseIndex == 0 then
                param.position = self.box_rectTab[i]:GetPos()
                param.positionType = PositionType.Screen
                param.isPanel = false
                param.isAutoClose = 3
                DataCenter.ArrowManager:ShowArrow(param)
                return UIUtil.ShowTipsId(372225)
            end
        end
    end
    if type == 1 then
        self.isFree = 0
        if num < 5 then
            UIUtil.ShowTipsId(372304)
            return
        end
    elseif type == 0 then
        if num <= 0 then
            UIUtil.ShowTipsId(372304)
            return
        end
    end
    if self.isFree == 0 then

        local str = string.split(self.actData.cost_item,";")
        if tonumber(str[1]) == 1 then   --资源 都是钻石
            local tempCount = LuaEntry.Player.gold
            if type == 0 and tempCount < self.needGoldOne then
                GoToUtil.GotoPayTips()
                return
            elseif  type == 1 and tempCount < self.needGoldFive then
                GoToUtil.GotoPayTips()
                return
            end
        elseif tonumber(str[1]) == 2 then --道具
            local tempCount = DataCenter.ItemData:GetItemCount(tonumber(str[2]))
            if type == 0 and tempCount < self.needGoldOne then
                UIUtil.ShowTipsId(120021)
                local lackTab = {}
                local param = {}
                param.type = ResLackType.Item
                param.id = tonumber(str[2])
                param.targetNum = self.needGoldOne
                table.insert(lackTab, param)
                GoToResLack.GoToItemResLackList(lackTab)
                return
            elseif  type == 1 and tempCount < self.needGoldFive then
                UIUtil.ShowTipsId(120021)
                local lackTab = {}
                local param = {}
                param.type = ResLackType.Item
                param.id = tonumber(str[2])
                param.targetNum = self.needGoldFive
                table.insert(lackTab, param)
                GoToResLack.GoToItemResLackList(lackTab)
                return
            end
        end
    end
    SFSNetwork.SendMessage(MsgDefines.LuckyRollLottery,toInt(self.activityId),type,self.isFree)
end

function UILuckyRoll:ShowNeedRes()
    if self.actData then
        local str = string.split(self.actData.cost_item,";")
        if tonumber(str[1]) == 1 then   --资源 都是钻石
            self._resIcon_img:LoadSprite(DataCenter.ResourceManager:GetResourceIconByType(tonumber(str[2])))
            local tempCount = LuaEntry.Player.gold
            self._resNum_txt:SetText(string.GetFormattedSeperatorNum(tempCount))
        elseif tonumber(str[1]) == 2 then --道具
            self._resIcon_img:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(tonumber(str[2])))
            local tempCount = DataCenter.ItemData:GetItemCount(tonumber(str[2]))
            self._resNum_txt:SetText(string.GetFormattedSeperatorNum(tempCount))
        end
    end
end

function UILuckyRoll:OnClickExtraBox()
    for i = 1, 5 do
        if self.actData.stageArr[i].state == 0 and self.actData.rollInfo.totalLotteryCount >= self.actData.stageArr[i].needLotteryNum then
            SFSNetwork.SendMessage(MsgDefines.ReceiveLuckyRollStageReward,toInt(self.activityId),self.actData.stageArr[i].stage)
            return
        end
    end
    self._extra_rect:SetActive(true)
    self._mask_btn:SetActive(true)
end

function UILuckyRoll:RefreshBoxRedDot()
    local show = false
    for i = 1, 5 do
        if show ==false and self.actData.stageArr[i].state == 0 and self.actData.rollInfo.totalLotteryCount >= self.actData.stageArr[i].needLotteryNum then
            show = true
        end
    end
    self.box_effect:SetActive(show)
    self.box_red_dot:SetActive(show)
end

--打开排行榜
function UILuckyRoll:OnClickRank()
    if self.actData then
        --检查是否属于跨服排行榜
        local serverStr = nil
        local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
        local para2 = actListData.para2
        if para2 and para2 ~= "" then
            local stage = string.split(para2,"|")
            for i = 1 ,table.count(stage) do
                local str = string.split(stage[i],",")
                if string.find(str[2],";") and string.find(str[2],"-") then
                    local strServer = string.split(str[2],";")
                    for k = 1 ,table.count(strServer) do
                        if string.find(strServer[k],"-") then
                            local server = string.split(strServer[k],"-")
                            if tonumber(server[1]) <= LuaEntry.Player:GetSelfServerId() and LuaEntry.Player:GetSelfServerId() <= tonumber(server[2]) then
                                local subStr = string.gsub(str[2], ";", ",")
                                serverStr = subStr
                                break
                            end
                        end
                    end
                elseif string.find(str[2],"-") then
                    local server = string.split(str[2],"-")
                    if tonumber(server[1]) <= LuaEntry.Player:GetSelfServerId() and LuaEntry.Player:GetSelfServerId() <= tonumber(server[2]) then
                        serverStr = str[2]
                        break
                    end
                elseif string.find(str[2],";") then
                    local server = string.split(str[2],";")
                    if tonumber(server[1]) == LuaEntry.Player:GetSelfServerId() or LuaEntry.Player:GetSelfServerId() == tonumber(server[2]) then
                        serverStr = server[1]..","..server[2]
                        break
                    end
                end
            end
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UILuckyRollRank,{anim =true,isBlur =true},toInt(self.activityId),serverStr)
    end
end

function UILuckyRoll:OnIntroClick()
    UIUtil.ShowIntro(Localization:GetString("372231"), Localization:GetString("100239"),Localization:GetString(self.actListData.story))
end

function UILuckyRoll:OnClickResTop()
    if self.actListData.sub_type == 2 then
        local str = string.split(self.actData.cost_item,";")
        if tonumber(str[1]) == 2 then --道具
            local lackTab = {}
            local param = {}
            param.type = ResLackType.Item
            param.id = tonumber(str[2])
            param.targetNum = self.needGoldFive
            table.insert(lackTab, param)
            GoToResLack.GoToItemResLackList(lackTab)
        end
    end
end

function UILuckyRoll:OnClickMask()
    self._mask_btn:SetActive(false)
    self._extra_rect:SetActive(false)
end

return UILuckyRoll