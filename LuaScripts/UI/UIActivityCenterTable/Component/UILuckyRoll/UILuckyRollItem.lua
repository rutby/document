---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local UILuckyRollItem = BaseClass("UILuckyRollItem",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local ItemIcon = "ItemIcon"
local NumText = "NumText"
local path = ""
local choice_img = "Img_Choice"
local add_img = "Img_Choice/add_img"
local FlagGo = "FlagGo"
local FlagText = "FlagGo/FlagText"
local select_path = "select"
local select_num_path = "select/SelectNum"
local choice = {[1] = "turntable_img_frame03",[2] = "turntable_img_frame02",[3] = "turntable_img_frame01"}
local choiceAdd = {[1] = "turntable_img_add03",[2] = "turntable_img_add02",[3] = "turntable_img_add01"}
function UILuckyRollItem:OnCreate()
    base.OnCreate(self)
    --self.bg = self:AddComponent(UIImage,"bg")
    self._icon_img = self:AddComponent(UIImage,ItemIcon)
    self._num_txt = self:AddComponent(UITextMeshProUGUIEx,NumText)
    self._box_btn = self:AddComponent(UIButton,path)
    self._box_btn:SetOnClick(function()
        self:OnClickGo()
    end)
    self._choice_img = self:AddComponent(UIImage,choice_img)
    self.add_img = self:AddComponent(UIImage,add_img)
    self.flag = self:AddComponent(UIBaseContainer,FlagGo)
    self.flagTxt = self:AddComponent(UITextMeshProUGUIEx,FlagText)
    self.select = self:AddComponent(UIBaseContainer,select_path)
    self.select_num = self:AddComponent(UITextMeshProUGUIEx,select_num_path)
    self.selectCount = 0
end

function UILuckyRollItem:OnDestroy()
    -- self._icon_img = nil
    if self.delayTime ~= nil then
        self.delayTime:Stop()
        self.delayTime = nil
    end
    base.OnDestroy(self)
end

function UILuckyRollItem:OnEnable()
    base.OnEnable(self)
end

function UILuckyRollItem:OnDisable()

    base.OnDisable(self)
end

function UILuckyRollItem:RefreshData(data,callback)
    self.data = data
    self.selectCount = 0
    self.rewardData = data.reward
    self.callback = callback
    --宝箱状态 0未领取,  1已领取
    self.state = self.rewardData.rewardFlag
    self.index = data.position
    self:RefreshBox()
end

function UILuckyRollItem:RefreshBox()
    self._icon_img:SetActive(true)
    self._choice_img:SetActive(false)
    self.flag:SetActive(false)
    if self.data.type == 0 then
        local id = self.rewardData[1].itemId
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
        if goods~=nil then
            self.itemName = DataCenter.ItemTemplateManager:GetName(id)
            self.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
            self._num_txt:SetText(self.rewardData[1].count)
            self._icon_img:LoadSprite(string.format(LoadPath.ItemPath,goods.icon))
            self:FlagGoSet(goods)
        end
        --self.bg:SetActive(false)
    else
        --self.bg:SetActive(true)
        --self.bg:LoadSprite(string.format(LoadPath.UIActivity,bgImg[self.data.type]))
        if self.data.chooseIndex ~= 0 then
            self:SelectUpdateItem(self.data.chooseIndex)
        else
            self:ResetCell()
        end
    end
end

function UILuckyRollItem:SelectUpdateItem(index)
    if self.rewardData[index] then
        local id = self.rewardData[index].itemId
        self._icon_img:SetActive(true)
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
        if goods~=nil then
            self.itemName = DataCenter.ItemTemplateManager:GetName(id)
            self.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
            self._num_txt:SetText(self.rewardData[index].count)
            self._icon_img:LoadSprite(string.format(LoadPath.ItemPath,goods.icon))
            self._choice_img:SetActive(false)
            self:FlagGoSet(goods)
        end
    else
        self:ResetCell()
    end
end

function UILuckyRollItem:ResetCell()
    self._icon_img:SetActive(false)
    self._choice_img:SetActive(true)
    self._choice_img:LoadSprite(string.format(LoadPath.UIActivity,choice[self.data.type]))
    self.add_img:LoadSprite(string.format(LoadPath.UIActivity,choiceAdd[self.data.type]))
    self._num_txt:SetText("")
end

function UILuckyRollItem:FlagGoSet(goods)
    local itemType = goods.type
    if itemType == 2 then -- SPD
        if goods.para1 ~= nil and goods.para1 ~= "" then
            local para1 = goods.para1
            local temp = string.split(para1,';')
            if temp ~= nil and #temp > 1 then
                self.flag:SetActive(true)
                self.flagTxt:SetText(temp[1]..temp[2])
            else
                self.flag:SetActive(false)
            end
        end
    elseif itemType == 3 or goods.type == GOODS_TYPE.GOODS_TYPE_91 then -- USE
        local type2 = goods.type2
        if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" and tonumber(goods.para) > 1 then
            local res_num = tonumber(goods.para)
            self.flagTxt:SetText(string.GetFormattedStr(res_num))
            self.flag:SetActive(true)
        else
            self.flag:SetActive(false)
        end
    elseif itemType == 5 or itemType == GOODS_TYPE.GOODS_TYPE_112 then
        if goods.para3 ~= nil and goods.para3 ~= "" then
            local res_num = tonumber(goods.para3)
            self.flagTxt:SetText(string.GetFormattedStr(res_num))
            self.flag:SetActive(true)
        else
            self.flag:SetActive(false)
        end
    else
        self.flag:SetActive(false)
    end

end


function UILuckyRollItem:OnClickReward()
    local x = self.transform.position.x
    local y = self.transform.position.y
    local offset = 50
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityRewardTip,Localization:GetString("370101"),ActivityEventType.PERSONAL,x,y,false,self.eventInfo.rewardScoreIndexArr[index],offset)
end

function UILuckyRollItem:OnClickGo()
    if self.data.type == 0 or table.count(self.rewardData) == 1 then
        local param = {}
        param["itemName"] = self.itemName
        param["itemDesc"] = self.itemDesc
        param["alignObject"] = self._icon_img
        param.isLocal = true
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
    else
        if self.callback ~= nil then
            self.callback(self.index)
        end
        if self.data.needhero ~= "" then
            local str = string.split(self.data.needhero,"|")
            for i = 1 ,#self.rewardData do
                self.rewardData[i].needhero = tonumber(str[i])
            end
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICapacityBoxSelect,NormalBlurPanelAnim,nil,nil,self.rewardData,true)
    end
end

function UILuckyRollItem:GetPos()
    return self._box_btn.transform.position
end

function UILuckyRollItem:SetSelect(show)
    self.select:SetActive(show)
    if show ==false then
        self.selectCount = 0
        self.select_num:SetText("")
    else
        self.selectCount = self.selectCount+1
        self.select_num:SetText(self.selectCount)
    end
end
return UILuckyRollItem