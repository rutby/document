---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---

local UIMonsterTower = BaseClass("UIMonsterTower", UIBaseView)
local base = UIBaseContainer
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local SelectDiffCell = require "UI.UIActivityCenterTable.Component.MonsterTower.SelectDiffCell"
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray
local bg = {[1] = "tower_icon_green",[2] = "tower_icon_blue",[3] = "tower_icon_purple",[4] = "tower_icon_orange",[5] = "tower_icon_red"}
local bgBoard = {[1] = "tower_bg_choose_green",[2] = "tower_bg_choose_blue",[3] = "tower_bg_choose_purple",[4] = "tower_bg_choose_orange",[5] = "tower_bg_choose_red"}

function UIMonsterTower:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

function UIMonsterTower:OnDestroy()
    self:DeleteTimer()
    self:DeleteBossTimer()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIMonsterTower:OnEnable()
    base.OnEnable(self)
end

function UIMonsterTower:OnDisable()
    base.OnDisable(self)
end

function UIMonsterTower:ComponentDefine()
    
    self._actName_txt = self:AddComponent(UITextMeshProUGUIEx, "Root/Txt_ActName")
    self._time_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ActTime/remainTime")
    self._actTime_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/Txt_ActDate")
    --活动说明
    self.intro_btn = self:AddComponent(UIButton, "Root/infoBtn")
    self.intro_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnIntroClick()
    end)
            
    
    --界面一
    self._firstPanel_rect = self:AddComponent(UIBaseContainer,"Root/FirstPanel")
    self._firstDes_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/FirstPanel/Txt_FirstDes")
    self.content_first = self:AddComponent(UIBaseContainer,"Root/FirstPanel/ScrollView/FirstContent")
    self._oneGet_btn = self:AddComponent(UIButton,"Root/FirstPanel/Btn_OneGet")
    self._oneGet_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnFirstClick()
    end)
    self._oneGet_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/FirstPanel/Btn_OneGet/Txt_OneGet")
    self._firstReward_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/FirstPanel/Txt_FirstReward")

    --界面二
    self._secondPanel_rect = self:AddComponent(UIBaseContainer,"Root/SecondPanel")
    self.content_second = self:AddComponent(UIBaseContainer,"Root/SecondPanel/ScrollView/SecondContent")
    self._secondTitle_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/SecondPanel/SecondRect/Txt_SecondTitle")
    

    --界面三
    self._thirdPanel_rect = self:AddComponent(UIImage,"Root/ThirdPanel")
    self._diffBg_img = self:AddComponent(UIImage,"Root/ThirdPanel/Img_DiffBg")
    self._diffIcon_img = self:AddComponent(UIImage,"Root/ThirdPanel/Img_DiffBg/Img_DiffIcon")
    self.content_third = self:AddComponent(UIBaseContainer,"Root/ThirdPanel/Bg_RewardList/ScrollView/ThirdContent")
    self._curLv_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Img_DiffBg/Txt_CurLv")
    self._Txt_Name = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Img_DiffBg/Txt_Name")
    self._desc1_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Txt_Desc1")
    self._timeBoss_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Txt_BossTime")
    self._desc2_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Bg_RewardList/Txt_Desc2")
    self._bossPos_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Txt_BossPos")
    self._challenge_btn = self:AddComponent(UIButton,"Root/ThirdPanel/Btn_Challenge")
    self._challenge_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnCallBossClick()
    end)
    self._challenge_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Btn_Challenge/GameObject/Txt_Challenge")
    self._challengeCost_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Btn_Challenge/GameObject/Txt_ChallengeCost")
    self._challenge_red = self:AddComponent(UIBaseContainer,"Root/ThirdPanel/Btn_Challenge/Red_Challenge")
    self._go_btn = self:AddComponent(UIButton,"Root/ThirdPanel/Btn_Go")
    self._go_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnGoBossClick()
    end)
    self._go_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Btn_Go/Txt_Go")
    self._rewardList_btn = self:AddComponent(UIButton,"Root/ThirdPanel/Btn_RewardList")
    self._rewardList_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnRewardListClick()
    end)
    self._rewardList_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Btn_RewardList/Txt_RewardList")
    self._allianceQuest_btn = self:AddComponent(UIButton,"Root/ThirdPanel/Btn_AllianceQuest")
    self._allianceQuest_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnQuestClick()
    end)
    self._allianceQuest_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Btn_AllianceQuest/Txt_AllianceQuest")
    self._allianceHelp_btn = self:AddComponent(UIButton,"Root/ThirdPanel/Rect_AllianceHelp/Btn_AllianceHelp")
    self._allianceHelp_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnHelpClick()
    end)
    self._helpRed_rect = self:AddComponent(UIButton,"Root/ThirdPanel/Rect_AllianceHelp/Btn_AllianceHelp/Rect_HelpRed")
    
    self._surplus_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Rect_AllianceHelp/Txt_SurplusNum")
    self._help_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/ThirdPanel/Rect_AllianceHelp/Txt_Help")
end

function UIMonsterTower:DataDefine()
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
    self.timer_actionBoss = function(temp)
        self:RefreshBossTime(temp)
    end
end

function UIMonsterTower:DataDestroy()
    self.timer_action = nil
    self.previewRw = nil
end

function UIMonsterTower:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.ActMonTowerGetInfo, self.OnRefresh)
    self:AddUIListener(EventId.ActMonTowerChoiceDiff, self.RefreshThird)
    self:AddUIListener(EventId.ActMonTowerCallHelp, self.RefreshAllianceHelp)
    self:AddUIListener(EventId.ActMonTowerBossKilled, self.RefreshBoss)
end

function UIMonsterTower:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.ActMonTowerGetInfo, self.OnRefresh)
    self:RemoveUIListener(EventId.ActMonTowerChoiceDiff, self.RefreshThird)
    self:RemoveUIListener(EventId.ActMonTowerCallHelp, self.RefreshAllianceHelp)
    self:RemoveUIListener(EventId.ActMonTowerBossKilled, self.RefreshBoss)
end

function UIMonsterTower:SetData(activityId,actId)
    self.activityId = activityId
    self._thirdPanel_rect:SetActive(false)
    self._helpRed_rect:SetActive(false)
   -- DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(actId)
    SFSNetwork.SendMessage(MsgDefines.GetChallengeActInfo, activityId)
    self:SetConstTxt()
end

--刷新
function UIMonsterTower:OnRefresh()
    self.actData = DataCenter.ActMonsterTowerData:GetInfoByActId(tonumber(self.activityId))

    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(tostring(self.activityId))
    
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if actListData then
        self.actListData = actListData
        self:RefreshTime(actListData)
        self:AddTimer(actListData)
 
        self:RefreshTitle(actListData)
        self._firstDes_txt:SetLocalText(self.actListData.desc_info)

        if self.actData then
            if self.actData.challengeInfo and self.actData.challengeInfo.difficulty == 0 then
                self:RefreshFirst(actListData)
                self:RefreshSecond()
            else
                self:RefreshThird()
            end
        end
    end
end

--{{{活动时间
function UIMonsterTower:AddTimer(actListData)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action ,actListData , false,false,false)
    end
    self.timer:Start()
end

function UIMonsterTower:RefreshTime(actListData)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if actListData.endTime < curTime then
        self:DeleteTimer()
        self.actEnd = true
    else
        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(actListData.endTime - curTime))
        self.actEnd = false
    end
end

function UIMonsterTower:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end
--}}}

--一些固定dialog赋值
function UIMonsterTower:SetConstTxt()
    self._firstReward_txt:SetLocalText(131004)
    self._allianceQuest_txt:SetLocalText(372414)
    self._oneGet_txt:SetLocalText(110058)
    self._challenge_txt:SetLocalText(372258)
    self._go_txt:SetLocalText(110003)
    self._rewardList_txt:SetLocalText(372413)
    --self._help_txt:SetLocalText(372471)
    self._secondTitle_txt:SetLocalText(372422)
    self._desc2_txt:SetLocalText(372409)
end

--活动标题
function UIMonsterTower:RefreshTitle(actListData)
    self._actName_txt:SetLocalText(actListData.name)
    local startT = UITimeManager:GetInstance():TimeStampToDayForLocal(actListData.startTime)
    local endT = UITimeManager:GetInstance():TimeStampToDayForLocal(actListData.endTime)
    self._actTime_txt:SetText(startT .. "-" .. endT)
end

--{{{界面一 奖励显示
function UIMonsterTower:SetFirstCellDestroy()
    self.content_first:RemoveComponents(UICommonItem)
    if self.modelFirst~=nil then
        for k,v in pairs(self.modelFirst) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.modelFirst = {}
end

function UIMonsterTower:RefreshFirst(actListData)
    self._firstPanel_rect:SetActive(true)
    self:SetFirstCellDestroy()
    local reward = DataCenter.RewardManager:StrRewardHandle(actListData.reward_goods,true)
    for i = 1, table.length(reward) do
        reward[i].rewardType = RewardType.GOODS
        --复制基础prefab，每次循环创建一次
        self.modelFirst[i] = self:GameObjectInstantiateAsync(UIAssets.UICommonItemSize, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.content_first.transform)
				go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            -- go.transform:Set_localPosition(0,0,0)
            go.name ="item" .. i
            local cell = self.content_first:AddComponent(UICommonItem,go.name)
            cell:ReInit(reward[i])
            cell:SetItemCountActive(false)
        end)
    end
end
--}}}

--{{{界面二 选择难度
function UIMonsterTower:SetSecondCellDestroy()
    self.content_second:RemoveComponents(SelectDiffCell)
    if self.modelSecond~=nil then
        for k,v in pairs(self.modelSecond) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.modelSecond = {}
end

function UIMonsterTower:RefreshSecond()
    self._secondPanel_rect:SetActive(false)
    self:SetSecondCellDestroy()
    --获取所有难度
    local list = DataCenter.ActMonsterTowerData:GetTemplate()
    for i = 1, table.length(list) do
        --复制基础prefab，每次循环创建一次
        self.modelSecond[i] = self:GameObjectInstantiateAsync(UIAssets.SelectDiffCell, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.content_second.transform)
            go.transform:Set_localScale(1,1,1)
            go.transform:Set_localPosition(0,0,0)
            go.name ="diff" .. i
            local cell = self.content_second:AddComponent(SelectDiffCell,go.name)
            cell:ReInit(i,list[i],tonumber(self.activityId),self.actData.finishDifficulty)
        end)
    end
end
--}}}

--{{{界面三 个人挑战刷新
function UIMonsterTower:SetThirdCellDestroy()
    self.content_third:RemoveComponents(UICommonItem)
    if self.modelThird~=nil then
        for k,v in pairs(self.modelThird) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.modelThird = {}
end
    
function UIMonsterTower:RefreshThird()

    self._firstPanel_rect:SetActive(false)
    self._secondPanel_rect:SetActive(false)
    
    self.actData = DataCenter.ActMonsterTowerData:GetInfoByActId(tonumber(self.activityId))
    
    self:RefreshAllianceHelp()
    
    -- self._diffBg_img:LoadSprite(string.format(LoadPath.UIMonsterTower, bg[self.actData.challengeInfo.difficulty]))
    self._diffIcon_img:LoadSprite(string.format(LoadPath.UIMonsterTower, ActMonsterTowerDiff[self.actData.challengeInfo.difficulty]))
    -- self._thirdPanel_rect:LoadSprite(string.format(LoadPath.UIMonsterTower, bgBoard[self.actData.challengeInfo.difficulty]))
    local curLv = self.actData.challengeInfo.curLevel
    curLv = self.actData.challengeInfo.curLevel + 1
    local template = DataCenter.ActMonsterTowerData:GetTemplateByIndex(self.actData.challengeInfo.difficulty)
    self:SetThirdCellDestroy()
    
    self._thirdPanel_rect:SetActive(true)
    self._Txt_Name:SetLocalText(template.monster_des)
    if self.actData.challengeInfo.curLevel < self.actData.maxLevel then
        self._curLv_txt:SetText(Localization:GetString("300665",self.actData.challengeInfo.curLevel + 1))
    else
        self._curLv_txt:SetText(Localization:GetString("300665",self.actData.challengeInfo.curLevel))
    end
    self._challengeCost_txt:SetText(template.call_consume)
    
    if curLv <= self.actData.maxLevel  then
        self._desc1_txt:SetLocalText(372410)
        -- self._desc1_txt:SetAnchoredPositionXY(-121,122)
        if self.actData.challengeBoss.refreshTime == 0 then
            self._go_btn:SetActive(false)
            self._challenge_btn:SetActive(true)
            self._desc1_txt:SetActive(true)
            self._timeBoss_txt:SetActive(false)
            self._bossPos_txt:SetActive(false)
            local btnRed = DataCenter.ActMonsterTowerData:GetBtnRedByActId(self.actData.activityId)
            self._challenge_red:SetActive(btnRed)
            DataCenter.ActMonsterTowerData:SetBtnRedByActId(self.actData.activityId)
        else
            self._go_btn:SetActive(true)
            self._challenge_btn:SetActive(false)
            self:RefreshBossTime(self.actData.challengeBoss)
            self:AddBossTimer(self.actData.challengeBoss)
            local pos = SceneUtils.IndexToTilePos(self.actData.challengeBoss.pointId,ForceChangeScene.World)
            -- self._bossPos_txt:SetActive(true)
            -- self._bossPos_txt:SetLocalText(300015,pos.x,pos.y)
        end
    else
        self._go_btn:SetActive(false)
        self._challenge_btn:SetActive(false)
        self._timeBoss_txt:SetActive(false)
        self._bossPos_txt:SetActive(false)
        self._desc1_txt:SetActive(true)
        self._desc1_txt:SetLocalText(372424)
        -- self._desc1_txt:SetAnchoredPositionXY(-121,100)
    end
    
    self._surplus_txt:SetLocalText(372412,template.help_time - self.actData.challengeInfo.callHelpCount)
    
    --curReward为空当前难度已打完
    local list = self.actData.curReward
    for i = 1, table.length(list) do
        --复制基础prefab，每次循环创建一次
        self.modelThird[i] = self:GameObjectInstantiateAsync(UIAssets.UICommonItemSize, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            --go.gameObject:SetActive(true)
            go.transform:SetParent(self.content_third.transform)
            go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            -- go.transform:Set_localScale(0.5,0.5,0.5)
            -- go.transform:Set_localPosition(0,0,0)
            go.name ="curReward" .. i
            local cell = self.content_third:AddComponent(UICommonItem,go.name)
            cell:ReInit(list[i])
        end)
    end
end

--{{{Boss时间
function UIMonsterTower:AddBossTimer(actListData)
    if self.timerBoss == nil then
        self.timerBoss = TimerManager:GetInstance():GetTimer(1, self.timer_actionBoss ,actListData , false,false,false)
    end
    self.timerBoss:Start()
end

function UIMonsterTower:RefreshBossTime(actListData)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if actListData.refreshTime < curTime then
        self:DeleteBossTimer()
        self._timeBoss_txt:SetActive(false)
        self._bossPos_txt:SetActive(false)
        self._desc1_txt:SetActive(true)
    else
        self._desc1_txt:SetActive(false)
        self._timeBoss_txt:SetActive(true)
        self._timeBoss_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(actListData.refreshTime - curTime))
    end
end

function UIMonsterTower:DeleteBossTimer()
    if self.timerBoss ~= nil then
        self.timerBoss:Stop()
        self.timerBoss = nil
    end
end
--}}}

--开启活动
function UIMonsterTower:OnFirstClick()
    self._firstPanel_rect:SetActive(false)
    self._secondPanel_rect:SetActive(true)
end

--召唤boss
function UIMonsterTower:OnCallBossClick()
    if self.actEnd then
        UIUtil.ShowTipsId(370100)
        return
    end
    SFSNetwork.SendMessage(MsgDefines.CallChallengeActBoss, tonumber(self.activityId))
end

--前往boss
function UIMonsterTower:OnGoBossClick()
    GoToUtil.CloseAllWindows()
    --local pointId = SceneUtils.TileIndexToWorld(self.actData.challengeBoss.pointId,ForceChangeScene.World)
    --GoToUtil.GotoWorldPos(pointId)
    local challengeData = self.actData.challengeBoss
    GoToUtil.MoveToWorldPointAndOpen(challengeData.pointId)
end

--排行榜
function UIMonsterTower:OnHelpClick()
    if LuaEntry.Player:IsInAlliance() then
        DataCenter.ActMonsterTowerData:SetHelpLisByActId(self.actData.activityId)
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActMonsterTowerRank,{anim = true, isBlur  = true}, tonumber(self.activityId))
    else
        UIUtil.ShowTipsId(GameDialogDefine.NO_JOIN_ALLIANCE)
        GoToUtil.GotoOpenView(UIWindowNames.UIAllianceIntro,{ anim = true, isBlur = true})
    end
    self._helpRed_rect:SetActive(false)
end

--活动说明
function UIMonsterTower:OnIntroClick()
    UIUtil.ShowIntro(Localization:GetString(self.actListData.name), Localization:GetString("100239"),Localization:GetString(self.actListData.story))
end

--打开奖励列表
function UIMonsterTower:OnRewardListClick()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIActMonsterTowerReward,{anim = true, isBlur  = true}, tonumber(self.activityId))
end

--打开联盟任务
function UIMonsterTower:OnQuestClick()
    if LuaEntry.Player:IsInAlliance() then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActMonsterTowerTask, {anim = true, isBlur  = true}, tonumber(self.activityId))
    else
        UIUtil.ShowTipsId(GameDialogDefine.NO_JOIN_ALLIANCE)
        GoToUtil.GotoOpenView(UIWindowNames.UIAllianceIntro,{anim = true,isBlur = true})
    end
end

function UIMonsterTower:RefreshBoss(curLevel)
    if self.actData then
        self.actData.challengeInfo.curLevel = curLevel
        self.actData.challengeBoss.refreshTime = 0
        self:RefreshThird()
    end
end

function UIMonsterTower:RefreshAllianceHelp()
    local helpList = DataCenter.ActMonsterTowerData:GetHelpLisByActId(tonumber(self.activityId))
    local hasRedDot = self.actData:GetHelpRedDot()
    self._helpRed_rect:SetActive(helpList or hasRedDot)
end

return UIMonsterTower