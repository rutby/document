---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 2021/9/23 17:29
---
local SevenDay = BaseClass("SevenDay",UIBaseView)
local UIActivitySevenDayBoxItem = require "UI.UIActivityCenterTable.Component.NoviceSevenDay.UIActivitySevenDayBoxItem"
local UIActivitySevenDayItem = require "UI.UIActivityCenterTable.Component.NoviceSevenDay.UIActivitySevenDayItem"
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local cellHeight = 47
local Screen = CS.UnityEngine.Screen
function SevenDay:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self.taskList = {}
    self.dayTabIndex = 1
    self.childTabIndex = 1
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime()
    end
end

function SevenDay:ComponentDefine()
    
    --self._img_bg =self:AddComponent(UIImage,"ImageBg")
    --self._right_view = self:AddComponent(UIImage,"RightView")
    --local scale = Screen.height/750
    --local screenWidth = Screen.width/scale
  --  self._img_bg:SetSizeDelta(Vector2(screenWidth,750))
    --self._right_view:SetAnchoredPosition(Vector2.New(self._right_view:GetAnchoredPosition().x + 240,0))
    
    --标题
    --self.UI7day_titlebg = self:AddComponent(UIImage,"RightView/Rect_Top/UI7day_titlebg")
    self._title_txt = self:AddComponent(UITextMeshProUGUIEx,"RightView/Txt_Title")
    self._title_txt:SetLocalText(371007) 
    --倒计时
    self._time_txt = self:AddComponent(UITextMeshProUGUIEx,"RightView/Txt_Time")
    --当前积分
    self._init_txt = self:AddComponent(UITextMeshProUGUIEx,"RightView/Rect_Top/inteText")
    self._init_txt:SetLocalText(302124) 
    self._progress_txt = self:AddComponent(UITextMeshProUGUIEx,"RightView/Rect_Top/Txt_Progress")
    --进度条
    self.sliders = {}
    for i = 1, 6 do
        self.sliders[i] = self:AddComponent(UISlider,"RightView/Rect_Top/Slider"..i)
    end
    --盒子列表
    self._box_icon = {}
    self._box_rectTab = {}
    --self._box_rectTabEffect ={}
    for i = 1, 6 do
        local iconPath = "RightView/Rect_Top/iconCell/Img_Iconbg"..i
        local rectPath = iconPath.."/UICommonResItem"..i
        local effect = iconPath.."/SevenDayBoxEffect"..i.."/Rect_Effect"..i.."/Rect_anim"..i
        self._box_icon[i] = self:AddComponent(UIBaseContainer, iconPath)
        self._box_rectTab[i] = self:AddComponent(UIActivitySevenDayBoxItem, rectPath)
        --self._box_rectTabEffect[i] = self:AddComponent(UIAnimator, effect)
    end
    -- 英雄列表
    self._hero_btn = {}
    self._hero_rect = {}
    self._hero_rece = {}
    --self._hero_effect = {}
    for i = 1, 6 do
        local heroPath = "RightView/Rect_Top/iconCell/Rect_Hero"..i
        local rectPath = heroPath.."/UIHeroCellSmall"..i
        local recePath = heroPath.."/ImgRece"..i
        local effectPath = heroPath.."/SevenDayHeroEffect"..i.."/Rect_Effect"..i.."/Rect_anim_h"..i
        self._hero_btn[i] = self:AddComponent(UIButton, heroPath)
        self._hero_rect[i] = self:AddComponent(UIHeroCellSmall, rectPath)
        self._hero_rece[i] = self:AddComponent(UIImage, recePath)
        --self._hero_effect[i] = self:AddComponent(UIAnimator, effectPath)
        self._hero_btn[i]:SetOnClick(function()
            self:OnHeroBtnClick(i)
        end)
    end
    
    --积分列表
    self.num_txtTab = {}
    for i=1,6 do
        local txtpath = "RightView/Rect_Top/txtNum"..i
        self.num_txtTab[i] = self:AddComponent(UITextMeshProUGUIEx,txtpath)
    end
    --日期
    self.day_togTab = {}
    self.day_togTabRed = {}
    self.day_togTabBack ={}
    for i=1,5 do
        local togglepath = "RightView/Rect_Bottom/Rect_Group/Toggle_Tab"..i
        local txtpath = "RightView/Rect_Bottom/Rect_Group/Toggle_Tab"..i.."/Rect_Lock/Txt_Toggle"..i
        local lockpath = "RightView/Rect_Bottom/Rect_Group/Toggle_Tab"..i.."/Rect_Lock/Img_Lock"..i
        local daypath = "RightView/Rect_Bottom/Rect_Group/Toggle_Tab"..i.."/Txt_day"..i
        self.day_togTabRed[i] = self:AddComponent(UIImage,"RightView/Rect_Bottom/Rect_Group/Toggle_Tab"..i.."/Red"..i)
        self.day_togTabBack[i] = self:AddComponent(UIImage,"RightView/Rect_Bottom/Rect_Group/Toggle_Tab"..i.."/Background"..i) 
        self.day_togTab[i] = {
            toggle = self:AddComponent(UIToggle,togglepath),
            txt = self:AddComponent(UITextMeshProUGUIEx,txtpath),
            lock = self:AddComponent(UIImage,lockpath),
            day = self:AddComponent(UITextMeshProUGUIEx,daypath)
        }
        
    end
    
    for i=1,5 do
        self.day_togTab[i].toggle:SetOnValueChanged(function(tf)
                if tf then
                    self.content:SetAnchoredPosition(Vector2.New(0,0))
                    self:ToggleControl(i)
                end
        end)
    end

    self.listDay_togTab = {}
    for i=1,3 do
        local togglepath = "RightView/Rect_Bottom/Rect_List/Toggle_List"..i
        local txtpath = "RightView/Rect_Bottom/Rect_List/Toggle_List"..i.."/Txt_ListToggle"..i
        local red = "RightView/Rect_Bottom/Rect_List/Toggle_List"..i.."/Img_RedList"..i
        self.listDay_togTab[i] = {
            toggle = self:AddComponent(UIToggle,togglepath),
            txt = self:AddComponent(UITextMeshProUGUIEx,txtpath),
            red = self:AddComponent(UIImage,red),
        }
    end
    for i=1,3 do
        self.listDay_togTab[i].toggle:SetOnValueChanged(function(tf)
            if tf then
                local isOn = self.listDay_togTab[i].toggle:GetIsOn()
                if isOn then
                    self.content:SetAnchoredPosition(Vector2.New(0,0))
                    if self.childTabIndex ~= i then
                        self.childTabIndex = i
                        self:RefreshSelectData(i)
                    end
                end
            end
        end)
    end

    self.content = self:AddComponent(UIBaseContainer,"RightView/Rect_Bottom/ScrollView/Viewport/Content")

    --self._unlock_rect = self:AddComponent(UIBaseContainer,"ImgBg/RightView/Rect_Unlock")
    --self._unlock_rect:SetActive(false)
    --self.unlockContent = self:AddComponent(UIBaseContainer,"ImgBg/RightView/Rect_Unlock/Rect_GroupList")
end

function SevenDay:OnDestroy()
    --self._right_view:SetAnchoredPosition(Vector2.New(self._right_view:GetAnchoredPosition().x - 240,0))
    self:SetAllCellDestroy()
    self:ComponentDestroy()
    -- self:CellDestroy()
    self.define = nil
    self.taskList = nil
    self.dayTabIndex = nil
    self.childTabIndex = nil
    self.timer_action = nil
    self:DeleteTimer()
    base.OnDestroy(self)
end

function SevenDay:ComponentDestroy()
    self._time_txt = nil
    self._progress_txt = nil
    self.sliders = nil
    self._box_rectTab = nil
    self.num_txtTab = nil
    self.day_togTab = nil
    self.listDay_togTab = nil
    self._hero_rect = nil
    self.content = nil
end
function SevenDay:OnEnable()
    base.OnEnable(self)
end

function SevenDay:OnDisable()
    DataCenter.ActivityListDataManager.sevenDayLastVisitDayTab = { self.dayTabIndex, self.childTabIndex }
    base.OnDisable(self)
end

function SevenDay:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.MainTaskSuccess, self.UpdateTaskState)
    self:AddUIListener(EventId.SevenDayGetReward, self.UpdateRewardScroe)
    self:AddUIListener(EventId.UpdateDayActInfo, self.InitData)
end

function SevenDay:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MainTaskSuccess, self.UpdateTaskState)
    self:RemoveUIListener(EventId.SevenDayGetReward, self.UpdateRewardScroe)
    self:RemoveUIListener(EventId.UpdateDayActInfo, self.InitData)
end

--更新任务
function SevenDay:UpdateTaskState()
    self.seventDayinfo = DataCenter.ActivityListDataManager:GetSevenDayList()
    if self.seventDayinfo ~= nil then
        self.seventDayinfo:CheckRedDot()
        self:RedDayRefresh()
        self:RefreshSelectData()
    end
end

--更新盒子
function SevenDay:UpdateRewardScroe()
    self.seventDayinfo = DataCenter.ActivityListDataManager:GetSevenDayList()
    self:RedListDayRefresh()
    self:SetBoxes()
    self:SetSliderValue()
end

function SevenDay:SendData()
    SFSNetwork.SendMessage(MsgDefines.UserDayActInfo)
end

function SevenDay:InitData()
    self:AddTimer()
    self.seventDayinfo =  DataCenter.ActivityListDataManager:GetSevenDayList()
    --计时器有延迟，手动先调用刷新时间
    self:RefreshTime()
    for i = 1, #self.seventDayinfo.dayActs do
        self.day_togTab[i].txt:SetLocalText(self.seventDayinfo.dayActs[i][1].type1_text)
        if self.seventDayinfo.days >= i then
            self.day_togTab[i].lock:SetActive(false)
        else
            self.day_togTab[i].lock:SetActive(true)
        end
    end
    
    self:RefreshToggle()

    for i=1,#self.seventDayinfo.scoreReward do
        self.num_txtTab[i]:SetText(self.seventDayinfo.scoreReward[i].needScore)
    end
    
    --要求背景跟随文字长度比例
   -- self.UI7day_titlebg:SetSizeDelta(Vector2(self._title_txt:GetWidth()+112,self.UI7day_titlebg:GetSizeDelta().y))

    self.seventDayinfo:CheckRedDot()

    self:RedDayRefresh()
    
    local last = DataCenter.ActivityListDataManager.sevenDayLastVisitDayTab
    if last then
        self.dayTabIndex = last[1]
        self.childTabIndex = last[2]
    else
        self.dayTabIndex = 1
        self.childTabIndex = 1
    end
    
    self.day_togTab[self.dayTabIndex].toggle:SetIsOn(true)
    self.listDay_togTab[self.childTabIndex].toggle:SetIsOn(true)
    self:SetSliderValue() 
    self:RefreshSelectData()
    self:SetBoxes()
end

--顶部数据
function SevenDay:SetSliderValue()
    local lastScore = 0
    for i, v in ipairs(self.seventDayinfo.scoreReward) do
        self.sliders[i]:SetValue(Mathf.Clamp((self.seventDayinfo.score - lastScore) / (v.needScore - lastScore), 0, 1))
        lastScore = v.needScore
    end
    self._progress_txt:SetText(self.seventDayinfo.score)
    
    --table.print(self.seventDayinfo)
    --local count = #self.seventDayinfo.scoreReward
    --local count1 = self.seventDayinfo.scoreReward[1].needScore
    --if self.seventDayinfo.score <= count1 then
    --    local value = self.seventDayinfo.score/count1
    --    if value >= 0.9 and value < 1 then
    --        value = 0.85
    --    end
    --    self.slider_back:SetValue(string.format("%.1f",value))
    --    self.slider:SetValue(0)
    --else
    --    self.slider_back:SetValue(1)
    --    local value = (self.seventDayinfo.score - count1)/(self.seventDayinfo.scoreReward[count].needScore - count1)
    --    if value >= 0.13 and value < 0.2 then
    --        value = 0.12
    --    elseif value > 0.2 and value < 0.23 then
    --        value = 0.23
    --    elseif value >= 0.35 and value < 0.4 then
    --        value = 0.34
    --    elseif value > 0.4 and value < 0.44 then
    --        value = 0.44
    --    elseif value >= 0.55 and value < 0.6 then
    --        value = 0.55
    --    elseif value > 0.6 and value < 0.66 then
    --        value = 0.66
    --    elseif  value >= 0.77 and value < 0.8  then
    --        value = 0.76
    --    elseif value > 0.8 and value < 0.87 then
    --        value = 0.87
    --    end
    --    self.slider:SetValue(string.format("%.2f", value ))
    --end
    --self._progress_txt:SetText(self.seventDayinfo.score)
end

function SevenDay:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function SevenDay:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

--刷新事件
function SevenDay:RefreshTime()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.seventDayinfo.endTime < curTime then
        self.view.ctrl:Close()
    else
        
        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(self.seventDayinfo.endTime - curTime))
    end
end

--刷新toggle状态
function SevenDay:RefreshToggle()
    for i = 1, #self.seventDayinfo.dayActs do
        if self.seventDayinfo.days < i then
          --  self.day_togTab[i].toggle:SetInteractable(false)
            self.day_togTab[i].lock:SetActive(true)
            self.day_togTab[i].day:SetActive(false)
        else
          --  self.day_togTab[i].toggle:SetInteractable(true)
            self.day_togTab[i].lock:SetActive(false)
            self.day_togTab[i].day:SetActive(true)
        end
    end
end

--点天数
function SevenDay:ToggleControl(index)
    local isOn = self.day_togTab[index].toggle:GetIsOn()
    if isOn and self.dayTabIndex ~= index then
        self.dayTabIndex = index
        if self.childTabIndex ~= 1 then
            self.childTabIndex = 1
            self.listDay_togTab[1].toggle:SetIsOn(true)
        end
        self:RefreshSelectData()
    end
end

function SevenDay:RefreshSelectData()
    if self.seventDayinfo == nil then
        return
    end
    
    for i = 1, 3 do
        if i == self.childTabIndex then
            self.listDay_togTab[i].txt:SetColor(Color.New(1,1,1,1))
        else
            self.listDay_togTab[i].txt:SetColor(Color.New(192/255,205/255,214/255,1))
        end
    end
    
    local tasks = self.seventDayinfo.dayActs[self.dayTabIndex][self.childTabIndex].tasks
    self.taskList = self.seventDayinfo:SortTask(tasks)
    for i = 1, 3 do
        self.listDay_togTab[i].txt:SetLocalText(self.seventDayinfo.dayActs[self.dayTabIndex][i].type2_text)
    end
    self:RedListDayRefresh()
    self:SetData()
end

function SevenDay:SetData()
     self:SetItemData()
end

function SevenDay:SetAllCellDestroy()
    self.content:RemoveComponents(UIActivitySevenDayItem)
    if self.model ~= nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

--更新任务
function SevenDay:SetItemData()
    self:SetAllCellDestroy()
    self.model = {}
    if next(self.taskList) then
        for i = 1, table.length(self.taskList) do
            --复制基础prefab，每次循环创建一次
            self.model[i] = self:GameObjectInstantiateAsync(UIAssets.UIActivitySevenDayItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                --go.gameObject:SetActive(true)
                go.transform:SetParent(self.content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = i
                self.taskList[i].flyPos = self.gameObject.transform:Find("RightView/Rect_Top/inteCoin")
                self.taskList[i].day = self.dayTabIndex
                local cell = self.content:AddComponent(UIActivitySevenDayItem,go.name)
                cell:RefreshData(self.taskList[i])
            end)
        end
    end
end

function SevenDay:SetBoxes()
    for i = 1, 6 do
        if self.seventDayinfo.scoreReward[i].reward[1].type == RewardType.HERO then
            -- 英雄奖励
            self._box_icon[i]:SetActive(false)
            self._hero_btn[i]:SetActive(true)
            self._hero_rect[i]:InitWithConfigId(self.seventDayinfo.scoreReward[i].reward[1].value.id)
            self._hero_rece[i]:SetActive(self.seventDayinfo.scoreReward[i].rewardFlag == 1)
            --self._hero_effect[i]:SetActive(false)
            if self.seventDayinfo.scoreReward[i].rewardFlag == 0 then
                --self._hero_effect[i]:SetActive(self.seventDayinfo.score >= self.seventDayinfo.scoreReward[i].needScore)
            end
        else
            -- 普通奖励
            self._box_icon[i]:SetActive(true)
            self._hero_btn[i]:SetActive(false)
            --self._box_rectTabEffect[i]:SetActive(false)
            --self._box_rectTabEffect[i]:Enable(false)
            self._box_rectTab[i]:RefreshData(i, self.seventDayinfo.scoreReward[i], self.seventDayinfo.score, nil)--self._box_rectTabEffect[i])
        end
    end
end

function SevenDay:OnHeroBtnClick(i)
    local rewardData = self.seventDayinfo.scoreReward[i]
    if rewardData.rewardFlag == 0 then
        if self.seventDayinfo.score >= rewardData.needScore then
            self.view.ctrl:GetSevenDayBoxReward(i)
            return
        --else
        --    UIUtil.ShowTipsId(371013) 
        end
    --else
    --    UIUtil.ShowTipsId(170003) 
    end
    local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(),tonumber(rewardData.reward[1].value.id))
    local param = {}
    param.heroId = tonumber(rewardData.reward[1].value.id)
    param.title = Localization:GetString(heroConfig.name)
    param.content = Localization:GetString(heroConfig.brief_desc)
    param.dir = 1
    param.defWidth = 300
    param.pivot = 0.5
    param.position = self._hero_btn[i].transform.position
    param.position.y = param.position.y + self._hero_btn[i]:GetSizeDelta().y * 0.5
    param.bindObject = self._hero_btn[i].gameObject
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTips, { anim = false }, param)
end

function SevenDay:RedDayRefresh()
    local redData = self.seventDayinfo.taskRed
    for i = 1, #redData do
        self.day_togTabRed[i]:SetActive(false)
        for j = 1, #redData[i] do
            if redData[i][j] == 1 then
                self.day_togTabRed[i]:SetActive(true)
                if DataCenter.ActivityListDataManager.sevenDayLastVisitDayTab == nil then
                    DataCenter.ActivityListDataManager.sevenDayLastVisitDayTab = { i, j }
                end
                break
            end
        end
    end
end

function SevenDay:RedListDayRefresh()
    local redData = self.seventDayinfo.taskRed
    for i = 1, 3 do
        if i <= #redData[self.dayTabIndex] then
            self.listDay_togTab[i].red:SetActive(redData[self.dayTabIndex][i] == 1)
        else
            self.listDay_togTab[i].red:SetActive(false)
        end
    end
end

return SevenDay