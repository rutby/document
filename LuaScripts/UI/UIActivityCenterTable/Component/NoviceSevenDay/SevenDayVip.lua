---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 2021/9/23 17:29
---
local SevenDayVip = BaseClass("SevenDayVip",UIBaseView)
local UIActivitySevenDayItem = require "UI.UIActivityCenterTable.Component.NoviceSevenDay.UIActivitySevenDayItem"
local base = UIBaseView
local Localization = CS.GameEntry.Localization
function SevenDayVip : OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

function SevenDayVip : ComponentDefine()
    self.closeBtn = self:AddComponent(UIButton, "fullTop/CloseBtn")
    self.closeBtn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)

    self.des = self:AddComponent(UITextMeshProUGUIEx, "fullTop/Bg2/img/layout/Des")
    self.des:SetLocalText(321362)
    self.heroName = self:AddComponent(UITextMeshProUGUIEx, "fullTop/Bg2/img/layout/heroName")
    self.heroName:SetLocalText(151002)
    
    --标题
    self._title_txt = self:AddComponent(UITextMeshProUGUIEx,"fullTop/imgTitle/Common_img_title/titleText")
    self._title_txt:SetLocalText(371007)
    
    self.title = self:AddComponent(UITextMeshProUGUIEx, "fullTop/Bg2/img/title")
    self.title:SetLocalText(371007)
    --倒计时
    self._time_txt = self:AddComponent(UITextMeshProUGUIEx,"fullTop/Bg2/img/time/Di/Txt_Time")
    --当前积分
    self._progress_txt = self:AddComponent(UITextMeshProUGUIEx,"fullTop/Bg2/RightView/Rect_Top/Txt_Progress")
    self._box_btn = self:AddComponent(UIButton,"fullTop/Bg2/RightView/Rect_Top/Btn_BoxRoot/Btn_Box")
    self._box_red = self:AddComponent(UIBaseContainer,"fullTop/Bg2/RightView/Rect_Top/Btn_BoxRoot/Btn_Box/BoxRed")
    self.boxEff = self:AddComponent(UIBaseContainer, "fullTop/Bg2/RightView/Rect_Top/Btn_BoxRoot/Btn_Box/BoxEff")
    self.boxAnim = self:AddComponent(UIAnimator, "fullTop/Bg2/RightView/Rect_Top/Btn_BoxRoot/Btn_Box")
    self._box_btn:SetOnClick(function()
        self:OnClickBox()
    end)
    --进度条
    self.sliders = {}
    for i = 1, 6 do
        self.sliders[i] = self:AddComponent(UISlider,"fullTop/Bg2/RightView/Rect_Top/Slider"..i)
    end
    
    self.pointList = {}
    for i = 1, 6 do
        self.pointList[i] = self:AddComponent(UISlider,"fullTop/Bg2/RightView/Rect_Top/pointBg"..i.."/point"..i)
    end

    --积分列表
    self.num_txtTab = {}
    for i=1,6 do
        local txtpath = "fullTop/Bg2/RightView/Rect_Top/txtNum"..i
        self.num_txtTab[i] = self:AddComponent(UITextMeshProUGUIEx,txtpath)
    end
    --日期
    self.day_togTab = {}
    self.day_togTabRed = {}
    self.day_togTabBack ={}
    for i=1,5 do
        local togglepath = "fullTop/Bg2/RightView/Rect_Top/Rect_Group/Toggle_Tab"..i
        local txtpath = "fullTop/Bg2/RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Txt_Toggle"..i
        local txtLockpath = "fullTop/Bg2/RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Rect_Lock"..i.."/Txt_Lock"..i
        local lockpath = "fullTop/Bg2/RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Rect_Lock"..i
        local daypath = "fullTop/Bg2/RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Txt_day"..i
        self.day_togTabRed[i] = self:AddComponent(UIImage,"fullTop/Bg2/RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Red"..i)
        self.day_togTabBack[i] = self:AddComponent(UIImage,"fullTop/Bg2/RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Background"..i)
        self.day_togTab[i] = {
            toggle = self:AddComponent(UIToggle,togglepath),
            txt = self:AddComponent(UITextMeshProUGUIEx,txtpath),
            txtLock = self:AddComponent(UITextMeshProUGUIEx,txtLockpath),
            lock = self:AddComponent(UIImage,lockpath),
            day = self:AddComponent(UITextMeshProUGUIEx,daypath)
        }

    end

    for i=1,5 do
        self.day_togTab[i].toggle:SetOnValueChanged(function(tf)
            if tf then
                SoundUtil.PlayEffect(SoundAssets.Music_Effect_common_switch_2)
                self.content:SetAnchoredPosition(Vector2.New(0,0))
                self:ToggleControl(i)
            end
        end)
    end

    self.listDay_togTab = {}
    for i=1,3 do
        local togglepath = "fullTop/Bg2/RightView/Rect_Bottom/Rect_List/Toggle_List"..i
        local txtpath = "fullTop/Bg2/RightView/Rect_Bottom/Rect_List/Toggle_List"..i.."/Txt_ListToggle"..i
        local txtUnselectpath = "fullTop/Bg2/RightView/Rect_Bottom/Rect_List/Toggle_List"..i.."/Txt_ListToggle"..i.."_1"
        local red = "fullTop/Bg2/RightView/Rect_Bottom/Rect_List/Toggle_List"..i.."/Img_RedList"..i
        self.listDay_togTab[i] = {
            toggle = self:AddComponent(UIToggle,togglepath),
            txt = self:AddComponent(UITextMeshProUGUIEx,txtpath),
            txtUnselect = self:AddComponent(UITextMeshProUGUIEx,txtUnselectpath),
            red = self:AddComponent(UIImage,red),
        }
    end
    for i=1,3 do
        self.listDay_togTab[i].toggle:SetOnValueChanged(function(tf)
            if tf then
                SoundUtil.PlayEffect(SoundAssets.Music_Effect_common_switch_2)
                local isOn = self.listDay_togTab[i].toggle:GetIsOn()
                if isOn then
                    self.content:SetAnchoredPosition(Vector2.New(0,0))
                    if self.childTabIndex ~= i then
                        self.childTabIndex = i
                        self:RefreshSelectData(true)
                    end
                    DataCenter.ActivityListDataManager.sevenDayLastVisitDayTab = {self.dayTabIndex, self.childTabIndex}
                end
            end
        end)
    end

    self.content = self:AddComponent(UIBaseContainer,"fullTop/Bg2/RightView/Rect_Bottom/ScrollView/Viewport/Content")

end

function SevenDayVip : OnDestroy()
    self:SetAllCellDestroy()
    self:DeleteTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function SevenDayVip : ComponentDestroy()
    self._time_txt = nil
    self._progress_txt = nil
    self.sliders = nil
    self.num_txtTab = nil
    self.day_togTab = nil
    self.listDay_togTab = nil
    self.content = nil
end

function SevenDayVip : DataDefine()
    self.taskList = {}
    self.dayTabIndex = 1
    self.childTabIndex = 1
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime()
    end
    self.model = {}
    self.cellList = {}
    self.isRefreshTaskList = false
    self.toRefreshTaskList = false
end

function SevenDayVip : DataDestroy()
    self.taskList = nil
    self.dayTabIndex = nil
    self.childTabIndex = nil
    self.timer = nil
    self.timer_action = nil
    self.model = nil
    self.cellList = nil
    self.isRefreshTaskList = nil
    self.toRefreshTaskList = nil
end

function SevenDayVip : OnEnable()
    base.OnEnable(self)
    self:InitData()
    self:SendData()
end

function SevenDayVip : OnDisable()
    DataCenter.ActivityListDataManager.sevenDayLastVisitDayTab = { self.dayTabIndex, self.childTabIndex }
    base.OnDisable(self)
end

function SevenDayVip : OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.MainTaskSuccess, self.OnMainTaskSuccess)       -- 任务完成，主动完成或自动完成（如建筑升级至n级）
    self:AddUIListener(EventId.SevenDayGetReward, self.OnSevenDayGetReward)       -- 领取盒子奖励
    self:AddUIListener(EventId.UpdateDayActInfo, self.InitData)     -- 七日活动推送
end

function SevenDayVip : OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MainTaskSuccess, self.OnMainTaskSuccess)
    self:RemoveUIListener(EventId.SevenDayGetReward, self.OnSevenDayGetReward)
    self:RemoveUIListener(EventId.UpdateDayActInfo, self.InitData)
end

--更新任务
function SevenDayVip : OnMainTaskSuccess()
    self.sevenDayInfo = DataCenter.ActivityListDataManager:GetSevenDayList()
    if self.sevenDayInfo ~= nil then
        self.sevenDayInfo:CheckRedDot()
        self:RedDayRefresh()
        self:RefreshSelectData(false)
    end
end

--更新盒子
function SevenDayVip : OnSevenDayGetReward()
    self.sevenDayInfo = DataCenter.ActivityListDataManager:GetSevenDayList()
    self:RedListDayRefresh()
    self:SetSliderValue()
end

function SevenDayVip : SendData()
    SFSNetwork.SendMessage(MsgDefines.UserDayActInfo)
end

function SevenDayVip : InitData()
    self:AddTimer()
    self.sevenDayInfo =  DataCenter.ActivityListDataManager:GetSevenDayList()
    --计时器有延迟，手动先调用刷新时间
    self:RefreshTime()
    for i = 1, #self.sevenDayInfo.dayActs do
        self.day_togTab[i].txt:SetLocalText(self.sevenDayInfo.dayActs[i][1].type1_text)
        self.day_togTab[i].txtLock:SetLocalText(self.sevenDayInfo.dayActs[i][1].type1_text)
        if self.sevenDayInfo.days >= i then
            self.day_togTab[i].txt:SetActive(true)
            self.day_togTab[i].lock:SetActive(false)
            self.day_togTab[i].day:SetActive(true)
        else
            self.day_togTab[i].txt:SetActive(false)
            self.day_togTab[i].lock:SetActive(true)
            self.day_togTab[i].day:SetActive(false)
        end
    end

    self:RefreshToggle()

    for i=1,#self.sevenDayInfo.scoreReward do
        self.num_txtTab[i]:SetText(self.sevenDayInfo.scoreReward[i].needScore)
    end

    self.sevenDayInfo:CheckRedDot()

    self:RedDayRefresh()

    local last = DataCenter.ActivityListDataManager.sevenDayLastVisitDayTab
    if last then
        self.dayTabIndex = last[1]
        self.childTabIndex = last[2]
    else
        self.dayTabIndex = 1
        self.childTabIndex = 1
    end

    self.day_togTab[self.dayTabIndex].toggle:SetIsOn(true)
    self.listDay_togTab[self.childTabIndex].toggle:SetIsOn(true)
    self:SetSliderValue()
    self:RefreshSelectData(false)
end

--顶部数据
function SevenDayVip : SetSliderValue()
    local lastScore = 0
    for i, v in ipairs(self.sevenDayInfo.scoreReward) do
        self.sliders[i]:SetValue(Mathf.Clamp((self.sevenDayInfo.score - lastScore) / (v.needScore - lastScore), 0, 1))
        lastScore = v.needScore
    end
    self._progress_txt:SetText(self.sevenDayInfo.score)
    for i=1,#self.sevenDayInfo.scoreReward do
        if self.pointList[i] and self.sevenDayInfo.score >= self.sevenDayInfo.scoreReward[i].needScore then
            self.pointList[i]:SetActive(true)
        else
            self.pointList[i]:SetActive(false)
        end
    end
end

function SevenDayVip : DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function SevenDayVip : AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

--刷新事件
function SevenDayVip : RefreshTime()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.sevenDayInfo.endTime < curTime then
        self.view.ctrl:Close()
    else

        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(self.sevenDayInfo.endTime - curTime))
    end
end

--刷新toggle状态
function SevenDayVip : RefreshToggle()
    for i = 1, #self.sevenDayInfo.dayActs do
        if self.sevenDayInfo.days < i then
            self.day_togTab[i].lock:SetActive(true)
            self.day_togTab[i].day:SetActive(false)
        else
            self.day_togTab[i].lock:SetActive(false)
            self.day_togTab[i].day:SetActive(true)
        end
    end
end

-- 点天数
function SevenDayVip : ToggleControl(index)
    local isOn = self.day_togTab[index].toggle:GetIsOn()
    if isOn and self.dayTabIndex ~= index then
        self.dayTabIndex = index
        if self.childTabIndex ~= 1 then
            self.childTabIndex = 1
            self.listDay_togTab[1].toggle:SetIsOn(true)
        end
        DataCenter.ActivityListDataManager.sevenDayLastVisitDayTab = {self.dayTabIndex, self.childTabIndex}
        self:RefreshSelectData(true)
    end
end

-- 刷新当前页签
function SevenDayVip : RefreshSelectData(isReset)
    if self.sevenDayInfo == nil then
        return
    end

    for i = 1, 3 do
        if i == self.childTabIndex then
            self.listDay_togTab[i].txt:SetActive(true)
            self.listDay_togTab[i].txtUnselect:SetActive(false)
        else
            self.listDay_togTab[i].txt:SetActive(false)
            self.listDay_togTab[i].txtUnselect:SetActive(true)
        end

        self.listDay_togTab[i].txt:SetLocalText(self.sevenDayInfo.dayActs[self.dayTabIndex][i].type2_text)
        self.listDay_togTab[i].txtUnselect:SetLocalText(self.sevenDayInfo.dayActs[self.dayTabIndex][i].type2_text)
    end

    --for i = 1, 3 do
    --    self.listDay_togTab[i].txt:SetLocalText(self.sevenDayInfo.dayActs[self.dayTabIndex][i].type2_text)
    --    self.listDay_togTab[i].txtUnselect:SetLocalText(self.sevenDayInfo.dayActs[self.dayTabIndex][i].type2_text)
    --end
    self:RefreshTaskData()
    self:RedListDayRefresh()
    if isReset then
        self:ResetTaskList()
    else
        self:RefreshTaskList()
    end
    
end

-- 刷新天数页签红点
function SevenDayVip : RedDayRefresh()
    local redData = self.sevenDayInfo.taskRed
    for i = 1, #redData do
        self.day_togTabRed[i]:SetActive(false)
        for j = 1, #redData[i] do
            if redData[i][j] == 1 then
                self.day_togTabRed[i]:SetActive(true)
                break
            end
        end
    end
end

-- 刷新天数下分页签和箱子红点
function SevenDayVip : RedListDayRefresh()
    local redData = self.sevenDayInfo.taskRed
    for i = 1, 3 do
        if i <= #redData[self.dayTabIndex] then
            self.listDay_togTab[i].red:SetActive(redData[self.dayTabIndex][i] == 1)
        else
            self.listDay_togTab[i].red:SetActive(false)
        end
    end

    local red = self.sevenDayInfo:GetBoxRewardRed()
    self._box_red:SetActive(false)
    self.boxEff:SetActive(red > 0)
    self.boxAnim:Enable(red > 0)
end

function SevenDayVip : OnClickBox()
    UIManager:GetInstance():OpenWindow(UIWindowNames.SevenDayBox, {anim = true, isBlur = true})
end

-- 刷新任务数据
function SevenDayVip : RefreshTaskData()
    local tasks = self.sevenDayInfo.dayActs[self.dayTabIndex][self.childTabIndex].tasks
    self.taskList = self.sevenDayInfo:SortTask(tasks)
end

-- 刷新并重置任务列表
function SevenDayVip : ResetTaskList()
    local pos = self.content.rectTransform.anchoredPosition
    pos.y = 0
    self.content.rectTransform.anchoredPosition = pos
    self:RefreshTaskList()
end

function SevenDayVip : SetAllCellDestroy()
    self.content:RemoveComponents(UIActivitySevenDayItem)
    if self.model ~= nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

-- 刷新（不重置）任务列表
function SevenDayVip : RefreshTaskList()
    if self.isRefreshTaskList then
        self.toRefreshTaskList = true
        return
    end
    self.isRefreshTaskList = true
    
    self.content:RemoveComponents(UIActivitySevenDayItem)
    for i = #self.model,1,-1 do
        if i > #self.taskList then
            self:GameObjectDestroy(self.model[i])
            table.remove(self.model, i)
            table.remove(self.cellList, i)
        end
    end
    if next(self.taskList) then
        for i = 1, table.length(self.taskList) do
            if self.model[i] then
                self.model[i].gameObject.name = i
                local param = self.taskList[i]
                param.flyPos = self.gameObject.transform:Find("RightView/Rect_Top/inteCoin")
                param.day = self.dayTabIndex
                local cell = self.content:AddComponent(UIActivitySevenDayItem, self.model[i].gameObject.name)
                cell:RefreshData(param)
                cell:SetActive(true)
                self.cellList[i] = cell

                if i == #self.taskList then
                    self.isRefreshTaskList = false
                    if self.toRefreshTaskList then
                        self.toRefreshTaskList = false
                        self:RefreshTaskList()
                    end
                end
            else
                self.model[i] = self:GameObjectInstantiateAsync(UIAssets.UIActivitySevenDayItem, function(request)
                    if request.isError then
                        return
                    end
                    local go = request.gameObject;
                    go.gameObject:SetActive(true)
                    go.transform:SetParent(self.content.transform)
                    go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    go.name = i
                    local param = self.taskList[i]
                    param.flyPos = self.gameObject.transform:Find("RightView/Rect_Top/inteCoin")
                    param.day = self.dayTabIndex
                    local cell = self.content:AddComponent(UIActivitySevenDayItem, go.name)
                    cell:RefreshData(param)
                    self.cellList[i] = cell

                    if i == #self.taskList then
                        self.isRefreshTaskList = false
                        if self.toRefreshTaskList then
                            self.toRefreshTaskList = false
                            self:RefreshTaskList()
                        end
                    end
                end)
            end
        end
    end
end

return SevenDayVip