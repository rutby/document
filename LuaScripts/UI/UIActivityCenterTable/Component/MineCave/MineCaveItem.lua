---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/5/6 17:28
---


local MineCaveItem = BaseClass("MineCaveItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local icon_path = "icon"
local ownerContainer_path = "ownerBg"
local owner_path = "ownerBg/owner"
local mineName_path = "nameBg/mineName"
local mineLv_path = "nameBg/mineLv"
local bg_path = "bg"
local time_path = "timeBg"
local timeCd_path = "timeBg/time"
local mask_path = "icon/Image"
local MineType = {FLINT = 4,OIL = 5}

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    if self.delayTimer then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.bgBtnN = self:AddComponent(UIButton, bg_path)
    self.bgBtnN:SetOnClick(function()
        self:OnClickMineCave()
    end)
    self.iconN = self:AddComponent(UIImage, icon_path)
    self.ownerContainerN = self:AddComponent(UIBaseContainer, ownerContainer_path)
    self.ownerN = self:AddComponent(UITextMeshProUGUIEx, owner_path)
    self.mineNameN = self:AddComponent(UITextMeshProUGUIEx, mineName_path)
    self.mineLvN = self:AddComponent(UITextMeshProUGUIEx, mineLv_path)
    self.timeN = self:AddComponent(UIBaseContainer, time_path)
    self.timeCdN = self:AddComponent(UITextMeshProUGUIEx, timeCd_path)
    self.mask = self:AddComponent(UIImage,mask_path)
end

--控件的销毁
local function ComponentDestroy(self)
    self.bgBtnN = nil
    self.iconN = nil
    self.ownerN = nil
    self.mineNameN = nil
    self.mineLvN = nil
end

--变量的定义
local function DataDefine(self)
    self.mineInfo = nil
end

--变量的销毁
local function DataDestroy(self)
    self.mineInfo = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.BarterShopExchangeSucc, self.OnGetBarterSucc)

end

local function OnRemoveListener(self)
    --self:RemoveUIListener(EventId.BarterShopExchangeSucc, self.OnGetBarterSucc)
    base.OnRemoveListener(self)
end

local function SetItem(self, mineInfo)
    self.mineInfo = mineInfo
    self.mineIndex = mineInfo.index
    
    self:RefreshAll()
end

local function RefreshAll(self)
    if not self.mineInfo then
        return
    end

    local conf = DataCenter.MineCaveManager:GetMineConf(self.mineInfo.mineId)
    if conf == nil then
        return
    end
    self.iconN:LoadSprite(string.format("Assets/Main/Sprites/UI/UIMineCave/%s", conf.icon))
    self.mask:LoadSprite(string.format("Assets/Main/Sprites/UI/UIMineCave/%s_mask", conf.icon))
    if string.IsNullOrEmpty(self.mineInfo.ownerUid) then
        self:DelCountDownTimer()
        self.ownerContainerN:SetActive(false)
        --self.ownerN:SetLocalText("302219")
        --self.ownerN:SetColor(Color.New(1, 1, 1, 1))

    else
        self.ownerContainerN:SetActive(true)
        if string.IsNullOrEmpty(self.mineInfo.allianceAbbr) then
            self.ownerN:SetText(self.mineInfo.ownerName)
        else
            self.ownerN:SetText("[" .. self.mineInfo.allianceAbbr .. "]" .. self.mineInfo.ownerName)
        end
        if self.mineInfo.ownerUid == LuaEntry.Player.uid then
            self.ownerN:SetColor(Color.New(136/255, 228/255, 55/255, 1))
        elseif self.mineInfo.allianceId == LuaEntry.Player.allianceId then
            self.ownerN:SetColor(Color.New(70/255, 218/255, 255/255, 1))
        else
            self.ownerN:SetColor(Color.New(255/255, 123/255, 109/255, 1))
        end
        
        self:AddCountDownTimer()
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local remainTime = self.mineInfo.endTime - curTime
        if remainTime > 0 then
            self:RefreshRemainTime()
        end
    end
    --self.mineNameN:SetText(Localization:GetString("302227", Localization:GetString(conf.name), conf.level))
    self.mineLvN:SetText(conf.level)
    self.mineNameN:SetText(Localization:GetString(conf.name))

    if not string.IsNullOrEmpty(self.mineInfo.ownerUid) then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local delayTimeS = math.ceil((self.mineInfo.endTime - curTime) / 1000)
        if delayTimeS <= 0 then
            self.mineInfo.ownerUid = nil
            EventManager:GetInstance():Broadcast(EventId.UpdateMineCaveInfo)
            --DataCenter.MineCaveManager:ResetMineInfo(self.mineInfo.mineId)
        else
            self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
                self.delayTimer = nil
                self.mineInfo.ownerUid = nil
                EventManager:GetInstance():Broadcast(EventId.UpdateMineCaveInfo)
                --DataCenter.MineCaveManager:ResetMineInfo(self.mineInfo.mineId)
            end, delayTimeS)
        end
    end
end


local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.timeN:SetActive(true)
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    if not self.mineInfo then
        self:DelCountDownTimer()
        return
    end
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.mineInfo.endTime - curTime
    if remainTime > 0 then
        self.timeCdN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.timeCdN:SetText("")
        self:RefreshAll()
        self:DelCountDownTimer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
    self.timeN:SetActive(false)
end

local function OnClickMineCave(self)
    local conf = DataCenter.MineCaveManager:GetMineConf(self.mineInfo.mineId)
    if conf.type == MineType.FLINT or conf.type == MineType.OIL then
        local isShowActMine = DataCenter.MineCaveManager:CheckActMineIsShow()
        if not isShowActMine then
            UIUtil.ShowTipsId(373114)
            return
        end
    end
    local strSound = nil
    if conf.rewardType == RewardType.GOODS and conf.rewardId == "200161" then
        strSound = "Effect_Collect_Crystal"
    elseif conf.rewardType == RewardType.MONEY then
        strSound = "effect_coin"
    end
    if not string.IsNullOrEmpty(strSound) then
        SoundUtil.PlayEffect(strSound)
    end
    DataCenter.MineCaveManager:CacheBattleMineInfo(self.mineInfo)
    DataCenter.MineCaveManager:SetAttackMineIndex(self.mineIndex, conf.monsterId)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMineCaveTips,{anim = true,isBlur = true}, 2, self.mineIndex, self.iconN)
end


MineCaveItem.OnCreate = OnCreate
MineCaveItem.OnDestroy = OnDestroy
MineCaveItem.ComponentDefine = ComponentDefine
MineCaveItem.ComponentDestroy = ComponentDestroy
MineCaveItem.DataDefine = DataDefine
MineCaveItem.DataDestroy = DataDestroy
MineCaveItem.OnAddListener = OnAddListener
MineCaveItem.OnRemoveListener = OnRemoveListener

MineCaveItem.SetItem = SetItem
MineCaveItem.RefreshAll = RefreshAll
MineCaveItem.AddCountDownTimer = AddCountDownTimer
MineCaveItem.RefreshRemainTime = RefreshRemainTime
MineCaveItem.DelCountDownTimer = DelCountDownTimer
MineCaveItem.OnClickMineCave = OnClickMineCave

return MineCaveItem