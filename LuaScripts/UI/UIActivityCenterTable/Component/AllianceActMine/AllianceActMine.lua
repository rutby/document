--
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/5/15 12:01
---
local AllianceActMine = BaseClass("AllianceActMine", UIBaseView)
local AllianceActMineTip = require "UI.UIActivityCenterTable.Component.AllianceActMine.AllianceActMineTip"
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local ResourceManager = CS.GameEntry.Resource

local bg_path = "Bg"
local title_path = "Panel/titleBg/Title"
local info_path = "Panel/titleBg/Title/Info"
local time_path = "Panel/Time"
local story_path = "Panel/Story"
--local des_path = "Panel/des"
local rule_list_path = "Panel/ruleList"
local rest_time_path = "Panel/RestTimeBg/RestTime"
local can_place_title_path = "Panel/canPlaceObj/canPlaceTitle"
local select_txt_path = "Panel/canPlaceObj/ruleImg/selectTxt"
local rule_info_path = "Panel/canPlaceObj/ruleInfo"
local tips_path = "Panel/canPlaceObj/tips"
local enter_btn_path = "Panel/Btn_list"
local enter_btn_txt_path = "Panel/Btn_list/btnTxt"
local txt_no_path = "Panel/Text_no"
local limit_txt_path = "Panel/ruleList/limitObj/limitImg/limitTxt"
local limit_info_path = "Panel/ruleList/limitObj/limitImg/limitInfo"
local limit_slider_path = "Panel/ruleList/limitObj/Slider"
local limit_slider_txt_path = "Panel/ruleList/limitObj/totalNum"
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:Refresh()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.bgN = self:AddComponent(UIImage, bg_path)
    self.title_text = self:AddComponent(UIText, title_path)
    self.info_btn = self:AddComponent(UIButton, info_path)
    self.info_btn:SetOnClick(function() self:OnInfoClick() end)
    self.time_text = self:AddComponent(UIText, time_path)
    self.story_text = self:AddComponent(UIText, story_path)
    --self.des = self:AddComponent(UIText, des_path)
    --self.des:SetLocalText(374004)
    self.can_place_title = self:AddComponent(UIText, can_place_title_path)
    self.can_place_title:SetText("")
    self.rule_list = self:AddComponent(UIBaseContainer, rule_list_path)
    self.rest_time_text = self:AddComponent(UIText, rest_time_path)
    self.select_txt = self:AddComponent(UIText, select_txt_path)
    self.select_txt:SetLocalText(374014)
    self.rule_info = self:AddComponent(UIButton, rule_info_path)
    self.rule_info:SetOnClick(function() self:OnRuleInfoClick() end)
    self.limit_info = self:AddComponent(UIButton, limit_info_path)
    self.limit_info:SetOnClick(function() self:OnLimitInfoClick() end)
    self.tips = self:AddComponent(AllianceActMineTip,tips_path)
    self.tips:SetActive(false)
    self.enter_btn = self:AddComponent(UIButton, enter_btn_path)
    self.enter_btn:SetOnClick(function() self:OnEnterClick() end)
    self.enter_btn_txt = self:AddComponent(UIText, enter_btn_txt_path)
    self.limit_txt = self:AddComponent(UIText, limit_txt_path)
    self.limit_txt:SetLocalText(374012)
    self.txt_no = self:AddComponent(UIText, txt_no_path)
    self.txt_no:SetActive(false)
    self.limit_slider_txt = self:AddComponent(UIText, limit_slider_txt_path)
    self.limit_slider = self:AddComponent(UISlider, limit_slider_path)
end

local function ComponentDestroy(self)
end

local function DataDefine(self)
    self.actId = ""
    self.timer = nil
    self.remainCount = 0
    self.useCount = 0
    self.endTime = 0
    self.timer_action = function(temp)
        self:TimerAction()
    end
end

local function DataDestroy(self)
    self.data = nil
    self.endTime = 0
    self:DeleteTimer()
    self.remainCount = nil
    self.useCount = nil
end

local function SetData(self, activityId)
    self.activityId = activityId
    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(activityId)
    self:Refresh()
end

local function Refresh(self)
    if not self.activityId then
        return
    end
    local data = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    self.data = data
    if self.data.type == ActivityEnum.ActivityType.AllianceActMine then
        if LuaEntry.Player:IsInAlliance() then
            SFSNetwork.SendMessage(MsgDefines.GetAllianceActMineMember)
            SFSNetwork.SendMessage(MsgDefines.GetActMinePlunderRes)
        end
        self.story_text:SetLocalText(374003)
        self.bgN:LoadSprite("Assets/Main/TextureEx/UIActivity/UI_Goldmine_bg.png")
    elseif self.data.type == ActivityEnum.ActivityType.EdenAllianceCrossActMine then
        if LuaEntry.Player:IsInAlliance() then
            SFSNetwork.SendMessage(MsgDefines.GetAllianceActMineMember)
            SFSNetwork.SendMessage(MsgDefines.GetActMinePlunderRes)
        end
        self.story_text:SetLocalText(374031)
        self.bgN:LoadSprite("Assets/Main/TextureEx/UIActivity/s5_goldenfight.png")
    else
        if LuaEntry.Player:IsInAlliance() then
            SFSNetwork.SendMessage(MsgDefines.GetActMinePlunderRes)
        end
        self.story_text:SetLocalText(111192)
        self.bgN:LoadSprite("Assets/Main/TextureEx/UIActivity/UI_Goldmine_bg.png")
    end

    local maxNum = LuaEntry.DataConfig:TryGetNum("act_alliance_mine", "k4")
    local percent = 0
    self.limit_slider:SetValue(percent)
    self.limit_slider_txt:SetText("0".."/"..string.GetFormattedSeperatorNum(math.floor(maxNum)))
    
    self.tips:RefreshCondition(self)
    self.title_text:SetLocalText(tonumber(data.name))
    local startTime = math.floor(data.startTime)
    self.endTime = math.floor(data.endTime)
    local startTimeStr = UITimeManager:GetInstance():GetTimeToMD(startTime/1000)
    local endTimeStr = UITimeManager:GetInstance():GetTimeToMD(self.endTime/1000)
    self.time_text:SetText(startTimeStr .. " ~ " .. endTimeStr)

    local serverT = UITimeManager:GetInstance():GetServerTime()
    if serverT > self.endTime then
        self:DeleteTimer()
        self.rest_time_text:SetLocalText(370100)
    else
        self:AddTimer()
        self:TimerAction()
    end
    self:RefreshEdenActMine()
    local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
    if mineInfo ~=nil or (LuaEntry.Player.serverType == ServerType.EDEN_SERVER and self.data.type == ActivityEnum.ActivityType.EdenAllianceActMine) then
        self.txt_no:SetActive(false)
        self.enter_btn:SetActive(true)
        self.enter_btn_txt:SetLocalText(110003)
    else
        if self.data~=nil and self.data.type == ActivityEnum.ActivityType.EdenAllianceActMine then
            self.txt_no:SetLocalText(300759)
        else
            self.txt_no:SetLocalText(300752)
        end
        if LuaEntry.Player:IsInAlliance() then
            if not DataCenter.AllianceBaseDataManager:IsR4orR5() or self.data.type == ActivityEnum.ActivityType.EdenAllianceActMine then
                self.txt_no:SetActive(true)
                self.enter_btn:SetActive(false)
            else
                self.txt_no:SetActive(false)
                self.enter_btn:SetActive(true)
                self.enter_btn_txt:SetLocalText(300751)
            end
        else
            self.txt_no:SetActive(false)
            self.enter_btn:SetActive(true)
            self.enter_btn_txt:SetLocalText(390079)
        end
    end
end

local function OnEnterClick(self)
    if self.data~=nil then
        if self.data.type == ActivityEnum.ActivityType.EdenAllianceActMine then
            if LuaEntry.Player.serverType == ServerType.EDEN_SERVER and LuaEntry.Player:IsInCrossFight() then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                local startTime = LuaEntry.Player:GetEdenCoolDownTime()
                local addTime = 0
                local configTime = LuaEntry.DataConfig:TryGetNum("eden_activity_config", "k1")
                if configTime~=nil then
                    addTime = configTime*1000
                end
                local endTime = addTime+startTime
                if endTime>curTime then
                    UIUtil.ShowTipsId(111211)
                else
                    UIUtil.ShowMessage(Localization:GetString("111209"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                        SFSNetwork.SendMessage(MsgDefines.MoveCrossServer,LuaEntry.Player.crossFightSrcServerId,0, 2)
                        Setting:SetPrivateBool("EdenActViewShow",true)
                        EventManager:GetInstance():Broadcast(EventId.OnSetEdenUI,UISetEdenType.Open)
                    end)
                end
                return
            end
        elseif self.data.type == ActivityEnum.ActivityType.EdenAllianceCrossActMine then
            if LuaEntry.Player.serverType == ServerType.NORMAL then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                local startTime = LuaEntry.Player:GetEdenCoolDownTime()
                local addTime = 0
                local configTime = LuaEntry.DataConfig:TryGetNum("eden_activity_config", "k1")
                if configTime~=nil then
                    addTime = configTime*1000
                end
                local endTime = addTime+startTime
                if endTime>curTime then
                    UIUtil.ShowTipsId(111211)
                else
                    local dataInfo = DataCenter.RobotWarsManager:GetActivityInfo()
                    if dataInfo ~=nil then
                        if dataInfo.edenMatch and dataInfo.edenMatch.targetServer and dataInfo.edenMatch.targetServer ~= 0 then
                            local targetServer = dataInfo.edenMatch.targetServer
                            UIUtil.ShowMessage(Localization:GetString("111086"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                                SFSNetwork.SendMessage(MsgDefines.MoveCrossServer,targetServer,0, 2)
                                Setting:SetPrivateBool("EdenCrossActViewShow",true)
                                EventManager:GetInstance():Broadcast(EventId.OnSetEdenUI,UISetEdenType.Open)
                            end)
                        end
                    end
                end
                return
            end
        end
    end
    
    local mineInfo = DataCenter.AllianceMineManager:GetAllianceActMineInfo()
    if mineInfo ~=nil then
        local targetServerId = mineInfo.curServerId
        local pointId = mineInfo.pointId
        if pointId>0 then
            local position = SceneUtils.TileIndexToWorld(pointId,ForceChangeScene.World)
            position.x = position.x-1
            position.y = position.y
            position.z = position.z-1
            GoToUtil.CloseAllWindows()
            GoToUtil.GotoWorldPos(position,nil,nil,nil,targetServerId)
            WorldArrowManager:GetInstance():ShowArrowEffect(0,position,ArrowType.Building)
        end
    else
        if LuaEntry.Player:IsInAlliance() then
            if not DataCenter.AllianceBaseDataManager:IsR4orR5() then
            elseif self.selectId>0 then
                local pointId = LuaEntry.Player:GetMainWorldPos()
                GoToUtil.CloseAllWindows()
                GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(pointId, ForceChangeScene.World),nil,0.02,function()
                    BuildingUtils.ShowPutAllianceBuild(self.selectId, 0, pointId, PlaceBuildType.Build)
                end,LuaEntry.Player:GetSelfServerId())
            else
                UIUtil.ShowTipsId(374014)
            end
        else
            GoToUtil.CloseAllWindows()
            local arrow = 1
            GoToUtil.GotoOpenView(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true},arrow)
        end
    end
end
local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action, self, false,false,false)
    end

    self.timer:Start()
end

local function TimerAction(self)
    local curTime = math.floor(UITimeManager:GetInstance():GetServerTime())
    local restTime = math.max(self.endTime - curTime, 0)
    if restTime <= 0 then
        self.rest_time_text:SetLocalText(370100)
        self.timer:Stop()
        self.timer = nil
    else
        local restTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(restTime)
        self.rest_time_text:SetText(restTimeStr)
        self.rest_time_text:SetColor(WhiteColor)
    end
end

local function OnInfoClick(self)
    if self.data.type == ActivityEnum.ActivityType.AllianceActMine then
        UIUtil.ShowIntro(Localization:GetString(self.data.name),"", Localization:GetString(374026))
    elseif self.data.type== ActivityEnum.ActivityType.EdenAllianceCrossActMine then
        UIUtil.ShowIntro(Localization:GetString(self.data.name),"", Localization:GetString(374033))
    else
        UIUtil.ShowIntro(Localization:GetString(self.data.name),"", Localization:GetString(111193))
    end
end


local function OnRuleInfoClick(self)
    self.tips:SetActive(true)
    self.tips:OnSetPos()
end

local function HideTips(self)
    self.tips:SetActive(false)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.AllianceActMineResUpdate, self.OnResUpdate)
    self:AddUIListener(EventId.AllianceActMemberUpdate, self.RefreshMember)

end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.AllianceActMineResUpdate, self.OnResUpdate)
    self:RemoveUIListener(EventId.AllianceActMemberUpdate, self.RefreshMember)
    base.OnRemoveListener(self)
end

local function RefreshMember(self)
    local member = DataCenter.AllianceMineManager:GetAllianceActMember()
    self.selectId = 0
    self.selectName = ""
    local selectSpeed = 0
    local list = {BuildingTypes.ALLIANCE_ACT_RES_1,BuildingTypes.ALLIANCE_ACT_RES_2,BuildingTypes.ALLIANCE_ACT_RES_3}
    if self.data~=nil and self.data.type == ActivityEnum.ActivityType.EdenAllianceCrossActMine then
        list = {BuildingTypes.EDEN_CROSS_ALLIANCE_ACT_RES_1,BuildingTypes.EDEN_CROSS_ALLIANCE_ACT_RES_2,BuildingTypes.EDEN_CROSS_ALLIANCE_ACT_RES_3}
    end
    for i=1,#list do
        local buildId = list[i]
        local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(buildId)
        if template~=nil then
            local limitNum = template.limitMember
            if limitNum<=member then
                self.selectId = buildId
                self.selectName = template.name
                selectSpeed = template.collectSpeed
            end
        end
    end
    if self.selectId>0 then
        local num = selectSpeed*60*60
        local str = Localization:GetString("142509").." "..string.GetFormattedSeperatorNum(math.floor(num)).."/H"
        self.can_place_title:SetText(str)
        self.select_txt:SetLocalText(self.selectName)
    else
        self.select_txt:SetLocalText(374014)
        self.can_place_title:SetText("")
    end
end

local function RefreshEdenActMine(self)
    if self.data~=nil and self.data.type == ActivityEnum.ActivityType.EdenAllianceActMine then
        local member = DataCenter.AllianceMemberDataManager:GetAllianceMemberCount()
        self.selectId = 0
        self.selectName = ""
        local selectSpeed = 0
        local list = {BuildingTypes.EDEN_ALLIANCE_ACT_RES_1,BuildingTypes.EDEN_ALLIANCE_ACT_RES_2,BuildingTypes.EDEN_ALLIANCE_ACT_RES_3}
        for i=1,#list do
            local buildId = list[i]
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(buildId)
            if template~=nil then
                local limitNum = template.limitMember
                if limitNum<=member then
                    self.selectId = buildId
                    self.selectName = template.name
                    selectSpeed = template.collectSpeed
                end
            end
        end
        if self.selectId>0 then
            local num = selectSpeed*60*60
            local str = Localization:GetString("142509").." "..string.GetFormattedSeperatorNum(math.floor(num)).."/H"
            self.can_place_title:SetText(str)
            self.select_txt:SetLocalText(self.selectName)
        else
            self.select_txt:SetLocalText(374014)
            self.can_place_title:SetText("")
        end
    end
end

local function OnResUpdate(self)
    local curNum = DataCenter.AllianceMineManager:GetActMineResNum()
    local maxNum = LuaEntry.DataConfig:TryGetNum("act_alliance_mine", "k4")
    local percent = math.min((curNum/math.max(maxNum,1)),1)
    self.limit_slider:SetValue(percent)
    self.limit_slider_txt:SetText(string.GetFormattedSeperatorNum(math.floor(curNum)).."/"..string.GetFormattedSeperatorNum(math.floor(maxNum)))
end

local function OnLimitInfoClick(self)
    UIUtil.ShowIntro(Localization:GetString(self.data.name),"", Localization:GetString(374025))
end

AllianceActMine.OnCreate = OnCreate
AllianceActMine.OnDestroy = OnDestroy
AllianceActMine.OnEnable = OnEnable
AllianceActMine.OnDisable = OnDisable
AllianceActMine.ComponentDefine = ComponentDefine
AllianceActMine.ComponentDestroy = ComponentDestroy
AllianceActMine.DataDefine = DataDefine
AllianceActMine.DataDestroy = DataDestroy
AllianceActMine.OnAddListener = OnAddListener
AllianceActMine.OnRemoveListener = OnRemoveListener
AllianceActMine.RefreshMember = RefreshMember
AllianceActMine.OnResUpdate = OnResUpdate
AllianceActMine.Refresh = Refresh
AllianceActMine.TimerAction = TimerAction
AllianceActMine.OnInfoClick = OnInfoClick
AllianceActMine.SetData = SetData
AllianceActMine.AddTimer =AddTimer
AllianceActMine.DeleteTimer = DeleteTimer
AllianceActMine.OnRuleInfoClick = OnRuleInfoClick
AllianceActMine.HideTips = HideTips
AllianceActMine.OnLimitInfoClick =OnLimitInfoClick
AllianceActMine.OnEnterClick = OnEnterClick
AllianceActMine.RefreshEdenActMine = RefreshEdenActMine
return AllianceActMine