---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/10/21 12:09
---
local ActivityListItem = BaseClass("ActivityListItem",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local this_path = ""
local name1_path = "text1"
local name2_path = "checkText1"
local red_point_path = "RedPoint"
local red_num_path = "RedPoint/RedNum"
local new_dot_path = "NewDot"
local select_img_path = "TypeButton/select"
local btn_path = "TypeButton"
local icon_path = "text1/Icon"
local checkIcon_path = "checkText1/checkIcon"
local toEnd_path = "toEnd"
local toEndTxt_path = "toEnd/Bg/toEndTxt"
local toEndEff_path = "toEnd/toEndEff"
local open_condition_path = "openCondition"
local unselectColor = Color.New(1,0.8901961,0.7921569,1)
local unselectAlpha = 0.7

local function OnCreate(self,id)
    base.OnCreate(self)
    
    -- Data
    self.id = id
    
    -- Component
    self.canvasGroup = self:AddComponent(UICanvasGroup, this_path)
    self.name = self:AddComponent(UITextMeshProUGUIEx, name1_path)
    self.nameSelect = self:AddComponent(UITextMeshProUGUIEx, name2_path)
    self.redPoint = self:AddComponent(UIImage, red_point_path)
    self.redNum = self:AddComponent(UITextMeshProUGUIEx, red_num_path)
    self.newDot = self:AddComponent(UIBaseContainer, new_dot_path)
    self.select = self:AddComponent(UIImage, select_img_path)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.btn:SetOnClick(function ()
        self:OnClick()
    end)
    self.icon = self:AddComponent(UIImage,icon_path)
    self.checkIcon = self:AddComponent(UIImage,checkIcon_path)
    self.toEndN = self:AddComponent(UIBaseContainer, toEnd_path)
    self.toEndTxtN = self:AddComponent(UITextMeshProUGUIEx, toEndTxt_path)
    self.toEndTxtN:SetLocalText(208255)
    self.toEndEffN = self:AddComponent(UIBaseContainer, toEndEff_path)
    self.open_condition = self:AddComponent(UITextMeshProUGUIEx, open_condition_path)
    self.open_condition:SetActive(false)
    --self:SetActive(true)
end
local function OnDestroy(self)
    -- Data
    self.id = nil
    
    -- Component
    self.canvasGroup = nil
    --self.name1 = nil
    self.nameSelect = nil
    self.redPoint = nil
    self.redNum = nil
    self.newDot = nil
    self.select = nil
    self.btn = nil
    self.icon = nil
    self.checkIcon = nil
    
    base.OnDestroy(self)
end

local function SetData(self)
    self.data = self.view.ctrl:GetActivityDataById(self.id)
    if not self.data or not self.data.type then
        return
    end
    self:SetActive(true)
    
    self.name:SetText(self.data.name)
    self.nameSelect:SetText(self.data.name)
    self.open_condition:SetActive(not string.IsNullOrEmpty(self.data.unlockStr))
    if not string.IsNullOrEmpty(self.data.unlockStr) then
        self.open_condition:SetText(self.data.unlockStr)
    end
    local isNew = DataCenter.ActivityListDataManager:IsActivityNew(self.id)
    local isToEnd, showEff = DataCenter.ActivityListDataManager:CheckIfIsToEnd(self.id)
    if isNew then
        self.newDot:SetActive(true)
        self.redPoint:SetActive(false)
        self.toEndN:SetActive(false)
    elseif isToEnd then
        self.newDot:SetActive(false)
        self.toEndN:SetActive(true)
        self.redPoint:SetActive(false)
        self.toEndEffN:SetActive(showEff)
    elseif self.data.canGet > 0 then
        self.newDot:SetActive(false)
        self.toEndN:SetActive(false)
        self.redPoint:SetActive(true)
        self.redNum:SetText(self.data.canGet)
    else
        self.newDot:SetActive(false)
        self.toEndN:SetActive(false)
        self.redPoint:SetActive(false)
    end
    
    local currentId = self.view.ctrl:GetCurrentActivityId()
    if currentId == self.data.id then
        self:SetSelect()
    else
        self:SetUnSelect()
    end
    
    --if self.data.list_icon then
    --    self.icon:LoadSprite(string.format(LoadPath.ActivityIconPath, self.data.list_icon))
    --    self.checkIcon:LoadSprite(string.format(LoadPath.ActivityIconPath, self.data.list_icon))
    --end

end

local function SetUnSelect(self)
    self.select:SetActive(false)
    --self.icon:SetColor(Color.New(1, 1, 1, 0.1))
    self.nameSelect:SetActive(false)
    self.name:SetActive(true)
end

local function SetSelect(self)
    self.select:SetActive(true)
    --self.icon:SetColor(Color.New(1, 1, 1, 1))
    self.nameSelect:SetActive(true)
    self.name:SetActive(false)
end

local function OnClick(self)
    self.view:OnActivityItemClick(self.id)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.MSG_FRESH_SURVIVAL_VIEW_GET, self.RefreshSurvivalItemState)
    self:AddUIListener(EventId.ZONE_CONTRIBUTE_RANK_UPDATE, self.RefreshStrongestCommandItemState)
    self:AddUIListener(EventId.MainTaskSuccess, self.UpdateTaskState)
    self:AddUIListener(EventId.SevenDayGetReward, self.UpdateTaskState)
    self:AddUIListener(EventId.ActRewardState, self.UpdateActSevenDay)
    self:AddUIListener(EventId.RefreshDataPersonalArms, self.RefreshPersonalArms)
    self:AddUIListener(EventId.RefreshDataAllianceArms, self.RefreshAllianceArms)
    self:AddUIListener(EventId.RefreshActivityRedDot, self.SetData)
    self:AddUIListener(EventId.ResourceUpdated, self.SetData)
    self:AddUIListener(EventId.ActBattlePassRed, self.RefreshBattlePass)
    self:AddUIListener(EventId.UpdateGold, self.SetData)
    self:AddUIListener(EventId.OnRefreshSevenLogin, self.RefreshSevenLogin)
    self:AddUIListener(EventId.SeasonWeekCardReward, self.SetData)
    self:AddUIListener(EventId.SeasonWeekCardBuy, self.SetData)
    self:AddUIListener(EventId.OnClaimSeasonRewardSucc, self.RefreshRobotWar)
    self:AddUIListener(EventId.GetMigrateList, self.RefreshRobotWar)
    self:AddUIListener(EventId.OnRefreshMigrateRedPot, self.SetData)
    self:AddUIListener(EventId.StaminaBallData,self.RefreshRobotWar)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MSG_FRESH_SURVIVAL_VIEW_GET, self.RefreshSurvivalItemState)
    self:RemoveUIListener(EventId.ZONE_CONTRIBUTE_RANK_UPDATE, self.RefreshStrongestCommandItemState)
    self:RemoveUIListener(EventId.MainTaskSuccess, self.UpdateTaskState)
    self:RemoveUIListener(EventId.SevenDayGetReward, self.UpdateTaskState)
    self:RemoveUIListener(EventId.ActRewardState, self.UpdateActSevenDay)
    self:RemoveUIListener(EventId.RefreshDataPersonalArms, self.RefreshPersonalArms)
    self:RemoveUIListener(EventId.RefreshDataAllianceArms, self.RefreshAllianceArms)
    self:RemoveUIListener(EventId.RefreshActivityRedDot, self.SetData)
    self:RemoveUIListener(EventId.ResourceUpdated, self.SetData)
    self:RemoveUIListener(EventId.ActBattlePassRed, self.RefreshBattlePass)
    self:RemoveUIListener(EventId.UpdateGold, self.SetData)
    self:RemoveUIListener(EventId.OnRefreshSevenLogin, self.RefreshSevenLogin)
    self:RemoveUIListener(EventId.SeasonWeekCardReward, self.SetData)
    self:RemoveUIListener(EventId.SeasonWeekCardBuy, self.SetData)
    self:RemoveUIListener(EventId.OnClaimSeasonRewardSucc, self.RefreshRobotWar)
    self:RemoveUIListener(EventId.GetMigrateList, self.RefreshRobotWar)
    self:RemoveUIListener(EventId.OnRefreshMigrateRedPot, self.SetData)
    self:RemoveUIListener(EventId.StaminaBallData,self.RefreshRobotWar)
end

local function RefreshSurvivalItemState(self)
    if self.data.type == 29 then
        self:SetData()
    end
end

local function RefreshStrongestCommandItemState(self)
    if self.data.type == 14 then
        self:SetData()
    end
end

local function UpdateTaskState(self)
    if self.data.activityId == ActivityEnum.ActivityType.SevenDay then
        local seventDayinfo = DataCenter.ActivityListDataManager:GetSevenDayList()
        if next(seventDayinfo) then
            seventDayinfo:CheckRedDot()
            self:SetData()
        end
    end
end

local function UpdateActSevenDay(self)
    if self.data.type == ActivityEnum.ActivityType.ActSevenDay then
        local sevenDay = DataCenter.ActSevenDayData:GetInfoByActId(tonumber(self.data.activityId))
        if sevenDay and next(sevenDay) then
            sevenDay:CheckRedDot()
            self:SetData()
        end
    end
end

local function RefreshPersonalArms(self)
    if self.data.type == ActivityEnum.ActivityType.Arms then
        self:SetData()
    end
end

local function RefreshAllianceArms(self)
    if self.data.type == EnumActivity.AllianceCompete.Type then
        self:SetData()
    end
end

local function RefreshBattlePass(self)
    if self.data.type ==  ActivityEnum.ActivityType.BattlePass then
        self:SetData()
    end
end

local function RefreshSevenLogin(self)
    if self.data.type ==  ActivityEnum.ActivityType.ActSevenLogin then
        self:SetData()
    end
end

local function RefreshRobotWar(self)
    if self.data.type ==  EnumActivity.RobotWars.Type then
        self:SetData()
    end
end

ActivityListItem.OnCreate = OnCreate
ActivityListItem.OnDestroy = OnDestroy
ActivityListItem.SetData = SetData
ActivityListItem.SetRedPot = SetRedPot
ActivityListItem.SetUnSelect = SetUnSelect
ActivityListItem.SetSelect = SetSelect
ActivityListItem.OnClick = OnClick
ActivityListItem.OnAddListener = OnAddListener
ActivityListItem.OnRemoveListener = OnRemoveListener
ActivityListItem.RefreshSurvivalItemState = RefreshSurvivalItemState
ActivityListItem.RefreshStrongestCommandItemState =RefreshStrongestCommandItemState
ActivityListItem.UpdateTaskState =UpdateTaskState
ActivityListItem.UpdateActSevenDay = UpdateActSevenDay
ActivityListItem.RefreshPersonalArms = RefreshPersonalArms
ActivityListItem.RefreshAllianceArms = RefreshAllianceArms
ActivityListItem.RefreshBattlePass = RefreshBattlePass
ActivityListItem.RefreshSevenLogin = RefreshSevenLogin
ActivityListItem.RefreshRobotWar = RefreshRobotWar
return ActivityListItem