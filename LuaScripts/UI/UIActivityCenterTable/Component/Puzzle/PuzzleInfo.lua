---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/4/15 19:01
---
local PuzzleInfo = BaseClass("PuzzleInfo", UIBaseContainer)
local base = UIBaseContainer

local task_info_path = "AllStates/TaskInfoBg"
local stage_reward_path = "AllStates/StageReward"
local stage_reward_text_path = "AllStates/StageReward/StageRewardText"

local title_path = "AllStates/TaskInfoBg/TaskName"
local normal_path = "AllStates/TaskInfoBg/TaskInfoNormal"
local task_img_path = "AllStates/TaskInfoBg/TaskInfoNormal/TaskImage"
local task_slider_path = "AllStates/TaskInfoBg/TaskInfoNormal/TaskSlider"
local task_count_text_path = "AllStates/TaskInfoBg/TaskInfoNormal/TaskCount"
local reward_title_path = "AllStates/TaskInfoBg/TaskInfoNormal/RewardTitle"
local reward_desc_path = "AllStates/TaskInfoBg/TaskInfoNormal/RewardDesc"
local task_complete_img_path = "AllStates/TaskInfoBg/TaskInfoNormal/TaskCompleteImage"
local block_num_path = "AllStates/TaskInfoBg/TaskInfoNormal/RewardList/ResA/ResACount"
local reward_btn_path = "AllStates/TaskInfoBg/TaskInfoNormal/BtnList/RewardBtn"
local reward_btn_text_path = "AllStates/TaskInfoBg/TaskInfoNormal/BtnList/RewardBtn/RewardBtnText"
local goto_btn_path = "AllStates/TaskInfoBg/TaskInfoNormal/BtnList/GotoBtn"
local goto_btn_text_path = "AllStates/TaskInfoBg/TaskInfoNormal/BtnList/GotoBtn/GotoBtnText"

local wait_next_path = "AllStates/TaskInfoBg/TaskInfoWaitNext"
local wait_next_hint_text_path = "AllStates/TaskInfoBg/TaskInfoWaitNext/TaskInfoWaitNextHint"
local wait_next_time_text_path = "AllStates/TaskInfoBg/TaskInfoWaitNext/TaskInfoWaitNextTime"

local all_done_path = "AllStates/TaskInfoBg/TaskInfoAllDone"
local all_done_text_path = "AllStates/TaskInfoBg/TaskInfoAllDone/TaskInfoAllDoneText"
local get_server_time_gap = 300000
-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.task_info = self:AddComponent(UIBaseContainer, task_info_path)
    self.stage_reward = self:AddComponent(UIBaseContainer, stage_reward_path)
    self.stage_reward_text = self:AddComponent(UIText, stage_reward_text_path)
    self.stage_reward_text:SetLocalText(372210)
    self.task_info:SetActive(false)
    self.stage_reward:SetActive(false)

    self.titleN = self:AddComponent(UIText, title_path)
    self.normal = self:AddComponent(UIBaseContainer, normal_path)
    self.task_img = self:AddComponent(UIImage, task_img_path)
    self.task_slider = self:AddComponent(UISlider, task_slider_path)
    self.task_count_text = self:AddComponent(UIText, task_count_text_path)
    self.reward_title = self:AddComponent(UIText, reward_title_path)
    self.reward_title:SetLocalText(130065)
    self.task_complete_img = self:AddComponent(UIImage, task_complete_img_path)
    self.block_num = self:AddComponent(UIText, block_num_path)
    self.reward_btn = self:AddComponent(UIButton, reward_btn_path)
    self.reward_btn_text = self:AddComponent(UIText, reward_btn_text_path)
    self.goto_btn = self:AddComponent(UIButton, goto_btn_path)
    self.goto_btn_text = self:AddComponent(UIText, goto_btn_text_path)
    self.reward_btn_text:SetLocalText(170004)
    self.goto_btn_text:SetLocalText(GameDialogDefine.GOTO)
    self.reward_desc = self:AddComponent(UIText, reward_desc_path)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    self.wait_next = self:AddComponent(UIBaseContainer, wait_next_path)
    self.wait_next_hint_text = self:AddComponent(UIText, wait_next_hint_text_path)
    self.wait_next_time_text = self:AddComponent(UIText, wait_next_time_text_path)
    self.wait_next_hint_text:SetLocalText(372205)

    self.all_done = self:AddComponent(UIBaseContainer, all_done_path)
    self.all_done_text = self:AddComponent(UIText, all_done_text_path)
    self.reward_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnRewardClick()
    end)
    self.goto_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnGotoClick()
    end)
end

--控件的销毁
local function ComponentDestroy(self)
    self:DelCountDownTimer()
    self.titleN = nil
    self.normal = nil
    self.task_img = nil
    self.task_slider = nil
    self.task_count_text = nil
    self.reward_title = nil
    self.task_complete_img = nil
    self.block_num = nil
    self.reward_btn = nil
    self.reward_btn_text = nil
    self.goto_btn = nil
    self.goto_btn_text = nil


    self.wait_next = nil
    self.wait_next_hint_text = nil
    
    self.all_done = nil
    self.all_done_text = nil
end

--变量的定义
local function DataDefine(self)
    self.lastGetDataTime = 0
end

--变量的销毁
local function DataDestroy(self)
    self.data = nil
    self.lastGetDataTime = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end


local function SetData(self, data, activityId)
    self.data = data
    self.activityId = activityId
    self:RefreshView()
end

local function RefreshView(self)
    if self.data == nil then
        return
    end
    self.normal:SetActive(false)
    self.reward_btn:SetActive(false)
    self.goto_btn:SetActive(false)
    self.wait_next:SetActive(false)
    self.all_done:SetActive(false)
    self.task_info:SetActive(true)
    self.stage_reward:SetActive(false)
    self.titleN:SetLocalText(100179)

    self:DelCountDownTimer()
    --可以领奖
    if self.data.state == PuzzleTaskState.PuzzleTaskState_Reward_Get then
        if self.data.stageClear then
            if self.data.canGetStageReward then
                self.task_info:SetActive(false)
                self.stage_reward:SetActive(true)
            else
                self.titleN:SetLocalText(372208)
                self.wait_next_hint_text:SetLocalText(372205)
                self.wait_next:SetActive(true)
                self:AddCountDownTimer()
            end
        else
            self.titleN:SetLocalText(372208)
            self.wait_next_hint_text:SetLocalText(372205)
            self.wait_next:SetActive(true)
            self:AddCountDownTimer()
        end
    else
        self.normal:SetActive(true)
        if self.data.state == PuzzleTaskState.PuzzleTaskState_Complete or (self.data.state == PuzzleTaskState.PuzzleTaskState_UnComplete and self.data.num >= self.data.needNum) then
            self.reward_btn:SetActive(true)
            self.task_complete_img:SetActive(true)
            --可以领奖的时候，设置数目相等
            self.data.num = self.data.needNum
        else
            self.goto_btn:SetActive(true)
            self.task_complete_img:SetActive(false)
        end
        local template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), self.data.taskId)
        if template ~= nil then
            self.reward_desc:SetText(DataCenter.QuestTemplateManager:GetDesc(template))
            self.task_img:LoadSprite(string.format(LoadPath.UIMainQuest, template.icon))
        end
        self.task_count_text:SetText(tostring(self.data.num).."/"..math.floor(self.data.needNum))
        local percent = self.data.num/math.max(1, self.data.needNum)
        self.task_slider:SetValue(percent)
        self.block_num:SetText(string.GetFormattedSeperatorNum(self.data.blockNum))
    end
end

local function OnRewardClick(self)
    DataCenter.ActivityPuzzleDataManager:SendMessageGetTaskReward()
end

local function OnGotoClick(self)
    GoToUtil.GoToByQuestId(LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), self.data.taskId))
end

local function AddCountDownTimer(self)
    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
    self:RefreshRemainTime()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.data.nextPuzzleTime - curTime

    if remainTime > 0 then
        self.wait_next_time_text:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.wait_next_time_text:SetText("")
        self:GetDataFromServer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function GetDataFromServer(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime - self.lastGetDataTime > get_server_time_gap then
        self.lastGetDataTime = curTime
        DataCenter.ActivityPuzzleDataManager:SendMessageGetInfo(self.activityId)
    end
end

PuzzleInfo.OnCreate = OnCreate
PuzzleInfo.OnDestroy = OnDestroy
PuzzleInfo.ComponentDefine = ComponentDefine
PuzzleInfo.ComponentDestroy = ComponentDestroy
PuzzleInfo.DataDefine = DataDefine
PuzzleInfo.DataDestroy = DataDestroy
PuzzleInfo.OnAddListener = OnAddListener
PuzzleInfo.OnRemoveListener = OnRemoveListener
PuzzleInfo.SetData = SetData
PuzzleInfo.RefreshView = RefreshView
PuzzleInfo.OnRewardClick = OnRewardClick
PuzzleInfo.OnGotoClick = OnGotoClick
PuzzleInfo.AddCountDownTimer = AddCountDownTimer
PuzzleInfo.RefreshRemainTime = RefreshRemainTime
PuzzleInfo.DelCountDownTimer = DelCountDownTimer
PuzzleInfo.GetDataFromServer = GetDataFromServer

return PuzzleInfo