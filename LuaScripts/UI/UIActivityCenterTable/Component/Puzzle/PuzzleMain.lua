---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/4/15 18:10
---
local PuzzleMain = BaseClass("PuzzleMain", UIBaseView)
local base = UIBaseView
local PuzzleInfo = require "UI.UIActivityCenterTable.Component.Puzzle.PuzzleInfo"
local PuzzleReward = require "UI.UIActivityCenterTable.Component.Puzzle.PuzzleReward"
local Localization = CS.GameEntry.Localization
local title_path = "Panel/title_main"
local intro_btn_path = "Panel/Main/Right/IntroBtn"
local trigger_path = "Panel/trigger"
local activity_time_path = "Panel/Main/Left/timeBg/Time"
--local remainTime_path = "Panel/Main/Left/StageBg/StageTime"
--local remainTxt_path = "Panel/Main/Left/StageBg/StageTxt"
--local remainTimeBg_path = "Panel/Main/Left/StageBg"
local stage_prefix = "Panel/Main/Left/StageList/"

local reward_btn_path = "Panel/Main/Left/RewardBox/RewardBtn"
local reward_progress_path = "Panel/Main/Left/RewardBox/RewardSlider"
local complete_puzzle_num_text_path = "Panel/Main/Left/RewardBox/CompletePuzzleNum"
local complete_stage_num_text_path = "Panel/Main/Left/RewardBox/CompleteStageNum"
local monster_path = "Panel/Main/Left/Monster"
local monster_redPoint_path = "Panel/Main/Left/Monster/RedPointNum"
local monster_redPoint_text_path = "Panel/Main/Left/Monster/RedPointNum/Text"
local monster_redPoint1_path = "Panel/Main/Left/Monster/RedPoint"

local reward_content_path = "Panel/Main/Left/RewardInfo"

local puzzle_info_path = "Panel/Main/Right"

local get_server_time_gap = 3000

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    DataCenter.DailyActivityManager:UpdateActViewHistory(6)
    self:ComponentDestroy()
    self:DataDestroy()
    
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UIText, title_path)
    self.titleN:SetLocalText(372200)
    self.intro_btn = self:AddComponent(UIButton, intro_btn_path)
    self.intro_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:ShowIntro()
    end)
    --self.activity_time = self:AddComponent(UIText, activity_time_path)
    self.reward_btn = self:AddComponent(UIButton, reward_btn_path)
    self.reward_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnRewardClick()
    end)

    self.monster_btn = self:AddComponent(UIButton, monster_path)
    self.monster_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnMonsterClick()
    end)
    self.monster_redPoint = self:AddComponent(UIBaseContainer, monster_redPoint_path)
    self.monster_redPoint:SetActive(false)
    self.monster_redPoint1 = self:AddComponent(UIBaseContainer, monster_redPoint1_path)
    self.monster_redPoint1:SetActive(false)
    self.monster_redPoint_text = self:AddComponent(UIText, monster_redPoint_text_path)

    self.reward_progress = self:AddComponent(UISlider, reward_progress_path)
    self.progressBox_anim = self:AddComponent(UIAnimator, reward_btn_path)
    
    self.complete_puzzle_num_text = self:AddComponent(UIText, complete_puzzle_num_text_path)
    self.complete_stage_num_text = self:AddComponent(UIText, complete_stage_num_text_path)
    local index = 1
    local total = 9
    while index <= total do
        local str = "puzzleImg"..index
        self[str] = self:AddComponent(UIImage, stage_prefix..str)
        index = index + 1
    end

    self.event_trigger = self:AddComponent(UIEventTrigger, trigger_path)
    self.event_trigger:OnPointerUp(function(eventData)
        self:HideRewardList()
    end)
    self:HideRewardList()
end

local function ComponentDestroy(self)
    self:HideRewardList()
    self.titleN = nil
    --self.remainTimeN = nil
    self.contentN = nil
    self.templateN = nil
end

local function DataDefine(self)
    self.lastGetDataTime = 0
    self.activityId = nil
    self.CountDownTimerAction = nil
    self.countDownTimer = nil
    self.isFirstOpen = true
end

local function DataDestroy(self)
    self.lastGetDataTime = nil
    self.activityId = nil
    self.activityId = nil
    self.CountDownTimerAction = nil
    self.countDownTimer = nil
    self.isFirstOpen = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.PuzzleDataUpdate, self.DoWhenDataBack)
    self:AddUIListener(EventId.OnRewardGetPanelClose, self.DoWhenRewardPanelClose)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnRewardGetPanelClose, self.DoWhenRewardPanelClose)
    self:RemoveUIListener(EventId.PuzzleDataUpdate, self.DoWhenDataBack)
    base.OnRemoveListener(self)
end

local function DoWhenDataBack(self)
    self:RefreshAll()
end

local function SetData(self, activityId)
    self.activityId = activityId
    if not self.activityId then
        return
    end
    self:GetDataFromServer()
    self:RefreshAll()
    
end

local function ReInit(self)
    self:RefreshAll()
end

local function RefreshAll(self)
    self.data = self.view.ctrl:GetPuzzleData()
    if self.data == nil then
        return
    end
    if self.data.canCreatePuzzleMonster and self.isFirstOpen == true and not UIManager:GetInstance():IsWindowOpen(UIWindowNames.UIGiftPackageRewardGet) then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPuzzleMonsterCreate, PuzzleMonsterType.Activity)
        self.isFirstOpen = false
    end
    self:RefreshPuzzles()
    self:RefreshPuzzleInfo()
    self:RefreshRewardList(false)
    self:RefreshRewardProgress()
    self:RefreshRedPoint()
end

local function RefreshRedPoint(self)
    self.monster_redPoint:SetActive(false)
    self.monster_redPoint1:SetActive(false)
    self.monster_btn:SetActive(false)
    if self.data.createPuzzleMonsterNum > 0 then
        self.monster_btn:SetActive(true)
        self.monster_redPoint:SetActive(true)
        self.monster_redPoint_text:SetText(tostring(self.data.createPuzzleMonsterNum))
    end
end

local function RefreshPuzzleInfo(self)
    if self.puzzleInfo == nil then
        self.puzzleInfo = self:AddComponent(PuzzleInfo, puzzle_info_path)
    end
    self.puzzleInfo:SetData(self.data.puzzleInfo, self.activityId)
end

local function RefreshRewardProgress(self)
    self.complete_puzzle_num_text:SetText(tostring(self.data.currentStateCompletePuzzle).."/"..math.floor(self.data.puzzleNumPerStage))
    local percent = self.data.currentStateCompletePuzzle / math.max(1, self.data.puzzleNumPerStage)
    self.progressBox_anim:Play(self.data.canGetStageReward and "V_progress_box" or "V_progress_box_idle", 0, 0)
    percent = math.min(1, percent)
    self.reward_progress:SetValue(percent)
end

local function RefreshRewardList(self, open)
    if open then
        if self.rewardInfoPanel == nil then
            self.rewardInfoPanel = self:AddComponent(PuzzleReward, reward_content_path)
        end
        self.rewardInfoPanel:SetActive(true)
    end
    if self.rewardInfoPanel ~= nil and self.rewardInfoPanel:GetActive() then
        self.rewardInfoPanel:SetData(self.data.rewardList)
        self.event_trigger:SetActive(true)
    end
end

local function OnRewardClick(self)
    if self.data == nil then
        return
    end
    if self.data.canGetStageReward then
        DataCenter.ActivityPuzzleDataManager:SendMessageGetPuzzleReward()
    else
        self:RefreshRewardList(true)
    end
end

local function ShowIntro(self)
    local name = DataCenter.ActivityPuzzleDataManager:GetActivityPanelName(self.activityId) 
    if name ~= nil then
        UIUtil.ShowIntro(name, Localization:GetString("100239"), Localization:GetString("372201"))
    end
end

local function GetDataFromServer(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime - self.lastGetDataTime > get_server_time_gap then
        self.lastGetDataTime = curTime
        DataCenter.ActivityPuzzleDataManager:SendMessageGetInfo(self.activityId)
    end
end

local function RefreshPuzzles(self)
    local index = 1
    while index <= self.data.puzzleNumPerStage do
        if self["puzzleImg"..index] ~= nil then
            local completeFlag = (self.data.complete[index] == true)
            self["puzzleImg"..index]:SetActive(completeFlag)
        end
        index = index + 1
    end
end

local function HideRewardList(self)
    self.event_trigger:SetActive(false)
    if self.rewardInfoPanel ~= nil then
        self.rewardInfoPanel:SetActive(false)
    end
end

local function OnMonsterClick(self)
    if self.data.canCreatePuzzleMonster then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPuzzleMonsterCreate, PuzzleMonsterType.Activity)
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPuzzleMonsterList, PuzzleMonsterType.Activity)
    end
end

local function DoWhenRewardPanelClose(self)
    TimerManager:GetInstance():DelayInvoke(function()
        self:RefreshAll()
    end, 0.2)
end

PuzzleMain.OnCreate = OnCreate
PuzzleMain.OnDestroy = OnDestroy
PuzzleMain.ComponentDefine = ComponentDefine
PuzzleMain.ComponentDestroy = ComponentDestroy
PuzzleMain.DataDefine = DataDefine
PuzzleMain.DataDestroy = DataDestroy
PuzzleMain.OnAddListener = OnAddListener
PuzzleMain.OnRemoveListener = OnRemoveListener
PuzzleMain.ShowIntro = ShowIntro

PuzzleMain.GetDataFromServer = GetDataFromServer
PuzzleMain.DoWhenDataBack = DoWhenDataBack
PuzzleMain.RefreshPuzzles = RefreshPuzzles
PuzzleMain.RefreshPuzzleInfo = RefreshPuzzleInfo
PuzzleMain.RefreshRewardProgress = RefreshRewardProgress
PuzzleMain.RefreshRewardList = RefreshRewardList
PuzzleMain.RefreshRedPoint = RefreshRedPoint
PuzzleMain.HideRewardList = HideRewardList
PuzzleMain.OnMonsterClick = OnMonsterClick
PuzzleMain.SetData = SetData
PuzzleMain.RefreshAll = RefreshAll
PuzzleMain.OnRewardClick = OnRewardClick
PuzzleMain.ReInit = ReInit
PuzzleMain.DoWhenRewardPanelClose = DoWhenRewardPanelClose

return PuzzleMain