---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/13 18:58
---SeasonPassChallengeItem.lua

local SeasonPassChallengeItem = BaseClass("SeasonPassChallengeItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UICommonItem = require "UI.UICommonItem.UICommonItem"

local taskIcon_path = "Img_Icon"
local taskBg_path = "item_bg"
local taskName_path = "Txt_Name"
local taskDesc_path = "desc"
local taskProg_path = "Txt_TaskTarget"
local expIcon_path = "Img_integral"
local expCount_path = "Img_integral/Txt_Score"
local rewards_path = "Rect_Reward/reward_"
local claimBtn_path = "Btn_Reward"
local claimBtnTxt_path = "Btn_Reward/Txt_Reward"
local jumpBtn_path = "Btn_Go"
local jumpBtnTxt_path = "Btn_Go/Txt_Go"
local statusTxt_path = "Txt_Completed"
local finishImg_path = "completeMark"
local finishTxt_path = "completeMark/Txt_AcceptReward"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.taskIconN = self:AddComponent(UIImage, taskIcon_path)
    self.taskBgN = self:AddComponent(UIImage, taskBg_path)
    self.taskNameN = self:AddComponent(UIText, taskName_path)
    self.taskDescN = self:AddComponent(UIText, taskDesc_path)
    self.taskProgN = self:AddComponent(UIText, taskProg_path)
    self.expIconN = self:AddComponent(UIImage, expIcon_path)
    self.expCountN = self:AddComponent(UIText, expCount_path)
    self.rewardsTbN = {}
    for i = 1, 2 do
        local newGo = self:AddComponent(UICommonItem, rewards_path .. i)
        table.insert(self.rewardsTbN, newGo)
    end
    self.claimBtnN = self:AddComponent(UIButton, claimBtn_path)
    self.claimBtnN:SetOnClick(function()
        self:OnClickClaimBtn()
    end)
    self.claimBtnTxtN = self:AddComponent(UIText, claimBtnTxt_path)
    self.claimBtnTxtN:SetLocalText(371058)
    self.jumpBtnN = self:AddComponent(UIButton, jumpBtn_path)
    self.jumpBtnN:SetOnClick(function()
        self:OnClickJumpBtn()
    end)
    self.jumpBtnTxtN = self:AddComponent(UIText, jumpBtnTxt_path)
    self.jumpBtnTxtN:SetLocalText(110003)
    self.statusTxtN = self:AddComponent(UIText, statusTxt_path)
    self.statusTxtN:SetActive(false)
    self.finishImgN = self:AddComponent(UIBaseContainer, finishImg_path)
    self.finishTxtN = self:AddComponent(UIText, finishTxt_path)
    self.finishTxtN:SetLocalText(371067)
end

--控件的销毁
local function ComponentDestroy(self)

end

--变量的定义
local function DataDefine(self)
    self.taskInfo = nil
end

--变量的销毁
local function DataDestroy(self)
    self.taskInfo = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.BarterShopExchangeSucc, self.OnGetBarterSucc)

end

local function OnRemoveListener(self)
    --self:RemoveUIListener(EventId.BarterShopExchangeSucc, self.OnGetBarterSucc)
    base.OnRemoveListener(self)
end

local function SetData(self, activityId, taskInfo, flyPos)
    self.activityId = activityId
    self.taskInfo = taskInfo
    self.flyPos = flyPos

    self:RefreshAll()
end

local function RefreshAll(self)
    self.template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), self.taskInfo.taskId)
    local tempIcon = self.template.icon
    if string.startswith(tempIcon, "UIWorldTrend") then
        tempIcon = string.format(LoadPath.UIWorldTrend,self.template.icon)
    else
        tempIcon = string.format(LoadPath.UIMainQuest,self.template.icon)
    end
    self.taskIconN:LoadSprite(tempIcon)
    self.taskNameN:SetLocalText(self.template.name)
    self.taskDescN:SetText(DataCenter.QuestTemplateManager:GetDesc(self.template))
    local target = self.template.para2
    local temp = self.taskInfo.num
    temp = math.min(target, temp)
    local strProcess = "("..string.GetFormattedSeperatorNum(temp).."/"..string.GetFormattedSeperatorNum(target)..")"
    self.taskProgN:SetText(strProcess)
    self.expCountN:SetText(self.taskInfo.exp)
    self:RefreshReward()

    self.jumpBtnN:SetActive(self.taskInfo.state == 0 and self.template.gotype2 ~= QuestGoType.None)
    self.claimBtnN:SetActive(self.taskInfo.state == 1)
    self.finishImgN:SetActive(self.taskInfo.state == 2)
    --if self.taskInfo.state == 2 then
    --    self.statusTxtN:SetActive(true)
    --    self.statusTxtN:SetLocalText(371068)
    --else
    --    self.statusTxtN:SetActive(false)
    --end
end

local function RefreshReward(self)
    local list = self.taskInfo.reward or {}
    for i, v in ipairs(self.rewardsTbN) do
        if i <= #list then
            v:SetActive(true)
            v:ReInit(list[i])
        else
            v:SetActive(false)
        end
    end
end


local function OnClickJumpBtn(self)
    GoToUtil.GoToByQuestId(self.template)
end

local function OnClickClaimBtn(self)
    local rewardTyp= RewardType.BATTLE_PASS
    local flyPos = self.flyPos
    local pic= string.format(LoadPath.ItemPath,"Common_icon_battlecourage")
    UIUtil.DoFly(tonumber(rewardTyp),3,pic,self.expIconN.transform.position,flyPos,40,40)
    DataCenter.SeasonPassManager:ClaimTaskRewardReq(self.activityId, self.taskInfo.taskId)
    --SFSNetwork.SendMessage(MsgDefines.ReceiveBattlePassTaskReward,self.param.actId,self.taskId)
end

SeasonPassChallengeItem.OnCreate = OnCreate
SeasonPassChallengeItem.OnDestroy = OnDestroy
SeasonPassChallengeItem.ComponentDefine = ComponentDefine
SeasonPassChallengeItem.ComponentDestroy = ComponentDestroy
SeasonPassChallengeItem.DataDefine = DataDefine
SeasonPassChallengeItem.DataDestroy = DataDestroy
SeasonPassChallengeItem.OnAddListener = OnAddListener
SeasonPassChallengeItem.OnRemoveListener = OnRemoveListener

SeasonPassChallengeItem.SetData = SetData
SeasonPassChallengeItem.RefreshAll = RefreshAll
SeasonPassChallengeItem.OnClickJumpBtn = OnClickJumpBtn
SeasonPassChallengeItem.OnClickClaimBtn = OnClickClaimBtn
SeasonPassChallengeItem.RefreshReward = RefreshReward

return SeasonPassChallengeItem