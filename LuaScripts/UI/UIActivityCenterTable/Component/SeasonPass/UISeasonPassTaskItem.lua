---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/13 17:49
---UISeasonPassTaskItem.lua

local UISeasonPassTaskItem = BaseClass("UISeasonPassTaskItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UIBPTaskRewardCell = require "UI.UIActivityCenterTable.Component.UIBattlePass.UIBPTaskRewardCell"

local taskIcon_path = "Img_Icon"
local taskBg_path = "item_bg/itemQuality"
local taskName_path = "Txt_Name"
local taskProg_path = "Txt_TaskTarget"
local expIcon_path = "Txt_Score/Img_integral"
local expCount_path = "Txt_Score"
local content_path = "Rect_Reward"
local claimBtn_path = "Btn_Reward"
local claimBtnTxt_path = "Btn_Reward/Txt_Reward"
local jumpBtn_path = "Btn_Go"
local jumpBtnTxt_path = "Btn_Go/Txt_Go"
local statusTxt_path = "Txt_Completed"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    self:SetAllCellDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.taskIconN = self:AddComponent(UIImage, taskIcon_path)
    self.taskBgN = self:AddComponent(UIImage, taskBg_path)
    self.taskNameN = self:AddComponent(UIText, taskName_path)
    self.taskProgN = self:AddComponent(UIText, taskProg_path)
    self.expIconN = self:AddComponent(UIImage, expIcon_path)
    self.expCountN = self:AddComponent(UIText, expCount_path)
    self.contentN = self:AddComponent(UIBaseContainer, content_path)
    self.claimBtnN = self:AddComponent(UIButton, claimBtn_path)
    self.claimBtnN:SetOnClick(function()
        self:OnClickClaimBtn()
    end)
    self.claimBtnTxtN = self:AddComponent(UIText, claimBtnTxt_path)
    self.claimBtnTxtN:SetLocalText(371058)
    self.jumpBtnN = self:AddComponent(UIButton, jumpBtn_path)
    self.jumpBtnN:SetOnClick(function()
        self:OnClickJumpBtn()
    end)
    self.jumpBtnTxtN = self:AddComponent(UIText, jumpBtnTxt_path)
    self.jumpBtnTxtN:SetLocalText(110003)
    self.statusTxtN = self:AddComponent(UIText, statusTxt_path)
end

--控件的销毁
local function ComponentDestroy(self)

end

--变量的定义
local function DataDefine(self)
    self.taskInfo = nil
end

--变量的销毁
local function DataDestroy(self)
    self.taskInfo = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.BarterShopExchangeSucc, self.OnGetBarterSucc)

end

local function OnRemoveListener(self)
    --self:RemoveUIListener(EventId.BarterShopExchangeSucc, self.OnGetBarterSucc)
    base.OnRemoveListener(self)
end

local function SetData(self, activityId, taskInfo, isLocked, flyPos,isEarly)
    self.activityId = activityId
    self.taskInfo = taskInfo
    self.isLocked = isLocked
    self.flyPos = flyPos
    self.isEarly = isEarly
    self:RefreshAll()
end

local function RefreshAll(self)
    self.template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), self.taskInfo.taskId)
    self.taskIconN:LoadSprite(string.format(LoadPath.UIMainQuest,self.template.icon))
    self.taskNameN:SetText(DataCenter.QuestTemplateManager:GetDesc(self.template))
    local target = self.template.para2
    local temp = self.taskInfo.num
    temp = math.min(target, temp)
    local strProcess = "("..string.GetFormattedSeperatorNum(temp).."/"..string.GetFormattedSeperatorNum(target)..")"
    self.taskProgN:SetText(strProcess)
    local passInfo = DataCenter.SeasonPassManager:GetSeasonPassInfo(self.activityId)
    local extraPercent = passInfo:GetExtraExpPercent()
    self.expCountN:SetText(math.modf(self.taskInfo.exp * (1 + extraPercent) + 0.5))
    self:RefreshReward()
    
    
    if self.isLocked then
        if self.isEarly then
            if self.taskInfo.state == 2 then
                self.statusTxtN:SetActive(true)
                self.statusTxtN:SetLocalText(170008)
            else
                self.statusTxtN:SetActive(false)
            end
            self.jumpBtnN:SetActive(self.taskInfo.state == 0 and self.template.gotype2 ~= QuestGoType.None)
            self.claimBtnN:SetActive(self.taskInfo.state == 1)
        else
            self.jumpBtnN:SetActive(false)
            self.claimBtnN:SetActive(false)
            self.statusTxtN:SetActive(true)
            self.statusTxtN:SetLocalText(120050)   
        end
    else
        self.jumpBtnN:SetActive(self.taskInfo.state == 0 and self.template.gotype2 ~= QuestGoType.None)
        self.claimBtnN:SetActive(self.taskInfo.state == 1)
        if self.taskInfo.state == 2 then
            self.statusTxtN:SetActive(true)
            self.statusTxtN:SetLocalText(170008)
        else
            self.statusTxtN:SetActive(false)
        end
    end
end


local function SetAllCellDestroy(self)
    self.contentN:RemoveComponents(UIBPTaskRewardCell)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

local function RefreshReward(self)
    local list = self.taskInfo.reward
    self:SetAllCellDestroy()
    self.contentN:SetActive(true)
    self.model = {}
    if list ~= nil then
        for i = 1, table.length(list) do
            --复制基础prefab，每次循环创建一次
            self.model[i] = self:GameObjectInstantiateAsync(UIAssets.UIBPTaskRewardCell, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.contentN.transform)
                go.transform:Set_localScale(1.1,1.1,1.1)
                go.name ="item" .. i
                local cell = self.contentN:AddComponent(UIBPTaskRewardCell,go.name)
                cell:ReInit(list[i])
            end)
        end
    end
end


local function OnClickJumpBtn(self)
    local template = self.template
    self.view.ctrl:CloseSelf()
    GoToUtil.GoToByQuestId(template)
end

local function OnClickClaimBtn(self)
    local rewardTyp= RewardType.BATTLE_PASS
    local flyPos = self.flyPos
    local pic= string.format(LoadPath.ItemPath,"Common_icon_battlecourage")
    UIUtil.DoFly(tonumber(rewardTyp),3,pic,self.expIconN.transform.position,flyPos,40,40)
    DataCenter.SeasonPassManager:ClaimTaskRewardReq(self.activityId, self.taskInfo.taskId)
    --SFSNetwork.SendMessage(MsgDefines.ReceiveBattlePassTaskReward,self.param.actId,self.taskId)
end

UISeasonPassTaskItem.OnCreate = OnCreate
UISeasonPassTaskItem.OnDestroy = OnDestroy
UISeasonPassTaskItem.ComponentDefine = ComponentDefine
UISeasonPassTaskItem.ComponentDestroy = ComponentDestroy
UISeasonPassTaskItem.DataDefine = DataDefine
UISeasonPassTaskItem.DataDestroy = DataDestroy
UISeasonPassTaskItem.OnAddListener = OnAddListener
UISeasonPassTaskItem.OnRemoveListener = OnRemoveListener

UISeasonPassTaskItem.SetData = SetData
UISeasonPassTaskItem.RefreshAll = RefreshAll
UISeasonPassTaskItem.OnClickJumpBtn = OnClickJumpBtn
UISeasonPassTaskItem.OnClickClaimBtn = OnClickClaimBtn
UISeasonPassTaskItem.SetAllCellDestroy = SetAllCellDestroy
UISeasonPassTaskItem.RefreshReward = RefreshReward

return UISeasonPassTaskItem