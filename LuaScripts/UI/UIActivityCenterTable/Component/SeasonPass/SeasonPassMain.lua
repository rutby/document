---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---SeasonPassMain.lua

local SeasonPassMain = BaseClass("SeasonPassMain", UIBaseView)
local base = UIBaseView
local SeasonPassTaskItem = require "UI.UIActivityCenterTable.Component.SeasonPass.UISeasonPassTaskItem"
local UIBattlePassRewardItem = require "UI.UIActivityCenterTable.Component.UIBattlePass.UIBattlePassRewardItem"
local UIGiftPackagePoint = require "UI.UIGiftPackage.Component.UIGiftPackagePoint"
local SeasonPassPrivilegePanel = require "UI.UIActivityCenterTable.Component.SeasonPass.SeasonPassPrivilegePanel"
local SeasonPassChallengePanel = require "UI.UIActivityCenterTable.Component.SeasonPass.SeasonPassChallengePanel"
local WeekTabItem = require "UI.UIActivityCenterTable.Component.SeasonPass.WeekTabItem"
local Localization = CS.GameEntry.Localization

local time_rect_path = "Root/topBg/NotStarted"
local time_txt_path = "Root/topBg/NotStarted/Txt_Times"
local actIcon_img_path = "Root/bottomBg/TitleBg/Img_ActIcon"
local actName_txt_path = "Root/bottomBg/TitleBg/Txt_ActName"
local lvTitle_txt_path =  "Root/bottomBg/TitleBg/Point/Txt_LvTitle"
local passLv_txt_path = "Root/bottomBg/TitleBg/Point/Txt_PassLv"
local buy_btn_path = "Root/bottomBg/Mask/BoxBg/BuyBtn"
local buy_text_path = "Root/bottomBg/Mask/BoxBg/BuyBtn/BuyText"
local buyTitle_text_path = "Root/bottomBg/Mask/BoxBg/BuyBtn/Txt_BuyTitle"
local progress_img_path = "Root/bottomBg/TitleBg/Progress/Img_Progress"
local progress_txt_path  = "Root/bottomBg/TitleBg/Progress/Txt_Progress"
local pointEffect_rect_path = "Root/bottomBg/TitleBg/Point/Rect_PointEffect"
local add_btn_path = "Root/bottomBg/TitleBg/Btn_Add"
local infoBtn_path = "Root/topBg/BtnIntro"
local topImg_path = "Root/topBg"

local privilegePanel_path = "Root/bottomBg/privilegePanel"
local challengePanel_path = "Root/bottomBg/challengePanel"

local toggle1_path =  "Root/Rect_Group/Toggle1"
local toggle2_path =  "Root/Rect_Group/Toggle2"
local toggle3_path =  "Root/Rect_Group/Toggle3"
local toggle4_path =  "Root/Rect_Group/Toggle4"

local toggleIcon1_1_path =  "Root/Rect_Group/Toggle1/Background/ToggleIcon1_1"
local toggleIcon1_2_path =  "Root/Rect_Group/Toggle1/Background/Checkmark/ToggleIcon1_2"
local toggleIcon2_1_path =  "Root/Rect_Group/Toggle2/Background/ToggleIcon2_1"
local toggleIcon2_2_path =  "Root/Rect_Group/Toggle2/Background/Checkmark/ToggleIcon2_2"
local toggleIcon3_1_path =  "Root/Rect_Group/Toggle3/Background/ToggleIcon3_1"
local toggleIcon3_2_path =  "Root/Rect_Group/Toggle3/Background/Checkmark/ToggleIcon3_2"
local toggleIcon4_1_path =  "Root/Rect_Group/Toggle4/Background/ToggleIcon4_1"
local toggleIcon4_2_path =  "Root/Rect_Group/Toggle4/Background/Checkmark/ToggleIcon4_2"


local scroll_view_path = "Root/bottomBg/Mask/ScrollView"
local scroll_content_path = "Root/bottomBg/Mask/ScrollView/Content"
local nextReward_path = "Root/bottomBg/Mask/NextReward"
local mask_path = "Root/bottomBg/Mask"
local freeReward_txt_path = "Root/bottomBg/Mask/BoxBg/BoxTop/Txt_FreeReward"
local boxLock_img_path = "Root/bottomBg/Mask/BoxBg/BoxLock"
local boxLock_btn_path = "Root/bottomBg/Mask/BoxBg/BoxBottom"
local payReward_txt_path = "Root/bottomBg/Mask/BoxBg/BoxBottom/Txt_PayReward"

local taskPanel_path = "Root/bottomBg/taskPanel"
local weekLockedTip_path = "Root/bottomBg/taskPanel/layout/lockedTip"
local weekUnlocked_path = "Root/bottomBg/taskPanel/layout/unlockTip"
local weekUnlockedTipTxt_path = "Root/bottomBg/taskPanel/layout/unlockTip/unlockTipTxt"
local weekUnlockedTipJumpBtn_path = "Root/bottomBg/taskPanel/layout/unlockTip/unlockTipTxt/unlockTipJump"
local task_view_path = "Root/bottomBg/taskPanel/layout/TaskView"
local task_content_path = "Root/bottomBg/taskPanel/layout/TaskView/Content"

local point_path = "Root/bottomBg/Mask/BoxBg/BuyBtn/UIGiftPackagePoint"

local oneGet_btn_path = "Root/bottomBg/Mask/Btn_List/Btn_OneGet"
local oneGet_txt_path = "Root/bottomBg/Mask/Btn_List/Btn_OneGet/Txt_OneGet"
local oneGetRed_rect_path = "Root/bottomBg/Mask/Btn_List/Btn_OneGet/Rect_OnGetRed"

local extra_rect_path = "Root/bottomBg/Mask/ExtraBg"
local extraBox_btn_path = "Root/bottomBg/Mask/ExtraBg/Btn_ExtraBox"
local extraEffect_rect_path = "Root/bottomBg/Mask/ExtraBg/Btn_ExtraBox/Rect_ExtraEffect"
local extraTitle_txt_path = "Root/bottomBg/Mask/ExtraBg/Txt_ExtraTitle"
local extraInfo_btn_path = "Root/bottomBg/Mask/ExtraBg/Btn_ExtraInfo"
local exchangeNum_txt_path = "Root/bottomBg/Mask/ExtraBg/Txt_ExchangeNum"

local intro_btn_path = "Root/bottomBg/TitleBg/Txt_ActName/Intro"

local title_txt_path = "Root/Txt_Title"

local black_mask_path = "Root/bottomBg/Mask/BlackMask"

local taskTitle_txt_path = "Root/Txt_TaskTitle"
local week_tabs_scroll_view_path = "Root/bottomBg/taskPanel/WeekTabsScrollView"

local GetRewardType =
{
    None = -1,
    Normal = 0,
    Special = 1,
}

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    -- self.black_mask_go.transform:SetParent(self.mask_go.transform)
    --  self.black_mask_go:SetActive(false)
    self:DelWeekUnlockTimer()
    if self.pointEffect ~= nil then
        self.pointEffect:Stop()
        self.pointEffect = nil
    end
    self:ClearScroll()
    self:DeleteTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    DataCenter.SeasonPassManager:ResetWaitingStatus()
end

local function OnDisable(self)
    base.OnDisable(self)
    self.toggle1:SetIsOn(true)
    self.toggle2:SetIsOn(false)
    self.toggle3:SetIsOn(false)
    self.toggle4:SetIsOn(false)
    DataCenter.SeasonPassManager:ResetWaitingStatus()
end

local function ComponentDefine(self)
    self._actName_txt = self:AddComponent(UIText, actName_txt_path)
    self._passLv_txt = self:AddComponent(UIText, passLv_txt_path)
    self.lvTitle_txt = self:AddComponent(UIText,lvTitle_txt_path)
    self.lvTitle_txt:SetLocalText(100082)
    self.buy_btn = self:AddComponent(UIButton, buy_btn_path)
    self.buy_btn:SetOnClick(function()
        self:OnBuyClick()
    end)
    self.buy_text = self:AddComponent(UIText, buy_text_path)
    self._buyTitle_txt = self:AddComponent(UIText,buyTitle_text_path)
    self._buyTitle_txt:SetActive(false)
    --self._buyTitle_txt:SetLocalText(320464)
    self._time_rect = self:AddComponent(UIBaseContainer,time_rect_path)
    self._time_txt = self:AddComponent(UIText,time_txt_path)
    self._progress_img = self:AddComponent(UISlider,progress_img_path)
    self._progress_txt = self:AddComponent(UIText,progress_txt_path)
    self._pointEffect_rect = self:AddComponent(UIBaseContainer,pointEffect_rect_path)
    self._add_btn = self:AddComponent(UIButton,add_btn_path)
    self._add_btn:SetOnClick(function()
        self:OnBuyLvUpClick()
    end)
    self.privilegePanelN = self:AddComponent(SeasonPassPrivilegePanel, privilegePanel_path)
    self.challengePanelN = self:AddComponent(SeasonPassChallengePanel, challengePanel_path)

    self._title_txt = self:AddComponent(UIText,title_txt_path)
    self._actIcon_img = self:AddComponent(UIImage,actIcon_img_path)

    self.toggle1 = self:AddComponent(UIToggle,toggle1_path)
    self.toggle2 = self:AddComponent(UIToggle,toggle2_path)
    self.toggle3 = self:AddComponent(UIToggle,toggle3_path)
    self.toggle4 = self:AddComponent(UIToggle,toggle4_path)

    self.week_tabs_scroll_view = self:AddComponent(UIScrollView, week_tabs_scroll_view_path)
    self.week_tabs_scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCellMoveIn(itemObj, index)
    end)
    self.week_tabs_scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnCellMoveOut(itemObj, index)
    end)

    self.toggleIcon1_1 = self:AddComponent(UIBaseContainer,toggleIcon1_1_path)
    self.toggleIcon1_2 = self:AddComponent(UIBaseContainer,toggleIcon1_2_path)
    self.toggleIcon2_1 = self:AddComponent(UIBaseContainer,toggleIcon2_1_path)
    self.toggleIcon2_2= self:AddComponent(UIBaseContainer,toggleIcon2_2_path)
    self.toggleIcon3_1 = self:AddComponent(UIBaseContainer,toggleIcon3_1_path)
    self.toggleIcon3_2 = self:AddComponent(UIBaseContainer,toggleIcon3_2_path)
    self.toggleIcon4_1 = self:AddComponent(UIBaseContainer,toggleIcon4_1_path)
    self.toggleIcon4_2 = self:AddComponent(UIBaseContainer,toggleIcon4_2_path)

    self.toggle1:SetIsOn(true)
    self.toggle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS(1)
        end
    end)
    self.toggle2:SetIsOn(false)
    self.toggle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS(2)
        end
    end)
    self.toggle3:SetIsOn(false)
    self.toggle3:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS(3)
        end
    end)
    self.toggle4:SetIsOn(false)
    self.toggle4:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS(4)
        end
    end)

    self.toggleList = {}
    for i = 1 ,4 do
        self.toggleList[i] = {}
        self.toggleList[i].img = self:AddComponent(UIImage,"Root/Rect_Group/Toggle"..i.."/RedDot"..i)
        self.toggleList[i].txt = self:AddComponent(UIText,"Root/Rect_Group/Toggle"..i.."/RedDot"..i.."/Txt_RedNum"..i)
    end

    self.scroll_view = self:AddComponent(UIBaseContainer,scroll_view_path)
    self.scroll_content = self:AddComponent(HorizontalInfinityScrollView, scroll_content_path)
    self.mask_go = self:AddComponent(UIBaseContainer, mask_path)

    self.taskPanelN = self:AddComponent(UIBaseContainer, taskPanel_path)
    self.weekLockedTipN = self:AddComponent(UIText, weekLockedTip_path)
    self.weekUnlockedTipN = self:AddComponent(UIBaseContainer, weekUnlocked_path)
    self.weekUnlockedTipTxtN = self:AddComponent(UIText, weekUnlockedTipTxt_path)
    self.weekUnlockedTipTxtN:SetLocalText(320634)
    self.weekUnlockTipJumpBtnN = self:AddComponent(UIButton, weekUnlockedTipJumpBtn_path)
    self.weekUnlockTipJumpBtnN:SetOnClick(function()
        self:OnBuyClick()
    end)
    self.weekUnlockTipJumpTxtN= self:AddComponent(UIText, weekUnlockedTipJumpBtn_path)
    self.weekUnlockTipJumpTxtN:SetLocalText(120204)
    
    self.task_view = self:AddComponent(UIScrollRect,task_view_path)
    self.task_content = self:AddComponent(GridInfinityScrollView, task_content_path)

    self.nextReward = self:AddComponent(UIBattlePassRewardItem,nextReward_path)

    self.point_rect = self:AddComponent(UIGiftPackagePoint,point_path)

    self._oneGet_btn = self:AddComponent(UIButton,oneGet_btn_path)
    self._oneGet_btn:SetOnClick(function()
        self:OneGetClick()
    end)
    self._oneGetRed_rect = self:AddComponent(UIText,oneGetRed_rect_path)
    self._oneGetRed_rect:SetActive(false)
    self._oneGet_txt = self:AddComponent(UIText,oneGet_txt_path)
    self._oneGet_txt:SetLocalText(110132)

    self._extra_rect = self:AddComponent(UIBaseContainer,extra_rect_path)
    self._extraTitle_txt = self:AddComponent(UIText,extraTitle_txt_path)
    self._extraTitle_txt:SetLocalText(130338)
    self._extraInfo_btn = self:AddComponent(UIButton,extraInfo_btn_path)
    self._extraInfo_btn:SetActive(false)
    self._extraInfo_btn:SetOnClick(function()
        self:OnExtraClick()
    end)
    self._extraBox_btn = self:AddComponent(UIButton,extraBox_btn_path)
    self._extraBox_btn:SetOnClick(function()
        self:OnBoxClick()
    end)
    self._extraBox_anim = self:AddComponent(UIAnimator,extraBox_btn_path)
    self._extraEffect_rect = self:AddComponent(UIBaseContainer,extraEffect_rect_path)
    self._exchangeNum_txt = self:AddComponent(UIText,exchangeNum_txt_path)

    self.intro_btn = self:AddComponent(UIButton, intro_btn_path)
    self.intro_btn:SetOnClick(function()
        self:OnIntroClick()
    end)

    self._boxLock_img = self:AddComponent(UIImage,boxLock_img_path)
    self.boxLock_btn = self:AddComponent(UIButton,boxLock_btn_path)
    self.boxLock_btn:SetOnClick(function()
        self:OnClickBoxLock()
    end)
    self._payReward_txt = self:AddComponent(UIText,payReward_txt_path)
    self._payReward_txt:SetLocalText(320437)
    self._payReward_txt:SetActive(false)

    self._freeReward_txt = self:AddComponent(UIText,freeReward_txt_path)
    self._freeReward_txt:SetLocalText(320465)
    self._freeReward_txt:SetActive(false)

    --self.black_mask_go = self:AddComponent(UIBaseContainer, black_mask_path)

    self._taskTitle_txt = self:AddComponent(UIText,taskTitle_txt_path)
    self._taskTitle_txt:SetLocalText(320441)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)
    self.topImgN = self:AddComponent(UIImage, topImg_path)
end

local function ComponentDestroy(self)
    self._actName_txt = nil
    self.buy_btn = nil
    self.buy_text = nil
    self.buy_desc_text = nil
    self.point_rect = nil
    self._boxLock_img = nil
    self.scroll_view = nil
    self.mask_go = nil
    self.black_mask_go = nil
    self._taskTitle_txt = nil
    self.topImgN = nil
end

local function DataDefine(self)
    self.view = nil
    self.specialUnlocked = nil -- 是否已经付费解锁下层奖励
    self.itemList = {}
    self.curLevel = 0
    self.curIndex = 0
    self.packageInfo = nil
    self.nextLv = true
    self.timer = nil
    self.curWeek = 1
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
    self.actEnd = false
    self.toggle = {}
end

local function DataDestroy(self)
    self.view = nil
    self.specialUnlocked = nil
    self.itemList = nil
    self.curLevel = nil
    self.curIndex = nil
    self.listGO = nil
    self.listGOReward = nil
    self.nextReward:SetActive(false)
    self.nextLv = nil
    self.timer_action = nil
    self.actEnd = nil
    self.toggle = {}
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnSeasonPassInfoUpdate, self.RefreshBattlePass)
    self:AddUIListener(EventId.OnSeasonPassTaskRewardUpdate, self.RefreshTaskCell)
    self:AddUIListener(EventId.OnSeasonPassLevelRewardUpdate, self.RefreshRewardCell)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnSeasonPassInfoUpdate, self.RefreshBattlePass)
    self:RemoveUIListener(EventId.OnSeasonPassTaskRewardUpdate, self.RefreshTaskCell)
    self:RemoveUIListener(EventId.OnSeasonPassLevelRewardUpdate, self.RefreshRewardCell)
end

local function SetData(self,activityId)
    self.activityId = activityId
    self.curType = nil
    self.curWeek = 1
    --DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(activityId)
    self:OnRefresh()
end

local function OnRefresh(self)
    DataCenter.SeasonPassManager:ResetWaitingStatus()
    --self.actData = DataCenter.ActBattlePassData:GetInfoByActId(tonumber(self.activityId))
    self.actData = DataCenter.SeasonPassManager:GetSeasonPassInfo(tonumber(self.activityId))

    self._extraEffect_rect:SetActive(false)
    self.lastLv = self.actData.passInfo.level
    self._pointEffect_rect:SetActive(false)
    self:RefreshTop()
    self:RefreshRed()
    self:ShowCells()
    self:ToggleControlBorS(self.curType or 1)
    if self.actData then
        self._boxLock_img:SetActive(self.actData.passInfo.unlock == 0)
    end
end

--顶部更新
local function RefreshTop(self,lastLv)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if actListData then
        local timeTab = {endActTime = actListData.endTime,seasonEndTime = 0}
        local settleTime = DataCenter.SeasonDataManager:GetSeasonSettleTime()
        if settleTime and settleTime > 0 then
            timeTab.seasonEndTime = settleTime
            self._time_rect:SetActive(true)
        else
            self._time_rect:SetActive(false)
        end
        self._actName_txt:SetLocalText(actListData.name)
        self:RefreshTime(timeTab)
        self:AddTimer(timeTab)
    end
    
    --local packageIdList = self.actData:GetPackageIdList()
    
    local week = DataCenter.SeasonPassManager:GetCurWeekIndex(self.activityId)
    local allWeek = 0
    local settleTime = DataCenter.SeasonDataManager:GetSeasonSettleTime()
    if settleTime and settleTime > 0 then
        allWeek = DataCenter.SeasonPassManager:GetSeasonAllWeek(self.activityId,settleTime)
    end
    if allWeek ~= 0 and week >= allWeek then
        self.weekUnlockedTipN:SetActive(self.actData and self.actData.passInfo.unlock < 2)
    else
        self.weekUnlockedTipN:SetActive(self.curWeek <= week and self.actData.passInfo.unlock < 2)
    end
    
    if self.actData.passInfo.unlock == 0 then
        self.buy_btn:SetActive(true)
        self.buy_text:SetLocalText(130056)
    elseif self.actData.passInfo.unlock == 1 then
        self.buy_btn:SetActive(true)
        self.buy_text:SetLocalText(129278)
    else
        self.buy_btn:SetActive(false)
    end
    --if not packageIdList then
    --    self.buy_btn:SetActive(false)
    --else
    --end
    self.point_rect:SetActive(false)
    --self.packageInfo = GiftPackageData.get(self.actData:GetExchangeId())
    --if self.packageInfo and self.actData.battlePass.unlock == 0 then
    --    self.buy_btn:SetActive(true)
    --    local price = DataCenter.PayManager:GetDollarText(self.packageInfo:getPrice(), self.packageInfo:getProductID())
    --    self.buy_text:SetText(price)
    --    self.point_rect:RefreshPoint(self.packageInfo)
    --else
    --    self.buy_btn:SetActive(false)
    --end
    local maxLv = self.actData.levelInfo[#self.actData.levelInfo].level
    local template = DataCenter.ActBattlePassTemplateManager:GetTemplateById(toInt(self.activityId),self.actData.passInfo.level)
    local lvUpExp = 100
    if self.actData.passInfo.level >= maxLv then
        lvUpExp = self.actData.extraExp
    else
        lvUpExp = template.levelUpExp
    end
    self._progress_txt:SetLocalText(150033,self.actData.passInfo.exp, lvUpExp)
    
    self.highReward = DataCenter.ActBattlePassTemplateManager:GetTemplateHighRewardById(toInt(self.activityId))

    TimerManager:GetInstance():DelayInvoke(function()
        self.expPackageInfo = nil
        local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
        if activityInfo then
            local para3Arr = string.split(activityInfo.para3, ";")
            for i, v in ipairs(para3Arr) do
                local packageInfo = GiftPackageData.get(v)
                if packageInfo and (not packageInfo:isBought()) then
                    self.expPackageInfo = packageInfo
                    break
                end
            end
        end
        if not self.expPackageInfo then
            self._add_btn:SetActive(false)
        else
            local maxLv = self.actData.levelInfo[#self.actData.levelInfo].level
            if self.actData.passInfo.level >= maxLv then
                self._add_btn:SetActive(false)
            else
                self._add_btn:SetActive(true)
            end
        end
    end, 0.5)
    
    --进度
    if lastLv then
        local isLvUp = 0
        isLvUp = (self.actData.passInfo.level - lastLv)
        if isLvUp > 0 then  --升级了
            self._progress_img:DOValue(1,0.3,function()
                self._progress_img:SetValue(0)
                self._progress_img:DOValue(self.actData.passInfo.exp/lvUpExp,0.3,function()
                    self._passLv_txt:SetText(self.actData.passInfo.level)
                    self._pointEffect_rect:SetActive(true)
                    self.pointEffect =  TimerManager:GetInstance():DelayInvoke(function()
                        self._pointEffect_rect:SetActive(false)
                    end, 0.5)
                end)
            end)
        else
            self._progress_img:DOValue(self.actData.passInfo.exp/lvUpExp,0.3,function()
                self._passLv_txt:SetText(self.actData.passInfo.level)
            end)
        end
        self.lastLv = self.actData.passInfo.level
    else
        local lv = self._passLv_txt:GetText()
        if lv ~= "" then
            if tonumber(lv) < self.actData.passInfo.level then
                self._pointEffect_rect:SetActive(true)
                self.pointEffect =  TimerManager:GetInstance():DelayInvoke(function()
                    self._pointEffect_rect:SetActive(false)
                end, 0.5)
            end
        end
        self._passLv_txt:SetText(self.actData.passInfo.level)
        self._progress_img:SetValue(self.actData.passInfo.exp/lvUpExp)
    end
    
    local strBanner = "UIbattlepass_banner"
    if not string.IsNullOrEmpty(actListData.activity_pic) then
        strBanner = actListData.activity_pic
    end
    self.topImgN:LoadSprite(string.format("Assets/Main/TextureEx/UIActivity/%s.png", strBanner))
end

local function AddTimer(self,actListData)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action ,actListData , false,false,false)
    end
    self.timer:Start()
end

local function RefreshTime(self,actListData)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if actListData.endActTime < curTime then
        self:DeleteTimer()
        self.actEnd = true
    else
        self.actEnd = false
    end
    if actListData.seasonEndTime and actListData.seasonEndTime > 0 then
        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(actListData.seasonEndTime - curTime))
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function GetActState(self)
    return self.actEnd
end

--红点更新
local function RefreshRed(self)
    for i = 1 ,4 do
        local num = self.actData:GetRedNum(i)
        if num > 0 then
            self.toggleList[i].img:SetActive(true)
            self.toggleList[i].txt:SetText(num)
        else
            self.toggleList[i].img:SetActive(false)
        end
    end
    
    for k,v in pairs(self.toggle) do
        v:RefreshRed(self:IsTabShowRed(k))
    end
    
    local num = DataCenter.SeasonPassManager:GetPassLevelRedCount(self.activityId)
    self._oneGet_btn:SetActive(num > 0)
    self._oneGetRed_rect:SetActive(num > 0)
end

--type 1周任务   2挑战任务
local function InitTask(self,type)
    if self.listGO then
        return
    end
    self.listGO = {}
    local bindFunc1 = BindCallback(self, self.OnInitScroll)
    local bindFunc2 = BindCallback(self, self.OnUpdateScroll)
    local bindFunc3 = BindCallback(self, self.OnDestroyScrollItem)
    self.task_content:Init(bindFunc1,bindFunc2, bindFunc3)
    self.taskList = self.actData:GetTaskSorted(type, self.curWeek)
    self.task_content:SetItemCount(#self.taskList)
end

local function OnInitScroll(self,go,index)
    local item = self.task_view:AddComponent(SeasonPassTaskItem, go)
    self.listGO[go] = item
end

local function OnUpdateScroll(self,go,index)
    local sub = self.taskList[index + 1]
    local cellItem = self.listGO[go]
    if sub == nil then
        return
    end
    local week = DataCenter.SeasonPassManager:GetCurWeekIndex(self.activityId)
    cellItem:SetData(self.activityId, self.taskList[index + 1], self.curWeek > week, self._actIcon_img.transform.position,self.isEarly)
end

local function OnDestroyScrollItem(self,go, index)

end

--奖励展示
local function ShowCells(self)
    self.scrollDelta = self.scroll_content:GetSizeDelta()
    --是否满级
    local nextTemplate = DataCenter.ActBattlePassTemplateManager:GetTemplateById(toInt(self.activityId),self.actData.passInfo.level+1)
    if nextTemplate then
        self.nextLv = true
        --self._add_btn:SetActive(true)
        self.nextReward:SetActive(true)
        self._extra_rect:SetActive(false)
        self._exchangeNum_txt:SetActive(false)
    else
        self.nextLv = false
        --self._add_btn:SetActive(false)
        self.nextReward:SetActive(false)
        self._extra_rect:SetActive(true)
        self:CheckExtraBox()
        if self.actData.passInfo.unlock ~= 0 then
            self._exchangeNum_txt:SetActive(true)
            self._exchangeNum_txt:SetLocalText(150033,self.actData.passInfo.exp,self.actData.extraExp)
        else
            self._exchangeNum_txt:SetActive(false)
        end
    end
    if self.listGOReward then
        return
    end
    self.listGOReward = {}
    local bindFunc1 = BindCallback(self, self.OnInitRewardScroll)
    local bindFunc2 = BindCallback(self, self.OnUpdateRewardScroll)
    local bindFunc3 = BindCallback(self, self.OnDestroyRewardScrollItem)
    self.scroll_content:Init(bindFunc1,bindFunc2, bindFunc3)
    local count = #self.actData.levelInfo
    self.scroll_content:SetItemCount(count)
    local index = self.actData:CheckCurStageRewardLv()-- DataCenter.ActBattlePassData:CheckCurGetReward(tonumber(self.activityId))
    --检查是否有可领取奖励
    self.scroll_content:MoveItemByIndex(index-1,0)

    --self:SetBlackPos(nextTemplate)
end
--
--local function SetBlackPos(self,nextTemplate)
--    if nextTemplate then
--        self.black_mask_go.transform:SetParent(self.scroll_content.transform)
--        local width = 130*(#self.actData.stateInfo-self.actData.battlePass.level)
--        self.black_mask_go.rectTransform.sizeDelta = Vector2.New(width, 463)
--        self.black_mask_go.transform:SetAsLastSibling()
--        --SetAsLastSibling  SetAsFirstSibling
--        self.black_mask_go:SetAnchoredPositionXY(0,0)
--        self.black_mask_go:SetActive(true)
--    else
--        self.black_mask_go:SetActive(false)
--    end
--end

local function OnInitRewardScroll(self,go,index)
    local item = self.scroll_view:AddComponent(UIBattlePassRewardItem, go)
    self.listGOReward[go] = item
end

local function OnUpdateRewardScroll(self,go,index)
    index = index + 1
    if index <= #self.actData.levelInfo then
        local item = self.listGOReward[go]
        -- data
        local data = self.actData.levelInfo[index]
        data.isFirst = (index == 1)
        data.isLast = (index == #self.actData.levelInfo)
        if index == 1 then
            data.pro = self.actData.passInfo.level / data.level
            data.showBallLeft = false
            if self.actData.passInfo.level < data.level then
                self.curIndex = index
            end
        else
            local lastData = self.actData.levelInfo[index - 1]
            data.pro = (self.actData.passInfo.level - lastData.level) / (data.level - lastData.level)
            data.showBallLeft = self.actData.passInfo.level >= lastData.level
            if self.actData.passInfo.level < data.level and self.actData.passInfo.level >= lastData.level then
                self.curIndex = index
            end
        end
        data.showBallRight = self.actData.passInfo.level >= data.level
        data.curLv = self.actData.passInfo.level
        data.unlock = self.actData.passInfo.unlock == 0 and 0 or 1
        data.actId = toInt(self.activityId)
        data.callBack = function() return self:GetActState() end
        data.claimCallback = function(level, type)
            DataCenter.SeasonPassManager:ClaimPassLevelRewardReq(self.activityId, level, type)
        end
        item:SetData(data, self)
        self.itemList[index] = item

        if self.nextLv then
            for i = 1 ,#self.highReward do
                if index < self.highReward[i].level and index >= 5 then
                    if index >= (DataCenter.ActBattlePassTemplateManager:GetActMaxLv(toInt(self.activityId)) - 1) then
                        self.scroll_view:SetSizeDelta({x = 551,y = self.scrollDelta.y})
                        self._extra_rect:SetActive(true)
                        self.nextReward:SetActive(false)
                    else
                        self.scroll_view:SetSizeDelta({x = 638,y = self.scrollDelta.y})
                        self._extra_rect:SetActive(false)
                        self.nextReward:SetActive(true)
                    end
                    local info = self.actData.levelInfo[self.highReward[i].level]
                    info.isFirst = false
                    info.isLast = (i == #self.actData.levelInfo)
                    info.curLv = self.actData.passInfo.level
                    info.unlock = self.actData.passInfo.unlock == 0 and 0 or 1
                    info.actId = toInt(self.activityId)
                    info.callBack = function() return self:GetActState() end
                    if self.curNextIndex then
                        if self.curNextIndex - index > 5 and self.curNextIndex - index < 10 then
                            return
                        end
                    end
                    info.claimCallback = function(level, type)
                        DataCenter.SeasonPassManager:ClaimPassLevelRewardReq(self.activityId, level, type)
                    end
                    self.curNextIndex = self.highReward[i].level
                    self.nextReward:SetData(info, self,true)
                    break
                end
            end
        end
    end
end

local function OnDestroyRewardScrollItem(self,go, index)

end

--页签切换
local function ToggleControlBorS(self,index)
    if self.curType == index then
        return
    end
    self.curType = index

    self.toggleIcon1_1:SetActive(true)
    self.toggleIcon1_2:SetActive(false)
    self.toggleIcon2_1:SetActive(true)
    self.toggleIcon2_2:SetActive(false)
    self.toggleIcon3_1:SetActive(true)
    self.toggleIcon3_2:SetActive(false)
    self.toggleIcon4_1:SetActive(true)
    self.toggleIcon4_2:SetActive(false)
    self.taskPanelN:SetActive(false)
    --self.task_view:SetActive(false)
    self.mask_go:SetActive(false)
    --self._oneGet_btn:SetActive(false)
    self._taskTitle_txt:SetActive(false)
    self.privilegePanelN:SetActive(false)
    self.challengePanelN:SetActive(false)


    if index == 1 then          --奖励
        self.mask_go:SetActive(true)
        self.toggleIcon1_1:SetActive(true)
        self.taskIndex = 0
        self._title_txt:SetLocalText(130065)
        self.toggleIcon1_1:SetActive(false)
        self.toggleIcon1_2:SetActive(true)
    elseif index == 2 then
        self.curWeek = DataCenter.SeasonPassManager:GetCurWeekIndex(self.activityId)
        self.taskPanelN:SetActive(true)
        --self.task_view:SetActive(true)
        self.taskIndex = 1
        self.taskList = self.actData:GetTaskSorted(1, self.curWeek)
        self:InitTask(1)
        self.task_content:SetItemCount(#self.taskList)
        self._title_txt:SetLocalText(170015)
        self.toggleIcon2_1:SetActive(false)
        self.toggleIcon2_2:SetActive(true)
        
        local totalWeek = table.count(self.actData.weekTaskDic)
        local defaultTab = 1
        if self.curWeek <= totalWeek then
            defaultTab = self.curWeek
        else
            for i = 1, totalWeek , 1 do
                if self:IsTabShowRed(i) then
                    defaultTab = i
                    break
                end
            end
        end
        self:SelectWeekTab(defaultTab)
        self:ShowWeekCells()
    elseif index == 3 then
        --self.taskIndex = 2
        --self.taskList = self.actData:GetTaskSorted(2)
        --self:InitTask(2)
        --self.task_content:SetItemCount(#self.taskList)
        self.challengePanelN:SetActive(true)
        self.challengePanelN:ShowPanel(self.activityId, self._actIcon_img.transform.position)
        self._title_txt:SetLocalText(320430)
        self.toggleIcon3_1:SetActive(false)
        self.toggleIcon3_2:SetActive(true)
    elseif index == 4 then      --特权
        self.taskIndex = 0
        self._title_txt:SetLocalText(320430)
        self.toggleIcon4_1:SetActive(false)
        self.toggleIcon4_2:SetActive(true)
        self.privilegePanelN:SetActive(true)
        self.privilegePanelN:ShowPanel(tonumber(self.activityId))
    end
end

--额外奖励盒子动画
local function CheckExtraBox(self)
    if self.actData.passInfo.exp - self.actData.extraExp >= 0 then
        self._extraBox_anim:Play("V_ui_extrabox_",0,0)
        self._extraEffect_rect:SetActive(true)
        return
    end
    self._extraBox_anim:Play("V_ui_extrabox_default",0,0)
    self._extraEffect_rect:SetActive(false)
end

--{{{事件更新
local function RefreshBattlePass(self)
    self.actData = DataCenter.SeasonPassManager:GetSeasonPassInfo(tonumber(self.activityId))
    --是否满级
    local nextTemplate = DataCenter.ActBattlePassTemplateManager:GetTemplateById(toInt(self.activityId),self.actData.passInfo.level+1)
    if nextTemplate then
        self.nextLv = true
        self.nextReward:SetActive(true)
        --self._add_btn:SetActive(true)
        self._extra_rect:SetActive(false)
        self._exchangeNum_txt:SetActive(false)
    else
        self.nextLv = false
        --self._add_btn:SetActive(false)
        self.nextReward:SetActive(false)
        self._extra_rect:SetActive(true)
        self:CheckExtraBox()
        if self.actData.passInfo.unlock > 0 then
            self._exchangeNum_txt:SetActive(true)
            self._exchangeNum_txt:SetLocalText(150033,self.actData.passInfo.exp,self.actData.extraExp)
        else
            self._exchangeNum_txt:SetActive(false)
        end
        self.scroll_view:SetSizeDelta({x = 551,y = self.scrollDelta.y})
    end
    self:RefreshTop()
    if self.taskIndex == 0 then
        self.taskList = {}
    else
        self.taskList = self.actData:GetTaskSorted(self.taskIndex, self.curWeek)
    end
    if self.listGO then
        self.task_content:ForceUpdate()
    end
    self.scroll_content:ForceUpdate()
    self:RefreshRed()
    self._boxLock_img:SetActive(self.actData.passInfo.unlock == 0)

    --self:SetBlackPos(nextTemplate)
end

local function SelectWeekTab(self, tabIndex)
    if tabIndex ~= self.curWeek then
        self.task_view:SetVerticalNormalizedPosition(1)
    end
    self:SetToggleTabSelect(self.curWeek, false)
    self.curWeek = tabIndex
    self:SetToggleTabSelect(self.curWeek, true)
    local unlockedWeek = DataCenter.SeasonPassManager:GetCurWeekIndex(self.activityId)
    local allWeek = 0
    local settleTime = DataCenter.SeasonDataManager:GetSeasonSettleTime()
    if settleTime and settleTime > 0 then
        allWeek = DataCenter.SeasonPassManager:GetSeasonAllWeek(self.activityId,settleTime)
    end
    self.isEarly = false
    if tabIndex <= unlockedWeek then
        self.weekLockedTipN:SetActive(false)
        self.weekUnlockedTipN:SetActive(self.actData and self.actData.passInfo.unlock < 2)
    else
        if allWeek ~= 0 and unlockedWeek < allWeek then
            self.weekUnlockedTipN:SetActive(false)
            self.weekLockedTipN:SetActive(true)
            if tabIndex >= allWeek then
                self.endTime = DataCenter.SeasonPassManager:GetWeekUnlockTime(self.activityId, allWeek)
            else
                self.endTime = DataCenter.SeasonPassManager:GetWeekUnlockTime(self.activityId, tabIndex)
            end
            self:AddWeekUnlockTimer()
            self:RefreshWeekUnlockTime()
        elseif allWeek ~= 0 and unlockedWeek >= allWeek then
            self.isEarly = true
            self.weekLockedTipN:SetActive(false)
            self.weekUnlockedTipN:SetActive(self.actData and self.actData.passInfo.unlock < 2)
        else
            self.weekUnlockedTipN:SetActive(false)
            self.weekLockedTipN:SetActive(true)
            self.endTime = DataCenter.SeasonPassManager:GetWeekUnlockTime(self.activityId, tabIndex)
            self:AddWeekUnlockTimer()
            self:RefreshWeekUnlockTime()
        end
    end
    self:RefreshTaskCell()
end

local function RefreshRewardCell(self)
    self.actData = DataCenter.SeasonPassManager:GetSeasonPassInfo(tonumber(self.activityId))
    self.scroll_content:ForceUpdate()
    self:RefreshRed()
end

local function RefreshTaskCell(self)
    self.actData = DataCenter.SeasonPassManager:GetSeasonPassInfo(tonumber(self.activityId))
    if self.actData and next(self.actData) then
        --是否满级
        local nextTemplate = DataCenter.ActBattlePassTemplateManager:GetTemplateById(toInt(self.activityId),self.actData.passInfo.level+1)
        if nextTemplate then
            self.nextLv = true
            --self._add_btn:SetActive(true)
            self.nextReward:SetActive(true)
            self._extra_rect:SetActive(false)
            self._exchangeNum_txt:SetActive(false)
        else
            self.nextLv = false
            --self._add_btn:SetActive(false)
            self.nextReward:SetActive(false)
            self._extra_rect:SetActive(true)
            self:CheckExtraBox()
            if self.actData.passInfo.unlock > 0 then
                self._exchangeNum_txt:SetActive(true)
                self._exchangeNum_txt:SetLocalText(150033,self.actData.passInfo.exp,self.actData.extraExp)
            else
                self._exchangeNum_txt:SetActive(false)
            end
        end
        self:RefreshTop(self.lastLv)
        if self.taskIndex == 0 then
            self.taskList = {}
        else
            self.taskList = self.actData:GetTaskSorted(self.taskIndex, self.curWeek)
        end
        if self.listGO then
            self.task_content:SetItemCount(#self.taskList)
            self.task_content:ForceUpdate()
        end
        self.scroll_content:ForceUpdate()
        self:RefreshRed()
        self:CheckExtraBox()
        self:RefreshTop()
    end
    --self:SetBlackPos(nextTemplate)
end

local function OnBuyPackageSucc(self)
    -- self.actData = DataCenter.ActBattlePassData:GetInfoByActId(tonumber(self.activityId))
end
--}}}

local function ClearScroll(self)
    self.scroll_view:RemoveComponents(SeasonPassTaskItem)
    self.scroll_content:DestroyChildNode()
    self.task_view:RemoveComponents(SeasonPassTaskItem)
    self.task_content:DestroyChildNode()
end

--购买升级
local function OnBuyLvUpClick(self)
    if self.actEnd then
        UIUtil.ShowTipsId(370100)
        return
    end
    
    if self.expPackageInfo then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIScrollPack, {anim = true}, self.expPackageInfo)
    end
end

--一键领取
local function OneGetClick(self)
    if self.actEnd then
        UIUtil.ShowTipsId(370100)
        return
    end
    
    local num = DataCenter.SeasonPassManager:GetPassLevelRedCount(self.activityId)
    if num > 0 then
        DataCenter.SeasonPassManager:ClaimAllLevelRewardsReq(tonumber(self.activityId))
    else
        UIUtil.ShowTipsId(320446)
    end
end

--购买战令
local function OnBuyClick(self)
    if self.actEnd then
        UIUtil.ShowTipsId(370100)
        return
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonPassPackage, self.activityId)
end

--额外奖励
local function OnBoxClick(self)
    --根据当前已有的经验计算是否能领
    if self.actData.battlePass.exp - self.actData.extraExp >= 0 then
        DataCenter.SeasonPassManager:ClaimExtraRewardReq(toInt(self.activityId))
        return
    end

    local x = self._extraBox_btn.transform.position.x
    local y = self._extraBox_btn.transform.position.y
    local offset = 150
    --如果没有领奖并且总次数大于需要次数
    local isUp = false
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityRewardTip,Localization:GetString("320630",self.actData.extraExp),EnumActivity.SeasonPass.Type,x,y,isUp,nil,offset,tonumber(self.activityId))
end

local function OnExtraClick(self)
    local param = {}
    param.type = "desc"
    param.desc = Localization:GetString("320448",self.actData.extraExp)
    param["alignObject"] = self._extraInfo_btn
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIItemTips,{anim = true}, param)
end

--活动说明
local function OnIntroClick(self)
    local maxLv = DataCenter.ActBattlePassTemplateManager:GetActMaxLv(toInt(self.activityId))
    UIUtil.ShowIntro(Localization:GetString("320429"), Localization:GetString("100239"),Localization:GetString("320432",maxLv))
end

--弹窗礼包
local function OnClickBoxLock(self)
    if self.actData then
        if self.actData.battlePass.unlock == 0 then
            --UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattlePassGiftPackagePopUp, tonumber(self.activityId))
            UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonPassGiftPackagePopUp, tonumber(self.activityId))
        end
    end
end

local function AddWeekUnlockTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshWeekUnlockTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshWeekUnlockTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime > 0 then
        self.weekLockedTipN:SetText(Localization:GetString("302011", UITimeManager:GetInstance():MilliSecondToFmtString(remainTime)))
    else
        self.weekLockedTipN:SetText("")
        self:DelWeekUnlockTimer()
    end
end

local function DelWeekUnlockTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function OnClickInfoBtn(self)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    if actListData.para4 then
        local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
        local str = string.split(actListData.para4,"|")
        for i = 1 ,table.count(str) do
            local season = string.split(str[i],";")
            if seasonId == tonumber(season[1]) then
                UIUtil.ShowIntro(Localization:GetString(actListData.name), Localization:GetString("302027"), Localization:GetString(season[2]))
                break
            end
        end
    end
end

function SeasonPassMain:ShowWeekCells()
    self:ClearWeekScroll()
    self:GetDataList()
    if self.actData ~= nil and self.actData.weekTaskDic ~= nil then
        local count = table.count(self.actData.weekTaskDic)
        if count > 0 then
            self.week_tabs_scroll_view:SetTotalCount(count)
            self.week_tabs_scroll_view:RefillCells()
        end
    end
end

function SeasonPassMain:ClearWeekScroll()
    self.toggle = {}
    self.week_tabs_scroll_view:ClearCells()--清循环列表数据
    self.week_tabs_scroll_view:RemoveComponents(WeekTabItem)--清循环列表gameObject
end

function SeasonPassMain:OnCellMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local item = self.week_tabs_scroll_view:AddComponent(WeekTabItem, itemObj)
    local param = self.list[index]
    item:ReInit(param)
    self.toggle[index] = item
end

function SeasonPassMain:OnCellMoveOut(itemObj, index)
    self.toggle[index] = nil
    self.week_tabs_scroll_view:RemoveComponent(itemObj.name, WeekTabItem)
end

function SeasonPassMain:GetDataList()
    self.list = {}
    if self.actData ~= nil and self.actData.weekTaskDic ~= nil then
        local count = table.count(self.actData.weekTaskDic)
        if count > 0 then
            local weekIndex = DataCenter.SeasonPassManager:GetCurWeekIndex(self.activityId)
            local settleTime = DataCenter.SeasonDataManager:GetSeasonSettleTime()
            local allWeek = 0
            if settleTime and settleTime > 0 then
                allWeek = DataCenter.SeasonPassManager:GetSeasonAllWeek(self.activityId,settleTime)
            end
            for i = 1, count, 1 do
                local param = {}
                param.index = i
                param.isRed = self:IsTabShowRed(i)
                param.select = self.curWeek == i
                param.isEarly = false
                if allWeek == 0 then
                    param.isLock = weekIndex < i
                else
                    if allWeek < i then
                        param.isEarly = true
                    end
                    if weekIndex < i then
                        param.isLock = weekIndex < allWeek
                    else
                        param.isLock = weekIndex < i
                    end
                end
                param.onClick = function(index) 
                    self:SelectWeekTab(index)
                end
                table.insert(self.list, param)
            end
        end
    end
end

function SeasonPassMain:SetToggleTabSelect(tabType, isSelect)
    if tabType ~= nil and self.toggle[tabType] ~= nil then
        self.toggle[tabType]:Select(isSelect)
    end
end

function SeasonPassMain:IsTabShowRed(index)
    local tempWeek = DataCenter.SeasonPassManager:GetCurWeekIndex(self.activityId)
    if index <= tempWeek and self.actData:GetTaskRedCount(index) > 0 then
        return true
    end
    return false
end

SeasonPassMain.OnCreate = OnCreate
SeasonPassMain.OnDestroy = OnDestroy
SeasonPassMain.OnEnable = OnEnable
SeasonPassMain.OnDisable = OnDisable
SeasonPassMain.ComponentDefine = ComponentDefine
SeasonPassMain.ComponentDestroy = ComponentDestroy
SeasonPassMain.DataDefine = DataDefine
SeasonPassMain.DataDestroy = DataDestroy
SeasonPassMain.OnAddListener = OnAddListener
SeasonPassMain.OnRemoveListener = OnRemoveListener

SeasonPassMain.SetData = SetData
SeasonPassMain.OnRefresh = OnRefresh
SeasonPassMain.RefreshTop = RefreshTop
SeasonPassMain.RefreshRed = RefreshRed

SeasonPassMain.InitTask = InitTask
SeasonPassMain.OnInitScroll = OnInitScroll
SeasonPassMain.OnUpdateScroll = OnUpdateScroll
SeasonPassMain.OnDestroyScrollItem = OnDestroyScrollItem

SeasonPassMain.ShowCells = ShowCells
SeasonPassMain.OnInitRewardScroll = OnInitRewardScroll
SeasonPassMain.OnUpdateRewardScroll = OnUpdateRewardScroll
SeasonPassMain.OnDestroyRewardScrollItem = OnDestroyRewardScrollItem

SeasonPassMain.ToggleControlBorS = ToggleControlBorS
SeasonPassMain.RefreshBattlePass = RefreshBattlePass
SeasonPassMain.RefreshRewardCell = RefreshRewardCell
SeasonPassMain.RefreshTaskCell = RefreshTaskCell
SeasonPassMain.SelectWeekTab = SelectWeekTab
SeasonPassMain.OnBuyPackageSucc = OnBuyPackageSucc

SeasonPassMain.ClearScroll = ClearScroll

SeasonPassMain.AddTimer = AddTimer
SeasonPassMain.RefreshTime = RefreshTime
SeasonPassMain.DeleteTimer = DeleteTimer

SeasonPassMain.GetActState = GetActState
SeasonPassMain.OneGetClick = OneGetClick
SeasonPassMain.OnBoxClick = OnBoxClick
SeasonPassMain.OnExtraClick = OnExtraClick
SeasonPassMain.CheckExtraBox = CheckExtraBox
SeasonPassMain.OnBuyLvUpClick = OnBuyLvUpClick
SeasonPassMain.OnBuyClick = OnBuyClick
SeasonPassMain.OnIntroClick = OnIntroClick
SeasonPassMain.OnClickBoxLock = OnClickBoxLock

SeasonPassMain.AddWeekUnlockTimer = AddWeekUnlockTimer
SeasonPassMain.RefreshWeekUnlockTime = RefreshWeekUnlockTime
SeasonPassMain.DelWeekUnlockTimer = DelWeekUnlockTimer
SeasonPassMain.OnClickInfoBtn = OnClickInfoBtn
return SeasonPassMain