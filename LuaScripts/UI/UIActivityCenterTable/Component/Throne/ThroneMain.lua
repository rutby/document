---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/13 15:45
--- ThroneMain.lua


local ThroneMain = BaseClass("ThroneMain", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray

local title_path = "safeArea/title4"
local subTitle_path = "safeArea/title1"
local time_rect_path = "safeArea/Time"
local timeTxt_path = "safeArea/Time/timeTip"
local remainTime_path = "safeArea/Time/timeCD"
local ruleBtn_path = "safeArea/btns/ruleBtn"
local ruleBtnTxt_path = "safeArea/btns/ruleBtn/ruleBtnTxt"
local rightsBtn_path = "safeArea/btns/rightsBtn"
local rightsBtnTxt_path = "safeArea/btns/rightsBtn/rightBtnTxt"
local officialBtn_path = "safeArea/btns/officialBtn"
local officialBtnTxt_path = "safeArea/btns/officialBtn/officialBtnTxt"
local rewardsBtn_path = "safeArea/btns/rewardsBtn"
local rewardsBtnTxt_path = "safeArea/btns/rewardsBtn/rewardsBtnTxt"
local jumpBtn_path = "safeArea/jumpBtn"
local jumpBtnTxt_path = "safeArea/jumpBtn/jumpBtnTxt"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    Setting:SetString(LuaEntry.Player.uid .. "_" .. SettingKeys.THRONE_ACT_TIME .. "_" .. self.activityId, tostring(curTime))
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UIText, title_path)
    self.subTitleN = self:AddComponent(UIText, subTitle_path)
    self.time_rect = self:AddComponent(UIBaseContainer,time_rect_path)
    self.timeTxtN = self:AddComponent(UIText, timeTxt_path)
    self.remainTimeN = self:AddComponent(UIText, remainTime_path)
    self.ruleBtnN = self:AddComponent(UIButton, ruleBtn_path)
    self.ruleBtnN:SetOnClick(function()
        self:OnClickRuleBtn()
    end)
    self.ruleBtnTxtN = self:AddComponent(UIText, ruleBtnTxt_path)
    self.ruleBtnTxtN:SetLocalText(302027)
    self.rightsBtnN = self:AddComponent(UIButton, rightsBtn_path)
    self.rightsBtnN:SetOnClick(function()
        self:OnClickRightsBtn()
    end)
    self.rightsBtnTxtN = self:AddComponent(UIText, rightsBtnTxt_path)
    self.rightsBtnTxtN:SetLocalText(250103)
    self.officialBtnN = self:AddComponent(UIButton, officialBtn_path)
    self.officialBtnN:SetOnClick(function()
        self:OnClickOfficialBtn()
    end)
    self.officialBtnTxtN = self:AddComponent(UIText, officialBtnTxt_path)
    self.officialBtnTxtN:SetLocalText(250005)
    self.rewardsBtnN = self:AddComponent(UIButton, rewardsBtn_path)
    self.rewardsBtnN:SetOnClick(function()
        self:OnClickRewardBtn()
    end)
    self.rewardsBtnTxtN = self:AddComponent(UIText, rewardsBtnTxt_path)
    self.rewardsBtnTxtN:SetLocalText(250035)
    self.jumpBtnN = self:AddComponent(UIButton, jumpBtn_path)
    self.jumpBtnN:SetOnClick(function()
        self:OnClickJumpBtn()
    end)
    self.jumpBtnTxtN = self:AddComponent(UIText, jumpBtnTxt_path)
    self.jumpBtnTxtN:SetLocalText(110088)
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.subTitleN = nil
    self.timeTxtN = nil
    self.remainTimeN = nil
    self.ruleBtnN = nil
    self.ruleBtnTxtN = nil
    self.rightsBtnN = nil
    self.rightsBtnTxtN = nil
    self.officialBtnN = nil
    self.officialBtnTxtN = nil
    self.rewardsBtnN = nil
    self.rewardsBtnTxtN = nil
    self.jumpBtnN = nil
    self.jumpBtnTxtN = nil
end

local function DataDefine(self)
    self.activityId = nil
    self.activityInfo = nil
end

local function DataDestroy(self)
    self.activityId = nil
    self.activityInfo = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.GovernmentPresidentRefresh, self.RefreshAll)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.GovernmentPresidentRefresh, self.RefreshAll)
    base.OnRemoveListener(self)
end

local function SetData(self, activityId,actId)
    self.activityId = activityId
    local curTime = UITimeManager:GetInstance():GetServerTime()
    Setting:SetString(LuaEntry.Player.uid .. "_" .. SettingKeys.THRONE_ACT_TIME .. "_" .. self.activityId, tostring(curTime))
    DataCenter.GovernmentManager:GetKingInfo(LuaEntry.Player:GetSrcServerId())
    self.activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(activityId))
    if not self.activityInfo then
        return
    end
    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(actId)
    self:RefreshAll()
end

local function RefreshAll(self)
    self.titleN:SetText(Localization:GetString(self.activityInfo.name))
    self.subTitleN:SetText(Localization:GetString(self.activityInfo.desc_info))

    local serverTime = UITimeManager:GetInstance():GetServerTime()
    if serverTime < self.activityInfo.startTime then
        self.endTime = self.activityInfo.startTime
        self.timeTxtN:SetLocalText(250105, "")
    elseif serverTime < self.activityInfo.endTime then
        self.endTime = self.activityInfo.endTime
        self.timeTxtN:SetLocalText(250104, "")
    else
        self.endTime = 0
        self.timeTxtN:SetText("")
        self.remainTimeN:SetText("")
    end

    local isEnd = DataCenter.GovernmentManager:CheckIsEnd()
    if isEnd and serverTime >= self.activityInfo.startTime then
        self.time_rect:SetActive(false)
    else
        self.time_rect:SetActive(true)
        if self.endTime > serverTime then
            self:AddCountDownTimer()
        end
    end
end


local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
    self:RefreshRemainTime()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    local str = 250105
    if curTime < self.activityInfo.startTime then
        str = 250105
    elseif curTime < self.activityInfo.endTime then
        str = 250104
    end
    if remainTime > 0 then
        self.remainTimeN:SetLocalText(str,UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.remainTimeN:SetText("")
        self:DelCountDownTimer()
        self:RefreshAll()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function OnClickRuleBtn(self)
--    if not self.activityInfo or string.IsNullOrEmpty(self.activityInfo.para1) then
        local season = SeasonUtil.GetSeason()
        local isThrone = true
        UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonHint, { anim = true },season, self.activityInfo.para1,isThrone)
  --  end
end

local function OnClickOfficialBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGovernmentMain,2)
end

local function OnClickRewardBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGovernmentMain)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIThronePresidentReward)
end

local function OnClickRightsBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGovernmentMain)
end

local function OnClickJumpBtn(self)
    local maxLvBuild = nil
    local template = DataCenter.AllianceCityTemplateManager:GetAllTemplate()
    for i, v in pairs(template) do
        if not maxLvBuild or maxLvBuild.level < v.level then
            maxLvBuild = v
        end
    end
    if maxLvBuild then
        GoToUtil.CloseAllWindows()
        local cityId = maxLvBuild.id
        local tile = GetTableData(TableName.WorldCity,cityId, "size")
        local pointIndex = SceneUtils.TilePosToIndex(maxLvBuild.pos, ForceChangeScene.World)
        local worldPos = SceneUtils.TileIndexToWorld(pointIndex, ForceChangeScene.World)
        worldPos.x = worldPos.x - tile+1
        worldPos.z = worldPos.z - tile+1
        pointIndex = SceneUtils.WorldToTileIndex(worldPos, ForceChangeScene.World)
        GoToUtil.GotoWorldPos(worldPos, CS.SceneManager.World.InitZoom,LookAtFocusTime, function()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIWorldSiegePoint,maxLvBuild.id,pointIndex)
        end)
    end
end


ThroneMain.OnCreate = OnCreate
ThroneMain.OnDestroy = OnDestroy
ThroneMain.ComponentDefine = ComponentDefine
ThroneMain.ComponentDestroy = ComponentDestroy
ThroneMain.DataDefine = DataDefine
ThroneMain.DataDestroy = DataDestroy
ThroneMain.OnAddListener = OnAddListener
ThroneMain.OnRemoveListener = OnRemoveListener

ThroneMain.SetData = SetData
ThroneMain.RefreshAll = RefreshAll
ThroneMain.AddCountDownTimer = AddCountDownTimer
ThroneMain.RefreshRemainTime = RefreshRemainTime
ThroneMain.DelCountDownTimer = DelCountDownTimer
ThroneMain.OnClickRuleBtn = OnClickRuleBtn
ThroneMain.OnClickOfficialBtn = OnClickOfficialBtn
ThroneMain.OnClickRewardBtn = OnClickRewardBtn
ThroneMain.OnClickRightsBtn = OnClickRightsBtn
ThroneMain.OnClickJumpBtn = OnClickJumpBtn

return ThroneMain