---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/8/16 14:31
---LeadingQuestMain


local LeadingQuestMain = BaseClass("LeadingQuestMain", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local JigsawPuzzleItem = require "UI.UIActivityCenterTable.Component.JigsawPuzzle.JigsawPuzzleItem"
local UICommonItem = require "UI.UICommonItem.UICommonItem"

local title_path = "RightView/Top/title"
local subTitle_path = "RightView/Top/subTitle"
local actTime_path = "RightView/Top/actTime"
local timeCountDown_path = "RightView/Top/remainTime"
local goldCount_path = "topRes/Res1/resNum1"
local jigsawSv_path = "RightView/Imgs/ScrollView"
local jigsawContent_path = "RightView/Imgs/ScrollView/Viewport/Content"
local challengeBtn_path = "RightView/Imgs/challengeBtn"
local challengeBtnFreeTxt_path = "RightView/Imgs/challengeBtn/free"
local challengeBtnCost_path = "RightView/Imgs/challengeBtn/costObj"
local challengeBtnCostTxt_path = "RightView/Imgs/challengeBtn/costObj/costBtnName"
local challengeBtnCostGold_path = "RightView/Imgs/challengeBtn/costObj/itemCount"
local freeTimesTip_path = "RightView/Imgs/freeTimesTip"
local rankBtn_path = "RightView/Top/rankBg/rankBtn"
local rankBtnTxt_path = "RightView/Top/rankBg/rankBtn/rankBtnTxt"
local infoBtn_path = "RightView/Top/title/infoBtn"
local starReward_path = "RightView/starRewards"
local starRewardLv_path = "RightView/starRewards/rewardLv/layout"
local starRewardDesc_path = "RightView/starRewards/rewardLv/desc"
local starRewardTime_path = "RightView/starRewards/rewardLv/time"
local starRewardBg_path = "RightView/starRewardBg"
local rankTxt_path = "RightView/Top/rankBg/rankTxt"
local rankRewardTip_path = "RightView/Top/rankBg/rankRewards/rankRewardTip"
local rankRewards_path = "RightView/Top/rankBg/rankRewards/rankReward"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ClearScroll()
    self:ShowStarRewards(false)
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    DataCenter.JigsawPuzzleManager:SetJigsawAsOld(self.activityId)
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    DataCenter.JigsawPuzzleManager:SetJigsawAsOld(self.activityId)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UIText, title_path)
    self.subTitleN = self:AddComponent(UIText, subTitle_path)
    self.activityTimeN = self:AddComponent(UIText, actTime_path)
    self.remainTimeN = self:AddComponent(UIText, timeCountDown_path)
    self.jigsawSvN = self:AddComponent(UIScrollView, jigsawSv_path)
    self.jigsawSvN:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.jigsawSvN:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.jigsawContentN = self:AddComponent(UIBaseContainer, jigsawContent_path)
    self.goldCountN = self:AddComponent(UIText, goldCount_path)
    self.challengeBtnN = self:AddComponent(UIButton, challengeBtn_path)
    self.challengeBtnN:SetOnClick(function()
        self:OnClickChallengeBtn()
    end)
    self.challengeBtnFreeTxtN = self:AddComponent(UIText, challengeBtnFreeTxt_path)
    self.challengeBtnFreeTxtN:SetLocalText(372258)
    self.challengeBtnCostN = self:AddComponent(UIBaseContainer, challengeBtnCost_path)
    self.challengeBtnCostTxtN = self:AddComponent(UIText, challengeBtnCostTxt_path)
    self.challengeBtnCostTxtN:SetLocalText(372258)
    self.challengeBtnCostGoldN = self:AddComponent(UIText, challengeBtnCostGold_path)
    self.freeTimesTipN = self:AddComponent(UIText, freeTimesTip_path)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)
    self.rankBtnN = self:AddComponent(UIButton, rankBtn_path)
    self.rankBtnN:SetOnClick(function()
        self:OnClickRankBtn()
    end)
    self.rankBtnTxtN = self:AddComponent(UIText, rankBtnTxt_path)
    self.rankBtnTxtN:SetLocalText(390040)
    self.rankRewardsTbN = {}
    for i = 1, 3 do
        local tempPath = rankRewards_path .. i
        local rankRewardItem = self:AddComponent(UICommonItem, tempPath)
        table.insert(self.rankRewardsTbN, rankRewardItem)
    end
    self.rankRewardTipN = self:AddComponent(UIText, rankRewardTip_path)
    self.rankRewardTipN:SetLocalText(372351)
    self.rankTxtN = self:AddComponent(UIText, rankTxt_path)
    self.rankTxtN:SetLocalText(390040)
    
    self.starRewardN = self:AddComponent(UIBaseContainer, starReward_path)
    self.starRewardN:SetActive(false)
    self.starRewardBgBtnN = self:AddComponent(UIButton, starRewardBg_path)
    self.starRewardBgBtnN:SetActive(false)
    self.starRewardBgBtnN:SetOnClick(function()
        self:ShowStarRewards(false)
    end)
    self.starRewardContainerTbN = {}
    self.starRewardLvTbN = {}
    self.starRewardDescTbN = {}
    self.starRewardTimeTbN = {}
    for i = 1, 3 do
        local tempLvPath = starRewardLv_path .. i
        local lvN = self:AddComponent(UIBaseContainer, tempLvPath)
        table.insert(self.starRewardContainerTbN, lvN)
        
        local tempDescPath = starRewardDesc_path .. i
        local descN = self:AddComponent(UIText, tempDescPath)
        self.starRewardDescTbN[i] = descN
        
        local tempTimePath = starRewardTime_path .. i
        local timeN = self:AddComponent(UIText, tempTimePath)
        self.starRewardTimeTbN[i] = timeN
    end
    self:InitStarRewards()
end

local function ComponentDestroy(self)
    self.titleN = nil
    self.subTitleN = nil
    self.activityTimeN = nil
    self.remainTimeN = nil
    self.jigsawSvN = nil
    self.jigsawContentN = nil
    self.goldCountN = nil
    self.challengeBtnN = nil
    self.infoBtnN = nil
end

local function DataDefine(self)
    self.activityId = nil
    self.activityData = nil
    self.jigsawsList = nil
    self.curJigsawId = nil
    self.jigsawItems = {}
    self.showStarRewardId = nil
end

local function DataDestroy(self)
    self.activityId = nil
    self.activityData = nil
    self.jigsawsList = nil
    self.curJigsawId = nil
    self.jigsawItems = nil
    self.showStarRewardId = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnUpdateJigsawPuzzleInfo, self.RefreshJigsaws)
    self:AddUIListener(EventId.UpdateGold, self.RefreshGold)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnUpdateJigsawPuzzleInfo, self.RefreshJigsaws)
    self:RemoveUIListener(EventId.UpdateGold, self.RefreshGold)
    base.OnRemoveListener(self)
end

local function SetData(self, activityId)
    self.activityId = tonumber(activityId)
    if not self.activityId then
        return
    end

    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(tostring(self.activityId))
    DataCenter.JigsawPuzzleManager:TryRequestJigsawActInfo(self.activityId)
    
    self.activityData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
    self.jigsawsList = DataCenter.JigsawPuzzleManager:GetJigsawConfByActId(self.activityId)
    if #self.jigsawsList > 0 and self.jigsawsList[1]:CheckIfUnlocked() then
        self.curJigsawId = self.jigsawsList[1].id
    end
    self:RefreshAll()
end

local function RefreshAll(self)
    self.titleN:SetText(Localization:GetString(self.activityData.name))
    self.subTitleN:SetText(Localization:GetString(self.activityData.desc_info))
    local startT = UITimeManager:GetInstance():TimeStampToDayForLocal(self.activityData.startTime)
    local endT = UITimeManager:GetInstance():TimeStampToDayForLocal(self.activityData.endTime)
    self.activityTimeN:SetText(startT .. "-" .. endT)
    
    local rankRewardsList = {}
    local arrRankRewards = string.split(self.activityData.reward_goods, "|")
    for i, v in ipairs(arrRankRewards) do
        if not string.IsNullOrEmpty(v) then
            local rankReward = string.split(v, ";")
            if #rankReward == 2 then
                local newReward = {}
                newReward.rewardType = RewardType.GOODS
                newReward.itemId = rankReward[1]
                table.insert(rankRewardsList, newReward)
            end
        end
    end
    for i, v in ipairs(self.rankRewardsTbN) do
        if i <= #rankRewardsList then
            v:SetActive(true)
            v:ReInit(rankRewardsList[i])
        else
            v:SetActive(false)
        end
    end
    
    self:RefreshGold()
    self:RefreshJigsaws()
    
    self:AddCountDownTimer()
    self:RefreshRemainTime()
end

local function RefreshGold(self)
    if IsNull(self.gameObject) then
        return
    end
    self.goldCountN:SetText(string.GetFormattedSeperatorNum(LuaEntry.Player.gold))
end

local function RefreshJigsaws(self, activityId)
    if IsNull(self.gameObject) then
        return
    end
    if activityId then
        activityId = tonumber(activityId)
        if self.activityId ~= activityId then
            return
        end
    end
    local jigsawInfo = DataCenter.JigsawPuzzleManager:TryGetJigsawActInfo(self.activityId)
    if not jigsawInfo then
        return
    end

    local challengedTimes, maxTimes, perCost = DataCenter.JigsawPuzzleManager:GetFreeChallengeTimes(self.activityId)
    local freeTimes = math.max(0, maxTimes - challengedTimes)
    self.freeTimesTipN:SetText(Localization:GetString("302212", freeTimes .. "/" .. maxTimes))
    self.curChallengeCost = freeTimes > 0 and 0 or perCost
    if self.curChallengeCost > 0 then
        self.challengeBtnFreeTxtN:SetActive(false)
        self.challengeBtnCostN:SetActive(true)
        self.challengeBtnCostGoldN:SetText(self.curChallengeCost)
    else
        self.challengeBtnFreeTxtN:SetActive(true)
        self.challengeBtnCostN:SetActive(false)
    end

    if #self.jigsawsList > 0 then
        self.jigsawSvN:SetActive(true)
        self.jigsawSvN:SetTotalCount(#self.jigsawsList)
        self.jigsawSvN:RefillCells()
    else
        self.jigsawSvN:SetActive(false)
    end
end

local function SelectJigsaw(self, jigsawId)
    if self.curJigsawId == jigsawId then
        return
    end
    if self.jigsawItems[self.curJigsawId] then
        self.jigsawItems[self.curJigsawId]:SetSelectByExternal(false)
    end
    if self.jigsawItems[jigsawId] then
        self.jigsawItems[jigsawId]:SetSelectByExternal(true)
    end
    self.curJigsawId = jigsawId
    
    local tempTemplate = DataCenter.JigsawPuzzleManager:GetJigsawConf(self.activityId, self.curJigsawId)
    local isUnlocked = tempTemplate:CheckIfUnlocked()
    CS.UIGray.SetGray(self.challengeBtnN.transform, not isUnlocked, isUnlocked)
end

local function ShowStarRewards(self, jigsawInfo, pos)
    self.starRewardBgBtnN:SetActive(jigsawInfo)
    
    if jigsawInfo then
        self.starRewardN:SetActive(true)
        self.starRewardN:SetPositionXYZ(pos.x, pos.y, pos.z)
        for i = 1, 3 do
            local tempRewards = jigsawInfo.starRewards[i]
            local tempRewardItems = self.starRewardLvTbN[i]
            for j, v in ipairs(tempRewardItems) do
                if j <= #tempRewards then
                    v:SetActive(true)
                    local reward = tempRewards[j]
                    local newReward = {}
                    newReward.rewardType = reward.type
                    if type(reward.value) == "table" then
                        newReward.itemId = reward.value.id
                        newReward.count = reward.value.num
                    else
                        newReward.count = reward.value
                    end
                    v:ReInit(newReward)
                else
                    v:SetActive(false)
                end
            end 
        end

        local tempStar = DataCenter.JigsawPuzzleManager:GetStarNumByTime(self.activityId, self.showStarRewardId, jigsawInfo.bestScoreS)
        for i, v in ipairs(self.starRewardDescTbN) do
            if i <= tempStar then
                v:SetText(Localization:GetString("372354"))
            else
                v:SetText("")
            end
        end

        local jigsawConf = DataCenter.JigsawPuzzleManager:GetJigsawConf(self.activityId, self.curJigsawId)
        for i, v in ipairs(self.starRewardTimeTbN) do
            if i <= #jigsawConf.starNeedTimeS then
                self.starRewardTimeTbN[i]:SetText(UITimeManager:GetInstance():GetFormattedTime(jigsawConf.starNeedTimeS[i]))
            else
                self.starRewardTimeTbN[i]:SetText("")
            end
        end        
    else
        self.starRewardN:SetActive(false)
    end
end

local function InitStarRewards(self)
    self:SetAllCellDestroy()
    
    self.models = {}
    for i = 1, 3 do
        self.starRewardLvTbN[i] = {}
        for j = 1, 3 do
            self.models[(i - 1) * 3 + j] = self:GameObjectInstantiateAsync(UIAssets.UICommonItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject
                go:SetActive(true)
                go.transform:SetParent(self.starRewardContainerTbN[i].transform)
                go.transform:Set_localScale(0.6, 0.6, 1)
                go.transform:SetAsLastSibling()
                go.name = tostring(j)
                local rewardItem = self.starRewardContainerTbN[i]:AddComponent(UICommonItem, go.name)
                table.insert(self.starRewardLvTbN[i], rewardItem)
            end)
        end
    end
end

local function SetAllCellDestroy(self)
    for i = 1, 3 do
        self.starRewardContainerTbN[i]:RemoveComponents(UICommonItem)
    end
    if self.models~=nil then
        for k,v in pairs(self.models) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

local function OnItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.jigsawSvN:AddComponent(JigsawPuzzleItem, itemObj)
    --local bgPath = self:GetItemBgPath()
    local tempConf = self.jigsawsList[index]
    cellItem:SetItem(tempConf, self.curJigsawId == tempConf.id, function(tempId)
        self:OnClickJigsawItem(tempId)
    end, function(activityId, id)
        self:OnClickShowStarRewards(activityId, id)
    end)
    self.jigsawItems[tempConf.id] = cellItem
end

local function OnItemMoveOut(self, itemObj, index)
    self.jigsawSvN:RemoveComponent(itemObj.name, JigsawPuzzleItem)
    local tempConf = self.jigsawsList[index]
    self.jigsawItems[tempConf.id] = nil
end

local function ClearScroll(self)
    self.jigsawSvN:ClearCells()
    self.jigsawSvN:RemoveComponents(JigsawPuzzleItem)
end

local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.activityData.endTime - curTime
    if remainTime > 0 then
        self.remainTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.remainTimeN:SetText("")
        self:DelCountDownTimer()
        self.view.ctrl:CloseSelf()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end


local function OnClickChallengeBtn(self)
    if not self.jigsawItems or #self.jigsawItems == 0 then
        return
    end
    DataCenter.JigsawPuzzleManager:SetJigsawAsOld(nil, self.curJigsawId)
    self.jigsawItems[self.curJigsawId]:SetNewDotVisible(false)
    
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIJigsawArea, { anim = true }, self.activityId, self.curJigsawId)
end

local function OnClickJigsawItem(self, jigsawId)
    self:SelectJigsaw(jigsawId)
end

local function OnClickRankBtn(self)
    if self.jigsawsList and #self.jigsawsList > 0 then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIJigsawRank, { anim = true }, self.activityId)
    end
end

local function OnClickShowStarRewards(self, jigsawId, pos)
    if self.showStarRewardId == jigsawId then
        self:ShowStarRewards(false)
        self.showStarRewardId = nil
    else
        local jigsawInfo = DataCenter.JigsawPuzzleManager:GetJigsawInfo(self.activityId, jigsawId)
        if jigsawInfo then
            self.showStarRewardId = jigsawId
            self:ShowStarRewards(jigsawInfo, pos)
        end
    end
end

local function OnClickInfoBtn(self)
    UIUtil.ShowIntro(Localization:GetString(self.activityData.name), Localization:GetString("100239"), Localization:GetString(self.activityData.story))
end

LeadingQuestMain.OnCreate = OnCreate
LeadingQuestMain.OnDestroy = OnDestroy
LeadingQuestMain.OnEnable = OnEnable
LeadingQuestMain.OnDisable = OnDisable
LeadingQuestMain.ComponentDefine = ComponentDefine
LeadingQuestMain.ComponentDestroy = ComponentDestroy
LeadingQuestMain.DataDefine = DataDefine
LeadingQuestMain.DataDestroy = DataDestroy
LeadingQuestMain.OnAddListener = OnAddListener
LeadingQuestMain.OnRemoveListener = OnRemoveListener

LeadingQuestMain.SetData = SetData
LeadingQuestMain.RefreshAll = RefreshAll
LeadingQuestMain.RefreshGold = RefreshGold
LeadingQuestMain.RefreshJigsaws = RefreshJigsaws
LeadingQuestMain.SelectJigsaw = SelectJigsaw
LeadingQuestMain.AddCountDownTimer = AddCountDownTimer
LeadingQuestMain.RefreshRemainTime = RefreshRemainTime
LeadingQuestMain.DelCountDownTimer = DelCountDownTimer
LeadingQuestMain.InitStarRewards = InitStarRewards
LeadingQuestMain.ShowStarRewards = ShowStarRewards
LeadingQuestMain.SetAllCellDestroy = SetAllCellDestroy
LeadingQuestMain.OnItemMoveIn = OnItemMoveIn
LeadingQuestMain.OnItemMoveOut = OnItemMoveOut
LeadingQuestMain.ClearScroll = ClearScroll
LeadingQuestMain.OnClickChallengeBtn = OnClickChallengeBtn
LeadingQuestMain.OnClickJigsawItem = OnClickJigsawItem
LeadingQuestMain.OnClickRankBtn = OnClickRankBtn
LeadingQuestMain.OnClickShowStarRewards = OnClickShowStarRewards
LeadingQuestMain.OnClickInfoBtn = OnClickInfoBtn
--LeadingQuestMain.AddCountDownTimer = AddCountDownTimer
--LeadingQuestMain.RefreshRemainTime = RefreshRemainTime
--LeadingQuestMain.DelCountDownTimer = DelCountDownTimer
--LeadingQuestMain.GetTaskListSorted = GetTaskListSorted


return LeadingQuestMain