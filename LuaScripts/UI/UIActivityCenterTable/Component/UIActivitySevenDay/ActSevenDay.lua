---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 2021/9/23 17:29
---
local ActSevenDay = BaseClass("ActSevenDay",UIBaseView)
local UIActivitySevenDayBoxItem = require "UI.UIActivityCenterTable.Component.UIActivitySevenDay.ActSevenDayBoxItem"
local UIActivitySevenDayItem = require "UI.UIActivityCenterTable.Component.UIActivitySevenDay.ActSevenDayItem"
local UIHeroCellSmall = require "UI.UIHero2.Common.UIHeroCellSmall"
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local tabUnSelect_color= Color.New(183/255,102/255,48/255,1)
local tabSelect_color= Color.New(255/255,255/255,255/255,1)

function ActSevenDay:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self.taskList = {}
    self.dayTabIndex = 1
    self.childTabIndex = 1
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime()
    end
end

function ActSevenDay:ComponentDefine()
    --标题
    self.UI7day_titlebg = self:AddComponent(UIImage,"RightView/Rect_Top/UI7day_titlebg")
    self._title_txt = self:AddComponent(UITextMeshProUGUI,"RightView/Rect_Top/UI7day_titlebg/Txt_Title")
    --倒计时
    self._time_txt = self:AddComponent(UITextMeshProUGUI,"RightView/Rect_Top/Txt_Time")
    --当前积分
    self._init_txt = self:AddComponent(UITextMeshProUGUI,"RightView/Rect_Top/inteText")
    self._init_txt:SetLocalText(100105) 
    self._progress_txt = self:AddComponent(UITextMeshProUGUI,"RightView/Rect_Top/Txt_Progress")
    --进度条
    self.slider = self:AddComponent(UISlider,"RightView/Rect_Top/Slider")
    self.slider_back = self:AddComponent(UISlider,"RightView/Rect_Top/Slider_back")
    --盒子列表
    self._box_icon = {}
    self._box_rectTab = {}
    self._box_rectTabEffect ={}
    for i = 1, 6 do
        local iconPath = "RightView/iconCell/Img_Iconbg"..i
        local rectPath = iconPath.."/UICommonResItem"..i
        local effect = iconPath.."/SevenDayBoxEffect"..i.."/Rect_Effect"..i.."/Rect_anim"..i
        self._box_icon[i] = self:AddComponent(UIBaseContainer, iconPath)
        self._box_rectTab[i] = self:AddComponent(UIActivitySevenDayBoxItem, rectPath)
        self._box_rectTabEffect[i] = self:AddComponent(UIAnimator, effect)
    end
    -- 英雄列表
    self._hero_btn = {}
    self._hero_rect = {}
    self._hero_rece = {}
    self._hero_effect = {}
    for i = 1, 6 do
        local heroPath = "RightView/iconCell/Rect_Hero"..i
        local rectPath = heroPath.."/UIHeroCellSmall"..i
        local recePath = heroPath.."/ImgRece"..i
        local effectPath = heroPath.."/SevenDayHeroEffect"..i.."/Rect_Effect"..i.."/Rect_anim_h"..i
        self._hero_btn[i] = self:AddComponent(UIButton, heroPath)
        self._hero_rect[i] = self:AddComponent(UIHeroCellSmall, rectPath)
        self._hero_rece[i] = self:AddComponent(UIImage, recePath)
        self._hero_effect[i] = self:AddComponent(UIAnimator, effectPath)
        self._hero_btn[i]:SetOnClick(function()
            self:OnHeroBtnClick(i)
        end)
    end
    
    --积分列表
    self.num_txtTab = {}
    for i=1,6 do
        local txtpath = "RightView/Rect_Top/txtNum"..i
        self.num_txtTab[i] = self:AddComponent(UITextMeshProUGUI,txtpath)
    end
    --日期
    self.day_togTab = {}
    self.day_togTabRed = {}
    self.day_togTabBack ={}
    for i=1,5 do
        local togglepath = "RightView/Rect_Top/Rect_Group/Toggle_Tab"..i
        local txtpath = "RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Rect_Lock/Txt_Toggle"..i
        local lockpath = "RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Rect_Lock/Img_Lock"..i
        self.day_togTabRed[i] = self:AddComponent(UIImage,"RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Red"..i)
        self.day_togTabBack[i] = self:AddComponent(UIImage,"RightView/Rect_Top/Rect_Group/Toggle_Tab"..i.."/Background"..i) 
        self.day_togTab[i] = {
            toggle = self:AddComponent(UIToggle,togglepath),
            txt = self:AddComponent(UITextMeshProUGUI,txtpath),
            lock = self:AddComponent(UIImage,lockpath),
        }
        
    end
    
    for i=1,5 do
        self.day_togTab[i].toggle:SetOnValueChanged(function(tf)
                if tf then
                    self.content:SetAnchoredPosition(Vector2.New(0,0))
                    self:ToggleControl(i)
                end
        end)
    end

    self.listDay_togTab = {}
    for i=1,3 do
        local togglepath = "RightView/Rect_Bottom/Rect_List/Toggle_List"..i
        local txtpath = "RightView/Rect_Bottom/Rect_List/Toggle_List"..i.."/Txt_ListToggle"..i
        local red = "RightView/Rect_Bottom/Rect_List/Toggle_List"..i.."/Img_RedList"..i
        self.listDay_togTab[i] = {
            toggle = self:AddComponent(UIToggle,togglepath),
            txt = self:AddComponent(UITextMeshProUGUI,txtpath),
            red = self:AddComponent(UIImage,red),
        }
    end
    for i=1,3 do
        self.listDay_togTab[i].toggle:SetOnValueChanged(function(tf)
            if tf then
                local isOn = self.listDay_togTab[i].toggle:GetIsOn()
                if isOn then
                    self.content:SetAnchoredPosition(Vector2.New(0,0))
                    if self.childTabIndex ~= i then
                        self.childTabIndex = i
                        self:RefreshSelectData(i)
                    end
                end
            end
        end)
    end

    self.content = self:AddComponent(UIBaseContainer,"RightView/Rect_Bottom/ScrollView/Viewport/Content")

    
end

function ActSevenDay:OnDestroy()
    self:SetAllCellDestroy()
    self:ComponentDestroy()
    self.define = nil
    self.taskList = nil
    self.dayTabIndex = nil
    self.childTabIndex = nil
    self.timer_action = nil
    self:DeleteTimer()
    base.OnDestroy(self)
end

function ActSevenDay:ComponentDestroy()
    self._time_txt = nil
    self._progress_txt = nil
    self.slider = nil
    self.slider_back= nil
    self._box_rectTab = nil
    self.num_txtTab = nil
    self.day_togTab = nil
    self.listDay_togTab = nil
    self._hero_rect = nil
    self.content = nil
end
function ActSevenDay:OnEnable()
    base.OnEnable(self)
end

function ActSevenDay:OnDisable()
    base.OnDisable(self)
end

function ActSevenDay:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.MainTaskSuccess, self.UpdateTaskState)
    self:AddUIListener(EventId.ActSevenDay, self.RefreshUI)
    self:AddUIListener(EventId.ActSevenDayScore, self.UpdateRewardScore)
end

function ActSevenDay:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.MainTaskSuccess, self.UpdateTaskState)
    self:RemoveUIListener(EventId.ActSevenDay, self.RefreshUI)
    self:RemoveUIListener(EventId.ActSevenDayScore, self.UpdateRewardScore)
end

function ActSevenDay:SetData(activityId,actId)
    self.activityId = activityId
    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(actId)
    SFSNetwork.SendMessage(MsgDefines.GetSevenDayActInfo, activityId)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(activityId))
    self._title_txt:SetLocalText(actListData.name)
end

--更新任务
function ActSevenDay:UpdateTaskState()
    self.sevenDayInfo = DataCenter.ActSevenDayData:GetInfoByActId(tonumber(self.activityId))
    if self.sevenDayInfo and next(self.sevenDayInfo) then
        self.sevenDayInfo:CheckRedDot()
        self:RedDayRefresh()
        self:RefreshSelectData()
    end
end

--更新盒子
function ActSevenDay:UpdateRewardScore()
    self.sevenDayInfo =  DataCenter.ActSevenDayData:GetInfoByActId(tonumber(self.activityId))
    self:RedListDayRefresh()
    self:SetBoxes()
    self:SetSliderValue()
end

function ActSevenDay:SendData()
    SFSNetwork.SendMessage(MsgDefines.UserDayActInfo)
end

function ActSevenDay:RefreshUI()
    self.sevenDayInfo =  DataCenter.ActSevenDayData:GetInfoByActId(tonumber(self.activityId))
    self:RefreshTime()
    self:AddTimer()
    for i = 1, #self.sevenDayInfo.dayActs do
        self.day_togTab[i].txt:SetLocalText(self.sevenDayInfo.dayActs[i][1].type1_text)
        if self.sevenDayInfo.days >= i then
            self.day_togTab[i].lock:SetActive(false)
        else
            self.day_togTab[i].lock:SetActive(true)
        end
    end
    
    --要求背景跟随文字长度比例
    self.UI7day_titlebg:SetSizeDelta(Vector2(self._title_txt:GetWidth()+112,self.UI7day_titlebg:GetSizeDelta().y))

    self.sevenDayInfo:CheckRedDot()

    self:RedDayRefresh()
    
    local last = DataCenter.ActSevenDayData:GetLastVisitTab(tonumber(self.activityId))
    if last and next(last) then
        self.dayTabIndex = last[1]
        self.childTabIndex = last[2]
    else
        self.dayTabIndex = 1
        self.childTabIndex = 1
    end
    self.day_togTab[self.dayTabIndex].toggle:SetIsOn(true)
    self.listDay_togTab[self.childTabIndex].toggle:SetIsOn(true)
    self:SetSliderValue() 
    self:RefreshSelectData()
    self:SetBoxes()
end

--顶部数据
function ActSevenDay:SetSliderValue()
    
    local count = #self.sevenDayInfo.scoreReward
    local count1 = self.sevenDayInfo.scoreReward[1].needScore
    if self.sevenDayInfo.score <= count1 then
        self.slider_back:SetValue(string.format("%.1f", self.sevenDayInfo.score/count1))
        self.slider:SetValue(0)
    else
        self.slider_back:SetValue(1)
        self.slider:SetValue(string.format("%.1f", (self.sevenDayInfo.score - count1)/(self.sevenDayInfo.scoreReward[count].needScore - count1)) )
    end
    self._progress_txt:SetText(self.sevenDayInfo.score)

    for i=1,#self.sevenDayInfo.scoreReward do
        self.num_txtTab[i]:SetText(self.sevenDayInfo.scoreReward[i].needScore)
    end
end

function ActSevenDay:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function ActSevenDay:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

--刷新事件
function ActSevenDay:RefreshTime()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.sevenDayInfo.endTime < curTime then
        self:DeleteTimer()
    else
        self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(self.sevenDayInfo.endTime - curTime))
    end
end

--点天数
function ActSevenDay:ToggleControl(index)
    local isOn = self.day_togTab[index].toggle:GetIsOn()
    if isOn and self.dayTabIndex ~= index then
        self.dayTabIndex = index
        if self.childTabIndex ~= 1 then
            self.childTabIndex = 1
            self.listDay_togTab[1].toggle:SetIsOn(true)
        end
        self:RefreshSelectData()
    end
end

function ActSevenDay:RefreshSelectData()
    if self.sevenDayInfo == nil then
        return
    end
    
    for i = 1, 3 do
        if i == self.childTabIndex then
            --self.listDay_togTab[i].txt:SetColor(Color.New(0.7176471,0.4,0.1882353,1))
            self.listDay_togTab[i].txt:SetColor(tabSelect_color)
            
            self.listDay_togTab[i].txt.transform:Set_localPosition(0,32+7,0)
        else
            --self.listDay_togTab[i].txt:SetColor(Color.New(0.8470588,0.4784314,0.254902,1))
            self.listDay_togTab[i].txt:SetColor(tabUnSelect_color)
            self.listDay_togTab[i].txt.transform:Set_localPosition(0,32,0)
        end
    end
    
    local tasks = self.sevenDayInfo.dayActs[self.dayTabIndex][self.childTabIndex].tasks
    self.taskList = self.sevenDayInfo:SortTask(tasks)
    for i = 1, 3 do
        self.listDay_togTab[i].txt:SetLocalText(self.sevenDayInfo.dayActs[self.dayTabIndex][i].type2_text)
    end
    self:RedListDayRefresh()
    self:SetItemData()
end

function ActSevenDay:SetAllCellDestroy()
    self.content:RemoveComponents(UIActivitySevenDayItem)
    if self.model ~= nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

--更新任务
function ActSevenDay:SetItemData()
    self:SetAllCellDestroy()
    self.model = {}
    if next(self.taskList) then
        for i = 1, table.length(self.taskList) do
            --复制基础prefab，每次循环创建一次
            self.model[i] = self:GameObjectInstantiateAsync(UIAssets.UIActSevenDayNewItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                --go.gameObject:SetActive(true)
                go.transform:SetParent(self.content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name = i
                self.taskList[i].flyPos = self.gameObject.transform:Find("RightView/Rect_Top/inteCoin")
                self.taskList[i].day = self.dayTabIndex
                local cell = self.content:AddComponent(UIActivitySevenDayItem,go.name)
                cell:RefreshData(self.taskList[i],self.sevenDayInfo.days)
            end)
        end
    end
end

function ActSevenDay:SetBoxes()
    for i = 1, 6 do
        if self.sevenDayInfo.scoreReward[i].reward[1].rewardType == RewardType.HERO then
            -- 英雄奖励
            self._box_icon[i]:SetActive(false)
            self._hero_btn[i]:SetActive(true)
            self._hero_rect[i]:InitWithConfigId(self.sevenDayInfo.scoreReward[i].reward[1].itemId)
            self._hero_rece[i]:SetActive(self.sevenDayInfo.scoreReward[i].rewardFlag == 1)
            self._hero_effect[i]:SetActive(false)
            if self.sevenDayInfo.scoreReward[i].rewardFlag == 0 then
                self._hero_effect[i]:SetActive(self.sevenDayInfo.score >= self.sevenDayInfo.scoreReward[i].needScore)
            end
        else
            -- 普通奖励
            self._box_icon[i]:SetActive(true)
            self._hero_btn[i]:SetActive(false)
            self._box_rectTabEffect[i]:SetActive(false)
            self._box_rectTabEffect[i]:Enable(false)
            self._box_rectTab[i]:RefreshData(i, self.sevenDayInfo.scoreReward[i], self.sevenDayInfo.score, self._box_rectTabEffect[i],tonumber(self.activityId))
        end
    end
end

function ActSevenDay:OnHeroBtnClick(i)
    local rewardData = self.sevenDayInfo.scoreReward[i]
    if rewardData.rewardFlag == 0 then
        if self.sevenDayInfo.score >= rewardData.needScore then
            self.view.ctrl:GetSevenDayBoxReward(i)
            return
        end
    end
    local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(),tonumber(rewardData.reward[1].itemId))
    local param = {}
    param.heroId = tonumber(rewardData.reward[1].itemId)
    param.title = Localization:GetString(heroConfig.name)
    param.content = Localization:GetString(heroConfig.brief_desc)
    param.dir = 2
    param.defWidth = 300
    param.pivot = 0.5
    param.position = self._hero_btn[i].transform.position
    param.position.y = param.position.y - self._hero_btn[i]:GetSizeDelta().y * 0.5
    param.bindObject = self._hero_btn[i].gameObject
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTips, { anim = false }, param)
end

function ActSevenDay:RedDayRefresh()
    local redData = self.sevenDayInfo.taskRed
    for i = 1, #redData do
        self.day_togTabRed[i]:SetActive(false)
        for j = 1, #redData[i] do
            if redData[i][j] == 1 then
                self.day_togTabRed[i]:SetActive(true)
                local tab = DataCenter.ActSevenDayData:GetLastVisitTab(tonumber(self.activityId))
                if tab == nil or not next(tab) then
                    DataCenter.ActSevenDayData:SetLastVisitTab(tonumber(self.activityId),{ i, j })
                end
                break
            end
        end
    end
end

function ActSevenDay:RedListDayRefresh()
    local redData = self.sevenDayInfo.taskRed
    for i = 1, 3 do
        if i <= #redData[self.dayTabIndex] then
            self.listDay_togTab[i].red:SetActive(redData[self.dayTabIndex][i] == 1)
        else
            self.listDay_togTab[i].red:SetActive(false)
        end
    end
end

return ActSevenDay