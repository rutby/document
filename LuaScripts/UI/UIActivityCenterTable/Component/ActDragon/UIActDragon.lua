---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 2023/5/30 10:21
---
local UIActDragon = BaseClass("UIActDragon",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local AllianceFlagItem = require "UI.UIAlliance.UIAllianceFlag.Component.AllianceFlagItem"
function UIActDragon:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

function UIActDragon:ComponentDefine()
    self._actName1_txt = self:AddComponent(UIText,"rect/Top1/Txt_ActName1")
    self._actDesc1_txt = self:AddComponent(UIText,"rect/Top1/Txt_ActDesc1")
    self._actTime1_txt = self:AddComponent(UIText,"rect/Top1/LayoutElement1/Txt_ActTime1")
    self._element1     = self:AddComponent(UIBaseContainer,"rect/Top1/LayoutElement1")

    self._enrollTime_txt = self:AddComponent(UIText,"rect/Top1/Txt_EnrollTime")
    self._enrollDesc_txt = self:AddComponent(UIText,"rect/Top1/Txt_EnrollDesc")

    self._enroll_btn = self:AddComponent(UIButton,"rect/Top1/Btn_Enroll")
    self._enroll_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:ClickEnroll()
    end)
    self._enroll_txt = self:AddComponent(UIText,"rect/Top1/Btn_Enroll/Txt_Enroll")


    self._actName2_txt = self:AddComponent(UIText,"rect/Top2/Txt_ActName2")
    self._actDesc2_txt = self:AddComponent(UIText,"rect/Top2/Txt_ActDesc2")
    self._actTime2_txt = self:AddComponent(UIText,"rect/Top2/LayoutElement2/Txt_ActTime2")

    self._attack_btn = self:AddComponent(UIButton,"rect/Top2/Btn_Attack")
    self._attack_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:EnterBattle()
    end)
    self._attack_txt = self:AddComponent(UIText,"rect/Top2/Btn_Attack/Txt_Attack")

    self._marsTime_txt = self:AddComponent(UIText,"rect/Txt_MarsTime")

    self._top1_rect = self:AddComponent(UIBaseContainer,"rect/Top1")
    self._top2_rect = self:AddComponent(UIBaseContainer,"rect/Top2")

    self._rule_btn = self:AddComponent(UIButton,"rect/Rect_BtnList/Btn_Rule")
    self._rule_txt = self:AddComponent(UIText,"rect/Rect_BtnList/Btn_Rule/Txt_Rule")
    self._rule_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:ClickBtnRule()
    end)

    self._history_btn = self:AddComponent(UIButton,"rect/Rect_BtnList/Btn_History")
    self._history_txt = self:AddComponent(UIText,"rect/Rect_BtnList/Btn_History/Txt_History")
    self._history_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:ClickBtnHistory()
    end)

    self._manager_btn = self:AddComponent(UIButton,"rect/Rect_BtnList/Btn_Manager")
    self._manager_txt = self:AddComponent(UIText,"rect/Rect_BtnList/Btn_Manager/Txt_Manager")
    self._manager_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:ClickBtnManager()
    end)

    self._startGo = self:AddComponent(UIBaseContainer,"rect/Top2/startGo")

    self._element2     = self:AddComponent(UIBaseContainer,"rect/Top2/LayoutElement2")
    self._stateTips_txt = self:AddComponent(UIText,"rect/Top2/Txt_StateTips")
    self._warTips_txt = self:AddComponent(UIText,"rect/Top2/Txt_WarTips")

    self._redFlag = self:AddComponent(AllianceFlagItem,"rect/Top2/startGo/redGo/redAllianceIcon/AllianceFlagRed")
    self._redFlagFrame = self:AddComponent(UIImage,"rect/Top2/startGo/redGo/redAllianceIcon/AllianceFlagRed/Frame")
    self._redName_txt = self:AddComponent(UIText,"rect/Top2/startGo/redGo/redAllianceGo/redAllianceNameTxt")
    self._redPower_txt = self:AddComponent(UIText,"rect/Top2/startGo/redGo/redAllianceGo/RedLayoutElement/Txt_redPower")
    self._redMember_txt = self:AddComponent(UIText,"rect/Top2/startGo/redGo/redAllianceGo/Txt_redMember")
    self._redPower_rect = self:AddComponent(UIBaseContainer,"rect/Top2/startGo/redGo/redAllianceGo/RedLayoutElement")

    self._blueFlag = self:AddComponent(AllianceFlagItem,"rect/Top2/startGo/blueGo/blueAllianceIcon/AllianceFlagBlue")
    self._blueName_txt = self:AddComponent(UIText,"rect/Top2/startGo/blueGo/blueAllianceGo/blueAllianceNameTxt")
    self._bluePower_txt = self:AddComponent(UIText,"rect/Top2/startGo/blueGo/blueAllianceGo/BlueLayoutElement/Txt_bluePower")
    self._blueMember_txt = self:AddComponent(UIText,"rect/Top2/startGo/blueGo/blueAllianceGo/Txt_blueMember")
    self._bluePower_rect = self:AddComponent(UIBaseContainer,"rect/Top2/startGo/blueGo/blueAllianceGo/BlueLayoutElement")

    self._selfGo = self:AddComponent(UIBaseContainer,"rect/Top2/selfGo")
    self._selfFlag = self:AddComponent(AllianceFlagItem,"rect/Top2/selfGo/selfAllianceIcon/AllianceFlagSelf")
    self._selfName_txt = self:AddComponent(UIText,"rect/Top2/selfGo/selfAllianceGo/selfAllianceNameTxt")

    self.warning_obj = self:AddComponent(UIBaseContainer,"rect/Top2/warning")
    self.warning_txt = self:AddComponent(UIText,"rect/Top2/warning/warningTxt")
end

function UIActDragon:ComponentDestroy()

end

function UIActDragon:DataDefine()
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
    self.timer_actionMars = function(temp)
        self:RefreshMarsTime(temp)
    end
    self.worldText = Localization:GetString("280042")..": "
end

function UIActDragon:OnDestroy()
    self:ComponentDestroy()
    self:DeleteTimer()
    self:DeleteMarsTimer()
    base.OnDestroy(self)
end

function UIActDragon:OnEnable()
    base.OnEnable(self)
end

function UIActDragon:OnDisable()
    base.OnDisable(self)
end

function UIActDragon:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.DragonInfoRefresh, self.OnRefresh)
end

function UIActDragon:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.DragonInfoRefresh, self.OnRefresh)
end

function UIActDragon:SetData(activityId,actId)
    self.activityId = activityId
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    self.OpenTime = false
    DataCenter.ActDragonManager:SendGetInfo()
    self:SetDialog(actListData)
    self:RefreshMarsTime()
    self:AddMarsTime()
    if CommonUtil.CheckIsLessThanTargetVersion("1.250.510") then
        UIUtil.ShowVersionMessage()
    end
end

function UIActDragon:SetDialog(actListData)
    self._actName1_txt:SetLocalText(actListData.name)
    self._actName2_txt:SetLocalText(actListData.name)
    self._actDesc2_txt:SetLocalText(actListData.desc_info)
    self._actDesc1_txt:SetLocalText(actListData.desc_info)

    self._enrollTime_txt:SetText(Localization:GetString("376018")..UITimeManager:GetInstance():TimeStampToTimeForServer(actListData.stopSignUpTime))
    self._enrollDesc_txt:SetLocalText(376019)

    self._rule_txt:SetLocalText(376021)
    self._history_txt:SetLocalText(376022)
    self._manager_txt:SetLocalText(376023)

    self._attack_txt:SetLocalText(376164)

    --local limitTime = LuaEntry.DataConfig:TryGetStr("dragon_battle_base", "k8")
    --self._warTips_txt:SetLocalText(376111,limitTime / 60)
end

function UIActDragon:OnRefresh()
    self.dragonInfo = DataCenter.ActDragonManager:GetDragonInfo()

    if not self.dragonInfo then
        return
    end
    self._warTips_txt:SetActive(false)
    self.actListData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    --报名状态
    if self.dragonInfo.signUp == DataCenter.ActDragonManager.SignUpState.NoSignUp then
        self._enroll_txt:SetLocalText(302024)
        self._element1:SetActive(false)
        self._element2:SetActive(false)
        self._manager_btn:SetActive(false)
    elseif self.dragonInfo.signUp == DataCenter.ActDragonManager.SignUpState.SignUp then
        self._enroll_txt:SetLocalText(376103)
        self._element1:SetActive(true)
        self._element2:SetActive(true)
        self._manager_btn:SetActive(true)
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if self.actListData.stopSignUpTime < curTime and self.dragonInfo.timeInfo and self.dragonInfo.timeInfo.battleOpenTime then
            Setting:SetString(LuaEntry.Player.uid .. "_" ..SettingKeys.LAST_DRAGON_BATTLE_TIME,self.dragonInfo.timeInfo.battleOpenTime)
        end
    end

    if self.dragonInfo.matchResult == 1 then    --匹配到对手
        self._startGo:SetActive(true)
        self._selfGo:SetActive(false)
        self:ShowVSAlliance()
    end
    self:DeleteTimer()
    self:AddTimer()
    self:RefreshTime()
    self:ShowSelfAlliance()
end

function UIActDragon:ShowSelfAlliance()
    local baseData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
    self._selfFlag:SetData(baseData.icon)
    self._selfName_txt:SetLocalText(372761,LuaEntry.Player:GetCurServerId(),"["..baseData.abbr.."]".."\n"..baseData.allianceName)
end

function UIActDragon:ShowVSAlliance()
    local vsInfoArr = self.dragonInfo.vsInfoArr
    if vsInfoArr then
        for i = 1 ,table.count(vsInfoArr) do
            if vsInfoArr[i].allianceId == LuaEntry.Player:GetAllianceUid() then     --蓝方
                self._blueFlag:SetData(vsInfoArr[i].icon)
                self._blueName_txt:SetLocalText(372761,vsInfoArr[i].serverId,"["..vsInfoArr[i].abbr.."]".."\n"..vsInfoArr[i].name)
                self._bluePower_txt:SetText(string.GetFormattedSeperatorNum(vsInfoArr[i].strength))
                self._blueMember_txt:SetLocalText(150033,vsInfoArr[i].battleNum,vsInfoArr[i].mainNum)
            else     --红方
                self._redFlag:SetData(vsInfoArr[i].icon)
                self._redName_txt:SetLocalText(372761,vsInfoArr[i].serverId,"["..vsInfoArr[i].abbr.."]".."\n"..vsInfoArr[i].name)
                self._redPower_txt:SetText(string.GetFormattedSeperatorNum(vsInfoArr[i].strength))
                self._redMember_txt:SetLocalText(150033,vsInfoArr[i].battleNum,vsInfoArr[i].mainNum)
            end
        end
    end
end

--规则说明
function UIActDragon:ClickBtnRule()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIActDragonRule)
end
--历史战绩
function UIActDragon:ClickBtnHistory()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIActDragonHistory)
end
--出战管理
function UIActDragon:ClickBtnManager()
    if LuaEntry.Player:IsInAlliance() then
        if self.dragonInfo~=nil and self.dragonInfo.signUp == DataCenter.ActDragonManager.SignUpState.SignUp then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            local isInSignUp = false
            if self.actListData~=nil and self.actListData.stopSignUpTime~=nil and curTime < self.actListData.stopSignUpTime then
                isInSignUp = true
            end
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIDragonAllianceSelectMember,isInSignUp)
        else
            UIUtil.ShowTipsId(376105)
        end

    else
        UIUtil.ShowTipsId(390856)
    end
end


--报名
function UIActDragon:ClickEnroll()
    --检查联盟
    if LuaEntry.Player:IsInAlliance() then
        --查看报名可选时段
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActDragonBattleTime)
    else
        UIUtil.ShowTipsId(390856)
    end
end

--攻击/进入战场
function UIActDragon:EnterBattle()
    if CommonUtil.CheckIsLessThanTargetVersion("1.250.510") then
        UIUtil.ShowVersionMessage()
        return
    end
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.APS_BUILD_WORMHOLE_MAIN)
    if buildData == nil then -- A口
        UIUtil.ShowTipsId(140258)
        return
    end
    local crossBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.WORM_HOLE_CROSS)
    if crossBuildData~=nil then
        UIUtil.ShowTipsId(376178)
        return
    end
    
    if LuaEntry.Player:IsInAlliance()==false then
        UIUtil.ShowTipsId(390856)
    end
    local isAllFree = DataCenter.ArmyFormationDataManager:IsAllFormationFree()
    if isAllFree == false then
        UIUtil.ShowTipsId(376138)
        return
    end
    if DataCenter.HospitalManager:IsHaveInjuredSolider() then
        UIUtil.ShowTipsId(376144)
        return
    end
    local queue = DataCenter.QueueDataManager:GetQueueByType(NewQueueType.Hospital)
    if queue ~= nil and queue:GetQueueState() ~= NewQueueState.Free then
        UIUtil.ShowTipsId(376145)
        return
    end
    self.dragonInfo = DataCenter.ActDragonManager:GetDragonInfo()
    if not self.dragonInfo then
        return
    end

    if self.dragonInfo.assigned == 0 then
        UIUtil.ShowTipsId(376162)
        return
    end
    if self.dragonInfo.timeInfo~=nil then
        --local limitTime = LuaEntry.DataConfig:TryGetNum("dragon_battle_base", "k8")   *去掉限制时间弹窗提示
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if self.dragonInfo.timeInfo.battleOpenTime < curTime then
            --local endTime = self.dragonInfo.timeInfo.battleOpenTime+(limitTime*1000)
            --if endTime<curTime then
            --    UIUtil.ShowTips(Localization:GetString("376111",limitTime / 60))
            --    return
            --end
        else
            if self.dragonInfo.assigned ==2 then
                UIUtil.ShowTipsId(376146)
                return
            end
        end

    end
    local param = {}
    param.buildingId = BuildingTypes.WORM_HOLE_CROSS
    param.pointId = 0
    param.itemUuid = ""
    param.pathTime = 0
    param.robotUuid = 0
    param.targetServerId = self.dragonInfo.battleServerId
    param.worldId = self.dragonInfo.worldId
    SFSNetwork.SendMessage(MsgDefines.FreeBuildingPlaceNew,param)
    GoToUtil.CloseAllWindows()
    EventManager:GetInstance():Broadcast(EventId.OnEnterDragonUI,UIEnterDragonType.Open)
end

--{{{报名倒计时
function UIActDragon:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action, false,false,false)
    end
    self.timer:Start()
end

function UIActDragon:RefreshTime()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime < self.actListData.stopSignUpTime then --1
        --报名时间内
        self._top1_rect:SetActive(true)
        self._top2_rect:SetActive(false)
        self:RefreshAlliance(curTime,1)
    elseif curTime < self.actListData.battleOpenTime then   --2
        --报名结束，开始匹配
        self._top1_rect:SetActive(false)
        self._top2_rect:SetActive(true)
        self:RefreshAlliance(curTime,2)
    elseif curTime < self.actListData.endTime then  --3
        --匹配结束 开始准备战斗
        if not self.OpenTime then
            --匹配结束后，请求一次信息获取匹配结果
            self.OpenTime = true
            DataCenter.ActDragonManager:SendGetInfo()
        end
        self._top1_rect:SetActive(false)
        self._top2_rect:SetActive(true)
        self:RefreshAlliance(curTime,3)
    else
        self:DeleteTimer()
    end
end


function UIActDragon:RefreshAlliance(curTime,state)
    self._warTips_txt:SetActive(false)
    self.warning_obj:SetActive(false)
    --检查是否报名
    if self.dragonInfo.signUp == DataCenter.ActDragonManager.SignUpState.NoSignUp then      --未报名
        if state == 1 then
            --报名时间内
        elseif state == 2 or state == 3 then        --匹配时间内或匹配结束，等待战斗开始或开始战斗
            self._startGo:SetActive(false)
            self._selfGo:SetActive(true)
            self._stateTips_txt:SetActive(true)
            self._stateTips_txt:SetLocalText(376105)
            self._attack_btn:SetActive(false)
            self:DeleteTimer()
        end
    elseif self.dragonInfo.signUp == DataCenter.ActDragonManager.SignUpState.SignUp then    --报名
        if state == 1 then
            --报名时间内
            self._actTime1_txt:SetText(Localization:GetString("376016")..UITimeManager:GetInstance():TimeStampToTimeForServer(self.dragonInfo.timeInfo.battleOpenTime))   --报名场准备开始时间
        elseif state == 2 then
            --匹配时间内
            self._startGo:SetActive(false)
            self._selfGo:SetActive(true)
            self._attack_btn:SetActive(false)
            self._stateTips_txt:SetActive(true)
            self._stateTips_txt:SetLocalText(376104)
            self._actTime2_txt:SetText(Localization:GetString("376016")..UITimeManager:GetInstance():TimeStampToTimeForServer(self.dragonInfo.timeInfo.battleOpenTime))
        elseif state == 3 then
            --匹配结束，准备或开始战斗
            if self.dragonInfo.timeInfo then
                if self.dragonInfo.matchResult == 1 then    --匹配到对手
                    self._startGo:SetActive(true)
                    self._selfGo:SetActive(false)
                    if curTime < self.dragonInfo.timeInfo.prepTime then
                        --等待战斗开启
                        self._stateTips_txt:SetActive(true)
                        self._stateTips_txt:SetLocalText(376108)
                        self._attack_btn:SetActive(false)
                        self._actTime2_txt:SetText(Localization:GetString("376109")..": "..UITimeManager:GetInstance():MilliSecondToFmtString(self.dragonInfo.timeInfo.prepTime - curTime))
                    elseif curTime < self.dragonInfo.timeInfo.battleOpenTime then
                        --准备阶段
                        self._actTime2_txt:SetText(Localization:GetString("376125")..": "..UITimeManager:GetInstance():MilliSecondToFmtString(self.dragonInfo.timeInfo.battleOpenTime - curTime))
                        self._attack_btn:SetActive(true)
                        if self.dragonInfo.assigned == 1 then
                            CS.UIGray.SetGray(self._attack_btn.transform, false, true)
                        elseif self.dragonInfo.assigned ==2 then
                            CS.UIGray.SetGray(self._attack_btn.transform, true, true)
                            self.warning_obj:SetActive(true)
                            self.warning_txt:SetLocalText(376146)
                        else
                            CS.UIGray.SetGray(self._attack_btn.transform, true, true)
                            self.warning_obj:SetActive(true)
                            self.warning_txt:SetLocalText(376162)
                        end
                        self._stateTips_txt:SetActive(false)
                    elseif self.dragonInfo.timeInfo.battleOpenTime < curTime and curTime < self.dragonInfo.timeInfo.endTime then
                        --战斗已开始
                        self._actTime2_txt:SetText(Localization:GetString("376110")..UITimeManager:GetInstance():MilliSecondToFmtString(curTime - self.dragonInfo.timeInfo.battleOpenTime))
                        self._stateTips_txt:SetActive(false)
                        self._attack_btn:SetActive(true)
                        --self._warTips_txt:SetActive(true)
                        if self.dragonInfo.assigned == 1 then
                            CS.UIGray.SetGray(self._attack_btn.transform, false, true)
                        elseif self.dragonInfo.assigned ==2 then
                            CS.UIGray.SetGray(self._attack_btn.transform, false, true)
                            self.warning_obj:SetActive(true)
                            self.warning_txt:SetLocalText(376146)
                        else
                            CS.UIGray.SetGray(self._attack_btn.transform, true, true)
                            self.warning_obj:SetActive(true)
                            self.warning_txt:SetLocalText(376162)
                        end
                    elseif self.dragonInfo.timeInfo.endTime < curTime then
                        --战场结束
                        self._element2:SetActive(false)
                        self._warTips_txt:SetActive(false)
                        self._attack_btn:SetActive(false)
                        self._stateTips_txt:SetActive(true)
                        self._stateTips_txt:SetLocalText(302861)
                        self:DeleteTimer()
                    end
                elseif self.dragonInfo.matchResult == 2 or self.dragonInfo.matchResult == 3 then    --轮空  服务器已满
                    self._attack_btn:SetActive(false)
                    self._stateTips_txt:SetActive(true)
                    self._stateTips_txt:SetText(Localization:GetString(376106).."\n"..Localization:GetString(376107))
                    self._startGo:SetActive(false)
                    self._selfGo:SetActive(true)
                    self._element2:SetActive(false)
                    self:DeleteTimer()
                elseif self.dragonInfo.matchResult == 0 then
                    --当匹配来对待
                    self._startGo:SetActive(false)
                    self._selfGo:SetActive(true)
                    self._attack_btn:SetActive(false)
                    self._stateTips_txt:SetActive(true)
                    self._stateTips_txt:SetLocalText(376104)
                end
            end
        end
    end
end

function UIActDragon:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end
--}}}

--{{{服务器时间
function UIActDragon:AddMarsTime()
    if self.timer_mars == nil then
        self.timer_mars = TimerManager:GetInstance():GetTimer(1, self.timer_actionMars ,self, false,false,false)
    end
    self.timer_mars:Start()
end

function UIActDragon:RefreshMarsTime()
    self._marsTime_txt:SetText(self.worldText..UITimeManager:GetInstance():TimeStampToTimeForServer(UITimeManager:GetInstance():GetServerTime()))
end

function UIActDragon:DeleteMarsTimer()
    if self.timer_mars ~= nil then
        self.timer_mars:Stop()
        self.timer_mars = nil
    end
end
--}}}


return UIActDragon