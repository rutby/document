---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 
--- 和LeadingQuestMain一样，额外需求是UI不一样 将两个活动合到一起显示

local LeadingQuestOther = BaseClass("LeadingQuestOther", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local LeadingQuestItem = require "UI.UIActivityCenterTable.Component.LeadingTarget.LeadingQuestItem"
local LastSeasonHeroInfo = require "UI.UIActivityCenterTable.Component.LeadingTarget.LastSeasonHeroInfo"
local EffectDesc = require "UI.UIDecoration.UIDecorationMain.Component.EffectDesc1"

local AllianceRank = require "UI.UIActivityCenterTable.Component.LeadingTarget.AllianceRank"
local LeadingQuestReward = require "UI.UIActivityCenterTable.Component.LeadingTarget.LeadingQuestReward"
local CityCell = require "UI.UIActivityCenterTable.Component.LeadingTarget.CityCell"
local Screen = CS.UnityEngine.Screen

local title_path = "RightView/Top/title"
local infoBtn_path = "RightView/Top/title/infoBtn"
local subTitle_path = "RightView/Top/subTitle"
local activtyTime_path = "RightView/Top/actTime"
local remainTime_path = "RightView/Top/remainTime"
local time_icon_path = "RightView/Top/TimeIcon"

local bottom_rect_path = "RightView/Rect_Bottom"
local svQuest_path = "RightView/Rect_Bottom/ScrollView"
local hero_info_path = "RightView1"
local normal_path = "RightView"
local hero_info_bg_path = "Bg2"
local content_path = "RightView/Rect_Bottom/ScrollView/Viewport/Content"
local hero_record_btn_path = "RightView/HeroRecordBtn"
local hero_record_btn_text_path = "RightView/HeroRecordBtn/HeroRecordBtnText"
local score_path = "RightView/Score"
local score_text_path = "RightView/Score/ScoreText"
local score_icon_path = "RightView/Score/ScoreImg"

local decoration_btn_path = "Effect/Decoration_Btn"
local decoration_btn_text_path = "Effect/Decoration_Btn/Decoration_Icon/Decoration_Text"

local decoration_effect_path = "Effect"

local Btn_Task = "RightView/Rect_BtnList/Btn_Task"
local Txt_Task = "RightView/Rect_BtnList/Btn_Task/Txt_Task"
local Btn_Rank = "RightView/Rect_BtnList/Btn_Rank"
local Txt_Rank = "RightView/Rect_BtnList/Btn_Rank/Txt_Rank"
local Btn_Reward = "RightView/Rect_BtnList/Btn_Reward"
local Txt_Reward = "RightView/Rect_BtnList/Btn_Reward/Txt_Reward"

local allianceRank_rect_path = "RightView/Rect_AllianceRank"
local rankReward_rect_path = "RightView/Rect_Reward"

local tabSelect_img = "Assets/Main/Sprites/UI/Common/New/Common_btn_tab_open.png"
local tabUnSelect_img = "Assets/Main/Sprites/UI/Common/New/Common_btn_tab_close.png"
local tabSelect_color= Color.New(255/255,255/255,255/255,1)
local tabUnSelect_color= Color.New(183/255,102/255,48/255,1)
local tabSelect_shadow= Color.New(128/255,56/255,24/255,1)
local city_content_path = "RightView/Rect_City"

local BtnType = {}

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ClearCityScroll()
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UITextMeshProUGUI, title_path)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)
    self._bottom_rect = self:AddComponent(UIBaseContainer,bottom_rect_path)
    self.subTitleN = self:AddComponent(UITextMeshProUGUI, subTitle_path)
    self.activityTimeN = self:AddComponent(UITextMeshProUGUI, activtyTime_path)
    self.remainTimeN = self:AddComponent(UITextMeshProUGUI, remainTime_path)
    self.svQuestsN = self:AddComponent(UIScrollView, svQuest_path)
    self.svQuestsN:SetOnItemMoveIn(function(itemObj, index)
        self:OnQuestItemMoveIn(itemObj, index)
    end)
    self.svQuestsN:SetOnItemMoveOut(function(itemObj, index)
        self:OnQuestItemMoveOut(itemObj, index)
    end)
    self.contentN = self:AddComponent(UIBaseContainer, content_path)
    self.normal = self:AddComponent(UIBaseContainer, normal_path)
    self.normal:SetActive(true)
    self.time_icon = self:AddComponent(UIImage, time_icon_path)
    
    
    self._task_btn = self:AddComponent(UIButton,Btn_Task)
    self._task_txt = self:AddComponent(UITextMeshProUGUI,Txt_Task)
    self._task_txt:SetLocalText(100179)
    self._task_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickChangeBtn(1)
    end)

    self._rank_btn = self:AddComponent(UIButton,Btn_Rank)
    self._rank_txt = self:AddComponent(UITextMeshProUGUI,Txt_Rank)
    self._rank_txt:SetLocalText(280137)
    self._rank_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickChangeBtn(2)
    end)

    self._reward_btn = self:AddComponent(UIButton,Btn_Reward)
    self._reward_txt = self:AddComponent(UITextMeshProUGUI,Txt_Reward)
    self._reward_txt:SetLocalText(372815)
    self._reward_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickChangeBtn(3)
    end)
    
    self._allianceRank_rect = self:AddComponent(AllianceRank,allianceRank_rect_path)
    self._rankReward_rect = self:AddComponent(LeadingQuestReward,rankReward_rect_path)
    
    self.city_content = self:AddComponent(UIScrollView, city_content_path)
    self.city_content:SetOnItemMoveIn(function(itemObj, index)
        self:OnCityItemMoveIn(itemObj, index)
    end)
    self.city_content:SetOnItemMoveOut(function(itemObj, index)
        self:OnCityItemMoveOut(itemObj, index)
    end)
end

local function ComponentDestroy(self)
    self:HideDecorationEffect()
    self:HideLastSeasonHeroInfo()
    if self.hero_record_btn then
        self.hero_record_btn:SetActive(false)
    end
    if self.score then
        self.score:SetActive(false)
    end
    if self.hero_info_bg ~= nil then
        self.hero_info_bg:SetActive(false)
    end

    self.score = nil
    self.hero_record_btn = nil
    self.titleN = nil
    self.subTitleN = nil
    self.activityTimeN = nil
    self.remainTimeN = nil
    self.contentN = nil
    self.templateN = nil
    self.bg1N = nil
    self.bg2N = nil
end

local function DataDefine(self)
    self.activityId = nil
    self.activityData = nil
    self.CountDownTimerAction = nil
    self.countDownTimer = nil
end

local function DataDestroy(self)
    self.activityId = nil
    self.activityData = nil
    self.CountDownTimerAction = nil
    self.countDownTimer = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnClaimRewardEffFinish, self.ShowTasks)
    self:AddUIListener(EventId.RefreshItems, self.RefreshScoreText)
    self:AddUIListener(EventId.GetRankRefresh, self.OnRefreshRank)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnClaimRewardEffFinish, self.ShowTasks)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshScoreText)
    self:RemoveUIListener(EventId.GetRankRefresh, self.OnRefreshRank)
    base.OnRemoveListener(self)
end

local function SetData(self, activityId)

    self:ClearCityScroll()
    self.cityList = DataCenter.AllianceCityTemplateManager:GetCityActScore()
    if #self.cityList>0 then
        self.city_content:SetTotalCount(#self.cityList)
        self.city_content:RefillCells()
    end
    
    DataCenter.ActivityListDataManager:SetActivityVisitedEndTime(activityId)
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(EnumActivity.LeadingQuest.Type)
    self.activityData = nil
    if table.count(dataList) > 0 then
        for i = 1 ,table.count(dataList) do
            if dataList[i].activity_pic == "lingtuzhizhan1" then
                self.activityData = dataList[i]
                break
            end
        end
    end
    self.rankRewardActId = activityId
    if not self.activityData then
        self._task_btn:SetActive(false)
        self.lastGroup = 0
        self:OnClickChangeBtn(2)
        self:RefreshActView(activityId)
        return
    end
    --self.activityData = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityId)
    self:RefreshAll()
    if self.activityData.type == EnumActivity.LeadingQuest.Type and self.activityData.notice_info == EnumActivityNoticeInfo.EnumActivityNoticeInfo_Hero 
    and not self:IsPreview() then
        if self.hero_record_btn == nil then
            self.hero_record_btn = self:AddComponent(UIButton, hero_record_btn_path)
            self.hero_record_btn:SetActive(true)
            self.hero_record_btn_text = self:AddComponent(UITextMeshProUGUI, hero_record_btn_text_path)
            local seasonId = DataCenter.SeasonDataManager:GetSeasonId() or 0
            self.hero_record_btn_text:SetLocalText(372558, seasonId - 1)
            self.hero_record_btn:SetOnClick(function()
                SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
                self:OnRecordClick()
            end)
            
            self.score = self:AddComponent(UIBaseContainer, score_path)
            self.score_text = self:AddComponent(UITextMeshProUGUI, score_text_path)
            self.score_icon = self:AddComponent(UIImage, score_icon_path)
            self.score:SetActive(true)
            local itemId = toInt(self.activityData.para1)
            self.score_icon:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(itemId))
            self:RefreshScoreText()
        end
        --local isNew = DataCenter.ActivityListDataManager:IsActivityNew(self.activityId)
        --if isNew then
        --    self:ShowLastSeasonHeroInfo(isNew)
        --    self.hero_record_btn:SetActive(false)
        --end
    end
    CS.GameEntry.Setting:SetBool("OpenedLeadingQuestView_" .. LuaEntry.Player.uid, true)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    
    --self:ShowDecorationEffect()
end

--当任务活动结束时，调用该刷新
local function RefreshActView(self,activityId)
    self.activityData = DataCenter.ActivityListDataManager:GetActivityDataById(activityId)
    self.titleN:SetText(Localization:GetString(self.activityData.name))
    local startT = UITimeManager:GetInstance():TimeStampToDayForLocal(self.activityData.startTime)
    local endT = UITimeManager:GetInstance():TimeStampToDayForLocal(self.activityData.endTime)
    self.activityTimeN:SetText(startT .. "-" .. endT)
    self.subTitleN:SetText(Localization:GetString(self.activityData.desc_info))
    self.remainTimeN:SetLocalText(370100)
    self.time_icon:SetActive(true)
end

local function RefreshScoreText(self)
    if self.score_text == nil or self.activityData == nil then
        return
    end
    local itemId = toInt(self.activityData.para1)
    local itemNum = DataCenter.ItemData:GetItemCount(itemId)
    self.score_text:SetText(string.GetFormattedSeperatorNum(itemNum))
end

local function RefreshAll(self)
    if self.activityData.type == EnumActivity.LeadingQuest.Type and self.activityData.notice_info == EnumActivityNoticeInfo.EnumActivityNoticeInfo_Hero then
        local seasonId = DataCenter.SeasonDataManager:GetSeasonId() or 0
        if not self:IsPreview() then
            self.titleN:SetLocalText(self.activityData.name, seasonId - 1)
        else
            self.titleN:SetLocalText(self.activityData.name, seasonId)
        end
    elseif self.activityData.type == EnumActivity.LeadingQuest.Type and not string.IsNullOrEmpty(self.activityData.unlock_hero) then
        local seasonId = DataCenter.SeasonDataManager:GetSeasonId() or 0
        self.titleN:SetLocalText(self.activityData.name, seasonId)
    else
        self.titleN:SetText(Localization:GetString(self.activityData.name))
    end
    self.subTitleN:SetText(Localization:GetString(self.activityData.desc_info))
    if string.IsNullOrEmpty(self.activityData.story) then
        self.infoBtnN:SetActive(false)
    else
        self.infoBtnN:SetActive(true)
    end

    if not self:IsPreview() then
        local startT = UITimeManager:GetInstance():TimeStampToDayForLocal(self.activityData.startTime)
        local endT = UITimeManager:GetInstance():TimeStampToDayForLocal(self.activityData.endTime)
        self.activityTimeN:SetText(startT .. "-" .. endT)
        self:AddCountDownTimer()
        self:RefreshRemainTime()
        self.time_icon:SetActive(true)
    else
        self.activityTimeN:SetText("")
        self.time_icon:SetActive(false)
        self.remainTimeN:SetText("")
        self:DelCountDownTimer()
    end
    
    self:ShowTasks()

    if self.isEndAct then
        self._task_btn:SetActive(false)
    else
        self._task_btn:SetActive(true)
        -- 默认显示任务
        self.lastGroup = 0
        self:OnClickChangeBtn(1)
    end
end

local function GetItemBgPath(self)
    local bgPath = "Assets/Main/TextureEx/UIActivity/%s.png"
    local tempBg = self.activityData.activity_pic
    return string.format(bgPath, tempBg .. "_3")
end

local function GetTaskListSorted(self)
    if not self.activityData then
        return {}
    end
    
    local tasks = {}
    local taskGroups = self.activityData:GetTaskGroups()
    for i, taskList in ipairs(taskGroups) do
        for m, taskId in ipairs(taskList) do
            local taskInfo = DataCenter.TaskManager:FindTaskInfo(taskId)
            if not taskInfo or taskInfo.state == 1 or taskInfo.state == 0 or m == #taskList then
                table.insert(tasks, taskId)
                break
            end
        end
    end
    
    table.sort(tasks, function(a, b)
        local taskValueA = DataCenter.TaskManager:FindTaskInfo(a)
        local taskValueB = DataCenter.TaskManager:FindTaskInfo(b)
        if not taskValueA then
            return false
        elseif not taskValueB then
            return true
        else
            if taskValueA.state ~= taskValueB.state then
                if taskValueA.state == 1 then
                    return true
                elseif taskValueB.state == 1 then
                    return false
                elseif taskValueA.state == 2 then
                    return false
                elseif taskValueB.state == 2 then
                    return true
                end
            else
                return tonumber(a) < tonumber(b)
            end
        end
    end)
    return tasks
end

local function ShowTasks(self)
    self.taskList = self:GetTaskListSorted()
    if #self.taskList>0 then
        self.svQuestsN:SetTotalCount(#self.taskList)
        self.svQuestsN:RefillCells()
    end
end

local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.activityData.endTime - curTime
    if remainTime > 0 then
        self.isEndAct = false
        if self.activityData:CheckIfIsToEnd() then
            self.remainTimeN:SetColorRGBA(0.91, 0.26, 0.26, 1)
        end
        self.remainTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.isEndAct = true
        self.remainTimeN:SetLocalText(370100)
        self:DelCountDownTimer()
        self._task_btn:SetActive(false)
        self.lastGroup = 0
        self:OnClickChangeBtn(2)
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function OnQuestItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.svQuestsN:AddComponent(LeadingQuestItem, itemObj)
    cellItem:SetItem(self.taskList[index], nil, Bind(self, self.GetFlyPos), self:IsPreview(),true,self.activityData)
end

local function OnQuestItemMoveOut(self, itemObj, index)
    self.svQuestsN:RemoveComponent(itemObj.name, LeadingQuestItem)
end

local function ClearScroll(self)
    self.svQuestsN:ClearCells()
    self.svQuestsN:RemoveComponents(LeadingQuestItem)
end


local function OnClickInfoBtn(self)
    if self.activityData and self.activityData.story then
        UIUtil.ShowIntro(Localization:GetString(self.activityData.name), Localization:GetString("100239"), Localization:GetString(self.activityData.story))
    end
end

local function ShowLastSeasonHeroInfo(self, isNew)
    if self.lastSeasonInfo == nil then
        self.lastSeasonInfo = self:AddComponent(LastSeasonHeroInfo, hero_info_path)
        self.lastSeasonInfo:SetClickFun(Bind(self, self.HideLastSeasonHeroInfo))
    end
    if self.hero_info_bg == nil then
        self.hero_info_bg = self:AddComponent(UIImage, hero_info_bg_path)
    end
    self.hero_info_bg:SetActive(true)
    self.lastSeasonInfo:SetActive(true)
    self.lastSeasonInfo:RefreshView(self.activityData.name, isNew)
    self.normal:SetActive(false)
end

local function HideLastSeasonHeroInfo(self)
    if self.lastSeasonInfo ~= nil then
        self.lastSeasonInfo:SetActive(false)
    end
    self.normal:SetActive(true)
    if self.hero_info_bg ~= nil then
        self.hero_info_bg:SetActive(false)
    end

    if self.hero_record_btn and not self.hero_record_btn:GetActive() then
        self.hero_record_btn:SetActive(true)
        local endPos = self.hero_record_btn.transform.position
        local scaleFactor = UIManager:GetInstance():GetScaleFactor()
        self.hero_record_btn.transform.position = Vector3.New(Screen.width * scaleFactor / 2, Screen.height * scaleFactor / 2, 0)
        self.hero_record_btn.transform:DOMove(endPos, 0.7):SetEase(CS.DG.Tweening.Ease.OutCubic)
    end
end

local function OnRecordClick(self)
    if self.lastSeasonInfo == nil or not self.lastSeasonInfo:GetActive() then
        self:ShowLastSeasonHeroInfo()
    else
        self:HideLastSeasonHeroInfo()
    end
end

local function GetFlyPos(self, itemId, srcPos)
    if self.activityData and self.score_icon and self.score:GetActive() and toInt(self.activityData.para1) == toInt(itemId) then
        local pos = self.score_icon.transform.position
        srcPos.x = pos.x
        srcPos.y = pos.y
    end
end

local function IsPreview(self)
    if not string.IsNullOrEmpty(self.activityData.unlock_hero) then
        local toHeroId = DataCenter.HeroEvolveActivityManager:GetToHeroId()
        if toHeroId == 0 or string.IsNullOrEmpty(DataCenter.HeroDataManager:GetHeroById(toHeroId)) then
            return true
        end
        return false
    end
    return self.activityData.sub_type == ActivityEnum.ActivitySubType.ActivitySubType_1
end

local function OnDecorationClick(self)
    if self.activityData == nil then
        return
    end
    local decorationId = toInt(self.activityData.para2)
    local decorationTemplate = DataCenter.DecorationTemplateManager:GetTemplate(decorationId)
    if decorationTemplate then
        DecorationUtil.OpenDecorationPanel(decorationTemplate.type, decorationTemplate.id, self.activityId)
    end
end

local function ShowDecorationEffect(self)
    if self.activityData == nil then
        return
    end
    local decorationId = toInt(self.activityData.para2)
    local decorationConfig = DataCenter.DecorationTemplateManager:GetTemplate(decorationId)
    if decorationConfig ~= nil then
        if self.decorationEffect == nil then
            self.decorationEffect = self:AddComponent(EffectDesc, decoration_effect_path)
            self.decoration_btn = self:AddComponent(UIButton, decoration_btn_path)
            self.decoration_btn:SetOnClick(function()
                self:OnDecorationClick()
            end)
            self.decoration_btn_text = self:AddComponent(UITextMeshProUGUI, decoration_btn_text_path)
            self.decoration_btn_text:SetLocalText(110036)
        end
        self.decorationEffect:SetActive(true)
        local effectData = DecorationUtil.GetEffectDesc(decorationId)
        self.decorationEffect:ReInit(effectData)
    end
end

local function HideDecorationEffect(self)
    if self.decorationEffect ~= nil then
        self.decorationEffect:SetActive(false)
    end
end


local function OnClickChangeBtn(self,type)
    if self.lastGroup ~= type then
        self.lastGroup = type
        if type == 1 then
            self._task_btn:LoadSprite(tabSelect_img)
            self._rank_btn:LoadSprite(tabUnSelect_img)
            self._reward_btn:LoadSprite(tabUnSelect_img)
            self._task_txt:SetColor(tabSelect_color)
            self._rank_txt:SetColor(tabUnSelect_color)
            self._reward_txt:SetColor(tabUnSelect_color)
           
            self._bottom_rect:SetActive(true)
            self._allianceRank_rect:SetActive(false)
            self._rankReward_rect:SetActive(false)
            self.city_content:SetActive(false)
        elseif type == 2 then
            self._task_btn:LoadSprite(tabUnSelect_img)
            self._rank_btn:LoadSprite(tabSelect_img)
            self._reward_btn:LoadSprite(tabUnSelect_img)
            self._task_txt:SetColor(tabUnSelect_color)
            self._rank_txt:SetColor(tabSelect_color)
            self._reward_txt:SetColor(tabUnSelect_color)
            
            self._allianceRank_rect:SetActive(true)
            self._allianceRank_rect:SetData()
            self._bottom_rect:SetActive(false)
            self._rankReward_rect:SetActive(false)
            self.city_content:SetActive(true)
        elseif type == 3 then
            self._task_btn:LoadSprite(tabUnSelect_img)
            self._rank_btn:LoadSprite(tabUnSelect_img)
            self._reward_btn:LoadSprite(tabSelect_img)
            self._task_txt:SetColor(tabUnSelect_color)
            self._rank_txt:SetColor(tabUnSelect_color)
            self._reward_txt:SetColor(tabSelect_color)
           
            self._bottom_rect:SetActive(false)
            self._allianceRank_rect:SetActive(false)
            self._rankReward_rect:SetActive(true)
            self._rankReward_rect:SetData(self.rankRewardActId)
            self.city_content:SetActive(false)
        end
    end
end

local function OnRefreshRank(self,message)
    self._allianceRank_rect:OnRefresh(message)
end


local function OnCityItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.city_content:AddComponent(CityCell, itemObj)
    cellItem:SetData(self.cityList[index],index)
end

local function OnCityItemMoveOut(self, itemObj, index)
    self.city_content:RemoveComponent(itemObj.name, CityCell)
end

local function ClearCityScroll(self)
    self.city_content:ClearCells()
    self.city_content:RemoveComponents(CityCell)
end


LeadingQuestOther.OnCreate = OnCreate
LeadingQuestOther.OnDestroy = OnDestroy
LeadingQuestOther.ComponentDefine = ComponentDefine
LeadingQuestOther.ComponentDestroy = ComponentDestroy
LeadingQuestOther.DataDefine = DataDefine
LeadingQuestOther.DataDestroy = DataDestroy
LeadingQuestOther.OnAddListener = OnAddListener
LeadingQuestOther.OnRemoveListener = OnRemoveListener

LeadingQuestOther.SetData = SetData
LeadingQuestOther.RefreshAll = RefreshAll
LeadingQuestOther.ShowTasks = ShowTasks
LeadingQuestOther.AddCountDownTimer = AddCountDownTimer
LeadingQuestOther.RefreshRemainTime = RefreshRemainTime
LeadingQuestOther.DelCountDownTimer = DelCountDownTimer
LeadingQuestOther.GetTaskListSorted = GetTaskListSorted
LeadingQuestOther.OnQuestItemMoveIn = OnQuestItemMoveIn
LeadingQuestOther.OnQuestItemMoveOut = OnQuestItemMoveOut
LeadingQuestOther.ClearScroll = ClearScroll
LeadingQuestOther.GetItemBgPath = GetItemBgPath
LeadingQuestOther.OnClickInfoBtn = OnClickInfoBtn
LeadingQuestOther.ShowLastSeasonHeroInfo = ShowLastSeasonHeroInfo
LeadingQuestOther.HideLastSeasonHeroInfo = HideLastSeasonHeroInfo
LeadingQuestOther.OnRecordClick = OnRecordClick
LeadingQuestOther.RefreshScoreText = RefreshScoreText
LeadingQuestOther.GetFlyPos = GetFlyPos
LeadingQuestOther.IsPreview = IsPreview

LeadingQuestOther.OnDecorationClick = OnDecorationClick
LeadingQuestOther.ShowDecorationEffect = ShowDecorationEffect
LeadingQuestOther.HideDecorationEffect = HideDecorationEffect

LeadingQuestOther.OnClickChangeBtn = OnClickChangeBtn
LeadingQuestOther.OnRefreshRank = OnRefreshRank
LeadingQuestOther.RefreshActView = RefreshActView
LeadingQuestOther.OnCityItemMoveIn = OnCityItemMoveIn
LeadingQuestOther.OnCityItemMoveOut = OnCityItemMoveOut
LeadingQuestOther.ClearCityScroll = ClearCityScroll
return LeadingQuestOther