---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/5/5 21:44
---DigActivityMain.lua

local DigActivityMain = BaseClass("DigActivityMain", UIBaseView)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
--local UIGray = CS.UIGray
local RewardUtil = require "Util.RewardUtil"
local DigBlockItem = require "UI.UIActivityCenterTable.Component.Dig.DigBlockItem"
local DigActivityLevelPanel = require "UI.UIActivityCenterTable.Component.Dig.DigActivityLevelPanel"

local blockContainerIndex = {
    [1] = 1,
    [5] = 2,
    [10] = 3,
    [16] = 4,
}
local digEffPath = {
    [1] = "Assets/_Art/Effect/prefab/ui/V_digactivitymain/VFX_ui_digactivity_qiaoda_putong.prefab",
    [2] = "Assets/_Art/Effect/prefab/ui/V_digactivitymain/VFX_ui_digactivity_qiaoda.prefab",
}

local title_path = "Root/Top/title"
local activityTime_path = "Root/Top/actTime"
local timeCountDown_path = "Root/Top/NotStarted/timeCountDown"
local infoBtn_path = "Root/Top/title/infoBtn"
local superLvBg_path = "Root/anim/wallAnim/wallTop/superLvBg"
local finalRewardItem_path ="Root/anim/wallAnim/finalReward/superReward/superReward"
local finalRewardIcon_path = "Root/anim/wallAnim/finalReward/superReward/superReward/clickBtn/ItemIcon"
local finalRewardCount_path = "Root/anim/wallAnim/finalReward/superReward/superReward/clickBtn/NumText"
local finalRewardEmpty_path = "Root/anim/wallAnim/finalReward/superReward/empty"
local finalRewardBtn_path = "Root/anim/wallAnim/finalReward/superReward/superRewardBtn"
local curLvTxt_path = "Root/anim/wallAnim/finalReward/levelBg/curLevel"
local blockItem_path = "Root/anim/blocks/blocks/itemLayout0%s/digBlockItem%s"
local rewardPreviewBtn_path = "Root/rewardPreviewBtn"
local rewardPreviewTxt_path = "Root/rewardPreviewBtn/rewardPreviewTxt"
local autoDigBtn_path = "Root/autoDigBtn"
local autoDigTxt_path = "Root/autoDigBtn/autoDigTxt"
local maxLvPanel_path = "Root/anim/maxLevelGo"
local startDigBtn_path = "Root/startBg/startBtn"
local startDigBg_path = "Root/startBg"
local startDigBtnTxt_path = "Root/startBg/startBtn/starBtnTxt"
local consumeItem_path = "Root/consumeItem"
local consumeItemIcon_path = "Root/consumeItem/resIcon2"
local consumeItemCount_path = "Root/consumeItem/resNum2"
local consumeAddBtn_path = "Root/consumeItem"
local fullMask_path = "fullMask"
local anim_path = "Root/anim"
local nextLvImg_path = "Root/anim/nextLvImgAnim"
local nextLvPanel_path = "Root/anim/nextLvImgAnim"
local finalRewardEff_path = "Root/anim/wallAnim/finalReward/superReward/Bg/VFX_ui_wajue_quan_tishi"
local digEffContainer_path = "Root/anim/digEffContainer"
local rankBtn_path = "Root/rankBtn"
local rankTxt_path = "Root/rankBtn/rankTxt"
local rankNum_path = "Root/rankBtn/rankNum"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    
    if self.delayRefreshTimer then
        self.delayRefreshTimer:Stop()
        self.delayRefreshTimer = nil
    end
    if self.delayFlyTimer then
        self.delayFlyTimer:Stop()
        self.delayFlyTimer = nil
    end
    if self.digEffModel then
        for i, v in ipairs(self.digEffModel) do
            self:GameObjectDestroy(v)
        end
        self.digEffModel = nil
    end
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.activityTimeN = self:AddComponent(UITextMeshProUGUIEx, activityTime_path)
    self.timeCountDownN = self:AddComponent(UITextMeshProUGUIEx, timeCountDown_path)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)
    self.superLvBgN = self:AddComponent(UIBaseContainer, superLvBg_path)
    self.finalRewardItemN = self:AddComponent(UIBaseContainer, finalRewardItem_path)
    self.finalRewardIconN = self:AddComponent(UIImage, finalRewardIcon_path)
    self.finalRewardCountN = self:AddComponent(UITextMeshProUGUIEx, finalRewardCount_path)
    self.finalRewardEmptyN = self:AddComponent(UIBaseContainer, finalRewardEmpty_path)
    self.finalRewardBtnN = self:AddComponent(UIButton, finalRewardBtn_path)
    self.finalRewardBtnN:SetOnClick(function()
        self:OnClickFinalReward()
    end)
    self.curLvTxtN = self:AddComponent(UITextMeshProUGUIEx, curLvTxt_path)
    self.blockItems = {}
    local tempContainerIndex = nil
    for i = 1, 22 do
        if blockContainerIndex[i] then
            tempContainerIndex = blockContainerIndex[i]
        end
        local tempPath = string.format(blockItem_path, tempContainerIndex, i)
        local tempItem = self:AddComponent(DigBlockItem, tempPath)
        table.insert(self.blockItems, tempItem)
    end
    self.rewardPreviewBtnN = self:AddComponent(UIButton, rewardPreviewBtn_path)
    self.rewardPreviewBtnN:SetOnClick(function()
        self:OnClickRewardPreviewBtn()
    end)
    self.rewardPreviewTxtN = self:AddComponent(UITextMeshProUGUIEx, rewardPreviewTxt_path)
    self.rewardPreviewTxtN:SetLocalText(372442)
    self.autoDigBtnN = self:AddComponent(UIButton, autoDigBtn_path)
    self.autoDigBtnN:SetOnClick(function()
        self:OnClickAutoDigBtn()
    end)
    self.autoDigTxtN = self:AddComponent(UITextMeshProUGUIEx, autoDigTxt_path)
    self.autoDigTxtN:SetLocalText(372453)
    self.maxLvPanelN = self:AddComponent(UIBaseContainer, maxLvPanel_path)
    self.startDigBgN = self:AddComponent(UIBaseContainer, startDigBg_path)
    self.startDigBtnN = self:AddComponent(UIButton, startDigBtn_path)
    self.startDigBtnN:SetOnClick(function()
        self:OnClickStartDigBtn()
    end)
    self.startDigBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, startDigBtnTxt_path)
    self.startDigBtnTxtN:SetText(Localization:GetString("372448"))
    self.consumeItemN = self:AddComponent(UIBaseContainer, consumeItem_path)
    self.consumeItemIconN = self:AddComponent(UIImage, consumeItemIcon_path)
    self.consumeItemCountN = self:AddComponent(UITextMeshProUGUIEx, consumeItemCount_path)
    self.consumeAddBtnN = self:AddComponent(UIButton, consumeAddBtn_path)
    self.consumeAddBtnN:SetOnClick(function()
        self:OnClickBuyPickaxeBtn()
    end)
    self.fullMaskN = self:AddComponent(UIBaseContainer, fullMask_path)
    self.fullMaskN:SetActive(false)
    self.animN = self:AddComponent(UIAnimator, anim_path)
    self.nextLvImgN = self:AddComponent(UIBaseContainer, nextLvImg_path)
    self.nextLvImgN:SetActive(false)
    self.nextLvPanelN = self:AddComponent(DigActivityLevelPanel, nextLvPanel_path)
    --self.finalRewardEffN = self:AddComponent(UIBaseContainer, finalRewardEff_path)
    self.digEffContainerN = self:AddComponent(UIBaseContainer, digEffContainer_path)
    self.digEffDic = {}
    self.digEffModel = {}
    self.rankBtnN = self:AddComponent(UIButton, rankBtn_path)
    self.rankBtnN:SetOnClick(function()
        self:OnClickRankBtn()
    end)
    self.rankTxtN = self:AddComponent(UITextMeshProUGUIEx, rankTxt_path)
    self.rankTxtN:SetLocalText(390040)
    self.rankNumN = self:AddComponent(UITextMeshProUGUIEx, rankNum_path)

    self.toggle = self:AddComponent(UIToggle,"Root/redSwitch")
    self.toggle:SetIsOn(true)
    self.toggle:SetOnValueChanged(function(tf)
        self:ToggleControlBorS(tf)
    end)
    self._jumpAnim_txt = self:AddComponent(UITextMeshProUGUIEx,"Root/redSwitch/redSwitchTxt")
    self._jumpAnim_txt:SetLocalText(372228)

end

local function ComponentDestroy(self)
    self.titleN = nil
    self.activityTimeN = nil
    self.timeCountDownN = nil
    self.infoBtnN = nil
    self.finalRewardItemN = nil
    self.finalRewardEmptyN = nil
    self.finalRewardBtnN = nil
    self.curLvTxtN = nil
    self.blockItems = nil
    self.rewardPreviewBtnN = nil
    self.autoDigBtnN = nil
    self.maxLvPanelN = nil
    self.startDigBtnN = nil
    self.startDigBtnTxtN = nil
    self.consumeItemN = nil
    self.consumeItemIconN = nil
    self.consumeItemCountN = nil
    self.animN = nil
    self.digEffDic = nil
    self.digEffModel = nil
    self.rankBtnN = nil
    self.rankTxtN = nil
    self.rankNumN = nil
end

local function DataDefine(self)
    self.activityId = nil
    self.activityInfo = nil
    self.digInfo = nil
    self.countDownTimer = nil
    self.autoDigResultList = {}
    self.cachePickaxCount = 0
    self.delayFlyTimer = nil
    self.delayRefreshTimer = nil
    self.isLevelFinished = false
    self.isAutoDigging = false
    self.curSoundSerialId = nil
end

local function DataDestroy(self)
    self.activityId = nil
    self.activityInfo = nil
    self.digInfo = nil
    self.countDownTimer = nil
    self.autoDigResultList = nil
    self.cachePickaxCount = nil
    self.delayFlyTimer = nil
    self.delayRefreshTimer = nil
    self.isLevelFinished = nil
    self.isAutoDigging = nil
    self.curSoundSerialId = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnGetAutoDigResult, self.ShowAutoDigEff)
    self:AddUIListener(EventId.OnDigOneBlockSucc, self.ShowOneFlyEff)
    self:AddUIListener(EventId.OnDigActFinalResultUpdated, self.RefreshAll)
    self:AddUIListener(EventId.OnbuyPickaxeSucc, self.RefreshOwnPickax)
    self:AddUIListener(EventId.PaySuccess, self.TryRefreshOwnPackax)
    --self:AddUIListener(EventId.OnCurDigLevelUpdated, self.RefreshAll)
    self:AddUIListener(EventId.OnDigActivityInfoUpdated, self.RefreshAll)
    self:AddUIListener(EventId.OnRewardGetPanelClose, self.TryMoveToNextLvAfterGetRewards)
    self:AddUIListener(EventId.RefreshItems, self.TryRefreshOwnPackax)
    self:AddUIListener(EventId.OnDigActivityRankInfoUpdate, self.SetRankNum)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnGetAutoDigResult, self.ShowAutoDigEff)
    self:RemoveUIListener(EventId.OnDigOneBlockSucc, self.ShowOneFlyEff)
    self:RemoveUIListener(EventId.OnDigActFinalResultUpdated, self.RefreshAll)
    self:RemoveUIListener(EventId.OnbuyPickaxeSucc, self.RefreshOwnPickax)
    self:RemoveUIListener(EventId.PaySuccess, self.TryRefreshOwnPackax)
    --self:RemoveUIListener(EventId.OnCurDigLevelUpdated, self.RefreshAll)
    self:RemoveUIListener(EventId.OnDigActivityInfoUpdated, self.RefreshAll)
    self:RemoveUIListener(EventId.OnRewardGetPanelClose, self.TryMoveToNextLvAfterGetRewards)
    self:RemoveUIListener(EventId.RefreshItems, self.TryRefreshOwnPackax)
    self:RemoveUIListener(EventId.OnDigActivityRankInfoUpdate, self.SetRankNum)
    base.OnRemoveListener(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.fullMaskN:SetActive(false)
end

local function OnDisable(self)
    if self.delayFlyTimer then
        self.delayFlyTimer:Stop()
        self.delayFlyTimer = nil
    end
    if self.delayRefreshTimer then
        self.delayRefreshTimer:Stop()
        self.delayRefreshTimer = nil
    end
    if self.curSoundSerialId then
        CS.GameEntry.Sound:StopSound(self.curSoundSerialId)
        self.curSoundSerialId = nil
    end
    self.fullMaskN:SetActive(false)
    base.OnDisable(self)
end

local function ToggleControlBorS(self,isJumpPlay)
    Setting:SetBool(SettingKeys.ActDigJumpAnim..LuaEntry.Player.uid, isJumpPlay)
end

local function SetData(self, activityId)
    self.activityId = tonumber(activityId)
    self.activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(activityId)
    DataCenter.DigActivityManager:ResetDigStatus()
    DataCenter.DigActivityManager:RequestDigInfo(self.activityId)
    DataCenter.DigActivityManager:GetDigRankReq(self.activityId)
    --self.animN:Play("V_ui_digactivitymain_idle", 0, 0)
    self.isAutoDigging = false
    local isJumpPlay = Setting:GetBool(SettingKeys.ActDigJumpAnim..LuaEntry.Player.uid,false)
    self.toggle:SetIsOn(isJumpPlay)
    self:RefreshAll()
end


local function RefreshAll(self)
    if IsNull(self.gameObject) then
        return
    end
    
    self.digInfo = DataCenter.DigActivityManager:GetDigInfo(self.activityId)
    if not self.digInfo then
        return
    end
    self.isAutoDigging = false
    if self.isLevelFinished then
        self.isLevelFinished = false
        self.delayRefreshTimer = TimerManager:GetInstance():DelayInvoke(function()
            self.fullMaskN:SetActive(false)
        end, 1.5)
    else
        self.fullMaskN:SetActive(false)
    end
    
    self.isDigStarted = self:CheckIfStarted()

    local isSuperLv = DataCenter.DigActivityManager:CheckIfIsSuperLv(self.activityId, self.digInfo.finishedLv + 1)
    self.superLvBgN:SetActive(isSuperLv)
    
    

    self.titleN:SetText(Localization:GetString(self.activityInfo.name))
    local startT = UITimeManager:GetInstance():TimeStampToDayForLocal(self.activityInfo.startTime)
    local endT = UITimeManager:GetInstance():TimeStampToDayForLocal(self.activityInfo.endTime)
    self.activityTimeN:SetText(startT .. "-" .. endT)
    
    self.curLvTxtN:SetText(Localization:GetString("372443", self.digInfo.finishedLv + 1))
    
    self:AddCountDownTimer()
    self:RefreshRemainTime()
    
    self:RefreshFinalReward()
    self:RefreshBlocks()
    self:RefreshOwnPickax()
    self:SetRankNum()
    self.maxLvPanelN:SetActive(false)
    self.startDigBgN:SetActive(false)
    if self:CheckIfIsMaxLv() then
        self.maxLvPanelN:SetActive(true)
        self.curLvTxtN:SetLocalText(150027)
    elseif not self.isDigStarted and self.digInfo.finalRewardIndex > 0 then
        self.startDigBgN:SetActive(true)
    end
end

local function RefreshFinalReward(self)
    if self:CheckIfIsMaxLv() then
        self.finalRewardEmptyN:SetActive(true)
        --self.finalRewardEffN:SetActive(false)
        self.finalRewardItemN:SetActive(false)
    elseif self.digInfo.finalRewardIndex == 0 then
        self.finalRewardEmptyN:SetActive(true)
        --self.finalRewardEffN:SetActive(true)
        self.finalRewardItemN:SetActive(false)
    else
        self.finalRewardEmptyN:SetActive(false)
        --self.finalRewardEffN:SetActive(false)
        self.finalRewardItemN:SetActive(true)
        
        local rewardData = DataCenter.DigActivityManager:GetFinalReward(self.activityId, self.digInfo.finishedLv + 1, self.digInfo.finalRewardIndex)
        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(rewardData.itemId)
        self.finalRewardIconN:LoadSprite(string.format(LoadPath.ItemPath, goods.icon))
        self.finalRewardCountN:SetText(rewardData.count)
    end
end

local function RefreshBlocks(self)
    if self.isDigStarted then
        for i, v in ipairs(self.blockItems) do
            self.blockItems[i]:ShowItem(self.digInfo, i)
        end
    else
        local previewList = DataCenter.DigActivityManager:GetPreviewRewardsList(self.activityId, self.digInfo.finishedLv + 1)
        for i, v in ipairs(self.blockItems) do
            if i <= #previewList then
                self.blockItems[i]:SetActive(true)
                self.blockItems[i]:ShowPreview(self.digInfo, i, previewList[i])
            else
                self.blockItems[i]:SetActive(false)
            end
        end
    end
end

local function SetRankNum(self)
    if IsNull(self.gameObject) then
        return
    end
    local rankServerStr = DataCenter.DigActivityManager:GetRankServerGroupStr(self.activityId)
    if string.IsNullOrEmpty(rankServerStr) then
        self.rankBtnN:SetActive(false)
    else
        self.rankBtnN:SetActive(true)
        local rankData = DataCenter.DigActivityManager:GetDigRankInfo(self.activityId)
        if rankData and rankData.selfRank > 0 then
            if rankData.selfRank <= 3 then
                self.rankBtnN:LoadSprite("Assets/Main/Sprites/UI/UIAlliance/rank/UIalliance_rankingbg0" .. rankData.selfRank)
                self.rankNumN:SetText("")
            else
                self.rankBtnN:LoadSprite(string.format(LoadPath.UIGolloesCards,"UIgolo_btn_rankinga"))
                self.rankNumN:SetText(rankData.selfRank)
            end
        else
            self.rankNumN:SetText("")
        end
    end
end

local function TryRefreshOwnPackax(self)
    if IsNull(self.gameObject) then
        return
    end
    
    if not self.isAutoDigging then
        self:RefreshOwnPickax()
    end
end

local function RefreshOwnPickax(self, pickaxAddCount)
    if IsNull(self.gameObject) then
        return
    end
    
    local pickaxId = DataCenter.DigActivityManager:GetPickaxId(self.activityId)
    if not pickaxId then
        self.consumeItemN:SetActive(false)
    else
        self.consumeItemN:SetActive(true)
        local tempIcon = DataCenter.ItemTemplateManager:GetIconPath(pickaxId)
        self.consumeItemIconN:LoadSprite(tempIcon)
        self.cachePickaxCount = pickaxAddCount and (self.cachePickaxCount + pickaxAddCount) or DataCenter.ItemData:GetItemCount(pickaxId)
        self.consumeItemCountN:SetText(self.cachePickaxCount)
    end
end

local function ShowAutoDigEff(self, resultList)
    if IsNull(self.gameObject) then
        return
    end
    local state = Setting:GetBool(SettingKeys.ActDigJumpAnim..LuaEntry.Player.uid,false)
    if state then
        for i = 1, #resultList do
            self.blockItems[resultList[i].blockIndex]:DigOut()
        end
    else
        self.fullMaskN:SetActive(true)

        self.autoDigResultList = resultList
        self:ShowNextAutoDigReward()
    end
end

local function ShowNextAutoDigReward(self)
    if self.autoDigResultList and #self.autoDigResultList > 0 then
        local tempFirst = self.autoDigResultList[1]
        if tempFirst.rewardIndex == 0 then
            self.blockItems[tempFirst.blockIndex]:RefreshAsFinalReward()
            self:PlayDigEff(2, self.blockItems[tempFirst.blockIndex])
            self:RefreshOwnPickax(-1)
            self.isLevelFinished = true
            
            local finalReward = DataCenter.DigActivityManager:GetFinalReward(self.activityId, self.digInfo.finishedLv + 1, self.digInfo.finalRewardIndex)
            local msg = {}
            msg.reward = {}
            local param = {}
            param.type = RewardType.GOODS
            param.value = {}
            param.value.itemId = finalReward.itemId
            param.value.rewardAdd = finalReward.count
            table.insert(msg.reward, param)
            self.delayFlyTimer = TimerManager:GetInstance():DelayInvoke(function()
                DataCenter.RewardManager:ShowCommonReward(msg)
                self.isAutoDigging = false
                self:TryRefreshOwnPackax()
                --self.fullMaskN:SetActive(false)
            end, 1)
            return
        else
            self:ShowOneFlyEff(tempFirst, -1)
            table.remove(self.autoDigResultList, 1)
        end

        if self.autoDigResultList and #self.autoDigResultList > 0 then
            self.delayFlyTimer = TimerManager:GetInstance():DelayInvoke(function()
                self.delayFlyTimer = nil
                self:ShowNextAutoDigReward()
            end, 0.5)
        else
            self.delayFlyTimer = TimerManager:GetInstance():DelayInvoke(function()
                DataCenter.DigActivityManager:CheckIfPickaxeEnough(self.activityId, true)
                self.fullMaskN:SetActive(false)
                self.isAutoDigging = false
                self:TryRefreshOwnPackax()
            end, 0.5)
        end
    end
end

local function ShowOneFlyEff(self, digResult, pickaxAdd)
    if IsNull(self.gameObject) then
        return
    end
    
    local isFinalReward = digResult.rewardIndex == 0
    if isFinalReward then
        self.fullMaskN:SetActive(true)
        self.delayFlyTimer = TimerManager:GetInstance():DelayInvoke(function()
            self.isLevelFinished = true
            DataCenter.DigActivityManager:ShowGetFinalReward()
            --DataCenter.DigActivityManager:RequestDigInfo(self.activityId)
            --self.fullMaskN:SetActive(false)
        end, 0.8)
    else
        local reward = DataCenter.DigActivityManager:GetDiggedOutReward(self.activityId, self.digInfo.finishedLv + 1, digResult.blockIndex)

        local rewardType = RewardType.GOODS
        local itemId = reward.itemId
        local pic = RewardUtil.GetPic(rewardType,itemId)
        local img = self.blockItems[digResult.blockIndex]
        if pic~="" then
            local flyNum = tonumber(reward.count)
            flyNum = flyNum > 5 and 5 or flyNum
            UIUtil.DoFly(tonumber(rewardType),flyNum,pic,img.transform.position,Vector3.New(0,0,0))
        end
    end
    self.blockItems[digResult.blockIndex]:DigOut()
    local effType = isFinalReward and 2 or 1
    self:PlayDigEff(effType, self.blockItems[digResult.blockIndex])
    self:RefreshOwnPickax(pickaxAdd)
end

local function CheckIfStarted(self)
    if self.digInfo.finalRewardIndex == 0 then
        return false
    else
        local strK = LuaEntry.Player.uid .. "_DigActivityLevel"
        local cacheLv = Setting:GetInt(strK, 0)
        if cacheLv ~= self.digInfo.finishedLv + 1 then
            return false
        else
            return true
        end
    end
end

local function CheckIfIsMaxLv(self, level)
    level = level or self.digInfo.finishedLv
    local maxLvCount = DataCenter.DigActivityManager:GetMaxLvCount(self.activityId)
    return level >= maxLvCount
end


local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.activityInfo.endTime - curTime
    if remainTime > 0 then
        if self.activityInfo:CheckIfIsToEnd() then
            self.timeCountDownN:SetColorRGBA(0.91, 0.26, 0.26, 1)
        else
            self.timeCountDownN:SetColor(WhiteColor)
        end
        self.timeCountDownN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.timeCountDownN:SetText("")
        self:DelCountDownTimer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function TryMoveToNextLvAfterGetRewards(self)
    if IsNull(self.gameObject) then
        return
    end
    
    for i, v in pairs(self.digEffDic) do
        v:SetActive(false)
    end
    
    if self:CheckIfIsMaxLv(self.digInfo.finishedLv + 1) then
        self.fullMaskN:SetActive(false)
        DataCenter.DigActivityManager:RequestDigInfo(self.activityId)
        return
    end

    local state = Setting:GetBool(SettingKeys.ActDigJumpAnim..LuaEntry.Player.uid,false)
    if state then
        self.curSoundSerialId = SoundUtil.PlayEffect(SoundAssets.Music_Effect_dig_blocksDropDown)
        self.nextLvImgN:SetActive(true)
        self.nextLvPanelN:SetPanel(self.activityId, self.digInfo.finishedLv + 2)
        DataCenter.DigActivityManager:RequestDigInfo(self.activityId)
    else
        if self.isLevelFinished then
            self.nextLvImgN:SetActive(true)
            --self.animN:Play("V_ui_digactivitymain_huantu", 0, 0)
            self.curSoundSerialId = SoundUtil.PlayEffect(SoundAssets.Music_Effect_dig_blocksDropDown)
            self.nextLvPanelN:SetPanel(self.activityId, self.digInfo.finishedLv + 2)
            self.delayRefreshTimer = TimerManager:GetInstance():DelayInvoke(function()
                DataCenter.DigActivityManager:RequestDigInfo(self.activityId)
            end, 2.5)
        end
    end
end

local function PlayDigEff(self, effType, blockItem)
    --没有特效暂时屏蔽
    --local soundEff = ""
    --if effType == 1 then
    --    local randSound = math.random(1, 2)
    --    soundEff = randSound == 1 and SoundAssets.Music_Effect_dig_digOneBlock1 or SoundAssets.Music_Effect_dig_digOneBlock2
    --else
    --    soundEff = SoundAssets.Music_Effect_dig_getFinalReward
    --end
    --self.curSoundSerialId = SoundUtil.PlayEffect(soundEff)
    --
    --if self.digEffDic[effType] then
    --    self.digEffDic[effType]:SetActive(false)
    --    self.digEffDic[effType]:SetPosition(blockItem:GetPosition())
    --    self.digEffDic[effType]:SetActive(true)
    --else
    --    if not self.digEffModel[effType] then
    --        self.digEffModel[effType] = self:GameObjectInstantiateAsync(digEffPath[effType], function(request)
    --            if request.isError then
    --                return
    --            end
    --            local go = request.gameObject;
    --            go.transform:SetParent(self.digEffContainerN.transform)
    --            go.transform:Set_localScale(1, 1, 1)
    --            go.name = tostring(effType)
    --            local tempEff = self.digEffContainerN:AddComponent(UIBaseContainer, go.name)
    --            self.digEffDic[effType] = tempEff
    --            self.digEffDic[effType]:SetPosition(blockItem:GetPosition())
    --            self.digEffDic[effType]:SetActive(true)
    --        end)
    --    end
    --end
end




local function OnClickFinalReward(self)
    if self:CheckIfIsMaxLv() then
        UIUtil.ShowTipsId(150027)
        return
    end
    
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISelectDigFinalReward,{anim = true}, self.activityId)
end

local function OnClickInfoBtn(self)
    UIUtil.ShowIntro(Localization:GetString("372441"), Localization:GetString("100239"),Localization:GetString(self.activityInfo.story))
end

local function OnClickRewardPreviewBtn(self)
    if self:CheckIfIsMaxLv() then
        UIUtil.ShowTipsId(150027)
        return
    end

    if self.digInfo.finalRewardIndex == 0 then
        UIUtil.ShowTipsId(372449)
        return
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIDigReward,{anim = true}, self.activityId, self.digInfo.finishedLv + 1)
end

local function OnClickAutoDigBtn(self)
    if self.isAutoDigging then
        return
    end
    if self:CheckIfIsMaxLv() then
        UIUtil.ShowTipsId(150027)
        return
    end
    
    if not DataCenter.DigActivityManager:CheckIfPickaxeEnough(self.activityId, true) then
        return
    end

    if not self.isDigStarted then
        UIUtil.ShowTipsId(372455)
        return
    end

    UIUtil.ShowUseDiamondConfirm(TodayNoSecondConfirmType.AutoDig, Localization:GetString("372454"), 2, 
        GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,
        function()
            self.isAutoDigging = true
            DataCenter.DigActivityManager:RequestAutoDig(self.activityId)
        end,
        function()
            
        end
    )
    --DataCenter.DigActivityManager:RequestAutoDig(self.activityId)
    
end

local function OnClickStartDigBtn(self)
    if self.digInfo.finalRewardIndex == 0 then
        UIUtil.ShowTips(Localization:GetString("372449"))
        return
    end
    
    local strK = LuaEntry.Player.uid .. "_DigActivityLevel"
    Setting:SetInt(strK, self.digInfo.finishedLv + 1)

    local state = Setting:GetBool(SettingKeys.ActDigJumpAnim..LuaEntry.Player.uid,false)
    if state then
        self:RefreshAll()
    else
        --self.animN:Play("V_ui_digactivitymain_kaimen",0,0)
        self.delayRefreshTimer = TimerManager:GetInstance():DelayInvoke(function()
            self:RefreshAll()
        end, 1.5)
    end
    self.curSoundSerialId = SoundUtil.PlayEffect(SoundAssets.Music_Effect_dig_doorOpenClose)
    self.startDigBgN:SetActive(false)
end

local function OnClickBuyPickaxeBtn(self)
    if self:CheckIfIsMaxLv() then
        UIUtil.ShowTipsId(150027)
        return
    end
    
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIGetPickaxe,{anim = true}, self.activityId)
    --DataCenter.DigActivityManager:TryBuyPickaxe(self.activityId)
    DataCenter.DigActivityManager:GetMorePickaxe(self.activityId,1)
end

local function OnClickRankBtn(self)
    if not self.activityInfo then
        return
    end
    local rankServerStr = DataCenter.DigActivityManager:GetRankServerGroupStr(self.activityId)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIDigActivityRank, self.activityId, rankServerStr)
end

DigActivityMain.OnCreate = OnCreate
DigActivityMain.OnDestroy = OnDestroy
DigActivityMain.ComponentDefine = ComponentDefine
DigActivityMain.ComponentDestroy = ComponentDestroy
DigActivityMain.DataDefine = DataDefine
DigActivityMain.DataDestroy = DataDestroy
DigActivityMain.OnAddListener = OnAddListener
DigActivityMain.OnRemoveListener = OnRemoveListener

DigActivityMain.OnEnable = OnEnable
DigActivityMain.OnDisable = OnDisable
DigActivityMain.ToggleControlBorS = ToggleControlBorS
DigActivityMain.SetData = SetData
DigActivityMain.RefreshAll = RefreshAll
DigActivityMain.RefreshFinalReward = RefreshFinalReward
DigActivityMain.RefreshBlocks = RefreshBlocks
DigActivityMain.RefreshOwnPickax = RefreshOwnPickax
DigActivityMain.SetRankNum = SetRankNum
DigActivityMain.TryRefreshOwnPackax = TryRefreshOwnPackax
DigActivityMain.ShowAutoDigEff = ShowAutoDigEff
DigActivityMain.ShowNextAutoDigReward = ShowNextAutoDigReward
DigActivityMain.ShowOneFlyEff = ShowOneFlyEff
DigActivityMain.CheckIfStarted = CheckIfStarted
DigActivityMain.CheckIfIsMaxLv = CheckIfIsMaxLv
DigActivityMain.AddCountDownTimer = AddCountDownTimer
DigActivityMain.RefreshRemainTime = RefreshRemainTime
DigActivityMain.DelCountDownTimer = DelCountDownTimer
DigActivityMain.TryMoveToNextLvAfterGetRewards = TryMoveToNextLvAfterGetRewards
DigActivityMain.PlayDigEff = PlayDigEff
DigActivityMain.OnClickFinalReward = OnClickFinalReward
DigActivityMain.OnClickInfoBtn = OnClickInfoBtn
DigActivityMain.OnClickRewardPreviewBtn = OnClickRewardPreviewBtn
DigActivityMain.OnClickAutoDigBtn = OnClickAutoDigBtn
DigActivityMain.OnClickStartDigBtn = OnClickStartDigBtn
DigActivityMain.OnClickBuyPickaxeBtn = OnClickBuyPickaxeBtn
DigActivityMain.OnClickRankBtn = OnClickRankBtn

return DigActivityMain