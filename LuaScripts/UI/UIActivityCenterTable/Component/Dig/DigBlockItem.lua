---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/5/6 17:28
---


local MineCaveItem = BaseClass("MineCaveItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local UICommonItem = require "UI.UICommonItem.UICommonItem"

local bg_path = "bg"
local digBtn_path = "digBtn"
local digBtnImg_path = "digBtn/blockIcon"
local rewardContainer_path = "reward"
local digEffContainer_path = "digEff"
local mask_path = "mask"

local digEffPath = {
    [1] = "Assets/_Art/Effect/prefab/ui/V_digactivitymain/VFX_ui_digactivity_qiaoda_putong.prefab",
    [2] = "Assets/_Art/Effect/prefab/ui/V_digactivitymain/VFX_ui_digactivity_qiaoda.prefab",
}

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

-- 销毁
local function OnDestroy(self)
    if self.model then
        self:GameObjectDestroy(self.model)
        self.model = nil
    end
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

--控件的定义
local function ComponentDefine(self)
    self.bgN = self:AddComponent(UIImage, bg_path)
    self.digBtnN = self:AddComponent(UIButton, digBtn_path)
    self.digBtnN:SetActive(true)
    self.digBtnN:SetOnClick(function()
        self:OnClickDigBtn()
    end)
    self.digBtnImgN = self:AddComponent(UIImage, digBtnImg_path)
    self.rewardContainerN = self:AddComponent(UIBaseContainer, rewardContainer_path)
    self.digEffContainerN = self:AddComponent(UIBaseContainer, digEffContainer_path)
    self.maskN = self:AddComponent(UIBaseContainer, mask_path)
end

--控件的销毁
local function ComponentDestroy(self)
    self.digBtnN = nil
    self.rewardContainerN = nil
    self.digEffContainerN = nil
end

--变量的定义
local function DataDefine(self)
    self.blockIndex = nil
    self.rewardInfo = nil
    self.rewardItem = nil
    self.isPreview = false
    self.isWaiting = false
end

--变量的销毁
local function DataDestroy(self)
    self.blockIndex = nil
    self.rewardInfo = nil
    self.rewardItem = nil
    self.isPreview = nil
    self.isWaiting = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.OnDigOneBlockSucc, self.ShowDigSuccEff)

end

local function OnRemoveListener(self)
    --self:RemoveUIListener(EventId.OnDigOneBlockSucc, self.ShowDigSuccEff)
    base.OnRemoveListener(self)
end

local function ShowItem(self, digInfo, blockIndex)
    self.isPreview = false
    self.digInfo = digInfo
    self.blockIndex = blockIndex
    self.digReward = nil
    
    self:RefreshAll()
end

local function ShowPreview(self, digInfo, tempIndex, reward)
    self.isPreview = true
    self.digInfo = digInfo
    self.blockIndex = tempIndex
    self.digReward = reward

    self:RefreshAll()
end

--local function SetItem(self, digInfo, blockIndex, digReward)
--    self.digInfo = digInfo
--    self.blockIndex = blockIndex
--    self.digReward = digReward
--
--    self:RefreshAll()
--end

--挖到大奖
local function RefreshAsFinalReward(self)
    self.digReward = DataCenter.DigActivityManager:GetFinalReward(self.digInfo.activityId, self.digInfo.finishedLv + 1, self.digInfo.finalRewardIndex)
    --self:DigOut(2)
    self:RefreshAll()
end

local function DigOut(self, effType)
    --self:PlayDigEff(effType)
    self:RefreshAll()
end

local function RefreshAll(self)
    self.isWaiting = false
    if not self.digReward then
        local reward = DataCenter.DigActivityManager:GetDiggedOutReward(self.digInfo.activityId, self.digInfo.finishedLv + 1, self.blockIndex)
        self.digReward = reward
    end
    if self.digReward and not string.IsNullOrEmpty(self.digReward.itemId) then
        self.rewardContainerN:SetActive(true)
        if self.rewardItem then
            local rewardInfo = {}
            rewardInfo.rewardType = RewardType.GOODS
            rewardInfo.itemId = self.digReward.itemId
            rewardInfo.count = self.digReward.count
            self.rewardItem:ReInit(rewardInfo)
        elseif not self.model then
            self.model = self:GameObjectInstantiateAsync(UIAssets.UICommonItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.rewardContainerN.transform)
                go.transform:Set_localScale(0.64, 0.64,0.64)
                --go.transform:Set_localPosition(ResetPosition.x, ResetPosition.y, ResetPosition.z)
                go.name = tostring(self.blockIndex)
                self.rewardItem = self.rewardContainerN:AddComponent(UICommonItem, go.name)
                self.rewardItem:SetAnchoredPositionXY(0, 0)
                local rewardInfo = {}
                rewardInfo.rewardType = RewardType.GOODS
                rewardInfo.itemId = self.digReward.itemId
                rewardInfo.count = self.digReward.count
                self.rewardItem:ReInit(rewardInfo)
            end)
        end
        self.maskN:SetActive(not self.isPreview)
    else
        self.rewardContainerN:SetActive(false)
        self.maskN:SetActive(false)
    end

    local isSuperLv = DataCenter.DigActivityManager:CheckIfIsSuperLv(self.digInfo.activityId, self.digInfo.finishedLv + 1)
    
    local imgType = nil--digBtn状态：0隐藏按钮，1透明，2砖块，3加号
    if self.isPreview then
        if self.blockIndex == 1 then
            if self.digReward and not string.IsNullOrEmpty(self.digReward.itemId) then
                imgType = 1
            else
                imgType = 3
            end
        else
            imgType = 0
        end

        if isSuperLv then
            self.bgN:LoadSprite("Assets/Main/Sprites/UI/UIDigActivity/UIactivities_xb_zhuan_03.png")
        else
            self.bgN:LoadSprite("Assets/Main/Sprites/UI/UIDigActivity/UIactivities_xb_zhuan_01.png")
        end
    else
        if self.digReward then
            imgType = 0
        else
            imgType = 2
        end

        if isSuperLv then
            self.bgN:LoadSprite("Assets/Main/Sprites/UI/UIDigActivity/UIactivities_xb_zhuan_04.png")
        else
            self.bgN:LoadSprite("Assets/Main/Sprites/UI/UIDigActivity/UIactivities_xb_zhuan_02.png")
        end
    end

    if imgType == 0 then
        self.digBtnN:SetActive(false)
    else
        self.digBtnN:SetActive(true)
        if imgType == 1 then
            self.digBtnImgN:SetActive(false)
        else
            self.digBtnImgN:SetActive(true)
            if imgType == 2 then
                if isSuperLv then
                    self.digBtnImgN:LoadSprite("Assets/Main/Sprites/UI/UIDigActivity/UIactivities_xb_zhuan_03.png")
                else
                    self.digBtnImgN:LoadSprite("Assets/Main/Sprites/UI/UIDigActivity/UIactivities_xb_zhuan_01.png")
                end
            elseif imgType == 3 then
                self.digBtnImgN:LoadSprite("Assets/Main/Sprites/UI/UIDigActivity/UIactivities_xb_jiafang.png")
            end
        end
    end
end

local function OnClickDigBtn(self)
    if self.isWaiting then
        return
    end
    if not self.isPreview then
        if DataCenter.DigActivityManager:CheckIfPickaxeEnough(self.digInfo.activityId, true) then
            self.isWaiting = true
            DataCenter.DigActivityManager:RequestDigOneBlock(self.digInfo.activityId, self.blockIndex)
        end
    else
        if self.blockIndex == 1 then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UISelectDigFinalReward,{anim = true}, self.digInfo.activityId)
        end
    end
end


MineCaveItem.OnCreate = OnCreate
MineCaveItem.OnDestroy = OnDestroy
MineCaveItem.ComponentDefine = ComponentDefine
MineCaveItem.ComponentDestroy = ComponentDestroy
MineCaveItem.DataDefine = DataDefine
MineCaveItem.DataDestroy = DataDestroy
MineCaveItem.OnAddListener = OnAddListener
MineCaveItem.OnRemoveListener = OnRemoveListener

MineCaveItem.ShowPreview = ShowPreview
MineCaveItem.ShowItem = ShowItem
MineCaveItem.RefreshAll = RefreshAll
--MineCaveItem.PlayDigEff = PlayDigEff
MineCaveItem.OnClickDigBtn = OnClickDigBtn
MineCaveItem.RefreshAsFinalReward = RefreshAsFinalReward
MineCaveItem.DigOut = DigOut

return MineCaveItem