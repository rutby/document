---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/25 15:36
---

local HeroEvolveController = BaseClass("HeroEvolveController", Singleton)
local Localization = CS.GameEntry.Localization
local HeroInfoTabType = {
    HeroInfoTabType_Evolve = 1,
    HeroInfoTabType_New_Skill = 2,
    HeroInfoTabType_Attr = 3,
}

local heroBg = {[1011] = "UIherotraining_hero_01",[1021] = "UIherotraining_hero_02",[32001] = "UIherotraining_hero_03",[1007] = "UIherotraining_hero_04",[22003] = "UIherotraining_hero_05",[33002] = "UIherotraining_hero_06"}

local function __init(self)
    self.forceShowChoose = false
end

local function __delete(self)
    self.forceShowChoose = false
end

local function SetForceShowChoose(self, flag)
    self.forceShowChoose = flag
end

local function IsForceShowChoose(self)
    return self.forceShowChoose
end

local function GetHeroChoosePanelData(self)
    local heroList = DataCenter.HeroEvolveActivityManager:GetAllCanEvolveIds()
    local result = {}
    for _, heroId in ipairs(heroList) do
        local heroData = DataCenter.HeroDataManager:GetHeroById(heroId)
        if heroData then
            local toHeroId = heroData.config.evolve_hero
            if not string.IsNullOrEmpty(toHeroId) then
                local para = {}
                para.heroId = heroId
                para.level = heroData.level
                para.name = heroData.config.name
                para.nick = heroData.config.desc
                para.camp_icon = HeroUtils.GetCampIconPath(heroData:GetCamp())
                para.activityId = DataCenter.HeroEvolveActivityManager:GetActivityId()
                para.hasHero = DataCenter.HeroDataManager:GetHeroById(toInt(toHeroId)) ~= nil
                para.icon_path = string.format(LoadPath.UIHeroEvolve, heroBg[heroId]) 
                table.insert(result, para)
            end
        end
    end
    return result
end

local function GetHeroEvolveHeroInfoData(self)
    local heroId = DataCenter.HeroEvolveActivityManager:GetChooseHeroId()
    local activityId = DataCenter.HeroEvolveActivityManager:GetActivityId()
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(activityId))
    local toHeroId = DataCenter.HeroEvolveActivityManager:GetToHeroId()

    local result = {}
    result.icon = HeroUtils.GetHeroFullIcon(toHeroId)
    result.timeText = ""
    if actListData ~= nil then
        local startT = UITimeManager:GetInstance():TimeStampToDayForLocal(actListData.startTime)
        local endT = UITimeManager:GetInstance():TimeStampToDayForLocal(actListData.endTime - 1000)
        result.timeText = startT .. "-" .. endT
    end
    local tabList = {}
    local lan = {100091, 161009, 130063}
    for i = 1, 3 do
        local data = {}
        data.name = lan[i]
        data.id = i
        table.insert(tabList, data)
    end
    result.tabList = tabList
    return result
end

local function GetHeroAttrTabInfo(self)
    local activityId = DataCenter.HeroEvolveActivityManager:GetActivityId()
    local heroId = DataCenter.HeroEvolveActivityManager:GetChooseHeroId()
    local toHeroId = DataCenter.HeroEvolveActivityManager:GetToHeroId()
    local rarity1 = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "rarity")
    local rarity2 = GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "rarity")

    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(activityId))
    local maxAtk = 15000
    local maxDef = 15000
    local maxTroop = 600
    if actListData then
        local vec = string.split(actListData.para2, ";")
        if table.count(vec) == 3 then
            maxAtk = tonumber(vec[1])
            maxDef = tonumber(vec[2])
            maxTroop = tonumber(vec[3])
        end
    end
    local lineLen = 170
    
    local angleAtk = 90 * math.pi / 180
    local angleDef = 210 * math.pi / 180
    local angleTroop = 330 * math.pi / 180
    
    local config2 = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
    local level2 = HeroUtils.GetHeroFinalLevel(heroId)
    local atk2, def2 = HeroUtils.GetMaxAttrForHeroMap(heroId)
    local camp2 = HeroUtils.GetArmyLimit(level2, config2['max_rank_level'], config2['rarity'], config2['id'], config2[HeroUtils.GetHeroMaxQualityLevelName()])

    local config1 = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), toHeroId)
    local level1 = HeroUtils.GetHeroFinalLevel(toHeroId)
    local atk1, def1 = HeroUtils.GetMaxAttrForHeroMap(toHeroId)
    local camp1 = HeroUtils.GetArmyLimit(level1, config1['max_rank_level'], config1['rarity'], config1['id'], config1[HeroUtils.GetHeroMaxQualityLevelName()])
    
    local GetPoint = function(angle, value, maxValue)
        value = math.min(value, maxValue)
        local length = lineLen * value / maxValue
        local y = length * math.sin(angle)
        local x = length * math.cos(angle)
        return Vector2.New(x, y)
    end
    
    local result = {}
    local desc1 = Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), heroId, "desc"))
    local desc2 = Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "desc"))
    result.heroDesc = desc1
    result.toHeroDesc = desc2

    local attr1Pts = {}
    local att1Pt1 = GetPoint(angleAtk, atk1, maxAtk)
    local att1Pt2 = GetPoint(angleDef, def1, maxDef)
    local att1Pt3 = GetPoint(angleTroop, camp1, maxTroop)
    table.insert(attr1Pts, att1Pt1)
    table.insert(attr1Pts, att1Pt2)
    table.insert(attr1Pts, att1Pt3)

    local attr2Pts = {}
    local att2Pt1 = GetPoint(angleAtk, atk2, maxAtk)
    local att2Pt2 = GetPoint(angleDef, def2, maxDef)
    local att2Pt3 = GetPoint(angleTroop, camp2, maxTroop)
    table.insert(attr2Pts, att2Pt1)
    table.insert(attr2Pts, att2Pt2)
    table.insert(attr2Pts, att2Pt3)

    result.attr1Pts = attr1Pts
    result.attr2Pts = attr2Pts

    return result
end

local function GetHeroSkillTabInfo(self)
    local toHeroId = DataCenter.HeroEvolveActivityManager:GetToHeroId()
    local result = {}
    local camp = GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "camp")
    result.camp_icon = HeroUtils.GetCampIconPath(camp)
    result.name = GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "name")
    result.desc = GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "desc")
    local skillList = {}
    local skills = HeroUtils.GetHeroSkillList(toHeroId, 1)
    for k, v in ipairs(skills) do
        local para = {}
        para.skillId = v
        para.icon_path = HeroUtils.GetSkillIcon(v)
        table.insert(skillList, para)
    end
    result.skillList = skillList
    return result
end

local function GetHeroEvolveTabInfo(self)
    local heroId = DataCenter.HeroEvolveActivityManager:GetChooseHeroId()
    local toHeroId = DataCenter.HeroEvolveActivityManager:GetToHeroId()
    local rarity1 = GetTableData(HeroUtils.GetHeroXmlName(), heroId, "rarity")
    local rarity2 = GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "rarity")

    local desc1 = string.format("<color='%s'>%s</color>",HeroUtils.GetRarityColorStr(rarity1), Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), heroId, "desc")))
    local desc2 = string.format("<color='%s'>%s</color>",HeroUtils.GetRarityColorStr(rarity2), Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "desc")))
    local name = Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), heroId, "name"))

    local result = {}
    if string.IsNullOrEmpty(DataCenter.HeroDataManager:GetHeroById(toHeroId)) then
        result.text = Localization:GetString("361094", desc1, name, desc2)
    else
        result.text = Localization:GetString("361101", name, desc2)
    end
    result.story = GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "brief_desc")
    result.name = Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "name"))
    result.dec = Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "desc"))
    result.heroId = toHeroId

    local giftId = tostring(DataCenter.HeroEvolveActivityManager:GetExchangeId())
    local packInfo = GiftPackageData.get(giftId)
    if packInfo and string.IsNullOrEmpty(DataCenter.HeroDataManager:GetHeroById(toHeroId)) and not DataCenter.HeroEvolveActivityManager:IsItemEnoughToHeroEvolve() then
        result.gift = giftId
    end
    result.hasHero = DataCenter.HeroDataManager:GetHeroById(toInt(toHeroId)) ~= nil
    local heroPackage, heroMedalPackage = DataCenter.HeroEvolveActivityManager:GetHeroAndMedalPackage()
    result.heroPackage = heroPackage
    result.heroMedalPackage = heroMedalPackage

    return result
end

local function BuyGiftPackage(self, packageInfo)
    local heroId = DataCenter.HeroEvolveActivityManager:GetChooseHeroId()
    local heroData = DataCenter.HeroDataManager:GetHeroById(heroId)
    if heroData and heroData:IsInMarch() then
        UIUtil.ShowTips(Localization:GetString("361100", Localization:GetString(heroData.config.name)))
        return
    end
    UIUtil.ShowMessage(Localization:GetString("321060"), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
        DataCenter.PayManager:CallPayment(packageInfo, UIWindowNames.UIActivityCenter)
    end, function() end)
end

local function NeedShowBackBtn(self)
    local toHeroId = DataCenter.HeroEvolveActivityManager:GetToHeroId()
    if toHeroId == nil then
        return false
    end
    local heroData = DataCenter.HeroDataManager:GetHeroById(toHeroId)
    return heroData == nil
end

HeroEvolveController.__init = __init
HeroEvolveController.__delete = __delete
HeroEvolveController.GetHeroChoosePanelData = GetHeroChoosePanelData
HeroEvolveController.GetHeroEvolveHeroInfoData = GetHeroEvolveHeroInfoData
HeroEvolveController.GetHeroEvolveTabInfo = GetHeroEvolveTabInfo
HeroEvolveController.GetHeroAttrTabInfo = GetHeroAttrTabInfo
HeroEvolveController.GetHeroSkillTabInfo = GetHeroSkillTabInfo
HeroEvolveController.BuyGiftPackage = BuyGiftPackage
HeroEvolveController.NeedShowBackBtn = NeedShowBackBtn
HeroEvolveController.SetForceShowChoose = SetForceShowChoose
HeroEvolveController.IsForceShowChoose = IsForceShowChoose

return HeroEvolveController