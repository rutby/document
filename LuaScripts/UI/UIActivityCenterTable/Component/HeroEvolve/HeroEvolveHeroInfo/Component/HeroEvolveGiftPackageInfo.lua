---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/5/15 12:22
---

local HeroEvolveGiftPackageInfo = BaseClass("HeroEvolveGiftPackageInfo", UIBaseContainer)
local base = UIBaseContainer
local GiftButton = require "UI.UIActivityCenterTable.Component.HeroEvolve.HeroEvolveHeroInfo.Component.CommonGiftButton"
local HeroEvolveGiftCell = require "UI.UIActivityCenterTable.Component.HeroEvolve.HeroEvolveHeroInfo.Component.HeroEvolveGiftCell"
local name_path = "giftName"
local all_buy_path = "allBuyText"
local gift_path = "buyBtn"
local btn_path = "icon"
local reward_path = "Rect_Reward"
local Rect_Reward = "Rect_Reward/Content"

local CellType = {
    Cell_Type_Hero = 1,
    Cell_Type_Medal = 2,
}

local SoldOutLan = {}
SoldOutLan[CellType.Cell_Type_Hero] = 321079
SoldOutLan[CellType.Cell_Type_Medal] = 321080

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
end

local function ComponentDefine(self)
    self.gift = self:AddComponent(GiftButton, gift_path)
    self.name = self:AddComponent(UIText, name_path)
    self.all_buy = self:AddComponent(UIText, all_buy_path)
    self.all_buy:SetLocalText(320050)
    self.btn = self:AddComponent(UIButton, btn_path)
    self.btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        --self:OnIconClick()
    end)

    self.reward = self:AddComponent(UIBaseContainer,reward_path)
    self.reward_rect 	= self:AddComponent(UIBaseContainer,Rect_Reward)
end

local function ComponentDestroy(self)

end

local function OnDestroy(self)
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateGiftPackData, self.RefreshView)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.UpdateGiftPackData, self.RefreshView)
    base.OnRemoveListener(self)
end

local function SetData(self, data, type)
    self.giftId = data
    self.type = type
    self:RefreshView()
end

local function RefreshView(self)
    local packageInfo = GiftPackageData.get(self.giftId)
    if packageInfo then
        self.reward:SetActive(true)
        self.all_buy:SetActive(false)
        self.gift:SetActive(true)
        self.gift:SetData(self.giftId, 1, BindCallback(self, self.OnGiftClick))
        self:RefreshReward(packageInfo)
    else
        self.reward:SetActive(false)
        self.all_buy:SetActive(true)
        self.gift:SetActive(false)
    end
    local nameStr = SoldOutLan[self.type]
    self.name:SetLocalText(nameStr)
end

local function OnGiftClick(self, packageInfo)
    DataCenter.PayManager:CallPayment(packageInfo, UIWindowNames.UIActivityCenter)
end

local function OnIconClick(self)
    local packageInfo = GiftPackageData.get(self.giftId)
    if packageInfo then
        local x = self.btn.transform.position.x
        local y = self.btn.transform.position.y
        local width = self.btn.rectTransform.rect.width
        local pos = self.btn.transform.position
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIVipRewardTip, 2, x, y, self.giftId, width,pos)
    end
end

function HeroEvolveGiftPackageInfo:RefreshReward(packageInfo)
    local list = self:GetRewardList(packageInfo)
    self:ClearScroll()
    self.model = {}
    for i = 1, table.length(list) do
        --复制基础prefab，每次循环创建一次
        self.model[i] = self:GameObjectInstantiateAsync(UIAssets.HeroEvolveGiftCell, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.reward_rect.transform)
            go.transform:Set_localScale(0.5,0.5,0.5)
            go.name ="item" .. i
            local cell = self.reward_rect:AddComponent(HeroEvolveGiftCell,go.name)
            cell:ReInit(list[i])
        end)
    end
end

function HeroEvolveGiftPackageInfo:GetRewardList(packageInfo)
    local listParam = {}
    local info  = packageInfo

    local diamondWorth = tonumber(info:getDiamond())
    if diamondWorth and diamondWorth > 0 then
        local param = {}
        param.rewardType = RewardType.GOLD
        param.count = diamondWorth
        table.insert(listParam,param)
    end

    -- 英雄
    local heroStr = info:getHeroesStr()
    if (not string.IsNullOrEmpty(heroStr)) then
        local arr = string.split(heroStr, ";")
        if (#arr == 2) then
            local param = {}-- UIGiftPackageCell.Param.New()
            param.rewardType = RewardType.HERO
            param.itemId = arr[1]
            param.count = arr[2]
            table.insert(listParam,param)
        end
    end

    -- 普通道具
    local str = info:getItemsStr()
    local _item_use = info:getItemUse()
    if _item_use ~= nil and _item_use ~= "" then
        str = _item_use .. "|" .. str
    end

    local arrMiddle = string.split(str,"|")
    if arrMiddle ~= nil and #arrMiddle > 0 then
        for k,v in ipairs(arrMiddle) do
            local arr = string.split(v,";")
            if arr[1] ~= "" then
                local param = {}-- UIGiftPackageCell.Param.New()
                param.rewardType = RewardType.GOODS
                param.itemId = arr[1]
                local numCount = tonumber(arr[2])
                param.count = string.GetFormattedSeperatorNum(numCount)
                table.insert(listParam,param)
            end
        end
    end

    local resourceStr = info:getResourceStr()
    if resourceStr and resourceStr ~= "" then
        local resource = string.split(resourceStr,";")
        local param = {}
        param.rewardType = ResTypeToReward[tonumber(resource[1])]
        param.count = string.GetFormattedSeperatorNum(tonumber(resource[2]))
        table.insert(listParam,2,param)
    end

    local temp = info:GetDiscountTips()
    if temp then
        if temp[4] then
            local replace = temp[4]
            for i ,v in pairs(replace) do
                if listParam[i] then
                    listParam[i] = v
                end
            end
        end
    end

    return listParam
end

function HeroEvolveGiftPackageInfo:ClearScroll()
    self.reward_rect:RemoveComponents(HeroEvolveGiftCell)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

HeroEvolveGiftPackageInfo.OnCreate = OnCreate
HeroEvolveGiftPackageInfo.OnDestroy = OnDestroy
HeroEvolveGiftPackageInfo.OnEnable = OnEnable
HeroEvolveGiftPackageInfo.OnDisable = OnDisable
HeroEvolveGiftPackageInfo.ComponentDefine =ComponentDefine
HeroEvolveGiftPackageInfo.ComponentDestroy =ComponentDestroy
HeroEvolveGiftPackageInfo.OnAddListener =OnAddListener
HeroEvolveGiftPackageInfo.OnRemoveListener =OnRemoveListener
HeroEvolveGiftPackageInfo.SetData = SetData
HeroEvolveGiftPackageInfo.RefreshView = RefreshView
HeroEvolveGiftPackageInfo.OnGiftClick = OnGiftClick
HeroEvolveGiftPackageInfo.CellType = CellType
HeroEvolveGiftPackageInfo.OnIconClick = OnIconClick

return HeroEvolveGiftPackageInfo