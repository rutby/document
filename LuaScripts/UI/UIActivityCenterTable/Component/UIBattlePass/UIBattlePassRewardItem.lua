---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime:
---

local UIBattlePassRewardItem = BaseClass("UIBattlePassRewardItem", UIBaseContainer)
local base = UIBaseContainer
local UIBattlePassItemCell = require "UI.UIActivityCenterTable.Component.UIBattlePass.UIBattlePassItemCell"

local root_path = "Root"
local cell_top_path = "Root/CellTop"
local cell_bottom_1_path = "Root/CellBottom1"
local cell_bottom_2_path = "Root/CellBottom2"
local desc_path = "Root/DescBg/Desc"
local black_img_path = "Root/Img_Black"
local lineUp_path = "Root/lineBg/lineUp"
local lineDown_path = "Root/lineBg/lineDown"
local desBg_path = "Root/DescBg"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.root_go = self:AddComponent(UIBaseContainer, root_path)
    self.cell_top = self:AddComponent(UIBattlePassItemCell, cell_top_path)
    self.cell_bottom_1 = self:AddComponent(UIBattlePassItemCell, cell_bottom_1_path)
    self.cell_bottom_2 = self:AddComponent(UIBattlePassItemCell, cell_bottom_2_path)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self._black_img = self:AddComponent(UIBaseContainer,black_img_path)
    self.lineUp = self:AddComponent(UIBaseContainer, lineUp_path)
    self.lineDown = self:AddComponent(UIBaseContainer, lineDown_path)
    self.desBg = self:AddComponent(UIImage, desBg_path)
end

local function ComponentDestroy(self)
    self.root_go = nil
    self.cell_top = nil
    self.cell_bottom_1 = nil
    self.cell_bottom_2 = nil
    self.desc_text = nil
    self._black_img = nil
end

local function DataDefine(self)
    self.view = nil
    self.data = nil
    self.onClick = nil
end

local function DataDestroy(self)
    self.view = nil
    self.data = nil
    self.onClick = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function SetData(self, data, view,isNextShow)
    self.view = view
    self.data = data

    self.root_go:SetActive(true)
    if isNextShow then
        -- self._black_img:SetActive(false)
    else
        -- self._black_img:SetActive(data.curLv < data.level)
        self.desBg:LoadSprite(self:GetDesBg())
    end
    
    self.desc_text:SetText(data.level)
    self.lineUp:SetActive(data.showUp and not isNextShow)
    self.lineDown:SetActive(data.showDown and not isNextShow)
    
    local locked
    local checked 
    local canGet
    
    -- top
    locked =  data.curLv < data.level  
    checked = data.normalState == 1
    canGet = not locked and not checked
    if data.normalReward[1] then
        local dataTop =
        {
            locked = locked,
            reward = data.normalReward[1],
            state  = data.normalState,
            isTop = true,
            unlock = data.unlock,
            actId = data.actId,
            lv = data.level,
            callBack = data.callBack,
            claimCallback = data.claimCallback
        }
        self.cell_top:SetActive(true)
        self.cell_top:SetData(dataTop)
    else
        self.cell_top:SetActive(false)
    end

    -- bottom
   -- locked = DataCenter.BuildManager.MainLv < data.level or not self.view.specialUnlocked
    checked = data.specialState == 1
    canGet = not locked and not checked
    
    -- 紫水晶放上面
    if #data.specialReward == 2 then
        table.sort(data.specialReward, function(a, b)
            return a.type == RewardType.GOLD
        end)
    end

    if data.specialReward[1] then
        local dataBottom1 =
        {
            locked = locked,
            reward = data.specialReward[1],
            state  = data.specialState,
            isTop = false,
            unlock = data.unlock,
            actId = data.actId,
            lv = data.level,
            callBack = data.callBack,
            claimCallback = data.claimCallback
        }
        self.cell_bottom_1:SetActive(true)
        self.cell_bottom_1:SetData(dataBottom1)
    else
        self.cell_bottom_1:SetActive(false)
    end
    if data.specialReward[2] then
        local dataBottom2 =
        {
            locked = locked,
            reward = data.specialReward[2],
            state  = data.specialState,
            isTop = false,
            unlock = data.unlock,
            actId = data.actId,
            lv = data.level,
            callBack = data.callBack,
            claimCallback = data.claimCallback
        }
        self.cell_bottom_2:SetActive(true)
        self.cell_bottom_2:SetData(dataBottom2)
    else
        self.cell_bottom_2:SetActive(false)
    end
end

local function SetBlank(self)
    self.root_go:SetActive(false)
end

local function GetDesBg(self)
    if self.data.curLv < self.data.level then
        return "Assets/Main/Sprites/UI/UIBattlePass/UIBattlePass_lv_02.png"
    elseif self.data.curLv == self.data.level then
        --local canGet = self.data.normalState ~= 1 or (data.specialState ~= 1 and self.data.unlock)
        --if canGet then
        --    return "Assets/Main/Sprites/UI/UIBattlePass/UIBattlePass_lv_01.png"
        --else
        --    return "Assets/Main/Sprites/UI/UIBattlePass/UIBattlePass_lv_00.png"
        --end
        return "Assets/Main/Sprites/UI/UIBattlePass/UIBattlePass_lv_00.png"
    else
        return "Assets/Main/Sprites/UI/UIBattlePass/UIBattlePass_lv_00.png"
    end
end

UIBattlePassRewardItem.OnCreate = OnCreate
UIBattlePassRewardItem.OnDestroy = OnDestroy
UIBattlePassRewardItem.OnEnable = OnEnable
UIBattlePassRewardItem.OnDisable = OnDisable
UIBattlePassRewardItem.ComponentDefine = ComponentDefine
UIBattlePassRewardItem.ComponentDestroy = ComponentDestroy
UIBattlePassRewardItem.DataDefine = DataDefine
UIBattlePassRewardItem.DataDestroy = DataDestroy
UIBattlePassRewardItem.OnAddListener = OnAddListener
UIBattlePassRewardItem.OnRemoveListener = OnRemoveListener

UIBattlePassRewardItem.SetData = SetData
UIBattlePassRewardItem.SetBlank = SetBlank
UIBattlePassRewardItem.GetDesBg = GetDesBg

return UIBattlePassRewardItem