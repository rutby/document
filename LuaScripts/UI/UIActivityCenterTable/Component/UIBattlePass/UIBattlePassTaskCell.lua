---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local UIBattlePassTaskCell = BaseClass("UIBattlePassTaskCell",UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local RewardUtil = require "Util.RewardUtil"
local UIBPTaskRewardCell = require "UI.UIActivityCenterTable.Component.UIBattlePass.UIBPTaskRewardCell"
local UIGray = CS.UIGray
local Txt_Name = "Txt_Name"
local rewardBg = "rewardBg"
local Txt_Score = "Txt_Score"
local Img_Icon = "Img_Icon"
local Txt_TaskTarget = "Txt_TaskTarget"
local Btn_Reward = "Btn_Reward"
local Txt_Reward = "Btn_Reward/Txt_Reward"
local Btn_Go = "Btn_Go"
local Txt_Go = "Btn_Go/Txt_Go"
local Btn_Locked = "Btn_Locked"
local Txt_Locked = "Btn_Locked/Txt_Locked"
local Completed_path = "Completed"
local Img_integral = "Txt_Score/Img_integral"
local Rect_Reward = "Rect_Reward"
function UIBattlePassTaskCell:OnCreate()
    base.OnCreate(self)
    
    --任务名称
    self._name_txt = self:AddComponent(UITextMeshProUGUIEx,Txt_Name)

    self._icon_img = self:AddComponent(UIImage,Img_Icon)
    --任务经验
    self._score_txt  = self:AddComponent(UITextMeshProUGUIEx,Txt_Score)
    
    self._taskTarget_txt = self:AddComponent(UITextMeshProUGUIEx,Txt_TaskTarget)

    self._reward_btn = self:AddComponent(UIButton,Btn_Reward)
    self._reward_txt = self:AddComponent(UITextMeshProUGUIEx,Txt_Reward)
    self._reward_txt:SetLocalText(170004) 
    self._reward_btn:SetOnClick(function()
        self:OnClickReward()
    end)

    self._go_btn = self:AddComponent(UIButton,Btn_Go)
    self._go_txt = self:AddComponent(UITextMeshProUGUIEx,Txt_Go)
    self._go_txt:SetLocalText(110003) 
    self._go_btn:SetOnClick(function()
        self:OnClickGo()
    end)

    self._locked_btn = self:AddComponent(UIButton, Btn_Locked)
    self._locked_txt = self:AddComponent(UITextMeshProUGUIEx, Txt_Locked)
    self._locked_txt:SetLocalText(120050)
    
    --self._completed_img = self:AddComponent(UIImage,"Img_Completed")
    self.completed = self:AddComponent(UIBaseContainer, Completed_path)

    self.rewardRect = self:AddComponent(UIImage, Img_integral)

    self.content = self:AddComponent(UIBaseContainer,Rect_Reward)
    self.rewardBg = self:AddComponent(UIBaseContainer,rewardBg)
end

function UIBattlePassTaskCell:OnDestroy()
    self:SetAllCellDestroy()
    self._name_txt = nil
    self._score_txt = nil
    self.isSend = nil
    base.OnDestroy(self)
end

function UIBattlePassTaskCell:OnEnable()
    base.OnEnable(self)
end

function UIBattlePassTaskCell:OnDisable()
    base.OnDisable(self)
end

function UIBattlePassTaskCell:RefreshData(param,view)
    self.isSend = false
    self.param = param
    self.taskId = param.info.taskId
    self.taskValue = DataCenter.TaskManager:FindTaskInfo(self.taskId)
    self.template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), self.taskId)
    self.completed:SetActive(true)
    self._taskTarget_txt:SetActive(true)
    self._score_txt:SetLocalText(391038,param.info.exp)
    self._reward_txt:SetLocalText(170004)
    --self._icon_img:LoadSprite(string.format(LoadPath.UIMainQuest,self.template.icon))
    --检查任务是否解锁
    if param.info.startTime > UITimeManager:GetInstance():GetServerTime() then
        --未解锁
        self._locked_btn:SetActive(true)
        UIGray.SetGray(self._locked_btn.transform, true)
    else
        self._locked_btn:SetActive(false)
    end
    
    local state = self.param.info.state
    if state == 0 then       --未完成
        if tonumber(self.template.gotype2) == 0 then
            self._reward_btn:SetActive(true)
            UIGray.SetGray(self._reward_btn.transform, true)
            self._go_btn:SetActive(false)
            self.completed:SetActive(false)
        else
            self._reward_btn:SetActive(false)
            self._go_btn:SetActive(true)
            self.completed:SetActive(false)
        end
    elseif state == 1 then   --完成 此情况下没有领过奖励
        self._reward_btn:SetActive(true)
        UIGray.SetGray(self._reward_btn.transform, false,true)
        self._go_btn:SetActive(false)
        self.completed:SetActive(false)
    elseif state == 2 then   --已领过免费经验
        self._go_btn:SetActive(false)
        self._reward_txt:SetLocalText(320440)
        if param.unlock == 0 then               --未解锁付费
            if self.param.info.reward or self.param.info.payExp ~= 0 then       --如果没有二次奖励或者二次经验
                self._reward_btn:SetActive(true)
                UIGray.SetGray(self._reward_btn.transform, false,true)
                self.completed:SetActive(false)
            else
                self._reward_btn:SetActive(false)
                self.completed:SetActive(true)
            end
        else                                    --解锁付费
            if param.info.payExp == 0 then
                self._reward_btn:SetActive(false)
                self.completed:SetActive(true)
            else
                self._reward_btn:SetActive(true)
                UIGray.SetGray(self._reward_btn.transform, false,true)
                self.completed:SetActive(false)
            end
            if param.info.payExp ~= 0 then
                self._score_txt:SetLocalText(391038,param.info.payExp)
            end
        end
    elseif state == 3 then   --已领过付费经验
        self._reward_btn:SetActive(false)
        self._go_btn:SetActive(false)
        self._taskTarget_txt:SetActive(false)
        self.completed:SetActive(true)
    end
    local process = ""
    local feizi = self.param.info.num        
    local feimu = self.template.para2
    if (feizi - feimu) >= 0 then
        feizi = feimu
    end
    feizi = string.GetFormattedSeperatorNum(feizi)
    feimu = string.GetFormattedSeperatorNum(feimu)
    process = "("..feizi.."/"..feimu..")"
    self._name_txt:SetText(DataCenter.QuestTemplateManager:GetDesc(self.template))
    
    self._taskTarget_txt:SetText(process)
    
    self:RefreshReward(self.param)
end

function UIBattlePassTaskCell:SetAllCellDestroy()
    self.content:RemoveComponents(UIBPTaskRewardCell)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end

function UIBattlePassTaskCell:RefreshReward(list)
    self.showList = list.info.reward
    if list.info.state < 2 then
        if list.info.reward == nil then
            self.content:SetActive(false)
            self.rewardBg:SetActive(true)
            return
        end
        self.showList = list.info.reward
    elseif list.info.state >= 2 then
        self.showList = list.info.extraReward
        if list.info.extraReward == nil then
            self.content:SetActive(false)
            self.rewardBg:SetActive(true)
            return
        end
        self.showList = list.info.extraReward
    end
    self:SetAllCellDestroy()
    self.content:SetActive(true)
    self.rewardBg:SetActive(false)
    self.model = {}
    if self.showList ~= nil then
        for i = 1, table.length(self.showList) do
            --复制基础prefab，每次循环创建一次
            self.model[i] = self:GameObjectInstantiateAsync(UIAssets.UIBPTaskRewardCell, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject; 
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.content.transform)
                go.transform:Set_localScale(1.1,1.1,1.1)
                go.name ="item" .. i
                local cell = self.content:AddComponent(UIBPTaskRewardCell,go.name)
                cell:ReInit(self.showList[i])
                self.showList[i].iconImg = go.transform:Find("IconImg")
            end)
        end
    end
end

--任务奖励
function UIBattlePassTaskCell:GetForward()
    local tempType = {}
    if self.showList ~= nil then
        for i, v in ipairs(self.showList) do
            if v.rewardType == RewardType.METAL or v.rewardType == RewardType.WATER or v.rewardType == RewardType.ELECTRICITY then
                tempType = {ResourceType.Metal,ResourceType.Electricity,ResourceType.Water}
                break
            end
        end
        EventManager:GetInstance():Broadcast(EventId.RefreshTopResByPickUp,tempType)
        for i, v in ipairs(self.showList) do
            local rewardType = v.rewardType
            local itemId = v.itemId
            local pic = RewardUtil.GetPic(v.rewardType,itemId)
            local img = self.showList[i].iconImg
            if pic~="" then
                UIUtil.DoFly(tonumber(rewardType),3,pic,img.transform.position,Vector3.New(0,0,0))
            end
        end
    end
end

function UIBattlePassTaskCell:OnClickReward()
    if self.param.callBack() then
        UIUtil.ShowTipsId(370100)
        return
    end
    if self.param.info.state == 2 and self.param.unlock == 0 then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattlePassGiftPackagePopUp, {anim = true,isBlur = true},self.param.actId)
        return
    end
    if self.isSend then
        return
    end
    self.isSend = true
    self:GetForward()
    local rewardTyp= RewardType.BATTLE_PASS
    local flyPos = self.param.flyPos
    local pic= string.format(LoadPath.ItemPath,"Common_icon_battlecourage")
    UIUtil.DoFly(tonumber(rewardTyp),3,pic,self.rewardRect.transform.position,flyPos,40,40,nil,nil,1)
    SFSNetwork.SendMessage(MsgDefines.ReceiveBattlePassTaskReward,self.param.actId,self.taskId)
end

function UIBattlePassTaskCell:OnClickGo()
    if self.param.callBack() then
        UIUtil.ShowTipsId(370100)
        return
    end
    GoToUtil.GoToByQuestId(self.template)
end

return UIBattlePassTaskCell