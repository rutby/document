---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/3 20:09
---RobotWarsMain.lua

local base = UIBaseView--Variable
local RobotWarsMain = BaseClass("RobotWarsMain", base)--Variable
local UIMasteryEntrance = require "UI.UIMastery.Component.UIMasteryEntrance"
local Localization = CS.GameEntry.Localization

local closeBtn_path = "safeArea/closeBtn"
local title1_path = "safeArea/middleLayer_s1/title1"
local title2_path = "safeArea/middleLayer_s1/title2"
local title3_path = "safeArea/middleLayer_s1/title3"
local time_obj_path = "safeArea/middleLayer_s1/Time"
local timeTip_path = "safeArea/middleLayer_s1/Time/timeTip"
local timeCountDown_path = "safeArea/middleLayer_s1/Time/timeCD"
local infoBtn_path = "safeArea/Group_Button/infoBtn"
local infoBtnTxt_path = "safeArea/Group_Button/infoBtn/infoBtnTxt"
local heroBtn_path = "safeArea/Group_Button/heroBtn"
local heroBtnTxt_path = "safeArea/Group_Button/heroBtn/heroBtnTxt"
local recordBtn_path = "safeArea/Group_Button/recordBtn"
local recordBtnTxt_path = "safeArea/Group_Button/recordBtn/recordBtn_text"
local getRewardBtn_path = "safeArea/middleLayer_s1/getRewardBtn"
local getRewardTxt_path = "safeArea/middleLayer_s1/getRewardBtn/rewardBtnTxt"
local jumpBtn_path = "safeArea/middleLayer_s1/jumpBtn"
local jumpBtnTxt_path = "safeArea/middleLayer_s1/jumpBtn/jumpBtnTxt"
local seasonEndTip_path = "safeArea/middleLayer_s1/seasonEndTip"
local bgImg_path = "Image"
local seasonImg_path = "safeArea/middleLayer_s1/ImageIcon"
local unlockRuinLvTip_path = "safeArea/middleLayer_s1/unlockRuinLvTip"
local newWorldBtn_path = "safeArea/Group_Button/newWorldBtn"
local newWorldBtnTxt_path = "safeArea/Group_Button/newWorldBtn/newWorldBtnTxt"
local taskBtn_path = "safeArea/Group_Button/TaskBtn"
local taskBtnTxt_path = "safeArea/Group_Button/TaskBtn/TaskBtnTxt"
local introBtn_path = "safeArea/Group_Button/introBtn"
local introBtnTxt_path = "safeArea/Group_Button/introBtn/introBtnTxt"
local extarTip_path = "safeArea/middleLayer_s1/extraTip"
local mastery_entrance_path = "safeArea/layout/UIMasteryEntrance"
local migrate_btn_path = "safeArea/Group_Button/migrateBtn"
local migrate_text_path = "safeArea/Group_Button/migrateBtn/migrateBtnTxt"
local migrate_btn_red_dot_path = "safeArea/Group_Button/migrateBtn/migrateBtn_RedPoint"
local interstellar_path = "safeArea/layout/UIInterstellar"
local interstellar_obj_path = "safeArea/layout/UIInterstellar/GameObject"
local interstellar_red_path = "safeArea/layout/UIInterstellar/migrateRedPoint"
local interstellar_time_path = "safeArea/layout/UIInterstellar/Txt_InterstellarEndTime"
local interName_path = "safeArea/layout/UIInterstellar/Txt_InterName"
local stamina_ball_path = "safeArea/layout/UIExperienceEntrance"
local stamina_red_dot_path = "safeArea/layout/UIExperienceEntrance/RedDot"
local stamina_slider_path = "safeArea/layout/UIExperienceEntrance/Slider"
local stamina_txt_path = "safeArea/layout/UIExperienceEntrance/Name"
local info_path = "safeArea/middleLayer_s1/Time/timeCD/Info"

local groupBtn_path = "safeArea/Group_Button/groupBtn"
local groupBtnTxt_path = "safeArea/Group_Button/groupBtn/GroupText"

local function OnCreate(self)
    base.OnCreate(self)
    SFSNetwork.SendMessage(MsgDefines.SeasonBalancePackageViewOpen)
    SFSNetwork.SendMessage(MsgDefines.SeasonBalanceViewOpen)
    self:ComponentDefine()
    self:DataDefine()
    self:SetData()
end

local function OnDestroy(self)
    self:DeleteTimer()
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
    self:RefreshMigrate()
    self:CheckShowStamina()
    self:CheckShowMigrateRed()
    self:RefreshAll()

    local seasonEndState = DataCenter.RobotWarsManager:GetSeasonEndState()
    if seasonEndState and not self.isShowIntro then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGlorySeasonEnd)
        local curTime = UITimeManager:GetInstance():GetServerSeconds()
        self.isShowIntro = true
        local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
        Setting:SetString(LuaEntry.Player.uid .. "_".."SEASON_END"..seasonId,tostring(curTime))
    end

    local actData = nil
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
    if table.count(dataList) > 0 then
        actData = dataList[1]
    end
    self:RefreshTime(actData)
    self:AddTimer(actData)
end

-- 隐藏
local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickCloseBtn()
    end)
    self.title1N = self:AddComponent(UIText, title1_path)
    self.title1N:SetLocalText(302339)
    --self.title2N = self:AddComponent(UIText, title2_path)
    --self.title2N:SetLocalText(302340)
    self.title3N = self:AddComponent(UIText, title3_path)
    self.title3N:SetLocalText(302344)
    self.time_obj = self:AddComponent(UIImage, time_obj_path)
    self.timeTipN = self:AddComponent(UIText, timeTip_path)
    --self.timeTipN:SetLocalText(302341)
    self.timeCountDownN = self:AddComponent(UIText, timeCountDown_path)
    --self.timeCountDownN:SetLocalText(302342)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickInfoBtn()
    end)
    self.infoBtnTxtN = self:AddComponent(UIText, infoBtnTxt_path)
    self.infoBtnTxtN:SetLocalText(302027)
    self.heroBtnTxtN = self:AddComponent(UIText, heroBtnTxt_path)
    self.heroBtnTxtN:SetLocalText(100275)
    self.heroBtnN = self:AddComponent(UIButton, heroBtn_path)
    self.heroBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickHeroBtn()
    end)
    self.rewardBtnTxtN = self:AddComponent(UIText, recordBtnTxt_path)
    self.rewardBtnTxtN:SetLocalText(390334)
    self.rewardBtnN = self:AddComponent(UIButton, recordBtn_path)
    self.rewardBtnN:SetOnClick(function()
        self:OnClickRewardPreviewBtn()
    end)
    --self.imgBg = self:AddComponent(UIImage,"Image")
    --self.icon = self:AddComponent(UIImage,"ImageIcon")
    self.getRewardBtnN = self:AddComponent(UIButton, getRewardBtn_path)
    self.getRewardBtnN:SetOnClick(function()
        self:OnClickRewardBtn()
    end)
    self.getRewardTxtN = self:AddComponent(UIText, getRewardTxt_path)
    self.jumpBtnN = self:AddComponent(UIButton, jumpBtn_path)
    self.jumpBtnN:SetOnClick(function()
        self:OnClickJumpBtn()
    end)
    self.jumpBtnTxtN = self:AddComponent(UIText, jumpBtnTxt_path)
    self.jumpBtnTxtN:SetLocalText(110036)
    self.seasonEndTipN = self:AddComponent(UIText, seasonEndTip_path)
    self.seasonEndTipN:SetLocalText(110360)
    self.bgImgN = self:AddComponent(UIImage, bgImg_path)
    self.seasonImgN = self:AddComponent(UIImage, seasonImg_path)
    self.unlockRuinLvTipN = self:AddComponent(UIText, unlockRuinLvTip_path)
    self.newWorldBtnN = self:AddComponent(UIButton, newWorldBtn_path)
    self.newWorldBtnN:SetOnClick(function()
        self:OnClickNewWorldBtn()
    end)
    self.newWorldBtnTxtN = self:AddComponent(UIText, newWorldBtnTxt_path)
    self.newWorldBtnTxtN:SetLocalText(110372)
    self.taskBtnN = self:AddComponent(UIButton,taskBtn_path)
    self.taskBtnN:SetOnClick(function()
        self:OnClickTaskBtn()
    end)
    self.taskBtnTxtN = self:AddComponent(UIText,taskBtnTxt_path)
    self.taskBtnTxtN:SetLocalText(110357)
    self.introBtnN = self:AddComponent(UIButton, introBtn_path)
    self.introBtnN:SetOnClick(function()
        self:OnIntroBtn()
    end)
    self.introBtnTxtN = self:AddComponent(UIText, introBtnTxt_path)
    self.introBtnTxtN:SetLocalText(110521)
    self.extraTipN = self:AddComponent(UIText, extarTip_path)
    self.mastery_entrance = self:AddComponent(UIMasteryEntrance, mastery_entrance_path)

    self._interstellar_btn = self:AddComponent(UIButton,interstellar_path)
    self._interstellar_btn:SetOnClick(function()
        self:OnInterClick()
    end)
    self.interstellar_obj = self:AddComponent(UIBaseContainer,interstellar_obj_path)
    self.interstellar_red = self:AddComponent(UIBaseContainer,interstellar_red_path)
    self.interstellar_time = self:AddComponent(UIText,interstellar_time_path)
    self._interName_txt= self:AddComponent(UIText,interName_path)
    self.migrate_btn = self:AddComponent(UIButton, migrate_btn_path)
    self.migrate_btn:SetOnClick(function()
        self:OnMigrateClick()
    end)
    self.migrate_text = self:AddComponent(UIText, migrate_text_path)
    self.migrate_text:SetLocalText(250353)
    self.migrate_btn_red_dot = self:AddComponent(UIBaseContainer, migrate_btn_red_dot_path)
    
    --self._endTime_txt = self:AddComponent(UIText,endTime_txt_path)
    self.info_btn = self:AddComponent(UIButton, info_path)
    self.info_btn:SetOnClick(function()
        self:OnInfoClick()
    end)

    self.slider = self:AddComponent(UISlider,stamina_slider_path)
    self.stamina_ball_btn = self:AddComponent(UIButton,stamina_ball_path)
    self.stamina_ball_btn:SetOnClick(function()
        self:OnStaminaClick()
    end)
    self.stamina_red_dot = self:AddComponent(UIBaseContainer,stamina_red_dot_path)
    self.stamina_txt = self:AddComponent(UIText,stamina_txt_path)
    self.stamina_txt:SetLocalText(376169)

    
    self._group_btn = self:AddComponent(UIButton,groupBtn_path)
    self._group_btn:SetOnClick(function()
        self:OnGroupClick()
    end)
    self._group_txt = self:AddComponent(UIText,groupBtnTxt_path)
    self._group_txt:SetLocalText(302743)
end

local function ComponentDestroy(self)
    self.closeBtnN = nil
    self.title1N = nil
    self.title2N = nil
    self.title3N = nil
    self.timeTipN = nil
    self.timeCountDownN = nil
    self.infoBtnN = nil
    self.heroBtnN = nil
    self.extraTipN = nil
    self.mastery_entrance = nil
end

local function DataDefine(self)
    self.isShowIntro = true
    self.seasonId = nil
    self.timer_btn = nil
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
    --self.timer_actionEnd = function(temp)
    --    self:RefreshEndTime(temp)
    --end
end

local function DataDestroy(self)
    --self:DeleteEndTimer()
    self.seasonId = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnRobotWarActivityUpdate, self.RefreshAll)
    self:AddUIListener(EventId.GetSeasonRewardData, self.RefreshByStage)
    self:AddUIListener(EventId.OnClaimSeasonRewardSucc, self.RefreshByStage)
    self:AddUIListener(EventId.OnRefreshMigrateRedPot, self.RefreshMigrate)
    self:AddUIListener(EventId.StaminaBallData, self.CheckShowStamina)
    self:AddUIListener(EventId.RefreshActivityRedDot, self.CheckShowMigrateRed)
    self:AddUIListener(EventId.GetMigrateList, self.CheckShowMigrateRed)
    self:AddUIListener(EventId.RefreshMigrateInfo,self.RefreshInterStelltar)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnRobotWarActivityUpdate, self.RefreshAll)
    self:RemoveUIListener(EventId.OnClaimSeasonRewardSucc, self.RefreshByStage)
    self:RemoveUIListener(EventId.GetSeasonRewardData, self.RefreshByStage)
    self:RemoveUIListener(EventId.OnRefreshMigrateRedPot, self.RefreshMigrate)
    self:RemoveUIListener(EventId.RefreshActivityRedDot, self.CheckShowMigrateRed)
    self:RemoveUIListener(EventId.GetMigrateList, self.CheckShowMigrateRed)
    self:RemoveUIListener(EventId.StaminaBallData, self.CheckShowStamina)
    self:RemoveUIListener(EventId.RefreshMigrateInfo,self.RefreshInterStelltar)
    base.OnRemoveListener(self)
end

local function SetData(self)
    self.info_btn:SetActive(false)
    SFSNetwork.SendMessage(MsgDefines.MigrateActivityInfo)
    self:RefreshAll()
end

local function RefreshAll(self)
    self.seasonId = DataCenter.SeasonDataManager:GetSeasonId()
    self.season = DataCenter.SeasonDataManager:GetSeason() or -1

    local seasonName = GetTableData(TableName.APS_Season,self.seasonId, 'subTitle')
    if string.IsNullOrEmpty(seasonName) then
        self.title3N:SetText("")
    else
        self.title3N:SetLocalText(seasonName)
    end
    self:RefreshByStage()
    
    --self:ReIntEndTime()
    --self:RefreshMiddle()
    --self:RefreshBg()
end

--[[
local function RefreshBg(self)
    local activityInfo = DataCenter.RobotWarsManager:GetActivityInfo()
    if not activityInfo then
        return
    end
    local seasonId = self.seasonId
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local settledRewardEndTime = activityInfo.WorldSeasonRewardEndTime
    --if settledRewardEndTime > 0 and curTime > settledRewardEndTime then
    --    seasonId = seasonId + 1
    --end
    if seasonId == 1 then
        self.time_obj:LoadSprite("Assets/Main/Sprites/UI/UISeasonRobots/competition_img_time2.png")
        self.timeTipN:SetColor(Color.New(0.38,0.97,0.88,1))
        self.timeCountDownN:SetColor(WhiteColor)
        self.heroBtnN:SetActive(false)
    else
        self.time_obj:LoadSprite("Assets/Main/Sprites/UI/UISeasonRobots/competition_img_time.png")
        self.timeTipN:SetColor(WhiteColor)
        self.timeCountDownN:SetColor(WhiteColor)
        self.heroBtnN:SetActive(true)
    end
    self.infoBtnN:LoadSprite(string.format("Assets/Main/Sprites/UI/UISeasonRobots/competition_icon_rule_%s.png", seasonId))
    self.heroBtnN:LoadSprite(string.format("Assets/Main/Sprites/UI/UISeasonRobots/competition_icon_newhero_%s.png", seasonId))
    self.rewardBtnN:LoadSprite(string.format("Assets/Main/Sprites/UI/UISeasonRobots/competition_icon_match_%s.png", seasonId))

    local seasonName = GetTableData(TableName.APS_Season,seasonId, 'subTitle')
    if string.IsNullOrEmpty(seasonName) then
        self.title3N:SetText("")
    else
        self.title3N:SetLocalText(seasonName)
    end

    local iconImg = GetTableData(TableName.APS_Season,seasonId, 'icon')
    local bgImg = GetTableData(TableName.APS_Season,seasonId, 'bg')
    if bgImg then
        self.bgImgN:LoadSprite(string.format("Assets/Main/TextureEx/UIActivity/%s.png", bgImg))
    end
    if iconImg then
        self.seasonImgN:LoadSprite(string.format("Assets/Main/Sprites/UI/UISeasonRobots/%s.png", iconImg))
    end
end
--]]

local function RefreshByStage(self)
    self.curStage, self.endTime = DataCenter.RobotWarsManager:GetCurStage()
    
    self.time_obj:SetActive(false)
    self.seasonEndTipN:SetActive(false)
    self.unlockRuinLvTipN:SetActive(false)
    self.heroBtnN:SetActive(self.seasonId == 2)
    self.jumpBtnN:SetActive(false)
    self.getRewardBtnN:SetActive(false)
    self.newWorldBtnN:SetActive(false)

    local activityData = DataCenter.RobotWarsManager:GetActivityInfo()
    if self.seasonId == 2 and activityData and activityData.groupId and activityData.groupId ~= 0 then
        self._group_btn:SetActive(true)
        self.groupId = activityData.groupId
    else
        self._group_btn:SetActive(false)
        self.groupId = nil
    end
    
    local seasonList = DataCenter.TaskManager:GetSeasonChapterTask()
    if SeasonUtil.IsInSeasonDesertMode() and seasonList and table.count(seasonList) > 0 then
        self.taskBtnN:SetActive(true)
    else
        self.taskBtnN:SetActive(false)
    end
    self.introBtnN:SetActive(self.season >= 1)
    self.extraTipN:SetActive(false)
    
    if self.curStage == SeasonStage.Preview then
        self:ShowPreview()
    elseif self.curStage == SeasonStage.Open then
        self:ShowOpen()
    elseif self.curStage == SeasonStage.toSettle then
        self:ShowToSettle()
    elseif self.curStage == SeasonStage.ToFinish then
        self:ShowToFinish()
    elseif self.curStage == SeasonStage.Finished then
        self:ShowFinished()
    end
end

local function ShowPreview(self)
    self.time_obj:SetActive(true)
    self.timeTipN:SetLocalText(110369)
    self:AddCountDownTimer()
    self:RefreshRemainTime()
end

local function ShowOpen(self)
    self.jumpBtnN:SetActive(true)
    self.unlockRuinLvTipN:SetActive(true)
    --local lv = 1
    --local hasAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfHasAlCity()
    --if hasAlTerritory then
    --    --如果已有遗迹
    --    local myAlId = LuaEntry.Player.allianceId
    --    local myCities = DataCenter.WorldAllianceCityDataManager:GetCitiesByAlId(myAlId)
    --    if myCities then
    --        for i = 1, #myCities do
    --            local config =  DataCenter.AllianceCityTemplateManager:GetTemplate(myCities[i])
    --            if config.level > lv then
    --                lv = config.level
    --            end
    --        end
    --    end
    --    local maxLv = DataCenter.AllianceCityTemplateManager:GetTemplateMaxLv()
    --    if lv < maxLv then
    --        lv = lv + 1
    --    end
    --end
    local unlockLv = self:GetUnlockedRuinLv()

    if LuaEntry.Player:IsInAlliance() then
        self.jumpBtnTxtN:SetLocalText(110088)
        self.unlockRuinLvTipN:SetLocalText(372181,tostring(unlockLv))
        if SeasonUtil.IsInSeasonDesertMode() and self.seasonId~=nil and self.seasonId == 2 then
            local hasAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfHasAlCity()
            local hasAllianceCenter = DataCenter.AllianceMineManager:CheckIfHasAllianceCenter()
            local ownCount = DataCenter.DesertDataManager:GetSelfSeverDesert()
            if hasAlTerritory==false and ownCount<=0 and hasAllianceCenter<=0 then
                if DataCenter.AllianceBaseDataManager:IsR4orR5() then
                    self.unlockRuinLvTipN:SetLocalText(110592)
                    self.jumpBtnTxtN:SetLocalText(129034)
                else
                    self.unlockRuinLvTipN:SetLocalText(110591)
                    self.jumpBtnN:SetActive(false)
                end
                
            end
        end
    else
        self.jumpBtnTxtN:SetLocalText(390079)
        self.unlockRuinLvTipN:SetLocalText(372180)
    end
    
end

local function ShowToSettle(self)
    self.jumpBtnN:SetActive(true)
    self.unlockRuinLvTipN:SetActive(true)
    
    local unlockLv = self:GetUnlockedRuinLv()

    if LuaEntry.Player:IsInAlliance() then
        self.jumpBtnTxtN:SetLocalText(110088)
        self.unlockRuinLvTipN:SetLocalText(372181,tostring(unlockLv))
        if SeasonUtil.IsInSeasonDesertMode() and self.seasonId~=nil and self.seasonId == 2 then
            local hasAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfHasAlCity()
            local hasAllianceCenter = DataCenter.AllianceMineManager:CheckIfHasAllianceCenter()
            local ownCount = DataCenter.DesertDataManager:GetSelfSeverDesert()
            if hasAlTerritory==false and ownCount<=0 and hasAllianceCenter<=0 then
                if DataCenter.AllianceBaseDataManager:IsR4orR5() then
                    self.unlockRuinLvTipN:SetLocalText(110592)
                    self.jumpBtnTxtN:SetLocalText(129034)
                else
                    self.unlockRuinLvTipN:SetLocalText(110591)
                    self.jumpBtnTxtN:SetLocalText(129034)
                end

            end
        end
    else
        self.jumpBtnTxtN:SetLocalText(390079)
        self.unlockRuinLvTipN:SetLocalText(372180)
    end
    
    self.extraTipN:SetActive(true)
    self.extraTipN:SetLocalText(110583)
    
    self.time_obj:SetActive(true)
    self.timeTipN:SetLocalText(110358)
    self.info_btn:SetActive(true)
    self:AddCountDownTimer()
    self:RefreshRemainTime()
end

local function ShowToFinish(self)
    local data = DataCenter.DesertDataManager:GetSelfAllianceSeasonReward()
    if data~=nil then
        self.getRewardBtnN:SetActive(true)
        local isSelfLeader = DataCenter.AllianceBaseDataManager:IsSelfLeader()
        if isSelfLeader then
            self.getRewardTxtN:SetLocalText(110300)
            CS.UIGray.SetGray(self.getRewardBtnN.transform, false, true)
        else
            local activityInfo = DataCenter.RobotWarsManager:GetActivityInfo()
            local selfData = DataCenter.DesertDataManager:GetSelfRewardData()
            if activityInfo.selfRewardStatus>0 and selfData ~=nil then
                if selfData.selfStatus == 1 then--0无奖励，1可领取，2已领取
                    self.getRewardTxtN:SetLocalText(110317)
                    CS.UIGray.SetGray(self.getRewardBtnN.transform, false, true)
                else
                    self.getRewardTxtN:SetLocalText(170003)
                    CS.UIGray.SetGray(self.getRewardBtnN.transform, true, false)
                end
            else
                self.getRewardTxtN:SetLocalText(110317)
                CS.UIGray.SetGray(self.getRewardBtnN.transform, false, true)
            end
        end
    else
        self.seasonEndTipN:SetActive(true)
        self.seasonEndTipN:SetLocalText(110366)
    end
    
    self.extraTipN:SetActive(true)
    self.extraTipN:SetLocalText(110584)
    
    self.newWorldBtnN:SetActive(self.seasonId == 1)--true)
    self.time_obj:SetActive(true)
    self.timeTipN:SetLocalText(110359)
    self:AddCountDownTimer()
    self:RefreshRemainTime()
end

local function ShowFinished(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.endTime>curTime then
        self.time_obj:SetActive(true)
        self.timeTipN:SetLocalText(110360)
        self:AddCountDownTimer()
        self:RefreshRemainTime()
    else
        self.seasonEndTipN:SetActive(true)
        self.seasonEndTipN:SetLocalText(110360)
    end
    
    self.newWorldBtnN:SetActive(self.seasonId == 1)--true)
end

local function GetUnlockedRuinLv(self)
    local unlockLv = 1
    local defaultOpenLv = nil
    local hasAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfHasAlCity()
    if hasAlTerritory then
        local unlockLvList = DataCenter.WorldAllianceCityDataManager.trendsUnLockLv
        if next(unlockLvList) then
            for i = 1, #unlockLvList do
                if not defaultOpenLv then
                    defaultOpenLv = unlockLvList[i].cityLv - 1
                end
                if unlockLvList[i].unLockTime <= UITimeManager:GetInstance():GetServerTime() and unlockLv < unlockLvList[i].cityLv then
                    unlockLv = unlockLvList[i].cityLv
                end
            end
        end
    end
    if defaultOpenLv and defaultOpenLv > unlockLv then
        unlockLv = defaultOpenLv
    end
    
    return unlockLv
end

local function GoEdenWar(self)
    --服务器解锁等级
    local unlockLv = self:GetUnlockedRuinLv()
    if LuaEntry.Player:IsInAlliance() then
        if SeasonUtil.IsInSeasonDesertMode() and self.seasonId~=nil and self.seasonId == 2 then
            local hasAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfHasAlCity()
            local hasAllianceCenter = DataCenter.AllianceMineManager:CheckIfHasAllianceCenter()
            local ownCount = DataCenter.DesertDataManager:GetSelfSeverDesert()
            if hasAlTerritory==false and ownCount<=0 and hasAllianceCenter<=0 then
                GoToUtil.CloseAllWindows()
                local pos = LuaEntry.Player:GetMainWorldPos()
                GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(pos,ForceChangeScene.World),nil,nil,function()
                    DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.GotoBuildAllianceCenter,SaveGuideDoneValue)
                end)
                return
            end
        end
        
    end
    --配置范围
    local k1 = LuaEntry.DataConfig:TryGetNum("search_ruins", "k1")
    --获取所有遗迹点
    local template = DataCenter.AllianceCityTemplateManager:GetAllTemplate()
    --自己盟是否有遗迹
    --local hasAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfHasAlCity()
    --if hasAlTerritory then
    --    --如果已有遗迹
    --    local myAlId = LuaEntry.Player.allianceId
    --    local myCities = DataCenter.WorldAllianceCityDataManager:GetCitiesByAlId(myAlId)
    --    local lv = 1
    --    if myCities then
    --        for i = 1, #myCities do
    --            local config =  DataCenter.AllianceCityTemplateManager:GetTemplate(myCities[i])
    --            if config.level > lv then
    --                lv = config.level
    --            end
    --        end
    --    end
    --    local maxLv = DataCenter.AllianceCityTemplateManager:GetTemplateMaxLv()
    --    if lv < maxLv then
    --        lv = lv + 1
    --    end
    --    if unlockLv ~= 0 then
    --        if lv < unlockLv then
    --            unlockLv = lv
    --        end
    --    else
    --        unlockLv = lv
    --    end
    --else
    --    unlockLv = 1
    --end
    local buildList = {}
    for i, v in pairs(template) do
        if v.eden_city_type == WorldCityType.AllianceCity and v.server_type == ServerType.NORMAL then
            local distance = math.ceil(SceneUtils.TileDistance(v.pos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
            if distance <= k1 then
                local cityData = DataCenter.WorldAllianceCityDataManager:GetAllianceCityDataByCityId(tonumber(i))
                if cityData == nil then
                    --当自己盟没有联盟城时只找1级遗迹
                    --if hasAlTerritory == nil then
                    --    if v.level == 1 then
                    --        local param = {}
                    --        param.distance = distance
                    --        param.pos = v.pos
                    --        param.id = i
                    --        table.insert(buildList,param)
                    --        --if #buildList >= 4 then
                    --        --    break
                    --        --end
                    --    end
                    --else
                    if v.level == unlockLv then
                        local param = {}
                        param.distance = distance
                        param.pos = v.pos
                        param.id = i
                        table.insert(buildList,param)
                        --if #buildList >= 4 then
                        --    break
                        --end
                    end
                    --end
                end
            end
        end

    end
    if next(buildList) then
        table.sort(buildList, function(a,b)
            if a.distance < b.distance then
                return true
            end
            return false
        end)
        GoToUtil.CloseAllWindows()
        local cityId = buildList[1].id
        local tile = GetTableData(TableName.WorldCity,cityId, "size")
        local pointIndex = SceneUtils.TilePosToIndex(buildList[1].pos, ForceChangeScene.World)
        local worldPos = SceneUtils.TileIndexToWorld(pointIndex, ForceChangeScene.World)
        worldPos.x = worldPos.x - tile+1
        worldPos.z = worldPos.z - tile+1
        pointIndex = SceneUtils.WorldToTileIndex(worldPos, ForceChangeScene.World)
        GoToUtil.GotoWorldPos(worldPos, CS.SceneManager.World.InitZoom,LookAtFocusTime, function()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIWorldSiegePoint,buildList[1].id,pointIndex)
        end)
    else
        UIUtil.ShowTips(Localization:GetString("372182",unlockLv))
    end
end

--[[
local function RefreshMiddle(self)
    self.time_obj:SetActive(false)
    self.getRewardBtnN:SetActive(false)
    self.seasonEndTipN:SetActive(false)

    local activityInfo = DataCenter.RobotWarsManager:GetActivityInfo()
    if not activityInfo then
        return
    end

    local curTime = UITimeManager:GetInstance():GetServerTime()

    local settleEndTime = activityInfo.settleEndTime
    if settleEndTime > 0 and curTime < settleEndTime then
        self.time_obj:SetActive(true)
        self.timeTipN:SetLocalText(110358)
        self.endTime = settleEndTime
        self:AddCountDownTimer()
        self:RefreshRemainTime()
        return
    end

    local settledRewardEndTime = activityInfo.WorldSeasonRewardEndTime
    if settledRewardEndTime > 0 and curTime < settledRewardEndTime then
        self.time_obj:SetActive(true)
        self.timeTipN:SetLocalText(110359)
        self.endTime = settledRewardEndTime
        self:AddCountDownTimer()
        self:RefreshRemainTime()
        local data = DataCenter.DesertDataManager:GetSelfAllianceSeasonReward()
        if data~=nil then
            self.getRewardBtnN:SetActive(true)
            local isSelfLeader = DataCenter.AllianceBaseDataManager:IsSelfLeader()
            if isSelfLeader then
                self.getRewardTxtN:SetLocalText(110300)
                CS.UIGray.SetGray(self.getRewardBtnN.transform, false, true)
            else
                local selfData = DataCenter.DesertDataManager:GetSelfRewardData()
                if activityInfo.selfRewardStatus>0 and selfData ~=nil then
                    if selfData.selfStatus == 1 then--0无奖励，1可领取，2已领取
                        self.getRewardTxtN:SetLocalText(110317)
                        CS.UIGray.SetGray(self.getRewardBtnN.transform, false, true)
                    else
                        self.getRewardTxtN:SetLocalText(170003)
                        CS.UIGray.SetGray(self.getRewardBtnN.transform, true, false)
                    end
                else
                    self.getRewardTxtN:SetLocalText(110317)
                    CS.UIGray.SetGray(self.getRewardBtnN.transform, false, true)
                end
            end
        else
            self.seasonEndTipN:SetActive(true)
            self.seasonEndTipN:SetLocalText(110366)
        end

        return
    end

    if settledRewardEndTime > 0 and curTime >= settledRewardEndTime then
        self.seasonEndTipN:SetActive(true)
        self.seasonEndTipN:SetLocalText(110360)
    end

    self:DelCountDownTimer()
    self.time_obj:SetActive(false)
end
--]]

local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime > 0 then
        self.timeCountDownN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.timeCountDownN:SetText("")
        self:DelCountDownTimer()
        SFSNetwork.SendMessage(MsgDefines.SeasonBalanceViewOpen)
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end

local function OnClickCloseBtn(self)
    self.ctrl:CloseSelf()
end

local function OnClickInfoBtn(self)
    if self.seasonId == 1 then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityEdenWarTips, { anim = true })
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonHint, { anim = true }, self.seasonId)
    end
end

local function OnClickHeroBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroList, { anim = false, UIMainAnim = UIMainAnimType.AllHide }, nil, 2)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroList, nil, 2)
    --GoToUtil.GotoOpenView(UIWindowNames.UIHeroList,{anim = false,UIMainAnim = UIMainAnimType.AllHide}, nil, 2)
    --UIUtil.ShowTipsId(302342)
end
local function OnClickRewardBtn(self)
    if DataCenter.RobotWarsManager:GetIsOnReward() == true then
        local data = DataCenter.DesertDataManager:GetSelfAllianceSeasonReward()
        if data~=nil then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonAllianceReward)
        else
            --if activityInfo.selfRewardStatus>0
            local activityInfo = DataCenter.RobotWarsManager:GetActivityInfo()
            if activityInfo~=nil then
                if activityInfo.selfRewardStatus>0 then
                    UIUtil.ShowTipsId(110362)
                end
                return
            end

            UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonAllianceRewardDisplayMain)
        end
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonAllianceRewardDisplayMain)
    end

end

local function OnClickRewardPreviewBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonAllianceRewardDisplayMain)
end

local function OnClickJumpBtn(self)
    if LuaEntry.Player:IsInAlliance() then
        self:GoEdenWar()
    else
        local arrow = 1
        GoToUtil.GotoOpenView(UIWindowNames.UIAllianceIntro,{ anim = true},arrow)
    end
end

local function OnClickNewWorldBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonNewWorld)
end

local function OnClickTaskBtn(self)
    GoToUtil.CloseAllWindows()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UITaskMain, HideBlurPanelAnim, TaskType.Main)
end

local function OnIntroBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISeasonIntro, { anim = true })
end

--{{{按钮时间检测
local function RefreshInterStelltar(self,message)
    self:DeleteTimer()
    local dialog = 250300
    local path = "UIemigrate_entry"
    if message.type and message.type ~= 0 then
        if message.type == 2 then
            dialog = 250406
            path = "UIemigrate_entry02"
        end
        self:RefreshTime(message)
        self:AddTimer(message)
    else
        self._interstellar_btn:SetActive(false)
    end
    self._interstellar_btn:LoadSprite(string.format(LoadPath.UIInterstellarMigration,path))
    self._interName_txt:SetLocalText(dialog)
end

local function AddTimer(self,actData)
    if actData ~= nil then
        if self.timer_btn == nil then
            self.timer_btn = TimerManager:GetInstance():GetTimer(1, self.timer_action ,actData , false,false,false)
        end
        self.timer_btn:Start()
    end
end

local function RefreshTime(self,actListData)
    if actListData then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if actListData.startTime < curTime and curTime < actListData.endTime  then
            self._interstellar_btn:SetActive(true)
            self.interstellar_obj:SetActive(true)
            self.interstellar_time:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(actListData.endTime - curTime))
        else
            SFSNetwork.SendMessage(MsgDefines.MigrateActivityInfo)
            self._interstellar_btn:SetActive(false)
            self:DeleteTimer()
        end
    else
        self._interstellar_btn:SetActive(false)
        self:DeleteTimer()
    end
end

local function DeleteTimer(self)
    if self.timer_btn ~= nil then
        self.timer_btn:Stop()
        self.timer_btn = nil
    end
end
--}}}

local function RefreshMigrate(self)
    local showMigrate = false
    if DataCenter.GovernmentManager:IsSelfPresident() then
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
        if table.count(dataList) > 0 then
            local actListData = dataList[1]
            if actListData then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if actListData.startTime < curTime and curTime < actListData.endTime then
                    showMigrate = true

                end
            end
        end
    end
    self.migrate_btn:SetActive(showMigrate == true)
    if showMigrate then
        local showRed = false
        local data = DataCenter.MigrateDataManager:GetApplyList()
        if data~=nil and table.count(data)>0 then
            showRed = true
        end
        self.migrate_btn_red_dot:SetActive(showRed)
    end
end

local function OnMigrateClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISetMigrationPower)
end

local function CheckShowMigrateRed(self)
    local  actListData = nil
    local show = false
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
    if table.count(dataList) > 0 then
        actListData = dataList[1]
        if actListData then
            local lastEndTime = DataCenter.ActivityListDataManager:GetActivityVisitedEndTime(actListData.id)
            if actListData.endTime > lastEndTime then
                show = true
            end
        end
    end
    if show == false then
        show = DataCenter.MigrateDataManager:GetHasAccept()
    end
    self.interstellar_red:SetActive(show)
end

local function OnInterClick(self)

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIInterstellarMigrationPreview)
end

--{{{赛季结束倒计时
--local function ReIntEndTime(self)
--    self:DeleteEndTimer()
--    local settleTime = DataCenter.SeasonDataManager:GetSeasonSettleTime()
--    if settleTime and settleTime > 0 then
--        self:AddEndTimer(settleTime)
--        self:RefreshEndTime(settleTime)
--    end
--end
--
--local function AddEndTimer(self,settleTime)
--    if settleTime ~= nil then
--        if self.timer_end == nil then
--            self.timer_end = TimerManager:GetInstance():GetTimer(1, self.timer_actionEnd ,settleTime , false,false,false)
--        end
--        self.timer_end:Start()
--    end
--end
--
--local function RefreshEndTime(self,settleTime)
--    if settleTime then
--        local curTime = UITimeManager:GetInstance():GetServerTime()
--        if curTime < settleTime  then
--            self._endTime_txt:SetActive(true)
--            self._endTime_txt:SetText(Localization:GetString("111042")..": "..UITimeManager:GetInstance():MilliSecondToFmtString(settleTime - curTime))
--        else
--            self._endTime_txt:SetActive(false)
--            self:DeleteEndTimer()
--        end
--    else
--        self._endTime_txt:SetActive(false)
--        self:DeleteTimer()
--    end
--end
--
--local function DeleteEndTimer(self)
--    if self.timer_end ~= nil then
--        self.timer_end:Stop()
--        self.timer_end = nil
--    end
--end

local function OnInfoClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIGlorySeasonEnd)
end

local function CheckShowStamina(self)
    local  actListData = nil
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.StaminaBall)
    if table.count(dataList) > 0 then
        actListData = dataList[1]
    end
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if actListData~=nil and actListData.startTime < curTime and curTime < actListData.endTime  then
        self.stamina_ball_btn:SetActive(true)
        local show = false
        local redNum = DataCenter.StaminaBallManager:CheckShowRewardRed()
        if redNum>0 then
            show = true
        end
        self.stamina_red_dot:SetActive(show)
        local max = DataCenter.StaminaBallManager:GetMaxStamina()
        local cur = DataCenter.StaminaBallManager:GetOldStamina()
        local curNum = DataCenter.StaminaBallManager:GetExpByStamina(cur)
        local percent = math.min((curNum/math.max(max,1)),1)
        self.slider:SetValue(percent)
        self.slider:SetValue(percent)
    else
        self.stamina_ball_btn:SetActive(false)
    end

end

local function OnStaminaClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIStaminaBall)
end
--}}}

local function OnGroupClick(self)
    if self.groupId then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGloryGroup, self.groupId)
    end
end

RobotWarsMain.OnCreate = OnCreate
RobotWarsMain.OnDestroy = OnDestroy
RobotWarsMain.OnEnable = OnEnable
RobotWarsMain.OnDisable = OnDisable
RobotWarsMain.OnAddListener = OnAddListener
RobotWarsMain.OnRemoveListener = OnRemoveListener
RobotWarsMain.ComponentDefine = ComponentDefine
RobotWarsMain.ComponentDestroy = ComponentDestroy
RobotWarsMain.DataDefine = DataDefine
RobotWarsMain.DataDestroy = DataDestroy

RobotWarsMain.SetData = SetData
RobotWarsMain.RefreshAll = RefreshAll
RobotWarsMain.RefreshBg = RefreshBg
RobotWarsMain.RefreshMiddle = RefreshMiddle
RobotWarsMain.RefreshByStage = RefreshByStage
RobotWarsMain.ShowPreview = ShowPreview
RobotWarsMain.ShowOpen = ShowOpen
RobotWarsMain.ShowToSettle = ShowToSettle
RobotWarsMain.ShowToFinish = ShowToFinish
RobotWarsMain.ShowFinished = ShowFinished
RobotWarsMain.GoEdenWar = GoEdenWar
RobotWarsMain.GetUnlockedRuinLv = GetUnlockedRuinLv
RobotWarsMain.AddCountDownTimer = AddCountDownTimer
RobotWarsMain.RefreshRemainTime = RefreshRemainTime
RobotWarsMain.DelCountDownTimer = DelCountDownTimer
RobotWarsMain.OnClickCloseBtn = OnClickCloseBtn
RobotWarsMain.OnClickInfoBtn = OnClickInfoBtn
RobotWarsMain.OnClickHeroBtn = OnClickHeroBtn
RobotWarsMain.OnClickRewardBtn = OnClickRewardBtn
RobotWarsMain.OnClickRewardPreviewBtn = OnClickRewardPreviewBtn
RobotWarsMain.OnClickJumpBtn = OnClickJumpBtn
RobotWarsMain.OnClickNewWorldBtn = OnClickNewWorldBtn
RobotWarsMain.OnClickTaskBtn = OnClickTaskBtn
RobotWarsMain.OnIntroBtn = OnIntroBtn

RobotWarsMain.RefreshInterStelltar = RefreshInterStelltar
RobotWarsMain.AddTimer = AddTimer
RobotWarsMain.RefreshTime = RefreshTime
RobotWarsMain.DeleteTimer = DeleteTimer
RobotWarsMain.RefreshMigrate = RefreshMigrate
RobotWarsMain.OnMigrateClick =OnMigrateClick
RobotWarsMain.CheckShowMigrateRed = CheckShowMigrateRed
RobotWarsMain.OnInterClick = OnInterClick
RobotWarsMain.CheckShowStamina = CheckShowStamina
RobotWarsMain.OnStaminaClick =OnStaminaClick
--RobotWarsMain.ReIntEndTime = ReIntEndTime
--RobotWarsMain.AddEndTimer = AddEndTimer
--RobotWarsMain.RefreshEndTime = RefreshEndTime
--RobotWarsMain.DeleteEndTimer = DeleteEndTimer
RobotWarsMain.OnInfoClick = OnInfoClick

RobotWarsMain.OnGroupClick = OnGroupClick
return RobotWarsMain