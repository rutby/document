---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/10/20 18:09
---

local UIActivityCenterTableCtrl = BaseClass("UIActivityCenterTableCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIActivityCenterTable)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Background)
end
local function InitData(self)
    self:SetCurrentActivityId("")
end
local function SetCurrentActivityId(self,id)
    self.activityId = id
end
local function GetCurrentActivityId(self)
    return self.activityId
end

local function GetActivityGroupList(self, goId)
    local dailyType = 0
    if goId then
        local goActInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(goId))
        if goActInfo then
            dailyType = goActInfo.activity_daily
        end
    end
    
    local retGroups = {}
    DataCenter.ActivityListDataManager:SortActivityArr()
    local list = DataCenter.ActivityListDataManager:GetNowActivityList()

    if list ~= nil then
        local tempDic = {}
        for i, v in pairs(list) do
            if not dailyType or dailyType == v.activity_daily then
                local isInsert = true
                if v.type == ActivityEnum.ActivityType.Arms then
                    local curTime = UITimeManager:GetInstance():GetServerTime()
                    if v.endTime < curTime then
                        isInsert = false
                    elseif v.personalEventType and v.personalEventType == PersonalEventType.Permanent then  --常驻军备不单独显示
                        isInsert = false
                    end
                end
                if v.type == ActivityEnum.ActivityType.DonateSoldierActivity then
                    if LuaEntry.Player:IsInAlliance() == false then 
                        --如果玩家不在联盟里则不显示捐兵活动页签
                        isInsert = false
                    else
                        local isInAlCompete = DataCenter.AllianceCompeteDataManager:CheckIfIsInCompete()
                        if isInAlCompete == false then
                            --如果玩家在联盟里但是联盟对决没有开则也不显示捐兵活动页签
                            isInsert = false
                        end
                    end
                end
                if v.type == ActivityEnum.ActivityType.ActNoOne then
                    isInsert = false
                end
                if v.type == ActivityEnum.ActivityType.StaminaBall then
                    isInsert = false
                end
                if v.type == EnumActivity.LeadingQuest.Type then
                    if not string.IsNullOrEmpty(v.activity_pic) and v.activity_pic == "lingtuzhizhan1" then
                        isInsert = false
                    end
                end
                if isInsert then
                    if not tempDic[v.tabGroup]  then
                        local newGroup = {}
                        newGroup.tabGroup = v.tabGroup
                        newGroup.tabGroupOrder = v.tabGroupOrder
                        newGroup.activityList = {}
                        tempDic[v.tabGroup] = newGroup
                    end
                    table.insert(tempDic[v.tabGroup].activityList, v)
                end
            end
        end

        if not dailyType or dailyType == 0 then
            ----七日不是活动，特殊处理
            --local seventDayinfo =  DataCenter.ActivityListDataManager:GetSevenDayList()
            --if next(seventDayinfo) then
            --    local sevenDayActInfo = self:GetActivityDataById(ActivityEnum.ActivityType.SevenDay)
            --    sevenDayActInfo.order = 1
            --    local sevenDayGroup = "372340"
            --    if not tempDic[sevenDayGroup] then
            --        local newGroup = {}
            --        newGroup.tabGroup = "372340"
            --        newGroup.tabGroupOrder = 1
            --        newGroup.activityList = {sevenDayActInfo}
            --        tempDic[newGroup.tabGroup] = newGroup
            --    else
            --        table.insert(tempDic[sevenDayGroup].activityList, sevenDayActInfo)
            --    end
            --end
        end
        
        retGroups = table.values(tempDic)
        table.sort(retGroups, function(a, b)
            if tonumber(a.tabGroupOrder) ~= tonumber(b.tabGroupOrder) then
                return tonumber(a.tabGroupOrder) < tonumber(b.tabGroupOrder)
            else
                return false
            end
        end)
        for i, v in ipairs(retGroups) do
            table.sort(v.activityList, function(a, b)
                local orderA = a.GetOrder and a:GetOrder() or 1
                local orderB = b.GetOrder and b:GetOrder() or 1
                if tonumber(orderA) ~= tonumber(orderB) then
                    return tonumber(orderA) < tonumber(orderB)
                elseif tonumber(a.id) ~= tonumber(b.id) then
                    return tonumber(a.id) < tonumber(b.id)
                else
                    return false
                end
            end)
        end
    end
    return retGroups
end

local function GetDefaultFocusActivity(self, groupList, goId, forceToFirst)
    local targetActId = nil
    local targetActivityDaily = 0

    if goId then
        --if goId ~= ActivityEnum.ActivityType.SevenDay then
            local tempInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(goId))
            if not tempInfo then
                goId = nil
            else
                local isOpen = DataCenter.ActivityListDataManager:CheckIsSend(tempInfo)
                if not isOpen then
                    goId = nil
                end
            end
        --else
        --    local sevenDay = DataCenter.ActivityListDataManager:GetSevenDayList()
        --    if not (sevenDay and next(sevenDay)) then
        --        goId = nil
        --    end
        --end
    end
    
    if goId then
        if goId ~= 999 then
            targetActId = tostring(goId)
            local tempInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(goId))
            if tempInfo then
                targetActivityDaily = tempInfo.activity_daily
            end
        else
            targetActId = goId
        end
    else
        local firstActId = nil
        for i, v in ipairs(groupList) do
            if targetActId then
                break
            end
            for m, n in ipairs(v.activityList) do
                if not firstActId then
                    firstActId = n.id
                end
                if DataCenter.ActivityListDataManager:GetActivityRedDotCount(n.id) > 0 then
                    targetActId = n.id
                    targetActivityDaily = n.activity_daily
                    break
                end 
            end
        end

        if not targetActId then
            local lastId = DataCenter.ActivityListDataManager:GetLastVisitedActivityId(targetActivityDaily)--.lastVisitActivityId
            if lastId then
                local tempInfo = DataCenter.ActivityListDataManager:GetActivityDataById(lastId)
                if tempInfo and DataCenter.ActivityListDataManager:CheckIsSend(tempInfo) then
                    targetActId = lastId
                end
            end
        end
        if not targetActId then
            targetActId = firstActId
        end
    end
    
    for i, v in ipairs(groupList) do
        for m, n in ipairs(v.activityList) do
            if forceToFirst then
                return n.id, i, m
            else
                if n.id == targetActId then
                    return n.id, i, m
                end
            end
        end
    end
end


local function GetActivityIdList(self)
    local showList = {}
    DataCenter.ActivityListDataManager:SortActivityArr()
    local list = DataCenter.ActivityListDataManager:GetNowActivityList()
    if list~=nil then
        local isFirst =true
        local temp = {}
        for i, v in pairs(list) do
            table.insert(temp,v)
        end
        table.sort(temp, function(a,b)
            if a.order < b.order then
                return true
            elseif a.order == b.order then
                return false
            end
            return false
        end)

        for i = 1, #temp do
            if isFirst then
                if self:GetCurrentActivityId() == nil or self:GetCurrentActivityId()=="" then
                    self:SetCurrentActivityId(temp[i].id)
                end
            end
            table.insert(showList,temp[i].id)
        end
    end

    self:SetCurrentActivityId(showList[1])
    --local seventDayinfo =  DataCenter.ActivityListDataManager:GetSevenDayList()
    --if next(seventDayinfo) then
    --    table.insert(showList,1,ActivityEnum.ActivityType.SevenDay)
    --end
    return showList
end
local function GetActivityDataById(self,id)
    local oneData = {}
    oneData.id =id
    local data = DataCenter.ActivityListDataManager:GetActivityDataById(id)
    if data~=nil then
        oneData.list_icon = data.list_icon
        if data.type == EnumActivity.RobotWars.Type then
            local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
            local actNameId = GetTableData(TableName.APS_Season, seasonId, 'subTitle')
            local icon = GetTableData(TableName.APS_Season, seasonId, 'season_list_icon')
            if icon and icon ~= "" then
                oneData.list_icon = icon
            end
            oneData.name = Localization:GetString(actNameId)
        elseif data.type == EnumActivity.LeadingQuest.Type and data.notice_info == EnumActivityNoticeInfo.EnumActivityNoticeInfo_Hero then
            local seasonId = DataCenter.SeasonDataManager:GetSeasonId() or 0
            if data.sub_type ~= ActivityEnum.ActivitySubType.ActivitySubType_1 then
                oneData.name = Localization:GetString(data.name, seasonId - 1)
            else
                oneData.name = Localization:GetString(data.name, seasonId)
            end
        elseif data.type == EnumActivity.LeadingQuest.Type and not string.IsNullOrEmpty(data.unlock_hero) then
            local seasonId = DataCenter.SeasonDataManager:GetSeasonId() or 0
            local toHeroId = DataCenter.HeroEvolveActivityManager:GetToHeroId()
            local heroData = DataCenter.HeroDataManager:GetHeroById(toInt(toHeroId))
            if heroData ~= nil then
                oneData.name = Localization:GetString(data.name, seasonId)
            else
                local rarity = GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "rarity")
                local desc = string.format("<color='%s'>%s</color>",HeroUtils.GetRarityColorStr(rarity), Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), toHeroId, "desc")))
                oneData.name = Localization:GetString(361093, desc)
            end
        elseif data.type == ActivityEnum.ActivityType.GloryPreview then
            local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
            local template = DataCenter.SeasonGroupManager:GetTemplateById(data.groupId)
            if template then
                local actNameId = GetTableData(TableName.APS_Season, (template.season + 1), 'subTitle')
                local icon = GetTableData(TableName.APS_Season, seasonId + 1, 'season_list_icon')
                if icon and icon ~= "" then
                    oneData.list_icon = icon
                end
                oneData.name = Localization:GetString(actNameId)
            else
                oneData.name = Localization:GetString(data.name)
            end
        else
            oneData.name = Localization:GetString(data.name)
            --if not string.IsNullOrEmpty(data.unlock_hero) then
            --    local heroData = DataCenter.HeroDataManager:GetHeroById(toInt(data.unlock_hero))
            --    if heroData == nil then
            --        oneData.unlockStr = Localization:GetString(361093, HeroUtils.GetHeroNameByConfigId(data.unlock_hero))
            --    end
            --end
        end
        oneData.type = data.type
        oneData.canGet = DataCenter.ActivityListDataManager:GetRewardNumByTypeAndId(data.type,data.id)
        oneData.activityId = data.activityId == "" and  data.id or data.activityId
        oneData.tabGroup = data.tabGroup
        oneData.tabGroupOrder = data.tabGroupOrder
		if data.sub_type ~= nil then
			oneData.sub_type = data.sub_type
		end
    --elseif id == ActivityEnum.ActivityType.SevenDay then
    --    oneData.name = Localization:GetString("371007")
    --    oneData.canGet = DataCenter.ActivityListDataManager:GetDayActRedNum()
    --    oneData.activityId = ActivityEnum.ActivityType.SevenDay
    --    oneData.type = ActivityEnum.ActivityType.SevenDay
    --    oneData.list_icon = "activity_icon_js"
    --    oneData.tabGroup = "372340"
    --    oneData.tabGroupOrder = 1
    --    oneData.GetOrder = function()
    --        return 1
    --    end
    end
    return oneData
end

local function GetCurrentActivity(self)
    local data = self:GetActivityDataById(self:GetCurrentActivityId())
    return data
end

local function RewardItemList(self,list)
    local showList = {}
    if list ~= nil then
        table.walk(list,function (k,v)
            local id = v.itemId
            if id~=nil then
                local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                if goods~=nil then
                    local oneData = {}
                    oneData.itemId = id
                    local iconName = string.format(LoadPath.ItemPath,goods.icon)
                    oneData.iconName = iconName
                    oneData.extraIcon = nil
                    oneData.count = v.count
                    oneData.cost = v.cost
                    oneData.rewardType = v.rewardType
                    oneData.itemName = goods.name
                    oneData.itemDesc = goods.description
                    oneData.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                    local itemType = goods.type
                    if itemType == 2 then -- SPD
                        if goods.para1 ~= nil and goods.para1 ~= "" then
                            local para1 = goods.para1
                            local temp = string.split(para1,';')
                            if temp ~= nil and #temp > 1 then
                                oneData.itemFlag = temp[1]..temp[2]
                            end
                        end
                    elseif itemType == 3 then -- USE
                        local type2 = goods.type2
                        if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                            local res_num = tonumber(goods.para)
                            oneData.itemFlag = string.GetFormattedStr(res_num)
                        end
                    elseif itemType == 5 then
                        if goods.para3 ~= nil and goods.para3 ~= "" then
                            local res_num = tonumber(goods.para3)
                            oneData.itemFlag = string.GetFormattedStr(res_num)
                        end
                    end
                    table.insert(showList,oneData)
                end
            else
                if v.rewardType == RewardType.OIL or v.rewardType == RewardType.METAL
                        or v.rewardType == RewardType.WATER or v.rewardType == RewardType.GOLD
                        or v.rewardType == RewardType.MONEY or v.rewardType == RewardType.ELECTRICITY or v.rewardType == RewardType.FORMATION_STAMINA then
                    local oneData = {}
                    local template = DataCenter.ResourceTemplateManager:GetResourceTemplate(RewardToResType[v.rewardType])
                    oneData.iconName = DataCenter.RewardManager:GetPicByType(v.rewardType)
                    oneData.itemName = ResourceTypeTxt[v.rewardType]
                    oneData.itemDesc = template.description
                    oneData.count = v.count
                    oneData.cost = v.cost
                    oneData.rewardType = v.rewardType
                    oneData.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.WHITE)
                    oneData.itemFlag = nil
                    table.insert(showList,oneData)
                end
            end
        end)
    end
    
    return showList
end

local function GetSevenDayTaskReward(self,taskId)
    SFSNetwork.SendMessage(MsgDefines.TaskRewardGet,{id = taskId})
end

local function GetSevenDayBoxReward(self,index)
    SFSNetwork.SendMessage(MsgDefines.UserDayActReward,index)
end


--获取活动任务目标
local function GetScoreData(self,activityId)
    local scoreData = DataCenter.ActPersonalArmsInfo:GetScoreMeth(activityId)
    return scoreData
end

--请求领奖
local function SendActivityGetRewardCommand(self,actId,stage,type)
    DataCenter.ActivityController:SendActivityGetRewardCommand(actId,stage,type)
end

--兑换活动配置转
local function GetBarterItemsList(self, strConf, isNeed)
    local retList = {}
    local strList = string.split(strConf, "|")
    for i, v in ipairs(strList) do
        local paramList = string.split(v, ";")
        local oneItem = {}
        if #paramList == 2 then
            oneItem.rewardType = tonumber(paramList[1])
            if isNeed then
                local resType = RewardToResType[tonumber(paramList[1])]
                local tempCount = 0
                if resType == ResourceType.Gold then
                    tempCount = LuaEntry.Player.gold
                else
                    tempCount = LuaEntry.Resource:GetCntByResType(resType)
                end
                oneItem.count = tempCount
                oneItem.cost = tonumber(paramList[2])
            else
                oneItem.count = tonumber(paramList[2])
            end
            table.insert(retList, oneItem)
        elseif #paramList == 3 then
            oneItem.rewardType = tonumber(paramList[1])
            oneItem.itemId = paramList[2]
            if isNeed then
                local costItem = DataCenter.ItemData:GetItemById(paramList[2])
                local ownNum = costItem and costItem.count or 0
                oneItem.count = ownNum
                oneItem.cost = tonumber(paramList[3])
            else
                oneItem.count = tonumber(paramList[3])
            end
            table.insert(retList, oneItem)
        end
    end
    return retList
    --return self:RewardItemList(retList)
end

local function GoEdenWar(self)
    --服务器解锁等级
    local unlockLvList = DataCenter.WorldAllianceCityDataManager.trendsUnLockLv
    local unlockLv = 1
    if next(unlockLvList) then
        for i = 1, #unlockLvList do
            if unlockLvList[i].unLockTime <= UITimeManager:GetInstance():GetServerTime() then
                unlockLv = unlockLvList[i].cityLv
            end
        end
    else
        unlockLv = 0
    end
    
    --配置范围
    local k1 = LuaEntry.DataConfig:TryGetNum("search_ruins", "k1")
    --获取所有遗迹点
    local template = DataCenter.AllianceCityTemplateManager:GetAllTemplate()
    --自己盟是否有遗迹
    local hasAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfHasAlCity()
    if hasAlTerritory then
        --如果已有遗迹
        local myAlId = LuaEntry.Player.allianceId
        local myCities = DataCenter.WorldAllianceCityDataManager:GetCitiesByAlId(myAlId)
        local lv = 1
        if myCities then
            for i = 1, #myCities do
                local config =  DataCenter.AllianceCityTemplateManager:GetTemplate(myCities[i])
                if config.level > lv then
                    lv = config.level
                end
            end
        end
        local maxLv = DataCenter.AllianceCityTemplateManager:GetTemplateMaxLv()
        if lv < maxLv then
            lv = lv + 1
        end
        if unlockLv ~= 0 then
            if lv < unlockLv then
                unlockLv = lv
            end
        else
            unlockLv = lv
        end
    else
        unlockLv = 1
    end
    local buildList = {}
    for i, v in pairs(template) do
        if v.eden_city_type == WorldCityType.AllianceCity and v.server_type == ServerType.NORMAL then
            local distance = math.ceil(SceneUtils.TileDistance(v.pos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
            if distance <= k1 then
                local cityData = DataCenter.WorldAllianceCityDataManager:GetAllianceCityDataByCityId(tonumber(i))
                if cityData == nil then
                    --当自己盟没有联盟城时只找1级遗迹
                    if hasAlTerritory == nil then
                        if v.level == 1 then
                            local param = {}
                            param.distance = distance
                            param.pos = v.pos
                            param.id = i
                            table.insert(buildList,param)
                            --if #buildList >= 4 then
                            --    break
                            --end
                        end
                    else
                        if v.level == unlockLv then
                            local param = {}
                            param.distance = distance
                            param.pos = v.pos
                            param.id = i
                            table.insert(buildList,param)
                            --if #buildList >= 4 then
                            --    break
                            --end
                        end
                    end
                end
            end
        end
        
    end
    if next(buildList) then
        table.sort(buildList, function(a,b)
            if a.distance < b.distance then
                return true
            end
            return false
        end)
        GoToUtil.CloseAllWindows()
        local cityId = buildList[1].id
        local tile = GetTableData(TableName.WorldCity,cityId, "size")
        local pointIndex = SceneUtils.TilePosToIndex(buildList[1].pos, ForceChangeScene.World)
        local worldPos = SceneUtils.TileIndexToWorld(pointIndex, ForceChangeScene.World)
        worldPos.x = worldPos.x - tile+1
        worldPos.z = worldPos.z - tile+1
        pointIndex = SceneUtils.WorldToTileIndex(worldPos, ForceChangeScene.World)
        GoToUtil.GotoWorldPos(worldPos, CS.SceneManager.World.InitZoom,LookAtFocusTime, function()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIWorldSiegePoint,buildList[1].id,pointIndex)
        end)
    else
        UIUtil.ShowTips(Localization:GetString("372182",unlockLv)) 
    end
end

local function GetPuzzleData(self)
    local data = DataCenter.ActivityPuzzleDataManager:GetPuzzleData()
    if data == nil then
        return nil
    end
    local result = {}
    result.IsOver = false
    
    local complete = {}
    table.walk(data.puzzleInfo.blockArr, function (_, v)
        complete[v] = true
    end)
    result.complete = complete
    result.canCreatePuzzleMonster = data:CanCreatePuzzleBoss()
    result.createPuzzleMonsterNum = data:GetUnCreatePuzzleMonsterNum()
    result.puzzleNumPerStage = MaxPuzzlePerStage
    result.currentStateCompletePuzzle = table.count(complete)
    result.canGetStageReward = (result.currentStateCompletePuzzle >= result.puzzleNumPerStage)

    local puzzleInfo = {}
    puzzleInfo.taskId = data.currentTask.taskId
    puzzleInfo.num = data.currentTask.num
    puzzleInfo.state = data.currentTask.state
    puzzleInfo.hasNext = result.hasNext
    puzzleInfo.needNum = 1
    puzzleInfo.canGetStageReward = result.canGetStageReward
    puzzleInfo.needNum = GetTableData(DataCenter.QuestTemplateManager:GetTableName(), puzzleInfo.taskId, "para2",  0)
    puzzleInfo.num = math.min(puzzleInfo.num, puzzleInfo.needNum)
    puzzleInfo.blockNum = data.currentTask.blockNum
    puzzleInfo.nextPuzzleTime = data.lastRecoverTime
    result.puzzleInfo = puzzleInfo

    local rewardList = DataCenter.RewardManager:ReturnRewardParamForView(data.puzzleInfo.reward)
    result.rewardList = rewardList
    return result
end

local function GetCntByResType(self,resourceType)
    if resourceType == ResourceType.Gold then
        return LuaEntry.Player.gold
    end
    if DataCenter.ItemTemplateManager:GetItemTemplate(resourceType) ~= nil then
        local item = DataCenter.ItemData:GetItemById(resourceType)
        if item ~= nil then
            return item.count
        end
        return 0
    end
    return LuaEntry.Resource:GetCntByResType(resourceType)
end

-- 捐献士兵活动获取的排行榜数据
local function GetDonateSoldierActivityDataList(self, justSelfAlliance)
    local retData = DeepCopy(DataCenter.ActivityDonateSoldierManager:GetScoreList())

    if justSelfAlliance == true then
        local gripData = {}
        for _,v in ipairs(retData) do
            if v.allianceId == LuaEntry.Player.allianceId then
                table.insert(gripData,v);
            end
        end

        local curNum = #gripData
        if curNum < 10 then
            local addFakeNum = 10 - curNum
            for i = 1, addFakeNum do

                --[[
                    allianceId:
                    "5433044c81f542119fd573ac171da372"
                    headSkinET:
                    1682560800000
                    headSkinId:
                    20002
                    name:
                    "君莫笑"
                    pic:
                    ""
                    picVer:
                    1
                    score:
                    71940
                    serverId:
                    53
                    uid:
                    "1251477393000053"
                ]]
                --假数据
                table.insert(gripData, {uid = "", score = 0, name = "", pic = "", serverId = 0, picVer = 1, headSkinId = 0, headSkinET = 0, allianceId = ""});
            end
        end

        return gripData
    else

        local curNum = #retData
        if curNum < 10 then
            local addFakeNum = 10 - curNum
            for i = 1, addFakeNum do

                --[[
                    allianceId:
                    "5433044c81f542119fd573ac171da372"
                    headSkinET:
                    1682560800000
                    headSkinId:
                    20002
                    name:
                    "君莫笑"
                    pic:
                    ""
                    picVer:
                    1
                    score:
                    71940
                    serverId:
                    53
                    uid:
                    "1251477393000053"
                ]]
                --假数据
                table.insert(retData, {uid = "", score = 0, name = "", pic = "", serverId = 0, picVer = 1, headSkinId = 0, headSkinET = 0, allianceId = ""});
            end
        end
        return retData
    end
    
end

-- 领取捐献士兵任务奖励
local function OnGetDonateSoldierTaskReward(self)
    SFSNetwork.SendMessage(MsgDefines.ReceiveDonateArmyTaskReward)
end

UIActivityCenterTableCtrl.CloseSelf = CloseSelf
UIActivityCenterTableCtrl.Close = Close
UIActivityCenterTableCtrl.InitData = InitData
UIActivityCenterTableCtrl.SetCurrentActivityId = SetCurrentActivityId
UIActivityCenterTableCtrl.GetCurrentActivityId = GetCurrentActivityId
UIActivityCenterTableCtrl.GetActivityIdList = GetActivityIdList
UIActivityCenterTableCtrl.GetActivityDataById = GetActivityDataById
UIActivityCenterTableCtrl.GetCurrentActivity = GetCurrentActivity
UIActivityCenterTableCtrl.RewardItemList =RewardItemList
UIActivityCenterTableCtrl.GetSevenDayTaskReward = GetSevenDayTaskReward
UIActivityCenterTableCtrl.GetSevenDayBoxReward = GetSevenDayBoxReward
UIActivityCenterTableCtrl.GetScoreData =GetScoreData
UIActivityCenterTableCtrl.SendActivityGetRewardCommand =SendActivityGetRewardCommand
UIActivityCenterTableCtrl.GetBarterItemsList =GetBarterItemsList
UIActivityCenterTableCtrl.GoEdenWar = GoEdenWar
UIActivityCenterTableCtrl.GetPuzzleData = GetPuzzleData
UIActivityCenterTableCtrl.GetActivityGroupList = GetActivityGroupList
UIActivityCenterTableCtrl.GetDefaultFocusActivity = GetDefaultFocusActivity
UIActivityCenterTableCtrl.GetCntByResType = GetCntByResType
UIActivityCenterTableCtrl.GetDonateSoldierActivityDataList = GetDonateSoldierActivityDataList
UIActivityCenterTableCtrl.OnGetDonateSoldierTaskReward = OnGetDonateSoldierTaskReward

return UIActivityCenterTableCtrl