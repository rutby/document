---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/9/10 14:31
---
local UIResSupportCtrl = BaseClass("UIResSupportCtrl", UIBaseCtrl)

local function CloseSelf(self)
    UIManager.Instance:DestroyWindow(UIWindowNames.UIResSupport)
end

local function Close(self)
    UIManager.Instance:DestroyWindowByLayer(UILayer.Normal, false)
end

local function CalcRealTimeCost(self, targetPoint)
    local buildList = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(BuildingTypes.FUND_BUILD_ALLIANCE_CENTER)
    if buildList==nil or table.count(buildList) == 0 or buildList[1]==nil then
        return
    end
    --local startPointID =  buildList[1].pointId
    --if startPointID then
    --    CS.SceneManager.World:GetTimeFromCurPosToTargetPos(startPointID,targetPoint,1,ResSupportPathFindingId)
    --end
end

local function GetTransportDistance(self, targetPointID)
    local buildList = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(BuildingTypes.FUND_BUILD_ALLIANCE_CENTER)
    if buildList==nil or table.count(buildList) == 0 or buildList[1]==nil then
        return
    end
    
    local startPointID = buildList[1].pointId
    local distance = Vector3.Distance(SceneUtils.TileIndexToWorld(startPointID),SceneUtils.TileIndexToWorld(targetPointID))
    distance = distance / CS.SceneManager.World.TileSize
    return distance
end

local function GetStraightLineTimeCost(self, targetPoint)
    local k3_speed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k3") -- speed
    k3_speed = (k3_speed and k3_speed ~= 0) and k3_speed or 1
    local distance = self:GetTransportDistance(targetPoint)
    return math.floor(distance / k3_speed)
end


local function StartTransport(self, pointId, resList)
    local freeUuid = DataCenter.ArmyFormationDataManager:GetFreeResSupportFormation()
    if not freeUuid then
        UIUtil.ShowTipsId(390837) 
        return
    end
    
    local marchTargetType = MarchTargetType.RESOURCE_HELP 
    local sfsObj = SFSObject.New()
    sfsObj:PutLong("uuid", freeUuid)
    local formationArray = SFSArray.New()
    sfsObj:PutSFSArray("formations", formationArray)
    local heroArray = SFSArray.New()
    sfsObj:PutSFSArray("heroInfos", heroArray)

    local resArray = SFSArray.New()
    table.walk(resList,function (k,v)
        local obj = SFSObject.New()
        obj:PutInt("t",v.type)
        obj:PutInt("v", v.value)
        resArray:AddSFSObject(obj)
    end)

    sfsObj:PutSFSArray("resArr", resArray)
    
    local dataObj = sfsObj
    local startPoint = 0;
    local buildList = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(BuildingTypes.FUND_BUILD_ALLIANCE_CENTER)
    if buildList~=nil and table.count(buildList) > 0 and buildList[1]~=nil then
        startPoint = buildList[1].pointId
    end
    MarchUtil.StartMarch(marchTargetType, pointId, -1, -1, 0, freeUuid, 1, dataObj,startPoint)
    self:CloseSelf()
end

UIResSupportCtrl.GetTransportDistance = GetTransportDistance
UIResSupportCtrl.GetStraightLineTimeCost = GetStraightLineTimeCost
UIResSupportCtrl.CalcRealTimeCost = CalcRealTimeCost
UIResSupportCtrl.StartTransport = StartTransport
UIResSupportCtrl.Close = Close
UIResSupportCtrl.CloseSelf = CloseSelf

return UIResSupportCtrl