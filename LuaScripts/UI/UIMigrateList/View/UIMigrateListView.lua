---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/4/18 12:30
---
---
local UIHeroTipView = require "UI.UIHero2.UIHeroTip.View.UIHeroTipView"
local MigrateServerItem = require "UI.UIMigrateList.Component.MigrateServerItem"
local UIMigrateListView = BaseClass("UIMigrateListView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local txt_title_path ="UICommonPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonPopUpTitle/panel"
local join_obj_path = "ImgBg/Join"
local empty_txt_path = "ImgBg/TxtEmpty"
local des_path = "ImgBg/Join/select/des"
local scroll_path = "ImgBg/Join/ScrollView"
local img_path = "ImgBg/Join/desObj/head/img"
local server_txt_path = "ImgBg/Join/desObj/serverTxt"
local server_name_path = "ImgBg/Join/desObj/serverName"
local migrate_btn_path = "ImgBg/Join/desObj/BtnMigrate"
local migrate_btn_txt_path = "ImgBg/Join/desObj/BtnMigrate/migrateBtnText"
local item_num_path = "ImgBg/Join/desObj/BtnMigrate/itemNum"
local item_icon_path = "ImgBg/Join/desObj/BtnMigrate/itemNum/consumeIcon"
local apply_btn_path = "ImgBg/Join/desObj/BtnApply"
local apply_txt_path = "ImgBg/Join/desObj/BtnApply/applyTxt"
local chat_btn_path = "ImgBg/Join/desObj/layout/king/kingTxt/BtnChat"

local rank_btn_path = "ImgBg/Join/desObj/BtnRank"
local rank_txt_path = "ImgBg/Join/desObj/BtnRank/rankTxt"
local king_path = "ImgBg/Join/desObj/layout/king"
local king_num_path = "ImgBg/Join/desObj/layout/king/kingTxt"
local item_path = "ImgBg/Join/desObj/layout/item"
local item_need_num_path = "ImgBg/Join/desObj/layout/item/itemTxt"
local add_btn_path = "ImgBg/Join/desObj/layout/item/itemTxt/btn_add"
local lv_path = "ImgBg/Join/desObj/layout/mainLv"
local lv_num_path = "ImgBg/Join/desObj/layout/mainLv/lvTxt"
local time_path = "ImgBg/Join/desObj/layout/time"
local time_num_path = "ImgBg/Join/desObj/layout/time/timeTxt"
local power_path = "ImgBg/Join/desObj/layout/power"
local power_num_path = "ImgBg/Join/desObj/layout/power/powerTxt"
local power_btn_path = "ImgBg/Join/desObj/layout/power/powerTxt/powerButton"
local state_path = "ImgBg/Join/desObj/layout/state"
local state_num_path = "ImgBg/Join/desObj/layout/state/stateTxt"
local state_btn_path = "ImgBg/Join/desObj/layout/state/stateTxt/stateButton"
local condition_path = "ImgBg/Join/desObj/TxtCondition"

local State =
{
    Free =1,
    Applying = 2,
    ReFuse = 3,
    Accept = 4,
    NeedApply = 5,
    NeedSpecialApply = 6,
    MigrateColdDown = 7,
}
local function OnCreate(self)
    base.OnCreate(self)
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.txt_title:SetLocalText(104264)
    self.des = self:AddComponent(UIText, des_path)
    self.des:SetLocalText(250327)
    self.countryFlagN = self:AddComponent(UIImage, img_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)

    self.server_name = self:AddComponent(UIText,server_name_path)

    self.server_txt = self:AddComponent(UIText,server_txt_path)
    self.server_txt:SetLocalText(100031)
    self.join_obj = self:AddComponent(UIBaseContainer,join_obj_path)
    self.empty_txt = self:AddComponent(UIText,empty_txt_path)
    self.empty_txt:SetLocalText(105064)
    self.migrate_btn = self:AddComponent(UIButton, migrate_btn_path)
    self.migrate_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickMigrate()
    end)
    self.migrate_btn_txt = self:AddComponent(UIText, migrate_btn_txt_path)
    self.migrate_btn_txt:SetLocalText(250329)
    self.item_num = self:AddComponent(UIText,item_num_path)
    self.consumeIconN = self:AddComponent(UIImage, item_icon_path)
    self.item_need_num = self:AddComponent(UIText,item_need_num_path)
    self.chat_btn = self:AddComponent(UIButton,chat_btn_path)
    self.chat_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickChat()
    end)
    self.add_btn = self:AddComponent(UIButton,add_btn_path)
    self.add_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickAdd()
    end)
    self.rank_btn = self:AddComponent(UIButton,rank_btn_path)
    self.rank_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickRank()
    end)
    self.rank_txt = self:AddComponent(UIText,rank_txt_path)
    self.rank_txt:SetLocalText(250394)

    self.apply_btn = self:AddComponent(UIButton, apply_btn_path)
    self.apply_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnBeforeApply()
    end)
    self.apply_txt = self:AddComponent(UIText, apply_txt_path)
    self.apply_txt:SetLocalText(250330)


    self.king = self:AddComponent(UIText,king_path)
    self.king:SetLocalText(250045)
    self.king_num = self:AddComponent(UIText,king_num_path)
    self.item_des = self:AddComponent(UIText,item_path)
    self.item_des:SetLocalText(250396)
    self.lv = self:AddComponent(UIText,lv_path)
    self.lv:SetLocalText(130392)
    self.lv_num = self:AddComponent(UIText,lv_num_path)
    self.time = self:AddComponent(UIText,time_path)
    self.time:SetLocalText(250323,"")
    self.time_num = self:AddComponent(UIText,time_num_path)
    self.power = self:AddComponent(UIText, power_path)
    self.power:SetLocalText(250304)
    self.power_num = self:AddComponent(UIText, power_num_path)

    self.power_btn = self:AddComponent(UIButton,power_btn_path)
    self.power_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickPower()
    end)

    self.state_txt = self:AddComponent(UIText, state_path)
    self.state_num = self:AddComponent(UIText, state_num_path)
    self.condition = self:AddComponent(UIText, condition_path)
    self.state_btn = self:AddComponent(UIButton,state_btn_path)
    self.state_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickState()
    end)
    self.ScrollView = self:AddComponent(UIScrollView, scroll_path)
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.serverList = {}
    self.requestList = {}
    self.state = State.Free
    self.timer_action = function(temp)
        self:UpdateTime()
    end
end

local function OnDestroy(self)
    self:ClearScroll()
    base.OnDestroy(self)
end

local function RefreshMigrateList(self)
    self:ClearScroll()
    self.serverList = self.ctrl:GetServerList()
    if #self.serverList>0 then
        self.join_obj:SetActive(true)
        self.empty_txt:SetActive(false)
        self.ScrollView:SetTotalCount(#self.serverList)
        self.ScrollView:RefillCells()
        self:RefreshMigrateContent()
    else
        self.join_obj:SetActive(false)
        self.empty_txt:SetActive(true)
    end
end
local function RefreshMigrateContent(self)
    local currentServerId = self.ctrl:GetCurrentSelectServerId()
    if self.requestList[currentServerId]~=nil then
        self:RefreshDetail(currentServerId)
    else
        SFSNetwork.SendMessage(MsgDefines.GetMigrateItem,currentServerId)
    end
end

local function RefreshItemData(self)
    local data = self.ctrl:GetOneDataByServerId(self.ctrl:GetCurrentSelectServerId())
    if data ~=nil then
        local needItemId = data.needItemId
        local good = DataCenter.ItemData:GetItemById(needItemId)
        local curNum = good and good.count or 0
        local str = ""
        if curNum < data.needItemNum then
            str ="<color=#FF0000>"..curNum.."</color>".."/"..data.needItemNum
        else
            str =curNum.."/"..data.needItemNum
        end
        self.item_need_num:SetText(str)
        self.consumeIconN:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(needItemId))
    end
end
local function RefreshDetail(self,serverId)
    local currentServerId = self.ctrl:GetCurrentSelectServerId()
    if currentServerId == serverId then
        self.state = State.Free
        self.endTime = 0
        self.server_name:SetText(Localization:GetString("208236",serverId))
        local x,y = math.modf(serverId/5)
        local num = serverId-x*5+1
        self.countryFlagN:LoadSprite("Assets/Main/Sprites/UI/UIInterstellarMigration/planet0"..toInt(num))
        local data = self.ctrl:GetOneDataByServerId(serverId)
        if data ~=nil then
            if data.kingName~=nil and data.kingName~="" then
                self.king_num:SetText(data.kingName)
                self.chat_btn:SetActive(true)
            else
                self.king_num:SetText(Localization:GetString("100206"))
                self.chat_btn:SetActive(false)
            end

            local limitLv = 30
            if data.condition~=nil and data.condition[1]~=nil then
                limitLv = data.condition[1]
            end
            self.lv_num:SetText(limitLv)
            local targetPower = data.targetPowerLimit
            local selfPower = data.maxPower
            self.power_num:SetText(string.GetFormattedSeperatorNum(targetPower))
            self.item_num:SetText(data.needItemNum)
            local needItemId = data.needItemId
            local good = DataCenter.ItemData:GetItemById(needItemId)
            local curNum = good and good.count or 0
            local str = ""
            if curNum < data.needItemNum then
                str ="<color=#FF0000>"..curNum.."</color>".."/"..data.needItemNum
            else
                str =curNum.."/"..data.needItemNum
            end
            self.item_need_num:SetText(str)
            self.consumeIconN:LoadSprite(DataCenter.ItemTemplateManager:GetIconPath(needItemId))
            local serverLimit = LuaEntry.DataConfig:TryGetNum("aps_migrate_server", "k1")
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if selfPower<targetPower then
                self.state = State.Free
                local endTime = data.lastMigrateServerTime+data.cd*1000
                if endTime> curTime then
                    self.state = State.MigrateColdDown
                    self.endTime = endTime
                end
            elseif selfPower >= targetPower then --需申请
                local applyData = DataCenter.MigrateDataManager:OnGetMigrateApplyDataByServerId(serverId)
                if applyData == nil then
                    if selfPower>=serverLimit then
                        self.state = State.NeedSpecialApply
                    else
                        self.state = State.NeedApply
                    end
                else
                    local applyState = applyData.state
                    if applyState == MigrateApplyType.APPLY then
                        local deltaTime = LuaEntry.DataConfig:TryGetNum("aps_migrate_server", "k4")
                        local endTime = applyData.applyTime+(deltaTime*1000*60)
                        if endTime> curTime then
                            self.state = State.Applying
                            self.endTime = endTime
                        else
                            if selfPower>=serverLimit then
                                self.state = State.NeedSpecialApply
                            else
                                self.state = State.NeedApply
                            end
                        end
                    elseif applyState == MigrateApplyType.AGREE then
                        local deltaTime = LuaEntry.DataConfig:TryGetNum("aps_migrate_server", "k5")
                        local endTime = applyData.approveTime+(deltaTime*1000*60)
                        if endTime> curTime then
                            self.state = State.Accept
                            self.endTime = endTime
                        else
                            if selfPower>=serverLimit then
                                self.state = State.NeedSpecialApply
                            else
                                self.state = State.NeedApply
                            end
                        end
                    elseif applyState == MigrateApplyType.REFUSE then
                        local deltaTime = LuaEntry.DataConfig:TryGetNum("aps_migrate_server", "k4")
                        local endTime = applyData.applyTime+(deltaTime*1000*60)
                        if endTime> curTime then
                            self.state = State.ReFuse
                            self.endTime = endTime
                        else
                            if selfPower>=serverLimit then
                                self.state = State.NeedSpecialApply
                            else
                                self.state = State.NeedApply
                            end
                        end
                    elseif applyState == MigrateApplyType.MIGRATE then
                        self.state = State.Free
                        local endTime = data.lastMigrateServerTime+data.cd*1000
                        if endTime> curTime then
                            self.state = State.MigrateColdDown
                            self.endTime = endTime
                        end
                    end
                end
            end
        end

        if self.state == State.Free then
            self.apply_btn:SetActive(false)
            self.migrate_btn:SetActive(true)
            self.condition:SetActive(false)
            self.state_txt:SetText(Localization:GetString("250376"))
            self.state_num:SetText(Localization:GetString("250389"))
            self.state_num:SetColorRGBA(0,1,0,1)
            self.state_btn:SetActive(false)
        elseif self.state == State.Accept then
            self.apply_btn:SetActive(false)
            self.migrate_btn:SetActive(true)
            self.condition:SetActive(true)
            self.state_txt:SetText(Localization:GetString("250376"))
            self.state_num:SetText(Localization:GetString("250359"))
            self.state_num:SetColorRGBA(0,1,0,1)
            self.state_btn:SetActive(false)
        elseif self.state == State.NeedApply then
            self.apply_btn:SetActive(true)
            CS.UIGray.SetGray(self.apply_btn.transform, false, true)
            self.migrate_btn:SetActive(false)
            self.condition:SetActive(false)
            self.state_txt:SetText(Localization:GetString("250376"))
            self.state_num:SetText(Localization:GetString("250383"))
            self.state_num:SetColorRGBA(1,1,1,1)
            self.state_btn:SetActive(true)
        elseif self.state == State.NeedSpecialApply then
            self.apply_btn:SetActive(true)
            self.migrate_btn:SetActive(false)
            self.condition:SetActive(false)
            self.state_txt:SetText(Localization:GetString("250384"))
            local useCount = 0
            local maxCount = 0
            if data~=nil then
                useCount = data.useCount
                maxCount = data.totalCount
            end
            self.state_num:SetText((maxCount-useCount))
            self.state_num:SetColorRGBA(1,1,1,1)
            if useCount>=maxCount then
                CS.UIGray.SetGray(self.apply_btn.transform, true, true)
            else
                CS.UIGray.SetGray(self.apply_btn.transform, false, true)
            end
            self.state_btn:SetActive(true)
        elseif self.state == State.ReFuse then
            self.apply_btn:SetActive(true)
            CS.UIGray.SetGray(self.apply_btn.transform, true, false)
            self.migrate_btn:SetActive(false)
            self.condition:SetActive(true)
            self.state_txt:SetText(Localization:GetString("250376"))
            self.state_num:SetText(Localization:GetString("250361"))
            self.state_num:SetColorRGBA(1,0,0,1)
            self.state_btn:SetActive(false)
        elseif self.state == State.Applying then
            self.apply_btn:SetActive(true)
            CS.UIGray.SetGray(self.apply_btn.transform, true, false)
            self.migrate_btn:SetActive(false)
            self.condition:SetActive(true)
            self.state_txt:SetText(Localization:GetString("250376"))
            self.state_num:SetText(Localization:GetString("390100"))
            self.state_num:SetColorRGBA(1,1,1,1)
            self.state_btn:SetActive(false)
        elseif self.state == State.MigrateColdDown then
            self.apply_btn:SetActive(true)
            CS.UIGray.SetGray(self.apply_btn.transform, true, false)
            self.migrate_btn:SetActive(false)
            self.condition:SetActive(true)
            self.state_txt:SetText(Localization:GetString("250376"))
            self.state_num:SetText(Localization:GetString("100381"))
            self.state_num:SetColorRGBA(1,1,1,1)
            self.state_btn:SetActive(false)
        end
    end

end

local function OnEnable(self)
    base.OnEnable(self)
    self.ctrl:InitData(self:GetUserData())
    self:AddTimer()
    self.actEndTime = 0
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
    if table.count(dataList) > 0 then
        local actData = dataList[1]
        if actData~=nil then
            self.actEndTime = actData.endTime
        end
    end
    self:UpdateTime()
end

local function OnDisable(self)
    self:ClearScroll()
    self:DeleteTimer()
    base.OnDisable(self)

end

local function OnItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(MigrateServerItem, itemObj)
    cellItem:SetItemShow(self.serverList[index])
end

local function OnItemMoveOut(self, itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name, MigrateServerItem)
end

local function ClearScroll(self)
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(MigrateServerItem)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.GetMigrateList, self.RefreshMigrateList)
    self:AddUIListener(EventId.CLICK_MIGRATE_SERVER_ITEM, self.RefreshMigrateContent)
    self:AddUIListener(EventId.GetMigrateServerDetail,self.RefreshDetail)
    self:AddUIListener(EventId.OnMigrateApplyToPresident, self.RefreshDetail)
    self:AddUIListener(EventId.RefreshItems, self.RefreshItemData)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.GetMigrateList, self.RefreshMigrateList)
    self:RemoveUIListener(EventId.CLICK_MIGRATE_SERVER_ITEM, self.RefreshMigrateContent)
    self:RemoveUIListener(EventId.GetMigrateServerDetail,self.RefreshDetail)
    self:RemoveUIListener(EventId.OnMigrateApplyToPresident, self.RefreshDetail)
    self:RemoveUIListener(EventId.RefreshItems, self.RefreshItemData)
end

local function UpdateTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.state == State.MigrateColdDown then
        local deltaTime = self.endTime - curTime
        if deltaTime > 0 then
            self.condition:SetText(Localization:GetString("250381", UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime)))
        else
            self:RefreshDetail(self.ctrl:GetCurrentSelectServerId())
        end
    elseif self.state == State.Accept then
        local deltaTime = self.endTime - curTime
        if deltaTime > 0 then
            self.condition:SetText(Localization:GetString("250323", UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime)))
        else
            self:RefreshDetail(self.ctrl:GetCurrentSelectServerId())
        end
    elseif self.state == State.Applying or self.state == State.ReFuse then
        local deltaTime = self.endTime - curTime
        if deltaTime > 0 then
            self.condition:SetText(Localization:GetString("250380", UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime)))
        else
            self:RefreshDetail(self.ctrl:GetCurrentSelectServerId())
        end
    end

    local deltaTime = self.actEndTime-curTime
    if deltaTime>0 then
        self.time_num:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
    else
        self.time_num:SetText(Localization:GetString("302048"))
    end
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnClickPower(self)
    local des = Localization:GetString("250332")
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.power_btn.transform.position + Vector3.New(-30, 0, 0) * scaleFactor
    local param = UIHeroTipView.Param.New()
    param.content = des
    param.dir = UIHeroTipView.Direction.LEFT
    param.defWidth = 300
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function OnClickState(self)
    local des = Localization:GetString("250333")
    if self.state == State.NeedSpecialApply then

        local limitNum = LuaEntry.DataConfig:TryGetNum("aps_migrate_server", "k1")
        local serverLimit = LuaEntry.DataConfig:TryGetStr("aps_migrate_server", "k6")
        local arr = string.split(serverLimit,";")
        if arr~=nil and #arr>0 then
            local data = self.ctrl:GetOneDataByServerId(self.ctrl:GetCurrentSelectServerId())
            if data ~=nil then
                local season = data.season+1
                if season>#arr then
                    season = #arr
                end
                limitNum = tonumber(arr[season])
            end
        end
        local num = LuaEntry.DataConfig:TryGetNum("aps_migrate_server", "k3")
        des = Localization:GetString("250334",string.GetFormattedSeperatorNum(limitNum),num)
    end
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self.state_btn.transform.position + Vector3.New(-30, 0, 0) * scaleFactor
    local param = UIHeroTipView.Param.New()
    param.content = des
    param.dir = UIHeroTipView.Direction.LEFT
    param.defWidth = 300
    param.pivot = 0.5
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end
local function OnBeforeApply(self)
    local actData = nil
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
    if table.count(dataList) > 0 then
        actData = dataList[1]
    end
    if actData then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if actData.startTime < curTime and curTime < actData.endTime  then
            if actData.normalStartTime<curTime and curTime<actData.normalEndTime then
                self:OnClickApply()
            else
                local str = Localization:GetString("250403")
                if LuaEntry.Player:IsInAlliance() ==true then
                    str = str.."\n"..Localization:GetString("250390")
                end
                UIUtil.ShowMessage(str, 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                    self:OnClickApply()
                end)
            end
        end
        
    end
    
end
local function OnClickApply(self)
    local data = self.ctrl:GetOneDataByServerId(self.ctrl:GetCurrentSelectServerId())
    if data ~=nil then
        local needItemId = data.needItemId
        local needItemNum = data.needItemNum
        local good = DataCenter.ItemData:GetItemById(needItemId)
        local curNum = good and good.count or 0
        if curNum < needItemNum then
            local lackTab = {}
            local param = {}
            param.type = ResLackType.Item
            param.id = tonumber(needItemId)
            param.targetNum = needItemNum
            table.insert(lackTab,param)
            GoToResLack.GoToItemResLackList(lackTab)
            return
        end
    end
    local serverId = self.ctrl:GetCurrentSelectServerId()
    if serverId>0 then
        SFSNetwork.SendMessage(MsgDefines.MigrateApply,serverId)
        CS.UIGray.SetGray(self.apply_btn.transform, true, false)
    end
end

local function OnClickChat(self)
    local data = self.ctrl:GetOneDataByServerId(self.ctrl:GetCurrentSelectServerId())
    if data ~=nil then
        local userId = data.kingUid
        if userId~=nil and userId~="" then
            local roomId = ChatManager2:GetInstance().Room:GetPrivateRoomByUserId(userId)
            local param = {}
            param["roomId"] = roomId
            param["userId"] = userId
            param["username"] = data.kingName
            GoToUtil.GotoOpenView(UIWindowNames.UIChatNew,{anim = false, hideTop = true ,UIMainAnim = UIMainAnimType.AllHide},param)
            return
        end
    end
    UIUtil.ShowTipsId(250122)
end

local function OnClickMigrate(self)
    if DataCenter.GovernmentManager:IsSelfPresident() then
        UIUtil.ShowMessage(Localization:GetString("309044"), 2, "309045", GameDialogDefine.CANCEL, function()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UITransferKing, { anim = true })
        end)
        return
    end
    local isAllFree = DataCenter.ArmyFormationDataManager:IsAllFormationFree()
    if isAllFree == false then
        UIUtil.ShowTipsId(250317)
        return
    end
    local data = self.ctrl:GetOneDataByServerId(self.ctrl:GetCurrentSelectServerId())
    if data ~=nil then
        local minCityLevel = 30
        if data.condition~=nil and data.condition[1]~=nil then
            minCityLevel = data.condition[1]
        end
        local mainLv = DataCenter.BuildManager.MainLv
        local lvDes = Localization:GetString("250311",minCityLevel)
        if mainLv<minCityLevel then
            UIUtil.ShowTips(lvDes)
            return
        end
        local str = nil
        local actData = nil
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
        if table.count(dataList) > 0 then
            actData = dataList[1]
        end
        if actData then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if actData.startTime < curTime and curTime < actData.endTime  then
                if actData.normalStartTime<curTime and curTime<actData.normalEndTime then
                    if LuaEntry.Player:IsInAlliance() ==true then
                        str = Localization:GetString("250390")
                    end
                else
                    str = Localization:GetString("250403")
                    if LuaEntry.Player:IsInAlliance() ==true then
                        str = str.."\n"..Localization:GetString("250390")
                    end
                end
            end

        end
        if str~=nil then
            local needItemId = data.needItemId
            local needItemNum = data.needItemNum
            local serverId = data.serverId
            UIUtil.ShowMessage(str, 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIMigrateServer,needItemId,needItemNum,serverId)
            end)
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIMigrateServer,data.needItemId,data.needItemNum,data.serverId)
        end

    end
end

local function OnClickRank(self)
    local serverId = self.ctrl:GetCurrentSelectServerId()
    if serverId>0 then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIRankDetailList, { anim = true , isBlur = true}, RankType.OtherServerAlliancePower,serverId)
    end
end

local function OnClickAdd(self)
    local data = self.ctrl:GetOneDataByServerId(self.ctrl:GetCurrentSelectServerId())
    if data ~=nil then
        local needItemId = data.needItemId
        local needItemNum = data.needItemNum
        
        local lackTab = {}
        local param = {}
        param.type = ResLackType.Item
        param.id = tonumber(needItemId)
        param.targetNum = needItemNum
        table.insert(lackTab,param)
        GoToResLack.GoToItemResLackList(lackTab)

    end
end
UIMigrateListView.OnCreate= OnCreate
UIMigrateListView.OnDestroy = OnDestroy
UIMigrateListView.OnEnable = OnEnable
UIMigrateListView.OnDisable = OnDisable
UIMigrateListView.RefreshMigrateList = RefreshMigrateList
UIMigrateListView.ClearScroll = ClearScroll
UIMigrateListView.OnAddListener = OnAddListener
UIMigrateListView.OnRemoveListener = OnRemoveListener
UIMigrateListView.RefreshMigrateContent = RefreshMigrateContent
UIMigrateListView.RefreshDetail = RefreshDetail
UIMigrateListView.RefreshDetail = RefreshDetail
UIMigrateListView.OnItemMoveIn = OnItemMoveIn
UIMigrateListView.OnItemMoveOut = OnItemMoveOut
UIMigrateListView.UpdateTime = UpdateTime
UIMigrateListView.AddTimer = AddTimer
UIMigrateListView.DeleteTimer =DeleteTimer
UIMigrateListView.OnClickState= OnClickState
UIMigrateListView.OnClickPower= OnClickPower
UIMigrateListView.OnClickApply= OnClickApply
UIMigrateListView.OnClickMigrate =OnClickMigrate
UIMigrateListView.OnClickChat = OnClickChat
UIMigrateListView.OnClickRank = OnClickRank
UIMigrateListView.OnClickAdd = OnClickAdd
UIMigrateListView.RefreshItemData =RefreshItemData
UIMigrateListView.OnBeforeApply = OnBeforeApply
return UIMigrateListView