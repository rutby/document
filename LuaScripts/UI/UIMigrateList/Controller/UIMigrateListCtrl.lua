---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/4/18 12:30
---
local UIMigrateListCtrl = BaseClass("UIMigrateListCtrl", UIBaseCtrl)

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIMigrateList)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function InitData(self,serverId)
    self.currentSeverId = 0
    if serverId~=nil and serverId>0 then
        self.currentSeverId = serverId
        Setting:SetPrivateInt("Migrate_Server", serverId)
    else
        local lastSelectServer = Setting:GetPrivateInt("Migrate_Server", 0)
        if lastSelectServer>0 then
            self.currentSeverId = lastSelectServer
            Setting:SetPrivateInt("Migrate_Server",lastSelectServer)
        end
    end
    DataCenter.MigrateDataManager:GetMigrateRequest()
end

local function GetServerList(self)
    local tempList =  DataCenter.MigrateDataManager:OnGetServerList()
    local list = {}
    local selectIsIn = false
    if tempList~=nil then
        for k,v in pairs(tempList) do
            if v.serverId~=LuaEntry.Player:GetSelfServerId() then
                local oneData = {}
                oneData.serverId = v.serverId
                oneData.season = v.season
                if self.currentSeverId == v.serverId then
                    selectIsIn = true
                end
                table.insert(list,oneData)
            end
        end
    end
    table.sort(list,function(a,b)
        return a.serverId<b.serverId
    end)
    if selectIsIn==false and #list>0 then
        self:SelectOneMigrateServerItem(list[1].serverId)
    end
    return list
end

local function GetOneDataByServerId(self,serverId)
    return DataCenter.MigrateDataManager:OnGetServerDetailDataByServerId(serverId)
end
local function GetCurrentSelectServerId(self)
    return self.currentSeverId
end
local function SelectOneMigrateServerItem(self,serverId)
    if self.currentSeverId ~= serverId then
        local oldSelectId = self.currentSeverId
        self.currentSeverId = serverId
        Setting:SetPrivateInt("Migrate_Server", serverId)
        if oldSelectId~=nil and oldSelectId>0 then
            EventManager:GetInstance():Broadcast(EventId.CLICK_MIGRATE_SERVER_ITEM,oldSelectId)
        end
    end
end

UIMigrateListCtrl.CloseSelf =CloseSelf
UIMigrateListCtrl.Close =Close
UIMigrateListCtrl.GetServerList =GetServerList
UIMigrateListCtrl.InitData =InitData
UIMigrateListCtrl.GetOneDataByServerId =GetOneDataByServerId
UIMigrateListCtrl.GetCurrentSelectServerId =GetCurrentSelectServerId
UIMigrateListCtrl.SelectOneMigrateServerItem =SelectOneMigrateServerItem
return UIMigrateListCtrl