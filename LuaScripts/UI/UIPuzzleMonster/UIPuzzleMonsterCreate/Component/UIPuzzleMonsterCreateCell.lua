---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/6/8 17:44
---

local UIPuzzleMonsterCreateCell = BaseClass("UIPuzzleMonsterCreateCell", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization
local name_txt_path = "NameText"
local DetectEventRewardCell = require "UI.UIRadarCenter.UIDetectEvent.Component.DetectEventRewardCell"
local free_button_path = "FreeBtn"
local free_btn_txt_path = "FreeBtn/btnTxt1"

local cost_button_path = "CostBtn"
local cost_btn_txt2_path = "CostBtn/btnTxt2"
local cost_btn_txt3_path = "CostBtn/btnTxt3"
local cost_btn_icon_path = "CostBtn/btnTxt2/CostIcon"
local scroll_view_path = "ScrollView"
local cell_bg_path = "Cell_BG"
local reward_title_path = "RewardTitle"
local troop_text_path = "TroopText"
local unlock_condition_text_path = "UnlockCondition"
local unlock_icon_path = "lock"
local red_dot_path = "RedDotWithoutNum"

local unlock_ani_name = "V_ui_jiesuo_cbt"
local lock_ani_name = "V_ui_jiesuo_normal"

local function OnCreate(self)
    base.OnCreate(self)
    self.name_txt = self:AddComponent(UIText,name_txt_path)
    self.cell_bg = self:AddComponent(UIImage, cell_bg_path)
    self.free_btn = self:AddComponent(UIButton, free_button_path)
    self.free_btn:SetOnClick(function()
        self:OnCreateClick()
    end)
    self.free_btn_txt = self:AddComponent(UIText, free_btn_txt_path)
    self.free_btn_txt:SetLocalText(130126)
    self.reward_title = self:AddComponent(UIText, reward_title_path)
    self.reward_title:SetLocalText(143568)
    self.troop_text = self:AddComponent(UIText, troop_text_path)
    self.unlockIcon = self:AddComponent(UIBaseContainer, unlock_icon_path)
    self.unlockText = self:AddComponent(UIText, unlock_condition_text_path)
    self.cost_button = self:AddComponent(UIButton, cost_button_path)
    self.cost_button:SetOnClick(function()
        self:OnCreateClick()
    end)
    self.cost_btn_txt3 = self:AddComponent(UIText, cost_btn_txt3_path)
    self.cost_btn_txt3:SetLocalText(372258)
    self.cost_btn_txt2 = self:AddComponent(UIText, cost_btn_txt2_path)
    self.cost_btn_icon = self:AddComponent(UIImage, cost_btn_icon_path)

    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)

    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)

    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
    self.red_dot = self:AddComponent(UIBaseContainer, red_dot_path)
    
    self.animator = self:AddComponent(UIAnimator, unlock_icon_path)
end

local function OnDestroy(self)
    self.name_txt = nil
    self.free_btn = nil
    self.free_btn_txt = nil
    self.cost_button = nil
    self.cost_btn_txt2 = nil
    self.cost_btn_icon = nil
    self.scroll_view = nil
    if self.delayTimer ~= nil then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end

    base.OnDestroy(self)
end


local function SetItemShow(self, data)
    self.data = data
    self.rewardList = data.rewardList
    local puzzleMonster= DataCenter.ActivityPuzzleMonsterTemplateManager:GetTemplateByMonsterId(self.data.monsterId)
    self.troop_text:SetLocalText(300644, string.GetFormattedSeperatorNum(DataCenter.MonsterTemplateManager:GetRecommendPower(self.data.monsterId)))
    self.troop_text:SetActive(true)
    
    if puzzleMonster ~= nil then
        local name = puzzleMonster.name
        self.name_txt:SetLocalText(name)
    end
    self.cell_bg:LoadSprite(string.format(LoadPath.UITreasurePuzzle, puzzleMonster.color))
    self.free_btn:SetActive(false)
    self.cost_button:SetActive(false)
    self.unlockIcon:SetActive(false)
    if self.data.unlock and not self.data.needShowUnlockAnimation then
        if self.data.consumeType == ConsumeType.ConsumeType_Nil then
            self.free_btn:SetActive(true)
        else
            self.cost_button:SetActive(true)
            self.cost_btn_txt2:SetText(self.data.consumeNum)
        end
    else
        self.troop_text:SetActive(false)
        self.unlockIcon:SetActive(true)
        if self.data.needShowUnlockAnimation then
            self:playUnlockAnimation()
        else
            self.animator:Play(lock_ani_name, 0, 0)
        end
    end
    self.unlockText:SetText(self.data.unlockStr)
    self.red_dot:SetActive(self.data.showRedDot)
    self:ShowCells()
end

local function OnCreateClick(self)
    self.view.ctrl:CreatePuzzleMonster(self.data)
end

local function playUnlockAnimation(self)
    local _, time = self.animator:GetAnimationReturnTime(unlock_ani_name)
    self.animator:Play(unlock_ani_name, 0, 0)
    if self.delayTimer ~= nil then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end

    self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
        if self.data.puzzleType == PuzzleMonsterType.Activity then
            DataCenter.ActivityPuzzleDataManager:SaveBossUnlockAnimationPlay(self.data.id)
        elseif self.data.puzzleType == PuzzleMonsterType.Radar then
            DataCenter.RadarBossManager:SaveBossUnlockAnimationPlay(self.data.id)
        end
        self.data.needShowUnlockAnimation = false
        self:SetItemShow(self.data)

        if self.delayTimer ~= nil then
            self.delayTimer:Stop()
            self.delayTimer = nil
        end
    end, time + 0.1)
end

local function ShowCells(self)
    self:ClearScroll()
    if self.rewardList == nil then
        return
    end
    local count = table.count(self.rewardList)
    if count > 0 then
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearCells()--清循环列表数据
    self.scroll_view:RemoveComponents(DetectEventRewardCell)--清循环列表gameObject
end

local function OnCreateCell(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.scroll_view:AddComponent(DetectEventRewardCell, itemObj)
    local rewardParam = self.rewardList[index]
    local param = DetectEventRewardCell.Param.New()
    param.rewardType = rewardParam.rewardType
    param.itemId = rewardParam.itemId
    param.count = rewardParam.count
    param.click = BindCallback(self, self.OnClickCell)
    cellItem:ReInit(param)
    cellItem:SetItemCountActive(false)
end

local function OnClickCell(self, pos)
    self:ShowRewardInfo(pos)
end

local function ShowRewardInfo(self, pos)
    if self.data.puzzleType == PuzzleMonsterType.Activity then
        local monsterData = DataCenter.ActivityPuzzleDataManager:GetPuzzleData()
        if monsterData then
            DataCenter.ActivityPuzzleDataManager:SaveBossRewardRedDot(self.data.id, monsterData.puzzleBossExpireTime)
        end
    elseif self.data.puzzleType == PuzzleMonsterType.Radar then
        DataCenter.RadarBossManager:SaveBossRewardRedDot(self.data.id)
    end
    
    self.data.showRedDot = false
    self.red_dot:SetActive(false)
    self.view:ShowRewardInfo(self.data.rewardDetailList, pos, self.data.isLeftArrow)
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, DetectEventRewardCell)
end

UIPuzzleMonsterCreateCell.ShowRewardInfo = ShowRewardInfo
UIPuzzleMonsterCreateCell.OnClickCell = OnClickCell
UIPuzzleMonsterCreateCell.OnCreate = OnCreate
UIPuzzleMonsterCreateCell.OnDestroy = OnDestroy
UIPuzzleMonsterCreateCell.SetItemShow = SetItemShow
UIPuzzleMonsterCreateCell.OnCreateClick = OnCreateClick
UIPuzzleMonsterCreateCell.ShowCells = ShowCells
UIPuzzleMonsterCreateCell.ClearScroll = ClearScroll
UIPuzzleMonsterCreateCell.OnCreateCell = OnCreateCell
UIPuzzleMonsterCreateCell.OnDeleteCell = OnDeleteCell
UIPuzzleMonsterCreateCell.playUnlockAnimation = playUnlockAnimation

return UIPuzzleMonsterCreateCell