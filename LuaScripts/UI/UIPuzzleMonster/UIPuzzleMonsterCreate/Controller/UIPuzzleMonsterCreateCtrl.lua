---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/6/8 16:28
---

local UIPuzzleMonsterCreateCtrl = BaseClass("UIPuzzleMonsterCreateCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization

function UIPuzzleMonsterCreateCtrl:CloseSelf()
    UIManager.Instance:DestroyWindow(UIWindowNames.UIPuzzleMonsterCreate)
end

function UIPuzzleMonsterCreateCtrl:GetPanelData(puzzleType)
    local result = {}
    local list = DataCenter.ActivityPuzzleMonsterTemplateManager:GetAllTemplateByType(puzzleType)
    if puzzleType == PuzzleMonsterType.Activity then
        local lockFind = false
        local monsterData = DataCenter.ActivityPuzzleDataManager:GetPuzzleData()
        local preName = ""
        if list ~= nil and monsterData ~= nil then
            table.walk(list, function (_, v)
                local data = {}
                data.name = v.name
                data.id = v.id
                data.monsterId = v.monsterId
                data.consumeType = v.consumeType
                data.consumeId = v.consumeId
                data.consumeNum = v.consumeNum
                data.consumeIcon = ""
                data.puzzleType = puzzleType
                data.isLeftArrow = data.id == 1
                local unlock, need, current = DataCenter.ActivityPuzzleDataManager:IsBossUnlock(v.id)
                data.unlock = unlock
                data.showRedDot = DataCenter.ActivityPuzzleDataManager:GetBossRewardRedDot(v.id, monsterData.puzzleBossExpireTime) and unlock
                data.unlockStr = ""
                local isAnimationPlayed = DataCenter.ActivityPuzzleDataManager:GetBossUnlockAnimationPlay(v.id)
                data.needShowUnlockAnimation = unlock and not isAnimationPlayed and need ~= 0
                if not data.unlock and not lockFind then
                    local needTemplate = DataCenter.ActivityPuzzleMonsterTemplateManager:GetTemplate(v.unlock_monster)
                    if needTemplate ~= nil then
                        data.unlockStr = Localization:GetString(GameDialogDefine.FOR_SOMEONE_PER_DAMAGE_REACH_SOMETHING_TO_UNLOCK, needTemplate:GetColorName(), need)
                    end
                    lockFind = true
                end
                preName = Localization:GetString(v.name)

                if data.consumeType == ConsumeType.ConsumeType_Resource then
                    data.consumeIcon = DataCenter.ResourceManager:GetResourceIconByType(data.consumeId)
                elseif data.consumeType == ConsumeType.ConsumeType_Item then
                    local template = DataCenter.ItemTemplateManager:GetItemTemplate(data.consumeId)
                    if template ~= nil then
                        data.consumeIcon = string.format(LoadPath.ItemPath, template.icon)
                    end
                end
                data.rewardList = v.reward_show
                data.rewardDetailList = v.reward_detail
                table.insert(result, data)
            end)
        end
    elseif puzzleType == PuzzleMonsterType.Radar then
        local lockFind = false
        local preName = ""
        if list ~= nil then
            for k, v in pairs(list) do
                local data = {}
                data.name = v.name
                data.id = v.id
                data.monsterId = v.monsterId
                data.consumeType = v.consumeType
                data.consumeId = v.consumeId
                data.consumeNum = v.consumeNum
                data.consumeIcon = ""
                data.puzzleType = puzzleType
                data.isLeftArrow = false
                local unlock, need, current = DataCenter.RadarBossManager:IsBossUnlock(v.id)
                data.unlock = unlock
                data.showRedDot = DataCenter.RadarBossManager:GetBossRewardRedDot(v.id) and unlock
                data.unlockStr = ""
                local isAnimationPlayed = DataCenter.RadarBossManager:GetBossUnlockAnimationPlay(v.id)
                data.needShowUnlockAnimation = unlock and not isAnimationPlayed and need ~= 0
                if not data.unlock and not lockFind then
                    local needTemplate = DataCenter.ActivityPuzzleMonsterTemplateManager:GetTemplate(v.unlock_monster)
                    if needTemplate ~= nil then
                        data.unlockStr = Localization:GetString(GameDialogDefine.FOR_SOMEONE_PER_DAMAGE_REACH_SOMETHING_TO_UNLOCK, needTemplate:GetColorName(), need)
                    end
                    lockFind = true
                end
                preName = Localization:GetString(v.name)

                if data.consumeType == ConsumeType.ConsumeType_Resource then
                    data.consumeIcon = DataCenter.ResourceManager:GetResourceIconByType(data.consumeId)
                elseif data.consumeType == ConsumeType.ConsumeType_Item then
                    local template = DataCenter.ItemTemplateManager:GetItemTemplate(data.consumeId)
                    if template ~= nil then
                        data.consumeIcon = string.format(LoadPath.ItemPath, template.icon)
                    end
                end
                data.rewardList = v.reward_show
                data.rewardDetailList = v.reward_detail
                table.insert(result, data)
            end
        end
    end

    return result
end

function UIPuzzleMonsterCreateCtrl:CreatePuzzleMonster(data)
    if data == nil then
        return
    end
    if data.consumeType == ConsumeType.ConsumeType_Resource then
        local num = 0

        if data.consumeId == ResourceType.Gold then
            num = LuaEntry.Player.gold
        else
            num = LuaEntry.Resource:GetCntByResType(data.consumeId)
        end
        if num == nil or num < data.consumeNum then
            local lackTab = {}
            local param = {}
            param.type = ResLackType.Res
            param.id = data.consumeId
            param.targetNum = data.consumeNum
            table.insert(lackTab,param)
            GoToResLack.GoToItemResLackList(lackTab)
            return
        end
    elseif data.consumeType == ConsumeType.ConsumeType_Item then
        if DataCenter.ItemData:GetItemCount(data.consumeId) < data.consumeNum then
            UIUtil.ShowTipsId(120020)
            return
        end
    end
    if data.puzzleType ==  PuzzleMonsterType.Activity then
        DataCenter.ActivityPuzzleDataManager:SendCreatePuzzleBoss(data.monsterId)
    elseif data.puzzleType ==  PuzzleMonsterType.Radar then
        DataCenter.RadarBossManager:SendCallRadarBoss(data.monsterId)
        DataCenter.RadarBossManager:SendGetRadarBossMarch()
    end
    self:CloseSelf()
end

return UIPuzzleMonsterCreateCtrl