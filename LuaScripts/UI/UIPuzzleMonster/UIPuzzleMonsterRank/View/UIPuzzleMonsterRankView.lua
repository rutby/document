---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/4/24 12:01
---
local UIPuzzleMonsterRankView = BaseClass("UIPuzzleMonsterRankView",UIBaseView)
local UIPuzzleMonsterRankObj = require "UI.UIPuzzleMonster.UIPuzzleMonsterRank.Component.UIPuzzleMonsterRankObj"
local UIPuzzleMonsterRewardObj = require "UI.UIPuzzleMonster.UIPuzzleMonsterRank.Component.UIPuzzleMonsterRewardObj"
local base = UIBaseView

local txt_title_path ="UICommonPopUpTitle/bg_mid/titleText"
local close_btn_path = "UICommonPopUpTitle/bg_mid/CloseBtn"
local return_btn_path = "UICommonPopUpTitle/panel"
local toggle1_path = "Tab/Toggle1"
local toggle2_path = "Tab/Toggle2"
local boss_rank_obj_path = "bossRankObj"
local boss_reward_obj_path = "bossRewardObj"


function UIPuzzleMonsterRankView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

function UIPuzzleMonsterRankView:ComponentDefine()
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.toggle1 = self:AddComponent(UIToggle, toggle1_path)
    self.toggle1.choose = self.toggle1:AddComponent(UIBaseContainer, "Choose")
    self.toggle2 = self:AddComponent(UIToggle, toggle2_path)
    self.toggle2.choose = self.toggle2:AddComponent(UIBaseContainer, "Choose")
    self.toggle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)

    self.return_btn = self:AddComponent(UIButton, return_btn_path)
    self.return_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.boss_rank_obj = self:AddComponent(UIPuzzleMonsterRankObj, boss_rank_obj_path)
    self.boss_reward_obj = self:AddComponent(UIPuzzleMonsterRewardObj, boss_reward_obj_path)
end

function UIPuzzleMonsterRankView:ComponentDestroy()
end

function UIPuzzleMonsterRankView:DataDefine()
    self.showDatalist ={}
    self.puzzleType = PuzzleMonsterType.Activity
end

function UIPuzzleMonsterRankView:DataDestroy()
    if self.puzzleType == PuzzleMonsterType.Activity then
        DataCenter.ActivityPuzzleDataManager:ResetBossRankReward()
    else
        DataCenter.RadarBossManager:ResetBossRankReward()
    end
end

function UIPuzzleMonsterRankView:OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIPuzzleMonsterRankView:OnEnable()
    base.OnEnable(self)
end

function UIPuzzleMonsterRankView:OnDisable()
    base.OnDisable(self)
end

function UIPuzzleMonsterRankView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnPuzzleMonsterRankRefresh, self.RefreshList)
end

function UIPuzzleMonsterRankView:OnRemoveListener()
    self:RemoveUIListener(EventId.OnPuzzleMonsterRankRefresh, self.RefreshList)
    base.OnRemoveListener(self)
end

function UIPuzzleMonsterRankView:ReInit()
    local uuid = self:GetUserData()
    self.uuid = tonumber(uuid)
    local radarBoss = DataCenter.RadarBossManager:GetPuzzleMarchByUuid(self.uuid)
    if radarBoss ~= nil then
        self.puzzleType = PuzzleMonsterType.Radar
    else
        self.puzzleType = PuzzleMonsterType.Activity
    end

    if self.puzzleType == PuzzleMonsterType.Activity then
        DataCenter.ActivityPuzzleDataManager:SendUserGetPuzzleBossRank(self.uuid)
    else
        DataCenter.RadarBossManager:SendUserGetRadarBossRank(self.uuid)
    end

    self.toggle1:SetIsOn(true)
    self.toggle2:SetIsOn(false)
    self:ToggleControlBorS()
end

function UIPuzzleMonsterRankView:ToggleControlBorS()
    self.toggle1.choose:SetActive(self.toggle1:GetIsOn())
    self.toggle2.choose:SetActive(self.toggle2:GetIsOn())
    self:RefreshList()
end

function UIPuzzleMonsterRankView:RefreshList()
    if self.toggle1:GetIsOn() == true then
        self.txt_title:SetLocalText(302179)
        self.boss_rank_obj:SetActive(true)
        self.boss_reward_obj:SetActive(false)
        self.boss_rank_obj:RefreshData(self.uuid, self.puzzleType)
    elseif self.toggle2:GetIsOn() == true then
        if self.puzzleType == PuzzleMonsterType.Activity then
            if DataCenter.ActivityPuzzleDataManager:GetBossRankReward() == nil then
                DataCenter.ActivityPuzzleDataManager:SendGetPuzzleBossRankRewardInfo(self.uuid)
                return
            end
        else
            if DataCenter.RadarBossManager:GetBossRankReward() == nil then
                DataCenter.RadarBossManager:SendGetRadarBossRankRewardInfo(self.uuid)
                return
            end
        end
       
        self.txt_title:SetLocalText(302181)
        self.boss_rank_obj:SetActive(false)
        self.boss_reward_obj:SetActive(true)
        self.boss_reward_obj:RefreshData(self.uuid, self.puzzleType)
    end
end

return UIPuzzleMonsterRankView