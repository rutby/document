---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/12/13 8:03
---WorldAlMinePanel_Construct.lua


local WorldAlMinePanel_Construct = BaseClass("WorldAlMinePanel_Construct", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local mineIcon_path = "layout/icon"
local mineDesc_path = "layout/desc"
local prog_path = "prog"
local needTime_path = "prog/needTime"
local progNum_path = "progNum"
local memberCount_path = "memberCount"

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end
--
---- 显示
--local function OnEnable(self)
--    base.OnEnable(self)
--end
--
---- 隐藏
--local function OnDisable(self)
--    base.OnDisable(self)
--end


--控件的定义
local function ComponentDefine(self)
    self.mineIconN = self:AddComponent(UIImage, mineIcon_path)
    self.mineDescN = self:AddComponent(UITextMeshProUGUIEx, mineDesc_path)
    self.progN = self:AddComponent(UISlider, prog_path)
    self.needTimeN = self:AddComponent(UITextMeshProUGUIEx, needTime_path)
    self.progNumN = self:AddComponent(UITextMeshProUGUIEx, progNum_path)
    self.memberCountN = self:AddComponent(UITextMeshProUGUIEx, memberCount_path)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end
end

--控件的销毁
local function ComponentDestroy(self)
    --self.mineIconN = nil
    self.mineDescN = nil
    self.progN = nil
    self.needTimeN = nil
    self.progNumN = nil
    self.memberCountN = nil
end

--变量的定义
local function DataDefine(self)
    self.pointId = nil
    self.mineInfo = nil
    self.mineTemplate = nil
end

--变量的销毁
local function DataDestroy(self)
    self.pointId = nil
    self.mineInfo = nil
    self.mineTemplate = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    --self:AddUIListener(EventId.AccountBindEvent, self.AccountBindSignal)
end


local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    --self:RemoveUIListener(EventId.AccountBindEvent, self.AccountBindSignal)
end

local function SetData(self, pointId)
    self.pointId = pointId
    self:RefreshPanel()
end

local function RefreshPanel(self)
    local detail = nil
    local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.pointId)
    if pointInfo then
        detail = DataCenter.WorldPointDetailManager:GetDetailByPointId(pointInfo.mainIndex)
    end
    if not detail then
        return
    end
    self.mineInfo = detail.alBuilding

    if not self.mineInfo then
        return
    end
    self.mineTemplate = DataCenter.AllianceMineManager:GetAllianceMineTemplate(self.mineInfo.buildId)
    if self.mineTemplate and self.mineInfo.status == AllianceMineStatus.Constructing then
        self.mineIconN:LoadSprite(self.mineTemplate:GetIconPath())
        local str = Localization:GetString("300754")
        self.mineDescN:SetText(str)
        local needT = (self.mineTemplate.resDurable - self.mineInfo.durability) / self.mineInfo.buildSpeed
        self.endTime = self.mineInfo.lastBuildTime + needT * 1000
        self:AddCountDownTimer()
        self:RefreshRemainTime()

        if not string.IsNullOrEmpty(self.mineInfo.allianceId) and self.mineInfo.allianceId == LuaEntry.Player.allianceId then
            self.memberCountN:SetActive(false)
            self.progNumN:SetActive(true)
        else
            self.progNumN:SetActive(false)
            self.memberCountN:SetActive(true)
            self.memberCountN:SetText(self.mineInfo.soldierNum)
        end
    end
end

local function AddCountDownTimer(self)

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime~=nil and remainTime > 0 then
        self.needTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
        local tempProg = self.mineInfo:GetConstructDurability() / self.mineTemplate.resDurable
        self.progN:SetValue(tempProg)
        self.progNumN:SetText(string.GetFormattedPercentStr(tempProg))
    else
        self.needTimeN:SetText("")
        self.progN:SetValue(1)
        self.progNumN:SetText("100%")
        self:DelCountDownTimer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end


WorldAlMinePanel_Construct.OnCreate = OnCreate
WorldAlMinePanel_Construct.OnDestroy = OnDestroy
WorldAlMinePanel_Construct.OnEnable = OnEnable
WorldAlMinePanel_Construct.OnDisable = OnDisable
WorldAlMinePanel_Construct.ComponentDefine = ComponentDefine
WorldAlMinePanel_Construct.ComponentDestroy = ComponentDestroy
WorldAlMinePanel_Construct.DataDefine = DataDefine
WorldAlMinePanel_Construct.DataDestroy = DataDestroy
WorldAlMinePanel_Construct.OnAddListener = OnAddListener
WorldAlMinePanel_Construct.OnRemoveListener = OnRemoveListener

WorldAlMinePanel_Construct.SetData = SetData
WorldAlMinePanel_Construct.RefreshPanel = RefreshPanel
WorldAlMinePanel_Construct.AddCountDownTimer = AddCountDownTimer
WorldAlMinePanel_Construct.RefreshRemainTime = RefreshRemainTime
WorldAlMinePanel_Construct.DelCountDownTimer = DelCountDownTimer

return WorldAlMinePanel_Construct