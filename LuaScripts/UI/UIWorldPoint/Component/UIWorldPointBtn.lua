---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/27 18:56
---
local UIWorldPointBtn = BaseClass("UIWorldPointBtn", UIBaseContainer)
local base = UIBaseContainer
local Sound = CS.GameEntry.Sound
local Localization = CS.GameEntry.Localization
local ResourceManager = CS.GameEntry.Resource
local WorldMarchEmotionCommand = require "Scene.WorldMarchEmotion.WorldMarchEmotionCommand"

local this_path = ""
local btn_image_path = "BtnImage"
local effect_path = "effect"
local btnNameBg_rect_path = "BtnImage/Rect_BtnNameBg"
local btnName_txt_path = "BtnImage/Rect_BtnNameBg/Txt_BtnName"
-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

-- 显示
local function OnEnable(self)
    base.OnEnable(self)
end

-- 隐藏
local function OnDisable(self)
    base.OnDisable(self)
end


--控件的定义
local function ComponentDefine(self)
    self.btn = self:AddComponent(UIButton, btn_image_path)
    self.btnImage = self:AddComponent(UIImage, btn_image_path)
    self.anim = self:AddComponent(UIAnimator, this_path)
    self.btn:SetOnClick(function()
        self:OnBtnClick()
    end)
    
    self._btnNameBg_rect = self:AddComponent(UIBaseContainer,btnNameBg_rect_path)
    self._btnName_txt = self:AddComponent(UITextMeshProUGUIEx,btnName_txt_path)
end

--控件的销毁
local function ComponentDestroy(self)
    self.btn = nil
    self.btnImage = nil
    self.anim = nil
end

--变量的定义
local function DataDefine(self)
    self.param = nil
end

--变量的销毁
local function DataDestroy(self)
    self.param = nil
end

-- 全部刷新
local function ReInit(self,param)
    self.param = param
    self.btnImage:LoadSprite(string.format(LoadPath.UIBuildBtns, WorldPointBtnTypeImage[param.btnType]))
    self.btnImage.transform:Set_localPosition(param.position.x, param.position.y, param.position.z)
    self:RefreshBtnName(param)
end

local function RefreshBtnName(self,param)
    self._btnNameBg_rect:SetActive(false)
    local dialog = nil
    if param.btnType == WorldPointBtnType.Missile then
        local missileInfo = DataCenter.MissileManager:GetMissileInfo(MissileIDs.ALLIANCE_FIGHT_SEND_MISSILE)
        if missileInfo then
            self._btnNameBg_rect:SetActive(true)
            local maxNum = DataCenter.MissileManager:GetMaxMissileNum()
            self._btnName_txt:SetText(missileInfo.num.."/"..maxNum)
        end
    elseif param.btnType == WorldPointBtnType.EdenAllianceMissile then
        self._btnNameBg_rect:SetActive(true)
        local curNum = DataCenter.MissileManager:GetEdenMissileUseTime()
        local maxNum = LuaEntry.DataConfig:TryGetNum("eden_alliance_missile", "k1")
        self._btnName_txt:SetText(toInt(math.max((maxNum-curNum),0)).."/"..maxNum)
    else
        dialog = WorldPointBtnName[param.btnType]
        if dialog then
            self._btnNameBg_rect:SetActive(true)
            self._btnName_txt:SetLocalText(dialog)
        end
    end
end

local function OnBtnClick(self)
    if self.param.btnType == WorldPointBtnType.AttackActBoss or self.param.btnType == WorldPointBtnType.AttackArmyCollect or self.param.btnType == WorldPointBtnType.AttackMonster
            or self.param.btnType == WorldPointBtnType.AttackBuild or self.param.btnType == WorldPointBtnType.AttackCity
            or self.param.btnType == WorldPointBtnType.AttackPuzzleBoss
            or self.param.btnType == WorldPointBtnType.ScoutArmyCollect or self.param.btnType == WorldPointBtnType.ScoutBuild
            or self.param.btnType == WorldPointBtnType.ScoutCity or self.param.btnType == WorldPointBtnType.AssistanceBuild
            or self.param.btnType == WorldPointBtnType.AttackActChallenge or self.param.btnType == WorldPointBtnType.ChallengeHelp
            or self.param.btnType == WorldPointBtnType.AttackDesert or self.param.type == WorldPointBtnType.AssistanceDesert
            or self.param.btnType == WorldPointBtnType.ScoutDesert or self.param.type == WorldPointBtnType.ScoutAllianceBuild
            or self.param.btnType == WorldPointBtnType.AttackAllianceBuild or self.param.type == WorldPointBtnType.AssistanceAllianceBuild
        or self.param.btnType == WorldPointBtnType.AssistanceDragonBuild or self.param.btnType == WorldPointBtnType.ScoutDragonBuild 
        or self.param.btnType == WorldPointBtnType.AttackDragonBuild
    then
        if CrossServerUtil:GetIsCrossServer() then
            local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.WORM_HOLE_CROSS)
            if buildData==nil then
                UIUtil.ShowTipsId(104279)
                TimerManager:GetInstance():DelayInvoke(function()
                    EventManager:GetInstance():Broadcast(EventId.ShowCreateCrossWormHole)
                end, 1.5)
                self.view.ctrl:CloseSelf()
                return
            end
        end
    end
    
    if self.param.btnType == WorldPointBtnType.AttackMonster then
        --if self.param.info.level >= 5 then
        --    --打怪维修站检测
        --    if not DataCenter.BuildManager:HasBuildByIdAndLevel(BuildingTypes.FUN_BUILD_HOSPITAL,1) then
        --        UIUtil.ShowMessage(Localization:GetString("129106"), 1, GameDialogDefine.GOTO,nil,function()
        --            GoToUtil.GotoCityByBuildId(BuildingTypes.FUN_BUILD_HOSPITAL)
        --        end,nil,nil,nil)
        --        return
        --    end
        --end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ATTACK_MONSTER)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        if LuaEntry.Effect:GetGameEffect(EffectDefine.ALLOW_ATTACK_SAME_MONSTER)<=0 then
            local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
            local count = #selfMarch
            if count > 0 then
                for i = 1, count do
                    local march = selfMarch[i]
                    if march~=nil and march:GetMarchTargetType() == MarchTargetType.ATTACK_MONSTER  and march.targetUuid ==self.view.ctrl.uuid then
                        UIUtil.ShowTipsId(131013)
                        return
                    end
                end
                
            end
        end
        local pointId = self.view.ctrl.pointId
        MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_MONSTER, pointId, self.view.ctrl.uuid,-1, MarchAutoBackType.Back)
        ----判断引导雷达怪
        --local guideDetectEvent = DataCenter.GuideDetectEventManager:GetGuideEventByPoint(pointId)
        --if guideDetectEvent ~= nil then
        --    DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.ClickAttackGuideMonster, tostring(guideDetectEvent.eventId))
        --end
    elseif self.param.btnType == WorldPointBtnType.GoBackToCity then
        SceneUtils.ChangeToCity(function()
        end)
    elseif self.param.btnType == WorldPointBtnType.City_Defence then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationDefenceTable)
    elseif self.param.btnType == WorldPointBtnType.Decoration then
        DecorationUtil.OpenDecorationPanel()
    elseif self.param.btnType == WorldPointBtnType.TransPos then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
        if #dataList>0 then
            local data = dataList[1]
            if data.startTime<=curTime and data.endTime>=curTime then
                local times = DataCenter.ActBossDataManager:GetRestTransNum()
                if times>0 then
                    local cdTime = DataCenter.ActBossDataManager:GetLastTransTime()
                    local cdDelta = LuaEntry.DataConfig:TryGetNum("ship_boss", "k10")
                    local cdEndTime = cdTime+cdDelta*1000
                    if cdEndTime<curTime then
                        local maxNum = LuaEntry.DataConfig:TryGetNum("ship_boss", "k11")
                        local msgStr = Localization:GetString("302193",Localization:GetString(self.param.info.name),(times.."/"..maxNum))
                        local maxSize = LuaEntry.DataConfig:TryGetNum("ship_boss", "k9")
                        local uuid = self.view.ctrl.uuid
                        local v2 = SceneUtils.IndexToTilePos(self.view.ctrl.pointId)
                        local x = math.random(self.param.info.size, maxSize)
                        local y = math.random(self.param.info.size, maxSize)
                        local a = math.random(1,2)
                        if a>1 then
                            x = x*1
                        else
                            x = x*(-1)
                        end
                        local b = math.random(1,2)
                        if b>1 then
                            y = y*1
                        else
                            y = y*(-1)
                        end
                        v2.x = v2.x+x
                        v2.y = v2.y+y
                        UIUtil.ShowMessage(msgStr,2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
                            MarchUtil.OnClickStartMarch(MarchTargetType.TRANSPORT_ACT_BOSS, SceneUtils.TilePosToIndex(v2),uuid ,-1,1)
                        end)
                    else
                        local deltaTime = cdEndTime - curTime
                        UIUtil.ShowTips(Localization:GetString("302191",UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime)))
                    end
                    
                else
                    UIUtil.ShowTipsId(302189)
                end
            else
                UIUtil.ShowTipsId(302190)
            end
        else
            UIUtil.ShowTipsId(302190)
        end
    elseif self.param.btnType == WorldPointBtnType.AttackActBoss then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
        if #dataList>0 then
            local data = dataList[1]
            if data.startTime<=curTime and data.endTime>=curTime then
                local pointId = self.view.ctrl.pointId
                local detail = DataCenter.WorldPointDetailManager:GetDetailByPointId(pointId)
                if detail~=nil and detail.monsterData~=nil then
                    self.param.info.startTime = detail.monsterData.actStart
                    self.param.info.endTime = detail.monsterData.actEnd
                end
                if self.param.info.startTime<=curTime and self.param.info.endTime>=curTime then
                    local times = DataCenter.ActBossDataManager:GetRestTransNum()
                    if times>0 then
                        if false then--self.param.info.curBlood ==nil or self.param.info.curBlood<=0 then
                            UIUtil.ShowTipsId(110486)
                        else
                            local maxNum = LuaEntry.DataConfig:TryGetNum("ship_boss", "k11")
                            local msgStr = Localization:GetString("302199",times,maxNum)
                            local maxSize = LuaEntry.DataConfig:TryGetNum("ship_boss", "k9")
                            local uuid = self.view.ctrl.uuid
                            local v2 = SceneUtils.IndexToTilePos(self.view.ctrl.pointId)
                            local minSize = self.param.info.size
                            --local x = math.random(self.param.info.size, maxSize)
                            --local y = math.random(self.param.info.size, maxSize)
                            local result = {}
                            for x = -maxSize ,maxSize do
                                for y =-maxSize,maxSize do
                                    local temp ={}
                                    temp.x = x
                                    temp.y= y
                                    if x*x+y*y<=maxSize*maxSize and x*x+y*y>=minSize*minSize then
                                        table.insert(result,temp)
                                    end
                                end
                            end
                            local randomIndex = math.random(1,math.max(#result,1))
                            local x = 0
                            local y = 0
                            if #result>1 then
                                local tempV2 = result[randomIndex]
                                x = tempV2.x
                                y = tempV2.y
                            end
                            local a = math.random(1,2)
                            if a>1 then
                                x = x*1
                            else
                                x = x*(-1)
                            end
                            local b = math.random(1,2)
                            if b>1 then
                                y = y*1
                            else
                                y = y*(-1)
                            end
                            v2.x = v2.x+x
                            v2.y = v2.y+y
                            MarchUtil.OnClickStartMarch(MarchTargetType.DIRECT_ATTACK_ACT_BOSS, SceneUtils.TilePosToIndex(v2),uuid ,-1,1)
                        end
                        
                    else
                        UIUtil.ShowTipsId(302202)
                    end
                else
                    UIUtil.ShowTipsId(302183)
                end
            else
                UIUtil.ShowTipsId(302190)
            end
        else
            UIUtil.ShowTipsId(302190)
        end
    elseif self.param.btnType == WorldPointBtnType.CheckActBossRank then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
        if #dataList>0 then
            local data = dataList[1]
            if data.startTime<=curTime and data.endTime>=curTime then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIWorldBossRank, self.view.ctrl.uuid, false)
            else
                UIUtil.ShowTipsId(302190)
            end
        else
            UIUtil.ShowTipsId(302190)
        end
    elseif self.param.btnType == WorldPointBtnType.AttackPuzzleBoss then
        local worldMarch = CS.SceneManager.World:GetMarch(self.view.ctrl.uuid)
        if worldMarch ~= nil then
            local flag = false
            if string.IsNullOrEmpty(worldMarch.allianceUid) or string.IsNullOrEmpty(LuaEntry.Player.allianceId) then
                if worldMarch.bossOwnerUid == nil then
                    flag = true
                elseif worldMarch.bossOwnerUid == LuaEntry.Player.uid then
                    flag = true
                end
            else
                if worldMarch.allianceUid == LuaEntry.Player.allianceId then
                    flag = true
                end
            end
            if flag == true then
                local radarBoss = DataCenter.RadarBossManager:GetPuzzleMarchByUuid(self.view.ctrl.uuid)
                if radarBoss ~= nil and (not DataCenter.RadarBossManager:CanGetReward()) then
                    local pointId = self.view.ctrl.pointId
                    local uuid = self.view.ctrl.uuid
                    UIUtil.ShowMessage(Localization:GetString(GameDialogDefine.DAILY_CAN_GET_REWARD_TIME_OUT_TIPS), 2, GameDialogDefine.CONTINUE, GameDialogDefine.CANCEL,function()
                        MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_MONSTER, pointId, uuid,-1,1)
                    end, function()
                    end)
                else
                    MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_MONSTER, self.view.ctrl.pointId, self.view.ctrl.uuid,-1,1)
                end
            else
                UIUtil.ShowTipsId(372272)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.CheckPuzzleBossRank then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if self.param.info.startTime <= curTime and self.param.info.endTime >= curTime then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIPuzzleMonsterRank, self.view.ctrl.uuid)
        else
            UIUtil.ShowTipsId(302190)
        end
    elseif self.param.btnType == WorldPointBtnType.RallyBoss then
        if CS.SceneManager:IsInCity()==false then
            local allianceuid = LuaEntry.Player.allianceId
            if allianceuid == "" then
                UIUtil.ShowTipsId(390172)
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
            else
                if self.param.info.limit and DataCenter.BuildManager.MainLv < self.param.info.limit then
                    UIUtil.ShowTips(Localization:GetString("143575", self.param.info.limit, self.param.info.level))
                    return
                end
                local point = self.view.ctrl.pointId
                local uuid = self.view.ctrl.uuid

                local selfMarchList = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
                for i, march in pairs(selfMarchList) do
                    if march:GetMarchTargetType() == MarchTargetType.RALLY_FOR_BOSS and march.targetUuid == uuid then
                        UIUtil.ShowTipsId(121601)
                        return
                    end
                end

                if not DataCenter.AllianceBaseDataManager:CheckIfNeedCheckRallyDistance() then
                    MarchUtil.OnClickStartMarch(MarchTargetType.RALLY_FOR_BOSS, point, uuid, -1,1)
                else
                    if DataCenter.AllianceBaseDataManager:CheckIfNearMember() then
                        MarchUtil.OnClickStartMarch(MarchTargetType.RALLY_FOR_BOSS, point, uuid, -1,1)
                    else
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIMoveCityTip, { anim = true }, {openType = MoveCityTipType.RallyCheck, isInviteMove = false, strTip = Localization:GetString("391098")})
                    end
                end
            end
        end
    elseif self.param.btnType == WorldPointBtnType.AttackCity then
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ATTACK_CITY)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local protectTime = 0
        local info = DataCenter.WorldPointManager:GetBuildDataByPointIndex(self.view.ctrl.pointId)
        if info~=nil then
            if info.itemId == BuildingTypes.FUN_BUILD_MAIN then
                protectTime = info.protectEndTime
            end
        end
        local curTime = UITimeManager:GetInstance():GetServerSeconds()
        if protectTime> curTime then
            UIUtil.ShowTipsId(GameDialogDefine.NO_ATTACK_OTHER_IN_PROTECT)
        else
            local targetType = MarchTargetType.ATTACK_CITY
            MarchUtil.OnClickStartMarch(targetType, self.view.ctrl.pointId, self.view.ctrl.uuid,-1,1)
        end
    elseif self.param.btnType == WorldPointBtnType.RallyCity then
        if SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.RALLY_FOR_CITY)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local allianceuid = LuaEntry.Player.allianceId
        if allianceuid == "" then
            UIUtil.ShowTipsId(390172)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
        else
            local protectTime = 0
            local info = DataCenter.WorldPointManager:GetBuildDataByPointIndex(self.view.ctrl.pointId)
            if info~=nil then
                if info.itemId == BuildingTypes.FUN_BUILD_MAIN then
                    protectTime = info.protectEndTime
                end
            end
            local curTime = UITimeManager:GetInstance():GetServerSeconds()
            if protectTime> curTime then
                UIUtil.ShowTipsId(GameDialogDefine.NO_ATTACK_OTHER_IN_PROTECT)
            else
                local targetType = MarchTargetType.RALLY_FOR_CITY
                local selfMarchList = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
                for i, march in pairs(selfMarchList) do
                    if (march:GetMarchTargetType() == targetType) and march.targetUuid == self.view.ctrl.uuid then
                        UIUtil.ShowTipsId(121601)
                        return
                    end
                end
                MarchUtil.OnClickStartMarch(targetType, self.view.ctrl.pointId, self.view.ctrl.uuid, -1,0)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.AssistanceCity then
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ASSISTANCE_CITY)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local mainLv = DataCenter.BuildManager.MainLv
        local needMainLv = LuaEntry.DataConfig:TryGetNum("assistance_open", "k1")
        if mainLv >= needMainLv then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAssistance,NormalBlurPanelAnim,self.view.ctrl.uuid,self.view.ctrl.ownerUid,self.view.ctrl.pointId,AssistanceType.MainCity)
        else
            UIUtil.ShowTips(Localization:GetString("121005", needMainLv))
        end
    elseif self.param.btnType == WorldPointBtnType.ResourceHelp then
        local serverData = self.view.ctrl:GetPlayerData(self.view.ctrl.pointId)
        if serverData~=nil then
            local uid = self.view.ctrl.ownerUid
            local userinfo = ChatInterface.getUserData(uid, true)
            if userinfo~=nil then
                local userPic = userinfo["headPic"] or ""
                local userPicVec = userinfo["headPicVer"] or 0
                local buildList = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(BuildingTypes.FUND_BUILD_ALLIANCE_CENTER)
                if buildList==nil or table.count(buildList) == 0 or buildList[1]==nil then
                    UIUtil.ShowTipsId(390836) 
                end
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIResSupport,uid,userPic, userPicVec, serverData.playerData.name, self.view.ctrl.pointId)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.ScoutCity then
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() and CrossServerUtil:GetCanAttackCity()==false then
            UIUtil.ShowTipsId(110598)
            return
        end
        local protectTime = 0
        local info = DataCenter.WorldPointManager:GetBuildDataByPointIndex(self.view.ctrl.pointId)
        if info~=nil then
            if info.itemId == BuildingTypes.FUN_BUILD_MAIN then
                protectTime = info.protectEndTime
            end
        end
        local curTime = UITimeManager:GetInstance():GetServerSeconds()
        if protectTime> curTime then
            UIUtil.ShowTipsId(110225)  
        else
            local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_RADAR_CENTER)
            if not buildData then
                UIUtil.ShowTipsId(300608) 
                self.view.ctrl:CloseSelf(true)
                return
            end
            local targetType = MarchTargetType.SCOUT_CITY
            local needConfirm,status, title , content,needBreakProtect = DataCenter.StatusManager:ShowTipForWarFever()
            if needBreakProtect ==  true then
                local tempUuid = self.view.ctrl.uuid
                local tempPointId = self.view.ctrl.pointId
                UIUtil.ShowMessage(Localization:GetString("120016"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, targetType, tempPointId, tempUuid)
                end, function()
                end)
            else
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, targetType, self.view.ctrl.pointId, self.view.ctrl.uuid)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.AttackBuild then
        if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
            local dragonInfo = DataCenter.ActDragonManager:GetDragonInfo()
            local curTime = UITimeManager:GetInstance():GetServerTime()
            local canShow = false
            if dragonInfo~=nil and dragonInfo.timeInfo~=nil then
                if dragonInfo.matchResult == 1 then    --匹配到对手
                    if dragonInfo.timeInfo.battleOpenTime~=nil and dragonInfo.timeInfo.battleOpenTime<curTime and dragonInfo.timeInfo.endTime~=nil and curTime < dragonInfo.timeInfo.endTime then
                        canShow = true
                    end
                end
            end
            if canShow ==false then
                UIUtil.ShowTipsId(376128)
                return
            end
        end
        if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.ctrl.buildId)
            if buildTemplate ~= nil and (buildTemplate.tab_type == UIBuildListTabType.SeasonBuild or BuildingUtils.IsInEdenSubwayGroup(self.ctrl.buildId)== true ) then
                UIUtil.ShowTipsId(111264)
                return
            end
        end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ATTACK_BUILDING)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local inProtect,alreadyExitOccupy = SeasonUtil.CanAttackBuild(self.view.ctrl.pointId)
        if inProtect == true then
            UIUtil.ShowTipsId(110242)
        elseif alreadyExitOccupy == false then
            UIUtil.ShowTipsId(110241)
        else
            MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_BUILDING, self.view.ctrl.pointId, self.view.ctrl.uuid,-1,0)
        end
    elseif self.param.btnType == WorldPointBtnType.DesertBuildList then
        if self.param.info.isRuin then
            UIUtil.ShowTipsId(309021)
            return
        end
    elseif self.param.btnType == WorldPointBtnType.RallyBuild then
        if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.ctrl.buildId)
            if buildTemplate ~= nil and (buildTemplate.tab_type == UIBuildListTabType.SeasonBuild or BuildingUtils.IsInEdenSubwayGroup(self.ctrl.buildId)== true ) then
                UIUtil.ShowTipsId(111264)
                return
            end
        end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.RALLY_FOR_BUILDING)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local allianceuid = LuaEntry.Player.allianceId
        if allianceuid == "" then
            UIUtil.ShowTipsId(390172)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
        else
            local inProtect,alreadyExitOccupy = SeasonUtil.CanAttackBuild(self.view.ctrl.pointId)
            if inProtect == true then
                UIUtil.ShowTipsId(110242)
            elseif alreadyExitOccupy == false then
                UIUtil.ShowTipsId(110241)
            else
                local selfMarchList = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
                for i, march in pairs(selfMarchList) do
                    if (march:GetMarchTargetType() == MarchTargetType.RALLY_FOR_BUILDING) and march.targetUuid == self.view.ctrl.uuid then
                        UIUtil.ShowTipsId(121601)
                        return
                    end
                end
                MarchUtil.OnClickStartMarch(MarchTargetType.RALLY_FOR_BUILDING, self.view.ctrl.pointId, self.view.ctrl.uuid, -1,1)
            end

        end
    elseif self.param.btnType == WorldPointBtnType.AssistanceBuild then
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ASSISTANCE_BUILD)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local mainLv = DataCenter.BuildManager.MainLv
        local needMainLv = LuaEntry.DataConfig:TryGetNum("assistance_open", "k1")
        if mainLv >= needMainLv then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAssistance,NormalBlurPanelAnim,self.view.ctrl.uuid,self.view.ctrl.ownerUid,self.view.ctrl.pointId,AssistanceType.Build)
        else
            UIUtil.ShowTips(Localization:GetString("121005", needMainLv))
        end
    elseif self.param.btnType == WorldPointBtnType.ScoutAllianceBuild then
        if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            UIUtil.ShowTipsId(111264)
            return
        end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.SCOUT_ALLIANCE_BUILDING)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_RADAR_CENTER)
        if not buildData then
            UIUtil.ShowTipsId(300608)
            self.view.ctrl:CloseSelf(true)
            return
        end
        local needConfirm,status, title , content,needBreakProtect = DataCenter.StatusManager:ShowTipForWarFever()
        if needBreakProtect ==  true then
            local pointId = self.view.ctrl.pointId
            local uuid = self.view.ctrl.uuid
            UIUtil.ShowMessage(Localization:GetString("120016"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, MarchTargetType.SCOUT_ALLIANCE_BUILDING, pointId, uuid)
            end, function()
            end)
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, MarchTargetType.SCOUT_ALLIANCE_BUILDING, self.view.ctrl.pointId, self.view.ctrl.uuid)
        end
    elseif self.param.btnType == WorldPointBtnType.AssistanceAllianceBuild then
        if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            UIUtil.ShowTipsId(111264)
            return
        end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local allianceuid = LuaEntry.Player.allianceId
        if allianceuid == "" then
            UIUtil.ShowTipsId(390172)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAssistance,NormalBlurPanelAnim,self.param.info.uuid,"",self.param.info.pointId,AssistanceType.AllianceBuild)
        end
    elseif self.param.btnType == WorldPointBtnType.FoldUpAllianceBuild then
        local uuid = self.view.ctrl.uuid
        local buildId = self.param.info.buildId
        local mineInfo = DataCenter.AllianceMineManager:GetAllianceFrontDataByBuildId(buildId)
        local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(buildId)
        if template~=nil then
            local maxNum = template.resDurable
            local curNum = 0
            if mineInfo~=nil then
                curNum = mineInfo:GetAllianceFrontDurability()
            end
            if curNum<maxNum then
                UIUtil.ShowTipsId(302737)
                return
            end
        end
        UIUtil.ShowMessage(Localization:GetString("302874"), 2, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, function()
            SFSNetwork.SendMessage(MsgDefines.WorldFoldUpAllianceBuilding, uuid)
        end)
    elseif self.param.btnType == WorldPointBtnType.DesertOperate then
        local uuid = self.view.ctrl.uuid
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIDesertOperate, { anim = true, UIMainAnim = UIMainAnimType.AllHide }, uuid)
    elseif self.param.btnType == WorldPointBtnType.RallyAllianceBuild then
        if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            UIUtil.ShowTipsId(111264)
            return
        end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.RALLY_ALLIANCE_BUILDING)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local allianceuid = LuaEntry.Player.allianceId
        if allianceuid == "" then
            UIUtil.ShowTipsId(390172)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
        else
            local inProtect,alreadyExitOccupy = SeasonUtil.CanAttackAllianceBuild(self.view.ctrl.pointId)
            if inProtect == true then
                UIUtil.ShowTipsId(110242)
            elseif alreadyExitOccupy == false then
                UIUtil.ShowTipsId(110241)
                WorldDesertSelectEffectManager:GetInstance():ShowAlBuildWarnPos(self.view.ctrl.pointId)

            else
                local selfMarchList = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
                for i, march in pairs(selfMarchList) do
                    if (march:GetMarchTargetType() == MarchTargetType.RALLY_ALLIANCE_BUILDING) and march.targetUuid == self.view.ctrl.uuid then
                        UIUtil.ShowTipsId(121601)
                        return
                    end
                end
                MarchUtil.OnClickStartMarch(MarchTargetType.RALLY_ALLIANCE_BUILDING, self.view.ctrl.pointId, self.view.ctrl.uuid, -1,1)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.AttackAllianceBuild then
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ATTACK_ALLIANCE_BUILDING)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local inProtect, alreadyExitOccupy = SeasonUtil.CanAttackAllianceBuild(self.view.ctrl.pointId)
        if inProtect == true then
            UIUtil.ShowTipsId(110242)
        elseif alreadyExitOccupy == false then
            UIUtil.ShowTipsId(110241)
            WorldDesertSelectEffectManager:GetInstance():ShowAlBuildWarnPos(self.view.ctrl.pointId)
        else
            MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_ALLIANCE_BUILDING, self.view.ctrl.pointId, self.view.ctrl.uuid, -1, 0)
        end
    elseif self.param.btnType == WorldPointBtnType.AttackDragonBuild then
        local dragonInfo = DataCenter.ActDragonManager:GetDragonInfo()
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local canShow = false
        if dragonInfo~=nil and dragonInfo.timeInfo~=nil then
            if dragonInfo.matchResult == 1 then    --匹配到对手
                if dragonInfo.timeInfo.battleOpenTime~=nil and dragonInfo.timeInfo.battleOpenTime<curTime and dragonInfo.timeInfo.endTime~=nil and curTime < dragonInfo.timeInfo.endTime then
                    canShow = true
                end
            end
        end
        if canShow ==false then
            UIUtil.ShowTipsId(376128)
            return
        end
        if self.param.info~=nil then
            if curTime<self.param.info.openTime then
                UIUtil.ShowTipsId(376115)
                return
            elseif curTime<self.param.info.protectTime then
                UIUtil.ShowTipsId(376119)
                return
            end
        end
        MarchUtil.OnClickStartMarch(MarchTargetType.TRIGGER_DRAGON_BUILDING, self.view.ctrl.pointId, self.view.ctrl.uuid, -1, 0)
    elseif self.param.btnType == WorldPointBtnType.AttackAllianceActMine then
        if LuaEntry.Player:IsInAlliance()==false then
            UIUtil.ShowTipsId(371059)
            return
        end
        local pointId = self.view.ctrl.pointId
        local uuid = self.view.ctrl.uuid
        local curValue = DataCenter.AllianceMineManager:GetActMineResNum()
        local maxValue = LuaEntry.DataConfig:TryGetNum("act_alliance_mine", "k4")
        if maxValue<=curValue then
            UIUtil.ShowMessage(Localization:GetString("374029"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_ACT_ALLIANCE_MINE, pointId, uuid, -1, 0)
            end, function()
            end)
        else
            MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_ACT_ALLIANCE_MINE, pointId, uuid, -1, 0)
        end
    elseif self.param.btnType == WorldPointBtnType.RallyAllianceActMine then
        if LuaEntry.Player:IsInAlliance()==false then
            UIUtil.ShowTipsId(371059)
            return
        end
        local allianceuid = LuaEntry.Player.allianceId
        if allianceuid == "" then
            UIUtil.ShowTipsId(390172)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
        else
            local pointId = self.view.ctrl.pointId
            local uuid = self.view.ctrl.uuid
            local curValue = DataCenter.AllianceMineManager:GetActMineResNum()
            local maxValue = LuaEntry.DataConfig:TryGetNum("act_alliance_mine", "k4")
            if maxValue<=curValue then
                UIUtil.ShowMessage(Localization:GetString("374029"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                    MarchUtil.OnClickStartMarch(MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE,pointId, uuid, -1,1)
                end, function()
                end)
            else
                local selfMarchList = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
                for i, march in pairs(selfMarchList) do
                    if (march:GetMarchTargetType() == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE) and march.targetUuid == self.view.ctrl.uuid then
                        UIUtil.ShowTipsId(121601)
                        return
                    end
                end
                MarchUtil.OnClickStartMarch(MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE,pointId, uuid, -1,1)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.ScoutAllianceActMine then
        if LuaEntry.Player:IsInAlliance()==false then
            UIUtil.ShowTipsId(371059)
            return
        end
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_RADAR_CENTER)
        if not buildData then
            UIUtil.ShowTipsId(300608)
            self.view.ctrl:CloseSelf(true)
            return
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, MarchTargetType.SCOUT_ACT_ALLIANCE_MINE, self.view.ctrl.pointId, self.view.ctrl.uuid)
    elseif self.param.btnType == WorldPointBtnType.ScoutDragonBuild then
        if LuaEntry.Player:IsInAlliance()==false then
            UIUtil.ShowTipsId(371059)
            return
        end
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_RADAR_CENTER)
        if not buildData then
            UIUtil.ShowTipsId(300608)
            self.view.ctrl:CloseSelf(true)
            return
        end
        local dragonInfo = DataCenter.ActDragonManager:GetDragonInfo()
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local canShow = false
        if dragonInfo~=nil and dragonInfo.timeInfo~=nil then
            if dragonInfo.matchResult == 1 then    --匹配到对手
                if dragonInfo.timeInfo.battleOpenTime~=nil and dragonInfo.timeInfo.battleOpenTime<curTime and dragonInfo.timeInfo.endTime~=nil and curTime < dragonInfo.timeInfo.endTime then
                    canShow = true
                end
            end
        end
        if canShow ==false then
            UIUtil.ShowTipsId(376128)
            return
        end
        if self.param.info~=nil then
            if curTime<self.param.info.openTime then
                UIUtil.ShowTipsId(376115)
                return
            elseif curTime<self.param.info.protectTime then
                UIUtil.ShowTipsId(376119)
                return
            end
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, MarchTargetType.SCOUT_DRAGON_BUILDING, self.view.ctrl.pointId, self.view.ctrl.uuid)
    elseif self.param.btnType == WorldPointBtnType.AssistanceDragonBuild then
        local mainLv = DataCenter.BuildManager.MainLv
        local needMainLv = LuaEntry.DataConfig:TryGetNum("assistance_open", "k1")
        if mainLv >= needMainLv then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAssistance,NormalBlurPanelAnim,self.view.ctrl.uuid,self.view.ctrl.ownerUid,self.view.ctrl.pointId,AssistanceType.DragonBuilding)
        else
            UIUtil.ShowTips(Localization:GetString("121005", needMainLv))
        end
    elseif self.param.btnType == WorldPointBtnType.GetSecretKey then
        local buildId = self.param.info.buildId
        if buildId == DragonBuildingTypes.DragonCenterBuild then
            local startTime = self.param.info.startTime
            local state = self.param.info.state
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if state ==1 or state ==2 then
                MarchUtil.OnClickStartMarch(MarchTargetType.TAKE_SECRET_KEY, self.view.ctrl.pointId, self.view.ctrl.uuid, -1, 0)
            else
                if curTime<self.param.info.openTime then
                    UIUtil.ShowTipsId(376114)
                elseif curTime<self.param.info.startTime then
                    UIUtil.ShowTipsId(376116)
                else
                    UIUtil.ShowTipsId(376117)
                end
                
            end
        else
            MarchUtil.OnClickStartMarch(MarchTargetType.PICK_SECRET_KEY, self.view.ctrl.pointId, self.view.ctrl.uuid, -1, 0)
        end
    elseif self.param.btnType == WorldPointBtnType.AssistanceDesert then
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ASSISTANCE_DESERT)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local mainLv = DataCenter.BuildManager.MainLv
        local needMainLv = LuaEntry.DataConfig:TryGetNum("assistance_open", "k1")
        if mainLv >= needMainLv then
            local worldTileInfo = CS.SceneManager.World:GetWorldTileInfo(self.view.ctrl.pointId)
            if worldTileInfo~=nil then
                local desertInfo = worldTileInfo:GetWorldDesertInfo()
                if desertInfo~=nil then
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAssistance,NormalBlurPanelAnim,self.view.ctrl.uuid,self.view.ctrl.ownerUid,self.view.ctrl.pointId,AssistanceType.Desert)
                end
            end
        else
            UIUtil.ShowTips(Localization:GetString("121005", needMainLv))
        end
    elseif self.param.btnType == WorldPointBtnType.CheckDesert then
        local ownerUid = ""
        local isAlliance = 0
        local worldTileInfo = CS.SceneManager.World:GetWorldTileInfo(self.view.ctrl.pointId)
        local desertId = 0
        local uuid = 0
        if worldTileInfo~=nil then
            local desertInfo = worldTileInfo:GetWorldDesertInfo()
            if desertInfo~=nil then
                ownerUid = desertInfo.ownerUid
                local allianceId = desertInfo.allianceId
                if allianceId ~= "" and allianceId == LuaEntry.Player.allianceId then
                    isAlliance = 1
                end
                desertId = desertInfo.desertId
                uuid =desertInfo.uuid
            end
        end
        local str = uuid..";"..self.view.ctrl.pointId..";"..ownerUid..";"..WorldPointUIType.Desert..";"..isAlliance..";".."0"..";".."0"..desertId
        EventManager:GetInstance():Broadcast(EventId.RefreshUIWorldPointView,str)
        return
    elseif self.param.btnType == WorldPointBtnType.ScoutBuild then
        if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.ctrl.buildId)
            if buildTemplate ~= nil and (buildTemplate.tab_type == UIBuildListTabType.SeasonBuild or BuildingUtils.IsInEdenSubwayGroup(self.ctrl.buildId)== true ) then
                UIUtil.ShowTipsId(111264)
                return
            end
        end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.SCOUT_BUILDING)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_RADAR_CENTER)
        if not buildData then
            UIUtil.ShowTipsId(300608) 
            self.view.ctrl:CloseSelf(true)
            return
        end
        local needConfirm,status, title , content,needBreakProtect = DataCenter.StatusManager:ShowTipForWarFever()
        if needBreakProtect ==  true then
            local pointId = self.view.ctrl.pointId
            local uuid = self.view.ctrl.uuid
            UIUtil.ShowMessage(Localization:GetString("120016"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, MarchTargetType.SCOUT_BUILDING, pointId, uuid)
            end, function()
            end)
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, MarchTargetType.SCOUT_BUILDING, self.view.ctrl.pointId, self.view.ctrl.uuid)
        end
    elseif self.param.btnType == WorldPointBtnType.AttackDesert then
        if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            UIUtil.ShowTipsId(111264)
            return
        end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ATTACK_DESERT)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local season = SeasonUtil.GetSeason()
        local isSwitchOn = LuaEntry.DataConfig:CheckSwitch("season_over")
        if isSwitchOn then
            if CrossServerUtil:GetIsCrossServer() ==false then
                local curStage, endTime = DataCenter.RobotWarsManager:GetCurStage()
                if  curStage == SeasonStage.ToFinish or curStage == SeasonStage.Finished then
                    UIUtil.ShowTipsId(110977)
                    return
                end
            else
                local serverId = LuaEntry.Player:GetCurServerId()
                local settleTime = DataCenter.AccountManager:GetSeasonSettleTimeByServerId(serverId)
                if settleTime>0 then
                    local curTime = UITimeManager:GetInstance():GetServerTime()
                    if curTime>settleTime then
                        UIUtil.ShowTipsId(110977)
                        return
                    end
                end
            end
            
        end
        if season ~= nil and CrossServerUtil:GetIsCrossServer()== false then
            DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.ClickAttackDesert, tostring(season))
        end
        if DataCenter.DesertDataManager:CheckMyDesertNumIsFull() == true then
            local lackTab = {}
            local param = {}
            param.type = ResLackType.DesertNum
            table.insert(lackTab, param)
            GoToResLack.GoToItemResLackList(lackTab)
        else
            local inProtect = SeasonUtil.IsDesertInProtect(self.view.ctrl.pointId)
            if inProtect == true then
                UIUtil.ShowTipsId(110242)
            else
                local rangeList = BuildingUtils.GetBuildRoundPos(SceneUtils.IndexToTilePos(self.view.ctrl.pointId,ForceChangeScene.World),1)
                local alreadyExitOccupy = false
                for i=1,#rangeList do
                    if alreadyExitOccupy == false then
                        local v2 = rangeList[i]
                        alreadyExitOccupy = SeasonUtil.IsDesertOccupy(SceneUtils.TilePosToIndex(v2,ForceChangeScene.World))
                    end
                end
                if alreadyExitOccupy == true then
                    local percent = LuaEntry.DataConfig:TryGetNum("season1_desert", "k4")
                    if self.param.info.selfPercent <= -percent then
                        -- 跳转
                        local lackTab = {}
                        local param = {}
                        param.type = ResLackType.Percent
                        table.insert(lackTab, param)
                        local resList,dis = GoToResLack.GoToItemResLackList(lackTab,true)
                        if resList and table.count(resList[1]) > 0 then
                            GoToResLack.GotoOpenView(UIWindowNames.UIDesertPercent,{anim = true},resList,self.view.ctrl.pointId,MarchTargetType.ATTACK_DESERT)
                        else
                            MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_DESERT, self.view.ctrl.pointId,self.view.ctrl.pointId,-1,0)
                        end
                    else
                        MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_DESERT, self.view.ctrl.pointId,self.view.ctrl.pointId,-1,0)
                    end
                else
                    UIUtil.ShowTipsId(110241)
                    WorldDesertSelectEffectManager:GetInstance():ShowWarnPos(self.view.ctrl.pointId)
                    if season ~= nil then
                        DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.ClickNoConnectAttackDesert, tostring(season))
                    end
                    return
                    --if CrossServerUtil:GetIsCrossServer()== true or DataCenter.WorldAllianceCityDataManager:GetAllianceAlreadyHaveCity(LuaEntry.Player.allianceId)==true then
                    --    UIUtil.ShowTipsId(110241)
                    --    WorldDesertSelectEffectManager:GetInstance():ShowWarnPos(self.view.ctrl.pointId)
                    --    if season ~= nil then
                    --        DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.ClickNoConnectAttackDesert, tostring(season))
                    --    end
                    --    return
                    --elseif LuaEntry.Player:IsInAlliance() and not DataCenter.GuideManager:InGuide() then
                    --    UIUtil.ShowMessage(Localization:GetString("110243"), 1, "110003", "", function()
                    --        local template = DataCenter.AllianceCityTemplateManager:GetAllTemplate()
                    --        local buildList = {}
                    --        for i, v in pairs(template) do
                    --            local distance = math.ceil(SceneUtils.TileDistance(v.pos, SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)))
                    --            if v.level == 1 then
                    --                local cityData = DataCenter.WorldAllianceCityDataManager:GetAllianceCityDataByCityId(tonumber(i))
                    --                if cityData == nil then
                    --                    local param = {}
                    --                    param.distance = distance
                    --                    param.pos = v.pos
                    --                    param.id = i
                    --                    table.insert(buildList,param)
                    --                end
                    --            end
                    --        end
                    --        if #buildList>0 then
                    --            table.sort(buildList, function(a,b)
                    --                if a.distance < b.distance then
                    --                    return true
                    --                end
                    --                return false
                    --            end)
                    --            GoToUtil.CloseAllWindows()
                    --            local pointIndex = SceneUtils.TilePosToIndex(buildList[1].pos, ForceChangeScene.World)
                    --            local worldPos = SceneUtils.TileIndexToWorld(pointIndex, ForceChangeScene.World)
                    --            worldPos.x = worldPos.x - 6
                    --            worldPos.z = worldPos.z - 6
                    --            pointIndex = SceneUtils.WorldToTileIndex(worldPos, ForceChangeScene.World)
                    --            GoToUtil.GotoWorldPos(worldPos, CS.SceneManager.World.InitZoom,LookAtFocusTime, function()
                    --                UIManager:GetInstance():OpenWindow(UIWindowNames.UIWorldSiegePoint,buildList[1].id,pointIndex)
                    --            end)
                    --        else
                    --            UIUtil.ShowTips(Localization:GetString("372182",1))
                    --        end
                    --    end)
                    --else
                    --    UIUtil.ShowTipsId(GameDialogDefine.NO_JOIN_ALLIANCE)
                    --end
                end
            end
            
        end

    elseif self.param.btnType == WorldPointBtnType.TrainDesert then
        local isSwitchOn = LuaEntry.DataConfig:CheckSwitch("season_over")
        if isSwitchOn then
            if CrossServerUtil:GetIsCrossServer() ==false then
                local curStage, endTime = DataCenter.RobotWarsManager:GetCurStage()
                if  curStage == SeasonStage.ToFinish or curStage == SeasonStage.Finished then
                    UIUtil.ShowTipsId(110978)
                    return
                end
            else
                local serverId = LuaEntry.Player:GetCurServerId()
                local settleTime = DataCenter.AccountManager:GetSeasonSettleTimeByServerId(serverId)
                if settleTime>0 then
                    local curTime = UITimeManager:GetInstance():GetServerTime()
                    if curTime>settleTime then
                        UIUtil.ShowTipsId(110978)
                        return
                    end
                end
            end

        end
        
        local percent = LuaEntry.DataConfig:TryGetNum("season1_desert", "k4")
        if self.param.info.selfPercent <= -percent then
            -- 跳转
            local lackTab = {}
            local param = {}
            param.type = ResLackType.Percent
            table.insert(lackTab, param)
            local resList,dis = GoToResLack.GoToItemResLackList(lackTab,true)
            if resList and table.count(resList[1]) > 0 then
                GoToResLack.GotoOpenView(UIWindowNames.UIDesertPercent,{anim = true},resList,self.view.ctrl.pointId,MarchTargetType.TRAIN_DESERT)
            else
                MarchUtil.OnClickStartMarch(MarchTargetType.TRAIN_DESERT, self.view.ctrl.pointId,self.view.ctrl.pointId,-1,0)
            end
        else
            MarchUtil.OnClickStartMarch(MarchTargetType.TRAIN_DESERT, self.view.ctrl.pointId,self.view.ctrl.pointId,-1,0)
        end

    elseif self.param.btnType == WorldPointBtnType.ScoutDesert then
        if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            UIUtil.ShowTipsId(111264)
            return
        end
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.SCOUT_DESERT)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local showDesert = false
        local pointIndex = self.view.ctrl.pointId
        local worldTileInfo = CS.SceneManager.World:GetWorldTileInfo(pointIndex)
        if worldTileInfo~=nil then
            local desertInfo = worldTileInfo:GetWorldDesertInfo()
            if desertInfo~=nil then
                local playerType = desertInfo:GetPlayerType()
                if playerType ~= CS.PlayerType.PlayerNone then
                    showDesert = true
                end
            end
        end
        local needConfirm,status, title , content,needBreakProtect = DataCenter.StatusManager:ShowTipForWarFever()
        if needBreakProtect ==  true and showDesert then
            UIUtil.ShowMessage(Localization:GetString("120016"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2,MarchTargetType.SCOUT_DESERT, pointIndex,pointIndex)
            end, function()
            end)
            return
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2,MarchTargetType.SCOUT_DESERT, self.view.ctrl.pointId,self.view.ctrl.pointId)
        end
        
    elseif self.param.btnType == WorldPointBtnType.GiveUpDesert then
        if self.view.ctrl.uuid~=nil and self.view.ctrl.uuid~=0 then
            local serverId = LuaEntry.Player:GetSelfServerId()
            if self.param.info~=nil and self.param.info.serverId>0 then
                serverId = self.param.info.serverId
            end
            local showFlag = Setting:GetPrivateInt("SHOW_GiveUpWarning", 0)
            if showFlag<=0 then
                local name = ""
                if self.param.info~=nil and self.param.info.level>0 then
                    name = Localization:GetString(self.param.info.name,self.param.info.level)
                else
                    name =Localization:GetString("110245")
                end
                local battleFightV2Pt = SceneUtils.IndexToTilePos(self.view.ctrl.pointId,ForceChangeScene.World)
                local strBattlePt = " (" .. tostring(battleFightV2Pt.x) .. ", " .. tostring(battleFightV2Pt.y) .. ")"
                local str = Localization:GetString("110239",name,strBattlePt)
                local uuid = self.view.ctrl.uuid
                UIUtil.ShowSecondMessage(Localization:GetString("100378"), str, 2, "", "", function()
                    SFSNetwork.SendMessage(MsgDefines.UserGiveUpDesert,uuid,serverId)
                end, function(needSellConfirm)
                    if needSellConfirm== false then
                        Setting:SetPrivateInt("SHOW_GiveUpWarning",1)
                    else
                        Setting:SetPrivateInt("SHOW_GiveUpWarning",0)
                    end
                end)
            else
                SFSNetwork.SendMessage(MsgDefines.UserGiveUpDesert,self.view.ctrl.uuid,serverId)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.CancelGiveUpDesert then
        if self.view.ctrl.uuid~=nil and self.view.ctrl.uuid~=0 then
            local serverId = LuaEntry.Player:GetSelfServerId()
            if self.param.info~=nil and self.param.info.serverId>0 then
                serverId = self.param.info.serverId
            end
            SFSNetwork.SendMessage(MsgDefines.UserCancelGiveUpDesert,self.view.ctrl.uuid,serverId)
        end
    elseif self.param.btnType == WorldPointBtnType.Collect or self.param.btnType == WorldPointBtnType.AllianceCollect then
        if not MarchUtil.CheckFormationUnlock(1)
                and  not MarchUtil.CheckFormationUnlock(2)
                and  not MarchUtil.CheckFormationUnlock(3)
                and  not MarchUtil.CheckFormationUnlock(4) then
            UIUtil.ShowTipsId(129042)
            return
        else
            local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
            local count = #selfMarch
            if count > 0 then
                for i = 1, count do
                    if selfMarch[i]:GetMarchTargetType() == MarchTargetType.COLLECT then
                        local info = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(selfMarch[i].targetPos)
                        if info~=nil and info.id == self.view.ctrl.pointId then
                            self.isHaveOwnerMarche = true
                        end
                    end
                end
            end
            if self.isHaveOwnerMarche then
                UIUtil.ShowTipsId(129004) 
            else
				--矿内只允许有一个人采集
				local info = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(self.param.info.pointId)
				if info~=nil then
					--没人
					if info.gatherMarchUuid == 0 then
                        local resourceType = GetTableData(TableName.GatherResource,self.param.info.id,"resource_type")
                        local itemId = GetTableData(TableName.GatherResource,self.param.info.id,"param")
                        local state = MarchUtil.GetResourcePointUnlockStateByType(tonumber(resourceType), itemId)
                        if state == 0 then
                            local scienceId = GetTableData(TableName.GatherResource,self.param.info.id,"unlock_science")
                            if scienceId ~= "" and not DataCenter.ScienceManager:HasScienceByIdAndLevel(scienceId,1) then
                                local template = DataCenter.ScienceTemplateManager:GetScienceTemplate(scienceId,1)
                                UIManager:GetInstance():OpenWindow(UIWindowNames.UIWorldCollectMessageTip,Localization:GetString("129055",Localization:GetString(template.name),Localization:GetString(GetTableData(TableName.GatherResource,info.id,"name"))),1,GameDialogDefine.GOTO,nil,function()
                                    GoToUtil.GotoScience(scienceId) end,nil)
                            end
                        else
                            if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
                                local dragonInfo = DataCenter.ActDragonManager:GetDragonInfo()
                                local curTime = UITimeManager:GetInstance():GetServerTime()
                                local canShow = false
                                if dragonInfo~=nil and dragonInfo.timeInfo~=nil then
                                    if dragonInfo.matchResult == 1 then    --匹配到对手
                                        if dragonInfo.timeInfo.battleOpenTime~=nil and dragonInfo.timeInfo.battleOpenTime<curTime and dragonInfo.timeInfo.endTime~=nil and curTime < dragonInfo.timeInfo.endTime then
                                            canShow = true
                                        end
                                    end
                                end
                                if canShow ==false then
                                    UIUtil.ShowTipsId(376128)
                                    return
                                end
                            end
                            
                            MarchUtil.OnClickStartMarch(MarchTargetType.COLLECT,self.param.info.pointId)
                        end
					else
						UIUtil.ShowTipsId(129004)
					end
				end
            end

        end
    elseif self.param.btnType == WorldPointBtnType.AttackArmyCollect then
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.ATTACK_ARMY_COLLECT)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_ARMY_COLLECT, self.view.ctrl.pointId,self.view.ctrl.uuid)
    elseif self.param.btnType == WorldPointBtnType.ScoutArmyCollect then
        if  SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() then
            local state,dialog = CrossServerUtil.CheckCanUseInDeclareWarTarget(MarchTargetType.SCOUT_ARMY_COLLECT)
            if state ==false then
                UIUtil.ShowTipsId(dialog)
                return
            end
        end
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_RADAR_CENTER)
        if not buildData then
            UIUtil.ShowTipsId(300608) 
            self.view.ctrl:CloseSelf(true)
            return
        end
        local needConfirm,status, title , content,needBreakProtect = DataCenter.StatusManager:ShowTipForWarFever()
        if needBreakProtect ==  true then
            local pointId = self.view.ctrl.pointId
            local uuid = self.view.ctrl.uuid
            UIUtil.ShowMessage(Localization:GetString("120016"), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, MarchTargetType.SCOUT_ARMY_COLLECT, pointId, uuid)
            end, function()
            end)
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationSelectListNew,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, 2, MarchTargetType.SCOUT_ARMY_COLLECT, self.view.ctrl.pointId, self.view.ctrl.uuid)
        end
    elseif self.param.btnType == WorldPointBtnType.Search then
        if CrossServerUtil:GetIsCrossServer() then
            local str = Localization:GetString(128008, DataCenter.MonsterManager:GetCurCanAttackMaxLevel())
            UIUtil.ShowTips(str)
        else
            local lv = DataCenter.MonsterManager:GetCurCanAttackMaxLevel()
            GoToUtil.GotoOpenView(UIWindowNames.UISearch,UISearchType.Monster,lv -1)
        end
        return
    elseif self.param.btnType == WorldPointBtnType.CallBack then
        MarchUtil.OnBackHome(self.view.ctrl.uuid)
    elseif self.param.btnType == WorldPointBtnType.AllianceMineCallback then
        local hasMarch, marchInfo = DataCenter.AllianceMineManager:CheckIfHasMarch(self.param.info.pointId)
        if hasMarch == true and marchInfo~=nil then
            MarchUtil.OnBackHome(marchInfo.uuid)
        end
    elseif self.param.btnType == WorldPointBtnType.AllianceMineDetail then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceBuildingCollect, self.param.info.pointId,self.param.info.uuid)
    elseif self.param.btnType == WorldPointBtnType.AllianceActMineDetail then
        if self.param.info~=nil and self.param.info.state == AllianceMineStatus.Ruin then
            UIUtil.ShowTipsId(374022)
            return
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceBuildingCollect, self.param.info.pointId,self.param.info.uuid)
    elseif self.param.btnType == WorldPointBtnType.ReBuildAllianceRuin then
        if not DataCenter.AllianceBaseDataManager:IsR4orR5() then
            UIUtil.ShowTipsId(300752)
            return
        end
        SFSNetwork.SendMessage(MsgDefines.WorldFixAllianceBuilding,self.param.info.uuid)
    elseif self.param.btnType == WorldPointBtnType.BuildAllianceCenter then
        if not DataCenter.AllianceBaseDataManager:IsR4orR5() then
            UIUtil.ShowTipsId(300752)
            return
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceCity,{ anim = true, isBlur = true }, 4,self.param.info.pointId)
    elseif self.param.btnType == WorldPointBtnType.AllianceMine_Construct then
        if not MarchUtil.CheckFormationUnlock(1)
                and  not MarchUtil.CheckFormationUnlock(2)
                and  not MarchUtil.CheckFormationUnlock(3)
                and  not MarchUtil.CheckFormationUnlock(4) then
            UIUtil.ShowTipsId(129042)
            return
        else
            local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
            local count = #selfMarch
            if count > 0 then
                for i = 1, count do
                    if selfMarch[i]:GetMarchTargetType() == MarchTargetType.BUILD_ALLIANCE_BUILDING then
                        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(selfMarch[i].targetUuid)
                        if info~=nil then
                            self.isHaveOwnerMarche = true
                        end
                    end
                end
            end
            if self.isHaveOwnerMarche then
                UIUtil.ShowTipsId(300789)
            else
                local alMineMax = DataCenter.AllianceMineManager:GetAllianceMineSlotCountForConstruct(self.param.info.uuid)
                if alMineMax<=0 then
                    UIUtil.ShowTipsId(300791)
                else
                    MarchUtil.OnClickStartMarch(MarchTargetType.BUILD_ALLIANCE_BUILDING,self.param.info.pointId, self.param.info.uuid)
                end
                
            end
        end
        
    elseif self.param.btnType == WorldPointBtnType.AllianceMine_Collect then
        if not MarchUtil.CheckFormationUnlock(1)
                and  not MarchUtil.CheckFormationUnlock(2)
                and  not MarchUtil.CheckFormationUnlock(3)
                and  not MarchUtil.CheckFormationUnlock(4) then
            UIUtil.ShowTipsId(129042)
            return
        else
            local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
            local count = #selfMarch
            if count > 0 then
                for i = 1, count do
                    if selfMarch[i]:GetMarchTargetType() == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE then
                        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(selfMarch[i].targetUuid)
                        if info~=nil then
                            self.isHaveOwnerMarche = true
                        end
                    end
                end
            end
            if self.isHaveOwnerMarche then
                UIUtil.ShowTipsId(129004)
            else
                MarchUtil.OnClickStartMarch(MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE,self.param.info.pointId, self.param.info.uuid)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.AllianceActMine_Collect then
        if not MarchUtil.CheckFormationUnlock(1)
                and  not MarchUtil.CheckFormationUnlock(2)
                and  not MarchUtil.CheckFormationUnlock(3)
                and  not MarchUtil.CheckFormationUnlock(4) then
            UIUtil.ShowTipsId(129042)
            return
        else
            local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
            local count = #selfMarch
            if count > 0 then
                for i = 1, count do
                    if selfMarch[i]:GetMarchTargetType() == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE then
                        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(selfMarch[i].targetUuid)
                        if info~=nil then
                            self.isHaveOwnerMarche = true
                        end
                    end
                end
            end
            if self.isHaveOwnerMarche then
                UIUtil.ShowTipsId(129004)
            else
                MarchUtil.OnClickStartMarch(MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE,self.param.info.pointId, self.param.info.uuid)
            end
        end

    elseif self.param.btnType == WorldPointBtnType.Detail then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationTableNew,self.param.info.formationUuid,-1,-1,0,-1,1,0,nil,0,nil,nil,1)
    elseif self.param.btnType == WorldPointBtnType.Explore then
        local detectEventData = DataCenter.RadarCenterDataManager:GetDetectEventInfo(self.param.info.uuid)
        if detectEventData ~= nil then
            local config = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(detectEventData.eventId)
            if config ~= nil and (((config:getValue("type") == DetectEventType.SPECIAL_OPS) and not string.IsNullOrEmpty(config:getValue("para2"))) or ((config:getValue("type") == DetectEventType.DetectEventPVE or config:getValue("type") == DetectEventType.HeroTrial) and not string.IsNullOrEmpty(config:getValue("para2")))) then
                local k9 = LuaEntry.DataConfig:TryGetNum("car_action_stamina", "k9")
                local own = LuaEntry.Player:GetCurStamina()
                if own < k9 then
                    --UIUtil.ShowTipsId(GameDialogDefine.STAMINA_IS_NOT_ENOUGH)
                    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAddStamina)
                    local lackTab = {}
                    local param = {}
                    param.type = ResLackType.Res
                    param.id = ResourceType.FORMATION_STAMINA
                    local maxNum = LuaEntry.Player:GetMaxPveStamina()
                    if maxNum > 0 then
                        maxNum = Mathf.Floor(maxNum)
                    end
                    param.targetNum = maxNum
                    table.insert(lackTab,param)
                    GoToResLack.GoToItemResLackList(lackTab)
                else
                    local param = {}
                    param.pveEntrance = PveEntrance.DetectEventPve
                    param.levelId = toInt(config:getValue("para2"))
                    param.uuid = self.param.info.uuid
                    self.view.ctrl:CloseSelf(false)
                    Logger.Log("UIWorldPointBtn StartPve|", param.levelId)
                    DataCenter.BattleLevel:Enter(param)
                end
                
                return
            end
        end

        MarchUtil.OnClickStartMarch(MarchTargetType.EXPLORE, self.view.ctrl.pointId, self.view.ctrl.uuid, -1, 1)
    elseif self.param.btnType == WorldPointBtnType.Sample then
        local detectEventData = DataCenter.RadarCenterDataManager:GetDetectEventInfo(self.param.info.uuid)
        if detectEventData ~= nil then
            local config = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(detectEventData.eventId)
            if config ~= nil and config:getValue("type") == DetectEventType.DetectEventPickGarbage then
                local k10 = LuaEntry.DataConfig:TryGetNum("car_action_stamina", "k10")
                local own = LuaEntry.Player:GetCurStamina()
                if own < k10 then
                    --UIUtil.ShowTipsId(GameDialogDefine.STAMINA_IS_NOT_ENOUGH)
                    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAddStamina)
                    local lackTab = {}
                    local param = {}
                    param.type = ResLackType.Res
                    param.id = ResourceType.FORMATION_STAMINA
                    local maxNum = LuaEntry.Player:GetMaxPveStamina()
                    if maxNum > 0 then
                        maxNum = Mathf.Floor(maxNum)
                    end
                    param.targetNum = maxNum
                    table.insert(lackTab,param)
                    GoToResLack.GoToItemResLackList(lackTab)
                else
                    DataCenter.RadarCenterDataManager:AddToFakeGarbageMarchManager(self.view.ctrl.pointId)
                    self.view.ctrl:CloseSelf(false)
                end
                return
            end
        end

        MarchUtil.OnClickStartMarch(MarchTargetType.SAMPLE, self.view.ctrl.pointId, self.view.ctrl.uuid, -1, 1)
    elseif self.param.btnType == WorldPointBtnType.PickGarbage then
        local k8 = LuaEntry.DataConfig:TryGetNum("car_action_stamina", "k8")
        local own = LuaEntry.Player:GetCurStamina()
        if own < k8 then
            --UIUtil.ShowTipsId(GameDialogDefine.STAMINA_IS_NOT_ENOUGH)
            GoToResLack.GotoAddStamina(k8)
        else
            DataCenter.FakeCollectGarbageMarchManager:AddMarchIndex(self.view.ctrl.pointId)
            self.view.ctrl:CloseSelf(false)
        end
        return
    elseif self.param.btnType == WorldPointBtnType.DispatchTask
            or self.param.btnType == WorldPointBtnType.DispatchTaskHelp
            or self.param.btnType == WorldPointBtnType.DispatchTaskSteal then
        UIUtil.OnDispatchTaskClick(self.view.ctrl.pointId,function(isSelf,finishTime,uuid)
            if isSelf and finishTime == 0 then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationDispatchTask,uuid)
            else
                UIUtil.ShowTipsId(461024) -- 当前据点还没有完成探索，请稍后再来！
            end
        end)
    elseif self.param.btnType == WorldPointBtnType.SingleMapGarbage then
        if CS.SceneManager:IsInCity() then
            self.view.ctrl:CloseSelf(false)
            return
        end
    elseif self.param.btnType == WorldPointBtnType.GetReward then
        EventManager:GetInstance():Broadcast(EventId.ShowCapacity)
        local data = self.view.ctrl:GetMonsterRewardData(self.view.ctrl.uuid)
        if data ~= nil then
            DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.MonsterGetReward,tostring(data.monsterId))
        end
    elseif self.param.btnType == WorldPointBtnType.AttackActChallenge then
        --是不是我自己的怪
        if self.param.info.bossOwnerUid == LuaEntry.Player.uid then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if curTime > self.param.info.refreshTime then
                UIUtil.ShowTipsId(390843)
            else
                MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_MONSTER,self.view.ctrl.pointId, self.view.ctrl.uuid,-1,1)
            end
        else
            --是不是我盟友的怪
            if self.param.info.allianceUid == LuaEntry.Player.allianceId then
                --是否请求过帮助
                if self.param.info.callHelp == 1 then
                    local curTime = UITimeManager:GetInstance():GetServerTime()
                    if curTime > self.param.info.refreshTime then
                        UIUtil.ShowTipsId(390843)
                    else
                        MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_MONSTER,self.view.ctrl.pointId, self.view.ctrl.uuid,-1,1)
                    end
                else
                    --没有请求过帮助
                    UIUtil.ShowTipsId(372436)
                end
            else
                UIUtil.ShowTipsId(372436)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.ChallengeHelp then
        if self.param.info.bossOwnerUid == LuaEntry.Player.uid then
            if LuaEntry.Player.allianceId == "" then
                GoToUtil.GotoOpenView(UIWindowNames.UIAllianceIntro,{ anim = true,isBlur = true})
                return UIUtil.ShowTipsId(GameDialogDefine.NO_JOIN_ALLIANCE)
            end
        else
            UIUtil.ShowTipsId(372436)
            return
        end
        local actList = DataCenter.ActMonsterTowerData:GetInfoActAll()
        local actInfo = nil
        if actList then
            for i ,v in pairs(actList) do
                if v.challengeBoss.pointId == self.param.info.point then
                    actInfo = v
                    break
                end
            end
        end
        if actInfo then
            if actInfo.challengeBoss.callHelp == 1 then
                UIUtil.ShowTipsId(372434)
                return
            end
            local template = DataCenter.ActMonsterTowerData:GetTemplateByIndex(actInfo.challengeInfo.difficulty)
            if template then
                local num = template.help_time - actInfo.challengeInfo.callHelpCount
                if num >= 1 then
                    local allianceRoom = ChatInterface.getRoomMgr():GetAllianceRoomData()
                    local chat_data = {}
                    chat_data.roomId = allianceRoom:getRoomId()
                    chat_data.post = PostType.Text_ActMonsterTowerHelp
                    chat_data.param =  {}
                    chat_data.param.title = 372472
                    chat_data.param.msg = 372473
                    chat_data.param.pointId = self.param.info.point
                    UIUtil.ShowMessage(Localization:GetString("372432",num), 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
                        SFSNetwork.SendMessage(MsgDefines.CallChallengeActHelp,actInfo.activityId)
                        --分享到联盟
                        EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SHARE_COMMAND, chat_data)
                    end, function()
                    end)
                else
                    UIUtil.ShowTipsId(372433)
                end
            end
        end
    elseif self.param.btnType == WorldPointBtnType.PlayerInfo then
        if self.view.ctrl.ownerUid~=nil and self.view.ctrl.ownerUid~="" then
            if self.view.ctrl.ownerUid == LuaEntry.Player.uid then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIPlayerInfo,{anim = true,UIMainAnim = UIMainAnimType.AllHide},self.view.ctrl.ownerUid)
            else
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIOtherPlayerInfo,{anim = true,UIMainAnim = UIMainAnimType.AllHide},self.view.ctrl.ownerUid)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.AppointPosition then
        if not string.IsNullOrEmpty(self.view.ctrl.ownerUid) then
            local serverData = self.view.ctrl:GetPlayerData(self.view.ctrl.pointId)
            if serverData and serverData.playerData then
                local para = {}
                para.ownerUid = serverData.playerData.uid
                para.name = serverData.playerData.name
                para.pic = serverData.playerData.pic
                para.picVer = serverData.playerData.picVer
                para.headSkinId = serverData.playerData.headSkinId
                para.headSkinET = serverData.playerData.headSkinET
                para.power = serverData.playerData.power
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIPositionAppoint, { anim = true, UIMainAnim = UIMainAnimType.AllHide }, para)
            end
        end
    elseif self.param.btnType == WorldPointBtnType.Missile then
        local _, alreadyExitOccupy = SeasonUtil.CanAttackBuild(self.view.ctrl.pointId, true)
        if not alreadyExitOccupy then
            UIUtil.ShowTipsId(309009)
            WorldDesertSelectEffectManager:GetInstance():ShowAlBuildWarnPos(self.view.ctrl.pointId)
            self.view.ctrl:CloseSelf()
            return
        end
        local uid = self.view.ctrl.uuid
        local pointId = self.view.ctrl.pointId
        UIUtil.ShowMessage(Localization:GetString("309008"),2,"","", function()
            DataCenter.MissileManager:MissileCreate(MissileIDs.ALLIANCE_FIGHT_SEND_MISSILE, uid, 1, LuaEntry.Player:GetCurServerId())
        end, function()
        end)
    elseif self.param.btnType == WorldPointBtnType.EdenAllianceMissile then
        local _, alreadyExitOccupy = SeasonUtil.CanAttackBuild(self.view.ctrl.pointId, true)
        if not alreadyExitOccupy then
            UIUtil.ShowTipsId(309009)
            WorldDesertSelectEffectManager:GetInstance():ShowAlBuildWarnPos(self.view.ctrl.pointId)
            self.view.ctrl:CloseSelf()
            return
        end
        local curNum = DataCenter.MissileManager:GetEdenMissileUseTime()
        local maxNum = LuaEntry.DataConfig:TryGetNum("eden_alliance_missile", "k1")
        if curNum>=maxNum then
            UIUtil.ShowTipsId(111268)
            return
        end
        local uuid = self.view.ctrl.uuid
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIUseEdenMissileTip,uuid,LuaEntry.Player:GetCurServerId())
    elseif self.param.btnType == WorldPointBtnType.AttackAllianceBoss then
        --攻击联盟boss
        local pointId = self.view.ctrl.pointId
        MarchUtil.OnClickStartMarch(MarchTargetType.ATTACK_ALLIANCE_BOSS, pointId, self.view.ctrl.uuid,-1, MarchAutoBackType.Back)
    elseif self.param.btnType == WorldPointBtnType.AllianceBossRank then
        --联盟boss排行榜
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceBossDamageRank,{ anim = true})
    elseif self.param.btnType == WorldPointBtnType.Emotion then
        local tileId = WorldBuildUtil.GetBuildTile(self.view.ctrl.pointId)
        local command = WorldMarchEmotionCommand.New()
        command.uuid = self.view.ctrl.uuid
        command.type = WorldMarchEmotionCommandType.ShowBtns
        command.targetType = WorldMarchEmotionTargetType.Building
        command.pos = BuildingUtils.GetBuildModelCenterVec(self.view.ctrl.pointId,tileId)
        WorldMarchEmotionManager:GetInstance():Command(command)
    elseif self.param.btnType == WorldPointBtnType.HelperDetect then
        local helpDetectData = DataCenter.RadarCenterDataManager:GetHelperEventDataByBuildUid(self.param.info.uuid)
        if helpDetectData ~= nil then
            local costNum = DataCenter.RadarCenterDataManager:GetDetectCostNum()
            local curNum = LuaEntry.Player:GetCurStamina()
            if curNum >= costNum then
                DataCenter.FakeHelperMarchManager:AddMarchIndex(self.view.ctrl.pointId)
            else
                GoToResLack.GotoAddStamina(costNum)
            end

            self.view.ctrl:CloseSelf(false)
        end
    elseif self.param.btnType == WorldPointBtnType.RecuseDetect then
        local costNum = DataCenter.RadarCenterDataManager:GetDetectCostNum()
        local curNum = LuaEntry.Player:GetCurStamina()
        if curNum >= costNum then
            DataCenter.FakeRescueMarchManager:AddMarchIndex(self.view.ctrl.pointId)
        else
            GoToResLack.GotoAddStamina(costNum)
        end

        self.view.ctrl:CloseSelf(false)
    end
    if self.view~=nil and self.view.ctrl~=nil then
        self.view.ctrl:CloseSelf(true)
    end
end

local function PlayAnim(self,name)
    self.anim:Play(name,0,0)
end

local function GetPosition(self)
    return  self.btnImage.transform.position
end

UIWorldPointBtn.OnCreate = OnCreate
UIWorldPointBtn.OnDestroy = OnDestroy
UIWorldPointBtn.OnEnable = OnEnable
UIWorldPointBtn.OnDisable = OnDisable
UIWorldPointBtn.ComponentDefine = ComponentDefine
UIWorldPointBtn.ComponentDestroy = ComponentDestroy
UIWorldPointBtn.DataDefine = DataDefine
UIWorldPointBtn.DataDestroy = DataDestroy
UIWorldPointBtn.ReInit = ReInit
UIWorldPointBtn.RefreshBtnName = RefreshBtnName
UIWorldPointBtn.OnBtnClick = OnBtnClick
UIWorldPointBtn.PlayAnim = PlayAnim
UIWorldPointBtn.GetPosition = GetPosition

return UIWorldPointBtn