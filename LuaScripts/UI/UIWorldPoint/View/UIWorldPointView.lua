---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/28 10:29
---
local UIWorldPointView = BaseClass("UIWorldPointView", UIBaseView)
local base = UIBaseView
local UIWorldPointBtn = require "UI.UIWorldPoint.Component.UIWorldPointBtn"
local WorldCollectDes = require "UI.UIWorldPoint.Component.WorldCollectDes"
local WorldMonsterDes = require "UI.UIWorldPoint.Component.WorldMonsterDes"
local WorldSimpleMonsterDes = require "UI.UIWorldPoint.Component.WorldSimpleMonsterDes"
local WorldPlayerDes = require "UI.UIWorldPoint.Component.WorldPlayerDes"
--local WorldMonsterReward = require "UI.UIWorldPoint.Component.WorldMonsterReward"
local WorldActBossDes = require "UI.UIWorldPoint.Component.WorldActBossDes"
local WorldPlunderDes = require "UI.UIWorldPoint.Component.WorldPlunderDes"
local GuideGarbageInfo = require "UI.UIWorldPoint.Component.GuideGarbageInfo"
local WorldAllianceCollectResDes = require "UI.UIWorldPoint.Component.WorldAllianceCollectResDes"
local WorldChallengeDes = require "UI.UIWorldPoint.Component.WorldChallengeDes"
local WorldDesertDes = require "UI.UIWorldPoint.Component.WorldDesertDes"
local WorldAlMinePanel = require "UI.UIWorldPoint.Component.WorldAlMinePanel"
local WorldAllianceBuild = require "UI.UIWorldPoint.Component.WorldAllianceBuild"
local WorldAllianceBossDes = require "UI.UIWorldPoint.Component.WorldAllianceBossDes"
local WorldDragonBuild = require "UI.UIWorldPoint.Component.WorldDragonBuild"
local WorldDispatchTask = require "UI.UIWorldPoint.Component.WorldDispatchTask"
local Localization = CS.GameEntry.Localization

local BtnPosition = {} --从右向左
BtnPosition[1] = { Vector3.New(0,-131.5,0)}
BtnPosition[2] = { Vector3.New(93.5,-124.5,0),Vector3.New(-93.5,-124.5,0)}
BtnPosition[3] = { Vector3.New(178.5,-63.5,0), Vector3.New(0,-131.5,0),Vector3.New(-178.5,-63.5,0)}
BtnPosition[4] = { Vector3.New(241.5,-6.5,0),Vector3.New(93.5,-124.5,0),
                   Vector3.New(-93.5,-124.5,0),Vector3.New(-241.5,-6.5,0)}
BtnPosition[5] = { Vector3.New(297.5,92.5,0),Vector3.New(178.5,-63.5,0),
                   Vector3.New(0,-131.5,0),Vector3.New(-178.5,-63.5,0),Vector3.New(-297.5,92.5,0)}
local BtnCellCircle = Vector3.New(0,120,0)--按钮的圆心

local AnimName =
{
    Enter = "CommonPopup_movein",--进入动画
    Exit = "CommonPopup_moveout",--退出动画

}

local BtnAnim = {} --从右向左
BtnAnim[1] = { "5Right3"}
BtnAnim[2] = { "4Right2","4Right3"}
BtnAnim[3] = { "5Right2","5Right3","5Right4"}
BtnAnim[4] = { "4Right1","4Right2","4Right3","4Right4"}
BtnAnim[5] = { "5Right1","5Right2","5Right3","5Right4","5Right5"}

local BuildAdjust =
{
    left = 250,right = 250, top = 500,bottom = 150
}

local pos_go_path = "PosGo"
local bg_go_path = "PosGo/message/bg"
local name_text_path = "PosGo/message/bg/Top/NameText"
local build_btn_obj_path = "PosGo/BuildBtnScale"
local build_btn_go_path = "PosGo/BuildBtnScale/BuildBtnGo"
local this_path = ""
local btn_mark_path = "PosGo/message/bg/Top/Btn_mark"
local btn_share_path = "PosGo/message/bg/Top/Btn_share"
local btn_assign_path = "PosGo/message/bg/Top/Btn_Assign"

local btn_detail_path = "PosGo/message/bg/Top/btn_detail"
local btn_return_path = "PosGo/message/bg/Top/btn_return"
local layout_obj_path = "PosGo/message/bg/layout"
local monster_obj_path = "PosGo/message/bg/layout/monsterObj(Clone)"
local collect_obj_path = "PosGo/message/bg/layout/collect(Clone)"
local alliance_collect_obj_path = "PosGo/message/bg/layout/allianceCollect(Clone)"
local other_player_obj_path = "PosGo/message/bg/layout/otherPlayer(Clone)"
local simple_monster_obj_path = "PosGo/message/bg/layout/simpleMonsterObj(Clone)"
local alliance_build_obj_path = "PosGo/message/bg/layout/allianceBuild(Clone)"
local dragon_build_obj_path = "PosGo/message/bg/layout/dragonBuild(Clone)"
local dispatchTask_obj_path = "PosGo/message/bg/layout/DispatchTaskObj(Clone)"
--local monster_reward_obj_path = "PosGo/message/bg/monsterRewardObj"
local plunder_obj_path = "PosGo/message/bg/plunderObj"
local act_boss_obj_path = "PosGo/message/bg/layout/actBossObj(Clone)"
local challenge_obj_path = "PosGo/message/bg/layout/challengeObj(Clone)"
local allianceMine_path = "PosGo/message/bg/layout/alMinePanel(Clone)"
local desert_obj_path = "PosGo/message/bg/layout/desertObj(Clone)"
local guide_garbage_path = "GuidePanel"
local btn_attackTips_path = "PosGo/message/bg/Btn_Injury"
local txt_attackTips_path = "PosGo/message/bg/Btn_Injury/Txt_AttackTips"
local img_injury_path = "PosGo/message/bg/Btn_Injury/Txt_AttackTips/Img_Injury"
local alliance_boss_obj_path = "PosGo/message/bg/layout/allianceBossObj(Clone)"
local center_text_go_path = "PosGo/message/bg/center_text_go"
local center_text_path = "PosGo/message/bg/center_text_go/center_text"

--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.pos_go = self:AddComponent(UIBaseContainer,pos_go_path)
    self.bg_go = self:AddComponent(UIBaseContainer, bg_go_path)
    self.name_text = self:AddComponent(UITextMeshProUGUIEx,name_text_path)
    self.build_btn_obj = self:AddComponent(UIBaseContainer,build_btn_obj_path)
    self.build_btn_go = self:AddComponent(UIBaseContainer,build_btn_go_path)
    self.this_anim = self:AddComponent(UIAnimator,this_path)
    self.build_btn_anim = self:AddComponent(UIAnimator,build_btn_go_path)
    self.layout = self:AddComponent(UIBaseContainer,layout_obj_path)
    --self.monster_reward_obj = self:AddComponent(WorldMonsterReward,monster_reward_obj_path)
    self.plunder_obj = self:AddComponent(WorldPlunderDes,plunder_obj_path)
    self.btn_mark = self:AddComponent(UIButton,btn_mark_path)
    self.btn_mark:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnMarkClick()
    end)
    self.btnMarkImg = self:AddComponent(UIImage, btn_mark_path)
    
    self.btn_share = self:AddComponent(UIButton,btn_share_path)
    self.btn_share:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnShareClick()
    end)
    self.btn_assign = self:AddComponent(UIButton, btn_assign_path)
    self.btn_assign:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnAssignClick()
    end)

    self.btn_detail = self:AddComponent(UIButton,btn_detail_path)
    self.btn_detail:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnDetailClick()
    end)
    self.btn_detail:SetActive(true)
    self.btn_return = self:AddComponent(UIButton,btn_return_path)
    self.btn_return:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnReturnClick()
    end)
    self.btn_return:SetActive(false)
    self.AutoAdjustScreenPos = self.transform:Find(pos_go_path):GetComponent(typeof(CS.AutoAdjustScreenPos))
    self.model = {}

    self._btn_attackTips = self:AddComponent(UIButton,btn_attackTips_path)
    self._btn_attackTips:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickInjuryTips()
    end)
    self._img_injury = self:AddComponent(UIImage,img_injury_path)
    self.txt_attackTips = self:AddComponent(UITextMeshProUGUIEx,txt_attackTips_path)
    self.txt_attackTips:SetLocalText(104320)
    self.center_text_go = self:AddComponent(UIBaseContainer, center_text_go_path)
    self.center_text = self:AddComponent(UITextMeshProUGUIEx, center_text_path)
end

local function ComponentDestroy(self)
    self:RemoveAllComponent()
    self.pos_go = nil
    self.name_text = nil
    self.build_btn_obj =nil
    self.build_btn_go = nil
    self.this_anim = nil
    self.build_btn_anim = nil
    self.btn_mark = nil
    self.btn_share = nil
    self.btn_detail = nil
    self.btn_return = nil
    self.AutoAdjustScreenPos = nil
    self.model = nil
    --self.guide_garbage = nil
    self.alliance_boss_obj = nil
end


local function DataDefine(self)
    self.worldPos = nil
    self.timer_action = function(temp)
        self:RefreshTime()
    end
    self.timer_actionArrow = function(temp)
        self:RefreshArrowTime()
    end
    self.screenPos = nil
    self.buildBtnCells = {}
    self.animIndex = 0
    self.timer = nil
    self.timerArrow = nil
    self.closeTimer = nil
    self.showIndex = 1
    self.targetBtnPos = 0
    WorldArrowManager:GetInstance():RemoveEffect()
end

local function DataDestroy(self)
    self:DeleteArrowTimer()
    self:DeleteTimer()
    self.worldPos = nil
    self.screenPos = nil
    self.buildBtnCells = {}
    self.animIndex = 0
    self.timer = nil
    self.timerArrow = nil
    if self.closeTimer ~= nil then
        self.closeTimer:Stop()
        self.closeTimer = nil
    end
    self.showIndex = nil
    self.targetBtnPos = nil
end

local function OnEnable(self)
    base.OnEnable(self)
    self.ctrl:InitData(self:GetUserData())
    self:ReInit()
end

local function OnDisable(self)
    WorldDesertSelectEffectManager:GetInstance():HidePos()
    if self.ctrl.type == WorldPointUIType.ActBoss then
        WorldBossBloodTipManager:GetInstance():SetViewClose()
    end
    if self.ctrl.type == WorldPointUIType.AllianceBoss then
        AllianceBossBloodTipManager:GetInstance():SetViewClose()
    end

    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.RefreshUIWorldPointView, self.RefreshUIWorldPointViewSignal)
    self:AddUIListener(EventId.WorldPointDetail, self.SetData)
    --self:AddUIListener(EventId.GetSingleGarbageInfoSuccess, self.RefreshRewardList)
    self:AddUIListener(EventId.ChangeCameraLod, self.UpdateLod)
    self:AddUIListener(EventId.ShowActBossBattleValue, self.UpdateActBossBlood)
    self:AddUIListener(EventId.RefreshRadarBossDailyRewardCount, self.RefreshRadarBossDailyRewardCountSignal)
    self:AddUIListener(EventId.GetEdenMissileData, self.RefreshEdenMissileNum)
end


local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.RefreshUIWorldPointView, self.RefreshUIWorldPointViewSignal)
    self:RemoveUIListener(EventId.WorldPointDetail, self.SetData)
   --self:RemoveUIListener(EventId.GetSingleGarbageInfoSuccess, self.RefreshRewardList)
    self:RemoveUIListener(EventId.ChangeCameraLod, self.UpdateLod)
    self:RemoveUIListener(EventId.ShowActBossBattleValue, self.UpdateActBossBlood)
    self:RemoveUIListener(EventId.RefreshRadarBossDailyRewardCount, self.RefreshRadarBossDailyRewardCountSignal)
    self:RemoveUIListener(EventId.GetEdenMissileData, self.RefreshEdenMissileNum)
end

local function RemoveAllComponent(self)
    self:RemoveComponents(WorldMonsterDes)
    self:RemoveComponents(WorldCollectDes)
    self:RemoveComponents(WorldSimpleMonsterDes)
    self:RemoveComponents(WorldPlayerDes)
    self:RemoveComponents(WorldAllianceBuild)
    self:RemoveComponents(WorldDragonBuild)
    self:RemoveComponents(WorldActBossDes)
    self:RemoveComponents(WorldAllianceBuild)
    self:RemoveComponents(WorldAllianceCollectResDes)
    self:RemoveComponents(WorldChallengeDes)
    self:RemoveComponents(WorldAlMinePanel)
    self:RemoveComponents(WorldDesertDes)
    self:RemoveComponents(WorldDispatchTask)
    self.monster_obj = nil
    self.collect_obj = nil
    self.simple_monster_obj = nil
    self.other_player_obj = nil
    self.alliance_collect_obj = nil
    self.allianceBuild = nil
    self.dragonBuild = nil
    self.act_boss_obj = nil
    self.allianceMinePanelN = nil
    self.desert_obj = nil
    self.act_boss_obj = nil
    self.challenge_obj = nil
    if self.go~=nil and IsNull(self.go.gameObject) == false then
        CS.UnityEngine.Object.DestroyImmediate(self.go.gameObject)
    end
    if self.req~=nil then
        CS.GameEntry.Resource:UnloadAsset(self.req)
    end
end
local function ReInit(self)
    self.serverData = nil
    self._btn_attackTips:SetActive(false)
    if self.ctrl.type == WorldPointUIType.Desert or self.ctrl.type == WorldPointUIType.Ruin then
        WorldDesertSelectEffectManager:GetInstance():ShowPos(self.ctrl.pointId)
    else
        WorldDesertSelectEffectManager:GetInstance():HidePos()
    end
    self:RemoveAllComponent()
    self.req = CS.GameEntry.Resource:LoadAsset(self:GetInfoAssertPath(), typeof(CS.UnityEngine.GameObject))
    if self.req~=nil and self.req.isError ==false then
        local reqAsset = self.req.asset
        cast(reqAsset, typeof(CS.UnityEngine.GameObject))
        self.go = CS.UnityEngine.Object.Instantiate(reqAsset.gameObject)
        self.go:SetActive(true)
        self.go.transform:SetParent(self.layout.transform)
        self.go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
        if self.ctrl.type == WorldPointUIType.SingleMapGarbage 
                or self.ctrl.type == WorldPointUIType.PickGarbage 
                or self.ctrl.type == WorldPointUIType.Sample then
            self.simple_monster_obj = self:AddComponent(WorldSimpleMonsterDes,simple_monster_obj_path)
        else
            local k1 = LuaEntry.DataConfig:TryGetNum("monster_level_show", "k1")
            local currentMainLv = DataCenter.BuildManager.MainLv
            if currentMainLv < k1 then
                self.simple_monster_obj = self:AddComponent(WorldSimpleMonsterDes,simple_monster_obj_path)
            else
                if self.ctrl.type == WorldPointUIType.Monster then
                    self.monster_obj = self:AddComponent(WorldMonsterDes,monster_obj_path)
                elseif self.ctrl.type == WorldPointUIType.Boss then
                    self.monster_obj = self:AddComponent(WorldMonsterDes,monster_obj_path)
                elseif self.ctrl.type == WorldPointUIType.Explore then
                    self.monster_obj = self:AddComponent(WorldMonsterDes,monster_obj_path)
                elseif self.ctrl.type == WorldPointUIType.GuideEventMonster then
                    self.monster_obj = self:AddComponent(WorldMonsterDes,monster_obj_path)
                elseif self.ctrl.type == WorldPointUIType.City or self.ctrl.type == WorldPointUIType.Build or self.ctrl.type == WorldPointUIType.CollectArmy then
                    self.other_player_obj = self:AddComponent(WorldPlayerDes,other_player_obj_path)
                elseif self.ctrl.type == WorldPointUIType.CollectPoint or self.ctrl.type == WorldPointUIType.CityResPoint then
                    self.collect_obj = self:AddComponent(WorldCollectDes,collect_obj_path)
                elseif self.ctrl.type == WorldPointUIType.AllianceCollectPoint then
                    self.alliance_collect_obj = self:AddComponent(WorldAllianceCollectResDes,alliance_collect_obj_path)
                elseif self.ctrl.type == WorldPointUIType.ActBoss then
                    self.act_boss_obj = self:AddComponent(WorldActBossDes,act_boss_obj_path)
                elseif self.ctrl.type == WorldPointUIType.PuzzleBoss then
                    self.act_boss_obj = self:AddComponent(WorldActBossDes,act_boss_obj_path)
                elseif self.ctrl.type == WorldPointUIType.ChallengeBoss then
                    self.challenge_obj = self:AddComponent(WorldChallengeDes,challenge_obj_path)
                elseif self.ctrl.type == WorldPointUIType.Desert or self.ctrl.type == WorldPointUIType.Ruin then
                    self.desert_obj = self:AddComponent(WorldDesertDes,desert_obj_path)
                elseif self.ctrl.type == WorldPointUIType.AllianceMine or self.ctrl.type == WorldPointUIType.AllianceActMine then
                    self.allianceMinePanelN = self:AddComponent(WorldAlMinePanel, allianceMine_path)
                elseif self.ctrl.type == WorldPointUIType.AllianceBuild then
                    self.allianceBuild = self:AddComponent(WorldAllianceBuild,alliance_build_obj_path)
                elseif self.ctrl.type == WorldPointUIType.AllianceBoss then
                    self.alliance_boss_obj = self:AddComponent(WorldAllianceBossDes, alliance_boss_obj_path)
                elseif self.ctrl.type == WorldPointUIType.DragonBuild or self.ctrl.type == WorldPointUIType.DragonSecretKey then
                    self.dragonBuild = self:AddComponent(WorldDragonBuild,dragon_build_obj_path)
                elseif self.ctrl.type == WorldPointUIType.DispatchTask then
                    self.dispatchTask = self:AddComponent(WorldDispatchTask,dispatchTask_obj_path)
                end
            end
        end
    end
    self.info = self.ctrl:GetPointData()
    if self.info ~= nil then
        local tile = BuildTilesSize.One
        if self.ctrl.type == WorldPointUIType.Build or self.ctrl.type == WorldPointUIType.City then
            if self.ctrl.buildId == BuildingTypes.FUN_BUILD_MAIN then
                tile = LuaEntry.DataConfig:TryGetNum("worldmap_city", "k12")
            else
                local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.ctrl.buildId)
                if buildTemplate ~= nil then
                    tile = buildTemplate.tiles
                end
            end
        elseif self.ctrl.type == WorldPointUIType.AllianceMine or self.ctrl.type == WorldPointUIType.AllianceActMine then
            if self.info.pointData~=nil and self.info.pointData.size ~=nil then
                tile = self.info.pointData.size
            end
        elseif self.ctrl.type == WorldPointUIType.AllianceBuild then
            if self.info.pointData~=nil and self.info.pointData.size ~=nil then
                tile = self.info.pointData.size
            end
        elseif self.ctrl.type == WorldPointUIType.DragonBuild then
            if self.info.pointData~=nil and self.info.pointData.size ~=nil then
                tile = self.info.pointData.size
            end
        end
        self.worldPos = BuildingUtils.GetBuildModelCenterVec(self.ctrl.pointId, tile)
		local x, y = self.transform:Get_lossyScale()
		local lossyScale = y
        --local lossyScale = self.transform.lossyScale.y
        if lossyScale <= 0 then
            lossyScale = 1
        end
        if self.ctrl.type ~= WorldPointUIType.SingleMapGarbage then
            UIUtil.ClickBuildAdjustCameraView(self.worldPos,BuildAdjust,lossyScale)
        end
        self.AutoAdjustScreenPos:Init(self.worldPos)
        if self.ctrl.type == WorldPointUIType.Monster or self.ctrl.type == WorldPointUIType.Boss or self.ctrl.type == WorldPointUIType.ChallengeBoss then
			local t = Localization:GetString(self.info.pointData.name)
            self.name_text:SetLocalText(140205, self.info.pointData.level, t)
        elseif self.ctrl.type == WorldPointUIType.CollectPoint then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.CityResPoint then
            self.name_text:SetText(self.info.pointData.name)    
        elseif self.ctrl.type == WorldPointUIType.AllianceCollectPoint then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.CollectArmy then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.Explore then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.GuideEventMonster then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.Sample then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.PickGarbage then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.SingleMapGarbage then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.MonsterReward then
            self.name_text:SetLocalText(104190) 
        elseif self.ctrl.type == WorldPointUIType.ActBoss then
            self.name_text:SetText(Localization:GetString(self.info.pointData.name))
        elseif self.ctrl.type == WorldPointUIType.PuzzleBoss then
            self.name_text:SetText(Localization:GetString(self.info.pointData.name))
        elseif self.ctrl.type == WorldPointUIType.AllianceMine or self.ctrl.type == WorldPointUIType.AllianceActMine then
            self.name_text:SetText(self.info.pointData.name)
        elseif self.ctrl.type == WorldPointUIType.AllianceBuild then
            self.name_text:SetText(Localization:GetString(self.info.pointData.name))
        elseif self.ctrl.type == WorldPointUIType.DragonBuild or self.ctrl.type == WorldPointUIType.DragonSecretKey then
            self.name_text:SetText(Localization:GetString(self.info.pointData.name))
        elseif self.ctrl.type == WorldPointUIType.Desert or self.ctrl.type == WorldPointUIType.Ruin then
            if self.info.pointData.level>0 then
                self.name_text:SetText("Lv."..self.info.pointData.level.." "..Localization:GetString(self.info.pointData.name))
            else
                self.name_text:SetText(Localization:GetString("110245"))
            end
        elseif self.ctrl.type == WorldPointUIType.DispatchTask then
            self.name_text:SetText(Localization:GetString(self.info.pointData.name))
        elseif self.ctrl.type == WorldPointUIType.AllianceBoss then
            self.name_text:SetLocalText(155064) -- 联盟boss
        end
        if CS.SceneManager:IsInCity() 
                or self.ctrl.type == WorldPointUIType.CollectPoint
                or self.ctrl.type == WorldPointType.MONSTER_REWARD
                or self.ctrl.type == WorldPointUIType.Sample 
                or self.ctrl.type == WorldPointUIType.PickGarbage 
                or self.ctrl.type == WorldPointUIType.DispatchTask 
                or self.ctrl.type == WorldPointUIType.SingleMapGarbage 
                or self.ctrl.type == WorldPointUIType.CollectArmy 
                or  self.ctrl.type == WorldPointUIType.Ruin 
                or self.ctrl.type == WorldPointUIType.DragonSecretKey 
                or self.ctrl.type == WorldPointUIType.DragonBuild then
            self.btn_return:SetActive(false)
            self.btn_detail:SetActive(false)
        else
            self.btn_return:SetActive(false)
            self.btn_detail:SetActive(true)
        end
        self:ShowTopBtn()
        self:ShowBtn()
        self:ShowGuideGarbage()
        self:ShowMarkState()
        self:ShowAssignState()
        self:RefreshCenterText()
        self:CheckSendMessage()
    end
end

local function SetData(self,pointId)
    if pointId and pointId ~= self.ctrl.pointId then
        return
    end
    local serverData = self.ctrl:GetPlayerData(self.ctrl.pointId)
    self.serverData = serverData
    if self.ctrl.type == WorldPointUIType.PickGarbage then
        self.info = self.ctrl:GetPointData()
        if self.monster_obj~=nil then
            self.monster_obj:RefreshData(self.info.pointData)
        end
        
        self.plunder_obj:SetActive(false)
        return
    elseif self.ctrl.type == WorldPointUIType.AllianceMine or self.ctrl.type == WorldPointUIType.AllianceActMine then
        if self.allianceMinePanelN~=nil then
            self.allianceMinePanelN:SetData(self.ctrl.pointId)
        end
        if self.ctrl.type == WorldPointUIType.AllianceActMine and self.serverData~=nil and self.serverData.playerData~=nil and self.serverData.playerData.alBuilding then
            if serverData.playerData.alBuilding.allianceId ~= LuaEntry.Player:GetAllianceUid() then
                local dialog,value = self:InjuryBuildCheck(serverData.playerData.alBuilding.allianceId == LuaEntry.Player:GetAllianceUid())
                --self.txt_attackTips:SetText(Localization:GetString(dialog)..value.."%")
                self._btn_attackTips:SetActive(LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER)
            end
        end
        CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.bg_go.rectTransform)
        return
    elseif self.ctrl.type == WorldPointUIType.AllianceBuild then
        if self.allianceBuild~=nil then
            self.allianceBuild:SetData(self.ctrl.pointId)
        end
    end
    if serverData~=nil then
        if self.ctrl.type == WorldPointUIType.City or self.ctrl.type == WorldPointUIType.Build then
            if serverData.playerData~=nil then
                local playerName = serverData.playerData.name
                if serverData.playerData.alAbbr~=nil and serverData.playerData.alAbbr~="" then
                    playerName = "["..serverData.playerData.alAbbr.."]"..serverData.playerData.name
                end
                self.name_text:SetText(playerName)
                if self.other_player_obj~=nil then
                    self.other_player_obj:UpdateInfo(serverData)
                end
                self.plunder_obj:RefreshData(serverData)

                if not self.ctrl.isAlliance then
                    if serverData.playerData.uid ~= LuaEntry.Player.uid then
                        local dialog,value = self:InjuryBuildCheck(self.ctrl.isAlliance)
                        --self.txt_attackTips:SetText(Localization:GetString(dialog)..value.."%")
                        self._btn_attackTips:SetActive(LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER)
                    end
                end
            end
        elseif self.ctrl.type == WorldPointUIType.CollectPoint then
            if self.collect_obj~=nil then
                self.collect_obj:UpdateInfo(serverData)
            end
            self.plunder_obj:SetActive(false)
        elseif self.ctrl.type == WorldPointUIType.CityResPoint then
            if self.collect_obj~=nil then
                self.collect_obj:UpdateInfo(serverData)
            end
            self.plunder_obj:SetActive(false)
        elseif self.ctrl.type == WorldPointUIType.Desert or self.ctrl.type == WorldPointUIType.Ruin then
            if self.desert_obj~=nil then
                self.desert_obj:UpdateInfo(serverData) 
            end
            self.plunder_obj:SetActive(false)
        elseif self.ctrl.type == WorldPointUIType.AllianceCollectPoint then
            if self.alliance_collect_obj~=nil then
                self.alliance_collect_obj:UpdateInfo(serverData)
            end
            
            self.plunder_obj:SetActive(false)
        elseif self.ctrl.type == WorldPointUIType.ActBoss then
            if self.act_boss_obj~=nil and serverData.playerData~=nil and serverData.playerData.monsterData~=nil then
                self.act_boss_obj:RefreshServerData(serverData.playerData.monsterData)
            end
            self.plunder_obj:SetActive(false)
        elseif self.ctrl.type == WorldPointUIType.PuzzleBoss then
            if self.act_boss_obj~=nil and serverData.playerData~=nil and serverData.playerData.monsterData~=nil then
                self.act_boss_obj:RefreshServerData(serverData.playerData.monsterData)
            end
            self.plunder_obj:SetActive(false)
        elseif self.ctrl.type == WorldPointUIType.ChallengeBoss then
            if self.challenge_obj~=nil and serverData.playerData~=nil and serverData.playerData.monsterData~=nil then
                self.challenge_obj:RefreshServerData(serverData.playerData.monsterData)
            end
            self.plunder_obj:SetActive(false)
        else
            self.plunder_obj:SetActive(false)
        end
        if serverData.playerData~=nil then
            if self.ctrl.type == WorldPointUIType.AllianceBuild then
                if serverData.playerData.alBuilding then
                    if serverData.playerData.alBuilding.allianceId ~= LuaEntry.Player:GetAllianceUid() then
                        local dialog,value = self:InjuryAllianceCheck(serverData.playerData.alBuilding.allianceId == LuaEntry.Player:GetAllianceUid())
                        --self.txt_attackTips:SetText(Localization:GetString(dialog)..value.."%")
                        self._btn_attackTips:SetActive(LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER)
                    end
                end
            end
        end
    else
        self.plunder_obj:SetActive(false)
    end
end

local function RefreshEdenMissileNum(self)
    if self.buildBtnCells~=nil and self.buildBtnCells[WorldPointBtnType.EdenAllianceMissile]~=nil then
        local data = self.buildBtnCells[WorldPointBtnType.EdenAllianceMissile]
        if data.param~=nil then
            data:RefreshBtnName(data.param)
        end
    end
    
end
--UIRepair_icon_medical
local function InjuryAllianceCheck(self,isSelfAlliance)
    local wounded = 0
    local injury = 0
    if isSelfAlliance then
        wounded = LuaEntry.DataConfig:TryGetNum("injury_config","k5")
        injury = LuaEntry.DataConfig:TryGetNum("injury_config","k6")
    else
        wounded = LuaEntry.DataConfig:TryGetNum("injury_config","k3")
        injury = LuaEntry.DataConfig:TryGetNum("injury_config","k4")
    end
    local dead = 100 - wounded - injury
    self.injuryValue = injury
    self.woundedValue = wounded
    self.deadValue = dead
    local value = 0
    local dialog = "104320"
    if dead > 0 then
        dialog = "302014"
        value = dead
    elseif dead == 0 then
        dialog = "121581"
        value = injury
    elseif dead < 0 then
        dialog = "121581"
        value = injury
        print("injury scale wrong :"..wounded.." "..injury)
    end
    return dialog,value
end

local function InjuryBuildCheck(self,isSelfAlliance)
    local dead = 0
    local value = 0
    local wounded = 0
    local injury = 0
    --if self.ctrl.buildId == BuildingTypes.FUN_BUILD_MAIN then  APS_BUILD_WORMHOLE_SUB
    --    return self:InjuryAllianceCheck()
    --else
    if self.ctrl.buildId == BuildingTypes.WORM_HOLE_CROSS then
        wounded = LuaEntry.DataConfig:TryGetNum("injury_config","k7")
        injury = LuaEntry.DataConfig:TryGetNum("injury_config","k8")
        dead = 100 - wounded - injury
		self.injuryValue = injury
        self.woundedValue = wounded
        self.deadValue = dead
    elseif self.ctrl.type == WorldPointUIType.AllianceActMine then
        wounded = LuaEntry.DataConfig:TryGetNum("injury_config","k17")
        injury = LuaEntry.DataConfig:TryGetNum("injury_config","k18")
        dead = 100 - wounded - injury
        self.injuryValue = injury
        self.woundedValue = wounded
        self.deadValue = dead
    else
        return self:InjuryAllianceCheck(isSelfAlliance)
    end
    local dialog = "104320"
    if dead > 0 then
        dialog = "302014"
        value = dead
    elseif dead == 0 then
        dialog = "121581"
        value = injury
    elseif dead < 0 then
        dialog = "121581"
        value = injury
        print("injury scale wrong :"..wounded.." "..injury)
    end
    return dialog,value
end

local function OnClickInjuryTips(self)
    local content = "——————————".."\n"..Localization:GetString("121586")
    local injuryMsg = Localization:GetString("121581").." "..self.injuryValue.."%"
    local woundedMsg = Localization:GetString("121582").." "..self.woundedValue.."%"
    local deadMsg = Localization:GetString("302014").." "..self.deadValue.."%"
    local msg = deadMsg.."\n"..injuryMsg.."\n"..woundedMsg.."\n"..content
    local scaleFactor = UIManager:GetInstance():GetScaleFactor()
    local position = self._img_injury.transform.position + Vector3.New(0, 15, 0) * scaleFactor
    local param = {}
    param.content = msg
    param.dir = 1
    param.defWidth = 300
    param.pivot = 0.25
    param.position = position
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTip, { anim = false }, param)
end

local function ShowGuideGarbage(self)
end
local function GetInfoAssertPath(self)
    local path = ""
    if self.ctrl.type == WorldPointUIType.SingleMapGarbage 
            or self.ctrl.type == WorldPointUIType.PickGarbage 
            or self.ctrl.type == WorldPointUIType.Sample then
        path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/simpleMonsterObj.prefab"
    else
        local k1 = LuaEntry.DataConfig:TryGetNum("monster_level_show", "k1")
        local currentMainLv = DataCenter.BuildManager.MainLv
        if currentMainLv < k1 then
            path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/simpleMonsterObj.prefab"
        else
            if self.ctrl.type == WorldPointUIType.Monster then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/monsterObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.Boss then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/monsterObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.Explore then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/monsterObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.GuideEventMonster then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/monsterObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.City or self.ctrl.type == WorldPointUIType.Build or self.ctrl.type == WorldPointUIType.CollectArmy then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/otherPlayer.prefab"
            elseif self.ctrl.type == WorldPointUIType.CollectPoint or self.ctrl.type == WorldPointUIType.CityResPoint then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/collect.prefab"
            elseif self.ctrl.type == WorldPointUIType.AllianceCollectPoint then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/allianceCollect.prefab"
            elseif self.ctrl.type == WorldPointUIType.ActBoss then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/actBossObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.PuzzleBoss then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/actBossObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.ChallengeBoss then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/challengeObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.Desert or self.ctrl.type == WorldPointUIType.Ruin then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/desertObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.AllianceMine or self.ctrl.type == WorldPointUIType.AllianceActMine then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/alMinePanel.prefab"
            elseif self.ctrl.type == WorldPointUIType.AllianceBuild then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/allianceBuild.prefab"
            elseif self.ctrl.type == WorldPointUIType.AllianceBoss then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/allianceBossObj.prefab"
            elseif self.ctrl.type == WorldPointUIType.DragonBuild or self.ctrl.type == WorldPointUIType.DragonSecretKey then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/dragonBuild.prefab"
            elseif self.ctrl.type == WorldPointUIType.DispatchTask then
                path = "Assets/Main/Prefabs/UI/World/UIWorldPointComponent/DispatchTaskObj.prefab"
            end
        end
    end
    return path
end
local function ShowTopBtn(self)
    self.plunder_obj:SetActive(false)
    if self.ctrl.type == WorldPointUIType.SingleMapGarbage 
            or self.ctrl.type == WorldPointUIType.PickGarbage 
            or self.ctrl.type == WorldPointUIType.Sample then
        self.btn_mark:SetActive(false)
        self.btn_share:SetActive(false)
        self.name_text:SetActive(false)
        --self.monster_reward_obj:SetActive(false)
        if self.simple_monster_obj~=nil then
            self.simple_monster_obj:SetActive(true)
            self.simple_monster_obj:RefreshData(self.info.pointData)
        end
    else
        local k1 = LuaEntry.DataConfig:TryGetNum("monster_level_show", "k1")
        local currentMainLv = DataCenter.BuildManager.MainLv
        if currentMainLv < k1 then
            if self.ctrl.type == WorldPointUIType.Monster then
                if self.simple_monster_obj~=nil then
                    self.simple_monster_obj:SetActive(true)
                    self.simple_monster_obj:RefreshData(self.info.pointData)
                end
            end
        else
            if CS.SceneManager:IsInCity() or self.ctrl.type == WorldPointUIType.MonsterReward or self.ctrl.type == WorldPointUIType.Explore 
                    or self.ctrl.type == WorldPointUIType.GuideEventMonster or (self.info.pointData.belongSelf~=nil and self.info.pointData.belongSelf ==true) then
                self.btn_mark:SetActive(false)
                self.btn_share:SetActive(false)
            else
                self.btn_mark:SetActive(true)
                self.btn_share:SetActive(true)
            end

            self.name_text:SetActive(true)
            if self.ctrl.type == WorldPointUIType.Monster then
                if self.monster_obj~=nil then
                    self.monster_obj:SetActive(true)
                    self.monster_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.Boss then
                if self.monster_obj~=nil then
                    self.monster_obj:SetActive(true)
                    self.monster_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.Explore then
                if self.monster_obj~=nil then
                    self.monster_obj:SetActive(true)
                    self.monster_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.GuideEventMonster then
                if self.monster_obj~=nil then
                    self.monster_obj:SetActive(true)
                    self.monster_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.City or self.ctrl.type == WorldPointUIType.Build or self.ctrl.type == WorldPointUIType.CollectArmy then
                if self.other_player_obj~=nil then
                    self.other_player_obj:SetActive(true)
                    self.other_player_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.CollectPoint or self.ctrl.type == WorldPointUIType.CityResPoint then
                if self.collect_obj~=nil then
                    self.collect_obj:SetActive(true)
                    self.collect_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.AllianceCollectPoint then
                if self.alliance_collect_obj~=nil then
                    self.alliance_collect_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.ActBoss then
                if self.act_boss_obj~=nil then
                    self.act_boss_obj:SetActive(true)
                    self.act_boss_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.PuzzleBoss then
                if self.act_boss_obj~=nil then
                    self.act_boss_obj:SetActive(true)
                    self.act_boss_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.ChallengeBoss then
                if self.challenge_obj~=nil then
                    self.challenge_obj:SetActive(true)
                    self.challenge_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.Desert or self.ctrl.type == WorldPointUIType.Ruin then
                if self.desert_obj~=nil then
                    self.desert_obj:SetActive(true)
                    self.desert_obj:RefreshData(self.info.pointData)
                    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.bg_go.rectTransform)
                end
            elseif self.ctrl.type == WorldPointUIType.AllianceMine or self.ctrl.type == WorldPointUIType.AllianceActMine then
                if self.allianceMinePanelN~=nil then
                    self.allianceMinePanelN:SetActive(true)
                    self.allianceMinePanelN:SetData(self.ctrl.pointId)
                    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self.bg_go.rectTransform)
                end
                
            elseif self.ctrl.type == WorldPointUIType.AllianceBuild then
                if self.allianceBuild~=nil then
                    self.allianceBuild:SetActive(true)
                    self.allianceBuild:RefreshData(self.info.pointData)
                end
                
            elseif self.ctrl.type == WorldPointUIType.AllianceBoss then
                if self.alliance_boss_obj~=nil then
                    self.alliance_boss_obj:SetActive(true)
                    self.alliance_boss_obj:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.DragonBuild or self.ctrl.type == WorldPointUIType.DragonSecretKey then
                if self.dragonBuild~=nil then
                    self.dragonBuild:SetActive(true)
                    self.dragonBuild:RefreshData(self.info.pointData)
                end
            elseif self.ctrl.type == WorldPointUIType.DispatchTask then
                if self.dispatchTask~=nil then
                    self.dispatchTask:SetActive(true)
                    self.dispatchTask:RefreshData(self.info.pointData)
                end
            end
        end
    end
end

local function SetAllCellDestroy(self)
    self.build_btn_go:RemoveComponents(UIWorldPointBtn)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.model ={}
end

local function ShowBtn(self)
    self.buildBtnCells = {}
    self:SetAllCellDestroy()
    local k1 = LuaEntry.DataConfig:TryGetNum("monster_level_show", "k1")
    local currentMainLv = DataCenter.BuildManager.MainLv
    if currentMainLv < k1 and self.ctrl.type ~= WorldPointUIType.SingleMapGarbage then
        self.build_btn_obj:SetActive(false)
        return 
    end
    self.btnList = self.info.btnList
    self.btnCount = #self.btnList
    if self.btnCount > 0 then
        self.build_btn_obj:SetActive(true)
        table.sort(self.btnList,function(a,b)
            return WorldPointBtnSortType[a] > WorldPointBtnSortType[b]
        end)
        for k,v in ipairs(self.btnList) do
            local param = {}
            param.btnType = v
            param.info = self.info.pointData
            param.position = BtnPosition[self.btnCount][k] - BtnCellCircle
            self.model[k] = self:GameObjectInstantiateAsync(UIAssets.UIWorldTileBuildBtn, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject
                go:SetActive(true)
                go.transform:SetParent(self.build_btn_go.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.transform:Set_localPosition(BtnCellCircle.x, BtnCellCircle.y, BtnCellCircle.z)
                local nameStr = self.view.ctrl:GetPointBtnEnumName(v)
                go.name = nameStr
                self.buildBtnCells[v] = self.build_btn_go:AddComponent(UIWorldPointBtn, nameStr)
                self.buildBtnCells[v]:ReInit(param)
                self:CheckPlay()
            end)
        end
        self:CheckPlay()
    else
        self.build_btn_obj:SetActive(false)
    end
end

local function RefreshUIWorldPointViewSignal(self,data)
    if data~=nil then
        local strArr = string.split(data,";")
        if #strArr>5 then
            if self.ctrl.type ~= WorldPointUIType.SingleMapGarbage then
                local ret,time = self.this_anim:PlayAnimationReturnTime(AnimName.Exit)
                if ret then
                    self.closeTimer = TimerManager:GetInstance():GetTimer(time, function()
                        if self.closeTimer ~= nil then
                            self.closeTimer:Stop()
                            self.closeTimer = nil
                        end
                        if self.ctrl~=nil then
                            if #strArr>7 then
                                self.ctrl:InitData(strArr[1],strArr[2],strArr[3],strArr[4],strArr[5],strArr[6],strArr[7],strArr[8])
                            else
                                self.ctrl:InitData(strArr[1],strArr[2],strArr[3],strArr[4],strArr[5],strArr[6])
                            end
                            
                            self.this_anim:Play(AnimName.Enter,0,0)
                            self:ReInit()
                        end
                    end , self, true,false,false)
                    self.closeTimer:Start()
                end
            else
                if #strArr>7 then
                    self.ctrl:InitData(strArr[1],strArr[2],strArr[3],strArr[4],strArr[5],strArr[6],strArr[7],strArr[8])
                else
                    self.ctrl:InitData(strArr[1],strArr[2],strArr[3],strArr[4],strArr[5],strArr[6])
                end
                self:ReInit()
            end
        end
    end
end

local function UpdateActBossBlood(self,data)
    if self.ctrl.type ~= WorldPointUIType.ActBoss then
        return
    end
    if data~=nil then
        local strArr = string.split(data,";")
        if #strArr>=4 then
            local uuid = tonumber(strArr[1])
            if uuid~=0 and uuid == self.ctrl.uuid then
                local initBlood = tonumber(strArr[4])
                local curBlood= tonumber(strArr[3])
                self.act_boss_obj:SetBloodSlider(curBlood,initBlood)
            end
        end
        
    end
end
local function CheckPlay(self)
    if self.btnCount <= table.count(self.buildBtnCells) then
        self.animIndex = 1
        self:AddTimer()
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function AddTimer(self)
    if self.timer == nil then
        local time = self.build_btn_anim:GetFloat("DuringTime")
        self.timer = TimerManager:GetInstance():GetTimer(time / 10, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

local function RefreshTime(self)
    if self.animIndex > 0 then
        if self.btnCount >= self.animIndex then
            local temp = self.buildBtnCells[self.btnList[self.animIndex]]
            if temp ~= nil then
                temp:PlayAnim(BtnAnim[self.btnCount][self.animIndex])
            end
            self.animIndex = self.animIndex + 1
        else
            self.animIndex = 0
            self:DeleteTimer()
            self:AddArrowTimer()
        end
    end
end

local function DeleteArrowTimer(self)
    if self.timerArrow ~= nil then
        self.timerArrow:Stop()
        self.timerArrow = nil
    end
    self.ctrl:SetIsArrow()
end

local function AddArrowTimer(self)
    if self.timerArrow == nil then
        self.timerArrow = TimerManager:GetInstance():GetTimer(0.3, self.timer_actionArrow , self, false,false,false)
    end
    self.timerArrow:Start()
end

local function RefreshArrowTime(self)
    local arrow =  self.ctrl:GetIsArrow()
    if arrow and arrow ~= 0 then
        for i, v in pairs(self.buildBtnCells) do
            if type(arrow) == "boolean" then
                self:ShowArrow(v)
                break
            else
                if i == arrow then
                    self:ShowArrow(v)
                end
            end
        end
    end
end

local function ShowArrow(self,v)
    self:DeleteArrowTimer()
    local param = {}
    param.position = v:GetPosition()
    param.arrowType = ArrowType.Capacity
    param.positionType = PositionType.Screen
    param.isPanel = true
    if param.position ~= nil then
        DataCenter.ArrowManager:ShowArrow(param)
    end
end

local function ShowMarkState(self)
    local dataList = DataCenter.WorldFavoDataManager:GetBookListByDef()
    local tile = BuildTilesSize.One
    if self.ctrl.type == WorldPointUIType.Build or self.ctrl.type == WorldPointUIType.City then
        if self.serverData~=nil then
            local buildTemplate = nil
            if self.ctrl.type == WorldPointUIType.City then
                buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(BuildingTypes.FUN_BUILD_MAIN)
            else
                buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.ctrl.buildId)
            end
            if buildTemplate ~= nil then
                tile = buildTemplate.tiles
            end
        end
    elseif self.info~=nil then
        local name = self.info.pointData.shareName
        if name~=nil then
            local buildTemplate = nil
            if self.ctrl.type == WorldPointUIType.City then
                buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(BuildingTypes.FUN_BUILD_MAIN)
            elseif self.ctrl.type == WorldPointUIType.AllianceMine then
                tile = self.info.pointData and self.info.pointData.size or BuildTilesSize.One
            else
                buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.ctrl.buildId)
            end
            if buildTemplate ~= nil then
                tile = buildTemplate.tiles
            end
        end
    end
    local iconPath = UIWorldTileTopBtnImage[UIWorldTileTopBtnType.Book]
    for i ,v in pairs(dataList) do
        if v.server == LuaEntry.Player:GetCurServerId() and (v.pos - tile)/10 == self.ctrl.pointId then
            iconPath = "Assets/Main/Sprites/UI/UISearch/UISearch_btn_collect"
            break
        end
    end
    if DataCenter.AllianceBaseDataManager:IsR4orR5() then
        iconPath = "Assets/Main/Sprites/UI/UISearch/UISearch_btn_leaderMark"
    end
    self.btnMarkImg:LoadSprite(iconPath)
end

local function OnMarkClick(self)
    if self.ctrl.type == WorldPointUIType.Build or self.ctrl.type == WorldPointUIType.City then
        if self.serverData~=nil then
            local name = self.serverData.shareName
            local tile = BuildTilesSize.One
            local buildTemplate = nil
            if self.ctrl.type == WorldPointUIType.City then
                buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(BuildingTypes.FUN_BUILD_MAIN)
            else
                buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.ctrl.buildId)
            end
            if buildTemplate ~= nil then
                tile = buildTemplate.tiles
            end

            local realPoint = self.ctrl.pointId * 10 + tile-- SceneUtils.WorldToTileIndex(self.worldPos)
            self.ctrl:OnMarkClick(LuaEntry.Player:GetCurServerId(),realPoint,name)
        end
    elseif self.info~=nil then
        local name = self.info.pointData.shareName
        if name~=nil then
            local tile = BuildTilesSize.One
            local buildTemplate = nil
            if self.ctrl.type == WorldPointUIType.City then
                buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(BuildingTypes.FUN_BUILD_MAIN)
            elseif self.ctrl.type == WorldPointUIType.AllianceMine or self.ctrl.type == WorldPointUIType.AllianceActMine then
                tile = self.info.pointData and self.info.pointData.size or BuildTilesSize.One
            else
                buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.ctrl.buildId)
            end
            if buildTemplate ~= nil then
                tile = buildTemplate.tiles
            end
            
            local realPoint = self.ctrl.pointId * 10 + tile-- SceneUtils.WorldToTileIndex(self.worldPos)
            self.ctrl:OnMarkClick(LuaEntry.Player:GetCurServerId(),realPoint,name,self.info.pointData.level)
        end
    end
end
local function OnShareClick(self)
    if self.ctrl.type == WorldPointUIType.Build or self.ctrl.type == WorldPointUIType.City then
        if self.serverData~=nil then
            local name = self.serverData.shareName
            self.ctrl:OnShareClick(LuaEntry.Player:GetCurServerId(),self.ctrl.pointId,name,nil)
        end
    elseif self.info~=nil then
        local name = self.info.pointData.shareName
        local olv = nil
        if self.ctrl.type == WorldPointUIType.Desert or self.ctrl.type == WorldPointUIType.Ruin then
            if self.info.pointData~=nil and self.info.pointData.level~=nil and self.info.pointData.level>0 then
                olv = self.info.pointData.level
            end
        end
        if name~=nil then
            self.ctrl:OnShareClick(LuaEntry.Player:GetCurServerId(),self.ctrl.pointId,name,olv)
        end
    end
end
local function OnDetailClick(self)
    if self.info~=nil then
        if self.ctrl.type == WorldPointUIType.Boss or self.ctrl.type == WorldPointUIType.Monster or self.ctrl.type == WorldPointUIType.Explore 
                or self.ctrl.type == WorldPointUIType.GuideEventMonster then
            if self.monster_obj~=nil then
                self.monster_obj:OnInfoClick() 
            end
            self.btn_detail:SetActive(false)
            self.btn_return:SetActive(true)
        elseif self.ctrl.type == WorldPointUIType.AllianceCollectPoint then
            if self.alliance_collect_obj~=nil then
                self.alliance_collect_obj:OnInfoClick()
            end
            self.btn_detail:SetActive(false)
            self.btn_return:SetActive(true)
        elseif self.ctrl.type == WorldPointUIType.AllianceMine or self.ctrl.type == WorldPointUIType.AllianceActMine then
            if self.allianceMinePanelN~=nil then
                self.allianceMinePanelN:OnInfoClick()
            end
        elseif self.ctrl.type == WorldPointUIType.Desert then
            if self.desert_obj~=nil then
                self.desert_obj:OnInfoClick()
            end
        elseif self.ctrl.type == WorldPointUIType.AllianceBuild then
            if self.allianceBuild~=nil then
                self.allianceBuild:OnInfoClick()
            end
        elseif self.ctrl.type == WorldPointUIType.AllianceBoss then
            if self.alliance_boss_obj~=nil then
                self.alliance_boss_obj:OnInfoClick()
            end
            self.btn_detail:SetActive(false)
            self.btn_return:SetActive(true)
        elseif self.ctrl.type~= WorldPointUIType.CollectPoint then
            if self.ctrl.ownerUid~=nil and self.ctrl.ownerUid~="" then
                if self.ctrl.ownerUid == LuaEntry.Player.uid then
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIPlayerInfo,{anim = true,UIMainAnim = UIMainAnimType.AllHide},self.ctrl.ownerUid)
                else
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UIOtherPlayerInfo,{anim = true,UIMainAnim = UIMainAnimType.AllHide},self.ctrl.ownerUid)
                end
                
                self.ctrl:CloseSelf()
            end
        end
    end
end

local function OnReturnClick(self)
    if self.info~=nil then
        if self.ctrl.type == WorldPointUIType.Boss or self.ctrl.type == WorldPointUIType.Monster or self.ctrl.type == WorldPointUIType.Explore 
                or self.ctrl.type == WorldPointUIType.GuideEventMonster then
            if self.monster_obj~=nil then
                self.monster_obj:OnReturnClick()
            end
            
            self.btn_detail:SetActive(true)
            self.btn_return:SetActive(false)
        elseif self.ctrl.type == WorldPointUIType.AllianceCollectPoint then
            if self.alliance_collect_obj~=nil then
                self.alliance_collect_obj:OnReturnClick()
            end
            self.btn_detail:SetActive(true)
            self.btn_return:SetActive(false)
        elseif self.ctrl.type == WorldPointUIType.AllianceBoss then
            if self.alliance_boss_obj~=nil then
                self.alliance_boss_obj:OnReturnClick()
            end
            self.btn_detail:SetActive(true)
            self.btn_return:SetActive(false)
        end
    end
end

local function RefreshRewardList(self, message)
    --if message["reward"] and #message["reward"] > 0 then
    --    local rewardList = DataCenter.RewardManager:ReturnRewardParamForMessage(message["reward"])
    --    self.info.pointData.rewardStr = self.ctrl:GetRewards(rewardList)
    --    --self.monster_obj:RefreshData(self.info.pointData)
    --    self.guide_garbage:RefreshData(self.info.pointData)
    --end
end

local function UpdateLod(self, lod)
    if lod >= 2 then
        self.ctrl:CloseSelf(false)
    end
end

local function ShowAssignState(self)
    self.btn_assign:SetActive(false)
    if self.ctrl.type == WorldPointUIType.City then
        local info = DataCenter.WorldPointManager:GetBuildDataByUuid(self.ctrl.uuid)
        if info ~= nil then
            if info.ownerUid ~=LuaEntry.Player.uid then
                local canAppoint = DataCenter.GovernmentManager:IsSelfPresidentAndInSelfServer()
                if canAppoint then
                    self.btn_assign:SetActive(true)
                end
            end
        end
    end
end

local function OnAssignClick(self)
    if not string.IsNullOrEmpty(self.ctrl.ownerUid) then
        local serverData = self.ctrl:GetPlayerData(self.ctrl.pointId)
        if serverData and serverData.playerData then
            local para = {}
            para.ownerUid = serverData.playerData.uid
            para.name = serverData.playerData.name
            para.pic = serverData.playerData.pic
            para.picVer = serverData.playerData.picVer
            para.headSkinId = serverData.playerData.headSkinId
            para.headSkinET = serverData.playerData.headSkinET
            para.power = serverData.playerData.power
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIPositionAppoint, { anim = true, UIMainAnim = UIMainAnimType.AllHide }, para)
        end
    end
end

function UIWorldPointView:RefreshCenterText()
    local showText = ""
    if self.ctrl.type == WorldPointUIType.PuzzleBoss then
        local radarMarch = DataCenter.RadarBossManager:GetPuzzleMarchByUuid(self.ctrl.uuid)
        if radarMarch ~= nil then
            showText = Localization:GetString(GameDialogDefine.DAILY_CAN_GET_REWARD_TIME_WITH, DataCenter.RadarBossManager:GetDailyLeftGetRewardTime())
        end
    end

    if showText ~= "" then
        self.center_text_go:SetActive(true)
        self.center_text:SetText(showText)
    else
        self.center_text_go:SetActive(false)
    end
end


function UIWorldPointView:RefreshRadarBossDailyRewardCountSignal()
    self:RefreshCenterText()
end

function UIWorldPointView:CheckSendMessage()
    if self.ctrl.type == WorldPointUIType.PuzzleBoss then
        local radarMarch = DataCenter.RadarBossManager:GetPuzzleMarchByUuid(self.ctrl.uuid)
        if radarMarch ~= nil then
            DataCenter.RadarBossManager:SendGetRadarBossRewardCount()
        end
    end
end


UIWorldPointView.OnCreate = OnCreate
UIWorldPointView.OnDestroy = OnDestroy
UIWorldPointView.OnEnable = OnEnable
UIWorldPointView.OnDisable = OnDisable
UIWorldPointView.ComponentDefine = ComponentDefine
UIWorldPointView.ComponentDestroy = ComponentDestroy
UIWorldPointView.DataDefine = DataDefine
UIWorldPointView.DataDestroy = DataDestroy
UIWorldPointView.OnAddListener = OnAddListener
UIWorldPointView.OnRemoveListener = OnRemoveListener
UIWorldPointView.ReInit = ReInit
UIWorldPointView.ShowTopBtn = ShowTopBtn
UIWorldPointView.ShowBtn = ShowBtn
UIWorldPointView.RefreshUIWorldPointViewSignal = RefreshUIWorldPointViewSignal
UIWorldPointView.CheckPlay = CheckPlay
UIWorldPointView.DeleteTimer = DeleteTimer
UIWorldPointView.AddTimer = AddTimer
UIWorldPointView.RefreshTime = RefreshTime
UIWorldPointView.SetAllCellDestroy = SetAllCellDestroy
UIWorldPointView.SetData = SetData
UIWorldPointView.OnReturnClick =OnReturnClick
UIWorldPointView.OnDetailClick = OnDetailClick
UIWorldPointView.ShowMarkState = ShowMarkState
UIWorldPointView.OnMarkClick =OnMarkClick
UIWorldPointView.OnShareClick =OnShareClick
UIWorldPointView.RefreshRewardList = RefreshRewardList
UIWorldPointView.UpdateLod = UpdateLod
UIWorldPointView.InjuryAllianceCheck = InjuryAllianceCheck
UIWorldPointView.InjuryBuildCheck = InjuryBuildCheck
UIWorldPointView.OnClickInjuryTips = OnClickInjuryTips
UIWorldPointView.ShowGuideGarbage = ShowGuideGarbage
UIWorldPointView.DeleteArrowTimer = DeleteArrowTimer
UIWorldPointView.AddArrowTimer = AddArrowTimer
UIWorldPointView.RefreshArrowTime = RefreshArrowTime
UIWorldPointView.ShowArrow = ShowArrow
UIWorldPointView.UpdateActBossBlood = UpdateActBossBlood
UIWorldPointView.OnAssignClick = OnAssignClick
UIWorldPointView.ShowAssignState = ShowAssignState
UIWorldPointView.GetInfoAssertPath = GetInfoAssertPath
UIWorldPointView.RemoveAllComponent =RemoveAllComponent
UIWorldPointView.RefreshEdenMissileNum = RefreshEdenMissileNum
return UIWorldPointView