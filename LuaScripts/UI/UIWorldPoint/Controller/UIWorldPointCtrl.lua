---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/27 18:56
---
local UIWorldPointCtrl = BaseClass("UIWorldPointCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization

local function CloseSelf(self,hidAnim)
    if hidAnim~=nil and hidAnim == true then
        UIManager.Instance:DestroyWindow(UIWindowNames.UIWorldPoint, {anim = false,playEffect = false, UIMainAnim = UIMainAnimType.ChangeAllShow})
    else
        UIManager.Instance:DestroyWindow(UIWindowNames.UIWorldPoint)
    end
end

local function InitData(self,uuid,pointId,ownerUid,type,isAlliance,buildId,isArrow,desertId, allianceUuid)
    self.uuid = tonumber(uuid) or 0
    self.pointId = tonumber(pointId) or -1
    self.ownerUid = ownerUid
    self.type = tonumber(type)
    self.isAlliance = (tonumber(isAlliance) == 1)
    self.buildId = tonumber(buildId) or 0
    self.desertId = tonumber(desertId) or 0
    self.isArrow = tonumber(isArrow) or 0
    self.allianceUuid = allianceUuid or ""
    local serverId = LuaEntry.Player:GetCurServerId()
    if self.type == WorldPointUIType.City or self.type == WorldPointUIType.Build
            or self.type == WorldPointUIType.CollectPoint or self.type == WorldPointUIType.AllianceCollectPoint
            or self.type == WorldPointUIType.Desert or self.type == WorldPointUIType.AllianceMine or self.type == WorldPointUIType.AllianceActMine or self.type == WorldPointUIType.AllianceBuild or self.type == WorldPointUIType.Ruin then
        SFSNetwork.SendMessage(MsgDefines.WorldGetDetail, self.pointId, serverId, LuaEntry.Player:GetCurWorldId())
        if self.type == WorldPointUIType.AllianceMine then
            DataCenter.AllianceMineManager:RequestAlMineMarchList(self.uuid)
        end
        if self.type == WorldPointUIType.AllianceActMine then
            if LuaEntry.Player:IsInAlliance() then
                SFSNetwork.SendMessage(MsgDefines.GetActMinePlunderRes)
            end
        end
    elseif self.type == WorldPointUIType.ActBoss or self.type == WorldPointUIType.AllianceBoss or self.type == WorldPointUIType.PuzzleBoss or self.type == WorldPointUIType.ChallengeBoss then
        SFSNetwork.SendMessage(MsgDefines.WorldGetDetail, self.pointId, serverId, LuaEntry.Player:GetCurWorldId())
    end
    if self.type == WorldPointUIType.ActBoss then
        WorldBossBloodTipManager:GetInstance():SetViewOpen(self.uuid)
    elseif self.type == WorldPointUIType.AllianceBoss then
        AllianceBossBloodTipManager:GetInstance():SetViewOpen(self.uuid)
    end
    
end

local function GetIsArrow(self)
    return self.isArrow
end

local function SetIsArrow(self)
     self.isArrow = nil
end


local function GetMonsterData(self,uuid)
    local oneData = {}
    oneData.uuid = uuid
    oneData.canAttack = 0
    --local troop = WorldTroopManager:GetInstance():GetTroop(uuid)
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
    local marchInfo = nil
    if pointInfo~=nil then
        marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
    end
    if marchInfo~=nil then
        oneData.point = pointInfo.pointIndex
        oneData.refreshTime = marchInfo.refreshTime*1000
        local monsterId = marchInfo.monsterId
        local monster= DataCenter.MonsterTemplateManager:GetMonsterTemplate(monsterId)
        if monster~=nil then
            if marchInfo.type == NewMarchType.MONSTER then
                self.type = WorldPointUIType.Monster
            elseif marchInfo.type == NewMarchType.BOSS then
                self.type = WorldPointUIType.Boss
            end
            local lv = monster:getValue("level")
            oneData.level = tonumber(lv)
            oneData.eventId = ""--marchInfo.eventId
            local normalInfo = PBController.ParsePbFromBytes(marchInfo.monsterExtraInfo, "protobuf.NormalMonsterInfo")
            if normalInfo~=nil and normalInfo.eventId~=nil then
                oneData.eventId = normalInfo.eventId
            end
            local isFirstKill = false
            if DataCenter.MonsterManager:GetCurCanAttackMaxLevel() >= oneData.level then
                oneData.canAttack =1
            end
            if DataCenter.MonsterManager:GetCurCanAttackMaxLevel() <= oneData.level and LuaEntry.Player.pveLevel + 1 < DataCenter.MonsterManager:GetCanFindMonsterMaxLevel() then
                isFirstKill = true
            end
            oneData.isFirstKill = isFirstKill
            if not string.IsNullOrEmpty(oneData.eventId) then
                oneData.canAttack = 1
            end
            local configOpenState = LuaEntry.DataConfig:CheckSwitch("detect_monster")
            if configOpenState then
                oneData.canAttack = 1
            end
            oneData.restNum = DataCenter.MonsterManager:GetRestKillBossNum()
            oneData.name  = monster:getValue("name")
            oneData.shareName = monster:getValue("name")
            oneData.des = monster:getValue("desc")
            oneData.recommend_power = ""
            oneData.limit = monster:getValue("limit")
            local recommend_power = DataCenter.MonsterTemplateManager:GetRecommendPower(monsterId)
            if recommend_power>0 then
                oneData.recommend_power = Localization:GetString("300644",string.GetFormattedSeperatorNum(recommend_power))
            end
            if DataCenter.MonsterTemplateManager:GetNeedArmyLevel(monsterId) <= 1 then
                oneData.needArmyDesc = Localization:GetString("400018", DataCenter.MonsterTemplateManager:GetNeedArmyCount(monsterId))
            elseif DataCenter.MonsterTemplateManager:GetNeedArmyLevel(monsterId) > 1 then
                oneData.needArmyDesc = Localization:GetString("400019", DataCenter.MonsterTemplateManager:GetNeedArmyLevel(monsterId), DataCenter.MonsterTemplateManager:GetNeedArmyCount(monsterId))
            end
            oneData.exp = monster:getValue("exp") or 0
            local belongUid = marchInfo.belongUid
            oneData.belongSelf = false
            if belongUid~=nil and belongUid~="" and belongUid == LuaEntry.Player.uid then
                oneData.belongSelf = true
            end
            oneData.firstRewardStr = {}
            oneData.rewardStr = {}

            -- 英雄驻扎额外经验
            oneData.exp = DataCenter.HeroStationManager:CalcEffectedValue(oneData.exp, HeroStationEffectType.HeroExp)
            oneData.exp = Mathf.Round(oneData.exp)
            
            local reward = DataCenter.MonsterTemplateManager:GetShowReward(monsterId)
            local rewardList = {}
            for i = 1, table.count(reward) do
                table.insert(rewardList,reward[i])
            end
            local firstCount = 0
            if isFirstKill then
                local firstReward = DataCenter.MonsterTemplateManager:GetFirstShowReward(monsterId)
                local firstList = string.split(firstReward,"|")
                firstCount = table.count(firstList)
                for i = table.count(firstList),1,-1  do
                    table.insert(rewardList,1,firstList[i])
                end
            end
            table.walk(rewardList,function (k,v)
                local str = v
                if str~=nil and str~="" then
                    local strVec = string.split(str,";")
                    if #strVec>2 then
                        local id = tonumber(strVec[1])
                        local rewardType = tonumber(strVec[2])
                        local num = tonumber(strVec[3])
                        local item = {}
                        item.firstKill = false
                        if isFirstKill and k <= firstCount then
                            item.firstKill = true
                        end
                        if rewardType ==  RewardType.GOODS then
                            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                            if goods~=nil then
                                item.itemId = id
                                item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                                item.count = num
                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                                item.rewardType = rewardType
                                item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                                item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                                item.isLocal = true
                                --item.itemName = goods.name
                                --item.itemDesc = goods.description
                                local itemType = goods.type
                                if itemType == 2 then -- SPD
                                    if goods.para1 ~= nil and goods.para1 ~= "" then
                                        local para1 = goods.para1
                                        local temp = string.split(para1,';')
                                        if temp ~= nil and #temp > 1 then
                                            item.itemFlag = temp[1]..temp[2]
                                        end
                                    end
                                elseif itemType == 3 then -- USE
                                    local type2 = goods.type2
                                    if type2 ~= 999 and goods.para ~= nil then
                                        local res_num = tonumber(goods.para)
                                        item.itemFlag = string.GetFormattedStr(res_num)
                                    end
                                end
                                if item.firstKill == true then
                                    table.insert(oneData.firstRewardStr,item)
                                else
                                    table.insert(oneData.rewardStr,item)
                                end
                               
                            end
                        else
                            local resourceType = RewardToResType[rewardType]
                            if resourceType~=nil then
                                item.itemId = id
                                item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                                item.rewardType = rewardType
                                item.itemDesc = CommonUtil.GetResourceDescriptionByType(resourceType)
                                item.count = num
                                item.itemName = DataCenter.ResourceManager:GetResourceNameByType(resourceType)
                                item.isLocal = true
                                if item.firstKill == true then
                                    table.insert(oneData.firstRewardStr,item)
                                else
                                    table.insert(oneData.rewardStr,item)
                                end
                            end
                        end
                    end
                end
                
            end)
        end
    end
    return oneData

end

local function GetChallengeBossData(self,uuid)
    local oneData = {}
    oneData.uuid = uuid
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
    local marchInfo = nil
    if pointInfo~=nil then
        marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
    end
    if marchInfo~=nil then
        oneData.point = pointInfo.pointIndex
        oneData.refreshTime = marchInfo.refreshTime*1000
        oneData.ownerName = marchInfo.ownerName
        oneData.bossOwnerUid = ""
        oneData.callHelp = 0
        oneData.allianceUid = ""
        local normalInfo = PBController.ParsePbFromBytes(marchInfo.monsterExtraInfo, "protobuf.ChallengeBossInfo")
        if normalInfo~=nil then
            oneData.bossOwnerUid = normalInfo.bossOwnerUid
            oneData.callHelp = normalInfo.callHelp
            oneData.allianceUid = normalInfo.allianceId
        end
        local monsterId = marchInfo.monsterId
        local monster= DataCenter.MonsterTemplateManager:GetMonsterTemplate(monsterId)
        if monster~=nil then
            oneData.name  = monster:getValue("name")
            oneData.shareName = monster:getValue("name")
            oneData.des = monster:getValue("desc")
            oneData.size = monster:getValue("size")
            oneData.level = monster:getValue("level")
            oneData.rewardStr = {}
            local reward = DataCenter.MonsterTemplateManager:GetShowReward(monsterId)
            table.walk(reward,function (k,v)
                local str = v
                if str~=nil and str~="" then
                    local strVec = string.split(str,";")
                    if #strVec>2 then
                        local id = tonumber(strVec[1])
                        local rewardType = tonumber(strVec[2])
                        local num = tonumber(strVec[3])
                        if rewardType ==  RewardType.GOODS then
                            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                            if goods~=nil then
                                local item = {}
                                item.itemId = id
                                item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                                item.count = num
                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                                item.rewardType = rewardType
                                item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                                item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                                item.isLocal = true
                                --item.itemName = goods.name
                                --item.itemDesc = goods.description
                                local itemType = goods.type
                                if itemType == 2 then -- SPD
                                    if goods.para1 ~= nil and goods.para1 ~= "" then
                                        local para1 = goods.para1
                                        local temp = string.split(para1,';')
                                        if temp ~= nil and #temp > 1 then
                                            item.itemFlag = temp[1]..temp[2]
                                        end
                                    end
                                elseif itemType == 3 then -- USE
                                    local type2 = goods.type2
                                    if type2 ~= 999 and goods.para ~= nil then
                                        local res_num = tonumber(goods.para)
                                        item.itemFlag = string.GetFormattedStr(res_num)
                                    end
                                end
                                table.insert(oneData.rewardStr,item)
                            end
                        else
                            local resourceType = RewardToResType[rewardType]
                            if resourceType~=nil then
                                local item = {}
                                item.itemId = id
                                item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                                item.rewardType = rewardType
                                item.count = num
                                item.itemName = ResourceTypeTxt[rewardType]
                                item.isLocal = false
                                table.insert(oneData.rewardStr,item)
                            end

                        end
                    end
                end

            end)
        end
    end
    return oneData
end

local function GetPuzzleBossData(self, uuid)
    local oneData = {}
    oneData.uuid = uuid
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
    local marchInfo = nil
    if pointInfo~=nil then
        marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
    end
    if marchInfo~=nil then
        oneData.point = pointInfo.pointIndex
        --oneData.startTime = marchInfo.actStartTime
        --oneData.endTime = marchInfo.actEndTime
        --oneData.curBlood = marchInfo:GetHP()
        --oneData.maxBlood = marchInfo:GetMaxHP()
        oneData.icon = ""
        local monsterId = marchInfo.monsterId
        local monster= DataCenter.ActivityPuzzleMonsterTemplateManager:GetTemplateByMonsterId(monsterId)
        if monster ~= nil then
            oneData.name  = monster.name
            oneData.shareName = monster.name
            oneData.des = "372250"
            oneData.isPuzzleMonster = true
            --oneData.size = monster.size
        end
    end
    return oneData
end

local function GetActBossData(self,uuid)
    local oneData = {}
    oneData.uuid = uuid
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
    local marchInfo = nil
    if pointInfo~=nil then
        marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
    end
    if marchInfo~=nil then
        oneData.point = pointInfo.pointIndex
        --oneData.startTime = marchInfo.actStartTime
        --oneData.endTime = marchInfo.actEndTime
        --oneData.curBlood = marchInfo:GetHP()
        --oneData.maxBlood = marchInfo:GetMaxHP()
        --local cacheData = WorldBossBloodTipManager:GetInstance():GetBloodCacheByUuid(uuid)
        --if cacheData~=nil and cacheData.curBlood>=0 then
        --    oneData.curBlood = cacheData.curBlood
        --    oneData.maxBlood = cacheData.maxBlood
        --end

        local cacheData = AllianceBossBloodTipManager:GetInstance():GetBloodCacheByUuid(uuid)
        if cacheData~=nil and cacheData.curBlood>=0 then
            oneData.curBlood = cacheData.curBlood
            oneData.maxBlood = cacheData.maxBlood
        end

        oneData.icon = ""
        local monsterId = marchInfo.monsterId
        local monster= DataCenter.MonsterTemplateManager:GetMonsterTemplate(monsterId)
        if monster~=nil then
            oneData.name  = monster:getValue("name")
            oneData.shareName = monster:getValue("name")
            oneData.des = monster:getValue("desc")
            oneData.size = monster:getValue("size")
        end
    end
    return oneData
end

local function GetMonsterRewardData(self,pointId)
    local oneData = {}
    oneData.point = pointId
    oneData.isInCity = false
    local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if info~=nil then
        local collectRewardInfo = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.CollectRewardInfo")
        if collectRewardInfo~=nil then
            oneData.uuid = info.uuid
            oneData.refreshTime = collectRewardInfo["expireTime"]
            local monsterId = collectRewardInfo["contentId"]
            local monster= DataCenter.MonsterTemplateManager:GetMonsterTemplate(tonumber(monsterId))
            if monster~=nil then
                oneData.monsterId = monsterId
                oneData.level = monster:getValue("level")
                oneData.shareName = monster:getValue("name")
                oneData.name  = monster:getValue("name")
                oneData.des = monster:getValue("desc")
                oneData.exp = monster:getValue("exp") or 0
                oneData.recommend_power = ""
                local recommend_power = DataCenter.MonsterTemplateManager:GetRecommendPower(monsterId)
                if recommend_power>0 then
                    oneData.recommend_power = Localization:GetString("300644",string.GetFormattedSeperatorNum(recommend_power))
                end
                if DataCenter.MonsterTemplateManager:GetNeedArmyLevel(monsterId) <= 1 then
                    oneData.needArmyDesc = Localization:GetString("400018", DataCenter.MonsterTemplateManager:GetNeedArmyCount(monsterId))
                elseif DataCenter.MonsterTemplateManager:GetNeedArmyLevel(monsterId) > 1 then
                    oneData.needArmyDesc = Localization:GetString("400019", DataCenter.MonsterTemplateManager:GetNeedArmyLevel(monsterId), DataCenter.MonsterTemplateManager:GetNeedArmyCount(monsterId))
                end
                oneData.rewardStr = {}

                -- 英雄驻扎额外经验
                oneData.exp = DataCenter.HeroStationManager:CalcEffectedValue(oneData.exp, HeroStationEffectType.HeroExp)
                oneData.exp = Mathf.Round(oneData.exp)

                local reward = DataCenter.MonsterTemplateManager:GetShowReward(monsterId)
                table.walk(reward,function (k,v)
                    local str = v
                    if str~=nil and str~="" then
                        local strVec = string.split(str,";")
                        if #strVec>2 then
                            local id = tonumber(strVec[1])
                            local rewardType = tonumber(strVec[2])
                            local num = tonumber(strVec[3])
                            if rewardType ==  RewardType.GOODS then
                                local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                                if goods~=nil then
                                    local item = {}
                                    item.itemId = id
                                    item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                                    item.count = num
                                    item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                                    item.rewardType = rewardType
                                    item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                                    item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                                    item.isLocal = true
                                    --item.itemName = goods.name
                                    --item.itemDesc = goods.description
                                    local itemType = goods.type
                                    if itemType == 2 then -- SPD
                                        if goods.para1 ~= nil and goods.para1 ~= "" then
                                            local para1 = goods.para1
                                            local temp = string.split(para1,';')
                                            if temp ~= nil and #temp > 1 then
                                                item.itemFlag = temp[1]..temp[2]
                                            end
                                        end
                                    elseif itemType == 3 then -- USE
                                        local type2 = goods.type2
                                        if type2 ~= 999 and goods.para ~= nil then
                                            local res_num = tonumber(goods.para)
                                            item.itemFlag = string.GetFormattedStr(res_num)
                                        end
                                    end
                                    table.insert(oneData.rewardStr,item)
                                end
                            else
                                local resourceType = RewardToResType[rewardType]
                                if resourceType~=nil then
                                    local item = {}
                                    item.itemId = id
                                    item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                                    item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                                    item.rewardType = rewardType
                                    item.count = num
                                    item.itemName = ResourceTypeTxt[rewardType]
                                    item.isLocal = false
                                    table.insert(oneData.rewardStr,item)
                                end

                            end
                        end
                    end
                end)
            end
        end
    end
    return oneData
end

local function GetRewards(self, rewardList)
    local reward = {}
    if rewardList == nil then
        return reward
    end
    table.walk(rewardList, function (_, v)
        local item = {}
        item.count = v.count
        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.WHITE)
        item.rewardType = v.rewardType
        local desc = DataCenter.RewardManager:GetDescByType(v.rewardType, v.itemId)
        local name = DataCenter.RewardManager:GetNameByType(v.rewardType, v.itemId)
        item.itemName = name
        item.itemDesc = desc
        item.isLocal = true
        if v.rewardType == RewardType.GOODS then
            if v.itemId ~= nil then
                --物品或英雄
                --item.itemName = Localization:GetString(name)
                local goods = DataCenter.ItemTemplateManager:GetItemTemplate(v.itemId)
                if goods ~= nil then
                    local join_method = -1
                    local icon_join = nil
                    if goods.join_method ~= nil and goods.join_method > 0 and goods.icon_join ~= nil and goods.icon_join ~= "" then
                        join_method = goods.join_method
                        icon_join = goods.icon_join
                    end

                    if join_method > 0 and icon_join ~= nil and icon_join ~= "" then
                        local tempJoin = string.split(icon_join, ";")
                        if #tempJoin > 1 then
                            item.itemColor = tempJoin[2]
                        end
                        if #tempJoin > 2 then
                            item.iconName = tempJoin[3]
                        end
                    else
                        --物品
                        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                        local itemType = goods.type
                        if itemType == 2 then
                            -- SPD
                            if goods.para1 ~= nil and goods.para1 ~= "" then
                                local para1 = goods.para1
                                local temp = string.split(para1, ';')
                                if temp ~= nil and #temp > 1 then
                                    item.itemFlag = temp[1] .. temp[2]
                                end
                            end
                        elseif itemType == 3 then
                            -- USE
                            local type2 = goods.type2
                            if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                                local res_num = tonumber(goods.para)
                                item.itemFlag = string.GetFormattedStr(res_num)
                            end
                        end

                        item.iconName = string.format(LoadPath.ItemPath, goods.icon)
                    end
                end
            end
        elseif v.rewardType == RewardType.GOLD then
            item.iconName = DataCenter.ResourceManager:GetResourceIconByType(ResourceType.Gold)
            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.PURPLE)
        elseif v.rewardType == RewardType.OIL or v.rewardType == RewardType.METAL or v.rewardType == RewardType.FORMATION_STAMINA
                or v.rewardType == RewardType.WATER or v.rewardType == RewardType.PVE_POINT or v.rewardType == RewardType.DETECT_EVENT
                or v.rewardType == RewardType.MONEY or v.rewardType == RewardType.ELECTRICITY then
            item.iconName = DataCenter.RewardManager:GetPicByType(v.rewardType)
            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.PURPLE)
        end
        table.insert(reward, item)
    end)
    return reward
end

local function GetExploreData(self)
    local oneData = {}
    oneData.uuid = self.uuid
    oneData.canAttack = 1
    
    local data = DataCenter.RadarCenterDataManager:GetDetectEventInfo(self.uuid)
    if data == nil then
        return oneData
    end
    local template = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(data.eventId)
    if template == nil then
        return oneData
    end
    oneData.shareName = template:getValue("name")
    oneData.name = DataCenter.DetectEventTemplateManager:GetRealName(data.eventId)
    oneData.isRawName = true
    oneData.des = template:getValue("description")
    oneData.recommend_power = ""
    local recommend_power = template:getValue("para")
    if recommend_power>0 then
        oneData.recommend_power = Localization:GetString("300644",string.GetFormattedSeperatorNum(recommend_power))
    end
    if template.type == DetectEventType.HeroTrial then
        oneData.recommend_power = Localization:GetString("140078", template:getValue("para"))
    end
    --local needArmy = monster.needArmy
    --if needArmy.level <= 1 then
    --    oneData.needArmyDesc = Localization:GetString("400018", needArmy.count)
    --elseif needArmy.level > 1 then
    --    oneData.needArmyDesc = Localization:GetString("400019", needArmy.level, needArmy.count)
    --end
    
    -- 奖励从 monster 表获取 2024/1/11 扬骋
    --oneData.rewardStr = self:GetRewards(data.rewardList)
    oneData.rewardStr = {}
    local levelId = tonumber(template.para2)
    local monsterId = GetTableData(TableName.Pve, levelId, "monster")
    local reward = DataCenter.MonsterTemplateManager:GetShowReward(monsterId)
    table.walk(reward,function (k,v)
        local str = v
        if str~=nil and str~="" then
            local strVec = string.split(str,";")
            if #strVec>2 then
                local id = tonumber(strVec[1])
                local rewardType = tonumber(strVec[2])
                local num = tonumber(strVec[3])
                if rewardType ==  RewardType.GOODS then
                    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                    if goods~=nil then
                        local item = {}
                        item.itemId = id
                        item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                        item.count = num
                        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                        item.rewardType = rewardType
                        item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                        item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                        item.isLocal = true
                        --item.itemName = goods.name
                        --item.itemDesc = goods.description
                        local itemType = goods.type
                        if itemType == 2 then -- SPD
                            if goods.para1 ~= nil and goods.para1 ~= "" then
                                local para1 = goods.para1
                                local temp = string.split(para1,';')
                                if temp ~= nil and #temp > 1 then
                                    item.itemFlag = temp[1]..temp[2]
                                end
                            end
                        elseif itemType == 3 then -- USE
                            local type2 = goods.type2
                            if type2 ~= 999 and goods.para ~= nil then
                                local res_num = tonumber(goods.para)
                                item.itemFlag = string.GetFormattedStr(res_num)
                            end
                        end
                        table.insert(oneData.rewardStr,item)
                    end
                else
                    local resourceType = RewardToResType[rewardType]
                    if resourceType~=nil then
                        local item = {}
                        item.itemId = id
                        item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                        item.rewardType = rewardType
                        item.count = num
                        item.itemName = ResourceTypeTxt[rewardType]
                        item.isLocal = false
                        table.insert(oneData.rewardStr,item)
                    end

                end
            end
        end

    end)
    
    return oneData
end

local function GetSampleData(self)
    local oneData = {}
    oneData.uuid = self.uuid

    local data = DataCenter.RadarCenterDataManager:GetDetectEventInfo(self.uuid)
    if data == nil then
        return oneData
    end
    local template = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(data.eventId)
    if template == nil then
        return oneData
    end
    oneData.refreshTime = data.endTime
    oneData.shareName = template:getValue("name")
    oneData.name = DataCenter.DetectEventTemplateManager:GetRealName(data.eventId)
    oneData.isRawName = true
    oneData.des = template:getValue("description")
    local k10 = LuaEntry.DataConfig:TryGetNum("car_action_stamina", "k10")
    oneData.tip = Localization:GetString("140070")
    oneData.tip_1 = tostring(k10)
    oneData.belongSelf = true
    oneData.rewardStr = self:GetRewards(data.rewardList)
    oneData.icon = LoadPath.GarbageIconsPath..template:getValue("pic")..".png"
    return oneData
end

local function GetGarbageData(self)
    local oneData = {}
    oneData.uuid = self.uuid

    local data = DataCenter.WorldPointManager:GetGarbagePointInfoByIndex(self.pointId)
    
    if data == nil then
        return oneData
    end
    local template = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(data.eventId)
    if template == nil then
        return oneData
    end
    oneData.shareName = template:getValue("name")
    oneData.name = DataCenter.DetectEventTemplateManager:GetRealName(data.eventId)
    oneData.isRawName = true
    oneData.des = template:getValue("description")
    oneData.refreshTime = data.endTime
    oneData.icon = LoadPath.GarbageIconsPath..template:getValue("pic")..".png"
    local k8 = LuaEntry.DataConfig:TryGetNum("car_action_stamina", "k8")
    oneData.tip = Localization:GetString("140070")
    oneData.tip_1 = tostring(k8)
    local detail = DataCenter.WorldPointDetailManager:GetDetailByPointId(self.pointId)
    if detail == nil then
        SFSNetwork.SendMessage(MsgDefines.WorldGetDetail, self.pointId,LuaEntry.Player:GetCurServerId(),LuaEntry.Player:GetCurWorldId())
        return oneData
    else
        if detail.reward == nil or table.count(detail.reward) == 0 then
            SFSNetwork.SendMessage(MsgDefines.WorldGetDetail, self.pointId,LuaEntry.Player:GetCurServerId(),LuaEntry.Player:GetCurWorldId())
        else
            oneData.rewardStr = self:GetRewards(detail.reward)
        end
    end
    return oneData
end

local function GetPointData(self)
    local oneData = {}
    oneData.pointData = {}
    oneData.btnList ={}
    if self.type == WorldPointUIType.Monster then
        oneData.pointData = self:GetMonsterData(self.uuid)
        if self.type == WorldPointUIType.Monster then
            if oneData.pointData.canAttack == 1 then
                table.insert(oneData.btnList,WorldPointBtnType.AttackMonster)
            else
                table.insert(oneData.btnList,WorldPointBtnType.Search) 
            end
        elseif self.type == WorldPointUIType.Boss then
            if CrossServerUtil:GetIsCrossServer()==false then
                table.insert(oneData.btnList,WorldPointBtnType.RallyBoss)
            end
        end
    elseif self.type == WorldPointUIType.ActBoss then
        oneData.pointData = self:GetActBossData(self.uuid)
        --table.insert(oneData.btnList, WorldPointBtnType.TransPos)
        if CrossServerUtil:GetIsCrossServer()==false then
            table.insert(oneData.btnList, WorldPointBtnType.AttackActBoss)
            table.insert(oneData.btnList, WorldPointBtnType.CheckActBossRank)
        end
        
    elseif self.type == WorldPointUIType.PuzzleBoss then
        oneData.pointData = self:GetPuzzleBossData(self.uuid)
        --table.insert(oneData.btnList, WorldPointBtnType.TransPos)
        if CrossServerUtil:GetIsCrossServer()==false then
            table.insert(oneData.btnList, WorldPointBtnType.AttackPuzzleBoss)
            table.insert(oneData.btnList, WorldPointBtnType.CheckPuzzleBossRank)
        end
    elseif self.type == WorldPointUIType.City then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(self.uuid)
        oneData.pointData = info
        if info ~= nil then
            local build = DataCenter.WorldPointManager:GetBuildDataByUuid(self.uuid)
            if build.ownerUid ~=LuaEntry.Player.uid then
                if self.isAlliance == true then
                    local helpDetectData = DataCenter.RadarCenterDataManager:GetHelperEventDataByBuildUid(self.uuid)
                    -- 有帮助事件，隐藏其他按钮
                    if helpDetectData ~= nil and helpDetectData.state == DetectEventState.DETECT_EVENT_STATE_NOT_FINISH then
                        table.insert(oneData.btnList,WorldPointBtnType.HelperDetect)
                    else
                        if CrossServerUtil:GetIsCrossServer()==false then
                            --MK_临时关闭联盟资源援助
                            --table.insert(oneData.btnList,WorldPointBtnType.ResourceHelp)
                            table.insert(oneData.btnList,WorldPointBtnType.AssistanceCity)
                        end
                    end
                else
                    table.insert(oneData.btnList,WorldPointBtnType.ScoutCity)
                    if CrossServerUtil:GetIsCrossServer()==false then
                        table.insert(oneData.btnList,WorldPointBtnType.RallyCity)
                    end
                    table.insert(oneData.btnList,WorldPointBtnType.AttackCity)
                    if DataCenter.MissileManager:CanCreateMissile(info.allianceId, MissileIDs.ALLIANCE_FIGHT_SEND_MISSILE) then
                        local missileInfo = DataCenter.MissileManager:GetMissileInfo(MissileIDs.ALLIANCE_FIGHT_SEND_MISSILE)
                        if missileInfo then
                            table.insert(oneData.btnList, WorldPointBtnType.Missile)
                        end
                    end
                    if CrossServerUtil:GetIsCrossServer()==false and LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
                        local isR4orR5 = DataCenter.AllianceBaseDataManager:IsR4orR5()
                        if isR4orR5 == true then
                            DataCenter.MissileManager:GetEdenMissileInfo()
                            table.insert(oneData.btnList, WorldPointBtnType.EdenAllianceMissile)
                        end
                    end
                end
                table.insert(oneData.btnList,WorldPointBtnType.PlayerInfo)
                --local canAppoint = DataCenter.GovernmentManager:IsSelfPresident()
                --if canAppoint then
                --    table.insert(oneData.btnList, WorldPointBtnType.AppointPosition)
                --end
            else
                --if DataCenter.DecorationDataManager:IsSystemOpen() then
                --    table.insert(oneData.btnList, WorldPointBtnType.Decoration)
                --end
                table.insert(oneData.btnList,WorldPointBtnType.GoBackToCity)
                table.insert(oneData.btnList,WorldPointBtnType.City_Defence)
                if WorldMarchEmotionManager:GetInstance():Enabled() then
                    table.insert(oneData.btnList, WorldPointBtnType.Emotion)
                end
            end
        end
    elseif self.type == WorldPointUIType.Build then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(self.uuid)
        if info ~= nil then
            local build = DataCenter.WorldPointManager:GetBuildDataByUuid(self.uuid)
            if build~=nil and build.destroyStartTime<=0 and build.ownerUid ~=LuaEntry.Player.uid then
                if self.isAlliance == true then
                    --table.insert(oneData.btnList,WorldPointBtnType.ResourceHelp)
                    table.insert(oneData.btnList,WorldPointBtnType.AssistanceBuild)
                else
                    table.insert(oneData.btnList,WorldPointBtnType.ScoutBuild)
                    if CrossServerUtil:GetIsCrossServer()==false then
                        table.insert(oneData.btnList,WorldPointBtnType.RallyBuild)
                    end
                    table.insert(oneData.btnList,WorldPointBtnType.AttackBuild)
                end
            end
        end
    elseif self.type == WorldPointUIType.CollectPoint then
        oneData.pointData = self:GetResourceData(self.pointId)
        table.insert(oneData.btnList,WorldPointBtnType.Collect)
        if LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER and ((SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() ==false) or (CrossServerUtil:GetIsCrossServer() and CrossServerUtil.GetCrossServerFightIsInSeason()) or (CrossServerUtil:GetIsCrossServer() and CrossServerUtil:GetIsInBattleServerGroup(LuaEntry.Player:GetCurServerId())==true))then
            table.insert(oneData.btnList,WorldPointBtnType.ScoutDesert)
            table.insert(oneData.btnList,WorldPointBtnType.AttackDesert)
        end
    elseif self.type == WorldPointUIType.CityResPoint then
        oneData.pointData = self:GetCityResourceData(self.pointId)
    elseif self.type == WorldPointUIType.AllianceCollectPoint then
        oneData.pointData = self:GetAllianceResourceData(self.pointId)
        if CrossServerUtil:GetIsCrossServer()==false then
            table.insert(oneData.btnList,WorldPointBtnType.AllianceCollect)
        end
    elseif self.type == WorldPointUIType.CollectArmy then
        --if CrossServerUtil:GetIsCrossServer()==false then
            if self.ownerUid == LuaEntry.Player.uid then
                oneData.pointData = self:GetCollectData(self.pointId,true)
                table.insert(oneData.btnList,WorldPointBtnType.CallBack)
                table.insert(oneData.btnList,WorldPointBtnType.Detail)
            else
                oneData.pointData = self:GetCollectData(self.pointId,true)
                if self.isAlliance ==false then
                    table.insert(oneData.btnList,WorldPointBtnType.ScoutArmyCollect)
                    table.insert(oneData.btnList,WorldPointBtnType.AttackArmyCollect)
                end
            end
        --end
    elseif self.type == WorldPointUIType.AllianceMine then
        oneData.pointData = self:GetAllianceMineData(self.pointId)
        if oneData.pointData.allianceId == LuaEntry.Player.allianceId then
            if oneData.pointData.marchInfo~=nil then
                table.insert(oneData.btnList,WorldPointBtnType.AllianceMineCallback)
            else
                if oneData.pointData.state == AllianceMineStatus.Normal then
                    table.insert(oneData.btnList,WorldPointBtnType.AllianceMine_Collect)
                else
                    table.insert(oneData.btnList,WorldPointBtnType.AllianceMine_Construct)
                end
            end
            table.insert(oneData.btnList,WorldPointBtnType.AllianceMineDetail)
        end
    elseif self.type == WorldPointUIType.AllianceActMine then
        oneData.pointData = self:GetAllianceMineData(self.pointId)
        if oneData.pointData.allianceId == LuaEntry.Player.allianceId then
            if oneData.pointData.marchInfo~=nil then
                table.insert(oneData.btnList,WorldPointBtnType.AllianceMineCallback)
            end
            table.insert(oneData.btnList,WorldPointBtnType.AllianceActMineDetail)
            table.insert(oneData.btnList,WorldPointBtnType.AllianceActMine_Collect)
        else
            table.insert(oneData.btnList,WorldPointBtnType.ScoutAllianceActMine)
            table.insert(oneData.btnList,WorldPointBtnType.AttackAllianceActMine)
            table.insert(oneData.btnList,WorldPointBtnType.RallyAllianceActMine)
        end
    elseif self.type == WorldPointUIType.Explore then
        oneData.pointData = self:GetExploreData()
        table.insert(oneData.btnList, WorldPointBtnType.Explore)
    elseif self.type == WorldPointUIType.Sample then
        oneData.pointData = self:GetSampleData()
        local detectData = DataCenter.RadarCenterDataManager:GetDetectEventInfo(self.uuid)
        if detectData ~= nil then
            local template = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(detectData.eventId)
            if template ~= nil then
                if template.type == DetectEventType.RESCUE then
                    table.insert(oneData.btnList, WorldPointBtnType.RecuseDetect)
                else
                    table.insert(oneData.btnList, WorldPointBtnType.Sample)
                end
            end
        end
    elseif self.type == WorldPointUIType.PickGarbage then
        oneData.pointData = self:GetGarbageData()
        table.insert(oneData.btnList, WorldPointBtnType.PickGarbage)
    elseif self.type == WorldPointUIType.SingleMapGarbage then
        oneData.pointData = self:GetSingleMapGarbageData()
        --table.insert(oneData.btnList, WorldPointBtnType.SingleMapGarbage)
    elseif self.type == WorldPointUIType.MonsterReward then
        oneData.pointData = self:GetMonsterRewardData(self.pointId)
        table.insert(oneData.btnList,WorldPointBtnType.GetReward)
    elseif self.type == WorldPointUIType.ChallengeBoss then
        oneData.pointData = self:GetChallengeBossData(self.uuid)
        if CrossServerUtil:GetIsCrossServer()==false then
            table.insert(oneData.btnList, WorldPointBtnType.AttackActChallenge)
            table.insert(oneData.btnList, WorldPointBtnType.ChallengeHelp)
        end
    elseif self.type == WorldPointUIType.Ruin then
        oneData.pointData = self:GetRuinData(self.pointId)
        if self.ownerUid == LuaEntry.Player.uid then
            if oneData.pointData~=nil and oneData.pointData.canPlaceAllianceCenter==true and DataCenter.AllianceBaseDataManager:IsR4orR5() then
                if CrossServerUtil:GetIsCrossServer()==false then
                    table.insert(oneData.btnList,WorldPointBtnType.BuildAllianceCenter)
                end

            end
            table.insert(oneData.btnList,WorldPointBtnType.AssistanceDesert)
            if CrossServerUtil:GetIsCrossServer()==false then
                table.insert(oneData.btnList,WorldPointBtnType.DesertBuildList)
            end
            table.insert(oneData.btnList,WorldPointBtnType.TrainDesert)
        elseif self.isAlliance ==true then
            if oneData.pointData~=nil and oneData.pointData.canPlaceAllianceCenter==true and DataCenter.AllianceBaseDataManager:IsR4orR5() then
                if CrossServerUtil:GetIsCrossServer()==false then
                    table.insert(oneData.btnList,WorldPointBtnType.BuildAllianceCenter)
                end
            end
            if CrossServerUtil:GetIsCrossServer()==false then
                table.insert(oneData.btnList,WorldPointBtnType.DesertBuildList)
            end
            table.insert(oneData.btnList,WorldPointBtnType.AssistanceDesert)
        else
            if oneData.pointData~=nil and oneData.pointData.canPlaceAllianceCenter==true and DataCenter.AllianceBaseDataManager:IsR4orR5() then
                if CrossServerUtil:GetIsCrossServer()==false then
                    table.insert(oneData.btnList,WorldPointBtnType.BuildAllianceCenter)
                end
            end
            if oneData.pointData~=nil and oneData.pointData.canPlaceBuild ==true then
                if CrossServerUtil:GetIsCrossServer()==false then
                    table.insert(oneData.btnList,WorldPointBtnType.DesertBuildList)
                end
            end
            table.insert(oneData.btnList,WorldPointBtnType.ScoutDesert)
            table.insert(oneData.btnList,WorldPointBtnType.AttackDesert)
        end
    elseif self.type == WorldPointUIType.Desert then
        local info = DataCenter.WorldPointManager:GetPointInfo(self.pointId)
        if info and info.PointType == WorldPointType.WorldRuinPoint then
            oneData.pointData = self:GetRuinData(self.pointId)
        else
            oneData.pointData = self:GetDesertData(self.pointId)
        end
        if self.ownerUid == LuaEntry.Player.uid then
            if oneData.pointData~=nil and oneData.pointData.canPlaceAllianceCenter==true and DataCenter.AllianceBaseDataManager:IsR4orR5() then
                if CrossServerUtil:GetIsCrossServer()==false then
                    table.insert(oneData.btnList,WorldPointBtnType.BuildAllianceCenter)
                end
                
            end
            table.insert(oneData.btnList,WorldPointBtnType.AssistanceDesert)
            if CrossServerUtil:GetIsCrossServer()==false then
                table.insert(oneData.btnList,WorldPointBtnType.DesertBuildList)
            end
            table.insert(oneData.btnList,WorldPointBtnType.TrainDesert)
            --local curTime = UITimeManager:GetInstance():GetServerTime()
            --if oneData.pointData.giveUpEndTime>curTime then
            --    table.insert(oneData.btnList,WorldPointBtnType.CancelGiveUpDesert)
            --else
            --    table.insert(oneData.btnList,WorldPointBtnType.GiveUpDesert)
            --end
            
        elseif self.isAlliance ==true then
            if oneData.pointData~=nil and oneData.pointData.canPlaceAllianceCenter==true and DataCenter.AllianceBaseDataManager:IsR4orR5() then
                if CrossServerUtil:GetIsCrossServer()==false then
                    table.insert(oneData.btnList,WorldPointBtnType.BuildAllianceCenter)
                end
            end
            if CrossServerUtil:GetIsCrossServer()==false then
                table.insert(oneData.btnList,WorldPointBtnType.DesertBuildList)
            end
            table.insert(oneData.btnList,WorldPointBtnType.AssistanceDesert)
        else
            if oneData.pointData~=nil and oneData.pointData.canPlaceAllianceCenter==true and DataCenter.AllianceBaseDataManager:IsR4orR5() then
                if CrossServerUtil:GetIsCrossServer()==false then
                    table.insert(oneData.btnList,WorldPointBtnType.BuildAllianceCenter)
                end
            end
            if oneData.pointData~=nil and oneData.pointData.canPlaceBuild ==true then
                if CrossServerUtil:GetIsCrossServer()==false then
                    table.insert(oneData.btnList,WorldPointBtnType.DesertBuildList)
                end
            end
            table.insert(oneData.btnList,WorldPointBtnType.ScoutDesert)
            table.insert(oneData.btnList,WorldPointBtnType.AttackDesert)
        end
    elseif self.type == WorldPointUIType.GuideEventMonster then
        oneData.pointData = self:GetGuideEventMonsterData()
        table.insert(oneData.btnList, WorldPointBtnType.GuideEventMonster)
    elseif self.type == WorldPointUIType.AllianceBuild then
        local pointData = self:GetAllianceBuildData(self.pointId)
        oneData.pointData = pointData
        if pointData~=nil and pointData.state == AllianceMineStatus.Ruin then
            if pointData.allianceId~="" and pointData.allianceId == LuaEntry.Player.allianceId then
                table.insert(oneData.btnList, WorldPointBtnType.ReBuildAllianceRuin)
            end
        else
            if pointData.allianceId~="" and pointData.allianceId == LuaEntry.Player.allianceId then
                table.insert(oneData.btnList, WorldPointBtnType.AssistanceAllianceBuild)
                if pointData.buildId ~= nil and WorldAllianceBuildUtil.IsAllianceFrontGroup(pointData.buildId) then
                    if DataCenter.AllianceBaseDataManager:IsR4orR5() then
                        table.insert(oneData.btnList, WorldPointBtnType.FoldUpAllianceBuild)
                    end
                end
            else
                table.insert(oneData.btnList, WorldPointBtnType.AttackAllianceBuild)
                if pointData.buildId~=nil and WorldAllianceBuildUtil.IsAllianceCenterGroup(pointData.buildId) ==true then
                    table.insert(oneData.btnList, WorldPointBtnType.RallyAllianceBuild)
                end
                table.insert(oneData.btnList, WorldPointBtnType.ScoutAllianceBuild)
            end
        end
    elseif self.type == WorldPointUIType.DragonBuild then
        local pointData = self:GetDragonBuildData(self.pointId)
        oneData.pointData = pointData
        local buildId = pointData.buildId
        if buildId == DragonBuildingTypes.DragonCenterBuild then
            table.insert(oneData.btnList, WorldPointBtnType.GetSecretKey)
        elseif buildId == DragonBuildingTypes.DragonAllianceFlagSelf or buildId == DragonBuildingTypes.DragonAllianceFlagOther then
            oneData.btnList = {}
        else
            if pointData.allianceId~="" and pointData.allianceId == LuaEntry.Player.allianceId then
                table.insert(oneData.btnList, WorldPointBtnType.AssistanceDragonBuild)
            else
                table.insert(oneData.btnList, WorldPointBtnType.AttackDragonBuild)
                table.insert(oneData.btnList, WorldPointBtnType.ScoutDragonBuild)
            end
        end
    elseif self.type == WorldPointUIType.DragonSecretKey then
        local pointData = self:GetSecretKey(self.pointId)
        oneData.pointData = pointData
        table.insert(oneData.btnList, WorldPointBtnType.GetSecretKey)
    elseif self.type == WorldPointUIType.AllianceBoss then
        oneData.pointData.isSelfAlliance = false
        local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(self.uuid)
        if pointInfo~=nil then
            local marchInfo = PBController.ParsePbFromBytes(pointInfo.extraInfo, "protobuf.WorldPointMonster")
            if marchInfo~=nil then
                local bossInfo = PBController.ParsePbFromBytes(marchInfo.monsterExtraInfo, "protobuf.AllianceBossInfo")
                if bossInfo~=nil then
                    if bossInfo.allianceId ~= nil and bossInfo.allianceId == LuaEntry.Player.allianceId then
                        oneData.pointData.isSelfAlliance = true
                        table.insert(oneData.btnList, WorldPointBtnType.AttackAllianceBoss)
                    end
                end
            end
        end
        
        
        oneData.pointData.shareName = 155064
        --table.insert(oneData.btnList, WorldPointBtnType.AllianceBossRank)
    elseif self.type == WorldPointUIType.DispatchTask then
        local pointData = self:GetDispatchTaskData(self.pointId)
        oneData.pointData = pointData
        if pointData.isSelf then
            table.insert(oneData.btnList, WorldPointBtnType.DispatchTask)
        elseif pointData.isAlliance then
            table.insert(oneData.btnList, WorldPointBtnType.DispatchTaskHelp)
        else
            table.insert(oneData.btnList, WorldPointBtnType.DispatchTaskSteal) 
        end
    end
    
    if DataCenter.DesertOperateManager:CanShowPanel(self.uuid) then
        table.insert(oneData.btnList, WorldPointBtnType.DesertOperate)
    end
    
    if CrossServerUtil:GetIsCrossServer() and LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        local isActBtn = false
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.CrossDesert)
        if #dataList>0 then
            --检查跨服打地
            local data = dataList[1]
            if curTime < data.endTime then
                if data.servers and data.servers ~= "" then
                    local serverList = string.split(data.servers,";")
                    for i = 1 ,#serverList do
                        if tonumber(serverList[i]) == LuaEntry.Player:GetCurServerId() then
                            isActBtn = true
                            break
                        end
                    end
                end
            end
        end
        local actData = nil
        local needCheckTime = false
        dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.EdenAllianceActMine)
        if table.count(dataList) > 0 then
            actData = dataList[1]
        end
        if actData~=nil then
            if DataCenter.SeasonDataManager:GetIsInEdenWarServerGroup(LuaEntry.Player:GetCurServerId()) then
                needCheckTime = true
            end
            if actData~=nil and needCheckTime ==true then
                if curTime>actData.startTime and curTime<actData.endTime then
                    isActBtn = true
                end
            end
        end

        actData = nil
        dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.EdenAllianceCrossActMine)
        if table.count(dataList) > 0 then
            actData = dataList[1]
        end
        if actData~=nil then
            if DataCenter.SeasonDataManager:GetIsInEdenCrossWarServerGroup(LuaEntry.Player:GetCurServerId()) then
                needCheckTime = true
            end
            if actData~=nil and needCheckTime ==true then
                if curTime>actData.startTime and curTime<actData.endTime then
                    isActBtn = true
                end
            end
        end
        local fightServerId = DataCenter.AllianceCompeteDataManager:GetFightServerId()
        if CrossServerUtil:GetIsInBattleServerGroup(LuaEntry.Player:GetCurServerId())==false and not isActBtn then
            if fightServerId ~= LuaEntry.Player:GetCurServerId() then
                oneData.btnList = {}
            elseif CrossServerUtil:GetCrossServerIsInSameSeason() == false then
                oneData.btnList = {}
            end
        end
    end
    return oneData
end
local function GetDispatchTaskData(self,pointId)
    local data = {}
    data.pointId = pointId
    data.isSelf = false
    data.isAlliance = false
    data.rewardStr = {}
    local reward_str = ""
    local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if info~=nil and info.extraInfo~=nil then
        if info.pointType == WorldPointType.HERO_DISPATCH then
            local dispatchMission = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.DispatchMission")
            if dispatchMission~=nil then
                data.uuid = dispatchMission.uuid
                data.refreshTime = dispatchMission.finishTime
                data.ownerUid =dispatchMission.ownerUid
                data.allianceId = dispatchMission.allianceId
                data.cfgId = dispatchMission.missionId
                data.name = GetTableData(TableName.LwDispatchTask,dispatchMission.missionId,"name")
                data.shareName = data.name
                if dispatchMission.ownerUid == LuaEntry.Player.uid then
                    data.isSelf = true
                    reward_str = GetTableData(TableName.LwDispatchTask,dispatchMission.missionId,"base_reward_show")
                elseif dispatchMission.allianceId~=nil and dispatchMission.allianceId~=""  and dispatchMission.allianceId == LuaEntry.Player.allianceId then
                    data.isAlliance = true
                    reward_str = GetTableData(TableName.LwDispatchTask,dispatchMission.missionId,"aid_extra_reward_show")
                else
                    reward_str = GetTableData(TableName.LwDispatchTask,dispatchMission.missionId,"steal_reward_show")
                end
            end

        end
    end
    if reward_str~=nil and reward_str~="" then
        local rewardList = string.split(reward_str,"|")
        table.walk(rewardList,function (k,v)
            local str = v
            if str~=nil and str~="" then
                local strVec = string.split(str,";")
                if #strVec>2 then
                    local id = tonumber(strVec[1])
                    local rewardType = tonumber(strVec[2])
                    local num = tonumber(strVec[3])
                    local item = {}
                    item.firstKill = false
                    if rewardType ==  RewardType.GOODS then
                        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                        if goods~=nil then
                            item.itemId = id
                            item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                            item.count = num
                            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                            item.rewardType = rewardType
                            item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                            item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                            item.isLocal = true
                            --item.itemName = goods.name
                            --item.itemDesc = goods.description
                            local itemType = goods.type
                            if itemType == 2 then -- SPD
                                if goods.para1 ~= nil and goods.para1 ~= "" then
                                    local para1 = goods.para1
                                    local temp = string.split(para1,';')
                                    if temp ~= nil and #temp > 1 then
                                        item.itemFlag = temp[1]..temp[2]
                                    end
                                end
                            elseif itemType == 3 then -- USE
                                local type2 = goods.type2
                                if type2 ~= 999 and goods.para ~= nil then
                                    local res_num = tonumber(goods.para)
                                    item.itemFlag = string.GetFormattedStr(res_num)
                                end
                            end
                            if item.firstKill == true then
                                table.insert(data.rewardStr,item)
                            else
                                table.insert(data.rewardStr,item)
                            end

                        end
                    else
                        local resourceType = RewardToResType[rewardType]
                        if resourceType~=nil then
                            item.itemId = id
                            item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                            item.rewardType = rewardType
                            item.itemDesc = CommonUtil.GetResourceDescriptionByType(resourceType)
                            item.count = num
                            item.itemName = DataCenter.ResourceManager:GetResourceNameByType(resourceType)
                            item.isLocal = true
                            if item.firstKill == true then
                                table.insert(data.rewardStr,item)
                            else
                                table.insert(data.rewardStr,item)
                            end
                        end
                    end
                end
            end
        end)
    end
    return data
end
local function GetAllianceBuildData(self,pointId)
    local data = {}
    data.name = ""
    data.curHp = 0
    data.maxHp =0
    data.endTime = 0
    data.shareName = ""
    data.coverSpeed = 0
    data.allianceId = ""
    data.buildId = 0
    data.size = 3
    data.lastHpTime = 0
    data.pointId = pointId
    data.serverId = LuaEntry.Player:GetCurServerId()
    local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if info~=nil then
        data.pointId = info.mainIndex
        data.uuid = info.uuid
        data.serverId = info.serverId
        if self.type == WorldPointUIType.AllianceBuild then
            if info~=nil then
                local detailInfo = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.AllianceBuildingPointInfo")
                if detailInfo then
                    data.curHp = detailInfo.durability
                    data.lastHpTime = detailInfo.lastDurabilityTime
                    local buildId = detailInfo.buildId
                    data.buildId = buildId
                    data.allianceId = detailInfo.allianceId
                    data.state = detailInfo.state
                    data.coverSpeed = detailInfo.durabilitySpeed
                    if data.state == AllianceMineStatus.Ruin then
                        data.coverSpeed = 0
                    end
                    local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(buildId)
                    if template~=nil then
                        data.shareName = template.name
                        data.name = template.name
                        data.maxHp = template.resDurable
                        data.size = template.resSize
                    end
                end
            end
        end
    end

    return data
end

local function GetDragonBuildData(self,pointId)
    local data = {}
    data.allianceId = ""
    data.buildId = 0
    data.size = 1
    data.pointId = pointId
    data.serverId = LuaEntry.Player:GetCurServerId()
    data.startTime = 0
    data.protectTime = 0
    data.openTime = 0
    data.state = 0
    data.rewardCount = 0
    data.alliancePoint = 0
    data.abbr = ""
    data.iconPath = ""
    data.effectList = {}
    local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if info~=nil then
        local detailInfo = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.DragonBuildingPointInfo")
        if detailInfo then
            local buildId = detailInfo.buildId
            data.buildId = buildId
            data.allianceId = detailInfo.allianceId
            data.abbr = detailInfo.alAbbr
            local template = DataCenter.DragonBuildTemplateManager:GetTemplate(buildId)
            if template then
                data.size = template.size
                data.alliancePoint = template.circle_alliance_point
                data.effectList = template.effectList
                data.name = template.name
                data.shareName =template.name
                data.iconPath = template:GetIconPath()
            end
            data.startTime = detailInfo.startTime
            data.openTime = detailInfo.openTime
            data.protectTime = detailInfo.protectTime
            data.state = detailInfo.state
            data.rewardCount = detailInfo.rewardCount
        end
    end

    return data
end

local function GetSecretKey(self,pointId)
    local data = {}
    data.allianceId = ""
    data.buildId = 0
    data.size = 1
    data.pointId = pointId
    data.serverId = LuaEntry.Player:GetCurServerId()
    data.startTime = 0
    data.protectTime = 0
    data.openTime = 0
    data.state = 0
    data.alliancePoint = 0
    data.abbr = ""
    data.iconPath = "Assets/Main/Sprites/UI/UIDragon/UIbattlefield_icon_Relic.png"
    data.effectList = {}
    data.name = 376090
    data.shareName = 376090
    return data
end

local function GetRuinData(self, pointId)
    local result = self:GetDesertData(pointId)
    if DataCenter.MissileManager:IsRuinPoint(pointId) then
        result.isRuin = true
        local endTime = 0
        local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
        if info~=nil then
            local data = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.WorldRuinPointInfo")
            endTime = data.endTime * 1000
        end
        result.endTime = endTime
    end
    return result
end

local function GetDesertData(self,pointId)
    local oneData = {}
    oneData.pointId = pointId
    oneData.level = 0
    oneData.name = "110245"
    oneData.shareName = "110245"
    oneData.resSpeed = 0
    local zoneId = CS.SceneManager.World:GetZoneIdByPosId(pointId-1)
    oneData.zoneId = zoneId
    oneData.recommend_power = 0
    oneData.giveUpEndTime = 0
    oneData.protectEndTime = 0 
    oneData.force = 0
    oneData.serverId = LuaEntry.Player:GetSelfServerId()
    oneData.canPlaceBuild = true
    oneData.canPlaceAllianceCenter = false
    oneData.season_mastery = 0
    if self.desertId == 0 then
        local id = DataCenter.WorldDesertRefreshTemplateManager:GetEmptyDesertIdByCityId(zoneId)
        if id~=nil then
            self.desertId = id
        else
            self.desertId = 100
        end
    end
    if self.desertId~=0 then
        local str = GetTableData(TableName.Desert, self.desertId, "icon")
        oneData.pic = string.format(LoadPath.SeasonDesert,str)
        oneData.level = GetTableData(TableName.Desert, self.desertId, "desert_level")
        oneData.name = GetTableData(TableName.Desert, self.desertId, "desert_name")
        oneData.shareName = oneData.name
        local resStr = GetTableData(TableName.Desert, self.desertId, "desert_res")
        local power = GetTableData(TableName.Desert, self.desertId, "desert_power")
        oneData.recommend_power = tonumber(power)
        oneData.resistance = GetTableData(TableName.Desert, self.desertId, "desert_buff")
        oneData.season_mastery = GetTableData(TableName.Desert, self.desertId, "season_mastery")
        local forceScore = tonumber(GetTableData(TableName.Desert, self.desertId, "forceScore"))
        local score = 0
        if forceScore~=nil then
            score = forceScore*3
        end
        oneData.score = math.floor(score+0.5)
        local desert_dmg_param = GetTableData(TableName.Desert, self.desertId, "desert_dmg_param")
        local force = GetTableData(TableName.Desert, self.desertId, "force")
        oneData.force = tonumber(force)
        local arr = string.split(resStr,";")
        if #arr>=2 then
            local speed = tonumber(arr[2])
            if speed~=nil then
                oneData.resSpeed = speed*60
            end
        end
        local k21 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k21")
        local k23 = LuaEntry.DataConfig:TryGetNum("new_battle_config", "k23")
        local arrK = string.split(desert_dmg_param,";")
        if #arrK>=2 then
            k21 = tonumber(arrK[1])
            k23 = tonumber(arrK[2])
        end
        oneData.selfValue = SeasonUtil:GetSelfSeasonResistanceValue()
        oneData.selfPercent = SeasonUtil.GetSeasonResistanceSelf(oneData.selfValue,oneData.resistance,k21)-1
        oneData.otherPercent = SeasonUtil.GetSeasonResistanceOther(oneData.selfValue,oneData.resistance,k23)-1
        local rewardList,isFirst = DataCenter.DesertDataManager:GetDesertReward(self.desertId,oneData.level,self.ownerUid)
        local state = DataCenter.DesertDataManager:GetDesertReward(oneData.level)
        oneData.exp = 0
        if self.ownerUid ~= LuaEntry.Player.uid and state then
            local tempStr = "exp"
            local open = LuaEntry.DataConfig:CheckSwitch("desert_use_extra_exp")
            if open then
                tempStr = "exp_b"
            end
            oneData.exp = GetTableData(TableName.Desert, self.desertId, tempStr)
            
        elseif not state then
            local tempStr = "exp"
            local open = LuaEntry.DataConfig:CheckSwitch("desert_use_extra_exp")
            if open then
                tempStr = "exp_b"
            end
            oneData.exp = GetTableData(TableName.Desert, self.desertId, tempStr)
        elseif state and self.ownerUid == LuaEntry.Player.uid then
            local tempStr = "train_exp"
            local open = LuaEntry.DataConfig:CheckSwitch("desert_use_extra_exp")
            if open then
                tempStr = "train_exp_b"
            end
            oneData.exp = GetTableData(TableName.Desert, self.desertId, tempStr)    --扫荡
        end
        
        oneData.rewardStr = {}
        for i = 1 ,table.count(rewardList) do
            local str = rewardList[i]
            if str~=nil and str~="" then
                local strVec = string.split(str,";")
                if #strVec>2 then
                    local id = tonumber(strVec[1])
                    local rewardType = tonumber(strVec[2])
                    local num = tonumber(strVec[3])
                    local item = {}
                    if isFirst and isFirst ~= 0 and i <= isFirst then
                        item.firstKill = true
                    else
                        item.firstKill = false
                    end
                    if rewardType ==  RewardType.GOODS then
                        local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                        if goods~=nil then
                            item.itemId = id
                            item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                            item.count = num
                            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                            item.rewardType = rewardType
                            item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                            item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                            item.isLocal = true
                            local itemType = goods.type
                            if itemType == 2 then -- SPD
                                if goods.para1 ~= nil and goods.para1 ~= "" then
                                    local para1 = goods.para1
                                    local temp = string.split(para1,';')
                                    if temp ~= nil and #temp > 1 then
                                        item.itemFlag = temp[1]..temp[2]
                                    end
                                end
                            elseif itemType == 3 then -- USE
                                local type2 = goods.type2
                                if type2 ~= 999 and goods.para ~= nil then
                                    local res_num = tonumber(goods.para)
                                    item.itemFlag = string.GetFormattedStr(res_num)
                                end
                            end
                            table.insert(oneData.rewardStr,item)
                        end
                    else
                        local resourceType = RewardToResType[rewardType]
                        if resourceType~=nil then
                            item.itemId = id
                            item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                            item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                            item.rewardType = rewardType
                            item.count = num
                            item.itemName = ResourceTypeTxt[rewardType]
                            item.isLocal = false
                            table.insert(oneData.rewardStr,item)
                        end
                    end
                end
            end
        end
        if self.ownerUid ~= LuaEntry.Player.uid and self.isAlliance then
            oneData.rewardStr = false
        end
    end
    if self.uuid~=0 then
        local desertData = DataCenter.DesertDataManager:GetSelfDesertDataByUuid(self.uuid)
        if desertData~=nil then
            oneData.giveUpEndTime = desertData.giveUpTime
            oneData.protectEndTime = desertData.protectTime
            oneData.serverId = desertData.serverId
        end
        if oneData.level>0 then
            oneData.canPlaceAllianceCenter = true
        end
        local tempData = CS.SceneManager.World:GetDesertInfoByUuid(self.uuid)
        if tempData~=nil then
            if self.isAlliance ==false then
                local playerType = tempData:GetPlayerType()
                if playerType ==  CS.PlayerType.PlayerOther then
                    oneData.canPlaceBuild = false
                    oneData.canPlaceAllianceCenter = false
                end
            end
            local oriDesertId = tempData.oriDesertId
            if oriDesertId~=nil and oriDesertId>0 and oriDesertId~=oneData.level then
                oneData.targetLevel = oneData.level
                
                oneData.level = GetTableData(TableName.Desert, oriDesertId, "desert_level")
            end
        end
    end
    return oneData
end

local function GetPlayerData(self,pointId)
    local data = {}
    data.playerData = DataCenter.WorldPointDetailManager:GetDetailByPointId(pointId)
    data.name = ""
    data.curHp = 0
    data.maxHp =0
    data.endTime = 0
    data.shareName = ""
    data.coverSpeed = 0
    if self.type == WorldPointUIType.CollectPoint or self.type == WorldPointUIType.AllianceCollectPoint then
    else
        local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
        if info~=nil then
            if self.type == WorldPointUIType.Build then
                local build = DataCenter.WorldPointManager:GetBuildDataByPointIndex(pointId)
                if build~=nil then
                    local hp = build.curHp
                    if hp ==nil then
                        hp = build.currentHp
                    end
                    local itemId = build.itemId
                    if itemId ==nil or itemId == 0 then
                        itemId = build.buildId
                    end
                    data.curHp = hp
                    data.lastHpTime = info.lastHpTime
                    local nameStr = GetTableData(DataCenter.BuildTemplateManager:GetTableName(), itemId + info.level,"name")
                    data.shareName = nameStr
                    data.name = nameStr
                    if data.playerData.maxHp > 0 then
                        data.maxHp = data.playerData.maxHp
                        data.recoverSpeed = data.playerData.speed
                    else
                        local buildLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(itemId,info.level)
                        if buildLevelTemplate~=nil then
                            data.maxHp = buildLevelTemplate:GetMaxHp()
                        end
                    end
                end
            end
        end
    end
    
    return data
end

local function GetResourceData(self,pointId)
    local oneData = {}
    oneData.pointId = pointId
    oneData.speed = 0
    local info = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(pointId)
    if info~=nil then
        --local type  = info:GetResourceType()
        local type = GetTableData(TableName.GatherResource,info.id,"resource_type")
        local lv = GetTableData(TableName.GatherResource,info.id,"level")
        type = tonumber(type)
        lv = tonumber(lv)
        oneData.icon = DataCenter.ResourceManager:GetResourceIconByType(type)
        --oneData.desc = GetTableData(TableName.GatherResource,info.id,"desc")
        local name = GetTableData(TableName.GatherResource,info.id,"name")
        oneData.name = Localization:GetString("104290",lv,Localization:GetString(name))
        oneData.shareName =  GetTableData(TableName.GatherResource,info.id,"name")
        oneData.speed = GetTableData(TableName.GatherResource,info.id,"show_gathering")
        oneData.level = lv
        --oneData.refreshTime = info.endTime
        oneData.resourceType = type
        oneData.id = info.id

        oneData.isDesert = false
        if (SeasonUtil.IsInSeasonDesertMode() and CrossServerUtil:GetIsCrossServer() ==false) or (CrossServerUtil:GetIsCrossServer() and CrossServerUtil.GetCrossServerFightIsInSeason()) or (CrossServerUtil:GetIsCrossServer() and CrossServerUtil:GetIsInBattleServerGroup(LuaEntry.Player:GetCurServerId())==true) then
            local zoneId = CS.SceneManager.World:GetZoneIdByPosId(pointId-1)
            oneData.zoneId = zoneId
            oneData.recommend_power = 0
            if self.desertId == 0 then
                local id = DataCenter.WorldDesertRefreshTemplateManager:GetEmptyDesertIdByCityId(zoneId)
                if id~=nil then
                    self.desertId = id
                end
            end
            if self.desertId~=0 then
                oneData.isDesert = true
                local power = GetTableData(TableName.Desert, self.desertId, "desert_power")
                oneData.recommend_power = tonumber(power)
                oneData.resistance = GetTableData(TableName.Desert, self.desertId, "desert_buff")
                oneData.selfValue = SeasonUtil:GetSelfSeasonResistanceValue()
                oneData.selfPercent = SeasonUtil.GetSeasonResistanceSelf(oneData.selfValue,oneData.resistance)-1
                oneData.otherPercent = SeasonUtil.GetSeasonResistanceOther(oneData.selfValue,oneData.resistance)-1
            end
        end
    end
    
    return oneData
end

local function GetCityResourceData(self,pointId)
    local oneData = {}
    return oneData
end

local function GetAllianceResourceData(self,pointId)
    local oneData = {}
    oneData.pointId = pointId
    local info = CS.SceneManager.World:GetCollectInfoByIndex(pointId)
    if info~=nil then
        local type = info:GetResourceType()
        local cityId = info.attachId
        oneData.cityId = cityId
        local level = GetTableData(TableName.WorldCity,cityId,"level")
        local resGatherShowStr = ""
        if type == ResourceType.Gold then
            resGatherShowStr = "gold_gathering_show"
        else
            resGatherShowStr = "metal_gathering_show"
        end
        oneData.collectSpeedDes = GetTableData(TableName.AllianceResource,level,resGatherShowStr)
        oneData.desc = GetTableData(TableName.AllianceResource,level,"des")
        oneData.icon = CS.ResourceUtils.GetResourceImagePath(info.resourceType)
        if type == ResourceType.Oil then
            oneData.shareName = 100014
        elseif type == ResourceType.Metal then
            oneData.shareName = 100013
        elseif type == ResourceType.Water then
            oneData.shareName = 100546
        elseif type == ResourceType.Money then
            oneData.shareName = 100000
        elseif type == ResourceType.Electricity then
            oneData.shareName = 100002
        elseif type == ResourceType.Gold then
            oneData.shareName = 100183
        end
        oneData.name = CommonUtil.GetResourceNameByType(type)
        oneData.level = info.level
        --oneData.refreshTime = info.endTime
        oneData.resourceType = type
    end
    return oneData
end

local function GetAllianceMineData(self,pointId)
    local oneData = {}
    oneData.name = ""
    oneData.pointId = pointId
    oneData.marchInfo = nil
    local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if info then
        oneData.uuid = info.uuid
        local alMinePointInfo = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.AllianceBuildingPointInfo")
        if alMinePointInfo then
            oneData.allianceId = alMinePointInfo.allianceId
            oneData.state = alMinePointInfo.state
            local hasMarch, marchInfo = DataCenter.AllianceMineManager:CheckIfHasMarch(pointId)
            if hasMarch == true and marchInfo~=nil then
                oneData.marchInfo = marchInfo
            end
            local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(alMinePointInfo.buildId)
            if template~=nil then
                oneData.name = Localization:GetString(template.name)
                oneData.shareName = template.name
                oneData.buildId = alMinePointInfo.buildId
                oneData.size = template.resSize
            end
            
        end
    end
    return oneData
end

local function GetCollectData(self,pointId,isSelf)
    local oneData = {}
    oneData.isSelf = 0
    local info = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(pointId)
    if info~=nil then
        local type = LocalController:instance():getStrValue(TableName.GatherResource,info.id, "resource_type")
        local lv = GetTableData(TableName.GatherResource,info.id,"level")
        type = tonumber(type)
        local name = GetTableData(TableName.GatherResource,info.id,"name")
        oneData.icon = DataCenter.ResourceManager:GetResourceIconByType(type)
        oneData.level = info.level
        if info.gatherMarchUuid ~= 0 then
            local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(info.gatherMarchUuid)
            if marchInfo~=nil then
                oneData.gatherMarchUuid =info.gatherMarchUuid
                oneData.formationUuid = marchInfo.ownerFormationUuid
                oneData.ownerUid = marchInfo.ownerUid
                oneData.name = Localization:GetString("104290",lv,Localization:GetString(name))
                local ownerName = marchInfo.ownerName
                if marchInfo.allianceAbbr and marchInfo.allianceAbbr ~= "" then
                    ownerName = "[".. marchInfo.allianceAbbr.."]"..marchInfo.ownerName
                end
                oneData.resourceName = Localization:GetString("104291",ownerName)
                oneData.shareName = oneData.name
                if isSelf == true then
                    oneData.isSelf = 1
                    oneData.plunderRes = 0
                    if marchInfo.plunderRes then
                        local num = 0
                        local stringNum = string.split(marchInfo.plunderRes,";")
                        table.walk(stringNum, function(k,v)
                            local pos = string.find(v,",")
                            if pos ~= nil then
                                num = tonumber(string.sub(v,pos+1,-1)) + num
                            end
                        end)
                        oneData.plunderRes = num
                    end
                    oneData.armyWeight = marchInfo.armyWeight - oneData.plunderRes
                    oneData.collectSpd = marchInfo.collectSpd
                    oneData.startTime = marchInfo.startTime
                    oneData.endTime = marchInfo.endTime
                    --TODO collectSpd从C#传过来时可能会因为小数影响比真实值小 例 0.225->0.0.22499999403954 暂时遇到变小的  会不会变大不清楚
                    oneData.collectAddition = math.floor(3600 * (marchInfo.collectSpd - GetTableData(TableName.GatherResource,info.id,"gathering")))     --作用号加成 /h
                    oneData.baseCollectSpd = math.floor(3600 * GetTableData(TableName.GatherResource,info.id,"gathering")).."/h"
                                        --基础速度   /h
                end
                oneData.pointId = pointId
            end
        end
    end
    return oneData
end

local function OnMarkClick(self,server,point,oname,olv)
    local share_param = {}
    share_param.sid = server
    share_param.pos = point
    share_param.worldId = LuaEntry.Player:GetCurWorldId()
    share_param.oname = oname
    share_param.olv = olv
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIPositionAdd, { anim = true }, share_param)
    self:CloseSelf()
end

local function OnShareClick(self,server,point,oname,olv)
    local share_param = {}
    share_param.sid = server
    share_param.worldId = LuaEntry.Player:GetCurWorldId()
    share_param.pos = point
    share_param.oname = oname
    share_param.olv = olv
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIPositionShare, {anim = true}, share_param)
    self:CloseSelf()
end

local function GetPointBtnEnumName(self,btnValue)
    for k,v in pairs(WorldPointBtnType) do
        if v == btnValue then
            return k
        end
    end
end


UIWorldPointCtrl.CloseSelf = CloseSelf
UIWorldPointCtrl.GetIsArrow = GetIsArrow
UIWorldPointCtrl.SetIsArrow = SetIsArrow
UIWorldPointCtrl.GetMonsterData = GetMonsterData
UIWorldPointCtrl.GetCollectData = GetCollectData
UIWorldPointCtrl.GetResourceData = GetResourceData
UIWorldPointCtrl.GetPlayerData = GetPlayerData
UIWorldPointCtrl.GetPointData = GetPointData
UIWorldPointCtrl.InitData = InitData
UIWorldPointCtrl.OnMarkClick = OnMarkClick
UIWorldPointCtrl.OnShareClick = OnShareClick
UIWorldPointCtrl.GetExploreData = GetExploreData
UIWorldPointCtrl.GetMonsterRewardData = GetMonsterRewardData
UIWorldPointCtrl.GetRewards = GetRewards
UIWorldPointCtrl.GetSampleData = GetSampleData
UIWorldPointCtrl.GetGarbageData = GetGarbageData
UIWorldPointCtrl.GetPointBtnEnumName = GetPointBtnEnumName
UIWorldPointCtrl.GetAllianceResourceData =GetAllianceResourceData
UIWorldPointCtrl.GetAllianceMineData =GetAllianceMineData
UIWorldPointCtrl.GetActBossData = GetActBossData
UIWorldPointCtrl.GetPuzzleBossData = GetPuzzleBossData
UIWorldPointCtrl.GetChallengeBossData = GetChallengeBossData
UIWorldPointCtrl.GetCityResourceData =GetCityResourceData
UIWorldPointCtrl.GetDesertData = GetDesertData
UIWorldPointCtrl.GetRuinData = GetRuinData
UIWorldPointCtrl.GetDragonBuildData = GetDragonBuildData
UIWorldPointCtrl.GetAllianceBuildData = GetAllianceBuildData
UIWorldPointCtrl.GetSecretKey = GetSecretKey
UIWorldPointCtrl.GetDispatchTaskData =GetDispatchTaskData
return UIWorldPointCtrl