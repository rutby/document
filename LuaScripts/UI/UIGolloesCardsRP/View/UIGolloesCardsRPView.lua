---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime:
--- 
local UIGolloesCardsRPView = BaseClass("UIGolloesCardsRPView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local UIGolloesCardsRPCell = require "UI.UIActivityCenterTable.Component.GolloesCards.UIGolloesCardsRPCell"

local tips_txt_path = "Tip"

function UIGolloesCardsRPView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

function UIGolloesCardsRPView:OnDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

function UIGolloesCardsRPView:OnEnable()
    base.OnEnable(self)
end

function UIGolloesCardsRPView:OnDisable()
    base.OnDisable(self)
end

function UIGolloesCardsRPView:ComponentDefine()
    self.closeBtnN = self:AddComponent(UIButton, "UICommonMidPopUpTitle/bg_mid/CloseBtn")
    self.closeBtnN:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.maskBtnN = self:AddComponent(UIButton, "UICommonMidPopUpTitle/panel")
    self.maskBtnN:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.titleTxtN = self:AddComponent(UITextMeshProUGUIEx, "UICommonMidPopUpTitle/bg_mid/titleText")
    self.titleTxtN:SetLocalText(372299)
    
    self.content = self:AddComponent(UIBaseContainer,"ScrollView/Viewport/Content")
    
    self.toggleList = {}
    for i = 1 ,3 do
        self.toggleList[i] = {}
        self.toggleList[i].toggle = self:AddComponent(UIToggle,"Img/Tab/Toggle"..i)
        self.toggleList[i].choose = self:AddComponent(UIBaseContainer,"Img/Tab/Toggle"..i.."/Choose"..i)
        self.toggleList[i].toggle:SetOnValueChanged(function(tf)
            if tf then
                self:ToggleControlBorS(i)
            end
        end)
    end
    
end

function UIGolloesCardsRPView:ComponentDestroy()
    --self.testN = nil
    self.closeBtnN = nil
    self.maskBtnN = nil
    self.titleTxtN = nil
end

function UIGolloesCardsRPView:DataDefine()

end

function UIGolloesCardsRPView:DataDestroy()
    self:SetAllNeedCellDestroy()
end

function UIGolloesCardsRPView:ReInit()
    self.actId,self.index = self:GetUserData()
    self:ToggleControlBorS(self.index and self.index or 1)
end

function UIGolloesCardsRPView:SetAllNeedCellDestroy()
    self.content:RemoveComponents(UIGolloesCardsRPCell)
    if self.rewardModels~=nil then
        for k,v in pairs(self.rewardModels) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.rewardModels = {}
end

function UIGolloesCardsRPView:ToggleControlBorS(index)
    self.toggleList[index].toggle:SetIsOn(true)
    for i = 1 ,3 do
        self.toggleList[i].choose:SetActive(self.toggleList[i].toggle:GetIsOn())
    end
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.actId))
    local reward = DataCenter.RewardManager:StrRewardToNumHandle(actListData.reward_goods,index)
    self:RefreshValuableItem(reward)
end

function UIGolloesCardsRPView:RefreshValuableItem(list)
    self:SetAllNeedCellDestroy()
    for i = 1, table.length(list) do
        --复制基础prefab，每次循环创建一次
        self.rewardModels[i] = self:GameObjectInstantiateAsync(UIAssets.UIGolloesCardsRPCell, function(request)
            if request.isError then
                return
            end
            local go = request.gameObject;
            go.gameObject:SetActive(true)
            go.transform:SetParent(self.content.transform)
            go.transform.localScale = Vector3.New(1, 1, 1)
            local nameStr = tostring(NameCount)
            go.name = nameStr
            NameCount = NameCount + 1
            local cell = self.content:AddComponent(UIGolloesCardsRPCell,nameStr)
            cell:SetData(list[i])
        end)
    end
end

return UIGolloesCardsRPView