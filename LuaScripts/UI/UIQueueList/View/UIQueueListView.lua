---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 16/1/2024 下午9:28
---
local UIQueueListView = BaseClass("UIQueueListView", UIBaseView)
local base = UIBaseView
local QueueTitleItem = require "UI.UIQueueList.Component.QueueTitleItem"
local QueueListItem = require "UI.UIQueueList.Component.QueueListItem"
local TroopQueueItem = require "UI.UIQueueList.Component.TroopQueueItem"
local closeBtn_path = "bg/returnButton"

--local top_title_path = "bg/name_text"
local toggle_1_path = "bg/ToggleGroup/Toggle1"
local toggle_1_txt_path = "bg/ToggleGroup/Toggle1/checkText1"
local toggle_1_txt1_path = "bg/ToggleGroup/Toggle1/text1"
local toggleRedPoint_path = "bg/ToggleGroup/Toggle1/RedPointNum"
local toggle_2_path = "bg/ToggleGroup/Toggle2"
local toggle_2_txt_path = "bg/ToggleGroup/Toggle2/checkText2"
local toggle_2_txt2_path = "bg/ToggleGroup/Toggle2/text2"

local head1_path = "bg/queueObj/ScrollView/Viewport/Content/buildContent/BuildQueueTitle"
local head2_path = "bg/queueObj/ScrollView/Viewport/Content/armyContent/ArmyQueueTitle"
local head3_path = "bg/queueObj/ScrollView/Viewport/Content/scienceContent/ScienceQueueTitle"
local head4_path = "bg/troopObj/troopQueueTitle"
local queue_obj_path = "bg/queueObj"
local troop_obj_path = "bg/troopObj"
local troop_content_path = "bg/troopObj/troopScrollView/Viewport/Content"
local build_content_path = "bg/queueObj/ScrollView/Viewport/Content/buildContent"
local army_content_path = "bg/queueObj/ScrollView/Viewport/Content/armyContent"
local science_content_path = "bg/queueObj/ScrollView/Viewport/Content/scienceContent"
local ListType = {
    Build = 1,
    Army = 2,
    Science = 3,
    Troop = 4,
}
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:SetAllCellDestroy()
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
    self:ToggleControlBorS()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.closeBtn = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.queue_obj = self:AddComponent(UIBaseContainer,queue_obj_path)
    self.troop_obj = self:AddComponent(UIBaseContainer,troop_obj_path)
    --self.top_title_text = self:AddComponent(UITextMeshProUGUIEx, top_title_path)
    --self.top_title_text:SetLocalText(470008)
    self.toggle1 = self:AddComponent(UIToggle, toggle_1_path)
    self.toggle1:SetIsOn(true)
    self.toggle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle1_text = self:AddComponent(UITextMeshProUGUIEx, toggle_1_txt_path)
    self.toggle1_text1 = self:AddComponent(UITextMeshProUGUIEx, toggle_1_txt1_path)
    self.toggle1_text:SetLocalText(104315)
    self.toggle1_text1:SetLocalText(104315)
    self.red_point = self:AddComponent(UIBaseContainer,toggleRedPoint_path)
    self.toggle2 = self:AddComponent(UIToggle, toggle_2_path)
    self.toggle2:SetIsOn(false)
    self.toggle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle2_text = self:AddComponent(UITextMeshProUGUIEx, toggle_2_txt_path)
    self.toggle2_text2 = self:AddComponent(UITextMeshProUGUIEx, toggle_2_txt2_path)
    self.toggle2_text:SetLocalText(100171)
    self.toggle2_text2:SetLocalText(100171)
    
    self.head1 = self:AddComponent(QueueTitleItem, head1_path)
    self.head1:SetData(ListType.Build)
    self.head2 = self:AddComponent(QueueTitleItem, head2_path)
    self.head2:SetData(ListType.Army)
    self.head3 = self:AddComponent(QueueTitleItem, head3_path)
    self.head3:SetData(ListType.Science)
    self.head4 = self:AddComponent(QueueTitleItem, head4_path)
    self.head4:SetData(ListType.Troop)
    self.build_content = self:AddComponent(UIBaseContainer,build_content_path)
    self.army_content = self:AddComponent(UIBaseContainer,army_content_path)
    self.science_content = self:AddComponent(UIBaseContainer,science_content_path)
    self.troop_content = self:AddComponent(UIBaseContainer,troop_content_path)
end

local function ComponentDestroy(self)

end

local function DataDefine(self)

    self.playSound = false
end

local function DataDestroy(self)

    self.playSound = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnScienceQueueResearch, self.UpdateScienceItem)
    self:AddUIListener(EventId.OnScienceQueueFinish, self.UpdateScienceItem)
    self:AddUIListener(EventId.TrainingArmy, self.UpdateArmyItem)
    self:AddUIListener(EventId.TrainArmyData, self.UpdateArmyItem)
    self:AddUIListener(EventId.TrainingArmyFinish, self.UpdateArmyItem)
    self:AddUIListener(EventId.AddSpeedSuccess,self.UpdateQueueData)
    
    self:AddUIListener(EventId.BuildUpgradeStart,self.UpdateBuildItem)
    self:AddUIListener(EventId.BuildUpgradeFinish,self.UpdateBuildItem)
    self:AddUIListener(EventId.AddBuildSpeedSuccess,self.BuildAddSpeedUpdate)
    self:AddUIListener(EventId.MarchItemUpdateSelf, self.RefreshTroopList)
    self:AddUIListener(EventId.ArmyFormatUpdate, self.RefreshTroopList)
    self:AddUIListener(EventId.MonthCardInfoUpdated,self.RefreshTroopList)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnScienceQueueResearch, self.UpdateScienceItem)
    self:RemoveUIListener(EventId.OnScienceQueueFinish, self.UpdateScienceItem)
    self:RemoveUIListener(EventId.TrainingArmy, self.UpdateArmyItem)
    self:RemoveUIListener(EventId.TrainArmyData, self.UpdateArmyItem)
    self:RemoveUIListener(EventId.TrainingArmyFinish, self.UpdateArmyItem)
    self:RemoveUIListener(EventId.AddSpeedSuccess,self.UpdateQueueData)

    self:RemoveUIListener(EventId.BuildUpgradeStart,self.UpdateBuildItem)
    self:RemoveUIListener(EventId.BuildUpgradeFinish,self.UpdateBuildItem)
    self:RemoveUIListener(EventId.AddBuildSpeedSuccess,self.BuildAddSpeedUpdate)
    self:RemoveUIListener(EventId.MarchItemUpdateSelf, self.RefreshTroopList)
    self:RemoveUIListener(EventId.ArmyFormatUpdate, self.RefreshTroopList)
    self:RemoveUIListener(EventId.MonthCardInfoUpdated,self.RefreshTroopList)
end

local function UpdateScienceItem(self)
    if self.scienceItemList~=nil then
        for k,v in pairs(self.scienceItemList)do
            v:RefreshData()
        end
    end
end
local function UpdateArmyItem(self)
    if self.armyItemList~=nil then
        for k,v in pairs(self.armyItemList)do
            v:RefreshData()
        end
    end
end
local function UpdateBuildItem(self,bUuid)
    if self.buildItemList~=nil then
        for k,v in pairs(self.buildItemList) do
            v:RefreshByBuildUuid(bUuid)
        end
    end
    if self.scienceItemList~=nil then
        for k,v in pairs(self.scienceItemList)do
            v:RefreshByBuildUuid(bUuid)
        end
    end
    if self.armyItemList~=nil then
        for k,v in pairs(self.armyItemList)do
            v:RefreshByBuildUuid(bUuid)
        end
    end
end
local function BuildAddSpeedUpdate(self,bUuid)
    if self.buildItemList~=nil then
        for k,v in pairs(self.buildItemList) do
            v:RefreshByBuildUuid(bUuid)
        end
    end
    if self.scienceItemList~=nil then
        for k,v in pairs(self.scienceItemList)do
            v:RefreshByBuildUuid(bUuid)
        end
    end
    if self.armyItemList~=nil then
        for k,v in pairs(self.armyItemList)do
            v:RefreshByBuildUuid(bUuid)
        end
    end
end
local function UpdateQueueData(self,queueType)
    if queueType == NewQueueType.Science then
        self:UpdateScienceItem()
    elseif queueType == NewQueueType.BowSoldier or queueType == NewQueueType.CarSoldier or queueType == NewQueueType.FootSoldier then
        self:UpdateArmyItem()
    end
end

local function ReInit(self)
    self:RefreshBuildList()
    self:RefreshArmyList()
    self:RefreshScienceList()
    self:RefreshTroopList()
end

local function ToggleControlBorS(self)

    if self.playSound then
        SoundUtil.PlayEffect("Effect_common_switch")
    else
        self.playSound = true
    end
    
    if self.toggle1:GetIsOn() then
        self.tabIndex = 1
        self.toggle1_text:SetActive(false)
        self.toggle1_text1:SetActive(true)
        self.toggle2_text:SetActive(true)
        self.toggle2_text2:SetActive(false)
        self.troop_obj:SetActive(false)
        self.queue_obj:SetActive(true)
    elseif self.toggle2:GetIsOn() then
        self.tabIndex = 2
        self.toggle1_text:SetActive(true)
        self.toggle1_text1:SetActive(false)
        self.toggle2_text:SetActive(false)
        self.toggle2_text2:SetActive(true)
        self.troop_obj:SetActive(true)
        self.queue_obj:SetActive(false)
    end
end

local function SetAllCellDestroy(self)
    self:SetBuildCellDestroy()
    self:SetArmyCellDestroy()
    self:SetScienceCellDestroy()
    self:SetTroopCellDestroy()
end
local function SetBuildCellDestroy(self)
    if self.build_content~=nil then
        self.build_content:RemoveComponents(QueueListItem)
    end
    if self.build_model~=nil then
        for k,v in pairs(self.build_model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.build_model ={}
    self.buildItemList = {}
end
local function SetTroopCellDestroy(self)
    if self.troop_content~=nil then
        self.troop_content:RemoveComponents(TroopQueueItem)
    end
    if self.troop_model~=nil then
        for k,v in pairs(self.troop_model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.troop_model ={}
    self.troopItemList = {}
end
local function SetArmyCellDestroy(self)
    if self.army_content~=nil then
        self.army_content:RemoveComponents(QueueListItem)
    end
    if self.army_model~=nil then
        for k,v in pairs(self.army_model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.army_model ={}
    self.armyItemList = {}
end

local function SetScienceCellDestroy(self)
    if self.science_content~=nil then
        self.science_content:RemoveComponents(QueueListItem)
    end
    if self.science_model~=nil then
        for k,v in pairs(self.science_model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.science_model ={}
    self.scienceItemList = {}
end

local function RefreshBuildList(self)
    self:SetBuildCellDestroy()
    local list = self.ctrl:GetBuildQueueListId()
    if list~=nil and #list>0 then
        for i = 1, #list do
            --复制基础prefab，每次循环创建一次
            self.build_model[list[i]] = self:GameObjectInstantiateAsync(UIAssets.QueueItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.build_content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.build_content:AddComponent(QueueListItem,nameStr)
                cell:SetUuid(list[i],ListType.Build)
                cell:RefreshData()
                self.buildItemList[list[i]] = cell
            end)
        end
    end
end

local function RefreshArmyList(self)
    self:SetArmyCellDestroy()
    local list = self.ctrl:GetArmyQueueListId()
    if list~=nil and #list>0 then
        self.army_content:SetActive(true)
        for i = 1, #list do
            --复制基础prefab，每次循环创建一次
            self.army_model[list[i]] = self:GameObjectInstantiateAsync(UIAssets.QueueItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.army_content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.army_content:AddComponent(QueueListItem,nameStr)
                cell:SetUuid(list[i],ListType.Army)
                cell:RefreshData()
                self.armyItemList[list[i]] = cell
            end)
        end
    else
        self.army_content:SetActive(false)
    end
end

local function RefreshScienceList(self)
    self:SetScienceCellDestroy()
    local list = self.ctrl:GetScienceQueueListId()
    if list~=nil and #list>0 then
        self.science_content:SetActive(true)
        for i = 1, #list do
            --复制基础prefab，每次循环创建一次
            self.science_model[list[i]] = self:GameObjectInstantiateAsync(UIAssets.QueueItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.science_content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.science_content:AddComponent(QueueListItem,nameStr)
                cell:SetUuid(list[i],ListType.Science)
                cell:RefreshData()
                self.scienceItemList[list[i]] = cell
            end)
        end
    else
        self.science_content:SetActive(false)
    end
end

local function RefreshTroopList(self)
    self:SetTroopCellDestroy()
    local list = self.ctrl:GetFormationListId()
    if list~=nil and #list>0 then
        for i = 1, #list do
            --复制基础prefab，每次循环创建一次
            self.troop_model[list[i]] = self:GameObjectInstantiateAsync(UIAssets.TroopQueueItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.troop_content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local nameStr = tostring(NameCount)
                go.name = nameStr
                NameCount = NameCount + 1
                local cell = self.troop_content:AddComponent(TroopQueueItem,nameStr)
                cell:SetUuid(list[i])
                cell:RefreshData()
                self.troopItemList[list[i]] = cell
            end)
        end
    end
end
UIQueueListView.OnCreate = OnCreate
UIQueueListView.OnDestroy = OnDestroy
UIQueueListView.OnEnable = OnEnable
UIQueueListView.OnDisable = OnDisable
UIQueueListView.ComponentDefine = ComponentDefine
UIQueueListView.ComponentDestroy = ComponentDestroy
UIQueueListView.DataDefine = DataDefine
UIQueueListView.DataDestroy = DataDestroy
UIQueueListView.OnAddListener = OnAddListener
UIQueueListView.OnRemoveListener = OnRemoveListener
UIQueueListView.ReInit = ReInit
UIQueueListView.SetAllCellDestroy =SetAllCellDestroy
UIQueueListView.SetBuildCellDestroy = SetBuildCellDestroy
UIQueueListView.SetArmyCellDestroy = SetArmyCellDestroy
UIQueueListView.SetScienceCellDestroy = SetScienceCellDestroy
UIQueueListView.RefreshBuildList = RefreshBuildList
UIQueueListView.RefreshArmyList = RefreshArmyList
UIQueueListView.RefreshScienceList = RefreshScienceList
UIQueueListView.BuildAddSpeedUpdate =BuildAddSpeedUpdate
UIQueueListView.UpdateQueueData = UpdateQueueData
UIQueueListView.UpdateBuildItem =UpdateBuildItem
UIQueueListView.UpdateArmyItem= UpdateArmyItem
UIQueueListView.UpdateScienceItem = UpdateScienceItem
UIQueueListView.ToggleControlBorS = ToggleControlBorS
UIQueueListView.SetTroopCellDestroy =SetTroopCellDestroy
UIQueueListView.RefreshTroopList =RefreshTroopList
return UIQueueListView