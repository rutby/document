---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 16/1/2024 下午9:28
---
local QueueListItem = BaseClass("QueueListItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local slider_path = "slider"
local slider_txt_path = "slider/slider_text"
local name_txt_path = "name_text"
local des_txt_path ="des_text"
local select_btn_path = "select_btn"
local icon_bg_path = "icon_bg"
local icon_path = "icon_bg/icon"
local red_dot_path = "select_btn/RedDot"
local QueueState = {
    Free = 1,
    Limit = 2,
    Update = 3,
    Finish = 4,
    Lock = 5,
}
local ListType = {
    Build = 1,
    Army = 2,
    Science = 3,
}
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DeleteTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.icon_bg = self:AddComponent(UIImage, icon_bg_path)
    self.icon_image = self:AddComponent(UIImage, icon_path)
    self.name_text = self:AddComponent(UITextMeshProUGUIEx, name_txt_path)
    self.des_txt = self:AddComponent(UITextMeshProUGUIEx, des_txt_path)
    self.slider_txt = self:AddComponent(UITextMeshProUGUIEx, slider_txt_path)
    self.slider = self:AddComponent(UISlider,slider_path)
    self.select_btn = self:AddComponent(UIButton,select_btn_path)
    self.select_btn:SetOnClick(function()
        self:OnClickSelect()
    end)
    self.select_img = self:AddComponent(UIImage,select_btn_path)
    self.red_dot = self:AddComponent(UIBaseContainer,red_dot_path)
    self.timer_action = function(temp)
        self:UpdateTime()
    end
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    self.startTime = 0
    self.endTime = 0
    self.expireTime = 0
    self.occupyUuid = 0
    self.buildId = 0
    self.state = QueueState.Free
end

local function DataDestroy(self)

end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function SetUuid(self,uuid,listType)
    self.uuid = uuid
    self.listType = listType
end
local function RefreshData(self)
    if self.uuid == nil then
        return
    end
    self.startTime = 0
    self.endTime = 0
    self.expireTime = 0 
    self.occupyUuid = 0
    self.itemId = 0
    self.isBuildUpgrade = false
    self.isUpdate = false
    self:DeleteTimer()
    self.state = QueueState.Free
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.listType == ListType.Build then
        self.queueData = DataCenter.BuildQueueManager:GetQueueByUuid(self.uuid)
        local queueIndex = 0
        if self.queueData~=nil then
            if self.queueData.occupyUuid ~= 0 and self.queueData.state == RobotState.BUILD then
                local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(self.queueData.occupyUuid)
                if buildData ~= nil then
                    self.startTime = buildData.startTime
                    self.endTime = buildData.updateTime
                    self.itemId = buildData.itemId+ buildData.level
                else
                    self.startTime = curTime
                    self.endTime = self.queueData.endTime
                end
                self.occupyUuid = self.queueData.occupyUuid
                
            end
            self.expireTime = self.queueData.expireTime
            queueIndex = self.queueData.index
        else --自动补个礼包
            queueIndex = GetTableData(TableName.Robot,self.robotId,"order")
            self.expireTime =1
        end

        if curTime<self.endTime then
           self.state = QueueState.Update
            local buildName = ""
            local desStr = GetTableData(DataCenter.BuildTemplateManager:GetTableName(), self.itemId,"name")

            if desStr ~= nil then
                buildName = Localization:GetString(desStr)
            end
            if self.expireTime~=0 then
                self.icon_bg:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_limit")
            else
                self.icon_bg:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_normal")
            end
            self.icon_image:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_build")
            
            self.select_img:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_btn_goto")
            self.name_text:SetText(Localization:GetString("470013",buildName))
            self.des_txt:SetText("")
            self.slider:SetActive(true)
            self.red_dot:SetActive(false)
            self.isUpdate = true
            self:AddTimer()
            self:UpdateTime()
        elseif self.expireTime~=0 then
            if curTime>self.expireTime then
                self.state = QueueState.Lock
            else
                self.state = QueueState.Limit
            end
            self.slider:SetActive(false)
            self.icon_image:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_build")
            self.icon_bg:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_limit")
            self.select_img:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_btn_goto")
            self.name_text:SetText(Localization:GetString("470003",queueIndex))
            if self.state == QueueState.Lock then
                self.red_dot:SetActive(false)
                self.des_txt:SetColorRGBA(0.95,0.345,0.345,1)
                self.des_txt:SetLocalText(470017,queueIndex)
            else
                self.red_dot:SetActive(true)
                self.des_txt:SetColorRGBA(1,0.45,0.01,1)
                self.isUpdate = true
                self:AddTimer()
                self:UpdateTime()
            end
        else
            self.state = QueueState.Free
            self.slider:SetActive(false)
            self.red_dot:SetActive(true)
            self.icon_image:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_build")
            self.icon_bg:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_normal")
            self.select_img:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_btn_goto")
            self.name_text:SetText(Localization:GetString("470003",queueIndex))
            self.des_txt:SetColorRGBA(1,1,1,1)
            self.des_txt:SetLocalText(470007)
        end
    else
        self.queueData = DataCenter.QueueDataManager:GetQueueByUuid(self.uuid)
        if self.queueData~=nil then
            if self.queueData.funcUuid ~= 0 then
                local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(self.queueData.funcUuid)
                if buildData ~= nil then
                    self.occupyUuid = self.queueData.funcUuid
                    self.itemId = buildData.itemId+ buildData.level
                    local buildEndTime = buildData.updateTime
                    if curTime < buildEndTime then
                        self.isBuildUpgrade = true
                    end
                end
                self.startTime = self.queueData.startTime
                self.endTime = self.queueData.endTime
            end
            if self.queueData.type == NewQueueType.FootSoldier then
                self.name_text:SetLocalText(470004)
                self.icon_image:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_foot")
                self.icon_bg:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_normal")
            elseif self.queueData.type == NewQueueType.BowSoldier then
                self.name_text:SetLocalText(470005)
                self.icon_image:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_row")
                self.icon_bg:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_normal")
            elseif self.queueData.type == NewQueueType.CarSoldier then
                self.name_text:SetLocalText(470006)
                self.icon_image:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_car")
                self.icon_bg:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_normal")
            elseif self.queueData.type == NewQueueType.Science then
                self.name_text:SetLocalText(470001)
                self.icon_image:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_science")
                self.icon_bg:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_icon_normal")
            end
            if self.queueData:GetQueueState() == NewQueueState.Finish then
                self.state = QueueState.Finish
                self.select_img:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_btn_get")
                self.des_txt:SetColorRGBA(0.65,0.98,0.16,1)
                self.des_txt:SetLocalText(470015)
                self.slider:SetActive(false)
                self.red_dot:SetActive(true)
                if self.queueData.type == NewQueueType.Science then
                    local template = DataCenter.ScienceManager:GetScienceTemplate(tonumber(self.queueData.itemId))
                    if template ~= nil then
                        local name = Localization:GetString(template.name)
                        self.name_text:SetText(Localization:GetString("470014",name))
                    end
                end
            elseif self.queueData:GetQueueState() == NewQueueState.Work then
                self.state = QueueState.Update
                self.select_img:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_btn_goto")
                self.des_txt:SetText("")
                self.slider:SetActive(true)
                self.red_dot:SetActive(false)
                if self.queueData.type == NewQueueType.Science then
                    local template = DataCenter.ScienceManager:GetScienceTemplate(tonumber(self.queueData.itemId))
                    if template ~= nil then
                        local name = Localization:GetString(template.name)
                        self.name_text:SetText(Localization:GetString("470014",name))
                    end
                end
                self.isUpdate = true
                self:AddTimer()
                self:UpdateTime()
            else
                self.state = QueueState.Free
                self.slider:SetActive(false)
                self.red_dot:SetActive(self.isBuildUpgrade==false)
                self.select_img:LoadSprite("Assets/Main/Sprites/UI/UIQueue/UIQueue_btn_goto")
                
                if self.isBuildUpgrade then
                    self.des_txt:SetColorRGBA(1,0.45,0.01,1)
                    self.des_txt:SetLocalText(470074)
                else
                    self.des_txt:SetColorRGBA(1,1,1,1)
                    self.des_txt:SetLocalText(470007) 
                end
                
            end
        end
    end
end


local function RefreshByBuildUuid(self,bUuid)
    if self.occupyUuid == bUuid then
        self:RefreshData()
    end
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
        self.timer:Start()
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function UpdateTime(self)
    if self.isUpdate == true then
        if self.state == QueueState.Update then
            local totalTime = self.endTime - self.startTime
            local curTime = UITimeManager:GetInstance():GetServerTime()
            local deltaTime = self.endTime - curTime
            local tempValue = 1 - math.min(1, (deltaTime / totalTime))
            self.slider:SetValue(tempValue)
            self.slider_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
            if deltaTime < 0 then
                self.isUpdate = false
            end
        elseif self.state == QueueState.Limit then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            local deltaTime = self.expireTime - curTime
            self.des_txt:SetText(Localization:GetString("470011", UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime)))
            if deltaTime < 0 then
                self.isUpdate = false
            end
        end
    end

end

local function OnClickSelect(self)
    if self.listType == ListType.Build then
        if self.state == QueueState.Update then
            GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_SpeedUp)
        elseif self.state == QueueState.Lock then
            local rechargeId = 0
            if self.queueData~=nil then
                rechargeId = self.queueData.giftId
            else
                rechargeId = GetTableData(TableName.Robot,self.uuid,"order")
            end
            if rechargeId~=nil and rechargeId~=0 then
                --UIManager:GetInstance():OpenWindow(UIWindowNames.UIGiftPackage, { anim = true },
                --        {
                --            welfareTagType = WelfareTagType.RobotPack,
                --            curRechargeId = rechargeId,
                --        })
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIBuildQueueLease,{anim = true,isBlur = true})
            end
        elseif self.state == QueueState.Free or self.state == QueueState.Limit then
            local buildId = DataCenter.BuildCityBuildManager:GetCanUpgradeBuildId()
            if buildId>0 then
                GoToUtil.GotoCityByBuildId(buildId,WorldTileBtnType.City_Upgrade)
            end
        end
    else
        if self.state == QueueState.Update then
            if self.queueData.type == NewQueueType.FootSoldier or self.queueData.type == NewQueueType.CarSoldier or self.queueData.type == NewQueueType.BowSoldier then
                GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_SpeedUpTrain)
            elseif self.queueData.type == NewQueueType.Science then
                GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_SpeedUpScience)
            end
        else
            
            if self.queueData.type == NewQueueType.FootSoldier then
                if self.isBuildUpgrade then
                    GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_SpeedUp)
                else
                    GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_TrainingInfantry)
                end
                
            elseif self.queueData.type == NewQueueType.CarSoldier then
                if self.isBuildUpgrade then
                    GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_SpeedUp)
                else
                    GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_TrainingTank)
                end
                
            elseif self.queueData.type == NewQueueType.BowSoldier then
                if self.isBuildUpgrade then
                    GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_SpeedUp)
                else
                    GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_TrainingAircraft)
                end
                
            elseif self.queueData.type == NewQueueType.Science then
                if self.isBuildUpgrade then
                    GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_SpeedUp)
                else
                    GoToUtil.GotoCityByBuildUuid(self.occupyUuid, WorldTileBtnType.City_Science)
                end
                
            end
        end
    end
end

QueueListItem.OnCreate = OnCreate
QueueListItem.OnDestroy = OnDestroy
QueueListItem.OnEnable = OnEnable
QueueListItem.OnDisable = OnDisable
QueueListItem.ComponentDefine = ComponentDefine
QueueListItem.ComponentDestroy = ComponentDestroy
QueueListItem.DataDefine = DataDefine
QueueListItem.DataDestroy = DataDestroy
QueueListItem.OnAddListener = OnAddListener
QueueListItem.OnRemoveListener = OnRemoveListener
QueueListItem.SetUuid = SetUuid
QueueListItem.UpdateTime = UpdateTime
QueueListItem.DeleteTimer =DeleteTimer
QueueListItem.AddTimer =AddTimer
QueueListItem.RefreshData = RefreshData
QueueListItem.OnClickSelect = OnClickSelect
QueueListItem.RefreshByBuildUuid = RefreshByBuildUuid
return QueueListItem