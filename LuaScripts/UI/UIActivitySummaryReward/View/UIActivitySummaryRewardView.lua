---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2021/9/15 16:38
---UIActivitySummaryRewardView

local base = UIBaseView--Variable
local UIActivitySummaryRewardView = BaseClass("UIActivitySummaryRewardView", base)--Variable
local Localization = CS.GameEntry.Localization
local RewardPreviewCell = require "UI.UIActivitySummaryReward.Component.RewardPreviewCell"

local Pivot_Max = 1.1
local Pivot_Min = -0.1
local Pivot_Mid = 0.5

local arrow_path = "offset/imgArrow"
local offset_path = "offset"
local rewardTip_path = "offset/TipsTitle"
local content_path = "offset/ScrollView/Viewport/Content"
local closeBtn_path = "Panel"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:RefreshAll()
end

local function OnDestroy(self)
    self:SetAllCellDestroy()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.offsetN = self:AddComponent(UIBaseContainer, offset_path)
    self.arrowN = self:AddComponent(UIImage, arrow_path)
    self.rewardTipN = self:AddComponent(UIText, rewardTip_path)
    self.rewardTipN:SetText(Localization:GetString("104191"))
    self.contentN = self:AddComponent(UIBaseContainer, content_path)
    self.closeBtnN = self:AddComponent(UIButton, closeBtn_path)
    self.closeBtnN:SetOnClick(function()
        self:OnClickCloseBtn()
    end)
end

local function ComponentDestroy(self)
    self.offsetN = nil
    self.arrowN = nil
    self.contentN = nil
end

local function DataDefine(self)
    self.models = {}
    self.alignObject = nil
end

local function DataDestroy(self)
    self.models = nil
    self.alignObject = nil
end

--[[
local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end
--]]

local function RefreshAll(self)
    self.rewardsList, self.alignObject = self:GetUserData()
    for i, v in ipairs(self.rewardsList) do
        if v.type == RewardType.GOLD then
            self.rewardsList[1], self.rewardsList[i] = self.rewardsList[i], self.rewardsList[1]
            break
        end
    end
    
    self:RefreshRewards()
    
    self:CheckAlign()
end

local function RefreshRewards(self)
    self:SetAllCellDestroy()
    if self.rewardsList ~= nil then
        self.models = {}
        for i = 1, table.length(self.rewardsList) do
            --复制基础prefab，每次循环创建一次
            self.models[i] = self:GameObjectInstantiateAsync(UIAssets.RewardPreviewCell, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.contentN.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                go.name ="item" .. i
                local cell = self.contentN:AddComponent(RewardPreviewCell,go.name)
                cell:SetItem(self.rewardsList[i])
            end)
        end
    end
end

local function SetAllCellDestroy(self)
    self.contentN:RemoveComponents(RewardPreviewCell)
    if self.models~=nil then
        for k,v in pairs(self.models) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
end


local function CheckAlign(self)
    local _arrowX = 0
    local _arrowY = 0
    local _rotation = 0
    local ScreenSize = CS.UnityEngine.Screen
    local ScreenWidth = ScreenSize.width
    local ScreenHeight = ScreenSize.height
    local scale = ScreenHeight / 750.0
    local _rect = self.offsetN.rectTransform.rect
    local BgWidth = _rect.width * scale
    local BgHeight = _rect.height * scale
    local alignObject = self.alignObject--_param["alignObject"]
    local _screenPos = PosConverse.WorldToScreenPos(alignObject.transform.position)
    local objWidth = alignObject.rectTransform.rect.width * scale
    local pivot = Vector2.New(0.5, 0.5)
    if (_screenPos.x + objWidth*0.4 + BgWidth > ScreenWidth) then
        pivot.x = Pivot_Max
        _arrowX = BgWidth / scale *0.5+3
    else
        pivot.x = Pivot_Min
        _arrowX = -BgWidth / scale *0.5-3
    end

    local pivotY = 0.5
    if _screenPos.y < (ScreenHeight - BgHeight) / 2 then
        pivotY = 0.1
    elseif _screenPos.y > (ScreenHeight / 2 + BgHeight / 2) then
        pivotY = 0.9
    else
        pivotY = (_screenPos.y - ((ScreenHeight - BgHeight) / 2)) / BgHeight
    end
    pivotY = math.min(pivotY, 0.9)
    pivotY = math.max(pivotY, 0.1)
    pivot.y = pivotY
    local rectH = _rect.height == 0 and 540 or _rect.height
    _arrowY = (pivotY - 0.5) * (rectH)
    
    if pivot.x == Pivot_Max then
        _rotation = 180
    else
        _rotation = 0
    end
    
    self.offsetN.rectTransform.pivot = pivot
    self.offsetN.transform.position = alignObject.transform.position

    self.arrowN.transform.localRotation = Quaternion.Euler(0, 0, _rotation)
    self.arrowN.rectTransform.anchoredPosition = Vector2.New(_arrowX, _arrowY)
end

local function OnClickCloseBtn(self)
    self.ctrl:CloseSelf()
end


UIActivitySummaryRewardView.OnCreate = OnCreate 
UIActivitySummaryRewardView.OnDestroy = OnDestroy
--UIActivitySummaryRewardView.OnAddListener = OnAddListener
--UIActivitySummaryRewardView.OnRemoveListener = OnRemoveListener
UIActivitySummaryRewardView.ComponentDefine = ComponentDefine
UIActivitySummaryRewardView.ComponentDestroy = ComponentDestroy
UIActivitySummaryRewardView.DataDefine = DataDefine 
UIActivitySummaryRewardView.DataDestroy = DataDestroy

UIActivitySummaryRewardView.RefreshAll = RefreshAll
UIActivitySummaryRewardView.RefreshRewards = RefreshRewards
UIActivitySummaryRewardView.SetAllCellDestroy = SetAllCellDestroy
UIActivitySummaryRewardView.CheckAlign = CheckAlign
UIActivitySummaryRewardView.OnClickCloseBtn = OnClickCloseBtn

return UIActivitySummaryRewardView