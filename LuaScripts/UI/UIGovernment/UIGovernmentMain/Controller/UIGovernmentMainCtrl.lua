---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/13 14:21
---

local UIGovernmentMainCtrl = BaseClass("UIGovernmentMainCtrl", UIBaseCtrl)
local GovernmentConst = require("DataCenter.GovernmentManager.GovernmentConst")
local Localization = CS.GameEntry.Localization
local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIGovernmentMain)
end

local function Close(self)
    UIManager.Instance:DestroyWindowByLayer(UILayer.Normal, false)
end

local function GetPresidentTabData(self)
    local info = DataCenter.GovernmentManager.presidentInfo
    local result = {}
    if info then
        result.declaration = info.declaration
        local now = UITimeManager:GetInstance():GetServerTime()
        local endTime = info.assignFinishTime
        if endTime > now and string.IsNullOrEmpty(info.uid) then
            result.canAssign = true
        end
    else
        result.declaration = ""
    end
    if string.IsNullOrEmpty(result.declaration) then
        result.declaration = Localization:GetString("250123")
    end
    result.canEditDeclaration = DataCenter.GovernmentManager:IsSelfPresident()
    return result
end

local function GetPresidentInfo(self)
    local info = DataCenter.GovernmentManager.presidentInfo
    local result = {}
    if info == nil then
        result.presidentInfo = nil
        result.canAssign = false
        result.assignEndTime = 0
    else
        local now = UITimeManager:GetInstance():GetServerTime()
        local endTime = info.assignFinishTime
        result.occupyAllianceId = info.occupyAllianceId
        --endTime = now + 1000000
        --info.occupyAllianceId = LuaEntry.Player.allianceId
        if endTime > now and string.IsNullOrEmpty(info.uid) then
            local isSelfLeader = DataCenter.AllianceBaseDataManager:IsSelfLeader()
            if LuaEntry.Player.allianceId == info.occupyAllianceId and isSelfLeader then
                result.canAssign = true
            end
            result.assignEndTime = endTime
        else
            if not string.IsNullOrEmpty(info.uid) then
                result.presidentInfo = DeepCopy(info)
            end
        end
    end
    return result
end

local function GetGovernmentTabData(self)
    local all = DataCenter.GovernmentTemplateManager:GetAllTemplate()
    local tmp = {}

    for k, v in pairs(all) do
        if v.is_positive ~= 0 and v.id ~= GovernmentConst.King_Position_id then
            if tmp[v.is_positive] == nil then
                tmp[v.is_positive] = {}
            end
            local param = {}
            param.id = k
            param.name = v.name
            param.icon = v.icon
            local positionInfo = DataCenter.GovernmentManager:GetPositionInfoByPositionId(k)
            param.positionInfo = positionInfo
            table.insert(tmp[v.is_positive], param)
        end
    end

    local lang = {250005}
    local result = {}
    local list = {}
    result.list = list
    for i = 1, 1 do
        local pList = tmp[i]
        if pList == nil then
            break
        end
        --table.sort(pList, function (k, v)
        --    
        --    return false
        --end)
        --local param = {}
        --param.type = GovernmentConst.Official_Appoint_Cell_Type.Official_Appoint_Cell_Type_Title
        --param.name = lang[i]
        --table.insert(list, param)

        local positionPara
        for index, v in ipairs(pList) do
            if math.fmod(index, GovernmentConst.Official_Cell_Num_Per_Line) == 1 then
                positionPara = {}
                positionPara.type = GovernmentConst.Official_Appoint_Cell_Type.Official_Appoint_Cell_Type_Position
                positionPara.list = {}
                table.insert(list, positionPara)
            end
            table.insert(positionPara.list, v)
        end
    end

    return result
end

local function GetTabButtonData(self)
    local lang = {250045, 250005}
    local GetData = function(index)
        local para = {}
        
        para.id = index
        para.name = lang[index]
        return para
    end
    return GetData(1), GetData(2)
end

UIGovernmentMainCtrl.CloseSelf = CloseSelf
UIGovernmentMainCtrl.Close = Close
UIGovernmentMainCtrl.GetPresidentTabData = GetPresidentTabData
UIGovernmentMainCtrl.GetTabButtonData = GetTabButtonData
UIGovernmentMainCtrl.GetGovernmentTabData = GetGovernmentTabData
UIGovernmentMainCtrl.GetPresidentInfo = GetPresidentInfo

return UIGovernmentMainCtrl