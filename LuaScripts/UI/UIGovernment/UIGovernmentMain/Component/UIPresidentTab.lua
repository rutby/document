---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/13 20:37
---

local UIPresidentTab = BaseClass("UIPresidentTab", UIBaseContainer)
local base = UIBaseContainer

local reward_btn_path = "Btns/RewardBtn"
local reward_btn_text_path = "Btns/RewardBtn/RewardBtnText"
local reward_btn_red_dot_path = "Btns/RewardBtn/RewardBtn_RedPoint"

local honor_btn_path = "Btns/HonorBtn"
local honor_btn_text_path = "Btns/HonorBtn/HonorBtnText"

local command_btn_path = "Btns/CommandBtn"
local command_btn_text_path = "Btns/CommandBtn/CommandBtnText"

local migrate_btn_path = "Btns/MigrateBtn"
local migrate_btn_text_path = "Btns/MigrateBtn/migrateBtnText"
local migrate_btn_red_dot_path = "Btns/MigrateBtn/migrateBtn_RedPoint"

local sign_txt_path = "InputField"
local input_img_path = "InputField/InputImg"
local text_path = "Text"
--创建
local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    self:GetDataFromServer()
end

-- 销毁
local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.reward_btn = self:AddComponent(UIButton, reward_btn_path)
    self.reward_btn_text = self:AddComponent(UIText, reward_btn_text_path)
    self.reward_btn_text:SetLocalText(250035)
    self.honor_btn = self:AddComponent(UIButton, honor_btn_path)
    self.honor_btn_text = self:AddComponent(UIText, honor_btn_text_path)
    self.honor_btn_text:SetLocalText(250031)
    self.command_btn = self:AddComponent(UIButton, command_btn_path)
    self.command_btn_text = self:AddComponent(UIText, command_btn_text_path)
    self.command_btn_text:SetLocalText(250114)
    self.migrate_btn = self:AddComponent(UIButton, migrate_btn_path)
    self.migrate_btn_text = self:AddComponent(UIText, migrate_btn_text_path)
    self.migrate_btn_text:SetLocalText(250353)
    self.sign_input = self:AddComponent(UIInput, sign_txt_path)
    self.sign_input:SetOnEndEdit(function (value)
        self:IptOnValueChange(value)
    end)

    self.text = self:AddComponent(UIText, text_path)
    self.text:SetLocalText(250050)
    self.text:SetActive(false)
    self.input_img = self:AddComponent(UIImage, input_img_path)
    self.reward_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnRewardClick()
    end)
    self.honor_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnHonorClick()
    end)
    self.command_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnCommandClick()
    end)
    self.migrate_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnMigrateClick()
    end)
    self.reward_btn_red_dot = self:AddComponent(UIBaseContainer, reward_btn_red_dot_path)
    self.migrate_btn_red_dot = self:AddComponent(UIBaseContainer, migrate_btn_red_dot_path)
end

local function ComponentDestroy(self)
end

local function DataDefine(self)

end

local function DataDestroy(self)

end

local function OnEnable(self)
    base.OnEnable(self)
end

local function OnDisable(self)
    --self:SaveStr()
    base.OnDisable(self)
end

local function ReInit(self)
    DataCenter.GovernmentManager:GetKingdomPresentInfo(LuaEntry.Player:GetSrcServerId())
    self:RefreshView()
end

local function RefreshView(self)
    self.data = self.view.ctrl:GetPresidentTabData()
    self.sign_input:IsEnabled(self.data.canEditDeclaration)
    self.input_img:SetActive(self.data.canEditDeclaration)
    self.sign_input:SetText(self.data.declaration)
    self.text:SetActive(self.data.canAssign == true)
    
    if DataCenter.GovernmentManager:IsSelfPresident() and DataCenter.GovernmentManager:IsNeedReward() then
        self.reward_btn_red_dot:SetActive(true)
    else
        self.reward_btn_red_dot:SetActive(false)
    end
    self:RefreshMigrate()
end

local function RefreshMigrate(self)
    local showMigrate = false
    if DataCenter.GovernmentManager:IsSelfPresident() then
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
        if table.count(dataList) > 0 then
            local actListData = dataList[1]
            if actListData then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if actListData.startTime < curTime and curTime < actListData.endTime  then
                    showMigrate = true

                end
            end
        end
    end
    self.migrate_btn:SetActive(showMigrate == true)
    if showMigrate then
        local showRed = false
        local data = DataCenter.MigrateDataManager:GetApplyList()
        if data~=nil and table.count(data)>0 then
            showRed = true
        end
        self.migrate_btn_red_dot:SetActive(showRed)
    end
end

local function OnRewardClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIThronePresidentReward)
end

local function OnHonorClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIThronePresidentHonour)
end

local function OnCommandClick(self)
    if DataCenter.GovernmentManager:IsSelfPresident() then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIMailSend,{anim = true},MailType.MAIL_PRESIDENT_SEND)
    else
        UIUtil.ShowTipsId(GameDialogDefine.ONLY_PRESIDENT_CAN_CHANGE)
    end
end

local function GetDataFromServer(self)
    DataCenter.GovernmentManager:GetKingInfo(LuaEntry.Player:GetSrcServerId())
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.KingdomPresidentInfoUpdate, self.RefreshView)
    self:AddUIListener(EventId.GovernmentPresentRefresh, self.GovernmentPresentRefreshSignal)
    self:AddUIListener(EventId.OnRefreshMigrateRedPot, self.RefreshMigrate)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.KingdomPresidentInfoUpdate, self.RefreshView)
    self:RemoveUIListener(EventId.GovernmentPresentRefresh, self.GovernmentPresentRefreshSignal)
    self:RemoveUIListener(EventId.OnRefreshMigrateRedPot, self.RefreshMigrate)
    base.OnRemoveListener(self)
end

local function SaveStr(self)
    if self.data == nil then
        return
    end
    local inputStr = self.sign_input:GetText()
    if inputStr=="" then
        return
    end
    if inputStr ~= self.data.declaration then
        DataCenter.GovernmentManager:ModifyKingDeclaration(inputStr)
    end
end

function UIPresidentTab:GovernmentPresentRefreshSignal()
    self:RefreshView()
end

local function IptOnValueChange(self)
    self:SaveStr()
end

local function OnMigrateClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISetMigrationPower)
end

UIPresidentTab.SaveStr = SaveStr
UIPresidentTab.OnAddListener = OnAddListener
UIPresidentTab.OnRemoveListener = OnRemoveListener
UIPresidentTab.OnRewardClick = OnRewardClick
UIPresidentTab.OnHonorClick = OnHonorClick
UIPresidentTab.OnCommandClick = OnCommandClick
UIPresidentTab.OnCreate = OnCreate
UIPresidentTab.OnDestroy = OnDestroy
UIPresidentTab.OnEnable = OnEnable
UIPresidentTab.OnDisable = OnDisable
UIPresidentTab.ComponentDefine = ComponentDefine
UIPresidentTab.ComponentDestroy = ComponentDestroy
UIPresidentTab.DataDefine = DataDefine
UIPresidentTab.DataDestroy = DataDestroy
UIPresidentTab.ReInit = ReInit
UIPresidentTab.RefreshView = RefreshView
UIPresidentTab.GetDataFromServer = GetDataFromServer
UIPresidentTab.IptOnValueChange = IptOnValueChange
UIPresidentTab.RefreshMigrate= RefreshMigrate
UIPresidentTab.OnMigrateClick= OnMigrateClick
return UIPresidentTab