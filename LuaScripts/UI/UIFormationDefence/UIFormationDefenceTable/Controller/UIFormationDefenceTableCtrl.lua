---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/7/20 14:46
---
local UIFormationDefenceTableCtrl = BaseClass("UIFormationDefenceTableCtrl", UIBaseCtrl)
local Localization = CS.GameEntry.Localization
local function CloseSelf(self)
    self:OnSaveDefenceFormation()
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIFormationDefenceTable)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function SetCurIndex(self,index)
    self.curIndex = index
end

local function InitData(self)
    self.formationList = DataCenter.ArmyFormationDataManager:GetDefenceArmyFormationData()
    local wallData = DataCenter.DefenceWallDataManager:GetConfigData()
    self.defenceFormationMaxSize = wallData.defenceFormationMaxSize
    self.defFormationFirstMaxCount = wallData.defFormationFirstMaxCount
    self.defFormationSecondMaxCount = wallData.defFormationSecondMaxCount
    self.defFormationThirdMaxCount = wallData.defFormationThirdMaxCount
    self.curFormationUuid = 0
    self:GetFormationEffect()
    self.buildTemplate = {}
    self.buildTemplate.name = GetTableData(DataCenter.BuildTemplateManager:GetTableName(), BuildingTypes.FUN_BUILD_MAIN + 0,"name")
    --self.buildTemplate.FormationUnLockLevel = {}
    self.buildTemplate.formationUnLockIndex = {}
    self.buildTemplate.formationUnLockIndex[1] = {}
    --self.buildTemplate.formationUnLockIndex[2] = {}
    --self.buildTemplate.formationUnLockIndex[3] = {}
    --local vecPara1 = string.split(buildTemplate.para1,"|")
    --for k,v in ipairs(vecPara1) do
    --    local vec1 = string.split(v,";")
    --    if #vec1 >= 2 then
    --        self.buildTemplate.FormationUnLockLevel[tonumber(vec1[1])] = tonumber(vec1[2])
    --    end
    --end
    --local vecPara2 = string.split(buildTemplate.para2,"|")
    --for k,v in ipairs(vecPara2) do
    --    local vec1 = string.split(v,";")
    --    if #vec1 >= 2 then
    --        self.buildTemplate.formationUnLockIndex[1][tonumber(vec1[1])] = tonumber(vec1[2])
    --    end
    --end
    local levelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(BuildingTypes.FUN_BUILD_MAIN, 0)
    local vecPara3 = string.split(levelTemplate.para3,"|")
    --local vecPara3 = string.split("2;1|3;6|4;10|5;13","|")

    for _, v in ipairs(vecPara3) do
        local vec1 = string.split(v,";")
        if #vec1 >= 2 then
            self.buildTemplate.formationUnLockIndex[1][tonumber(vec1[1])] = tonumber(vec1[2])
        end
    end
    --local vecPara4 = string.split(buildTemplate.para4,"|")
    --for k,v in ipairs(vecPara4) do
    --    local vec1 = string.split(v,";")
    --    if #vec1 >= 2 then
    --        self.buildTemplate.i[3][tonumber(vec1[1])] = tonumber(vec1[2])
    --    end
    --end
end

local function GetBuildTemplateData(self)
    return self.buildTemplate
end

local function GetFormationEffect(self)
    local attack_base_arm = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_ADD_BASE_ALL_ARMY)
    local attack_arm1 = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_ADD_BASE_ARM_1)
    local attack_arm2 = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_ADD_BASE_ARM_2)
    local attack_arm3 = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_ADD_BASE_ARM_3)
    local attack_base_build = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_ADD_BUILD_ALL_ARMY)
    local attack_build1 = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_ADD_BUILD_ARM_1)
    local attack_build2 = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_ADD_BUILD_ARM_2)
    local attack_build3 = LuaEntry.Effect:GetGameEffect(EffectDefine.ATTACK_ADD_BUILD_ARM_3)
    self.attackEffect = attack_base_arm + math.max(attack_arm1,attack_arm2,attack_arm3)+attack_base_build+math.max(attack_build1,attack_build2,attack_build3)
    local defence_base_arm = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_ADD_BASE_ALL_ARMY)
    local defence_arm1 = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_ADD_BASE_ARM_1)
    local defence_arm2 = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_ADD_BASE_ARM_2)
    local defence_arm3 = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_ADD_BASE_ARM_3)
    local defence_base_build = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_ADD_BUILD_ALL_ARMY)
    local defence_build1 = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_ADD_BUILD_ARM_1)
    local defence_build2 = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_ADD_BUILD_ARM_2)
    local defence_build3 = LuaEntry.Effect:GetGameEffect(EffectDefine.DEFENCE_ADD_BUILD_ARM_3)

    self.defenceEffect = defence_base_arm + math.max(defence_arm1,defence_arm2,defence_arm3)+defence_base_build+math.max(defence_build1,defence_build2,defence_build3)
    self.k2 = LuaEntry.DataConfig:TryGetNum("battle_config", "k2")
    self.k5 = LuaEntry.DataConfig:TryGetNum("battle_config", "k5")
end

local function GetFormationIdList(self)
    self.formationIndex ={}
    local idList ={}
    table.walksort(self.formationList,function (leftKey,rightKey)
        return self.formationList[leftKey].index<self.formationList[rightKey].index
    end, function (k,v)
        self.formationIndex[k] = v.index
        table.insert(idList,k)
    end)
    return idList
end

local function GetBuildData(self)
    local data = {}
    local wallData = DataCenter.DefenceWallDataManager:GetConfigData()
    data.defDomeMaxNum = wallData.defDomeMaxNum
    data.defDomeAddSpeed = wallData.defDomeAddSpeed
    data.fixPercentOnce = wallData.fixPercentOnce
    data.fixDiamond = wallData.fixDiamond
    data.fixColdDownTime =wallData.fixColdDownTime
    local defenceData = DataCenter.DefenceWallDataManager:GetDefenceWallData()
    if defenceData~=nil then
        local durability = defenceData.durability
        local curTime = UITimeManager:GetInstance():GetServerTime()
        data.fireEndTime = defenceData.fireEndTime
        data.lastDurabilityTime = math.max(defenceData.lastDurabilityTime,defenceData.fireEndTime)
        local addNum = ((curTime- data.lastDurabilityTime)/1000)*(wallData.defDomeAddSpeed)
        local realDurabilityNum = durability+math.max(addNum,0)
        data.durability = math.min(realDurabilityNum,wallData.defDomeMaxNum)
        data.lastGoldRecoverDurabilityTime = defenceData.lastGoldRecoverDurabilityTime
        
    end
    return data
end

local function SelectCurFormationUuid(self,uuid)
    self.curFormationUuid = uuid
end

local function GetCurrentHeroDataList(self)
    local heroes = DataCenter.HeroDataManager:GetMasterHeroList()
    local campA = nil
    local campB = nil
    table.sort(heroes, function(heroA, heroB)
        if heroA.state~=heroB.state then
            return heroA.state < heroB.state
        end
        if heroA.rarity ~= heroB.rarity then
            return heroA.rarity < heroB.rarity
        end
        if heroA.level ~= heroB.level then
            return heroA.level > heroB.level
        end

        if heroA.quality ~= heroB.quality then
            return heroA.quality > heroB.quality
        end
        campA = heroA:GetCamp()
        campB = heroB:GetCamp()
        if campA ~= campB then
            return campA < campB
        end

        return heroA.heroId < heroB.heroId
    end)
    local result = {}
    for _, heroData in ipairs(heroes) do
        table.insert(result, heroData.uuid)
    end
    return result
end
local function GetHeroIdInFormationWithOutCurIndex(self)
    local heroIdList ={}
    table.walk(self.formationList,function(k,v)
        if k~= self.curFormationUuid then
            table.walk(v.heroes,function(a,b)
                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(a)
                if heroData~=nil then
                    heroIdList[heroData.heroId] = 1
                end
            end)
        end
    end)
    return heroIdList
end

local function GetIsInFormationWithoutCurIndex(self,uuid)
    local isIn =  false
    local curFormationIndex = 0
    table.walk(self.formationList,function(k,v)
        if isIn ==false then
            if k~= self.curFormationUuid then
                table.walk(v.heroes,function(a,b)
                    if a == uuid then
                        isIn = true
                    end
                end)
            end
            if isIn then
                curFormationIndex = self.formationIndex[k]
            end
        end
    end)
    return curFormationIndex
end

local function GetHeroDataByUuid(self,heroUuid)
    local data = {}
    local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
    local camp = heroData:GetCamp()
    data.heroUuid = heroUuid
    data.heroId = heroData.heroId
    data.icon = HeroUtils.GetHeroBodyByHeroId(heroData.heroId)
    data.level = heroData.level
    data.camp  = HeroUtils.GetCampIconPath(camp)
    data.index = 0
    data.isInMarch = false
    data.isSelect = false
    data.isInSelectFormationIndex = 0
    data.isLock = false
    if heroData.state == ArmyFormationState.March then
        data.isInMarch = true
        local curFormation = self.formationList[self.curFormationUuid]
        if curFormation~=nil and curFormation.heroes~=nil then
            table.walk(curFormation.heroes,function (k,v)
                if k== heroUuid then
                    data.index = v
                end
            end)
        end
    else
        local inMarchHeroId = DataCenter.HeroDataManager:GetHeroIdListInMarch()
        if inMarchHeroId[heroData.heroId]~=nil then
            data.isLock = true
        else
            local index = self:GetIsInFormationWithoutCurIndex(heroUuid)
            if index>0 then
                data.isInSelectFormationIndex = index
            else
                local heroList = self:GetHeroIdInFormationWithOutCurIndex()
                if heroList[heroData.heroId]~=nil then
                    data.isLock = true
                else
                    local curFormation = self.formationList[self.curFormationUuid]
                    if curFormation~=nil and curFormation.heroes~=nil then
                        table.walk(curFormation.heroes,function (k,v)
                            if k== heroUuid then
                                data.index = v
                                data.isSelect = true
                            else
                                local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                                if tempHeroData~=nil then
                                    if tempHeroData.heroId == heroData.heroId then
                                        data.isLock = true
                                    end
                                end
                            end
                        end)
                    end
                end
            end
        end
    end
    return data
end

local function GetCurHeroData(self,formationUuid)
    local heroData = {}
    if self.formationList[formationUuid]~=nil then
        table.walk(self.formationList[formationUuid].heroes,function(k,v)
            local data = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if data~=nil then
                heroData[v] = k
            end
        end)
    end
    return heroData
end

local function SetCurrentHeroList(self,formationUuid,heroData)
    local heroes = {}
    if self.formationList[formationUuid]~=nil then
        table.walk(heroData,function(k,v)
            heroes[v] = k
        end)
    end
    self.formationList[formationUuid].heroes = heroes
end
local function SelectHeroByUuid(self,heroUuid)
    local tempIndex = 0
    local formationIndex = self.formationIndex[self.curFormationUuid]
    local maxHeroNum =0
    if formationIndex == 1 then
        maxHeroNum = self.defFormationFirstMaxCount
    elseif formationIndex ==2 then
        maxHeroNum = self.defFormationSecondMaxCount
    elseif formationIndex ==3 then
        maxHeroNum = self.defFormationThirdMaxCount
    end
    if maxHeroNum>0 then
        local heroData = self:GetCurHeroData(self.curFormationUuid)
        for i =1,maxHeroNum do
            if tempIndex<=0 then
                if heroData[i] ==nil then
                    tempIndex = i
                end
            end
        end
        if tempIndex>0 then
            heroData[tempIndex]= heroUuid
            self:SetCurrentHeroList(self.curFormationUuid,heroData)
            local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
            if tempHeroData~=nil then
                EventManager:GetInstance():Broadcast(EventId.OnSelectHeroSelect,tempHeroData.heroId)
            end
        end
    end
end

local function GetMaxHeroNumByFormationUuid(self,formationUuid)
    local formationIndex = self.formationIndex[formationUuid]
    local maxHeroNum =0
    if formationIndex == 1 then
        maxHeroNum = self.defFormationFirstMaxCount
    elseif formationIndex ==2 then
        maxHeroNum = self.defFormationSecondMaxCount
    elseif formationIndex ==3 then
        maxHeroNum = self.defFormationThirdMaxCount
    end
    return maxHeroNum
end
local function OnDeleteHeroByIndex(self,index)
    local heroData = self:GetCurHeroData(self.curFormationUuid)
    if heroData[index]~=nil then
        local uuid =0
        uuid = heroData[index]
        heroData[index] =nil
        local tempHeroData = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
        self:SetCurrentHeroList(self.curFormationUuid,heroData)

        if tempHeroData~=nil then
            EventManager:GetInstance():Broadcast(EventId.OnCancelHeroSelect,tempHeroData.heroId)
        end
    end
end

local function GetPowerData(self,formationUuid)
    local powerData = {}
    powerData.attackNum =0
    powerData.defNum = 0
    local formation =  self.formationList[formationUuid]
    local heroAttack = 0
    local heroDefence = 0
    if formation~=nil then
        table.walk(formation.heroes,function(k,v)
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                heroAttack  = heroAttack + heroData.atk
                heroDefence = heroDefence + heroData.def
            end
        end)
    end
    powerData.attackNum = heroAttack*self.k2 + self.attackEffect
    powerData.defNum = heroDefence*self.k5 + self.defenceEffect
    --todo:英雄作用号未加
    return powerData
end

local function OnSaveDefenceFormation(self)
    if self.formationList~=nil then
        table.walk(self.formationList,function(k,v)
            --if table.count(v.heroes)>0 then
                SFSNetwork.SendMessage(MsgDefines.DefenseInfoSave, k,v.heroes)
            --end

        end)
    end
end

local function fixDefencePower(self)
    local data = self:GetBuildData()
    local maxFixNum = data.defDomeMaxNum *data.fixPercentOnce/100
    local diamondNum = data.fixDiamond
    local message = Localization:GetString(GameDialogDefine.FIX_DOME_CONFIRM,string.GetFormattedSeperatorNum(math.floor(diamondNum)),string.GetFormattedSeperatorNum(math.floor(maxFixNum)))
    UIUtil.ShowMessage(message, 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL,function()
        SFSNetwork.SendMessage(MsgDefines.CityDefenceAdd)
    end, function()
    end)
end


local function GetAllCityManageData(self)
    local retTb = {}
    local conf = DataCenter.CityManageDataManager:GetAllCityManageData()
    for i, group in ipairs(conf) do
        local groupContent = {}
        for j, buff in ipairs(group) do
            if buff.id == CityManageBuffType.GolloesFever or buff.id == CityManageBuffType.GolloesGuard then
                local timeInfo = DataCenter.StatusManager:GetBuffTimeInfo(buff.status)
                if timeInfo and timeInfo.endTime ~= nil and timeInfo.totalTime ~= nil then
                    table.insert(groupContent, buff)
                end
            elseif buff.id == CityManageBuffType.AlCompeteScoreAdd1 or buff.id == CityManageBuffType.AlCompeteScoreAdd2 then
                local timeInfo = DataCenter.StatusManager:GetBuffTimeInfo(buff.status)
                local serverTime = UITimeManager:GetInstance():GetServerTime()
                if timeInfo and timeInfo.endTime ~= nil and timeInfo.endTime > serverTime and timeInfo.totalTime ~= nil then
                    table.insert(groupContent, buff)
                end
            else
                if buff.id == CityManageBuffType.WarGuard then
                    --if LuaEntry.Player.serverType ~= ServerType.EDEN_SERVER then
                        table.insert(groupContent, buff)
                    --end
                elseif buff.id == CityManageBuffType.EdenWarGuard then
                    --if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
                    --    table.insert(groupContent, buff)
                    --end
                else
                    table.insert(groupContent, buff)
                end
            end
        end
        if #groupContent > 0 then
            table.insert(retTb, groupContent)
        end
    end
    return retTb
end


UIFormationDefenceTableCtrl.CloseSelf =CloseSelf
UIFormationDefenceTableCtrl.Close =Close
UIFormationDefenceTableCtrl.InitData =InitData
UIFormationDefenceTableCtrl.OnDeleteHeroByIndex = OnDeleteHeroByIndex
UIFormationDefenceTableCtrl.SelectHeroByUuid = SelectHeroByUuid
UIFormationDefenceTableCtrl.GetHeroDataByUuid = GetHeroDataByUuid
UIFormationDefenceTableCtrl.GetCurrentHeroDataList = GetCurrentHeroDataList
UIFormationDefenceTableCtrl.OnDeleteHeroByIndex = OnDeleteHeroByIndex
UIFormationDefenceTableCtrl.GetCurHeroData = GetCurHeroData
UIFormationDefenceTableCtrl.SetCurIndex =SetCurIndex
UIFormationDefenceTableCtrl.GetFormationIdList= GetFormationIdList
UIFormationDefenceTableCtrl.GetBuildData =GetBuildData
UIFormationDefenceTableCtrl.SetCurrentHeroList =SetCurrentHeroList
UIFormationDefenceTableCtrl.SelectCurFormationUuid = SelectCurFormationUuid
UIFormationDefenceTableCtrl.GetHeroIdInFormationWithOutCurIndex = GetHeroIdInFormationWithOutCurIndex
UIFormationDefenceTableCtrl.GetIsInFormationWithoutCurIndex = GetIsInFormationWithoutCurIndex
UIFormationDefenceTableCtrl.GetPowerData = GetPowerData
UIFormationDefenceTableCtrl.GetFormationEffect =GetFormationEffect
UIFormationDefenceTableCtrl.GetMaxHeroNumByFormationUuid = GetMaxHeroNumByFormationUuid
UIFormationDefenceTableCtrl.OnSaveDefenceFormation = OnSaveDefenceFormation
UIFormationDefenceTableCtrl.fixDefencePower = fixDefencePower
UIFormationDefenceTableCtrl.GetBuildTemplateData = GetBuildTemplateData
UIFormationDefenceTableCtrl.GetAllCityManageData = GetAllCityManageData

return UIFormationDefenceTableCtrl