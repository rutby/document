---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/27 21:14
---

local UIPlayerInfoView = BaseClass("UIPlayerInfoView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local PlayerContent = require "UI.UIPlayerInfo.Component.PlayerContent"
local FormationStaminaSlider = require "UI.UIFormation.UIFormationSelectListNew.Component.FormationStaminaSlider"
local txt_title_path = "UICommonFullTop/imgTitle/Common_img_title/titleText"
local close_btn_path = "UICommonFullTop/CloseBtn"
--local return_btn_path = "UICommonPopUpTitle/panel"

local tab_content_path = "TabContent"
local sliderBg = "UICommonFullTop/Bg2/PlayerContent/The_character_information/sliderBg"
local player_content_path = "UICommonFullTop/Bg2/PlayerContent"
local player_tab_path = "TabContent/PlayerTab"
local player_icon_path = "TabContent/PlayerTab/PlayerIcon"


local TabType =
{
    Player = 1,
}

local function OnCreate(self)
    base.OnCreate(self)
    
    -- Common
    self.staminaSlider =  self:AddComponent(FormationStaminaSlider,sliderBg)
    self.staminaSlider:SetTipLeft()
    self.txt_title = self:AddComponent(UITextMeshProUGUIEx, txt_title_path)
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    -- self.return_btn = self:AddComponent(UIButton, return_btn_path)
    -- self.return_btn:SetOnClick(function()
    --     if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UIArrow) then
    --         return
    --     end
    --     self.ctrl:CloseSelf()
    -- end)

    self.tab_content = self:AddComponent(UIBaseContainer, tab_content_path)
    self.tab_content:SetActive(false)
    
    -- Player
    self.player_content = self:AddComponent(PlayerContent, player_content_path)
    self.player_img = self:AddComponent(UIImage, player_icon_path)
    self.player_btn = self:AddComponent(UIButton, player_tab_path)
    self.player_btn:SetOnClick(function()
        self:OnClickTab(TabType.Player)
    end)
    self.timer_action = function(temp)
        self:RefreshFormationStamina()
    end
end

local function OnDestroy(self)
    self:DeleteTimer()
    -- Common
    self.txt_title = nil
    self.close_btn = nil
    self.return_btn = nil
    
    -- Player
    self.player_content = nil
    self.player_img = nil
    self.player_btn = nil
    
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.staminaSlider:SetActive(true)
    self:AddTimer()
    self:OnClickTab(TabType.Player)
end


local function OnDisable(self)
    self:DeleteTimer()
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
end

local function OnClickTab(self, type)
    if type == TabType.Player then
        self.txt_title:SetLocalText(280024) 
        self.player_btn:LoadSprite(string.format(LoadPath.CommonNewPath,"Common_btn_tab_up"))
        self.player_img:LoadSprite(string.format(LoadPath.CommonNewPath,"UIForcesDetail_btn_player"))
        self.player_content:SetActive(true)
        local uid,isArrow = self:GetUserData()      --isArrow:  PLayerInfoArrowType
        local param = { uid = uid, isArrow = isArrow, ctrl = self.ctrl }
        self.player_content:ReInit(param)
        self:SetCloseBtnReturn(false)
    end
end

local function SetCloseBtnReturn(self, ret)
    if ret then
        self.close_btn:SetOnClick(function()
            self:OnClickTab(TabType.Player)
        end)
    else
        self.close_btn:SetOnClick(function()
            self.ctrl:CloseSelf()
        end)
    end
end

local function RefreshFormationStamina(self)
    self.staminaSlider:UpdateStamina()
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

UIPlayerInfoView.OnCreate= OnCreate
UIPlayerInfoView.OnDestroy = OnDestroy
UIPlayerInfoView.OnEnable = OnEnable
UIPlayerInfoView.OnDisable = OnDisable
UIPlayerInfoView.OnAddListener = OnAddListener
UIPlayerInfoView.OnRemoveListener = OnRemoveListener
UIPlayerInfoView.OnClickTab = OnClickTab
UIPlayerInfoView.SetCloseBtnReturn = SetCloseBtnReturn
UIPlayerInfoView.AddTimer =AddTimer
UIPlayerInfoView.DeleteTimer = DeleteTimer
UIPlayerInfoView.RefreshFormationStamina =  RefreshFormationStamina

return UIPlayerInfoView