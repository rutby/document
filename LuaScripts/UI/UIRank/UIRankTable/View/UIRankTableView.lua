---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/9/2 20:21
---
local RankSimpleItem = require "UI.UIRank.UIRankTable.Component.RankSimpleItem"
local UIRankTableView = BaseClass("UIRankTableView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization

local txt_title_path ="UICommonFullTop/imgTitle/Common_img_title/titleText"
local close_btn_path = "UICommonFullTop/CloseBtn"
--local goback_btn_path = "Btn_GoBack"
local content_path = "UICommonFullTop/Bg2/ScrollView/Viewport/Content"
--local return_btn_path = "UICommonFullTop/panel"
local function OnCreate(self)
    base.OnCreate(self)
    self.title = self:AddComponent(UITextMeshProUGUIEx,txt_title_path)
    self.title:SetLocalText(390040) 
    self.close_btn = self:AddComponent(UIButton, close_btn_path)
    self.close_btn:SetOnClick(function()  
        self.ctrl:CloseSelf()
    end)
    -- self.return_btn = self:AddComponent(UIButton, return_btn_path)
    -- self.return_btn:SetOnClick(function()  
    --     self.ctrl:CloseSelf()
    -- end)
    -- self.goback_btn = self:AddComponent(UIButton, goback_btn_path)
    -- self.goback_btn:SetOnClick(function()
    --     self.ctrl:CloseSelf()
    -- end)
    self.content = self:AddComponent(UIBaseContainer,content_path)

    local list = self.ctrl:GetRankTypeList()
    self.buttonListInType = {}
    self.model = {}
    self._num = table.length(list)
    if list~=nil then
        for i = 1, table.length(list) do
            --复制基础prefab，每次循环创建一次
            self.model[list[i].type] = self:GameObjectInstantiateAsync(UIAssets.RankSimpleItem, function(request)
                if request.isError then
                    return
                end
                local go = request.gameObject;
                go.gameObject:SetActive(true)
                go.transform:SetParent(self.content.transform)
                go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                local nameStr = tostring(NameCount)
                go.name = tostring(list[i].type)
                NameCount = NameCount + 1
                local cell = self.content:AddComponent(RankSimpleItem,tostring(list[i].type))
                cell:InitByType(list[i])
                self.buttonListInType[list[i].type] = cell
			    if  i==table.length(list) then
					self.ctrl:InitPrewView()
				end
            end)
            self._num = self._num - 1
        end
    end
	
    if self._num == 0 then
        self:OnRefresh()
    end
end

local function OnDestroy(self)
    self.content:RemoveComponents(RankSimpleItem)
    if self.model~=nil then
        for k,v in pairs(self.model) do
            if v ~= nil then
                self:GameObjectDestroy(v)
            end
        end
    end
    self.buttonListInType =nil

    self.title = nil
    self.content = nil
    self.return_btn =nil
    self.close_btn = nil
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
	self.ctrl:InitPrewView()
    self:OnRefresh()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnRefresh(self)
    local list = self.ctrl:GetRankTypeList()
    if list ~= nil and next(self.buttonListInType) then
        for i = 1,table.length(list) do
            self.buttonListInType[list[i].type]:RefreshData(list[i])
        end
    end
end
local function UpdatePrewView(self,param)
	local data = param["data"]
	for k, v in pairs(data) do
		local index = tonumber(k)
		if self.buttonListInType[index]~=nil then
			self.buttonListInType[index]:RefreshShowData(data[index])
		end
	end
end
local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.UpdateRankPreview, self.UpdatePrewView)
	
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
	self:RemoveUIListener(EventId.UpdateRankPreview, self.UpdatePrewView)
    --self:RemoveUIListener(EventId.PlayerRank, self.OnRefresh)
end


UIRankTableView.OnCreate = OnCreate
UIRankTableView.OnDestroy = OnDestroy
UIRankTableView.OnRefresh = OnRefresh
UIRankTableView.OnEnable = OnEnable
UIRankTableView.OnDisable = OnDisable
UIRankTableView.OnAddListener = OnAddListener
UIRankTableView.OnRemoveListener = OnRemoveListener
UIRankTableView.UpdatePrewView =UpdatePrewView

return UIRankTableView