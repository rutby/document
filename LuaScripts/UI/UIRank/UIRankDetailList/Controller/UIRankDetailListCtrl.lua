---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/9/2 20:23
---
local RankItemShow =
{
    type = RankType.None,
    isAlliance =false,
    uid ="",
    firstName ="",
    secondName = "",
    rank =-1,
    power = "",
    power2 = nil,
    allianceName = "",
    icon = "",
    directionIcon = ""
}

local OneData = DataClass("OneData", RankItemShow)
local UIRankDetailListCtrl = BaseClass("UIRankDetailListCtrl", UIBaseCtrl)

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UIRankDetailList)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function GetSelfData(self,type)
    local oneData = OneData.New()
	local Player = LuaEntry.Player
    if type == RankType.AlliancePower or type == RankType.AllianceKill or type == RankType.OtherServerAlliancePower then
        oneData.isAlliance = true
        oneData.type = type
        local rank = DataCenter.RankDataManager:GetSelfAllianceRankByType(type)
        local allianceData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
        if rank>0 and Player:IsInAlliance() and allianceData~=nil then
            oneData.uid = Player.allianceId
            oneData.rank = rank
            oneData.firstName = "["..allianceData.abbr.."]"..allianceData.allianceName
            oneData.secondName = allianceData.leaderName
            oneData.icon = allianceData.icon
            oneData.country = allianceData:GetCountryFlagTemplate()
            if type == RankType.AlliancePower then
                oneData.power = string.GetFormattedSeperatorNum(allianceData.fightPower)
            elseif type == RankType.AllianceKill then
                --oneData.power = string.GetFormattedSeperatorNum(0)
                oneData.power = string.GetFormattedSeperatorNum(DataCenter.RankDataManager.allianceSelfKill)
            else
                oneData.power = string.GetFormattedSeperatorNum(0)
            end
        else
            oneData.uid = ""
            oneData.firstName = "-"
            oneData.secondName = "-"
            oneData.rank = "-"
            oneData.power = 0
            oneData.country = ""
        end
    elseif type == RankType.SeasonForce then
        local rankInfo = DataCenter.DesertDataManager:GetDesertRankList()
        oneData.isAlliance = false
        oneData.type = type
        oneData.uid = Player.uid
        oneData.firstName = Player.name
        oneData.rank = rankInfo and rankInfo.selfRanking or "-"
        local selfForceValue = DataCenter.DesertDataManager:GetSelfDesertForceNum()
        oneData.power = rankInfo and string.GetFormattedSeperatorNum(selfForceValue) or "0"
        local info = DataCenter.PlayerInfoDataManager.selfPlayerData
        oneData.country = DataCenter.NationTemplateManager:GetNationTemplate(LuaEntry.Player.countryFlag)
        local allianceData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
        if allianceData~=nil and Player:IsInAlliance()  then
            oneData.secondName = "["..allianceData.abbr.."]"..allianceData.allianceName
        else
            oneData.secondName = ""
        end
    elseif type == RankType.HeroPluginRank then
        oneData.isAlliance = false
        oneData.type = type
        local myRank = DataCenter.HeroPluginRankManager:GetSelfRank()
        if myRank == nil then
            oneData.rank = "-"
            --去自己最高的插件
            local heroData = DataCenter.HeroDataManager:GetMaxScoreHeroPluginHero()
            if heroData ~= nil and heroData.plugin ~= nil then
                oneData.power = heroData.plugin:GetScore()
                oneData.plugin = heroData.plugin.plugin
                oneData.lv = heroData.plugin.lv
                oneData.camp = GetTableData(HeroUtils.GetHeroXmlName(), heroData.heroId, "camp")
            else
                oneData.power = 0
                oneData.plugin = nil
                oneData.lv = 0
                oneData.camp = HeroCamp.MAFIA
            end
            
            oneData.uid = LuaEntry.Player.uid
            oneData.firstName = LuaEntry.Player.name
            local allianceData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
            if allianceData~=nil and Player:IsInAlliance()  then
                oneData.secondName = "["..allianceData.abbr.."]"..allianceData.allianceName
            else
                oneData.secondName = ""
            end
            local country = string.IsNullOrEmpty(LuaEntry.Player.country) and DefaultNation or LuaEntry.Player.country
            oneData.country = DataCenter.NationTemplateManager:GetNationTemplate(country)
        else
            oneData.rank = myRank.rank
            oneData.power = myRank.score
            oneData.plugin = myRank.plugin
            oneData.lv = myRank.lv
            oneData.firstName = myRank.name
            if myRank.allianceAbbr~=nil and myRank.allianceAbbr~="" then
                oneData.secondName = "["..myRank.allianceAbbr.."]"..myRank.allianceName
            else
                oneData.secondName =""
            end
            local country = string.IsNullOrEmpty(myRank.country) and DefaultNation or myRank.country
            oneData.country = DataCenter.NationTemplateManager:GetNationTemplate(country)
            local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), myRank.heroId)
            if heroConfig ~= nil then
                oneData.camp = heroConfig.camp
            end
        end
        
    else
        oneData.isAlliance = false
        oneData.type = type
        local rank = DataCenter.RankDataManager:GetSelfPlayerRankByType(type)
        --local info = DataCenter.PlayerInfoDataManager:GetPlayerDataByUid(Player.uid)
        local info = DataCenter.PlayerInfoDataManager.selfPlayerData
        if rank>0 and info~=nil then
            oneData.uid = info.uid
            oneData.rank = rank
            oneData.firstName = info.name
            oneData.country = info:GetCountryFlagTemplate()
            local allianceData = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
            if allianceData~=nil and Player:IsInAlliance()  then
                oneData.secondName = "["..allianceData.abbr.."]"..allianceData.allianceName
            else
                oneData.secondName = ""
            end
            
            if type == RankType.CommanderPower then
                oneData.power = string.GetFormattedSeperatorNum(info.power)
            elseif type == RankType.CommanderKill then
                oneData.power = string.GetFormattedSeperatorNum(info.armyKill)
            elseif type == RankType.CommanderBase then
                oneData.power = DataCenter.BuildManager.MainLv
            end
        else 
            oneData.uid = ""
            oneData.firstName = "-"
            oneData.secondName = "-"
            oneData.rank = "-"
            oneData.power = 0
            oneData.country = ""
        end
    end
    return oneData
end

local function GetOneDataShow(self,isAlliance,type,item)
    local oneData = OneData.New()
    oneData.isAlliance = isAlliance
    oneData.type =type
    if item ~=nil then
        oneData.uid = item.uid
        oneData.rank = item.rank
        if isAlliance then
            oneData.allianceName = item.allianceName
            oneData.firstName = "["..item.allianceAbbr.."]"..item.allianceName
            oneData.secondName = item.name
            oneData.icon = item.icon
            oneData.country = item:GetCountryFlagTemplate()
            if type == RankType.AlliancePower or type == RankType.OtherServerAlliancePower then
                oneData.power = string.GetFormattedSeperatorNum(item.power)
            elseif type == RankType.AllianceKill then
                oneData.power = string.GetFormattedSeperatorNum(item.kill)
            end
        else
            oneData.firstName = item.name
            if item.allianceAbbr~=nil and item.allianceAbbr~="" then
                oneData.secondName = "["..item.allianceAbbr.."]"..item.allianceName
            else
                oneData.secondName =""
            end
            if item.GetHeadBgImg then
                oneData.headBg = item:GetHeadBgImg()
            end
            
            if type == RankType.CommanderPower then
                oneData.power = string.GetFormattedSeperatorNum(item.power)
            elseif type == RankType.CommanderKill then
                oneData.power = string.GetFormattedSeperatorNum(item.kill)
            elseif type == RankType.CommanderBase then
                oneData.power = item.baseLevel
                oneData.directionIcon = ""
            elseif type == RankType.SeasonForce then
                oneData.power = string.GetFormattedSeperatorNum(item.force)
            elseif type == RankType.HeroPluginRank then
                oneData.power = string.GetFormattedSeperatorNum(item.score)
                oneData.plugin = item.plugin
                oneData.lv = item.lv
                oneData.noUseBtn = true
                local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), item.heroId)
                if heroConfig ~= nil then
                    oneData.camp = heroConfig.camp
                end
                if item.serverId ~= 0 then
                    oneData.firstName = "#" .. item.serverId .. " " .. oneData.firstName
                end
                oneData.pivotType = PivotType.LeftCenter
            end
            oneData.pic = item.pic
            oneData.picVer = item.picVer
            if type == RankType.SeasonForce or type == RankType.HeroPluginRank then
                local country = string.IsNullOrEmpty(item.country) and DefaultNation or item.country
                oneData.country = DataCenter.NationTemplateManager:GetNationTemplate(country)
            else
                oneData.country = item:GetCountryFlagTemplate()
            end
        end
        
    else
        oneData.uid = ""
        oneData.firstName = "-"
        oneData.secondName = "-"
        oneData.rank = "-"
        oneData.power = 0
        oneData.country = ""
        oneData.directionIcon = ""
    end 
    return oneData
end

local function GetRankList(self,type)
    local showList = {}
    if type == RankType.AlliancePower or type == RankType.AllianceKill or type == RankType.OtherServerAlliancePower then
        local list = DataCenter.RankDataManager:GetAllianceRankListByType(type)
        table.walk(list,function (k,v)
            local oneData = self:GetOneDataShow(true,type,v)
            if oneData~=nil then
                table.insert(showList,oneData)
            end
        end)
    elseif type == RankType.SeasonForce then
        local list = DataCenter.DesertDataManager:GetDesertRankList()
        table.walk(list.rankList,function (k,v)
            local oneData = self:GetOneDataShow(false,type,v)
            if oneData~=nil then
                table.insert(showList,oneData)
            end
        end)
    elseif type == RankType.HeroPluginRank then
        local list = DataCenter.HeroPluginRankManager:GetRankList()
        if list ~= nil then
            for k, v in ipairs(list) do
                local oneData = self:GetOneDataShow(false, type, v)
                if oneData ~= nil then
                    table.insert(showList,oneData)
                end
            end
        end
    else
        local list = DataCenter.RankDataManager:GetPlayerRankListByType(type)
        table.walk(list,function (k,v)
            local oneData = self:GetOneDataShow(false,type,v)
            if oneData~=nil then
                table.insert(showList,oneData)
            end
        end)
    end
    return showList
end

local function OnPlayerDetailClick(self,uid)
    if uid~= LuaEntry.Player.uid then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIOtherPlayerInfo,{ anim = true, hideTop = true},uid)
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPlayerInfo,{ anim = true, hideTop = true},LuaEntry.Player.uid)
    end
    
end

local function OnAllianceDetailClick(self,uid,name)
    local selfAllianceId = ""
    local data = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
    if data ~=nil then
        selfAllianceId = data.uid
    end
    if selfAllianceId~=uid then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceDetail,{ anim = true, hideTop = true },name,uid)
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceMainTable,{ anim = true, hideTop = true })
    end
end


UIRankDetailListCtrl.CloseSelf = CloseSelf
UIRankDetailListCtrl.Close = Close
UIRankDetailListCtrl.GetSelfData = GetSelfData
UIRankDetailListCtrl.GetOneDataShow = GetOneDataShow
UIRankDetailListCtrl.GetRankList = GetRankList
UIRankDetailListCtrl.OnPlayerDetailClick = OnPlayerDetailClick
UIRankDetailListCtrl.OnAllianceDetailClick =OnAllianceDetailClick
return UIRankDetailListCtrl