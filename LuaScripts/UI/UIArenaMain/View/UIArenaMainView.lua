---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/6/7 18:28
---UIArenaMainView


local UIArenaMainView = BaseClass("UIArenaMainView", UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local ArenaRankItem = require "UI.UIArenaMain.Component.ArenaRankItem"

local panel_path = "UICommonFullTop/CloseBtn"
local title_path = "UICommonFullTop/imgTitle/Common_img_title/titleText"
local roundEndTime_path = "rewardObj/rewardsBtn/roundTime"
local selfRank_path = "selfObj"
local svRank_path = "ScrollView"
local emptyTip_path = "empty"
local playerTxt_path = "titleObj/playerTxt"
local scoreTxt_path = "titleObj/scoreTxt"
local rankTxt_path = "titleObj/rankTxt"
local rewardBtn_path = "rewardObj/rewardsBtn"
local historyBtn_path = "btns/historyBtn"
local historyBtnRed_path = "btns/historyBtn/historyRed"
local historyBtnTxt_path = "btns/historyBtn/historyBtnTxt"
local challengeBtn_path = "btns/challengeBtn"
local challengeBtnRed_path = "btns/challengeBtn/challengeRed"
local challengeRedNum_path = "btns/challengeBtn/challengeRed/challengeRedTxt"
local challengeBtnTxt_path = "btns/challengeBtn/challengeBtnTxt"
local SetTeamBtn_path = "btns/defenceBtn"
local setTeamBtnRed_path = "btns/defenceBtn/defenceRed"
local SetTeamBtnTxt_path = "btns/defenceBtn/defenceBtnTxt"
local infoBtn_path = "UICommonFullTop/infoBtn"

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    DataCenter.ArenaManager:TryInitDefenseArmy()
    self:ReInit()
end

local function OnDestroy(self)
    if self.delayTime ~= nil then
        self.delayTime:Stop()
        self.delayTime = nil
    end
    self:DelCountDownTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.panel_btn = self:AddComponent(UIButton, panel_path)
    self.panel_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.titleN = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.titleN:SetLocalText(372255)
    self.roundEndTimeN = self:AddComponent(UITextMeshProUGUIEx, roundEndTime_path)
    self.selfRankN = self:AddComponent(ArenaRankItem, selfRank_path)
    self.svRankN = self:AddComponent(UIScrollView, svRank_path)
    self.svRankN:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.svRankN:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.emptyTipN = self:AddComponent(UITextMeshProUGUIEx, emptyTip_path)
    self.emptyTipN:SetLocalText(372260)
    self.playerTxtN = self:AddComponent(UITextMeshProUGUIEx, playerTxt_path)
    self.playerTxtN:SetLocalText(100184)
    self.rankTxtN = self:AddComponent(UITextMeshProUGUIEx, rankTxt_path)
    self.rankTxtN:SetLocalText(302043)
    self.scoreTxtN = self:AddComponent(UITextMeshProUGUIEx, scoreTxt_path)
    self.scoreTxtN:SetLocalText(302042)
    self.rewardBtnN = self:AddComponent(UIButton, rewardBtn_path)
    self.rewardBtnN:SetOnClick(function()
        self:OnClickRewardBtn()
    end)
    self.historyBtnN = self:AddComponent(UIButton, historyBtn_path)
    self.historyBtnN:SetOnClick(function()
        self:OnClickHistoryBtn()
    end)
    self.historyBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, historyBtnTxt_path)
    self.historyBtnTxtN:SetLocalText(390264)
    self.challengeBtnN = self:AddComponent(UIButton, challengeBtn_path)
    self.challengeBtnN:SetOnClick(function()
        self:OnClickChallengeBtn()
    end)
    self.challengeBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, challengeBtnTxt_path)
    self.challengeBtnTxtN:SetLocalText(372258)
    self.setTeamBtnN = self:AddComponent(UIButton, SetTeamBtn_path)
    self.setTeamBtnN:SetOnClick(function()
        self:OnClickSetTeamBtn()
    end)
    self.setTeamBtnTxtN = self:AddComponent(UITextMeshProUGUIEx, SetTeamBtnTxt_path)
    self.setTeamBtnTxtN:SetLocalText(372281)
    self.infoBtnN = self:AddComponent(UIButton, infoBtn_path)
    self.infoBtnN:SetOnClick(function()
        self:OnClickInfoBtn()
    end)

    self.historyRedN = self:AddComponent(UIBaseContainer, historyBtnRed_path)
    self.challengeRedN = self:AddComponent(UIBaseContainer, challengeBtnRed_path)
    self.challengeRedNumN = self:AddComponent(UITextMeshProUGUIEx, challengeRedNum_path)
    self.defenseRedN = self:AddComponent(UIBaseContainer, setTeamBtnRed_path)
end

local function ComponentDestroy(self)
    self:ClearScroll()
    self:DelCountDownTimer()
end

local function DataDefine(self)
    self.actId = nil
    self.endTime = 0
    self.rankList = {}
    self.rankItemsDic = {}
end

local function DataDestroy(self)
    self.actId = nil
    self.endTime = nil
    self.rankList = nil
    self.rankItemsDic = nil
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnUpdateArenaBaseInfo, self.RefreshAll)
    self:AddUIListener(EventId.RefreshActivityRedDot, self.RefreshRed)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnUpdateArenaBaseInfo, self.RefreshAll)
    self:RemoveUIListener(EventId.RefreshActivityRedDot, self.RefreshRed)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.actId = EnumActivity.Arena.ActId
    SFSNetwork.SendMessage(MsgDefines.GetArenaInfo, 0)
    self:RefreshAll()
end

local function RefreshAll(self)
    self.endTime = DataCenter.ArenaManager:GetRoundEndTime()
    self:AddCountDownTimer()
    self:RefreshRemainTime()

    self:ShowRankList()
    self:RefreshRed()
    self.selfRankN:SetItem()

    if self.view.isArrow then
        self.view.isArrow = nil
        self.delayTime = TimerManager:GetInstance():DelayInvoke(function()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIArenaReward,{anim= true,isBlur = true},self.actId)
        end, 0.5)
    end
end

local function RefreshRed(self)
    local challengeRed = DataCenter.ArenaManager:GetChallengeRedCount()
    if challengeRed > 0 then
        self.challengeRedN:SetActive(true)
        self.challengeRedNumN:SetText(challengeRed)
    else
        self.challengeRedN:SetActive(false)
    end

    local historyRed = DataCenter.ArenaManager:GetArenaHistoryRedCount()
    self.historyRedN:SetActive(historyRed > 0)

    local setDefenseRed = DataCenter.ArenaManager:GetSetDefenseRedCount()
    self.defenseRedN:SetActive(setDefenseRed > 0)
end

local function ShowRankList(self)
    self.rankList = DataCenter.ArenaManager:GetRankList()
    if #self.rankList == 0 then
        self.emptyTipN:SetActive(true)
        self.svRankN:SetActive(false)
    else
        self.emptyTipN:SetActive(false)
        self.svRankN:SetActive(true)
        self.svRankN:SetTotalCount(#self.rankList)
        self.svRankN:RefillCells()
    end
end

local function OnItemMoveIn(self,itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.svRankN:AddComponent(ArenaRankItem, itemObj)
    local param = {}
    param.index = index
    param.isShowHeroes = index == self.curDetailIndex
    param.callback = function(targetIndex)
        self:JumpToIndex(targetIndex)
    end
    cellItem:SetItem(self.rankList[index], param)
    self.rankItemsDic[index] = cellItem
end

local function OnItemMoveOut(self, itemObj, index)
    self.rankItemsDic[index] = nil
    self.svRankN:RemoveComponent(itemObj.name, ArenaRankItem)
end

local function ClearScroll(self)
    self.svRankN:ClearCells()
    self.svRankN:RemoveComponents(ArenaRankItem)
end

local function JumpToIndex(self, targetIndex)
    if self.curDetailIndex and self.rankItemsDic[self.curDetailIndex] then
        self.rankItemsDic[self.curDetailIndex]:ShowHeroesByExternal(false)
    end
    if not self.curDetailIndex or targetIndex ~= self.curDetailIndex then
        self.rankItemsDic[targetIndex]:ShowHeroesByExternal(true)
        self.svRankN:ScrollToCell(targetIndex, 1000)
        self.curDetailIndex = targetIndex
    else
        self.curDetailIndex = nil
        TimerManager:GetInstance():DelayInvoke(function()
            self.svRankN:StopMovement()
        end, 0.1)
    end
end

--local function JumpToIndex(self, index)
--    self.svRankN:ScrollToCell(index, 10000)
--end


local function AddCountDownTimer(self)
    self.CountDownTimerAction = function()
        self:RefreshRemainTime()
    end

    if self.countDownTimer == nil then
        self.countDownTimer = TimerManager:GetInstance():GetTimer(1, self.CountDownTimerAction , self, false,false,false)
    end
    self.countDownTimer:Start()
end

local function RefreshRemainTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local remainTime = self.endTime - curTime
    if remainTime > 0 then
        self.roundEndTimeN:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(remainTime))
    else
        self.roundEndTimeN:SetText("")
        self:DelCountDownTimer()
    end
end

local function DelCountDownTimer(self)
    if self.countDownTimer ~= nil then
        self.countDownTimer:Stop()
        self.countDownTimer = nil
    end
end


local function OnClickRewardBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIArenaReward,{anim= true,isBlur = true},self.actId)
end

local function OnClickHistoryBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIArenaHistory,{anim= true,isBlur = true})
end

local function OnClickChallengeBtn(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIArenaChallenge,{anim= true,isBlur = true})
end

local function OnClickSetTeamBtn(self)
    local param = {}
    param.scene = "PveScene1"
    param.pveEntrance = PveEntrance.ArenaSetting
    DataCenter.ArenaManager:SetDefenseRedTs()
    DataCenter.BattleLevel:Enter(param)
end

local function OnClickInfoBtn(self)
    UIUtil.ShowIntro(Localization:GetString("372255"), Localization:GetString("302027"), Localization:GetString("372287"))
end


UIArenaMainView.OnCreate = OnCreate
UIArenaMainView.OnDestroy = OnDestroy
UIArenaMainView.ComponentDefine = ComponentDefine
UIArenaMainView.ComponentDestroy = ComponentDestroy
UIArenaMainView.DataDefine = DataDefine
UIArenaMainView.DataDestroy = DataDestroy
UIArenaMainView.OnAddListener = OnAddListener
UIArenaMainView.OnRemoveListener = OnRemoveListener

UIArenaMainView.ReInit = ReInit
UIArenaMainView.RefreshAll = RefreshAll
UIArenaMainView.RefreshRed = RefreshRed
UIArenaMainView.ShowRankList = ShowRankList
UIArenaMainView.OnClickRewardBtn = OnClickRewardBtn
UIArenaMainView.OnClickHistoryBtn = OnClickHistoryBtn
UIArenaMainView.OnClickChallengeBtn = OnClickChallengeBtn
UIArenaMainView.OnClickSetTeamBtn = OnClickSetTeamBtn
UIArenaMainView.OnItemMoveIn = OnItemMoveIn
UIArenaMainView.OnItemMoveOut = OnItemMoveOut
UIArenaMainView.ClearScroll = ClearScroll
UIArenaMainView.JumpToIndex = JumpToIndex
UIArenaMainView.OnClickInfoBtn = OnClickInfoBtn

UIArenaMainView.AddCountDownTimer = AddCountDownTimer
UIArenaMainView.RefreshRemainTime = RefreshRemainTime
UIArenaMainView.DelCountDownTimer = DelCountDownTimer

return UIArenaMainView