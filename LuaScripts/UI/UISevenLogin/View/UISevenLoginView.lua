---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by .
--- DateTime:
local UISevenLoginView = BaseClass("UISevenLoginView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local SevenLoginCell = require "UI.UIActivityCenterTable.Component.SevenLogin.SevenLoginCell"
local UIHeroTipsView = require "UI.UIHeroTips.View.UIHeroTipsView"
local UIGray = CS.UIGray
--创建
function UISevenLoginView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:ReInit()
end

-- 销毁
function UISevenLoginView:OnDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

function UISevenLoginView:ComponentDefine()
    self.text_7 = self:AddComponent(UITextMeshProUGUIEx, "SevenLoginContent/ImageBg/text_7")
    local text7 = "<cspace=-0.12em>7<size=80><cspace=0.05em>"..Localization:GetString(100104)
    self.text_7:SetText(text7)
    self.loginText = self:AddComponent(UITextMeshProUGUIEx, "SevenLoginContent/ImageBg/loginText")
    self.loginText:SetLocalText(321363)
    
    self._close_btn = self:AddComponent(UIButton,"Close")
    self._close_btn:SetOnClick(function()
        UIManager:GetInstance():DestroyWindow(UIWindowNames.UISevenLogin)
    end)
    self._back_btn = self:AddComponent(UIButton,"SevenLoginContent/Back")
    self._back_btn:SetOnClick(function()
        UIManager:GetInstance():DestroyWindow(UIWindowNames.UISevenLogin)
    end)
    
    self._actName_txt = self:AddComponent(UITextMeshProUGUI,"SevenLoginContent/TitleBg/Txt_ActName")
    self._desc_txt = self:AddComponent(UITextMeshProUGUI,"SevenLoginContent/TitleBg/Txt_ActTime")
    self._time_txt = self:AddComponent(UITextMeshProUGUI,"SevenLoginContent/TitleBg/Txt_ActTime/NotStarted/Txt_Time")

    self._rarity_img = self:AddComponent(UIImage,"SevenLoginContent/RectSearch/bg/ImgRarity")
    self._heroName_txt = self:AddComponent(UITextMeshProUGUI,"SevenLoginContent/RectSearch/bg/TextHeroName")
    --self._heroNick_txt = self:AddComponent(UITextMeshProUGUI,"SevenLoginContent/TextNickName")

    self._getReward_btn = self:AddComponent(UIButton,"SevenLoginContent/Btn_GetReward")
    self._getReward_txt = self:AddComponent(UITextMeshProUGUI,"SevenLoginContent/Btn_GetReward/Txt_GetReward")
    self._getRewardGray_txt = self:AddComponent(UITextMeshProUGUI,"SevenLoginContent/Btn_GetReward/Txt_GetRewardGray")
    self._getReward_btn:SetOnClick(function()
        self:OnClickGo()
    end)

    self.cell = {}
    for i = 1 ,7 do
        self.cell[i] = self:AddComponent(SevenLoginCell,"SevenLoginContent/Rect_Reward/SevenLoginCell"..i)
    end

    self.searchBtn = self:AddComponent(UIButton, "SevenLoginContent/RectSearch/bg/searchBtn")
    self.searchBtn:SetOnClick(function()
        self:OnClickSearchBtn()
    end)
    self.imgCamp = self:AddComponent(UIImage,"SevenLoginContent/RectSearch/bg/Image (1)")
end

function UISevenLoginView:ComponentDestroy()
    self.title = nil
    self.content = nil
    self.res_txt = nil
    self.close_btn = nil
    self.return_btn = nil
end

function UISevenLoginView:OnEnable()
    base.OnEnable(self)
end

function UISevenLoginView:OnDisable()
    base.OnDisable(self)
end

function UISevenLoginView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.OnRefreshSevenLogin, self.ReInit)
end

function UISevenLoginView:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(EventId.OnRefreshSevenLogin, self.ReInit)
end

function UISevenLoginView:ReInit()
    self.activityId = self:GetUserData()
    self._heroName_txt:SetActive(tonumber(self.activityId) == 10000)
    --self._heroNick_txt:SetActive(tonumber(self.activityId) == 10000)
    self._rarity_img:SetActive(tonumber(self.activityId) == 10000)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
    self._desc_txt:SetLocalText(actListData.desc_info)
    self._actName_txt:SetLocalText(actListData.name)
    self.dayInfo =  DataCenter.ActSevenLoginData:GetInfoByActId(tonumber(self.activityId))
    if self.dayInfo and next(self.dayInfo) then
        local specialDay = GetTableData(TableName.ActivityPanel, toInt(self.activityId), "para2")
        local str = string.split(specialDay,";")
        if self.cell and next(self.cell) then
            self.day = self.dayInfo:CheckToday()
            for i = 1 ,7 do
                self.cell[i]:ReInit(self.dayInfo.loginReward[i],specialDay)
                self.cell[i]:ShowUnLockMask(self.dayInfo.loginReward[i].state ~= 1 and i ~= self.day)
                if self.dayInfo.loginReward[i].reward[1].rewardType == RewardType.HERO then
                    self.heroId = self.dayInfo.loginReward[i].reward[1].itemId
                end
                for k = 1 ,table.count(str) do
                    if tonumber(str[k]) == i then
                        self.cell[i]:CreateEffect()
                    end
                end
            end
        end
        local startT = UITimeManager:GetInstance():TimeStampToDayForLocal(actListData.startTime)
        local endT = UITimeManager:GetInstance():TimeStampToDayForLocal(actListData.endTime-1000)
        self._time_txt:SetText(startT .. "-" .. endT)
        local heroId = nil
        for i ,v in pairs(self.dayInfo.loginReward) do
            if v.reward[1].rewardType == RewardType.HERO then
                heroId = v.reward[1].itemId
            end
        end
        
        if heroId then
            local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
            if heroConfig ~= nil then
                local rarity = heroConfig["rarity"]
                self._heroName_txt:SetLocalText(heroConfig["name"])
                --self._heroNick_txt:SetLocalText(heroConfig["desc"])
                self._heroName_txt:SetColor(HeroUtils.GetHeroNameColorByRarity(rarity, false))
                local camp = HeroUtils.GetCampByHeroId(heroId)
                self.imgCamp:LoadSprite(HeroUtils.GetCampIconPath(camp))
                --self._heroNick_txt:SetColor(HeroUtils.GetHeroNameColorByRarity(rarity, false))
                local rarityImgPath = "Assets/Main/Sprites/UI/UIHeroDetail/UI_Icon_Rarity_Big_1.png"
                if rarity == 1 then
                    rarityImgPath = "Assets/Main/Sprites/UI/UIHeroDetail/UI_Icon_Rarity_Big_1.png"
                elseif rarity == 2 then
                    rarityImgPath = "Assets/Main/Sprites/UI/UIHeroDetail/UI_Icon_Rarity_Big_2.png"
                elseif  rarity == 3 then
                    rarityImgPath = "Assets/Main/Sprites/UI/UIHeroDetail/UI_Icon_Rarity_Big_3.png"
                elseif  rarity == 4 then
                    rarityImgPath = "Assets/Main/Sprites/UI/UIHeroDetail/UI_Icon_Rarity_Big_4.png"
                end
                self._rarity_img:LoadSprite(rarityImgPath)
            end
        end
        self.day = self.dayInfo:CheckToday()
        if self.day and self.day ~= 0 then
            --可领取的
            self.cell[self.day]:CreateReceiveEffect()
        end
        local isGray = false
        if self.day then
            --今天领取过
            if self.day == 0 then
                isGray =  true
                self._getReward_txt:SetActive(false)
                self._getRewardGray_txt:SetActive(true)
                self._getRewardGray_txt:SetLocalText(302602)
            else
                self._getReward_txt:SetActive(true)
                self._getReward_txt:SetLocalText(170004)
                self._getRewardGray_txt:SetActive(false)
            end
        else
            isGray =  true
            --过期
            self._getReward_txt:SetActive(false)
            self._getRewardGray_txt:SetActive(true)
            self._getRewardGray_txt:SetLocalText(371068)
        end
        UIGray.SetGray(self._getReward_btn.transform, isGray, not isGray)
    end
end

function UISevenLoginView:OnClickGo()
    --UIManager:GetInstance():DestroyWindow(UIWindowNames.UISevenLogin)
    --GoToUtil.GoActWindow(tonumber(self.activityId))
    if self.day and self.day ~= 0 then
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        SFSNetwork.SendMessage(MsgDefines.ReceiveSevenDayLoginReward,toInt(self.activityId),self.day)
    end
end

function UISevenLoginView : OnClickSearchBtn()
    local heroId = self.heroId
    local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), tonumber(heroId))
    local param = UIHeroTipsView.Param.New()
    param.heroId = heroId
    param.title = Localization:GetString(heroConfig.name)
    param.content = Localization:GetString(heroConfig.brief_desc)
    param.dir = UIHeroTipsView.Direction.ABOVE
    param.defWidth = 300
    param.pivot = 0.5
    param.position = self.searchBtn.transform.position + Vector3.New(0, 50, 0)
    param.bindObject = self.gameObject
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroTips, { anim = false }, param)
end

return UISevenLoginView