---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 6/15/21 10:48 AM
---
local IChatItem = require("UI.UIChatNew.Component.ChatItem.IChatItem")
local ChatViewController = require "UI.UIChatNew.Controller.ChatViewUtils"
local ChatItem = BaseClass("ChatItem", IChatItem)
local base = IChatItem
local Localization = CS.GameEntry.Localization
local ChatHead = require("UI.UIChatNew.Component.ChatHead")

local NormalWidth = 500
local RedWidth = 430

function ChatItem:OnCreate()
    base.OnCreate(self)
end

function ChatItem:ComponentDefine()
    self._chatHead = self:AddComponent(ChatHead, "ChatHead") -- 挂在根节点,用来和后面的chathead节点做绑定
    self._chatHeadBg = self:AddComponent(UIImage, "ChatHead/HeadBtn")
    self._chatHeadFg = self:AddComponent(UIImage, "ChatHead/HeadFg")
end

function ChatItem:AddBtnClick()
    -- 注册按钮回调
    if (self._bgBtn) then
        self._bgBtn:SetOnClick(BindCallback(self, self.ExecuteChatEvent))
    end
    if (self._chatShareNode) then
        self._chatShareNode:SetOnClick(BindCallback(self, self.ExecuteChatEvent))
    end

    if (self._bgBtnLongPress) then
        self._bgBtnLongPress:SetTouchBgGray(true)
        self._bgBtnLongPress:SetClickAction(function ()
            self:ShowChatOperator()
        end)
    end
end

function ChatItem:ShowChatOperator()
    local param = {}
    if self._chatData ==nil or self._chatData["senderUid"] == ChatGMUserId then
        return
    end
    param["chatdata"] = self._chatData
    param["userinfo"] = self._userInfo
    param["targetPos"] = self._bgImg.transform
    param["chatItem"] = self
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIChatItemOperatorView,{ anim = false }, param)
end

function ChatItem:OnAddListener()
    base.OnAddListener(self)

	local ChatEventEnum = ChatInterface.getEventEnum()
    --self:AddUIListener(EventId.UPDATE_MSG_USERINFO, self.UpdateUserInfoWithNew);
    self:AddUIListener(ChatEventEnum.CHAT_UPDATE_ROOM_MSG, self.UpdateItemWithNew);
end

function ChatItem:OnRemoveListener()

	local ChatEventEnum = ChatInterface.getEventEnum()
    --self:RemoveUIListener(EventId.UPDATE_MSG_USERINFO, self.UpdateUserInfoWithNew);
    self:RemoveUIListener(ChatEventEnum.CHAT_UPDATE_ROOM_MSG, self.UpdateItemWithNew);
    
    base.OnRemoveListener(self)
end

function ChatItem:OnDisable()
    self:StopVoiceAnime()
    base.OnDisable(self)
end

-- 点击翻译
function ChatItem:OnTranslationBtn()
    self:TranslateMsg()
end

function ChatItem:DataDefine()
    self._originDlgFontSize = 20
    self._targetSize = Vector2.New(0, 0)
    self.IsMyChat = true
    self._chatData = nil
end

function ChatItem:SetSize( _size )
	local _, anchor_sizeDelta_cy = self._anchorTransform:Get_sizeDelta()
	local rect_sizeDelta_cx, _ = self._rectTransform:Get_sizeDelta()
    local topOffset = self:GetTopOffset()
    
    self._anchorTransform:Set_sizeDelta(Mathf.Ceil(_size.x), anchor_sizeDelta_cy)
    self._chatShareNode.rectTransform:Set_sizeDelta(_size.x, _size.y)
    self._rectTransform:Set_sizeDelta(rect_sizeDelta_cx, Mathf.Ceil(_size.y + topOffset))
    
    self:SetTransPosY(self._anchorTransform, - topOffset)
    self:SetTransPosY(self._chatShareNode.rectTransform, -42)
end

-- override
function ChatItem:GetTopOffset()
    if self._chatUserName then
        return self._chatUserName:GetTopOffset()
    else
        return 0
    end
end

function ChatItem:GetSize()
	local anchor_sizeDelta_cx, _ = self._anchorTransform:Get_sizeDelta()
	local _, rect_sizeDelta_cy = self._rectTransform:Get_sizeDelta()
	
	return Vector2.New(anchor_sizeDelta_cx, rect_sizeDelta_cy)
end


function ChatItem:SetChatShareNodeVisible( isVisible )
    if (self._chatShareNode ~= nil and self._chatShareNode.gameObject.activeSelf ~= isVisible) then
        self._chatShareNode:SetActive(isVisible)
    end
end

function ChatItem:SetBackGroundVisible( isVisible )
    if (self._bgImg ~= nil and self._bgImg.gameObject.activeSelf ~= isVisible) then
        self._bgImg.gameObject:SetActive(isVisible)
    end
end

function ChatItem:SetTranslationVisible( isVisible )
    if (self._translation ~= nil and self._translation.gameObject.activeSelf ~= isVisible) then
        self._translation.gameObject:SetActive( isVisible )
    end
end

function ChatItem:UpdateBgImgSize()
    if (not self._chatData.isMyChat) then
        if (self._chatData.isTranslating or not string.IsNullOrEmpty(self._chatData["translateMsg"])) then
            self:SetTranslationVisible(true)
            local _size = self:GetSize()
            self._bgImg.transform:GetComponent(typeof(CS.UnityEngine.RectTransform)):SetInsetAndSizeFromParentEdge(CS.UnityEngine.RectTransform.Edge.Bottom, 32, _size.y-52)
        else
            self._bgImg.transform:GetComponent(typeof(CS.UnityEngine.RectTransform)):SetInsetAndSizeFromParentEdge(CS.UnityEngine.RectTransform.Edge.Bottom, 0, _size.y-20)
        end
    end
end

function ChatItem:ExecuteChatEvent()
    if (self._chatData.post == 43 or self._chatData.msg == "90800159" or self._chatData.msg == "90800185") then
        return
    end
    if (self._chatData.post > 0) then
		EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().CHAT_SHARE_EXECUTE_CMD, self._chatData)
    else
        self:ShowTips()
    end
end

function ChatItem:IsSharePoint()
    if (self._chatData["post"] == PostType["Text_PointShare"] or self._chatData["post"] == PostType["Text_Favour_Point_Share"]) then
        return true
    else
        return false
    end
end

function ChatItem:IsActMonsterTowerHelp()
    if self._chatData["post"] == PostType["Text_ActMonsterTowerHelp"] then
        return true
    else
        return false
    end
end


function ChatItem:ShowTips()
    ChatPrint("尚未实现拷贝功能")
end

-- 举报
function ChatItem:TryReportMsg()
    
end

-- 拷贝
function ChatItem:CopyMsg()
    
end

-- 翻译
function ChatItem:TranslateMsg()
    if (not self._chatData:IsTranslating()) then
        self._chatData:setIsTranslating(1)
		
        local _translationMsg = self._chatData:getTranslationMsg()
        if (string.IsNullOrEmpty(_translationMsg)) then
            EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().CHAT_TRANSLATE, self._chatData)
        else
            self._chatData:setIsTranslating(0)
        end
		
        self:UpdateItem(self._chatData)
        self._contentViewScript:ReloadAfterTranslateRecv(self._chatIndex)
    end
end

function ChatItem:UpdateItemWithNew(t)
    if (t == nil) then
        return
    end

    if (t.roomId == self._chatData.roomId and t.seqId == self._chatData.seqId) then
        local room = ChatInterface.getRoomData(t.roomId)
        if room ~= nil then
            local chatData = room:getChatDataBySeqId(t.seqId)
            self:UpdateItem(chatData)
            self._contentViewScript:ReloadAfterTranslateRecv(self._chatIndex)
        end
    end
end

function ChatItem:ReSendMsg()
    EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().CHAT_RESEND_ROOM_MSG_COMMAND, self._chatData)
end

--function ChatItem:UpdateUserInfoWithNew( userInfo )
--    self:UpdateUserInfo()
--    --if (userInfo == nil) then
--    --    return
--    --end
--    --if (userInfo["uid"] == self._chatData["senderUid"]) then
--    --    
--    --end
--end
--
--function ChatItem:UpdateUserInfo()
--    --local senderUid = self._chatData["senderUid"]
--    --self._userInfo = ChatInterface.getUserData(senderUid)
--    ----local str = table.dump(self._userInfo, "测试", 20)
--    ----print(">>>lsz 更新了.更新了 \n" .. tostring(str))
--    --if (self._chatHead ~= nil) then
--    --    self._chatHead:UpdateHead(self._userInfo, self._chatData)
--    --end
--    --
--    --if self._chatHeadFg then
--    --    if self._userInfo then
--    --        local tempFg = self._userInfo:GetHeadBgImg()
--    --        if tempFg then
--    --            self._chatHeadFg:SetActive(true)
--    --            self._chatHeadFg:LoadSprite()
--    --        else
--    --            self._chatHeadFg:SetActive(false)
--    --        end
--    --    else
--    --        self._chatHeadFg:SetActive(false)
--    --    end
--    --end
--    --if (self._chatUserName) then
--    --    self._chatUserName:UpdateName(self._userInfo, self._chatData)
--    --end
--end



--[[
    是否发送成功,显示发送失败的状态表示
]]
--function ChatItem:UpdateSendState()
--    if (self._chatData["isMySendChat"]) then
--        if (self._chatData["sendState"] == 2) then -- 失败
--            if (self._failedObj ~= nil) then
--                self._failedObj:SetActive(true)
--            end
--        else
--            if (self._failedObj ~= nil) then
--                self._failedObj:SetActive(false)
--            end
--        end
--    else
--        if (self._failedObj ~= nil) then
--            self._failedObj:SetActive(false)
--        end
--    end
--end

--[[
分享坐标 : para attachmentId : title(_lang())|[allianceAbbr]|Name|serverId|posX|posY
]]
function ChatItem:UpdateSharePoint()
    if (self._chatShareNode == nil) then
        return
    end
    self:SetChatShareNodeVisible(true)
    self:SetBackGroundVisible(false)
    self:SetTranslationVisible(false)
    
    local message = self._chatData:getMessageWithExtra(true)
    self._chatShareMsg:SetText(message)
    self._chatShareTitle:SetLocalText(110073) 
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._chatShareMsg.rectTransform)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._chatShareMsgNode.rectTransform)
    
    self:SetSize(Vector2.New(NormalWidth, Mathf.Max(self._chatShareMsg:GetHeight() + 90, 160)))
end

function ChatItem:UpdateMonsterHelp()
    if (self._chatShareNode == nil) then
        return
    end
    self:SetChatShareNodeVisible(true)
    self:SetBackGroundVisible(false)
    self:SetTranslationVisible(false)
    
    local message = self._chatData:getMessageWithExtra(true)
    self._chatShareMsg:SetLocalText(372473)
    self._chatShareTitle:SetLocalText(372472)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._chatShareMsg.rectTransform)
    CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._chatShareMsgNode.rectTransform)

    self:SetSize(Vector2.New(NormalWidth, Mathf.Max(self._chatShareMsg:GetHeight() + 90, 160)))
end

--[[
语音
]]
function ChatItem:UpdateVoice()
    
end

function ChatItem:UpdateRedPack()
    if (self:IsRedPack()) then
        local _gift = self._bgImg.transform:Find("GiftText")
        if (_gift ~= nil) then
            _gift:GetComponent(typeof(CS.UnityEngine.UI.Text)).text = Localization:GetString("79010922")
        end
        self:SetSize(Vector2.New(RedWidth, 166))
    end
end

function ChatItem:UpdateLike()
    self:SetChatShareNodeVisible(false);
    self:SetBackGroundVisible(false);
    self:SetTranslationVisible(false);
    self:SetSize(Vector2.New(RedWidth, self:GetChatMinHeight()))
end

function ChatItem:IsVoiceChat()
    
end

function ChatItem:IsRedPack()
    return self._chatData:isRedPack()
end

function ChatItem:IsShowTranslationButton()
    if (self.IsMyChat) then
        return false
    end
	
	if self._chatData:isShowTranslateBtn() == false then
		return false
	end
	
	-- 如果已经翻译完毕也不显示翻译按钮了
	if not string.IsNullOrEmpty(self._chatData:getTranslationMsg()) then
		return false
	end
	
    return true
end

function ChatItem:IsLikeChat()
    if (self._chatData["msg"] == "\\like") then
        return true
    end
    return false
end

function ChatItem:GetChatMinHeight()
    local minHeight = 0
    if (self.IsMyChat) then
        minHeight = self._chatViewController:GetChatRightItemMinHeight()
    else
        minHeight = self._chatViewController:GetChatLeftItemMinHeight()
    end
    return minHeight
end

function ChatItem:IsVip()
    local serverTimeS = UITimeManager:GetInstance():GetServerSeconds()
    if self._userInfo and self._userInfo.monthCardEndTime and self._userInfo.monthCardEndTime > serverTimeS then
        return true
    end
    return false
end

--[[
    这块整体是用来设置文本,同时更新背景尺寸的.
    做法是我们
]]
function ChatItem:UpdateText()
    self:SetChatShareNodeVisible(false);
    self:SetBackGroundVisible(true);
    if (self._dlgText ~= nil) then
        self._dlgText.gameObject:SetActive(true)
    end
    self._dlgText:SetText(self._chatData:getMessageWithExtra(false))
    local upObjHeight = 0
    if self.hasUp~=nil and self.hasUp==true then
        self._dlgText:SetAlignment(CS.UnityEngine.TextAnchor.UpperLeft)
        upObjHeight = self.upObj.rectTransform.rect.height
    else
        self._dlgText:SetAlignment(CS.UnityEngine.TextAnchor.MiddleLeft)
    end
    if self:IsVip() then
        self._special_frame:SetActive(false)
    else
        self._special_frame:SetActive(false)
    end
    --self._dlgText.rectTransform.offsetMin = Vector2.New(34, 20)-- :SetOffsetMin(34, 20);
    --self._dlgText.rectTransform.offsetMax = Vector2.New(-25, -20)--:SetOffsetMax(-25, -20);
    --if (self._traText ~= nil) then
    --    self._traText.rectTransform.offsetMin = Vector2.New(34, 20)--:SetOffsetMin(34, 20);
    --    self._traText.rectTransform.offsetMax = Vector2.New(-25, -20)--:SetOffsetMax(-25, -20);
    --end
    --self._chatNormalBg:LoadSprite(chatNormalBg)
    
    local maxWidth = self._chatViewController:GetChatItemMaxWidth()
    local minHeight = self:GetChatMinHeight()
    self:SetSize(Vector2.New(maxWidth, minHeight))
    
    local textWidth = self._dlgText:GetWidth()
    local textHeight = self._dlgText:GetHeight()
    local topHeight = 50
    local TranslationHeight = 0
    local hasTranslated = false -- 是否是翻译后的状态
    if (not self.IsMyChat) then
        if (self._traText ~= nil and self._dividingLine ~= nil and self._translation ~= nil) then
            self._traText:SetActive(false)
            self._dividingLine:SetActive(false)
            self:SetTranslationVisible(false)
            
            local TranslationImage = self._translation:Find("Image")
            local TranslationPImage = self._translation:Find("PImage")
            local TranslationText = self._translation:Find("Text")
            local isTranslating = self._chatData:IsTranslating()
            local translationMsg = self._chatData["translateMsg"]
            if (isTranslating or not string.IsNullOrEmpty(translationMsg)) then
                TranslationHeight = 32
            end
            if (isTranslating) then
                TranslationImage.gameObject:SetActive(false)
                TranslationPImage.gameObject:SetActive(true)
                TranslationText:GetComponent(typeof(CS.UnityEngine.UI.Text)).text = Localization:GetString("290013")
            end
            if (not string.IsNullOrEmpty(translationMsg)) then
                hasTranslated = true
                self._dlgText:SetAlignment(CS.UnityEngine.TextAnchor.UpperLeft)
                TranslationImage.gameObject:SetActive(true)
                TranslationPImage.gameObject:SetActive(false)
                TranslationText:GetComponent(typeof(CS.UnityEngine.UI.Text)).text = Localization:GetString("290024")
                
                self._traText:SetActive(true)
                self._traText:SetText(translationMsg)
                self._traText:SetColor(Color32.New(81/255,81/255,81/255,255))
                self._dividingLine:SetActive(true)
                
                textHeight = self._dlgText:GetHeight()
                textWidth = Mathf.Max(self._dlgText:GetWidth(), self._traText:GetWidth())
                self._dividingLine.transform.localPosition = Vector3.New(0, -textHeight-10, 0)
                local transLocalPos = self._traText.transform.localPosition
                self._traText.transform.localPosition = Vector3.New(transLocalPos.x, upObjHeight-25, transLocalPos.z)
                textHeight = textHeight + self._traText:GetHeight()
                textHeight = textHeight + 20
            end
        end
    end
    local _width = Mathf.Min(textWidth+127, maxWidth)
    if self.hasUp~=nil and self.hasUp==true then
        _width = maxWidth
    end
    local _height = Mathf.Max(textHeight+16+topHeight+upObjHeight ,minHeight)
    self:UpdateSpecialLayout(_width, _height, hasTranslated)
    self:UpdateBgImgSize()
end

--[[
/***这里特殊处理 UI 布局
         * 由于月卡皮肤特殊
         * 所以有一个最小宽度
         * 目前就月卡一个皮肤
         * 先这么特殊处理
         * 理论上如果之后有其他特殊皮肤只需要修改inspector配置就可以
        ***/
]]
function ChatItem:UpdateSpecialLayout( sourceWidth, sourceHeight, hasTranslated)
    local size = Vector2.New(sourceWidth, sourceHeight)
    self:SetSize(size)
    if (self.IsMyChat) then
        return
    end
end


function ChatItem:UpdateItem( chatdata, index )
    base.UpdateItem(self, chatdata, index)
    if (index ~= nil) then
        self._chatIndex = index
    end
    self.IsMyChat = self._chatData:isMyChat()
	
    --self:UpdateUserInfoWithNew()
    --self:UpdateSendState()
    self.seqId = chatdata:getSeqId()
    self.upNum = chatdata:getLikeNum()
    self.downNum = chatdata:getDisLikeNum()
    self.hasUp = false
    if (self.upNum~=nil and self.upNum>0) or (self.downNum~=nil and self.downNum>0) then
        self.hasUp = true
    end
    if self.upObj~=nil then
        self.upObj:SetActive(self.hasUp)
    end
    if self.hasUp == true and self.up_num~=nil then
        self.up_num:SetText(string.GetFormattedSeperatorNum(self.upNum))
    end
    if self.hasUp == true and self.down_num~=nil then
        self.down_num:SetText(string.GetFormattedSeperatorNum(self.downNum))
    end
    
    if (self:IsVoiceChat()) then
        self:UpdateVoice();
    elseif (self:IsRedPack()) then
        self:UpdateText()
        --self:UpdateRedPack();
    elseif (self:IsSharePoint()) then
        self:UpdateSharePoint();
    elseif (self:IsLikeChat()) then
        self:UpdateLike();
    elseif self:IsActMonsterTowerHelp() then
        self:UpdateMonsterHelp()
    else
        self:UpdateText();
    end
    self:RefreshButton()
end

function ChatItem:FormatVoiceTime( duration )
    
end

function ChatItem:PlayVoiceAnime( duration ) 
    
end

function ChatItem:StopVoiceAnime()
    
end


function ChatItem:OnDown()
    local deltaTime = ChatManager2:GetInstance():GetGiveLikeMsgTime(self.seqId)
    local k1 = LuaEntry.DataConfig:TryGetNum("thumbs_up", "k1")
    local realLeftTime = deltaTime+k1
    if realLeftTime>0 then
        local delta = UITimeManager:GetInstance():MilliSecondToFmtString(realLeftTime*1000)
        UIUtil.ShowTips(Localization:GetString("121068", delta))
        return
    end
    local _roomId = ChatViewController:GetInstance():GetCurrentRoomId()
    local msgTable =
    {
        roomId = _roomId,
        msgSeq = self.seqId,
        interactDislike = 1,
    }

    -- 如果房间为空的话，就表示是第一次在和人私聊
    if string.IsNullOrEmpty(_roomId) or
            ChatViewController:GetInstance():IsTmpPrivateChat(_roomId) or
            _roomId == ChatGMRoomId then
        local tui = ChatViewController:GetInstance():GetPrivateUserInfo()
        if (tui == nil) then
            return
        end
        msgTable.toUid = tui.uid
    end
    ChatManager2:GetInstance():SetGiveLikeMsgTime(self.seqId)
    ChatManager2:GetInstance():SetGiveLikeAnim(self.seqId,2)
    EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SEND_ROOM_MSG_UP_COMMAND, msgTable)

    --local msgTable =
    --{
    --    roomId = _roomId,
    --    msg = "🌚",
    --}
    --
    ---- 如果房间为空的话，就表示是第一次在和人私聊
    --if string.IsNullOrEmpty(_roomId) or
    --        ChatViewController:GetInstance():IsTmpPrivateChat(_roomId) or
    --        _roomId == ChatGMRoomId then
    --    local tui = ChatViewController:GetInstance():GetPrivateUserInfo()
    --    if (tui == nil) then
    --        return
    --    end
    --    msgTable.toUid = tui.uid
    --end
    --ChatManager2:GetInstance():SetGiveLikeMsgTime(self.index,2)
    --ChatManager2:GetInstance():SetGiveLikeAnim(self.index,2)
    --EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SEND_ROOM_MSG_COMMAND, msgTable)


end

function ChatItem:OnUp()
    local deltaTime = ChatManager2:GetInstance():GetGiveLikeMsgTime(self.seqId)
    local k1 = LuaEntry.DataConfig:TryGetNum("thumbs_up", "k1")
    local realLeftTime = deltaTime+k1
    if realLeftTime>0 then
        local delta = UITimeManager:GetInstance():MilliSecondToFmtString(realLeftTime*1000)
        UIUtil.ShowTips(Localization:GetString("121068", delta))
        return
    end
    local _roomId = ChatViewController:GetInstance():GetCurrentRoomId()
    local msgTable =
    {
        roomId = _roomId,
        msgSeq = self.seqId,
        interactLike = 1,
    }

    -- 如果房间为空的话，就表示是第一次在和人私聊
    if string.IsNullOrEmpty(_roomId) or
            ChatViewController:GetInstance():IsTmpPrivateChat(_roomId) or
            _roomId == ChatGMRoomId then
        local tui = ChatViewController:GetInstance():GetPrivateUserInfo()
        if (tui == nil) then
            return
        end
        msgTable.toUid = tui.uid
    end
    ChatManager2:GetInstance():SetGiveLikeMsgTime(self.seqId)
    ChatManager2:GetInstance():SetGiveLikeAnim(self.seqId,1)
    EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SEND_ROOM_MSG_UP_COMMAND, msgTable)
    --local msgTable =
    --{
    --    roomId = _roomId,
    --    msg = "👍",
    --}
    --
    ---- 如果房间为空的话，就表示是第一次在和人私聊
    --if string.IsNullOrEmpty(_roomId) or
    --        ChatViewController:GetInstance():IsTmpPrivateChat(_roomId) or
    --        _roomId == ChatGMRoomId then
    --    local tui = ChatViewController:GetInstance():GetPrivateUserInfo()
    --    if (tui == nil) then
    --        return
    --    end
    --    msgTable.toUid = tui.uid
    --end
    --ChatManager2:GetInstance():SetGiveLikeMsgTime(self.index,1)
    --ChatManager2:GetInstance():SetGiveLikeAnim(self.index,1)
    ----self:RefreshButton()
    --EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SEND_ROOM_MSG_COMMAND, msgTable)


end

function ChatItem:RefreshButton()
    if self.hasUp==false then
        return
    end
    local anim = ChatManager2:GetInstance():GetGiveLikeAnim(self.seqId)
    if anim >0 then
        if anim ==1 then
            --local ret,time = self.up_anim:PlayAnimationReturnTime("V_ui_dianzan_anim")
            ChatManager2:GetInstance():SetGiveLikeAnim(self.seqId,0)
        elseif anim == 2 then
            --local ret,time =self.down_anim:PlayAnimationReturnTime("V_ui_diancai_anim")
            ChatManager2:GetInstance():SetGiveLikeAnim(self.seqId,0)
        end
    else
        self.up_anim:Play("V_ui_dianzan_finish", 0, 0)
        self.down_anim:Play("V_ui_diancai_finish", 0, 0)
    end
end
return ChatItem