---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 6/8/21 11:23 AM
---
local UIChatView = BaseClass("UIChatView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
local ChatRoomData = require "Chat.Model.ChatRoomData"
local ChatUserInfo = require "Chat.Model.ChatUserInfo"
local Screen = CS.UnityEngine.Screen
--[[
附属类
]]
local UIChatMainView = require "UI.UIChatNew.Component.UIChatMainView"
local ChatRoomCell = require "UI.UIChatNew.Component.ChatRoomCell"
local ChatViewController = require "UI.UIChatNew.Controller.ChatViewUtils"
local ChatRoomCellSlideNode = require"UI.UIChatNew.Component.ChatRoomCellSlideNode"
local ChatMainViewSlideNode = require "UI.UIChatNew.Component.ChatSlidingNode"
local AlMoveInvitePanel = require "UI.UIChatNew.Component.AlMoveInvitePanel"
local PresidentRefreshMinePanel = require "UI.UIChatNew.Component.PresidentRefreshMinePanel"
local AlAutoInvite = require "UI.UIChatNew.Component.AlAutoInvite.AlAutoInviteMain"

local _cp_event_room_trigger = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/RoomView/VScrollView/Viewport";
local _cp_event_mainView_trigger = "UICommonFullTop/Bg2/Scroll_View"--"UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/Scroll_View_mainView"
local _cp_ScrollRect = "UICommonFullTop/Bg2/Scroll_View";
local _cp_root = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root";
local _cp_roomView = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/RoomView";
local _cp_roomContent = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/RoomView/VScrollView/Viewport/Content";
local _cp_roomCreate = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/RoomView/RoomCreate";
local _cp_mainView = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView";
local _cp_btn_shield = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/Btn_Shield";
local _cp_roomSetting = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RoomSetting";
local _cp_rect_topTips = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/TopLayout"
local _cp_txt_topTips = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/TopLayout/Txt_TopsTips";
local _cp_Layout = "UICommonFullTop/Bg2/Layout";
local _cp_InputFieldView = "UICommonFullTop/Bg2/Layout/InputView";
local _cp_Layout_TopLayoutImage = "UICommonFullTop/Bg2/Layout/TopLayout/btnTopLayout"
local _cp_Layout_KeyboardLayoutImage = "UICommonFullTop/Bg2/Layout/KeyboardLayout/Image";
local _cp_InputField_fullScreen = "UICommonFullTop/Bg2/Layout/InputView/InputField";
local _cp_keyboardLayout_fullScreen = "UICommonFullTop/Bg2/Layout/KeyboardLayout";
local _cp_LeftLayout = "UICommonFullTop/Bg2/Layout/InputView/LeftLayout";
--local _cp_RightLayout = "UICommonFullTop/Bg2/Layout/InputView/RightLayout";
local _cp_closeBtn = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Image";
local _cp_btnClosePanel = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/btnClosePanel";
local _cp_sendBtn = "UICommonFullTop/Bg2/Layout/InputView/objSend/SendBtn"
--local _cp_txtSendBtn = "UICommonFullTop/Bg2/Layout/InputView/objSend/SendBtn/txtSend"
local _cp_redPacket = "UICommonFullTop/Bg2/Layout/InputView/RedPacket"
local _cp_redPacketBtn = "UICommonFullTop/Bg2/Layout/InputView/RedPacket/RedPacketBtn"
local _cp_redPacketNum = "UICommonFullTop/Bg2/Layout/InputView/RedPacket/RedPacketNum"
local _cp_redPacketTxt = "UICommonFullTop/Bg2/Layout/InputView/RedPacket/RedPacketNum/Txt_RedPacketNum"

-- 滑动组件
local _cp_mainView_ScrollRect = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/Scroll_View_mainView"; -- 内容部分
local _cp_roomView_ScrollRect = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/RoomView/VScrollView"; -- 房间部分

local _cp_mainview_root = "UICommonFullTop/Bg2";
local _cp_right_layout = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout"; -- 滑动上层布局
local _cp_bottom_input_view = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/BottomInputView"

local alMoveInvitePanel_path = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/alMoveInvite"
local alAutoInvitePanel_path = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/alAutoInvitePanel"
local bottomTip_path = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/bottomTip"
local presidentRefreshMinePanel_path = "UICommonFullTop/Bg2/Scroll_View/Viewport/Content/Root/MainView/RightLayout/PresidentRefreshMine"

local back_btn_path = "UICommonFullTop/CloseBtn"
local title_text_path = "UICommonFullTop/imgTitle/Common_img_title/titleText"

local Const_ChatRoomCell_Height = 120
local Const_ChatRoomCell_Height_Half = Const_ChatRoomCell_Height * 0.5 + 60
local MinKetBoardHeight = 10

function UIChatView:MoveToRoomIndex( index )
	--local scrollRect = self._scrollRect_roomView:GetScrollRect()
	--local toPosY = Const_ChatRoomCell_Height * index + Const_ChatRoomCell_Height_Half
	--local viewPortH = scrollRect.viewport.rect.height
	--if (toPosY > viewPortH) then
	--	local endPos = Vector2.New(0, toPosY-viewPortH)
	--	pcall(function ()
	--		CS.CSUtils.DOTweenTo_RectTransformPos_Y(scrollRect.content, endPos.y, 0.5, function ()
	--
	--		end)
	--	end)
	--end
end

--[[
绑定组件
]]
function UIChatView:ComponentDefine()
	self._scrollRect = self:AddComponent(UIScrollRect, _cp_ScrollRect)

	self._scrollRect_mainView = self:AddComponent(UIScrollRect, _cp_mainView_ScrollRect)
	self._scrollRect_roomView = self:AddComponent(UIScrollRect, _cp_roomView_ScrollRect)
	self._scrollRect_alAutoInviteView = self:AddComponent(UIScrollRect, alAutoInvitePanel_path)
	self._bottomTipN = self:AddComponent(UIText, bottomTip_path)
	self.alMoveInvitePanelN = self:AddComponent(AlMoveInvitePanel, alMoveInvitePanel_path)
	self.presidentRefreshMinePanel = self:AddComponent(PresidentRefreshMinePanel, presidentRefreshMinePanel_path)

	self._alAutoInvitePanel = self:AddComponent(AlAutoInvite, alAutoInvitePanel_path)
	self._root = self.transform:Find(_cp_root);
	self._roomView = self.transform:Find(_cp_roomView)
	self._roomContent = self:AddComponent(UIBaseContainer, _cp_roomContent)
	self._roomCell = nil
	self._btnRoomCreate = self:AddComponent(UIButton, _cp_roomCreate)
	self._btnRoomCreate:SetOnClick(BindCallback(self, self.OnRoomCreateClick))
	self._mainView = self.transform:Find(_cp_mainView)
	self._layOut = self:AddComponent(UIBaseContainer, _cp_Layout)
	self._inputFieldView = self.transform:Find(_cp_InputFieldView):GetComponent(typeof(CS.UnityEngine.RectTransform))
	self._layout_TopLayoutImage = self:AddComponent(UIButton, _cp_Layout_TopLayoutImage)
	self._layout_TopLayoutImage:SetOnClick(BindCallback(self, self.HideKeyborad))
	self._keyboardLayoutImage = self:AddComponent(UIImage, _cp_Layout_KeyboardLayoutImage)
	self._inputField_fullScreen = self:AddComponent(UIInput, _cp_InputField_fullScreen)
	self._keyboardLayout_fullScreen = self:AddComponent(UILayoutElement, _cp_keyboardLayout_fullScreen)
	self._leftLayout = self:AddComponent(UILayoutElement, _cp_LeftLayout)
	--self._rightLayout = self:AddComponent(UILayoutElement, _cp_RightLayout)
	self._btnClose = self:AddComponent(UIButton, _cp_closeBtn)
	self._btnClose:SetOnClick(BindCallback(self, self.CloseChatView))
	self._btnClosePanel = self:AddComponent(UIButton, _cp_btnClosePanel)
	self._btnClosePanel:SetOnClick(BindCallback(self, self.CloseChatView))
	self._mobileInputField = self._inputField_fullScreen.transform:GetComponent(typeof(CS.Mopsicus.Plugins.MobileInputField));
	self._mobileInputField.enabled = false
	--self.inputField = self:AddComponent(UIInput, inputField_path)
	
	--self._txtSendBtn = self:AddComponent(UIText, _cp_txtSendBtn)
	self._sendBtn = self:AddComponent(UIButton, _cp_sendBtn)
	self._sendBtn:SetOnClick(function ()
			self:OnSendClick()
		end)

	self._cp_redPacket = self:AddComponent(UIBaseContainer,_cp_redPacket)
	self._cp_redPacketBtn = self:AddComponent(UIButton, _cp_redPacketBtn)
	self._cp_redPacketNum = self:AddComponent(UIBaseContainer,_cp_redPacketNum)
	self._cp_redPacketTxt = self:AddComponent(UIText,_cp_redPacketTxt)
	self._cp_redPacketBtn:SetOnClick(function ()
		self:OnClickRedRecord()
	end)
	
	self:AddEventListener()

	-- 在这个地方开启mainView界面
	self._chatMainView = self:AddComponent(UIChatMainView, _cp_mainview_root)
	self._chatMainView:setSlideNode(self._chatSlidingNode_mainView)
	self._cpRightLayout = self:AddComponent(UIBaseContainer, _cp_right_layout)
	self._bottom_input_view = self:AddComponent(UIBaseContainer, _cp_bottom_input_view)
	self._layoutElement_bottomInputView = self:AddComponent(UILayoutElement, _cp_bottom_input_view)
	
	self._cp_rect_topTips = self:AddComponent(UIBaseContainer,_cp_rect_topTips)
	self._cp_txt_topTips = self:AddComponent(UITextMeshProUGUIEx,_cp_txt_topTips)
	self._cp_btn_shield = self:AddComponent(UIButton,_cp_btn_shield)
	self._cp_btn_shield:SetOnClick(function ()
		self:OnClickShield()
	end)
	self._btnRoomSetting = self:AddComponent(UIButton,_cp_roomSetting)
	self._btnRoomSetting:SetOnClick(function()
		self:OnRoomSettingClick()
	end)
	self.back_btn = self:AddComponent(UIButton, back_btn_path)
	self.back_btn:SetOnClick(function()
		self:CloseChatView()
	end)
	self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_text_path)
end

function UIChatView:OnBeginDrag( eventdata )
	self._chatSlidingNode:OnBeginDrag(eventdata)
end

function UIChatView:OnDrag( eventdata )
	self._chatSlidingNode:OnDrag(eventdata)
end

function UIChatView:OnEndDrag( eventdata )
	self._chatSlidingNode:OnEndDrag(eventdata)
end

--[[
初始化,构造函数
]]
function UIChatView:DataDefine()
	self._isLeft = false
	self._isAnim = false
	self._d0 = 0.2; -- 左右滑动的时间
	self._placeholderImageWidth = 334;
	self._closeBtnWidth = 52
	self._openOffset = 0.0;
	--self._RightLayoutMinWidthOriginal = 0.0;
	--self._LeftLayoutMinWidth = 0.0;
	--self._RightLayoutMinWidth = 0.0;
	self._mobileInputKeyBoradHeight = 0.0; -- 键盘显示高度
	self._chatViewController = nil;
	self._d1 = 0.2; -- 打开关闭动画时间
	self._chatRoomCellList = {} -- 当前正在使用的频道列表
	self._freeChatRoomCellList = {} -- 额外的频道列表,供循环使用
	self._loadingPrefab = {} -- 正在加载中的不做处理
end

function UIChatView:OnAddListener()
	base.OnAddListener(self)
	self:AddUIListener(EventId.NickNameChangeEvent, self.OnPlayerDataCallBack)
	self:AddUIListener(ChatInterface.getEventEnum().LF_ChatCellSelect, self.ChatCellSelect)
	self:AddUIListener(ChatInterface.getEventEnum().CHAT_TALK_TO_PRIVATE, self.Chat_TalkToPrivate)
	
	self:AddUIListener(ChatInterface.getEventEnum().LF_SlidingCell, self.SlidingCell)
	--self:AddUIListener(ChatInterface.getEventEnum().LF_ChatOpenView, self.OnOpenView)
	self:AddUIListener(ChatInterface.getEventEnum().LF_OnSendClick, self.OnSendClick)
	self:AddUIListener(ChatInterface.getEventEnum().LF_CloseChatView, self.OnCloseView)
	self:AddUIListener(ChatInterface.getEventEnum().CHAT_REFRESH_CHANNEL, self.RefreshRoomList)
	self:AddUIListener(ChatInterface.getEventEnum().LF_ChangeInputFieldState, self.ChangeInputState)
	self:AddUIListener(EventId.GetRedPacketUpdate, self.RedPacketSignal)
	self:AddUIListener(EventId.RefreshAlMoveInviteTip, self.RefreshAlMoveInvitePanel)
	self:AddUIListener(EventId.ChatRoomCreate, self.OnChatRoomCreate)
	self:AddUIListener(EventId.ChatRoomChangeName, self.OnChatRoomChangeName)
end

function UIChatView:OnRemoveListener()
	self:RemoveUIListener(EventId.NickNameChangeEvent, self.OnPlayerDataCallBack)
	self:RemoveUIListener(ChatInterface.getEventEnum().LF_ChatCellSelect, self.ChatCellSelect)
	self:RemoveUIListener(ChatInterface.getEventEnum().CHAT_TALK_TO_PRIVATE, self.Chat_TalkToPrivate)
	
	self:RemoveUIListener(ChatInterface.getEventEnum().LF_SlidingCell, self.SlidingCell)
	--self:RemoveUIListener(ChatInterface.getEventEnum().LF_ChatOpenView, self.OnOpenView)
	self:RemoveUIListener(ChatInterface.getEventEnum().LF_OnSendClick, self.OnSendClick)
	self:RemoveUIListener(ChatInterface.getEventEnum().LF_CloseChatView, self.OnCloseView)
	self:RemoveUIListener(ChatInterface.getEventEnum().CHAT_REFRESH_CHANNEL, self.RefreshRoomList)
	self:RemoveUIListener(ChatInterface.getEventEnum().LF_ChangeInputFieldState, self.ChangeInputState)
	self:RemoveUIListener(EventId.GetRedPacketUpdate, self.RedPacketSignal)
	self:RemoveUIListener(EventId.RefreshAlMoveInviteTip, self.RefreshAlMoveInvitePanel)
	self:RemoveUIListener(EventId.ChatRoomCreate, self.OnChatRoomCreate)
	self:RemoveUIListener(EventId.ChatRoomChangeName, self.OnChatRoomChangeName)
	base.OnRemoveListener(self)
end


--[[
设置滑动监听事件,用来做左右话展示列表/上下话正常进行
]]
function UIChatView:AddEventListener()
	-- 注册左侧房间
	--self._event_trigger = self:AddComponent(UIEventTrigger, _cp_event_room_trigger)
	local param = {}
	param["chatview"] = self
	param["mScrollRect1"] = self._scrollRect_roomView
	self._chatSlidingNode = ChatRoomCellSlideNode.New(param)

	--self._event_trigger:OnBeginDrag(function (eventdata)
	--	self:OnBeginDrag(eventdata)
	--end)
	--self._event_trigger:OnDrag(function (eventdata)
	--	self:OnDrag(eventdata)
	--end)
	--self._event_trigger:OnEndDrag(function (eventdata)
	--	self:OnEndDrag(eventdata)
	--end)

	-- 注册右侧主界面
	self._event_trigger_mainView = self:AddComponent(UIEventTrigger, _cp_event_mainView_trigger)
	local param = {}
	param["chatview"] = self
	param["mScrollRect1"] = self._scrollRect_mainView
	param["mScrollRect3"] = self._scrollRect_alAutoInviteView
	param["rootScrollRect"] = self._scrollRect
	self._chatSlidingNode_mainView = ChatMainViewSlideNode.New(param)
	self._event_trigger_mainView:OnBeginDrag(function (eventdata)
		self._chatSlidingNode_mainView:OnBeginDrag(eventdata)
	end)
	self._event_trigger_mainView:OnDrag(function (eventdata)
		self._chatSlidingNode_mainView:OnDrag(eventdata)
	end)
	self._event_trigger_mainView:OnEndDrag(function (eventdata)
		self._chatSlidingNode_mainView:OnEndDrag(eventdata)
	end)
end

function UIChatView:GetRoomNodeList()
	return self._chatRoomCellList or {}
end

-- 设置选中的房间，如果没有的话就设置成世界频道
function UIChatView:__resetCurrentRoomId()
	local roomId = self._chatViewController:GetCurrentRoomId()
	local room = ChatInterface.getRoomData(roomId)
	-- 如果之前选择的是虚拟联盟频道的话,则置为真实联盟频道
	if room == nil and roomId == E_CHAT_ALLIANCE_ROOMID then
		roomId = ChatInterface.getRoomMgr():GetAllianceRoomId()
		self._chatViewController:SetCurrentRoomId(roomId)
		EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().LF_ChatCellSelect)
		return
	end
	if room == nil and (roomId==nil or roomId == "") then
		return
	end

	-- 如果已经是联盟或世界了，则直接return,表示此时没有房间数据,不做处理
	if (room == nil and (roomId == E_CHAT_ALLIANCE_ROOMID or roomId == E_CHAT_COUNTRY_ROOMID)) then
		return
	end
	if (room == nil and (string.contains(roomId, 'country') or string.contains(roomId, 'alliance'))) then
		return
	end

	if room == nil and roomId ~= QuestRoomId and roomId ~= RadarRoomId and not self._chatViewController:IsTmpPrivateChat(roomId) and roomId ~= ChatGMRoomId then
		roomId = ChatInterface.getRoomMgr():GetCountryRoomId()
		self._chatViewController:SetCurrentRoomId(roomId)
		EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().LF_ChatCellSelect)
	end
end

function UIChatView:OnEnable()
	base.OnEnable(self);
	self.active = true
	--self.inputField:SetText(LuaEntry.GlobalData.lastChatInput)
	self._mobileInputField.Text = LuaEntry.GlobalData.lastChatInput
	--self._txtSendBtn:SetLocalText(390016) 
end

function UIChatView:OnDestroy()
	if self._timer ~= nil then
		self._timer:Stop()
		self._timer = nil
	end
	self:OnLostFocus()
	self:HideKeyborad()
	if self._mobileInputField~=nil then
		self._mobileInputField.OnReturnPressed = nil
		self._mobileInputField.OnFocusChanged = nil
	end
	CS.Mopsicus.Plugins.MobileInput.OnShowKeyboard = nil
	base.OnDestroy(self)
end

function UIChatView:ReInitLayoutSize()
	self:UpdateViewSize()
	--local onesideWidth = 0
	--pcall(function()
	--	onesideWidth = CS.UIUtils.GetSpecialScreenWidth()
	--end)
	--self._RightLayoutMinWidthOriginal = self._chatViewController:GetScreenWidth() - (self:GetChatViewWidth() - 260) - onesideWidth;
	
	--local extra = -200
	--if (UIUtil.IsPad()) then
	--	extra = 130
	--end
	--local tempWidth = self._RightLayoutMinWidthOriginal + extra
	--self._rightLayout:SetMinWidth( tempWidth )
end

function UIChatView:OnCreate()
	base.OnCreate(self)
	self._tmpPrivateChatList = {}
	-- 获取指定房间ID
	local userdata = self:GetUserData() or {}
	local roomId = userdata["roomId"] or ""
	local userId = userdata["userId"] or ""
	local username = userdata["username"] or ""

	--[[聊天不需要任务了
	local mainLv = DataCenter.BuildManager.MainLv
	if (mainLv <= ChatChannelShowMinLevel) then
		userdata = {}
		roomId = QuestRoomId
		userId = ""
		username = ""
	end--]]
	
	-- 注册绑定
	self:ComponentDefine()
	
	self:DataDefine()
	-- 发送消息  EventId.BottomLeftActive
	
	-- 设置chatController,用来做辅助功能
	self._chatViewController = ChatViewController:GetInstance()
	self.quest_early = LuaEntry.DataConfig:CheckSwitch("quest_early")
	
	--创建聊天室
	local isOpen = LuaEntry.DataConfig:CheckSwitch("chatroom_switch")
	local openLv = LuaEntry.DataConfig:TryGetNum("chat_max","k4")
	if isOpen then
		local max = LuaEntry.Effect:GetGameEffect(EffectDefine.CHAT_ROOM_MAX)
		if max > 0 then
			self._btnRoomCreate:SetActive(true)
		else
			if DataCenter.BuildManager.MainLv ~= nil and DataCenter.BuildManager.MainLv > openLv then
				self._btnRoomCreate:SetActive(true)
			else
				self._btnRoomCreate:SetActive(false)
			end
		end
	else
		self._btnRoomCreate:SetActive(false)
	end
	

	if string.IsNullOrEmpty(roomId) then
		if self.quest_early then
			local allianceRoomId = ChatInterface.getRoomMgr():GetAllianceRoomId()
			local roomData = ChatInterface.getRoomData(allianceRoomId)
			if roomId == QuestRoomId then
				if (roomData ~= nil) then
					roomId = allianceRoomId
				end
			end
		end
		local lang_service_k1 = LuaEntry.DataConfig:TryGetNum("Local_lang_channel","k1")
		if ChatInterface.isLangOpen() then
			if DataCenter.BuildManager.MainLv < lang_service_k1 then
				roomId = ChatInterface.getRoomMgr():GetLangRoomId()
			end
		end
	end
	local roomType = "normal"
	if (roomId == QuestRoomId) then
		roomType = QuestRoomId
	elseif (roomId == RadarRoomId) then
		roomType = RadarRoomId
	end
	if roomId == "" and string.IsNullOrEmpty(userId) then
		roomId = ChatInterface.getRoomMgr():GetCountryRoomId()
	end
	self._chatViewController._curRoomType = roomType
	self._chatViewController:SetCurrentRoomId(roomId)

	self:InitViewState()
	self:ReInitLayoutSize()
	-- *******
	self:InitViewPos()
	
	---- 键盘事件
	CS.Mopsicus.Plugins.MobileInput.OnShowKeyboard = function( isShow, height, leftOffset, rightOffset )
		self:OnShowKeyboard(isShow, height, leftOffset, rightOffset)
	end
	self._mobileInputField.OnFocusChanged = function( focus )
		self:OnFocusChanged( focus )
	end

	self._mobileInputField.OnReturnPressed = function()
		self:OnSendClick()
	end
	
	self._layOut:SetActive(false)
	
	self:RefreshRoomList()
	

	self._layout_TopLayoutImage:SetActive(false)
	self._keyboardLayoutImage:SetActive(false)
	
	if (not string.IsNullOrEmpty(userId) and string.IsNullOrEmpty(roomId)) then
		TimerManager:GetInstance():DelayInvoke(function()
			self:SetPrivateChatState(userId, username)
		end, 0.1)
	end
	self.title_text:SetLocalText(GameDialogDefine.CHAT)
end

-- 临时先处理成这样子的跳转到私聊
function UIChatView:SetPrivateChatState( userId, username )
	local userinfo = ChatInterface.getUserData(userId)
	userinfo.userName = username
	self:Chat_TalkToPrivate(userinfo)
end

function UIChatView:InitViewState()
	self._isLeft = not self._chatViewController._isOpen
	self._isAnim = false
end

function UIChatView:InitViewPos()
	local endPos = Vector2.New(0, 0)
	CS.CSUtils.DOTweenTo_RectTransformPos_X(self._scrollRect.rectTransform, endPos.x, self._d1, function ()
		self:ChatCellSelect()
	end)
	CS.CSUtils.DOTweenTo_RectTransformPos_X(self._layOut.rectTransform, 0, self._d1)
end

function UIChatView:UpdateViewSize()
	--local _width = self:GetChatViewWidth()
	--local _height = 750
	--if (UIUtil.IsPad()) then
	--	_height = CS.UnityEngine.Screen.height*1334/CS.UnityEngine.Screen.width
	--end
	--self._scrollRect.rectTransform:Set_sizeDelta(_width, _height+2)
	--self._root:GetComponent(typeof(CS.UnityEngine.RectTransform)):Set_sizeDelta(_width-54, _height)
	
	--local _, _inputFieldViewSize_y = self._inputFieldView:Get_sizeDelta()
	--self._inputFieldView:Set_sizeDelta(_width-140, _inputFieldViewSize_y)
end

function UIChatView:OnCloseView( isShowMainView )
	self:_CloseChatView( isShowMainView )
end

function UIChatView:CloseChatView()
	self:_CloseChatView( true )
end

function UIChatView:GetChatViewWidth()
	if self._chatViewController._curRoomType == QuestRoomId then
		return self._chatViewController:GetChatViewWidth_Quest()
	elseif self._chatViewController._curRoomType == RadarRoomId then
		return self._chatViewController:GetChatViewWidth_Radar()
	else
		return self._chatViewController:GetChatViewWidth_Normal()
	end
end

function UIChatView:_CloseChatView(showMain)
	SoundUtil.PlayEffect(SoundAssets.Music_Effect_Close)
	self._keyboardLayoutImage:SetActive(false)
	self._scrollRect_mainView:SetActive(true)
	--
	
	--关闭的时候检查下当前是否还在虚拟房间
	local roomId = self._chatViewController:GetCurrentRoomId()
	local room = ChatInterface.getRoomData(roomId)
	if room == nil then
		roomId = ChatInterface.getRoomMgr():GetCountryRoomId()
		self._chatViewController:SetCurrentRoomId(roomId)
		EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().LF_ChatCellSelect)
	end
	
	local visible = self._layOut:GetActive()
	if (visible == true) then
		local endPos1 = Vector2.New(-(self:GetChatViewWidth()), self._layOut.rectTransform.anchoredPosition.y)
		self._layOut.rectTransform.anchoredPosition.x = endPos1.x
	end
	--local endPos = Vector2.New(-(750/Screen.height*Screen.width) / 2 - (self:GetChatViewWidth() - 334 + 52), self._scrollRect.rectTransform.anchoredPosition.y)
	--self._scrollRect.rectTransform.anchoredPosition.x = endPos.x
	LuaEntry.GlobalData.lastChatInput = self._mobileInputField.Text
	self._mobileInputField.Text = "";
	--LuaEntry.GlobalData.lastChatInput = self.inputField:GetText()
	--self.inputField:SetText("")
	local curRoomId = self._chatViewController:GetCurrentRoomId()
	EventManager:GetInstance():Broadcast(EventId.CloseChatView, curRoomId)
	self.ctrl:CloseSelf()
end

function UIChatView:OnDisable()
	base.OnDisable(self);
	self.active = false
	self._scrollRect_mainView:SetActive(true)
	self._layOut:SetActive(true)
	--CS.Mopsicus.Plugins.MobileInput.OnShowKeyboard = nil
	
	EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().CHAT_VIEW_CLOSE)
end


--[[
	获取房间信息
	注意：返回的是一个array!
]]
function UIChatView:GetRoomList()
	local _chatRoomManager = ChatInterface.getRoomMgr()

	return _chatRoomManager:GetSortRoomDatas()
end

--[[
创建房间列表
]]
function UIChatView:RefreshRoomList()
	for k, v in pairs(self._chatRoomCellList) do
		self._freeChatRoomCellList[#self._freeChatRoomCellList+1] = v
		v:SetActive(false)
	end
	self._chatRoomCellList = {}
	
	
	-- 每次刷新频道的时候检测一下currentRoomId
	self:__resetCurrentRoomId()
	
	-- 列出房间然后创建标签
	local _roomList = self:GetRoomList()
	-- 如果什么房间也没有,这个时候强制塞入世界和联盟频道
	if (table.count(_roomList) == 0) then
		self:AddChatCountryCell()
		self:AddChatAllianceCell()
	end
	local toAddGmRoom = not ChatManager2:GetInstance().Room:IsExistGmChannel()
	for i, roomdata in ipairs(_roomList) do
		if (toAddGmRoom == true and not roomdata:isWorldRoom() and not roomdata:isAllianceRoom() and not roomdata:isLangRoom()) then
			toAddGmRoom = false
			self:AddGMCell()
		end
		self:CreateRoom(roomdata)
	end
	-- 如果上方只有世界,联盟,根本走不进GM的判定,这个地方需要在尾巴上添加一个房间
	if (toAddGmRoom) then
		self:AddGMCell()
		toAddGmRoom = false
	end
	
	self:TryAddAllianceAutoInviteCell()
	
	-- 将之前的虚拟房间加入
	-- 首先修正房间列表,如果已经产生私聊房间了,则移除掉
	for k, v in pairs(self._tmpPrivateChatList) do
		local memberList = v:getMemberList() or {}
		local userId = memberList[#memberList] or ""
		for i, roomdata in ipairs(_roomList) do
			if (not roomdata:isWorldRoom() and not roomdata:isAllianceRoom()) then
				if (roomdata:HasUserByUid(userId)) then
					self._tmpPrivateChatList[k] = nil
					break
				end
			end
		end
	end
	for k, v in pairs(self._tmpPrivateChatList) do
		self:CreateRoom(v)
	end
	
	-- 创建新增房间按钮
	--self:CreateRoom(nil, #_roomList+1)
end

function UIChatView:AddChatCountryCell()
	local mainLv = DataCenter.BuildManager.MainLv
	if (mainLv <= ChatChannelShowMinLevel) then
		return
	end
	local countryRoomData = ChatRoomData.New(E_CHAT_COUNTRY_ROOMID, ChatGroupType.GROUP_COUNTRY)
	self:CreateRoom(countryRoomData)
end

function UIChatView:AddChatAllianceCell()
	if (not LuaEntry.Player:IsInAlliance()) then
		return
	end
	local allianceRoomData = ChatRoomData.New(E_CHAT_ALLIANCE_ROOMID, ChatGroupType.GROUP_ALLIANCE)
	self:CreateRoom(allianceRoomData)
end

function UIChatView:TryAddAllianceAutoInviteCell()
	local showInviteRoom = DataCenter.AllianceAutoInviteManager:CheckIfNeedAutoInviteChatRoom()
	if showInviteRoom then
		local autoInviteRoomData = ChatRoomData.New(AlAutoInviteRoomId,  ChatGroupType.GROUP_AL_AUTO_INVITE)
		self:CreateRoom(autoInviteRoomData)
	end
end

function UIChatView:AddTmpPrivateChat( userName, uid )
	local roomId = ChatTempPrivateRoomId .. tostring(uid)
	local tmpPrivateRoomData = ChatRoomData.New(roomId, ChatGroupType.GROUP_TMPRoom)
	tmpPrivateRoomData.name = userName
	tmpPrivateRoomData["memberList"][#tmpPrivateRoomData["memberList"]+1] = uid
	self._tmpPrivateChatList[#self._tmpPrivateChatList+1] = tmpPrivateRoomData
	self:CreateRoom(tmpPrivateRoomData)
end

function UIChatView:AddGMCell()
	---- 这个地方做一次大本等级的判定
	local customer_service_k1 = LuaEntry.DataConfig:TryGetNum("customer_service","k1")
	if (customer_service_k1 > DataCenter.BuildManager.MainLv) then
		return
	end
	local tmpPrivateRoomData = ChatRoomData.New(ChatGMRoomId, ChatGroupType.GROUP_TMPRoom)
	tmpPrivateRoomData.name = Localization:GetString("100619")
	self:CreateRoom(tmpPrivateRoomData)
end

function UIChatView:ChangeInputState(isEnable)
	self._inputField_fullScreen:SetEnable(isEnable)
end

function UIChatView:DelRoom(roomId)
	for k, v in pairs(self._tmpPrivateChatList) do
		if v.roomId == roomId then
			table.remove(self._tmpPrivateChatList,k)
		end
	end
	local curroomId = ChatInterface.getRoomMgr():GetCountryRoomId()
	self._chatViewController:SetCurrentRoomId(curroomId)
	EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().LF_ChatCellSelect)
end

--[[
创建左侧聊天频道或者创建房间按钮
]]
function UIChatView:CreateRoom(roomdata)
	if roomdata == nil then
		return
	end
	if #self._freeChatRoomCellList > 0 then
		local temp = table.remove(self._freeChatRoomCellList)
		if temp ~= nil then
			temp:SetActive(true)
			temp:setData(roomdata)
			temp.transform:SetParent(self._roomContent.transform)
			temp.transform:SetAsLastSibling()
			self._chatRoomCellList[#self._chatRoomCellList+1] = temp
		end
	else
		local req = self:GameObjectInstantiateAsync(UIAssets.UIChatRoomCell,
			function(request)
				self:onCreateRoom(request, roomdata)
			end)
		self._loadingPrefab[req] = true
	end
end

-- 创建房间异步结束
function UIChatView:onCreateRoom(request, roomdata)
	if request.isError then
		return
	end
	local index = #self._chatRoomCellList+1
	local go = request.gameObject
	go.transform:SetParent(self._roomContent.transform)
	go.transform:SetAsLastSibling()
	--go.transform.localScale = Vector3.New(1,1,1)
	go.transform:Set_localScale(1,1,1)
	
	go.name = index.."...".. NameCount
	local temp = self._roomContent:AddComponent(ChatRoomCell, go.name)
	NameCount = NameCount + 1
	if self._loadingPrefab[request] then
		self._loadingPrefab[request] = nil
		go:SetActive(true)
		self._chatRoomCellList[index] = temp
		self._chatRoomCellList[index]:setData(roomdata)
	else
		go:SetActive(false)
		table.insert(self._freeChatRoomCellList,temp)
	end
end

function UIChatView:GetRoomCellCnt()
	return table.count(self._chatRoomCellList)
end

-- 点击玩家头像,进行私聊
function UIChatView:Chat_TalkToPrivate( userInfo )
	if userInfo == nil then
		return
	end
	-- 根据roomId获取当前房间位于第几个
	local function GetRoomIndex(roomId)
		for index, chatRoom in pairs(self._chatRoomCellList) do
			local chatRoomId = chatRoom:GetRoomId()
			if (roomId == chatRoomId) then
				return index
			end
		end
		return -1
	end
	
	local toUid = userInfo.uid
	local userName = userInfo.userName
	local roomData = ChatInterface.getRoomMgr():getPrivateRoomData(toUid)
	local roomId = ""
	local moveToIndex = -1
	if (roomData == nil) then
		-- 创建左侧房间列表
		self:AddTmpPrivateChat( userName, toUid )
		roomId = ChatTempPrivateRoomId .. tostring(toUid)
		moveToIndex = self:GetRoomCellCnt()
	else
		roomId = roomData and roomData.roomId or ""
		moveToIndex = GetRoomIndex(roomId)
	end
	self._chatViewController:SetPrivateUserInfo(userInfo)
	self:MoveToRoomIndex(moveToIndex)
	self:ChatCellSelect(roomId)
end

function UIChatView:RedPacketSignal()
	local redPacketNum =  DataCenter.AllianceRedPacketManager:GetValidRedPacketNum()
	self._cp_redPacketNum:SetActive(redPacketNum > 0)
	self._cp_redPacketTxt:SetText(redPacketNum > 0 and redPacketNum or "")
end

function UIChatView:RefreshAlMoveInvitePanel(isShow)
	if isShow ~= nil then
		if isShow ==true then
			local canUnlock,lock_tips = SceneUtils.CheckIsWorldUnlock()
			if canUnlock ==true then
				self.alMoveInvitePanelN:SetActive(true)
			else
				self.alMoveInvitePanelN:SetActive(true)
			end
		else
			self.alMoveInvitePanelN:SetActive(false)
		end
		
	else
		if LuaEntry.Player.serverType == ServerType.NORMAL or LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
			local curRoomId = self._chatViewController:GetCurrentRoomId()
			local roomData = ChatInterface.getRoomData(curRoomId)
			if roomData~=nil and (roomData.group == ChatGroupType.GROUP_COUNTRY or roomData.group == ChatGroupType.GROUP_ALLIANCE) then -- == E_CHAT_COUNTRY_ROOMID or curRoomId == E_CHAT_ALLIANCE_ROOMID) then
				local curInviteType = DataCenter.AllianceBaseDataManager:GetAlMoveInvite(UIWindowNames.UIChat)
				if curInviteType ~= AlMoveInviteType.None then
					local canUnlock,lock_tips = SceneUtils.CheckIsWorldUnlock()
					if canUnlock ==true then
						self.alMoveInvitePanelN:SetActive(true)
					else
						self.alMoveInvitePanelN:SetActive(true)
					end
					
				else
					self.alMoveInvitePanelN:SetActive(false)
				end
			else
				self.alMoveInvitePanelN:SetActive(false)
			end
		else
			self.alMoveInvitePanelN:SetActive(false)
		end
		
	end
end

function UIChatView:RefreshPresidentRefreshMinePanel(isShow)
	if isShow ~= nil then
		self.presidentRefreshMinePanel:SetActive(isShow)
	else
		if LuaEntry.Player.serverType == ServerType.NORMAL or LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
			local curRoomId = self._chatViewController:GetCurrentRoomId()
			local roomData = ChatInterface.getRoomData(curRoomId)
			if roomData ~= nil and (roomData.group == ChatGroupType.GROUP_COUNTRY or roomData.group == ChatGroupType.GROUP_ALLIANCE) then -- == E_CHAT_COUNTRY_ROOMID or curRoomId == E_CHAT_ALLIANCE_ROOMID) then
				self.presidentRefreshMinePanel:SetActive(DataCenter.PresidentMineRefreshManager:ShowChatMessage())
			else
				self.presidentRefreshMinePanel:SetActive(false)
			end
		else
			self.presidentRefreshMinePanel:SetActive(false)
		end

	end
end


--[[
选择对话行
]]
function UIChatView:ChatCellSelect(roomId)
	self._cp_redPacket:SetActive(false)
	self._scrollRect_mainView:SetActive(false)
	self._alAutoInvitePanel:SetActive(false)
	self._bottomTipN:SetActive(false)
	self._cp_rect_topTips:SetActive(true)
	CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._cpRightLayout.rectTransform)
	-- 如果有选择频道的话，就选择一下指定的房间频道
	if roomId ~= nil then
		self._chatViewController:SetCurrentRoomId(roomId)
		-- 如果是GM频道,这个地方直接设置一下privatedata
		if (roomId == ChatGMRoomId) then
			local toUid = ChatGMUserId
			local tbl = {uid = toUid}
			ChatViewController:GetInstance():SetPrivateUserInfo(tbl)
		end
		-- 如果是私聊则过滤出来私聊的toUid
		if (self._chatViewController:IsTmpPrivateChat(roomId)) then
			local prefixLen = string.len(ChatTempPrivateRoomId)
			local toUid = string.sub(roomId, prefixLen+1)
			local tbl = {uid = toUid}
			ChatViewController:GetInstance():SetPrivateUserInfo(tbl)
		end
	end
	
	-- 设置当前房间的选择
	-- 任何选择频道的入口都要走这里！
	local curRoomId = self._chatViewController:GetCurrentRoomId()
	if self.quest_early then
		if curRoomId == QuestRoomId then
			local allianceRoomId = ChatInterface.getRoomMgr():GetAllianceRoomId()
			local roomData = ChatInterface.getRoomData(allianceRoomId)
			if (roomData ~= nil) then
				curRoomId = allianceRoomId
			end
		end
	end
	local roomType = "normal"
	if (curRoomId == QuestRoomId) then
		roomType = QuestRoomId
	elseif (curRoomId == RadarRoomId) then
		roomType = RadarRoomId
	end
	if (self._chatViewController._curRoomType ~= roomType) then
		self._chatViewController._curRoomType = roomType
		self:ReInitLayoutSize()
	end
	EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().CHAT_ROOM_SEL, curRoomId)
	
	for _, roomCell in pairs(self._chatRoomCellList) do
		roomCell:RestoreStateAndSidingNode()
	end

	if (curRoomId ~= QuestRoomId and curRoomId ~= RadarRoomId and curRoomId ~= AlAutoInviteRoomId) then
		self._scrollRect_mainView:SetActive(true)
		self._layOut:SetActive(true)
		self._bottom_input_view:SetActive(true)
		CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._cpRightLayout.rectTransform)
		self._chatMainView:ReLoadChat()
		self:RefreshAlMoveInvitePanel()
		self:RefreshPresidentRefreshMinePanel()
		--if (string.contains(curRoomId, 'gm') or string.contains(curRoomId, 'Gm')) and self._chatViewController:GetStartGmChatTime()<=0  then
		--	CS.UIGray.SetGray(self._sendBtn.transform,true,true)
		--else
		--	CS.UIGray.SetGray(self._sendBtn.transform,false,true)
		--end
		self._timer = TimerManager:GetInstance():DelayInvoke(function()
			self:OnPlayerDataCallBack()
			self._timer = nil
		end, 0.5)
	elseif curRoomId == AlAutoInviteRoomId then
		self._layOut:SetActive(false)
		self._bottom_input_view:SetActive(false)
		self._alAutoInvitePanel:SetActive(true)
		self._bottomTipN:SetActive(true)
		self._bottomTipN:SetLocalText(391099)
		CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(self._cpRightLayout.rectTransform)
		self._alAutoInvitePanel:Refresh()
	end

	if curRoomId and curRoomId ~= QuestRoomId then
		local _roomList = self:GetRoomList()
		for i, roomdata in ipairs(_roomList) do
			if roomdata["roomId"] == curRoomId and roomdata["group"] == "alliance" then
				self._cp_redPacket:SetActive(true)
				local redPacketNum =  DataCenter.AllianceRedPacketManager:GetValidRedPacketNum()
				self._cp_redPacketNum:SetActive(redPacketNum > 0)
				self._cp_redPacketTxt:SetText(redPacketNum > 0 and redPacketNum or "")
			end
		end
	end

	
	local roomData = ChatInterface.getRoomData(curRoomId)
	
	--群聊设置
	local showRoomSetting = false
	if curRoomId and roomData then
		if roomData.group == ChatGroupType.GROUP_CUSTOM and
				not roomData:isLangRoom() and
				not roomData:isPrivateChat() then
			showRoomSetting = true
		end
	end
	self._btnRoomSetting:SetActive(false)
	
	if roomData~=nil and (roomData.group == ChatGroupType.GROUP_COUNTRY or roomData.group == ChatGroupType.GROUP_ALLIANCE or roomData.group == ChatGroupType.GROUP_CROSS_SERVER or roomData.group == ChatGroupType.GROUP_DRAGON_SERVER or roomData.group == ChatGroupType.GROUP_EDEN_CAMP
		or roomData:isLangRoom() or showRoomSetting) then
		local roomParam = ChatGroupId[roomData.group]
		if roomData:isLangRoom() then
			roomParam = "lang"
		elseif showRoomSetting then
			roomParam = "memberList"
		end
		local state = Setting:GetBool(SettingKeys.CHAT_GROUP_SHIELD..LuaEntry.Player.uid..roomParam,false)
		if state then
			self._cp_btn_shield:LoadSprite(string.format(LoadPath.ChatFolder,"chat_icon_informa02"))
		else
			self._cp_btn_shield:LoadSprite(string.format(LoadPath.ChatFolder,"chat_icon_informa01"))
		end
		self._cp_txt_topTips:SetText(roomData:getRoomName())
		self._cp_btn_shield:SetActive(true)
	else
		self._cp_btn_shield:SetActive(false)
		if curRoomId then
			if curRoomId == ChatGMRoomId then
				self._cp_txt_topTips:SetLocalText(100619)
			elseif (self._chatViewController:IsTmpPrivateChat(curRoomId)) then
				for k, v in pairs(self._tmpPrivateChatList) do
					if v.roomId == roomId then
						self._cp_txt_topTips:SetText(v.name)
						break
					end
				end
			else
				if roomData then
					self._cp_txt_topTips:SetText(roomData:getRoomName())
				else
					self._cp_txt_topTips:SetText("")
				end
			end
		else
			self._cp_txt_topTips:SetText("")
		end
	end
end

--[[
*******
]]
function UIChatView:SlidingCell()

end

--[[
	GM按钮
]]
function UIChatView:OnGmButtonClick()
	
	
	-- 通过对方的uid和名字，查找到是否有这个私聊频道
	-- 如果有的话，那么就进行选择到这个聊天频道，
	-- 如果没有的话，左边不选择，右边显示聊天框

	local toUid = ChatGMUserId
	local roomData = ChatInterface.getRoomMgr():getPrivateRoomData(toUid)
	local roomId = roomData and roomData.roomId or ""
	local tbl = {uid = toUid}

	ChatViewController:GetInstance():SetCurrentRoomId(roomId)
	ChatViewController:GetInstance():SetPrivateUserInfo(tbl)
	EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().LF_ChatCellSelect)
end

function UIChatView:OnRotateButtonClick()

end


function UIChatView:DelayInvoke(callback, delayTime)
	local param = {}
	param.timer = TimerManager:GetInstance():GetTimer(delayTime, function()
			if param.timer ~= nil then
				param.timer:Stop()
				param.timer = nil
			end
			param = nil
			callback()
		end , self, true,false,false)
	param.timer:Start()
end

--[[
向左滑动
]]
function UIChatView:SlideLeft()

end

function UIChatView:IsOk()
	return self._layOut:GetActive()
end

--[[
向右滑动
]]
function UIChatView:SlideRight( duration )
	
end


function UIChatView:HideUnityInputField()
	--if (self:IsOk()) then
	--	if self._mobileInputField ~= nil then
	--		self._mobileInputField:SetUnityInputEnabled(false)
	--	end
	--end
	
end

function UIChatView:ClearWaitDelay()
	if (self._delayTimer ~= nil) then
		self._delayTimer:Stop()
	end
	self._delayTimer = nil
end

function UIChatView:OnFocusChanged( focus )
	print(">>>Unity: focuschanged: " .. tostring(focus))
	if (focus) then
		-- 检测修改名字
		if (self:CheckIsNeedModifyName()) then
			self:HideKeyborad()
			return
		end
	end
	self:ClearWaitDelay()
	if (not focus) then
		self:OnHideMobileInputField()
	elseif (self._mobileInputKeyBoradHeight > 0) then
		self._delayTimer = TimerManager:GetInstance():GetTimer(0.5, function()
				if self._delayTimer ~= nil then
					self._delayTimer:Stop()
					self._delayTimer = nil
				end
				self:OnShowMobileInputField(self._mobileInputKeyBoradHeight)
			end , self, true,false,false)
	end
end

function UIChatView:OnLostFocus()
	self:OnHideMobileInputField()
end

function UIChatView:OnHideMobileInputField()
	if (self._keyboardLayout_fullScreen ~= nil and self._keyboardLayout_fullScreen.unity_LayoutElement ~= nil and self._keyboardLayout_fullScreen:GetMinHeight() > MinKetBoardHeight) then
		self._keyboardLayout_fullScreen:SetMinHeight(MinKetBoardHeight)
		self._layoutElement_bottomInputView:SetMinHeight(MinKetBoardHeight)
		self._chatMainView:HideKeyboard()
		self._layout_TopLayoutImage:SetActive(false)
		self._keyboardLayoutImage:SetActive(false)
	end
end


function UIChatView:OnShowMobileInputField( height, leftOffset, rightOffset )
	if (self._keyboardLayout_fullScreen == nil) then
		return
	end
	leftOffset = leftOffset or 0
	rightOffset = rightOffset or 0
	if (self._keyboardLayout_fullScreen:GetMinHeight() <= MinKetBoardHeight) then
		--self._RightLayoutMinWidth = self._rightLayout:GetMinWidth()
		--self._rightLayout:SetMinWidth(rightOffset) --0
		self._layoutElement_bottomInputView:SetMinHeight(height)
		self._layout_TopLayoutImage:SetActive(true)
		self._keyboardLayoutImage:SetActive(true)
		self._chatMainView:ShowKeyboard( height )
		self._keyboardLayout_fullScreen:SetMinHeight(height)
	else
		self._chatMainView:ShowKeyboard( height )
		self._keyboardLayout_fullScreen:SetMinHeight(height)
	end
end

-- 设置键盘背景布局
function UIChatView:SetFullScreenState( fullsize )
	--if self._inputField_fullScreen~=nil then
	--	if CS.SDKManager.IS_IPhonePlayer() then
	--		self._inputField_fullScreen.transform:GetComponent(typeof(CS.UnityEngine.UI.LayoutElement)).preferredWidth = 1000
	--		CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate( self._inputField_fullScreen.transform)
	--	else
	--		--local _width = fullsize and 1500 or 1000
	--		--self._inputField_fullScreen.transform:GetComponent(typeof(CS.UnityEngine.UI.LayoutElement)).preferredWidth = _width
	--		--CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate( self._inputField_fullScreen.transform)
	--
	--	end
	--end
	
end


function UIChatView:OnShowKeyboard( isShow, height, leftOffset, rightOffset )
	print(">>>Unity: OnShowKeyboard: " .. tostring(height) .. tostring(leftOffset) .. tostring(rightOffset))
	if isShow then
		local scaleRatio = self._chatViewController:GetUIHeightRatio()
		self._mobileInputKeyBoradHeight = height * scaleRatio
		leftOffset = leftOffset * scaleRatio
		rightOffset = rightOffset * scaleRatio
		self:OnShowMobileInputField(self._mobileInputKeyBoradHeight, leftOffset, rightOffset)
	else
		self._layoutElement_bottomInputView:SetMinHeight(MinKetBoardHeight)
		self._layout_TopLayoutImage:SetActive(false)
		self._keyboardLayoutImage:SetActive(false)
		self._chatMainView:ShowKeyboard( MinKetBoardHeight )
		self._keyboardLayout_fullScreen:SetMinHeight(MinKetBoardHeight)
	end
end

function UIChatView:HideKeyborad()
	if self._mobileInputField~=nil then
		self._mobileInputField:Hide()
	end
end

--[[
	如果是GM,则需要在一开始的时候就需要将其 10000-100020 加入房间
	
]]
function UIChatView:CheckIsGmTalk( roomId )
	local roomMgr = ChatManager2:GetInstance().Room
	local roomData = roomMgr:GetRoomData(roomId)
	if (roomData == nil or not roomData:IsGmRoom()) then
		return
	end
	local memberList = roomData.memberList
	local nGMId = tonumber(ChatGMUserId)
	local userlist = {}
	for i = 0, 20 do
		local strGmId = tostring(nGMId + i)
		if (not table.hasvalue(memberList, strGmId)) then
			userlist[#userlist+1] = strGmId
		end
	end
	if (table.count(userlist) > 0) then
		local param = {roomId = roomData.roomId, uidArr = userlist}
		EventManager:GetInstance():Broadcast(ChatInterface.getEventEnum().ROOM_INVITE_COMMAND, param)
	end
end

function UIChatView:OnPlayerDataCallBack()
	--if (LuaEntry.Player.renameTime < 1) then
	--	self._mobileInputField:SetIngoreFocus(true)
	--else
	--	self._mobileInputField:SetIngoreFocus(false)
	--end
end

function UIChatView:OnClickShield()
	local curRoomId = self._chatViewController:GetCurrentRoomId()
	local roomData = ChatInterface.getRoomData(curRoomId)
	if roomData~=nil and (roomData.group == ChatGroupType.GROUP_COUNTRY or roomData.group == ChatGroupType.GROUP_ALLIANCE or roomData.group == ChatGroupType.GROUP_CROSS_SERVER or roomData.group == ChatGroupType.GROUP_DRAGON_SERVER or roomData.group == ChatGroupType.GROUP_EDEN_CAMP
	or roomData:isLangRoom() or roomData:IsGroupChatRoom()) then
		local roomParam = ChatGroupId[roomData.group]
		if roomData:isLangRoom() then
			roomParam = "lang"
		elseif roomData:IsGroupChatRoom() then
			roomParam = "memberList"
		end
		local state = Setting:GetBool(SettingKeys.CHAT_GROUP_SHIELD..LuaEntry.Player.uid..roomParam,false)
		if state then
			Setting:SetBool(SettingKeys.CHAT_GROUP_SHIELD..LuaEntry.Player.uid..roomParam,false)
			self._cp_btn_shield:LoadSprite("Assets/Main/Sprites/UI/UIChatNew2/chat_icon_informa01")
			UIUtil.ShowTipsId(208258)
		else
			Setting:SetBool(SettingKeys.CHAT_GROUP_SHIELD..LuaEntry.Player.uid..roomParam,true)
			self._cp_btn_shield:LoadSprite("Assets/Main/Sprites/UI/UIChatNew2/chat_icon_informa02")
			UIUtil.ShowTipsId(208257)
		end
	end
end


--[[
	检测是否已经修改过名字,如果没有修改过,则提示修改
]]
function UIChatView:CheckIsNeedModifyName()
	if (LuaEntry.Player.renameTime < 1) then
		local tab = {["window"] = "chat"}
		UIManager:GetInstance():OpenWindow(UIWindowNames.UIChangeName,{anim = true}, tab)
		return true
	end
	return false
end

function UIChatView:OnSendClick()
	---- 检测修改名字
	--if (self:CheckIsNeedModifyName()) then
	--	self:HideKeyborad()
	--	return
	--end
	--
	Logger.Log("onClickSend")
	local msg = self._mobileInputField.Text;
	local msg1 = self._inputField_fullScreen:GetText()
	Logger.Log("msg :"..msg)
	Logger.Log("msg1 :"..msg1)
	if (string.trim(msg) == "" and string.trim(msg1) == "") then
		self._inputField_fullScreen:SetText("")
		self._mobileInputField.Text = ""
		LuaEntry.GlobalData.lastChatInput = ""
		return
	end
	
	--local msg = self.inputField:GetText()
	--if (string.trim(msg) == "") then
	--	self.inputField:SetText("")
	--	--self._mobileInputField.Text = ""
	--	LuaEntry.GlobalData.lastChatInput = ""
	--	return
	--end
	
	-- 发送聊天！
	local _roomId = self._chatViewController:GetCurrentRoomId()

	--if _roomId~=nil and (string.contains(_roomId, 'gm') or string.contains(_roomId, 'Gm')) and self._chatViewController:GetStartGmChatTime()<=0  then
	--	UIUtil.ShowTipsId(121546)
	--	return
	--end
	
	-- 检测是否是GM会话
	self:CheckIsGmTalk(_roomId)
	
	local msgTable =
	{
		roomId = _roomId,
		msg = msg,
	}

	-- 如果房间为空的话，就表示是第一次在和人私聊
	if string.IsNullOrEmpty(_roomId) or 
			self._chatViewController:IsTmpPrivateChat(_roomId) or 
			_roomId == ChatGMRoomId then
		local tui = self._chatViewController:GetPrivateUserInfo()
		if (tui == nil) then
			return
		end
		msgTable.toUid = tui.uid
	end

	--if string.IsNullOrEmpty(_roomId) then
	--ChatPrint(">>> send msg11 : " .. tostring(msg))
	--EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SEND_TEMP_ROOM_MSG_COMMAND, msgTable)
	--else
	--ChatPrint(">>> send msg22 : " .. tostring(msg))
	EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SEND_ROOM_MSG_COMMAND, msgTable)

	
	
	--local t = {}
	
	--t.roomId = _roomId
	--t.post = PostType.Text_PointShare
	
	--t.param = {}
	--t.param.t = "23423432432"
	--t.param.abbr = "yyy"
	--t.param.sid = 1
	--t.param.x = 1024
	--t.param.y = 1024
	--t.param.oname = "120195"
	--t.param.olv = 8
	--EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SHARE_COMMAND, t)
	
	
	
	--end
	self._mobileInputField.Text = ""
	--self.inputField:SetText("")
	LuaEntry.GlobalData.lastChatInput = ""
end

function UIChatView:OnClickRedRecord()
	local redData = DataCenter.AllianceRedPacketManager:GetRedPacket()
	if table.count(redData) < 1 then
		UIUtil.ShowTipsId(390947)
		return
	end
	--打开红包记录
	UIManager:GetInstance():OpenWindow(UIWindowNames.UIRedenvelopeView,{ anim = true})
end

function UIChatView:OnSettingButtonClick()

end

function UIChatView:UpdateGmChatBtn()
	local curRoomId = self._chatViewController:GetCurrentRoomId()
	--if curRoomId~=nil and (string.contains(curRoomId, 'gm') or string.contains(curRoomId, 'Gm')) and self._chatViewController:GetStartGmChatTime()<=0  then
	--	CS.UIGray.SetGray(self._sendBtn.transform,true,false)
	--else
	--	CS.UIGray.SetGray(self._sendBtn.transform,false,true)
	--end
end

function UIChatView:OnRoomCreateClick()
	local max = LuaEntry.Effect:GetGameEffect(EffectDefine.CHAT_ROOM_MAX)
	local cur = #ChatInterface.getRoomMgr():GetMyCreateRooms()
	if cur >= max then
		if cur > 0 then
			UIUtil.ShowTipsId(290040)
		else
			UIUtil.ShowTipsId(290067)
		end
		return
	end
	local param = {}
	param.isCreate = true
	UIManager:GetInstance():OpenWindow(UIWindowNames.UIChatInvite, { anim = true }, param)
end

function UIChatView:OnRoomSettingClick()
	local curRoomId = self._chatViewController:GetCurrentRoomId()
	if curRoomId then
		local roomData = ChatInterface.getRoomData(curRoomId)
		if roomData then
			if roomData.group == ChatGroupType.GROUP_CUSTOM then
				UIManager:GetInstance():OpenWindow(UIWindowNames.UIChatRoomSetting, { anim = true }, curRoomId)
			end
		end
	end
end

function UIChatView:OnChatRoomCreate(succ)
	if succ then
		TimerManager:GetInstance():DelayInvoke(function()
			if self.active then
				local roomDataList = ChatInterface.getRoomMgr():GetMyCreateRooms()
				if #roomDataList > 0 then
					table.sort(roomDataList, function(a, b)
						return a.lastClickTime > b.lastClickTime
					end)
					local roomData = roomDataList[1]
					self:ChatCellSelect(roomData.roomId)
				end
			end
		end, 0.5)
	end
end

function UIChatView:OnChatRoomChangeName(roomId)
	TimerManager:GetInstance():DelayInvoke(function()
		if self.active then
			local curRoomId = self._chatViewController:GetCurrentRoomId()
			if curRoomId == roomId then
				local roomData = ChatInterface.getRoomData(curRoomId)
				self._cp_txt_topTips:SetText(roomData:getRoomName())
			end
		end
	end, 0.5)
end

return UIChatView