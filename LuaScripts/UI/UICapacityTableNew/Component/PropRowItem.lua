---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guq.
--- DateTime: 2021/4/29 16:29
---
local PropRowItem = BaseClass("PropRowItem", UIBaseContainer)
local base = UIBaseContainer
local CellItem = require "UI.UICapacityTableNew.Component.ResourceItem"

local canvasGroup_path = ""
local cell_path = "row/Cell"

local itemCount = 4
local perDelayTime = 0.1  -- 每行开始播放延迟
local showTime = 0.2  -- 透明度时间

-- 创建
function PropRowItem : OnCreate()
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
    
end

-- 销毁
function PropRowItem : OnDestroy()
    self:ClearTimer()
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

-- 显示
function PropRowItem : OnEnable()
    base.OnEnable(self)
end

-- 隐藏
function PropRowItem : OnDisable()
    base.OnDisable(self)
end

--控件的定义
function PropRowItem : ComponentDefine()
    self.canvasGroup = self:AddComponent(UICanvasGroup, canvasGroup_path)
    for i = 1,itemCount do
        local item = self:AddComponent(CellItem, cell_path..i)
        table.insert(self.cellList, item)
    end
end
--控件的销毁
function PropRowItem : ComponentDestroy()

end

--变量的定义
function PropRowItem : DataDefine()
    self.cellList = {}
    self.index = -1
    self.data = {}
    self.delayTimer = nil
end

--变量的销毁
function PropRowItem : DataDestroy()
    self.cellList = nil
    self.index = nil
    self.data = nil
    self.delayTimer = nil
end

function PropRowItem : ReInit(data, index)
    self:ClearTimer()
    self.index = index
    for i=1,itemCount do
        local cellItem = self.cellList[i]
        cellItem:SetActive(i <= #data)
        if i <= #data then
            local param = {}
            local sub = data[i]
            param = sub
            local curIndex = (index - 1) * itemCount + i
            param.index = curIndex
            --只有道具有专属的callBack
            param.callBack = function(trans,_index) self.view:CellsCallBack(trans,_index) end
            cellItem:RefreshData(param)
            cellItem:RedDotRefresh(param.redState)
            if curIndex == self.view.curSelectCell then
                self.view.curSelectCell = nil
                self.view:CellsCallBack(cellItem.transform,curIndex)
            end
        end

    end
end

function PropRowItem : CloseSelect()
    for i=1,itemCount do
        local curIndex = self.index * itemCount + i
        if curIndex == self.view.curSelectCell then
            self.view.cell_select:SetActive(false)
        end
    end
end

function PropRowItem : HasItemId(itemId)
    for k,v in pairs(self.data) do
        if v.itemId == itemId then
            return true
        end
    end
    return false
end

function PropRowItem : ShowSelf()
    self.canvasGroup:SetAlpha(0)
    local delayTime = (self.index - 1) * perDelayTime
    self.delayTimer = TimerManager:GetInstance():DelayInvoke(function()
        self.delayTimer = nil
        self.rectTransform:GetComponent(typeof(CS.UnityEngine.CanvasGroup)):DOFade(1, showTime):SetEase(CS.DG.Tweening.Ease.Linear)
    end, delayTime)
end

function PropRowItem : ClearTimer()
    if self.delayTimer ~= nil then
        self.delayTimer:Stop()
        self.delayTimer = nil
    end
end

return PropRowItem