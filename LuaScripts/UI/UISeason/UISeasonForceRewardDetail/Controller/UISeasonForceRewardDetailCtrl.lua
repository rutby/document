---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/1/16 10:57
---
local UISeasonForceRewardDetailCtrl = BaseClass("UISeasonForceRewardDetailCtrl", UIBaseCtrl)

local function CloseSelf(self)
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UISeasonForceRewardDetail)
end

local function Close(self)
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

local function GetDesertForceRewardList(self)
    local showList = {}
    local dic = DataCenter.DesertDataManager:GetForceRewardList()
    
    if dic~=nil then
        local showMoneyNum = LuaEntry.Effect:GetGameEffect(EffectDefine.SEASON_FORCE_REWARD_MONEY)
        local showCrystalNum = LuaEntry.Effect:GetGameEffect(EffectDefine.SEASON_FORCE_REWARD_BOX)
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local k7 = LuaEntry.DataConfig:TryGetNum("aps_desert_force_reward", "k7")
        local checkTime = curTime-k7*3600*1000
        for k,v in pairs(dic) do
            local oneData = {}
            oneData.createTime = 0
            oneData.force = 0
            oneData.isNormal = true
            oneData.isOver = (k<=checkTime)
            oneData.status = SeasonForceRewardStatus.NOT_RECEIVE
            for a,b in pairs(v) do
                oneData.createTime = b.rewardTime
                oneData.force = b.forceNum
                if b.rewardData~=nil and b.rewardData.rewardType == RewardType.MONEY then
                    oneData.moneyData = self:GetRewards(b.rewardData)
                end
                if b.rewardData~=nil and b.rewardData.rewardType == RewardType.GOODS then
                    oneData.goodsData = self:GetRewards(b.rewardData)
                end
                oneData.status = b.status
            end
            table.insert(showList,oneData)
            if showMoneyNum >0 or showCrystalNum >0 then
                local extraData = {}
                extraData.createTime = oneData.createTime
                extraData.force = oneData.force
                extraData.status = oneData.status
                extraData.isNormal = false
                extraData.isOver = oneData.isOver
                if showMoneyNum>0 and oneData.moneyData~=nil then
                    local percent = (showMoneyNum/100)
                    extraData.moneyData = oneData.moneyData
                    extraData.moneyData.count = math.floor(oneData.moneyData.count * percent)
                end
                if showCrystalNum>0 and oneData.goodsData~=nil then
                    local percent = (showCrystalNum/100)
                    extraData.goodsData = oneData.goodsData
                    extraData.goodsData.count = math.floor(oneData.goodsData.count * percent)
                end
                table.insert(showList,extraData)
            end
        end
        table.sort(showList,function(a,b)
            if a.createTime~=b.createTime then
                return a.createTime>b.createTime
            end
            if a.isNormal~=b.isNormal then
                return a.isNormal
            end
            return false
        end)
    end
    return showList
end


local function GetRewards(self,rewardItem)
    local item = {}
    item.count = rewardItem.count
    item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.WHITE)
    item.rewardType = rewardItem.rewardType
    local desc = DataCenter.RewardManager:GetDescByType(rewardItem.rewardType, rewardItem.itemId)
    local name = DataCenter.RewardManager:GetNameByType(rewardItem.rewardType, rewardItem.itemId)
    item.itemName = name
    item.itemDesc = desc
    item.isLocal = true
    if rewardItem.rewardType == RewardType.GOODS then
        if rewardItem.itemId ~= nil then
            --物品或英雄
            --item.itemName = Localization:GetString(name)
            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(rewardItem.itemId)
            if goods ~= nil then
                local join_method = -1
                local icon_join = nil
                if goods.join_method ~= nil and goods.join_method > 0 and goods.icon_join ~= nil and goods.icon_join ~= "" then
                    join_method = goods.join_method
                    icon_join = goods.icon_join
                end

                if join_method > 0 and icon_join ~= nil and icon_join ~= "" then
                    local tempJoin = string.split(icon_join, ";")
                    if #tempJoin > 1 then
                        item.itemColor = tempJoin[2]
                    end
                    if #tempJoin > 2 then
                        item.iconName = tempJoin[3]
                    end
                else
                    --物品
                    item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                    local itemType = goods.type
                    if itemType == 2 then
                        -- SPD
                        if goods.para1 ~= nil and goods.para1 ~= "" then
                            local para1 = goods.para1
                            local temp = string.split(para1, ';')
                            if temp ~= nil and #temp > 1 then
                                item.itemFlag = temp[1] .. temp[2]
                            end
                        end
                    elseif itemType == 3 then
                        -- USE
                        local type2 = goods.type2
                        if type2 ~= 999 and goods.para ~= nil and goods.para ~= "" then
                            local res_num = tonumber(goods.para)
                            item.itemFlag = string.GetFormattedStr(res_num)
                        end
                    end

                    item.iconName = string.format(LoadPath.ItemPath, goods.icon)
                end
            end
        end
    elseif rewardItem.rewardType == RewardType.GOLD then
        item.iconName = DataCenter.ResourceManager:GetResourceIconByType(ResourceType.Gold)
        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.PURPLE)
    elseif rewardItem.rewardType == RewardType.OIL or rewardItem.rewardType == RewardType.METAL or rewardItem.rewardType == RewardType.FORMATION_STAMINA
            or rewardItem.rewardType == RewardType.WATER or rewardItem.rewardType == RewardType.PVE_POINT or rewardItem.rewardType == RewardType.DETECT_EVENT
            or rewardItem.rewardType == RewardType.MONEY or rewardItem.rewardType == RewardType.ELECTRICITY then
        item.iconName = DataCenter.RewardManager:GetPicByType(rewardItem.rewardType)
        item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.PURPLE)
    end
    return item
end

UISeasonForceRewardDetailCtrl.CloseSelf = CloseSelf
UISeasonForceRewardDetailCtrl.Close = Close
UISeasonForceRewardDetailCtrl.GetDesertForceRewardList = GetDesertForceRewardList
UISeasonForceRewardDetailCtrl.GetRewards = GetRewards
return UISeasonForceRewardDetailCtrl