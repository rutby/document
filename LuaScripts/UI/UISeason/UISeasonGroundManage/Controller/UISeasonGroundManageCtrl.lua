---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 24224.
--- DateTime: 2022/12/5 18:01
---
local UISeasonGroundManageCtrl = BaseClass("UISeasonGroundManageCtrl", UIBaseCtrl)
local Data = CS.GameEntry.Data
local Localization = CS.GameEntry.Localization
function UISeasonGroundManageCtrl:CloseSelf()
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UISeasonGroundManage)
end

function UISeasonGroundManageCtrl:Close()
    UIManager:GetInstance():DestroyWindowByLayer(UILayer.Normal)
end

function UISeasonGroundManageCtrl:GetShowAttrList()
    local show = CrossServerUtil.GetCanShowCrossSeasonGround()
    local list = {PlayerDesertAttr.SelfCount,PlayerDesertAttr.OtherCount,PlayerDesertAttr.Buff,PlayerDesertAttr.ResSpeedGas,PlayerDesertAttr.ResSpeedFlint,PlayerDesertAttr.Force, PlayerDesertAttr.ForceRank}
    if show ==false then
        list = {PlayerDesertAttr.SelfCount,PlayerDesertAttr.Buff,PlayerDesertAttr.ResSpeedGas,PlayerDesertAttr.ResSpeedFlint,PlayerDesertAttr.Force, PlayerDesertAttr.ForceRank}
    end
    return list
end
function UISeasonGroundManageCtrl:GetAttrNumByType(attrType)
    local value = 0
    if attrType == PlayerDesertAttr.SelfCount then
        local count = DataCenter.DesertDataManager:GetSelfSeverDesert()
        local maxNum = DataCenter.DesertDataManager:GetDesertMaxNum()
        value = string.GetFormattedSeperatorNum(math.floor(count)).."/"..string.GetFormattedSeperatorNum(math.floor(maxNum))
    elseif attrType == PlayerDesertAttr.OtherCount then
        local count = DataCenter.DesertDataManager:GetOtherSeverDesert()
        local maxNum = DataCenter.DesertDataManager:GetDesertMaxNum()
        value = string.GetFormattedSeperatorNum(math.floor(count)) .. "/" .. string.GetFormattedSeperatorNum(math.floor(maxNum))
    elseif attrType == PlayerDesertAttr.Buff then
        local num = SeasonUtil:GetSelfSeasonResistanceValue()
        value = string.GetFormattedSeperatorNum(math.floor(num))
    elseif attrType == PlayerDesertAttr.ResSpeedGas then
        local totalNum = DataCenter.DesertDataManager:GetSeasonResourceCollectSpeed(ResourceType.Oil)
        value = string.GetFormattedSeperatorNum(math.floor(totalNum)).."/H"
    elseif attrType == PlayerDesertAttr.ResSpeedFlint then
        local totalNum = DataCenter.DesertDataManager:GetSeasonResourceCollectSpeed(ResourceType.FLINT)
        value = string.GetFormattedSeperatorNum(math.floor(totalNum)).."/H"
    elseif attrType == PlayerDesertAttr.Force then
        local totalNum = DataCenter.DesertDataManager:GetSelfDesertForceNum()
        value = string.GetFormattedSeperatorNum(math.floor(totalNum))
    elseif attrType == PlayerDesertAttr.ForceRank then
        local rank = DataCenter.DesertDataManager:GetSelfForceRank()
        if rank~=nil and rank>0 and rank<5000 then
            value = rank
        else
            value = Localization:GetString("361054")
        end
    end
    return value
end

function UISeasonGroundManageCtrl:GetSeasonResourceCollectSpeed(resourceType)
    return DataCenter.DesertDataManager:GetSeasonResourceCollectSpeed(resourceType)
end
function UISeasonGroundManageCtrl:GetDesertData(uuid)
    if uuid~=0 then
        local desertData = DataCenter.DesertDataManager:GetSelfDesertDataByUuid(uuid)
        if desertData~=nil then
            local oneData = {}
            oneData.giveUpEndTime = desertData.giveUpTime
            oneData.protectEndTime = desertData.protectTime
            oneData.desert_type = desertData.desert_type
            local id = desertData.desertId
            oneData.desertId = id
            oneData.pointId = desertData.pointId
            oneData.level = 0
            oneData.name = "110245"
            oneData.resSpeed = desertData.resSpeed
            oneData.recommend_power = 0
            oneData.serverId = desertData.serverId
            oneData.mineId = desertData.mineId
            oneData.buildName = nil
            local buildId = DataCenter.DesertDataManager:GetBuildIdByDesertPointId(desertData.pointId)
            if buildId~=nil then
                oneData.buildName = GetTableData(DataCenter.BuildTemplateManager:GetTableName(), buildId,"name")
            end
            local str = GetTableData(TableName.Desert, id, "icon")
            oneData.pic = string.format(LoadPath.SeasonDesert,str)
            if id~=0 then
                oneData.level = GetTableData(TableName.Desert, id, "desert_level")
                oneData.name = GetTableData(TableName.Desert, id, "desert_name")
                local power = GetTableData(TableName.Desert, id, "desert_power")
                oneData.recommend_power = tonumber(power)
                oneData.giveUpDeltaTime = GetTableData(TableName.Desert, id, "giveup_time")
                oneData.protectDeltaTime = GetTableData(TableName.Desert, id, "protect_time")
            end
            return oneData
        end
    end
end

function UISeasonGroundManageCtrl:GetSeasonBuildData(uuid)
    if uuid~=0 then
        local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(uuid)
        if buildData~=nil then
            local oneData = {}
            oneData.level = buildData.level
            oneData.pointId = buildData.pointId
            oneData.name = ""
            oneData.pic = ""
            oneData.desertLevel = 0
            oneData.serverId = buildData.server
            oneData.desertName = "110245"
            oneData.canUpgrade = DataCenter.BuildManager:GetBuildCanUpgrade(uuid)
            local desertData = DataCenter.DesertDataManager:GetDesertDataByPoint(buildData.pointId)
            if desertData~=nil then
                local id = desertData.desertId
                oneData.desertId = id
                if id~=0 then
                    oneData.desertLevel = GetTableData(TableName.Desert, id, "desert_level")
                    oneData.desertName = GetTableData(TableName.Desert, id, "desert_name")
                end
            end
            oneData.name = GetTableData(DataCenter.BuildTemplateManager:GetTableName(), buildData.itemId + buildData.level,"name")
            oneData.pic = DataCenter.BuildManager:GetBuildIconPath(buildData.itemId, buildData.level)
            return oneData
        end
    end
end
function UISeasonGroundManageCtrl:GetSortDesertDataList(targetIndex)
    local selfServer = LuaEntry.Player:GetSelfServerId()
    local selectSelf = false
    if targetIndex == 3 then
        selectSelf = true
    end
    local dic = DataCenter.DesertDataManager:GetDesertDataForShow()
    local tempList = {}
    for k,v in pairs(dic) do
        if self.list[v.level] == 1 then
            if selectSelf then
                if selfServer ~= v.serverId then
                    table.insert(tempList,v)
                end
            else
                if selfServer == v.serverId then
                    table.insert(tempList,v)
                end
            end
        end
    end
    table.sort(tempList,function(a,b)
        return a.level>b.level
    end)
    local showList = {}
    local buildDic = DataCenter.DesertDataManager:GetSeasonBuildList()
    for k,v in pairs(buildDic) do
        local buildId = v.itemId
        if self.list[buildId] == 1 then
            local oneData = {}
            oneData.uuid = k
            local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(k)
            if buildData~=nil and buildData.state ~= BuildingStateType.FoldUp then
                local add = false
                if selectSelf then
                    if selfServer ~= buildData.server then
                        add = true
                    end
                else
                    add = true
                end
                if add == true then
                    oneData.itemId = v.itemId
                    oneData.order = 0
                    local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(oneData.itemId)
                    if buildTemplate ~= nil then
                        oneData.order = buildTemplate.order
                    end
                    oneData.level = buildData.level
                    oneData.pointType = WorldPointType.PlayerBuilding
                    table.insert(showList,oneData)
                end
                
            end
        end
    end
    table.sort(showList,function(a,b)
        if a.order~=b.order then
            return a.order<b.order
        end
        --if a.level~=b.level then
        --    return a.level>b.level
        --end
        return a.itemId>b.itemId
        
    end)
    for k,v in pairs(tempList) do
        local oneData = {}
        oneData.uuid = v.uuid
        oneData.level = v.level
        oneData.pointType = WorldPointType.Other
        oneData.giveUpTime = v.giveUpTime
        table.insert(showList,oneData)
    end
    
    return showList
end

function UISeasonGroundManageCtrl:InitSortList(index)
    self.list = {}
    if index ==1 then
        local tempList = DataCenter.DesertDataManager:GetSortList(false)
        if tempList~=nil then
            for k,v in pairs(tempList) do
                self.list[v] = 1
            end
        end
    elseif index ==2 then
        local tempBuildIdList = DataCenter.DesertDataManager:GetBuildListIds()
        if tempBuildIdList~=nil then
            for k,v in pairs(tempBuildIdList) do
                self.list[v] = 1
            end
        end
    elseif index ==3 then
        local tempList = DataCenter.DesertDataManager:GetSortList(true)
        if tempList~=nil then
            for k,v in pairs(tempList) do
                self.list[v] = 1
            end
        end
    end
end
function UISeasonGroundManageCtrl:GetSortShowList()
    local list = table.keys(self.list)
    table.sort(list,function(a,b)
        return a>b
    end)
    return list
end
function UISeasonGroundManageCtrl:GetRewardList()
    local list = {}
    local data = DataCenter.DesertDataManager:GetSelfAllianceSeasonReward()
    if data ~=nil then
        local tempData = data.packagesList
        for k,v in pairs(tempData) do
            table.insert(list,v)
        end
    end
    return list
end

function UISeasonGroundManageCtrl:SetOneSelect(level,value)
    if self.list[level]~=nil then
        if value ==true then
            self.list[level] = 1
        else
            self.list[level] = 0
        end
    end
end

function UISeasonGroundManageCtrl:GetIsSelect(level)
    if self.list[level]~=nil and self.list[level] ==1 then
        return true
    end
    return false
end

function UISeasonGroundManageCtrl:SelectAll()
    local temp = {}
    for k,v in pairs(self.list) do
        temp[k] = 1
    end
    self.list = temp
end

function UISeasonGroundManageCtrl:RevertAll()
    local temp = {}
    for k,v in pairs(self.list) do
        if v ==1 then
            temp[k] = 0
        else
            temp[k] = 1
        end
    end
    self.list = temp
end

function UISeasonGroundManageCtrl:GetCanGetForceRewardNum()
    
    local dic = DataCenter.DesertDataManager:GetForceRewardList()
    local count = 0
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local k7 = LuaEntry.DataConfig:TryGetNum("aps_desert_force_reward", "k7")
    local checkTime = curTime-k7*3600*1000
    if dic~=nil then
        for k,v in pairs(dic) do
            if k>checkTime then
                local arr = v
                local isNeedReceive = false
                for a,b in pairs(arr) do
                    if isNeedReceive == false then
                        if b.status == SeasonForceRewardStatus.NOT_RECEIVE then
                            isNeedReceive = true
                            count = count+1
                        end
                    end
                end
            end
        end
    end
    return count
end

function UISeasonGroundManageCtrl:GetCanGatherResNum(totalGasSpeed,totalFlintSpeed)
    return DataCenter.DesertDataManager:GetCanGatherResNum(totalGasSpeed,totalFlintSpeed)
end


return UISeasonGroundManageCtrl