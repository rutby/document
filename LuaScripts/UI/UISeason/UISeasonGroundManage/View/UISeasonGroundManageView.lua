---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 24224.
--- DateTime: 2022/12/5 18:01
---
local SeasonGroundItem = require "UI.UISeason.UISeasonGroundManage.Component.SeasonGroundItem"
local SeasonGroundAttr = require "UI.UISeason.UISeasonGroundManage.Component.SeasonGroundAttr"
local SeasonGroundSelect = require "UI.UISeason.UISeasonGroundManage.Component.SeasonGroundSelect"
local SeasonResItem = require "UI.UISeason.UISeasonGroundManage.Component.SeasonResItem"
local SeasonGroundForceItem = require"UI.UISeason.UISeasonGroundManage.Component.SeasonGroundForceItem"
local SeasonGatherResItem = require "UI.UISeason.UISeasonGroundManage.Component.SeasonGatherResItem"
local UISeasonGroundManageView = BaseClass("UISeasonGroundManageView",UIBaseView)
local base = UIBaseView
local Localization = CS.GameEntry.Localization
function UISeasonGroundManageView:OnCreate()
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
    SFSNetwork.SendMessage(MsgDefines.SeasonForceReward)
    SFSNetwork.SendMessage(MsgDefines.DesertForceSelfRank)
end

function UISeasonGroundManageView:ComponentDefine()

    self.isArrow,self.isTabIndex = self:GetUserData()
    self.isSeasonFinish =false
    local index = Setting:GetPrivateInt("SeasonGroundIndex", 1)
    self.targetIndex = self.isTabIndex or index
    local isSwitchOn = LuaEntry.DataConfig:CheckSwitch("season_over")
    if isSwitchOn then
        local curStage, endTime = DataCenter.RobotWarsManager:GetCurStage()
        if  curStage == SeasonStage.ToFinish or curStage == SeasonStage.Finished then
            self.isSeasonFinish = true
            local showFlag = Setting:GetPrivateInt("SHOW_SeasonFinishWarning", 0)
            if showFlag<=0 then
                UIUtil.ShowSecondMessage(Localization:GetString("100378"), Localization:GetString("110979"), 1, "", "", function()
                end, function(needSellConfirm)
                    if needSellConfirm== false then
                        Setting:SetPrivateInt("SHOW_SeasonFinishWarning",1)
                    else
                        Setting:SetPrivateInt("SHOW_SeasonFinishWarning",0)
                    end
                end)
            end

        end
    end
    if self.isSeasonFinish then
        self.isArrow =false
    end
    
    self._close_btn = self:AddComponent(UIButton,"safeArea/Back")
    self._close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self._title = self:AddComponent(UIText,"safeArea/Title")
    self._title:SetText(Localization:GetString("110275"))
    self._select_btn = self:AddComponent(UIButton,"safeArea/content/layout/selectBtn")
    self._select_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnSelectClick()
    end)
    self._select_des = self:AddComponent(UIText,"safeArea/content/layout/selectBtn/selectDes")
    self._select_des:SetText(Localization:GetString("110283"))
    self._title_force = self:AddComponent(UIText,"safeArea/content/display/title_force")
    self._title_force:SetText(Localization:GetString("130065"))
    self.attrObj = self:AddComponent(SeasonGroundAttr,"safeArea/content/display")
    self.infoBtnN = self:AddComponent(UIButton, "safeArea/content/display/btn_detail")
    self.infoBtnN:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnClickInfoBtn()
    end)
    self.forceRankBtn = self:AddComponent(UIButton,"safeArea/content/display/desertRankBtn")
    self.forceRankBtn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnDesClick()
    end)
    self.selectObj = self:AddComponent(SeasonGroundSelect,"SelectObj")
    local res1 = self:AddComponent(SeasonResItem,"resRoot1")
    res1:InitData(ResourceType.Oil)
    local res2 = self:AddComponent(SeasonResItem,"resRoot2")
    res2:InitData(ResourceType.FLINT)
    self.resArr = {}
    table.insert(self.resArr,res1)
    table.insert(self.resArr,res2)

    self.toggle1 = self:AddComponent(UIToggle,"safeArea/content/layout/ToggleGroup/Toggle_List1")
    self.toggle1:SetIsOn(self.targetIndex ==1)
    self.toggle1:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle1.choose = self.toggle1:AddComponent(UIBaseContainer, "Background")
    self.toggle1.unselectName = self.toggle1:AddComponent(UIText, "Image/Txt_1")
    self.toggle1.selectName = self.toggle1:AddComponent(UIText, "Background/Txt_2")
    self.toggle1.unselectName:SetLocalText(302716)
    self.toggle1.selectName:SetLocalText(302716)
    self.toggle2 = self:AddComponent(UIToggle,"safeArea/content/layout/ToggleGroup/Toggle_List2")
    self.toggle2:SetIsOn(self.targetIndex ==2)
    self.toggle2:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle2.choose = self.toggle2:AddComponent(UIBaseContainer, "Background")
    self.toggle2.unselectName = self.toggle2:AddComponent(UIText, "Image/Txt_1")
    self.toggle2.selectName = self.toggle2:AddComponent(UIText, "Background/Txt_2")
    self.toggle2.unselectName:SetLocalText(110505)
    self.toggle2.selectName:SetLocalText(110505)

    self.toggle3 = self:AddComponent(UIToggle,"safeArea/content/layout/ToggleGroup/Toggle_List3")
    self.toggle3:SetIsOn(self.targetIndex ==3)
    self.toggle3:SetOnValueChanged(function(tf)
        if tf then
            self:ToggleControlBorS()
        end
    end)
    self.toggle3.choose = self.toggle3:AddComponent(UIBaseContainer, "Background")
    self.toggle3.unselectName = self.toggle3:AddComponent(UIText, "Image/Txt_1")
    self.toggle3.selectName = self.toggle3:AddComponent(UIText, "Background/Txt_2")
    self.toggle3.unselectName:SetLocalText(110990)
    self.toggle3.selectName:SetLocalText(110990)
    local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
    if seasonId == 5 then
        self.toggle3:SetActive(false)
    else
        self.toggle3:SetActive(true)
    end
    --self.ctrl:SetSelectSelfServerDesert(false)
    --local show = CrossServerUtil.GetCanShowCrossSeasonGround()
    --self.back_toggle = self:AddComponent(UIToggle,"backToggle")
    --self.back_toggle:SetActive(show)
    --if show then
    --    self.back_toggle:SetIsOn(false)
    --    self.back_toggle_txt = self:AddComponent(UIText,"backToggle/backToggle_txt")
    --    self.back_toggle_txt:SetLocalText(110544)
    --    self.back_toggle:SetOnValueChanged(function()
    --        self:ToggleControlBorS()
    --    end)
    --end
    
    self.ScrollView = self:AddComponent(UIScrollView,"safeArea/content/layout/ScrollView")
    self.ScrollView:SetOnItemMoveIn(function(itemObj, index)
        self:OnItemMoveIn(itemObj, index)
    end)
    self.ScrollView:SetOnItemMoveOut(function(itemObj, index)
        self:OnItemMoveOut(itemObj, index)
    end)
    self.content = self:AddComponent(UIBaseContainer,"safeArea/content/layout/ScrollView/Viewport/Content")
    self.empty_txt = self:AddComponent(UIText,"safeArea/content/layout/empty")
    self.empty_txt:SetText(Localization:GetString("110381"))
    self.force_obj = self:AddComponent(SeasonGroundForceItem,"safeArea/content/display/forceItem")
    self.gather_obj = self:AddComponent(SeasonGatherResItem,"safeArea/content/display/gatherResItem")
    self.showDatalist = {}
    self.inSelect = false
end

function UISeasonGroundManageView:DataDefine()
    self.itemCellList = {}
end

function UISeasonGroundManageView:OnDestroy()
    self:DeleteDelayTimer()
    self:ClearScroll()
    base.OnDestroy(self)
end

function UISeasonGroundManageView:OnEnable()
    base.OnEnable(self)
    self:ToggleControlBorS()
end

function UISeasonGroundManageView:OnDisable()
    base.OnDisable(self)
end

function UISeasonGroundManageView:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(EventId.UserGetDesert, self.RefreshDesert)
    self:AddUIListener(EventId.FoldUpSeasonBuild, self.RefreshDesert)
    self:AddUIListener(EventId.UserLostDesert, self.RefreshDesert)
    self:AddUIListener(EventId.UserDismissDesert, self.DesertStateChange)
    self:AddUIListener(EventId.UserCancelDismissDesert, self.DesertStateChange)
    self:AddUIListener(EventId.UserDesertResCollect, self.DesertResChange)
    self:AddUIListener(EventId.UserGetDesertAdd,self.UpdateDesertNum)
    self:AddUIListener(EventId.DesertForceRefresh,self.UpdateDesertForceData)
    self:AddUIListener(EventId.GatherSeasonResTimeChange,self.UpdateSeasonResTime)
    self:AddUIListener(EventId.ForceSelfRank,self.OnRefreshDesertRank)
    self:AddUIListener(EventId.ResourceUpdated,self.ResourceChange)
end

function UISeasonGroundManageView:OnRemoveListener()
    self:RemoveUIListener(EventId.UserGetDesert, self.RefreshDesert)
    self:RemoveUIListener(EventId.FoldUpSeasonBuild, self.RefreshDesert)
    self:RemoveUIListener(EventId.UserLostDesert, self.RefreshDesert)
    self:RemoveUIListener(EventId.UserDismissDesert, self.DesertStateChange)
    self:RemoveUIListener(EventId.UserCancelDismissDesert, self.DesertStateChange)
    self:RemoveUIListener(EventId.UserDesertResCollect, self.DesertResChange)
    self:RemoveUIListener(EventId.UserGetDesertAdd,self.UpdateDesertNum)
    self:RemoveUIListener(EventId.DesertForceRefresh,self.UpdateDesertForceData)
    self:RemoveUIListener(EventId.GatherSeasonResTimeChange,self.UpdateSeasonResTime)
    self:RemoveUIListener(EventId.ForceSelfRank,self.OnRefreshDesertRank)
    self:RemoveUIListener(EventId.ResourceUpdated,self.ResourceChange)
    base.OnRemoveListener(self)
end

function UISeasonGroundManageView:ClearScroll()
    self.ScrollView:ClearCells()
    self.ScrollView:RemoveComponents(SeasonGroundItem)
    self.showDatalist = {}
    self.itemCellList = {}
end


function UISeasonGroundManageView:ToggleControlBorS()
    if self.toggle1:GetIsOn() then
        self.targetIndex = 1
    elseif self.toggle2:GetIsOn() then
        self.targetIndex = 2
    elseif self.toggle3:GetIsOn() then
        self.targetIndex = 3
    end
    Setting:SetPrivateInt("SeasonGroundIndex",self.targetIndex)
    self.toggle1.choose:SetActive(self.targetIndex ==1 )
    self.toggle2.choose:SetActive(self.targetIndex ==2 )
    self.toggle3.choose:SetActive(self.targetIndex ==3 )
    self.ctrl:InitSortList(self.targetIndex)
    self.selectObj:Reset()
    self:RefreshList(true)
end
function UISeasonGroundManageView:OnItemMoveIn(itemObj, index)
    itemObj.name = tostring(index)
    local cellItem = self.ScrollView:AddComponent(SeasonGroundItem, itemObj)
    cellItem:SetItemShow(self.showDatalist[index])
    self.itemCellList[index] = cellItem
    
end

function UISeasonGroundManageView:OnItemMoveOut(itemObj, index)
    self.ScrollView:RemoveComponent(itemObj.name, SeasonGroundItem)
    self.itemCellList[index] = nil
end

function UISeasonGroundManageView:RefreshDesert(init)
    self.attrObj:OnRefreshData()
    self:RefreshList(init)
    self.gather_obj:RefreshSpeed()
end
function UISeasonGroundManageView:UpdateSeasonResTime()
    self.gather_obj:RefreshNum()
end
function UISeasonGroundManageView:UpdateDesertForceData()
    self.force_obj:InitData()
end

function UISeasonGroundManageView:UpdateDesertNum()
    self.attrObj:OnRefreshData()
end
function UISeasonGroundManageView:DesertResChange()
    if self.resArr~=nil then
        for k,v in pairs(self.resArr) do
            v:RefreshNum()
        end
    end
    if self.targetIndex == 2 then
        self:RefreshList()
    end 
end
function UISeasonGroundManageView:ResourceChange()
    if self.resArr~=nil then
        for k,v in pairs(self.resArr) do
            v:RefreshNum()
        end
    end
end
function UISeasonGroundManageView:OnRefreshDesertRank()
    self.attrObj:OnRefreshDesertRank()
end
function UISeasonGroundManageView:RefreshList(init)
    --local selectIndex = 0
    --local indexList = table.keys(self.itemCellList)
    --if #indexList>0 then
    --    selectIndex = indexList[#indexList]
    --end
    local needPos = Vector2.New(self.content.rectTransform.anchoredPosition.x ,self.content.rectTransform.anchoredPosition.y)
    self:ClearScroll()
    self.showDatalist = self.ctrl:GetSortDesertDataList(self.targetIndex)
    if self.showDatalist~=nil and  #self.showDatalist > 0 then
        self.ScrollView:SetTotalCount(#self.showDatalist)
        self.ScrollView:RefillCells()
        if init~=nil and init == true then
            
        else
            self.content.rectTransform.anchoredPosition = needPos
        end
        
        --if selectIndex>0 then
        --    self.ScrollView:ScrollToCell(selectIndex,1000000)
        --end
        
        self.empty_txt:SetActive(false)
        local index = nil
        if self.isArrow and self.targetIndex == 1 then
            for i =table.count(self.showDatalist) ,1,-1 do
                if self.showDatalist[i].giveUpTime and self.showDatalist[i].giveUpTime < 1  then
                    index = i
                    break
                end
            end
            self.isArrow = nil
            self.ScrollView:ScrollToCell(index, 5000)
            self.delayTime = TimerManager:GetInstance():DelayInvoke(function()
                local param = {}
                if self.targetIndex == 1 and self.itemCellList[index] then
                    param.position = self.itemCellList[index]:GetDisBtnPos()
                    param.positionType = PositionType.Screen
                    param.isPanel = false
                    param.isAutoClose = 3
                    DataCenter.ArrowManager:ShowArrow(param)
                end
            end, 0.7)
        end
    else
        self.empty_txt:SetActive(true)
    end
end

function UISeasonGroundManageView:DeleteDelayTimer()
    if self.delayTime ~= nil then
        self.delayTime:Stop()
        self.delayTime = nil
    end
end

function UISeasonGroundManageView:OnSelectRefresh()
    self:RefreshList()
end
function UISeasonGroundManageView:OnSelectClick()
    self:DeleteDelayTimer()
    self:SetSelectActive(true)
end

function UISeasonGroundManageView:SetSelectActive(isShow)
    self.selectObj:SetActive(isShow)
    if isShow then
        self.selectObj:RefreshData()
    end
end

function UISeasonGroundManageView:DesertStateChange(data)
    for k,v in pairs(self.itemCellList) do
        v:RefreshDesertData(data)
    end
end

function UISeasonGroundManageView:OnClickInfoBtn()
    self:DeleteDelayTimer()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIDesertForceList)
end

function UISeasonGroundManageView:OnDesClick()
    self:DeleteDelayTimer()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIRankDetailList,{ anim = true, hideTop = true, isBlur = true },RankType.SeasonForce)
end

function UISeasonGroundManageView:DoFlyRes(startPos,gasNum,flintNum)
    if self.resArr~=nil and startPos~=nil then
        if gasNum>=1 and #self.resArr>=1 then
            local gas = self.resArr[1]
            if gas~=nil then
                local pos = gas.icon.gameObject.transform.position
                if pos~=nil then
                    local icon = DataCenter.ResourceManager:GetResourceIconByType(ResourceType.Oil)
                    local num = 4
                    UIUtil.DoFlyCustom(icon, nil, num,startPos, pos)
                end
            end
        end
        if flintNum>=1 and #self.resArr>=2 then
            local flint = self.resArr[2]
            if flint~=nil then
                local pos = flint.icon.gameObject.transform.position
                if pos~=nil then
                    local icon = DataCenter.ResourceManager:GetResourceIconByType(ResourceType.FLINT)
                    local num = 4
                    UIUtil.DoFlyCustom(icon, nil, num,startPos, pos)
                end
            end
        end
    end
end
return UISeasonGroundManageView