---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 24224.
--- DateTime: 2022/12/5 18:04
---
local SeasonGroundItem = BaseClass("SeasonGroundItem", UIBaseContainer)
local base = UIBaseContainer
local Localization = CS.GameEntry.Localization

local ItemState = {
    EMPTY =0,
    PROTECT_GROUND =1,
    DISMISS_GROUND = 2,
    BUILD_FREE = 3,
    BUILD_UPGRADE = 4,
    BUILD_FINISH = 5,
}
-- 创建
function SeasonGroundItem:OnCreate()
    base.OnCreate(self)
    self.icon = self:AddComponent(UIImage,"Bg/ItemIcon")
    self.name = self:AddComponent(UIText,"Bg/name")
    self._pos_txt = self:AddComponent(UIText,"Bg/Text_Pos")
    --self._level_txt = self:AddComponent(UIText,"Bg/Text_level")
    self.pos_btn = self:AddComponent(UIButton,"Bg/pos_btn")
    self.pos_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:GotoPos()
    end)
    self.dismiss_btn = self:AddComponent(UIButton,"Bg/Btn")
    self.dismiss_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnDismissBtnClick()
    end)
    --self.dismiss_txt = self:AddComponent(UIText,"Bg/Btn/btnTxt")
    --self.dismiss_txt:SetText(Localization:GetString("110281"))
    self.build_txt = self:AddComponent(UIText,"Bg/buildDes")
    self.build_txt:SetText("")
    self.finish_obj = self:AddComponent(UIBaseContainer,"Bg/upgradeFinish")
    self.build_success_txt = self:AddComponent(UIText,"Bg/upgradeFinish/successDes")
    self.build_success_txt:SetLocalText(130310)
    self.state_obj = self:AddComponent(UIText,"Bg/state")
    self._state_txt = self:AddComponent(UIText,"Bg/state/stateDes")
    self.slider = self:AddComponent(UISlider,"Bg/Slider")
    self._time_txt = self:AddComponent(UIText,"Bg/Slider/Text_time")
    self.anim = self:AddComponent(UIBaseContainer,"Bg/animObj")
    self.mine_img = self:AddComponent(UIImage,"Bg/mineObj/mineImg")
    self.cancel_btn = self:AddComponent(UIButton,"Bg/Slider/back_btn")
    self.cancel_btn:SetOnClick(function()
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Button)
        self:OnDismissCancelBtnClick()
    end)
    self.timer_action = function(temp)
        self:RefreshTime()
    end
    self.isUpdate = false
    self.anim:SetActive(false)
    self.mine_img:SetActive(false)
    self.state = ItemState.EMPTY
end

-- 销毁
function SeasonGroundItem:OnDestroy()
    self:DeleteTimer()
    self.slider = nil
    base.OnDestroy(self)
end

-- 显示
function SeasonGroundItem:OnEnable()
    base.OnEnable(self)
end

-- 隐藏
function SeasonGroundItem:OnDisable()
    base.OnDisable(self)
end

function SeasonGroundItem:GotoPos()
    if self.data~=nil then
        local name = ""
        if self.data.level>0 then
            name = "Lv."..self.data.level.." "..Localization:GetString(self.data.name)
        else
            name =Localization:GetString("110245")
        end
        local battleFightV2Pt = SceneUtils.IndexToTilePos(self.data.pointId,ForceChangeScene.World)
        local strBattlePt = " (" .. tostring(battleFightV2Pt.x) .. ", " .. tostring(battleFightV2Pt.y) .. ")"
        local str = Localization:GetString("110335",name,strBattlePt)
        local pointIndex = self.data.pointId
        local serverId = self.data.serverId
        local v3 = SceneUtils.TileIndexToWorld(pointIndex,ForceChangeScene.World)
        local pointType = self.pointType
        local canUpgrade = false
        local uuid = self.uuid
        if pointType == WorldPointType.PlayerBuilding then
            canUpgrade = self.data.canUpgrade
        end
        
        UIUtil.ShowMessage(str,2,"","",function()
            GoToUtil.CloseAllWindows()
            if pointType == WorldPointType.PlayerBuilding and canUpgrade ==true then
                GoToUtil.GotoCityByBuildUuid(uuid,WorldTileBtnType.City_Upgrade)
            else
                GoToUtil.GotoWorldPos(v3,nil,nil,function ()
                    if pointType == WorldPointType.Other then
                        UIUtil.OnClickWorld(pointIndex, ClickWorldType.Collider)
                    else
                        WorldArrowManager:GetInstance():ShowArrowEffect(0,v3,ArrowType.Building)
                    end
                end,serverId)
            end
            
        end, function()
        end)
    end
end

function SeasonGroundItem:OnDismissBtnClick()
    if self.data~=nil and self.uuid~=nil and self.uuid~=0 then
        if self.pointType == WorldPointType.Other then

            if self.data.buildName~=nil then
                local str = Localization:GetString("111190",Localization:GetString(self.data.buildName))
                UIUtil.ShowTips(str)
                return
            end
            local serverId = self.data.serverId
            local showFlag = Setting:GetPrivateInt("SHOW_GiveUpWarning", 0)
            if showFlag<=0 then
                local name = ""
                if self.data.level>0 then
                    name = "Lv."..self.data.level.." "..Localization:GetString(self.data.name)
                else
                    name =Localization:GetString("110245")
                end
                local battleFightV2Pt = SceneUtils.IndexToTilePos(self.data.pointId,ForceChangeScene.World)
                local strBattlePt = " (" .. tostring(battleFightV2Pt.x) .. ", " .. tostring(battleFightV2Pt.y) .. ")"
                local str = Localization:GetString("110239",name,strBattlePt)
                local uuid = self.uuid
                UIUtil.ShowSecondMessage(Localization:GetString("100378"), str, 2, "", "", function()
                    SFSNetwork.SendMessage(MsgDefines.UserGiveUpDesert,uuid,serverId)
                end, function(needSellConfirm)
                    if needSellConfirm== false then
                        Setting:SetPrivateInt("SHOW_GiveUpWarning",1)
                    else
                        Setting:SetPrivateInt("SHOW_GiveUpWarning",0)
                    end
                end)
            else
                SFSNetwork.SendMessage(MsgDefines.UserGiveUpDesert,self.uuid,serverId)
            end
        elseif self.pointType == WorldPointType.PlayerBuilding then
            local showFlag = Setting:GetPrivateInt("SHOW_GiveUpBuildWarning", 0)
            if showFlag<=0 then
                local uuid = self.uuid
                local str = Localization:GetString("110441")
                UIUtil.ShowSecondMessage(Localization:GetString("100378"), str, 2, "", "", function()
                    SFSNetwork.SendMessage(MsgDefines.FreeBuildingFoldUpNew,{buildUuid = uuid})
                end, function(needSellConfirm)
                    if needSellConfirm== false then
                        Setting:SetPrivateInt("SHOW_GiveUpBuildWarning",1)
                    else
                        Setting:SetPrivateInt("SHOW_GiveUpBuildWarning",0)
                    end
                end)
            else
                SFSNetwork.SendMessage(MsgDefines.FreeBuildingFoldUpNew,{buildUuid = self.uuid})
            end
            
            
        end
    end
end


function SeasonGroundItem:OnDismissCancelBtnClick()
    if self.uuid~=nil and self.uuid~=0 and self.data~=nil then
        local serverId = self.data.serverId
        SFSNetwork.SendMessage(MsgDefines.UserCancelGiveUpDesert,self.uuid,serverId)
        self.data.giveUpEndTime = 0
        self.endTime = 0
        self:RefreshTime()
    end
end
function SeasonGroundItem:SetItemShow(param)
    if param~=nil then
        self.uuid = param.uuid
        self.pointType = param.pointType
        self.build_txt:SetText("")
        if self.pointType == WorldPointType.Other then
            self.data =self.view.ctrl:GetDesertData(self.uuid)
        elseif self.pointType == WorldPointType.PlayerBuilding then
            self.data =self.view.ctrl:GetSeasonBuildData(self.uuid)
        end
        if self.data~=nil then
            local name = ""
            if self.pointType == WorldPointType.Other then
                if self.data.level>0 then
                    name = "Lv."..self.data.level.." "..Localization:GetString(self.data.name)
                else
                    name = Localization:GetString("110245")
                end
                local myServerId = LuaEntry.Player:GetSelfServerId()
                if self.data.serverId~=myServerId and self.data.serverId~=nil and self.data.serverId>0 then
                    name = "#"..self.data.serverId.." "..name
                end
                if self.data.buildName~=nil then
                    self.build_txt:SetText(Localization:GetString("111191",Localization:GetString(self.data.buildName)))
                end
                if self.data.mineId~=nil and self.data.mineId>0 then
                    self.mine_img:SetActive(true)
                    local path = string.format(LoadPath.CommonNewPath, "Common_icon_bomb")
                    if self.data.mineId == MineIdEnum.LandmineBig then
                        path = string.format(LoadPath.CommonNewPath, "Common_icon_bomb_s")
                    end
                    self.mine_img:LoadSprite(path)
                else
                    self.mine_img:SetActive(false)
                end
            else
                if self.data.level>0 then
                    name = "Lv."..self.data.level.." "..Localization:GetString(self.data.name)
                else
                    name = Localization:GetString(self.data.name)
                end
                local desertName = ""
                if self.data.desertLevel>0 then
                    desertName = "Lv."..self.data.desertLevel.." "..Localization:GetString(self.data.desertName)
                else
                    desertName =Localization:GetString("110245")
                end
                self.build_txt:SetText(Localization:GetString("110452",desertName))
            end
            self.icon:LoadSprite(self.data.pic)
            self.name:SetText(name)
            --self._level_txt:SetText("Lv."..self.data.level)
            local battleFightV2Pt = SceneUtils.IndexToTilePos(self.data.pointId,ForceChangeScene.World)
            local strBattlePt = tostring(battleFightV2Pt.x) .. "," .. tostring(battleFightV2Pt.y)
            self._pos_txt:SetText(strBattlePt)
        end
        self:RefreshState()
    end
    
end

function SeasonGroundItem:RefreshDesertData(uuid)
    if self.uuid == uuid then
        if self.pointType == WorldPointType.Other then
            self.data =self.view.ctrl:GetDesertData(self.uuid)
        elseif self.pointType == WorldPointType.PlayerBuilding then
            self.data =self.view.ctrl:GetSeasonBuildData(self.uuid)
        end
        self:RefreshState()
    end
end

function SeasonGroundItem:RefreshState()
    self.state = ItemState.EMPTY
    local canUpgrade = false
    self.isUpdate = false
    if self.data~=nil  and self.pointType == WorldPointType.Other then
        local protectEndTime = self.data.protectEndTime
        local giveUpEndTime = self.data.giveUpEndTime
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if giveUpEndTime>curTime then
            self.state = ItemState.DISMISS_GROUND
            self.endTime = giveUpEndTime
            self.startTime = giveUpEndTime-(self.data.giveUpDeltaTime*1000)
        elseif curTime < protectEndTime then
            self.state = ItemState.PROTECT_GROUND
            self.endTime = protectEndTime
            self.startTime = giveUpEndTime-(self.data.protectDeltaTime*1000)
        end
    elseif self.data~=nil and self.pointType == WorldPointType.PlayerBuilding then
        self.state = ItemState.BUILD_FREE
        local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(self.uuid)
        if buildData~=nil and buildData:IsUpgradeFinish()== true then
            self.state = ItemState.BUILD_FINISH
        elseif buildData~=nil and buildData:IsUpgrading() == true then
            self.state = ItemState.BUILD_UPGRADE
            self.endTime = buildData.updateTime
            self.startTime = buildData.startTime
        else
            if self.data.canUpgrade == true then
                canUpgrade = true
            end
        end
        self.build_txt:SetActive(self.state ~=ItemState.BUILD_UPGRADE)
    end
    self.finish_obj:SetActive(self.state ==ItemState.BUILD_FINISH)
    self.icon:SetActive(self.state ~=ItemState.BUILD_FINISH)
    self.anim:SetActive(canUpgrade == true)
    if self.state == ItemState.DISMISS_GROUND or self.state == ItemState.PROTECT_GROUND then
        self.dismiss_btn:SetActive(false)
        self.slider:SetActive(true)
        self.state_obj:SetActive(true)
        self.build_txt:SetActive(false)
        if self.state == ItemState.DISMISS_GROUND then
            self._state_txt:SetText(Localization:GetString("110289"))
            self.cancel_btn:SetActive(true)
        elseif self.state == ItemState.PROTECT_GROUND then
            self._state_txt:SetText(Localization:GetString("110290"))
            self.cancel_btn:SetActive(false)
            self.dismiss_btn:SetActive(true)
        end
        self.isUpdate = true
        self:AddTimer()
        self:RefreshTime()
    elseif self.state == ItemState.BUILD_UPGRADE then
        self.dismiss_btn:SetActive(false)
        self.slider:SetActive(true)
        self.state_obj:SetActive(true)
        self.cancel_btn:SetActive(false)
        self._state_txt:SetText(Localization:GetString("130073"))
        self.isUpdate = true
        self:AddTimer()
        self:RefreshTime()
    else
        self:DeleteTimer()
        self.state_obj:SetActive(false)
        self.slider:SetActive(false)
        if self.state ==ItemState.EMPTY then
            self.dismiss_btn:SetActive(true)
            self.build_txt:SetActive(true)
            --self.dismiss_txt:SetText(Localization:GetString("110281"))
        elseif self.state == ItemState.BUILD_FREE then
            self.dismiss_btn:SetActive(true)
            --self.dismiss_txt:SetText(Localization:GetString("110440"))
        elseif self.state == ItemState.BUILD_FINISH then
            self.dismiss_btn:SetActive(false)
        end
    end
end

function SeasonGroundItem:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
        self.timer:Start()
    end
end

function SeasonGroundItem:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end
function SeasonGroundItem:UpdateSlider()
    local totalTime = self.endTime-self.startTime
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local deltaTime = self.endTime - curTime
    local tempValue = 1 - math.min(1,(deltaTime/totalTime))
    self.slider:SetValue(tempValue)
    self._time_txt:SetText(UITimeManager:GetInstance():MilliSecondToFmtString(deltaTime))
    return deltaTime<0
end
function SeasonGroundItem:RefreshTime()
    if self.isUpdate ==true then
        local needChange = self:UpdateSlider()
        if needChange == true then
            self:RefreshState()
        end
    end
end


function SeasonGroundItem:GetDisBtnPos()
    return self.dismiss_btn.transform.position
end

return SeasonGroundItem