---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/23 17:40
---

---
--- 通用选英雄滑窗
---

local UISelectHero = BaseClass("UISelectHero", UIBaseView)
local base = UIBaseView
local UISelectHeroItem = require "UI.UISelectHero.Component.UISelectHeroItem"
local Localization = CS.GameEntry.Localization

local close_path = "Close"
local panel_path = "SafeArea/Panel"
local title_path = "SafeArea/Panel/Title"
local scroll_view_path = "SafeArea/Panel/ScrollView"
local back_path = "SafeArea/Panel/Back"
local confirm_btn_path = "SafeArea/Panel/Confirm"
local confirm_text_path = "SafeArea/Panel/Confirm/ConfirmText"

local PANEL_X = 140
local PANEL_Y = 0
local PANEL_DURATION = 0.2

local function OnCreate(self)
    base.OnCreate(self)
    self:DataDefine()
    self:ComponentDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function ComponentDefine(self)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self:Hide()
    end)
    self.panel_go = self:AddComponent(UIBaseContainer, panel_path)
    self.title_text = self:AddComponent(UIText, title_path)
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateItem(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteItem(itemObj, index)
    end)
    self.back_btn = self:AddComponent(UIButton, back_path)
    self.back_btn:SetOnClick(function()
        self:Hide()
    end)
    self.confirm_btn = self:AddComponent(UIButton, confirm_btn_path)
    self.confirm_btn:SetOnClick(function()
        self:Confirm()
    end)
    self.confirm_text = self:AddComponent(UIText, confirm_text_path)
    self.confirm_text:SetLocalText(110006)
end

local function ComponentDestroy(self)
    self.close_btn = nil
    self.panel_go = nil
    self.title_text = nil
    self.scroll_view = nil
    self.back_btn = nil
    self.confirm_btn = nil
    self.confirm_text = nil
end

local function DataDefine(self)
    self.param = nil
    self.heroUuids = {} -- List<heroUuid>
    self.selectHeroUuids = {} -- List<heroUuid>
    self.alwaysHeroUuids = {} -- List<heroUuid>
    self.itemDict = {} -- Dict<heroUuid, UISelectHeroItem>
    self.tween = nil
end

local function DataDestroy(self)
    self.param = nil
    self.heroUuids = nil
    self.selectHeroUuids = nil
    self.alwaysHeroUuids = nil
    self.itemDict = nil
    if self.tween then
        self.tween:Kill()
        self.tween = nil
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    local param = self:GetUserData()
    self:ReInit(param)
    self.panel_go.rectTransform:Set_anchoredPosition(-PANEL_X, PANEL_Y)
    self:Show()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.CloseSelectHero, self.Hide)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.CloseSelectHero, self.Hide)
    base.OnRemoveListener(self)
end

local function OnCreateItem(self, itemObj, index)
    itemObj.name = tostring(index)
    local heroUuid = self.heroUuids[index]
    local item = self.scroll_view:AddComponent(UISelectHeroItem, itemObj)
    item:SetData(heroUuid)
    item:SetOnClick(function()
        self:OnItemClick(heroUuid)
    end)
    self.itemDict[heroUuid] = item
    self:RefreshItem(heroUuid)
end

local function OnDeleteItem(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UISelectHeroItem)
    local heroUuid = self.heroUuids[index]
    self.itemDict[heroUuid] = nil
end

local function ShowScroll(self)
    self.scroll_view:SetTotalCount(#self.heroUuids)
    if #self.heroUuids > 0 then
        self.scroll_view:RefillCells()
    end
end

local function ClearScroll(self)
    self.scroll_view:ClearItems()
    self.scroll_view:RemoveComponents(UISelectHeroItem)
end

-- param: {}
-- titleText: string 标题文本
-- heroUuids: List<heroUuid> 可选英雄uuid
-- selectHeroUuids: List<heroUuid> 已选英雄uuid
-- alwaysHeroUuids: List<heroUuid> 无视 noDefendingCity, noDefending 一直可选的英雄uuid
-- maxHeroCount: int 最大英雄数量
-- noMarching: bool 不可以选择已出征英雄
-- noDefendingCity: bool 不可以选择防守大本的英雄
-- noDefendingCrossWorm: bool 不可以选择防守跨服虫洞的英雄
-- onSelect: function(List<heroUuid>) 选择英雄时回调
-- onHide: function(List<heroUuid>) 关闭时回调
-- onConfirm: function(List<heroUuid>) 确定时回调
-- noHideWhenConfirm: bool 确定时不关闭
local function ReInit(self, param)
    self.param = param
    self.title_text:SetText(self.param.titleText or Localization:GetString("300539"))
    self.heroUuids = param.heroUuids or {}
    self.selectHeroUuids = param.selectHeroUuids or {}
    self.alwaysHeroUuids = param.alwaysHeroUuids or {}
    self.maxHeroCount = param.maxHeroCount or 5
    self:ShowScroll()
end

local function RefreshItem(self, heroUuid)
    local item = self.itemDict[heroUuid]
    if item then
        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
        if table.hasvalue(self.selectHeroUuids, heroUuid) then
            item:SetSelected(true)
        else
            item:SetSelected(false)
            if not table.hasvalue(self.alwaysHeroUuids, heroUuid) then
                if self.param.noMarching then
                    item:SetMarching(heroData:IsInMarch())
                end
                if self.param.noDefendingCity then
                    item:SetDefendingCity(HeroUtils.IsInCityDefence(heroUuid))
                end
                if self.param.noDefendingCrossWorm then
                    item:SetDefendingCrossWorm(HeroUtils.IsInCrossWormDefence(heroUuid))
                end
            end
        end
    end
end

local function Show(self)
    if self.tween then
        self.tween:Kill()
    end
    self.tween = self.panel_go.rectTransform:DOAnchorPosX(PANEL_X, PANEL_DURATION)
end

local function Hide(self)
    if self.tween then
        self.tween:Kill()
    end
    self.tween = self.panel_go.rectTransform:DOAnchorPosX(-PANEL_X, PANEL_DURATION):OnComplete(function()
        self.ctrl:CloseSelf()
    end)
    if self.param.onHide then
        self.param.onHide(self.selectHeroUuids)
    end
end

local function Confirm(self)
    if self.param.onConfirm then
        self.param.onConfirm(self.selectHeroUuids)
    end
    if not self.param.noHideWhenConfirm then
        self:Hide()
    end
end

local function OnItemClick(self, heroUuid)
    if table.hasvalue(self.selectHeroUuids, heroUuid) then
        table.removebyvalue(self.selectHeroUuids, heroUuid)
    else
        if #self.selectHeroUuids < self.maxHeroCount then
            table.insert(self.selectHeroUuids, heroUuid)
        end
    end
    self:RefreshItem(heroUuid)
    if self.param.onSelect then
        self.param.onSelect(self.selectHeroUuids)
    end
end

UISelectHero.OnCreate = OnCreate
UISelectHero.OnDestroy = OnDestroy
UISelectHero.ComponentDefine = ComponentDefine
UISelectHero.ComponentDestroy = ComponentDestroy
UISelectHero.DataDefine = DataDefine
UISelectHero.DataDestroy = DataDestroy
UISelectHero.OnEnable = OnEnable
UISelectHero.OnDisable = OnDisable
UISelectHero.OnAddListener = OnAddListener
UISelectHero.OnRemoveListener = OnRemoveListener

UISelectHero.OnCreateItem = OnCreateItem
UISelectHero.OnDeleteItem = OnDeleteItem
UISelectHero.ShowScroll = ShowScroll
UISelectHero.ClearScroll = ClearScroll

UISelectHero.ReInit = ReInit
UISelectHero.RefreshItem = RefreshItem
UISelectHero.Show = Show
UISelectHero.Hide = Hide
UISelectHero.Confirm = Confirm

UISelectHero.OnItemClick = OnItemClick

return UISelectHero