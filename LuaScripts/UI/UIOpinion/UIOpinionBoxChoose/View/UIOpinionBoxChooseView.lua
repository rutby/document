---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/10 10:17
---

local UIOpinionBoxChoose = BaseClass("UIOpinionBoxChoose", UIBaseView)
local base = UIBaseView
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local UIVitaResidentItem = require "UI.UIVita.Component.UIVitaResidentItem"
local Localization = CS.GameEntry.Localization
local UIGray = CS.UIGray

local black_path = "UICommonPanel"
local close_path = "Close"
local title_path = "Title"
local desc_path = "Desc"

local letter_path = "Letter"
local letter_item_path = "Letter/LetterItem"
local btn_path = "Letter/BtnList/Btn%s"
local btn_text_path = "Letter/BtnList/Btn%s/Btn%sText"
local btn_check_path = "Letter/BtnList/Btn%s/Btn%sCheck"

local reply_path = "Reply"
local reply_item_path = "Reply/ReplyItem"
local reply_desc_path = "Reply/ReplyDesc"
local item_path = "Reply/ItemList/Item_%s"
local back_path = "Reply/Back"
local back_text_path = "Reply/Back/BackText"

 local selectSprite = "Assets/Main/Sprites/UI/UIOpinion/winter_text.png"
 local UnselectSprite = "Assets/Main/Sprites/UI/UIOpinion/winter_text_weixuan.png"

local BtnCount = 2
local ItemCount = 7

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:ComponentDestroy()
    self:DataDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    -- Common
    self.black_btn = self:AddComponent(UIButton, black_path)
    self.black_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title_text:SetLocalText(137069)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    
    -- Letter
    self.letter_go = self:AddComponent(UIBaseContainer, letter_path)
    self.letter_item = self:AddComponent(UIVitaResidentItem, letter_item_path)
    self.btns = {}
    self.btn_texts = {}
    self.btn_check_goes = {}
    for i = 1, BtnCount do
        self.btns[i] = self:AddComponent(UIButton, string.format(btn_path, i))
        self.btns[i]:SetOnClick(function()
            self:OnBtnClick(i)
        end)
        self.btn_texts[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(btn_text_path, i, i))
        self.btn_check_goes[i] = self:AddComponent(UIImage, string.format(btn_check_path, i, i))
    end
    
    -- Reply
    self.reply_go = self:AddComponent(UIBaseContainer, reply_path)
    self.reply_item = self:AddComponent(UIVitaResidentItem, reply_item_path)
    self.reply_desc_text = self:AddComponent(UITextMeshProUGUIEx, reply_desc_path)
    self.items = {}
    for i = 1, ItemCount do
        self.items[i] = self:AddComponent(UICommonItem, string.format(item_path, i))
    end
    self.back_btn = self:AddComponent(UIButton, back_path)
    self.back_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.back_text = self:AddComponent(UITextMeshProUGUIEx, back_text_path)
    self.back_text:SetLocalText(110006)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.data = nil
end

local function DataDestroy(self)
    
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OpinionChooseMail, self.OnChooseMail)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OpinionChooseMail, self.OnChooseMail)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self.data = self:GetUserData()
    self:Refresh(false)
end

local function Refresh(self, isReply)
    local line = LocalController:instance():getLine(TableName.OpinionMail, self.data.mailId)
    local backDescs = string.split(line.back, ";")
    local chooseDescs = string.split(line.choose, ";")
    local satisfactions = string.split(line.opinion, ";")
    
    if isReply then
        self.letter_go:SetActive(false)
        self.reply_go:SetActive(true)
        local satisfaction = tonumber(satisfactions[self.data.choose]) or 0
        self.desc_text:SetLocalText(backDescs[self.data.choose])
        self.reply_item:SetData(self.data.residentId)
        self.rewards = DataCenter.RewardManager:ReturnRewardParamForView(DataCenter.OpinionManager.chooseReward) or {}
        local satStr = (satisfaction > 0 and "+" or "") .. tostring(satisfaction)
        local descStr = Localization:GetString("137070", satStr)
        self.reply_desc_text:SetText(descStr)
        for i = 1, ItemCount do
            if i <= #self.rewards then
                self.items[i]:SetActive(true)
                self.items[i]:ReInit(self.rewards[i])
                
                local icon = DataCenter.RewardManager:GetPicByType(RewardType.GOODS, self.rewards[i].itemId)
                UIUtil.DoFlyCustom(icon, nil, 1, self.items[i].transform.position, UIUtil.GetUIMainSavePos(UIMainSavePosType.Goods))
            else
                self.items[i]:SetActive(false)
            end
        end
    else
        self.letter_go:SetActive(true)
        self.reply_go:SetActive(false)
        self.desc_text:SetLocalText(line.dialog)
        self.letter_item:SetData(self.data.residentId)
        for i = 1, BtnCount do
            if i <= #chooseDescs then
                self.btns[i]:SetActive(true)
                self.btn_texts[i]:SetLocalText(chooseDescs[i])
                --self.btn_check_goes[i]:SetActive(self.data.choose == i)
                self.btn_check_goes[i]:LoadSprite(self.data.choose == i and selectSprite or UnselectSprite)
                if self.data.choose == 0 then
                    UIGray.SetGray(self.btns[i].transform, false, true)
                else
                    UIGray.SetGray(self.btns[i].transform, true, false)
                    UIGray.SetGray(self.btn_check_goes[i].transform, false, false)
                end
            else
                self.btns[i]:SetActive(false)
            end
        end
    end
end

local function OnBtnClick(self, index)
    DataCenter.OpinionManager:SendChooseMail(self.data.uuid, index)
end

local function OnChooseMail(self)
    self:Refresh(true)
end

UIOpinionBoxChoose.OnCreate = OnCreate
UIOpinionBoxChoose.OnDestroy = OnDestroy
UIOpinionBoxChoose.OnEnable = OnEnable
UIOpinionBoxChoose.OnDisable = OnDisable
UIOpinionBoxChoose.ComponentDefine = ComponentDefine
UIOpinionBoxChoose.ComponentDestroy = ComponentDestroy
UIOpinionBoxChoose.DataDefine = DataDefine
UIOpinionBoxChoose.DataDestroy = DataDestroy
UIOpinionBoxChoose.OnAddListener = OnAddListener
UIOpinionBoxChoose.OnRemoveListener = OnRemoveListener

UIOpinionBoxChoose.ReInit = ReInit
UIOpinionBoxChoose.Refresh = Refresh
UIOpinionBoxChoose.OnBtnClick = OnBtnClick
UIOpinionBoxChoose.OnChooseMail = OnChooseMail

return UIOpinionBoxChoose