---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/6 16:52
---

local UIOpinionBox = BaseClass("UIOpinionBox", UIBaseView)
local base = UIBaseView
local UIOpinionBoxTalkPanel = require "UI.UIOpinion.UIOpinionBox.Component.UIOpinionBoxTalkPanel"
local UIOpinionBoxMailPanel = require "UI.UIOpinion.UIOpinionBox.Component.UIOpinionBoxMailPanel"
local UICommonTab = require "UI.UICommonTab.UICommonTab"
local Localization = CS.GameEntry.Localization

--local black_path = "Black"
local title_path = "UICommonFullTop/imgTitle/Common_img_title/titleText"
local close_path = "UICommonFullTop/CloseBtn"
local tab1_path = "UICommonFullTop/Bg2/TabListUp/Tab1"
local tab2_path = "UICommonFullTop/Bg2/TabListUp/Tab2"
local off_mail_red_path = "UICommonFullTop/Bg2/TabListUp/Tab2/Off/OffMailRed"
local on_mail_red_path = "UICommonFullTop/Bg2/TabListUp/Tab2/On/OnMailRed"
local slider_path = "UICommonFullTop/Bg2/Slider"
local satisfaction_path = "UICommonFullTop/Bg2/Satisfaction"
local satisfaction_desc_path = "UICommonFullTop/Bg2/SatisfactionDesc"
local record_path = "UICommonFullTop/Bg2/Record"
local record_text_path = "UICommonFullTop/Bg2/Record/RecordText"
local talk_panel_path = "UICommonFullTop/Bg2/TalkPanel"
local mail_panel_path = "UICommonFullTop/Bg2/MailPanel"

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    -- self.black_btn = self:AddComponent(UIButton, black_path)
    -- self.black_btn:SetOnClick(function()
    --     self.ctrl:CloseSelf()
    -- end)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title_text:SetLocalText(137037)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.tab1 = self:AddComponent(UICommonTab, tab1_path)
    self.tab1:SetName(Localization:GetString("137038"))
    self.tab1:SetSelected(false)
    self.tab1:SetOnClick(function()
        self:OnTab1Click()
    end)
    self.tab2 = self:AddComponent(UICommonTab, tab2_path)
    self.tab2:SetName(Localization:GetString("137039"))
    self.tab2:SetSelected(false)
    self.tab2:SetOnClick(function()
        self:OnTab2Click()
    end)
    self.off_mail_red_go = self:AddComponent(UIBaseContainer, off_mail_red_path)
    self.on_mail_red_go = self:AddComponent(UIBaseContainer, on_mail_red_path)
    self.slider = self:AddComponent(UISlider, slider_path)
    self.satisfaction_text = self:AddComponent(UITextMeshProUGUIEx, satisfaction_path)
    self.satisfaction_desc_text = self:AddComponent(UITextMeshProUGUIEx, satisfaction_desc_path)
    self.satisfaction_desc_text:SetLocalText(450063)
    self.record_btn = self:AddComponent(UIButton, record_path)
    self.record_btn:SetOnClick(function()
        self:OnRecordClick()
    end)
    self.record_text = self:AddComponent(UITextMeshProUGUIEx, record_text_path)
    self.record_text:SetLocalText(131004)
    self.talk_panel = self:AddComponent(UIOpinionBoxTalkPanel, talk_panel_path)
    self.mail_panel = self:AddComponent(UIOpinionBoxMailPanel, mail_panel_path)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.data = nil
end

local function DataDestroy(self)
    
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OpinionChooseMail, self.Refresh)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OpinionChooseMail, self.Refresh)
    base.OnRemoveListener(self)
end

local function ReInit(self)
    self:Refresh()
    self:OnTab1Click()
end

local function Refresh(self)
    self.data = DataCenter.OpinionManager:GetData()
    local satisfaction = self.data:GetSatisfaction()
    self.slider:SetValue(1 - satisfaction / 100)
    self.satisfaction_text:SetText(satisfaction .. "%")
    self:RefreshMailRed()
end

local function RefreshMailRed(self)
    local showRed = DataCenter.OpinionManager:HasMailRed()
    self.off_mail_red_go:SetActive(showRed)
    self.on_mail_red_go:SetActive(showRed)
end

local function OnTab1Click(self)
    self.tab1:SetSelected(true)
    self.tab2:SetSelected(false)
    self.talk_panel:SetActive(true)
    self.talk_panel:Refresh()
    self.mail_panel:SetActive(false)
end

local function OnTab2Click(self)
    self.tab1:SetSelected(false)
    self.tab2:SetSelected(true)
    self.talk_panel:SetActive(false)
    self.mail_panel:SetActive(true)
    self.mail_panel:Refresh()
end

local function OnMailClick(self, data)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIOpinionBoxChoose, { anim = true ,isBlur = true}, data)
end

local function OnRecordClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIOpinionRecord,{ anim = true,isBlur = true })
end

UIOpinionBox.OnCreate = OnCreate
UIOpinionBox.OnDestroy = OnDestroy
UIOpinionBox.OnEnable = OnEnable
UIOpinionBox.OnDisable = OnDisable
UIOpinionBox.ComponentDefine = ComponentDefine
UIOpinionBox.ComponentDestroy = ComponentDestroy
UIOpinionBox.DataDefine = DataDefine
UIOpinionBox.DataDestroy = DataDestroy
UIOpinionBox.OnAddListener = OnAddListener
UIOpinionBox.OnRemoveListener = OnRemoveListener

UIOpinionBox.ReInit = ReInit
UIOpinionBox.Refresh = Refresh
UIOpinionBox.RefreshMailRed = RefreshMailRed
UIOpinionBox.OnTab1Click = OnTab1Click
UIOpinionBox.OnTab2Click = OnTab2Click
UIOpinionBox.OnMailClick = OnMailClick
UIOpinionBox.OnRecordClick = OnRecordClick

return UIOpinionBox