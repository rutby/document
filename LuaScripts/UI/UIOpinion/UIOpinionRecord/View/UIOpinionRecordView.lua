---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/6 17:43
---

local UIOpinionRecord = BaseClass("UIOpinionRecord", UIBaseView)
local base = UIBaseView
local UICommonTab = require "UI.UICommonTab.UICommonTab"
local UICommonItem = require "UI.UICommonItem.UICommonItem"
local Localization = CS.GameEntry.Localization

local black_path = "UICommonPanel"
local close_path = "Close"
local title_path = "Title"
local info_path = "Info"
local desc_path = "Desc"
local line_path = "Form/lineLayout/Line%s"
local face_path = "Form/faceLayout/Face%s"
local sat_path = "Form/satLayout/Sat%s"
local date_desc_path = "Form/DateDesc"
local date_path = "Form/Date%s"
local slider_path = "Form/Slider%s"
local val_path = "Form/Slider%s/FillArea/Fill/Val%s"
local arrow_path = "Arrow"
local tab_path = "TabList/Tab%s"
local scroll_view_path = "ScrollView"
local tip_path = "Tip"

local DateCount = 3
local GradeCount = 5
local Grades = { 90, 70, 50, 30, 10 }
local ColorGray = Color.New(0.6431373, 0.5490196, 0.4470589)
local ColorYellow = Color.New(0.5803922, 0.3411765, 0.1803922)

local function OnCreate(self)
    base.OnCreate(self)
    self:ComponentDefine()
    self:DataDefine()
end

local function OnDestroy(self)
    self:DataDestroy()
    self:ComponentDestroy()
    base.OnDestroy(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self:ReInit()
end

local function OnDisable(self)
    base.OnDisable(self)
end

local function ComponentDefine(self)
    self.black_btn = self:AddComponent(UIButton, black_path)
    self.black_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.close_btn = self:AddComponent(UIButton, close_path)
    self.close_btn:SetOnClick(function()
        self.ctrl:CloseSelf()
    end)
    self.title_text = self:AddComponent(UITextMeshProUGUIEx, title_path)
    self.title_text:SetLocalText(137066)
    self.info_btn = self:AddComponent(UIButton, info_path)
    self.info_btn:SetOnClick(function()
        self:OnInfoClick()
    end)
    self.desc_text = self:AddComponent(UITextMeshProUGUIEx, desc_path)
    self.date_desc_text = self:AddComponent(UITextMeshProUGUIEx, date_desc_path)
    self.date_desc_text:SetLocalText(361016)
    self.arrow_go = self:AddComponent(UIBaseContainer, arrow_path)
    self.tip_text = self:AddComponent(UITextMeshProUGUIEx, tip_path)
    self.tip_text:SetLocalText(137068)
    
    self.line_images = {}
    self.face_images = {}
    self.sat_texts = {}
    self.tabs = {}
    for i = 1, GradeCount do
        self.line_images[i] = self:AddComponent(UIImage, string.format(line_path, i))
        self.face_images[i] = self:AddComponent(UIImage, string.format(face_path, i))
        self.sat_texts[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(sat_path, i))
        self.tabs[i] = self:AddComponent(UICommonTab, string.format(tab_path, i))
        self.tabs[i]:SetSelected(false)
        self.tabs[i]:SetOnClick(function()
            self:OnTabClick(i)
        end)
    end
    
    self.date_texts = {}
    self.sliders = {}
    self.val_texts = {}
    for i = 1, DateCount do
        self.date_texts[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(date_path, i))
        self.sliders[i] = self:AddComponent(UISlider, string.format(slider_path, i))
        self.val_texts[i] = self:AddComponent(UITextMeshProUGUIEx, string.format(val_path, i, i))
    end
    
    self.scroll_view = self:AddComponent(UIScrollView, scroll_view_path)
    self.scroll_view:SetOnItemMoveIn(function(itemObj, index)
        self:OnCreateCell(itemObj, index)
    end)
    self.scroll_view:SetOnItemMoveOut(function(itemObj, index)
        self:OnDeleteCell(itemObj, index)
    end)
end

local function ComponentDestroy(self)
    
end

local function DataDefine(self)
    self.curGrade = 0
    self.index = 0
    self.history = nil
    self.items = {}
    self.rewards = {}
    self.endTime = 0
    self.timer = TimerManager:GetInstance():GetTimer(0.5, self.TimerAction, self, false, false, false)
    self.timer:Start()
end

local function DataDestroy(self)
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(EventId.OpinionGetHistory, self.OnGetHistory)
end

local function OnRemoveListener(self)
    self:RemoveUIListener(EventId.OpinionGetHistory, self.OnGetHistory)
    base.OnRemoveListener(self)
end

local function OnCreateCell(self, itemObj, index)
    itemObj.name = tostring(index)
    local item = self.scroll_view:AddComponent(UICommonItem, itemObj)
    item:ReInit(self.rewards[index])
    self.items[index] = item
end

local function OnDeleteCell(self, itemObj, index)
    self.scroll_view:RemoveComponent(itemObj.name, UICommonItem)
    self.items[index] = nil
end

local function ShowScroll(self)
    local count = #self.rewards
    if count > 0 then
        self.scroll_view:SetActive(true)
        self.scroll_view:SetTotalCount(count)
        self.scroll_view:RefillCells()
    else
        self.scroll_view:SetActive(false)
    end
end

local function ReInit(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local zeroTime = UITimeManager:GetInstance():GetTodayZeroServerTime(curTime / 1000) * 1000
    self.endTime = zeroTime + 86400000
    
    self.history = DataCenter.OpinionManager:GetHistory()
    self.curGrade = self:GetCurGrade()
    self:Refresh()
    self:TimerAction()
    DataCenter.OpinionManager:SendGetHistory()
end

local function Refresh(self)
    if self.history == nil then
        return
    end

    table.sort(self.history.records, function(recordA, recordB)
        return recordA.time > recordB.time
    end)
    for i = 1, DateCount do
        if i <= #self.history.records then
            self.date_texts[i]:SetActive(true)
            self.sliders[i]:SetActive(true)
            local record = self.history.records[i]
            local _, m, d = UITimeManager:GetInstance():TimeStampToDayTbForLocal(record.time)
            if i == 1 then
                self.date_texts[i]:SetLocalText(302008)
            else
                self.date_texts[i]:SetText(string.format("%d.%d", m, d))
            end
            self.sliders[i]:SetValue(record.satisfaction / 100)
            self.val_texts[i]:SetText(record.satisfaction .. "%")
        else
            self.date_texts[i]:SetActive(false)
            self.sliders[i]:SetActive(false)
        end
    end
    if self.curGrade > 0 then
        local pos = self.arrow_go.transform.position
        pos.x = self.tabs[self.curGrade].transform.position.x
        self.arrow_go.transform.position = pos
    end
    for i = 1, GradeCount do
        if i == self.curGrade then
            self.line_images[i]:LoadSprite(string.format(LoadPath.UIOpinion, "winter_line_03"))
            self.face_images[i]:SetAlpha(1)
            self.sat_texts[i]:SetColor(ColorYellow)
        else
            self.line_images[i]:LoadSprite(string.format(LoadPath.UIOpinion, "winter_line_01"))
            self.face_images[i]:SetAlpha(0.3)
            self.sat_texts[i]:SetColor(ColorGray)
        end
    end
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local restTime = self.endTime - curTime
    if restTime > 0 then
        local restTimeStr = UITimeManager:GetInstance():MilliSecondToFmtString(restTime)
        self.desc_text:SetLocalText(450064, restTimeStr)
    else
        self:Refresh()
        self.endTime = self.endTime + 86400000
    end
end

local function RefreshRewards(self)
    if self.history == nil then
        return
    end

    self.rewards = {}
    for i, v in ipairs(self.history.rewardArr) do
        if i == GradeCount - self.index + 1 then -- reverse
            self.rewards = DataCenter.RewardManager:ReturnRewardParamForView(v.reward) or {}
            break
        end
    end
    self:ShowScroll()
end

local function GetCurGrade(self)
    if self.history == nil or table.IsNullOrEmpty(self.history.records) then
        return 0
    end

    local curRecord = self.history.records[1]
    for i = 1, GradeCount do
        if curRecord.satisfaction >= Grades[i] then
            return i
        end
    end
    return 0
end

local function OnInfoClick(self)
    UIUtil.ShowIntro(Localization:GetString("137066"), "", Localization:GetString("137043"))
end

local function OnTabClick(self, index)
    if self.index == index then
        return
    end
    self.index = index
    for i = 1, GradeCount do
        self.tabs[i]:SetSelected(i == index)
    end
    self:RefreshRewards()
end

local function OnGetHistory(self)
    self.curGrade = self:GetCurGrade()
    self:Refresh()
    self:OnTabClick(self.curGrade)
end

UIOpinionRecord.OnCreate = OnCreate
UIOpinionRecord.OnDestroy = OnDestroy
UIOpinionRecord.OnEnable = OnEnable
UIOpinionRecord.OnDisable = OnDisable
UIOpinionRecord.ComponentDefine = ComponentDefine
UIOpinionRecord.ComponentDestroy = ComponentDestroy
UIOpinionRecord.DataDefine = DataDefine
UIOpinionRecord.DataDestroy = DataDestroy
UIOpinionRecord.OnAddListener = OnAddListener
UIOpinionRecord.OnRemoveListener = OnRemoveListener

UIOpinionRecord.OnCreateCell = OnCreateCell
UIOpinionRecord.OnDeleteCell = OnDeleteCell
UIOpinionRecord.ShowScroll = ShowScroll

UIOpinionRecord.ReInit = ReInit
UIOpinionRecord.Refresh = Refresh
UIOpinionRecord.TimerAction = TimerAction
UIOpinionRecord.RefreshRewards = RefreshRewards
UIOpinionRecord.GetCurGrade = GetCurGrade
UIOpinionRecord.OnInfoClick = OnInfoClick
UIOpinionRecord.OnTabClick = OnTabClick
UIOpinionRecord.OnGetHistory = OnGetHistory

return UIOpinionRecord