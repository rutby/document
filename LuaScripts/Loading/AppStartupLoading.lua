---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 1/3/2024 下午2:21
---
local AppStartupLoading = BaseClass("AppStartupLoading", Singleton)
local Const = require("Loading.Const")
local LogoState = require("Loading.LoadingState.LogoState")
local PermissionState = require("Loading.LoadingState.PermissionState")
local CheckResVersionState = require("Loading.LoadingState.CheckResVersionState")
local DownloadManifestState = require("Loading.LoadingState.DownloadManifestState")
local DownloadUpdateState = require("Loading.LoadingState.DownloadUpdateState")
local LoadDataTableState = require("Loading.LoadingState.LoadDataTableState")
local GetServerListState = require("Loading.LoadingState.GetServerListState")
local GetServerStatusState = require("Loading.LoadingState.GetServerStatusState")
local ConnectGameState = require("Loading.LoadingState.ConnectGameState")
local LoginState = require("Loading.LoadingState.LoginState")
local AppUpdateState = require("Loading.LoadingState.AppUpdateState")
local MailIdentifyState = require("Loading.LoadingState.MailIdentifyState")
local PushInitState = require("Loading.LoadingState.PushInitState")
local LoadSceneState = require("Loading.LoadingState.LoadSceneState")
local EnterGameState = require("Loading.LoadingState.EnterGameState")
local LoadingErrorState = require("Loading.LoadingState.LoadingErrorState")
local GameEntry = CS.GameEntry
local GameDefines = CS.GameDefines
local Const = require("Loading.Const")
local UnityWebRequest = CS.UnityEngine.Networking.UnityWebRequest

-- GetServerList 相关的url
local _onlineGateServer
local gateServerName
local _debugGateServer = "http://10.7.88.182:82"
local _onlineGateServer_CN = "http://cn-gsl-aps.first.fun/gameservice/getserverlist.php"

-- 版本请求地址
local debugCheckVersionURL_ = "http://10.7.88.142:82"
local onlineCheckVersionURL_ = _onlineGateServer


-- 登录打印
function LoadingPrint(fmt, ...)
    local arg= {...}
    if #arg == 0 then
        print("[LOAD]" .. tostring(fmt))
        return
    end

    print("[LOAD]" .. string.format(fmt, ...))
    return
end

function AppStartupLoading:SetBundleDownloadTotalBytes(value)
    self._bundleDownloadTotalBytes = value
end

function AppStartupLoading:GetBundleDownloadTotalBytes()
    return self._bundleDownloadTotalBytes
end

function AppStartupLoading:SetBundleDownloadProgress(value)
    self._bundleDownloadProgress = value
end
function AppStartupLoading:GetBundleDownloadProgress()
    return self._bundleDownloadProgress
end

function AppStartupLoading:GetLoadingProgress()
    return self._currentMaxProgress
end

function AppStartupLoading:GetCurState()
    return self._currState
end

function AppStartupLoading:IsLoading()
    return self._currState ~= Const.LoadingState.None and self._currState ~= Const.LoadingState.EnterGame
end

function AppStartupLoading:__initState()
    --	LoadingPrint('AppStartupLoading:__initState  !!!!!!!!!!')

    -- 初始状态机
    self._stateList = {}
    self._stateList[Const.LoadingState.Logo] = LogoState.New(self)
    self._stateList[Const.LoadingState.Permission] = PermissionState.New(self)
    self._stateList[Const.LoadingState.CheckResVersion] = CheckResVersionState.New(self)
    self._stateList[Const.LoadingState.DownloadManifest] = DownloadManifestState.New(self)
    self._stateList[Const.LoadingState.DownloadUpdate] = DownloadUpdateState.New(self)
    self._stateList[Const.LoadingState.LoadDataTable] = LoadDataTableState.New(self)
    self._stateList[Const.LoadingState.GetServerList] = GetServerListState.New(self)
    self._stateList[Const.LoadingState.GetServerStatus] = GetServerStatusState.New(self)
    self._stateList[Const.LoadingState.ConnectGame] = ConnectGameState.New(self)
    self._stateList[Const.LoadingState.Login] = LoginState.New(self)
    self._stateList[Const.LoadingState.AppUpdate] = AppUpdateState.New(self)
    self._stateList[Const.LoadingState.PushInit] = PushInitState.New(self)
    self._stateList[Const.LoadingState.MailIdentify] =MailIdentifyState.New(self) 
    self._stateList[Const.LoadingState.LoadScene] = LoadSceneState.New(self)
    self._stateList[Const.LoadingState.EnterGame] = EnterGameState.New(self)
    self._stateList[Const.LoadingState.LoadingError] = LoadingErrorState.New(self)

    self._currState = Const.LoadingState.None
end

function AppStartupLoading:__init()
    self.PromptBundleUpdateBytes = 5 * 1024 * 1024
    self.PermissionRecv = false
    self.isCanCloseLoading = false
    self.LoginMaxTryCount = 3
    self.serverList = {} -- 服务器列表

    -- 监听push init消息，这个消息表示登录成功完成	
    self.on_PushInitOk = function(msg) self:OnPushInitOk(msg) end
    self.on_PermissionRecv = function(msg) self:OnPermissionRecv(msg) end
    self.on_MailIdentify = function(msg)  self:OnMailIdentify(msg) end
    EventManager:GetInstance():AddListener(EventId.PUSH_INIT_OK, self.on_PushInitOk)
    EventManager:GetInstance():AddListener(EventId.SDK_PermissionRecv, self.on_PermissionRecv)
    EventManager:GetInstance():AddListener(EventId.NeedMailIdentify, self.on_MailIdentify)
    self.__update_handle = nil

    -- 初始整个状态机
    self:__initState()
end

function AppStartupLoading:__delete()
    LoadingPrint('AppStartupLoading:__delete  !!!!!!!!!!')

    self:Shutdown()

    -- 清除状态机
    table.clear(self._stateList)
    self._stateList = nil
    EventManager:GetInstance():RemoveListener(EventId.NeedMailIdentify, self.on_MailIdentify)
    EventManager:GetInstance():RemoveListener(EventId.PUSH_INIT_OK, self.on_PushInitOk)
    EventManager:GetInstance():RemoveListener(EventId.SDK_PermissionRecv, self.on_PermissionRecv)
end

function AppStartupLoading:Start(isReload, showLogo)

    LoadingPrint("AppStartupLoading:Start(%s, %s))", tostring(isReload), tostring(showLogo))

    PostEventLog.Record("Loading_Start")

    self.IsShowServerList = App.IsDebug()  and Setting:GetPublicBool(SettingKeys.SHOW_DEBUG_CHOOSE_SERVER, true)

    self.IsPushInitReceived = false
    self.IsNeedPassword = false
    self.LoginTryCount = 0
    self._bundleDownloadTotalBytes = 0
    self._bundleDownloadProgress = 0
    self._loadingProgress = 0
    self._currentMaxProgress = 0
    self.IsNeedMailIdentification = false
    self.MailEndCodeStr = ""
    self:Shutdown()
    SoundUtil.PlayBGMusicByName(SoundAssets.Music_Bg_loading)
    self:OpenUILoading(not isReload and showLogo)

    self:InitSoundSetting()

    if isReload then
        self:SetState(Const.LoadingState.LoadDataTable)
    elseif showLogo then
        self:SetState(Const.LoadingState.Permission)
    else
        self:SetState(Const.LoadingState.CheckResVersion)
    end

    self:EnableUpdate()
    LoadingPrint("Loading Start ok!")
end

function AppStartupLoading:Shutdown(needDestroyUI)
    LoadingPrint('AppStartupLoading:Shutdown.........')

    if needDestroyUI then
        self:CloseUILoading()
    end

    self:DisableUpdate()
end

function AppStartupLoading:Stop()
    LoadingPrint("AppStartupLoading:Stop")
    self:SetState(Const.LoadingState.None)
end

function AppStartupLoading:EnableUpdate()
    self:DisableUpdate()

    self.__update_handle = function() self:Update() end
    UpdateManager:GetInstance():AddUpdate(self.__update_handle)
end

function AppStartupLoading:DisableUpdate()
    if self.__update_handle then
        UpdateManager:GetInstance():RemoveUpdate(self.__update_handle)
        self.__update_handle = nil
    end
end

function AppStartupLoading:OpenUILoading(showLogo)
    --LoadingPrint("OpenUILoading begin!")

    local oldLoadingReq = CS.ApplicationLaunch.uiLoadingRequest

    local UILoading2 = "Assets/Main/Loading/UILoading2.prefab"
    local uiloadingInst = GameEntry.Resource:InstantiateAsync(UILoading2)
    uiloadingInst:completed('+', function(req)
        if req.isError then
            LoadingPrint("loadingInst error")
            return
        end

        -- LoadingPrint("loadingInst ok")
        self.UILoading = req.gameObject:GetOrAddComponent(typeof(CS.LuaMonoUpdate))
        self.UILoading._luaPath = "Loading.LoadingView2"
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Loading_Light)
        self.UILoading:Awake()
        local rectTrans = req.gameObject:GetComponent(typeof(CS.UnityEngine.RectTransform))
        rectTrans:SetParent(GameEntry.UIContainer:Find("Info"), false)

        local canvas = rectTrans:GetOrAddComponent(typeof(CS.UnityEngine.Canvas))
        if canvas then
            canvas.overrideSorting = true
            canvas.sortingOrder = UILayer['Info'].OrderInLayer
        end

        rectTrans.localScale = Vector3.one;
        rectTrans.offsetMin = Vector3.zero;
        rectTrans.offsetMax = Vector3.zero;
        rectTrans.anchorMin = Vector2.zero;
        rectTrans.anchorMax = Vector2.one;
        rectTrans.pivot = Vector2.New(0.5, 0.5);
        rectTrans:SetAsLastSibling()

        LoadingPrint("OpenUILoading complete!")
        --self.UILoading:CSOpen(showLogo);

        --如果之前有旧的loading再这里移除
        if oldLoadingReq ~= nil then
            oldLoadingReq:Destroy(true)
        end
        CS.ApplicationLaunch.uiLoadingRequest = req
    end)
end

function AppStartupLoading:CloseUILoading()
    LoadingPrint("AppStartupLoading:CloseUILoading")
    local oldLoadingReq = CS.ApplicationLaunch.uiLoadingRequest
    if oldLoadingReq ~= nil then
        oldLoadingReq:Destroy(false)
    end
    CS.ApplicationLaunch.uiLoadingRequest = nil
    self.UILoading = nil
end

function AppStartupLoading:GetCurrStateProgress()
    local t = Const.LoadingProcess[self._currState]
    return t or 0.1
end

function AppStartupLoading:ReConnect()
    LoadingPrint("AppStartupLoading:ReConnect")
    --断线重连时需要继续对当前State进行Tick
    self:EnableUpdate()

    self.IsShowServerList = false
    self:StartConnect()
end

function AppStartupLoading:StartConnect()
    LoadingPrint("AppStartupLoading:StartConnect")

    if CS.GameEntry.Network.IsConnected then
        CS.GameEntry.Network:Disconnect()
    end

    self.IsPushInitReceived = false

    local connect_params = {}
    if not self.IsShowServerList and self:LoadGameServerSetting(connect_params) then
        self:SetState(Const.LoadingState.ConnectGame, connect_params.ip, connect_params.port, connect_params.zone, connect_params.uid)
    else
        self:SetState(Const.LoadingState.GetServerList)
    end
end

function AppStartupLoading:GetState(state)
    return self._stateList[state]
end

function AppStartupLoading:GetStateName(state)
    return table.keyof(Const.LoadingState, state) or ("UnDefined"..tostring(state))
end

function AppStartupLoading:SetState(newState, ...)
    if self._currState ~= newState then
        EventManager:GetInstance():Broadcast(EventId.LoadingState, newState)
        local strLog = "LoadingState: " .. self:GetStateName(self._currState) ..  " => " ..  self:GetStateName(newState)
        LoadingPrint(strLog)

        local _stateName = "Loading_" .. self:GetStateName(newState)
        PostEventLog.Record(_stateName)
        ---- 添加firebase打点
        --FireBaseLog.CrashlyticsAddLog(strLog)

        local oldState = self._loadingState
        if oldState ~= nil then
            oldState:OnExit()
        end
        self._currState = newState
        self._loadingState = self:GetState(self._currState)
        if self._loadingState ~= nil then
            self._loadingState:OnEnter({...})
        end
    end
end

function AppStartupLoading:Update()
    self:UpdateLoadingProgress()
    if self._loadingState ~= nil then
        self._loadingState:OnUpdate()
    end
end

function AppStartupLoading:UpdateLoadingProgress()
    if self._currState == Const.LoadingState.DownloadUpdate
            or self._currState == Const.LoadingState.LoadingError then
        return
    end

    local stateProgress = self:GetCurrStateProgress()
    local maxDelta = 0.02
    self._loadingProgress = Mathf.MoveTowards(self._loadingProgress, stateProgress, maxDelta)
    --if self._currentMaxProgress < self._loadingProgress then
    self._currentMaxProgress = self._loadingProgress
    --end
end

function AppStartupLoading:OnInitError()
    self:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_INIT)
end

function AppStartupLoading:OnAuthSuccess()
    self:SetState(Const.LoadingState.PushInit)
end

function AppStartupLoading:InitSoundSetting()
    if not Setting:HasSetting(SettingKeys.EFFECT_MUSIC_ON) then
        Setting:SetPublicBool(SettingKeys.EFFECT_MUSIC_ON, true)
    end
    if not Setting:HasSetting(SettingKeys.BG_MUSIC_ON) then
        Setting:SetPublicBool(SettingKeys.BG_MUSIC_ON, true)
    end

    local effectIsMute = not Setting:GetPublicBool(SettingKeys.EFFECT_MUSIC_ON)
    local bgIsMute = not Setting:GetPublicBool(SettingKeys.BG_MUSIC_ON)

    GameEntry.Sound:SetSoundGroupMute(SoundGround.Effect, effectIsMute)
    GameEntry.Sound:SetSoundGroupMute(SoundGround.Dub, effectIsMute);
    GameEntry.Sound:SetSoundGroupMute(SoundGround.Music, bgIsMute);
end

function AppStartupLoading:LoadGameServerSetting(tbl)
    tbl.ip = Setting:GetPublicString(SettingKeys.SERVER_IP, "")
    tbl.port = Setting:GetPublicInt(SettingKeys.SERVER_PORT, 0)
    tbl.zone = Setting:GetPublicString(SettingKeys.SERVER_ZONE, "")
    tbl.uid = Setting:GetPublicString(SettingKeys.GAME_UID, "")

    if string.IsNullOrEmpty(tbl.ip) or tbl.port == 0 or string.IsNullOrEmpty(tbl.zone) then
        Logger.Log("LoadGameServerSetting no data")
        return false
    end
    return true
end

function AppStartupLoading:SaveGameServerSetting(ip, port, zone, uid, uuid)
    LoadingPrint("SaveGameServerSetting - uid(%s) uuid(%s) %s:%d zone(%s)",
            tostring(uid), tostring(uuid), tostring(ip), tonumber(port), tostring(zone))

    if not string.IsNullOrEmpty(uid) then
        Setting:SetPublicString(SettingKeys.GAME_UID, uid)
    end
    if not string.IsNullOrEmpty(uuid) then
        Setting:SetPublicString(SettingKeys.UUID, uuid)
    end
    Setting:SetPublicString(SettingKeys.SERVER_IP, ip)
    Setting:SetPublicInt(SettingKeys.SERVER_PORT, port)
    Setting:SetPublicString(SettingKeys.SERVER_ZONE, zone)
end

function AppStartupLoading:OnPushInitOk()
    LoadingPrint('AppStartupLoading:OnPushInitOk......................')
    self.IsPushInitReceived = true
    --PostEventLog.Record(PostEventLog.Defines.PUSH_INIT_RECV);

    -- 需要密码
    --if message["needPassWord"] ~= nil then
    --self.IsNeedPassword = true
    --end

    --推送
    CS.PushManager.Instance:onLoginComplete()

    LoadingPrint("login init data end");
end

function AppStartupLoading:OnPermissionRecv(message)
    LoadingPrint("AppStartupLoading:OnPermissionRecv")
    self.PermissionRecv = true
end

-- 显示用户封停错误
function AppStartupLoading:ShowAccountBind(errorCode)

    if (string.IsNullOrEmpty(errorCode)) then
        UIUtil.ShowMessage(Localization:GetString("E100085"), 1, "", "",
                function()

                end)
        return
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAccountBan, {anim = false}, errorCode)
    return true
end

-- 处理登录消息
function AppStartupLoading:OnLogin(message)

    if message == nil then
        LoadingPrint("AppStartupLoading:OnLogin ERROR!")
        return false
    end

    LoadingPrint("AppStartupLoading:OnLogin OK!")

    if (message["errorMessage"]) then
        local errorMessage = message["errorMessage"]
        Logger.LogError(errorMessage);
        self:DoLoginError(0, errorMessage)
        return false
    end

    local serverInfo = message["serverInfo"]
    if serverInfo then
        Setting:SetPublicString(SettingKeys.SERVER_ZONE, serverInfo["zone"])
        Setting:SetPublicString(SettingKeys.GAME_UID, serverInfo["uid"])
        Setting:SetPublicString(SettingKeys.SERVER_IP, serverInfo["ip"])
        Setting:SetPublicInt(SettingKeys.SERVER_PORT, serverInfo["port"])
    end

    if (message["db_timezone_offset"]) then
        local serverTime = message["db_timezone_offset"] * 1000
        CS.GameEntry.Timer:UpdateServerMilliseconds(serverTime);
        UITimeManager:GetInstance():UpdateServerMsDeltaTime(serverTime)
    end

    -- 获取gp的下载地址
    LuaEntry.GlobalData.downloadurl = message["downloadurl"]
    LuaEntry.GlobalData.eu_state = message["eu_state"] or 0
    LuaEntry.GlobalData.db_utc_timestamp = message["db_utc_timestamp"] or 0

    -- 登录完成之后直接设置成；等待PushInit状态
    self:SetState(Const.LoadingState.PushInit)
    return true
end

-- 处理登录错误！！
function AppStartupLoading:DoLoginError(errCode, errorMessage)
    Logger.LogError('Login error: ' .. tostring(errorMessage) .. ', code: ' .. errCode)
    -- self.logined = false

    -- 先设置成loginerror状态
    -- loginerror状态一般是会弹出一个对话框的；这样的话让用户去对话框操作，然后进行重新的状态处理

    XPCALL(
            function()
                local arSplit = string.split(errorMessage, ';')
                if #arSplit > 0 and arSplit[1] == '4' then
                    --ban user
                    if #arSplit >= 4 then
                        self:ShowAccountBind(errorMessage)
                    else
                        self:ShowAccountBind('')
                    end
                    self:SetState(Const.LoadingState.LoadingError)
                    local netError = tostring(errCode) .. "|" .. tostring(errorMessage)
                    self:SetState(Const.LoadingState.LoadingError, netError)
                elseif errCode == 1 or errorMessage == 'E002' then

                    -- 如果是editor模式的话，就提示一下
                    if App.IsEditor() then
                        self:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_ACCOUNT_ERR)
                    else
                        CS.UnityEngine.PlayerPrefs.DeleteAll()
                        CS.ApplicationLaunch.Instance:ReStartGame()
                    end
                else
                    local contentText = ''
                    if App.IsDebug() then
                        contentText = Localization:GetString("129063") .. " \n" .. errorMessage
                    else
                        contentText = Localization:GetString("129063")
                    end

                    local confirmAction = function()
                        CS.ApplicationLaunch.Instance:ReStartGame()
                    end

                    local cancelAction = function()
                        LoadingPrint("OnLoginError: step in cancelAction! call CS.ApplicationLaunch.Instance:Quit!")
                        CS.ApplicationLaunch.Instance:Quit()
                    end

                    UIUtil.ShowMessage(contentText, 2, GameDialogDefine.CONFIRM,
                            '110043', confirmAction, cancelAction, cancelAction, "", false)
                    self:SetState(Const.LoadingState.LoadingError)
                    local netError = tostring(errCode) .. "|" .. tostring(errorMessage)
                    self:SetState(Const.LoadingState.LoadingError, netError)
                end
            end,
            debug.traceback)
end

-- 根据调试标志获取URL
function AppStartupLoading:ServerListHost()
    
    
    --if App.IsDebug() then
    --    return _debugGateServer;
    --end
    local host = _onlineGateServer
    if host ==nil then
        if App.IsDebug() then
            local list = DebugCheckVersionUrlList
            return list[1].gsl
        else
            local list = CheckVersionUrlList
            return list[1].gsl
        end
    end
    return host
end

function AppStartupLoading:ServerListHostName()
    local name = gateServerName
    if name == nil then
        if App.IsDebug() then
            local list = DebugCheckVersionUrlList
            return list[1].lineName
        else
            local list = CheckVersionUrlList
            return list[1].lineName
        end
    end
    return name
end
-- 返回GetServerList的 UnityWebRequest
function AppStartupLoading:GetServerList()

    local deviceID = App.GetDeviceUid()
    if string.IsNullOrEmpty(deviceID) then
        deviceID = CS.GameEntry.Device:NewDeviceID()
        PostEventLog.Record("NewDeviceID")
        print("GetServerList .. New Device ???")
    end

    local package_name = App.GetPackageName()
    local country = App.GetFromCountry()
    local lang = App.GetLanguageName()
    local simOp = tostring(CS.GameEntry.Sdk:GetSimOperator())
    local platform = App.GetPlatformName()
    local debugstring = ''
    

    -- 这里要使用WWWForm，通过抓包你会发现，直接使用string会有字符串转义的BUG。
    local wwwForm = CS.UnityEngine.WWWForm()
    wwwForm:AddField("uuid", deviceID)
    wwwForm:AddField("country", country)
    wwwForm:AddField("is3D", "1")
    wwwForm:AddField("lang", lang)
    wwwForm:AddField("simOp", simOp)
    wwwForm:AddField("platform", platform)
    wwwForm:AddField("packageName", package_name)

    debugstring = "uuid=" .. deviceID
            .. "&country=" .. country
            .. "&lang=" .. lang
            .. "&simOp=" .. simOp
            .. "&platform=" .. platform

    if (App.IsDebug()) then
        wwwForm:AddField("gmFlag", "0")
        wwwForm:AddField("loginFlag", "0")

        debugstring = debugstring .. "&gmFlag=" .. "0" .. "&loginFlag=" .. "0"
    else
        wwwForm:AddField("loginFlag", "1")
        wwwForm:AddField("newServer", "1")

        debugstring = debugstring .. "&loginFlag=" .. "1" .. "&newServer=" .. "1"
    end

    local requrl = self:ServerListHost() .. "/gameservice/getserverlist.php"
    local request = UnityWebRequest.Post(requrl, wwwForm)
    if request then
        request:SendWebRequest()

        LoadingPrint("GetServerList: " ..  requrl .. "?" .. debugstring)
    else
        Logger.LogError("Create webrequest error!!!")
    end

    return request
end

-- 设置所有服务器列表；一般是调试，或者选择星球的时候使用
function AppStartupLoading:SetAllServerList(serverList)
    self.serverList = serverList
end

function AppStartupLoading:GetAllServerList()
    return self.serverList
end

function AppStartupLoading:GetAllServerInfo(serverId)

    if self.serverList ~= nil then
        for k,v in pairs(self.serverList) do
            if (tonumber(v.id) == serverId) then
                return v
            end
        end
    end

    -- 如果serverList为空，从本地取
    local logInInfo = {}
    logInInfo.id = serverId
    logInInfo.ip = Setting:GetPublicString(SettingKeys.SERVER_IP)
    logInInfo.port = Setting:GetPublicInt(SettingKeys.SERVER_PORT)
    logInInfo.zone = Setting:GetPublicString(SettingKeys.SERVER_ZONE)
    return logInInfo
end

-- 获取服务器的状态；譬如是否开服等	
function AppStartupLoading:GetServerStatus()
    
    local uid = CS.GameEntry.Network.Uid

    local deviceID = App.GetDeviceUid()
    local country = App.GetFromCountry()
    local lang = App.GetLanguageName()
    local platform = App.GetPlatformName()

    -- 这里要使用WWWForm，通过抓包你会发现，直接使用string会有字符串转义的BUG。
    local wwwForm = CS.UnityEngine.WWWForm()
    wwwForm:AddField("gameuid", uid);

    wwwForm:AddField("uuid", deviceID)
    wwwForm:AddField("loginFlag", "1")
    wwwForm:AddField("country", country)
    wwwForm:AddField("lang", lang)
    wwwForm:AddField("platform", platform)

    local debugstring = "&gameuid=" .. uid
            .. "&uuid=" .. deviceID
            .. "&loginFlag=" .. "1"
            .. "&country=" .. country
            .. "&lang" .. lang
            .. "&platform" .. platform

    local requrl = self:ServerListHost() .. "/gameservice/probe.php"
    local request = UnityWebRequest.Post(requrl, wwwForm)
    if request then
        request:SendWebRequest()

        LoadingPrint("GetServerStatus: " ..  requrl .. "?" .. debugstring)
    else
        Logger.LogError("Create webrequest error!!!")
    end

    return request;
end

-- 组装请求版本号字符串
function AppStartupLoading:GetCheckVersionURL(host)
    
    local gm = Setting:GetPublicInt(SettingKeys.GM_FLAG)
    if gm>0 then
        gm = 1
    end
    local package_name = App.GetPackageName()
    
    local uid = Setting:GetPublicString(SettingKeys.GAME_UID, "")
    local server = Setting:GetPublicString(SettingKeys.SERVER_ZONE, "")
    local deviceID = App.GetDeviceUid()
    local platform = App.GetPlatformName()
    

    local m = {}
    m.packageName = package_name
    m.platform = platform
    m.appVersion = App.GetVersion()
    m.gm = tostring(gm)
    m.server = tostring(server)
    m.uid = uid
    m.deivceId = deviceID
    m.returnJson = "1"
    local str = table.table2string(m, '&', '=')

    host = host .. "/gameservice/getlsu3dversion.php?" .. str

    LoadingPrint("GetVersionRequest: %s", host)
    return host
end

function AppStartupLoading:SelectOnlineGateServer(hostStr,hostName)
    _onlineGateServer = hostStr
    gateServerName = hostName
    LoadingPrint("NetworkManager::SelectOnlineGateServer::host:{%s}", hostStr)
end
function AppStartupLoading:ClearOnlineGateServer()
    _onlineGateServer = nil
    gateServerName = nil
    LoadingPrint("NetworkManager::ClearOnlineGateServer")
end

function AppStartupLoading:GetDebugCheckVersionURL()
    return debugCheckVersionURL_
end

function AppStartupLoading:OnMailIdentify(msg)
    if msg~=nil and msg~="" then
        self.IsNeedMailIdentification = true
        self.MailEndCodeStr = msg
    else
        self.IsNeedMailIdentification = false
        self.MailEndCodeStr = ""
    end
    
end
return AppStartupLoading