---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 4/3/2024 下午12:09
---
local LoadingStateBase = require("Loading.LoadingState.LoadingStateBase")
local GetServerStatusState = BaseClass("GetServerStatusState", LoadingStateBase)
local Const = require("Loading.Const")
local rapidjson = require "rapidjson"

function GetServerStatusState:__init(startupLoading)
    LoadingStateBase:__init(startupLoading)
end

function GetServerStatusState:OnEnter(args)
    self._elapseTime = 0
    self._timeout = 5
    self._maxTryCount = 3
    self._tryCount = 1

    self._httpRequest = AppStartupLoading:GetInstance():GetServerStatus()
end

function GetServerStatusState:OnExit()
    if self._httpRequest ~= nil then
        self._httpRequest:Dispose()
        self._httpRequest = nil
    end
end

function GetServerStatusState:OnUpdate()
    if self._httpRequest == nil then
        return
    end

    self._elapseTime = self._elapseTime + Time.deltaTime
    if self._elapseTime > self._timeout then
        if self._tryCount > self._maxTryCount then
            self._httpRequest:Abort();
            self._httpRequest:Dispose();

            self._httpRequest = AppStartupLoading:GetInstance():GetServerStatus()

            self._tryCount = self._tryCount + 1;
            self._elapseTime = 0;
            EventManager:GetInstance():Broadcast(EventId.NetworkRetry, true)

            Logger.Log("get server status try count:", self._tryCount)
        else
            Logger.LogError("get server status timeout")

            self._httpRequest:Dispose();
            self._httpRequest = nil;

            -- 获取服务器状态超时
            self:OnGetServerStatus(nil, Const.LoginErrorCode.ERROR_TIMEOUT)
        end
    elseif self._httpRequest.isHttpError or self._httpRequest.isNetworkError then
        Logger.LogError("get serverlist net error:" .. tostring(self._httpRequest.error));

        local err = self._httpRequest.isHttpError and Const.LoginErrorCode.ERROR_HTTP or Const.LoginErrorCode.ERROR_NETWORK;
        self._httpRequest:Dispose();
        self._httpRequest = nil;

        -- 网络错误，无法获取服务器状态
        self:OnGetServerStatus(nil, err)
    elseif self._httpRequest.isDone and not self._httpRequest.isHttpError and not self._httpRequest.isNetworkError then
        local text = self._httpRequest.downloadHandler.text
        self._httpRequest:Dispose();
        self._httpRequest = nil;

        if text == nil then
            LoadingPrint("GetServerStatus: no data")
            self:OnGetServerStatus(nil, Const.LoginErrorCode.ERROR_DATA);
        else
            LoadingPrint("GetServerStatus: %s", text)
            local res = rapidjson.decode(text)
            if res then
                self:OnGetServerStatus(res, Const.LoginErrorCode.ERROR_SUCCESS);
            else
                self:OnGetServerStatus(nil, Const.LoginErrorCode.ERROR_JSON);
            end
        end
    end
end

function GetServerStatusState:OnGetServerStatus(response, err)
    EventManager:GetInstance():Broadcast(EventId.NetworkRetry, false)
    if err == Const.LoginErrorCode.ERROR_SUCCESS then
        PostEventLog.Record(PostEventLog.Defines.SERVER_STATUS, response.message)
        if response and response.code ~= 0 then
            self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_MAINTENANCE, response.time)
        else
            -- code = 0 表示游戏正常运行
            self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_CONNECT)
        end
    else
        -- 无法获取状态
        self._startupLoading:SetState(Const.LoadingState.LoadingError, err)
    end
end

return GetServerStatusState