---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 4/3/2024 下午12:28
---
local LoadingStateBase = require("Loading.LoadingState.LoadingStateBase")
local PushInitState = BaseClass("PushInitState", LoadingStateBase)
local Const = require("Loading.Const")
-- local Localization = CS.GameEntry.Localization

function PushInitState:__init(startupLoading)
    LoadingStateBase:__init(startupLoading)
end

function LoadingStateBase:__delete()

end

-- 当发送完Loading消息后
-- 进入等待PushInit的状态，其实这个应该同属于Loading状态，以后有时间修改一下
function PushInitState:OnEnter()
    self.PushInitTimeOut = 13
    self._elapseTime = 0
    LoadingPrint('PushInitState:OnEnter!')
end

function PushInitState:OnExit()

end

function PushInitState:OnUpdate()
    self._elapseTime = self._elapseTime + Time.deltaTime
    if not self._startupLoading.IsPushInitReceived then
        if self._elapseTime > self.PushInitTimeOut then
            LoadingPrint('PushInitState:OnUpdate wait TimeOut!!!')
            PostEventLog.Record(PostEventLog.Defines.LONG_TIME_NOT_PUSH_INIT)

            if self._startupLoading.LoginTryCount < self._startupLoading.LoginMaxTryCount then
                self._startupLoading:StartConnect()
            else
                self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_INIT_TIMEOUT)
            end
        else
            --Logger.Log('#network# PushInitState:OnUpdate Wait PushInit......................')
        end
    else
        if self._startupLoading.IsNeedMailIdentification then
            self._startupLoading:SetState(Const.LoadingState.MailIdentify)
        else
            self:OnLoginComplete()
            self._startupLoading:SetState(Const.LoadingState.LoadScene)
        end
    end
end

function PushInitState:OnLoginComplete()
    LoadingPrint('PushInitState:OnLoginComplete..')
    PostEventLog.Record(PostEventLog.Defines.LOGIN_COMPLETE)

    CS.GameEntry.Network:SyncPingPong()
    Logger.Log("loading process 1")
    ---- 初始化数据库
    GameMain:DataCenterInit()
    Logger.Log("loading process 2")
    --Logger.Log("loading process 3")
    --Logger.Log("loading process 4")
    
    --Logger.Log("loading process 5")
    --Logger.Log("loading process 6")
    --Logger.Log("loading process 7")
    EventManager:GetInstance():Broadcast(EventId.CloseDisconnectView)
    if CS.SceneManager.World ~= nil then
        CS.SceneManager.World:CreateScene()
    end
    --
    --
    --local _gameUid = Setting:GetPublicString(SettingKeys.GAME_UID, "")
    --CS.GameEntry.Sdk:initAppsFlyer(_gameUid)
    CS.GameEntry.Sdk:SendDataToNative("Pay_queryPurchase", "")

    LoadingPrint('PushInitState:OnLoginComplete OK!!')
end

return PushInitState