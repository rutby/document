---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 4/3/2024 上午10:54
---
local LoadingStateBase = require("Loading.LoadingState.LoadingStateBase")
local DownloadUpdateState = BaseClass("DownloadUpdateState", LoadingStateBase)
local Const = require("Loading.Const")
local DownloadState = 
{
    init = 0,
    waitToInitLua = 1,--lua env 等待一帧初始化
}

function DownloadUpdateState:__init(startupLoading)
    LoadingStateBase:__init(startupLoading)

    self.downloadVersions = nil
    self.downloadManifestList = {}
    self.bkgroundDownloadManifestList = {}
    self.luaChange = false
    self._state = DownloadState.init
end

function DownloadUpdateState:OnEnter(args)
    self.luaChange = false
    self._state = DownloadState.init
    table.clear(self.bkgroundDownloadManifestList)
    table.clear(self.downloadManifestList)
    local manifests = args[1]

    Logger.Log("#bundle# DownloadUpdateState manifests 1 length:" .. table.length(manifests))

    local backgroundManifestName = string.lower(CS.GameEntry.Resource:GetBkgroundManifestName())

    for _, manifest in pairs(manifests) do
        local name = manifest.name
        if name == backgroundManifestName then
            table.insert(self.bkgroundDownloadManifestList, manifest)
        else
            table.insert(self.downloadManifestList, manifest)
        end
    end

    Logger.Log("#bundle# DownloadUpdateState self.downloadManifestList length:" .. table.length(self.downloadManifestList))
    local List_String = CS.System.Collections.Generic.List(CS.VEngine.DownloadInfo)
    local lst = List_String()
    local totalSize = CS.GameEntry.Resource:GetDownloadSize(self.downloadManifestList, lst)
    if (totalSize > 0) then
        Logger.Log('#bundle# DownloadSize :' .. tostring(totalSize))
        self._startupLoading:SetBundleDownloadTotalBytes(totalSize)

        PostEventLog.Record(PostEventLog.Defines.DOWNLOAD_START)
        EventManager:GetInstance():Broadcast(EventId.BeginDownloadUpdate)
        self.downloadVersions = CS.GameEntry.Resource:DownloadUpdates(lst)
    else
        -- 理论上这里就是无需更新了！所以直接去LoadDataTable
        Logger.Log('#bundle# DownloadSize 0')
        --self:OnDownloadComplete(false)
        self._startupLoading:SetState(Const.LoadingState.LoadDataTable)
    end
end

function DownloadUpdateState:OnExit()
    table.clear(self.bkgroundDownloadManifestList)
    table.clear(self.downloadManifestList)
    self.downloadVersions = nil
end

function DownloadUpdateState:OnUpdate()
    if self._state == DownloadState.init then
        if self.downloadVersions == nil then
            return
        end
        if not self.downloadVersions.isDone then
            self._startupLoading:SetBundleDownloadProgress(self.downloadVersions.progress)
        else
            EventManager:GetInstance():Broadcast(EventId.EndDownloadUpdate)
            if (self.downloadVersions.isError) then
                Logger.LogError("#bundle# DownloadUpdate error " .. self.downloadVersions.error)
                PostEventLog.Record(PostEventLog.Defines.DOWNLOAD_FAILED, self.downloadVersions.error)
                self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_DOWNLOAD_UPDATE)
            else
                Logger.Log("#bundle# DownloadUpdate OK!")
                PostEventLog.Record(PostEventLog.Defines.DOWNLOAD_FINISH)
                -- 下载完成后，具体做事情根据更新状态去处理，在函数里面if .. else
                self:OnDownloadComplete(true)
            end
        end
    elseif self._state == DownloadState.waitToInitLua then
        self:onAllFinish()
    end
    
end


function DownloadUpdateState:GetDownloadManifest(name)
    if (self.downloadManifestList == nil) then
        return nil
    end

    for _, v in pairs(self.downloadManifestList) do
        if (v.name == name) then
            return v
        end
    end
end

function DownloadUpdateState:OverrideManifest()
    if self.downloadManifestList ~= nil then
        for _, v in pairs(self.downloadManifestList) do
            Logger.Log("OverrideManifest self.downloadManifestList : " .. tostring(v.name) .. "-" .. tostring(v.version))
            CS.GameEntry.Resource:OverrideManifest(v)
        end
    end

    if self.bkgroundDownloadManifestList ~= nil then
        for _, v in pairs(self.bkgroundDownloadManifestList) do
            Logger.Log("OverrideManifest self.bkgroundDownloadManifestList : " .. tostring(v.name) .. "-" .. tostring(v.version))
            CS.GameEntry.Resource:OverrideManifest(v)
        end
    end
end

-- 资源下载完毕的处理
function DownloadUpdateState:OnDownloadComplete(resUpdate)
    Logger.Log("onDownLoadComplete Start")
    self.luaChange = false
    local luaManifestOld = CS.VEngine.Versions.GetManifest(CS.GameEntry.Resource.LuaManifestName)
    Logger.Log("get luaManifest0")
    local tableManifestOld = CS.VEngine.Versions.GetManifest(CS.GameEntry.Resource.DataTableManifestName)
    Logger.Log("get tableManifest0")
    local luaManifestNew = self:GetDownloadManifest(CS.GameEntry.Resource.LuaManifestName)
    Logger.Log("get luaManifest1")
    local tableManifestNew = self:GetDownloadManifest(CS.GameEntry.Resource.DataTableManifestName)
    Logger.Log("get tableManifest1")
    local luaOldVer = luaManifestOld ~= nil and luaManifestOld.version or 0
    local luaNewVer = luaManifestNew ~= nil and luaManifestNew.version or 0
    local tabOldVer = tableManifestOld ~= nil and tableManifestOld.version or 0
    local tabNewVer = tableManifestNew ~= nil and tableManifestNew.version or 0

    self.luaChange = luaOldVer ~= luaNewVer or tabOldVer ~= tabNewVer
    --
    Logger.Log("OnDownloadComplete" .. 
    	"- luaChanged : " .. tostring(self.luaChange) ..
    	", luaOldVer : " .. tostring(luaOldVer) ..
    	", luaNewVer : " .. tostring(luaNewVer) ..
    	", tabOldVer : " .. tostring(tabOldVer) ..
    	", tabNewVer : " .. tostring(tabNewVer)
    	)
    if self.luaChange then
        Logger.Log("enter lua change")
        
    end
    -- 下载完毕之后，要卸载一下当前的所有资源；然后再重新加载
    -- 理论上这个时候不应该有很多资源加载才对！
    CS.GameEntry.Sound:StopAllSounds()
    Logger.Log("StopAllSounds")
    CS.GameEntry.Resource:UnloadUnusedAssets()
    Logger.Log("UnloadUnusedAssets")
    if resUpdate then
        print("DownloadUpdateState::Unload  Bundle  and  Asset")
        xpcall(function()
            CS.VEngine.Loadable.ForceUnloadLoading();
            CS.VEngine.Bundle.ClearCache();
            CS.VEngine.Asset.ClearCache();
            CS.UnityEngine.AssetBundle.UnloadAllAssetBundles(false);
        end, function(errMsg)
            Logger.LogError('unloadBundle:' .. errMsg)
        end)

    end
    Logger.Log("onDownLoadComplete finish")
    self._state = DownloadState.waitToInitLua

end
function DownloadUpdateState:onAllFinish()
    self:OverrideManifest()
    if self.bkgroundDownloadManifestList~=nil then
        local list = {}
        for i=1,#self.bkgroundDownloadManifestList do
            table.insert(list,self.bkgroundDownloadManifestList[i].name)
        end
        CS.GameEntry.Resource:StartBkgroundDownload(list)
    end
    --只要有更新就无条件ReloadGame
    if self._startupLoading.UILoading ~= nil then
        EventManager:GetInstance():Broadcast(EventId.SU_ForceDestroyLoadingListener) --解除绑定
        self._startupLoading.UILoading.enabled = false
    end
    CS.ApplicationLaunch.Instance:ReloadGame()
end

return DownloadUpdateState