---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 1/3/2024 下午5:01
---
local LoadingStateBase = require("Loading.LoadingState.LoadingStateBase")
local PermissionState = BaseClass("PermissionState", LoadingStateBase)
local Const = require("Loading.Const")
local SDKManager = CS.SDKManager
local Sdk = CS.GameEntry.Sdk

function PermissionState:__init(startupLoading)
    LoadingStateBase:__init(startupLoading)
end

function PermissionState:__delete()

end

function PermissionState:OnEnter(args)

    Logger.Log("PermissionState:OnEnter")

    if SDKManager.IS_UNITY_ANDROID() and not SDKManager.IS_UNITY_EDITOR() then
        Sdk:RequestSdCardPermission()
    else
        self._startupLoading.PermissionRecv = true
    end


    -- shader
    --Logger.Log("PermissionState:OnEnter 1")
end

function PermissionState:StartDownLoadConfigZip()
    if self.isDownloadZip == true then
        return
    end
    -- 开始内网下载配置
    local _zipDataTable = CS.ApplicationLaunch.Instance:GetZipDataTable()
    if App.IsDebug() then
        if CS.GameEntry.Resource.SkipUpdate then
            print("****config: 不使用本地 1")
            _zipDataTable._ConfigStatus = CS.ConfigStatus.NotUseLocal
        else
            if _zipDataTable._ConfigStatus == CS.ConfigStatus.Init then -- 只有在第一次进入的时候才做这个处理
                local action1 = function()
                    self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_DOWNLOAD_UPDATE)
                end
                local action2 = function()
                    self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_DOWNLOAD_UPDATE)
                end
                _zipDataTable:StartZipDownLoad(action1,action2)
                print("****config: 开始下载 1")
            else
                _zipDataTable._ConfigStatus = CS.ConfigStatus.FinishUnzip
                print("****config: 非第一次进入")
            end
        end
    else
        -- 外网不使用这一套
        print("****config: 外网不使用")
        _zipDataTable._ConfigStatus = CS.ConfigStatus.NotUseLocal
    end
    self.isDownloadZip = true
end

function PermissionState:OnExit()

    Logger.Log("PermissionState:OnExit")
    CS.ApplicationLaunch.Instance:GetZipDataTable():DisposeZipDownloadRequest()

    -- 获取完权限之后，立即处理一下DeviceID
    local deviceID = App.GetDeviceUid()
    if string.IsNullOrEmpty(deviceID) then
        deviceID = CS.GameEntry.Device:NewDeviceID()
        PostEventLog.Record("NewDeviceID")
        Logger.Log("PermissionState:OnExit - NewDeviceID")
    end

end

function PermissionState:ReloadGame()
    if (self._toReloadGame == true) then
        --只要有更新就无条件ReloadGame
        if self._startupLoading.UILoading ~= nil then
            EventManager:GetInstance():Broadcast(EventId.SU_ForceDestroyLoadingListener) --解除绑定
            self._startupLoading.UILoading.enabled = false
        end
        CS.ApplicationLaunch.Instance:ReStartGame()
        self._reloadGame = true
    end
end

function PermissionState:OnUpdate()
    if (self._reloadGame == true) then
        return
    end
    self:ReloadGame()
    if self._startupLoading.PermissionRecv then
        self:StartDownLoadConfigZip()
    end

    local action = function()
        self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_DOWNLOAD_UPDATE)
    end
    local _localUnzipState = CS.ApplicationLaunch.Instance:GetZipDataTable():ExecuteUnzipDatabase(action)
    if _localUnzipState == 1 then
        return
    elseif _localUnzipState == 2 then -- 表示解压完成,需要开始重启
        self._toReloadGame = true
        return
    end
    local _st = CS.ApplicationLaunch.Instance:GetZipDataTable()._ConfigStatus
    if self._startupLoading.PermissionRecv and
            self._startupLoading.UILoading ~= nil and
            (_st == CS.ConfigStatus.FinishUnzip or _st == CS.ConfigStatus.NotUseLocal) and
            CS.GameEntry.Localization.IsInitDone  then --andCS.ApplicationLaunch.Instance.downloadFinish
        Sdk:CheckDownloadGoogleApk()
        Sdk:DoInitGooglePay()
        self._startupLoading:SetState(Const.LoadingState.CheckResVersion)
    end

end

return PermissionState