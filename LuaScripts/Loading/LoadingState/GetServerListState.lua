---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 4/3/2024 上午11:42
---
local LoadingStateBase = require("Loading.LoadingState.LoadingStateBase")
local GetServerListState = BaseClass("GetServerListState", LoadingStateBase)
local Const = require("Loading.Const")
local rapidjson = require "rapidjson"

function GetServerListState:__init(startupLoading)
    LoadingStateBase:__init(startupLoading)
end

function GetServerListState:OnEnter(args)
    PostEventLog.Record(PostEventLog.Defines.GET_SERVERLIST,AppStartupLoading:GetInstance():ServerListHostName());

    self._elapseTime = 0
    self._timeout = 5
    self._maxTryCount = 3
    self._tryCount = 1
    --self._httpRequest = CS.GameEntry.Network:GetServerList()
    self._httpRequest = AppStartupLoading:GetInstance():GetServerList()
end

function GetServerListState:OnExit()
    if self._httpRequest ~= nil then
        self._httpRequest:Dispose()
        self._httpRequest = nil
    end
end

function GetServerListState:OnUpdate()
    if self._httpRequest == nil then
        return
    end

    self._elapseTime = self._elapseTime + Time.deltaTime
    if self._elapseTime > self._timeout then
       PostEventLog.Record(PostEventLog.Defines.SERVERLIST_TIME_OUT, tostring(self._tryCount));
        if self._tryCount > self._maxTryCount then
            self._httpRequest:Abort();
            self._httpRequest:Dispose();
            --self._httpRequest = CS.GameEntry.Network.GetServerList();
            self._httpRequest = AppStartupLoading:GetInstance():GetServerList()

            self._tryCount = self._tryCount + 1;
            self._elapseTime = 0;
            EventManager:GetInstance():Broadcast(EventId.NetworkRetry, true)

            LoadingPrint("get serverlist try count: %d", self._tryCount)
        else
            LoadingPrint("get serverlist timeout")

            self._httpRequest:Dispose()
            self._httpRequest = nil

            self:OnGetServerList(nil, Const.LoginErrorCode.ERROR_TIMEOUT, "timeout, reach max try count")
        end
    elseif self._httpRequest.isHttpError or self._httpRequest.isNetworkError then
        Logger.LogError("get serverlist net error: " .. tostring(self._httpRequest.error));

        local err = self._httpRequest.error
        self._httpRequest:Dispose()
        self._httpRequest = nil

        self:OnGetServerList(nil, Const.LoginErrorCode.ERROR_NETWORK, err)
    elseif self._httpRequest.isDone and not self._httpRequest.isHttpError and not self._httpRequest.isNetworkError then

        local text = self._httpRequest.downloadHandler.text
        self._httpRequest:Dispose()
        self._httpRequest = nil

        self:HandleServerList(text)
    end
end

function GetServerListState:HandleServerList(text)

    LoadingPrint("GetServerListState:HandleServerList : %s", text)

    if string.IsNullOrEmpty(text) then
        self:OnGetServerList(nil, LoginErrorCode.ERROR_DATA, "empty data");
        return
    end

    --local res = rapidjson.decode(text)
    local res = CommonUtil.JsonDecode(text)
    if res == nil then
        self:OnGetServerList(nil, LoginErrorCode.ERROR_JSON, "invalid json: " .. text)
        return
    end

    if (res.serverList ~= nil and #res.serverList > 0) then
        self:OnGetServerList(res, LoginErrorCode.ERROR_SUCCESS, "success")
    else
        --Log.Info("gsl return {0}", _httpRequest.downloadHandler.text);
        if (res.code ~= 0) then
            self:OnGetServerList(res, LoginErrorCode.ERROR_SERVER_LIST, "gsl code {res.code}");
        else
            self:OnGetServerList(res, LoginErrorCode.ERROR_SERVER_LIST_EMPTY, "server list empty: " .. text)
        end
    end
end

-- 获取最后一次登录的服务器
function GetServerListState:GetLastLoggedServerInfo(response)

    if (response.lastLoggedServer ~= 0) then

        for k,v in pairs(response.serverList) do
            if (v.id == response.lastLoggedServer) then
                return v
            end
        end

    end
    return nil
end

function GetServerListState:OnGetServerList(response, err, msg)
    EventManager:GetInstance():Broadcast(EventId.NetworkRetry, false)

    if err ~= Const.LoginErrorCode.ERROR_SUCCESS then
        PostEventLog.Record(PostEventLog.Defines.SERVERLIST_FAILED,string.format("{%s}, {%s}",err,msg));
        self._startupLoading:SetState(Const.LoadingState.LoadingError, err)
        return
    end

    CS.GameEntry.Network.ServerList = response.serverList
    --local serverList = response.serverList
    --AppStartupLoading:GetInstance():SetAllServerList(serverList)

    if self._startupLoading.IsShowServerList then
        LoadingPrint("show debug choose server ")
        function f(ip, port, zone, uid)
            self:DebugConnectGameServer(ip, port, zone, uid)
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIDebugChooseServer, f)
    else
        local serverInfo = self:GetLastLoggedServerInfo(response)
        if serverInfo == nil then
            serverInfo = response.serverList[1]
        end
        LoadingPrint("Server list count {0}", response.serverList.Length);
        --self._startupLoading:SaveGameServerSetting(serverInfo.ip, serverInfo.port, serverInfo.zone, serverInfo.gameUid, serverInfo.uuid)
        --self._startupLoading:SetState(Const.LoadingState.ConnectGame, serverInfo.ip, serverInfo.port, serverInfo.zone, serverInfo.gameUid ~= nil and serverInfo.gameUid or "")    
        self:DebugConnectGameServer(serverInfo.ip, serverInfo.port, serverInfo.zone, serverInfo.gameUid ~= nil and serverInfo.gameUid or "")
    end
end

function GetServerListState:DebugConnectGameServer(ip, port, zone, uid)
    if string.IsNullOrEmpty(ip) or string.IsNullOrEmpty(zone) or port == 0 then
        LoadingPrint("DebugConnectGameServer param error %s:%s [%s]", tostring(ip), tostring(port), tostring(zone))
        return
    end

    self._startupLoading:SaveGameServerSetting(ip, port, zone, uid, "");
    self._startupLoading:SetState(Const.LoadingState.ConnectGame, ip, port, zone, uid);
end

return GetServerListState