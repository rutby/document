---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 1/3/2024 下午5:48
---
local LoadingStateBase = require("Loading.LoadingState.LoadingStateBase")
local CheckResVersionState = BaseClass("CheckResVersionState", LoadingStateBase)
local Const = require("Loading.Const")
local util = require "Common.Tools.cjson.util"
local Localization = CS.GameEntry.Localization

function CheckResVersionState:__init(startupLoading)
    LoadingStateBase:__init(startupLoading)
end

function CheckResVersionState:OnEnter(args)

    self._posteventTime = 0
    self.reqSuccess = false
    self.selectReq = nil
    self.downloadHandler = nil
    CS.GameEntry.Resource:InitLine()
    self:StartVersionRequest()
    if CS.GameEntry.Resource.SkipUpdate then
        self._startupLoading:SetState(Const.LoadingState.LoadDataTable);
    end
end

function CheckResVersionState:OnExit()
    self:StopAllRequest()
    self._requestHostMap = {}
    self._requests = {}
    self.reqSuccess = false
    self.selectReq = nil
    self.downloadHandler = nil
end

function CheckResVersionState:OnUpdate()
    if self.reqSuccess == true then
        return
    end
    if self._requests~=nil then
        local length = #self._requests
        for i =1,length do
            if self.reqSuccess == false then
                local item = self._requests[i]
                if item.isDone == false then
                    item:OnUpdate()
                end
            end
        end
    end
    if self.reqSuccess == true then
        self:UpdateHandler()
        self:StopAllRequest()
    end
end


function CheckResVersionState:StartVersionRequest()
    if CS.GameEntry.Resource.SkipUpdate then
        Logger.Log("StartVersionRequest - SkipUpdate")
        return
    end
    self.hostList = {}
    PostEventLog.Record(PostEventLog.Defines.CHECK_VERSION_START)
    self.hostList = CheckVersionUrlList
    if App.IsDebug() then
        self.hostList = DebugCheckVersionUrlList
    end
    local hostLenght = #self.hostList
    local checkUrls = {}
    for i = 1,hostLenght do
        checkUrls[i] = self._startupLoading:GetCheckVersionURL(self.hostList[i].cv)
    end
    self:StartRequestQueue(checkUrls,self.hostList)
end

function CheckResVersionState:StartRequestQueue(urls,hosts)
    self._requestHostMap = {}
    self._requests = {}
    -- 失败
    self.m_callback_fail = function( req, error)
        Logger.LogError(string.format("CheckResVersion::Failed,err:{%s},,url:{%s}",error,req.url))
        local isAllFail = true
        local count = #self._requests
        for i = 1,count do
            local reqKv = self._requests[i]
            if reqKv.error == nil or reqKv.error == "" then
                isAllFail = false;
                break
            end
        end
        if isAllFail == true then
            Logger.LogError("CheckResVersion::AllFailed")
            PostEventLog.Record(PostEventLog.Defines.CHECK_VERSION_FAILED, error)
            self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_CHECK_VERSION_FAILED);
        end
    end

    -- 成功
    self.m_callback_success = function (req, downloadHandler)
        self:ShowCallBackMessage(req,downloadHandler)
    end
    -- 超时
    self.m_callback_timeout = function (req)
        Logger.LogError(string.format("CheckResVersion::Timeout,url:{%s}",req.url))
        local isAllFail = true
        local count = #self._requests
        for i = 1,count do
            local reqKv = self._requests[i]
            if reqKv.error == nil or reqKv.error == "" then
                isAllFail = false;
                break
            end
        end
        if isAllFail == true then
            Logger.LogError("CheckResVersion::AllTimeout")
            PostEventLog.Record(PostEventLog.Defines.CHECK_VERSION_TIMEOUT)
            self._startupLoading:SetState(Const.LoadingState.LoadingError, Const.LoginErrorCode.ERROR_CHECK_VERSION_TIMEOUT);
        end
    end

    for i = 1,#urls do
        local url = urls[i]
        local req = CS.Main.Scripts.Application.LoadingState.HttpRequest(url)
        req:onFailed('+', self.m_callback_fail)
        req:onSuccess('+', self.m_callback_success)
        req:onTimeOut('+', self.m_callback_timeout)
        req:SendRequest()
        table.insert(self._requests,req)
        self._requestHostMap[url] = hosts[i]
        Logger.Log(string.format("CheckResVersionState::send:{%s}",url))
    end
end
function CheckResVersionState:ShowCallBackMessage(req,downloadHandler)
    if self.reqSuccess == true then
        return
    end
    Logger.Log(string.format("CheckResVersion::OnRequestSuccess::url:{%s} , raw json:{%s}",req.url,downloadHandler.text))
    self.reqSuccess = true

    self.selectReq = req
    self.downloadHandler = downloadHandler
end

function CheckResVersionState:UpdateHandler()
    local downloadHandler = self.downloadHandler
    local req = self.selectReq
    if downloadHandler ==nil  then
        Logger.LogError("downLoadHandler nil")
        return
    end
    if req == nil then
        Logger.LogError("selectReq nil")
        return
    end
    
    local _tabJson = CommonUtil.JsonDecode(downloadHandler.text)
    -- 这里表示数据解析出错了，但是不能直接return，否则卡死在Loading界面了，
    -- 在这种情况下，就让用户用老的版本直接进入游戏了，能玩点什么就玩点什么吧
    if (table.IsNullOrEmpty(_tabJson)) then
        Logger.LogError("json error.use package version.err:{%s}",downloadHandler.text)
        PostEventLog.Record(PostEventLog.Defines.CHECK_VERSION_FAILED)
        self._startupLoading:SetState(Const.LoadingState.LoadDataTable)
        return
    end

    local _hotUpdateMsg = _tabJson["hotUpdateMsg"] or ""
    local _updateType = _tabJson["updateType"] or ""
    _updateType = toInt(_updateType)
    local _downloadUrl = _tabJson["downloadurl"] or ""
    self:SaveManifestVersion(_hotUpdateMsg)
    if self._requestHostMap[req.url]~=nil then
        for i=1,#self.hostList do
            if self.hostList[i].cv == req.url then
                self._startupLoading:SelectOnlineGateServer(self.hostList[i].gsl,self.hostList[i].lineName)--更新当前选中的getServerList线路
            end
        end
        --打点输出
        local lineName = AppStartupLoading:GetInstance():ServerListHostName()
        print(string.format("CheckResVersion:ChooseLine:{%s}",lineName))
        PostEventLog.Record(PostEventLog.Defines.CHECK_VERSION_SUCCESS,lineName)
    else
        Logger.LogError("CheckResVersion OnRequestSuccess Get Host Error !")
    end
    local str = "Google Play";
    if (CS.Application.platform == CS.RuntimePlatform.IPhonePlayer) then
        str = "AppStore"
    end

    if (_updateType == 1) then
        local _content = Localization:GetString(129013, str)
        UIUtil.ShowMessage(_content, 2, "110003", "", function()
            if ( not string.IsNullOrEmpty(_downloadUrl)) then
                CS.UnityEngine.Application.OpenURL(_downloadUrl);
            end
        end, function()
            self._startupLoading:SetState(Const.LoadingState.DownloadManifest)
        end)
    elseif _updateType == 2 then
        local _content = Localization:GetString(129013, str)
        UIUtil.ShowMessage(_content, 1, "110003", "", function()
            if ( not string.IsNullOrEmpty(_downloadUrl)) then
                CS.UnityEngine.Application.OpenURL(_downloadUrl);
            end
        end, function()
            if ( not string.IsNullOrEmpty(_downloadUrl)) then
                CS.UnityEngine.Application.OpenURL(_downloadUrl);
            end
        end)
    else
        self._startupLoading:SetState(Const.LoadingState.DownloadManifest)
    end
    self:StopAllRequest()
end


function CheckResVersionState:SaveManifestVersion(data)
    -- GameRes,199,1604915,133156690;DataTable,137,7812,982235397;
    if (string.IsNullOrEmpty(data)) then
        return
    end
    local _tabHotUpdate = string.split(data, ';')
    if (table.count(_tabHotUpdate) <= 0) then
        return
    end
    for _, item in pairs(_tabHotUpdate) do
        if (string.IsNullOrEmpty(item)) then
            goto continue
        end
        local _tabData = string.split(item, ',')
        if (table.count(_tabData) >= 4) then
            local _name = _tabData[1]
            local _version = _tabData[2]
            local _size = _tabData[3]
            local _crc = _tabData[4]
            local _content = string.format("%s,%s,%s", _version, _size, _crc)
            local _versionFile = string.lower(_name) .. ".version"
            _versionFile = CS.GameEntry.Resource:GetTempDownloadPath(_versionFile);
            util.file_save(_versionFile,_content)
            print("**** return -> 保存文件 " .. _versionFile .. " content: " .. _content)
        end
        ::continue::
    end
end

function CheckResVersionState:StopAllRequest()
    if self._requests~=nil then
        for k,v in pairs(self._requests) do
            if (self.m_callback_fail ~= nil) then
                v:onFailed('-', self.m_callback_fail)
            end
            if (self.m_callback_success ~= nil) then
                v:onFailed('-', self.m_callback_success)
            end
            if (self.m_callback_timeout ~= nil) then
                v:onFailed('-', self.m_callback_timeout)
            end
            v:Dispose()
        end
        self._requests = {}
    end
end

return CheckResVersionState