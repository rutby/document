---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 4/3/2024 下午2:27
---
local LoadingComponent = MonoClass("LoadingComponent")
local Const = require("Loading.Const")
local Screen = CS.UnityEngine.Screen
local Localization = CS.GameEntry.Localization
local time_sec = 5.0
local all_tips = {}
local all_tips_temp = {}
local _txt_tips
local _state_text

-- UI Node
local version_path = "Version"
local bg_path = "Background"
local slider_path = "ProgressBg/Slider"
local local_path = "ProgressBg/Slider/LoadText"
--local loadingSliderImage_path = "ProgressBg/Slider/LoadSliderImage"
local loadingSliderText_path = "ProgressBg/Slider/percentText"
local tip_path = "ProgressBg/Tip"
local download_path = "ProgressBg/Download"
local wifi_path = "WifiCircleBg"


local State = { None = 0, Download = 1, Login = 2, DownloadMainRes = 3}

local LoadingStateText =
{
    [Const.LoadingState.None] = 0,
    [Const.LoadingState.Logo] = 0,
    [Const.LoadingState.Permission] = 121015,
    [Const.LoadingState.CheckResVersion] = 121016,
    [Const.LoadingState.DownloadManifest] = 121017,
    [Const.LoadingState.DownloadUpdate] = 121018,
    [Const.LoadingState.LoadDataTable] = 121019,
    [Const.LoadingState.GetServerList] = 121020,
    [Const.LoadingState.GetServerStatus] = 121021,
    [Const.LoadingState.ConnectGame] = 121022,
    [Const.LoadingState.Login] = 121023,
    [Const.LoadingState.AppUpdate] = 0,
    [Const.LoadingState.PushInit] = 121024,
    [Const.LoadingState.MailIdentify] = 121025,
    [Const.LoadingState.LoadScene] = 121026,
    [Const.LoadingState.EnterGame] = 0,
    [Const.LoadingState.LoadingError] = 120953,
}

function LoadingComponent:__delete()
    Logger.Log("LoadingComponent:__delete")
end


function LoadingComponent:OnLoadingStateChange(state)
    if _state_text == nil  then
        return
    end

    --Logger.Log("OnLoadingStateChange " .. tostring(state))
    local text = tonumber(LoadingStateText[state])
    if text ~= nil and text > 0 then
        _state_text:SetLocalText(text)
    else
        _state_text.text = ""
    end
end

function LoadingComponent:InitStateText()
    local objState = self.transform:Find("State")
    if objState ~= nil then
        _state_text = objState:GetComponent(typeof(CS.TextMeshProUGUIEx))
    end

end

function LoadingComponent:InitUIComponent()
    self.gameObject = self.gameObject
    self.transform = self.gameObject.transform

    local t = self.transform:Find(version_path)
    self.versionText = t:GetComponent(typeof(CS.TextMeshProUGUIEx))
    self.background = self.transform:Find(bg_path):GetComponent(typeof(CS.UnityEngine.UI.Image))
    self.progressBar = self.transform:Find(slider_path):GetComponent(typeof(CS.UnityEngine.UI.Slider))

    self.loadingText = self.transform:Find(local_path):GetComponent(typeof(CS.TextMeshProUGUIEx))
    --self.loadingSliderImage = self.transform:Find(loadingSliderImage_path):GetComponent(typeof(CS.UnityEngine.UI.Image))
    self.loadingSliderText = self.transform:Find(loadingSliderText_path):GetComponent(typeof(CS.TextMeshProUGUIEx))
    --self.sliderTransform = self.loadingSliderImage.gameObject.transform

    self.tipText = self.transform:Find(tip_path):GetComponent(typeof(CS.TextMeshProUGUIEx))
    self.downloadText = self.transform:Find(download_path):GetComponent(typeof(CS.TextMeshProUGUIEx))

    self.logo_path = self.transform:Find(download_path):GetComponent(typeof(CS.UnityEngine.UI.Image))
    self.wifiObj = self.transform:Find(wifi_path).gameObject
    
    -- 上一次的loading进度
    self._last_process = -1
end

function LoadingComponent:RefreshLocalizationText()
    self.loadingText.text = Localization:GetString(100231);
    local appVersionStr = string.format("%s(%d)", App.GetVersion(), App.GetVersionCode());
    local resVersionStr = App.GetResVersion();
    self.versionText.text = Localization:GetString(100050) .. appVersionStr .. "\n"
            .. Localization:GetString(100051) .. resVersionStr;
    
end


function LoadingComponent:SetProgressBar(value)
    --value = math.floor(value * 100) / 100

    if self._last_process ~= value then
        Logger.Log(">>> loading progress: ", tostring(value))

        self._last_process = value
        self.progressBar.value = value
        self.loadingSliderText.text = tostring(math.floor(value * 100)) .. "%";
        --self.sliderTransform:Set_localPosition((467.0 * 2 * value - 467.0), 22.4, 0);
    end
end

function LoadingComponent:OnStartBundleDownload()
    Logger.Log("OnStartBundleDownload");


    self.state = State.Download;
    self._last_process = -1
    self:SetProgressBar(0);
    self.loadingText.gameObject:SetActive(false)
end

function LoadingComponent:OnStartLogin()
    Logger.Log("OnStartLogin");

    self.state = State.Login;

    --self.logoImage.gameObject:SetActive(false);
    self.loadingText.gameObject:SetActive(true);

    self._last_process = -1
    self:SetProgressBar(0);
    self.downloadText.text = "";
end

function LoadingComponent:OnNetworkRetry(ud)
    local showWifi = ud or false
    self.wifiObj:SetActive(showWifi);
end

function LoadingComponent:DoInit()
    --Logger.Log('#LoadingComponent# step in DoInit')

    self.on_BeginDownloadUpdate = function() self:OnStartBundleDownload() end
    self.on_EndDownloadUpdate = function() self:OnStartLogin() end
    self.on_NetworkRetry = function(ud) self:OnNetworkRetry(ud) end
    self.on_LoadingState = function(state) self:OnLoadingStateChange(state) end
    self.on_Destroy = function()
        Logger.Log("self.on_Destroy")
        self:OnDestroy()
    end

    EventManager:GetInstance():AddListener(EventId.BeginDownloadUpdate, self.on_BeginDownloadUpdate);
    EventManager:GetInstance():AddListener(EventId.EndDownloadUpdate, self.on_EndDownloadUpdate);
    EventManager:GetInstance():AddListener(EventId.NetworkRetry, self.on_NetworkRetry);
    EventManager:GetInstance():AddListener(EventId.LoadingState, self.on_LoadingState)
    EventManager:GetInstance():AddListener(EventId.SU_ForceDestroyLoadingListener, self.on_Destroy)

    CS.GameEntry.Sdk:HideSplash()
    self.background.gameObject:SetActive(true)
    self.wifiObj:SetActive(false)

    self.loadingText.text = "";
    self.downloadText.text = "";
    self.tipText.text = "";
    self.versionText.text = "";
    self:SetProgressBar(0);
    self.state = State.Login;
    self.isRefreshLocalizationText = false;

    --self:RefreshLocalizationText()
end

function LoadingComponent:Start()
    --Logger.Log("LoadingView OnStart")
    --	self:InitUIComponent()
    self:DoInit()
    
    self:InitStateText()
    self.isUpdate = true
end


function LoadingComponent:Awake()
    --Logger.Log("LoadingView Awake")
    self.isUpdate = false
    self:InitUIComponent()
end

function LoadingComponent:Update()
    --if CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.K) then
    --AppStartupLoading:GetInstance().UILoading.enabled = false
    --CS.ApplicationLaunch.Instance:ReloadGame()
    --return
    --end
    if self.isUpdate == nil or self.isUpdate ==false then
        return
    end
    ---- 这这里驱动一下主体
    --AppStartupLoading:GetInstance():Update()


    if (self.showLogo) then
        self.totalTime = self.totalTime + Time.deltaTime;
        if (self.totalTime >= 2.5) then

            --self.logoImage.gameObject:SetActive(false);
            self.showLogo = false;
            self.totalTime = 0;
        end
    end

    -- 这里做了一下处理，如果多语言还没有加载完毕，就暂时不处理
    -- 而且只处理一次
    local IsLangInitDone =CS.GameEntry.Localization.IsInitDone
    if (IsLangInitDone and (not self.isRefreshLocalizationText)) then
        self:RefreshLocalizationText();
        self.isRefreshLocalizationText = true;
    end

    if (self.state == State.Login) then
        self:SetProgressBar(AppStartupLoading:GetInstance():GetLoadingProgress());

    elseif (self.state == State.Download) then

        local downloadProgress = AppStartupLoading:GetInstance():GetBundleDownloadProgress()
        local totalByte = AppStartupLoading:GetInstance():GetBundleDownloadTotalBytes()
        local totalMB = totalByte / (1024 * 1024)
        local progressMB = downloadProgress * totalMB
        local _progressStr = string.format("%.2f", progressMB)
        local _totalMb = string.format("%.2f", totalMB)

        if IsLangInitDone then
            self.downloadText.text = Localization:GetString("129045", _progressStr, _totalMb)
        end

        self:SetProgressBar(downloadProgress)
    end
end


function LoadingComponent:Destroy()
end

function LoadingComponent:OnDestroy()
    Logger.Log("LoadingComponent:OnDestroy")
    self.isUpdate = false

    EventManager:GetInstance():RemoveListener(EventId.SU_ForceDestroyLoadingListener, self.on_Destroy);
    EventManager:GetInstance():RemoveListener(EventId.BeginDownloadUpdate, self.on_BeginDownloadUpdate);
    EventManager:GetInstance():RemoveListener(EventId.EndDownloadUpdate, self.on_EndDownloadUpdate);
    EventManager:GetInstance():RemoveListener(EventId.NetworkRetry, self.on_NetworkRetry);
    --EventManager:GetInstance():RemoveListener(EventId.ReInitLoadingLuaState,  InitLuaState);

    EventManager:GetInstance():RemoveListener(EventId.LoadingState, self.on_LoadingState)
end


return LoadingComponent