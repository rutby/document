---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 24224.
--- DateTime: 2020/7/6 15:21
---提供游戏时间管理，时间类工具函数
local UITimeManager = BaseClass("UITimeManager", Singleton)
local Localization = CS.GameEntry.Localization
local socket = require "socket"
local function __init(self)
    self.serverDeltaTime = 0
    self.changeDeltaTime = -2*3600000
end

local function __delete(self)
    self.serverDeltaTime = nil
    self.changeDeltaTime = nil
end

local function UpdateServerMsDeltaTime(self,ms)
    
    local nowTime = socket.gettime()*1000;--lua提供的获取的时间接口以秒为单位
    self.serverDeltaTime = ms - nowTime
end
--游戏中默认时间为毫秒
--获取游戏当前时间（毫秒）
local function GetServerTime(self)
    local nowTime = socket.gettime()*1000;
    return nowTime + self.serverDeltaTime
end
--获取游戏当前时间（秒）
local function GetServerSeconds(self)
    local time = math.modf(self:GetServerTime()/1000)
    return time
end
-- 游戏内时间戳格式化
-- 无时区概念
local function TimeStampToTimeForServer(self, timeStamp)
    local time = math.modf((timeStamp+self.changeDeltaTime)/1000)  --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("!*t", time)
    local format_time = string.format("%d-%d-%d %02d:%02d:%02d",format.year,format.month,format.day,format.hour,format.min,format.sec)
    return format_time
end
-- 游戏内时间戳格式化
-- 年/月/日  时：分
local function TimeStampToTimeForServerMinute(self, timeStamp)
    local time = math.modf((timeStamp+self.changeDeltaTime)/1000)  --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("!*t", time)
    local format_time = string.format("%d-%d-%d %02d:%02d",format.year,format.month,format.day,format.hour,format.min)
    return format_time
end

--仅显示时：分：秒
local function TimeStampToTimeForServerSimple(self,timeStamp)
    local time = math.modf((timeStamp+self.changeDeltaTime)/1000) --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("!*t", time)
    local format_time = string.format("%02d:%02d:%02d",format.hour,format.min,format.sec)
    return format_time
end
--仅显示小时
local function TimeStampToTimeForServerOnlyHour(self,timeStamp)
    local time = math.modf((timeStamp+self.changeDeltaTime)/1000) --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("!*t", time)
    local format_time = string.format("%02d",format.hour)
    return format_time
end

-- 游戏内时间戳格式化(用于聊天及邮件)
-- 根据时区的不同进行相应显示
-- y/m/d
local function TimeStampToDayForLocal(self,timeStamp)
    local time = math.modf((timeStamp+self.changeDeltaTime)/1000) --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("!*t", time)
    local format_time = string.format("%d/%d/%d",format.year,format.month,format.day)
    return format_time
end

local function TimeStampToDayTbForLocal(self, timeStamp)
    local time = math.modf((timeStamp+self.changeDeltaTime)/1000) --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("!*t", time)
    return format.year,format.month,format.day
end

-- 游戏内时间戳格式化(用于聊天及邮件)
-- 根据时区的不同进行相应显示
local function TimeStampToTimeForLocal(self,timeStamp)
    local time = math.modf(timeStamp/1000) --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("*t", time)
    local format_time = string.format("%d-%d-%d %02d:%02d:%02d",format.year,format.month,format.day,format.hour,format.min,format.sec)
    return format_time
end
--用于聊天和邮件
--仅显示时：分：秒
local function TimeStampToTimeForLocalSimple(self,timeStamp)
    local time = math.modf(timeStamp/1000) --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("*t", time)
    local format_time = string.format("%02d:%02d:%02d",format.hour,format.min,format.sec)
    return format_time
end

-- 年/月/日  时：分
-- 根据时区的不同进行相应显示
local function TimeStampToTimeForLocalMinute(self,timeStamp)
    local time = math.modf(timeStamp/1000) --Lua的除法结果是保留小数的,先确保结果为整数
    local format = os.date("*t", time)
    local format_time = string.format("%d-%d-%d %02d:%02d",format.year,format.month,format.day,format.hour,format.min)
    return format_time
end

-- 返回对应的月/日 --LOCAL 
local function TimeStampToMD(self, second)
    local format = os.date("*t", second)
    local format_time = string.format("%0d-%0d",format.month,format.day)
    return format_time
end
-- 返回对应的年/月/日 --SERVER
local function GetTimeToMD(self, second)
    local format = os.date("!*t", second+(self.changeDeltaTime/1000))
    local format_time = string.format("%d-%0d-%0d",format.year,format.month,format.day)
    return format_time
end

--尽可能用ms方法,统一接口
local function SecondToFmtString(self,secs)
    local temp = ""
    local day = math.modf(secs / (OneDayTime))
    local hour = math.floor(math.modf(secs/(60*60))%24)
    local minute = math.floor(math.modf(secs/60)%60)
    local second = math.floor(secs%60)
    if secs>= (OneDayTime) then
        temp =  string.format("%dd\u{00A0}%02d:%02d:%02d",day,hour, minute, second)
    else
        temp =  string.format("%02d:%02d:%02d",hour,minute,second)
    end
    return temp
end

local function SecondToFmtStringWithoutDay(self,secs)
    local temp = ""
    local hour = math.modf(secs/(60*60))
    local minute = math.modf(secs/60)%60
    local second = math.floor(secs%60)
    temp =  string.format("%02d:%02d:%02d",hour,minute,second)
    return temp
end

local function SecondToFmtStringWithoutHour(self,secs)
    local temp = ""
    local minute = math.modf(secs/60)
    local second = math.floor(secs%60)
    temp =  string.format("%02d:%02d",minute,second)
    return temp
end

local function MilliSecondToFmtString(self,milliSecond)
    local secs,delta = math.modf(milliSecond/1000)
    if delta > 0 then
        secs = secs + 1
    end
    return self:SecondToFmtString(secs)
end

local function MilliSecondToFmtStringByNum(self,milliSecond,isNeedAll)
    local secs,delta = math.modf(milliSecond/1000)
    if delta > 0 then
        secs = secs + 1
    end
    --local temp = ""
    local day = math.modf(secs / (OneDayTime))
    local hour = math.floor(math.modf(secs/(60*60))%24)
    local minute = math.floor(math.modf(secs/60)%60)
    local second = math.floor(secs%60)
    --返回每一个位置的数字
    local tab = {}
    if secs>= (OneDayTime) then
        tab[1] = string.format("%dd",day)
        tab[2] = string.format("%02d",hour)
        tab[3] = string.format("%02d",minute)
        if isNeedAll then
            tab[4] = string.format("%02d",second)
        end
        --temp =  string.format("%dd\u{00A0}%02d:%02d:%02d",day,hour, minute, second)
    else
        tab[1] = string.format("%02d",hour)
        tab[2] = string.format("%02d",minute)
        tab[3] = string.format("%02d",second)
        --temp =  string.format("%02d:%02d:%02d",hour,minute,second)
    end
    return tab
end

local function MillisionSecToWeekCardFormat(self, millisionSec)
    local secs,delta = math.modf(millisionSec/1000)
    if delta > 0 then
        secs = secs + 1
    end
    
    local temp = ""
    local day = math.modf(secs / (OneDayTime))
    local hour = math.modf(secs/(60*60))%24
    local minute = math.modf(secs/60)%60
    local second = math.floor(secs%60)
    if secs>= (OneDayTime) then
        local strDay = Localization:GetString("100104")
        temp = Localization:GetString("320486", string.format("%d%s\u{00A0}%s:%02d:%02d",day, strDay,hour, minute, second)) 
    else
        temp = Localization:GetString("320486", string.format("%02d:%02d:%02d",hour,minute,second))
    end
    return temp
    --millisionSec
end

local function MilliSecondToFmtStringWithoutDay(self,milliSecond)
    local secs,delta = math.modf(milliSecond/1000)
    if delta > 0 then
        secs = secs + 1
    end
    return self:SecondToFmtStringWithoutDay(secs)
end

local function MilliSecondToFmtStringWithoutHour(self,milliSecond)
    local secs,delta = math.modf(milliSecond/1000)
    if delta > 0 then
        secs = secs + 1
    end
    return self:SecondToFmtStringWithoutHour(secs)
end

local function  MilliSecondToFmtStringSpecial(self,milliSecond)
    local secs,delta = math.modf(milliSecond/1000)
    if delta > 0.5 then
        secs = secs + 1
    end
    local temp = ""
    local day = math.modf(secs / (OneDayTime))
    local hour = math.modf(secs/(60*60))%24
    local minute = math.modf(secs/60)%60
    local second = math.floor(secs%60)
    if day>= 1 then
        if hour > 0 then
            temp = string.format("%dd%dh",day,hour)
        else
            temp = string.format("%dd",day)
        end
    elseif hour>=1 then
        if minute > 0 then
            temp = string.format("%dh%dm",hour,minute)
        else
            temp = string.format("%dh",hour)
        end
    elseif minute>=1 then
        if second > 0 then
            temp = string.format("%dm%ds",minute,second)
        else
            temp = string.format("%dm",minute)
        end
    else
        temp = string.format("%ds",second)
    end
    return temp
end
local function SecondToFmtStringForCountdown(self,secs)
    local temp = ""
    local day = math.modf(secs / (OneDayTime))
    local hour = math.modf(secs/(60*60))
    local minute = math.modf(secs/60)
    local second = math.floor(secs)
    if day>= 1 then
        temp = string.format("%dd",day)
    elseif hour>=1 then
        temp = string.format("%dh",hour)
    elseif minute>=1 then
        temp = string.format("%dmin",minute) 
    else
        temp = string.format("%ds",second)
    end 
    
    return temp
end
--中文表示
local function SecondToFmtStringForCountdownByDialog(self,secs)
    local temp = ""
    local day = math.modf(secs / (OneDayTime))
    local hour = math.modf(secs/(60*60))
    local minute = math.modf(secs/60)
    local second = math.floor(secs)
    if day>= 1 then
        temp = day..Localization:GetString("100104") --100104
    elseif hour>=1 then
        temp =hour..Localization:GetString("100166")--100166
    elseif minute>=1 then
        temp = minute..Localization:GetString("100165")--100165
    else
        temp = Localization:GetString("130076",second) -- 
    end

    return temp
end

local function MilliSecondToFmtStringForCountdown(self,milliSecond)
    local secs,delta = math.modf(milliSecond/1000)
    if delta > 0 then
        secs = secs + 1
    end
    return self:SecondToFmtStringForCountdown(secs)
end

--获取到第二日凌晨的剩余时间 返回秒数
local function GetResSecondsTo24(self)
    return OneDayTime - (self:GetServerSeconds()+(self.changeDeltaTime/1000)) % OneDayTime
end

--获取到第二周剩余时间 秒
local function GetResSecondsToOneWeek(self)
    return OneWeekTime - (self:GetServerSeconds()+(self.changeDeltaTime/1000)) % OneWeekTime
end

--获取该时间的当天0点 例 11点返回的是10点
---@param timeStamp number 秒
local function GetTodayZeroServerTime(self,timeStamp)
    return timeStamp - (timeStamp+(self.changeDeltaTime/1000)) % OneDayTime
end

local function GetNextDayMs(self)
    local nextZero = self:GetServerSeconds() + self:GetResSecondsTo24()
    return nextZero * 1000
end

--判断是否同一天
local function IsSameDayForServer(self, sec1, sec2)
    if (math.abs(sec1 - sec2) > 86400) then
        return false
    end
    sec1 = sec1 + (self.changeDeltaTime/1000)
    sec2 = sec2 + (self.changeDeltaTime/1000)

    local s1 = tonumber(os.date("!%Y%m%d", sec1))
    local s2 = tonumber(os.date("!%Y%m%d", sec2))
    if (s1 == s2) then
        return true
    end

    return false
end
--判断两个时间相差几个24小时
local function GetBetweenDaysForServer(self,sec1,sec2)
    local delta = math.abs(sec1 - sec2)
    local x,y = math.modf(delta/86400)
    return x
end
--判断两个时间相差几天（本地时间）例：北京时间1月1日23:59 与北京时间1月2日 00:01 相差1天
local function GetBetweenDaysForLocal(self, sec1, sec2)
    sec1 = math.modf(sec1)
    sec2 = math.modf(sec2)
    local format1 = os.date("*t", sec1)
    local format2 = os.date("*t", sec2)
    local s1 = sec1 - format1.hour * 3600 - format1.min * 60 - format1.sec
    local s2 = sec2 - format2.hour * 3600 - format2.min * 60 - format2.sec
    local delta = math.abs(s1 - s2)
    local x, y = math.modf(delta / 86400)
    return x
end

--用于聊天和邮件
--是否是同一天
local function IsSameDayForLocal(self,sec1,sec2)
    
	if (math.abs(sec1 - sec2) > 86400) then
		return false
	end
	local s1 = tonumber(os.date("%Y%m%d", sec1))
	local s2 = tonumber(os.date("%Y%m%d", sec2))
	if (s1 == s2) then
		return true
	end
	
	return false
	
    --local sec1Format = os.date("*t", sec1)
    --local sec2Format = os.date("*t", sec2)
    --if sec2Format.year == sec1Format.year and sec2Format.month == sec1Format.month and sec2Format.day == sec1Format.day then
        --isSameDay = true
    --end
    --return isSameDay
end

--尽可能用ms方法,统一接口
local function SecondToClock(self,secs)
    local temp = ""
    local hour = math.modf(secs/(60*60))%24
    local minute = math.modf(secs/60)%60
    temp =  string.format("%02d %02d",hour, minute)
    return temp
end

local function MilliSecondToClock(self,milliSecond)
    local secs,delta = math.modf(milliSecond/1000)
    if delta > 0 then
        secs = secs + 1
    end
    return self:SecondToClock(secs)
end

-- 返回月/日 小时:分钟
-- 目前只在聊天中使用
local function GetChatShowTime(self, second)
	local _curServerTime = GetServerSeconds(self)
	if IsSameDayForLocal(self, _curServerTime, second) then
		return os.date("%H:%M", second)
	end
	
	return os.date("%m-%d %H:%M", second)
end


--[[
    这个地方显示
    {0}分钟前
    {0}小时前
    {0}天前
    月-日
]]
local function GetMailShowTime(self, second,isServer)
    local _createTime = second / 1000
    local _curTime = self:GetServerSeconds()
    local _deltaTime = _curTime - _createTime
    local _oneHour = 60*60
    local _oneDay = _oneHour*24
    local _oneMonth = _oneDay*30
    if _deltaTime < 60 then
        return Localization:GetString("310105")
    elseif _deltaTime >= 60 and _deltaTime < _oneHour then
        return Localization:GetString("310107", _deltaTime // 60)
    elseif _deltaTime >= _oneHour and _deltaTime < _oneDay then
        return Localization:GetString("310108", _deltaTime//_oneHour)
    elseif _deltaTime >= _oneDay and _deltaTime < _oneMonth then
        return Localization:GetString("310109", _deltaTime//_oneDay) 
    else
        if isServer~=nil and isServer == true then
            return self:GetTimeToMD(Mathf.Floor(_createTime))
        else
            return self:TimeStampToMD(Mathf.Floor(_createTime))
        end
        
    end
end

--今天零点
local function TodayZero(self)
    return LuaEntry.GlobalData.tomorrow - OneDayTime * 1000
end

local weekTab = {
    ["0"] = 1,
    ["1"] = 2,
    ["2"] = 3,
    ["3"] = 4,
    ["4"] = 5,
    ["5"] = 6,
    ["6"] = 7,
}

local function CheckIfIsSameWeek(self, smallMs)
    local serverT = self:GetServerTime()
    local intervalMs = math.abs(serverT - smallMs)
    if intervalMs > (7 * 24 * 60 * 60 * 1000) then
        return false
    else
        local smallS = math.modf(smallMs / 1000)
        local ServerS = math.modf(serverT / 1000)
        local isSameDay = self:IsSameDayForServer(smallS, ServerS)
        if isSameDay then
            return true
        else
            local weekIndex1 = self:GetWeekdayIndex(smallMs)
            local weekIndex2 = self:GetWeekdayIndex(serverT)
            if smallMs<serverT then
                return weekIndex2 > weekIndex1
            else
                return weekIndex2 < weekIndex1
            end
        end
    end
end

local function GetWeekdayIndex(self, timeMs)
    --local serverT = self:GetServerTime()
    --local timeStamp = timeMs / 1000
    local timeStamp = math.modf((timeMs+self.changeDeltaTime)/1000)
    --local timeStamp =  math.modf(timeStamp)-- (serverT+self.changeDeltaTime)/1000
    local newDate = os.date("!*t", timeStamp)
    local weekIndex = self:GetWeekDay(newDate.year, newDate.month, newDate.day)
    return weekIndex
end

--周x
local function GetWeekDay(self, y,m,d)
    if m == 1 or m == 2 then
        m = m + 12
        y = y - 1
    end
    local m1,_ = math.modf(3 * (m + 1) / 5)
    local m2,_ = math.modf(y / 4)
    local m3,_ = math.modf(y / 100)
    local m4,_ = math.modf(y / 400)

    local iWeek = (d + 2 * m + m1 + y + m2 - m3  + m4 ) % 7
    
    return weekTab[tostring(iWeek)]
end

local function GetNextWeekDay(self, day)
    local curTime = self:GetServerTime()
    --curTime = math.modf(curTime+self.changeDeltaTime)
    local curWeekday = self:GetWeekdayIndex(curTime)
    local dayOffset = day > curWeekday and day - curWeekday or day + 7 - curWeekday
    local targetDay = curTime + dayOffset * 24 * 3600000
    local targetTs = self:GetTodayZeroServerTime(math.modf(targetDay / 1000))
    return math.modf(targetTs * 1000)
end

local function GetFormattedTimeMs(self, milliSecond)
    return self:GetFormattedTime(milliSecond / 1000)
end

local function GetFormattedTime(self, second)
    local s = math.floor(second)
    local d = s // 86400
    s = s % 86400
    local h = s // 3600
    s = s % 3600
    local m = s // 60
    s = s % 60
    if d > 0 then
        return Localization:GetString("100036", d, h)
    elseif h > 0 then
        return Localization:GetString("100037", h, m)
    else
        return string.format("%02d:%02d", m, s)
    end
end

UITimeManager.__init = __init
UITimeManager.__delete = __delete
UITimeManager.UpdateServerMsDeltaTime = UpdateServerMsDeltaTime
UITimeManager.GetServerTime = GetServerTime
UITimeManager.GetServerSeconds = GetServerSeconds
UITimeManager.TimeStampToTimeForServer = TimeStampToTimeForServer
UITimeManager.TimeStampToTimeForLocal =TimeStampToTimeForLocal
UITimeManager.TimeStampToDayForLocal =TimeStampToDayForLocal
UITimeManager.TimeStampToDayTbForLocal =TimeStampToDayTbForLocal
UITimeManager.SecondToFmtString = SecondToFmtString
UITimeManager.SecondToFmtStringWithoutDay = SecondToFmtStringWithoutDay
UITimeManager.SecondToFmtStringWithoutHour = SecondToFmtStringWithoutHour
UITimeManager.MilliSecondToFmtString = MilliSecondToFmtString
UITimeManager.MillisionSecToWeekCardFormat = MillisionSecToWeekCardFormat
UITimeManager.MilliSecondToFmtStringByNum = MilliSecondToFmtStringByNum
UITimeManager.MilliSecondToFmtStringWithoutDay = MilliSecondToFmtStringWithoutDay
UITimeManager.MilliSecondToFmtStringWithoutHour = MilliSecondToFmtStringWithoutHour
UITimeManager.GetResSecondsTo24 = GetResSecondsTo24
UITimeManager.IsSameDayForLocal = IsSameDayForLocal
UITimeManager.IsSameDayForServer = IsSameDayForServer
UITimeManager.TimeStampToTimeForLocalSimple =TimeStampToTimeForLocalSimple
UITimeManager.MilliSecondToFmtStringForCountdown = MilliSecondToFmtStringForCountdown
UITimeManager.SecondToFmtStringForCountdown = SecondToFmtStringForCountdown
UITimeManager.SecondToClock = SecondToClock
UITimeManager.MilliSecondToClock = MilliSecondToClock
UITimeManager.GetChatShowTime = GetChatShowTime
UITimeManager.TimeStampToMD = TimeStampToMD
UITimeManager.GetMailShowTime = GetMailShowTime
UITimeManager.GetTimeToMD = GetTimeToMD
UITimeManager.TodayZero = TodayZero
UITimeManager.SecondToFmtStringForCountdownByDialog = SecondToFmtStringForCountdownByDialog
UITimeManager.MilliSecondToFmtStringSpecial = MilliSecondToFmtStringSpecial
UITimeManager.GetWeekdayIndex = GetWeekdayIndex
UITimeManager.GetWeekDay = GetWeekDay
UITimeManager.CheckIfIsSameWeek = CheckIfIsSameWeek
UITimeManager.GetNextWeekDay = GetNextWeekDay
UITimeManager.TimeStampToTimeForServerMinute = TimeStampToTimeForServerMinute
UITimeManager.TimeStampToTimeForServerSimple = TimeStampToTimeForServerSimple
UITimeManager.GetTodayZeroServerTime =GetTodayZeroServerTime
UITimeManager.TimeStampToTimeForLocalMinute = TimeStampToTimeForLocalMinute
UITimeManager.TimeStampToTimeForServerOnlyHour = TimeStampToTimeForServerOnlyHour
UITimeManager.GetNextDayMs = GetNextDayMs
UITimeManager.GetFormattedTimeMs = GetFormattedTimeMs
UITimeManager.GetFormattedTime = GetFormattedTime
UITimeManager.GetBetweenDaysForServer =GetBetweenDaysForServer
UITimeManager.GetBetweenDaysForLocal =GetBetweenDaysForLocal
UITimeManager.GetResSecondsToOneWeek = GetResSecondsToOneWeek
return UITimeManager