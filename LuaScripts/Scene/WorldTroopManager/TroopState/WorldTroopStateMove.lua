---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 27/3/2024 下午2:21
---
local base = WorldTroopStateBase
local WorldTroopStateMove = BaseClass("WorldTroopStateMove",WorldTroopStateBase)
local Const = require"Scene.WorldTroopManager.Const"

function WorldTroopStateMove:__init(worldTroop,stateMachine)
    base.__init(self,worldTroop,stateMachine)
end

function  WorldTroopStateMove:__delete()
    base.__delete(self)
end

function WorldTroopStateMove:OnStateEnter()
    if self.worldTroop == nil then
        return
    end
    self.script = self.worldTroop:GetMoveMono()
    self:StartMove()
    WorldTroopManager:GetInstance():AddToUpdateList(self.worldTroop:GetMarchUUID())
    self:OnTroopChange()
end

function WorldTroopStateMove:OnStateLeave()
    if self.script ~=nil then
        self.script:StopMove()
    end
    
end

function WorldTroopStateMove:OnStateUpdate()
    if self.endTime ~=nil and self.endTime>0 then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if curTime>self.endTime then
            self.endTime = 0
            self:FinishMove()
        end
    end
end

function WorldTroopStateMove:FinishMove()
    if self.worldTroop == nil then
        return
    end
    local data = self.worldTroop:GetMarchInfo()
    if data~=nil then
        local target = data:GetMarchTargetType()
        if target == MarchTargetType.PICK_GARBAGE or target == MarchTargetType.SAMPLE then
            self:ChangeState(Const.WorldTroopState.PickGarbageMovetoGarbage)
        end
    end
end
function WorldTroopStateMove:OnTroopChange()
    if self.worldTroop == nil then
        return
    end
    if self.worldTroop:IsBattle() == false then
        if self.worldTroop:GetMarchStatus() == MarchStatus.DESTROY_WAIT then
            self:ChangeState(Const.WorldTroopState.AttackBuild)
        elseif self.worldTroop:GetMarchStatus() == MarchStatus.TRANSPORT_BACK_HOME then
            self:ChangeState(Const.WorldTroopState.TransPortBackHome)
        else
            local targetPos = self.worldTroop:GetMarchTargetPos()
            if targetPos~= self.targetPos then
                self:StartMove()
                return
            end
            local moveSpeed = self.worldTroop:GetSpeed()
            if math.abs(moveSpeed-self.moveSpeed)>0.1 then
                self:StartMove()
                return
            end
        end
    else
        self:ChangeState(Const.WorldTroopState.Attack)

    end
end


function WorldTroopStateMove:StartMove()
    if self.script ==nil then
        return
    end
    self.targetPos = self.worldTroop:GetMarchTargetPos()
    local strPath = self.worldTroop:GetPathStr()
    self.moveSpeed = self.worldTroop:GetSpeed()
    local blackEndTime = self.worldTroop:GetMarchBlackEndTime()
    local blackStartTime = self.worldTroop:GetMarchBlackStartTime()
    local startTime = self.worldTroop:GetMarchStartTime()
    self.script:StartMove(self.worldTroop:GetModelTrans(),self.targetPos,strPath,self.moveSpeed,blackStartTime,blackEndTime,startTime,0)
    local marchType = self.worldTroop.marchType
    if marchType == NewMarchType.MONSTER or marchType == NewMarchType.BOSS or marchType == NewMarchType.ACT_BOSS
            or marchType == NewMarchType.PUZZLE_BOSS or marchType == NewMarchType.CHALLENGE_BOSS
            or marchType == NewMarchType.ALLIANCE_BOSS then
        self.worldTroop:PlayAnim(Const.WorldTroopAnim.Anim_Idle)
    else
        self.worldTroop:PlayAnim(Const.WorldTroopAnim.Anim_Run)
    end
    
    local data = self.worldTroop:GetMarchInfo()
    self.endTime = 0
    if data~=nil then
        local target = data:GetMarchTargetType()
        if target == MarchTargetType.PICK_GARBAGE or target == MarchTargetType.SAMPLE then
            self.endTime = data.endTime
        end
    end
end
return WorldTroopStateMove