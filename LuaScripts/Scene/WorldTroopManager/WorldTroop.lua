---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 27/3/2024 上午11:31
---
local WorldTroopStateMachine = require"Scene.WorldTroopManager.WorldTroopStateMachine"
local Const = require"Scene.WorldTroopManager.Const"
local Localization = CS.GameEntry.Localization
local ResourceManager = CS.GameEntry.Resource
local WorldTroop = BaseClass("WorldTroop")

function WorldTroop:__init()
    self.marchUuid = 0
    self.marchType = NewMarchType.NORMAL
    self.sm = nil
    self.requestInst = nil
    self.fdInst = nil
    self.simpleAni = nil
    self.troopDestinationInst = nil
    self.troopDestination = nil
    self.isSHowDestination =false
    self.shieldRequest = nil
    self.normalAttackInstList = {}
    self.skillInstList = nil
    self.keyRequest = nil
    self.transform = nil
    self.monsterLevel = 0
    self.isDelayDestroy = false
    self.delayDestroySec  =0
    self.isAddShield = false
    self.model = nil
    self.icon = nil
    self.anims = nil
    self.gpuAnims = nil
    self.touchEvent =nil
    self.rotationRoot = nil
    self.spriteRenderer = nil
    self.headObj = nil
    self.headBg = nil
    self.headIcon = nil
    self.marchStateIcon = nil
    self.troopUnits = {}
    self.adjuster = nil
    self.defAtkUuid = 0
    self.isBattle = false
    self.detectEventInst = nil
    self._effectPdName = ""--炮弹特效名字
    self._effectPkName = ""--炮口特效名字
    self._effectHitName = ""--被攻击特效名字
    self.UpdateMarchSignal = function(msg) self:UpdateSelfMarch(msg) end
end

function WorldTroop:__delete()
    self.marchUuid = 0
    self.sm = nil
    self.requestInst = nil
    self.fdInst = nil
    self.simpleAni = nil
    self.troopDestinationInst = nil
    self.troopDestination = nil
    self.isSHowDestination =false
    self.shieldRequest = nil
    self.normalAttackInstList = {}
    self.skillInstList = nil
    self.keyRequest = nil
    self.transform = nil
    self.monsterLevel = 0
    self.isDelayDestroy = false
    self.delayDestroySec  =0
    self.isAddShield = false
    self.model = nil
    self.icon = nil
    self.anims = nil
    self.gpuAnims = nil
    self.touchEvent =nil
    self.rotationRoot = nil
    self.spriteRenderer = nil
    self.headObj = nil
    self.headBg = nil
    self.headIcon = nil
    self.marchStateIcon = nil
    self.troopUnits = {}
    self.adjuster = nil
    self.defAtkUuid = 0
end

function WorldTroop:Create(uuid)
    self.marchUuid = uuid
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(uuid)
    if marchInfo~=nil then
        local type = marchInfo:GetMarchType()
        self.marchType = type
        if type == NewMarchType.MONSTER 
                or type == NewMarchType.BOSS 
                or type == NewMarchType.ACT_BOSS 
                or type == NewMarchType.PUZZLE_BOSS
                or type == NewMarchType.MONSTER_SIEGE
                or type == NewMarchType.ALLIANCE_BOSS 
                or type == NewMarchType.CHALLENGE_BOSS then
            self.monsterLevel = DataCenter.MonsterTemplateManager:GetTableValue(marchInfo.monsterId, "level")
            if self.monsterLevel == nil then
                self.monsterLevel = 1
            end
        end
    end
    self:InstantiateTroopObject(marchInfo)
    EventManager:GetInstance():AddListener(EventId.MarchItemUpdateSelf, self.UpdateMarchSignal)
end

function WorldTroop:OnUpdate()
    if self.sm~=nil then
        self.sm:OnUpdate()
    end
    if self.isDelayDestroy then
        self.delayDestroySec = self.delayDestroySec-Time.deltaTime
    end
    self:UpdateTroopUnits()
end

function WorldTroop:Destroy()
    self:DestroyTroopObject()
    if self.marchType == NewMarchType.NORMAL or self.marchType == NewMarchType.ASSEMBLY_MARCH then
        EventManager:GetInstance():Broadcast(EventId.HideTroopAtkBuildIcon,self.marchUuid)
        EventManager:GetInstance():Broadcast(EventId.HideMarchTrans,self.marchUuid)
        EventManager:GetInstance():Broadcast(EventId.HideTroopName,self.marchUuid)
    end
    EventManager:GetInstance():Broadcast(EventId.HideTroopHead,self.marchUuid)
    UIUtil.CloseWorldMarchTileUI(self.marchUuid)
    EventManager:GetInstance():RemoveListener(EventId.MarchItemUpdateSelf, self.UpdateMarchSignal)
end

function WorldTroop:DestroyTroopObject()
    if self.transform~=nil then
        local mono = self.transform:GetComponent(typeof(CS.WorldTroopMove))
        if mono~=nil then
            mono:StopMove()
        end
    end
    if self.fdInst~=nil then
        self.fdInst:Destroy()
        self.fdInst = nil
    end
    if self.troopUnits~=nil then
        for i =1,#self.troopUnits do
            local item = self.troopUnits[i]
            if item~=nil then
                item:Destroy()
            end
        end
        self.troopUnits = {}
    end
    if self.touchEvent~=nil then
        self.touchEvent.onPointerClick = nil
        self.touchEvent = nil
    end
    if self.requestInst~=nil then
        self.requestInst:Destroy()
    end
    if self.shieldRequest~=nil then
        self.shieldRequest:Destroy()
        self.shieldRequest = nil
    end
    if self.keyRequest~=nil then
        self.keyRequest:Destroy()
        self.keyRequest = nil
    end
    self:HideDetectEvent()
    self:RemoveAttack()
    if self.skillInstList~=nil then
        for k,v in pairs(self.skillInstList) do
            v:Destroy()
        end
        self.skillInstList ={}
    end
    self.requestInst = nil
    self.transform = nil
    self.model = nil
    self.icon = nil
    self.anims = nil
    self.gpuAnims = nil
    self.sm = nil
end

function WorldTroop:RemoveAttack()
    if self.normalAttackInstList~=nil then
        for k,v in pairs(self.normalAttackInstList) do
            v:Destroy()
        end
        
        self.normalAttackInstList = {}
    end
end

function WorldTroop:Refresh()
    if self.transform ==nil then
        return
    end
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        if self.marchType~=marchInfo:GetMarchType() then
            self:DestroyTroopObject()
            self.marchType = marchInfo:GetMarchType()
            self:InstantiateTroopObject(marchInfo)
        else
            if self.sm~=nil then
                self.sm:OnTroopChange()
            end
            self:UpdateIconSprite()
            self:UpdateMarchSecretKey()
        end
    end
end

function WorldTroop:InstantiateTroopObject(marchInfo)
    if self.requestInst ~=nil then
        return
    end
    local prefabPath = ""
    local type = marchInfo:GetMarchType()
    local target = marchInfo:GetMarchTargetType()
    if type == NewMarchType.ASSEMBLY_MARCH then
        prefabPath = Const.WorldRallyTroop
    elseif type == NewMarchType.NORMAL or type == NewMarchType.DIRECT_MOVE_MARCH then
        if target == MarchTargetType.SAMPLE then
            prefabPath = Const.WorldTroopSample
        else
            local skinId = marchInfo:GetSkinId()
            local param = CSharpCallLuaInterface.GetMarchSkinNameBySkinId(skinId)
            prefabPath = param.prefabName
            self._effectPdName = param.pdName
            self._effectPkName = param.pkName
            self._effectHitName = param.hitName
            if marchInfo.ownerUid~=LuaEntry.Player.uid then
                if LuaEntry.Player:IsInAlliance() and marchInfo.allianceUid == LuaEntry.Player.allianceId then
                    prefabPath = param.prefabNameAlliance
                elseif LuaEntry.Player.serverType == ServerType.EDEN_SERVER and DataCenter.RobotWarsManager:GetSelfCamp()>0 and DataCenter.GloryManager:IsSameCampByAllianceId(marchInfo.allianceUid) then
                    prefabPath = param.prefabNameCamp
                else
                    prefabPath = param.prefabNameOther
                end 
            end
        end
    elseif type == NewMarchType.MONSTER
            or type == NewMarchType.BOSS
            or type == NewMarchType.CHALLENGE_BOSS
            or type == NewMarchType.MONSTER_SIEGE then
        local model_name = DataCenter.MonsterTemplateManager:GetTableValue(marchInfo.monsterId, "model_name")
        prefabPath = "Assets/Main/Prefabs/Monsters/"..model_name..".prefab"
    elseif type == NewMarchType.SCOUT then
        prefabPath =Const.ScoutTroop
    elseif type == NewMarchType.RESOURCE_HELP then
        prefabPath = Const.ResTransTroop
    elseif type == NewMarchType.ACT_BOSS then
        prefabPath = Const.MonsterActBoss
    elseif type == NewMarchType.PUZZLE_BOSS then
        prefabPath = Const.MonsterActBoss
    elseif type == NewMarchType.ALLIANCE_BOSS then
        prefabPath = Const.AllianceBossModel
    end
    self.requestInst = ResourceManager:InstantiateAsync(prefabPath)
    self.requestInst:completed('+',function()
        if self.requestInst.isError or self.requestInst.gameObject == nil then
            return
        end
        self:OnGameObjectCreate(self.requestInst)
    end)
end

function WorldTroop:OnGameObjectCreate(request)
    request.gameObject.name = Const.marchPath..self.marchUuid
    self.transform = request.gameObject.transform
    self.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
    self.icon = self.transform:Find(Const.iconPath)
    local m1 = self.transform:Find(Const.modelPath1)
    if m1 ==nil then
        m1 = self.transform:Find(Const.modelPath2)
    end
    self.model = m1.gameObject
    self:InitLod(request.gameObject)
    self.anims = self.model:GetComponentsInChildren(typeof(CS.SimpleAnimation),true)
    self.gpuAnims = self.model:GetComponentsInChildren(typeof(CS.GPUSkinningPlayerMono),true)
    local spriteRenderer = self.transform:Find(Const.spritePath)
    if spriteRenderer~=nil then
        self.spriteRenderer = spriteRenderer:GetComponentInChildren(typeof(CS.UnityEngine.SpriteRenderer), true)
    end
    local selectRenderer = self.transform:Find("selectObj")
    if selectRenderer~=nil then
        self.selectRenderer = selectRenderer:GetComponentInChildren(typeof(CS.UnityEngine.SpriteRenderer), true)
    end
    if self.icon~=nil then
        local headObj = self.icon.gameObject.transform:Find("head")
        if headObj~=nil then
            self.headObj = headObj.gameObject
        end
        if self.headObj~=nil then
            self.headBg = self.headObj.transform:Find("headbg"):GetComponentInChildren(typeof(CS.UnityEngine.SpriteRenderer), true)
            self.headIcon = self.headObj.transform:Find("headIcon"):GetComponentInChildren(typeof(CS.UnityEngine.SpriteRenderer), true)
            self.marchStateIcon = self.headObj.transform:Find("stateIcon"):GetComponentInChildren(typeof(CS.UnityEngine.SpriteRenderer), true)
        end
    end
    local rotationRoot = self.transform:Find(Const.hangRotationRoot)
    if rotationRoot~=nil then
        self.rotationRoot = rotationRoot.gameObject
    end
    self.touchEvent = self.transform:GetComponentInChildren(typeof(CS.TouchObjectEventTrigger),true)
    if self.touchEvent then
        self.touchEvent.onPointerClick = function()
            UIUtil.OnClickWorldTroop(self.marchUuid)
        end
    end
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local type = marchInfo:GetMarchType()
        local target = marchInfo:GetMarchTargetType()
        if type == NewMarchType.MONSTER
                or type == NewMarchType.BOSS
                or type == NewMarchType.ACT_BOSS
                or type == NewMarchType.MONSTER_SIEGE
                or type == NewMarchType.PUZZLE_BOSS 
                or type == NewMarchType.CHALLENGE_BOSS then
            local labels = self.transform:GetComponentsInChildren(typeof(CS.UIWorldLabel),true)
            for i = 0, labels.Length-1 do
                local item = labels[i]
                if item~=nil then
                    item:SetLevel(self.monsterLevel)
                end
            end
        elseif type == NewMarchType.ALLIANCE_BOSS then
            local tempName = DataCenter.MonsterTemplateManager:GetTableValue(marchInfo.monsterId, "name")
            local nameStr = Localization:GetString("311026",marchInfo.allianceAbbr,Localization:GetString(tempName))
            local labels = self.transform:GetComponentsInChildren(typeof(CS.UIWorldLabel),true)
            for i = 0, labels.Length-1 do
                local item = labels[i]
                if item~=nil then
                    item:SetLevel(self.monsterLevel)
                    item:SetName(nameStr)
                end
            end
        else
            EventManager:GetInstance():Broadcast(EventId.HideTroopHead,self:GetMarchUUID())
            EventManager:GetInstance():Broadcast(EventId.ShowTroopName,self:GetMarchUUID())
        end
        if target == MarchTargetType.RALLY_FOR_BOSS or target == MarchTargetType.RALLY_FOR_BUILDING 
                or target == MarchTargetType.RALLY_FOR_CITY or target == MarchTargetType.RALLY_FOR_ALLIANCE_CITY 
                or target == MarchTargetType.RALLY_THRONE or target == MarchTargetType.RALLY_ASSISTANCE_THRONE then
            self.fdInst = ResourceManager:InstantiateAsync(Const.fdPath)
            self.fdInst:completed('+',function()
                if self.fdInst.isError or self.fdInst.gameObject == nil then
                    return
                end
                local ybc = self.transform:Find(Const.ybcPath)
                if ybc~=nil then
                    ybc.gameObject:SetActive(false)
                    self.fdInst.gameObject.transform:SetParent(self.model.transform)
                    self.fdInst.gameObject.transform.localPosition = Vector3.zero
                    self.fdInst.gameObject.transform.localRotation = Quaternion.identity
                    self.fdInst.gameObject.transform.localScale = Vector3.one
                    self.simpleAni = self.fdInst.gameObject:GetComponentInChildren(typeof(CS.SimpleAnimation),true)
                    self.simpleAni:Play(Const.WorldTroopAnim.Anim_Run)
                end
            end)
        else
            local ybc = self.transform:Find(Const.ybcPath)
            if ybc~=nil then
                ybc.gameObject:SetActive(true)
            end
        end
        
        local pos,pathSegment,pathIndex = SceneUtils.GetMarchCurPos(marchInfo)
        if pathSegment == nil or #pathSegment<=0 or pathIndex<0 then
            local rot = Quaternion.identity
            if type ~=NewMarchType.BOSS and type~=NewMarchType.CHALLENGE_BOSS then
                local diffPointStr = marchInfo.diffPoint
                if diffPointStr ~=nil and diffPointStr~="" then
                    local arr = string.split(diffPointStr,";")
                    if #arr>=2 then
                        local dir = Vector3.New(toInt(arr[1]),0,toInt(arr[2]))
                        if dir.x ==0 and dir.z ==0 and dir.y ==0 then
                        else
                            rot = Quaternion.LookRotation(Vector3.Normalize(dir),Vector3.up)
                        end
                        
                    end
                end
            end
            self:SetPosition(pos)
            self:SetRotation(rot)
        else
            self:SetPosition(pos)
            local normalized = Vector3.Normalize(pathSegment[pathIndex].dir)
            if normalized.x ==0 and normalized.z ==0 and normalized.y ==0 then
            else
                self:SetRotation(Quaternion.LookRotation(normalized,Vector3.up))
            end
            
        end
        self:EnterInitState()
        self:ShowDetectEvent()
        self:UpdateIconSprite()
        self:UpdateMarchSecretKey()
        EventManager:GetInstance():Broadcast(EventId.WorldTroopGameObjectCreateFinish,self.marchUuid)
    end
end
function WorldTroop:ShowDetectEvent()
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo ==nil then
        return
    end
    if marchInfo.eventId~=nil and marchInfo.eventId~="" and marchInfo.belongUid == LuaEntry.Player.uid then
        if self.detectEventInst ==nil then
            local eventId = marchInfo.eventId
            self.detectEventInst = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefabs/March/WorldDetectInfo.prefab")
            self.detectEventInst:completed('+',function()
                self.detectEventInst.gameObject:SetActive(true)
                self.detectEventInst.gameObject.transform:SetParent(self.transform)
                self.detectEventInst.gameObject.transform.localPosition = VecZero
                local eventQuality = self.detectEventInst.gameObject.transform:Find("Transform/Detect_event_quality_icon"):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
                local eventIcon = self.detectEventInst.gameObject.transform:Find("Transform/Detect_event_icon"):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
                local quality = toInt(GetTableData(TableName.DetectEvent,toInt(eventId),"quality"))
                local tempIcon = GetTableData(TableName.DetectEvent,toInt(eventId),"icon")
                local iconString = "Assets/Main/Sprites/UI/UIRadarCenter/"..tempIcon
                local type = toInt(GetTableData(TableName.DetectEvent,toInt(eventId),"type"))
                local qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_green"
                if type == 10 then
                    qualityStr = "Assets/Main/Sprites/UI/UIRadarCenter/Detect_spec_gold"
                    eventIcon.transform.localPosition = VecZero
                else
                    eventIcon.transform.localPosition = Vector3.New(0,0.11,0)
                    if quality == DetectEventColor.DETECT_EVENT_WHITE then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_white"
                    elseif quality == DetectEventColor.DETECT_EVENT_GREEN then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_green"
                    elseif quality == DetectEventColor.DETECT_EVENT_BLUE then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_blue"
                    elseif quality == DetectEventColor.DETECT_EVENT_PURPLE then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_purple"
                    elseif quality == DetectEventColor.DETECT_EVENT_ORANGE then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_orange"
                    elseif quality == DetectEventColor.DETECT_EVENT_GOLDEN then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_golden"
                    end
                end
                eventQuality:LoadSprite(qualityStr)
                eventIcon:LoadSprite(iconString)
            end )
        end
    else
        self:HideDetectEvent()
    end
end
function WorldTroop:HideDetectEvent()
    if self.detectEventInst~=nil then
        self.detectEventInst:Destroy()
        self.detectEventInst  =nil
    end
end
function WorldTroop:InitLod(gameObject)
    if gameObject == nil then
        return
    end
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo ==nil then
        return
    end
    local lodType = LodType.None
    local noOptimizeActivate = false
    self.adjuster = gameObject:GetOrAddComponent(typeof(CS.AutoAdjustLod))
    if self.adjuster~=nil then
        local type = marchInfo:GetMarchType()
        if type == NewMarchType.NORMAL or type == NewMarchType.ASSEMBLY_MARCH 
                or type == NewMarchType.SCOUT or type == NewMarchType.RESOURCE_HELP 
                or type == NewMarchType.DIRECT_MOVE_MARCH or type == NewMarchType.CHALLENGE_BOSS then
            if marchInfo.ownerUid == LuaEntry.Player.uid then
                lodType = LodType.TroopSelf
            elseif LuaEntry.Player:IsInAlliance() and marchInfo.allianceUid == LuaEntry.Player.allianceId then 
                lodType = LodType.TroopAlly
            else
                lodType = LodType.TroopOther
            end
            noOptimizeActivate = true
        elseif type == NewMarchType.MONSTER or type == NewMarchType.BOSS or type == NewMarchType.MONSTER_SIEGE or type == NewMarchType.ALLIANCE_BOSS then
            lodType = LodType.Monster
            noOptimizeActivate = false
        elseif type == NewMarchType.ACT_BOSS or type == NewMarchType.PUZZLE_BOSS or type == NewMarchType.CHALLENGE_BOSS then
            lodType = LodType.WorldBoss
            noOptimizeActivate = false
        end
        self.adjuster:SetNoOptimizeActivate(noOptimizeActivate)
        self.adjuster:SetLodType(lodType)
        
    end
end
function WorldTroop:GetMarchUUID()
    return self.marchUuid
end
function WorldTroop:SetPosition(position)
    if self.transform~=nil then
        self.transform.position = position
    end
end
function WorldTroop:SetRotation(rotation)
    local rot = Quaternion.identity
    if self.model~=nil then
        local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
        if marchInfo~=nil then
            local type = marchInfo:GetMarchType()
            if type ~=NewMarchType.ACT_BOSS and type~=NewMarchType.PUZZLE_BOSS then
                rot = rotation
            end
        end
        if rot == nil then
            return
        end
        local tempRot = self.model.transform.rotation
        if Quaternion.Equals(tempRot,rot) ==false then
            self.model.transform.rotation = rot
            EventManager:GetInstance():Broadcast(EventId.TroopRotation,self.marchUuid)
        end
    end
    
end

function WorldTroop:GetRotation()
    if self.model~=nil then
        return self.model.transform.rotation
    end
    return Quaternion.identity
end

function WorldTroop:EnterInitState()
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo ==nil then
        return
    end
    self.sm = WorldTroopStateMachine.New()
    self.sm:__initState(self)
    local status = marchInfo:GetMarchStatus()
    if status == MarchStatus.MOVING or status == MarchStatus.BACK_HOME 
            or status == MarchStatus.CHASING or status == MarchStatus.WAIT_THRONE 
            or status == MarchStatus.IN_WORM_HOLE then
        if marchInfo.inBattle ==false then
            local path = marchInfo.path
            local pathArr = {}
            if path~=nil and path~="" then
                pathArr =string.split(path,";")
            end
            if #pathArr>1 then
                self.sm:ChangeState(Const.WorldTroopState.Move)
            else
                self.sm:ChangeState(Const.WorldTroopState.Idle)
            end
        else
            self.sm:ChangeState(Const.WorldTroopState.Attack)
        end
    elseif status == MarchStatus.STATION then
        self.sm:ChangeState(Const.WorldTroopState.Idle)
    elseif status == MarchStatus.ATTACKING then
        self.sm:ChangeState(Const.WorldTroopState.Attack)
    elseif status == MarchStatus.PICKING or status == MarchStatus.SAMPLING then
        self.sm:ChangeState(Const.WorldTroopState.PickingGarbage)
    elseif status == MarchStatus.DESTROY_WAIT then
        self.sm:ChangeState(Const.WorldTroopState.AttackBuild)
    elseif status == MarchStatus.TRANSPORT_BACK_HOME then
        self.sm:ChangeState(Const.WorldTroopState.TransPortBackHome)
    else
        self.sm:ChangeState(Const.WorldTroopState.None)
    end
end

function WorldTroop:UpdateIconSprite()
    if self.spriteRenderer ==nil then
        return
    end
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local type = marchInfo:GetMarchType()
        if marchInfo.ownerUid == LuaEntry.Player.uid then
            self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"troop_green.png"))
            self.selectRenderer.color = WorldGreenColor
        elseif LuaEntry.Player:IsInAlliance() and marchInfo.allianceUid == LuaEntry.Player.allianceId then
            if type == NewMarchType.ALLIANCE_BOSS then
                self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"allianceBoss_blue.png"))
            else
                self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"troop_blue.png"))
            end
            self.selectRenderer.color = WorldBlueColor
        elseif type == NewMarchType.ALLIANCE_BOSS then
            self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"allianceBoss_red.png"))
            self.selectRenderer.color = WorldRedColor
        elseif marchInfo.srcServer ~= LuaEntry.Player:GetSelfServerId() then
            self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"troop_red.png"))
            self.selectRenderer.color = WorldRedColor
        elseif (DataCenter.WorldNewsDataManager:GetIsAttackerByUid(marchInfo.ownerUid) == true) or
                (DataCenter.GloryManager:GetIsFightServer(marchInfo.srcServer) == true) then
            self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"troop_red.png"))
            self.selectRenderer.color = WorldRedColor
        elseif LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            if DataCenter.RobotWarsManager:GetSelfCamp()>0 and DataCenter.GloryManager:IsSameCampByAllianceId(marchInfo.allianceUid) then
                self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"troop_yellow.png"))
                self.selectRenderer.color = WorldYellowColor
            else
                self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"troop_red.png"))
                self.selectRenderer.color = WorldRedColor
            end
        else
            local fightAllianceId = DataCenter.AllianceCompeteDataManager:GetFightAllianceId()
            if fightAllianceId ~= nil and fightAllianceId ~= "" and fightAllianceId == marchInfo.allianceUid then
                self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"troop_red.png"))
                self.selectRenderer.color = WorldRedColor
            else
                self.spriteRenderer:LoadSprite(string.format(LoadPath.LodIcon,"troop_white.png"))
                self.selectRenderer.color = WorldWhiteColor
            end
        end
        if self.headObj == nil then
            return
        end
        if (type == NewMarchType.NORMAL and marchInfo.ownerUid == LuaEntry.Player.uid) then
            local armyInfo = marchInfo:GetFirstArmyInfo()
            if armyInfo~=nil and armyInfo.HeroInfos~=nil  then
                local heroData = armyInfo.HeroInfos[1]
                if heroData~=nil then
                    local rarity = tonumber(GetTableData(HeroUtils.GetHeroXmlName(), heroData.heroId, "rarity"))
                    local isReachMax = heroData:GetIsAllSKillReachMax()
                    if isReachMax~=nil and isReachMax == true then
                        if rarity ~= HeroUtils.RarityType.S then
                            isReachMax = false
                        end
                    else
                        isReachMax = false
                    end
                    local headBgImg = HeroUtils.GetCircleQualityIconPath(rarity,isReachMax)
                    local headIconImg = HeroUtils.GetHeroIconRoundPath(heroData.heroId)
                    if self.headBg~=nil then
                        self.headBg:LoadSprite(headBgImg)
                    end
                    if self.headIcon~=nil then
                        self.headIcon:LoadSprite(headIconImg)
                    end
                end
            end
            local marchStateIconPath = MarchUtil.GetMarchStateIconByType(marchInfo)
            if self.marchStateIcon~=nil then
                self.marchStateIcon:LoadSprite(marchStateIconPath)
            end
            if self.headObj~=nil then
                self.headObj:SetActive(true)
            end
        else
            if self.headObj~=nil then
                self.headObj:SetActive(false)
            end
        end
    end
end

function WorldTroop:UpdateMarchSecretKey()
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        if marchInfo.secretKey>0 and self.keyRequest == nil then
            self.keyRequest = ResourceManager:InstantiateAsync(Const.secretKeyPath)
            self.keyRequest:completed('+',function()
                if self.keyRequest.isError or self.keyRequest.gameObject == nil then
                    self.keyRequest:Destroy()
                    self.keyRequest = nil
                    return
                end
                if self.transform ==nil then
                    self.keyRequest:Destroy()
                    self.keyRequest = nil
                    return
                end
                self.keyRequest.gameObject.transform:SetParent(self.transform)
                self.keyRequest.gameObject.transform.localPosition = Vector3.zero
                self.keyRequest.gameObject.transform.localRotation = Quaternion.identity
                self.keyRequest.gameObject.transform.localScale = Vector3.one
            end)
        elseif marchInfo.secretKey<=0 and self.keyRequest ~= nil then
            self.keyRequest:Destroy()
            self.keyRequest = nil
        end
    end
end

function WorldTroop:ShowJunkMan()
    if self.model~=nil then
        local m = self.model.transform:Find("WorldTroopJunkman(Clone)")
        if m ==nil then
            m = self.transform:Find("WorldTroopJunkman")
        end
        if m~=nil then
            m.gameObject:SetActive(true)
        end
    end
    if self.transform~=nil then
        local m = self.transform:Find("WorldTroopName(Clone)")
        if m ==nil then
            m = self.transform:Find("WorldTroopName")
        end
        if m~=nil then
            m.gameObject:SetActive(true)
        end
    end
end

function WorldTroop:HideJunkMan()
    if self.model~=nil then
        local m = self.model.transform:Find("WorldTroopJunkman(Clone)")
        if m ==nil then
            m = self.transform:Find("WorldTroopJunkman")
        end
        if m~=nil then
            m.gameObject:SetActive(false)
        end
    end
    if self.transform~=nil then
        local m = self.transform:Find("WorldTroopName(Clone)")
        if m ==nil then
            m = self.transform:Find("WorldTroopName")
        end
        if m~=nil then
            m.gameObject:SetActive(false)
        end
    end
end

function WorldTroop:DoSkill(useSkillID)
    local effectPath = GetTableData(TableName.SkillTab, useSkillID, "effect_path")
    if effectPath~=nil and effectPath~="" then
        local requestInst = ResourceManager:InstantiateAsync(effectPath)
        table.insert(self.skillInstList,requestInst)
        requestInst:completed('+',function()
            if requestInst.isError or requestInst.gameObject == nil then
                return
            end
            if self.model~=nil and self.transform~=nil then
                local hangPoint = self.model.transform:Find(Const.huangPoint)
                if hangPoint~=nil then
                    requestInst.gameObject.transform:SetParent(hangPoint.transform)
                else
                    requestInst.gameObject.transform:SetParent(self.model.transform)
                end
                requestInst.gameObject.transform.localPosition = Vector3.zero
                requestInst.gameObject.transform.localRotation = Quaternion.identity
                requestInst.gameObject.transform.localScale = Vector3.one
                TimerManager:GetInstance():DelayInvoke(function()
                    if requestInst~=nil then
                        requestInst:Destroy()
                    end
                end,2)
            else
                requestInst:Destroy()
            end
        end)
    end
end
function WorldTroop:ShowRallyMarchAttack()
    if self.fdInst~=nil and self.fdInst~=nil then
        if self.simpleAni~=nil then
            self.simpleAni:Play(Const.WorldTroopAnim.Anim_Attack)
        end
    end
end
function WorldTroop:ShowAttack()
    if self.model==nil or self.transform == nil then
        return
    end
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo ==nil then
       return 
    end
    local startPos = self.model.transform.position
    local hangPoint = self.model.transform:Find(Const.huangPoint)
    if hangPoint~=nil then
        startPos = hangPoint.transform.position
    end
    local target = marchInfo:GetMarchTargetType()
    local targetObj,tileSize = self:GetDefenceObj()
    if targetObj == nil then
        return
    end
    local rotation  = Quaternion.identity
    local normalized = Vector3.Normalize(self:GetDefenderPosition()-self:GetPosition())
    if normalized.x == 0 and normalized.y ==0 and normalized.z == 0 then
    else
        rotation = Quaternion.LookRotation(normalized,Vector3.up)
    end
    
    local isSelf = false
    if  marchInfo.ownerUid == LuaEntry.Player.uid then
        isSelf = true
    end
    local showSuccess = CS.SceneManager.World:AddBulletV2(self._effectPdName,self._effectHitName,startPos,rotation,target,tileSize,targetObj,isSelf)
    if showSuccess ==false then
        return
    end
    local requestInst = ResourceManager:InstantiateAsync(self._effectPkName)
    table.insert(self.normalAttackInstList,requestInst)
    requestInst:completed('+',function()
        if requestInst.isError or requestInst.gameObject == nil then
            return
        end
        if self.model~=nil and self.transform~=nil then
            hangPoint = self.model.transform:Find(Const.huangPoint)
            if hangPoint~=nil then
                requestInst.gameObject.transform:SetParent(hangPoint.transform)
            else
                requestInst.gameObject.transform:SetParent(self.model.transform)
            end
            requestInst.gameObject.transform.localPosition = Vector3.New(0,2.3,0)
            requestInst.gameObject.transform.localRotation = Quaternion.Euler(0,-90,0)
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Attack)
            TimerManager:GetInstance():DelayInvoke(function()
                if requestInst~=nil then
                    requestInst:Destroy()
                end
            end,1)
        else
            requestInst:Destroy()
        end
    end)
    
    
end

function WorldTroop:GetPosition()
    if self.model~=nil then
        return self.model.transform.position
    end
    if self.transform~=nil then
        return self.transform.position
    end
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local pos = marchInfo:GetMarchCurPos()
        return Vector3.New(pos.x,pos.y,pos.z)
    end
    return Vector3.zero
end
function WorldTroop:PlayAnim(animName)
    if self.anims~=nil then
        for i = 0, self.anims.Length-1 do
            local item = self.anims[i]
            if item~=nil then
                item:Play(animName)
            end
        end
    end
    if self.gpuAnims~=nil then
        for i = 0, self.gpuAnims.Length-1 do
            local item = self.gpuAnims[i]
            if item~=nil then
                item:Play(animName)
            end
        end
    end
end
function WorldTroop:GetDefenderPosition()
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local uuid = self.defAtkUuid
        if uuid == 0 then
            uuid = marchInfo.targetUuid
        end
        local target = marchInfo:GetMarchTargetType()
        local type = marchInfo:GetMarchType()
        if target == MarchTargetType.ATTACK_ARMY  then
            local troop =WorldTroopManager:GetInstance():GetTroop(uuid)
            if troop ~=nil then
                return troop:GetPosition()
            else
                local march = DataCenter.WorldMarchDataManager:GetMarch(uuid)
                if march~=nil then
                    local pos = march:GetMarchCurPos()
                    return Vector3.New(pos.x,pos.y,pos.z)
                end
            end
        elseif target == MarchTargetType.STATE then
            local troop =WorldTroopManager:GetInstance():GetTroop(uuid)
            if troop ~=nil then
                return troop:GetPosition()
            else
                local march = DataCenter.WorldMarchDataManager:GetMarch(uuid)
                if march~=nil then
                    local pos = march:GetMarchCurPos()
                    return Vector3.New(pos.x,pos.y,pos.z)
                end
            end
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.ATTACK_BUILDING or target == MarchTargetType.RALLY_FOR_BUILDING or target == MarchTargetType.DIRECT_ATTACK_CITY or target == MarchTargetType.ATTACK_CITY then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                pos.x = pos.x-3
                pos.z = pos.z-3
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.ATTACK_ALLIANCE_CITY or target == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or target == MarchTargetType.RALLY_THRONE  then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                pos.x = pos.x-6
                pos.z = pos.z-6
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.ATTACK_DRAGON_BUILDING or target == MarchTargetType.RALLY_DRAGON_BUILDING or target == MarchTargetType.TRIGGER_DRAGON_BUILDING  then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                pos.x = pos.x-3
                pos.z = pos.z-3
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.PICK_GARBAGE or target == MarchTargetType.SAMPLE  then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.ATTACK_MONSTER
                or target == MarchTargetType.DIRECT_ATTACK_ACT_BOSS or target == MarchTargetType.ATTACK_ARMY_COLLECT
                or target == MarchTargetType.RALLY_FOR_BOSS or target == MarchTargetType.ATTACK_ALLIANCE_BOSS then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.TRIGGER_CROSS_THRONE_BUILDING or target == MarchTargetType.RALLY_CROSS_THRONE_BUILDING  then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                pos.x = pos.x-3
                pos.z = pos.z-3
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.TAKE_SECRET_KEY then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                pos.x = pos.x-5
                pos.z = pos.z-5
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.TRANSPORT_SECRET_KEY then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                pos.x = pos.x-3
                pos.z = pos.z-3
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.PICK_SECRET_KEY then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif target == MarchTargetType.ATTACK_ALLIANCE_BUILDING or target == MarchTargetType.RALLY_ALLIANCE_BUILDING 
                or target == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE or target == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE  then
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                local pos = SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)
                pos.x = pos.x-3
                pos.z = pos.z-3
                return Vector3.New(pos.x,pos.y,pos.z)
            end
        elseif type == NewMarchType.BOSS or type == NewMarchType.MONSTER or type == NewMarchType.ALLIANCE_BOSS or type == NewMarchType.MONSTER_SIEGE then
            local troop =WorldTroopManager:GetInstance():GetTroop(uuid)
            if troop ~=nil then
                return troop:GetPosition()
            end
        elseif type == NewMarchType.ACT_BOSS or type == NewMarchType.PUZZLE_BOSS then
            local pos =SceneUtils.TileIndexToWorld(marchInfo.targetPos,ForceChangeScene.World)
            return Vector3.New(pos.x,pos.y,pos.z)
        elseif target == MarchTargetType.ATTACK_DESERT or target == MarchTargetType.TRAIN_DESERT then
            local pos =SceneUtils.TileIndexToWorld(marchInfo.targetUuid,ForceChangeScene.World)
            return Vector3.New(pos.x,pos.y,pos.z)
        end
        local pos =SceneUtils.TileIndexToWorld(marchInfo.targetPos,ForceChangeScene.World)
        return Vector3.New(pos.x,pos.y,pos.z)
    end
    return Vector3.zero
end
function WorldTroop:GetDefenceObj()
    local tileSize = 1
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local uuid = self.defAtkUuid
        if uuid == 0 then
            uuid = marchInfo.targetUuid
        end
        local troop =WorldTroopManager:GetInstance():GetTroop(uuid)
        if troop ~=nil then
            return troop:GetTransform(),tileSize
        end
        local target = marchInfo:GetMarchTargetType()
        if target == MarchTargetType.ATTACK_DESERT or target == MarchTargetType.TRAIN_DESERT then
            local obj = DataCenter.WorldPointManager:GetObjectByPoint(marchInfo.targetUuid)
            if obj~=nil then
                return obj:GetTransform(),tileSize
            end
        else
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
            if info~=nil then
                tileSize = WorldBuildUtil.GetBuildTile(info.mainIndex)
                local obj = DataCenter.WorldPointManager:GetObjectByPoint(info.mainIndex)
                if obj~=nil then
                    return obj:GetTransform(),tileSize
                end
            end
        end
    end
    return nil,tileSize
end

function WorldTroop:GetTransform()
    return self.transform
end

function WorldTroop:AddShield()
    if self.isAddShield then
        return
    end
    self.isAddShield = true
    self.shieldRequest = ResourceManager:InstantiateAsync(Const.sheldPath)
    self.shieldRequest:completed('+',function()
        if self.shieldRequest.isError or self.shieldRequest.gameObject == nil then
            return
        end
        if self.model~=nil and self.model.transform~=nil then
            self.shieldRequest.gameObject.transform:SetParent(self.model.transform)
            self.shieldRequest.gameObject.transform.localPosition = Vector3.zero
            self.shieldRequest.gameObject.transform.localRotation = Quaternion.identity
            self.shieldRequest.gameObject.transform.localScale = Vector3.one
        else
            self.shieldRequest:Destroy()
        end
    end)
end
function WorldTroop:DelShield()
    self.isAddShield = false
    if self.shieldRequest~=nil then
        self.shieldRequest:Destroy()
        self.shieldRequest =nil
    end
end
function WorldTroop:SetRotationRoot()
    
end
function WorldTroop:GetSpeed()
    local speed = 1
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        speed = marchInfo.speed
    end
    return (speed*CS.SceneManager.World.TileSize)
end
function WorldTroop:GetMovePathCount()
    local count =0
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local path = marchInfo.path
        local pathArr = {}
        if path~=nil and path~="" then
            pathArr =string.split(path,";")
            count = #pathArr
        end
    end
    return count
end
function WorldTroop:GetPathStr()
    local str = ""
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        str = marchInfo.path
    end
    return str
end
function WorldTroop:GetMarchBlackEndTime()
    local blackEndTime = 0
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        blackEndTime = marchInfo.blackEndTime
    end
    return blackEndTime
end
function WorldTroop:GetMarchBlackStartTime()
    local blackStartTime = 0
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        blackStartTime = marchInfo.blackStartTime
    end
    return blackStartTime
end
function WorldTroop:GetMarchStartTime()
    local startTime = 0
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        startTime = marchInfo.startTime
    end
    return startTime
end
function WorldTroop:GetMarchEndTime()
    local endTime = 0
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        endTime = marchInfo.endTime
    end
    return endTime
end
function WorldTroop:GetMarchTargetPos()
    local targetPos = 0
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        targetPos= marchInfo.targetPos
    end
    return targetPos
end
function WorldTroop:GetMarchTargetType()
    local target = MarchTargetType.STATE
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        target= marchInfo:GetMarchTargetType()
    end
    return target
end
function WorldTroop:GetMarchStatus()
    local status = MarchStatus.STATION
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        status= marchInfo:GetMarchStatus()
    end
    return status
end
function WorldTroop:GetStationRotation()
    local rot = Quaternion.identity
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local type = marchInfo:GetMarchType()
        local pos,pathSegment,pathIndex = SceneUtils.GetMarchCurPos(marchInfo)
        if pathSegment == nil or #pathSegment<=0 or pathIndex<0 then
            if type ~=NewMarchType.BOSS and type~=NewMarchType.CHALLENGE_BOSS then
                local diffPointStr = marchInfo.diffPoint
                if diffPointStr ~=nil and diffPointStr~="" then
                    local arr = string.split(diffPointStr,";")
                    if #arr>=2 then
                        local dir = Vector3.New(toInt(arr[1]),0,toInt(arr[2]))
                        if dir.x ==0 and dir.z ==0 and dir.y ==0 then
                        else
                            rot = Quaternion.LookRotation(Vector3.Normalize(dir),Vector3.up)
                        end
                    end
                end
            end
        end
    end
    return rot
    
end

function WorldTroop:SetDefAtkUuid(uuid)
    self.defAtkUuid = uuid
end
function WorldTroop:IsBattle()
    return self.isBattle
end
function WorldTroop:SetIsBattle(value)
    self.isBattle = value
    if self.sm~=nil then
        self.sm:OnTroopChange()
    end
    
end

function WorldTroop:GetMoveMono()
    if self.transform~=nil then
        return self.transform:GetOrAddComponent(typeof(CS.WorldTroopMove))
    end
    return nil
end
function WorldTroop:ShowBattleSuccess()
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local type = marchInfo:GetMarchType()
        if type == NewMarchType.MONSTER
                or type == NewMarchType.BOSS
                or type == NewMarchType.MONSTER_SIEGE
                or type == NewMarchType.CHALLENGE_BOSS then
            return
        end
    end
    WorldTroopManager:GetInstance():CreateBattleVFX(Const.battleVictoryPath,2.14,function(go)
        if self.transform~=nil then
            if go~=nil then
                go.transform:SetParent(self.transform)
                go.transform.localScale = Vector3.New(2,2,2)
                go.transform.localPosition = Vector3.New(0,3.55,0)
            end
        end
        
    end)
end
function WorldTroop:ShowBattleFailed()
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local type = marchInfo:GetMarchType()
        if type == NewMarchType.MONSTER
                or type == NewMarchType.BOSS
                or type == NewMarchType.MONSTER_SIEGE
                or type == NewMarchType.CHALLENGE_BOSS then
            return
        end
    end
    WorldTroopManager:GetInstance():CreateBattleVFX(Const.battleFailurePath,2.14,function(go)
        if self.transform~=nil then
            if go~=nil then
                go.transform:SetParent(self.transform)
                go.transform.localScale = Vector3.New(2,2,2)
                go.transform.localPosition = Vector3.New(0,3.55,0)
            end
        end

    end)
end
function WorldTroop:ShowBattleDefeat()
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local type = marchInfo:GetMarchType()
        if type == NewMarchType.MONSTER
                or type == NewMarchType.BOSS
                or type == NewMarchType.MONSTER_SIEGE
                or type == NewMarchType.CHALLENGE_BOSS then
            WorldTroopManager:GetInstance():CreateBattleVFX(Const.battleDefeatPath,2.14,function(go)
                if self.transform~=nil then
                    if go~=nil then
                        go.transform:SetParent(self.transform)
                        go.transform.localScale = Vector3.one
                        go.transform.localPosition = Vector3.New(0,3.55,0)
                    end
                end
            end)
        end
    end
   
end

function WorldTroop:IsDelayDestroyed()
    if self.isDelayDestroy ==true and  self.delayDestroySec<=0 then
        return true
    end
    return false
end
function WorldTroop:DelayDestroy(delaySec)
    self.isDelayDestroy = true
    self.delayDestroySec = delaySec
    if self.sm~=nil then
        self.sm:ChangeState(Const.WorldTroopState.Death)
    end
    WorldTroopManager:GetInstance():AddToUpdateList(self.marchUuid)
end

function WorldTroop:Attack()
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        if marchInfo:GetMarchStatus() == MarchStatus.STATION then
            if self.sm~=nil and self.sm:GetCurrentState() ~= Const.WorldTroopState.Attack then
                self.sm:ChangeState(Const.WorldTroopState.AttackBegin)
            end
        elseif marchInfo:GetMarchType() == NewMarchType.BOSS then
            if self.sm~=nil and self.sm:GetCurrentState() ~= Const.WorldTroopState.Attack then
                self.sm:ChangeState(Const.WorldTroopState.Attack)
            end
        end
    end
end
function WorldTroop:UpdateSelfMarch(msg)
    if self.sm~=nil then
        self.sm:OnTroopChange()
    end
end

function WorldTroop:IsMonsterTroop()
    local isMonster = false
    local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if marchInfo~=nil then
        local type = marchInfo:GetMarchType()
        if type == NewMarchType.MONSTER
                or type == NewMarchType.BOSS
                or type == NewMarchType.MONSTER_SIEGE
                or type == NewMarchType.CHALLENGE_BOSS then
            isMonster = true
        end
    end
    return isMonster
end
function WorldTroop:GetMarchInfo()
    return DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
end
function WorldTroop:GetModelTrans()
    if self.model~=nil then
        return self.model.transform
    end
   
end

function WorldTroop:TroopUnitPickSuccess()
    if self.troopUnits~=nil then
        for i =1,#self.troopUnits do
            local item = self.troopUnits[i]
            if item~=nil then
                item:PickGarbageSuccess()
            end
        end
    end
end

function WorldTroop:TroopUnitPickBack()
    if self.troopUnits~=nil then
        for i =1,#self.troopUnits do
            local item = self.troopUnits[i]
            if item~=nil then
                item:PickMoveBack()
            end
        end
    end
end

function WorldTroop:ClearTroopUnits()
    if self.troopUnits~=nil then
        for i =1,#self.troopUnits do
            local item = self.troopUnits[i]
            if item~=nil then
                item:Destroy()
            end
        end
        self.troopUnits = {}
    end
end

function WorldTroop:TroopUnitsBirthThenPickGarbage(appear)
    if self.troopUnits ~=nil and #self.troopUnits>0 then
        return
    end
    local pts = {}
    local march = DataCenter.WorldMarchDataManager:GetMarch(self.marchUuid)
    if march~=nil then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(march.targetUuid)
        if info~=nil then
            local obj = DataCenter.WorldPointManager:GetObjectByPoint(info.mainIndex)
            if obj~=nil then
                pts = obj:GetPickPoint(self:GetPosition())
                local total = table.count(Const.GarbageBirthPos)
                for i=1,total do
                    local offsetBirthPos = Const.GarbageBirthPos[i]
                    local birthDest = self:GetPosition()+self.model.transform.right*offsetBirthPos.x + self.model.transform.forward*offsetBirthPos.z
                    local pickDest = self:GetPosition()
                    if #pts>0 then
                        if #pts>=i then
                            pickDest = pts[i]
                        else
                            pickDest = pts[#pts]
                        end
                    end
                    local entity = CS.PickGarbageTroopUnit(CS.WorldTroopUnit.UnitType.Junkman)
                    entity:CreateInstance(function()
                        entity:SetPosition(self:GetPosition()+Vector3.New(0,1.6,0))
                        if appear==nil or appear == true then
                            entity:BirthThenMoveToGarbage(birthDest, pickDest, self:GetDefenderPosition())
                        else
                            entity.BirthThenPickGarbage(birthDest, pickDest, self:GetDefenderPosition())
                        end
                    end,self.model.transform)
                    table.insert(self.troopUnits,entity)
                end
            end
        end
    end
    WorldTroopManager:GetInstance():AddToUpdateList(self:GetMarchUUID())
end

function WorldTroop:UpdateTroopUnits()
    if self.troopUnits~=nil then
        for i =1,#self.troopUnits do
            local item = self.troopUnits[i]
            if item~=nil then
                item:Update()
            end
        end
        local isAllFinish = true
        local hasItem  =false
        for i =1,#self.troopUnits do
            local item = self.troopUnits[i]
            if item~=nil then
                hasItem = true
                if item:IsBackFinish() ==false then
                    isAllFinish = false
                    break
                end
            end
        end
        if isAllFinish then
            self:ClearTroopUnits()
            if hasItem then
                WorldTroopManager:GetInstance():UpdateListRemove(self:GetMarchUUID())
            end
        end
    end
end

function WorldTroop:ShowBattleHurt(hurt,worldType)
    local showPath = ""
    if worldType == Const.BattleWordType.Cure then
        showPath = Const.cureWordPath
    elseif worldType == Const.BattleWordType.Normal then
        showPath = Const.normalWordPath
    elseif worldType == Const.BattleWordType.Skill then
        showPath = Const.skillWordPath
    elseif worldType == Const.BattleWordType.CarSkill then
        showPath = Const.skillCarWordPath
    elseif worldType == Const.BattleWordType.CriticalAttack then
        showPath = Const.BattleCriticalWordPath
    end
    if showPath~="" then
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = self:GetPosition()
        param.num = hurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end
return WorldTroop