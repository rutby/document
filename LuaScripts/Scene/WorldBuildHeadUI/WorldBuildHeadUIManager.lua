---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/2/22 16:57
---
local WorldBuildHeadUIManager = BaseClass("WorldBuildHeadUIManager", Singleton)
local ResourceManager = CS.GameEntry.Resource
local WorldBuildHeadUI = require "Scene.WorldBuildHeadUI.WorldBuildHeadUI"

local function __init(self)
    self.allTips = {} --所有标签
    self.OnCreateTips = {}
    self.uidList = {}
    self:AddListener()
end

local function __delete(self)
    self:RemoveListener()
    for k, v in pairs(self.allTips) do
        local request = v.request
        v:OnDestroy()
        request:Destroy()
    end
    self.allTips = nil
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.ShowCollectBattleValue, self.ShowCollectAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.ShowBuildAttackHeadUI, self.ShowBuildAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.ShowDragonBuildAttackHeadUI, self.ShowDragonBuildAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.HideDragonBuildAttackHeadUI, self.HideDragonBuildAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.ShowAllianceBuildAttackHeadUI, self.ShowAllianceBuildAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.HideAllianceBuildAttackHeadUI, self.HideAllianceBuildAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.CollectPointOut, self.HideBuildAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.HideBuildAttackHeadUI, self.HideBuildAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.WORLD_BUILD_OUT_VIEW, self.HideBuildAttackHeadUISignal)
    EventManager:GetInstance():AddListener(EventId.PlayerMessageInfo, self.OnUserInfoRefreshSignal)
    EventManager:GetInstance():AddListener(EventId.ChangeCameraLod, self.ChangeCameraLodSignal)
    EventManager:GetInstance():AddListener(EventId.PveLevelEnter, self.RemoveAllTips)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.OnBeforeEnterCity, self.OnEnterCity)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.ShowDragonBuildAttackHeadUI, self.ShowDragonBuildAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.HideDragonBuildAttackHeadUI, self.HideDragonBuildAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.ShowAllianceBuildAttackHeadUI, self.ShowAllianceBuildAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.HideAllianceBuildAttackHeadUI, self.HideAllianceBuildAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.ShowCollectBattleValue, self.ShowCollectAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.ShowBuildAttackHeadUI, self.ShowBuildAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.CollectPointOut, self.HideBuildAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.HideBuildAttackHeadUI, self.HideBuildAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.PlayerMessageInfo, self.OnUserInfoRefreshSignal)
    EventManager:GetInstance():RemoveListener(EventId.WORLD_BUILD_OUT_VIEW, self.HideBuildAttackHeadUISignal)
    EventManager:GetInstance():RemoveListener(EventId.ChangeCameraLod, self.ChangeCameraLodSignal)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelEnter, self.RemoveAllTips)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnBeforeEnterCity, self.OnEnterCity)
end

local function ChangeCameraLodSignal(lod)
    WorldBuildHeadUIManager:GetInstance():UpdateLod(lod)
end

local function UpdateLod(self, lod)
    if self.lodCache ~= lod then
        self.lodCache = lod
    end
end

local function RemoveOneEffect(self, uuid)
    local temp = self.allTips[uuid]
    if temp ~= nil then
        local request = temp.request
        temp:OnDestroy()
        request:Destroy()
        self.allTips[uuid] = nil
    end
    temp = self.OnCreateTips[uuid]
    if temp ~= nil then
        temp:Destroy()
        self.OnCreateTips[uuid] = nil
    end
    for k, v in pairs(self.uidList) do
        if v[uuid] ~= nil then
            v[uuid] = nil
        end
    end
end

local function RemoveAllTips(data)
    WorldBuildHeadUIManager:GetInstance():RemoveAllEffect()
end

local function OnEnterWorld(data)
end
local function OnEnterCity(data)
    WorldBuildHeadUIManager:GetInstance():RemoveAllEffect()
end


local function RemoveAllEffect(self)
    for k,v in pairs(self.allTips) do
        local request = v.request
        v:OnDestroy()
        request:Destroy()
    end
    self.allTips = {}
    for k,v in pairs(self.OnCreateTips) do
        v:Destroy()
    end
    self.OnCreateTips = {}
    self.uidList = {}
end

local function HideBuildAttackHeadUISignal(uuid)
    WorldBuildHeadUIManager:GetInstance():RemoveOneEffect(tonumber(uuid))

end

local function ShowBuildAttackHeadUISignal(data)
    local str = data
    if str ~= nil then
        local strArr = string.split(str, ";")
        if #strArr > 2 then
            local uuid = tonumber(strArr[1])
            local hp = tonumber(strArr[2])
            local hpMax = tonumber(strArr[3])
            WorldBuildHeadUIManager:GetInstance():CheckShowEffect(uuid, hpMax, hp)
        end
    end
end

local function HideAllianceBuildAttackHeadUISignal(uuid)
    WorldBuildHeadUIManager:GetInstance():RemoveOneEffect(tonumber(uuid))

end

local function ShowAllianceBuildAttackHeadUISignal(data)
    local str = data
    if str ~= nil then
        local strArr = string.split(str, ";")
        if #strArr > 2 then
            local uuid = tonumber(strArr[1])
            local hp = tonumber(strArr[2])
            local hpMax = tonumber(strArr[3])
            WorldBuildHeadUIManager:GetInstance():CheckShowAllianceBuildEffect(uuid, hpMax, hp)
        end
    end
end

local function CheckShowAllianceBuildEffect(self, bUuid, initHealth, curHealth)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if self.allTips[bUuid] == nil and self.OnCreateTips[bUuid] == nil then
        if self.lodCache ~= nil and self.lodCache > 3 then
            return
        end
        local request = ResourceManager:InstantiateAsync(UIAssets.WorldBuildHeadUI)
        self.OnCreateTips[bUuid] = request
        request:completed('+', function()
            self.OnCreateTips[bUuid] = nil
            if request.isError then
                return
            end
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(bUuid)
            if info == nil then
                request:Destroy()
                return
            end
            if info == nil then
                request:Destroy()
                return
            end
            request.gameObject:SetActive(true)
            request.gameObject.transform:SetParent(CS.SceneManager.World.BuildBubbleNode)
            request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local labelUI = WorldBuildHeadUI.New()
            labelUI:OnCreate(request)
            self.allTips[bUuid] = labelUI
            self.allTips[bUuid]:InitAllianceBuildInfo(info, initHealth, curHealth)
        end)
    else
        if self.allTips[bUuid] ~= nil then
            self.allTips[bUuid]:SetHP(curHealth, initHealth)
        end
    end
end


local function HideDragonBuildAttackHeadUISignal(uuid)
    WorldBuildHeadUIManager:GetInstance():RemoveOneEffect(tonumber(uuid))

end

local function ShowDragonBuildAttackHeadUISignal(data)
    local str = data
    if str ~= nil then
        local strArr = string.split(str, ";")
        if #strArr > 2 then
            local uuid = tonumber(strArr[1])
            local hp = tonumber(strArr[2])
            local hpMax = tonumber(strArr[3])
            WorldBuildHeadUIManager:GetInstance():CheckShowDragonBuildEffect(uuid, hpMax, hp)
        end
    end
end

local function CheckShowDragonBuildEffect(self, bUuid, initHealth, curHealth)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if self.allTips[bUuid] == nil and self.OnCreateTips[bUuid] == nil then
        if self.lodCache ~= nil and self.lodCache > 3 then
            return
        end
        local request = ResourceManager:InstantiateAsync(UIAssets.WorldBuildHeadUI)
        self.OnCreateTips[bUuid] = request
        request:completed('+', function()
            self.OnCreateTips[bUuid] = nil
            if request.isError then
                return
            end
            local info = DataCenter.WorldPointManager:GetPointInfoByUuid(bUuid)
            if info == nil then
                request:Destroy()
                return
            end
            request.gameObject:SetActive(true)
            request.gameObject.transform:SetParent(CS.SceneManager.World.BuildBubbleNode)
            request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local labelUI = WorldBuildHeadUI.New()
            labelUI:OnCreate(request)
            self.allTips[bUuid] = labelUI
            self.allTips[bUuid]:InitDragonBuildInfo(info, initHealth, curHealth)
        end)
    else
        if self.allTips[bUuid] ~= nil then
            self.allTips[bUuid]:SetHP(curHealth, initHealth)
        end
    end
end

local function ShowCollectAttackHeadUISignal(data)
    local str = data
    if str ~= nil then
        local strArr = string.split(str, ";")
        if #strArr > 4 then
            local uuid = tonumber(strArr[1])
            local pointIndex =tonumber(strArr[2])
            local hp = tonumber(strArr[4])
            local hpMax = tonumber(strArr[5])
            WorldBuildHeadUIManager:GetInstance():CheckShowCollectEffect(uuid,pointIndex,hpMax, hp)
        end
    end
end

local function CheckShowCollectEffect(self, bUuid,pointIndex, initHealth, curHealth)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if self.allTips[bUuid] == nil and self.OnCreateTips[bUuid] == nil then
        if self.lodCache ~= nil and self.lodCache > 3 then
            return
        end
        local request = ResourceManager:InstantiateAsync(UIAssets.WorldBuildHeadUI)
        self.OnCreateTips[bUuid] = request
        request:completed('+', function()
            self.OnCreateTips[bUuid] = nil
            if request.isError then
                return
            end
            local info = DataCenter.WorldPointManager:GetResourcePointInfoByIndex(pointIndex)
            if info == nil then
                request:Destroy()
                return
            end
            request.gameObject:SetActive(true)
            request.gameObject.transform:SetParent(CS.SceneManager.World.BuildBubbleNode)
            request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local labelUI = WorldBuildHeadUI.New()
            labelUI:OnCreate(request)
            self.allTips[bUuid] = labelUI
            self.allTips[bUuid]:InitCollectInfo(info,initHealth, curHealth,bUuid)
        end)
    else
        if self.allTips[bUuid] ~= nil then
            self.allTips[bUuid]:SetHP(curHealth, initHealth)
        end
    end
end

local function OnUserInfoRefreshSignal(uid)
    WorldBuildHeadUIManager:GetInstance():OnUserInfoRefresh(tostring(uid))
end

local function CheckShowEffect(self, bUuid, initHealth, curHealth)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if self.allTips[bUuid] == nil and self.OnCreateTips[bUuid] == nil then
        if self.lodCache ~= nil and self.lodCache > 3 then
            return
        end
        local request = ResourceManager:InstantiateAsync(UIAssets.WorldBuildHeadUI)
        self.OnCreateTips[bUuid] = request
        request:completed('+', function()
            self.OnCreateTips[bUuid] = nil
            if request.isError then
                return
            end
            local info = DataCenter.WorldPointManager:GetBuildDataByUuid(bUuid)
            if info == nil then
                request:Destroy()
                return
            end
            request.gameObject:SetActive(true)
            request.gameObject.transform:SetParent(CS.SceneManager.World.BuildBubbleNode)
            request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local uid = info.ownerUid
            local ownerData = ChatInterface.getUserData(uid)
            local labelUI = WorldBuildHeadUI.New()
            labelUI:OnCreate(request)
            self.allTips[bUuid] = labelUI
            self.allTips[bUuid]:InitInfo(info, initHealth, curHealth, uid, ownerData,info.name)
            if self.uidList[uid] == nil then
                self.uidList[uid] = {}
            end
            self.uidList[uid][bUuid] = 1
        end)
    else
        if self.allTips[bUuid] ~= nil then
            self.allTips[bUuid]:SetHP(curHealth, initHealth)
        end
    end
end

local function OnUserInfoRefresh(self, uid)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if self.uidList[uid] ~= nil then
        for k, v in pairs(self.uidList[uid]) do
            if v ~= nil then
                if self.allTips[k] ~= nil then
                    local ownerData = ChatInterface.getUserData(uid)
                    self.allTips[k]:SetPlayerData(uid, ownerData)
                end
            end
        end
    end
end
WorldBuildHeadUIManager.__init = __init
WorldBuildHeadUIManager.__delete = __delete
WorldBuildHeadUIManager.AddListener = AddListener
WorldBuildHeadUIManager.RemoveListener = RemoveListener
WorldBuildHeadUIManager.RemoveOneEffect = RemoveOneEffect
WorldBuildHeadUIManager.CheckShowEffect = CheckShowEffect
WorldBuildHeadUIManager.OnUserInfoRefresh = OnUserInfoRefresh
WorldBuildHeadUIManager.HideBuildAttackHeadUISignal = HideBuildAttackHeadUISignal
WorldBuildHeadUIManager.ShowBuildAttackHeadUISignal = ShowBuildAttackHeadUISignal
WorldBuildHeadUIManager.OnUserInfoRefreshSignal = OnUserInfoRefreshSignal
WorldBuildHeadUIManager.UpdateLod = UpdateLod
WorldBuildHeadUIManager.ChangeCameraLodSignal = ChangeCameraLodSignal
WorldBuildHeadUIManager.ShowCollectAttackHeadUISignal =ShowCollectAttackHeadUISignal
WorldBuildHeadUIManager.CheckShowCollectEffect =CheckShowCollectEffect
WorldBuildHeadUIManager.RemoveAllEffect  = RemoveAllEffect
WorldBuildHeadUIManager.RemoveAllTips = RemoveAllTips
WorldBuildHeadUIManager.OnEnterWorld = OnEnterWorld
WorldBuildHeadUIManager.OnEnterCity = OnEnterCity
WorldBuildHeadUIManager.ShowAllianceBuildAttackHeadUISignal =ShowAllianceBuildAttackHeadUISignal
WorldBuildHeadUIManager.CheckShowAllianceBuildEffect =CheckShowAllianceBuildEffect
WorldBuildHeadUIManager.HideAllianceBuildAttackHeadUISignal = HideAllianceBuildAttackHeadUISignal
WorldBuildHeadUIManager.ShowDragonBuildAttackHeadUISignal =ShowDragonBuildAttackHeadUISignal
WorldBuildHeadUIManager.CheckShowDragonBuildEffect =CheckShowDragonBuildEffect
WorldBuildHeadUIManager.HideDragonBuildAttackHeadUISignal = HideDragonBuildAttackHeadUISignal
return WorldBuildHeadUIManager