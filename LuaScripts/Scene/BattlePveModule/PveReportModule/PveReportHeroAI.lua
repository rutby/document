---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/9/22 11:02
---
local PveReportHeroAI = BaseClass("PveReportHeroAI")
local States = require("Util.States")
local CharacterStateType = require("Scene.PVEBattleLevel.Character.State.CharacterStateType")


local StateType = {
    SearchEnemyState = "SearchEnemyState",
    AttackState = "AttackState",
    MoveState = "MoveState",
    SkillState = "SkillState",  --技能
}

function PveReportHeroAI:__init(owner)
    self.m_owner = owner

    self.moveRange = owner.info:GetMoveRangeStage()
    self.attackCd = owner.info:GetAttackCdStage()
    self.lastAttackTime = 0

    self.searchTime = 0

    self:__initState()
end

function PveReportHeroAI:__initState()
    self.m_states = States.New(self)
    self.m_states:AddState(StateType.SearchEnemyState,nil,self.SearchEnemy_Update)
    self.m_states:AddState(StateType.AttackState,self.Attack_Enter,self.Attack_Update)
    self.m_states:AddState(StateType.MoveState,nil,self.Move_Update)
    self.m_states:AddState(StateType.SkillState,self.Skill_Enter)
end

function PveReportHeroAI:OnUpdate(deltaTime)
    self.m_states:Update(deltaTime)
end

function PveReportHeroAI:Start()
    self.m_states:SetState(StateType.SearchEnemyState)
end

function PveReportHeroAI:SearchEnemy_Update(deltaTime)
    self.m_enemy = self.m_owner:SearchEnemyTarget()
    if self.m_enemy then
        self.m_states:SetState(StateType.MoveState)
    end
end

function PveReportHeroAI:Move_Update(deltaTime)
    if self.m_enemy and self.m_enemy:GetCurBlood() > 0 then
        local ownerPos = self.m_owner:GetPosition()
        local targetPos = self.m_enemy:GetPosition()
        local dis = Vector3.Distance(ownerPos,targetPos) - self.m_enemy:GetModelRadius()

        if self.m_owner:IsFarPart() then
            if dis < self.moveRange then
                --主武器可以够的着了，用主武器
                self.m_owner:ChangeSkinPart(false)
            end
        end

        if dis <= self:GetAttackRadius() then
            if self.useSkill then
                self.m_states:SetState(StateType.SkillState)
            else
                self.m_states:SetState(StateType.AttackState)
            end
        else
            --目标没进攻击范围，找最近的目标
            self.searchTime = self.searchTime + deltaTime
            if self.searchTime > 0.5 then
                self.searchTime = 0

                local newTarget = self.m_owner:SearchAttackTargetByRange()
                if newTarget ~= nil then
                    self.m_enemy = newTarget
                    targetPos = newTarget:GetPosition()
                end
            end

            if dis < self.moveRange then
                self.m_owner:MovePath(targetPos)
            else
                --打也打不着，跑也跑不过去,切换副武器
                self.m_owner:ChangeSkinPart(true)
            end
        end
    else
        self.m_enemy = nil
        self.m_states:SetState(StateType.SearchEnemyState)
    end
end

function PveReportHeroAI:Attack_Enter()
    self.attackEnd = false
    self.m_owner:ExitCurrentState()
end

function PveReportHeroAI:Attack_Update(deltaTime)
    if self.attackEnd then
       return
    end

    if self.m_enemy and self.m_enemy:GetCurBlood() > 0 then
        if Time.time - self.lastAttackTime >= self.attackCd then
            self.attackEnd = true
            self.m_owner:Attack(self.m_enemy)
            self.m_owner:StopAttack() --取消循环攻击，变成单次攻击，支持不同攻击动画
        end
    else
        self.m_states:SetState(StateType.SearchEnemyState)
    end
end

function PveReportHeroAI:DoSkill()
    self.useSkill = true
end

--技能状态
function PveReportHeroAI:Skill_Enter()
    self.useSkill = false
    self.m_owner:DoReportSkill()
end

function PveReportHeroAI:OnStateComplete(type)
    if type == CharacterStateType.Attack or type == CharacterStateType.ReportSkill then
        if type == CharacterStateType.Attack then
            self.lastAttackTime = Time.time
        end
        if self.m_enemy and self.m_enemy:GetCurBlood() > 0 then
            self.m_states:SetState(StateType.MoveState)
        else
            self.m_states:SetState(StateType.SearchEnemyState)
        end
    end
end

function PveReportHeroAI:GetAttackRadius()
    return self.m_owner:GetAttackRange()
end

function PveReportHeroAI:GetEnemy()
    return self.m_enemy
end

function PveReportHeroAI:Destroy()
    self.m_owner = nil
    self.m_enemy = nil
end

return PveReportHeroAI