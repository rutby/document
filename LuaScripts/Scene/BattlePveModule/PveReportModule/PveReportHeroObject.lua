---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/9/21 19:31
---
local Base = require("Scene.PVEBattleLevel.Character.Hero")
local PveReportHeroObject = BaseClass("PveReportHeroObject",Base)
local PveReportHeroAI = require("Scene.BattlePveModule.PveReportModule.PveReportHeroAI")
local Const= require "Scene.BattlePveModule.Const"
local CharacterStateType = require("Scene.PVEBattleLevel.Character.State.CharacterStateType")
local PveBuffManager = require("Scene.BattlePveModule.PveReportModule.Buff.PveBuffManager")
local CharacterAnimation = require("DataCenter.Survival.Character.CharacterAnimation")
local CharacterLevel = require "Scene.PVEBattleLevel.Character.CharacterLevel"

function PveReportHeroObject:__init(battleLevel,objId,info,battleMgr)
    Base.__init(self,battleLevel,objId,info)
    self.m_battleMgr = battleMgr
    self.m_start = false
    self.m_isCreateFinish = false
    self.m_buffMgr = PveBuffManager.New(self)
    self.m_skillList = {}
    self.m_beHitEffectPosition = Vector3.New()
    self.m_isFarPart = false
    self.m_level = CharacterLevel.New(self)
end

function PveReportHeroObject:__initAI()
    self.ai = PveReportHeroAI.New(self)
end

function PveReportHeroObject:__assetCreateComplete()
    Base.__assetCreateComplete(self)

    self:UpdatePos(self.info:GetStandIndex())

    if self.info:GetCampType() == Const.CampType.Target then
        self.m_transform.localRotation = Quaternion.Euler(0, 180,0)
    else
        self.m_transform.localRotation = Quaternion.Euler(0, 0,0)
    end
    self.m_transform:Set_localScale(1,1,1)

    self.m_beHitEffectContainer = self.m_transform:Find("beHitEffect")

    self.m_isCreateFinish = true
end

function PveReportHeroObject:UpdatePos(index)
    self.info:SetStandIndex(index)

    local posObj = PveActorMgr:GetInstance():GetStandObj(self.info:GetCampType(), index)
    self:SetPosition(posObj.position)
end

function PveReportHeroObject:__checkPauseState()
    --专门复写不受父类影响，突突突角色不受RoleMgr的暂停影响，就算以后有中间暂停逻辑，也是突突突单独做
end

function PveReportHeroObject:OnUpdate(deltaTime)
    Base.OnUpdate(self,deltaTime)
    if self.m_isPause or self:IsDie() or not self.m_start then
        return
    end

    self.m_buffMgr:OnUpdate(deltaTime)
end

function PveReportHeroObject:StartAI()
    if self.m_start and self.ai ~= nil then
        self.ai:Start()
    end
end

function PveReportHeroObject:Start()
    self.m_start = true
    self:StartAI()
end

function PveReportHeroObject:AttackEnemy(enemy)
    self.m_battleMgr:AttackEnemy(self,enemy)
end

function PveReportHeroObject:BeAttack(attackNum)
    attackNum = Mathf.Max(attackNum,1)

    --SUSoundUtil.PlayActorActionSound(self:GetPrefabName(), 'damage')

    self:UpdateHPBar()
end
--释放技能
function PveReportHeroObject:ReportSkill(skill)
    if self.m_skill == nil then
        --Logger.LogError("Hero ReportSkill:"..skill:GetSkillId())
        self.m_skill = skill
        self.ai:DoSkill()
    else
        table.insert(self.m_skillList,skill)
    end
end

function PveReportHeroObject:DoReportSkill()
    self:SetState(CharacterStateType.ReportSkill,{target = self:SearchEnemyTarget()})
end

--技能攻击敌人
function PveReportHeroObject:SkillAttackEnemy()
    if self.m_skill == nil then
        return
    end
    self.m_battleMgr:SkillAttackEnemy(self.m_skill,self.ai:GetEnemy())
    self.m_skill = nil
end
--添加Buff
function PveReportHeroObject:AddBuff(buffs)
    --Logger.LogError("PveReportHeroObject:AddBuff")
    self.m_buffMgr:AddBuffs(buffs)
end
--直接死亡
function PveReportHeroObject:DoDead()
    self.info:SetHealth(0)
    self:UpdateHPBar()
    self:Die()
end

function PveReportHeroObject:InitHealth(value)
    self.info:InitHealth(value)
    self:UpdateHPBar()
end

function PveReportHeroObject:UpdateHPBar()
    --if self.HP then
    --    self.HP:UpdateHpBarVal(self.info:GetCurBlood(),self.info:GetMaxBlood())
    --end
end

function PveReportHeroObject:SetPowerRatio(ratio)
    self.info:SetPowerRatio(ratio)
end

function PveReportHeroObject:OnStateComplete(type,data)
    if type == CharacterStateType.Attack or type == CharacterStateType.MoveByPath or type == CharacterStateType.ReportSkill then
        if #self.m_skillList > 0 then --有技能没有释放
            self:ReportSkill(self.m_skillList[1])
            table.remove(self.m_skillList,1)
        end
    end
    Base.OnStateComplete(self,type,data)
end

function PveReportHeroObject:ChangeSkinPart(isFar)
    local partId = 0
    local animationId = 0
    if isFar then
        self.m_isFarPart = true
        partId = self.info:GetFarPartId()
        animationId = self.info:GetFarAnimation()
    else
        self.m_isFarPart = false
        partId = self.info:GetPartId()
        animationId = self.info:GetAnimation()
    end

    if partId ~= 0 and self.m_skin ~= nil and self.m_skin:GetPartId() ~= partId then
        self.m_skin:SetPart(partId)

        --换了部件再换动画
        if animationId ~= 0 then
            self.m_animation = CharacterAnimation.New(animationId)

            self.m_stateManager:ChangeCharacterState()
        end
    end
end

function PveReportHeroObject:GetAttackRange()
    if self.m_isFarPart then
        return self.info:GetFarAttackRange()
    end
    return Base.GetAttackRange(self)
end

function PveReportHeroObject:IsFarPart()
    return self.m_isFarPart
end
--兼容老接口
function PveReportHeroObject:SetHeroPower(value)
    return self.info:SetHeroPower(value)
end

function PveReportHeroObject:GetPower()
    return self.info:GetPower()
end

function PveReportHeroObject:GetPowerRatio()
    return self.info:GetPowerRatio()
end

function PveReportHeroObject:IsDead()
    return self.info:IsDead()
end

function PveReportHeroObject:GetHeroId()
    return self.info:GetHeroId()
end

function PveReportHeroObject:GetSkillAnim()
    local skillAnim
    if self.m_isFarPart then
        skillAnim = self.info:GetFarSkillAnim()
    else
        skillAnim = self.info:GetSkillAnim()
    end
    if string.IsNullOrEmpty(skillAnim) then
        skillAnim = self:GetAttackAnimName()
    end
    return skillAnim
end

function PveReportHeroObject:SearchEnemyTarget()
    return self.m_battleMgr:SearchAttackTargetByRange(self.info:GetCampType(),self:GetPosition(), 1000, 0)
    --return self.m_battleMgr:SearchAttackTarget(self.info:GetCampType(),self.info:GetStandIndex())
end

function PveReportHeroObject:SearchAttackTargetByRange()
    return self.m_battleMgr:SearchAttackTargetByRange(self.info:GetCampType(),self:GetPosition(),self:GetAttackRange(),self:GetModelRadius())
end

function PveReportHeroObject:IsCreateFinish()
    return self.m_isCreateFinish
end

function PveReportHeroObject:PlayBeAttackVFX(attackAnimName)
    local vfx = DataCenter.PveActVFXTemplateManager:GetTemplate(attackAnimName)
    if vfx ~= nil then
        if not string.IsNullOrEmpty(vfx.behit_eff) then
            if not IsNull(self.m_beHitEffectContainer) then
                local x, y, z = self.m_beHitEffectContainer:Get_position()
                self.m_beHitEffectPosition:Set(x,y,z)
            else
                self.m_beHitEffectPosition:Set(self.m_position.x,self.m_position.y,self.m_position.z)
            end
            local effect = self.battleLevel:CreateVFX(vfx.behit_eff,self.m_beHitEffectPosition,self:GetRotation())
            local x,y,z = self.m_transform:Get_localScale()
            effect:SetScale(x,y,z)
        end

        if not string.IsNullOrEmpty(vfx.death_act) then
            self.deadAnimName = vfx.death_act
        end
    end
end

function PveReportHeroObject:PlayAddHpVFX()
    self:CreateVFX("1025")
end

function PveReportHeroObject:GetDeadAnimName()
    if not string.IsNullOrEmpty(self.deadAnimName) and self:HasAnim(self.deadAnimName) then
        return self.deadAnimName
    end
    return Base.GetDeadAnimName(self)
end

function PveReportHeroObject:IsFriendly()
    return self.info:GetCampType() == Const.CampType.Player
end

function PveReportHeroObject:IsBoss()
    return self.info:IsBoss()
end

function PveReportHeroObject:GetHeroUuid()
    return self.info:GetHeroUuid()
end

function PveReportHeroObject:GetHeroPower()
    return self.info:GetPower()
end

function PveReportHeroObject:Destroy()
    Base.Destroy(self)
    self.m_battleMgr = nil
    self.m_skillList = nil
    self.m_skill = nil
    self.m_buffMgr:Destroy()
    self.m_level:Destroy()
end

function PveReportHeroObject:ShowLevel(isSelf, camp, level, scale)
    self.m_level:Create(scale, function()
        self.m_level:SetLevel(level)
        self.m_level:SetCamp(camp)
        self.m_level:SetIsSelf(isSelf)
    end)
end

function PveReportHeroObject:HideLevel()
    self.m_level:Destroy()
end

return PveReportHeroObject