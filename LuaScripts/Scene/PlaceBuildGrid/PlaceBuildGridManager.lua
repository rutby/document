---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/11/7 18:58
---

local PlaceBuildGridManager = BaseClass("PlaceBuildGridManager", Singleton)
local effect_prefab = "Assets/_Art/Effect/prefab/scene/Build/XuanQu/VFX_cn_cankaoge_white.prefab"
local ResourceManager = CS.GameEntry.Resource
local max_num_per_batch = 1000
local SystemInfo = CS.UnityEngine.SystemInfo
local function __init(self)
    self.allPoint = nil
    self.request = nil
    self.allMatrix = {}
    self.matrixNum = {}

    self.allMatrix1 = {}
    self.matrixNum1 = {}

end

local function __delete(self)
    self.allPoint = nil
    if self.request ~= nil then
        self.request:Destroy()
    end
    self.request = nil
end

local function RedrawGrid(self, allPoint)
    if self.allPoint == nil then
        self.allPoint = allPoint
    end
    if self.request == nil then
        self.request = ResourceManager:InstantiateAsync(effect_prefab)
    end
    if self.request.gameObject ~= nil then
        self:DoDraw()
    end
end

local function DoDraw(self)
    if self.material == nil then
        self.allMatrix = {}
        self.matrixNum = {}

        self.allMatrix1 = {}
        self.matrixNum1 = {}

        --render
        local meshRender = self.request.gameObject.transform:Find(""):GetComponent(typeof(CS.UnityEngine.MeshRenderer))
        self.material = meshRender.material
        local meshFilter = self.request.gameObject.transform:Find(""):GetComponent(typeof(CS.UnityEngine.MeshFilter))
        self.mesh = meshFilter.mesh

        --render1
        local meshRender1 = self.request.gameObject.transform:Find("VFX_cn_cankaoge_white"):GetComponent(typeof(CS.UnityEngine.MeshRenderer))
        self.material1 = meshRender1.material
        local meshFilter1 = self.request.gameObject.transform:Find("VFX_cn_cankaoge_white"):GetComponent(typeof(CS.UnityEngine.MeshFilter))
        self.mesh1 = meshFilter1.mesh

        self.total = #self.allPoint + 1
        
        local currentMatrix = nil
        table.walk(self.allPoint, function (k, v)
            local index = math.fmod(k - 1, max_num_per_batch)
            if index == 0 then
                local matrix = CS.System.Array.CreateInstance(typeof(CS.UnityEngine.Matrix4x4), max_num_per_batch)
                table.insert(self.allMatrix, matrix)
                currentMatrix = matrix
                table.insert(self.matrixNum, max_num_per_batch)
            end
            self.request.gameObject.transform.position = SceneUtils.TileIndexToWorld(v)
            --self.request.gameObject.transform.position.y = 0.1
            local tmp = self.request.gameObject.transform.localToWorldMatrix
            currentMatrix[index] = tmp
        end)

        local currentMatrix1 = nil
        table.walk(self.allPoint, function (k, v)
            local index = math.fmod(k - 1, max_num_per_batch)
            if index == 0 then
                local matrix = CS.System.Array.CreateInstance(typeof(CS.UnityEngine.Matrix4x4), max_num_per_batch)
                table.insert(self.allMatrix1, matrix)
                currentMatrix1 = matrix
                table.insert(self.matrixNum1, max_num_per_batch)
            end
            self.request.gameObject.transform.position = SceneUtils.TileIndexToWorld(v)
            --self.request.gameObject.transform.position.y = 0.1
            local tmp = self.request.gameObject.transform.localToWorldMatrix
            currentMatrix1[index] = tmp
        end)

    end
    local total = table.count(self.allMatrix)
    local nums = table.count(self.matrixNum)
    if total ~= nums then
        return
    end
    if SystemInfo.supportsInstancing then
        for i = 1, total do
            CS.UnityEngine.Graphics.DrawMeshInstanced(self.mesh, 0, self.material, self.allMatrix[i], self.matrixNum[i])
        end
    end

    total = table.count(self.allMatrix1)
    nums = table.count(self.matrixNum1)
    if total ~= nums then
        return
    end
    if SystemInfo.supportsInstancing then
        for i = 1, total do
            CS.UnityEngine.Graphics.DrawMeshInstanced(self.mesh1, 0, self.material1, self.allMatrix1[i], self.matrixNum1[i])

        end
    end

end

local function ResetGridData(self)
    self.allPoint = nil
    if self.request ~= nil then
        self.request:Destroy()
    end
    self.request = nil
    self.mesh = nil
    self.material = nil
    self.allMatrix = {}
    self.matrixNum = {}
    self.mesh1 = nil
    self.material1 = nil

    self.allMatrix1 = {}
    self.matrixNum1 = {}
end

PlaceBuildGridManager.__init = __init
PlaceBuildGridManager.__delete = __delete
PlaceBuildGridManager.ResetGridData = ResetGridData
PlaceBuildGridManager.DoDraw = DoDraw
PlaceBuildGridManager.RedrawGrid = RedrawGrid
return PlaceBuildGridManager
