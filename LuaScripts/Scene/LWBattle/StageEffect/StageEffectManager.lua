---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/3/6 10:12
---

local StageEffectManager = BaseClass("StageEffectManager")
local StageEffect = require "Scene.LWBattle.StageEffect.StageEffect"

function StageEffectManager:__init(logic)
    self.logic = logic
    self.stageEffectList = {} -- List<StageEffect>
    self.stageEffectValDict = {} -- Dict<StageEffectType, val>
end

function StageEffectManager:Destroy()
    self:Clear()
end

function StageEffectManager:Clear()
    self.stageEffectList = {}
    self.stageEffectValDict = {}
end

function StageEffectManager:Add(type, val)
    local stageEffect = StageEffect.New(type, val)
    table.insert(self.stageEffectList, stageEffect)
    self:Recalculate()
end

function StageEffectManager:Recalculate()
    self.stageEffectValDict = {}
    for _, stageEffect in ipairs(self.stageEffectList) do
        local type = stageEffect.type
        if self.stageEffectValDict[type] == nil then
            self.stageEffectValDict[type] = 0
        end
        self.stageEffectValDict[type] = self.stageEffectValDict[type] + stageEffect.val
    end
end

function StageEffectManager:Get(type)
    return self.stageEffectValDict[type] or 0
end

return StageEffectManager