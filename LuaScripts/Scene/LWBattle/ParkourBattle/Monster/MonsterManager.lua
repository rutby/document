---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by w.
--- DateTime: 2022/12/30 16:32
---

local ColliderMonster = require "Scene.LWBattle.ParkourBattle.Monster.MonsterImpl.ColliderMonster"
local CommonAIMonster = require "Scene.LWBattle.ParkourBattle.Monster.MonsterImpl.CommonAIMonster"
local TableMonster = require "Scene.LWBattle.ParkourBattle.Monster.MonsterImpl.TableMonster"
local TriggerGate = require "Scene.LWBattle.ParkourBattle.Monster.MonsterImpl.TriggerGate"
local TriggerGoods = require "Scene.LWBattle.ParkourBattle.Monster.MonsterImpl.TriggerGoods"
local CarMonster = require "Scene.LWBattle.ParkourBattle.Monster.MonsterImpl.CarMonster"
local GenMonsterTask = require "Scene.LWBattle.ParkourBattle.Monster.GenMonsterTask"
local GenDefenseMonsterTask = require "Scene.LWBattle.ParkourBattle.Monster.GenDefenseMonsterTask"
local GenSummonMonsterTask = require "Scene.LWBattle.ParkourBattle.Monster.GenSummonMonsterTask"
local Const = require("Scene.LWBattle.Const")
---@class Scene.LWBattle.ParkourBattle.Monster.MonsterManager  
local MonsterManager = BaseClass("MonsterManager")

local ViewDisForward = 60
local ViewDisBack = 30
local CreateCountPerFrame = 10
local MonsterBornType={
    SingleMonster = 1,--一个怪
    BirthArea = 2,--触发线触发，在范围内生成若干怪物
    BirthPoint = 3,--触发线触发，在坐标点生成若干怪物
    BuffTrigger = 4,--一个buff球
    ResTrigger = 5,--一个资源
    BirthRound = 6,--触发线触发，在范围内生成若干怪物
}

function MonsterManager:Init(logic)
    self.logic = logic
    self.allMonster = {}
    self.showList = {}
    self.waitCreate = {}
    local line =logic.data.meta
    self.parkourBattleType = Const.ParkourBattleType.Attack
    if logic.battleType then
        self.parkourBattleType = logic.battleType
    end
    --刷怪
    self.farmMonster = {}
    self.triggerEvent={}
    self.tasks = {}
    self.taskGuid = 1
    
    local monsterArr = string.split(line:getValue("farm_monster") or "", "|")
    for _, monsterId in ipairs(monsterArr) do
        local monster = LocalController:instance():getLine(LuaEntry.Player:GetABTestTableName(TableName.LW_Monster_Born), monsterId)
        if monster == nil then
            Logger.LogError("lw_monster_born 没有id:"..monsterId)
        elseif monster.type == MonsterBornType.SingleMonster
                or monster.type == MonsterBornType.BuffTrigger
                or monster.type == MonsterBornType.ResTrigger then
            if monster.y == nil then
                local spl = string.split(monster.coord,",")
                monster.x = tonumber(spl[1])
                monster.y = tonumber(spl[2])
            end
            table.insert(self.farmMonster,monster)
        elseif monster.type == MonsterBornType.BirthArea or monster.type == MonsterBornType.BirthPoint or monster.type == MonsterBornType.BirthRound then
            local spl = string.split(monster.para,"|")
            local trigger = {["line"]=tonumber(spl[1]),["param"]=monster,}
            table.insert(self.triggerEvent,trigger)
        end
    end
    self.bossMonster = {}
    monsterArr = string.split(line:getValue("battle_monster") or "", "|")
    for _, monsterId in ipairs(monsterArr) do
        if not string.IsNullOrEmpty(monsterId) then
            local monster = LocalController:instance():getLine(LuaEntry.Player:GetABTestTableName(TableName.LW_Monster_Born), monsterId)
            table.insert(self.bossMonster,monster)
        end
    end
end

function MonsterManager:Update(viewY)
    if self.logic == nil or self.waitCreate == nil then --未初始化
        return
    end
    self:UpdateFixPointMonster(viewY)
    self:UpdateTrigger(viewY)
    self:UpdateTask()
    self:UpdateAllMonster()
    
end

function MonsterManager:UpdateFixPointMonster(viewY)
    for k, monster in pairs(self.farmMonster) do
        if monster.y - viewY < ViewDisForward then
            table.insert(self.waitCreate,monster)
            self.farmMonster[k] = nil
        end
    end

    for k, monster in pairs(self.showList) do
        if viewY - monster.y > ViewDisBack then
            self:RemoveMonster(monster.guid)
        end
    end

    for k, monster in pairs(self.waitCreate) do
        if viewY - monster.y > ViewDisBack then
            self.waitCreate[k] = nil
        end
    end

    -- 分帧创建
    local count = 0
    for k, meta in pairs(self.waitCreate) do
        self.waitCreate[k] = nil
        local m = self:CreateFarmMonster(meta)
        if m then
            m:Load()
            self.showList[m.guid] = m
            count = count + 1
        end

        if count > CreateCountPerFrame then
            break
        end
    end
end

function MonsterManager:UpdateTrigger(viewY)
    for k, trigger in pairs(self.triggerEvent) do
        if viewY >= trigger.line then
            if trigger.param.type == MonsterBornType.BirthArea or trigger.param.type == MonsterBornType.BirthPoint or trigger.param.type == MonsterBornType.BirthRound then
                local task = GenMonsterTask.New(self,trigger.param)
                self:AddTask(task)
            end
            self.triggerEvent[k] = nil
        end
    end
end

function MonsterManager:UpdateTask()
    for k, task in pairs(self.tasks) do
        if task.Update then
            task:Update()
        end
    end
end
function MonsterManager:UpdateAllMonster()
    for k, monster in pairs(self.allMonster) do
        if monster then
            monster:OnUpdate()
        end
    end
end


function MonsterManager:UpdateDefense(teamPosY, offsetY)
    if self.logic == nil or self.waitCreate == nil then --未初始化
        return
    end
    
    self:UpdateDefenseFixPointMonster(teamPosY, offsetY)
    self:UpdateDefenseTrigger(teamPosY, offsetY)
    self:UpdateTask()
    self:UpdateAllMonster()

end

function MonsterManager:UpdateDefenseFixPointMonster(teamPosY, offsetY)
    for k, monster in pairs(self.farmMonster) do
        if monster.y + offsetY - teamPosY < ViewDisForward then
            monster.offsetY = offsetY
            table.insert(self.waitCreate,monster)
            self.farmMonster[k] = nil
        end
    end

    for k, monster in pairs(self.showList) do
        if teamPosY - monster.y > ViewDisBack then
            self:RemoveMonster(monster.guid)
        end
    end

    for k, monster in pairs(self.waitCreate) do
        if teamPosY - monster.y > ViewDisBack then
            self.waitCreate[k] = nil
        end
    end

    -- 分帧创建
    local count = 0
    for k, meta in pairs(self.waitCreate) do
        self.waitCreate[k] = nil
        local m = self:CreateFarmMonster(meta)
        if m then
            m:ModifyPosY(meta.y + meta.offsetY)     --塔防模式优化怪物加载，随时间推移怪物应该出现在视口内时再加载，动态修改加载时的怪物位置
            m:Load()
            self.showList[m.guid] = m
            count = count + 1
        end

        if count > CreateCountPerFrame then
            break
        end
    end
end

function MonsterManager:UpdateDefenseTrigger(teamPosY, offsetY)
    for k, trigger in pairs(self.triggerEvent) do
        if teamPosY >= trigger.line + offsetY then
            if trigger.param.type == MonsterBornType.BirthArea or trigger.param.type == MonsterBornType.BirthPoint or trigger.param.type == MonsterBornType.BirthRound then
                local task = GenDefenseMonsterTask.New(self,trigger.param)
                self:AddTask(task)
            end
            self.triggerEvent[k] = nil
        end
    end
end

function MonsterManager:CreateFarmMonster(bornMeta)
    local monsterArr = {}
    local monster = nil
    if bornMeta.type == MonsterBornType.SingleMonster then
        local spl = string.split(bornMeta.monster,",")
        for k, v in pairs(spl) do
            local innerSpl = string.split(v,"|")
            local randomParam = {id = tonumber(innerSpl[1]) , p = tonumber(innerSpl[2])}
            table.insert(monsterArr,randomParam)
        end
        local r = math.random(0,10000)
        local mId = 0
        for _, v in ipairs(monsterArr) do
            mId = v.id
            if r > v.p then
                break
            end
        end
        if mId > 0 then
            monster = self:CreateMonster(bornMeta.x,bornMeta.y,mId)
        end
    elseif bornMeta.type == MonsterBornType.BuffTrigger then--buff球
        if bornMeta.buff_item ~= "" then
            monster = self:CreateTriggerGate(bornMeta.x,bornMeta.y,bornMeta.buff_item)
        end
    elseif bornMeta.type == MonsterBornType.ResTrigger then--获得物品
        if bornMeta.buff_item ~= "" then
            monster = self:CreateTriggerGoods(bornMeta.x,bornMeta.y,bornMeta.buff_item)
        end
    end
    return monster
end

function MonsterManager:CreateMonster(x,y,metaId)
    local meta = DataCenter.PveMonsterTemplateManager:GetTemplate(metaId)
    local monster = nil
    if meta.monster_type == Const.MonsterType.Junk then --静物
        monster = ObjectPool:GetInstance():Load(ColliderMonster)
    elseif meta.monster_type == Const.MonsterType.Table then --台子
        monster = ObjectPool:GetInstance():Load(TableMonster)
    elseif meta.monster_type == Const.MonsterType.Car then --卡车
        monster = ObjectPool:GetInstance():Load(CarMonster)
    elseif meta.monster_type == Const.MonsterType.Normal or meta.monster_type == Const.MonsterType.Boss or meta.monster_type == Const.MonsterType.Elite then --僵尸
        monster = ObjectPool:GetInstance():Load(CommonAIMonster)
    end
    
    if monster then
        monster:Init(self.logic,self,self.logic:AllotUnitGuid(),x,y,meta)
        self.allMonster[monster.guid] = monster
        self.logic:AddUnit(monster)
        if monster.monsterMeta.is_boss == 1 or monster.monsterMeta.monster_type == Const.MonsterType.Boss then
            self.logic:OnBossEnterBattle(monster)
        end
    end
    
    return monster
end

function MonsterManager:CreateTriggerGate(x,y,buff_item)
    local fakemeta = {
        hp = 0,
        death_trigger_item = buff_item
    }
    local monster = ObjectPool:GetInstance():Load(TriggerGate)
    monster:Init(self.logic,self,self.logic:AllotUnitGuid(),x,y,fakemeta)
    if monster then
        self.allMonster[monster.guid] = monster
        self.logic:AddUnit(monster)
    end
    return monster
end

function MonsterManager:CreateTriggerGoods(x,y,buff_item)
    local fakemeta = {
        hp = 0,
        death_trigger_item = buff_item
    }
    local monster = ObjectPool:GetInstance():Load(TriggerGoods)
    monster:Init(self.logic,self,self.logic:AllotUnitGuid(),x,y,fakemeta)
    if monster then
        self.allMonster[monster.guid] = monster
        self.logic:AddUnit(monster)
    end
    return monster
end

function MonsterManager:Summon(pos, metaId, count, hp, ownerMeta)

    local task = GenSummonMonsterTask.New(self, pos, metaId, count, hp,ownerMeta)
    self:AddTask(task)
end

function MonsterManager:GetMonster(guid)
    return self.showList[guid]
end

function MonsterManager:RemoveMonster(guid)
    if self.showList == nil then
        return
    end
    if self.showList[guid] then
        self.showList[guid] = nil
    end
    if self.allMonster[guid] then
        self.allMonster[guid] = nil
    end
    self.logic:RemoveUnit(guid)
end

function MonsterManager:AddTask(task)
    self.taskGuid =  self.taskGuid + 1
    task.id = self.taskGuid
    self.tasks[self.taskGuid] = task
end

function MonsterManager:RemoveTask(task)
    if(self.tasks == nil or self.tasks[task.id] == nil) then
        return
    end
    self.tasks[task.id] = nil
end

function MonsterManager:Destroy()
    
    
    self.allMonster = nil
    self.showList = nil
    self.waitCreate = nil
end


return MonsterManager
