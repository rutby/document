---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wjy.
--- DateTime: 2023/1/9 20:12
---
local Physics = CS.UnityEngine.Physics
local ColliderComponent = BaseClass("ColliderColliderComponent")

local ColliderType = {
    None = 0,
    Capsule = 1,
    Box = 2,
    Sphere = 3,
}


function ColliderComponent:__init(transform,maxCollid,layerMask)
    self.onCollide = nil
    self.colliderType = ColliderType.None
    self:InitCollider(transform,maxCollid,layerMask)
end

function ColliderComponent:__delete()
    self.colliderArray = nil
end

function ColliderComponent:InitCollider(transform, _, layerMask)
    if DataCenter.LWBattleManager:UseNewDetect() then
        if transform == nil then
            return false
        end
        local trigger = transform:GetComponent(typeof(CS.CitySpaceManTrigger))
        if trigger == nil then
            return false
        end

        self.transform = transform
        self.collider = nil
        self.colliderType = ColliderType.None
        if trigger.Radius > 0 then
            self.radius = trigger.Radius
            self.colliderType = ColliderType.Sphere
        elseif trigger.SizeX > 0 and trigger.SizeZ > 0 then
            self.sizeX = trigger.SizeX
            self.sizeZ = trigger.SizeZ
            self.colliderType = ColliderType.Box
        end
        self.layerMask = layerMask or 0xffffffff
        return true
    else
        self.transform = transform
        self.collider = nil
        self.colliderType = ColliderType.None
        self.colliderParam = {}
        self.colliderArray = CS.System.Array.CreateInstance(typeof(CS.UnityEngine.Collider),maxCollid or 10) -- TODO 配置
        if not transform then return false end
        local layerMask = layerMask or 0xffffffff

        -- Box
        local have,collider = transform:TryGetComponent(typeof(CS.UnityEngine.BoxCollider))
        if have then
            self.collider = collider
            self.colliderType = ColliderType.Box
            self.colliderParam = {
                halfExtents = collider.size/2,
                layerMask = layerMask
            }
            return true
        end
        -- Capsule 暂时不考虑rotation 
        local have,collider = transform:TryGetComponent(typeof(CS.UnityEngine.CapsuleCollider))
        if have then
            self.collider = collider
            self.colliderType = ColliderType.Capsule
            local halfVec = ({
                Vector3.right,
                Vector3.up,
                Vector3.forward,
            })[tonumber(collider.direction)+1] * (collider.height/2)
            self.colliderParam = {
                radius = collider.radius,
                halfVector = halfVec,
                layerMask = layerMask
            }
            return true
        end
        -- Sphere
        local have,collider = transform:TryGetComponent(typeof(CS.UnityEngine.SphereCollider))
        if have then
            self.collider = collider
            self.colliderType = ColliderType.Sphere
            self.colliderParam = {
                radius = collider.radius,
                layerMask = layerMask
            }
            return true
        end
    end
end

function ColliderComponent:CollisionDetect()
    if self.colliderType == ColliderType.None then
        return
    end
    if DataCenter.LWBattleManager:UseNewDetect() then
        local units = nil
        local pos = self.transform.position
        local logic = DataCenter.LWBattleManager.logic
        if self.colliderType == ColliderType.Sphere then
            units = PveUtil.GetAllUnitsInSphereRange(logic, pos, self.radius, self.layerMask)

        elseif self.colliderType == ColliderType.Box then
            units = PveUtil.GetAllUnitsInBoxRange(logic, pos, self.sizeX, self.sizeZ, self.layerMask)

        elseif self.colliderType == ColliderType.Capsule then
            units = PveUtil.GetAllUnitsInBoxRange(logic, pos, self.sizeX, self.sizeZ, self.layerMask)

        end
        if units then
            local count = #units
            local arr = {}
            for i = 0, count - 1 do -- 兼容旧版，可优化
                arr[i] = units[i + 1].collider
            end

            if self.onCollide and count > 0 then
                self.onCollide(count, arr)
            end
        end
    else
        local colliderCnt = 0
        local pos = self.transform:TransformPoint(self.collider.center)
        if self.colliderType == ColliderType.Sphere then
            -- public static int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results, int layerMask = AllLayers, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal);
            colliderCnt = Physics.OverlapSphereNonAlloc(
                    pos,
                    self.colliderParam.radius,
                    self.colliderArray,
                    self.colliderParam.layerMask
            )

        elseif self.colliderType == ColliderType.Box then
            -- public static int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation = Quaternion.identity, int mask = AllLayers, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal);
            colliderCnt = Physics.OverlapBoxNonAlloc(
                    pos,
                    self.colliderParam.halfExtents,
                    self.colliderArray,
                    self.transform.rotation,
                    self.colliderParam.layerMask
            )

        elseif self.colliderType == ColliderType.Capsule then
            -- public static int OverlapCapsuleNonAlloc(Vector3 point0, Vector3 point1, float radius, Collider[] results, int layerMask = AllLayers, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal);
            colliderCnt = Physics.OverlapCapsuleNonAlloc(
                    pos+self.colliderParam.halfVector,
                    pos-self.colliderParam.halfVector,
                    self.colliderParam.radius,
                    self.colliderArray,
                    self.colliderParam.layerMask
            )
        end
        if self.onCollide and colliderCnt>0 then
            self.onCollide(colliderCnt, self.colliderArray )
        end
    end
end

function ColliderComponent:SetOnCollide(callback)
    self.onCollide = callback
end

function ColliderComponent:RemoveOnCollide()
    self.onCollide = nil
end

function ColliderComponent:Destroy()
    self:RemoveOnCollide()
    self.transform = nil
    self.collider = nil
end

return ColliderComponent