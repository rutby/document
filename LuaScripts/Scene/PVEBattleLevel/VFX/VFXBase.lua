---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/4/12 12:25
---特效基类，子类可以扩展各种功能特效，比如普通特效（只播放删除）,子弹，弓箭，爆炸，飙血等
---建议配套c_effect里得特效来用，可以支持更多得扩展
---也支持非c_effect里得特效，用于特殊情况
local VFXBase = BaseClass("VFXBase")
local ResourceManager = CS.GameEntry.Resource

local oldEffectPath = "Assets/Main/Prefab_Dir/Effect/%s.prefab"

local PlayState = {
    Play = "Play",
    Stop = "Stop",
    Pause = "Pause"
}

function VFXBase:__init(id,vfxId,completeHandler)
    self.m_id = id
    self.m_vfxId = vfxId
    self.m_OnComplete = completeHandler
    self.m_req = nil
    self.m_particle = nil
    self.m_gameObject = nil
    self.m_transform = nil
    self.m_parent = nil
    self.m_playState = nil
    self.m_position = Vector3.New(0,0,0)
    self.m_rotation = Quaternion.Euler(0, 0, 0)
    self.m_scale = Vector3.New(1,1,1)
    self.m_template = DataCenter.PveVFXTemplateManager:GetTemplate(tonumber(vfxId)) --不一定存在
end

function VFXBase:Create()
    self:__loadAsset()
end

--prefabName支持一下不在c_effect表里得特效
function VFXBase:CreateByPrefabName(prefabName)
    self:__loadAsset(prefabName)
end

function VFXBase:__loadAsset(prefabName)
    if self.m_req ~= nil then
        return --禁止重复加载
    end
    --优先使用外部传参得prefabName
    if string.IsNullOrEmpty(prefabName) then
        if self.m_template == nil then
            Logger.LogError("Effect not found template, vfxId:"..tostring(self.m_vfxId))
            return
        end
        prefabName = self.m_template.name
    end
    
    local path
    if string.startswith(prefabName, "Assets/") then
        path = prefabName
    else
        path = string.format(oldEffectPath, prefabName)
    end
    self.m_req = ResourceManager:InstantiateAsync(path)
    self.m_req:completed('+', function(req)
        if req.isError or req.gameObject == nil then
            return
        end

        self.m_gameObject = req.gameObject
        self.m_transform = self.m_gameObject.transform
        self.m_particle = self.m_gameObject:GetComponent(typeof(CS.UnityEngine.ParticleSystem))

        self:__assetCreateComplete()
    end)
end

function VFXBase:__assetCreateComplete()
    if self.m_parent ~= nil then
        self.m_transform:SetParent(self.m_parent)
    end
    self.m_transform:Set_localPosition(0,0,0)
    self.m_transform:Set_localEulerAngles(0,0,0)

    if not Vector3.Equals(self.m_position,Vector3.zero) then
        self.m_transform:Set_position(self.m_position.x, self.m_position.y, self.m_position.z)
    end

    if not Vector3.Equals(self.m_rotation,Vector3.zero) then
        self.m_transform:Set_rotation(self.m_rotation.x, self.m_rotation.y, self.m_rotation.z, self.m_rotation.w)
    end

    if not Vector3.Equals(self.m_scale,Vector3.one) then
        self.m_transform:Set_localScale(self.m_scale.x,self.m_scale.y,self.m_scale.z)
    end

    if not IsNull(self.m_particle) then
        if self.m_playState == PlayState.Stop then
            self.m_particle:Stop()
        elseif self.m_playState == PlayState.Pause then
            self.m_particle:Pause()
        else
            self.m_playState = PlayState.Play
            self.m_particle:Play()
        end
    end
    
    self:InitAsset()
end
--子类复写
function VFXBase:InitAsset()
end
--子类复写
function VFXBase:SetData(data)

end

function VFXBase:OnUpdate(deltaTime)
    if self:CheckComplete() then
        self:CompleteEffect()
    end
end

function VFXBase:SetParent(parent)
    if not IsNull(self.m_transform) then
        self.m_transform:SetParent(parent)
    else
        self.m_parent = parent
    end
end

function VFXBase:Play()
    self.m_playState = PlayState.Play
    if not IsNull(self.m_particle) then
        self.m_particle:Play()
    end
end

function VFXBase:Pause()
    self.m_playState = PlayState.Pause
    if not IsNull(self.m_particle) then
        self.m_particle:Pause()
    end
end

function VFXBase:Stop()
    self.m_playState = PlayState.Stop
    if not IsNull(self.m_particle) then
        self.m_particle:Stop()
    end
end

function VFXBase:SetPosition(pos)
    if pos == nil then
        return
    end
    self.m_position:Set(pos.x, pos.y, pos.z)
    if self.m_transform then
        self.m_transform:Set_position(pos.x, pos.y, pos.z)
    end
end

function VFXBase:GetPosition()
    if self.m_transform then
        self.m_position.x, self.m_position.y, self.m_position.z = self.m_transform:Get_position()
    end
    return self.m_position
end

function VFXBase:SetRotation(quaternion)
    if quaternion == nil then
        return
    end
    self.m_rotation:Set(quaternion.x, quaternion.y, quaternion.z, quaternion.w)
    if self.m_transform then
        self.m_transform:Set_rotation(self.m_rotation.x, self.m_rotation.y, self.m_rotation.z, self.m_rotation.w)
    end
end

function VFXBase:GetRotation()
    if self.m_transform then
        local x, y, z, w = self.m_transform:Get_rotation()
        self.m_rotation:Set(x, y, z, w)
    end
    return self.m_rotation
end

function VFXBase:SetScale(x,y,z)
    x = tonumber(x) or self.m_scale.x
    y = tonumber(y) or self.m_scale.y
    z = tonumber(z) or self.m_scale.z

    self.m_scale:Set(x,y,z)
    if self.m_transform then
        self.m_transform:Set_localScale(x,y,z)
    end
end

function VFXBase:GetScale()
    if self.m_transform then
        local x,y,z = self.m_transform:Get_localScale()
        self.m_scale:Set(x,y,z)
    end
    return self.m_scale
end

function VFXBase:LookAt(pos)
    local selfPos = self:GetPosition()
    local offset = pos - selfPos
    offset.y = 0
    local lookRot = Quaternion.LookRotation(Vector3.Normalize(offset), Vector3.up)
    self:SetRotation(lookRot)
end

--特效完成得判定条件，子类可以复写
function VFXBase:CheckComplete()
    if not IsNull(self.m_particle) then
        return not self.m_particle:IsAlive()
    end
    if self.m_req == nil then
        return true
    end
    return false
end
--特效完成
function VFXBase:CompleteEffect()
    if self.m_OnComplete ~= nil then
        self.m_OnComplete(self)
    end
end

function VFXBase:GetId()
    return self.m_id
end

function VFXBase:__destroyAsset()
    if self.m_req ~= nil then
        self.m_req:Destroy()
    end
    self.m_req = nil
    self.m_particle = nil
    self.m_gameObject = nil
    self.m_transform = nil
    self.m_parent = nil
end

function VFXBase:Destroy()
    self:__destroyAsset()
    self.m_OnComplete = nil
    self.m_template = nil
end

return VFXBase