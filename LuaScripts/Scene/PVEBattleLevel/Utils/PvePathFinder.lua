---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/11/9 12:10
---
local NavMeshDataPath = "Assets/Main/Prefabs/PVELevel/Scene_pve_fight01/NavMesh.asset"
local NavMeshPathStatus = CS.UnityEngine.AI.NavMeshPathStatus
local NavMeshPath = CS.UnityEngine.AI.NavMeshPath
local NavMesh = CS.UnityEngine.AI.NavMesh
local Resource = CS.GameEntry.Resource
local Random = CS.UnityEngine.Random

local PvePathFinder = BaseClass("PvePathFinder")

function PvePathFinder:__init(battleLevel)
    self.battleLevel = battleLevel
end

function PvePathFinder:__delete()
end

function PvePathFinder:LoadAsync(callback)
    self.loaded = false
    self.navMeshPath = NavMeshPath()

    local _navmeshPath = NavMeshDataPath
    self:Release()

    self.dataReq = Resource:LoadAssetAsync(_navmeshPath, typeof(CS.UnityEngine.AI.NavMeshData))
    self.dataReq.completed = function(req)
        local asset = req.asset
        cast(asset, typeof(CS.UnityEngine.AI.NavMeshData))
        NavMesh.AddNavMeshData(asset)
        self.loaded = true
        if callback ~= nil then
            callback(true)
        end
    end
end

function PvePathFinder:Release()
    NavMesh.RemoveAllNavMeshData()
    if self.dataReq ~= nil then
        self.dataReq:Release()
        self.dataReq = nil
    end
end

local startPos = Vector3.New(0, 0,0)
local dstPos = Vector3.New(0, 0,0)
local defaultRet = {}
function PvePathFinder:FindPath(startWorldPos, dstWorldPos)
    
    local function internalSetup()
        startPos:Set(startWorldPos.x, startWorldPos.y, startWorldPos.z)
        dstPos:Set(dstWorldPos.x, dstWorldPos.y, dstWorldPos.z)
    end
    local ok, errorMsg = xpcall(function()
        internalSetup()
        return true
    end, debug.traceback)
    if not ok then
        Logger.LogError('#PvePathFinder# Error:' .. tostring(errorMsg))
        return {}
    end

    --走navMesh寻路
    if not self.loaded then
        return {}
    end

    do
        local ret = CS.CommonUtils.FindPathByNavMesh(self.navMeshPath, startPos, dstPos, 6)
        if not ret then
            Logger.Log('#PvePathFinder# FindPath error code:[21]')
            return defaultRet
        end

        return self:NavMeshPathToPathList(self.navMeshPath)
    end

    do
        local ret1, sampleHit = NavMesh.SamplePosition(dstPos, 6, NavMesh.AllAreas)
        if not ret1 then
            Logger.LogError('#PvePathFinder# FindPath error code:[1]')
            return defaultRet
        end

        if sampleHit == nil then
            Logger.LogError('#PvePathFinder# FindPath error code:[2]')
            return defaultRet
        end

        if sampleHit.position == nil then
            Logger.LogError('#PvePathFinder# FindPath error code:[3]')
            return defaultRet
        end

        local samplePos = sampleHit.position
        dstPos:Set(samplePos.x, samplePos.y, samplePos.z)

        local ret2 = NavMesh.CalculatePath(startPos, dstPos, NavMesh.AllAreas, self.navMeshPath)
        if self.navMeshPath.status == NavMeshPathStatus.PathComplete then
            --Logger.LogError('#PvePathFinder# FindPath success!')
            return self:NavMeshPathToPathList(self.navMeshPath)
        else
            Logger.Log('#PvePathFinder#' .. tostring(self.navMeshPath.status))
            Logger.LogError('#PvePathFinder# FindPath error code:[4]')
        end

        return defaultRet
    end






    --直接能寻路走通的情况
    xpcall(function()
        NavMesh.CalculatePath(startPos, dstPos, NavMesh.AllAreas, self.navMeshPath)
    end, function(errMsg)
        Logger.LogError('#PvePathFinder# FindPath error:' .. errMsg)
    end)

    if self.navMeshPath.status == NavMeshPathStatus.PathComplete then
        return self:NavMeshPathToPathList(self.navMeshPath)
    end

    --走不通的情况下 例如捡垃圾 查找个是否有同向固定范围内的可用点
    local ret1, sampleHit = NavMesh.SamplePosition(dstPos + Vector3.Normalize(startPos - dstPos) *0.5, 1, NavMesh.AllAreas)
    if not ret1 then
        return defaultRet
    end

    dstPos = sampleHit.position
    if dstPos == nil then
        return defaultRet
    end

    local ret2 = NavMesh.CalculatePath(startPos, dstPos, NavMesh.AllAreas, self.navMeshPath)
    if self.navMeshPath.status == NavMeshPathStatus.PathComplete then
        return self:NavMeshPathToPathList(self.navMeshPath)
    end

    return defaultRet
end


function PvePathFinder:NavMeshPathToPathList(navMeshPath)
    local retPathList = {}
    for i = 0, navMeshPath.corners.Length -1 do
        --local cube = CS.UnityEngine.GameObject.CreatePrimitive(CS.UnityEngine.PrimitiveType.Cube)
        --cube.transform.position = navMeshPath.corners[i]
        --cube.transform.localScale = Vector3.New(0.3, 0.3, 0.3)
        --CS.UnityEngine.GameObject.Destroy(cube, 2)

        local pos = navMeshPath.corners[i]
        table.insert(retPathList, Vector3.New(pos.x, pos.y, pos.z))
    end

    return retPathList
end

function PvePathFinder:IsUseNavMesh()
    return self.useNavMesh
end

--@description 查找一个点周围附近的可用点
--@param radius number 半径
--@param maxAttempts number 查找次数
function PvePathFinder:FindValidNavMeshPosition(worldPos, radius, maxAttempts)
    radius = math.min(radius or 6, 8)
    maxAttempts = math.min(maxAttempts or 6, 10)
    local ret, pos = false, Vector3.New(0, 0, 0)
    local srcY = worldPos.y

    for _ = 1, maxAttempts do
        local ret1, sampleHit = NavMesh.SamplePosition(worldPos, radius, NavMesh.AllAreas)
        if ret1 then
            ret = true
            local hitPos = sampleHit.position
            pos:Set(hitPos.x, hitPos.y, hitPos.z)

            return true, pos
        else
            worldPos = worldPos + Random.insideUnitSphere.normalized * 0.5
            worldPos.y = srcY
        end
    end

    return false, pos
end

return PvePathFinder