---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/7/15 15:00
---

local PveHeroHpBar = BaseClass("PveHeroHpBar")

local asset_path = "Assets/Main/Prefabs/PVE/PveHero_HpBar.prefab"
local boss_asset_path = "Assets/Main/Prefabs/PVE/PveHero_HpBar.prefab"

local bar_path = "HpBar"
local hp_back_path = "HpBar/HpBack"
local hp_front_path = "HpBar/HpFront"
local val_path = "HpBar/Val"
local icon_path = "HpBar/Icon"
local change_path = "Other/Change"

local HP_WIDTH = 0.8
local HP_HEIGHT = 0.1

local HP_BACK_SPEED = 5
local SUB_DURATION = 1.5

local ChangeRed = Color32.New(255, 63, 31, 255)
local ChangeGreen = Color32.New(63, 255, 31, 255)

local friendlyHpColor = Color32.New(92 / 255,221 / 255,21 / 255,1)
local enemyHpColor = Color32.New(251 / 255,77 / 255,86 / 255,1)

local vector2Temp = Vector2.New(0,HP_HEIGHT)

local function __init(self, parent,cur,max, active,isFriendly,isBoss)
    self.parent = parent
    self.defaultActive = active
    self.isFriendly = isFriendly

    self.cur = cur
    self.max = max
    self.isChange = false
    self.isDestroy = false

    self:__loadAsset(isBoss)
end

local function __loadAsset(self,isBoss)
    local path = asset_path
    local req = CS.GameEntry.Resource:InstantiateAsync(path)
    self.m_req =req
    req:completed('+',function()
                if req.isError or req.gameObject == nil then
                    return
                end

                local percent = 0
                if self.max ~= 0 then
                    percent = Mathf.Clamp(self.cur / self.max, 0, 1)
                end

                self.gameObject = req.gameObject
                self.transform = self.gameObject.transform
                self.transform:SetParent(self.parent)
                self.transform:Set_localPosition(0,0,0)
                self.transform:Set_localEulerAngles(0,0,0)
                self.transform:Set_localScale(1,1,1)

                -- component define
                self.bar_go = self.transform:Find(bar_path).gameObject
                --self.bar_go.transform.localPosition = Vector3.zero
				self.bar_go.transform:Set_localPosition(0,0,0)
                self.hp_back_sprite = self.transform:Find(hp_back_path):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
                --self.hp_back_sprite.transform:SetLocalScaleX(1)
                self.hp_back_sprite.size = Vector2.New(HP_WIDTH * percent, HP_HEIGHT)
                self.hp_front_sprite = self.transform:Find(hp_front_path):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
                --self.hp_front_sprite.transform:SetLocalScaleX(1)
                self.hp_front_sprite.size = Vector2.New(HP_WIDTH * percent, HP_HEIGHT)
                self.val_text = self.transform:Find(val_path):GetComponent(typeof(CS.TMPro.TextMeshPro))
                self.icon_sprite = self.transform:Find(icon_path):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
                self.icon_sprite.gameObject:SetActive(isBoss ~= nil and isBoss == true)
                self.change_text = self.transform:Find(change_path):GetComponent((typeof(CS.SuperTextMesh)))

                if self.isFriendly then
                    self.hp_front_sprite.color = friendlyHpColor
                else
                    self.hp_front_sprite.color = enemyHpColor
                end
                self:SetActive(false)
            end)
    
end

local function __delete(self)
    -- component destroy
    self.isDestroy = true
    self.parent = nil
    self.gameObject = nil
    self.transform = nil
    self.bar_go = nil
    self.val_text = nil
    self.icon_sprite = nil
    self.change_text = nil

    -- data destroy
    self.cur = nil
    self.max = nil

    if not self.isChange then
        self:__delayDestroy()
    end
end

local function __delayDestroy(self)
    if self.m_req ~= nil then
        self.m_req:Destroy()
        self.m_req = nil
    end

    self.hp_back_sprite = nil
    self.hp_front_sprite = nil
    self.isChange = nil
    --self:RemoveUpdateTimer()
end

local function SetActive(self, active)
    if self.isActive == active or self.gameObject == nil then
        return
    end

    self.delayActive = false
    self.isActive = active
    self.gameObject:SetActive(active)
end


local function IsActive(self)
    return self.isActive or false
end


local function SetVal(self, cur, max, showChange)
    if self.cur == cur and self.max == max then
        return
    end
    if self.hp_front_sprite == nil then
        return
    end

    self.isChange = true
    if showChange then
        self:ShowChange(cur - self.cur, SUB_DURATION)
    end
    self.cur = cur or self.cur
    self.max = max or self.max

    local percent = 0
    if self.max ~= 0 then
        percent = Mathf.Clamp(self.cur / self.max, 0, 1)
    end
    self.hp_front_sprite.size = Vector2.New(HP_WIDTH * percent, HP_HEIGHT)
    --self.hp_front_sprite.transform:SetLocalScaleX(percent)
    if DataCenter.BattleLevel.showHp then
        --self.val_text.text = string.GetFormattedSeperatorNum(self.cur)
        self.val_text.text = ""
    else
        self.val_text.text = ""
    end

    self.updateTime = 0

    self:SetActive(cur < max and cur > 0)

    --if not self.defaultActive then
        self:AddUpdateTimer()
    --end
end

local function SetIcon(self, iconPath)
    self.icon_sprite:LoadSprite(iconPath)
    self.icon_sprite.gameObject:SetActive(true)
end

local function ShowChange(self, change, duration)
    if change > 0 then
        self.change_text.text = "+" .. string.GetFormattedSeperatorNum(change)
        self.change_text.color = ChangeGreen
    elseif change < 0 then
        self.bar_go.transform:DOShakePosition(duration, Vector3.New(0.4, 0, 0), 45)
        self.change_text.text = string.GetFormattedSeperatorNum(change)
        self.change_text.color = ChangeRed
    else
        return
    end
    self.change_text.gameObject:SetActive(true)
    self.change_text.transform.localPosition = Vector3.zero
    self.change_text.transform:DOLocalMove(Vector3.New(0, 1, 0), duration):OnComplete(function()
        if self.change_text ~= nil and not IsNull(self.change_text.gameObject) then
            self.change_text.gameObject:SetActive(false)
        end
    end)
end

local function OnUpdate(self,deltaTime)
    if self.isChange then
        if IsNull(self.hp_back_sprite) then
            self.isChange = false
            self.updateTime = 1
            return
        end

        local targetX = self.hp_front_sprite.size.x
        local curX = self.hp_back_sprite.size.x
        --local targetX = self.hp_front_sprite.transform:Get_localScale()
        --local curX = self.hp_back_sprite.transform:Get_localScale()
        if curX < targetX then
            self.isChange = false
            
            vector2Temp.x = targetX
            self.hp_back_sprite.size = vector2Temp
            --self.hp_back_sprite.transform:SetLocalScaleX(targetX)
        elseif curX > targetX then
            vector2Temp.x = Mathf.Lerp(curX,targetX,HP_BACK_SPEED * deltaTime)

            self.hp_back_sprite.size = vector2Temp
            --self.hp_back_sprite.transform:SetLocalScaleX(vector2Temp.x)

            if Mathf.DecimalFormat(vector2Temp.x,2) <= Mathf.DecimalFormat(targetX,2) then
                self.isChange = false
            end
        else
            self.isChange = false
        end
    end

    self.updateTime = self.updateTime + deltaTime
    if self.updateTime >= 1 or (not self.isChange and self.isDestroy) then
        self.isChange = false
        self:RemoveUpdateTimer()
        if self.isDestroy then
            self:__delayDestroy()
        else
            self:SetActive(self.cur < self.max and self.cur > 0)
        end
    end
end

local function AddUpdateTimer(self)
    if self.updateTimer == nil then
        self.updateTimer = function() self:OnUpdate(Time.deltaTime) end
        UpdateManager:GetInstance():AddUpdate(self.updateTimer)
    end
end

local function RemoveUpdateTimer(self)
    if self.updateTimer then
        UpdateManager:GetInstance():RemoveUpdate(self.updateTimer)
        self.updateTimer = nil
    end
end

PveHeroHpBar.__init = __init
PveHeroHpBar.__loadAsset = __loadAsset
PveHeroHpBar.__delete = __delete
PveHeroHpBar.__delayDestroy = __delayDestroy
PveHeroHpBar.SetActive = SetActive
PveHeroHpBar.IsActive = IsActive
PveHeroHpBar.SetVal = SetVal
PveHeroHpBar.SetIcon = SetIcon
PveHeroHpBar.ShowChange = ShowChange
PveHeroHpBar.OnUpdate = OnUpdate
PveHeroHpBar.AddUpdateTimer = AddUpdateTimer
PveHeroHpBar.RemoveUpdateTimer = RemoveUpdateTimer

return PveHeroHpBar