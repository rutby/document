---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/10/8 15:10
---突突突战报战斗使用的技能状态
local CharacterBaseState = require("Scene.PVEBattleLevel.Character.State.CharacterBaseState")
local CharacterReportSkillState = BaseClass("CharacterReportSkillState",CharacterBaseState)
--local VFXBase = require("Scene.PVEBattleLevel.VFX.VFXBase")
local CharacterStateType = require("Scene.PVEBattleLevel.Character.State.CharacterStateType")
local Const = require "Scene.BattlePveModule.Const"

local BeginTime = 0.05

function CharacterReportSkillState:SetData(data)
    local target = data.target

    if self.m_target ~= nil then
        self.m_target = target
    end
end

function CharacterReportSkillState:OnEnter()
    --Logger.LogError("CharacterReportSkillState:OnEnter")

    --self:__addEvent()

    local animName = self.m_owner:GetSkillAnim()
    self.m_owner:PlayAnim(animName)
    self.m_owner:SetAnimSpeed(1)

    self.m_owner:PlayWeaponAttackAnim()

    self.m_actVfxTemplate = DataCenter.PveActVFXTemplateManager:GetTemplate(animName)
    self:PlayAttackEffect()

    self.m_isDone = false
    self.time = 0
    self.begun = false
    self.done = false
    self.ended = false
end

function CharacterReportSkillState:OnUpdate(deltaTime)
    CharacterBaseState.OnUpdate(self, deltaTime)

    self.time = self.time + deltaTime
    if not self.begun then
        if self.time >= BeginTime then
            self:__onAttackBegin()
            self.begun = true
        end
    elseif not self.done then
        if self.time >= self.m_owner.info:GetSkillDelay() then
            self:__onAttackDone()
            self.done = true
        end
    elseif not self.ended then
        if self.time >= self.m_owner.info:GetSkillDuration() then
            self:__onAnimPlayEnd()
            self.ended = true
        end
    end
end

--function CharacterReportSkillState:__addEvent()
--    if self.m_owner.animEvent then
--        self.m_owner.animEvent.animation_attackBegin = function() self:__onAttackBegin()  end
--        self.m_owner.animEvent.animation_attackDone = function() self:__onAttackDone() end
--        self.m_owner.animEvent.animation_playEnd = function() self:__onAnimPlayEnd()  end
--    end
--end

--function CharacterReportSkillState:__removeEvent()
--    if self.m_owner.animEvent then
--        self.m_owner.animEvent.animation_attackBegin = nil
--        self.m_owner.animEvent.animation_attackDone = nil
--        self.m_owner.animEvent.animation_playEnd = nil
--    end
--end

function CharacterReportSkillState:__onAttackBegin()
    --Logger.LogError("CharacterReportSkillState:__onAttackBegin")
end

function CharacterReportSkillState:__onAttackDone()
    --Logger.LogError("CharacterReportSkillState:__onAttackDone")
    self.m_isDone = true
    self.m_owner:SkillAttackEnemy()
    --self:OnExit()
    if self.m_actVfxTemplate ~= nil and not string.IsNullOrEmpty(self.m_actVfxTemplate.fly_eff) then
        self.m_owner:FireWeaponTrackVFX(self.m_target ~= nil and self.m_target:GetPosition() or nil,self.m_actVfxTemplate.fly_eff)
    end
    if self.m_target ~= nil then
        self.m_target:PlayBeAttackVFX(self.m_owner:GetSkillAnim())
    end
end

function CharacterReportSkillState:__onAnimPlayEnd()
    --Logger.LogError("CharacterReportSkillState:__onAnimPlayEnd")
    self:OnExit()
end

function CharacterReportSkillState:PlayAttackEffect()
    self:RemoveEffect()

    local angerInfo = {}
    angerInfo.heroId = self.m_owner:GetHeroId()
    angerInfo.addAnger = -1000
    local skillInfo = {}
    skillInfo.heroId = self.m_owner:GetHeroId()
    skillInfo.skillId = self.m_owner.m_skill:GetSkillId()
    skillInfo.worldPos = self.m_owner:GetPosition()
    if self.m_owner.info:GetCampType() == Const.CampType.Player then
        EventManager:GetInstance():Broadcast(EventId.PveHeroAngerUpdate, angerInfo)
        EventManager:GetInstance():Broadcast(EventId.PveHeroUseSkill, skillInfo)
    end

    if self.m_actVfxTemplate ~= nil then
        self.m_attackEffect = {}
        function createVFX(effectList,parent,isWorld)
            local attackEffect
            for i, vfxId in ipairs(effectList) do
                if not string.IsNullOrEmpty(vfxId) then
                    --attackEffect = VFXBase.New(0,vfxId)
                    --attackEffect:SetParent(parent)
                    --attackEffect:Create()
                    --
                    --table.insert(self.m_attackEffect,attackEffect)
                    if isWorld and SceneManager:GetLevel() then
                        SceneManager:GetLevel():CreateVFX(vfxId,self.m_owner:GetPosition(),self.m_owner:GetRotation())
                    else
                        self.m_owner:CreateVFX(vfxId,parent)
                    end
                end
            end
        end
        createVFX(self.m_actVfxTemplate.atk_eff,self.m_owner:GetTransform()) --攻击特效

        local parent1,parent2
        if table.count(self.m_actVfxTemplate.atk_eff_fire) > 0 then
            parent1,parent2 = self.m_owner:GetWeaponFireTransform()   --开火特效
            if parent1 ~= nil then
                createVFX(self.m_actVfxTemplate.atk_eff_fire,parent1)
            end
            if parent2 ~= nil then
                createVFX(self.m_actVfxTemplate.atk_eff_fire,parent1)
            end
        end

        parent1 = self.m_owner:GetWeaponTransform_R() --右手武器挂点特效
        if parent1 ~= nil then
            createVFX(self.m_actVfxTemplate.atk_eff_right,parent1)
        end
        parent2 = self.m_owner:GetWeaponTransform_L() --左手武器挂点特效
        if parent2 ~= nil then
            createVFX(self.m_actVfxTemplate.atk_eff_left,parent2)
        end
        if table.count(self.m_actVfxTemplate.atk_eff_scene) > 0 then
            createVFX(self.m_actVfxTemplate.atk_eff_scene,nil,true)
        end
    end

end

function CharacterReportSkillState:RemoveEffect()
    if self.m_attackEffect ~= nil then
        for _, v in pairs(self.m_attackEffect) do
            v:Destroy()
        end
    end
    if self.m_skillIconReq ~= nil then
        self.m_skillIconReq:Destroy()
        self.m_skillIconReq = nil
    end
end


function CharacterReportSkillState:OnExit()
    --Logger.LogError("CharacterReportSkillState:OnExit")
    if not self.m_isDone then
        --没有触发就死了，触发一下技能效果
        self.m_owner:SkillAttackEnemy()
    end
    self.m_actVfxTemplate = nil
    self.m_target = nil
    --self:__removeEvent()
    self:RemoveEffect()
    self:OnStateComplete()
end

--不允许打断
function CharacterReportSkillState:AllowStopByType(type)
    return type == CharacterStateType.Die
end

function CharacterReportSkillState:Destroy()
    self.m_actVfxTemplate = nil
    self.m_target = nil
    --self:__removeEvent()
    self:RemoveEffect()
end

return CharacterReportSkillState