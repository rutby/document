---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2022/9/22 21:06
---
local CharacterBaseState = BaseClass("CharacterBaseState")

function CharacterBaseState:__init(owner,type,completeHandler)
    self.m_owner = owner
    self.m_type = type
    self.m_onComplete = completeHandler
end

function CharacterBaseState:SetData(data)
    self.m_data = data
end

function CharacterBaseState:OnEnter()

end


function CharacterBaseState:OnUpdate(deltaTime)
    
end

function CharacterBaseState:OnExit()
    
end
--预备状态退出函数，在状态机开始执行之前被其他状态顶替时会调用，处理一下当前状态必须要执行的特殊逻辑
function CharacterBaseState:PrepareStateExit()
end

function CharacterBaseState:OnStateComplete(data)
    if self.m_onComplete ~= nil then
        self.m_onComplete(self.m_type,data)
    end
end
--人物改变了状态，子状态机可以复写这个函数
function CharacterBaseState:ChangeCharacterState()
    
end

function CharacterBaseState:GetType()
    return self.m_type
end
--是否唯一，大部分状态机都是唯一的，管理类会以此来判断是否需要重复创建状态机，而老状态机会被销毁
--如果不是唯一的，子类复写修改
function CharacterBaseState:IsOnly()
    return true
end

--允许打断的类型，默认都是允许打断的
--如果有不允许打断的情况,则子类复写修改，管理器会在执行此状态机的时候不允许别的状态机执行
function CharacterBaseState:AllowStopByType(type)
    return true
end

function CharacterBaseState:Destroy()
    self.m_owner = nil
    self.m_data = nil
    self.m_onComplete = nil
end

return CharacterBaseState
