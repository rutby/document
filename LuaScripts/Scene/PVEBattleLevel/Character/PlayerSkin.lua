---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2022/11/3 14:59
---换装
local PlayerSkin = BaseClass("PlayerSkin")
local RolePart = require("Scene.PVEBattleLevel.Character.Part.RolePart")

local rootBonePath = "To_unity/DeformationSystem/Root"
local partRoot = "To_unity"
local weaponRootR = "DeformationSystem/Root/guadian_R"
local weaponRootL = "DeformationSystem/Root/guadian_L"
local weaponRootRSimple = "guadian_R"
local weaponRootLSimple = "guadian_L"

--所有皮肤部件，和可装备部件的区别是，多了一个头的部件，因为头和帽子是区分开的
local SkinPart = {
    Hat = SurvivalEquipType.Hat,
    Head = "head",
    Cloth = SurvivalEquipType.Cloth,
    Trousers = SurvivalEquipType.Trousers,
    Shoe = SurvivalEquipType.Shoe,
    Weapon = SurvivalEquipType.Weapon,
    Bag = SurvivalEquipType.Bag
}

function PlayerSkin:__init(transform,heroInfo,layer)
    self.m_transform = transform:Find(partRoot)
    self.rootBoneTransform = transform:Find(rootBonePath)
    self.m_weaponR = self.m_transform:Find(weaponRootR) or transform:Find(weaponRootRSimple)
    self.m_weaponL = self.m_transform:Find(weaponRootL) or transform:Find(weaponRootLSimple)
    self.m_info = heroInfo
    self.m_layer = layer
    self.m_parts = {}
	self.weaponModelName = nil -- 人物所持的武器字符串
    self:__initBasePart()
    self:__initEquip()
end

function PlayerSkin:__initBasePart()
    self.baseParts = {}
    self.baseParts[SkinPart.Cloth] = "hero_nanshibing_03_b_torso_skin"
    self.baseParts[SkinPart.Head] = "hero_nanshibing_03_b_head_skin"
    self.baseParts[SkinPart.Trousers] = "hero_nanshibing_03_b_leg_skin"
    self.baseParts[SkinPart.Shoe] = "hero_nanshibing_03_b_feet_skin"
    self.baseParts[SkinPart.Hat] = nil
end

function PlayerSkin:__initEquip()
    for _,partType in pairs(SkinPart) do
        self:SetEquip(partType,self.m_info:GetEquip(partType))
    end
    self:ShowVirtualSuit()
end

function PlayerSkin:GetPart(partType)
    local currentPart = self.m_parts[partType]
    if currentPart == nil then
        currentPart = RolePart.New(partType,LoadPath.PlayerPrefabPath,self.rootBoneTransform,self.m_layer)
        self.m_parts[partType] = currentPart
        if partType == SurvivalEquipType.Weapon then
            currentPart:SetParent(self.m_weaponR,self.m_weaponL)
        else
            currentPart:SetParent(self.m_transform)
        end
        currentPart:SetBasePartModelName(self.baseParts[partType])
    end
    return  currentPart
end

function PlayerSkin:SetEquip(partType,equip)
    local currentPart = self:GetPart(partType)
    
    currentPart:SetEquip(equip)
    currentPart:RefreshAsset()
    
	if partType == SkinPart.Weapon then 
		self.weaponModelName = currentPart:GetModelName()
	end
end

function PlayerSkin:SetEquipByModelName(partType,modelName)
    local currentPart = self:GetPart(partType)
    
    currentPart:LoadEquip(modelName)

    if partType == SkinPart.Weapon then
        self.weaponModelName = currentPart:GetModelName()
    end
end

function PlayerSkin:RemoveEquip(partType)
    local oldPart = self.m_parts[partType]
    if oldPart then
        oldPart:Destroy()
    end
    self.m_parts[partType] = nil
	if partType == SkinPart.Weapon then
		self.weaponModelName = nil
	end
end

function PlayerSkin:EquipSlotChanged(data)
    local partType = data["partType"]
    
    self:SetEquip(partType,self.m_info:GetEquip(partType))
end

function PlayerSkin:ShowTool(equipId)
    local model = GetTableData(TableName.C_Equips,equipId,"model")
    self:ShowToolByPath(model)
end

function PlayerSkin:ShowToolByPath(modelName)
    if not string.IsNullOrEmpty(modelName) then
        self:SetEquipByModelName(SkinPart.Weapon,modelName)
    end
end

function PlayerSkin:ResetWeapon()
    local equip = self.m_info:GetEquip(SkinPart.Weapon)
    self:SetEquip(SkinPart.Weapon,equip)
end

function PlayerSkin:HideWeapon()
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        weapon:HideEquip()
    end
end

function PlayerSkin:ShowWeapon()
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        weapon:ShowEquip()
    end
end

function PlayerSkin:GetWeaponFireTransform()
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        return weapon:FindTransformByName("atkEffect")
    end
    return nil
end

function PlayerSkin:GetWeaponAtkEffect()
    local atkEffect = nil
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        atkEffect = weapon:GetWeaponAtkEffect()
    end
    return atkEffect
end

function PlayerSkin:GetWeaponArc()
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        return weapon:GetWeaponArc()
    end
    return 0
end

function PlayerSkin:ShowVirtualSuit()
    local _cloth = DataCenter.GuideManager:GetMainPlayerVCloth()
    if string.IsNullOrEmpty(_cloth) then return end
    local _tabCloth = string.string2array_s(_cloth, '|')
    local _kvCloth = {}
    for _, clothitem in pairs(_tabCloth) do
        local _tabSkinPart = string.string2array_s(clothitem, ';')
        if table.count(_tabSkinPart) == 2 then
            local _skinPart = _tabSkinPart[1]
            local _skinRes = _tabSkinPart[2]
            _kvCloth[_skinPart] = _skinRes
        end
    end

    for _,partType in pairs(SkinPart) do
        if (_kvCloth[partType] ~= nil) then
            local _part = self:GetPart(partType)
            _part:DestroyBasePart()
            _part:LoadEquip(_kvCloth[partType])
        end
    end
end

function PlayerSkin:GetWeaponTrackEffect()
    local atkEffect = nil
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        atkEffect = weapon:GetWeaponTrackEffect()
    end
    return atkEffect
end

function PlayerSkin:SetLocalPosition(x,y,z)
    self.m_transform:Set_localPosition(x,y,z)
end

function PlayerSkin:SetLocalEulerAngles(x,y,z)
    self.m_transform:Set_localEulerAngles(x,y,z)
end

function PlayerSkin:SetLocalScale(x,y,z)
    self.m_transform:Set_localScale(x,y,z)
end

function PlayerSkin:Rotate(x,y,z)
    self.m_transform:Rotate(x,y,z)
end
-- 获取手持武器字符串
function PlayerSkin:GetWeaponName()
    return self.weaponModelName
end

--还原身上所有初始部件(光身)
function PlayerSkin:RevertBaseParts()
    for _,part in pairs(self.m_parts) do
        part:HideEquip(true)
    end
end

--恢复正常部件
function PlayerSkin:RevertParts()
    for _,part in pairs(self.m_parts) do
        part:ShowEquip()
    end
end

function PlayerSkin:PlayWeaponAttackAnim()
    local part = self.m_parts[SkinPart.Weapon]
    if part ~= nil then
        part:PlayWeaponAttackAnim()
    end
end

function PlayerSkin:GetWeaponSpecialData()
    local part = self.m_parts[SkinPart.Weapon]
    if part ~= nil then
        return part:GetWeaponSpecialData()
    end
    return nil
end

function PlayerSkin:GetWeaponTransform_R()
    return self.m_weaponR
end

function PlayerSkin:GetWeaponTransform_L()
    return self.m_weaponL
end

function PlayerSkin:DestroyAllEquip()
    for _,part in pairs(self.m_parts) do
        part:Destroy()
    end
    self.m_parts = {}
end

function PlayerSkin:Destroy()
    self:DestroyAllEquip()
    self.m_info = nil
    self.m_transform = nil
    self.m_parts = nil
    self.rootBoneTransform = nil
    self.m_weaponR = nil
    self.m_weaponL = nil
end


return PlayerSkin