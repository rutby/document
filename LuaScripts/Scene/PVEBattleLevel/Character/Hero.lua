---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/1/3 11:26
---PVE的英雄，跟随玩家战斗
local CharacterBase = require("Scene.PVEBattleLevel.Character.CharacterBase")
local Hero = BaseClass("Hero",CharacterBase)
local HeroAI = require("Scene.PVEBattleLevel.Character.AI.HeroAI")
local HeroRumbleAI = require("Scene.PVEBattleLevel.Character.AI.HeroRumbleAI")
local HeroMeleeAI = require("Scene.PVEBattleLevel.Character.AI.HeroMeleeAI")
local HeroAutoAI = require("Scene.PVEBattleLevel.Character.AI.HeroAutoAI")
local Util = require("Scene.PVEBattleLevel.Utils.SU_Util")
local RoleSkin = require("Scene.PVEBattleLevel.Character.RoleSkin")
local CharacterAnimation = require("DataCenter.Survival.Character.CharacterAnimation")
local CharacterHP = require "Scene.PVEBattleLevel.Character.CharacterHP"
local SkillManager = require "Scene.PVEBattleLevel.Character.Skill.SkillManager"
local CharacterStateType = require("Scene.PVEBattleLevel.Character.State.CharacterStateType")
local SU_Util = require("Scene.PVEBattleLevel.Utils.SU_Util")

local Anim =
{
    Idle = "idle",
    Run = "run",
    Attack = "attack",
    Dead = "weaken"
}

local targetPosition = {}

function Hero:__init(battleLevel,objId,info)
    CharacterBase.__init(self,battleLevel,objId,info)
    self:__initAI()
    self:__initSkill()
end

function Hero:__initAI()
    if self.battleLevel:IsHeroAutoLevel() then
        self.ai = HeroAutoAI.New(self)
    else
        if self.info:GetAtkType() == 1 then
            self.ai = HeroMeleeAI.New(self)
        else
            self.ai = HeroRumbleAI.New(self)
        end
    end
end

function Hero:__initSkill()
    self.skillManager = SkillManager.New(self)
end

function Hero:__assetCreateComplete()
    CharacterBase.__assetCreateComplete(self)
    
    if self.spawnPos ~= nil then
        self:ResetTeamPosition(self.spawnPos,0)
    end

    --self.HP = CharacterHP.New(self)
    
    self:InitTopBar()
    self:InitPart()
    self:InitAnimation()

    self:StartAI()

    self.m_characterController = self.m_transform:GetComponent(typeof(CS.UnityEngine.CharacterController))
    
    self:Idle()

    --self:EnableCollider(false) --暂时关闭碰撞

    self.m_navmeshAgent.avoidancePriority = 55

    self:EnableCollider(true) --开启碰撞盒

end

function Hero:InitTopBar()
    self.topBarTransform = self.m_transform:Find("PveHero_Top")
    if not IsNull(self.topBarTransform) then
        --self.HP:AddHpBar(self.topBarTransform,self:IsFriendly(),self:IsBoss())
    end
end

function Hero:InitPart()
    local partId = self.info:GetPartId()
    if partId ~= 0 then
        self.m_skin = RoleSkin.New(self.m_transform,partId,LoadPath.NvlieshouPrefabPath,self.m_gameObject.layer)--目前英雄换装资源用女猎手的，如果未来有不同样子或者骨骼的英雄，这里的地址需要策划配置到表里
    end
end

function Hero:InitAnimation()
    local animationId = self.info:GetAnimation()
    if animationId ~= 0 then
        self.m_animation = CharacterAnimation.New(self.info:GetAnimation())
    end
end

function Hero:InitForLevelKind(pos,teamPos,followRange)
    self.spawnPos = pos
    self.teamPos = teamPos
    self.followRange = followRange or 1
end

function Hero:StartAI()
    if self.ai ~= nil then
        self.ai:Start()
    end
end

function Hero:OnUpdate(deltaTime)
    if self.m_isPause or self:IsDie() then
        return
    end
    
    
    CharacterBase.OnUpdate(self,deltaTime)
    self.ai:OnUpdate(deltaTime)
    self.skillManager:OnUpdate(deltaTime)
    
end

function Hero:Reset()
    if not self:IsDie() then
        self.ai:Reset()
        self:EnableNavmeshAgent(false)
        self.m_stateManager:ExitCurrentState()
    end
end

function Hero:Move(vx,vz,length)
    self.ai:Move()
    --CharacterBase.Move(self,vx,vz,length)
end

function Hero:Skill(skillId,target)
    self:SetState(CharacterStateType.Skill,{skillId = skillId,target = target})
end

function Hero:AttackEnemy(enemy,attackNum)
    if enemy == nil or enemy:IsDie() then
        return
    end
    if attackNum == nil then
        attackNum = self:GetAttack()
    end
    local weaponData = self:GetWeaponSpecialData()
    local data
    if weaponData ~= nil then
        data = {}
        data.weaponData = weaponData
        data.dir = Vector3.Normalize(self:GetPosition() - enemy:GetPosition())
    end

    enemy:BeAttack(attackNum,data)
end

function Hero:OnStateComplete(type,data)
    CharacterBase.OnStateComplete(self,type,data)

    self.ai:OnStateComplete(type,data)
end

function Hero:TopFaceToCamera()
    if not IsNull(self.topBarTransform) and self:NeedRefreshTopBarRotation() then
        self.topBarTransform.rotation = PveActorMgr:GetInstance():GetCameraRotation()
    end
end

function Hero:ResetTeamPosition(pos,eulerY)
    self:SetPosition(self.battleLevel.heroManager:GetTeamTargetPos(pos,self.teamPos,eulerY))
end

function Hero:NeedRefreshTopBarRotation()
    --return self.HP:HpBarIsActive()
    return false
end

function Hero:SearchEnemyTarget()
    return self.battleLevel.RoleMgr:SearchEnemyTarget(self:GetPosition(),self:GetAttackRange(),self:GetType())
end
--生成英雄位置的目标点
function Hero:GenerateConcentricPosition(pos,range,range1)
    return Util.GenerateConcentricPosition(pos,range,range1,targetPosition)
end

function Hero:GetAnimName(animType,defaultName)
    local animName = nil
    if self.m_animation ~= nil then
        animName = self.m_animation:GetRandomAnimName(animType)
    end
    if string.IsNullOrEmpty(animName) then
        animName = defaultName
    end
    return animName
end

function Hero:GetDefaultAnimName()
    return self:GetAnimName(AnimationType.Idle,Anim.Idle)
end

function Hero:GetAttackAnimName()
    return self:GetAnimName(AnimationType.Attack,Anim.Attack)
end

function Hero:GetMoveAnimName()
    return self:GetAnimName(AnimationType.Move,Anim.Run)
end

function Hero:GetDeadAnimName()
    return self:GetAnimName(AnimationType.Dead,Anim.Dead)
end

function Hero:GetPrefabName()
    return self.info:GetModel()
end

--function Hero:GetMoveSpeed()
--    local player = self.battleLevel:GetPlayer()
--    if player ~= nil then
--        Logger.LogError("GetMoveSpeed:"..player:GetMoveSpeed())
--        return player:GetMoveSpeed() --英雄新得AI玩法需要和主角一个移动速度
--    end
--    return CharacterBase.GetMoveSpeed(self)
--end

function Hero:PrefabPath()
    return string.format("Assets/Main/Prefabs/PVE/DyHeroes/%s.prefab", self:GetPrefabName())
end

function Hero:GetType()
    return CharacterType.Hero
end

function Hero:GetSkillOrder()
    return self.info:GetSkillOrder()
end

function Hero:GetHpStage()
    return self.info:GetHpStage()
end

function Hero:GetCharacterController()
    return self.m_characterController
end

function Hero:IsFriendly()
    return true
end

function Hero:IsBoss()
    return false
end

function Hero:DestroyAI()
    if self.ai ~= nil then
        self.ai:Destroy()
        self.ai = nil
    end
end

function Hero:DestroySkill()
    if self.skillManager ~= nil then
        self.skillManager:Destroy()
        self.skillManager = nil
    end
end

function Hero:Destroy()
    CharacterBase.Destroy(self)
    self:DestroyAI()
    self:DestroySkill()
    --if self.HP ~= nil then
    --    self.HP:Destroy()
    --end
    self.info = nil
    self.m_animation = nil
    if self.m_skin ~= nil then
        self.m_skin:Destroy()
    end
end

function Hero:GetWeaponNameOnConfig()
    --local chaId = self.info:GetHeroId()  --有一些Hero似乎并没有用PveHeroInfo，用的其他的Info类，导致有时候用不了GetHeroId，先取消了
    if self.info == nil then
        return
    end
    local chaId = nil
    local weaponId = nil
    chaId = self.info.m_heroId
    if chaId == nil then
        Logger.Log("Maybe have a character is not hero,can't found heroId")
        return
    end
    local partId = LocalController:instance():getValue(TableName.PveHero, chaId, "part")
    if partId ~= nil then
        partId = toInt(partId)
        weaponId = LocalController:instance():getValue(TableName.PveRolePart, partId, "weapon")
        local weaponPath = LocalController:instance():getValue(TableName.C_Equips, weaponId, "model")
        local weaponName
        if weaponPath ~= nil then
            weaponName = weaponPath
        else
            --因为aps_pve_part_zombie配置表中的武器部分，有些取的是ID，有些直接取模型路径名,需要处理武器这地方的配置表是路径名的情况
            weaponName = weaponId
        end
    end
end

function Hero:GetWeaponName()
    if self.m_skin ~= nil then
        return self.m_skin:GetWeaponName()
    else
        local weaponName = self:GetWeaponNameOnConfig()
        return weaponName
    end
end

return Hero