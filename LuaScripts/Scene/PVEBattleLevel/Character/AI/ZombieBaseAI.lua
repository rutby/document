---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2022/11/1 12:22
---
local ZombieBaseAI = BaseClass("ZombieBaseAI")
local States = require("Util.States")
local SU_Util = require("Scene.PVEBattleLevel.Utils.SU_Util")
local Vector3_Distance2D = Vector3.Distance2D_XZ

ZombieBaseAI.StateType = {
    FindTargetState = "FindTargetState",
    MoveState = "MoveState",
}

function ZombieBaseAI:__init(owner)
    self.m_owner = owner
    self.battleLevel = owner.battleLevel
    self.m_target = nil
    self.chaseRadius = self.m_owner:GetChaseRadius()
    self.backChaseRadius = self.m_owner:GetBackChaseRadius()
    self.viewAngle = self.m_owner:GetAngle()
    self:__initState()
end

function ZombieBaseAI:__initState()
    self.m_states = States.New(self)
	self.m_states:AddState(ZombieBaseAI.StateType.FindTargetState,nil,self.FindTarget_Update,nil)
    self.m_states:AddState(ZombieBaseAI.StateType.MoveState, self.Move_Enter, self.Move_Update, self.Move_Exit)
end

function ZombieBaseAI:Start()
    self.m_states:SetState(ZombieBaseAI.StateType.FindTargetState)
end

function ZombieBaseAI:OnUpdate(deltaTime)
	ProfilerUtil.BeginSample("[Lua]ZombieBaseAI:OnUpdate")
    self.m_states:Update(deltaTime)
	ProfilerUtil.EndSample()
end

function ZombieBaseAI:FindTarget_Update(deltaTime)
    self.m_target = self:SearchEnemyTarget()
    if self.m_target then
        self.m_states:SetState(ZombieBaseAI.StateType.MoveState)
    end
end

function ZombieBaseAI:Move_Enter()
end

function ZombieBaseAI:Move_Update(deltaTime)
end

function ZombieBaseAI:Move_Exit()
end

function ZombieBaseAI:BeAttack()
    if self.m_target == nil then
        local target = self:SearchEnemyTarget(999)
        if target ~= nil then
            self.m_target = target
            if not self.m_states:CurrentStateEqual(ZombieBaseAI.StateType.MoveState) then
                self.m_states:SetState(ZombieBaseAI.StateType.MoveState)
            end
        end
    end
end

function ZombieBaseAI:SearchEnemyTarget(chaseRadius)
    chaseRadius = chaseRadius or self.chaseRadius
    local ownerModelRadius = self.m_owner:GetModelRadius()
    local enemy = self.battleLevel.RoleMgr:SearchEnemyTarget(self.m_owner:GetPosition(),chaseRadius,self.m_owner:GetType(),ownerModelRadius)
    if enemy ~= nil then
        local pos1 = self.m_owner:GetPosition()
        local pos2 = enemy:GetPosition()
        local angle = SU_Util.GetAngle(pos1,pos2)
		local x,y,z = self.m_owner:GetTransform():Get_localEulerAngles()
        angle = Mathf.Abs(angle - y % 360)
        local angle2 = self.viewAngle / 2
        --Logger.LogError("人物角度："..angle)
        if enemy.IsSneak ~= nil and enemy:IsSneak() then
            if angle > angle2 and angle < 360 - angle2 then
                return nil
            end
        else
            local dis = Vector3_Distance2D(pos1,pos2) - enemy:GetModelRadius() - ownerModelRadius
            local temp = chaseRadius * self.backChaseRadius
            if angle > angle2 and angle < 360 - angle2 and dis >= temp then
                --Logger.LogError(string.format("没在可视范围内,angle:%s,angle2:%s,dis:%s,chaseRadius:%s,backChaseRadius:%s,temp:%s",angle,angle2,dis,self.chaseRadius,self.backChaseRadius,temp))
                return nil
            end
        end

        local targetTransform = enemy:GetTransform()
        if not self.m_owner:SightRayCast(targetTransform) then
            return nil
        end
    end
    return enemy
end

function ZombieBaseAI:OnStateComplete(type,data)
end

function ZombieBaseAI:Destroy()
    self.m_owner = nil
    self.battleLevel = nil
    self.m_target = nil
    self.m_states:Dispose()
    self.m_states = nil
end

return ZombieBaseAI