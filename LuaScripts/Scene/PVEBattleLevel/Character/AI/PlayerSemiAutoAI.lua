---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2022/10/9 16:55
---英雄半自动AI，搜寻目标，移动到目标位置，攻击或采集
local PlayerSemiAutoAI = BaseClass("PlayerSemiAutoAI")
local Const = require("Scene.PVEBattleLevel.Const")
local Vector3_Distance2D = Vector3.Distance2D
local SU_Util = require "Scene.PVEBattleLevel.Utils.SU_Util"

local DoType = {
    CollectType = "CollectType",
    AttackType = "AttackType",
    BuildType = "BuildType",
    NPC = "NPC"
}

function PlayerSemiAutoAI:__init(owner)
    self.m_owner = owner
    self.checkInteractTime = 0
    self.m_isStart = false
    self.battleLevel = owner.battleLevel
    self.m_targetData = {["type"] = Const.TargetType.None, ["obj"] = nil}
    self.m_lastTargetData = {}
    self.m_targetPosBuffer = Vector3.New(0,0,0)
    self.m_ownerPosBuffer = Vector3.New(0,0,0)
    --self.m_autoTarget_k1 = LuaEntry.DataConfig:TryGetNum("auto_target", "k1")
    --self.m_autoTarget_k1 = self.m_autoTarget_k1 == 0 and 3 or self.m_autoTarget_k1
    --self.m_autoTarget_k2 = LuaEntry.DataConfig:TryGetNum("auto_target", "k2")
    --self.m_autoTarget_k2 = self.m_autoTarget_k2 == 0 and 4 or self.m_autoTarget_k2
    self.m_moveCallBack = function(isEnd)
        if isEnd == true then
            self:MoveEnd()
        end
    end
	
	self:ResetSearchRange()
end

-- 设置一下圈的几个范围
function PlayerSemiAutoAI:ResetSearchRange()
	
	local levelId = self.m_owner:GetCurLevelId()
	-- 设置搜索圈
	local range1 = tonumber(SU_Util.GetItemConfig(levelId, "search_range1"))
	local range2 = tonumber(SU_Util.GetItemConfig(levelId, "search_range2"))
	local range3 = tonumber(SU_Util.GetItemConfig(levelId, "eventpoint_range"))

	range1 = range1 or 0
	range2 = range2 or 0
	range3 = range3 or 0
    range1 = (range1 == 0) and 2 or range1
    range2 = (range2 == 0) and 2.5 or range2
	range3 = (range3 == 0) and 5 or range3
	
    self.m_autoTarget_k1 = range1
    self.m_autoTarget_k2 = range2
    self.m_eventPoint_range = range3
end

function PlayerSemiAutoAI:MoveToCollect()
    self.collectRadius = self.m_owner:GetCollectRange()
    self:DoMove(self:GetLastItemObjSelected(),DoType.CollectType)
end

function PlayerSemiAutoAI:MoveToAttack()
    self.attackRadius = self.m_owner:GetAttackRange()
    local target = self:GetLastZombieSelected()
    self:DoMove(target,DoType.AttackType)

    if target == nil then
        self.m_owner:Attack(nil)
    end
end

--[[ 前往建筑建造 ]]
function PlayerSemiAutoAI:MoveToBuild()
    self.buildRadius = 1
    local _itemObj = self:GetLastItemObjSelected()
    if _itemObj == nil then return end
    self:DoMove(_itemObj,DoType.BuildType)
end

-- 跑到目标建筑旁边，不做其他操作
function PlayerSemiAutoAI:MoveToTargetBuild(build, callback)
    self.buildRadius = 1
    if build == nil then return end
    local pos = build:GetFindPathTargetPos()
    self.m_owner:MovePath(Vector3.New(pos.x, 0, pos.z), callback)
end

function PlayerSemiAutoAI:MoveToTargetAndCollect(target)
    self.collectRadius = self.m_owner:GetCollectRange()
    self:DoMove(target, DoType.CollectType)
end

function PlayerSemiAutoAI:MoveToQuestTarget(data)
    local doGuide = data.doGuide
    if doGuide ~= nil and doGuide > 0 then
        DataCenter.GuideManager:SetCurGuideId(doGuide)
        DataCenter.GuideManager:DoGuide()
        return
    end
    local type = data.type
    if type == QuestDescType.FollowNPC then
        local questTarget = self.battleLevel.RoleMgr:GetNpc(data.para3)
        if questTarget ~= nil then
            self.npcRadius = 1
            self:DoMove(questTarget, DoType.NPC)
        end
    elseif type == QuestDescType.TalkNPC_G or type == QuestDescType.TalkNPC_T then
        local questTarget = self.battleLevel.RoleMgr:GetNpc(data.para3)
        if questTarget ~= nil then
            self.npcRadius = 1
            self:DoMove(questTarget, DoType.NPC)
            --self.questPara1 = data.para1
            --self.questPara3 = data.id
            self.questType = type
            self.gopara = data.gopara
        end
    elseif type == QuestDescType.Trigger or type == QuestDescType.Destroy_ then
        local params = string.split_ii_array(data.para1, "|")
        for i = 1, #params do
            local para = params[i]
            local questTarget = self.battleLevel.ObjMgr:SearchQuestTarget(self.m_owner:GetPosition(), data.area, type, para)
            if questTarget ~= nil then
                self.collectRadius = self.m_owner:GetCollectRange()
                self:DoMove(questTarget, DoType.CollectType)
                return
            end
        end
    elseif type == QuestDescType.Monster then
        local questTarget = self.battleLevel.RoleMgr:SearchQuestEnemyTarget(self.m_owner:GetPosition(), data.area, data.para1)
        if questTarget ~= nil then
            self.attackRadius = self.m_owner:GetAttackRange()
            self:DoMove(questTarget,DoType.AttackType)
        end
    elseif type == QuestDescType.ZombieWave then
        local questTarget = self.battleLevel.RoleMgr:SearchQuestZombieWaveTarget(self.m_owner:GetPosition(), data.area)
        if questTarget ~= nil then
            self.attackRadius = self.m_owner:GetAttackRange()
            self:DoMove(questTarget,DoType.AttackType)
        end
    elseif type == QuestDescType.Build then
        local questTarget = self.battleLevel.ObjMgr:SearchQuestTarget(self.m_owner:GetPosition(), data.area, type, data.para1)
        if questTarget ~= nil then
            local template = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(data.para1)
            if template ~= nil and template.tab_type == UIBuildListTabType.OutBuild 
                    and UIUtil.CheckFunctionBtnShow(FunctionBtnType.ViewMode, nil, nil) then
                local pos = questTarget:GetPosition()
                DataCenter.BattleLevel:ChangeToViewModeWithPos(ViewMode.SLG, pos, nil, function()
                    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(questTarget:GetUuid())
                    if buildData ~= nil then
                        UIUtil.OnClickBuild(buildData.uuid)
                    end
                end)
            else
                self.buildRadius = 1
                self:DoMove(questTarget, DoType.BuildType)
                self.questType = type
                self.questPara3 = data.para3
                self.gopara = data.gopara
            end
        end
    elseif type == QuestDescType.Blueprint then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIBluePrint, { anim = true, UIMainAnim = UIMainAnimType.AllHide}, {bluePrintId = data.para1})
    elseif type == QuestDescType.Building then
		-- 不在主城不让建造！
		if not SceneManager.IsInHome() then
            UIUtil.ShowCharacterDialogId(799036, self.m_owner)
			return
		end
        if DataCenter.BattleLevel:GetLevelId() == LevelId.Main and DataCenter.BattleLevel:GetViewMode() == ViewMode.RPG then
            local k1 = LuaEntry.DataConfig:TryGetArray_i("building_button","k1",",")
            local k2 = LuaEntry.DataConfig:TryGetNum("building_button","k2")
            if k1 and k2 then
                if #k1 == 2 then
                    local pos = self.m_owner:GetPosition()
                    local dist = Vector3_Distance2D(pos.x, pos.z, k1[1], k1[2])
                    if dist > k2 then
                        --710806=我需要先跑到家附近才能这样做
                        UIUtil.ShowCharacterDialogId(710806, self.m_owner)
                        return
                    end
                end
            end
        end
    elseif type == QuestDescType.ChangeLevel then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UILevelList, {anim = true})
    elseif type == QuestDescType.Position then
        if UIUtil.CheckFunctionBtnShow(FunctionBtnType.ViewMode, nil, nil) then
            if table.count(data.gopara) > 0 then
                DataCenter.BattleLevel:ChangeViewMode(ViewMode.SLG,function()
                    TimerManager:GetInstance():DelayInvoke(function()
                        DataCenter.GuideManager:SetCurGuideId(tonumber(data.gopara[1]))
                        DataCenter.GuideManager:DoGuide()
                    end, 0.1)
                end)
            else
                local params = string.split_ii_array(data.para1, ",")
                if #params == 2 then
                    DataCenter.BattleLevel:ChangeViewMode(ViewMode.RPG,function()
                        self.m_owner:MovePath(Vector3.New(params[1], 0, params[2]))
                    end)
                end
            end
        else
            local params = string.split_ii_array(data.para1, ",")
            if #params == 2 then
                self.m_owner:MovePath(Vector3.New(params[1], 0, params[2]))
            end
        end
    elseif type == QuestDescType.DoGuide then
        DataCenter.GuideManager:SetCurGuideId(data.para1)
        DataCenter.GuideManager:DoGuide()
    elseif type == QuestDescType.Self_Talk then
        if data.gopara ~= nil and table.count(data.gopara) > 0 then
            UIUtil.ShowCharacterDialog(Localization:GetString(data.gopara[1]), self.m_owner)
        end
    elseif type == QuestDescType.PlayerBehavior then
        if data.para1 == PlayerBehavior.Bathe and data.para3 > 0 then
            local questTarget = self.battleLevel.ObjMgr:SearchQuestTarget(self.m_owner:GetPosition(), data.area, QuestDescType.Build, data.para3)
            if questTarget then
                self.buildRadius = 1
                self:DoMove(questTarget, DoType.BuildType)
            end
        elseif data.para1 == PlayerBehavior.Stool or data.para1 == PlayerBehavior.Pee then
            DataCenter.BatheManager:StartPeeOrStool()
        end
    end
end

function PlayerSemiAutoAI:DoTalkNPC()
    if self.questType == QuestDescType.TalkNPC_G or self.questType == QuestDescType.TalkNPC_T then
        if self.gopara and table.count(self.gopara) == 1 then
            DataCenter.GuideManager:SetCurGuideId(tonumber(self.gopara[1]))
            DataCenter.GuideManager:DoGuide()
        end
    end
end

function PlayerSemiAutoAI:DoBuild(target)
    local _info = target:GetInfo()
    if _info == nil then return end
    local uuid = _info:GetUuid()
    local buildId = _info:GetBuildId()
    local isFinish = DataCenter.BuildManager:CheckSendBuildFinish(uuid)
    if (isFinish == true) then
        if self.questType ~= nil then
            if self.questType == QuestDescType.Build then
                if self.gopara and table.count(self.gopara) == 1 then
                    UIUtil.OnClickBuild(uuid)
                    DataCenter.GuideManager:SetCurGuideId(tonumber(self.gopara[1]))
                    DataCenter.GuideManager:DoGuide()
                end
            end
        else
            local canCollect = false
            if DataCenter.BuildManager:IsItemProductBuild(buildId) then
                canCollect = _info:CheckCanGetProduct()
            end
            if canCollect then
                EventManager:GetInstance():Broadcast(EventId.SU_TriggerProductBuildBubble, uuid)
                return
            end

            --if _info.updateTime > 0 then
            --    local now = UITimeManager:GetInstance():GetServerTime()
            --    if _info.updateTime > now then
            --        UIManager:GetInstance():OpenWindow(UIWindowNames.UISpeed, ItemSpdMenu.ItemSpdMenu_City, uuid)
            --        return
            --    end
            --end

            if _info.level == 0 then
                local now = UITimeManager:GetInstance():GetServerTime()
                if _info.updateTime > now then
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UISpeed,{anim = true,isBlur = true}, ItemSpdMenu.ItemSpdMenu_City, uuid)
                else
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UINewBuildUpgrade, uuid)
                end
            else
                local btns = UIUtil.GetSUCityBuildBtns(_info)
                if table.count(btns) > 0 then
                    -- 有功能
                    local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
                    local param = {btnType = btns[1], info = _info, buildTemplate = buildTemplate}
                    UIUtil.OnSUCityBuildBtnClick(param)
                else
                    -- 没有功能
                    local now = UITimeManager:GetInstance():GetServerTime()
                    if _info.updateTime > now then
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UISpeed,{anim = true,isBlur = true}, ItemSpdMenu.ItemSpdMenu_City, uuid)
                    else
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UINewBuildUpgrade, uuid)
                    end
                end
            end
        end
    end
end

function PlayerSemiAutoAI:DoCollect(target)
    if target ~= nil and target:IsGuidePoint() and target:GetEventType() == Const.TriggerEventType.StrideOver then
        --翻越点
        self.m_owner:StrideOver(target)
    else
        self.m_owner:Collect(target)
    end
end

function PlayerSemiAutoAI:DoMove(target,type)
    if target == nil or self.m_owner:IsDie() then
        return
    end
    if self.m_owner.isAutoAttack and type == DoType.AttackType then
        return
    end

    self.m_isStart = true
    self.m_target = target
    self.questType = nil
    self.questPara1 = nil
    self.questPara3 = nil
    self.m_type = type
    self.gopara = nil
end

function PlayerSemiAutoAI:Stop()
    self.m_isStart = false
    self.m_target = nil
    --self.lastZombieSelected = nil
    --self.lastItemUuidSelected = nil
end

function PlayerSemiAutoAI:OnUpdate(deltaTime)
    if self.m_owner:IsAIMode() then
        return
    end
    if self.m_owner:IsDie() then
        return
    end
    self.checkInteractTime = self.checkInteractTime + deltaTime
    if self.checkInteractTime > 0.2 then
        self.checkInteractTime = 0
        self:CheckTarget()
    end
    if self.m_isStart and self.m_target ~= nil then
        self:MoveToTarget()
    else
        if self.m_owner:IsAttacking() then
            --如果一直在攻击中，只要一有目标就自动启动
            local target = self:GetLastZombieSelected()
            if target ~= nil then
                self:DoMove(target,DoType.AttackType)
            end
        end
    end
    self:AutoAttack()
end
--自动攻击
function PlayerSemiAutoAI:AutoAttack()
    if not self.m_owner.isAutoAttack then
        return
    end
    local target = self:GetLastZombieSelected()
    if target == nil then
        return
    end
    local ownerPos = self.m_owner:GetPosition()
    local targetPos = target:GetPosition()
    self.m_ownerPosBuffer:Set(ownerPos.x,0,ownerPos.z) --忽略Y
    self.m_targetPosBuffer:Set(targetPos.x,0,targetPos.z) --忽略Y
    local dis = Vector3.Distance(self.m_ownerPosBuffer,self.m_targetPosBuffer) - target:GetModelRadius()
    if dis <= self.m_owner:GetAttackRange() then
        self.m_owner:Attack(target)
    end
end

function PlayerSemiAutoAI:MoveToTarget()
    local target = self.m_target
    if target == nil then
        return
    end
    local radius = 1
    local targetPos = target:GetPosition()
    local modelRadius = self.m_target:GetModelRadius()
    if self.m_type == DoType.CollectType then
        radius = self.collectRadius
        modelRadius = modelRadius * 0.5 --采集物为了适配光圈，把这个参数当成直径来用了，所以这里需要*0.5
    elseif self.m_type == DoType.BuildType then
        radius = self.buildRadius
        modelRadius = modelRadius * 0.5 --建筑物为了适配光圈，把这个参数当成直径来用了，所以这里需要*0.5
        targetPos = target:GetFindPathTargetPos()
    elseif self.m_type == DoType.AttackType then
        radius = self.attackRadius or self.m_owner:GetAttackRange()
    elseif self.m_type == DoType.NPC then
        radius = self.npcRadius
    end
    local ownerPos = self.m_owner:GetPosition()
  
    self.m_ownerPosBuffer:Set(ownerPos.x,0,ownerPos.z) --忽略Y
    self.m_targetPosBuffer:Set(targetPos.x,0,targetPos.z) --忽略Y
    local dis = Vector3.Distance(self.m_ownerPosBuffer,self.m_targetPosBuffer) - modelRadius
    if dis <= radius then
        self:MoveEnd()
    else
        if self.m_type ~= DoType.BuildType or not target:IsSubBuilding() then
            targetPos = self:FindClosestEdge(targetPos,ownerPos,modelRadius,self.m_type)
        end
        
        self.m_owner:MovePath(targetPos, self.m_moveCallBack)
    end
end

function PlayerSemiAutoAI:MoveEnd()
    local target = self.m_target

    self:Stop()
    
    if target == nil then
        return
    end
    
    if self.m_type == DoType.CollectType then
        self:DoCollect(target)
    elseif self.m_type == DoType.AttackType then
        local attacking = self.m_owner:IsAttacking()
        self.m_owner:Attack(target)
        if not attacking then
            self.m_owner:StopAttack()
        end
    elseif self.m_type == DoType.BuildType then
        self.m_owner:Idle()
        self:DoBuild(target)
    elseif self.m_type == DoType.NPC then
        self.m_owner:Idle()
        self:DoTalkNPC()
        -- 手动点交谈按钮
        --if self.questPara1 ~= nil and self.questPara3 ~= nil then
        --    DataCenter.GuideManager:SetCurGuideId(self.questPara1)
        --    DataCenter.GuideManager:SetGuideEndCallBack(function()
        --        if not DataCenter.ChapterTaskManager:CheckIsSuccess(tostring(self.questPara3)) then
        --            SFSNetwork.SendMessage(MsgDefines.SU_FinishQuest, self.questPara3)
        --        end
        --    end)
        --    DataCenter.GuideManager:DoGuide()
        --end
    end
end

function PlayerSemiAutoAI:FindClosestEdge(targetPos,playerPos,modelRadius,type)
    if type ~= DoType.BuildType then
        return targetPos
    end
    local _dir = targetPos - playerPos
    _dir = Vector3.Normalize(_dir) * modelRadius
    local newPos = targetPos - _dir
    return newPos
end

function PlayerSemiAutoAI:RemoveSelectCircle()
    if (self.m_lastTargetData ~= nil and self.m_lastTargetData["obj"] ~= nil) then
        self.m_lastTargetData["obj"]:LostFocus()
    end
end

--[[
    检测目标 1.攻击目标(丧尸)  2.地表资源(资源、建筑)
]]
function PlayerSemiAutoAI:CheckTarget()
    if (self.m_owner:IsAIMode() or self.m_owner:IsCollect()) then --采集过程不搜寻目标
        return
    end
	ProfilerUtil.BeginSample("[Lua]PlayerSemiAutoAI:CheckTarget")
	
    local _targetData = self:GetTargetData()
    -- if (_targetData["obj"] == nil) then
    --     print("***** target nil " )
    -- else
    --     print("***** target not nil " .. tostring(_targetData["obj"]:GetTriggerId()))
    -- end
    if (_targetData["obj"] ~= self.m_lastTargetData["obj"]) then
        local _oldTargetObj = self.m_lastTargetData["obj"]
        if (_oldTargetObj ~= nil) then
            _oldTargetObj:LostFocus()

            -- --如果上次trigger是box类型的话 尝试关闭pickup ui
            -- if _oldTargetObj.GetInfo ~= nil and _oldTargetObj:GetInfo() ~= nil then
            --     local objectType = _oldTargetObj:GetObjectType()
            --     if objectType == Const.ObjectType.Box then
            --         local triggerId = _oldTargetObj:GetTriggerId()
            --         print("***** target -- lost: " .. tostring(triggerId))
            --         if (triggerId == 203233) then
            --             local a = 1
            --             local a = self:GetTargetData()
            --         end
            --     end
            -- end

            UIManager:GetInstance():DestroyWindow(UIWindowNames.UIBagPickUp)
        end
        
        local _curTargetObj = _targetData["obj"]
        local _curTargetType = _targetData["type"]
        self.lastZombieSelected = nil
        self.lastItemUuidSelected = nil
        if (_curTargetObj ~= nil) then
            _curTargetObj:Focus()
            if (_curTargetType == Const.TargetType.Zombie) then
                self.lastZombieSelected = _curTargetObj:GetObjId()
            elseif _curTargetType == Const.TargetType.Collect then
                self.lastItemUuidSelected = _curTargetObj:GetUuid()
            end
        end
        self.m_lastTargetData["type"] = _targetData["type"]
        self.m_lastTargetData["obj"] = _targetData["obj"]
		ProfilerUtil.BeginSample("[Lua]PlayerSemiAutoAI:CheckTarget - Broadcast")
        EventManager:GetInstance():Broadcast(EventId.SU_PlayerTargetChange, _targetData)
		ProfilerUtil.EndSample()
    end

    self.battleLevel.ObjMgr:CheckEventDotTipEnable(self.m_owner:GetPosition(),self.m_eventPoint_range)
    
	ProfilerUtil.EndSample()
end

--[[ 
    目前有个新的需求是
    3>2>1>player<1<2<3
    在此时我们存在三个范围 1 / 2 /3 
    在范围1内,我们优先怪物,然后是资源,最后是建筑/npc
    如果范围1中没有找到,那么到范围2中来寻找,  如果玩家被怪物追击,则看在范围2中是否有锁定玩家的怪物,如果有则优先返回,如果没有,则在范围2中按距离返回一个指定的
    如果在2中也没有找到,则返回空,空的情况下,点击按钮为 "出空拳" 
]]
function PlayerSemiAutoAI:GetTargetData()
    if (self.m_owner:IsAIMode()) then
        return self.m_owner:GetTargetInAIMode()
    end
	
	local searchInfo = self.battleLevel.SearchInfo
	local pos = self.m_owner:GetPosition()

	self.m_targetData.obj = nil
    self.m_targetData["type"] = Const.TargetType.None

    --TODO 始终要选最近的怪，所以下面代码先注释掉
	-- 如果当前僵尸还在，就直接处理
	--local target = self:GetLastZombieSelected()
	--if searchInfo:DoCheckCurrent(pos, self.m_targetData, target) then
    --    self.m_targetData["obj"] = target
	--	return self.m_targetData
	--end
	
	if searchInfo:DoAroundCheck(pos, self.m_targetData) then
		return self.m_targetData
	end
	return self.m_targetData
	
    --local _range1 = self.m_autoTarget_k1
    --local _range2 = self.m_autoTarget_k2
    --self.m_targetData["type"] = Const.TargetType.Zombie
    --self.m_targetData["obj"] = nil
    --local _range1_enemy = self.battleLevel.RoleMgr:SearchEnemyTarget(self.m_owner:GetPosition(),_range1,self.m_owner:GetType())
    ---- 如果在范围1中有怪,则直接返回
    --if (_range1_enemy ~= nil) then
        --self.m_targetData["type"] = Const.TargetType.Zombie
        --self.m_targetData["obj"] = _range1_enemy
        --return self.m_targetData
    --end
    ---- 如果范围1内有资源,返回资源
    --local _range1_item = self.battleLevel.ObjMgr:SearchItemTarget(self.m_owner:GetPosition(),_range1,self.m_owner:GetType(), true)
    --if (_range1_item ~= nil) then
        --self.m_targetData["type"] = Const.TargetType.Collect
        --self.m_targetData["obj"] = _range1_item
        --return self.m_targetData
    --end
    ---- 开始范围2,查看是否有怪物
    --local _range2_enemy = self.battleLevel.RoleMgr:SearchEnemyTarget(self.m_owner:GetPosition(),_range2,self.m_owner:GetType())
    ---- 资源
    --local _range2_item = self.battleLevel.ObjMgr:SearchItemTarget(self.m_owner:GetPosition(),_range2,self.m_owner:GetType())
    --if (_range2_enemy == nil and _range2_item == nil) then
        --self.m_targetData["type"] = Const.TargetType.Zombie
        --self.m_targetData["obj"] = nil
    --elseif _range2_enemy ~= nil then
        --self.m_targetData["type"] = Const.TargetType.Zombie
        --self.m_targetData["obj"] = _range2_enemy 
    --elseif _range2_item ~= nil then
        --self.m_targetData["type"] = Const.TargetType.Collect
        --self.m_targetData["obj"] = _range2_item
    --else
        --if (_range2_enemy:IsMonsterLockedPlayer()) then
            --self.m_targetData["type"] = Const.TargetType.Zombie
            --self.m_targetData["obj"] = _range2_enemy
        --end
        --local _dis_enemy = Vector3.Distance(_range2_enemy:GetPosition(), self.m_owner:GetPosition())
        --local _dis_item = Vector3.Distance(_range2_item:GetPosition(), self.m_owner:GetPosition())
        --if (_dis_enemy <= _dis_item) then
            --self.m_targetData["type"] = Const.TargetType.Zombie
            --self.m_targetData["obj"] = _range2_enemy
        --else
            --self.m_targetData["type"] = Const.TargetType.Collect
            --self.m_targetData["obj"] = _range2_item
        --end
    --end
    --return self.m_targetData
end

function PlayerSemiAutoAI:GetLastZombieSelected()
    --if (self.m_owner:IsAIMode()) then
    --    return self.m_owner:GetTargetInAIMode()
    --end
    if self.lastZombieSelected == nil then
        return nil
    end
    local zombie = self.battleLevel.RoleMgr:GetZombieByObjId(self.lastZombieSelected)
    if zombie and zombie:GetCurBlood() > 0 then
        return zombie
    end
    self.lastZombieSelected = nil
    return nil
end

function PlayerSemiAutoAI:GetLastItemObjSelected()
    --if (self.m_owner:IsAIMode()) then
    --    return self.m_owner:GetTargetInAIMode()
    --end
    if self.lastItemUuidSelected == nil then
        return nil
    end
    local _objNpc = self.battleLevel.RoleMgr:GetNpc(self.lastItemUuidSelected)
    if (_objNpc ~= nil) then
        return _objNpc
    end
    return self.battleLevel.ObjMgr:GetObjectByUuid(self.lastItemUuidSelected)
end

--function PlayerSemiAutoAI:UnlockTriggerId()
--    if self.lastItemUuidSelected ~= nil then
--        self.m_lastTargetData["obj"] = nil
--        EventManager:GetInstance():Broadcast(EventId.SU_InteractiveChange, nil)
--    end
--    self.lastItemUuidSelected = nil
--end

function PlayerSemiAutoAI:Destroy()
    self.m_owner = nil
    self.battleLevel = nil
    self.m_target = nil
end 

return PlayerSemiAutoAI