---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/8/16 12:06
---

local NpcBaseAI = require("Scene.PVEBattleLevel.Character.AI.NpcBaseAI")
local NpcStationWorkerAI = BaseClass("NpcStationWorkerAI",NpcBaseAI)
local Const = require "Scene.PVEBattleLevel.Const"

local StateType =
{
    RunToPosition = "RunToPosition",--跑向目的地
    Working = "Working",--工作
    GoHome = "GoHome",--回家
}

local AnimationStateName =
{
    Run = "nvlieshou_low_run_01",
    Walk = "nvlieshou_low_walk_01",
    Build = "nvlieshou_low_build_01",
}

function NpcStationWorkerAI:__init(owner, completeHandler)
    NpcBaseAI.__init(self, owner, completeHandler)
    self.maxTime = 600000
    self.workTime = 5
end

function NpcStationWorkerAI:__initState()
    self.m_states:AddState(StateType.RunToPosition, self.__runEnter)
    self.m_states:AddState(StateType.Working, self.__buildEnter)
    self.m_states:AddState(StateType.GoHome, self.__goHome)
end


-- 生成建筑周围4个点 用以npc建造表现
function NpcStationWorkerAI:__initBuildAroundPoint()
    local uuid = self.buildUuid
    if uuid == nil then
        return
    end

    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(uuid)
    if buildData == nil then
        return
    end

    self.buildCenterPos = buildData:GetCenterVec()
    local buildDesTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildData.itemId)
    local tiles = buildDesTemplate and buildDesTemplate.tiles or 3

    self.buildAroundPointList = {}
    local offset = tiles/2 + 0.5
    --逆时针 上、左、下、右
    --table.insert(self.buildAroundPointList, self.buildCenterPos + Vector3.New(0, 0, offset))
    --table.insert(self.buildAroundPointList, self.buildCenterPos + Vector3.New(-offset, 0, 0))
    table.insert(self.buildAroundPointList, self.buildCenterPos + Vector3.New(0, 0, -offset))
    --table.insert(self.buildAroundPointList, self.buildCenterPos + Vector3.New(offset, 0, 0))
end

function NpcStationWorkerAI:__initTriggerPoint()
    local triggerInfo = DataCenter.SV_MapItemInfoManager:GetItemInfoList():GetTriggerByTriggerId(self.toTriggerId)
    if triggerInfo ~= nil then
        self.realTriggerPos = SceneUtils.TileIndexToWorld(triggerInfo.pointId)
        self.triggerPos = Vector3.New(self.realTriggerPos.x, self.realTriggerPos.y, self.realTriggerPos.z)
        if self.triggerIndex == 1 then
            self.triggerPos.x = self.realTriggerPos.x + 1
            self.triggerPos.z = self.realTriggerPos.z - 1.3
        elseif self.triggerIndex == 2 then
            self.triggerPos.x = self.realTriggerPos.x + 3.1
            self.triggerPos.z = self.realTriggerPos.z - 1.5
        elseif self.triggerIndex == 3 then
            self.triggerPos.x = self.realTriggerPos.x + 3.5
            self.triggerPos.z = self.realTriggerPos.z - 1
        end
    end
end

function NpcStationWorkerAI:SetData(param, callback)
    NpcBaseAI.SetData(self, param, callback)
    self.buildUuid = param.fromBuildUid
    self.toTriggerId = param.triggerId
    self.workerId = param.workerId
    self.startTime = UITimeManager:GetInstance():GetServerTime()
    self.triggerIndex = param.triggerIndex or 1
    self.triggerIndex = math.min(self.triggerIndex, Const.MaxWorkerPerTriggerPoint)
    self:__initBuildAroundPoint()
    self:__initTriggerPoint()
end

function NpcStationWorkerAI:Start()
    if self.buildAroundPointList == nil or self.triggerPos == nil then
        return
    end
    NpcBaseAI.Start(self)
    self.m_states:SetState(StateType.RunToPosition)
end

function NpcStationWorkerAI:Destroy()
    if self.workerDelayTime then
        self.workerDelayTime:Stop()
        self.workerDelayTime = nil
    end

    NpcBaseAI.Destroy(self)
end

function NpcStationWorkerAI:__runEnter(data)
    local function startMove(targetPos)
        local walkSpeed = self.m_owner:GetMoveSpeed()
        walkSpeed = 6
        self.m_owner:MovePathWithSpecifiedSpeed(targetPos, walkSpeed, function(isEnd)
            self.m_states:SetState(StateType.Working)
        end)
        TimerManager:GetInstance():DelayInvoke(function() self.m_owner:PlayAnim(AnimationStateName.Walk) end, 0.03)
    end

    self.m_owner:ExitCurrentState()
    self.m_owner:RemoveHammer()
    local fromPoint = self.buildAroundPointList[1]
    self.m_owner:SetPosition(fromPoint)
    TimerManager:GetInstance():DelayInvoke(function() startMove(self.triggerPos) end, 0.03)
end

function NpcStationWorkerAI:__buildEnter(data)
    self:__changeToHammerKnock()
end

function NpcStationWorkerAI:OnUpdate(deltaTime)
    NpcBaseAI.OnUpdate(self,deltaTime)
    local now = UITimeManager:GetInstance():GetServerTime()
    if now - self.startTime >= self.maxTime then
        self:DoWhenBackHome()
    end
end

function NpcStationWorkerAI:__changeToHammerKnock()
    self.m_owner:ExitCurrentState()
    TimerManager:GetInstance():DelayInvoke(function()
        if self.m_owner == nil then
            return
        end
        --self.m_owner:TurnToDir(_dir, deltaTime)
        self.m_owner:LookAt(self.realTriggerPos)
        self.m_owner:PlayAnim(AnimationStateName.Build)
        self.m_owner:ShowHammer()

        if self.workerDelayTime then
            self.workerDelayTime:Stop()
            self.workerDelayTime = nil
        end

        self.workerDelayTime = TimerManager:GetInstance():DelayInvoke(function()
            if self.workerDelayTime then
                self.workerDelayTime:Stop()
                self.workerDelayTime = nil
            end
            if self.m_owner == nil then
                return
            end
            self.m_states:SetState(StateType.GoHome)
        end, self.workTime)

    end, 0.1)
end

function NpcStationWorkerAI:__goHome()
    local function startMove(targetPos)
        local walkSpeed = self.m_owner:GetMoveSpeed()
        walkSpeed = 6
        self.m_owner:MovePathWithSpecifiedSpeed(targetPos, walkSpeed, function(isEnd)
            TimerManager:GetInstance():DelayInvoke(function() self:DoWhenBackHome() end, 0.03)
        end)
        TimerManager:GetInstance():DelayInvoke(function() self.m_owner:PlayAnim(AnimationStateName.Walk) end, 0.03)
    end
    self.m_owner:ExitCurrentState()
    self.m_owner:RemoveHammer()
    local toPoint = self.buildAroundPointList[1]
    TimerManager:GetInstance():DelayInvoke(function() startMove(toPoint) end, 0.03)
end

function NpcStationWorkerAI:DoWhenBackHome()
    local level = SceneManager.GetLevel()
    if level ~= nil then
        level:GetBattleLevelStationWorkerManager():RemoveOneWorker(self.workerId)
    end
end

return NpcStationWorkerAI