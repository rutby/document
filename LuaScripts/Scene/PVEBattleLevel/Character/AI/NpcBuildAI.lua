---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 2023/6/20 18:24
---
--- 美女Npc建造表现 1.跑过去 2.围着建筑敲打


local NpcBaseAI = require("Scene.PVEBattleLevel.Character.AI.NpcBaseAI")
local NpcBuildAI = BaseClass("NpcBuildAI",NpcBaseAI)
local Const = require("Scene.PVEBattleLevel.Const")

local WeaponRootNodeName = 'guadian_R'

local StateType = 
{
    FirstRun = "FirstRun", --第一段跑到建筑附近
    BuildAround = "BuildAround" --围着建筑建造
}

local BuildActionType = {
    WalkAround = 1,
    HammerKnock = 2,
}

local AnimationStateName =
{
    Run = "nvlieshou_low_run_01",
    Walk = "nvlieshou_low_walk_01",
    Build = "nvlieshou_low_build_01",
}

function NpcBuildAI:__init(owner, completeHandler)
    NpcBaseAI.__init(self,owner, completeHandler)

    self.knockActionDuration = 5
    self.knockIntervalTime = 0
    self.buildAroundPointList = nil
    self.buildUuid = nil
    self.instantMove = false
    self.buildActionType = nil
end

function NpcBuildAI:__initState()
    self.m_states:AddState(StateType.FirstRun, self.__runEnter)
    self.m_states:AddState(StateType.BuildAround, self.__buildEnter, self.__buildUpdate)
end


-- 生成建筑周围4个点 用以npc建造表现
function NpcBuildAI:__initBuildAroundPoint()
    local uuid = self.buildUuid
    if uuid == nil then
        Logger.LogError('__initBuildAroundPoint uuid is nil!')
        return
    end

    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(uuid)
    if buildData == nil then
        Logger.LogError('__initBuildAroundPoint buildData is nil ! uuid:' .. tostring(uuid))
        return
    end

    self.buildCenterPos = buildData:GetCenterVec()
    local buildDesTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildData.itemId)
    local tiles = buildDesTemplate and buildDesTemplate.tiles or 3
    
    self.buildAroundPointList = {}
    local offset = tiles/2 + 0.5
    --逆时针 上、左、下、右
    table.insert(self.buildAroundPointList, self.buildCenterPos + Vector3.New(0, 0, offset))
    table.insert(self.buildAroundPointList, self.buildCenterPos + Vector3.New(-offset, 0, 0))
    table.insert(self.buildAroundPointList, self.buildCenterPos + Vector3.New(0, 0, -offset))
    table.insert(self.buildAroundPointList, self.buildCenterPos + Vector3.New(offset, 0, 0))
end

function NpcBuildAI:SetData(param, callback)
    Logger.Log('#NpcBuildAI# step in SetData')
    NpcBaseAI.SetData(self, param, callback)
    
    self.buildUuid = param.buildUuid
    self.instantMove = param.instantMove
    self:__initBuildAroundPoint()
end

function NpcBuildAI:Start()
    Logger.Log('#NpcBuildAI# step in Start')
    if self.buildAroundPointList == nil then
        return
    end
    
    NpcBaseAI.Start(self)
    if self.instantMove then
        TimerManager:GetInstance():DelayInvoke(function()
            self.m_owner:SetPosition(self.buildAroundPointList[1])
            self.m_states:SetState(StateType.BuildAround)
        end, 0.03)
    else
        --新增需求：开始建造瞬移到建筑附近
        self:SetToNearByPos()        
        self.m_states:SetState(StateType.FirstRun)
    end
end

function NpcBuildAI:Destroy()
    self.m_owner:ExitCurrentState()
    self.m_owner:RemoveHammer()
    
    NpcBaseAI.Destroy(self)
end

function NpcBaseAI:SetToNearByPos()
    local ret, dstPos = DataCenter.BattleLevel:GetPathFinder():FindValidNavMeshPosition(self.buildAroundPointList[1], 6, 5)
    if not ret then
        Logger.Log('##NpcBuildAI# SetToNearByPos: state[1]')
        return
    end

    local pathList = DataCenter.BattleLevel:GetPath(self.m_owner:GetPosition(), dstPos)
    if pathList == nil or next(pathList) == nil then
        Logger.Log('##NpcBuildAI# SetToNearByPos: state[2]')
        return
    end

    --距目标点小于一定距离即停止
    local s = math.max(1, #pathList -5)
    for i = s, #pathList-1 do
        local distance = Vector3.Distance(pathList[i], dstPos)
        if distance < 1.1 then
            for _ = i+1, #pathList do
                table.remove(pathList, #pathList)
            end
            break
        end
    end

    if #pathList < 2 then
        Logger.Log('##NpcBuildAI# SetToNearByPos: state[3]')
        return
    end

    local lastPoint1 = pathList[#pathList]
    local lastPoint2 = pathList[#pathList-1]
    local nearByPos = Vector3.Distance(lastPoint1, lastPoint2) < 10 and lastPoint2 or (lastPoint1 + Vector3.Normalize(lastPoint2 - lastPoint1) * 10)
    self.m_owner:SetPosition(nearByPos)
end

function NpcBuildAI:__runEnter(data)
    Logger.Log('#NpcBuildAI# step in __runEnter')
    
    local function startMove(targetPos)
        self.m_owner:MovePathWithSpecifiedSpeed(targetPos, DataCenter.GirlBehaviorManager.GirlRunSpeed, function(isEnd)
            DataCenter.BattleLevel:GetGirlCollectMgr():RemovePathLine(self.m_owner)
            DataCenter.ChaRunBubbleManager:DeleteChaRunBubble(self.m_owner.robotId)  --根据robotId，清除人物身上的奔跑时显示的气泡
            self.m_states:SetState(StateType.BuildAround)
        end)
        
        TimerManager:GetInstance():DelayInvoke(function() self.m_owner:PlayAnim(AnimationStateName.Run) end, 0.03)
        DataCenter.BattleLevel:GetGirlCollectMgr():ShowPathLine(self.m_owner)
    end

    self.m_owner:ExitCurrentState()
    local firstPoint = self.buildAroundPointList[1]
    TimerManager:GetInstance():DelayInvoke(function() startMove(firstPoint) end, 0.03)
end

function NpcBuildAI:__buildEnter(data)
    Logger.Log('#NpcBuildAI# step in __buildEnter')
    
    self.walkAroundPathIdx = 0
    self:__changeToHammerKnock()
end

function NpcBuildAI:__buildUpdate()
    if self.buildActionType == BuildActionType.HammerKnock then
        self.knockIntervalTime = self.knockIntervalTime + Time.deltaTime
        if self.knockIntervalTime >= self.knockActionDuration then
            self.knockIntervalTime = 0
            self:__changeToWalkAround()
        end
    elseif self.buildActionType == BuildActionType.WalkAround then
        if self.isWalkCompleted then
            self:__changeToHammerKnock()
        end
    end
end

function NpcBuildAI:OnUpdate(deltaTime)
    NpcBaseAI.OnUpdate(self,deltaTime)
end

function NpcBuildAI:__changeToHammerKnock()
    Logger.Log('#NpcBuildAI# step in __changeToHammerKnock')
    self.buildActionType = BuildActionType.HammerKnock
    self.m_owner:ExitCurrentState()
    TimerManager:GetInstance():DelayInvoke(function()
        if self.m_owner == nil then
            return
        end
        --self.m_owner:TurnToDir(_dir, deltaTime)
        self.m_owner:LookAt(self.buildCenterPos)
        self.m_owner:PlayAnim(AnimationStateName.Build)
        self.m_owner:ShowHammer()
    end, 0.1)
end

function NpcBuildAI:__changeToWalkAround()
    Logger.Log('#NpcBuildAI# step in __changeToWalkAround')
    self.m_owner:RemoveHammer()
    self.buildActionType = BuildActionType.WalkAround
    self.m_owner:ExitCurrentState()
    self.walkAroundPathIdx = Mathf.Repeat(self.walkAroundPathIdx + 1, #self.buildAroundPointList)
    local nextPoint = self.buildAroundPointList[self.walkAroundPathIdx + 1]
    local ret, dstPos = DataCenter.BattleLevel:GetPathFinder():FindValidNavMeshPosition(nextPoint, 6, 5)
    if not ret then
        Logger.Log('#NpcBuildAI# __changeToWalkAround: can not found valid pos!')
        self.isWalkCompleted = true
        return
    end
    
    self.isWalkCompleted = false
    self.m_owner:MovePathWithSpecifiedSpeed(dstPos, 3, function()
        self.isWalkCompleted = true
    end)
    TimerManager:GetInstance():DelayInvoke(function()
        if self.m_owner ~= nil then
            self.m_owner:PlayAnim(AnimationStateName.Walk)
        end
    end, 0.1)
end


return NpcBuildAI