---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/1/12 16:56
--- 蓄力，准备Action
local SkillBaseAction = require("Scene.PVEBattleLevel.Character.Skill.Action.SkillBaseAction")
local SkillPrepareAction = BaseClass("SkillPrepareAction",SkillBaseAction)
local SkillEnum = require("Scene.PVEBattleLevel.Character.Skill.SkillEnum")
local Resource = CS.GameEntry.Resource

local RegionPath = {
    [SkillEnum.AttackType.Fan] = "Assets/_Art_LastDay/Effect/Prefab/Indicator/ArcRegion.prefab",
    [SkillEnum.AttackType.Rectangle] = "Assets/_Art_LastDay/Effect/Prefab/Indicator/LineRegion.prefab",
    [SkillEnum.AttackType.Round] = "Assets/_Art_LastDay/Effect/Prefab/Indicator/CircleRegion.prefab",
}

local function GetRegionPath(type,isEnemy)
    if type == SkillEnum.AttackType.Fan then
        return isEnemy and "Assets/_Art_LastDay/Effect/Prefab/Indicator/ArcRegion.prefab" or "Assets/_Art_LastDay/Effect/Prefab/Indicator/ArcRegion1.prefab"
    end
    if type == SkillEnum.AttackType.Rectangle then
        return isEnemy and "Assets/_Art_LastDay/Effect/Prefab/Indicator/LineRegion.prefab"
    end
    if type == SkillEnum.AttackType.Round then
        return isEnemy and "Assets/_Art_LastDay/Effect/Prefab/Indicator/CircleRegion.prefab"
    end
end

function SkillPrepareAction:Start()
    self.m_owner:PlayAnim(self.m_template.action)
    self.endTime = tonumber(self.m_template.para2) / 1000 --转换成毫秒
    self.time = 0
    self:CreateIndicator()
end

function SkillPrepareAction:CreateIndicator()
    self.indicator = nil
    local indicatorPath = GetRegionPath(self.m_template.attackType,self.m_owner:GetType() == CharacterType.Zombie)
    if not string.IsNullOrEmpty(indicatorPath) then
        self.indicator = Resource:InstantiateAsync(indicatorPath)
        self.indicator:completed("+",function()
            local gameObject = self.indicator.gameObject
            local transform = gameObject.transform
            local pos = self.m_owner:GetPosition()
            transform:Set_position(pos.x,pos.y + 0.1,pos.z)
            self:SetIndicatorData(gameObject:GetComponent(typeof(CS.Main.Scripts.Scene.PVE.SkillIndicator)))
        end)
    end
end

function SkillPrepareAction:SetIndicatorData(region)
    region:SetTotalTime(self.endTime)
    if self.m_template.attackType == SkillEnum.AttackType.Fan then
        local para1 = string.split(self.m_template.para1,";")
        local radius = tonumber(para1[1])
        local angle = tonumber(para1[2])
        local x,y,z= self.m_owner:GetTransform():Get_localEulerAngles()
        region:SetArcData(angle,y,radius)
    elseif self.m_template.attackType == SkillEnum.AttackType.Rectangle then
        local para1 = string.split(self.m_template.para1,";")
        local width = tonumber(para1[1])
        local length = tonumber(para1[2])
        local x,y,z= self.m_owner:GetTransform():Get_localEulerAngles()
        region:SetLineData(y,width,length)
    elseif self.m_template.attackType == SkillEnum.AttackType.Round then
        local radius = tonumber(self.m_template.para1)
        region:SetCircleData(radius)
    end
end

function SkillPrepareAction:OnUpdate(deltaTime)
    self.time = self.time + deltaTime
    if self.time >= self.endTime then
        self:Complete()
    end
end

function SkillPrepareAction:Complete()
    self:ClearIndicator()
    SkillBaseAction.Complete(self)
end 

function SkillPrepareAction:ClearIndicator()
    if self.indicator ~= nil then
        self.indicator:Destroy()
        self.indicator = nil
    end
end

function SkillPrepareAction:Destroy()
    SkillBaseAction.Destroy(self)
    self:ClearIndicator()
end 

return SkillPrepareAction