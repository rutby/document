---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/1/6 15:22
---
local Skill = BaseClass("Skill")
local SkillEnum = require("Scene.PVEBattleLevel.Character.Skill.SkillEnum")

local actionMap = {
    [SkillEnum.ActionType.Prepare] = require("Scene.PVEBattleLevel.Character.Skill.Action.SkillPrepareAction"),
    [SkillEnum.ActionType.Range] = require("Scene.PVEBattleLevel.Character.Skill.Action.SkillRangeAction"),
    [SkillEnum.ActionType.Sole] = require("Scene.PVEBattleLevel.Character.Skill.Action.SkillSoleAction")
}

function Skill:__init(owner,skillId,completeHandler)
    self.m_owner = owner
    self.m_skillId = skillId
    self.m_completeHandler = completeHandler
    self.m_actions = {}
    self.m_currentAction = nil
    self.m_currentIndex = 1
    self.m_doAction = false
    self.m_template = DataCenter.PveSkillTemplateManager:GetSkillTemplate(skillId)
    self:__initActions()
end

function Skill:__initActions()
    local skillActions = self.m_template.skillAction
    local action
    local actionId
    local actionCls
    local actionTemplate
    for i = 1, #skillActions do
        actionId = skillActions[i]
        actionTemplate = DataCenter.PveSkillTemplateManager:GetSkillActionTemplate(actionId)
        if actionTemplate ~= nil then
            actionCls = actionMap[actionTemplate.type]
            if actionCls ~= nil then
                action = actionCls.New(self.m_owner,actionId,function() self:OnActionComplete()  end)
                table.insert(self.m_actions,action)
            end
        end
    end
end

function Skill:SetTarget(target)
    self.m_target = target
end

function Skill:OnUpdate(deltaTime)
    if self.m_currentAction ~= nil then
        self.m_currentAction:OnUpdate(deltaTime)
    end
    if self.m_doAction then
        self:__doAction()
    end
end

function Skill:Start()
    self.m_currentIndex = 1
    self.m_doAction = true
end

function Skill:__doAction()
    self.m_doAction = false
    if self.m_currentIndex <= #self.m_actions then
        self.m_currentAction = self.m_actions[self.m_currentIndex]
        self.m_currentAction:Start()
    end
end

function Skill:OnActionComplete()
    self.m_currentAction = nil
    self.m_currentIndex = self.m_currentIndex + 1
    if self.m_currentIndex <= #self.m_actions then
        self.m_doAction = true
    else
        self:Complete()
    end
end

function Skill:Complete()
    self.m_doAction = false
    self.m_currentAction = nil
    if self.m_completeHandler ~= nil then
        self.m_completeHandler()
    end
end

function Skill:GetRange()
    return self.m_template.range
end

function Skill:DestroyActions()
    for _,v in ipairs(self.m_actions) do
        v:Destroy()
    end
    self.m_actions = {}
end

function Skill:Destroy()
    self.m_currentAction = nil
    self.m_owner = nil
    self.m_completeHandler = nil
    self:DestroyActions()
end

return Skill