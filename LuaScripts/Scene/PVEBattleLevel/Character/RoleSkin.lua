---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/4/25 16:47
---
local RoleSkin = BaseClass("RoleSkin")
local RolePart = require("Scene.PVEBattleLevel.Character.Part.RolePart")

local partRoot = "A_Hero_low/A_Hero_low_skin/To_unity"
local weaponRootR = "A_Hero_low/A_Hero_low_skin/To_unity/DeformationSystem/Root/guadian_R"
local weaponRootL = "A_Hero_low/A_Hero_low_skin/To_unity/DeformationSystem/Root/guadian_L"
local weaponRootRSimple = "A_Hero_low/A_Hero_low_skin/guadian_R"
local weaponRootLSimple = "A_Hero_low/A_Hero_low_skin/guadian_L"
local weaponRoot = "A_Hero_low/A_Hero_low_skin/To_unity/DeformationSystem/Root/guadian"

--对应aps_pve_part_zombie里的部件字段
local SkinPart = {
    Hat = "hat",
    Head = "head",
    Cloth = "cloth",
    Trousers = "pants",
    Shoe = "shoes",
    Weapon = "weapon",
}

function RoleSkin:__init(transform,partId,prefabPath,layer)
    -- 武器管理类
    self.m_transform = transform:Find(partRoot)
    self.m_weaponR = transform:Find(weaponRootR) or transform:Find(weaponRootRSimple)
    self.m_weaponL = transform:Find(weaponRootL) or transform:Find(weaponRootLSimple)
    self.m_layer = layer
    self.m_parts = {}
    self.prefabPath = prefabPath
    
    self:__initPart(partId)
end

function RoleSkin:__initPart(partId)
    if tonumber(partId) == 0 then
        return
    end
    
    local partTemplate = DataCenter.PveRolePartTemplateManager:GetTemplate(partId)

    if partTemplate == nil then
        Logger.LogError("RoleSkin Error: not found role part template, id = "..tostring(partId))
        return
    end
    self.m_partId = partId

    for _,partType in pairs(SkinPart) do
        local model = partTemplate[partType]
        if not string.IsNullOrEmpty(model) then
            self:AddPart(partType,model)
        end
    end
end

function RoleSkin:GetPart(partType)
    local currentPart = self.m_parts[partType]
    if currentPart == nil then
        currentPart = RolePart.New(partType,self.prefabPath,self.m_transform,self.m_layer)
        self.m_parts[partType] = currentPart
        if partType == SkinPart.Weapon then
            currentPart:SetParent(self.m_weaponR,self.m_weaponL)
        else
            currentPart:SetParent(self.m_transform)
        end
    end
    return  currentPart
end

function RoleSkin:AddPart(partType,modelName)
    local currentPart = self:GetPart(partType)

    local template = LocalController:instance():getLine(TableName.C_Equips,modelName)
    if template ~= nil then
        currentPart:SetEquip(template)
        currentPart:RefreshAsset()
    else
        currentPart:LoadEquip(modelName)
    end

    if partType == SkinPart.Weapon then
        self.weaponModelName = currentPart:GetModelName()
    end
end

function RoleSkin:SetPart(partId)
    self:__initPart(partId)
end

function RoleSkin:GetWeaponFireTransform()
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        return weapon:FindTransformByName("atkEffect")
    end
    return nil
end

function RoleSkin:GetWeaponAtkEffect()
    local atkEffect = nil
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        atkEffect = weapon:GetWeaponAtkEffect()
    end
    return atkEffect
end

function RoleSkin:GetWeaponTrackEffect()
    local atkEffect = nil
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        atkEffect = weapon:GetWeaponTrackEffect()
    end
    return atkEffect
end

function RoleSkin:GetWeaponArc()
    local weapon = self.m_parts[SkinPart.Weapon]
    if weapon ~= nil then
        return weapon:GetWeaponArc()
    end
    return 0
end

function RoleSkin:GetWeaponName()
    return self.weaponModelName
end

function RoleSkin:PlayWeaponAttackAnim()
    local part = self.m_parts[SkinPart.Weapon]
    if part ~= nil then
        part:PlayWeaponAttackAnim()
    end
end

function RoleSkin:StopWeaponAttackAnim()
    
end

function RoleSkin:GetWeaponSpecialData()
    local part = self.m_parts[SkinPart.Weapon]
    if part ~= nil then
        return part:GetWeaponSpecialData()
    end
    return nil
end

function RoleSkin:GetWeaponTransform_R()
    return self.m_weaponR
end

function RoleSkin:GetWeaponTransform_L()
    return self.m_weaponL
end

function RoleSkin:GetPartId()
    return self.m_partId
end

function RoleSkin:RemovePaths()
    if self.m_parts ~= nil then
        for _,part in pairs(self.m_parts) do
            part:Destroy()
        end
        self.m_parts = nil
    end
end

function RoleSkin:Destroy()
    self:RemovePaths()
    self.m_transform = nil
    self.weaponRootTransform = nil
    self.m_weaponR = nil
    self.m_weaponL = nil
end

return RoleSkin