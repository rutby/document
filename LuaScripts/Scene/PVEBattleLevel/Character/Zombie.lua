---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2022/9/22 15:16
---
local Resource = CS.GameEntry.Resource
local ZombieAI = require("Scene.PVEBattleLevel.Character.AI.ZombieAI")
local ZombieAttackCityAI = require("Scene.PVEBattleLevel.Character.AI.ZombieAttackCityAI")
local PreyAI = require("Scene.PVEBattleLevel.Character.AI.PreyAI")
local ZombieAttackObjectAI = require("Scene.PVEBattleLevel.Character.AI.ZombieAttackObjectAI")
local CharacterBase = require("Scene.PVEBattleLevel.Character.CharacterBase")
local Zombie = BaseClass("Zombie",CharacterBase)
local CharacterHP = require "Scene.PVEBattleLevel.Character.CharacterHP"
local MiniMapUtil = require "Scene.PVEBattleLevel.Utils.MiniMapUtil"
local ConstModelConfig = require "Scene.PVEBattleLevel.ConstModelConfig"
local SkillManager = require "Scene.PVEBattleLevel.Character.Skill.SkillManager"
local CharacterStateType = require("Scene.PVEBattleLevel.Character.State.CharacterStateType")
local CharacterAnimation = require("DataCenter.Survival.Character.CharacterAnimation")
local RoleSkin = require("Scene.PVEBattleLevel.Character.RoleSkin")
local Effect_Select = require("Scene.PVEBattleLevel.MapObject.MapObjectEffect_Select")
local type_SkinnedMeshRenderer = typeof(CS.UnityEngine.SkinnedMeshRenderer)
local type_ViewStatusListener = typeof(CS.ViewStatusListener)
local Const = require("Scene.PVEBattleLevel.Const")
local BeHitFlashVFX = require("Scene.PVEBattleLevel.VFX.BeHitFlashVFX")

Zombie.Anim =
{
    Stand = "Idle",
    Run = "Run",
    Walk = "Walk",
    Attack = "Attack",
    Dead = "Dead",
    BeHit = "BeHit"
}
--僵尸状态
local State = {
    Normal = "Normal",  --普通状态
    Patrol = "Patrol",  --巡逻状态
    GoBack = "GoBack",   --返回出生点状态
    Vigilance = "Vigilance" --警觉
}

local ZombieAIType = {
    ZombieAI = 0,
    PreyAI = 1,
    ZombieAttackCityAI = 2
}

local selectEffectPath = "Assets/_Art_LastDay/Effect/Prefab/Eff_renwujiaoxia_ring_red.prefab"

function Zombie:__init(battleLevel,zombieId,objId,isWave,info)
    CharacterBase.__init(self,battleLevel,objId,info)
    self.isZombie = true
    self.id = zombieId
    self.isWave = isWave
    self.animation = CharacterAnimation.New(self.info:GetAnimation())
    self:__initAI()
    self:__initSkill()
    self.state = State.Normal
    self.m_cullActive = nil
    self:CheckIsCull()
    self.m_pauseAI = self.m_IsCull
end

--[[
    通过配置来决定是否采用屏幕culling
]]
function Zombie:CheckIsCull()
    local _level = SceneManager.GetLevel()
    if _level == nil then return end
    if _level:GetLevelId() == LevelId.Main then
        self.m_IsCull = true
        return
    end
    self.m_IsCull = false
    local _template = DataCenter.PveZombieTemplateManager:GetTemplate(self.id)
    if (_template ~= nil and _template:IsCull()) then
        self.m_IsCull = true
    end
end

--[[
    为什么这个地方要做一个单独的state, 在筛选目标丧尸的时候,我们采用的是isDead的处理,而不再使用curHp的处理了,
    否则,上一个丧尸刚死亡,就会立刻筛选到其他的,我们暂时先让他停留一下,否则很容易处理连点攻击按钮后，丧尸死亡后,直接
    开始采集了
]]
function Zombie:SetDeadState()
    self.isDead = true
end

function Zombie:IsDead()
    return self.isDead == true
end

function Zombie:SetStateByCullState(visible)
    if self.m_IsCull ~= true then
        return
    end
    if (self.m_cullActive == visible) then
        return
    end
    self.m_cullActive = visible
    if (self.m_cullActive == true or not self:CanPause()) then
        self.m_pauseAI = false
    else
        self.m_pauseAI = true
    end
end

function Zombie:__initAI()
    if self.isWave then
        self.ai = ZombieAttackCityAI.New(self)
    else
        local aiType = self.info:GetAiType()
        if aiType == ZombieAIType.PreyAI then
            self.ai = PreyAI.New(self) 
        elseif aiType == ZombieAIType.ZombieAttackCityAI then
            self.ai = ZombieAttackObjectAI.New(self)
        else
            self.ai = ZombieAI.New(self)
        end
    end
end

function Zombie:CanPause()
    if (self.info:GetAiType() ~= 1) then
        return self.ai:CanPause()
    end
    return true
end

function Zombie:IsMonsterLockedPlayer()
    if (self.info:GetAiType() ~= 1) then
        return self.ai:IsLockedPlayer()
    end
    return false
end

function Zombie:__initSkill()
    self.skillManager = SkillManager.New(self)
end

function Zombie:__assetCreateComplete()
    CharacterBase.__assetCreateComplete(self)
    
    if self.spawnPos ~= nil then
        self:SetPosition(self.spawnPos)
    end

    if self.spawnRotation ~= nil then
        self:SetRotation(self.spawnRotation)
    end

    local renderer = self:GetTransform():GetComponentInChildren(type_SkinnedMeshRenderer)
    
    -- 默认静止
    self:InitTriggerListener()
    self:CreateMiniMapIcon()
    self.ai:Start()
    self:Idle()
    self:InitTopBar()
    self:InitViewStatusHandler(renderer)
    self.m_beHitEffectContainer = self.m_transform:Find("beHitEffect")
    self.m_beHitEffectPosition = Vector3.New()
    self:InitPart()
    self.m_gameObject.name = tostring(self:GetTriggerId())
    self:EnableCollider(true) --开启碰撞盒
end

function Zombie:InitPart()
    local partId = self.info:GetPartId()
    if partId ~= 0 then
        self.m_skin = RoleSkin.New(self.m_transform,partId,LoadPath.ZombiePartPrefabPath,self.m_gameObject.layer)--目前换装怪是用主角资源，未来用自己资源的时候这里路径需要改一下
    end
end

function Zombie:InitViewStatusHandler(skin)
    if (skin == nil) then return end
    self.m_activeListener = skin.gameObject:GetOrAddComponent(type_ViewStatusListener)
    if (self.m_activeListener ~= nil) then
        self:SetStateByCullState(false)
        self.m_activeListener:SetCallback(BindCallback(self, self.OnVisibleCallback))
    else
        self:SetStateByCullState(true)
    end
end


function Zombie:OnVisibleCallback(visible)
    self:SetStateByCullState(visible)
end

function Zombie:InitTopBar()
    local topBar = self.m_transform:Find("TopBar")
    if not IsNull(topBar) then
        self.topBarTransform = topBar
        self.topBarTransform.gameObject:SetActive(true)
        
        local warningIcon = topBar:Find("warningIcon")
        if not IsNull(warningIcon) then
            self.warningIcon = warningIcon.gameObject
            self.warningIcon:SetActive(false)
            self.isWarningIconShow = false
        end
        local dangerIcon = topBar:Find("dangerIcon")
        if not IsNull(dangerIcon) then
            self.dangerIcon = dangerIcon.gameObject
            self.dangerIcon:SetActive(false)
            self.isDangerIconShow = false
        end

        self.HP:AddHpBar(topBar,false)
    end
end

function Zombie:InitTriggerListener()
    --人物本身加个碰撞监听
    self.triggerHandler = self.m_transform.gameObject:GetComponent(typeof(CS.CitySpaceManTrigger))
    if self.triggerHandler ~= nil then
        self:SetStateByCullState(false)
        self.triggerHandler.CullingStateVisible = function(uid, visible) self:CullingStateVisible(uid, visible) end
        --self.triggerHandler:AddCullObj()
    else
        self:SetStateByCullState(true)
    end
end

function Zombie:RemoveTriggerListener()
    if (self.triggerHandler ~= nil) then
        self.triggerHandler.CullingStateVisible = nil
        --self.triggerHandler:RemoveCullObj()
    end
end

function Zombie:CullingStateVisible(visible)
    self:SetStateByCullState(visible)
end

function Zombie:CreateMiniMapIcon()
    local prefabName = self:GetPrefabName()
    local iconPath = ConstModelConfig.GetMiniMapIconName(prefabName)
    if string.IsNullOrEmpty(iconPath) then iconPath = 'Icon_small_12' end

    local param = {
        parentNode = self.m_transform,
        iconName = iconPath,
        orderInLayer = MiniMapUtil.DefaultOrder.Zombie,
        yRotation = 40,
        scale = Vector3.New(2.6,2.6,1)
    }
    self.miniMapIconRequest = MiniMapUtil.CreateMiniIcon(param)
end

function Zombie:DestroyMiniMapIcon()
    if self.miniMapIconRequest ~= nil then
        self.miniMapIconRequest:Destroy()
        self.miniMapIconRequest = nil
    end
end

function Zombie:InitForLevelKind(pos)
    self.spawnPos = pos
end

function Zombie:InitSpawnRotation(rotation)
    self.spawnRotation = rotation
end
--客户端刷出来的僵尸，不与服务器通信
function Zombie:SetNotServer(value)
    self.isNotServer = value
end

--设置尸潮的目的地路径
function Zombie:SetPath(path)
    self.path = path
end

function Zombie:SetTriggerId( triggerId )
    CharacterBase.SetTriggerId(self, triggerId)
    self.HP = CharacterHP.New(self)
end

function Zombie:GetTriggerId()
    return self.m_triggerId or 0
end

function Zombie:OnUpdate(deltaTime)
    --隐藏状态不更新Update
    if self:GetConfigTriggerState() == Const.ConfigTriggerState.Hide then
        return
    end

    self:TopFaceToCamera()
    
    if (self.m_pauseAI == true) then
        return
    end

    if self.m_isPause then
        return
    end
   
	ProfilerUtil.BeginSample("[Lua]Zombie:OnUpdate")
	 
    CharacterBase.OnUpdate(self,deltaTime)
    self.ai:OnUpdate(deltaTime)
    self.skillManager:OnUpdate(deltaTime)
    --self:UpdateSelectEffectPos() --光圈放到怪物身上，所以不用更新坐标了，如果有问题可以还原回以前逻辑

    if self.m_beHitFlashVfx ~= nil then
        self.m_beHitFlashVfx:OnUpdate(deltaTime)
    end
    
	ProfilerUtil.EndSample()
end

function Zombie:OnStateComplete(type,data)
    CharacterBase.OnStateComplete(self,type,data)
    
    self.ai:OnStateComplete(type,data)
end

function Zombie:TopFaceToCamera()
    --if not IsNull(self.hpBar) and self.hpBar:IsActive() then
    --    local cameraRotation = self.battleLevel:GetCamera():GetCameraRotation()
    --    -- 只有当血条显示并且不正对Camera时，才进行调整
    --    if self.hpBar.transform.rotation ~= cameraRotation then
    --        self.hpBar.transform.rotation = cameraRotation
    --    end
    --end
	ProfilerUtil.BeginSample("[Lua]Zombie:TopFaceToCamera")	
    
    if not IsNull(self.topBarTransform) and self:NeedRefreshTopBarRotation() then
        self.topBarTransform.rotation = self.battleLevel:GetCamera():GetCameraRotation()
    end
	
	ProfilerUtil.EndSample()
end

function Zombie:BeAttack(hurt,data)
    CharacterBase.BeAttack(self,hurt,data)
    
    self.ai:BeAttack()

    if data ~= nil and data.weaponData ~= nil then
        self:BeHit(data)
    end

    self:UpdateMaterialBlood()
    self:BeHitFlash()
end

function Zombie:GetMaterials()
    if self.materials == nil then
        self.materials = {}
        local renderers = self:GetTransform():GetComponentsInChildren(type_SkinnedMeshRenderer)
        local materials
        for i = 0, renderers.Length - 1 do
            materials = renderers[i].materials
            for j = 0, materials.Length - 1 do
                table.insert(self.materials,materials[j])
            end
        end
    end
    return self.materials
end

function Zombie:UpdateMaterialBlood()
    local materials = self:GetMaterials()
    if table.IsEmpty(materials) then
        return
    end

    local prefabName = self:GetPrefabName()
    if prefabName ~= "Zombie01" and prefabName ~= "Zombie_xjhd_03" then return end
    
    local curBlood = self.info:GetCurBlood()
    local maxBlood = self.info:GetMaxBlood()
    local val = (maxBlood - curBlood) / maxBlood
    for _, material in ipairs(materials) do
        material:SetFloat("_BloodSlider",val)
    end
end
function Zombie:BeHitFlash()
    if self.m_beHitFlashVfx == nil then
        local materials = self:GetMaterials()
        if table.IsEmpty(materials) then
            return
        end

        self.m_beHitFlashVfx = BeHitFlashVFX.New(materials)
    end
    self.m_beHitFlashVfx:Play()
end

function Zombie:PlayBeAttackVFX(attackAnimName)
    local vfx = DataCenter.PveActVFXTemplateManager:GetTemplate(attackAnimName)
    if vfx ~= nil then
        if not string.IsNullOrEmpty(vfx.behit_eff) then
            if not IsNull(self.m_beHitEffectContainer) then
                local x, y, z = self.m_beHitEffectContainer:Get_position()
                self.m_beHitEffectPosition:Set(x,y,z)
            else
                self.m_beHitEffectPosition:Set(self.m_position.x,self.m_position.y,self.m_position.z)
            end
            local effect = self.battleLevel:CreateVFX(vfx.behit_eff,self.m_beHitEffectPosition,self:GetRotation())
            local x,y,z = self.m_transform:Get_localScale()
            effect:SetScale(x,y,z)
        end

        if not string.IsNullOrEmpty(vfx.death_act) then
            self.deadAnimName = vfx.death_act
        end
    end
end

function Zombie:AttackEnemy(enemy,attackNum)
    if enemy == nil or enemy:GetCurBlood() <= 0 then
        return
    end
    if attackNum == nil then
        attackNum = self:GetAttack()
    end
    enemy:BeAttack(attackNum)
end

function Zombie:Skill(skillId,target)
    self:SetState(CharacterStateType.Skill,{skillId = skillId,target = target})
end

function Zombie:BeHit(data)
    if not self:IsDie() and (self:GetConfigType() ~= Const.ZombieConfigType.Boss) then
        self:SetState(CharacterStateType.BeHit,data)
    end
end

function Zombie:RemoveEffectAfterDead()
    self:LostFocus()
--[[    if (self.hpBar ~= nil) then
        self.hpBar:SetActive(false)
    end]]
end

function Zombie:SetPosition(pos)
    CharacterBase.SetPosition(self, pos)
    --self:UpdateSelectEffectPos() --光圈放到怪物身上，所以不用更新坐标了，如果有问题可以还原回以前逻辑
end

function Zombie:Focus()
    local color = self:GetSelectEffectColor()
    if self.m_selectEffect ~= nil then
        self.m_selectEffect:ShowColor(color)
    else
        self.m_selectEffect = Effect_Select.New(color)
        self.m_selectEffect:SetParent(self.m_transform)
        self.m_selectEffect:SetLocalPosition(0, 0.06, 0)
    end
end

function Zombie:UpdateSelectEffectPos()
    if (self.m_selectEffectTrans ~= nil) then
        local x, y, z = self:GetTransform():Get_position()
        self.m_selectEffectTrans:Set_position(x, y, z)
    end
end

function Zombie:GetSelectEffectColor()
    if self.info:GetAiType() == ZombieAIType.PreyAI then
        return PveObjectSelectEffectColor.Yellow
    end
    return PveObjectSelectEffectColor.Red
end

function Zombie:LostFocus()
    self:DestroySelectEffect()
end
--巡逻
function Zombie:Patrol(value)
    if value then
        self:ChangeState(State.Patrol)
    else
        self:ChangeState(State.Normal)
    end
end

function Zombie:GoBack(value)
    if value then
        self:ChangeState(State.GoBack)
    else
        self:ChangeState(State.Normal)
    end
end

function Zombie:Vigilance(value)
    if value then
        self:ChangeState(State.Vigilance)
    else
        self:ChangeState(State.Normal)
    end
end

function Zombie:ChangeState(state)
    self.m_state = state
    self.m_stateManager:ChangeCharacterState()
end

function Zombie:IsPatrol()
    return self.m_state == State.Patrol
end

function Zombie:IsGoBack()
    return self.m_state == State.GoBack
end

function Zombie:IsVigilance()
    return self.m_state == State.Vigilance
end

function Zombie:GetMoveSpeed()
    if self:IsPatrol() or self:IsVigilance() then
        return self.info:GetWalkSpeed()
    elseif self:IsGoBack() then
        return self.info:GetGoBackSpeed()
    end
    return self.info:GetMoveSpeed()
end

function Zombie:GetChaseRadius()
    return self.info:GetChaseRadius()
end

function Zombie:GetBackChaseRadius()
    return self.info:GetBackChaseRadius()
end

function Zombie:GetAngle()
    return self.info:GetAngle()
end

function Zombie:GetSkillOrder()
    return self.info:GetSkillOrder()
end

function Zombie:GetHpStage()
    return self.info:GetHpStage()
end

function Zombie:GetPatrolRadius()
    return self.info:GetPatrolRadius()
end

function Zombie:GetPatrolIntervalTime()
    return self.info:GetPatrolIntervalTime()
end

--攻击失败距离
function Zombie:GetAttackDropDistance()
    return self.info:GetAttackDropDistance()
end
--距离出生点逃脱距离
function Zombie:GetMoveRange()
    return self.info:GetMoveRange()
end
--距离玩家的逃脱距离
function Zombie:GetDisengageDistance()
    return self.info:GetDisengageDistance()
end
--死亡特效ID
function Zombie:GetDeadVFX()
    return self.info:GetDeadVFX()
end

function Zombie:GetAttackAnimName()
    return self:GetAnimName(AnimationType.Attack,Zombie.Anim.Attack)
end

function Zombie:GetMoveAnimName()
    if self:IsPatrol() or self:IsVigilance() then
        return Zombie.Anim.Walk
    end 
    return self:GetAnimName(AnimationType.Move,Zombie.Anim.Run)
end

function Zombie:GetDeadAnimName()
    if not string.IsNullOrEmpty(self.deadAnimName) and self:HasAnim(self.deadAnimName) then
        return self.deadAnimName
    end
    return self:GetAnimName(AnimationType.Dead,Zombie.Anim.Dead)
end

function Zombie:GetBeHitAnimName()
    return Zombie.Anim.BeHit
end

function Zombie:GetDefaultAnimName()
    return self:GetAnimName(AnimationType.Idle,Zombie.Anim.Stand)
end

function Zombie:GetAnimatorPath()
    return "Model"
end

function Zombie:PrefabPath()
    return string.format("Assets/Main/Prefabs/PVELevel/%s.prefab", self:GetPrefabName())
end

function Zombie:GetPrefabName()
    local modelName = GetTableData( TableName.PVETrigger, self:GetTriggerId(), "ModelName")
    if string.IsNullOrEmpty(modelName) then
        if string.IsNullOrEmpty(self.info:GetModelName()) then
            modelName = "Zombie_xjhd_03"
        else
            modelName = self.info:GetModelName()
        end
    end
    return modelName
end

function Zombie:GetConfigType()
    if self.info ~= nil then
        return self.info:GetConfigType()
    end
    return ""
end

function Zombie:GetType()
    return CharacterType.Zombie
end
--是否为尸潮的僵尸
function Zombie:IsWave()
    return self.isWave
end

function Zombie:IsNotServer()
    return self.isNotServer
end

function Zombie:GetZombieId()
    return self.id
end

function Zombie:GetAnimName(animType,defaultName)
    local animName = nil
    if self.animation ~= nil then
        animName = self.animation:GetRandomAnimName(animType)
    end
    if string.IsNullOrEmpty(animName) then
        animName = defaultName
    end
    return animName
end

function Zombie:SetPathString(pathStr)
    self.path = {}
    local pathArr = string.split(pathStr,";")
    local posArr
    local pos
    for i = 1, #pathArr do
        posArr = string.split(pathArr[i],"|")
        pos = {}
        pos.x = tonumber(posArr[1])
        pos.y = 0
        pos.z = tonumber(posArr[2])
        
        table.insert(self.path,pos)
    end
end

function Zombie:GetPathString()
    local pathStr = ""
    if self.path ~= nil then
        local index = self.ai.currentPathIndex ~= nil and self.ai.currentPathIndex - 1 or 1
        local pos
        local length = #self.path
        for i = index, length do
            pos = self.path[i]
            pathStr = pathStr .. pos.x .. "|" .. pos.z
            if i < length then
                pathStr = pathStr .. ";"
            end
        end
    end
    return pathStr
end
--为了僵尸死亡后的资源复用，虽然正常流程资源会进池子，但是会先隐藏再显示，会闪一下，为了解决闪的问题
function Zombie:GetAndClearAsset()
    local req = self.m_req
    local skin = self.m_skin
    self.m_req = nil
    self.m_skin = nil
    return req,skin
end

function Zombie:ShowWarningIcon()
    if not IsNull(self.dangerIcon) then
        self.dangerIcon:SetActive(false)
        self.isDangerIconShow = false
    end
    if not IsNull(self.warningIcon) then
        self.warningIcon:SetActive(true)
        self.isWarningIconShow = true
        TimerManager:GetInstance():DelayInvoke(
                function()
                    if not IsNull(self.warningIcon) then
                        self.warningIcon:SetActive(false)
                        self.isWarningIconShow = false
                    end
                end
        ,1.5)
    end
end

function Zombie:ShowDangerIcon()
    if not IsNull(self.warningIcon) then
        self.warningIcon:SetActive(false)
        self.isWarningIconShow = false
    end
    if not IsNull(self.dangerIcon) then
        self.dangerIcon:SetActive(true)
        self.isDangerIconShow = true
        TimerManager:GetInstance():DelayInvoke(
                function()
                    if not IsNull(self.dangerIcon) then
                        self.dangerIcon:SetActive(false)
                        self.isDangerIconShow = false
                    end
                end
        ,1.5)
    end
end

function Zombie:DestroyWarningDangerIcon()
    if not IsNull(self.warningIcon) then
        self.warningIcon:SetActive(false)
        self.isWarningIconShow = false
    end
    if not IsNull(self.dangerIcon) then
        self.dangerIcon:SetActive(false)
        self.isDangerIconShow = false
    end
    self.warningIcon = nil
    self.dangerIcon = nil
end

function Zombie:NeedRefreshTopBarRotation()
    return self.isWarningIconShow == true or self.isDangerIconShow == true or self.HP:HpBarIsActive()
end

function Zombie:DestroySelectEffect()
    if self.m_selectEffect ~= nil then
        self.m_selectEffect:Destroy()
        self.m_selectEffect = nil
    end
    self.m_selectEffectTrans = nil
end

function Zombie:Destroy()
    if (self.m_activeListener ~= nil) then
        self.m_activeListener:SetCallback(nil)
        self.m_activeListener = nil
    end
    self.m_beHitEffectContainer = nil
    self.topBarTransform = nil
    self:RemoveTriggerListener()
    self:DestroyWarningDangerIcon()
    self.animation = nil
    self:DestroyMiniMapIcon()
    self:RemoveEffectAfterDead()
    self.ai:Destroy()
    self.skillManager:Destroy()
    self.materials = nil
    if self.m_skin ~= nil then
        self.m_skin:Destroy()
    end
    self:DestroySelectEffect()
    if self.HP then
        self.HP:Destroy()
        self.HP = nil
    end
    if self.m_beHitFlashVfx then
        self.m_beHitFlashVfx:Destroy()
        self.m_beHitFlashVfx = nil
    end
    CharacterBase.Destroy(self)
end

return Zombie