---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cola.
--- DateTime: 2022/11/2 下午7:02
---

local CharacterHP = BaseClass("CharacterHP")
local PveHeroHpBar = require("Scene.PVEBattleLevel.UI.PveHeroHpBar")
local SU_Util = require("Scene.PVEBattleLevel.Utils.SU_Util")

function CharacterHP:__init(player)
    self.player = player
    self.showBuff = false
    --
    ----因为某些关卡设置了维持最低血量不死，所以获取一下最低血量配置
    --local level= SceneManager.GetLevel()
	--if level then
    --	local levelId = level:GetLevelId()
    --	self.lastHealth = tonumber(SU_Util.GetItemConfig(levelId, "last_health"))
	--end
end

function CharacterHP:Destroy()
    self.player = nil
    self.showBuff = nil
    self.lastHealth = nil
    self:DestroyHpBar()
end

function CharacterHP:SetMaxBlood(value)
    self.player.info:SetMaxBlood(math.max(0, value))
end

function CharacterHP:GetMaxBlood()
    return self.player.info:GetMaxBlood()
end

function CharacterHP:AddCurBlood(value, notSendInfo)
    local curBlood = self:GetCurBlood()
    local maxBlood = self:GetMaxBlood()
    local tempCurBlood = curBlood
    curBlood = math.max(curBlood + value , 0)
    if self.player.isPlayer and tempCurBlood > curBlood then
        DataCenter.GuideManager:CheckLMPlayerBloodGuide(curBlood)
    end

    if self.lastHealth ~= nil  then  --因为某些关卡设置了主角维持最低血量不死，这里做一下判断看看有没有最低血量限制
        if curBlood <= self.lastHealth and self.player.isPlayer then
            curBlood = self.lastHealth
        end
    end

    local hpBuff = self.player.info:GetHpBuff()
    local hp_temp = 0
    if hpBuff ~= nil then
        for i = 1, table.count(hpBuff) do
            hp_temp = hp_temp + hpBuff[i]
        end
    end
    if self.player.isPlayer then
        UIUtil.ShowSUMainPromptHP(value)
    else
        local color = self.player:GetType() == CharacterType.Hero and SurvivalTipsColor.ReduceHP_Red or SurvivalTipsColor.ReduceHP_Zombie_Orange
        UIUtil.ShowSUMainPromptZombieHP(Mathf.Abs(value), self.player,color)
    end
    self.player.info:SetCurBlood(math.min(curBlood, maxBlood))
    
    EventManager:GetInstance():Broadcast(EventId.SU_CharacterBeAttack, self.player)

    if self.player.isPlayer and (notSendInfo == nil or notSendInfo == false) then
        self:SendInfo()
    end

    if curBlood <= 0 then
        self.player:Die()
        self.player.info:ClearHpBuff()
        if self.player.isPlayer then
            SFSNetwork.SendMessage(MsgDefines.SU_SurvivalPlayerDead)
        end
    end
    
    self:UpdateHpBarVal(curBlood,maxBlood)

    if self.player.isPlayer then
        local isOnce = value < 0
        UIUtil.CheckShowDeadlyEffect(false, 1, isOnce)
    end
end

function CharacterHP:GetCurBlood()
    return self.player.info:GetCurBlood()
end

function CharacterHP:IsDead()
    return self:GetCurBlood() <= 0
end

function CharacterHP:SendInfo()
    local param = {}
    param["playerInfo"] = 1
    param["hp"] = self:GetCurBlood()
    SFSNetwork.SendMessage(MsgDefines.SU_PvePlayerInfoUpdate, param)
end

function CharacterHP:AddBuff(buff)
    self.player.info:AddHpBuff(buff)
end

function CharacterHP:OnUpdate(deltaTime)
    if (self.player == nil or self.player.m_isPause == true) then
        return
    end
    local hpBuff = self.player.info:GetHpBuff()
    if hpBuff ~= nil then
        local hpBuffShow = self.player.info:GetHpBuffShow()
        if hpBuffShow == false then
            self.player.info:RefrsshHpBuffCheckTime(0)
            self.player.info:SetHpBuffShow(true)
            self:DoBuff(hpBuff)
        else
            if self.player.info:RefrsshHpBuffCheckTime(deltaTime) >= 1 then
                self.player.info:RefrsshHpBuffCheckTime(0)
                self:DoBuff(hpBuff)
            end
        end
    end
    --if self.m_hpBar ~= nil then
    --    self.m_hpBar:OnUpdate(deltaTime)
    --end
end

function CharacterHP:DoBuff(hpBuff)
    local count = table.count(hpBuff)
    EventManager:GetInstance():Broadcast(EventId.SU_RecoveryBuff, count - 1)
    if count > 0 then
        local add = hpBuff[1]
        table.remove(hpBuff, 1)
        self:AddCurBlood(add)
    else
        self.player.info:SetHpBuffShow(false)
    end
end
-------------血条逻辑-----------------------
function CharacterHP:AddHpBar(hpBarParent,isFriendly,isBoss)
    if IsNull(hpBarParent) then
        return
    end
    self.m_hpBar = PveHeroHpBar.New(hpBarParent,self:GetCurBlood(),self:GetMaxBlood(),false,isFriendly,isBoss)
end

function CharacterHP:UpdateHpBarVal(curVal,maxVal)
    if self.m_hpBar ~= nil then
        self.m_hpBar:SetVal(curVal,maxVal,false)
        --if not DataCenter.BattleLevel:IsHeroAutoLevel() then
        --self:StartHpBarTimer()
        --end
    end
end

--function CharacterHP:StartHpBarTimer()
--    --if self.m_hpBarTimer ~= nil then
--    --    self.m_hpBarTimer:Reset()
--    --else
--        self.m_hpBar:SetActive(true)
--        --self.m_hpBarTimer = TimerManager:GetInstance():GetTimer(5,function()
--        --    self:HideHpBar()
--        --end)
--        --self.m_hpBarTimer:Start()
--    --end
--end

--function CharacterHP:ClearHpBarTimer()
--    if self.m_hpBarTimer ~= nil then
--        self.m_hpBarTimer:Stop()
--        self.m_hpBarTimer = nil
--    end
--end

function CharacterHP:HpBarIsActive()
    if self.m_hpBar ~= nil then
        return self.m_hpBar:IsActive()
    end
    return false
end

function CharacterHP:HideHpBar()
    if self.m_hpBar ~= nil then
        self.m_hpBar:SetActive(false)
    end
    --self:ClearHpBarTimer()
end

function CharacterHP:DestroyHpBar()
    --self:HideHpBar()
    if self.m_hpBar ~= nil then
        self.m_hpBar:Delete()
        self.m_hpBar = nil
    end
end

--------------------------------------------------------

return CharacterHP