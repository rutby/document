---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ycheng.
--- DateTime: 2022/11/30 16:41
---
local CharacterBase = require("Scene.PVEBattleLevel.Character.CharacterBase")
local Npc = BaseClass("Npc",CharacterBase)
local NpcMovePathAI = require("Scene.PVEBattleLevel.Character.AI.NpcMovePathAI")
local NpcFollowerAI = require("Scene.PVEBattleLevel.Character.AI.NpcFollowerAI")
local NpcCityAI = require("Scene.PVEBattleLevel.Character.AI.NpcCityAI")
local NpcBuildAI = require("Scene.PVEBattleLevel.Character.AI.NpcBuildAI")
local NpcStationWorkerAI = require("Scene.PVEBattleLevel.Character.AI.NpcStationWorkerAI")

local NpcRunToPointListAI = require("Scene.PVEBattleLevel.Character.AI.NpcRunToPointListAI")
local NpcDefendAI = require("Scene.PVEBattleLevel.Character.AI.NpcDefendAI")
local Effect_Select = require("Scene.PVEBattleLevel.MapObject.MapObjectEffect_Select")
local Const = require "Scene.PVEBattleLevel.Const"
local NpcTaskIcon = require "Scene.PVEBattleLevel.Character.NpcTaskIcon"
local MiniMapUtil = require "Scene.PVEBattleLevel.Utils.MiniMapUtil"
local RoleSkin = require("Scene.PVEBattleLevel.Character.RoleSkin")
local MistressDailyRewardBubble = require("Scene.PVEBattleLevel.Character.MistressDailyRewardBubble")
local CharacterAnimation = require("DataCenter.Survival.Character.CharacterAnimation")

local Anim =
{
    Idle = "Idle",
    Walk = 'Walk',
    Run = "Run",
    Attack = "Attack",
    Build = "Build"
}

function Npc:__init(battleLevel,npcId,info)
    CharacterBase.__init(self,battleLevel,npcId,info)
    self.id = npcId
	self.UpdateTaskIconHandler = BindCallback(self, self.UpdateTaskIcon)
    self.RefreshMistressEffectHandler = BindCallback(self, self.RefreshMistressEffect)
    self.ViewChangHandler = BindCallback(self, self.OnViewChang)
    self.UpdateGiftHandler = BindCallback(self, self.CheckAndShowGiftBubble)
end

function Npc:__assetCreateComplete()
    CharacterBase.__assetCreateComplete(self)

    if self.spawnPos ~= nil then
        self:SetPosition(self.spawnPos)
    end

    if self.rotation ~= nil then
        self:SetRotation(self.rotation)
    end

    if self:GetTriggerId() ~= 0 then
        self.m_gameObject.name = "npc" .. tostring(self:GetTriggerId())
    else
        self.m_gameObject.name = "npc" .. tostring(self.id)
    end

    EventManager:GetInstance():AddListener(EventId.SU_UpdateNpcTaskIcon,self.UpdateTaskIconHandler)
    EventManager:GetInstance():AddListener(EventId.SU_RefreshMistressEffect,self.RefreshMistressEffectHandler)
    EventManager:GetInstance():AddListener(EventId.SU_ChangeViewHeight, self.ViewChangHandler)
    EventManager:GetInstance():AddListener(EventId.UpdateGiftPackData, self.UpdateGiftHandler)


    self:CreateMiniMapIcon()
    
    self:UpdateTaskIcon()
    self:RefreshMistressEffect()

    self:InitPart()
    self:InitAnimation()

    self:Idle()
    if self.m_aiType == Const.NPCAiType.CityNpc or self.m_aiType == Const.NPCAiType.StationWorker then
        self:StartAI()
    end
    
    -- 如果是酒吧美女,则进行预加载
    if self:IsPubLady() then
        local highModel = GetTableData(TableName.MistressBase, self.info:GetMistressId(), "high_resource")
        local _modelPath = "Assets/Main/Prefabs/Girls/" .. highModel .. ".prefab"
        local _req = CommonUtil.LoadResAsync(_modelPath,function(req)
            if req ~= nil then
                --self.m_req.gameObject.name = "UINpcGirl"
                req:Destroy()
            end
        end)
        _req:SetAlwaysHold(true)
        --resList[#resList+1] = _modelPath
        --DataCenter.PreloadModelManager:Preload(resList)
        self:ShowPubLadyBubble()
    end

    if self.info:GetType() ~= nil and self.info:GetType() == 8 then --气泡NPC类型 = 8
        self:CheckAndShowGiftBubble()-- 检查并显示解锁美女队列气泡
    end
end

function Npc:ShowPubLadyBubble()
    do
        return
    end
    if self:IsPubLady() and self.loadDone == true then
        if self:GetConfigTriggerState() == Const.ConfigTriggerState.Normal then
            -- 头上挂气泡
            local param = {}
            param.character = self
            UIManager:GetInstance():OpenWindow(UIWindowNames.UINpcGirlStateIcon,{ anim = true, UIMainAnim = UIMainAnimType.AllHide }, param)
        end
    end
end

function Npc:InitPart()
    local partId = self.info:GetPartId()
    if partId ~= 0 then
        self.m_skin = RoleSkin.New(self.m_transform,partId,LoadPath.NvlieshouPrefabPath,self.m_gameObject.layer)--目前换装怪是用主角资源，未来用自己资源的时候这里路径需要改一下
    end
end

function Npc:InitAnimation()
    local animationId = self.info:GetAnimation()
    if animationId ~= 0 then
        self.m_animation = CharacterAnimation.New(self.info:GetAnimation())
    end
end

function Npc:CreateMiniMapIcon()
    local param = {
        parentNode = self.m_transform,
        iconName = 'Icon_small_28',
        yRotation = 40,
        orderInLayer = MiniMapUtil.DefaultOrder.Npc, --主角层级最高
        scale = Vector3.New(2.6, 2.6, 1),
    }
    self.miniMapIconRequest = MiniMapUtil.CreateMiniIcon(param)
end

function Npc:DestroyMiniMapIcon()
    if self.miniMapIconRequest ~= nil then
        self.miniMapIconRequest:Destroy()
        self.miniMapIconRequest = nil
    end
end

function Npc:InitForLevelKind(pos)
    self.spawnPos = pos
end

function Npc:InitSpawnRotation(rotation)
    self.rotation = rotation
end

function Npc:OnUpdate(deltaTime)
   ProfilerUtil.BeginSample("[Lua]Npc:OnUpdate")
    if self.mistressEffectBubble ~= nil then
        self.mistressEffectBubble:OnUpdate()
    end
    if self.m_taskIcon ~= nil then
        self.m_taskIcon:OnUpdate(self.m_objId)
    end
    self:TopFaceToCamera()

    local show
    if self.m_triggerId ~= nil then
        show = DataCenter.GuideManager:GetSaveGuideValue(tostring(self.m_triggerId))
    else
        show = DataCenter.GuideManager:GetSaveGuideValue(tostring(self.m_objId))
    end
    if show then
        if show == "0" then
            if CharacterBase.GetVisible(self) then
                self:SetVisible(false)
            end
            return
        elseif show == "1" then
            if CharacterBase.GetVisible(self) == false then
                self:SetVisible(true)
            end
        end
    end
    
    if self.m_isPause then
		ProfilerUtil.EndSample()
        return
    end
    
    CharacterBase.OnUpdate(self,deltaTime)
    if self.ai ~= nil then
        self.ai:OnUpdate(deltaTime)
    end

   ProfilerUtil.EndSample()
end

function Npc:RecoverFromServerCache(triggerId)
    local _triggerInfo = DataCenter.SV_MapItemInfoManager:GetItemInfoList():GetFinishTriggerById(triggerId)
    if (_triggerInfo == nil) then
        return
    end
    -- 恢复clientStatus, pos
    self:SetConfigTriggerState(_triggerInfo["clientState"])
    local _triggerPos = _triggerInfo["triggerPos"]
    if (string.IsNullOrEmpty(_triggerPos)) then
        return
    end

    local _tabInfo = string.string2array_s(_triggerPos, ';')
    local _strPos = ""
    local _strRotation = ""
    if (table.count(_tabInfo) == 1) then
        _strPos = _tabInfo[1]
    end
    if (table.count(_tabInfo) == 2) then
        _strPos = _tabInfo[1]
        _strRotation = _tabInfo[2]
    end
    if (not string.IsNullOrEmpty(_strPos)) then
        local _tabPos = string.string2array_f(_strPos, '|')
        if (table.count(_tabPos) == 2) then
            self.spawnPos = Vector3.New(_tabPos[1], 0, _tabPos[2])
        elseif table.count(_tabPos) == 3 then
            self.spawnPos = Vector3.New(_tabPos[1], _tabPos[2], _tabPos[3])
        end
    end
    if (not string.IsNullOrEmpty(_strRotation)) then
        local _tabRotation = string.string2array_f(_strRotation, '|')
        if (table.count(_tabRotation) == 3) then
            self.rotation = Quaternion.Euler(_tabRotation[1], _tabRotation[2], _tabRotation[3])
        end
    end
end

function Npc:SetAI(aiType,params,callback)
    self:ClearAI()
    self.m_aiType = aiType
    if aiType == Const.NPCAiType.FollowNpc then
        self.ai = NpcMovePathAI.New(self,function(data) self:OnAiComplete(data) end)
    elseif aiType == Const.NPCAiType.NpcFollowPlayer then
        self.ai = NpcFollowerAI.New(self,function(data) self:OnAiComplete(data) end)
    elseif aiType == Const.NPCAiType.CityNpc then
        self.ai = NpcCityAI.New(self,nil)
    elseif aiType == Const.NPCAiType.MoveToBuild then
        self.ai = NpcBuildAI.New(self)
    elseif aiType == Const.NPCAiType.RunToPointList then
        self.ai = NpcRunToPointListAI.New(self, function(data) self:OnAiComplete(data) end)
    elseif aiType == Const.NPCAiType.StationWorker then
        self.ai = NpcStationWorkerAI.New(self)
    elseif aiType == Const.NPCAiType.NpcDefendFight then
        self.ai = NpcDefendAI.New(self)
    end
    if self.ai ~= nil then
        self.ai:SetData(params,callback)
    end
end

function Npc:GetAI()
    return self.ai
end

function Npc:StartAI()
    if self.ai ~= nil then
        self.ai:Start()
    end
end

function Npc:StopAI()
    if self.ai ~= nil then
        self.ai:Stop()
    end
end

function Npc:OnAiComplete(data)
    self:ClearAI()
end

function Npc:AttackEnemy(enemy)
    if enemy == nil or enemy:IsDie() then
        return
    end
    local attackNum = self:GetAttack()
    enemy:BeAttack(attackNum)
end

function Npc:SearchEnemyTarget()
    return self.battleLevel.RoleMgr:SearchEnemyTarget(self:GetPosition(),self:GetAttackRange(),self:GetType())
end

function Npc:Focus()
    --local buildDesTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(self.m_objInfo.itemId)
    --self.m_effectUtil:ShowGroudCircleEffect(buildDesTemplate["tiles"])
    local color = PveObjectSelectEffectColor.Blue
    if self:IsHeroLady() or self:IsPubLady() then
        color = PveObjectSelectEffectColor.Green
    end
    if self.m_selectEffect ~= nil then
        self.m_selectEffect:ShowColor(color)
    else
        self.m_selectEffect = Effect_Select.New(color)
        self.m_selectEffect:SetParent(self.m_transform)
        self.m_selectEffect:SetLocalPosition(0, 0.02, 0)
        local scale_x = self.m_transform:Get_localScale()
        local scale = 0.6/scale_x
        self.m_selectEffect:SetLocalScale(scale)
    end
end

function Npc:LostFocus()
    self:DestroySelectEffect()
end
--是否为优先选择，临时用于英雄美女NPC在床上被选线选中逻辑
function Npc:IsPrioritySelection()
    if self:IsHeroLady() and self.m_configState == Const.ConfigTriggerState.Special then
        return true
    end
    return false
end


--function Npc:MoveToBuild(targetPos,durationTime,buildUuid)
--    if self.m_aiType == Const.NPCAiType.CityNpc then
--        --self.ai:MoveToBuild(targetPos,durationTime,buildUuid)
--        self:SetAI(Const.NPCAiType.MoveToBuild, {buildUuid = buildUuid})
--        self:StartAI()
--    end
--end

function Npc:MoveToBuild(buildUuid, instant)
    if self.m_aiType == Const.NPCAiType.CityNpc then
        self:SetAI(Const.NPCAiType.MoveToBuild, {buildUuid = buildUuid, instantMove = instant})
        self:StartAI()
    end
end

function Npc:EndBuild()
    if self.m_aiType == Const.NPCAiType.MoveToBuild then
        self:SetAI(Const.NPCAiType.CityNpc, {noNeedResetPos = true})
        self:StartAI()
    end
end

function Npc:CanBuild()
    if self.m_aiType == Const.NPCAiType.CityNpc then
        return self.ai:IsWalk() or self.ai:IsRest()
    end
    return false
end

function Npc:MoveToCollect(param)
    if self.m_aiType == Const.NPCAiType.CityNpc then
        self.ai:MoveToCollect(param)
    end
end

function Npc:EndCollect()
    Logger.Log('#GirlCollect# Npc EndCollect')
    if self.m_aiType == Const.NPCAiType.CityNpc then
        self.ai:EndCollect()
    end
end

function Npc:ShowHammer()
    if self.hammerRequest ~= nil then
        return
    end

    local hammerPrefabPath = 'Assets/_Art_LastDay/Models/Soldier/weapon/chuizi.prefab'
    self.hammerRequest = CommonUtil.LoadResAsync(hammerPrefabPath, function(req)
        if req.isError or IsNull(req.gameObject) then
            return
        end

        if self.m_transform == nil then
            self:RemoveHammer()
            return
        end
        
        local obj = req.gameObject
        local hangPoint = self.m_transform:FindChildEx('guadian_R')
        obj.transform:SetParent(hangPoint)
        obj.transform:Set_localPosition(0, 0, 0)
        local quaternion = Quaternion.Euler(0, 0, 0)
        obj.transform:Set_localRotation(quaternion.x, quaternion.y, quaternion.z, quaternion.w)
    end)
end

function Npc:RemoveHammer()
    if self.hammerRequest ~= nil then
        self.hammerRequest:Destroy()
        self.hammerRequest = nil
    end
end


function Npc:SetConfigTriggerState(state)
    local standUp = (state == Const.ConfigTriggerState.Normal and self.m_configState == Const.ConfigTriggerState.Special)
    CharacterBase.SetConfigTriggerState(self,state)
    if standUp then
        local CharacterStateType = require("Scene.PVEBattleLevel.Character.State.CharacterStateType")
        self:SetState(CharacterStateType.StandUp)
    else
        self.m_stateManager:ChangeCharacterState()
    end
    self:ShowPubLadyBubble()
end

function Npc:SetVisible(value)
    CharacterBase.SetVisible(self,value)
    if value then
        self.m_stateManager:ChangeCharacterState()
    end
end

function Npc:UpdateTaskIcon()
    local isComplete = self.battleLevel:IsNpcTaskComplete(self.m_triggerId)
    if isComplete ~= nil then
        if self.m_taskIcon == nil then
            self.m_taskIcon = NpcTaskIcon.New(self.m_transform)
        end
        self.m_taskIcon:SetComplete(isComplete)
    else
        if self.m_taskIcon ~= nil then
            self:DestroyTaskIcon()
        end
    end
end

function Npc:RefreshMistressEffect()
    if DataCenter.BattleLevel == nil or not DataCenter.BattleLevel:IsInBattleLevel() then
        return
    end
    if DataCenter.BattleLevel:GetViewMode() == ViewMode.RPG then
        self:DestroyMistressEffect()
        return
    end

    if self.id ~= nil then
        local isMistress, mistressId = DataCenter.GirlBehaviorManager:IsMistressNpc(self.id)
        if isMistress then
            local showBubbleFlag = DataCenter.SU_MistressEffectManager:GetShowBubbleInfo(mistressId)
            if showBubbleFlag then
                self:ShowMistressEffect(mistressId)
            else
                self:DestroyMistressEffect()
            end
        else
            self:DestroyMistressEffect()
        end
    else
        self:DestroyMistressEffect()
    end
end

function Npc:DestroyMistressEffect()
    if self.mistressEffectBubble ~= nil then
        self.mistressEffectBubble:Delete()
    end
    self.mistressEffectBubble = nil
end

function Npc:ShowMistressEffect(mistressId)
    if self.mistressEffectBubble == nil then
        self.mistressEffectBubble = MistressDailyRewardBubble.New(self.m_gameObject, mistressId)
    else
        self.mistressEffectBubble:Refresh()
    end
end

function Npc:TopFaceToCamera()
    if self.m_taskIcon ~= nil then
        self.m_taskIcon:SetRotation(self.battleLevel:GetCamera():GetCameraRotation())
    end
    if self.mistressEffectBubble ~= nil then
        self.mistressEffectBubble:SetRotation(self.battleLevel:GetCamera():GetCameraRotation())
    end
end

function Npc:CanLookAt()
    if self:IsHeroLady() and self.m_configState == Const.ConfigTriggerState.Special then
        return false
    end
    return true
end

function Npc:GetTriggerId()
    return self.m_triggerId or 0
end

function Npc:GetUuid()
    return self:GetTriggerId()
end

function Npc:GetEffectNode()
    return self:GetTransform()
end

function Npc:GetChaseRadius()
    return self.info:GetChaseRadius()
end

function Npc:GetMoveSpeed()
    if self.m_aiType == Const.NPCAiType.CityNpc then
        if self.ai:IsBuild() then
            return self.info:GetMoveBuildSpeed()
        else
            return self.info:GetWalkSpeed()
        end
    elseif self.m_aiType == Const.NPCAiType.RunToPointList then
        return self.info:GetRunSpeed()
    end

    return self.info:GetMoveSpeed()
end

function Npc:GetNpcType()
    return self.info:GetType()
end
--是否为酒吧美女
function Npc:IsPubLady()
    return self.info:GetType() == Const.NpcType.PubLady
end
--是否为英雄美女
function Npc:IsHeroLady()
    return self:GetNpcType() == Const.NpcType.HeroLady
end

function Npc:GetAnimatorPath()
    return "Model"
end

function Npc:GetDefaultAnimName()
    --if not string.IsNullOrEmpty(self.m_defaultAnimName) then
    --    return self.m_defaultAnimName
    --end
    if self:IsHeroLady() and self.m_configState == Const.ConfigTriggerState.Special then
        return "nvlieshou_low_hug_idle_03"
    end
    return self:GetAnimName(AnimationType.Idle,Anim.Idle)
end

function Npc:GetAttackAnimName()
    return self:GetAnimName(AnimationType.Attack,Anim.Attack)
end

function Npc:GetMoveAnimName()
    return self:GetAnimName(AnimationType.Move,Anim.Run)
end

function Npc:GetAnimName(animType,defaultName)
    local animName = nil
    if self.m_animation ~= nil then
        animName = self.m_animation:GetRandomAnimName(animType)
    end
    if string.IsNullOrEmpty(animName) then
        animName = defaultName
    end
    return animName
end

function Npc:GetPrefabName()
    local modelName = GetTableData( TableName.PVETrigger, self.m_triggerId, "ModelName")
    if string.IsNullOrEmpty(modelName) then
        modelName = self.info:GetModelName()
    end
    return modelName
end 

function Npc:PrefabPath()
    --if self:IsPubLady() then
    --    print("****IsPubLady triggerid: " .. self:GetTriggerId())
    --    return string.format("Assets/Main/Prefabs/Girls/%s.prefab", self:GetPrefabName())
    --end
    return string.format("Assets/Main/Prefabs/PVELevel/%s.prefab", self:GetPrefabName())
end 

function Npc:GetType()
    return CharacterType.Npc
end

function Npc:CanTalk()
    if self.m_aiType == Const.NPCAiType.CityNpc then
        return self.ai:CanTalk()
    end
    return false
end

function Npc:EqualsChatGroup(group)
    if self.m_aiType == Const.NPCAiType.CityNpc then
        return self.info:GetNpcChatGroup() == group
    end
    return false
end

function Npc:PrepareTalk(chatTemplateGroup,chatObjectType)
    if self.m_aiType == Const.NPCAiType.CityNpc then
        self.ai:PrepareTalk(chatTemplateGroup,chatObjectType)
    end
end

function Npc:GetFixedTransitionDuration()
    if self:IsHeroLady() and self.m_configState == Const.ConfigTriggerState.Special then
        return 0
    end
    return CharacterBase.GetFixedTransitionDuration(self)
end

function Npc:OnStateComplete(type,data)
    CharacterBase.OnStateComplete(self,type,data)

    if self.ai ~= nil and self.ai.OnStateComplete ~= nil then
        self.ai:OnStateComplete(type,data)
    end
end

function Npc:DestroySelectEffect()
    if self.m_selectEffect ~= nil then
        self.m_selectEffect:Destroy()
        self.m_selectEffect = nil
    end
end

function Npc:SetFocusEffectVisible(visible)
    if self.m_selectEffect ~= nil then
        if self.m_selectEffect.m_req ~= nil then
            local effGamobj = self.m_selectEffect.m_req.gameObject
            if effGamobj ~= nil then
                effGamobj:SetActive(visible)
            end
        end
    end
end

function Npc:ClearAI()
    if self.ai ~= nil then
        self.ai:Destroy()
        self.ai = nil
    end
end

function Npc:DestroyTaskIcon()
    if self.m_taskIcon ~= nil then
        self.m_taskIcon:Destroy()
        self.m_taskIcon = nil
    end
end

function Npc:DestroyPart()
    if self.m_skin ~= nil then
        self.m_skin:Destroy()
        self.m_skin = nil
    end
end

function Npc:Destroy()
    print("*******NPC:DESTROY")
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UINpcGirlStateIcon)
    self:DestroyMiniMapIcon()
	
    EventManager:GetInstance():RemoveListener(EventId.SU_UpdateNpcTaskIcon,self.UpdateTaskIconHandler)
    EventManager:GetInstance():RemoveListener(EventId.SU_RefreshMistressEffect,self.RefreshMistressEffectHandler)
    EventManager:GetInstance():RemoveListener(EventId.SU_ChangeViewHeight, self.ViewChangHandler)
    EventManager:GetInstance():RemoveListener(EventId.UpdateGiftPackData, self.UpdateGiftHandler)

    self.UpdateTaskIconHandler = nil
    self.RefreshMistressEffectHandler = nil
    self.ViewChangHandler = nil
    self.m_animation = nil
    self:LostFocus()
    self:DestroySelectEffect()
    self:ClearAI()
    self:DestroyTaskIcon()
    self:DestroyMistressEffect()
    self:DestroyPart()
    CharacterBase.Destroy(self)
end

function Npc:OnViewChang()
    self:RefreshMistressEffect()
end


--检查并显示气泡，点击气泡后跳转到商城美女队列解锁礼包
function Npc:CheckAndShowGiftBubble()
    local mistressId = toInt(self.info:GetMistressId())
    if mistressId ~= nil and mistressId ~= 0 and self.info:GetType() == 8 then
        mistressId = toInt(mistressId)
        local baseData = DataCenter.MistressLvTemplateManager:GetBaseData(mistressId)
        local reqUnlock = DataCenter.GirlBehaviorManager:IsRequireMistressUnlock(baseData.npc_id)
        local packInfo = GiftPackageData.get(baseData.recharge_id)
        if reqUnlock and packInfo then --如果美女没解锁并且存在可购买礼包
            local iconName = string.format(LoadPath.GirlIconsSmall, baseData.bubblesIcon)
            local bgName = string.format(LoadPath.UIBuildBubble, BuildBubbleIconName.BgUnSelect)
            local callback = function() UIUtil.OnClickGiftBubble(baseData.recharge_id) end
            DataCenter.EventBubbleManager:ShowEventBubble(mistressId,EventBubbleType.CityNpcBubble,iconName,bgName,callback)
        else
            --消除气泡并清除此Npc
            local bubbleNpcId = toInt(GetTableData(TableName.MistressBase, mistressId, "npc_bubble_id"))
            if self.id == toInt(bubbleNpcId) then
                DataCenter.EventBubbleManager:DeleteEventBubble(EventBubbleType.CityNpcBubble,mistressId)
                SceneManager.GetLevel().RoleMgr:DelteCityNpc(self.id)
            end
        end
    end
end

return Npc