---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1022.
--- DateTime: 2023/6/12 16:27
---角色部件，可以播放部件动画，未来部件如果有特效，也在这里实现
local RolePart = BaseClass("RolePart")
local ResourceManager = CS.GameEntry.Resource

function RolePart:__init(partType,partPreFabPath,rootBone,layer)
    self.m_partType = partType
    self.m_partPrefabPath = partPreFabPath
    self.m_rootBone = rootBone
    self.m_layer = layer

    self.m_renderer = {}
    self.m_defaultBones = {}
end
--父节点，如果是武器的话，就是武器挂点
--武器可能是双持，所以需要两个，默认第一个是右手
function RolePart:SetParent(parent1,parent2)
    self.m_parent1 = parent1
    self.m_parent2 = parent2
end

function RolePart:SetEquip(equip)
    self.m_equip = equip
end

--设置基础部件ModelName
function RolePart:SetBasePartModelName(modelName)
    self.m_basePartModelName = modelName
end

function RolePart:RefreshAsset()
    if self.m_equip ~= nil then
        self:DestroyBasePart()
        self:LoadEquip(self.m_equip:getValue("model"),tonumber(self.m_equip:getValue("double")) == 1)
    else
        self:DestroyEquip()
        self:LoadBasePart()
    end
end
--isDouble 是否为双持
function RolePart:LoadEquip(modelName,isDouble)
    local path = string.format(self:GetPrefabPath(self.m_partType),modelName)
    if self.m_equipReq ~= nil then
        if self.m_equipReq.PrefabPath == path then
            return --相同的资源
        end
        --把旧装备卸载掉
        self:DestroyEquip()
    end
    self.m_equipModelName = modelName
    
    self.m_equipReq = ResourceManager:InstantiateAsync(path)
    self.m_equipReq:completed('+', function(req)
        if req.isError or IsNull(req.gameObject) then
            --装备出错了，加载显示基础部件
            self:LoadBasePart()
            return
        end

        self.m_equipGameObject = req.gameObject
        self:__initAsset(self.m_equipGameObject)
    end)

    if isDouble and self.m_parent2 ~= nil then
        self.m_equipReq2 = ResourceManager:InstantiateAsync(path)
        self.m_equipReq2:completed('+', function(req)
            if req.isError or IsNull(req.gameObject) then
                return
            end
            self.m_equipGameObject2 = req.gameObject
            self:__initAsset(self.m_equipGameObject2,true)
        end)
    end
end

function RolePart:LoadBasePart()
    if self.m_basePartReq ~= nil or string.IsNullOrEmpty(self.m_basePartModelName) then
        return --已经有了，或者没有基础部件，不需要重复加载
    end
    
    local path = string.format(self:GetPrefabPath(self.m_partType),self.m_basePartModelName)
    self.m_basePartReq = ResourceManager:InstantiateAsync(path)
    self.m_basePartReq:completed('+', function(req)
        if req.isError or req.gameObject == nil then
            return
        end

        self.m_basePartGameObject = req.gameObject
        self:__initAsset(self.m_basePartGameObject)
    end)
end

function RolePart:__initAsset(gameObject,isAssist)
    local parent = isAssist and self.m_parent2 or self.m_parent1
    local scaleX = isAssist and -1 or 1

    local transform = gameObject.transform
    transform:SetParent(parent)

    transform:Set_localPosition(0,0,0)
    transform.localRotation = Quaternion.identity
    transform:Set_localScale(scaleX,1,1)

    gameObject.layer = self.m_layer
    self:SetLayer(transform)

    if self.m_partType ~= SurvivalEquipType.Weapon then
        self:BindBones(gameObject)
    end
end

function RolePart:SetLayer(transform)
    local rendererList = transform:GetComponentsInChildren(typeof(CS.UnityEngine.Renderer))
    local t
    local gameObject
    for i = 0, rendererList.Length - 1 do
        t = rendererList[i]
        gameObject = t.gameObject
        gameObject.layer = self.m_layer
    end
end

function RolePart:BindBones(part)
    if part == nil then
        return
    end

    local renderer = part:GetComponentInChildren(typeof(CS.UnityEngine.SkinnedMeshRenderer))
    if renderer == nil then
        return
    end
    --记录一下，用于销毁的时候恢复回去
    local partId = part:GetInstanceID()
    self.m_renderer[partId] = renderer
    self.m_defaultBones[partId] = renderer.bones

    local bones = renderer.bones
    local newBones = {}
    local bone
    for i = 0, bones.Length - 1 do
        bone = bones[i]
        if bone ~= nil then
            local t = self:FindBoneByName(self.m_rootBone,bone.name)
            table.insert(newBones,t)
        end
    end
    renderer.bones = newBones
end

function RolePart:FindBoneByName(transform,name)
    if transform == nil or string.IsNullOrEmpty(name) then
        return nil
    end

    if transform.name == name then
        return transform
    end

    local target = nil
    local t = nil
    for i = 0, transform.childCount - 1 do
        t = self:FindBoneByName(transform:GetChild(i),name)
        if t ~= nil then
            target = t
            break
        end
    end

    return target
end

function RolePart:PlayWeaponAttackAnim()
    if self.m_equip ~= nil then
       local atkAnim = self.m_equip:getValue("atkAnimation")
        if not string.IsNullOrEmpty(atkAnim) then
            self:PlayAnim(atkAnim)
        end
    end
end

function RolePart:PlayAnim(animName)
    if IsNull(self.m_animator) and not IsNull(self.m_equipGameObject) then
        self.m_animator = self.m_equipGameObject:GetComponentInChildren(typeof(CS.UnityEngine.Animator))

        if self.m_equipGameObject2 ~= nil then
            self.m_animator2 = self.m_equipGameObject2:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
        end
    end

    if not IsNull(self.m_animator) then
        local hashId = GlobalCache.Animator_StringToHash(animName)
        self.m_animator:CrossFadeInFixedTime(hashId,0,0)

        if self.m_animator2 ~= nil then
            self.m_animator2:CrossFadeInFixedTime(hashId,0,0)
        end
    else
        Logger.LogError("EquipPart PlayAnim no animator : ", animName)
    end
end

function RolePart:HideEquip(showBarPart)
    if not IsNull(self.m_equipGameObject) then
        self.m_equipGameObject:SetActive(false)

        if self.m_equipGameObject2 ~= nil then
            self.m_equipGameObject2:SetActive(false)
        end
    end
    if showBarPart == true then
        if IsNull(self.m_basePartGameObject) then
            self:LoadBasePart()
        else
            self.m_basePartGameObject:SetActive(true)
        end
    end
end

function RolePart:ShowEquip()
    if not IsNull(self.m_equipGameObject) then
        self.m_equipGameObject:SetActive(true)
        self:DestroyBasePart() --如果有装备就把基础部件卸载掉

        if self.m_equipGameObject2 ~= nil then
            self.m_equipGameObject2:SetActive(true)
        end
    end
end

function RolePart:GetModelName()
    if not string.IsNullOrEmpty(self.m_equipModelName) then
        return self.m_equipModelName
    end
    return self.m_basePartModelName
end

function RolePart:FindTransformByName(name)
    local transform
    local transform2
    if not IsNull(self.m_equipGameObject) then
        transform = self.m_equipGameObject.transform:Find(name)
        if self.m_equipGameObject2 ~= nil then
            transform2 = self.m_equipGameObject2.transform:Find(name)
        end
    elseif not IsNull(self.m_basePartGameObject) then
        transform = self.m_basePartGameObject.transform:Find(name)
    end
    return transform,transform2
end

function RolePart:GetWeaponAtkEffect()
    if self.m_equip ~= nil then
        return self.m_equip:getValue("atkEffect")
    end
    return nil
end

function RolePart:GetWeaponTrackEffect()
    if self.m_equip ~= nil then
        return self.m_equip:getValue("weaponTrackEffect")
    end
    return nil
end

function RolePart:GetWeaponArc()
    if self.m_equip ~= nil then
        return tonumber(self.m_equip:getValue("arc")) or 0
    end
    return 0
end

function RolePart:GetWeaponSpecialData()
    local list = nil
    if self.m_equip ~= nil then
        local specialType = self.m_equip:getValue("special_type")
        local specialPara = self.m_equip:getValue("special_para")
        if not string.IsNullOrEmpty(specialType) then
            local specialTypeArr = string.string2array_i(specialType,";")
            local specialParaArr = string.string2array_f(specialPara,";")

            list = {}
            local data = {}
            for i, v in ipairs(specialTypeArr) do
                data.type = v
                if i <= #specialParaArr then
                    data.para = specialParaArr[i]
                end
                
                table.insert(list,data)
            end
        end
    end
    return list
end

function RolePart:GetPrefabPath(partType)
    if partType == SurvivalEquipType.Weapon then
        return LoadPath.WeaponPrefabPath
    else
        return self.m_partPrefabPath or ""
    end
end

function RolePart:DestroyEquip()
    self:ResetRenderer(self.m_equipGameObject)
    if self.m_equipReq ~= nil then
        self.m_equipReq:Destroy()
    end
    if self.m_equipReq2 ~= nil then
        self.m_equipReq2:Destroy()
    end
    self.m_equipReq = nil
    self.m_equipReq2 = nil
    self.m_equipGameObject = nil
    self.m_equipGameObject2 = nil
    self.m_equipModelName = nil
    self.m_animator = nil
    self.m_animator2 = nil
end

function RolePart:DestroyBasePart()
    self:ResetRenderer(self.m_basePartGameObject)
    if self.m_basePartReq ~= nil then
        self.m_basePartReq:Destroy()
    end
    self.m_basePartReq = nil
    self.m_basePartGameObject = nil
end

function RolePart:ResetRenderer(gameObject)
    if not IsNull(gameObject) then
        local id = gameObject:GetInstanceID()
        local renderer = self.m_renderer[id]
        local defaultBones = self.m_defaultBones[id]
        if not IsNull(renderer) and not IsNull(defaultBones) then
            renderer.bones = defaultBones
        end
        self.m_renderer[id] = nil
        self.m_defaultBones[id] = nil
    end
end

function RolePart:Destroy()
    self:DestroyEquip()
    self:DestroyBasePart()
    self.m_equip = nil
    self.m_parent1 = nil
    self.m_parent2 = nil
    self.m_rootBone = nil
    self.m_layer = nil
end

return RolePart