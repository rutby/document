---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/7/24 21:13
---

local WorldMarchEmotionManager = BaseClass("WorldMarchEmotionManager", Singleton)
local WorldMarchEmotionPanel = require "Scene.WorldMarchEmotion.WorldMarchEmotionPanel"
local WorldMarchEmotionCommand = require "Scene.WorldMarchEmotion.WorldMarchEmotionCommand"
local ResourceManager = CS.GameEntry.Resource

local SkeletonDataPath =
{
    ["1"] = "Assets/Main/Animation/Spine/Xingjun_Shengqi/Ani_shengqi_SkeletonData.asset",
    ["2"] = "Assets/Main/Animation/Spine/Xingjun_Chaofeng/Ani_Chaofeng_SkeletonData.asset",
    ["3"] = "Assets/Main/Animation/Spine/Xingjun_Xuanyao/Ain_Xuanyao_SkeletonData.asset",
}

local function __init(self)
    self.panelDict = {} -- Dict<uuid, WorldMarchEmotionPanel>
    self.skeletonDataInited = false
    self.skeletonDataAssetDict = {}
    self:InitSkeletonData()
    self:AddListener()
end

local function __delete(self)
    self:UnInitSkeletonData()
    self:RemoveListener()
end

local function Destroy(self)
    self:DestroyAllPanels()
end

local function AddListener(self)
    self.BindOnWorldBuildOutView = BindCallback(self, self.OnWorldBuildOutView)
    EventManager:GetInstance():AddListener(EventId.WORLD_BUILD_OUT_VIEW, self.BindOnWorldBuildOutView)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.WORLD_BUILD_OUT_VIEW, self.BindOnWorldBuildOutView)
end

local function InitSkeletonData(self)
    local cur = 0
    local total = table.count(SkeletonDataPath)
    for emo, path in pairs(SkeletonDataPath) do
        self.skeletonDataAssetDict[emo] = ResourceManager:LoadAssetAsync(path, typeof(CS.Spine.Unity.SkeletonDataAsset))
        self.skeletonDataAssetDict[emo].completed = function(_)
            cur = cur + 1
            if cur == total then
                self.skeletonDataInited = true
            end
        end
    end
end

local function UnInitSkeletonData(self)
    for _, skeletonDataAsset in pairs(self.skeletonDataAssetDict) do
        ResourceManager:UnloadAsset(skeletonDataAsset)
    end
    self.skeletonDataAssetDict = {}
    self.skeletonDataInited = false
end

local function GetSkeletonData(self, emo)
    if not self.skeletonDataInited or self.skeletonDataAssetDict[emo] == nil then
        return nil
    end
    return self.skeletonDataAssetDict[emo].asset
end

local function Enabled(self)
    return LuaEntry.DataConfig:CheckSwitch("car_emoji")
end

local function GetEmotionDuration(self)
    return LuaEntry.DataConfig:TryGetNum("emoji", "k1")
end

local function Command(self, command)
    local uuid = command.uuid
    local panel = self.panelDict[uuid]
    if panel then
        panel:SetCommand(command)
    else
        local req = ResourceManager:InstantiateAsync(UIAssets.WorldMarchEmotionPanel)
        panel = WorldMarchEmotionPanel.New(req)
        panel:SetCommand(command)
        req:completed('+', function(_)
            panel = self.panelDict[uuid]
            if panel then
                panel:Create()
                panel:DoCommand()
            end
        end)
        self.panelDict[uuid] = panel
    end
end

local function HideCurBtns(self)
    for _, panel in pairs(self.panelDict) do
        panel:HideBtns()
    end
end

local function DestroyPanel(self, uuid)
    local panel = self.panelDict[uuid]
    if panel then
        panel:Destroy()
        self.panelDict[uuid] = nil
    end
end

local function DestroyAllPanels(self)
    for uuid, _ in pairs(self.panelDict) do
        self:DestroyPanel(uuid)
    end
end

local function HandleSend(self, message)
    if message["errorCode"] then
        return
    end
    -- do nothing
end

local function HandlePush(self, message)
    if message["errorCode"] then
        return
    end
    
    if LuaEntry.Player:GetCurServerId() ~= message["serverId"] or
       LuaEntry.Player:GetCurWorldId() ~= message["worldId"] then
        return
    end
    
    if CS.SceneManager.World == nil or not SceneUtils.GetIsInWorld() then
        return
    end
    
    local command = WorldMarchEmotionCommand.New()
    command.uuid = message["uuid"]
    command.type = WorldMarchEmotionCommandType.ShowEmo
    command.targetType = message["type"]
    command.emo = message["emoji"]
    self:Command(command)
end

local function OnWorldBuildOutView(self, uuid)
    self:DestroyPanel(uuid)
end

WorldMarchEmotionManager.__init = __init
WorldMarchEmotionManager.__delete = __delete
WorldMarchEmotionManager.Destroy = Destroy
WorldMarchEmotionManager.AddListener = AddListener
WorldMarchEmotionManager.RemoveListener = RemoveListener

WorldMarchEmotionManager.InitSkeletonData = InitSkeletonData
WorldMarchEmotionManager.UnInitSkeletonData = UnInitSkeletonData
WorldMarchEmotionManager.GetSkeletonData = GetSkeletonData

WorldMarchEmotionManager.Enabled = Enabled
WorldMarchEmotionManager.GetEmotionDuration = GetEmotionDuration
WorldMarchEmotionManager.Command = Command
WorldMarchEmotionManager.HideCurBtns = HideCurBtns
WorldMarchEmotionManager.HandleSend = HandleSend
WorldMarchEmotionManager.HandlePush = HandlePush
WorldMarchEmotionManager.DestroyPanel = DestroyPanel
WorldMarchEmotionManager.DestroyAllPanels = DestroyAllPanels

WorldMarchEmotionManager.OnWorldBuildOutView = OnWorldBuildOutView

return WorldMarchEmotionManager