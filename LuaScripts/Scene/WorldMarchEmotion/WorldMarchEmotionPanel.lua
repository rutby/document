---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/7/24 21:14
---

local WorldMarchEmotionPanel = BaseClass("WorldMarchEmotionPanel")

local btn_root_path = "Root/BtnRoot"
local btn_path = "Root/BtnRoot/Btn%s"
local emo_root_path = "Root/EmoRoot"
local emo_spine_path = "Root/EmoRoot/EmoSpine"

local BtnCount = 3

local function __init(self, req)
    self.req = req
    self.command = nil
    self.timer = nil
    self.curEmo = ""
    
    self.isShowBtns = false
    self.isShowEmo = false
end

local function __delete(self)
    
end

local function Create(self)
    self.gameObject = self.req.gameObject
    self.transform = self.gameObject.transform
    
    self.btn_root_go = self.transform:Find(btn_root_path).gameObject
    self.btn_root_go:SetActive(false)
    self.btns = {}
    for i = 1, BtnCount do
        self.btns[i] = self.transform:Find(string.format(btn_path, i)):GetComponent(typeof(CS.UnityEngine.UI.Button))
        self.btns[i].onClick:AddListener(function()
            self:OnBtnClick(i)
        end)
    end
    self.emo_root_go = self.transform:Find(emo_root_path).gameObject
    self.emo_root_go:SetActive(false)
    self.emo_spine = self.transform:Find(emo_spine_path):GetComponent(typeof(CS.Spine.Unity.SkeletonGraphic))
end

local function Destroy(self)
    pcall(function()
        for i = 1, BtnCount do
            self.btns[i].onClick:Clear()
        end
    end)
    if self:IsCreated() then
        self.gameObject.name = "WorldMarchEmotionPanel_Destroyed"
    end
    if self.req then
        self.req:Destroy()
        self.req = nil
    end
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function IsCreated(self)
    return not IsNull(self.gameObject)
end

local function SetCommand(self, command)
    self.command = command
    if self:IsCreated() then
        self:DoCommand()
    end
end

local function DoCommand(self)
    self.gameObject.name = "WorldMarchEmotionPanel_" .. self.command.uuid
    
    local ok = false
    if self.command.targetType == WorldMarchEmotionTargetType.March then
        local worldTroop = WorldTroopManager:GetInstance():GetTroop(self.command.uuid)
        if worldTroop then
            self:SetParent(worldTroop:GetTransform())
            ok = true
        end
    elseif self.command.targetType == WorldMarchEmotionTargetType.Building then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(self.command.uuid)
        if info then
            local pos = BuildingUtils.GetBuildModelCenterVec(info.mainIndex, WorldBuildUtil.GetBuildTile(info.mainIndex))
            self:SetPos(pos)
            ok = true
        end
    end
    
    if ok then
        if self.command.type == WorldMarchEmotionCommandType.ShowBtns then
            self:ShowBtns()
        elseif self.command.type == WorldMarchEmotionCommandType.HideBtns then
            self:HideBtns()
        elseif self.command.type == WorldMarchEmotionCommandType.ShowEmo then
            self:SetEmo(self.command.emo)
            self:ShowEmo()
        elseif self.command.type == WorldMarchEmotionCommandType.HideEmo then
            self:HideEmo()
        end
    else
        self:HideEmo()
    end
end

local function SetParent(self, parent)
    self.transform:SetParent(parent)
    self.transform.localPosition = VecZero
    self.transform.localScale = VecOne
end

local function SetPos(self, pos)
    self.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
    self.transform.position = pos
    self.transform.localScale = VecOne
end

local function ShowBtns(self)
    if not self.isShowBtns then
        self.isShowBtns = true
        self.btn_root_go:SetActive(true)
    end
end

local function HideBtns(self)
    if self.isShowBtns then
        self.isShowBtns = false
        self.btn_root_go:SetActive(false)
    end
end

local function ShowEmo(self)
    if self.timer then
        self.timer:Stop()
    end
    self.timer = TimerManager:GetInstance():DelayInvoke(function()
        self:HideEmo()
    end, WorldMarchEmotionManager:GetInstance():GetEmotionDuration())
    
    if not self.isShowEmo then
        self.isShowEmo = true
        self.emo_root_go:SetActive(true)
    end
    
    self.emo_spine.AnimationState:SetAnimation(0, "animation", false)
end

local function HideEmo(self)
    if self.timer then
        self.timer:Stop()
    end
    if self.isShowEmo then
        self.isShowEmo = false
        self.emo_root_go:SetActive(false)
    end
end

local function SetEmo(self, emo)
    if emo == self.curEmo then
        return
    end
    
    local skeletonData = WorldMarchEmotionManager:GetInstance():GetSkeletonData(emo)
    if skeletonData then
        self.emo_spine.skeletonDataAsset = skeletonData
        self.emo_spine:Initialize(true)
    end
    self.curEmo = emo
end

local function OnBtnClick(self, index)
    local emo = tostring(index)
    SFSNetwork.SendMessage(MsgDefines.SendMarchEmoji, self.command.targetType, self.command.uuid, emo)
    self:HideBtns()
end

WorldMarchEmotionPanel.__init = __init
WorldMarchEmotionPanel.__delete = __delete
WorldMarchEmotionPanel.Create = Create
WorldMarchEmotionPanel.Destroy = Destroy
WorldMarchEmotionPanel.IsCreated = IsCreated
WorldMarchEmotionPanel.SetCommand = SetCommand
WorldMarchEmotionPanel.DoCommand = DoCommand
WorldMarchEmotionPanel.SetParent = SetParent
WorldMarchEmotionPanel.SetPos = SetPos
WorldMarchEmotionPanel.ShowBtns = ShowBtns
WorldMarchEmotionPanel.HideBtns = HideBtns
WorldMarchEmotionPanel.ShowEmo = ShowEmo
WorldMarchEmotionPanel.HideEmo = HideEmo
WorldMarchEmotionPanel.SetEmo = SetEmo
WorldMarchEmotionPanel.OnBtnClick = OnBtnClick

return WorldMarchEmotionPanel