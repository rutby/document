---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 24224.
--- DateTime: 2022/12/23 16:28
---
local WorldDesertEffectManager = BaseClass("WorldDesertEffectManager", Singleton)
local ResourceManager = CS.GameEntry.Resource
local WorldDesertProtectEffect = require "Scene.WorldDesertEffect.WorldDesertProtectEffect"
local WorldDesertGiveUpEffect = require "Scene.WorldDesertEffect.WorldDesertGiveUpEffect"
local function __init(self)
    self.allProtectTips = {}
    self.OnCreateProtectTips ={}
    self.allGiveUpTips = {}
    self.OnCreateGiveUpTips ={}
    self.needShowList = {}
    self.lodCache = 1
    self:AddListener()
end

local function __delete(self)
    self:RemoveListener()
    self:RemoveAllBuff()
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.PveLevelEnter, self.RemoveAllTips)
    EventManager:GetInstance():AddListener(EventId.DesertEffectInView, self.ShowDesertSignal)
    EventManager:GetInstance():AddListener(EventId.DesertEffectOutView, self.HideDesertSignal)
    EventManager:GetInstance():AddListener(EventId.ChangeCameraLod, self.ChangeCameraLodSignal)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnEnterCity)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelEnter, self.RemoveAllTips)
    EventManager:GetInstance():RemoveListener(EventId.DesertEffectInView, self.ShowDesertSignal)
    EventManager:GetInstance():RemoveListener(EventId.DesertEffectOutView, self.HideDesertSignal)
    EventManager:GetInstance():RemoveListener(EventId.ChangeCameraLod, self.ChangeCameraLodSignal)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnEnterCity)
end

local function ChangeCameraLodSignal(lod)
    WorldDesertEffectManager:GetInstance():UpdateLod(lod)
end

local function UpdateLod(self, lod)
    if self.lodCache ~=lod then
        self.lodCache =lod
        if self.lodCache>3 then
            if self.allProtectTips~=nil then
                for k,v in pairs(self.allProtectTips) do
                    self.needShowList[k] = 1
                end
            end
            if self.OnCreateProtectTips~=nil then
                for k,v in pairs(self.OnCreateProtectTips) do
                    self.needShowList[k] = 1
                end
            end
            if self.allGiveUpTips~=nil then
                for k,v in pairs(self.allGiveUpTips) do
                    self.needShowList[k] = 1
                end
            end
            if self.OnCreateGiveUpTips~=nil then
                for k,v in pairs(self.OnCreateGiveUpTips) do
                    self.needShowList[k] = 1
                end
            end
            self:RemoveAllEffect()
        else
            for k, v in pairs(self.needShowList) do
                self:CheckShowDesert(k)
            end
            self.needShowList = {}
        end
    end
end

local function RemoveAllTips(data)
    WorldDesertEffectManager:GetInstance():RemoveAllBuff()
end
local function OnEnterWorld(data)
end
local function OnEnterCity(data)
    WorldDesertEffectManager:GetInstance():RemoveAllBuff()
end
local function RemoveAllBuff(self)
    if self.allProtectTips~=nil then
        for k,v in pairs(self.allProtectTips) do
            local request = v.request
            v:OnDestroy()
            request:Destroy()
        end
        self.allProtectTips = {}
    end
    if self.OnCreateProtectTips~=nil then
        for k,v in pairs(self.OnCreateProtectTips) do
            v:Destroy()
        end
        self.OnCreateProtectTips = {}
    end
    if self.allGiveUpTips~=nil then
        for k,v in pairs(self.allGiveUpTips) do
            local request = v.request
            v:OnDestroy()
            request:Destroy()
        end
        self.allGiveUpTips = {}
    end
    if self.OnCreateGiveUpTips~=nil then
        for k,v in pairs(self.OnCreateGiveUpTips) do
            v:Destroy()
        end
        self.OnCreateGiveUpTips ={}
    end
    self.needShowList = {}
end

local function RemoveAllEffect(self)
    if self.allProtectTips~=nil then
        for k,v in pairs(self.allProtectTips) do
            local request = v.request
            v:OnDestroy()
            request:Destroy()
        end
        self.allProtectTips = {}
    end
    if self.OnCreateProtectTips~=nil then
        for k,v in pairs(self.OnCreateProtectTips) do
            v:Destroy()
        end
        self.OnCreateProtectTips = {}
    end
    if self.allGiveUpTips~=nil then
        for k,v in pairs(self.allGiveUpTips) do
            local request = v.request
            v:OnDestroy()
            request:Destroy()
        end
        self.allGiveUpTips = {}
    end
    if self.OnCreateGiveUpTips~=nil then
        for k,v in pairs(self.OnCreateGiveUpTips) do
            v:Destroy()
        end
        self.OnCreateGiveUpTips ={}
    end
end

local function ShowDesertSignal(data)
    WorldDesertEffectManager:GetInstance():CheckShowDesert(tonumber(data))
end

local function HideDesertSignal(data)
    WorldDesertEffectManager:GetInstance():RemoveOneEffect(tonumber(data))
end

local function CheckShowDesert(self,uuid)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if self.lodCache>3 then
        self.needShowList[uuid] = 1
        return
    end
    if CS.SceneManager.World.GetDesertInfoByUuid ==nil then
        return
    end
    local desertData = CS.SceneManager.World:GetDesertInfoByUuid(uuid)
    if desertData~=nil then
        local selfDesertData = DataCenter.DesertDataManager:GetSelfDesertDataByUuid(uuid)
        if selfDesertData~=nil then
            desertData = selfDesertData
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if curTime > desertData.giveUpTime then
                self:RemoveGiveUpEffect(uuid)
                if curTime > desertData.protectTime then
                    self:RemoveProtectEffect(uuid)
                else
                    self:ShowProtectEffect(uuid,desertData.pointId,desertData.protectTime,CS.PlayerType.PlayerSelf)
                end
            else
                self:ShowGiveUpEffect(uuid,desertData.pointId,desertData.giveUpTime)
            end
            
        else
            local protectEndTime = desertData.protectEndTime*1000
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if curTime <= protectEndTime then
                local playerType = desertData:GetPlayerType()
                self:ShowProtectEffect(uuid,desertData.pointIndex,protectEndTime,playerType)
            else
                self:RemoveOneEffect(uuid)
            end
        end
    else
        self:RemoveOneEffect(uuid)
    end
end

local function RemoveProtectEffect(self,uuid)
    local temp = self.allProtectTips[uuid]
    if temp ~= nil then
        local request = temp.request
        temp:OnDestroy()
        request:Destroy()
        self.allProtectTips[uuid] = nil
    end
    temp = self.OnCreateProtectTips[uuid]
    if temp ~= nil then
        temp:Destroy()
        self.OnCreateProtectTips[uuid] = nil
    end
    self.needShowList[uuid] = nil
end
local function RemoveGiveUpEffect(self,uuid)
    local temp = self.allGiveUpTips[uuid]
    if temp ~= nil then
        local request = temp.request
        temp:OnDestroy()
        request:Destroy()
        self.allGiveUpTips[uuid] = nil
    end
    temp = self.OnCreateGiveUpTips[uuid]
    if temp ~= nil then
        temp:Destroy()
        self.OnCreateGiveUpTips[uuid] = nil
    end
    self.needShowList[uuid] = nil
end

local function ShowProtectEffect(self,uuid,pointId,endTime,playerType)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if self.allProtectTips[uuid] ==nil and self.OnCreateProtectTips[uuid] == nil then
        local modelName =""
        if playerType == CS.PlayerType.PlayerSelf then
            modelName = "Assets/Main/Prefabs/Building/BuildBlockProtectSelf.prefab"
        elseif playerType == CS.PlayerType.PlayerAlliance then
            modelName = "Assets/Main/Prefabs/Building/BuildBlockProtectAlliance.prefab"
        else
            modelName = "Assets/Main/Prefabs/Building/BuildBlockProtectOther.prefab"
        end
        local request = ResourceManager:InstantiateAsync(modelName)
        self.OnCreateProtectTips[uuid] = request
        request:completed('+', function()
            self.OnCreateProtectTips[uuid] =nil
            if request.isError then
                return
            end
            request.gameObject:SetActive(true)
            request.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
            request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local buffTip = WorldDesertProtectEffect.New()
            buffTip:OnCreate(request)
            buffTip:ReInit(uuid,pointId,endTime)
            self.allProtectTips[uuid] = buffTip
        end)
    end
end
local function ShowGiveUpEffect(self,uuid,pointId,endTime)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if self.allGiveUpTips[uuid] ==nil and self.OnCreateGiveUpTips[uuid] == nil then
        local modelName ="Assets/Main/Prefabs/Building/BuildGiveUpSelf.prefab"
        local request = ResourceManager:InstantiateAsync(modelName)
        self.OnCreateGiveUpTips[uuid] = request
        request:completed('+', function()
            self.OnCreateProtectTips[uuid] =nil
            if request.isError then
                return
            end
            request.gameObject:SetActive(true)
            request.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
            request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local buffTip = WorldDesertGiveUpEffect.New()
            buffTip:OnCreate(request)
            buffTip:ReInit(uuid,pointId,endTime)
            self.allGiveUpTips[uuid] = buffTip
        end)
    end
end


local function RemoveOneEffect(self,uuid)
    self:RemoveProtectEffect(uuid)
    self:RemoveGiveUpEffect(uuid)
    self.needShowList[uuid] = nil
end

WorldDesertEffectManager.OnEnterWorld = OnEnterWorld
WorldDesertEffectManager.OnEnterCity = OnEnterCity
WorldDesertEffectManager.__init = __init
WorldDesertEffectManager.__delete = __delete
WorldDesertEffectManager.AddListener = AddListener
WorldDesertEffectManager.RemoveListener = RemoveListener
WorldDesertEffectManager.RemoveOneEffect = RemoveOneEffect
WorldDesertEffectManager.ShowProtectEffect = ShowProtectEffect
WorldDesertEffectManager.RemoveProtectEffect = RemoveProtectEffect
WorldDesertEffectManager.RemoveGiveUpEffect = RemoveGiveUpEffect
WorldDesertEffectManager.ShowGiveUpEffect =ShowGiveUpEffect
WorldDesertEffectManager.ShowDesertSignal =ShowDesertSignal
WorldDesertEffectManager.HideDesertSignal =HideDesertSignal
WorldDesertEffectManager.CheckShowDesert = CheckShowDesert
WorldDesertEffectManager.UpdateLod = UpdateLod
WorldDesertEffectManager.RemoveAllBuff = RemoveAllBuff
WorldDesertEffectManager.ChangeCameraLodSignal = ChangeCameraLodSignal
WorldDesertEffectManager.RemoveAllTips =RemoveAllTips
WorldDesertEffectManager.RemoveAllEffect = RemoveAllEffect
return WorldDesertEffectManager