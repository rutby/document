---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/10/28 11:01
---
local NoticeTipsManager = BaseClass("NoticeTipsManager", Singleton)
local ResourceManager = CS.GameEntry.Resource
local Localization = CS.GameEntry.Localization
local function __init(self)
    self.allPushTip = {}
    self.wait_timer_func = function(temp)
        self:WaitTimeRef(temp)
    end
    self.isSelf = false --是不是自己的
end

local function __delete(self)
    self.allPushTip = nil
    self.wait_timer_func = nil
    self.isSelf = nil
    self:DeleteTime()
end

local function NetPush(self,message)
    if message["id"]~=nil then
        local config ={}
        local id = message["id"]
        config.id = id
        config.type = GetTableData(TableName.Announcement, id, "type")
        config.base = GetTableData(TableName.Announcement, id, "base")
        config.content = GetTableData(TableName.Announcement, id, "content")
        local priority = GetTableData(TableName.Announcement, id, "priority")
        if priority == nil or priority == "" then
            priority = "0"
        end
        config.priority = tonumber(priority)
        if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
            if config.type == NoticeType.OccupyDragonBuild or config.type == NoticeType.GetSecretKey 
                    or config.type == NoticeType.SecretAppear or config.type == NoticeType.DragonTime or config.type == NoticeType.SecretAppearAdv
            then
                self:OnUpdateNotice(message, config)
            end
        else
            self:OnUpdateNotice(message, config)
        end
    end
end

local function OnUpdateNotice(self,message, config)
    local baseLevelArray = string.split(config.base, ';')
    if (table.count(baseLevelArray) == 2) then
        local minLevel = tonumber(baseLevelArray[1])
        local maxLevel = tonumber(baseLevelArray[2])
        if (DataCenter.BuildManager.MainLv < minLevel or DataCenter.BuildManager.MainLv > maxLevel) then
            return
        end
    end
    --if DataCenter.BuildManager.MainLv < tonumber(config.base) then
    --end
    if message["params"]~=nil then
        local params = message["params"]
        local noticeType = tonumber(config.type)
        if noticeType == NoticeType.FirstOccupyCity then
            --DataCenter.WorldAllianceCityDataManager:UpdateAllCityDataRequest()
            if params["cityId"]~=nil and params["cityId"]~=nil then
                local cityId = params["cityId"]
                local alAbbr = params["alAbbr"]
                local allianceId = params["alId"]
                local zoneId = tostring(cityId)
                local name = params["cityName"]
                if name ==nil or name == "" then
                    local nameKey = GetTableData(TableName.WorldCity, zoneId, "name")
                    name = Localization:GetString(nameKey)
                end
                local cityLv = GetTableData(TableName.WorldCity, zoneId, "level")
                local levelStr = "Lv."..tostring(cityLv)
                local str = Localization:GetString(tostring(config.content),alAbbr,levelStr,name)
                self:CheckShowAllianceCityTip(str,allianceId)
                self:ShowNotice(str,config.priority,noticeType)
            end
        elseif noticeType == NoticeType.OccupyEmptyCity then
            --DataCenter.WorldAllianceCityDataManager:UpdateAllCityDataRequest()
            if params["cityId"]~=nil and params["cityId"]~=nil then
                local cityId = params["cityId"]
                local alAbbr = params["alAbbr"]
                local allianceId = params["alId"]
                local zoneId = tostring(cityId)
                local name = params["cityName"]
                if name ==nil or name == "" then
                    local nameKey = GetTableData(TableName.WorldCity, zoneId, "name")
                    name = Localization:GetString(nameKey)
                end
                local cityLv = GetTableData(TableName.WorldCity, zoneId, "level")
                local levelStr = "Lv."..tostring(cityLv)
                local str = Localization:GetString(tostring(config.content),alAbbr,levelStr,name)
                self:CheckShowAllianceCityTip(str,allianceId)
                self:ShowNotice(str,config.priority,noticeType)
            end
        elseif noticeType == NoticeType.ChangeOccupyCity then
            --DataCenter.WorldAllianceCityDataManager:UpdateAllCityDataRequest()
            if params["cityId"]~=nil and params["cityId"]~=nil then
                local cityId = params["cityId"]
                local alAbbr = params["alAbbr"]
                local oldAbbr = params["oldAlAbbr"]
                local allianceId = params["alId"]
                local oldAllianceId = params["oldAlId"]
                local zoneId = tostring(cityId)
                local name = params["cityName"]
                if name ==nil or name == "" then
                    local nameKey = GetTableData(TableName.WorldCity, zoneId, "name")
                    name = Localization:GetString(nameKey)
                end
                local cityLv = GetTableData(TableName.WorldCity, zoneId, "level")
                local levelStr = "Lv."..tostring(cityLv)
                local str = Localization:GetString(config.content,alAbbr,oldAbbr,levelStr,name)
                self:CheckShowAllianceCityTip(str,allianceId,oldAllianceId)
                self:ShowNotice(str,config.priority,noticeType)
            end
        elseif noticeType == NoticeType.OccupyThrone then
            --DataCenter.WorldAllianceCityDataManager:UpdateAllCityDataRequest()
            if params["alAbbr"]~=nil and params["alId"]~=nil then
                local alAbbr = params["alAbbr"]
                local allianceId = params["alId"]
                local str = Localization:GetString(config.content,alAbbr)
                self:CheckShowAllianceCityTip(str,allianceId)
                self:ShowNotice(str,config.priority,noticeType)
            end
        elseif noticeType == NoticeType.RecruitHero then
            local name = params.name
            if params.abbr then
                name = "["..params.abbr.."]"..params.name
            end
            --是否盟友
            if params.allianceId == LuaEntry.Player.allianceId and params.name ~= LuaEntry.Player.name then
                name = string.format("<color='%s'>%s</color>",AllianceColor,name)
            end
            self.isSelf = (params.name == LuaEntry.Player.name)
            local heroName = GetTableData(HeroUtils.GetHeroXmlName(), params.heroId, "name")
            local colorName = string.format("<color='%s'>%s</color>",HeroUtils.GetQualityColorStr(params.quality),Localization:GetString(heroName))
            local str = Localization:GetString(config.content,name,colorName)
            local tab = {}
            tab.configId = params.heroId
            tab.quality  = params.quality
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.HeroCard_Use then
            --{{{ 后续添加
            --local userName = params.name
            --local heroId = params.heroId
            --local quality = params.quality
            --local colorStr = GetTableData(TableName.NewHeroesQuality, quality, "color")
            --local heroInfo = GameEntry.Data.DwellerController:GetDwellerByType(tonumber(heroId))
            --if heroInfo ~= nil then
            --    local heroName = CS.HeroListUtil.AddColor(heroInfo.name, colorStr)
            --    local content = Localization:GetString(config.content, userName , heroName)
            --    self:ShowNotice(str,config.priority)
            --end
            --elseif noticeType == NoticeType.HeroCard_Lottery then
            --    local userName = params.name
            --    local lotteryId = params.lotteryId
            --    local heroId = params.heroId
            --    local quality = params.quality
            --    local colorStr = GetTableData(TableName.HeroQuality, quality, "color")
            --    --local lotteryInfo = GameEntry.Data.Lottery:GetHeroLottery(lotteryId)
            --    --if lotteryInfo ~= nil then
            --    --    local lotteryName = Localization:GetString(lotteryInfo.name)
            --    --    local heroInfo = GameEntry.Data.DwellerController:GetDwellerByType(tonumber(heroId))
            --    --    if heroInfo ~= nil then
            --    --        local heroName = CS.HeroListUtil.AddColor(heroInfo.name, colorStr)
            --    --        local content = Localization:GetString(config.content, userName , lotteryName , heroName)
            --    --        self:ShowNotice(str,config.priority)
            --    --    end
            --    --end
            --}}}
        elseif noticeType == NoticeType.NewServer_Act_Reward then
            --{{{ 后续添加
            local userName = params.name
            local actId = params.actId
            local type = params.type
            local heroId = nil
            local quality = nil
            -- 1 item ,2 hero 3 钻石
            local itemType = params.itemType
            local itemId = params.itemId
            local itemNum = params.itemNum
            local itemIndex = params.itemIndex

            --local actName = ""
            --local actInfo = DataCenter.ActivityListDataManager:GetActivityDataById(actId)      
            --if actInfo ~= nil then
            --    actName = Localization:GetString(actInfo.name)
            --end
            --if isNil(actName) then
            --    local activity_panel_table = CS.LF.LuaHelper.Table:GetDataRow(TableName.ActivityPanel, actId)
            --    if activity_panel_table ~= nil then
            --        actName = Localization:GetString(activity_panel_table:GetString("name"))
            --    end
            --end
            --
            --local colorStr = GetTableData(CSTableName.HeroQuality, quality, "color")
            --local heroConfig = CS.LF.LuaHelper.Table:GetDataRow(TableName.Heroes, heroId);
            --if heroConfig then
            --    local name = _lang(heroConfig:GetString("name"))
            --    local heroName = CS.HeroListUtil.AddColor(name, colorStr)
            --    local content = _lang(config.content, userName ,actName , heroName)
            --    NoticeTipsManager.ShowNotice(content, config.priority)
            --end
            --if itemType ~= nil then
            --    -- printInfo("打印出来===itemType="..itemType..",itemId= "..itemId..",itemNum="..itemNum)
            --    ------------------------------
            --    local itemName = nil
            --    if itemType == RewardType.GOODS then--道具
            --        local itemInfo = ItemUtil.genItemInfo(itemId,1)
            --        if itemInfo ~= nil then
            --            itemName = CS.HeroListUtil.AddColor(_lang(itemInfo.name), ItemUtil:GetQualityColor(itemInfo.quality))
            --        end
            --    elseif itemType == RewardType.HERO then--英雄
            --        local name ,_, quality = ItemUtil.getHeroInfo(itemId)
            --        local colorStr = CS.LF.LuaHelper.Table:GetString(CSTableName.HeroQuality, quality , "color")
            --        itemName = CS.HeroListUtil.AddColor(name, colorStr)
            --
            --    elseif itemType == RewardType.GOLD or type == RewardType.MONEY or RewardType.EXP or RewardType.DIAMOND then
            --        local name = CS.CommonUtils.GetPropById(itemId, "name", CSTableName.Res_type)
            --        if name ~= nil then
            --            itemName = _lang(name).."X"..itemNum
            --        end
            --    end
            --    local dialogId = ActivityControllerInst.newServerCon:GetDialogId(1 , itemType , itemIndex)
            --    -- printInfo("打印测试公告信息，使用道具内容11="..dialogId)
            --    local content = _lang(dialogId, userName ,actName , itemName)
            --    NoticeTipsManager.ShowNotice(content, config.priority)
            --    ------------------------------
            --end
            --}}}
        elseif noticeType == NoticeType.RadarRally then
            local userName = params["userName"]
            local activityId = params["activityId"]
            local heroId = params["heroId"]

            local activityLine = LocalController:instance():getLine(TableName.ActivityPanel, activityId)
            local activityName = Localization:GetString(activityLine.name)
            local heroLine = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroId)
            local heroName = Localization:GetString(heroLine.name)
            local heroQuality = tonumber(heroLine.init_quality_level)

            local str = Localization:GetString(tostring(config.content), userName, activityName, heroName)
            local tab =
            {
                configId = heroId,
                quality = heroQuality
            }
            self:ShowNotice(str, config.priority, noticeType, tab)
        elseif noticeType == NoticeType.AlElectResult then
            local alName = params["allianceName"]
            local userName = params["userName"]

            local str = Localization:GetString(tostring(config.content), userName, alName)
            self:ShowNotice(str, config.priority, noticeType)
        elseif noticeType == NoticeType.KingSetPosition then
            local kName = params["kingName"]
            local targetName = params["targetName"]
            local positionId = params["positionId"]
            local pName = ""
            local template = DataCenter.GovernmentTemplateManager:GetTemplate(tonumber(positionId))
            if template ~= nil then
                pName = Localization:GetString(template.name)
            end
            local str = Localization:GetString(tostring(config.content),kName,targetName,pName)
            self:ShowNotice(str, config.priority, noticeType)
        elseif noticeType == NoticeType.CrossServer then
            local name = params["name"]
            local abbr = params["alAbbr"]
            if abbr~=nil and abbr~="" then
                name = "["..abbr.."]"..params.name
            end
            local serverId = params["server"]
            name = string.format("<color=#dd2828> %s</color>",name)
            serverId = string.format("<color=#dd2828> %s</color>",serverId)
            local srcServerId = LuaEntry.Player:GetSelfServerId()
            srcServerId = string.format("<color=#B5F831> %s</color>",srcServerId)
            
            local str = Localization:GetString(tostring(config.content), serverId,name,srcServerId)
            self:ShowNotice(str, config.priority, noticeType)
        elseif noticeType == NoticeType.AcquireHero then
            local name = params.userName
            if params.abbr then
                name = "["..params.abbr.."]"..params.userName
            end
            if params.allianceId == LuaEntry.Player.allianceId and params.userName ~= LuaEntry.Player.name then
                name = string.format("<color='%s'>%s</color>",AllianceColor,name)
            end
            local rarity = GetTableData(HeroUtils.GetHeroXmlName(), params.heroId, "rarity")
            local heroName = string.format("<color='%s'>%s</color>", HeroUtils.GetRarityColorStr(rarity),Localization:GetString( GetTableData(HeroUtils.GetHeroXmlName(), params.heroId, "name")))
            local str = Localization:GetString(config.content,name,heroName)
            local tab = {}
            tab.configId = params.heroId
            tab.quality  = params.quality
            tab.loop = GetTableData(TableName.Announcement, config.id, "loop")
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.OccupyDragonBuild then
            local name = params.allianceName
            if params.allianceAbbr then
                name = "["..params.allianceAbbr.."]"..params.allianceName
            end
            if params.allianceId ~= LuaEntry.Player.allianceId then
                name = string.format("<color=#FC514D>%s</color>",name)
            else
                name = string.format("<color=#40C4F2>%s</color>",name)
            end
            local buildName = ""
            local template = DataCenter.DragonBuildTemplateManager:GetTemplate(params.buildingId)
            if template~=nil then
                buildName = Localization:GetString(template.name)
            end
            local str = Localization:GetString(config.content,name,buildName)
            local tab = {}
            tab.loop = GetTableData(TableName.Announcement, config.id, "loop")
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.GetSecretKey then
            local name = params.userName
            if params.allianceAbbr then
                name = "["..params.allianceAbbr.."]"..params.userName
            end
            if params.allianceId ~= LuaEntry.Player.allianceId then
                name = string.format("<color=#FC514D>%s</color>",name)
            else
                name = string.format("<color=#40C4F2>%s</color>",name)
            end
            local str = Localization:GetString(config.content,name)
            local tab = {}
            tab.loop = GetTableData(TableName.Announcement, config.id, "loop")
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.SecretAppear then
            local str = Localization:GetString(config.content)
            local tab = {}
            tab.loop = GetTableData(TableName.Announcement, config.id, "loop")
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.SecretAppearAdv then
            local str = Localization:GetString(config.content)
            local tab = {}
            tab.loop = GetTableData(TableName.Announcement, config.id, "loop")
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.DragonTime then
            local timeNum = params.timeNum
            local str = Localization:GetString(config.content,timeNum)
            local tab = {}
            tab.loop = GetTableData(TableName.Announcement, config.id, "loop")
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.ActBossOpen then
            local str = Localization:GetString(tostring(config.content))
            EventManager:GetInstance():Broadcast(EventId.ShowActBossOpen)
            self:ShowNotice(str,config.priority,noticeType)
        elseif noticeType == NoticeType.ActBossClose then
            local str = Localization:GetString(tostring(config.content))
            EventManager:GetInstance():Broadcast(EventId.ShowActBossClose)
            self:ShowNotice(str,config.priority,noticeType)
        elseif noticeType == NoticeType.AllianceCityBegin then
            local str = Localization:GetString(tostring(config.content))
            self:ShowNotice(str,config.priority,noticeType)
        elseif noticeType == NoticeType.DecorationItemGet then
            local name = params["name"]
            --local abbr = params["abbr"]
            local goodId = toInt(params["goodsId"])
            local itemName = DataCenter.ItemTemplateManager:GetName(goodId)
            local str = Localization:GetString(tostring(config.content), name, itemName,params.goodsNum)
            local tab = {}
            tab.loop = GetTableData(TableName.Announcement, config.id, "loop")
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.DecorationSend then
            local goodId = toInt(params["goodsId"])
            local itemName = DataCenter.ItemTemplateManager:GetName(goodId)
            local senderName = ""
            local receiverName = ""
            if params["sendUserInfo"] then
                senderName = "#"..params["sendUserInfo"]["serverId"]
                if not string.IsNullOrEmpty(params["sendUserInfo"]["abbr"]) then
                    senderName = senderName.."["..params["sendUserInfo"]["abbr"].."]"
                end
                senderName = senderName..params["sendUserInfo"]["name"]
            end
            if params["targetUserInfo"] then
                receiverName = "#"..params["targetUserInfo"]["serverId"]
                if not string.IsNullOrEmpty(params["targetUserInfo"]["abbr"]) then
                    receiverName = receiverName.."["..params["targetUserInfo"]["abbr"].."]"
                end
                receiverName = receiverName..params["targetUserInfo"]["name"]
            end
            local str = Localization:GetString(tostring(config.content), receiverName, senderName, itemName)
            local tab = {}
            tab.loop = GetTableData(TableName.Announcement, config.id, "loop")
            self:ShowNotice(str,config.priority,noticeType,tab)
        elseif noticeType == NoticeType.KingRefreshDesert then
            local str = Localization:GetString(tostring(config.content))
            self:ShowNotice(str,config.priority,noticeType)
        end
    end
end

local function AddItem(self,data)
    if #self.allPushTip > 0 then
        local first = self.allPushTip[1]
        local priority = first.priority
        local dataPriority = data.priority
        if dataPriority > priority then
            -- 添加在最前面
            table.insert(self.allPushTip, 1, data)
        else
            local index = 1
            for i, v in ipairs(self.allPushTip) do
                if dataPriority > v.priority then
                    break
                end
                index = index + 1
            end
            table.insert(self.allPushTip, index, data)
        end
    else
        table.insert(self.allPushTip, data)
    end
end

local function GetNotice(self,isHero)
    if #self.allPushTip > 0 then
        for i = 1, table.count(self.allPushTip) do
            if isHero then
                if self.allPushTip[i].noticeType == NoticeType.RecruitHero or self.allPushTip[i].noticeType == NoticeType.AcquireHero or self.allPushTip[i].noticeType == NoticeType.RadarRally then
                    return table.remove(self.allPushTip, i)
                end
            else
                if self.allPushTip[i].noticeType ~= NoticeType.RecruitHero or self.allPushTip[i].noticeType ~= NoticeType.AcquireHero or self.allPushTip[i].noticeType ~= NoticeType.RadarRally then
                    return table.remove(self.allPushTip, i)
                end
            end
        end
    end
    self.allPushTip = {}
    return nil
end

local function CheckNotice(self)
    return #self.allPushTip > 0
end

local function ShowTip(noticeType)
    if noticeType == NoticeType.RecruitHero or noticeType == NoticeType.AcquireHero or noticeType == NoticeType.RadarRally then
        if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UINoticeTips) then
            local isHero = 1
            EventManager:GetInstance():Broadcast(EventId.UI_SHOWNOTICE,isHero)
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UINoticeHeroTips,{anim = true,playEffect = false})
        end
    else
        if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UINoticeHeroTips) then
            local isNotice = 2
            EventManager:GetInstance():Broadcast(EventId.UI_SHOWNOTICE,isNotice)
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UINoticeTips,{anim = true,playEffect = false})
        end
    end
    -- 
end

-- 外部接口
local function ShowNotice(self,content, priority,noticeType,tab)
    local data = {}
    data.content = content
    data.priority = priority
    data.noticeType = noticeType
    data.tab = tab
    self:AddItem(data)
    if noticeType == NoticeType.RecruitHero and self.isSelf then
        self:WaitTime(noticeType)
        return
    end
    self.ShowTip(noticeType)
end

local function DeleteTime(self)
    if self.wait_timer ~= nil then
        self.wait_timer:Stop()
        self.wait_timer = nil
    end
end

local function WaitTime(self,noticeType)
    if self.wait_timer == nil then
        self.wait_timer = TimerManager:GetInstance():GetTimer(8, self.wait_timer_func , noticeType, false,false,false)
        self.wait_timer:Start()
    end
end

local function WaitTimeRef(self,noticeType)
    self:DeleteTime()
    self.ShowTip(noticeType)
end

local function CheckShowAllianceCityTip(self,content,allianceId,oldAllianceId)
    if allianceId~=nil then
        if allianceId == LuaEntry.Player.allianceId then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIWorldRuinsPopUp,content)
        end
    end
end
NoticeTipsManager.__init = __init
NoticeTipsManager.__delete = __delete
NoticeTipsManager.NetPush = NetPush
NoticeTipsManager.OnUpdateNotice = OnUpdateNotice
NoticeTipsManager.AddItem = AddItem
NoticeTipsManager.GetNotice = GetNotice
NoticeTipsManager.CheckNotice = CheckNotice
NoticeTipsManager.ShowTip = ShowTip
NoticeTipsManager.ShowNotice = ShowNotice
NoticeTipsManager.CheckShowAllianceCityTip =CheckShowAllianceCityTip
NoticeTipsManager.DeleteTime = DeleteTime
NoticeTipsManager.WaitTime = WaitTime
NoticeTipsManager.WaitTimeRef = WaitTimeRef
return NoticeTipsManager