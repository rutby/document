---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2021/9/2 14:26
---
local TroopNameLabelManager = BaseClass("TroopNameLabelManager", Singleton)
local ResourceManager = CS.GameEntry.Resource
local TroopNameLabel = require "Scene.TroopNameLabel.TroopNameLabel"

local SHOW_LOD_MAX = 3

local function __init(self)
    self.allTips = {} --所有建筑标签
    self.OnCreateTips ={}
    self.cacheNameList = {}
    self:AddListener()
    self.showName = Setting:GetBool("ShowTroopName",true)
end

local function __delete(self)
    self:RemoveListener()
    for k,v in pairs(self.allTips) do
        local request = v.request
        v:OnDestroy()
        request:Destroy()
    end
    self.allTips = nil
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.ShowTroopName, self.ShowTroopNameSignal)
    EventManager:GetInstance():AddListener(EventId.HideTroopName, self.HideTroopNameSignal)
    EventManager:GetInstance():AddListener(EventId.CheckTroopStateIcon, self.CheckTroopStateIconSignal)
    EventManager:GetInstance():AddListener(EventId.ChangeCameraLod, self.ChangeCameraLodSignal)
    EventManager:GetInstance():AddListener(EventId.PveLevelEnter, self.RemoveAllTips)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():AddListener(EventId.AllianceQuitOK, self.OnRefreshSelfMarchNameSignal)
    EventManager:GetInstance():AddListener(EventId.AllianceBaseDataUpdated, self.OnRefreshSelfMarchNameSignal)
    EventManager:GetInstance():AddListener(EventId.ChangeShowTroopNameState, self.OnRefreshTroopNameSignal)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.ShowTroopName, self.ShowTroopNameSignal)
    EventManager:GetInstance():RemoveListener(EventId.HideTroopName, self.HideTroopNameSignal)
    EventManager:GetInstance():RemoveListener(EventId.CheckTroopStateIcon, self.CheckTroopStateIconSignal)
    EventManager:GetInstance():RemoveListener(EventId.ChangeCameraLod, self.ChangeCameraLodSignal)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelEnter, self.RemoveAllTips)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():RemoveListener(EventId.AllianceQuitOK, self.OnRefreshSelfMarchNameSignal)
    EventManager:GetInstance():RemoveListener(EventId.AllianceBaseDataUpdated, self.OnRefreshSelfMarchNameSignal)
    EventManager:GetInstance():RemoveListener(EventId.ChangeShowTroopNameState, self.OnRefreshTroopNameSignal)
end

local function ChangeCameraLodSignal(lod)
    TroopNameLabelManager:GetInstance():UpdateLod(lod)
end

local function OnRefreshSelfMarchNameSignal()
    TroopNameLabelManager:GetInstance():OnRefreshSelfMarchName()
end

local function OnRefreshTroopNameSignal()
    TroopNameLabelManager:GetInstance():OnRefreshTroopName()
end

local function OnRefreshTroopName(self)
    local showName = Setting:GetBool("ShowTroopName",true)
    if self.showName~=showName then
        if self.showName == true then
            self:RemoveAllEffect()
        else
            self:CreateCacheNameList()
        end
        self.showName = showName
    end
end
local function OnRefreshSelfMarchName(self)
    local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
    local count = #selfMarch
    if count > 0 then
        for i = 1, count do
            local march = selfMarch[i]
            if self.allTips[march.uuid]~=nil then
                self.allTips[march.uuid]:SetName(march)
                self.allTips[march.uuid]:SetLodTypeByMarchInfo(march)
            end
        end
    end
end
local function UpdateLod(self, lod)
    if self.lodCache ~=lod then
        self.lodCache =lod
        if self.lodCache >= 1 and self.lodCache <= SHOW_LOD_MAX then
            self:CreateCacheNameList()
        end
    end
end

local function CreateCacheNameList(self)
    if self.showName ==false then
        return
    end
    if self.cacheNameList~=nil then
        for k,v in pairs(self.cacheNameList) do
            self:CheckShowEffect(k)
        end
        self.cacheNameList = {}
    end
end

local function RemoveAllTips(data)
    TroopNameLabelManager:GetInstance():RemoveAllEffect()
end

local function OnEnterWorld(data)
end
local function OnEnterCity(data)
    TroopNameLabelManager:GetInstance():RemoveAllEffect()
end

local function RemoveOneEffect(self,uuid)
    local temp = self.allTips[uuid]
    if temp ~= nil then
        local request = temp.request
        temp:OnDestroy()
        request:Destroy()
        self.allTips[uuid] = nil
    end
    temp = self.OnCreateTips[uuid]
    if temp ~= nil then
        temp:Destroy()
        self.OnCreateTips[uuid] = nil
    end
end

local function RemoveAllEffect(self)
    for k,v in pairs(self.allTips) do
        local request = v.request
        v:OnDestroy()
        request:Destroy()
    end
    self.allTips = {}
    for k,v in pairs(self.OnCreateTips) do
        v:Destroy()
    end
    self.OnCreateTips = {}
end

local function HideTroopNameSignal(uuid)
    TroopNameLabelManager:GetInstance():RemoveOneEffect(tonumber(uuid))
    
end

local function ShowTroopNameSignal(uuid)
    TroopNameLabelManager:GetInstance():CheckShowEffect(tonumber(uuid))
end

local function CheckTroopStateIconSignal(uuid)
    TroopNameLabelManager:GetInstance():CheckTroopStateIcon(tonumber(uuid))
end

local function CheckShowEffect(self,marchUuid)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    local info = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
    if not info then
        return
    end
    if (info ~= nil and info.isCameraFollow) or TroopHeadUIManager:GetInstance():HasHeadUI(marchUuid) then
        return
    end
    
    if info:GetMarchType() == NewMarchType.GOLLOES_EXPLORE and info:GetMarchStatus() == MarchStatus.GOLLOES_EXPLORING then
        local golloesMarch = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
        if golloesMarch and info.ownerUid == LuaEntry.Player.uid then
            DataCenter.GolloesCampManager:AddOrUpdateOneExploringTime(golloesMarch)
        end
        return
    end
    
    if info~=nil and (info:GetMarchType() == NewMarchType.NORMAL or info:GetMarchType() == NewMarchType.ASSEMBLY_MARCH) then
        local troop = WorldTroopManager:GetInstance():GetTroop(marchUuid)
        if troop~=nil then
			if troop:IsBattle() then
				return
			end
            local transform = troop:GetTransform()
            if self.allTips[marchUuid] ==nil and self.OnCreateTips[marchUuid] == nil then
                --Logger.Log("[Troop] WorldTroopName1 " .. tostring(marchUuid))\
                if (self.lodCache ~= nil and self.lodCache > SHOW_LOD_MAX) or (self.showName ==false) then
                    self.cacheNameList[marchUuid] = true
                    return
                end
                local request = ResourceManager:InstantiateAsync(UIAssets.WorldTroopName)
                self.OnCreateTips[marchUuid] = request
                request:completed('+', function()
                    self.OnCreateTips[marchUuid] =nil
                    if request.isError then
                        return
                    end
                    if transform==nil then
                        request:Destroy()
                        return;
                    end
                    request.gameObject:SetActive(true)
                    request.gameObject.transform:SetParent(transform)
                    request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    request.gameObject.transform:Set_localPosition(0, 0, 0)
                    local labelUI = TroopNameLabel.New()
                    labelUI:OnCreate(request)
                    self.allTips[marchUuid] = labelUI
                    self:ShowTroopName(marchUuid)
                    --Logger.Log("[Troop] WorldTroopName2 " .. tostring(marchUuid))
                    self:CheckTroopStateIcon(marchUuid)
                end)
            else
                if self.allTips[marchUuid]~=nil then
                    self:ShowTroopName(marchUuid)
                    self:CheckTroopStateIcon(marchUuid)
                end
            end
        end
    end
    
end

local function CheckTroopStateIcon(self,marchUuid)
    if self.allTips[marchUuid]~=nil then
        local info = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
        if info~=nil then
            if info:GetIsBroken() == true and info:GetMarchType() ~= NewMarchType.ASSEMBLY_MARCH then
                self.allTips[marchUuid]:ShowIcon(TroopIconShowState.Broken)
            --elseif info.ownerUid == LuaEntry.Player.uid and info:GetMarchStatus() == MarchStatus.STATION then
            --    self.allTips[marchUuid]:ShowIcon(TroopIconShowState.Idle)
            elseif info:GetMarchStatus() == MarchStatus.WAIT_THRONE and info.inBattle == false then
                self.allTips[marchUuid]:ShowIcon(TroopIconShowState.Wait)
            else
                self.allTips[marchUuid]:ShowIcon(TroopIconShowState.Hide)
            end
        end
    end 
end

local function ShowTroopName(self,marchUuid)
    if self.allTips[marchUuid]~=nil then
        local info = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
        if info~=nil then
            self.allTips[marchUuid]:SetName(info)
            self.allTips[marchUuid]:SetLodTypeByMarchInfo(info)
        end
    end
end




TroopNameLabelManager.__init = __init
TroopNameLabelManager.__delete = __delete
TroopNameLabelManager.AddListener = AddListener
TroopNameLabelManager.RemoveListener = RemoveListener
TroopNameLabelManager.CheckTroopStateIcon = CheckTroopStateIcon
TroopNameLabelManager.ShowTroopName = ShowTroopName
TroopNameLabelManager.RemoveOneEffect = RemoveOneEffect
TroopNameLabelManager.CheckShowEffect = CheckShowEffect
TroopNameLabelManager.HideTroopNameSignal = HideTroopNameSignal
TroopNameLabelManager.ShowTroopNameSignal = ShowTroopNameSignal
TroopNameLabelManager.CheckTroopStateIconSignal =CheckTroopStateIconSignal
TroopNameLabelManager.ChangeCameraLodSignal = ChangeCameraLodSignal
TroopNameLabelManager.UpdateLod = UpdateLod
TroopNameLabelManager.CreateCacheNameList = CreateCacheNameList
TroopNameLabelManager.RemoveAllEffect  = RemoveAllEffect
TroopNameLabelManager.RemoveAllTips = RemoveAllTips
TroopNameLabelManager.OnEnterWorld = OnEnterWorld
TroopNameLabelManager.OnEnterCity = OnEnterCity
TroopNameLabelManager.OnRefreshSelfMarchNameSignal =OnRefreshSelfMarchNameSignal
TroopNameLabelManager.OnRefreshSelfMarchName =OnRefreshSelfMarchName
TroopNameLabelManager.OnRefreshTroopNameSignal =OnRefreshTroopNameSignal
TroopNameLabelManager.OnRefreshTroopName = OnRefreshTroopName
return TroopNameLabelManager