---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/2/16 17:59
---

local MailBattleOneRound = require "DataCenter.MailData.BattleReport.MailBattleOneRound"
local BattleReport = require "DataCenter.MailData.DataExtModule.MailBattleReport"
local MailChampionBattleReport = BaseClass("MailChampionBattleReport", BattleReport)
function MailChampionBattleReport:__init()
    -- 所有回合的集合
    self._fightRoundList = {}
    self._battlePointId = 0
    self._battleBuffList = {}
    self.version = 0
    self.showRoundList = {}
end

--function MailChampionBattleReport:GetBattleFightPointId()
--    return self._battlePointId
--end

function MailChampionBattleReport:ParseContent(mailContent)
    if (table.IsNullOrEmpty(mailContent)) then
        return
    end
    local battleReport = mailContent["battleContent"] or ""
    local pb_BattleReport = PBController.ParsePb1(battleReport, "protobuf.DeliteReport") or {}
    self.mailType = MailType.ELITE_FIGHT_MAIL
    -- 解析回合战斗
    local fightReports = pb_BattleReport["fightReports"] or {}
    for _, roundItem in pairs(fightReports) do
        --自己的数据放在左边
        if pb_BattleReport.otherInfo.uid == LuaEntry.Player.uid then
            roundItem.selfInfo = pb_BattleReport.otherInfo
            roundItem.otherInfo = pb_BattleReport.selfInfo
            local function swapValue(obj, name1, name2)
                local tmp = obj[name1]
                obj[name1] = obj[name2]
                obj[name2] = tmp
            end
            
            swapValue(roundItem, "otherArmyResult", "selfArmyResult")
            swapValue(roundItem, "otherBattleEffectGroups", "selfBattleEffectGroups")
            if roundItem.fightResult == 0 then
                roundItem.fightResult = 1
            elseif roundItem.fightResult == 1 then
                roundItem.fightResult = 0
            elseif roundItem.fightResult == FightResult.DRAW then
                roundItem.fightResult = 0
            end
        else
            roundItem.selfInfo = pb_BattleReport.selfInfo
            roundItem.otherInfo = pb_BattleReport.otherInfo
            if roundItem.fightResult == FightResult.DRAW then
                roundItem.fightResult = 1
            end
        end

        local battleRound = MailBattleOneRound.New()
        battleRound:ParseContent(roundItem,true)
        self:InsertRound(battleRound)
    end

    -- 解析战斗坐标点
    if (pb_BattleReport["battlePointInfo"] and pb_BattleReport["battlePointInfo"]["pointId"]) then
        self._battlePointId = pb_BattleReport["battlePointInfo"]["pointId"]
    end

    -- 解析战斗胜利/失败
    local battleResult = pb_BattleReport["battleResult"] or 0
    self._battleWin = battleResult == 0

    -- 当前战报所属服务器第几轮战斗
    self._startRound = pb_BattleReport["startRound"] or 0
    self.phase = pb_BattleReport.parse or 0
    self.round = pb_BattleReport.round or 0
    
    self.version = pb_BattleReport["version"] or 0
    ---- 部队增益
    --local battleEffectGroup = pb_BattleReport["selfBattleEffectGroups"] or {}
    --self:InitMySideBattleEffect(battleEffectGroup)
end
--
----[[
--将每次回合的数据插入到列表中显示
--在这个地方需要做一些处理,有些类型的战报比如打有驻扎的炮台,此时需要拆成两块来显示
--]]
--function MailBattleReport:InsertRound( battleRound )
--    -- 检测是需要分成几轮显示,如果一轮的话,直接塞入数据,如果两轮或多轮按照逻辑行为进行拆分
--    local roundCnt = battleRound:GetRoundCnt()
--    if (roundCnt == 1) then
--        self._fightRoundList[#self._fightRoundList+1] = battleRound
--    elseif roundCnt == 2 then
--        self:InsertRoundItem(battleRound)
--    end
--end
--
----[[
--箭塔模式下进行数据拆分插入
--    大致思路:
--    第一,在两轮中,第一轮设置战斗类型是箭塔,界面中按照箭塔模式显示血条,第二轮设置类型为编队,按照编队的样式进行展示
--    第二,需要知道双方哪边是箭塔,箭塔方不做处理,另一方获取出总的属性值后,获取出本身对于箭塔数据的系数,乘以系数后,强制设置属性数据缓存,此时为第一轮的数据
--    第三,在第二轮中,使用总数减去上一轮的数据,强制设置到缓存中,同时设置战斗类型为编队
--]]
--function MailBattleReport:InsertRoundItem( battleRound )
--    -- 第一轮显示箭塔本身
--    local sBattleType = battleRound:GetSelfBattleType()
--    local tBattleType = battleRound:GetTargetBattleType()
--
--    if (sBattleType == BattleType["Turret"]) then
--        self:SetSimpleRound_Turret(battleRound, true)
--    elseif sBattleType == BattleType["ALLIANCE_OCCUPIED_CITY"] then
--        self:SetSimpleRound_Neutral(battleRound, true)
--    elseif tBattleType == BattleType["Turret"] then
--        self:SetSimpleRound_Turret(battleRound, false)
--    elseif tBattleType == BattleType["ALLIANCE_OCCUPIED_CITY"] then
--        self:SetSimpleRound_Neutral(battleRound, false)
--    end
--end
--
--function MailBattleReport:SetSimpleRound_Turret(battleRound, mySideIsTurret)
--    local totalCnt = 0
--    local wounded = 0
--    local injured = 0
--    local dead = 0
--    local lost = 0
--    local cure = 0
--    local alive = 0
--
--    local sUuid = self:GetSimpleCombatUnit(battleRound, mySideIsTurret):GetMarchId()
--    local damagePercent = 0.0
--    local armyResult = nil
--    if (mySideIsTurret) then
--        armyResult = battleRound:GetOtherArmyResult()
--    else
--        armyResult = battleRound:GetSelfArmyResult()
--    end
--    if (armyResult ~= nil) then
--        damagePercent = armyResult:GetDamagePercentInfo()[sUuid] or 0
--    end
--    totalCnt = battleRound:GetArmyObjAttTotalCnt(eMailSoldierAttr.Total, not mySideIsTurret)
--    wounded = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Wounded, not mySideIsTurret) --轻伤
--    injured = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Injured, not mySideIsTurret) --重伤
--    dead = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Dead, not mySideIsTurret) -- 死亡
--    lost = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Lost, not mySideIsTurret) -- 损失
--    cure = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Cure, not mySideIsTurret) -- 治疗
--
--    -- 设置当前数据
--    local tmpWounded = Mathf.Ceil(wounded * damagePercent)
--    local tmpInjured = Mathf.Ceil(injured * damagePercent)
--    local tmpDead = Mathf.Ceil(dead * damagePercent)
--    local tmpLost = Mathf.Ceil(lost * damagePercent)
--    local tmpCure = Mathf.Ceil(cure * damagePercent)
--    alive = totalCnt - tmpLost
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Wounded, not mySideIsTurret, tmpWounded)
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Injured, not mySideIsTurret, tmpInjured)
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Dead, not mySideIsTurret, tmpDead)
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Lost, not mySideIsTurret, tmpLost)
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Cure, not mySideIsTurret, tmpCure)
--    self._fightRoundList[#self._fightRoundList+1] = battleRound
--
--    local battleRound_Second = DeepCopy(battleRound)
--    if (mySideIsTurret) then
--        battleRound_Second:SetSelfBattleType(BattleType["Formation"])
--    else
--        battleRound_Second:SetTargetBattleType(BattleType["Formation"])
--    end
--
--    battleRound_Second:SetArmyObjAttTotalCntCache(eMailSoldierAttr.Total, not mySideIsTurret, alive)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Wounded, not mySideIsTurret, wounded-tmpWounded)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Injured, not mySideIsTurret, injured-tmpInjured)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Dead, not mySideIsTurret, dead-tmpDead)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Lost, not mySideIsTurret, lost-tmpLost)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Cure, not mySideIsTurret, cure-tmpCure)
--
--    self._fightRoundList[#self._fightRoundList+1] = battleRound_Second
--end
--
--function MailBattleReport:SetSimpleRound_Neutral(battleRound, mySideIsTurret)
--    local totalCnt = 0
--    local wounded = 0
--    local injured = 0
--    local dead = 0
--    local lost = 0
--    local cure = 0
--    local alive = 0
--
--    local sUuid = self:GetSimpleCombatUnit(battleRound, mySideIsTurret):GetMarchId()
--    local damagePercent = 0.0
--    local armyResult = nil
--    if (mySideIsTurret) then
--        armyResult = battleRound:GetOtherArmyResult()
--    else
--        armyResult = battleRound:GetSelfArmyResult()
--    end
--    if (armyResult ~= nil) then
--        damagePercent = armyResult:GetDamagePercentInfo()[sUuid] or 0
--    end
--    totalCnt = battleRound:GetArmyObjAttTotalCnt(eMailSoldierAttr.Total, not mySideIsTurret)
--    wounded = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Wounded, not mySideIsTurret) --轻伤
--    injured = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Injured, not mySideIsTurret) --重伤
--    dead = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Dead, not mySideIsTurret) -- 死亡
--    lost = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Lost, not mySideIsTurret) -- 损失
--    cure = battleRound:GetSoldierAttrDisById(eMailSoldierAttr.Cure, not mySideIsTurret) -- 治疗
--
--    -- 设置当前数据
--    local tmpWounded = Mathf.Ceil(wounded * damagePercent)
--    local tmpInjured = Mathf.Ceil(injured * damagePercent)
--    local tmpDead = Mathf.Ceil(dead * damagePercent)
--    local tmpLost = Mathf.Ceil(lost * damagePercent)
--    local tmpCure = Mathf.Ceil(cure * damagePercent)
--    alive = totalCnt - tmpLost
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Wounded, not mySideIsTurret, tmpWounded)
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Injured, not mySideIsTurret, tmpInjured)
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Dead, not mySideIsTurret, tmpDead)
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Lost, not mySideIsTurret, tmpLost)
--    battleRound:SetSoldierAttrDisCacheById(eMailSoldierAttr.Cure, not mySideIsTurret, tmpCure)
--    self._fightRoundList[#self._fightRoundList+1] = battleRound
--
--    local battleRound_Second = DeepCopy(battleRound)
--    if (mySideIsTurret) then
--        battleRound_Second:SetSelfBattleType(BattleType["Formation"])
--    else
--        battleRound_Second:SetTargetBattleType(BattleType["Formation"])
--    end
--
--    battleRound_Second:SetArmyObjAttTotalCntCache(eMailSoldierAttr.Total, not mySideIsTurret, alive)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Wounded, not mySideIsTurret, wounded-tmpWounded)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Injured, not mySideIsTurret, injured-tmpInjured)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Dead, not mySideIsTurret, dead-tmpDead)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Lost, not mySideIsTurret, lost-tmpLost)
--    battleRound_Second:SetSoldierAttrDisCacheById(eMailSoldierAttr.Cure, not mySideIsTurret, cure-tmpCure)
--    local armyResult = mySideIsTurret and battleRound_Second:GetSelfArmyResult() or battleRound_Second:GetOtherArmyResult()
--    local members = armyResult:GetAllMembers() or {}
--    local userInfo = {}
--    if (mySideIsTurret) then
--        userInfo = battleRound_Second._selfInfo
--    else
--        userInfo = battleRound_Second._otherInfo
--    end
--    for i = 1, table.count(members) do
--        local oneMember = members[i]
--        if (not string.IsNullOrEmpty(oneMember.name)) then
--            userInfo["name"] = oneMember["name"]
--            userInfo["pic"] = oneMember["pic"]
--            userInfo["picVer"] = oneMember["picVer"]
--            userInfo["allianceInfo"] = {}
--            userInfo["allianceInfo"]["alAbbr"] = oneMember["alAbbr"]
--            if (mySideIsTurret) then
--                userInfo["pointId"] = armyResult:GetPointId()-- battleRound:GetTargetPos()
--                battleRound._selfInfo = userInfo
--            else
--                userInfo["pointId"] = battleRound:GetTargetPos()
--                battleRound._otherInfo = userInfo
--            end
--            break
--        end
--    end
--    self._fightRoundList[#self._fightRoundList+1] = battleRound_Second
--end
--
--function MailBattleReport:GetSimpleCombatUnit( battleRound, isMySide )
--    local armyResult = nil
--    if (isMySide) then
--        armyResult = battleRound:GetSelfArmyResult()
--    else
--        armyResult = battleRound:GetOtherArmyResult()
--    end
--    if (armyResult == nil) then
--        return
--    end
--    local afterArmyObj = armyResult:GetAfterArmyObj()
--    if (afterArmyObj == nil) then
--        return
--    end
--    local simpleCombatUnit = afterArmyObj:GetSimpleCombatUnit()
--    if (simpleCombatUnit == nil) then
--        return
--    end
--    return simpleCombatUnit
--end
--
--function MailBattleReport:GetStartRound()
--    return self._startRound
--end
--
---- 检索己方的部队增益
--function MailBattleReport:InitMySideBattleEffect( buffEffect )
--    self._battleBuffList = {}
--    for _, buffItem in pairs(buffEffect) do
--        local marchId = buffItem["memberUuid"]
--        local arrayEffect = buffItem["battleEffectInfos"]
--        self._battleBuffList[marchId] = arrayEffect
--    end
--end
--
--function MailBattleReport:GetMySideBattleEffect( marchId )
--    return self._battleBuffList[marchId] or {}
--end
--
---- 所有自己的士兵总数
--function MailBattleReport:GetSelfSoldierTotalCnt()
--    if (table.count(self._fightRoundList) == 0) then
--        return 0
--    end
--    return self._fightRoundList[1]:GetSelfSoldierTotalCnt()
--end
--
--function MailBattleReport:GetSelfSoldierTotalLose()
--    if (table.count(self._fightRoundList) == 0) then
--        return 0
--    end
--    return self._fightRoundList[#self._fightRoundList]:GetAfterArmyObjAttTotalCnt(eMailSoldierAttr.Lost, true, true)
--end
--
--
--function MailBattleReport:GetBuildingName( isMySide )
--    for _, roundItem in pairs(self._fightRoundList) do
--        local battleType = isMySide and roundItem:GetSelfBattleType() or roundItem:GetTargetBattleType()
--        if (battleType == BattleType["Building"] or
--                battleType == BattleType["Turret"] or
--                battleType == BattleType["City"]) then
--            return roundItem:GetBuildingName(isMySide)
--        end
--    end
--end
--
--function MailBattleReport:GetBuildingName_ForShare( isMySide )
--    for _, roundItem in pairs(self._fightRoundList) do
--        local battleType = isMySide and roundItem:GetSelfBattleType() or roundItem:GetTargetBattleType()
--        if (battleType == BattleType["Building"] or
--                battleType == BattleType["Turret"] or
--                battleType == BattleType["City"]) then
--            return roundItem:GetBuildingName(isMySide)
--        end
--    end
--end
--
--function MailBattleReport:GetTargetName()
--    local playerName = ""
--    local monsterName = ""
--    for _, roundItem in pairs(self._fightRoundList) do
--        if (roundItem:GetTargetBattleType() == BattleType["Monster"] or
--                roundItem:GetTargetBattleType() == BattleType["Boss"] or
--                roundItem:GetTargetBattleType() == BattleType["ALLIANCE_OCCUPIED_CITY"]) then
--            monsterName = monsterName .. roundItem:GetTargetName()
--            if (roundItem:GetTargetBattleType() == BattleType["ALLIANCE_OCCUPIED_CITY"] and
--                    not string.IsNullOrEmpty(monsterName)) then
--                return monsterName
--            end
--        else
--            playerName = playerName .. roundItem:GetTargetName()
--            break
--        end
--    end
--    if (string.IsNullOrEmpty(playerName)) then
--        return monsterName
--    else
--        return playerName
--    end
--end
--
--function MailBattleReport:GetTargetName_ForShare()
--    local playerName = nil
--    local monsterName = nil
--    for _, roundItem in pairs(self._fightRoundList) do
--        if (roundItem:GetTargetBattleType() == BattleType["Monster"] or
--                roundItem:GetTargetBattleType() == BattleType["Boss"] or
--                roundItem:GetTargetBattleType() == BattleType["ALLIANCE_OCCUPIED_CITY"]) then
--            monsterName = roundItem:GetTargetName_ForShare()
--            if (roundItem:GetTargetBattleType() == BattleType["ALLIANCE_OCCUPIED_CITY"] and
--                    monsterName ~= nil) then
--                return monsterName
--            end
--        else
--            playerName = roundItem:GetTargetName_ForShare()
--            break
--        end
--    end
--    if (playerName == nil) then
--        return monsterName
--    else
--        return playerName
--    end
--end
--
--
---- 获取所有道具奖励
--function MailBattleReport:GetTotalItemReward()
--    local rewardList = {}
--    for _, oneFight in pairs(self._fightRoundList) do
--        local rewardItemArr = oneFight:GetRewardItemArr()
--        for itemId, itemCnt in pairs(rewardItemArr) do
--            rewardList[itemId] = rewardList[itemId] and rewardList[itemId] + itemCnt or itemCnt
--        end
--    end
--    return rewardList
--end
--
---- 是否胜利了
--function MailBattleReport:GetBattleWin()
--    for _, roundItem in pairs(self._fightRoundList) do
--        if (roundItem:GetBattleResult() ~= FightResult.SELF_WIN and
--                roundItem:GetBattleResult() ~= FightResult.DRAW) then
--            return false
--        end
--    end
--    return true
--end
--
--function MailBattleReport:GetBattleResultStatus()
--    local isDraw = false
--    for _, roundItem in pairs(self._fightRoundList) do
--        if (roundItem:GetBattleResult() == FightResult.OTHER_WIN) then
--            return FightResult.OTHER_WIN
--        elseif roundItem:GetBattleResult() == FightResult.DRAW then
--            isDraw = true
--        end
--    end
--    if (isDraw == false) then
--        return FightResult.SELF_WIN
--    end
--    return FightResult.DRAW
--end
--
---- 获取总共的战斗轮数
--function MailBattleReport:GetTotalRoundCnt()
--    return table.count(self._fightRoundList)
--end
--
---- 获取第N轮的战斗信息
--function MailBattleReport:GetFightReportByRoundIndex( index )
--    if ( index < 1 or index > table.count(self._fightRoundList) ) then
--        return nil
--    end
--    return self._fightRoundList[index]
--end

return MailChampionBattleReport