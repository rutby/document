---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 7/27/21 3:32 PM
---
--[[
    这个是每一轮战斗的数据
]]

local rapidjson = require "rapidjson"
local Localization = CS.GameEntry.Localization

local MailBattleArmyinfoBase = require "DataCenter.MailData.BattleReport.MailArmyResultBase"
local BattleEffectList = require "DataCenter.MailData.BattleReport.BattleEffectData.BattleEffectList"
local HeroBattleEffect = require "DataCenter.MailData.BattleReport.BattleEffectData.HeroBattleEffect"
local MailArmyResult_Building = require "DataCenter.MailData.BattleReport.MailArmyResult_Building"
local MailArmyResult_City = require "DataCenter.MailData.BattleReport.MailArmyResult_City"
local MailArmyResult_AllianceBuild = require "DataCenter.MailData.BattleReport.MailArmyResult_AllianceBuild"
local MailArmyResult_DragonBuild = require "DataCenter.MailData.BattleReport.MailArmyResult_DragonBuild"
local MailArmyResult_March = require "DataCenter.MailData.BattleReport.MailArmyResult_March"
local MailArmyResult_Pve = require "DataCenter.MailData.BattleReport.MailArmyResult_Pve"
local MailArmyResult_Monster = require "DataCenter.MailData.BattleReport.MailArmyResult_Monster"
local MailArmyResult_Team = require "DataCenter.MailData.BattleReport.MailArmyResult_Team"
local MailArmyResult_Neutral = require "DataCenter.MailData.BattleReport.MailArmyResult_Neutral"
local MailArmyResult_Desert = require "DataCenter.MailData.BattleReport.MailArmyResult_Desert"
local UnitAttrInfo = require "DataCenter.MailData.BattleReport.UnitAttrInfo.UnitAttrInfo"
local MailReportPlayerReward = require "DataCenter.MailData.BattleReport.MailReportPlayerReward"
local MailBattleOneRound = BaseClass("MailBattleOneRound")
function MailBattleOneRound:__init()

    self.allRewards = {}
    -- 个人信息
    self._selfInfo = nil
    self._otherInfo = nil --对方

    -- 敌方信息
    self._otherArmyResult = nil
    -- 自己方信息
    self._selfArmyResult = nil
    -- 胜负判定
    self.fightResult = nil
    -- 对方buff集合
    self._otherBattleBuffList = {}
    self._otherHeroBattleBuffList = {}
    self._selfBattleBuffList = {}
    self._selfHeroBattleBuffList = {}
    --GetSoldierAttrDisById
    -- 缓存计算出来的属性值
    self._selfAttrCacheData = {}
    self._otherAttrCacheData = {}
    self._selfAttrDisCacheData = {}
    self._otherAttrDisCacheData = {}

    self._vsMap = {}--key：己方队伍memberUuid，value：对方队伍memberUuidList
end

function MailBattleOneRound:GetSelfArmyResult()
    return self._selfArmyResult
end

function MailBattleOneRound:GetOtherArmyResult()
    return self._otherArmyResult
end

-- 自己一方的信息 如果是普攻则是我自己，如果是集结,则表示我这一方的leader
function MailBattleOneRound:GetSelfInfo()
    return self._selfInfo or {}
end

function MailBattleOneRound:GetOtherInfo()
    return self._otherInfo or {}
end

-- 获取自己一方的名字
function MailBattleOneRound:GetSelfName()
    local abbr = self:GetOnlySelfAbbr()
    local name = self:GetOnlySelfName()
    if (not string.IsNullOrEmpty(abbr)) then
        return "[" .. abbr .. "]" .. name
    end
    return name
end

function MailBattleOneRound:GetOnlySelfAbbr()
    if (self._selfInfo == nil) then
        return ""
    end
    if (self._selfInfo["allianceInfo"] ~= nil) then
        local alAbbr = self._selfInfo["allianceInfo"]["alAbbr"] or ""
        return alAbbr
    end
    return ""
end

function MailBattleOneRound:GetOnlySelfName()
    local sBattleType = self:GetSelfBattleType()
    if (sBattleType == BattleType["Building"] or
            sBattleType == BattleType.CROSS_WORM or
            sBattleType == BattleType["City"] or
            sBattleType == BattleType["Formation"] or
            sBattleType == BattleType.ELITE_FIGHT_MAIL or
            sBattleType == BattleType.Desert or
            sBattleType == BattleType.TRAIN_DESERT or
            sBattleType == BattleType["RallyFormation"]) then
        local userName = self._selfInfo and self._selfInfo["name"] or "not find target name"
        return userName
    elseif sBattleType == BattleType.PVE_MARCH then
        local userName = self._selfInfo and self._selfInfo["name"] or ""
        if userName == "" then
            userName = Localization:GetString("100184")
        end
        return userName
    else
        return self._selfArmyResult and self._selfArmyResult:GetName() or ""
    end
end


--[[
    获取指定userid的英雄信息集结
    isBefore 表示是armyObj, 还是afterArmyObj
]]
function MailBattleOneRound:GetPlayerHeroes(isMySide, userId, isBefore)
    if (isMySide) then
        return self._selfArmyResult:GetPlayerHeroes(userId, isBefore) or {}
    else
        return self._otherArmyResult:GetPlayerHeroes(userId, isBefore) or {}
    end
end

--[[
------------ fightResult
DEFAULT(-1),
SELF_WIN(0),
OTHER_WIN(1),
DRAW(2),
]]

function MailBattleOneRound:ParseContent( fightReportItem ,isChampionBattle)
    local _rewardList = fightReportItem["allRewards"] or {}
    self:InitRewardList(_rewardList)


    -- 胜负判定
    self.fightResult = fightReportItem["fightResult"] or FightResult.DEFAULT
    -- 保存当前自身的信息
    self._selfInfo = fightReportItem["selfInfo"] or {}
    -- 对方的信息 -- 这个只是在打城的时候,或者人打人的时候才会有
    self._otherInfo = fightReportItem["otherInfo"] or {}
    -- 当前轮次的唯一表示
    self._curRoundUuid = fightReportItem["uuid"] or ""

    -- 按照类型保存敌方的信息
    local _otherArmyResult = fightReportItem["otherArmyResult"] or {}
    self._otherArmyType = _otherArmyResult["type"] or 0
    self._otherArmyResult = self:InitArmyInfo(_otherArmyResult)

    -- 按照类型保存自己方的信息
    local _selfArmyResult = fightReportItem["selfArmyResult"] or {}
    self._selfArmyType = _selfArmyResult["type"] or 0
    self._selfArmyResult = self:InitArmyInfo(_selfArmyResult)
    -- 部队增益
    local otherBattleEffectGroups = fightReportItem["otherBattleEffectGroups"] or {}
    self:InitOtherBattleEffectGroup(otherBattleEffectGroups)

    -- 部队增益
    local battleEffectGroup = fightReportItem["selfBattleEffectGroups"] or {}
    self:InitMySideBattleEffect(battleEffectGroup)

    local unitAttrInfoArr = fightReportItem["unitAttrInfo"] or {}
    self:InitUnitAttrInfo(unitAttrInfoArr)
    self.actBossDamage = fightReportItem["actBossDamage"] or 0
    self:InitVsMap(isChampionBattle)
end

function MailBattleOneRound:InitUnitAttrInfo(unitAttrInfoArr)
    self.unitAttrInfoList = {}
    for _, unitAttrInfoItem in pairs(unitAttrInfoArr) do
        local oneData = UnitAttrInfo.New()
        oneData:InitData(unitAttrInfoItem)
        if oneData.uuid~=nil and oneData.uuid~=0 then
            self.unitAttrInfoList[oneData.uuid] = oneData
        end
    end
end
function MailBattleOneRound:GetUnitAttrInfoByUuid(uuid)
    return self.unitAttrInfoList[uuid]
end
function MailBattleOneRound:InitMySideBattleEffect(buffEffect)
    self._selfBattleBuffList = {}
    for _, buffItem in pairs(buffEffect) do
        local marchId = buffItem["memberUuid"]
        local arrayEffect = buffItem["battleEffectInfos"]
        local oneData = BattleEffectList.New()
        oneData:InitData(arrayEffect)
        self._selfBattleBuffList[marchId] = oneData

        local arrayEffectHero = buffItem["heroBattleEffects"]
        local oneDataHero = HeroBattleEffect.New()
        oneDataHero:InitData(arrayEffectHero)
        self._selfHeroBattleBuffList[marchId] = oneDataHero
        
    end
end
function MailBattleOneRound:GetOtherHeroBattleEffectByMarchId( marchId)
    return self._otherHeroBattleBuffList[marchId]
end

function MailBattleOneRound:GetSelfHeroBattleEffectByMarchId( marchId)
    return self._selfHeroBattleBuffList[marchId]
end

function MailBattleOneRound:GetCurRoundUuid()
    return self._curRoundUuid
end

function MailBattleOneRound:InitOtherBattleEffectGroup(buffEffect)
    self._otherBattleBuffList = {}
    for _, buffItem in pairs(buffEffect) do
        local uuid = buffItem["memberUuid"]
        local arrayEffect = buffItem["battleEffectInfos"]
        local oneData = BattleEffectList.New()
        oneData:InitData(arrayEffect)
        self._otherBattleBuffList[uuid] = oneData

        local arrayEffectHero = buffItem["heroBattleEffects"]
        local oneDataHero = HeroBattleEffect.New()
        oneDataHero:InitData(arrayEffectHero)
        self._otherHeroBattleBuffList[uuid] = oneDataHero
    end
end

function MailBattleOneRound:GetOtherBattleEffectByMarchId( marchId )
    return self._otherBattleBuffList[marchId]
end

function MailBattleOneRound:GetSelfBattleEffectByMarchId( marchId )
    return self._selfBattleBuffList[marchId]
end

-- 获取当前轮的输赢状态  赢、输、平局
function MailBattleOneRound:GetBattleResult()
    return self.fightResult
end
-------------------------------------------------------------------------- 资源部分1 ----------------------------------------------------------------------------
function MailBattleOneRound:InitRewardList(_rewardList)
    for k,v in pairs(_rewardList) do
        local uuid = v["uuid"]
        local reward = v["reward"]
        if uuid~=nil and reward~=nil then
            local oneData = MailReportPlayerReward.New()
            oneData:InitData(reward)
            self.allRewards[uuid] = oneData
        end

    end
end
-- 解析道具加成


function MailBattleOneRound:GetRewardItemArr(uuid)
    local rewardItem = self.allRewards[uuid]
    if rewardItem~=nil then
        return rewardItem:GetRewardItemArr()
    end
    return {}
end

function MailBattleOneRound:GetResRewardItemArr(uuid)
    local rewardItem = self.allRewards[uuid]
    if rewardItem~=nil then
        return rewardItem:GetResRewardItemArr()
    end
    return {}
end


function MailBattleOneRound:GetRewardExpArr()
    local showList = {}
    for k, v in pairs(self.allRewards) do
        local list = v:GetRewardExpArr()
        if list ~= nil then
            for k1, v1 in pairs(list) do
                if showList[k1] == nil then
                    showList[k1] = v1
                else
                    showList[k1] = showList[k1] + v1
                end
            end
        end
    end
    return showList
end

function MailBattleOneRound:GetFightResItemArr(uuid)
    local rewardItem = self.allRewards[uuid]
    if rewardItem~=nil then
        return rewardItem:GetFightResItemArr()
    end
    return {}
end

function MailBattleOneRound:GetPlunderResRate(uuid)
    local rewardItem = self.allRewards[uuid]
    if rewardItem~=nil then
        return rewardItem:GetPlunderResRate()
    end
    return nil
end

function MailBattleOneRound:GetFightResArrByUserUid(uid)
    local selfInMemberUuid = self._selfArmyResult:GetUuidInMembersByUid(uid)
    return self:GetFightResItemArr(selfInMemberUuid)
end


-------------------------------------------------------------------------- 资源部分 end ----------------------------------------------------------------------------


-- 保存对方的信息
function MailBattleOneRound:InitArmyInfo( armyResult )
    local _type = armyResult["type"] or 0
    local _armyInfo = nil
    if ( _type == BattleType["Formation"]) or _type == BattleType.ELITE_FIGHT_MAIL then
        _armyInfo = MailArmyResult_March.New()
    elseif _type == BattleType["PVE_MARCH"] or _type == BattleType["PVE_MONSTER"] then
        _armyInfo = MailArmyResult_Pve.New()
    elseif _type == BattleType["Building"] or _type == BattleType.CROSS_WORM or _type == BattleType["Turret"] or _type == BattleType["Turret"] then
        _armyInfo = MailArmyResult_Building.New()
    elseif _type == BattleType["Monster"] or _type == BattleType["Boss"] or _type ==BattleType.Explore 
            or _type == BattleType["PVE_MONSTER"] or _type == BattleType.ACT_BOSS  
            or _type == BattleType.PUZZLE_BOSS or _type == BattleType.CHALLENGE_BOSS or _type == BattleType.BLACK_KNIGHT 
            or _type == BattleType.AllianceBoss then
        _armyInfo = MailArmyResult_Monster.New()
    elseif _type == BattleType["RallyFormation"] then
        _armyInfo = MailArmyResult_Team.New()
    elseif _type == BattleType["City"] or _type == BattleType.CITY_GUARD then
        _armyInfo = MailArmyResult_City.New()
    elseif _type == BattleType["ALLIANCE_NEUTRAL_CITY"] or _type == BattleType["ALLIANCE_OCCUPIED_CITY"] or _type == BattleType.ALLIANCE_CITY_GUARD or _type == BattleType.THRONE_ARMY then
        _armyInfo = MailArmyResult_Neutral.New()
    elseif _type == BattleType.ALLIANCE_BUILDING or _type == BattleType.ALLIANCE_BUILD_GUARD or _type == BattleType.ACT_ALLIANCE_MINE then
        _armyInfo = MailArmyResult_AllianceBuild.New()
    elseif _type == BattleType.DRAGON_BUILDING then
        _armyInfo = MailArmyResult_DragonBuild.New()
    elseif _type == BattleType.Desert or _type == BattleType.TRAIN_DESERT then
        _armyInfo = MailArmyResult_Desert.New()
    end
    if (_armyInfo ~= nil) then
        _armyInfo:InitData(armyResult)
    end
    return _armyInfo
end

-- 计算在当前回合中所有玩家，所有士兵属性的差值,比如说这轮战斗中玩家死了几个兵
function MailBattleOneRound:GetSoldierAttrDisById( attId, isMySide )
    local attrCache = isMySide and self._selfAttrDisCacheData or self._otherAttrDisCacheData
    if (attrCache[attId] ~= nil) then
        return attrCache[attId]
    end
    local result = self:GetAfterArmyObjAttTotalCnt(attId, isMySide, false) - self:GetArmyObjAttTotalCnt(attId, isMySide, false)
    attrCache[attId] = result
    return result
end

function MailBattleOneRound:SetSoldierAttrDisCacheById( attId, isMySide, value )
    local attrCache = isMySide and self._selfAttrDisCacheData or self._otherAttrDisCacheData
    attrCache[attId] = value
end

-- 获取发起者的英雄列表
function MailBattleOneRound:GetLeaderHeroes(isMySide, isBefore, targetUid)
    local leaderinfo = isMySide and self._selfInfo or self._otherInfo
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    local uid = leaderinfo["uid"] or targetUid
    return armyResult:GetPlayerHeroes( uid, isBefore )
end

-- 在一回合中,起始士兵属性值的所有加成  isMySelf 是否只统计我自己的
function MailBattleOneRound:GetArmyObjAttTotalCnt( attId, isMySide )
    local attrCache = isMySide and self._selfAttrCacheData or self._otherAttrCacheData
    if (attrCache[attId] ~= nil) then
        return attrCache[attId]
    end
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    local armyObj = armyResult:GetArmyObj()
    if (armyObj == nil) then
        return 0
    end
    local result = 0
    if (isMySide) then
        result = armyObj:GetAttTotalCnt(attId, false)
    else
        result = armyObj:GetAttTotalCnt(attId, false)
    end
    attrCache[attId] = result
    return result
end

-- 强制设置当前轮次的属性值
--function MailBattleOneRound:SetArmyObjAttTotalCntCache( attId, isMySide, value )
--    local attrCache = isMySide and self._selfAttrCacheData or self._otherAttrCacheData
--    attrCache[attId] = value
--end

-- 返回当前回合中自己编队的士兵总数
function MailBattleOneRound:GetSelfSoldierTotalCnt()
    if (self._selfArmyResult == nil) then
        return 0
    end
    local armyObj = self._selfArmyResult:GetArmyObj()
    if (armyObj == nil) then
        return 0
    end
    return armyObj:GetAttTotalCnt(eMailSoldierAttr["Total"], true)
end

-- 在一回合中,结束时士兵属性值的所有加成  isMySelf 是否只统计我自己的
function MailBattleOneRound:GetAfterArmyObjAttTotalCnt( attId, isMySide, isMySelf )
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    local armyObj = armyResult:GetAfterArmyObj()
    if (armyObj == nil) then
        return 0
    end
    if (isMySide) then
        return armyObj:GetAttTotalCnt(attId, isMySelf)
    else
        return armyObj:GetAttTotalCnt(attId, false)
    end
end

-- 返回当前回合中所属类型
function MailBattleOneRound:GetSelfBattleType()
    return self._selfArmyType
end
function MailBattleOneRound:SetSelfBattleType( value )
    self._selfArmyType = value
end
function MailBattleOneRound:GetTargetBattleType()
    return self._otherArmyType
end
function MailBattleOneRound:SetTargetBattleType(value)
    self._otherArmyType = value
end

function MailBattleOneRound:GetBuildingName(isMySide)
    if (isMySide) then
        return self._selfArmyResult and self._selfArmyResult:GetName() or ""
    else
        return self._otherArmyResult and self._otherArmyResult:GetName() or ""
    end
end

function MailBattleOneRound:GetBuildingName_ForShare(isMySide)
    if (isMySide) then
        return self._selfArmyResult and self._selfArmyResult:GetName_ForShare() or ""
    else
        return self._otherArmyResult and self._otherArmyResult:GetName_ForShare() or ""
    end
end

function MailBattleOneRound:GetTargetName(senderUid)
    local abbr = self:GetOnlyTargetAbbr(senderUid)
    local username = self:GetOnlyTargetName(senderUid)
    if (not string.IsNullOrEmpty(abbr)) then
        return "[" .. abbr .. "]" .. username
    end
    return username
end

function MailBattleOneRound:GetTargetName_ForShare()
    local abbr = self:GetOnlyTargetAbbr()
    local username = self:GetOnlyTargetName_ForShare()
    if (not string.IsNullOrEmpty(abbr)) then
        if (type(username) == "string") then
            return "[" .. abbr .. "]" .. username
        elseif type(username) == "table" then
            username["abbr"] = abbr
        end
    end
    return username
end

function MailBattleOneRound:GetForceTargetName()
    -- 直接获取 _otherInfo 中用户的名称
    local abbr = ""
    if (self._otherInfo["allianceInfo"] ~= nil) then
        abbr = self._otherInfo["allianceInfo"]["alAbbr"] or ""
    end
    local userName = self._otherInfo["name"] or "-"
    if (not string.IsNullOrEmpty(abbr)) then
        return "[" .. abbr .. "]" .. userName
    end
    return userName
end

-- 只获取对方名字
function MailBattleOneRound:GetOnlyTargetName(senderUid)
    local tBattleType = self:GetTargetBattleType()
    if (tBattleType == BattleType["Building"] or
            tBattleType == BattleType.CROSS_WORM or
            tBattleType == BattleType["City"] or
            tBattleType == BattleType["Formation"] or
            tBattleType == BattleType["RallyFormation"]) then
        local userName = self._otherInfo["name"] or ""
        return userName
    --elseif tBattleType == BattleType.ELITE_FIGHT_MAIL then
    --    local userName = self._otherInfo["name"] or ""
    --    if userName == "" then
    --        userName = Localization:GetString("100184")
    --    end
    --    return userName
    elseif tBattleType == BattleType.PVE_MARCH or tBattleType == BattleType.ELITE_FIGHT_MAIL then
        local userName = ""
        if senderUid and self._otherInfo.uid == senderUid then
            userName = self._selfInfo["name"] or ""
        else
            userName = self._otherInfo["name"] or ""
        end
        if userName == "" then
            userName = Localization:GetString("100184")
        end
        return userName
    elseif tBattleType == BattleType.PVE_MONSTER then
        local userName = self._otherInfo["name"] or ""
        if userName == "" then
            userName = Localization:GetString("302219")
        end
        return userName
    else
        return self._otherArmyResult and self._otherArmyResult:GetName() or ""
    end
end

-- 只获取对方名字
function MailBattleOneRound:GetOnlyTargetName_ForShare()
    local tBattleType = self:GetTargetBattleType()
    if (tBattleType == BattleType["Building"] or
            tBattleType == BattleType.CROSS_WORM or
            tBattleType == BattleType["City"] or
            tBattleType == BattleType["Formation"] or
            tBattleType == BattleType["RallyFormation"]) then
        local userName = self._otherInfo["name"] or "not find target name"
        return userName
    elseif tBattleType == BattleType.ELITE_FIGHT_MAIL then
        local userName = self._otherInfo["name"] or ""
        if userName == "" then
            local param = {["type"] = "dialog"}
            param["name"] = "100184"
            return param
        end
        return userName
    elseif tBattleType == BattleType.PVE_MARCH then
        local userName = self._otherInfo["name"] or ""
        if userName == "" then
            local param = { ["type"] = "dialog" }
            param["name"] = "100184"
            return param
        end
        return userName
    elseif tBattleType == BattleType.BLACK_KNIGHT then
        local nameParam = self._otherArmyResult and self._otherArmyResult:GetName_ForShare()
        if nameParam ~= nil then
            return  "Lv."..nameParam.level  .. Localization:GetString(nameParam.name)
        else
            return ""
        end
    else
        return self._otherArmyResult and self._otherArmyResult:GetName_ForShare() or ""
    end
end

-- 只获取对方联盟简称
function MailBattleOneRound:GetOnlyTargetAbbr(senderUid)
    local tBattleType = self:GetTargetBattleType()
    if (tBattleType == BattleType["Building"] or
            tBattleType == BattleType.CROSS_WORM or
            tBattleType == BattleType["City"] or
            tBattleType == BattleType["Formation"] or
            --tBattleType == BattleType["Turret"] or
            tBattleType == BattleType["RallyFormation"]) then
        if (self._otherInfo["allianceInfo"] ~= nil) then
            local alAbbr = self._otherInfo["allianceInfo"]["alAbbr"] or ""
            return alAbbr
        end
    elseif tBattleType == BattleType.PVE_MARCH or tBattleType == BattleType.ELITE_FIGHT_MAIL then
        if senderUid and self._otherInfo.uid == senderUid then
            if self._selfInfo["allianceInfo"]  then
                local alAbbr = self._selfInfo["allianceInfo"]["alAbbr"] or ""
                return alAbbr
            else
                return ""
            end
        else
            if (self._otherInfo["allianceInfo"] ~= nil) then
                local alAbbr = self._otherInfo["allianceInfo"]["alAbbr"] or ""
                return alAbbr
            else
                return ""
            end
        end
        
    else
        return ""
    end
end

function MailBattleOneRound:GetTargetPos()
    local tBattleType = self:GetTargetBattleType()
    if (tBattleType == BattleType["Building"] or
            tBattleType == BattleType.CROSS_WORM or
            tBattleType == BattleType["City"] or
            tBattleType == BattleType["Turret"] or
            tBattleType == BattleType["Formation"] or
            tBattleType == BattleType.ELITE_FIGHT_MAIL or
            tBattleType == BattleType["RallyFormation"]) then
        return self._otherInfo["pointId"]
    else
        return self._otherArmyResult and self._otherArmyResult:GetPointId() or 0
    end
    return 0
end

-- 注意这个是返回对方leader或者monsterid的信息,按照类型选择解析
function MailBattleOneRound:GetTargetInfo()
    local tBattleType = self:GetTargetBattleType()
    if (tBattleType == BattleType["Building"] or
            tBattleType == BattleType.CROSS_WORM or
            tBattleType == BattleType["City"] or
            tBattleType == BattleType["Turret"] or
            tBattleType == BattleType["Formation"] or
            tBattleType == BattleType.ELITE_FIGHT_MAIL or
            tBattleType == BattleType["RallyFormation"]) then
        return self._otherInfo
    else
        return self._otherArmyResult and self._otherArmyResult:GetInfo() or {}
    end
end

-- 获取邮件界面中显示的回合次数
function MailBattleOneRound:GetRoundCnt()
    --local sBattleType = self:GetSelfBattleType()
    --local tBattleType = self:GetTargetBattleType()
    -- 如果我方或对方是 Turret 类型,并且存在 DamagePercentInfo 则进行分组拆分为2,否则为1
    --if (sBattleType == BattleType["Turret"]) then
    --    local sDamagePercentInfo = self._selfArmyResult:GetDamagePercentInfo()
    --    if (table.count(sDamagePercentInfo) > 0) then
    --        return 2
    --    end
    --elseif (tBattleType == BattleType["Turret"]) then
    --    local tDamagePercentInfo = self._otherArmyResult:GetDamagePercentInfo()
    --    if (table.count(tDamagePercentInfo) > 0) then
    --        return 2
    --    end
    --elseif tBattleType == BattleType.ALLIANCE_OCCUPIED_CITY or sBattleType == BattleType.ALLIANCE_OCCUPIED_CITY then
    --    local sDamagePercentInfo_s = self._selfArmyResult:GetDamagePercentInfo()
    --    local sDamagePercentInfo_o = self._otherArmyResult:GetDamagePercentInfo()
    --    if (table.count(sDamagePercentInfo_s) > 1 or table.count(sDamagePercentInfo_o) > 1) then
    --        return 2
    --    end
    --end
    return 1
end

-- 获取参与者
function MailBattleOneRound:GetAllMembers(isMySide, isBefore)
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    return armyResult:GetAllMembers(isBefore)
end

-- 获取城防破坏值
function MailBattleOneRound:GetDestroyValue(isMySide)
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    return armyResult:GetDestroyValue()
end

function MailBattleOneRound:GetTroopHealth(isMySide)
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    return armyResult:GetHealth()
end


function MailBattleOneRound:GetHeroSpecialSkillList(isMySide)
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    return armyResult:GetHeroSpecialSkillList()
end

function MailBattleOneRound:InitVsMap(isChampionBattle)
    self._vsMap = {}
    local sBattleType = self:GetSelfBattleType()
    local tBattleType = self:GetTargetBattleType()
    if self._selfArmyResult~=nil and self._otherArmyResult~=nil then
        local selfUuidList = self._selfArmyResult:GetAllMembersUuidList()
        local otherUuidList = self._otherArmyResult:GetAllMembersUuidList()
        local selfResult = self._selfArmyResult:GetDamagePercentInfo()
        local otherResult = self._otherArmyResult:GetDamagePercentInfo()
        for a,b in pairs(selfUuidList) do
            for c,d in pairs(otherUuidList) do
                local hasGet = false
                if isChampionBattle ==true or sBattleType == BattleType.Building or sBattleType == BattleType.CROSS_WORM or sBattleType == BattleType.City or sBattleType == BattleType.Turret or sBattleType == BattleType.ACT_ALLIANCE_MINE
                        or tBattleType == BattleType.Building or tBattleType == BattleType.CROSS_WORM or tBattleType == BattleType.City or tBattleType == BattleType.Turret or tBattleType == BattleType.ACT_ALLIANCE_MINE then
                    hasGet = true
                end
                if hasGet==false then
                    if selfResult~=nil then
                        if selfResult[b]~=nil then
                            if selfResult[b][d]~=nil then
                                hasGet = true
                            end
                        end
                    end
                end
                if hasGet==false then
                    if otherResult~=nil then
                        if otherResult[d]~=nil then
                            if otherResult[d][b]~=nil then
                                hasGet = true
                            end
                        end
                    end
                end
                if hasGet == true then
                    if self._vsMap[b]==nil then
                        self._vsMap[b] = {}
                    end
                    self._vsMap[b][d] = 1
                end
            end
        end
    end
end

function MailBattleOneRound:GetVsMap()
    return self._vsMap
end

function MailBattleOneRound:GetLeaderUuid(isMySide)
    local leaderInfo = isMySide and self._selfInfo or self._otherInfo
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    local uid = leaderInfo["uid"]
    return armyResult:GetUuidInMembersByUid(uid)

end
--获取双方战斗详细内容
function MailBattleOneRound:GetMemberPlayerInfoByUuid(uuid,targetUuid,isMySide)
    --己方信息
    local oneData = {}
    local armyResult = isMySide and self._selfArmyResult or self._otherArmyResult
    local battleType = isMySide and self:GetSelfBattleType() or self:GetTargetBattleType()
    local armyObj = armyResult:GetArmyObj()
    local afterArmyObj = armyResult:GetAfterArmyObj()
    oneData.name = armyResult:GetName()
    oneData.pic = armyResult:GetPic()
    oneData.battleType = battleType
    oneData.specialType = SpecialUnitType.NONE
    oneData.buildId = 0
    if battleType == BattleType.Building or battleType == BattleType.CROSS_WORM then
        oneData.buildId = armyResult:GetBuildId()
    elseif battleType ==  BattleType.Monster then
        oneData.monsterId = armyResult._monsterId
    elseif battleType == BattleType.Desert or battleType == BattleType.TRAIN_DESERT then
        oneData.desertId = armyResult._desertId
    elseif battleType == BattleType.ALLIANCE_BUILDING or  battleType == BattleType.ACT_ALLIANCE_MINE then
        oneData.buildId = armyResult:GetBuildId()
    elseif battleType == BattleType.DRAGON_BUILDING then
        oneData.buildId = armyResult:GetBuildId()
    elseif battleType == BattleType.BLACK_KNIGHT then
        oneData.monsterId = armyResult._monsterId
    elseif battleType == BattleType.Boss then
        oneData.monsterId = armyResult._monsterId
    end
    oneData.selfInMemberUuid = armyResult:GetUuidInMembersByUid(LuaEntry.Player.uid)
    oneData.leaderUuid = self:GetLeaderUuid(isMySide)
    if armyObj~=nil then
        local members = armyObj:GetAllMembers()
        for k,v in pairs(members) do
            if v:GetMarchId() == uuid then
                oneData.unitData = v
            end
        end
    end
    if afterArmyObj~=nil then
        local members = afterArmyObj:GetAllMembers()
        for k,v in pairs(members) do
            if v:GetMarchId() == uuid then
                oneData.afterUnitData = v
            end
        end
    end
    if oneData.unitData~=nil then
        oneData.specialType = oneData.unitData:GetSpecialType()
        oneData.uid = oneData.unitData:GetUserId()
    end
    oneData.unitAttrInfo = self:GetUnitAttrInfoByUuid(uuid)
    local damagePercent = armyResult:GetDamagePercentInfo()
    if damagePercent~=nil then
        if damagePercent[uuid]~=nil then
            oneData.damagePercent = damagePercent[uuid][targetUuid]
        end
    end
    oneData.isDirect = armyResult:IsDirect()

    return oneData
end

return MailBattleOneRound