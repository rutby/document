---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/13 14:39
---

local GovernmentManager = BaseClass("GovernmentManager")
local KingdomPositionInfo = require "DataCenter.GovernmentManager.KingdomPositionInfo"
local PresidentInfo = require "DataCenter.GovernmentManager.PresidentInfo"
local PresidentHistoryListInfo = require "DataCenter.GovernmentManager.PresidentHistoryListInfo"
local PresidentHistoryInfo = require "DataCenter.GovernmentManager.PresidentHistoryInfo"
local PresidentPresentInfo = require "DataCenter.GovernmentManager.PresidentPresentInfo"
local PresentRecordInfo = require "DataCenter.GovernmentManager.PresentRecordInfo"
local GovernmentConst = require("DataCenter.GovernmentManager.GovernmentConst")
local Localization = CS.GameEntry.Localization

local function __init(self)
    self.positionList = {}
    self.presidentInfo = nil--里面存的不只是总统信息
    self.presentRecord = nil
    self.kingHistoryList = nil
    self.presidentPresentInfo = nil--奖励信息
    self.self_positionId = 0
end

local function __delete(self)
    self.positionList = {}
    self.presidentInfo = nil--里面存的不只是总统信息
    self.presentRecord = nil
    self.kingHistoryList = nil
    self.presidentPresentInfo = nil--奖励信息
    self.self_positionId = 0
end

local function GetKingdomPositions(self, serverId)
    SFSNetwork.SendMessage(MsgDefines.GetKingdomPositions, serverId)
end

local function GetKingdomPositionsHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    self:UpdatePositions(message)
    EventManager:GetInstance():Broadcast(EventId.KingdomPositionInfoUpdate)
end

local function KingdomPositionAppoint(self, targetUid, positionId, type)
    SFSNetwork.SendMessage(MsgDefines.KingdomPositionAppoint, targetUid, positionId, type)
end

local function KingdomPositionAppointHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    self:UpdateOnePosition(message)
    local positionId = message.positionId
    if positionId then
        local data = self:GetPositionInfoByPositionId(toInt(positionId))
        if data == nil or string.IsNullOrEmpty(data.uid) then
            UIUtil.ShowTipsId(250156)
        else
            UIUtil.ShowTipsId(250127)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.KingdomPositionInfoUpdate)
end

local function ChooseKing(self, targetUid)
    SFSNetwork.SendMessage(MsgDefines.ChooseKing, targetUid)
end

local function ChooseKingHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    self:UpdatePresidentInfo(message)
    EventManager:GetInstance():Broadcast(EventId.KingdomPresidentInfoUpdate)
    UIUtil.ShowTipsId(250127)
end

local function GetKingInfo(self, serverId)
    SFSNetwork.SendMessage(MsgDefines.GetKingInfo, serverId)
end

local function GetKingInfoHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    self:UpdatePresidentInfo(message)
    EventManager:GetInstance():Broadcast(EventId.KingdomPresidentInfoUpdate)
end

local function ModifyKingDeclaration(self, str)
    SFSNetwork.SendMessage(MsgDefines.ModifyKingDeclaration, str)
end

local function ModifyKingDeclarationHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    UIUtil.ShowTipsId(250137)
    self:UpdatePresidentDeclarationInfo(message)
end

local function GetKingdomPresentInfo(self, serverId)
    SFSNetwork.SendMessage(MsgDefines.GetKingdomPresentInfo, serverId)
end

function GovernmentManager:GetKingdomPresentInfoHandler(message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    self:UpdatePresentInfo(message)
end

local function GetKingdomPresentRecord(self, serverId)
    SFSNetwork.SendMessage(MsgDefines.GetKingdomPresentRecord, serverId)
end

local function GetKingdomPresentRecordHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    self:UpdatePresentRecord(message)
end

local function KingSendPresent(self, uidArr, presentId)
    SFSNetwork.SendMessage(MsgDefines.KingSendPresent, uidArr, presentId)
end

local function KingSendPresentHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
    else
        if self.presidentPresentInfo ~= nil then
            self.presidentPresentInfo:AddUidArr(message)
        end
        
        EventManager:GetInstance():Broadcast(EventId.GovernmentPresentRefresh)
    end
end

--获取国王历史记录，page从1开始
local function GetKingHistory(self, serverId, page)
    SFSNetwork.SendMessage(MsgDefines.GetKingHistory, serverId, page)
end

local function GetKingHistoryHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    self:UpdateKingHistory(message)
    EventManager:GetInstance():Broadcast(EventId.GovernmentHistoryRecordRefresh)
end

local function TransferKingHandler(self, message)
    if message["success"] then
        self:GetKingInfo(LuaEntry.Player:GetSrcServerId())
        UIManager:GetInstance():DestroyWindow(UIWindowNames.UITransferKing)
        EventManager:GetInstance():Broadcast(EventId.TransferKing)
    end
end

local function UpdatePositions(self, message) 
    self.positionList = {}
    if message["positions"] then
        for _, v in ipairs(message["positions"]) do
            self:UpdateOnePosition(v)
        end
    end
end

local function UpdateOnePosition(self, para)
    local positionId = para.positionId
    local info = self.positionList[toInt(positionId)]
    if info == nil then
        info = KingdomPositionInfo.New()
        self.positionList[toInt(positionId)] = info
    end
    info:ParseData(para)
end

local function UpdatePresidentInfo(self, message)
    if self.presidentInfo == nil then
        self.presidentInfo = PresidentInfo.New()
    end
    self.presidentInfo:ParseData(message)
    EventManager:GetInstance():Broadcast(EventId.GovernmentPresidentRefresh)
end

local function CheckIsEnd(self)
    if self.presidentInfo then
        return self.presidentInfo:CheckIsEnd()
    end
    return false
end

local function UpdatePresidentDeclarationInfo(self, message)
    if self.presidentInfo == nil then
        return
    end
    self.presidentInfo:SetDeclaration(message["declaration"] or "")
end

local function UpdatePresentRecord(self, message)
    if self.presentRecord == nil then
        self.presentRecord = PresentRecordInfo.New()
    end
    self.presentRecord:ParseData(message)
    EventManager:GetInstance():Broadcast(EventId.GovernmentPresentRecordRefresh)
end

local function UpdateKingHistory(self, message)
    if self.kingHistoryList == nil then
        self.kingHistoryList = PresidentHistoryInfo.New()
    end
    self.kingHistoryList:ParseData(message)
end

--获取现在的总统信息
function GovernmentManager:GetCurPresident()
    if self.presidentInfo ~= nil and self.presidentInfo:HavePresident() then
        return self.presidentInfo
    end
    return nil
end

function GovernmentManager:UpdatePresentInfo(message)
    if self.presidentPresentInfo == nil then
        self.presidentPresentInfo = PresidentPresentInfo.New()
    end
    self.presidentPresentInfo:ParseData(message)
    EventManager:GetInstance():Broadcast(EventId.GovernmentPresentRefresh)
end

--通过礼包类型获取礼包信息
function GovernmentManager:GetPresentByRewardType(rewardType)
    if self.presidentPresentInfo ~= nil then
        return self.presidentPresentInfo:GetPresentByRewardType(rewardType)
    end
    return nil
end

--这个人是否发过奖
function GovernmentManager:IsGetReward(uid)
    if self.presidentPresentInfo ~= nil then
        return self.presidentPresentInfo:IsGetReward(uid)
    end
    return false
end

--这个类型的奖励是否已全部发完
function GovernmentManager:IsSendFinishByRewardType(rewardType)
    if self.presidentPresentInfo ~= nil then
        return self.presidentPresentInfo:IsSendFinishByRewardType(rewardType)
    end
    return false
end

local function GetPositionInfoByPositionId(self, positionId)
    return self.positionList[toInt(positionId)]
end

local function GetAllPositionInfo(self)
    return self.positionList
end

--获取发奖记录
function GovernmentManager:GetRewardRecord()
    return self.presentRecord
end

--获取国王历史记录
function GovernmentManager:GetKingsHistoryRecord()
    return self.kingHistoryList
end

local function initSelfPosition(self, message)
    self.self_positionId = 0
    if message["positionInfo"] and message["positionInfo"]["positionId"] then
        self.self_positionId = toInt(message["positionInfo"]["positionId"])
    end
end

local function PushPositionUpdate(self, message)
    if message["positionInfo"] and message["positionInfo"]["positionId"] then
        self.self_positionId = toInt(message["positionInfo"]["positionId"])
    else
        self.self_positionId = 0
    end
    if message["lastUpdateTime"] ~= nil then
        LuaEntry.Player:SetLastUpdateTime(message["lastUpdateTime"])
    end
end

local function IsSelfPresident(self)
    return self.self_positionId == GovernmentConst.King_Position_id
end

local function IsSelfPresidentAndInSelfServer(self)
    return self:IsSelfPresident() and not CrossServerUtil:GetIsCrossServer()
end

function GovernmentManager:GetPresidentBg(havePresident)
    if havePresident then
        return "Assets/Main/Sprites/UI/Common/New/Common_bg_player.png"
    end
    return "Assets/Main/Sprites/UI/UIGovernment/UIpresident_bg_president04.png"
end
--是否有没发奖的
function GovernmentManager:IsNeedReward()
    if self.presidentPresentInfo ~= nil then
        return self.presidentPresentInfo:IsNeedReward()
    end
    return false
end

--获取自己的官职id
function GovernmentManager:GetPositionId()
    return self.self_positionId
end

GovernmentManager.IsSelfPresidentAndInSelfServer = IsSelfPresidentAndInSelfServer
GovernmentManager.IsSelfPresident = IsSelfPresident
GovernmentManager.initSelfPosition = initSelfPosition
GovernmentManager.PushPositionUpdate = PushPositionUpdate
GovernmentManager.__init = __init
GovernmentManager.__delete = __delete
GovernmentManager.GetKingdomPositions = GetKingdomPositions
GovernmentManager.GetKingdomPositionsHandler = GetKingdomPositionsHandler
GovernmentManager.KingdomPositionAppoint = KingdomPositionAppoint
GovernmentManager.KingdomPositionAppointHandler = KingdomPositionAppointHandler
GovernmentManager.ChooseKing = ChooseKing
GovernmentManager.ChooseKingHandler = ChooseKingHandler
GovernmentManager.GetKingInfo = GetKingInfo
GovernmentManager.GetKingInfoHandler = GetKingInfoHandler
GovernmentManager.ModifyKingDeclaration = ModifyKingDeclaration
GovernmentManager.ModifyKingDeclarationHandler = ModifyKingDeclarationHandler
GovernmentManager.GetKingdomPresentInfo = GetKingdomPresentInfo
GovernmentManager.GetKingdomPresentRecord = GetKingdomPresentRecord
GovernmentManager.GetKingdomPresentRecordHandler = GetKingdomPresentRecordHandler
GovernmentManager.KingSendPresent = KingSendPresent
GovernmentManager.KingSendPresentHandler = KingSendPresentHandler
GovernmentManager.GetKingHistory = GetKingHistory
GovernmentManager.GetKingHistoryHandler = GetKingHistoryHandler
GovernmentManager.TransferKingHandler = TransferKingHandler
GovernmentManager.UpdatePositions = UpdatePositions
GovernmentManager.UpdateOnePosition = UpdateOnePosition
GovernmentManager.UpdatePresidentInfo = UpdatePresidentInfo
GovernmentManager.UpdatePresidentDeclarationInfo = UpdatePresidentDeclarationInfo
GovernmentManager.UpdatePresentRecord = UpdatePresentRecord
GovernmentManager.UpdateKingHistory = UpdateKingHistory
GovernmentManager.GetPositionInfoByPositionId = GetPositionInfoByPositionId
GovernmentManager.GetAllPositionInfo = GetAllPositionInfo
GovernmentManager.CheckIsEnd = CheckIsEnd

return GovernmentManager