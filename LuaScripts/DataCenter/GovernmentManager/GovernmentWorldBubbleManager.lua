---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/24 11:18
---

local GovernmentWorldBubbleManager = BaseClass("GovernmentWorldBubbleManager")
local GovernmentWorldBubble = require "Scene.GovernmentWorldBubble.GovernmentWorldBubble"
local ResourceManager = CS.GameEntry.Resource

local function __init(self)
    self.bubble = {}
    self.request = {}
    --self:AddListener()
end

local function __delete(self)
    self:RemoveAllBubble()
    --self:RemoveListener()
    self.bubble = nil
    self.request = nil
end

local function StartUp(self)
    
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.CheckShowGovPos, self.CheckShowGovPosHandler)
    EventManager:GetInstance():AddListener(EventId.WORLD_BUILD_OUT_VIEW, self.DoWhenBuildOut)
    EventManager:GetInstance():AddListener(EventId.PveLevelEnter, self.OnRemoveWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnRemoveWorld)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.CheckShowGovPos, self.CheckShowGovPosHandler)
    EventManager:GetInstance():RemoveListener(EventId.WORLD_BUILD_OUT_VIEW, self.DoWhenBuildOut)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelEnter, self.OnRemoveWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnRemoveWorld)
end

local function StartUp(self)

end

local function OnRemoveWorld()
    DataCenter.GovernmentWorldBubbleManager:RemoveAllBubble()
end

local function CheckShowGovPosHandler(buildUid)
    DataCenter.GovernmentWorldBubbleManager:CheckAndOperateBubble(buildUid)
end

local function DoWhenBuildOut(buildUid)
    if buildUid == nil then
        return
    end
    DataCenter.GovernmentWorldBubbleManager:RemoveOneBubble(buildUid)
end

local function CheckAndOperateBubble(self, buildUid)
    if buildUid == nil then
        return
    end
    local info = DataCenter.WorldPointManager:GetBuildDataByUuid(buildUid)
    if info ~= nil then
        local positionId = info.positionId
        if not string.IsNullOrEmpty(positionId) then
            self:AddOneBubble(buildUid)
        else
            self:RemoveOneBubble(buildUid)
        end
    else
        self:RemoveOneBubble(buildUid)
    end
end

local function AddOneBubble(self, buildUid)
    if not SceneUtils.GetIsInWorld() then
        return
    end
    local info = DataCenter.WorldPointManager:GetBuildDataByUuid(buildUid)
    if self.bubble[buildUid] ~= nil and self.request[buildUid] ~= nil then
        if info ~= nil and not string.IsNullOrEmpty(info.positionId) then
            local pos = SceneUtils.TileIndexToWorld(info.pointIndex)
            self.request[buildUid].gameObject.transform.position = Vector3.New(pos.x, pos.y, pos.z)
            self.bubble[buildUid]:SetData(toInt(info.positionId))
        end
        return
    end
    if self.request[buildUid] ~= nil then
        return
    end
    if info == nil then
        return
    end

    self.request[buildUid] = ResourceManager:InstantiateAsync("Assets/Main/Prefabs/World/WorldGovernmentInfo.prefab")
    self.request[buildUid]:completed('+', function()
        if self.request[buildUid] == nil or self.request[buildUid].isError then
            return
        end
        local pos = SceneUtils.TileIndexToWorld(info.pointIndex)
        self.request[buildUid].gameObject:SetActive(true)
        self.request[buildUid].gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
        self.request[buildUid].gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
        self.request[buildUid].gameObject.transform.position = Vector3.New(pos.x, pos.y, pos.z)
        self.request[buildUid].gameObject.name = "GovernmentWorldBubble_"..info.pointIndex
        self.bubble[buildUid] = GovernmentWorldBubble.New()
        self.bubble[buildUid]:OnCreate(self.request[buildUid])
        self.bubble[buildUid]:SetData(toInt(info.positionId))
    end)
end

local function RemoveAllBubble(self)
    for _, v in ipairs(self.bubble) do
        v:OnDestroy()
    end
    self.bubble = {}
    for _, v in ipairs(self.request) do
        v:Destroy()
    end
    self.request = {}
end

local function RemoveOneBubble(self, buildUid)
    if self.bubble[buildUid] ~= nil then
        self.bubble[buildUid]:OnDestroy()
        self.bubble[buildUid] = nil
    end
    if self.request[buildUid] ~= nil then
        self.request[buildUid]:Destroy()
        self.request[buildUid] = nil
    end
end

GovernmentWorldBubbleManager.__init = __init
GovernmentWorldBubbleManager.__delete = __delete
GovernmentWorldBubbleManager.AddOneBubble = AddOneBubble
GovernmentWorldBubbleManager.RemoveOneBubble = RemoveOneBubble
GovernmentWorldBubbleManager.StartUp = StartUp
GovernmentWorldBubbleManager.AddListener = AddListener
GovernmentWorldBubbleManager.RemoveListener = RemoveListener
GovernmentWorldBubbleManager.RemoveAllBubble = RemoveAllBubble
GovernmentWorldBubbleManager.OnRemoveWorld = OnRemoveWorld
GovernmentWorldBubbleManager.StartUp = StartUp
GovernmentWorldBubbleManager.CheckShowGovPosHandler = CheckShowGovPosHandler
GovernmentWorldBubbleManager.DoWhenBuildOut = DoWhenBuildOut
GovernmentWorldBubbleManager.CheckAndOperateBubble = CheckAndOperateBubble

return GovernmentWorldBubbleManager