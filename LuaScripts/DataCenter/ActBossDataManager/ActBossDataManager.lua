---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/4/20 11:17
---
local ActBossDataManager = BaseClass("ActBossDataManager");
local ActBossData = require "DataCenter.ActBossDataManager.ActBossData"
local ActBossRankDataList = require "DataCenter.ActBossDataManager.ActBossRankDataList"
local function __init(self)
    self.actBossTransLastTime = 0--上次瞬移时间
    self.actBossTransTimes = 0--已瞬移当前值
    self.lastRefreshTime = 0--上次刷新瞬移数据时间
    self.actBossTransLastRound = 0 -- 上次刷新瞬移轮数
    self.actBossDataList = {}
    self.allianceCityBossDic = {}--key：联盟城id ，value：怪id
    self.bossRankList = {}
end

local function __delete(self)
    self.actBossTransLastTime = nil
    self.actBossTransTimes = nil
    self.lastRefreshTime = nil
    self.actBossDataList = nil
    self.actBossTransLastRound= nil
    self.allianceCityBossDic = nil
    self.bossRankList = nil
end

local function InitData(self,message)
    self.bossRankList = {}
    if message["actBossTrans"]~=nil then
        self:RefreshTransTime(message["actBossTrans"])
    end
    self.allianceCityBossDic = {}
    local kvDic = LuaEntry.DataConfig:TryGetStr("ship_boss", "k12")
    local strArr = string.split(kvDic,";")
    if #strArr>0 then
        for i=1,#strArr do
            local str = strArr[i]
            local arr = string.split(str,",")
            if #arr>=2 then
                self.allianceCityBossDic[tonumber(arr[1])] = tonumber(arr[2])
            end
        end
    end
end

local function RefreshRankDataList(self,message)
    if message == nil then
        return
    end
    local oneData = ActBossRankDataList.New()
    oneData:ParseData(message)
    if oneData.uuid~=0 then
        local newScore = oneData:GetSelfScore()
        local oldScore = 0
        if self.bossRankList[oneData.uuid]~=nil then
            oldScore = self.bossRankList[oneData.uuid]:GetSelfScore()
        end
        self.bossRankList[oneData.uuid] = oneData
        if newScore>oldScore then
            
        end
    end
end

local function GetBossRankDataByUuid(self,uuid)
    return self.bossRankList[uuid]
end
local function RefreshTransTime(self,message)
    if message["actBossTransTimes"]~=nil then
        self.actBossTransTimes = message["actBossTransTimes"]
    end
    if message["actBossTransLastTime"]~=nil then
        self.actBossTransLastTime = message["actBossTransLastTime"]
    end
    if message["actBossTransLastRound"]~=nil then
        self.actBossTransLastRound = message["actBossTransLastRound"]
    end
    self.lastRefreshTime = UITimeManager:GetInstance():GetServerSeconds()
end

local function GetRestTransNum(self)
    local curTime = UITimeManager:GetInstance():GetServerSeconds()
    if not UITimeManager:GetInstance():IsSameDayForServer(self.lastRefreshTime,curTime) then
        self.actBossTransTimes = 0
    end
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
    if #dataList>0 then
        local data = dataList[1]
        if data~=nil then
            local curRound = self.actBossTransLastRound
            if (data.r1StartTime<=curTime and data.r1EndTime>=curTime) then
                curRound  = 1
            elseif(data.r2StartTime<=curTime and data.r2EndTime>=curTime) then
                curRound  =2
            elseif(data.r3StartTime<=curTime and data.r3EndTime>=curTime) then
                curRound  =3
            elseif(data.r4StartTime<=curTime and data.r4EndTime>=curTime) then
                curRound  =4
            end
            if curRound ~= self.actBossTransLastRound then
                self.actBossTransTimes = 0
            end
        end
    end

    local maxNum = LuaEntry.DataConfig:TryGetNum("ship_boss", "k11")
    local restNum = maxNum - self.actBossTransTimes
    return math.max(restNum,0)
end

local function GetLastTransTime(self)
    return self.actBossTransLastTime
end

local function RefreshActBossDataList(self,message)
    if message==nil then
        return
    end
    self.actBossDataList={}
    if message["bosses"]~=nil then
        local arr = message["bosses"]
        for k,v in pairs(arr) do
            if v~=nil then
                local oneData = ActBossData.New()
                oneData:ParseData(v)
                if oneData.uuid~=0 then
                    self.actBossDataList[oneData.uuid] = oneData
                end
            end
        end
    end
end

local function GetActBossDataList(self)
    return self.actBossDataList
end

local function GetOneActBossData(self)
    for _, data in pairs(self.actBossDataList) do
        return data
    end
    return nil
end

local function GetActBossDataByUuid(self,uuid)
    return self.actBossDataList[uuid]
end

local function GetActBossDataByCityId(self,cityId)
    local monsterId = self.allianceCityBossDic[cityId]
    for k,v in pairs(self.actBossDataList) do
        if v.monsterId == monsterId then
            return v
        end
    end
end

local function GetRewardRedNum(self)
    local num = 0
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
    if #dataList > 0 then
        local data = dataList[1]
        local subData = DataCenter.ActivityListDataManager:GetActivityDataById(data.para5)
        if subData then
            for _, taskId in ipairs(subData.taskList or {}) do
                local template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), taskId)
                if template then
                    local taskInfo = DataCenter.TaskManager:FindTaskInfo(taskId)
                    if taskInfo and taskInfo.state == TaskState.CanReceive then
                        num = num + 1
                    end
                end
            end
        end
    end
    return num
end

local function GetArchiveRedNum(self)
    local num = 0
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
    if #dataList > 0 then
        local data = dataList[1]
        local subData = DataCenter.ActivityListDataManager:GetActivityDataById(data.para5)
        if subData then
            for _, str in ipairs(string.split(subData.para5, ";")) do
                local taskId = tonumber(str)
                local template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), taskId)
                if template then
                    local taskInfo = DataCenter.TaskManager:FindTaskInfo(taskId)
                    if taskInfo and taskInfo.state == TaskState.CanReceive then
                        num = num + 1
                    end
                end
            end
        end
    end
    return num
end

local function SetActBossTaskList(self)
    self.showRewardTaskId = {}
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
    if not table.IsNullOrEmpty(dataList) then
        local data = dataList[1]
        local subData = DataCenter.ActivityListDataManager:GetActivityDataById(data.para5)
        if subData then
            for _, str in ipairs(string.split(subData.para5, ";")) do
                local tempTaskId = tostring(str)
                if tempTaskId~=nil then
                    self.showRewardTaskId[tempTaskId] = 1
                end
            end
            for _, tId in ipairs(subData.taskList or {}) do
                if tId~=nil then
                    self.showRewardTaskId[tId] = 1
                end
            end
        end
    end
end
local function GetIsInShowRewardTaskList(self,taskId)
    if self.showRewardTaskId~=nil and self.showRewardTaskId[taskId]~=nil then
        return true
    end
    return false
end
local function GetCanAttackBossNum(self)
    local num = 0
    local curTime = UITimeManager:GetInstance():GetServerSeconds()
    local show = false
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
    if #dataList>0 then
        local data = dataList[1]
        if (DataCenter.BuildManager.MainLv >= data.needMainCityLevel) and
                ( (data.r1StartTime<=curTime and data.r1EndTime>=curTime) or (data.r2StartTime<=curTime and data.r2EndTime>=curTime) or (data.r3StartTime<=curTime and data.r3EndTime>=curTime) or (data.r4StartTime<=curTime and data.r4EndTime>=curTime) ) then
            show = true
        end
    end
    if show == true then
        local times = self:GetRestTransNum()
        if times>0 then
            num = 1
        end
    end
    return num
end
local function GetRedNum(self)
    return self:GetRewardRedNum() + self:GetArchiveRedNum()+ self:GetCanAttackBossNum()
end

ActBossDataManager.__init = __init
ActBossDataManager.__delete = __delete
ActBossDataManager.InitData = InitData
ActBossDataManager.RefreshTransTime = RefreshTransTime
ActBossDataManager.GetRestTransNum = GetRestTransNum
ActBossDataManager.GetLastTransTime = GetLastTransTime
ActBossDataManager.RefreshActBossDataList = RefreshActBossDataList
ActBossDataManager.GetActBossDataList = GetActBossDataList
ActBossDataManager.GetOneActBossData = GetOneActBossData
ActBossDataManager.GetActBossDataByUuid = GetActBossDataByUuid
ActBossDataManager.GetActBossDataByCityId =GetActBossDataByCityId
ActBossDataManager.RefreshRankDataList = RefreshRankDataList
ActBossDataManager.GetBossRankDataByUuid = GetBossRankDataByUuid
ActBossDataManager.GetRewardRedNum = GetRewardRedNum
ActBossDataManager.GetArchiveRedNum = GetArchiveRedNum
ActBossDataManager.GetRedNum = GetRedNum
ActBossDataManager.GetCanAttackBossNum= GetCanAttackBossNum
ActBossDataManager.SetActBossTaskList = SetActBossTaskList
ActBossDataManager.GetIsInShowRewardTaskList =GetIsInShowRewardTaskList
return ActBossDataManager