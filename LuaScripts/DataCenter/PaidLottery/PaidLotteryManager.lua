---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/6 16:27
---PaidLotteryManager.lua

local PaidLotteryManager = BaseClass("PaidLotteryManager");
local PaidLotteryData = require "DataCenter.PaidLottery.PaidLotteryData"

local function __init(self)
    self.activityInfo = nil
    self.paidLotteryInfoDic = {}
    self.skipLotteryAnim = nil
    self.cacheRollingReward = nil
    self:AddListener()
end

local function __delete(self)
    self.activityInfo = nil
    self.paidLotteryInfoDic = nil
    self.skipLotteryAnim = nil
    self.cacheRollingReward = nil
    self:RemoveListener()
end

local function AddListener(self)
    --EventManager:GetInstance():AddListener(EventId.OnPackageInfoUpdated, self.ResetGolloesMonthCardPack)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.OnPackageInfoUpdated, self.ResetGolloesMonthCardPack)
end

local function UpdateActivityInfo(self, info)
    self.activityInfo = info
end

local function GetActivityInfo(self)
    return self.activityInfo
end

local function GetPaidLotteryInfo(self)
    if self.paidLotteryInfoDic and self.activityInfo then
        return self.paidLotteryInfoDic[tonumber(self.activityInfo.id)]
    else
        return PaidLotteryData.New()
    end
end

local function UpdatePaidLotteryData(self, msg)
    local activityId = msg["activityId"]
    if string.IsNullOrEmpty(activityId) then
        return
    end
    
    local lotteryInfo = self.paidLotteryInfoDic[activityId]
    if not lotteryInfo then
        lotteryInfo = PaidLotteryData.New()
        self.paidLotteryInfoDic[activityId] = lotteryInfo
    end
    lotteryInfo:ParseData(msg)
    
    EventManager:GetInstance():Broadcast(EventId.OnPaidLotteryInfoUpdate)
end

local function GetPaidLotteryInfoReq(self)
    SFSNetwork.SendMessage(MsgDefines.GetPaidLotteryData, tonumber(self.activityInfo.id))
end

local function OnRecvPaidLotteryInfoResp(self, msg)
    self:UpdatePaidLotteryData(msg)
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

local function ClaimTicketsReq(self, stageId)
    local activityId = self.activityInfo.id
    SFSNetwork.SendMessage(MsgDefines.ClaimPaidLotteryTicket, tonumber(activityId), stageId)
end

local function OnRecvClaimTicketsResp(self, msg)
    DataCenter.RewardManager:ShowCommonReward(msg)
    if msg["reward"] ~= nil then
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    local lotteryInfo = self.paidLotteryInfoDic[msg.activityId]
    if lotteryInfo then
        lotteryInfo:SetStageClaimed(msg.stageId)
        EventManager:GetInstance():Broadcast(EventId.OnClaimPaidLotteryTicketSucc)
    end

    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

local function BeginRollReq(self)
    local activityId = self.activityInfo.id
    SFSNetwork.SendMessage(MsgDefines.BeginPaidLotteryRoll, tonumber(activityId))
end

local function OnRecvBeginRollResp(self, msg)
    if msg["reward"] ~= nil then
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    local lotteryInfo = self.paidLotteryInfoDic[msg.activityId]
    if lotteryInfo then
        lotteryInfo:SetRemainCount(msg.lotteryItemId, msg.itemCount)
        
        local skipAnim = self:GetSkipLotteryAnim()
        if skipAnim then
            EventManager:GetInstance():Broadcast(EventId.OnPaidLotteryInfoUpdate)
            DataCenter.RewardManager:ShowCommonReward(msg)
        else
            self.cacheRollingReward = msg
            EventManager:GetInstance():Broadcast(EventId.OnGetPaidLotteryRollResult, msg.lotteryItemId)
        end
    end

    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

local function DisplayCachedRollingReward(self)
    if self.cacheRollingReward then
        DataCenter.RewardManager:ShowCommonReward(self.cacheRollingReward)
        self.cacheRollingReward = nil
    end
end

local function OnRecvScoreChangePush(self, msg)
    local lotteryInfo = self.paidLotteryInfoDic[msg.activityId]
    if lotteryInfo then
        lotteryInfo:SetCurScore(msg.score)
        EventManager:GetInstance():Broadcast(EventId.OnPaidLotteryScoreChange)
    end
    
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end


local function SetSkipLotteryAnim(self, needSkip)
    self.skipLotteryAnim = needSkip
    local strK = LuaEntry.Player.uid .. "_SkipLotteryAnim"
    CS.GameEntry.Setting:SetBool(strK, needSkip)
end

local function GetSkipLotteryAnim(self)
    if self.skipLotteryAnim == null then
        local strK = LuaEntry.Player.uid .. "_SkipLotteryAnim"
        self.skipLotteryAnim = CS.GameEntry.Setting:GetBool(strK, false)
    end
    return self.skipLotteryAnim
end

local function CheckIfPaidLotteryOpen(self)
    if self.activityInfo and DataCenter.ActivityListDataManager:CheckIsSend(self.activityInfo) then
        return true
    else
        return false
    end
end

local function CheckIfShowRed(self)
    if not self.activityInfo then
        return false, 0
    end
    local lotteryInfo = self:GetPaidLotteryInfo()
    if not lotteryInfo then
        return false, 0
    end
    local redCount = 0
    for i, v in ipairs(lotteryInfo.stageList) do
        if lotteryInfo.score >= v.needScore and v.state == 0 then
            redCount = redCount + 1
        end
    end
    
    local hasTimes = self:CheckIfHasRollingTimes()
    local itemCount = DataCenter.ItemData:GetItemCount(lotteryInfo.costGoodsId)
    if hasTimes and itemCount >= lotteryInfo.costNum then
        redCount = redCount + 1
    end

    if redCount > 0 then
        return true, redCount
    else
        return false, 0
    end
end

local function CheckIfHasRollingTimes(self)
    local lotteryInfo = self:GetPaidLotteryInfo()
    if not lotteryInfo then
        return false
    end
    local list = lotteryInfo.itemsList
    for i, v in ipairs(list) do
        if v.remainCount > 0 then
            return true
        end
    end
    return false
end


PaidLotteryManager.__init = __init
PaidLotteryManager.__delete = __delete
PaidLotteryManager.AddListener = AddListener
PaidLotteryManager.RemoveListener = RemoveListener

PaidLotteryManager.UpdateActivityInfo = UpdateActivityInfo
PaidLotteryManager.GetActivityInfo = GetActivityInfo
PaidLotteryManager.GetPaidLotteryInfo = GetPaidLotteryInfo
PaidLotteryManager.UpdatePaidLotteryData = UpdatePaidLotteryData
PaidLotteryManager.GetPaidLotteryInfoReq = GetPaidLotteryInfoReq
PaidLotteryManager.OnRecvPaidLotteryInfoResp = OnRecvPaidLotteryInfoResp
PaidLotteryManager.ClaimTicketsReq = ClaimTicketsReq
PaidLotteryManager.OnRecvClaimTicketsResp = OnRecvClaimTicketsResp
PaidLotteryManager.BeginRollReq = BeginRollReq
PaidLotteryManager.OnRecvBeginRollResp = OnRecvBeginRollResp
PaidLotteryManager.DisplayCachedRollingReward = DisplayCachedRollingReward
PaidLotteryManager.OnRecvScoreChangePush = OnRecvScoreChangePush
PaidLotteryManager.SetSkipLotteryAnim = SetSkipLotteryAnim
PaidLotteryManager.GetSkipLotteryAnim = GetSkipLotteryAnim
PaidLotteryManager.CheckIfPaidLotteryOpen = CheckIfPaidLotteryOpen
PaidLotteryManager.CheckIfShowRed = CheckIfShowRed
PaidLotteryManager.CheckIfHasRollingTimes = CheckIfHasRollingTimes

return PaidLotteryManager