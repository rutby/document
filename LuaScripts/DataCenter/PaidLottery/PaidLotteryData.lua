---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/6 16:27
---PaidLotteryData.lua


local PaidLotteryData = BaseClass("PaidLotteryData")

local function __init(self)
    self.activityId = 0
    self.stageList = {}
    self.itemsList = {}
    self.costNum = 0
    self.costGoodsId = ""
    self.score = 0
end

local function __delete(self)
    self.activityId = nil
    self.stageList = nil
    self.itemsList = nil
    self.costNum = nil
    self.costGoodsId = nil
    self.score = nil
end

local function ParseData(self,message)
    if not message then
        return
    end

    if message["activityId"] then
        self.playerUid = message["activityId"]
    end
    if message["stageArr"] then
        self.stageList = {}
        local stageArr = message["stageArr"]
        for i, v in ipairs(stageArr) do
            local newStage = {}
            newStage.stageId = v.stageId
            newStage.reward = v.reward
            newStage.needScore = v.score
            newStage.state = v.state--是否领取过  0未领取  1已领取
            newStage.GetTargetRewardCount = function(self, rewardType, itemId)
                local retCount = 0
                local tempRewards = DataCenter.RewardManager:ReturnRewardParamForView(self.reward)
                for m, n in ipairs(tempRewards) do
                    if n.rewardType == rewardType and n.itemId == itemId then
                        retCount = n.count
                        break
                    end
                end
                return retCount
            end
            table.insert(self.stageList, newStage)
        end
    end
    if message["itemArr"] then
        self.itemsList = {}
        local itemArr = message["itemArr"]
        for i, v in ipairs(itemArr) do
            local newItem = {}
            newItem.id = v.itemId--配置id
            local goodsTb = string.split(v.goods, ";")
            if #goodsTb == 2 then
                newItem.goods = {--
                    rewardType = RewardType.GOODS,
                    itemId = goodsTb[1],
                    count = tonumber(goodsTb[2]),
                }
            end
            newItem.position = v.position--
            newItem.remainCount = v.count--
            table.insert(self.itemsList, newItem)
        end
        table.sort(self.itemsList, function(a ,b)
            if a.position ~= b.position then
                return a.position < b.position
            else
                return false
            end
        end)
    end
    if message["costNum"] then
        self.costNum = message["costNum"]
    end
    if message["costGoodsId"] then
        self.costGoodsId = message["costGoodsId"]
    end
    if message["score"] then
        self.score = message["score"]
    end
end

local function SetStageClaimed(self, stageId)
    for i, v in ipairs(self.stageList) do
        if v.stageId == stageId then
            v.state = 1
            break
        end
    end
end

local function SetRemainCount(self, id, count)
    for i, v in ipairs(self.itemsList) do
        if v.id == id then
            v.remainCount = count
            break
        end
    end
end

local function SetCurScore(self, score)
    self.score = score
end

PaidLotteryData.__init = __init
PaidLotteryData.__delete = __delete
PaidLotteryData.ParseData = ParseData
PaidLotteryData.SetStageClaimed = SetStageClaimed
PaidLotteryData.SetRemainCount = SetRemainCount
PaidLotteryData.SetCurScore = SetCurScore

return PaidLotteryData