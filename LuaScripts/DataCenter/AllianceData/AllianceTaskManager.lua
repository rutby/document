---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/3/29 20:36
---


local AllianceTaskManager = BaseClass("AllianceTaskManager");

local function __init(self)
    self.taskConfList = nil--配置
    self.curTaskList = nil--当前任务列表
    self.taskInfoDic = {}--进度
    self:AddListener()
end

local function AddListener(self)
    --EventManager:GetInstance():AddListener(EventId.TrainingArmy, self.OnBuildTrainingStartSignal)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.GetAllDetectInfo, self.CheckDetectEventSignal)
end

local function __delete(self)
    self.taskConfList = nil
    self.taskInfoDic = nil
    self.curTaskList = nil
    self:RemoveListener()
end

local function RequestTaskInfo(self)
    if LuaEntry.DataConfig:CheckSwitch("alliance_task") then
        SFSNetwork.SendMessage(MsgDefines.GetAllianceTaskInfo)
    end
end

local function InitTaskConfList(self)
    self.taskConfList = {}
    LocalController:instance():visitTable(TableName.AllianceTask, function(id,lineData)
        local newOne = AllianceTaskTemplate.New()
        newOne:InitData(lineData)
        table.insert(self.taskConfList, newOne)
    end)
end

local function GetTaskList(self)
    self:UpdateCurTaskList()

    local targetTb = {}
    for i, v in ipairs(self.curTaskList) do
        if self.taskInfoDic[v.id]:CheckIfCanClaim() and not targetTb[1] then
            targetTb[1] = v
        else
            local status = self.taskInfoDic[v.id]:GetTaskStatus()
            if status == 2 then
                if not targetTb[2] then
                    targetTb[2] = v
                end
            elseif status == 1 then
                if targetTb[3] then
                    if self.taskInfoDic[v.id].startTime < self.taskInfoDic[targetTb[3].id].startTime then
                        targetTb[3] = v
                    end
                else
                    targetTb[3] = v
                end
            end
        end
    end
    
    table.sort(self.curTaskList, function(a, b)
        local timeA = self.taskInfoDic[a.id].startTime
        local timeB = self.taskInfoDic[b.id].startTime
        if timeA ~= timeB then
            return timeA < timeB
        else
            return a.id < b.id
        end
    end)

    local targetIndex = 1
    if #self.curTaskList > 0 then
        local targetId = self.curTaskList[1].id
        for i = 1, 3 do
            if targetTb[i] then
                targetId = targetTb[i].id
                break
            end
        end
        for i, v in ipairs(self.curTaskList) do
            if v.id == targetId then
                targetIndex = i
                break
            end
        end
    end
    targetIndex  = math.min(#self.curTaskList - 2, targetIndex)
    targetIndex = math.max(targetIndex, 1)

    return self.curTaskList, targetIndex
end

local function GetTaskIndex(self, taskId)
    self:UpdateCurTaskList()

    for i, v in ipairs(self.curTaskList) do
        if v.id == taskId then
            return i
        end
    end
end

local function UpdateCurTaskList(self)
    if not self.taskConfList or #self.taskConfList == 0 then
        self:InitTaskConfList()
    end
    self.curTaskList = {}
    for i, v in ipairs(self.taskConfList) do
        if self.taskInfoDic[v.id] then
            table.insert(self.curTaskList, v)
        end
    end
end

local function GetTaskInfo(self, taskId)
    return self.taskInfoDic[taskId]
end

local function UpdateOneAllianceTask(self, t)
    if self.taskInfoDic[t.taskId] then
        self.taskInfoDic:ParseData(t)
    else
        local newOne = AllianceTaskData.New()
        newOne:ParseData(t)
        self.taskInfoDic[newOne.taskId] = newOne
    end
    EventManager:GetInstance():Broadcast(EventId.OnUpdateAllianceTask, t.taskId)
end

local function UpdateAllianceTaskInfoDic(self, t)
    if t["taskList"] then
        self.taskInfoDic = {}
        for i, v in ipairs(t["taskList"]) do
            local newOne = AllianceTaskData.New()
            newOne:ParseData(v)
            self.taskInfoDic[newOne.taskId] = newOne
        end
        EventManager:GetInstance():Broadcast(EventId.OnUpdateAllianceTask)
    end
    self:UpdateNextUnlockTime()
end

local function SetTaskClaimed(self, taskId)
    if not self.taskInfoDic[taskId] then
        return
    end
    self.taskInfoDic[taskId]:SetTaskClaimed()
end

--功能是否可用
local function CheckIfAllianceTaskOpen(self)
    if not LuaEntry.DataConfig:CheckSwitch("alliance_task") then
        return false
    end

    local seasonId = DataCenter.SeasonDataManager:GetSeason()
    if seasonId > 0 then
        return false
    end
    
    local alliance = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    if alliance and alliance.allianceTaskEndTime > 0 and serverTime < alliance.allianceTaskEndTime then
        local taskList = self:GetTaskList()
        local firstStartTime = 0
        if #taskList > 0 then
            local taskInfo = self.taskInfoDic[taskList[1].id]
            if taskInfo then
                firstStartTime = taskInfo.startTime
            end
        end
        if firstStartTime <= serverTime then
            return true, alliance.allianceTaskEndTime
        else
            return true, firstStartTime
        end
    else
        return false
    end 
end

local function GetTaskRedCount(self)
    local unclaimedNum = 0
    local unlockedNum = 0
    local curTime = UITimeManager:GetInstance():GetServerTime()
    for i, v in pairs(self.taskInfoDic) do
        if v:CheckIfCanClaim() then
            unclaimedNum = unclaimedNum + 1
        end
        if v.startTime < curTime then
            unlockedNum = unlockedNum + 1
        end
    end
    
    local strKey = "AllianceTaskCheckedNum_" .. LuaEntry.Player.uid
    local oldUnlockNum = CS.GameEntry.Setting:GetInt(strKey, 0)
    local newTaskNum = unlockedNum - oldUnlockNum > 0 and 1 or 0
    
    return unclaimedNum + newTaskNum
end

local function ResetOldTaskNum(self)
    local strKey = "AllianceTaskCheckedNum_" .. LuaEntry.Player.uid
    local unlockedNum = 0
    local curTime = UITimeManager:GetInstance():GetServerTime()
    for i, v in pairs(self.taskInfoDic) do
        if v.startTime < curTime then
            unlockedNum = unlockedNum + 1
        end
    end
    CS.GameEntry.Setting:SetInt(strKey, unlockedNum)
    EventManager:GetInstance():Broadcast(EventId.OnAllianceTaskRedChange)
    self:UpdateNextUnlockTime()
end

local function UpdateNextUnlockTime(self)
    if self.redTimer then
        self.redTimer:Stop()
    end
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local taskList = self:GetTaskList()
    local nextUnlock = 0
    for i, v in ipairs(taskList) do
        local tInfo = self:GetTaskInfo(v.id)
        if tInfo.startTime > curTime then
            nextUnlock = tInfo.startTime
            break
        end
    end
    if nextUnlock > 0 then
        local delayT = math.modf((nextUnlock - curTime) / 1000) + 10
        self.redTimer = TimerManager:GetInstance():DelayInvoke(function()
            EventManager:GetInstance():Broadcast(EventId.UpdateMainAllianceRedCount)
            self:UpdateNextUnlockTime()
        end, delayT)
    end
end

local function GetTaskConfByFuncType(self, tempType)
    local taskList = self:GetTaskList()
    local conf = nil
    local tempIndex = nil
    for i, v in ipairs(taskList) do
        if v.func == tempType then
            conf = v
            tempIndex = i
            break
        end
    end
    if not conf then
        for i, v in ipairs(self.taskConfList) do
            if v.func == tempType then
                conf = v
            end
        end
    end
    return conf, tempIndex
end

AllianceTaskManager.__init = __init
AllianceTaskManager.AddListener = AddListener
AllianceTaskManager.RemoveListener = RemoveListener
AllianceTaskManager.__delete = __delete

AllianceTaskManager.RequestTaskInfo = RequestTaskInfo
AllianceTaskManager.InitTaskConfList = InitTaskConfList
AllianceTaskManager.SetTaskClaimed = SetTaskClaimed
AllianceTaskManager.GetTaskList = GetTaskList
AllianceTaskManager.UpdateAllianceTaskInfoDic = UpdateAllianceTaskInfoDic
AllianceTaskManager.UpdateOneAllianceTask = UpdateOneAllianceTask
AllianceTaskManager.GetTaskInfo = GetTaskInfo
AllianceTaskManager.CheckIfAllianceTaskOpen = CheckIfAllianceTaskOpen
AllianceTaskManager.GetTaskRedCount = GetTaskRedCount
AllianceTaskManager.ResetOldTaskNum = ResetOldTaskNum
AllianceTaskManager.GetTaskConfByFuncType = GetTaskConfByFuncType
AllianceTaskManager.GetTaskIndex = GetTaskIndex
AllianceTaskManager.UpdateCurTaskList = UpdateCurTaskList
AllianceTaskManager.UpdateNextUnlockTime = UpdateNextUnlockTime
return AllianceTaskManager