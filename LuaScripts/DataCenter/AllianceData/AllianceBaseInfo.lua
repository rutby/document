---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/7/22 20:30
---
local AllianceBaseInfo = BaseClass("AllianceBaseInfo")

local function __init(self)
    --联盟的一些基本数据
    self.uid ="" --联盟uuid
    self.country ="" 
    self.icon="1;1;1;1"--联盟旗帜（背景；背景色；前景；前景色）
    self.allianceName = ""--联盟名称
    self.language =""
    self.abbr="" --联盟简称
    self.fightPower =0--联盟总战力
    self.intro = ""--联盟宣言
    self.curMember =0 --联盟当前人数
    self.maxMember = 0 --最大成员数
    self.announce =""--公告
    self.rename = 0--联盟改名次数
    self.abbrRename = 0--联盟简称修改次数
    self.reIcon = 0 --是否改过旗帜 0 没有改过，1为改过
    self.createTime = 0--联盟创建时间
    self.allianceTaskEndTime = 0--联盟任务（里程碑）结束时间
    self.unLockFlag = 0
    self.alliancePoint = 0
    self.accPoint = 0
    self.lastRecruitTime = 0

    --联盟的服务器id相关
    self.ownerServerId =-1 --联盟拥有者服务器id
    self.crossFightSrcServerId = -1 --表示联盟所在服。 -1 表示没有开放独立联盟跨服， >=0表示现在开放了独立联盟；-1时需用getSelfServerId()方法获取
    self.createServer = -1 --联盟创建时所在服务器
    
    --盟主相关数据
    self.leaderUid = "" --盟主UUid
    self.leaderName = "" --盟主名字
    self.leaderPic = "" -- 盟主头像
    self.leaderPicVer =0 --盟主自定义头像
    self.leaderMonthCardEndTime = 0--盟主月卡结束时间
    self.leaderHeadSkinId = nil
    self.leaderHeadSkinET = nil

    --有关联盟招募相关的一些参数
    self.recruitTotal =0 --联盟是否公开招募,1为不公开招募
    self.recruit =0 --0是需要系统审核，1是需要玩家审核
    self.averageLevel = 0 --联盟平均等级
    self.averagePower = 0--联盟平均战力
    self.castleRestrictionN =0 --玩家等级限制条件
    self.powerRestrictionN = 0 --玩家战力限制
    self.recommendFunc = 0
    
    --玩家数据
    self.joinTime =0 -- 加入联盟的时间
    self.rank =0 --表示玩家在联盟中的级别
    self.applied =0 --加入联盟申请中
    self.elected = false-- 是否报名参选盟主
    self.voted = false--是否已投票选择盟主 
    self.sysAlState = SysAlState.Normal
    self.stateEndTime = 0--self.sysAlState状态结束时间
    self.waitMerge = nil--待合盟(==1)（可花费水晶成为盟主）
    self.register = 0--1:已报名
    self.voteList = {}--voteUid,type(0:r4,1r5)

    self.selfForce = 0
    self.forceRank = 0
    self.s3Rank = 0
    self.s3Score = 0
    
    --临时数据
    self.giftLevel = 0 --查看其他联盟时使用这个数值
end

local function __delete(self)
    self.uid =nil
    self.country =nil
    self.icon=nil
    self.allianceName = nil
    self.language =nil
    self.abbr=nil
    self.fightPower =nil
    self.intro = nil

    self.curMember =nil
    self.maxMember = nil
    self.announce =nil
    self.abbrRename =nil
    self.rename = nil
    self.reIcon =nil
    self.createTime = nil
    self.allianceTaskEndTime = nil
    self.unLockFlag = nil
    self.alliancePoint = nil
    self.accPoint = nil
    
    self.ownerServerId =nil
    self.crossFightSrcServerId = nil
    self.giftLevel =nil
    self.leaderUid = nil 
    self.leaderName = nil 
    self.leaderPic = nil 
    self.leaderPicVer = nil
    self.recruitTotal =nil
    self.recommendFunc = nil
    self.recruit =nil
    self.averageLevel = nil
    self.averagePower = nil
    self.castleRestriction =nil
    self.powerRestriction = nil
    self.joinTime =nil
    self.rank =nil
    self.applied =nil
    self.elected = nil
    self.voted = nil 
    self.sysAlState = nil
    self.stateEndTime = nil
    self.waitMerge = nil
    self.register = nil
    self.voteList = nil
end
local function ParseData(self,message,isSelfAlliance)
    if message ==nil then
        return
    end
    if message["alliancename"]~=nil then
        self.allianceName = message["alliancename"]
    end
    if message["fightpower"]~=nil then
        self.fightPower = message["fightpower"]
    end
    if message["uid"]~=nil then
        self.uid = message["uid"]
    end
    if message["abbr"]~=nil then
        self.abbr = message["abbr"]
    end
    if message["language"]~=nil then
        self.language = message["language"]
    end
    if message["curMember"]~=nil then
        self.curMember = message["curMember"]
    end
    if message["icon"]~=nil then
        self.icon = string.IsNullOrEmpty(message["icon"]) and "1;1;1;1" or message["icon"]
    end
    if message["applied"]~=nil then
        self.applied = message["applied"]
    end
    if message["learderName"]~=nil then
        self.leaderName = message["learderName"]
    end
    if message["learderUid"]~=nil then
        self.leaderUid = message["learderUid"]
    end
    if message["learderPic"]~=nil then
        self.leaderPic = message["learderPic"]
    end
    if message["learderPicVer"]~=nil then
        self.leaderPicVer = message["learderPicVer"]
    end
    if message["learderMonthCardEndTime"] then
        self.leaderMonthCardEndTime = message["learderMonthCardEndTime"]
    end
    if message["leaderHeadSkinId"] then
        self.leaderHeadSkinId = message["headSkinId"]
    end
    if message["leaderHeadSkinET"] then
        self.leaderHeadSkinET = message["headSkinET"]
    end

    if message["country"]~=nil then
        self.country = message["country"]
    end
    if message["recruit"]~=nil then
        self.recruit= message["recruit"]
    end
    if message["recruitTotal"]~=nil then
        self.recruitTotal = message["recruitTotal"]
    end
    if message["recommendFunc"] then
        self.recommendFunc = message["recommendFunc"]
    end
    if message["rank"]~=nil then
        self.rank = message["rank"]
    end
    if message["intro"]~=nil then
        self.intro = message["intro"]
    end
    if message["jointime"]~=nil then
        self.joinTime = message["jointime"]
    end
    if message["announce"]~=nil then
        self.announce = message["announce"]
    end
    if message["lastRecruitTime"] then
        self.lastRecruitTime = message["lastRecruitTime"]
    end
    if message["curMember"]~=nil then
        self.curMember = message["curMember"]
    end
    if message["maxMember"]~=nil then
        self.maxMember = message["maxMember"]
    end
    if message["abbrRename"]~=nil then
        self.abbrRename = message["abbrRename"]
    end
    if message["rename"] then
        self.rename = message["rename"]
    end
    if message["reicon"]~=nil then
        self.reIcon = message["reicon"]
    end
    if message["createtime"] then
        self.createTime = message["createtime"]
    end
    if message["ownerServerId"]~=nil then
        self.ownerServerId = message["ownerServerId"]
    end
    if message["crossFightSrcServerId"]~=nil then
        self.crossFightSrcServerId = message["crossFightSrcServerId"]
    end
    if message["ownerServerId"]~=nil then
        self.ownerServerId = message["ownerServerId"]
    end
    if message["powerRestrictionN"]~=nil then
        self.powerRestrictionN = message["powerRestrictionN"]
    end
    if message["castleRestrictionN"]~=nil then
        self.castleRestrictionN = message["castleRestrictionN"]
    end
    if message["allianceTaskEndTime"] then
        self.allianceTaskEndTime = message["allianceTaskEndTime"]
    end
    if message["unLockFlag"] then
        self.unLockFlag = message["unLockFlag"]
    end
    
    if message["alliancepoint"] ~= nil then
        DataCenter.AllianceShopDataManager:SetAlliancePoint(message["alliancepoint"])
        self.alliancePoint = message["alliancepoint"]
    end

    if message["accPoint"]~=nil then
        DataCenter.AllianceShopDataManager:SetAccPoint(message["accPoint"])
        self.accPoint = message["accPoint"]
    end
    
    if message["averageLevel"]~=nil then
        self.averageLevel = message["averageLevel"]
    end
    if message["averagePower"]~=nil then
        self.averagePower = message["averagePower"]
    end
    if message["candidate"] ~= nil then
        self.elected = message["candidate"]--0未参选  1 已参选
    end
    if message["vote"] then
        self.voted = message["vote"]--0未投票  1 已投票
    end
    --if message["sysAlState"] then
    --    self.sysAlState = message["sysAlState"]--SysAlState 服务器不发了 
    --end
    --if message["stateEndTime"] then
    --    self.stateEndTime = message["stateEndTime"]
    --end
    if message["createServer"] then
        self.createServer = message["createServer"]
    end
    if message["waitMerge"] then
        self.waitMerge = message["waitMerge"]
    end
    if message["register"] then
        self.register = message["register"] 
    end
    if message["voteList"] then
        self.voteList = message["voteList"]
    end
    if message["system"] then
        self.createdByPlayer = message["system"] == 1
    end
    

    if message["helpcount"]~=nil then
        if isSelfAlliance then
            DataCenter.AllianceHelpDataManager:SetHelpNum(message["helpcount"])
        end
        
    end

    if message["giftlevel"]~=nil then
        if isSelfAlliance then
            DataCenter.AllianceGiftDataManager:SetCurLevel(message["giftlevel"])
        end
        self.giftLevel = message["giftlevel"]
    end
end

local function ParseDataNew(self,message,isSelfAlliance)
    if message ==nil then
        return
    end
    if message["name"]~=nil then
        self.allianceName = message["name"]
    end
    if message["fightPower"]~=nil then
        self.fightPower = message["fightPower"]
    end
    if message["uid"]~=nil then
        self.uid = message["uid"]
    end
    if message["abbr"]~=nil then
        self.abbr = message["abbr"]
    end
    if message["language"]~=nil then
        self.language = message["language"]
    end
    if message["curMember"]~=nil then
        self.curMember = message["curMember"]
    end
    if message["icon"]~=nil then
        self.icon = string.IsNullOrEmpty(message["icon"]) and "1;1;1;1" or message["icon"]
    end
    if message["leaderName"]~=nil then
        self.leaderName = message["leaderName"]
    end
    if message["leaderUid"]~=nil then
        self.leaderUid = message["leaderUid"]
    end
    if message["leaderPic"]~=nil then
        self.leaderPic = message["leaderPic"]
    end
    if message["leaderPicVer"]~=nil then
        self.leaderPicVer = message["leaderPicVer"]
    end
    if message["country"]~=nil then
        self.country = message["country"]
    end
    if message["recruit"]~=nil then
        self.recruit= message["recruit"]
    end
    if message["recruitTotal"]~=nil then
        self.recruitTotal = message["recruitTotal"]
    end
    if message["rank"]~=nil then
        self.rank = message["rank"]
    end
    if message["intro"]~=nil then
        self.intro = message["intro"]
    end
    if message["announce"]~=nil then
        self.announce = message["announce"]
    end
    if message["curMember"]~=nil then
        self.curMember = message["curMember"]
    end
    if message["maxMember"]~=nil then
        self.maxMember = message["maxMember"]
    end
    if message["abbrRename"]~=nil then
        self.abbrRename = message["abbrRename"]
    end
    if message["rename"] then
        self.rename = message["rename"]
    end
    if message["reicon"]~=nil then
        self.reIcon = message["reicon"]
    end
    if message["createTime"] then
        self.createTime = message["createTime"]
    end
    if message["ownerServerId"]~=nil then
        self.ownerServerId = message["ownerServerId"]
    end
    if message["crossFightSrcServerId"]~=nil then
        self.crossFightSrcServerId = message["crossFightSrcServerId"]
    end
    if message["ownerServerId"]~=nil then
        self.ownerServerId = message["ownerServerId"]
    end
    if message["powerRestrictionN"]~=nil then
        self.powerRestrictionN = message["powerRestrictionN"]
    end
    if message["castleRestrictionN"]~=nil then
        self.castleRestrictionN = message["castleRestrictionN"]
    end
    if message["allianceTaskEndTime"] then
        self.allianceTaskEndTime = message["allianceTaskEndTime"]
    end
    if message["unLockFlag"] then
        self.unLockFlag = message["unLockFlag"]
    end

    if message["alliancepoint"] ~= nil then
        DataCenter.AllianceShopDataManager:SetAlliancePoint(message["alliancepoint"])
        self.alliancePoint = message["alliancepoint"]
    end

    if message["accPoint"]~=nil then
        DataCenter.AllianceShopDataManager:SetAccPoint(message["accPoint"])
        self.accPoint = message["accPoint"]
    end

    if message["averageLevel"]~=nil then
        self.averageLevel = message["averageLevel"]
    end
    if message["averagePower"]~=nil then
        self.averagePower = message["averagePower"]
    end
    if message["candidate"] ~= nil then
        self.elected = message["candidate"]--0未参选  1 已参选
    end
    if message["vote"] then
        self.voted = message["vote"]--0未投票  1 已投票
    end
    --if message["sysAlState"] then
    --    self.sysAlState = message["sysAlState"]--SysAlState 服务器不发了 
    --end
    --if message["stateEndTime"] then
    --    self.stateEndTime = message["stateEndTime"]
    --end
    if message["waitMerge"] then
        self.waitMerge = message["waitMerge"]
    end
    if message["register"] then
        self.register = message["register"]
    end
    if message["voteList"] then
        self.voteList = message["voteList"]
    end
    if message["system"] then
        self.createdByPlayer = message["system"] == 1
    end
    if message["createServer"] then
        self.createServer = message["createServer"]
    end

    if message["helpcount"]~=nil then
        if isSelfAlliance then
            DataCenter.AllianceHelpDataManager:SetHelpNum(message["helpcount"])
        end

    end

    if message["giftLevel"]~=nil then
        if isSelfAlliance then
            DataCenter.AllianceGiftDataManager:SetCurLevel(message["giftLevel"])
        end
        self.giftLevel = message["giftLevel"]
    end
end
local function SetApplyState(self,state)
    self.applied = state
end

local function CheckIfIsVirtualLeader(self)
    return self.leaderUid == ""
end

local function GetHeadBgImg_Leader(self)
    --local headBgImg = nil
    --
    local serverTimeS = UITimeManager:GetInstance():GetServerSeconds()
    --if self.leaderMonthCardEndTime and self.leaderMonthCardEndTime > serverTimeS then
    --    headBgImg = "Common_playerbg_golloes"
    --end
    --
    --if headBgImg and headBgImg ~= "" then
    --    return string.format(LoadPath.CommonNewPath,headBgImg)
    --end
    local headBgImg = DataCenter.DecorationDataManager:GetHeadFrame(self.leaderHeadSkinId, self.leaderHeadSkinET, self.leaderMonthCardEndTime and self.leaderMonthCardEndTime > serverTimeS)

    return headBgImg
end

local function RefreshAllianceSetting(self,message)
    if message["intro"]~=nil then
        self.intro = message["intro"]
    end
    if message["name"]~=nil then
        self.allianceName = message["name"]
    end
    if message["abbr"]~=nil then
        self.abbr = message["abbr"]
    end
    if message["rename"] then
        self.rename = message["rename"]
    end
    if message["abbrRename"] then
        self.abbrRename = message["abbrRename"]
    end
    if message["recruitTotal"]~=nil then
        self.recruitTotal = message["recruitTotal"]
    end
    if message["language"]~=nil then
        self.language = message["language"]
    end
    if message["powerRestrictionN"]~=nil then
        self.powerRestrictionN = message["powerRestrictionN"]
    end
    if message["castleRestrictionN"]~=nil then
        self.castleRestrictionN = message["castleRestrictionN"]
    end
end

local function UpdateVoteList(self, voteList)
    self.voteList = voteList
end

local function UpdateRegister(self, register)
    self.register = register
end

local function CheckIfAllianceFuncOpen(self, funcType)
    local temp = 10 ^ (funcType - 1)
    local num = self.unLockFlag / temp
    local numIsOpen = math.modf(num % 10)
    return numIsOpen == 1
end

local function GetCountryFlagTemplate(self)
    local country = string.IsNullOrEmpty(self.country) and DefaultNation or self.country
    return DataCenter.NationTemplateManager:GetNationTemplate(country)
end
local function SetAllianceForceData(self,message)
    if message["selfRanking"]~=nil then
        self.forceRank = message["selfRanking"]
    end
    if message["selfForce"]~=nil then
        self.selfForce = message["selfForce"]
    end
end
local function SetAllianceScoreData(self,message)
    if message["selfRank"]~=nil then
        self.s3Rank = message["selfRank"]
    end
    if message["selfScore"]~=nil then
        self.s3Score = message["selfScore"]
    end
end

AllianceBaseInfo.__init = __init
AllianceBaseInfo.__delete = __delete
AllianceBaseInfo.ParseData = ParseData
AllianceBaseInfo.SetApplyState = SetApplyState
AllianceBaseInfo.RefreshAllianceSetting = RefreshAllianceSetting
AllianceBaseInfo.CheckIfIsVirtualLeader = CheckIfIsVirtualLeader
AllianceBaseInfo.UpdateVoteList = UpdateVoteList
AllianceBaseInfo.UpdateRegister = UpdateRegister
AllianceBaseInfo.CheckIfAllianceFuncOpen = CheckIfAllianceFuncOpen
AllianceBaseInfo.GetHeadBgImg_Leader = GetHeadBgImg_Leader
AllianceBaseInfo.GetCountryFlagTemplate = GetCountryFlagTemplate
AllianceBaseInfo.ParseDataNew = ParseDataNew
AllianceBaseInfo.SetAllianceForceData = SetAllianceForceData
AllianceBaseInfo.SetAllianceScoreData = SetAllianceScoreData
return AllianceBaseInfo
