---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime:
---
---联盟成员/联盟城被打数据
local AllianceAlertDataManager = BaseClass("AllianceAlertDataManager");
local Localization = CS.GameEntry.Localization
local Setting = CS.GameEntry.Setting
local AllianceAlertInfo = require "DataCenter.AllianceData.AllianceAlertInfo"

local function __init(self)
    self.AllianceAlertList = {}
    self.AllianceAlertIdList = {}           --存key的list
    self.lastNum = 0
    self.selfCrossAlert = {} --自己跨服被打的数据
end
local function __delete(self)
    self.AllianceAlertList = nil
    self.AllianceAlertIdList = nil
    self.lastNum = nil
    self.selfCrossAlert = {} --自己跨服被打的数据
end

--登陆时请求一下
local function InitData(self)
    local serverId = LuaEntry.Player:GetSelfServerId()
    if serverId and serverId ~= -1 then
        SFSNetwork.SendMessage(MsgDefines.GetAllianceAlertInfo, serverId)
    end
end

--登陆时获取
local function InitAllianceAlertList(self,message)
    self.AllianceAlertList = {}
    self.AllianceAlertIdList ={}
    self.selfCrossAlert = {}
    if message["infos"]~=nil then
        local arr = message["infos"]
        for k,v in pairs(arr) do
            self:UpdateAllianceAlertList(v)
        end
    end
    if message["crossAlerts"]~=nil then
        local array = message["crossAlerts"]
        for a,b in pairs(array) do
            if b["infos"]~=nil then
                local arr = b["infos"]
                for k,v in pairs(arr) do
                    self:UpdateAllianceAlertList(v)
                end
            end
        end
        
    end
    EventManager:GetInstance():Broadcast(EventId.UpdateAlertData)
end

--更新部队信息 push处理
local function UpdateAllianceAlertList(self,message)
    if message ~= nil then
        if message.targetUid == LuaEntry.Player.uid then
            local info = AllianceAlertInfo.New()
            info:ParseData(message)
            self.selfCrossAlert[info.key] = info
        else
            if not self.AllianceAlertList[message.key] then
                local info = AllianceAlertInfo.New()
                info:ParseData(message)
                self.AllianceAlertList[info.key] =info
                table.insert(self.AllianceAlertIdList,info.key)
            end
        end
    end
end

local function GetAllianceAlertList(self)
    return self.AllianceAlertList
end

local function GetAllianceAlertByIdList(self)
    return self.AllianceAlertIdList
end

function AllianceAlertDataManager:GetSelfCrossAlert()
    return self.selfCrossAlert
end

local function GetAllianceAlertDataByKey(self,key)
    if self.AllianceAlertList[key] then
        return self.AllianceAlertList[key]
    end
    return nil
end

local function UpdateMarchList(self,message)
    local marchInfo = {}
    for i = 1, #message["marches"] do
        marchInfo[i] = {}
        marchInfo[i].uuid = message["marches"][i].uuid
        marchInfo[i].baseInfo = message["marches"][i]
        local combatInfos =  message["marches"][i].combatInfos
        if combatInfos ~=nil then
            for k = 1, #combatInfos do
                local armyCombatUnit = PBController.ParsePb1(combatInfos[k], "protobuf.ArmyCombatUnit")
                local armyInfo = {}
                armyInfo.soldiers = armyCombatUnit.armyInfo["soldiers"] or {}
                armyInfo.heros = armyCombatUnit.armyInfo["heroes"] or {}
                marchInfo[i].armyInfo = armyInfo
            end
        end
    end
    local targetPoint = nil
    if message["targetPoint"] then
        targetPoint = message["targetPoint"]
    end
    --拼一个Key
    local param1 = ""
    if message["type"] == AllianceAlertType.BUILDING then
        param1 = "BUILDING"
    elseif message["type"] == AllianceAlertType.COLLECT then
        param1 = "COLLECT"
    elseif message["type"] == AllianceAlertType.ALLIANCE_CITY then
        param1 = "ALLIANCE_CITY"
    elseif message["type"] == AllianceAlertType.DESERT then
        param1 = "DESERT"
    elseif message["type"] == AllianceAlertType.ALLIANCE_BUILD then
        param1 = "ALLIANCE_BUILD"
    elseif message["type"] == AllianceAlertType.DRAGON_BUILDING then
        param1 = "DRAGON_BUILDING"
    end
    local key = param1.."_"..tostring(message["content"]).."_"..message["uid"].."_"..message["targetUuid"]
    if self.AllianceAlertList[key] then
        self.AllianceAlertList[key].marchInfo = marchInfo
        --更新下显示部队
        self.AllianceAlertList[key].num = #marchInfo
        if marchInfo[1] then
            self.AllianceAlertList[key].atkAlAbbr = marchInfo[1].baseInfo.allianceAbbr
            self.AllianceAlertList[key].atkName = marchInfo[1].baseInfo.ownerName
            self.AllianceAlertList[key].atkHeadFrame = marchInfo[1].baseInfo.headFrame
            self.AllianceAlertList[key].atkPic = marchInfo[1].baseInfo.pic
            self.AllianceAlertList[key].atkPicVer = marchInfo[1].baseInfo.picVer
            self.AllianceAlertList[key].atkUid = marchInfo[1].baseInfo.ownerUid
        end
    end
    EventManager:GetInstance():Broadcast(EventId.UpdateAlertData,true)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllianceAlertDetail, { anim = true, hideTop = true },key,marchInfo,targetPoint)
end

local function RemoveAlertKey(self,message)
    if self.selfCrossAlert[message.key] then
        self.selfCrossAlert[message.key] = nil
    end
    if self.AllianceAlertList[message.key] then
        self.AllianceAlertList[message.key] = nil
    end
    for i = 1, #self.AllianceAlertIdList do
        if self.AllianceAlertIdList[i] == message.key then
            table.remove(self.AllianceAlertIdList,i)
            break
        end
    end
    TimerManager:GetInstance():DelayInvoke(function()
        EventManager:GetInstance():Broadcast(EventId.UpdateAlertData)
    end, NextFrameTime)
end

local function GetAlertNum(self)
    if self.AllianceAlertIdList then
        if self.lastNum < #self.AllianceAlertIdList then
            self.lastNum = #self.AllianceAlertIdList
            self:SetLastNumClickView(false)
            return self.lastNum
        else
            self.lastNum = #self.AllianceAlertIdList
            if self.isClickView then
                return 0
            else
                return self.lastNum
            end
        end
    end
    return 0
end

local function SetLastNumClickView(self,state)
    self.isClickView = state
end

local function GetLastRedNum(self)
    return self.lastNum
end

--获取自己跨服被打数量
function AllianceAlertDataManager:GetSelfCrossAlertNum()
    local result = 0
    local mySeverId = LuaEntry.Player:GetCurServerId()
    for k,v in pairs(self.selfCrossAlert) do
        if v.server ~= mySeverId then
            result = result + 1
        end
    end
    return result
end
--处理自己跨服被打推送
function AllianceAlertDataManager:PushCrossAlertHandle(message)
    local serverId = message["server"]
    if serverId ~= nil then
        SFSNetwork.SendMessage(MsgDefines.GetAllianceAlertInfo, serverId)
    end
end

AllianceAlertDataManager.__init = __init
AllianceAlertDataManager.__delete = __delete
AllianceAlertDataManager.InitData = InitData
AllianceAlertDataManager.InitAllianceAlertList =InitAllianceAlertList
AllianceAlertDataManager.UpdateAllianceAlertList =UpdateAllianceAlertList
AllianceAlertDataManager.GetAllianceAlertList = GetAllianceAlertList
AllianceAlertDataManager.GetAllianceAlertByIdList = GetAllianceAlertByIdList
AllianceAlertDataManager.GetAllianceAlertDataByKey = GetAllianceAlertDataByKey
AllianceAlertDataManager.UpdateMarchList = UpdateMarchList
AllianceAlertDataManager.RemoveAlertKey = RemoveAlertKey
AllianceAlertDataManager.GetAlertNum = GetAlertNum
AllianceAlertDataManager.SetLastNumClickView = SetLastNumClickView
AllianceAlertDataManager.GetLastRedNum = GetLastRedNum
return AllianceAlertDataManager