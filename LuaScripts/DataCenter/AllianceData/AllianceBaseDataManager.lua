---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/7/23 10:48
---
local AllianceBaseDataManager = BaseClass("AllianceBaseDataManager");
local Localization = CS.GameEntry.Localization

local function __init(self)
    self.autoRallyInfo = nil
    self.allianceBaseData = nil
    self.showMoveTipTimes = 0
    self.alMoveCenterPointId = nil
    self.alMoveInviteStatusDic = {}
    self.OnUpdateAlMovePointsCallback = nil
    self.OnBackToMainCallback = nil
    self.alMoveInvitePoints = {
        cityPoint = 0,
        leaderPoint = 0,
        alBirthPoint = 0,
        actMineCenterPoint = 0
    }
    self.moveInviteInfo = nil--allianceId, inviteTime
    self:InitAlMoveInviteInfo()
    DataCenter.AllianceScienceDataManager:InitData()
    self:AddListener()
end

local function __delete(self)
    self.allianceBaseData = nil
    self.autoRallyInfo = nil
    self.showMoveTipTimes = nil
    self.alMoveCenterPointId = nil
    self.alMoveInvitePoints = nil
    self.alMoveInviteStatusDic = nil
    self:RemoveListener()
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.CloseUI, self.TryCallBackToMainCallback)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.CloseUI, self.TryCallBackToMainCallback)
end

local function UpdateAllianceBaseData(self,message,forceRefresh)
    local allianceChanged = false
    
    if message["alliance"]~=nil then
        local cacheAlId = self.allianceBaseData and self.allianceBaseData.uid or ""
        self.allianceBaseData = self.allianceBaseData and self.allianceBaseData or AllianceBaseInfo.New()
        self.allianceBaseData:ParseData(message["alliance"],true)
        if LuaEntry.Player~=nil then
            LuaEntry.Player:SetAllianceUid(self.allianceBaseData.uid)
        end
        if cacheAlId ~= self.allianceBaseData.uid then
            allianceChanged = true
        end
        if LuaEntry.Player:IsInAlliance() and forceRefresh then
            allianceChanged = true
        end
    end
    EventManager:GetInstance():Broadcast(EventId.AllianceBaseDataUpdated)

    if allianceChanged then
        DataCenter.GloryManager:Startup()
        if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            DataCenter.WorldAllianceCityDataManager:InitAllCityDataRequest()
        end
        --初始化联盟标记
        SFSNetwork.SendMessage(MsgDefines.WorldGetAllianceMark)
        SFSNetwork.SendMessage(MsgDefines.GetAllianceStorageInfo)
        SFSNetwork.SendMessage(MsgDefines.AllianceGiftList,0,1000)
        SFSNetwork.SendMessage(MsgDefines.AllianceShowHelp)
        if SeasonUtil.IsInSeasonDesertMode() then
            local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
            --if seasonId == 2 then
            --    SFSNetwork.SendMessage(MsgDefines.GetAllianceSeasonRank)
            --else
            if seasonId >= 2 then
                SFSNetwork.SendMessage(MsgDefines.GetAllianceSeasonScoreRank)
            end
            SFSNetwork.SendMessage(MsgDefines.GetAlFlagDestroyTime)
        end
        DataCenter.AllianceMineManager:RequestAllianceMineInfo(true)
        
        self:RequestAlMoveInvitePoint()
        
        --初始化
        DataCenter.AllianceMemberDataManager:TryInitMemberList(true)

        if LuaEntry.Player:IsInAlliance() then
            DataCenter.AllianceAutoInviteManager:ClearAllInvite()

            local leagueMatchStage = DataCenter.LeagueMatchManager:GetLeagueMatchStage()
            if leagueMatchStage ~= LeagueMatchStage.None then
                DataCenter.LeagueMatchManager:GetMyMatchInfoReq()
            end
        else
            DataCenter.LeagueMatchManager:ResetMyDuelInfo()
        end
        EventManager:GetInstance():Broadcast(EventId.RefreshAllianceArmsUI)

        --派遣活动联盟数据部分
        --DataCenter.ActDispatchTaskDataManager:GetAllAllianceTasksFromServer()
        --重新请求联盟军备数据
        local allianceCompete = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if allianceCompete and allianceCompete.activityId then
            DataCenter.ActivityController:SendActivitySingleScoreGetCommand(allianceCompete.activityId)
        end
        
        --重新请求联盟战争数据
        SFSNetwork.SendMessage(MsgDefines.GetAllianceWarList,LuaEntry.Player:GetCurServerId())

        DataCenter.AllianceAlertDataManager:InitData()

        DataCenter.AllianceDeclareWarManager:InitSend()

        --重新请求联盟科技数据
        local isSwitchOn = LuaEntry.DataConfig:CheckSwitch("alliancescience_entrance")
        local unlock = self:CheckIfAllianceFuncOpen(AllianceTaskFuncType.AllianceScience)
        if isSwitchOn and unlock then
            SFSNetwork.SendMessage(MsgDefines.AllScienceRefresh)
        end

        DataCenter.AllianceTaskManager:RequestTaskInfo()
        SFSNetwork.SendMessage(MsgDefines.GetAllianceAutoJoinRallyInfo)

        --请求联盟捐兵活动数据
        if DataCenter.ActivityDonateSoldierManager.CheckIsDonateSoldierActivityOpenOnAllianceChange() then
            DataCenter.ActivityDonateSoldierManager:OnGetDonateSoldierActivityInfo()
        end

        if DataCenter.ActivityALVSDonateSoldierManager:IsALVSDonateSoldierActivityOpen() then
            DataCenter.ActivityALVSDonateSoldierManager:OnGetALVSDonateSoldierActivityInfo(true)
        end

        if DataCenter.AllianceBossManager:IsAllianceBossActivityOpen() then
            DataCenter.AllianceBossManager:OnSendGetAllianceBossActivityInfoMessage()
        end

        -- 联盟信息改变的时候 有的活动（比如捐兵活动）会涉及到红点的变化 所以在这里刷新一下红点
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
    EventManager:GetInstance():Broadcast(EventId.UpdateMainAllianceRedCount)
end

local function SetAllianceForceData(self,message)
    if self.allianceBaseData~=nil then
        self.allianceBaseData:SetAllianceForceData(message)
    end
end

local function SetAllianceScoreData(self,message)
    if self.allianceBaseData~=nil then
        self.allianceBaseData:SetAllianceScoreData(message)
    end
end

local function UpdateMoveInviteInfo(self, t, isPush)
    if t.moveInviteInfo then
        self.moveInviteInfo = t.moveInviteInfo
    end
    if isPush then
        EventManager:GetInstance():Broadcast(EventId.OnGetAlMoveInvite)
    else
        local tempType = self:GetAlMoveInvite()
        if tempType == AlMoveInviteType.LeaderInvite then
            EventManager:GetInstance():Broadcast(EventId.OnGetAlMoveInvite)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshAlMoveInviteTip)
end

local function CheckIfShowInviteBtn(self)
    if not self.allianceBaseData or not self.moveInviteInfo then
        self:ResetMoveCityInviteInfo()
        return false
    end
    if not self.moveInviteInfo.allianceId or self.moveInviteInfo.allianceId ~= self.allianceBaseData.uid then
        self:ResetMoveCityInviteInfo()
        return false
    end
    if self:CheckIfIsVirtualLeader() then
        self:ResetMoveCityInviteInfo()
        return false
    end
    
    local leaderInfo = DataCenter.AllianceMemberDataManager:GetAllianceMemberByUid(self.allianceBaseData.leaderUid)
    local leaderPoint = leaderInfo and leaderInfo.pointId or 0
    if leaderPoint <= 0 then
        self:ResetMoveCityInviteInfo()
        return false
    end

    local pos1 = SceneUtils.IndexToTilePos(leaderPoint)
    local distance = math.ceil(SceneUtils.TileDistance(pos1, DataCenter.BuildManager.main_city_pos))
    local confDistance = LuaEntry.DataConfig:TryGetNum("union_move", "k1")
    if distance <= confDistance then
        self:ResetMoveCityInviteInfo()
        return false
    end
    
    local strKey = "AllianceMoveInviteTime_" .. LuaEntry.Player.uid
    local lastInviteTime = CS.GameEntry.Setting:GetInt(strKey, 0)
    local tempInviteTime = math.modf(self.moveInviteInfo.inviteTime / 1000)
    if lastInviteTime ~= tempInviteTime then
        return true
    else
        return false
    end
end

local function ResetMoveCityInviteInfo(self)
    if self.moveInviteInfo and self.moveInviteInfo.inviteTime then
        local tempTime = math.modf(self.moveInviteInfo.inviteTime / 1000)
        local strKey = "AllianceMoveInviteTime_" .. LuaEntry.Player.uid
        CS.GameEntry.Setting:SetInt(strKey, tempTime)
    end
end

local function UpdateLeaderElectStatus(self, candidate)
    self.allianceBaseData.elected = candidate
end

local function UpdateLeaderVoteStatus(self, voted)
    self.allianceBaseData.voted = voted
end 

local function UpdateAlSysState(self, tempState, stateEndTime)
    self.allianceBaseData.sysAlState = tempState
    self.allianceBaseData.stateEndTime = stateEndTime
end

local function GetAllianceBaseData(self)
    return self.allianceBaseData
end

local function CheckIfIsVirtualLeader(self)
    return self.allianceBaseData.leaderUid == ""
end


local function ResetAllianceData(self)
    self.allianceBaseData = nil
    LuaEntry.Player:SetAllianceUid("")
    DataCenter.GloryManager:Clear()
    --清理联盟标记
    DataCenter.WorldFavoDataManager:ClearAllianceMarks()
    if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
        DataCenter.WorldAllianceCityDataManager:InitAllCityDataRequest()
    end
    self:ResetMoveCityInviteInfo()
    self:ResetAlMoveInviteInfo()
    DataCenter.LeagueMatchManager:ResetMyDuelInfo()
    DataCenter.AllianceHelpDataManager:Reset()
    EventManager:GetInstance():Broadcast(EventId.OnGetAlMoveInvite)
    
    EventManager:GetInstance():Broadcast(EventId.UpdateMainAllianceRedCount)

    -- 退出联盟的时候 有的活动（比如捐兵活动）会涉及到红点的变化 所以在这里刷新一下红点
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function SetAnnounce(self, announce)
    if self.allianceBaseData and self.allianceBaseData.announce ~= announce then
        self.allianceBaseData.announce = announce
    end
end

local function SetIntro(self, intro)
    if self.intro and self.allianceBaseData.intro ~= intro then
        self.allianceBaseData.intro = intro
    end
end

local function IsSelfLeader(self)
    local myUid = LuaEntry.Player.uid
    local isLeader =false
    if self.allianceBaseData~=nil and myUid == self.allianceBaseData.leaderUid then
        isLeader =  true
    end
    return isLeader
end

local function IsR4orR5(self)
    
    local isR4orR5 =false
    if self.allianceBaseData~=nil and self.allianceBaseData.rank>=4 then
        isR4orR5 =  true
    end
    return isR4orR5
end

local function OnRecvAlPoints(self, nearestP, centerPointId, forCalc)
    self.alMoveCenterPointId = centerPointId
    
    if forCalc == 1 then
        if nearestP ~= 0 then
            if DataCenter.GuideManager:InGuide() then
                self:ResetShowMoveTipTimes()
            else
                if self.checkRallyParams then
                    local recommendPos = SceneUtils.IndexToTilePos(nearestP)
                    local rallyTargetPos = SceneUtils.IndexToTilePos(self.checkRallyParams.targetPoint)
                    local distance = math.ceil(SceneUtils.TileDistance(recommendPos, rallyTargetPos))
                    local confDist = LuaEntry.DataConfig:TryGetNum("union_move", "k1")
                    if distance > confDist then
                        local canUnlock,lock_tips = SceneUtils.CheckIsWorldUnlock()
                        if canUnlock ==true then
                            UIManager:GetInstance():OpenWindow(UIWindowNames.UIMoveCityTip, { anim = true }, {openType = MoveCityTipType.RallyCheck, isInviteMove = false, strTip = Localization:GetString("391098")})
                        else
                            if self.checkRallyParams.callback then
                                self.checkRallyParams.callback()
                            end
                        end
                        
                    else
                        if self.checkRallyParams.callback then
                            self.checkRallyParams.callback()
                        end
                    end
                    self.checkRallyParams = nil
                end
                EventManager:GetInstance():Broadcast(EventId.OnGetRecommendAlPoint, nearestP)
            end
        end
    elseif forCalc == 0 then
        if nearestP == 0 then
            UIUtil.ShowTipsId(390849)  
        else
            GoToUtil.GotoWorldPos(SceneUtils.TileIndexToWorld(nearestP,ForceChangeScene.World), CS.SceneManager.World.InitZoom,LookAtFocusTime,function()
                UIUtil.TryMoveCity(PlaceBuildType.MoveCity_Al, nearestP)
            end)
            
        end
    end
end

local function CheckIfCanAlMove(self, pointId,hasAllianceCity)
    local radius = LuaEntry.DataConfig:TryGetNum("Alliance_relocation_scope", "k1")
    local targetPos = SceneUtils.IndexToTilePos(pointId)
    if self.alMoveInvitePoints.actMineCenterPoint>0 then
        local centerPointPos = SceneUtils.IndexToTilePos(self.alMoveInvitePoints.actMineCenterPoint)
        local distance = math.ceil(SceneUtils.TileDistance(centerPointPos, targetPos))
        return distance <= radius
    elseif self.alMoveInvitePoints.cityPoint > 0 and hasAllianceCity == false and LuaEntry.Player.serverType ~= ServerType.EDEN_SERVER then
        local centerPointPos = SceneUtils.IndexToTilePos(self.alMoveInvitePoints.cityPoint)
        local distance = math.ceil(SceneUtils.TileDistance(centerPointPos, targetPos))
        return distance <= radius
    elseif self.alMoveInvitePoints.leaderPoint > 0 and hasAllianceCity == false and LuaEntry.Player.serverType ~= ServerType.EDEN_SERVER then
        local centerPointPos = SceneUtils.IndexToTilePos(self.alMoveInvitePoints.leaderPoint)
        local distance = math.ceil(SceneUtils.TileDistance(centerPointPos, targetPos))
        return distance <= radius
    elseif self.alMoveInvitePoints.alBirthPoint>0 and hasAllianceCity == false and LuaEntry.Player.serverType ~= ServerType.EDEN_SERVER then
        local centerPointPos = SceneUtils.IndexToTilePos(self.alMoveInvitePoints.alBirthPoint)
        local distance = math.ceil(SceneUtils.TileDistance(centerPointPos, targetPos))
        return distance <= radius
    end
    return false
end

local function GetSelfRank(self)
    return self.allianceBaseData.rank
end

local function SetSelfRank(self, value)
    self.allianceBaseData.rank = value
end

local function CheckIfCanPayAsLeader(self)
    if self.allianceBaseData and string.IsNullOrEmpty(self.allianceBaseData.leaderUid) then
        --local createT = self.allianceBaseData.createTime
        --local strInterval = LuaEntry.DataConfig:TryGetStr("union_control", "k1")
        --local intervalArr = string.split(strInterval, ";")
        --local hour = #intervalArr >= 2 and intervalArr[2] or 0
        --local beginT = createT + hour * 3600000;
        --local curTime = UITimeManager:GetInstance():GetServerTime()
        --if curTime > beginT then
        --    return true
        --end
        return true
    end
    return false
end

local function CheckIfIsAlWaitMerge(self)
    return self.allianceBaseData and self.allianceBaseData.waitMerge == 1
end

local function CheckIfNeedSettingTip(self)
    local allianceData = self.allianceBaseData
    if allianceData and allianceData.createdByPlayer then
        return
    end
    local showTip = self:IsR4orR5()
    if showTip then
        if allianceData.rename == 0 or allianceData.abbrRename == 0 or string.IsNullOrEmpty(allianceData.intro) then
            return true
        end
    end
end

local function UpdateAlWaitMergeStatus(self, waitMerge)
    if self.allianceBaseData then
        self.allianceBaseData.waitMerge = waitMerge
        if waitMerge == 1 then
            self.allianceBaseData.leaderUid = nil
        end
    end
    EventManager:GetInstance():Broadcast(EventId.AlWaitMergeStatusChange)
end

local function UpdateAllianceSetting(self,message)
    if self.allianceBaseData~=nil then
        self.allianceBaseData:RefreshAllianceSetting(message)
    end
end

--AllianceTaskFuncType
local function CheckIfAllianceFuncOpen(self, funcType)
    local allianceTaskOpen = LuaEntry.DataConfig:CheckSwitch("alliance_task")
    if not allianceTaskOpen then
        return true
    end

    local seasonId = DataCenter.SeasonDataManager:GetSeason()
    if seasonId > 0 then
        return true
    end

    if funcType == AllianceTaskFuncType.AllianceScience then
        return true
    end
    
    if self.allianceBaseData then
        return self.allianceBaseData:CheckIfAllianceFuncOpen(funcType)
    end
end

local function UpdateAutoRallyInfo(self, msg, needBroadcast)
    if needBroadcast == nil then
        needBroadcast = true
    end
    if not self.autoRallyInfo then
        self.autoRallyInfo = {}
    end
    if msg.endTime then
        self.autoRallyInfo.endTime = msg.endTime
    else
        self.autoRallyInfo.endTime = 0
    end
    if msg.index then
        self.autoRallyInfo.curPos = msg.index
    end

    if needBroadcast then
        EventManager:GetInstance():Broadcast(EventId.UpdateAllianceAutoRallyInfo)
    end
end

local function GetAutoRallyInfo(self)
    return self.autoRallyInfo
end

local function CheckIfShowAutoRallyRed(self)
    if not LuaEntry.Player:IsInAlliance() then
        return 0
    end
    
    local autoRallyOpen = LuaEntry.DataConfig:CheckSwitch("world_auto_join")
    if autoRallyOpen then
        local killedNum = DataCenter.MonsterManager:GetKillBossNum()
        local maxNum = DataCenter.MonsterManager:GetMaxKillBossNum()
        if killedNum < maxNum then
            local serverTime = UITimeManager:GetInstance():GetServerTime()
            local autoInfo = DataCenter.AllianceBaseDataManager:GetAutoRallyInfo()
            if autoInfo and autoInfo.endTime < serverTime then
                return 1
            else
                return 0
            end
        else
            return 0
        end
    end
    return 0
end

local function CheckIfNeedMoveTipOnOpen(self)
    if not self.allianceBaseData then
        return false
    end

    if LuaEntry.Player:GetMainWorldPos() <= 0 then
        return false
    end
    
    local days = LuaEntry.DataConfig:TryGetNum("union_move", "k2")
    local edgeTime = self.allianceBaseData.createTime + days * 86400000
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime < edgeTime then
        if self.showMoveTipTimes == 0 then
            return true
        end
    end
    
    local strKey = "AlMoveRecommendTip_" .. LuaEntry.Player.uid
    local curAlId = LuaEntry.Player.allianceId
    local lastAlId = CS.GameEntry.Setting:GetString(strKey, "")
    local isSelfLeader = DataCenter.AllianceBaseDataManager:IsSelfLeader()
    if curAlId ~= lastAlId and not isSelfLeader then
        return true
    end
    
    return false
end

local function UpdateShowMoveTipTimes(self, times)
    self.showMoveTipTimes = times
    local strKey = "AlMoveRecommendTip_" .. LuaEntry.Player.uid
    local curAlId = LuaEntry.Player.allianceId
    CS.GameEntry.Setting:SetString(strKey, curAlId)
end

local function CheckIfNeedCheckRallyDistance(self)
    return not self.checkedRallyDist
end

local function CheckIfNearMember(self)
    local isInAlliance = LuaEntry.Player:IsInAlliance()
    if not isInAlliance then
        return false
    end
    
    local memberList = DataCenter.AllianceMemberDataManager:GetAllMember()
    if memberList and table.count(memberList) > 1 then
        local myPos = SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)
        local confDistance = LuaEntry.DataConfig:TryGetNum("union_move", "k1")
        for i, v in pairs(memberList) do
            if v.uid ~= LuaEntry.Player.uid then
                local memPos = SceneUtils.IndexToTilePos(v.pointId, ForceChangeScene.World)
                local tempDistance = SceneUtils.TileDistance(myPos, memPos)
                if tempDistance < confDistance then
                    return true
                end
            end
        end
    else
        return true
    end
end

local function TryCheckRallyDist(self, params)
    self.checkRallyParams = params
    SFSNetwork.SendMessage(MsgDefines.WorldAlMove, 1)
    self.checkedRallyDist = true
end

local function ResetShowMoveTipTimes(self)
    self.showMoveTipTimes = 0
    local strKey = "AlMoveRecommendTip_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetString(strKey, "")
end

local function RequestAlMoveInvitePoint(self)
    SFSNetwork.SendMessage(MsgDefines.AlMoveInviteGetPoints)
end

local function OnRecvAlMoveInvitePoints(self, cityPoint, leaderPoint, alBirthPoint,actMinePoint)
    self.alMoveInvitePoints = {
        cityPoint = cityPoint or 0,
        leaderPoint = leaderPoint or 0,
        alBirthPoint = alBirthPoint or 0,
        actMineCenterPoint = actMinePoint or 0
    }
    if self.OnUpdateAlMovePointsCallback then
        self.OnUpdateAlMovePointsCallback()
        self.OnUpdateAlMovePointsCallback = nil
    end
    
    EventManager:GetInstance():Broadcast(EventId.RefreshAlMoveInviteTip)
end

local function OnRecvLeaderPointChange(self, point)
    if not self.alMoveInvitePoints then
        self.alMoveInvitePoints = {}
    end
    self.alMoveInvitePoints.leaderPoint = point
    EventManager:GetInstance():Broadcast(EventId.RefreshAlMoveInviteTip)
end

--只能在城外用
local function CheckIfCanInviteAlMove(self, showTip)
    if not self:IsSelfLeader() then
        return false
    end

    local mainPoint = LuaEntry.Player:GetMainWorldPos()
    local hasAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfHasAlCity()
    local isAlTerritory = DataCenter.WorldAllianceCityDataManager:CheckIfIsAlTerritory(mainPoint)

    if hasAlTerritory and not isAlTerritory then
        if showTip then
            UIUtil.ShowTipsId(391117)
        end
        return false
    end
    
    return true
end

local function GetAlMoveInvite(self, viewName)
    if self:IsSelfLeader() then
        local lastViewTime = self.alMoveInviteStatusDic[AlMoveInviteType.InviteTip].isViewed
        local serverTime = UITimeManager:GetInstance():GetServerTime()
        if not UITimeManager:GetInstance():IsSameDayForServer(lastViewTime, math.modf(serverTime / 1000)) then
            local pointId = self:GetAlMoveInviteTargetPoint(AlMoveInviteType.LeaderInvite)
            local memberList = DataCenter.AllianceMemberDataManager:GetAllMember()
            local targetPos = SceneUtils.IndexToTilePos(pointId, ForceChangeScene.World)
            local confDistance = LuaEntry.DataConfig:TryGetNum("union_move", "k1")
            for i, v in pairs(memberList) do
                local pos1 = SceneUtils.IndexToTilePos(v.pointId, ForceChangeScene.World)
                local distance = math.ceil(SceneUtils.TileDistance(pos1, targetPos))
                if distance > confDistance then
                    return AlMoveInviteType.InviteTip
                end
            end
        end
    end
    
    local hasLeaderInvite, needShow = self:CheckIfHasLeaderMoveInvite(viewName)
    if hasLeaderInvite then
        local targetP = self:GetAlMoveInviteTargetPoint(AlMoveInviteType.LeaderInvite)
        if needShow and targetP and targetP > 0 then
            return AlMoveInviteType.LeaderInvite
        else
            return AlMoveInviteType.None
        end
    end
    
    local hasSysInvite = self:CheckIfHasSystemMoveInvite(viewName)
    if hasSysInvite then
        local targetP = self:GetAlMoveInviteTargetPoint(AlMoveInviteType.SystemInvite)
        if targetP and targetP > 0 then
            local hasLeader = not self:CheckIfIsVirtualLeader()
            return AlMoveInviteType.SystemInvite, hasLeader
        end
    end
    return AlMoveInviteType.None
end

local function GetAlMovePoints(self)
    return self.alMoveInvitePoints
end

local function CheckIfHasLeaderMoveInvite(self, viewName)
    if not LuaEntry.Player:IsInAlliance() then
        return false
    end
    
    if not self.allianceBaseData or not self.moveInviteInfo then
        return false
    end
    if self:IsSelfLeader() then
        return false
    end

    if not self.moveInviteInfo.allianceId or self.moveInviteInfo.allianceId ~= self.allianceBaseData.uid then
        return false
    end

    if self:CheckIfIsVirtualLeader() then
        return false
    end

    local tempInviteTime = math.modf(self.moveInviteInfo.inviteTime / 1000)
    if tempInviteTime <= 0 then
        return false
    end
    
    local hasLeaderInvite = false
    if self.alMoveInviteStatusDic[AlMoveInviteType.LeaderInvite].isResponded < tempInviteTime then--有盟主邀请
        hasLeaderInvite = true
        if viewName ~= UIWindowNames.UIChat and viewName ~= UIWindowNames.UIMain then
            local lastViewTime = self.alMoveInviteStatusDic[AlMoveInviteType.LeaderInvite].isViewed
            local serverTime = UITimeManager:GetInstance():GetServerTime()
            if UITimeManager:GetInstance():IsSameDayForServer(lastViewTime, math.modf(serverTime / 1000)) then
                return true, false
            end
        end

        if self:CheckIfIsNearInvitePoint(AlMoveInviteType.LeaderInvite) then
            self:SetInviteResponded(AlMoveInviteType.LeaderInvite, true)
            return true, false
        end

        return true, true
    else
        return true, false
    end
end

local function CheckIfHasSystemMoveInvite(self, viewName)
    local season = DataCenter.SeasonDataManager:GetSeasonId() or 0
    if season >= 2 then
        return false
    end
    
    if not LuaEntry.Player:IsInAlliance() then
        return false
    end
    
    if not self.allianceBaseData then
        return false
    end
    if self:IsSelfLeader() then
        return false
    end

    if self.alMoveInviteStatusDic[AlMoveInviteType.SystemInvite].isResponded > 0 then
        return false
    elseif viewName ~= UIWindowNames.UIChat and viewName ~= UIWindowNames.UIMain then
        local lastViewTime = self.alMoveInviteStatusDic[AlMoveInviteType.SystemInvite].isViewed
        local serverTime = UITimeManager:GetInstance():GetServerTime()
        if UITimeManager:GetInstance():IsSameDayForServer(lastViewTime, math.modf(serverTime / 1000)) then
            return false
        end
    end

    if self:CheckIfIsNearInvitePoint(AlMoveInviteType.SystemInvite) then
        self:SetInviteResponded(AlMoveInviteType.SystemInvite, true)
        return false
    else
        return true
    end
end

local function CheckIfIsNearInvitePoint(self, inviteType)
    if not self.alMoveInvitePoints then
        return true
    end
    
    local targetPoint = self:GetAlMoveInviteTargetPoint(inviteType)
    
    if targetPoint then
        local pos1 = SceneUtils.IndexToTilePos(targetPoint, ForceChangeScene.World)
        local mainPos = SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(), ForceChangeScene.World)
        local distance = math.ceil(SceneUtils.TileDistance(pos1, mainPos))
        local confDistance = LuaEntry.DataConfig:TryGetNum("union_move", "k1")
        return distance <= confDistance
    else
        return true
    end
end

local function GetAlMoveInviteTargetPoint(self, inviteType)
    local targetPoint = nil
    if not inviteType or inviteType == AlMoveInviteType.SystemInvite then
        if self.alMoveInvitePoints.actMineCenterPoint>0 then
            targetPoint = self.alMoveInvitePoints.actMineCenterPoint
        elseif self.alMoveInvitePoints.cityPoint > 0 then
            targetPoint = self.alMoveInvitePoints.cityPoint
        elseif self.alMoveInvitePoints.leaderPoint > 0 then
            targetPoint = self.alMoveInvitePoints.leaderPoint
        else
            targetPoint = self.alMoveInvitePoints.alBirthPoint
        end
    else
        targetPoint = self.alMoveInvitePoints.leaderPoint
    end
    return targetPoint
end

local function InitAlMoveInviteInfo(self)
    if not self.alMoveInviteStatusDic then
        self.alMoveInviteStatusDic = {}
    end
    self.alMoveInviteStatusDic[AlMoveInviteType.LeaderInvite] = {}
    self.alMoveInviteStatusDic[AlMoveInviteType.SystemInvite] = {}
    self.alMoveInviteStatusDic[AlMoveInviteType.InviteTip] = {}
    
    local strK1 = self:GetAlMoveInviteK(AlMoveInviteType.LeaderInvite, "respond")-- "AlMoveLeaderInviteRespond_" .. LuaEntry.Player.uid
    self.alMoveInviteStatusDic[AlMoveInviteType.LeaderInvite].isResponded = CS.GameEntry.Setting:GetInt(strK1, 0)
    local strK2 = self:GetAlMoveInviteK(AlMoveInviteType.SystemInvite, "respond")-- "AlMoveSysInviteRespond_" .. LuaEntry.Player.uid
    self.alMoveInviteStatusDic[AlMoveInviteType.SystemInvite].isResponded = CS.GameEntry.Setting:GetInt(strK2, 0)
    local strK5 = self:GetAlMoveInviteK(AlMoveInviteType.InviteTip, "respond")
    self.alMoveInviteStatusDic[AlMoveInviteType.InviteTip].isResponded = CS.GameEntry.Setting:GetInt(strK5, 0)
    local strK3 = self:GetAlMoveInviteK(AlMoveInviteType.LeaderInvite, "view")-- "AlMoveLeaderInviteViewed_" .. LuaEntry.Player.uid
    self.alMoveInviteStatusDic[AlMoveInviteType.LeaderInvite].isViewed = CS.GameEntry.Setting:GetInt(strK3, 0)
    local strK4 = self:GetAlMoveInviteK(AlMoveInviteType.SystemInvite, "view")-- "AlMoveSysInviteViewed_" .. LuaEntry.Player.uid
    self.alMoveInviteStatusDic[AlMoveInviteType.SystemInvite].isViewed = CS.GameEntry.Setting:GetInt(strK4, 0)
    local strK6 = self:GetAlMoveInviteK(AlMoveInviteType.InviteTip, "view")
    self.alMoveInviteStatusDic[AlMoveInviteType.InviteTip].isViewed = CS.GameEntry.Setting:GetInt(strK6, 0)
end

local function ResetAlMoveInviteInfo(self)
    if not self.alMoveInviteStatusDic then
        self.alMoveInviteStatusDic = {}
    end
    local strK1 = self:GetAlMoveInviteK(AlMoveInviteType.LeaderInvite, "respond")-- "AlMoveLeaderInviteRespond_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetInt(strK1, 0)
    local strK2 = self:GetAlMoveInviteK(AlMoveInviteType.SystemInvite, "respond")-- "AlMoveSysInviteRespond_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetInt(strK2, 0)
    local strK3 = self:GetAlMoveInviteK(AlMoveInviteType.LeaderInvite, "view")-- "AlMoveLeaderInviteViewed_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetInt(strK3, 0)
    local strK4 = self:GetAlMoveInviteK(AlMoveInviteType.SystemInvite, "view") --"AlMoveSysInviteViewed_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetInt(strK4, 0)
    --local strK5 = self:GetAlMoveInviteK(AlMoveInviteType.InviteTip, "respond") --"AlMoveSysInviteViewed_" .. LuaEntry.Player.uid
    --CS.GameEntry.Setting:SetInt(strK5, 0)
    --local strK6 = self:GetAlMoveInviteK(AlMoveInviteType.InviteTip, "view") --"AlMoveSysInviteViewed_" .. LuaEntry.Player.uid
    --CS.GameEntry.Setting:SetInt(strK6, 0)
    
    self.alMoveInviteStatusDic[AlMoveInviteType.LeaderInvite] = {}
    self.alMoveInviteStatusDic[AlMoveInviteType.LeaderInvite].isResponded = 0
    self.alMoveInviteStatusDic[AlMoveInviteType.LeaderInvite].isViewed = 0
    self.alMoveInviteStatusDic[AlMoveInviteType.SystemInvite] = {}
    self.alMoveInviteStatusDic[AlMoveInviteType.SystemInvite].isResponded = 0
    self.alMoveInviteStatusDic[AlMoveInviteType.SystemInvite].isViewed = 0
    --self.alMoveInviteStatusDic[AlMoveInviteType.InviteTip] = {}
    --self.alMoveInviteStatusDic[AlMoveInviteType.InviteTip].isResponded = 0
    --self.alMoveInviteStatusDic[AlMoveInviteType.InviteTip].isViewed = 0
    
    EventManager:GetInstance():Broadcast(EventId.RefreshAlMoveInviteTip)
end

--设置邀请为已响应（之后不在提示，除非有新邀请）
local function SetInviteResponded(self, inviteType, noRefresh)
    local strK = self:GetAlMoveInviteK(inviteType, "respond")
    --if inviteType == AlMoveInviteType.LeaderInvite then
    --    strK = "AlMoveLeaderInviteRespond_" .. LuaEntry.Player.uid
    --else
    --    strK = "AlMoveSysInviteRespond_" .. LuaEntry.Player.uid
    --end
    local tempTime = UITimeManager:GetInstance():GetServerTime()
    tempTime = math.modf(tempTime / 1000)
    CS.GameEntry.Setting:SetInt(strK, tempTime)
    if not self.alMoveInviteStatusDic[inviteType] then
        self.alMoveInviteStatusDic[inviteType] = {} 
    end
    self.alMoveInviteStatusDic[inviteType].isResponded = math.modf(tempTime)
    if not noRefresh then
        EventManager:GetInstance():Broadcast(EventId.RefreshAlMoveInviteTip)
    end
end

--设置邀请为已读（之后当天不在显示）
local function SetInviteViewed(self, inviteType)
    local strK = self:GetAlMoveInviteK(inviteType, "view")
    --if inviteType == AlMoveInviteType.LeaderInvite then
    --    strK = "AlMoveLeaderInviteViewed_" .. LuaEntry.Player.uid
    --elseif inviteType == AlMoveInviteType.SystemInvite then
    --    strK = "AlMoveSysInviteViewed_" .. LuaEntry.Player.uid
    --elseif inviteType == AlMoveInviteType.InviteTip then
    --    strK = "AlMoveInviteTipViewed_" .. LuaEntry.Player.uid
    --end

    local tempTime = UITimeManager:GetInstance():GetServerTime()
    tempTime = math.modf(tempTime / 1000)
    CS.GameEntry.Setting:SetInt(strK, tempTime)
    if not self.alMoveInviteStatusDic[inviteType] then
        self.alMoveInviteStatusDic[inviteType] = {}
    end
    self.alMoveInviteStatusDic[inviteType].isViewed = tempTime
    EventManager:GetInstance():Broadcast(EventId.RefreshAlMoveInviteTip)
end

local function GetAlMoveInviteK(self, inviteType, strExtraK)
    return "AlMoveInvite_" .. LuaEntry.Player.uid .. inviteType .. "_" .. strExtraK
end

local function GetLeaderInfo(self)
    local leaderInfo = DataCenter.AllianceMemberDataManager:GetAllianceMemberByUid(self.allianceBaseData.leaderUid)
    return leaderInfo
end

local function OpenMoveCityTipWithReq(self, inviteType)
    self.OnUpdateAlMovePointsCallback = function()
        inviteType = inviteType or self:GetAlMoveInvite()
        if inviteType == AlMoveInviteType.LeaderInvite or inviteType == AlMoveInviteType.SystemInvite then
            local tipType = inviteType == AlMoveInviteType.LeaderInvite and MoveCityTipType.LeaderInvite or MoveCityTipType.SystemInvite
            local canUnlock,lock_tips = SceneUtils.CheckIsWorldUnlock()
            if canUnlock ==true then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIMoveCityTip, { anim = true }, {openType = tipType})
            end
            
        end
    end
    self:RequestAlMoveInvitePoint()
end

local function AddBacktoMainCallback(self, callback)
    if callback and UIManager:GetInstance():CheckIfIsMainUIOpenOnly(true) then
        callback()
    else
        self.OnBackToMainCallback = callback
    end
end

local function TryCallBackToMainCallback()
    local self = DataCenter.AllianceBaseDataManager
    if self.OnBackToMainCallback then
        self.OnBackToMainCallback()
        self.OnBackToMainCallback = nil
    end
end

local function DelayShowMoveInviteOnLogin(self)
    TimerManager:GetInstance():DelayInvoke(function()
        self:AddBacktoMainCallback(function()
            local inviteType = self:GetAlMoveInvite(UIWindowNames.UIMain)
            if inviteType ~= AlMoveInviteType.None then
                EventManager:GetInstance():Broadcast(EventId.OnGetAlMoveInvite)
            end
        end)
    end, 2)
end


AllianceBaseDataManager.__init = __init
AllianceBaseDataManager.__delete = __delete
AllianceBaseDataManager.AddListener = AddListener
AllianceBaseDataManager.RemoveListener = RemoveListener
AllianceBaseDataManager.UpdateAllianceBaseData =UpdateAllianceBaseData
AllianceBaseDataManager.GetAllianceBaseData = GetAllianceBaseData
AllianceBaseDataManager.ResetAllianceData = ResetAllianceData
AllianceBaseDataManager.IsSelfLeader = IsSelfLeader
AllianceBaseDataManager.GetSelfRank = GetSelfRank
AllianceBaseDataManager.CheckIfCanAlMove = CheckIfCanAlMove
AllianceBaseDataManager.IsR4orR5 =IsR4orR5
AllianceBaseDataManager.UpdateAllianceSetting = UpdateAllianceSetting
AllianceBaseDataManager.SetAnnounce = SetAnnounce
AllianceBaseDataManager.SetIntro = SetIntro
AllianceBaseDataManager.SetSelfRank = SetSelfRank
AllianceBaseDataManager.OnRecvAlPoints = OnRecvAlPoints
AllianceBaseDataManager.CheckIfIsVirtualLeader = CheckIfIsVirtualLeader
AllianceBaseDataManager.UpdateLeaderElectStatus = UpdateLeaderElectStatus
AllianceBaseDataManager.ResetMoveCityInviteInfo = ResetMoveCityInviteInfo
AllianceBaseDataManager.UpdateMoveInviteInfo = UpdateMoveInviteInfo
AllianceBaseDataManager.UpdateLeaderVoteStatus = UpdateLeaderVoteStatus
AllianceBaseDataManager.UpdateAlSysState = UpdateAlSysState
AllianceBaseDataManager.CheckIfIsAlWaitMerge = CheckIfIsAlWaitMerge
AllianceBaseDataManager.UpdateAlWaitMergeStatus = UpdateAlWaitMergeStatus
AllianceBaseDataManager.CheckIfNeedSettingTip = CheckIfNeedSettingTip
AllianceBaseDataManager.CheckIfCanPayAsLeader = CheckIfCanPayAsLeader
AllianceBaseDataManager.CheckIfAllianceFuncOpen = CheckIfAllianceFuncOpen
AllianceBaseDataManager.UpdateAutoRallyInfo = UpdateAutoRallyInfo
AllianceBaseDataManager.GetAutoRallyInfo = GetAutoRallyInfo
AllianceBaseDataManager.CheckIfShowAutoRallyRed = CheckIfShowAutoRallyRed
AllianceBaseDataManager.UpdateShowMoveTipTimes = UpdateShowMoveTipTimes
AllianceBaseDataManager.CheckIfNeedMoveTipOnOpen = CheckIfNeedMoveTipOnOpen
AllianceBaseDataManager.CheckIfShowInviteBtn = CheckIfShowInviteBtn
AllianceBaseDataManager.CheckIfNeedCheckRallyDistance = CheckIfNeedCheckRallyDistance
AllianceBaseDataManager.CheckIfNearMember = CheckIfNearMember
AllianceBaseDataManager.TryCheckRallyDist = TryCheckRallyDist
AllianceBaseDataManager.ResetShowMoveTipTimes = ResetShowMoveTipTimes
AllianceBaseDataManager.RequestAlMoveInvitePoint = RequestAlMoveInvitePoint
AllianceBaseDataManager.OnRecvAlMoveInvitePoints = OnRecvAlMoveInvitePoints
AllianceBaseDataManager.OnRecvLeaderPointChange = OnRecvLeaderPointChange
AllianceBaseDataManager.GetAlMoveInvite = GetAlMoveInvite
AllianceBaseDataManager.CheckIfCanInviteAlMove = CheckIfCanInviteAlMove
AllianceBaseDataManager.CheckIfHasLeaderMoveInvite = CheckIfHasLeaderMoveInvite
AllianceBaseDataManager.CheckIfHasSystemMoveInvite = CheckIfHasSystemMoveInvite
AllianceBaseDataManager.SetInviteResponded = SetInviteResponded
AllianceBaseDataManager.InitAlMoveInviteInfo = InitAlMoveInviteInfo
AllianceBaseDataManager.GetAlMoveInviteTargetPoint = GetAlMoveInviteTargetPoint
AllianceBaseDataManager.ResetAlMoveInviteInfo = ResetAlMoveInviteInfo
AllianceBaseDataManager.CheckIfIsNearInvitePoint = CheckIfIsNearInvitePoint
AllianceBaseDataManager.GetAlMovePoints = GetAlMovePoints
AllianceBaseDataManager.SetInviteViewed = SetInviteViewed
AllianceBaseDataManager.GetLeaderInfo = GetLeaderInfo
AllianceBaseDataManager.GetAlMoveInviteK = GetAlMoveInviteK
AllianceBaseDataManager.OpenMoveCityTipWithReq = OpenMoveCityTipWithReq
AllianceBaseDataManager.AddBacktoMainCallback = AddBacktoMainCallback
AllianceBaseDataManager.TryCallBackToMainCallback = TryCallBackToMainCallback
AllianceBaseDataManager.DelayShowMoveInviteOnLogin = DelayShowMoveInviteOnLogin
AllianceBaseDataManager.SetAllianceForceData = SetAllianceForceData
AllianceBaseDataManager.SetAllianceScoreData = SetAllianceScoreData
return AllianceBaseDataManager