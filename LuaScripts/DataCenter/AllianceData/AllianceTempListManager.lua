---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/7/23 14:44
---
---提供非本盟数据内容存储功能
---数据仅用于界面显示：加入联盟、查看别的联盟内容
local AllianceTempListManager = BaseClass("AllianceTempListManager");

local function __init(self)
    self.tempAllianceList = {}
    self.tempAllMemberList = {}
    self.tempAllianceOfficial = {}
    self.tempAllianceInviteList = {}
    self.allianceIdListInOrder = {}
    self.allianceOfficialPosDic = {}--{allianceId:{pos:allianceId, ...}}
end

local function __delete(self)
    self.tempAllianceList = nil
    self.tempAllMemberList = nil
    self.tempAllianceOfficial = nil
    self.tempAllianceInviteList = nil
    self.allianceIdListInOrder = nil
    self.allianceOfficialPosDic = nil
end

local function RefreshSearchAllianceList(self,message)
    if message["list"]~=nil then
        self.tempAllianceList = {}
        self.allianceIdListInOrder = {}
        table.walk(message["list"],function (k,v)
            local alliance = AllianceBaseInfo.New()
            alliance:ParseData(v,false)
            if alliance.uid~=nil and alliance.uid~="" then
                self.tempAllianceList[alliance.uid] = alliance
                table.insert(self.allianceIdListInOrder, alliance.uid)
            end
        end)
    end
end

local function RefreshAllianceData(self,message)
    if message["uid"]~=nil then
        local uid = message["uid"]
        local alliance = self.tempAllianceList[uid]
        if alliance~=nil then
            alliance:ParseDataNew(message,false)
        else
            alliance = AllianceBaseInfo.New()
            alliance:ParseDataNew(message,false)
            if alliance.uid~=nil and alliance.uid~="" then
                self.tempAllianceList[alliance.uid] = alliance
            end
        end
    end
end
local function GetSearchAllianceDataByUid(self,alUid)
    return self.tempAllianceList[alUid]
end

local function UpdateAllianceOfficial(self,message)
    if message["allianceOfficial"]~=nil then
        local official = message["allianceOfficial"]
        if official["1"]~=nil then
            self.tempAllianceOfficial["1"] = official["1"]
        end
        if official["2"]~=nil then
            self.tempAllianceOfficial["2"] = official["2"]
        end
        if official["3"]~=nil then
            self.tempAllianceOfficial["3"] = official["3"]
        end
        if official["4"]~=nil then
            self.tempAllianceOfficial["4"] = official["4"]
        end
    end
end

local function UpdateAllianceOfficialPos(self, message)
    if message["allianceId"] then
        local allianceId = message["allianceId"]
        if message["allianceOfficialArr"] then
            local officialPos = message["allianceOfficialArr"]
            local tb = {}
            for i, v in ipairs(officialPos) do
                local uid = v.uid
                local pos = v.type
                tb[pos] = uid
            end
            self.allianceOfficialPosDic[allianceId] = tb
        end
    end
end

local function GetMemberInfoByOfficialPos(self, allianceId, pos)
    local posDic = self.allianceOfficialPosDic[allianceId]
    if not posDic then
        return nil
    end
    local uuid = posDic[pos]
    if uuid then
        return self:GetAllianceMemberByUid(uuid)
    end
end

local function GetOfficialByUid(self,uid)
    local officialPos =""
    table.walk(self.tempAllianceOfficial,function (k,v)
        if v == uid then
            officialPos = k
        end
    end)
    return officialPos
end

local function GetSearchAllianceIdList(self)
    return self.allianceIdListInOrder
    --return table.keys(self.tempAllianceList)
end

local function ApplyAllianceByUid(self,alUid)
    if self.tempAllianceList[alUid]~=nil then
        self.tempAllianceList[alUid]:SetApplyState(1)
    end
end

local function CancelApplyAllianceByUid(self,alUid)
    if self.tempAllianceList[alUid]~=nil then
        self.tempAllianceList[alUid]:SetApplyState(0)
    end
end

local function UpdateAllianceMemberList(self,message)

    if message["list"]~=nil then
        self.tempAllMemberList = {}
        table.walk(message["list"],function (k,v)
            local member = AllianceMemberInfo.New()
            member:ParseData(v)
            if member.uid~=nil and member.uid~="" then
                self.tempAllMemberList[member.uid] = member
            end
        end)
    end
end


local function GetAllianceMemberByUid(self,uid)
    return self.tempAllMemberList[uid]
end

local function GetAllianceMemberListByRank(self,rank)
    local list ={}
    table.walk(self.tempAllMemberList,function (k,v)
        if v.rank == rank then
            table.insert(list,v)
        end
    end)
    return list
end

local function RefreshAllianceInviteList(self,message)
    if message["list"]~=nil then
        self.tempAllianceInviteList = {}
        table.walk(message["list"], function(k,v)
            local member =  AllianceInviteMemberData.New()
            member:ParseData(v)
            if member.uid~=nil then
                self.tempAllianceInviteList[member.uid] = member
            end
        end)
    end
end

local function GetAllianceInviteListByUid(self,playerUid)
    return self.tempAllianceInviteList[playerUid]
end

local function SetInvitedStateForAllianceInviteListByUid(self,playerUid)
    if self.tempAllianceInviteList[playerUid]~=nil then
        self.tempAllianceInviteList[playerUid].invite = true
    end
end

local function GetAllianceInviteIdList(self,sortType)
    if sortType~=nil then
        if sortType == 1 then -- 战力
            table.sort(self.tempAllianceInviteList,function(a,b)
                return a.power < b.power
            end)
        elseif sortType == 2 then
            table.sort(self.tempAllianceInviteList,function(a,b)
                return a.level < b.level
            end)
        end
    end
    return table.keys(self.tempAllianceInviteList)
end


AllianceTempListManager.__init = __init
AllianceTempListManager.__delete = __delete
AllianceTempListManager.RefreshSearchAllianceList = RefreshSearchAllianceList
AllianceTempListManager.GetSearchAllianceDataByUid = GetSearchAllianceDataByUid
AllianceTempListManager.GetSearchAllianceIdList = GetSearchAllianceIdList
AllianceTempListManager.ApplyAllianceByUid = ApplyAllianceByUid
AllianceTempListManager.CancelApplyAllianceByUid = CancelApplyAllianceByUid
AllianceTempListManager.UpdateAllianceOfficial = UpdateAllianceOfficial
AllianceTempListManager.UpdateAllianceOfficialPos = UpdateAllianceOfficialPos
AllianceTempListManager.GetMemberInfoByOfficialPos = GetMemberInfoByOfficialPos
AllianceTempListManager.GetOfficialByUid = GetOfficialByUid
AllianceTempListManager.UpdateAllianceMemberList = UpdateAllianceMemberList
AllianceTempListManager.GetAllianceMemberByUid = GetAllianceMemberByUid
AllianceTempListManager.GetAllianceMemberListByRank = GetAllianceMemberListByRank
AllianceTempListManager.RefreshAllianceInviteList = RefreshAllianceInviteList
AllianceTempListManager.GetAllianceInviteListByUid =GetAllianceInviteListByUid
AllianceTempListManager.GetAllianceInviteIdList = GetAllianceInviteIdList
AllianceTempListManager.SetInvitedStateForAllianceInviteListByUid = SetInvitedStateForAllianceInviteListByUid
AllianceTempListManager.RefreshAllianceData =RefreshAllianceData
return AllianceTempListManager