---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/7/23 14:32
---
local AllianceMemberDataManager = BaseClass("AllianceMemberDataManager");

local function __init(self)
    self.allianceMembers ={}
    self.memberApplyList ={}
    self.allianceOfficial ={}
    self.cacheApplyList = {}--申请列表push缓存，用于红点
    self.alliancePositionDic = {}
end

local function __delete(self)
    self.allianceMembers = nil
    self.memberApplyList = nil
    self.allianceOfficial = nil
    self.cacheApplyList = nil
    self.alliancePositionDic = nil
end

local function TryInitMemberList(self, forceUpdate)
    if not forceUpdate and self.allianceMembers and table.count(self.allianceMembers) > 0 then
        return
    end
    local data =  DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
    local tempAlId = data.uid
    if tempAlId and tempAlId ~= "" then
        SFSNetwork.SendMessage(MsgDefines.AlRank,tempAlId)
    end
end

local function UpdateAllianceApplyList(self,message)

    if message["list"]~=nil then
        self.memberApplyList= {}
        self.cacheApplyList = {}
        table.walk(message["list"],function (k,v)
            local member = AllianceMemberInfo.New()
            member:ParseData(v)
            if member.uid~=nil and member.uid~="" then
                self.memberApplyList[member.uid] = member
                self:OnRecvNewApplyReq(member.uid, 1)
            end
        end)
    end
end

local function UpdateAllianceMemberList(self,message)

    if message["list"]~=nil then
        self.allianceMembers= {}
        table.walk(message["list"],function (k,v)
            
            local member = AllianceMemberInfo.New()
            member:ParseData(v)
            if member.uid~=nil and member.uid~="" then
                self.allianceMembers[member.uid] = member
            end
        end)
    end
end

local function UpdateAllianceOfficial(self,message)
    if message["allianceOfficial"]~=nil then
        local official = message["allianceOfficial"]
        if official["1"]~=nil then
            self.allianceOfficial["1"] = official["1"]
        end
        if official["2"]~=nil then
            self.allianceOfficial["2"] = official["2"]
        end
        if official["3"]~=nil then
            self.allianceOfficial["3"] = official["3"]
        end
        if official["4"]~=nil then
            self.allianceOfficial["4"] = official["4"]
        end
        
    end
end
local function DeleteAllianceOfficial(self,message)
    if message["rank"]~=nil and message["playerId"]~=nil then
        local rank = message["rank"]
        local playerUid = message["playerId"]
        local officialPos = self:GetOfficialByUid(playerUid)
        self.allianceOfficial[officialPos] = ""
        local memberData = self:GetAllianceMemberByUid(playerUid)
        if memberData~=nil then
            memberData:SetRank(rank)
        end
    end
end

local function GetOfficialByUid(self,uid)
    local officialPos ="" 
    table.walk(self.allianceOfficial,function (k,v)
        if v == uid then
            officialPos = k
        end
    end)
    return officialPos
end

local function SetAllianceRank(self,message)
    if message["playerId"]~=nil then
        local playerId = message["playerId"]
        local member = self:GetAllianceMemberByUid(playerId)
        if member~=nil then
            if message["rank"]~=nil then
                member:SetRank(message["rank"])
            end
        end
        if message["officalType"]~=nil then
            self.allianceOfficial[tostring(message["officalType"])] = playerId
        end
    end
end

local function GetAllianceApplyRedCount(self)
    if DataCenter.AllianceBaseDataManager:IsR4orR5() then
        return self:GetApplyCount()
    else
        return 0
    end
end

local function GetApplyCount(self)
    return table.count(self.cacheApplyList)
end

local function ClearCacheApplyList(self)
    self.cacheApplyList = {}
end

local function GetAllianceMemberByUid(self,uid)
    return self.allianceMembers[uid]
end

local function GetAllianceMemberMyself(self)
    return self.allianceMembers[LuaEntry.Player.uid]
end

local function GetAllianceMemberCount(self)
    return table.count(self.allianceMembers)
end

local function GetApplyMemberList(self)
    return self.memberApplyList
end

local function GetAllianceMemberListByRank(self,rank)
    local list ={}
    table.walk(self.allianceMembers,function (k,v)
        if v.rank == rank then
            table.insert(list,v)
        end
    end)
    
    table.sort(list, function(a, b)
        if a.online ~= b.online then
            return a.online
        else
            if a.online then
                return a.uid < b.uid
            else
                if a.offLineTime ~= b.offLineTime then
                    return a.offLineTime > b.offLineTime
                else
                    return a.uid < b.uid
                end
            end
        end
    end)
    
    return list
end

local function RemoveAllianceMemberByUid(self,uid)
    if self.allianceMembers[uid] ~= nil then
        self.allianceMembers[uid] = nil
    end
end

local function AllianceLeaderChange(self,oldLeaderUid,newLeaderUid,oldLeaderRank)
    if self.allianceMembers[oldLeaderUid] ~= nil then
        self.allianceMembers[oldLeaderUid]:SetRank(oldLeaderRank)
    end
    if self.allianceMembers[newLeaderUid] ~= nil then
        local officialPos = self:GetOfficialByUid(newLeaderUid)
        if officialPos~=nil and officialPos~="" then
            self.allianceOfficial[officialPos] =""
        end
        self.allianceMembers[newLeaderUid]:SetRank(5)
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshAlMoveInviteTip)
end

local function UpdateOneAllianceApply(self,uid,isAccept)
    if self.memberApplyList[uid]~=nil then
        self.memberApplyList[uid]=nil
    end
end
--通过坐标点获取盟友信息
local function GetAllianceMemberByPointId(self,pointId)
    for k,v in pairs(self.allianceMembers) do
        if v.pointId == pointId then
            return v
        end
    end
end

--获取周围8个点盟友的点坐标，没有返回nil
local function GetNearMember(self)
    local mainBuild = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    if mainBuild~=nil then
        local vec2 = SceneUtils.IndexToTilePos(mainBuild.pointId)
        local list = DataCenter.BirthPointTemplateManager:GetPointInMyBaseRange(vec2.x,vec2.y)
        for k,v in pairs(list) do
            local perIndex = SceneUtils.TilePosToIndex(v)
            if perIndex ~= mainBuild.pointId then
                local member = self:GetAllianceMemberByPointId(perIndex)
                if member ~= nil then
                    return member
                end
            end
        end
    end
end

--获取周围所有8个点盟友的点坐标，没有返回nil
local function GetAllNearMember(self)
    local mainBuild = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    if mainBuild~=nil then
        local vec2 = SceneUtils.IndexToTilePos(mainBuild.pointId)
        local list = DataCenter.BirthPointTemplateManager:GetAllPointsByOffset(vec2.x,vec2.y,ScreenAllianceBirthCount,ScreenAllianceBirthCount)
        local result = {}
        for k,v in pairs(list) do
            local perIndex = SceneUtils.TilePosToIndex(v)
            if perIndex ~= mainBuild.pointId then
                local member = self:GetAllianceMemberByPointId(perIndex)
                if member ~= nil then
                    table.insert(result,member)
                end
            end
        end
        if table.count(result) > 0 then
            return result
        end
    end
end

local function OnRecvNewApplyReq(self, uid, add)
    if add and add == 1 then
        if not table.hasvalue(self.cacheApplyList, uid) then
            table.insert(self.cacheApplyList, uid)
        end
    else
        table.removebyvalue(self.cacheApplyList, uid)
    end
    EventManager:GetInstance():Broadcast(EventId.OnGetNewAlJoinReq)
    EventManager:GetInstance():Broadcast(EventId.UpdateMainAllianceRedCount)
end

local function UpdateAlMemberRecommendNum(self, t)
    if t["recommendUserSize"] then
        self.recommendUserSize = t["recommendUserSize"]
    end
end

local function UpdateAlMemberRecommendList(self, t)
    if t["recommendUserList"] then
        self.recommendUserList = {}
        for i, v in pairs(t.recommendUserList) do
            local newOne = AllianceMemberInfo.New()
            newOne:ParseData(v)
            table.insert(self.recommendUserList, newOne)
        end
    end
    if self.recommendUserList and #self.recommendUserList > 0 then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAlMemberRecommend)
    end
end

local function UpdateAlliancePosition(self, t)
    self.alliancePositionDic = {}
    if t["allianceOfficialArr"] then
        for i, v in ipairs(t.allianceOfficialArr) do
            local uid = v.uid
            local pos = v.type
            self.alliancePositionDic[pos] = uid
        end
    end
end

local function UpdateOneAlliancePos(self, type, uid)
    for i, v in pairs(self.alliancePositionDic) do
        if v == uid then
            self.alliancePositionDic[i] = nil
        end
    end
    if type > 0 then
        self.alliancePositionDic[type] = uid
    end
    EventManager:GetInstance():Broadcast(EventId.OnAllianceOfficialPosChange)
end

local function GetMemberInfoByOfficialPos(self, pos)
    local uid = self.alliancePositionDic[pos]
    if uid then
        return self:GetAllianceMemberByUid(uid)
    end
end

local function GetOfficialPosByUid(self, uid)
    for i, v in pairs(self.alliancePositionDic) do
        if v == uid then
            return i
        end
    end
end

local function CheckIfHasRecommendMember(self)
    return self.recommendUserSize and self.recommendUserSize > 0
end

local function GetRecommendMemberList(self)
    return self.recommendUserList
end

local function GetAllMember(self)
    return self.allianceMembers
end

--rank==nil时筛选所有玩家
local function GetInactivePlayerCount(self, rank)
    if not DataCenter.AllianceBaseDataManager:IsR4orR5() then
        return 0
    end
    
    local memberList = {}
    if rank then
        memberList = self:GetAllianceMemberListByRank(rank)
    else
        memberList = self:GetAllMember()
    end
    local retNum = 0
    for i, v in pairs(memberList) do
        if v:CheckIfIsInactivePlayer() then
            retNum = retNum + 1
        end
    end
    return retNum
end

local function GetInactiveConfTime(self, power)
    if not self.activeConfList then
        self.activeConfList = {}
        local k1 = LuaEntry.DataConfig:TryGetStr("member_not_active", "k1")
        if string.IsNullOrEmpty(k1) then
            k1 = "5000;1|20000;2|;3"
        end
        local confArr = string.split(k1, "|")
        for i, v in ipairs(confArr) do
            local strArr = string.split(v, ";")
            local newOne = {}
            newOne.power = string.IsNullOrEmpty(strArr[1]) and LongMaxValue or tonumber(strArr[1])
            newOne.timeH = tonumber(strArr[2])
            table.insert(self.activeConfList, newOne)
        end
        
        table.sort(self.activeConfList, function(a, b)
            if a.power ~= b.power then
                return a.power < b.power
            else
                return false
            end
        end)
    end
    
    local returnT = 0
    for i, v in ipairs(self.activeConfList) do
        if power < v.power then
            returnT = v.timeH
            break
        end
    end
    
    return returnT
end

--原不活跃成员红点逻辑；
--已改成每天只显示一次红点，同气泡
local function GetAllianceMemberRedCount(self)
    if not DataCenter.AllianceBaseDataManager:IsR4orR5() then
        return 0
    end

    if self.checkedInactiveMember then
        return 0
    end
    
    local count = self:GetInactivePlayerCount()
    return count
end

local function SetCheckedInactiveMember(self, isChecked)
    self.checkedInactiveMember = isChecked
end

local function CheckIfNeedInactiveMemberBubble(self)
    local strK = "InactiveMemberBubble_" .. LuaEntry.Player.uid
    local curTime = UITimeManager:GetInstance():GetServerSeconds()
    local lastTimeS = CS.GameEntry.Setting:GetInt(strK, 0)
    if not UITimeManager:GetInstance():IsSameDayForServer(lastTimeS,curTime) then
        local inactiveCount = self:GetInactivePlayerCount()
        if inactiveCount > 0 then
            return inactiveCount
        end
    end
    return 0
end

local function SetInactiveMemberBubbleT(self)
    local strK = "InactiveMemberBubble_" .. LuaEntry.Player.uid
    local curTime = UITimeManager:GetInstance():GetServerSeconds()
    CS.GameEntry.Setting:SetInt(strK, curTime)
end

AllianceMemberDataManager.__init = __init
AllianceMemberDataManager.__delete = __delete
AllianceMemberDataManager.UpdateAllianceApplyList = UpdateAllianceApplyList
AllianceMemberDataManager.UpdateAllianceMemberList = UpdateAllianceMemberList
AllianceMemberDataManager.GetApplyCount = GetApplyCount
AllianceMemberDataManager.GetAllianceMemberByUid = GetAllianceMemberByUid
AllianceMemberDataManager.GetAllianceMemberMyself = GetAllianceMemberMyself
AllianceMemberDataManager.GetApplyMemberList = GetApplyMemberList
AllianceMemberDataManager.UpdateAllianceOfficial = UpdateAllianceOfficial
AllianceMemberDataManager.DeleteAllianceOfficial = DeleteAllianceOfficial
AllianceMemberDataManager.GetOfficialByUid = GetOfficialByUid
AllianceMemberDataManager.SetAllianceRank = SetAllianceRank
AllianceMemberDataManager.GetAllianceMemberListByRank = GetAllianceMemberListByRank
AllianceMemberDataManager.RemoveAllianceMemberByUid = RemoveAllianceMemberByUid
AllianceMemberDataManager.AllianceLeaderChange = AllianceLeaderChange
AllianceMemberDataManager.UpdateOneAllianceApply = UpdateOneAllianceApply
AllianceMemberDataManager.GetAllianceMemberCount = GetAllianceMemberCount
AllianceMemberDataManager.TryInitMemberList = TryInitMemberList
AllianceMemberDataManager.GetNearMember = GetNearMember
AllianceMemberDataManager.GetAllianceMemberByPointId = GetAllianceMemberByPointId
AllianceMemberDataManager.OnRecvNewApplyReq = OnRecvNewApplyReq
AllianceMemberDataManager.ClearCacheApplyList = ClearCacheApplyList
AllianceMemberDataManager.GetAllNearMember = GetAllNearMember
AllianceMemberDataManager.UpdateAlMemberRecommendNum = UpdateAlMemberRecommendNum
AllianceMemberDataManager.UpdateAlMemberRecommendList = UpdateAlMemberRecommendList
AllianceMemberDataManager.GetRecommendMemberList = GetRecommendMemberList
AllianceMemberDataManager.CheckIfHasRecommendMember = CheckIfHasRecommendMember
AllianceMemberDataManager.UpdateAlliancePosition = UpdateAlliancePosition
AllianceMemberDataManager.GetAllMember = GetAllMember
AllianceMemberDataManager.GetAllianceApplyRedCount = GetAllianceApplyRedCount
AllianceMemberDataManager.GetInactiveConfTime = GetInactiveConfTime
AllianceMemberDataManager.GetInactivePlayerCount = GetInactivePlayerCount
AllianceMemberDataManager.GetAllianceMemberRedCount = GetAllianceMemberRedCount
AllianceMemberDataManager.CheckIfNeedInactiveMemberBubble = CheckIfNeedInactiveMemberBubble
AllianceMemberDataManager.SetCheckedInactiveMember = SetCheckedInactiveMember
AllianceMemberDataManager.SetInactiveMemberBubbleT = SetInactiveMemberBubbleT
AllianceMemberDataManager.GetMemberInfoByOfficialPos = GetMemberInfoByOfficialPos
AllianceMemberDataManager.UpdateOneAlliancePos = UpdateOneAlliancePos
AllianceMemberDataManager.GetOfficialPosByUid = GetOfficialPosByUid

return AllianceMemberDataManager