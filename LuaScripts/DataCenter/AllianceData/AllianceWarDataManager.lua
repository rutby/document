---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/7 17:53
---
---联盟战争数据
local AllianceWarDataManager = BaseClass("AllianceWarDataManager");
local Localization = CS.GameEntry.Localization
local Setting = CS.GameEntry.Setting

local function __init(self)
    self.AllianceWarList = {}
    self.alWarCount =0 -- 联盟战争红点数量
    --self.sendState = false
    self.hasNewWar = false
    self.latestAlWarInfo = nil
    self.isNeedPopup = false
    self.ignoreList = {}
    self.warLoopState = false
    self.lastNum = 0
end
local function __delete(self)
    self.AllianceWarList = nil
    self.alWarCount =nil
    --self.sendState = false
    self.hasNewWar = nil
    self.latestAlWarInfo = nil
    self.isNeedPopup = nil
    self.ignoreList = nil
    self.warLoopState = nil
    self.lastNum = nil
end

local function InitAllianceWarList(self,message)
    if message["teams"]~=nil then
        --检查自己是否在跨服
        if LuaEntry.Player:IsInSelfServer() then
            self.AllianceWarList = {}
        else
            local list = {}
            local newlist = self.AllianceWarList
            --不是自己当前所在服的不要修改
            for i ,v in pairs(self.AllianceWarList) do
                if v.server == LuaEntry.Player:GetCurServerId() then
                    table.insert(list,v)
                end
            end
            self.AllianceWarList = {}
            for i ,v in pairs(newlist) do
                local isInsert = true
                for k = 1 ,#list do
                    if v.uuid == list[k].uuid then
                        isInsert = false
                    end
                end
                if isInsert then
                    self.AllianceWarList[v.uuid] = v
                end
            end
        end
        table.walk(message["teams"],function (k,v)
            self:UpdateOneAllianceWarList(v)
        end)
    end
end

local function GetAllianceWarIdList(self)
    return table.keys(self.AllianceWarList)
end

local function UpdateOneAllianceWarList(self,message)
    local info = AllianceWarInfo.New()
    info:ParseData(message)
    local oldWars = self:GetOldAllianceWars()
    if info.uuid~=nil and info.uuid~="" then
        if not table.hasvalue(oldWars, tostring(info.uuid)) then
            self.hasNewWar = true
            self.latestAlWarInfo = info
            self.isNeedPopup = true
        end
        EventManager:GetInstance():Broadcast(EventId.AllianceWarNewStatusChanged)
        self.AllianceWarList[info.uuid] =info
        
        --目标是我自己
        if info.targetUid == LuaEntry.Player:GetUid() then
            if self.ignoreList[info.uuid] == nil then
                self.ignoreList[info.uuid] = 1
            end
        end
        
        ----判断状态防止多次弹出提示
        --if self.sendState  then
        --    return
        --end
        ----当参与者有数据时
        --if next(message["members"]) then
        --    local members = message["members"]
        --    for i = 1, #members do
        --        --并且自己时参与者弹出提示并改变状态
        --        if members[i].ownerUid == LuaEntry.Player.uid then
        --            UIUtil.ShowTips(Localization:GetString("128029",message["attackName"]))
        --            self.sendState = true
        --            break
        --        elseif members[i].ownerUid ~= LuaEntry.Player.uid and self.sendState then
        --            --并且自己不是参与者了但是状态改变过时
        --            self.sendState = false
        --        end
        --    end
        --elseif self.sendState then
        --    self.sendState = false
        --end
    end
end

local function GetAllianceWarDataByUuid(self,Uuid)
    return self.AllianceWarList[Uuid]
end

--只记录盟友被集结
local function GetAllianceWarMemberRed(self)
    local list = self:GetAllianceWarIdList()
    local count = 0
    for i = 1 ,#list do
        --local data = self:GetAllianceWarDataByUuid(list[i])
        --if data.targetAllianceId == LuaEntry.Player:GetAllianceUid() and data.targetUid ~= LuaEntry.Player:GetUid() then
            count = count + 1
        --end
    end
    if self.lastNum < count then
        self.lastNum = count
        self:SetLastNumClickView(false)
        return self.lastNum
    else
        self.lastNum = count
        if self.isClickView then
            return 0
        else
            return self.lastNum
        end
    end
end

local function GetLastRedNum(self)
    return self.lastNum
end

local function SetLastNumClickView(self,state)
    self.isClickView = state
end

local function DeleteAllianceWarDataByUuid(self,Uuid)
    self.AllianceWarList[Uuid] =nil
    
    local oldWars = self:GetOldAllianceWars()
    for i, v in pairs(self.AllianceWarList) do
        if not table.hasvalue(oldWars, tostring(i)) then
            self.hasNewWar = true
            EventManager:GetInstance():Broadcast(EventId.AllianceWarNewStatusChanged)
            return
        end
    end
    self.hasNewWar = false
    self.latestAlWarInfo = nil
    self.isNeedPopup = false
    EventManager:GetInstance():Broadcast(EventId.AllianceWarNewStatusChanged)
end

local function GetAllianceWarCount(self)
    local count = 0
    for k,v in pairs(self.AllianceWarList) do
        if v.targetUid ~= LuaEntry.Player.uid then
            count = count+1
        end
    end
    return count
end

local function SetAllianceWarCount(self,count)
    if count >0 then
        self.alWarCount = count
    else
        self.alWarCount = 0
    end
end

local function CheckIfHasNewWar(self)
    return self.hasNewWar
end

local function CheckIfNeedPopOnMainUI(self)
    return self.latestAlWarInfo and self.latestAlWarInfo.attackUid ~= LuaEntry.Player.uid
end

local function GetPopupTip(self)
    if self.latestAlWarInfo then
        if self.latestAlWarInfo.attackAllianceId == LuaEntry.Player.allianceId then
            return self.latestAlWarInfo.attackName .. ": " .. Localization:GetString("129099"), self.latestAlWarInfo.attackUid, self.latestAlWarInfo.attackIcon
        else
            return self.latestAlWarInfo.targetName .. ": " .. Localization:GetString("129100"), self.latestAlWarInfo.targetUid, self.latestAlWarInfo.targetIcon
        end
    else
        return ""
    end
end

local function SetLatestAlWarInfo(self, warInfo)
    self.latestAlWarInfo = warInfo
end

local function SetAllAllianceWarOld(self)
    local oldWars = ""
    for i, v in pairs(self.AllianceWarList) do
        if oldWars == "" then
            oldWars = i
        else
            oldWars = oldWars .. "," .. i
        end
    end
    Setting:SetString(SettingKeys.ALLIANCE_WAR_OLD_DATA, oldWars)
    self.hasNewWar = false
    EventManager:GetInstance():Broadcast(EventId.AllianceWarNewStatusChanged)
end

local function GetOldAllianceWars(self)
    local strWars = Setting:GetString(SettingKeys.ALLIANCE_WAR_OLD_DATA, "")
    local oldWars = string.split(strWars, ",")
    return oldWars
end

local function SetIgnoreList(self,uuid,state)
    self.ignoreList[uuid] = state
end

local function GetIgnoreList(self,uuid) 
    return self.ignoreList[uuid]
end

-- 雷达集结活动筛选
local function GetRadarRallyActivityAllianceWars(self, maxDistance)
    local list = {}
    for _, info in pairs(self.AllianceWarList) do
        if self.IsRadarRallyActivityAllianceWar(info, maxDistance) then
            table.insert(list, info)
        end
    end
    
    table.sort(list, function(infoA, infoB)
        local attackPosA = SceneUtils.IndexToTilePos(infoA.attackPointId)
        local attackPosB = SceneUtils.IndexToTilePos(infoB.attackPointId)
        local distanceA = math.ceil(SceneUtils.TileDistance(attackPosA, DataCenter.BuildManager.main_city_pos))
        local distanceB = math.ceil(SceneUtils.TileDistance(attackPosB, DataCenter.BuildManager.main_city_pos))
        return distanceA < distanceB
    end)
    
    return list
end

local function IsRadarRallyActivityAllianceWar(info, maxDistance)
    if info.type ~= AllianceTeamType.ATTACK_BOSS then
        return false
    end
    
    if table.count(info.memberList) + 1 >= info.assemblyMarchMax then
        return false
    end
    
    if info.attackUid == LuaEntry.Player.uid then
        return false
    end
    
    for _, member in pairs(info.memberList) do
        if member.ownerUid == LuaEntry.Player.uid then
            return false
        end
    end
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime >= info.waitTime then
        return false
    end
    
    local attackPos = SceneUtils.IndexToTilePos(info.attackPointId)
    local distance = math.ceil(SceneUtils.TileDistance(attackPos, DataCenter.BuildManager.main_city_pos))
    if distance > maxDistance then
        return false
    end
    
    return true
end

local function SetState(self,state)
    self.warLoopState = state
end

local function GetState(self)
    return self.warLoopState
end

local function GetOldestCanJoinRallyData(self)
    local waitTimeTmp = LongMaxValue
    local selectWarData = nil
    for _, v in pairs(self.AllianceWarList) do
        local canJoin, isSelf = v:CheckCanJoinAllianceWar()
        if canJoin == true or isSelf == true then
            if v.waitTime < waitTimeTmp then
                waitTimeTmp = v.waitTime
                selectWarData = v
            end
        end
    end
    return selectWarData
end

AllianceWarDataManager.__init = __init
AllianceWarDataManager.__delete = __delete
AllianceWarDataManager.UpdateOneAllianceWarList =UpdateOneAllianceWarList
AllianceWarDataManager.InitAllianceWarList =InitAllianceWarList
AllianceWarDataManager.GetAllianceWarDataByUuid =GetAllianceWarDataByUuid
AllianceWarDataManager.GetLastRedNum = GetLastRedNum
AllianceWarDataManager.GetAllianceWarMemberRed = GetAllianceWarMemberRed
AllianceWarDataManager.SetLastNumClickView = SetLastNumClickView
AllianceWarDataManager.DeleteAllianceWarDataByUuid = DeleteAllianceWarDataByUuid
AllianceWarDataManager.GetAllianceWarIdList = GetAllianceWarIdList
AllianceWarDataManager.GetAllianceWarCount =GetAllianceWarCount
AllianceWarDataManager.SetAllianceWarCount =SetAllianceWarCount
AllianceWarDataManager.CheckIfHasNewWar = CheckIfHasNewWar
AllianceWarDataManager.InitData = InitData
AllianceWarDataManager.GetOldAllianceWars = GetOldAllianceWars
AllianceWarDataManager.SetAllAllianceWarOld = SetAllAllianceWarOld
AllianceWarDataManager.CheckIfNeedPopOnMainUI = CheckIfNeedPopOnMainUI
AllianceWarDataManager.SetLatestAlWarInfo = SetLatestAlWarInfo
AllianceWarDataManager.GetPopupTip = GetPopupTip
AllianceWarDataManager.SetIgnoreList = SetIgnoreList
AllianceWarDataManager.GetIgnoreList = GetIgnoreList
AllianceWarDataManager.GetRadarRallyActivityAllianceWars = GetRadarRallyActivityAllianceWars
AllianceWarDataManager.IsRadarRallyActivityAllianceWar = IsRadarRallyActivityAllianceWar
AllianceWarDataManager.SetState = SetState
AllianceWarDataManager.GetState = GetState
AllianceWarDataManager.GetOldestCanJoinRallyData = GetOldestCanJoinRallyData
return AllianceWarDataManager