---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/2/27 14:59
---LeagueMatchManager.lua

local LeagueMatchManager = BaseClass("LeagueMatchManager")
local LeagueMatchAllianceData = require "DataCenter.AllianceCompete.LeagueMatchAllianceData"
local Localization = CS.GameEntry.Localization

local function __init(self)
    self.leagueMatchBaseInfo = nil-- {season:number, drawStartTime:number, drawEndTime:number, seasonStartTime:number, seasonEndTime:number}
    self.myMatchInfo = nil--{duelInfo:{group:string, rankType,number, position:number, roundResult:string}, lastDuelInfo:{}
    self.matchGroupAlList = {}--{position:matchAllianceData}
    self.lastMatchGroupAlList = {}--{position:matchAllianceData}
    self.rewardDic = {}-- 1 个人奖励  2 联盟奖励  3赛季奖励
    self.warmRewardInfo = {}
    self.upCount = -1
    self.downCount = -1
    self.isMatchOpen = false
    self.isRewardShow = false
end

local function __delete(self)
    self.leagueMatchBaseInfo = nil
    self.myMatchInfo = nil
    self.matchGroupAlList = nil
    self.lastMatchGroupAlList = nil
    self.isRewardShow = false
end

local function OnRecvInitMsg(self, msg)
    if msg then
        if msg.allianceDuel then
            self:UpdateLeagueMatchBaseInfo(msg.allianceDuel)
        end
        if msg.isOpen then
            self.isMatchOpen = msg.isOpen == 1
        end
    end
end

local function OnRecvSeasonChangePush(self, msg)
    if msg and msg.allianceDuel then
        self:UpdateLeagueMatchBaseInfo(msg.allianceDuel)
    end
    self:GetMyMatchInfoReq()
    EventManager:GetInstance():Broadcast(EventId.OnLeagueMatchBaseInfoUpdate)
end

local function UpdateLeagueMatchBaseInfo(self, msg)
    if msg["actInfo"] then
        self.leagueMatchBaseInfo = msg["actInfo"]
        self.isRewardShow = true
    else
        self.isRewardShow = false
    end
    --没有是热身
    if self.leagueMatchBaseInfo and self.leagueMatchBaseInfo.drawStartTime then
        local serverTime = UITimeManager:GetInstance():GetServerTime()
        if serverTime < self.leagueMatchBaseInfo.drawStartTime then
            local delayS = math.ceil((self.leagueMatchBaseInfo.drawStartTime - serverTime) / 1000)
            TimerManager:GetInstance():DelayInvoke(function()
                EventManager:GetInstance():Broadcast(EventId.OnLeagueMatchStageChange)
            end, delayS + 2)
        end
    end
end

local function CheckIsOpenForReward(self)
    return self.isRewardShow
end

local function GetMyMatchInfoReq(self)
    SFSNetwork.SendMessage(MsgDefines.GetMyLeagueMatchInfo)
end

local function OnRecvMyMatchInfoResp(self, t)
    self.myMatchInfo = t
    EventManager:GetInstance():Broadcast(EventId.OnMyLeagueMatchInfoUpdate)
end

local function GetCurSeasonGroupReq(self)
    SFSNetwork.SendMessage(MsgDefines.GetCurSeasonLeagueMatchGroupInfo)
end

local function OnRecvMatchGroupResp(self, t)
    self:UpdateMatchGroupInfo(t)
    EventManager:GetInstance():Broadcast(EventId.OnLeagueMatchGroupUpdate)
end

local function UpdateMatchGroupInfo(self, t)
    if t["groupInfos"] then
        self.matchGroupAlList = {}
        for i, v in ipairs(t["groupInfos"]) do
            if v then
                local alInfo = LeagueMatchAllianceData.New()
                alInfo:ParseData(v)
                table.insert(self.matchGroupAlList, alInfo)
            end
        end
    end
    if t["up"] then
        self.upCount = t["up"]
    end
    if t["down"] then
        self.downCount = t["down"]
    end
end

local function GetLastSeasonGroupReq(self)
    SFSNetwork.SendMessage(MsgDefines.GetLastSeasonLeagueMatchGroupInfo)
end

local function OnRecvLastMatchGroupResp(self, t)
    self:UpdateLastMatchGroupInfo(t)
    EventManager:GetInstance():Broadcast(EventId.OnLastLeagueMatchGroupInfoUpdate)
end

local function UpdateLastMatchGroupInfo(self, t)
    if t["groupInfos"] then
        self.lastMatchGroupAlList = {}
        for i, v in ipairs(t["groupInfos"]) do
            if v then
                local alInfo = LeagueMatchAllianceData.New()
                alInfo:ParseData(v)
                table.insert(self.lastMatchGroupAlList, alInfo)
            end
        end
    end
end

local function DrawLotsReq(self)
    SFSNetwork.SendMessage(MsgDefines.LeagueMatchDrawLots)
end

local function OnRecvDrawLotsResultResp(self, msg)
    if msg["position"] then
        if self.myMatchInfo and self.myMatchInfo.duelInfo then
            self.myMatchInfo.duelInfo.position = msg["position"]
        end
        for i, v in ipairs(self.matchGroupAlList) do
            if v.allianceId == LuaEntry.Player.allianceId then
                v.position = msg["position"]
                break
            end
        end
        local strTip = Localization:GetString("372627", msg["position"])
        UIUtil.ShowMessage(strTip, 1, GameDialogDefine.CONFIRM, GameDialogDefine.CANCEL, nil, nil);
    end

    EventManager:GetInstance():Broadcast(EventId.OnLeagueMatchGroupUpdate)
end

local function GetLeagueMatchRewardInfoReq(self, type)
    SFSNetwork.SendMessage(MsgDefines.GetLeagueMatchRewardInfo, type)
end

local function OnRecvLeagueMatchRewardInfoResp(self, msg)
    if msg["userRankRewards"] then
        self.rewardDic[1] = msg["userRankRewards"]
    elseif msg["allianceRewards"] then
        self.rewardDic[2] = msg["allianceRewards"]
    elseif msg["seasonRewards"] then
        self.rewardDic[3] = msg["seasonRewards"]
    end
    EventManager:GetInstance():Broadcast(EventId.OnLeagueMatchRewardInfoUpdate)
end

local function GetLeagueMatchWarmRewardInfoReq(self)
    SFSNetwork.SendMessage(MsgDefines.GetLeagueMatchWarmRewardInfo)
end

local function OnRecvLeagueMatchWarmRewardResp(self, msg)
    self.warmRewardInfo = msg
    EventManager:GetInstance():Broadcast(EventId.OnLeagueMatchRewardInfoUpdate)
end

local function ResetMyDuelInfo(self)
    if self.myMatchInfo then
        self.myMatchInfo.duelInfo = nil
        self.myMatchInfo.lastDuelInfo = nil
        self.myMatchInfo = nil
    end
end

local function GetMatchGroupInfo(self)
    return self.matchGroupAlList
end

local function GetDrawLotsGroupDic(self)
    local retTb = {}
    for i, v in ipairs(self.matchGroupAlList) do
        retTb[v.position] = v
    end
    return retTb
end

local function GetLastMatchGroupInfo(self)
    return self.lastMatchGroupAlList
end

local function GetMyMatchInfo(self)
    return self.myMatchInfo
end

local function GetLeagueMatchStage(self)
    if not self.leagueMatchBaseInfo then
        return LeagueMatchStage.None
    end

    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime < self.leagueMatchBaseInfo.drawStartTime then
        return LeagueMatchStage.Notice
    elseif curTime < self.leagueMatchBaseInfo.drawEndTime then
        return LeagueMatchStage.DrawLots
    elseif curTime < self.leagueMatchBaseInfo.seasonStartTime then
        return LeagueMatchStage.DrawLotsFinished
    elseif curTime < self.leagueMatchBaseInfo.seasonEndTime then
        local weekday = UITimeManager:GetInstance():GetWeekdayIndex(curTime)
        if weekday == 7 then
            if (self.leagueMatchBaseInfo.seasonEndTime - curTime) > OneDayTime * 1000 then
                return LeagueMatchStage.WeeklySummary
            else
                return LeagueMatchStage.FinalSummary
            end
        else
            return LeagueMatchStage.Compete
        end 
    else
        return LeagueMatchStage.FinalSummary
    end
end


local function GetLeagueMatchBaseInfo(self)
    return self.leagueMatchBaseInfo
end


local function GetRewardInfo(self, type, seg)
    if seg == SegmentType.None then
        if (type == 1 and not self.warmRewardInfo.userRankRewards) or (type == 2 and not self.warmRewardInfo.dailyWinReward) then
            self:GetLeagueMatchWarmRewardInfoReq()
        else
            if type == 1 then
                return self.warmRewardInfo.userRankRewards
            elseif type == 2 then
                local retTb = {
                    dailyWinReward = self.warmRewardInfo.dailyWinReward,
                    weekWinReward = self.warmRewardInfo.weekWinReward,
                    requireDailyPoint = self.warmRewardInfo.requireDailyPoint,
                    requireWeekPoint = self.warmRewardInfo.requireWeekPoint,
                }
                return retTb
            end
        end
    else
        if self.rewardDic[type] then
            if type == 1 then
                for i, v in ipairs(self.rewardDic[type]) do
                    if v.rankType == seg then
                        return v.rankRewards--{{start, end, reward}, ...}
                    end
                end
            elseif type == 2 then
                for i, v in ipairs(self.rewardDic[2]) do
                    if v.rankType == seg then
                        local retTb = {
                            dailyWinReward = v.dailyWinReward,
                            weekWinReward = v.weekWinReward,
                            weekFailReward = v.weekFailReward,
                            requireDailyPoint = v.requireDailyPoint,
                            requireWeekPoint = v.requireWeekPoint,
                        }
                        return retTb
                    end
                end
            elseif type == 3 then
                for i, v in ipairs(self.rewardDic[3]) do
                    if v.rankType == seg then
                        return v.allianceRankRewards--{{start, end, userRankRewards:{start, end, reward}}, ...}
                    end
                end
            end
        else
            self:GetLeagueMatchRewardInfoReq(type)
            return nil
        end
    end
end

local function TryUpdateLeagueMatchGroup(self)
    local tempStage = self:GetLeagueMatchStage()
    if tempStage == LeagueMatchStage.Notice or tempStage == LeagueMatchStage.DrawLots or tempStage == LeagueMatchStage.DrawLotsFinished then
        if self.myMatchInfo and self.myMatchInfo.lastDuelInfo then
            self:GetLastSeasonGroupReq()
        end
    else
        if self.myMatchInfo and self.myMatchInfo.duelInfo then
            self:GetCurSeasonGroupReq()
        end
    end
end

local function GetMyCurDuelInfo(self)
    if not self.myMatchInfo then
        return nil
    end
    local tempStage = self:GetLeagueMatchStage()
    if tempStage == LeagueMatchStage.Notice or tempStage == LeagueMatchStage.DrawLots or tempStage == LeagueMatchStage.DrawLotsFinished then
        return self.myMatchInfo.lastDuelInfo
    else
        return self.myMatchInfo.duelInfo
    end
end

local function GetUpDownCount(self)
    return self.upCount, self.downCount
end

local function CheckIsMatchOpen(self)
    return self.isMatchOpen
end

local function CheckAllianceInMatch(self)
    local isInAlliance = LuaEntry.Player:IsInAlliance()
    if not isInAlliance then
        return false
    elseif self.myMatchInfo and self.myMatchInfo.duelInfo then
        return true
    else
        local actInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if actInfo then
            return true
            --local eventInfo = actInfo:GetEventInfo()
            --if eventInfo and eventInfo.vsAllianceList then
            --    return true
            --end
        end
        return false
    end
end

local function CheckIfInMatch(self)
    if not self:CheckIsMatchOpen() then
        return false
    end
    
    local tempStage = self:GetLeagueMatchStage()
    local myMatchInfo = self:GetMyMatchInfo()
    if myMatchInfo then
        if tempStage == LeagueMatchStage.Notice or tempStage == LeagueMatchStage.DrawLots or tempStage == LeagueMatchStage.DrawLotsFinished then
            return myMatchInfo.lastDuelInfo
        else
            return myMatchInfo.duelInfo
        end
    else
        return nil
    end
end

local function CheckIsSubmitting(self)
    local serverTimeS = UITimeManager:GetInstance():GetServerSeconds()
    local weekIndex = UITimeManager:GetInstance():GetWeekdayIndex(serverTimeS * 1000)
    if weekIndex == 7 then
        local todayZero = UITimeManager:GetInstance():GetTodayZeroServerTime(serverTimeS)
        local offsetTimeS = serverTimeS - todayZero
        if offsetTimeS >= 0 and offsetTimeS <= OneHourTime then
            return true
        end
    end
    return false
end

LeagueMatchManager.__init = __init
LeagueMatchManager.__delete = __delete

LeagueMatchManager.OnRecvInitMsg = OnRecvInitMsg
LeagueMatchManager.OnRecvSeasonChangePush = OnRecvSeasonChangePush
LeagueMatchManager.UpdateLeagueMatchBaseInfo = UpdateLeagueMatchBaseInfo
LeagueMatchManager.GetMyMatchInfoReq = GetMyMatchInfoReq
LeagueMatchManager.OnRecvMyMatchInfoResp = OnRecvMyMatchInfoResp
LeagueMatchManager.GetCurSeasonGroupReq = GetCurSeasonGroupReq
LeagueMatchManager.OnRecvMatchGroupResp = OnRecvMatchGroupResp
LeagueMatchManager.UpdateMatchGroupInfo = UpdateMatchGroupInfo
LeagueMatchManager.GetLastSeasonGroupReq = GetLastSeasonGroupReq
LeagueMatchManager.OnRecvLastMatchGroupResp = OnRecvLastMatchGroupResp
LeagueMatchManager.UpdateLastMatchGroupInfo = UpdateLastMatchGroupInfo
LeagueMatchManager.DrawLotsReq = DrawLotsReq
LeagueMatchManager.OnRecvDrawLotsResultResp = OnRecvDrawLotsResultResp
LeagueMatchManager.GetLeagueMatchRewardInfoReq = GetLeagueMatchRewardInfoReq
LeagueMatchManager.OnRecvLeagueMatchRewardInfoResp = OnRecvLeagueMatchRewardInfoResp
LeagueMatchManager.GetLeagueMatchWarmRewardInfoReq = GetLeagueMatchWarmRewardInfoReq
LeagueMatchManager.OnRecvLeagueMatchWarmRewardResp = OnRecvLeagueMatchWarmRewardResp

LeagueMatchManager.GetMyMatchInfo = GetMyMatchInfo
LeagueMatchManager.GetLastMatchGroupInfo = GetLastMatchGroupInfo
LeagueMatchManager.GetMatchGroupInfo = GetMatchGroupInfo
LeagueMatchManager.GetDrawLotsGroupDic = GetDrawLotsGroupDic
LeagueMatchManager.GetLeagueMatchStage = GetLeagueMatchStage
LeagueMatchManager.GetRewardInfo = GetRewardInfo
LeagueMatchManager.GetLeagueMatchBaseInfo = GetLeagueMatchBaseInfo
LeagueMatchManager.GetRewardInfoByType = GetRewardInfoByType
LeagueMatchManager.GetWarmRewardByType = GetWarmRewardByType
LeagueMatchManager.TryUpdateLeagueMatchGroup = TryUpdateLeagueMatchGroup
LeagueMatchManager.GetMyCurDuelInfo = GetMyCurDuelInfo
LeagueMatchManager.GetUpDownCount = GetUpDownCount
LeagueMatchManager.CheckIfInMatch = CheckIfInMatch
LeagueMatchManager.CheckIsMatchOpen = CheckIsMatchOpen
LeagueMatchManager.CheckIsOpenForReward = CheckIsOpenForReward
LeagueMatchManager.CheckAllianceInMatch = CheckAllianceInMatch
LeagueMatchManager.CheckIsSubmitting = CheckIsSubmitting
LeagueMatchManager.ResetMyDuelInfo = ResetMyDuelInfo

return LeagueMatchManager