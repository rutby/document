---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/10/29 16:51
---
local WorldFavoDataManager = BaseClass("WorldFavoDataManager");
local AllianceWorldMark = require "Scene.AllianceWorldMark.AllianceWorldMark"
local ResourceManager = CS.GameEntry.Resource
local Localization = CS.GameEntry.Localization

local function __init(self)
    self.bookmarkDict = {}
    self.allianceMarkDic = {}
    self.allianceMarkGoDic = {}
    self.loadingMarkDic = {}
    self.lastGotoPos= ""
    self.lastTab = 0
    self:AddListener()
end

local function __delete(self)
    self.bookmarkDict = nil
    self.allianceMarkDic = nil
    self.allianceMarkGoDic = nil
    self.loadingMarkDic = {}
    self.lastGotoPos= nil
    self.lastTab = nil
    self:RemoveListener()
end

local function InitData(self)
    SFSNetwork.SendMessage(MsgDefines.WorldFavoGet,0)
    SFSNetwork.SendMessage(MsgDefines.WorldGetAllianceMark)
    
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.PveLevelEnter, self.OnEnterPveLevel)
    EventManager:GetInstance():AddListener(EventId.PveLevelExit, self.OnExitPveLevel)
    EventManager:GetInstance():AddListener(EventId.OnEnterCrossServer, self.OnRefreshMark)
    EventManager:GetInstance():AddListener(EventId.OnQuitCrossServer, self.OnRefreshMark)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, self.OnExitPveLevel)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnEnterPveLevel)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelEnter, self.OnEnterPveLevel)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelExit, self.OnExitPveLevel)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCrossServer, self.OnRefreshMark)
    EventManager:GetInstance():RemoveListener(EventId.OnQuitCrossServer, self.OnRefreshMark)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, self.OnExitPveLevel)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnEnterPveLevel)
end

local function InitBookmarkDict(self,message)
    self.bookmarkDict = {}
    if message["favo"]~=nil then
        local favoList = message["favo"]
        table.walk(favoList,function (k,v)
            local oneData= BookMark.New()
            oneData:ParseData(v)
            if oneData.server>0 and oneData.pos>0 then
                local key = oneData.server*100000000 + oneData.pos
                self.bookmarkDict[key] = oneData
            end
        end)
    end
end

local function TryAddAllianceMask(self, point, server, markType, name)
    SFSNetwork.SendMessage(MsgDefines.WorldAddAllianceMark, point, server, markType, name)
end

local function TryDelAllianceMask(self, markType)
    SFSNetwork.SendMessage(MsgDefines.WorldDelAllianceMark, markType)
end

local function OnInitAllianceMarkDic(self, message)
    self.allianceMarkDic = {}
    if message.markInfoArr then
        for i, v in ipairs(message.markInfoArr) do
            local newOne = AllianceMarkData.New()
            newOne:ParseData(v)
            if newOne.server >0 and newOne.pos > 0 then
                local k = newOne.type-- newOne.serverId * 100000000 + newOne.point
                self.allianceMarkDic[k] = newOne
                if newOne.server == LuaEntry.Player:GetCurServerId() then
                    self:CreateAllianceMarkOnMap(newOne.type)
                end
            end
        end
    end
end

local function OnAddAllianceMark(self, msg)
    if msg.markInfo then
        local newOne = AllianceMarkData.New()
        newOne:ParseData(msg.markInfo)
        if newOne.server >0 and newOne.pos > 0 then
            local k = newOne.type --newOne.serverId * 100000000 + newOne.point
            self.allianceMarkDic[k] = newOne
            if newOne.server == LuaEntry.Player:GetCurServerId() then
                self:CreateAllianceMarkOnMap(newOne.type)
            end
        end
    end
end

local function OnDelAllianceMark(self, msg)
    if msg.markInfo then
        self:DelAllianceMarkOnMap(msg.markInfo.markType)
        self.allianceMarkDic[msg.markInfo.markType] = nil
    end
end

local function OnAddAllianceMarkPush(self, msg)
    self:OnAddAllianceMark(msg)
    if msg.userInfo then
        UIUtil.ShowTips(Localization:GetString("390818", msg.userInfo.name))
    end
end

local function OnDelAllianceMarkPush(self, msg)
    self:OnDelAllianceMark(msg)
    if msg.userInfo then
        UIUtil.ShowTips(Localization:GetString("390819", msg.userInfo.name))
    end
end

local function ClearAllianceMarks(self)
    for i, v in pairs(self.allianceMarkDic) do
        self:DelAllianceMarkOnMap(v.type)
    end
end

local function DelAllianceMarkOnMap(self, tempType)
    if self.allianceMarkGoDic and self.allianceMarkGoDic[tempType] then
        self.allianceMarkGoDic[tempType].request:Destroy()
        self.allianceMarkGoDic[tempType] = nil
    end
    if self.loadingMarkDic then
        for i, v in pairs(self.loadingMarkDic) do
            v:Destroy()
        end
        self.loadingMarkDic = {}
    end
end

local function CreateAllianceMarkOnMap(self, tempType)
    if not SceneUtils.GetIsInWorld() then
        return
    end
    
    if self.allianceMarkDic and self.allianceMarkDic[tempType] then
        local markInfo = self.allianceMarkDic[tempType]
        if not self.allianceMarkGoDic[tempType] then
            local request = ResourceManager:InstantiateAsync(AllianceMarkPrefabPath[tempType])
            request:completed('+', function()
                if self.allianceMarkDic[tempType] == nil then
                    request:Destroy()
                elseif self.allianceMarkGoDic[tempType] then
                    request:Destroy()
                else
                    self.allianceMarkGoDic[tempType] = nil
                    if request.isError then
                        return
                    end
                    request.gameObject:SetActive(true)
                    request.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
                    request.gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                    request.gameObject.name = "AllianceMark_"..tempType

                    local newAllianceMark = AllianceWorldMark.New()

                    newAllianceMark:OnCreate(request)
                    self.allianceMarkGoDic[tempType] = newAllianceMark
                    self.allianceMarkGoDic[tempType]:ShowMark(markInfo)
                    self.loadingMarkDic[tempType] = nil
                end
            end)
            self.loadingMarkDic[tempType] = request
        else
            self.allianceMarkGoDic[tempType]:ShowMark(markInfo)
        end
    end
end

local function CheckIfAllianceMarkInUse(self, tempType)
    if self.allianceMarkDic and self.allianceMarkDic[tempType] then
        return true
    else
        return false
    end
end

local function CheckIfPointInUse(self, pos)
    for i, v in pairs(self.allianceMarkDic) do
        if v.pos == pos then
            return true
        end
    end
    return false
end



local function AddBookmark(self,point,server,name,type,topFlag)
    local oneData= BookMark.New()
    oneData.pos = point 
    oneData.server = server 
    oneData.name = name               
    oneData.type = type
    oneData.topFlag = topFlag
    if oneData.server>0 and oneData.pos>0 then
        local key = oneData.server*100000000 + oneData.pos
        self.bookmarkDict[key] = oneData
    end
    SFSNetwork.SendMessage(MsgDefines.WorldFavoAdd,name,point,type,server,topFlag,0,1)
end

local function UpdateBookmark(self,point,server,createTime)
    local key = server*100000000 + point
    if self.bookmarkDict[key]~=nil then
        self.bookmarkDict[key].createTime =createTime
    end
end

local function DelBookmark(self,point,server)
    local key = server*100000000 + point
    if self.bookmarkDict[key]~=nil then
        self.bookmarkDict[key] =nil
    end
end

local function GetBookmark(self,point,server)
    local targetP = point - point % 10
    local data = nil
    local key = server*100000000 + targetP
    for i, v in pairs(self.bookmarkDict) do
        local tempPoint = i - i % 10
        if tempPoint == key then
            data = v
            break
        end
    end
    --if self.bookmarkDict[key]~=nil then
    --    data = self.bookmarkDict[key]
    --end
    if not data and self.allianceMarkDic then
        for i, v in pairs(self.allianceMarkDic) do
            if v.pos == point and v.server == server then
                data = v
                break
            end
        end
    end
    return data
end

local function GetBookListByType(self,type)
    local showList ={}
    if type == MarkType.Special or type == MarkType.Friend or type == MarkType.Enemy then
        table.walk(self.bookmarkDict,function (k,v)
            if v.type == type then
                showList[k] = v
            end
        end)
    else
        showList = self.allianceMarkDic
    end
    return showList
end

local function GetBookListByDef(self)
    local showList = {}
    for i ,v in pairs(self.bookmarkDict) do
        if v.type == MarkType.Special or v.type == MarkType.Friend or v.type == MarkType.Enemy then
            showList[i] = v
        end
    end
    return showList
end

local function GetAllBookList(self)
    return self.bookmarkDict
end
local function GetLastGotoPos(self)
    return self.lastGotoPos
end

local function SetLastGotoPos(self,posStr)
    self.lastGotoPos = posStr
end

local function SetLastTab(self,tab)
    self.lastTab = tab
end

local function GetLastTab(self)
    return self.lastTab
end

local function OnEnterPveLevel()
    local self = DataCenter.WorldFavoDataManager
    self:ClearAllianceMarks()
    self:ClearModels()
end

local function OnExitPveLevel()
    local self = DataCenter.WorldFavoDataManager
    for i, v in pairs(self.allianceMarkDic) do
        if v.server == LuaEntry.Player:GetCurServerId() and v.pos > 0 then
            self:CreateAllianceMarkOnMap(v.type)
        end
    end
end

local function OnRefreshMark()
    local self = DataCenter.WorldFavoDataManager
    self:ClearAllianceMarks()
    self:ClearModels()
    for i, v in pairs(self.allianceMarkDic) do
        if v.server == LuaEntry.Player:GetCurServerId() and v.pos > 0 then
            self:CreateAllianceMarkOnMap(v.type)
        end
    end
end
local function ClearModels(self)
    self.allianceMarkGoDic = {}
end

WorldFavoDataManager.__init = __init
WorldFavoDataManager.InitData = InitData
WorldFavoDataManager.__delete = __delete
WorldFavoDataManager.AddListener = AddListener
WorldFavoDataManager.RemoveListener = RemoveListener
WorldFavoDataManager.InitBookmarkDict = InitBookmarkDict
WorldFavoDataManager.AddBookmark = AddBookmark
WorldFavoDataManager.UpdateBookmark = UpdateBookmark
WorldFavoDataManager.DelBookmark = DelBookmark
WorldFavoDataManager.GetBookmark = GetBookmark
WorldFavoDataManager.GetBookListByType = GetBookListByType
WorldFavoDataManager.GetBookListByDef = GetBookListByDef
WorldFavoDataManager.GetLastGotoPos = GetLastGotoPos
WorldFavoDataManager.SetLastGotoPos = SetLastGotoPos
WorldFavoDataManager.GetAllBookList =GetAllBookList
WorldFavoDataManager.OnInitAllianceMarkDic = OnInitAllianceMarkDic
WorldFavoDataManager.TryAddAllianceMask = TryAddAllianceMask
WorldFavoDataManager.TryDelAllianceMask = TryDelAllianceMask
WorldFavoDataManager.OnAddAllianceMark = OnAddAllianceMark
WorldFavoDataManager.OnDelAllianceMark = OnDelAllianceMark
WorldFavoDataManager.OnAddAllianceMarkPush = OnAddAllianceMarkPush
WorldFavoDataManager.OnDelAllianceMarkPush = OnDelAllianceMarkPush
WorldFavoDataManager.CreateAllianceMarkOnMap = CreateAllianceMarkOnMap
WorldFavoDataManager.DelAllianceMarkOnMap = DelAllianceMarkOnMap
WorldFavoDataManager.CheckIfAllianceMarkInUse = CheckIfAllianceMarkInUse
WorldFavoDataManager.CheckIfPointInUse = CheckIfPointInUse
WorldFavoDataManager.ClearAllianceMarks = ClearAllianceMarks
WorldFavoDataManager.SetLastTab = SetLastTab
WorldFavoDataManager.GetLastTab = GetLastTab
WorldFavoDataManager.OnEnterPveLevel = OnEnterPveLevel
WorldFavoDataManager.OnExitPveLevel = OnExitPveLevel
WorldFavoDataManager.ClearModels = ClearModels
WorldFavoDataManager.OnRefreshMark = OnRefreshMark
return WorldFavoDataManager