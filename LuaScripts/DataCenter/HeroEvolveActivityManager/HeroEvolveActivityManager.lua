---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/25 10:58
---

local HeroEvolveActivityManager = BaseClass("HeroEvolveActivityManager")

local function __init(self)
    self.heroId = 0
    self.activityId = 0
    self.finishTime = 0
    self.heroIds = {}
    self.exchangeId = 0
end

local function __delete(self)
    self.heroId = 0
    self.activityId = 0
    self.finishTime = 0
    self.heroIds = {}
    self.exchangeId = 0
end

local function GetHeroEvolveActivityInfo(self, activityId)
    self.activityId = activityId
    SFSNetwork.SendMessage(MsgDefines.HeroEvolveActivityInfo, activityId)
end

local function GetHeroEvolveActivityInfoHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        if errCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(errCode)
        end
    else
        self.heroId = message["heroId"]
        self.activityId = message["activityId"]
        self.finishTime = message["finishTime"]
        self.heroIds = {}
        local vec = string.split(message["heros"], ";")
        for k, v in ipairs(vec) do
            table.insert(self.heroIds, toInt(v))
        end
        self.exchangeId = tonumber(message["exchangeId"])
    end
end

local function HeroEvolveActivityChooseHero(self, activityId, heroId)
    SFSNetwork.SendMessage(MsgDefines.HeroEvolveActivityChooseHero, activityId, heroId)
end

local function HeroEvolveActivityChooseHeroHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        if errCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(errCode)
        end
    else
        self.heroId = message["heroId"]
        self.activityId = message["activityId"]
        EventManager:GetInstance():Broadcast(EventId.HeroEvolveChoose)
    end
end

local function HeroEvolveActivityHeroEvolve(self, activityId)
    local heroData = DataCenter.HeroDataManager:GetHeroById(self.heroId)
    if heroData and heroData:IsInMarch() then
        return
    end
    SFSNetwork.SendMessage(MsgDefines.HeroEvolveActivityHeroEvolve, activityId)
end

local function HeroEvolveActivityHeroEvolveHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        if errCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(errCode)
        end
    else
        if message["deleteHeroUuid"] then
            DataCenter.HeroDataManager:RemoveOneHeroByUuid(message["deleteHeroUuid"])
        end
        if message["reward"] and table.count(message["reward"]) > 0 then
            for _, v in pairs(message["reward"]) do
                DataCenter.RewardManager:AddOneReward(v)
            end
            --DataCenter.RewardManager:ShowCommonReward(message)
        end
        local newHero = message["newHero"]
        if newHero ~= nil then
            DataCenter.HeroDataManager:UpdateOneHero(newHero)
            local uuid = newHero.uuid
            UIManager:GetInstance():OpenWindow(UIWindowNames.UINewHero, uuid)
            
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(uuid)
            if heroData ~= nil then
                GoToUtil.ShowPower({power = HeroUtils.GetHeroPower(heroData)})
            end
        end
        EventManager:GetInstance():Broadcast(EventId.HeroEvolveSuccess)
    end
end

local function AutoDoHeroEvolve(self)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
    if actListData ~= nil then
        local heroData = DataCenter.HeroDataManager:GetHeroById(self.heroId)
        local toHeroId = self:GetToHeroId()
        if toHeroId == 0 or not string.IsNullOrEmpty(DataCenter.HeroDataManager:GetHeroById(toHeroId)) then
            return
        end
        if heroData and heroData.config then
            local evolveGoodsVec = string.split(heroData.config.evolve_goods, "|")
            local canEvolve = true
            for _, v in ipairs(evolveGoodsVec) do
                local goodVec = string.split(v, ";")
                if table.count(goodVec) == 2 then
                    local itemId = toInt(goodVec[1])
                    local itemNeed = toInt(goodVec[2])
                    local itemHas = DataCenter.ItemData:GetItemCount(itemId)
                    if itemHas < itemNeed then
                        canEvolve = false
                        break
                    end
                end
            end
            if canEvolve then
                self:HeroEvolveActivityHeroEvolve(self.activityId)
            end
        end
    end
end

local function IsItemEnoughToHeroEvolve(self)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
    if actListData ~= nil then
        local heroData = DataCenter.HeroDataManager:GetHeroById(self.heroId)
        local toHeroId = self:GetToHeroId()
        if toHeroId == 0 or not string.IsNullOrEmpty(DataCenter.HeroDataManager:GetHeroById(toHeroId)) then
            return false
        end
        if heroData and heroData.config then
            local evolveGoodsVec = string.split(heroData.config.evolve_goods, "|")
            local canEvolve = true
            for _, v in ipairs(evolveGoodsVec) do
                local goodVec = string.split(v, ";")
                if table.count(goodVec) == 2 then
                    local itemId = toInt(goodVec[1])
                    local itemNeed = toInt(goodVec[2])
                    local itemHas = DataCenter.ItemData:GetItemCount(itemId)
                    if itemHas < itemNeed then
                        canEvolve = false
                        break
                    end
                end
            end
            if canEvolve then
                return true
            end
        end
    end
    return false
end


local function NeedShowNew(self)
    if self.activityId == 0 then
        return false
    end

    return self:CheckIfIsNew()
end

local function CheckIfIsNew(self)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
    if actListData == nil then
        return false
    end
    local key = "HeroEvolveActivity_" .. LuaEntry.Player.uid.."_"..actListData.startTime
    local isFirstOpen = CS.GameEntry.Setting:GetBool(key, true)
    return isFirstOpen
end

local function SetIsNew(self)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
    if actListData == nil then
        return
    end
    local key = "HeroEvolveActivity_" .. LuaEntry.Player.uid.."_"..actListData.startTime
    CS.GameEntry.Setting:SetBool(key, false)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function IsHeroChoose(self)
    return self.heroId ~= 0
end

local function GetAllCanEvolveIds(self)
    return self.heroIds
end

local function GetChooseHeroId(self)
    return self.heroId
end

local function GetToHeroId(self)
    if self.heroId == 0 then
        return 0
    end
    local result = GetTableData(HeroUtils.GetHeroXmlName(), self.heroId, "evolve_hero")
    if string.IsNullOrEmpty(result) then
        return 0
    end
    return toInt(result)
end

local function GetExchangeId(self)
    return self.exchangeId
end

local function GetActivityId(self)
    return self.activityId
end

local function NeedShowLoginPop(self)
    local toHeroId = self:GetToHeroId()
    if toHeroId ~= 0 then
        if string.IsNullOrEmpty(DataCenter.HeroDataManager:GetHeroById(toHeroId)) then
            return true
        end
        return false
    end
    
    local heroList = self:GetAllCanEvolveIds()
    for _, heroId in ipairs(heroList) do
        local heroData = DataCenter.HeroDataManager:GetHeroById(heroId)
        if heroData then
            local toHeroId = heroData.config.evolve_hero
            if string.IsNullOrEmpty(DataCenter.HeroDataManager:GetHeroById(toHeroId)) then
                return true
            end
        end
    end
    return false
end

local function GetHeroAndMedalPackage(self)
    if self.heroId == 0 then
        return nil, nil
    end
    
    --找到选择的英雄索引
    local index = 0
    local heroList = self:GetAllCanEvolveIds()
    if heroList then
        for i = 1 ,table.count(heroList) do
            if heroList[i] == self.heroId then
                index = i
            end
        end
    end
    
    local toHeroId = self:GetToHeroId()
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
    if actListData == nil or string.IsNullOrEmpty(actListData.para3) then
        return nil, nil
    end
    local vec = string.split(actListData.para3, ";")
    
    local heroPackageId = nil
    local medalPackageId = nil
    if index ~= 0 then
        local heroAndMedalVec = string.split(vec[index], "|")
        if table.count(heroAndMedalVec) == 2 then
            local heroPackage = heroAndMedalVec[1]
            local medalPackage = heroAndMedalVec[2]
            if not string.IsNullOrEmpty(heroPackage) and not string.IsNullOrEmpty(medalPackage) then
                local heroPackageIds = string.split(heroPackage, ",")
                local medalPackageIds = string.split(medalPackage, ",")
                if heroPackageId == nil then
                    for _, m in ipairs(heroPackageIds) do
                        local package = GiftPackageData.get(m)
                        if package then
                            --if not package:isBought() then
                            --    local str = package:getHeroesStr()
                            --    if not string.IsNullOrEmpty(str) then
                            --        local heroVec = string.split(str, ";")
                            --        if table.count(heroVec) >= 1 then
                            --            local heroId = toInt(heroVec[1])
                            --            if toHeroId == toInt(heroId) then
                            --                heroPackageId = m
                            --            end
                            --        end
                            --    end
                            --end
                            heroPackageId = m
                        end
                        if heroPackageId ~= nil then
                            break
                        end
                    end
                end
                if medalPackageId == nil then
                    for _, v in ipairs(medalPackageIds) do
                        local package = GiftPackageData.get(v)
                        if package then
                            --if not package:isBought() then
                            --    local str = package:getItemsStr()
                            --    if not string.IsNullOrEmpty(str) then
                            --        local itemVec = string.split(str, "|")
                            --        for _, itemStr in ipairs(itemVec) do
                            --            local tmpVec = string.split(itemStr, ";")
                            --            if table.count(tmpVec) >= 1 then
                            --                local itemId = toInt(tmpVec[1])
                            --                local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
                            --                if itemTemplate and toHeroId == toInt(itemTemplate.para2) then
                            --                    medalPackageId = v
                            --                end
                            --            end
                            --        end
                            --    end
                            --end
                            medalPackageId = v
                        end
                        if medalPackageId ~= nil then
                            break
                        end
                    end
                end
            end
        end
    end
    
    return heroPackageId, medalPackageId
end

HeroEvolveActivityManager.GetActivityId = GetActivityId
HeroEvolveActivityManager.GetExchangeId = GetExchangeId
HeroEvolveActivityManager.GetChooseHeroId = GetChooseHeroId
HeroEvolveActivityManager.GetToHeroId = GetToHeroId
HeroEvolveActivityManager.__init = __init
HeroEvolveActivityManager.__delete = __delete
HeroEvolveActivityManager.GetHeroEvolveActivityInfo = GetHeroEvolveActivityInfo
HeroEvolveActivityManager.GetHeroEvolveActivityInfoHandler = GetHeroEvolveActivityInfoHandler
HeroEvolveActivityManager.HeroEvolveActivityChooseHero = HeroEvolveActivityChooseHero
HeroEvolveActivityManager.HeroEvolveActivityChooseHeroHandler = HeroEvolveActivityChooseHeroHandler
HeroEvolveActivityManager.HeroEvolveActivityHeroEvolve = HeroEvolveActivityHeroEvolve
HeroEvolveActivityManager.HeroEvolveActivityHeroEvolveHandler = HeroEvolveActivityHeroEvolveHandler
HeroEvolveActivityManager.AutoDoHeroEvolve = AutoDoHeroEvolve
HeroEvolveActivityManager.NeedShowNew = NeedShowNew
HeroEvolveActivityManager.CheckIfIsNew = CheckIfIsNew
HeroEvolveActivityManager.SetIsNew = SetIsNew
HeroEvolveActivityManager.IsHeroChoose = IsHeroChoose
HeroEvolveActivityManager.GetAllCanEvolveIds = GetAllCanEvolveIds
HeroEvolveActivityManager.IsItemEnoughToHeroEvolve = IsItemEnoughToHeroEvolve
HeroEvolveActivityManager.NeedShowLoginPop = NeedShowLoginPop
HeroEvolveActivityManager.GetHeroAndMedalPackage = GetHeroAndMedalPackage

return HeroEvolveActivityManager