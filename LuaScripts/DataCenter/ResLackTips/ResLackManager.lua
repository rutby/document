---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 9/24/21 5:26 PM
---
local ResLackManager = BaseClass("ResLackManager");
local ResLackTipsTemplate = require "DataCenter.ResLackTips.ResLackTipsTemplate"

--6 打怪
local ResLackItem_AttackMonster = require "DataCenter.ResLackTips.ResLackItem_AttackMonster"
--7 采集
local ResLackItem_CollectResInWorld = require "DataCenter.ResLackTips.ResLackItem_CollectResInWorld"
--10 研究科技
local ResLackItem_Science = require "DataCenter.ResLackTips.ResLackItem_Science"
--11 资源背包(使用)
local ResLackItem_ResourceBagUse = require "DataCenter.ResLackTips.ResLackItem_ResourceBagUse"
--11 资源背包(使用) New
local ResLackItem_ResourceBagUse_New = require "DataCenter.ResLackTips.ResLackItem_ResourceBagUse_New"
--12 资源背包(购买)
local ResLackItem_ResourceBagBuy = require "DataCenter.ResLackTips.ResLackItem_ResourceBagBuy"
--16 完成雷达任务 
local ResLackItem_GoRadarTask = require "DataCenter.ResLackTips.ResLackItem_GoRadarTask"
--26 任务
local ResLackItem_Quest = require "DataCenter.ResLackTips.ResLackItem_Quest"
--27 购买礼包   跳转礼包商城
local ResLackItem_BuyGiftPackage = require "DataCenter.ResLackTips.ResLackItem_BuyGiftPackage"
--41 特殊建筑升级道具材料购买
local ResLackItem_BuildBuyItem = require "DataCenter.ResLackTips.ResLackItem_BuildBuyItem"
--44 购买礼包 道具不足   直接购买
local ResLackItem_BuyGiftNew= require "DataCenter.ResLackTips.ResLackItem_BuyGiftNew"
--45 购买道具 目前是限时商店
local ReslackItem_CommonShop= require "DataCenter.ResLackTips.ReslackItem_CommonShop"
--46 跳转日常
local ReslackItem_ActDaily= require "DataCenter.ResLackTips.ReslackItem_ActDaily"
--48 购买体力
local ResLackItem_BuyPveStamina = require "DataCenter.ResLackTips.ResLackItem_BuyPveStamina"
--52 使用建筑自选箱子开启指定资源道具
local ResLackItem_UseBuildGoods = require "DataCenter.ResLackTips.ResLackItem_UseBuildGoods"
--66 前往七日活动
local ResLackItem_ActSevenDay = require "DataCenter.ResLackTips.ResLackItem_ActSevenDay"
--67 前往建筑打开按钮
local ResLackItem_GoToBuild = require "DataCenter.ResLackTips.ResLackItem_GoToBuild"
--69 前往每日任务
local ResLackItem_GoDayTask = require "DataCenter.ResLackTips.ResLackItem_GoDayTask"
--72 搜索集结怪
local ResLackItem_GoSearchBoss = require "DataCenter.ResLackTips.ResLackItem_GoSearchBoss"
--74 英雄月卡
local ResLackItem_HeroMonthCard = require "DataCenter.ResLackTips.ResLackItem_HeroMonthCard"
--75 联盟对决
local ResLackItem_GoWindowAllianceBat = require "DataCenter.ResLackTips.ResLackItem_GoWindowAllianceBat"
--76 跳转赛季地块
local ResLackItem_GoDesert = require "DataCenter.ResLackTips.ResLackItem_GoDesert"
--77 跳转赛季任务
local ResLackItem_GoSeasonTask = require "DataCenter.ResLackTips.ResLackItem_GoSeasonTask"
--78 跳转赛季任务
local ResLackItem_GoActWin = require "DataCenter.ResLackTips.ResLackItem_GoActWin"
--79 英雄技能 每日免费体力
local ResLackItem_DailyFreeEnergy = require "DataCenter.ResLackTips.ResLackItem_DailyFreeEnergy"
--80 跳转礼包商城根据rechargeId
local ResLackItem_BuyGiftPackageByRechargeId = require "DataCenter.ResLackTips.ResLackItem_BuyGiftPackageByRechargeId"
--81 赛季pass
local ResLackItem_SeasonPass = require "DataCenter.ResLackTips.ResLackItem_SeasonPass"
--82 赛季周卡
local ResLackItem_SeasonWeek = require "DataCenter.ResLackTips.ResLackItem_SeasonWeek"
--83 赛季地块管理
local ResLackItem_SeasonGroundManage = require "DataCenter.ResLackTips.ResLackItem_SeasonGroundManage"
--84 联盟迁城购买 联盟商店
local ResLackItem_AllianceShop = require "DataCenter.ResLackTips.ResLackItem_AllianceShop"
--85 赛季专精地块
local ResLackItem_SeasonMasteryDesert = require "DataCenter.ResLackTips.ResLackItem_SeasonMasteryDesert"
--87 多个道具礼包
local ResLackItem_BuyGiftGroup = require "DataCenter.ResLackTips.ResLackItem_BuyGiftGroup"
--86 个人军备宝箱奖励阶段
local ResLackItem_ActPersonalArmy = require "DataCenter.ResLackTips.ResLackItem_ActPersonalArmy"
--88 联盟军备宝箱奖励阶段
local ResLackItem_ActAllianceArmy = require "DataCenter.ResLackTips.ResLackItem_ActAllianceArmy"
--90 冠军对决奖励
local ResLackItem__ChampionBattle = require "DataCenter.ResLackTips.ResLackItem__ChampionBattle"
--92 使用道具自选箱
local ResLackItem_ItemUseChoose = require "DataCenter.ResLackTips.ResLackItem_ItemUseChoose"
--9999 购买礼包 资源不足  直接购买  此类型手动添加
local ResLackItem_BuyGiftResNew= require "DataCenter.ResLackTips.ResLackItem_BuyGiftResNew"
--93 打开关卡界面
local ResLackItem_GoStoryMain = require "DataCenter.ResLackTips.ResLackItem_GoStoryMain"
--94 去建筑（没有就建造， 如果家具建筑有空闲工作位，调去工作，没有就去升级）
local ResLackItem_Build = require "DataCenter.ResLackTips.ResLackItem_Build"
--1002 钻石购买资源
local ResLackItem_ResourceBuyItem = require "DataCenter.ResLackTips.ResLackItem_ResourceBuyItem"
--1003 领取体力
local ResLackItem_GoBuildGetStamina = require "DataCenter.ResLackTips.ResLackItem_GoBuildGetStamina"
--2003	装备工厂
local ResLackItem_GoHeroEquip = require "DataCenter.ResLackTips.ResLackItem_GoHeroEquip"
--2004	装备工厂合成
local ResLackItem_GoHeroEquipItemCompose = require "DataCenter.ResLackTips.ResLackItem_GoHeroEquipItemCompose"
--2005	收取材料
local ResLackItem_GoHeroEquipItemCollect = require "DataCenter.ResLackTips.ResLackItem_GoHeroEquipItemCollect"
--2006	缺装备时使用道具
local ResLackItem_GoHeroEquipItemUse = require "DataCenter.ResLackTips.ResLackItem_GoHeroEquipItemUse"
--2007	章节任务
local ResLackItem_GoChapterTask = require "DataCenter.ResLackTips.ResLackItem_GoChapterTask"
--95 更换英雄 占用

function ResLackManager:__init()
    self._lack_list = {}
    self._lack_listNew = {}
    self.templateDict = {} -- Dict<id, template>
    self.tipToTemplateDict = {} -- Dict<tips, List<template>>

    LocalController:instance():visitTable(TableName.Res_Lack_Tips, function(id, lineData)
        local template = ResLackTipsTemplate.New()
        template:InitData(lineData)
        self.templateDict[id] = template
        if self.tipToTemplateDict[template.tips] == nil then
            self.tipToTemplateDict[template.tips] = {}
        end
        table.insert(self.tipToTemplateDict[template.tips], template)
    end)
end

function ResLackManager:GetTemplate(id)
    return self.templateDict[id]
end

function ResLackManager:GetTemplateByTip(tip)
    local templates = self:GetTemplatesByTip(tip)
    if #templates > 0 then
        return templates[1]
    else
        return nil
    end
end

function ResLackManager:GetTemplatesByTip(tip)
    return self.tipToTemplateDict[tip] or {}
end

function ResLackManager:CheckResAddWay( _resType, _needCnt, isType)
    self._lack_list = {}
    local mainLv = DataCenter.BuildManager.MainLv
    LocalController:instance():visitTable(TableName.Res_Lack_Tips,function(id,lineData)
        local restype = lineData:getValue("res")
        local baseLevel = lineData:getValue("base")
        local need_build = lineData:getValue("need_build")
        local good = lineData:getValue("goods")
        local type = tonumber(lineData:getValue("type")) or 0
        local isOk = false
        local resTypeOk = false
        local goodTypeOk = false
        local baseLevelOk = true
        local needBuildOk = true
        if isType then
            if isType == type then
                isOk = true
            end
        else
            -- 过滤resType
            if (_resType == tonumber(restype)) then
                resTypeOk = true
            end
            if _resType == tonumber(good) then
                goodTypeOk = true
            end
            isOk = (resTypeOk or goodTypeOk)
        end
        
        if isOk then
            -- 过滤baseLevel
            local baseLevelArray = string.split(baseLevel, '-')
            if (table.count(baseLevelArray) == 2) then
                local minLevel = tonumber(baseLevelArray[1])
                local maxLevel = tonumber(baseLevelArray[2])
                if (mainLv < minLevel or mainLv > maxLevel) then
                    baseLevelOk = false
                end
            end
            -- 过滤needbuild
            if need_build ~= "" then
                local needBuildArray = string.split(need_build, ';')
                local buildData = DataCenter.BuildManager:GetFunbuildByItemID(tonumber(needBuildArray[1]))
                if buildData == nil then
                    needBuildOk = false
                else
                    if needBuildArray[3] == nil or needBuildArray[3] == 1 then -- 1 大于等于第二个参数生效
                        needBuildOk = buildData.level >= tonumber(needBuildArray[2])
                    elseif needBuildArray[3] == 0 then  -- 0 小于第二个参数生效
                        needBuildOk = buildData.level < tonumber(needBuildArray[2])
                    end
                end
            end
           
            if baseLevelOk and needBuildOk then
                self:AddToList(lineData, _resType, _needCnt, false, nil, isType)
            end
        end
    end)

    self._lack_listNew = {}
    if (table.count(self._lack_list) > 0) then
        --处理新增group
        local lackGroupList = {}
        for i, v in ipairs(self._lack_list) do
            local a = v:GetGroup()
            if a == 0 then
                a = ""
            end
            if a ~= "" then
                if lackGroupList[tonumber(a)] == nil then
                    lackGroupList[tonumber(a)] = {}
                end
                table.insert(lackGroupList[tonumber(a)],v)
            else
                table.insert(self._lack_listNew,v)
            end
        end
        --同组group只取第一个
        for k, v in pairs(lackGroupList) do
            table.sort(v, function(a,b)
                if a:GetOrder() < b:GetOrder() then
                    return true
                elseif a:GetOrder() == b:GetOrder() then
                    return false
                end
                return false
            end)
        end
        
        local isSwitch = self:GetIsShowMoreResSwitch()
        for i, v in pairs(lackGroupList) do
            if isSwitch then
                for _, item in pairs(v) do
                    if item:GetTips() == ResLackGoToType.ResourceBagUse or item:GetTips() == ResLackGoToType.ResourceBuyItem then
                        table.insert(self._lack_listNew,item)
                    else
                        table.insert(self._lack_listNew,item)
                        break
                    end
                end
            else
                table.insert(self._lack_listNew,v[1])
            end
        end
        
        if not isType then
            self:CheckExtraRes(_resType)
        end
        
        table.sort(self._lack_listNew, function ( item1, item2 )
            local aItem = item1.itemId and item1.itemId or 1
            local bItem = item2.itemId and item2.itemId or 1
            if item1:GetOrder() ~= item2:GetOrder() then
                return item1:GetOrder() < item2:GetOrder()
            end
            return aItem < bItem
        end)
    else
        if not isType then
            self:CheckExtraRes(_resType)
        end
    end
    --检查有无组礼包，记录礼包当前位置
    for i = 1 ,table.count(self._lack_listNew) do
        if self._lack_listNew[i]:GetTips() == ResLackGoToType.BuyGiftGroup then
            self._lack_listNew[i]:SetGroup(i)
        end
    end
    return self._lack_listNew
end

function ResLackManager:GetResAddWayByIndex( index )
    if (index < 1 or index > #self._lack_list) then
        return nil
    end
    return self._lack_list[index]
end

function ResLackManager:GetIsShowMoreResSwitch()
    local isSwitch = LuaEntry.DataConfig:CheckSwitch("show_multyres")
    return isSwitch
end

function ResLackManager:AddToList( lineData, _resType, _needCnt , _, _,isType)
    local tips = lineData:getValue("tips")
    local reslackitem = nil
    if tips == ResLackGoToType.Monster then
        reslackitem = ResLackItem_AttackMonster.New( lineData:getValue("id") )
    elseif tips == ResLackGoToType.Collect then
        reslackitem = ResLackItem_CollectResInWorld.New( lineData:getValue("id") )
    elseif tips == ResLackGoToType.Science then
        reslackitem = ResLackItem_Science.New( lineData:getValue("id") )
    elseif tips == ResLackGoToType.ResourceBagUse then
        reslackitem = ResLackItem_ResourceBagUse.New( lineData:getValue("id"))
    --elseif tips == 12 then
    --    reslackitem = ResLackItem_ResourceBagBuy.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.Radar then
        reslackitem = ResLackItem_GoRadarTask.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.Task then
        reslackitem = ResLackItem_Quest.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.BuyGiftShop then
        reslackitem = ResLackItem_BuyGiftPackage.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.BuildBuyItem then
        reslackitem = ResLackItem_BuildBuyItem.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.BuyGiftNew then
        reslackitem = ResLackItem_BuyGiftNew.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.CommonShop then
        reslackitem = ReslackItem_CommonShop.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.ActDaily then
        reslackitem = ReslackItem_ActDaily.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.BuyPveStamina then
        reslackitem = ResLackItem_BuyPveStamina.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.UseBuildGoods then
        reslackitem = ResLackItem_UseBuildGoods.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.ActSevenDay then
        reslackitem = ResLackItem_ActSevenDay.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.GotoBuildAndOpen then
        reslackitem = ResLackItem_GoToBuild.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.GoDayTask then
        reslackitem = ResLackItem_GoDayTask.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.GoSearchBoss then
        reslackitem = ResLackItem_GoSearchBoss.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.HeroMonth then
        reslackitem = ResLackItem_HeroMonthCard.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.GoWindowAllianceBat then
        reslackitem = ResLackItem_GoWindowAllianceBat.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.GoDesert then
        reslackitem = ResLackItem_GoDesert.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.GoSeasonTask then
        reslackitem = ResLackItem_GoSeasonTask.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.GoActWin then
        reslackitem = ResLackItem_GoActWin.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.DailyFreeEnergy then
        reslackitem = ResLackItem_DailyFreeEnergy.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.BuyGiftPackageByRechargeId then
        reslackitem = ResLackItem_BuyGiftPackageByRechargeId.New(lineData:getValue("id"))
    elseif tips == ResLackGoToType.SeasonPass then
        reslackitem = ResLackItem_SeasonPass.New(lineData.id)
    elseif tips ==  ResLackGoToType.SeasonWeek then
        reslackitem = ResLackItem_SeasonWeek.New(lineData.id)
    elseif tips ==  ResLackGoToType.SeasonGroundManage then
        reslackitem = ResLackItem_SeasonGroundManage.New(lineData.id)
    elseif tips == ResLackGoToType.AllianceShop then
        reslackitem = ResLackItem_AllianceShop.New(lineData.id)
    elseif tips == ResLackGoToType.SeasonMasteryDesert then
        reslackitem = ResLackItem_SeasonMasteryDesert.New(lineData.id)
    elseif tips == ResLackGoToType.ActPersonalArmy then
        reslackitem = ResLackItem_ActPersonalArmy.New(lineData.id)
    elseif tips == ResLackGoToType.BuyGiftGroup then
        reslackitem = ResLackItem_BuyGiftGroup.New(lineData.id)
    elseif tips == ResLackGoToType.ActAllianceArmy then
        reslackitem = ResLackItem_ActAllianceArmy.New(lineData.id)
    elseif tips == ResLackGoToType.ChampionBattle then
        reslackitem = ResLackItem__ChampionBattle.New(lineData.id)
    elseif tips == ResLackGoToType.ItemUseChoose then
        reslackitem = ResLackItem_ItemUseChoose.New(lineData.id)
    elseif tips == ResLackGoToType.GoStoryMain then
        reslackitem = ResLackItem_GoStoryMain.New(lineData.id)
    elseif tips == ResLackGoToType.Build then
        reslackitem = ResLackItem_Build.New(lineData.id)
    elseif tips == ResLackGoToType.ResourceBuyItem then
        reslackitem = ResLackItem_ResourceBuyItem.New(lineData.id)
    elseif tips == ResLackGoToType.GoBuildGetStamina then
        reslackitem = ResLackItem_GoBuildGetStamina.New(lineData.id)
    elseif tips == ResLackGoToType.HeroEquip then
        reslackitem = ResLackItem_GoHeroEquip.New(lineData.id)
    elseif tips == ResLackGoToType.HeroEquipItemCompose then
        reslackitem = ResLackItem_GoHeroEquipItemCompose.New(lineData.id)
    elseif tips == ResLackGoToType.HeroEquipItemCollect then
        reslackitem = ResLackItem_GoHeroEquipItemCollect.New(lineData.id)
    elseif tips == ResLackGoToType.HeroEquipItemUse then
        reslackitem = ResLackItem_GoHeroEquipItemUse.New(lineData.id)
    elseif tips == ResLackGoToType.GoChapterTask then
        reslackitem = ResLackItem_GoChapterTask.New(lineData.id)
    end
    if (reslackitem == nil) then
        return
    end
    local isOk = reslackitem:CheckIsOk(_resType, _needCnt, false, nil,isType)
    if tips == ResLackGoToType.ResourceBagUse then
        local isSwitch = self:GetIsShowMoreResSwitch()
        if isSwitch and isOk then
            local para1 = lineData:getValue("para1")
            if para1 ~= nil and para1 ~= "" then
                local itemArr = string.split_ii_array(para1,";")
                for index, v in ipairs(itemArr) do
                   local resLackItem_new = ResLackItem_ResourceBagUse_New.New( lineData:getValue("id"))
                    local isInsert = resLackItem_new:CheckIsOk(_resType, _needCnt, false, nil,isType,v)
                    if isInsert then
                        table.insert(self._lack_list, resLackItem_new)
                    end
                end
            end
        else
            if isOk then
                table.insert(self._lack_list, reslackitem)
            end
        end
    else
        if tips == ResLackGoToType.BuyGiftGroup then
            if isOk then
                reslackitem:InitGroup()
                for i = 1 ,table.count(isOk) do
                    table.insert(self._lack_list, reslackitem)
                end
            end
        else
            if isOk then
                table.insert(self._lack_list, reslackitem)
            end
        end
    end
end

--额外手动检查资源礼包
function ResLackManager:CheckExtraRes(_resType)
    if _resType == ResourceType.Food or _resType == ResourceType.Electricity or _resType == ResourceType.Plank or _resType == ResourceType.FORMATION_STAMINA or _resType == ResourceType.Steel then
        local reslackitem = ResLackItem_BuyGiftResNew.New()
        local isOk = reslackitem:CheckIsOk(_resType)
        if isOk then
            table.insert(self._lack_listNew,reslackitem)
        end
    end
end

return ResLackManager