---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2023/9/25 20:40
---
local WorldAllianceCityRecordManager = BaseClass("WorldAllianceCityRecordManager");
local WorldAllianceCityRecord = require "DataCenter.WorldAllianceCityRecord.WorldAllianceCityRecord"
local WorldAllianceCityRecordLevelReward = require "DataCenter.WorldAllianceCityRecord.WorldAllianceCityRecordLevelReward"
local function __init(self)
    self.recordList = {}
    self.showRewardState = false
    self.rewardStageDic = {}
    self.timeList = {}
end

local function __delete(self)
    self.recordList = {}
    self.showRewardState = false
    self.rewardStageDic = {}
    self.timeList = {}
end

local function OnClickRankView(self,lastTime)
    self.showRedState = false
    Setting:SetPrivateString("CityRecordTime",tostring(lastTime))
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function CheckNeedShowRecordRed(self)
    local curTimeStr = Setting:GetPrivateString("CityRecordTime","")
    local curTime = tonumber(curTimeStr)
    if curTime == nil then
        curTime = 0
    end
    SFSNetwork.SendMessage(MsgDefines.GetAllianceCityRecordRedPoint,curTime)
end

local function GetNeedShowState(self)
    return self.showRedState
end
local function RefreshShowState(self,message)
    if message["redPoint"]~=nil then
        self.showRedState = message["redPoint"]
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function UpdateRecordList(self,message)
    if message["rankList"]~=nil then
        local dic = message["rankList"]
        self.recordList = {}
        self.timeList = {}
        for k,v in pairs(dic) do
            local oneData = WorldAllianceCityRecord.New()
            oneData:ParseData(v)
            if oneData.uuid~=nil and oneData.uuid~=0 then
                self.recordList[oneData.uuid] = oneData
                local tempData = {}
                tempData.uuid = oneData.uuid
                tempData.time = oneData.recordTime
                table.insert(self.timeList,tempData)
            end
        end
        table.sort(self.timeList,function(a,b)
            return a.time>b.time
        end)
    end
end

local function GetRecordRewardList(self,message)
    if message["levelStageRewards"]~=nil then
        local dic = message["levelStageRewards"]
        self.rewardStageDic = {}
        for k,v in pairs(dic) do
            local oneData = WorldAllianceCityRecordLevelReward.New()
            oneData:UpdateData(v)
            if oneData.level~=nil and oneData.level>0 then
                self.rewardStageDic[oneData.level] = oneData
            end
        end
    end
end

local function GetRewardByLevel(self,level)
    return self.rewardStageDic[level]
end

local function GetLatestRecord(self)
    if #self.timeList>0 then
        return self.timeList[1]
    end
    return nil
end
local function GetRecordList(self)
    local list = {}
    for i=1,#self.timeList do
        if i>1 then
            table.insert(list,self.timeList[i])
        end
    end
    return list
end

local function GetRecordDataByUuid(self,uuid)
    return self.recordList[uuid]
end
WorldAllianceCityRecordManager.__init = __init
WorldAllianceCityRecordManager.__delete = __delete
WorldAllianceCityRecordManager.OnClickRankView = OnClickRankView
WorldAllianceCityRecordManager.CheckNeedShowRecordRed = CheckNeedShowRecordRed
WorldAllianceCityRecordManager.RefreshShowState = RefreshShowState
WorldAllianceCityRecordManager.UpdateRecordList = UpdateRecordList
WorldAllianceCityRecordManager.GetRecordRewardList = GetRecordRewardList
WorldAllianceCityRecordManager.GetRewardByLevel = GetRewardByLevel
WorldAllianceCityRecordManager.GetNeedShowState = GetNeedShowState
WorldAllianceCityRecordManager.GetLatestRecord =GetLatestRecord
WorldAllianceCityRecordManager.GetRecordList =GetRecordList
WorldAllianceCityRecordManager.GetRecordDataByUuid = GetRecordDataByUuid
return WorldAllianceCityRecordManager