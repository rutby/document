---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/14 15:38
---

local SeasonWeekManager = BaseClass("SeasonWeekManager");
local SeasonWeekTemplate = require "DataCenter.SeasonWeek.SeasonWeekTemplate"
local SeasonWeekData = require "DataCenter.SeasonWeek.SeasonWeekData"

local function __init(self)
    self.curTemplate = nil
    self.templateDict = {}
    LocalController:instance():visitTable(TableName.SeasonWeek, function(id, lineData)
        local template = SeasonWeekTemplate.New()
        template:InitData(lineData)
        self.templateDict[id] = template
    end)
    
    self.data = SeasonWeekData.New()
end

local function __delete(self)
    self.curTemplate = nil
    self.templateDict = nil
    self.data = nil
end

local function GetCurTemplate(self)
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    local day = DataCenter.SeasonDataManager:GetSeasonDurationDay() + 1
    for _, template in pairs(self.templateDict) do
        if template.season == season and day >= template.startDay and day <= template.endDay then
            return template
        end
    end
    return nil
end

local function GetData(self)
    return self.data
end

local function SendGetInfo(self)
    SFSNetwork.SendMessage(MsgDefines.SeasonWeekBuffGetInfo)
end

local function SendReceiveReward(self)
    SFSNetwork.SendMessage(MsgDefines.SeasonWeekBuffReceiveReward)
end

local function HandleGetInfo(self, message)
    self.data:ParseServerData(message)
    EventManager:GetInstance():Broadcast(EventId.SeasonWeekUpdate)
end

local function HandleReceiveReward(self, message)
    self.data:ParseServerData(message)
    if message["reward"] then
        DataCenter.RewardManager:ShowCommonReward(message)
        for _, v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.SeasonWeekUpdate)
end

local function HandleUpdate(self, message)
    self.data:ParseServerData(message)
    EventManager:GetInstance():Broadcast(EventId.SeasonWeekUpdate)
end

SeasonWeekManager.__init = __init
SeasonWeekManager.__delete = __delete

SeasonWeekManager.GetCurTemplate = GetCurTemplate
SeasonWeekManager.GetData = GetData

SeasonWeekManager.SendGetInfo = SendGetInfo
SeasonWeekManager.SendReceiveReward = SendReceiveReward

SeasonWeekManager.HandleGetInfo = HandleGetInfo
SeasonWeekManager.HandleReceiveReward = HandleReceiveReward
SeasonWeekManager.HandleUpdate = HandleUpdate

return SeasonWeekManager
