---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/2/24 17:33
---


local EquipmentDataManager = BaseClass("EquipmentDataManager")
local EquipmentData = require "DataCenter.EquipmentManager.EquipmentData"
local EquipmentSuitData = require "DataCenter.EquipmentManager.EquipmentSuitData"

local function __init(self)
    self.allEquip = {}
    self.allEquipSuit = {}
end

local function __delete(self)
    self.allEquip = {}
    self.allEquipSuit = {}
end

local function GetAllEquip(self)
    return self.allEquip
end

local function GetAllEquipSuit(self)
    return self.allEquipSuit
end

local function GetEquipByUuid(self, uuid)
    return self.allEquip[uuid]
end

local function GetEquipSuitKey(self, carIndex, type) 
    return carIndex * 100 + type
end

local function GetEquipSuit(self, carIndex, type)
    local key = self:GetEquipSuitKey(carIndex, type)
    return self.allEquipSuit[key]
end

local function InitEquip(self, message)
    if message["equipArr"] then
        for _, v in ipairs(message["equipArr"]) do
            self:UpdateOneEquip(v)
        end
    end
    if message["equipSuitArr"] then
        for _, v in ipairs(message["equipSuitArr"]) do
            self:UpdateOneEquipSuit(v)
        end
    end
end

local function UpdateOneEquip(self, param)
    local uuid = param["uuid"]
    if uuid == nil then
        return
    end
    local data = self:GetEquipByUuid(uuid)
    if data == nil then
        data = EquipmentData.New()
        self.allEquip[uuid] = data
    end
    data:ParseData(param)
end

local function UpdateOneEquipSuit(self, param)
    local carIndex = param["carIndex"]
    local type = param["type"]
    if carIndex == nil or type == nil then
        return
    end
    local data = self:GetEquipSuit(carIndex, type)
    if data == nil then
        data = EquipmentSuitData.New()
        local key = self:GetEquipSuitKey(carIndex, type)
        self.allEquipSuit[key] = data
    end
    data:ParseData(param)
end

local function GetUsedEquipmentBySuitType(self, suitType)
    local result = {}
    for k, v in ipairs(self.allEquip) do
        local template = DataCenter.EquipmentTemplateManager:GetTemplate(v.id)
        if template and template:GetSuitType() == suitType then
            table.insert(result, k)
        end
    end
    return result
end

local function EquipmentAddExp(self, goodsId, num, uuid)
    SFSNetwork.SendMessage(MsgDefines.CarEquipExp, goodsId, num, uuid)
end

local function EquipmentAddExpHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        if message["equip"] ~= nil then
            self:UpdateOneEquip(message["equip"])
            EventManager:GetInstance():Broadcast(EventId.EquipDataUpdate)
            EventManager:GetInstance():Broadcast(EventId.EquipExpUp)
        end
    end
end

local function EquipmentQualityUp(self, uuid)
    SFSNetwork.SendMessage(MsgDefines.EquipUpQuality, uuid)
end

local function EquipmentQualityUpHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        if message["equip"] ~= nil then
            local preEffectNum = 0
            local uuid = message["equip"]["uuid"]
            local data = self:GetEquipByUuid(uuid)
            if data and data.effect then
                local template = DataCenter.EquipmentTemplateManager:GetTemplate(data.equipId)
                if template ~= nil then
                    preEffectNum = EquipmentUtil.GetEquipmentUnlockAttrNum(template.color)
                end
            end
            self:UpdateOneEquip(message["equip"])

            local equipmentData = self:GetEquipByUuid(uuid)
            local template = DataCenter.EquipmentTemplateManager:GetTemplate(equipmentData.equipId)

            if equipmentData and template and preEffectNum < EquipmentUtil.GetEquipmentUnlockAttrNum(template.color) then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipmentAdvanceSuccess, equipmentData.equipId)
            end
            EventManager:GetInstance():Broadcast(EventId.EquipDataUpdate)
            EventManager:GetInstance():Broadcast(EventId.EquipQualityUp)
        end
    end
end

local function WearCarEquip(self, carIndex, type, uuid)
    SFSNetwork.SendMessage(MsgDefines.WearCarEquip, carIndex, type, uuid)
end

local function WearCarEquipHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        if message["equipSuit"] ~= nil then
            local equipArr = message["equipSuit"]["equips"]

            for _, v in pairs(self.allEquipSuit) do
                for _, uid in ipairs(equipArr) do
                    v:RemoveEquip(uid)
                end
            end
            
            self:UpdateOneEquipSuit(message["equipSuit"])
            EventManager:GetInstance():Broadcast(EventId.EquipSuitDataUpdate)
        end
    end
end

local function TakeOffEquip(self, carIndex, type, uuid)
    SFSNetwork.SendMessage(MsgDefines.TakeOffEquip, carIndex, type, uuid)
end

local function TakeOffEquipHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        if message["equipSuit"] ~= nil then
            self:UpdateOneEquipSuit(message["equipSuit"])
            EventManager:GetInstance():Broadcast(EventId.EquipSuitDataUpdate)
        end
    end
end

local function NewCarEquipPushHandler(self, message)
    if message["newEquips"] ~= nil then
        for _, v in ipairs(message["newEquips"]) do
            self:UpdateOneEquip(v)
        end
        EventManager:GetInstance():Broadcast(EventId.EquipDataUpdate)
    end
end

local function EquipEffectChangePushHandler(self, message)
    if message["equipUuid"] then
        message["uuid"] = message["equipUuid"]
        self:UpdateOneEquip(message)
        EventManager:GetInstance():Broadcast(EventId.EquipDataUpdate)
    end
    if message["carIndex"] then
        self:UpdateOneEquipSuit(message)
        EventManager:GetInstance():Broadcast(EventId.EquipSuitDataUpdate)
    end
end

local function GetEquipmentByCarIndexAndTypeAndPos(self, carIndex, type, pos)
    local suitData = self:GetEquipSuit(carIndex, type)
    if suitData then
        return suitData:GetEquipmentUidByPos(pos)
    end
    return nil
end

local function GetEquipmentCarIndex(self, equipmentUid)
    if equipmentUid == nil then
        return nil
    end
    for _, v in pairs(self.allEquipSuit) do
        if v:ContainsEquipments(equipmentUid) then
            return v.carIndex
        end
    end
    return nil
end

local function SuitTypeHasRedDot(self, carIndex, suitType)
    for i = EquipmentConst.Position.Equipment_Position_Cannon, EquipmentConst.Position.Equipment_Position_Energy_Core do
        local flag = self:PosHasRedDot(carIndex, suitType, i)
        if flag then
            return true
        end
    end
    return false
end

local function PosHasRedDot(self, carIndex, suitType, pos)
    local uuid = self:GetEquipmentByCarIndexAndTypeAndPos(carIndex, suitType, pos)
    if uuid ~= nil then
        return false
    end
    for _, v in pairs(self.allEquip) do
        local template = DataCenter.EquipmentTemplateManager:GetTemplate(v.equipId)
        if template ~= nil and template.position == pos and template:GetSuitType() == suitType and self:GetEquipmentCarIndex(v.uuid) == nil then
            return true
        end
    end
    return false
end

local function PosHasCanEquipEquipment(self, carIndex, suitType, pos)
    local uuid = self:GetEquipmentByCarIndexAndTypeAndPos(carIndex, suitType, pos)
    if uuid ~= nil then
        return false
    end
    for _, v in pairs(self.allEquip) do
        local template = DataCenter.EquipmentTemplateManager:GetTemplate(v.equipId)
        if template ~= nil and template.position == pos and template:GetSuitType() == suitType then
            return true
        end
    end
    return false
end


local function GetEffectValue(self, carIndex, effectId)
    local result = 0
    for k, v in pairs(self.allEquipSuit) do
        if v.carIndex == carIndex then
            result = result + v:GetEffectValue(effectId)
        end
    end
    
    return result
end

local function GetLevelExp(self, equipmentId, lv)
    local lv1Id = EquipmentUtil.GetEquipmentLv1Id(equipmentId)
    local id = lv1Id + lv - 1
    local template = DataCenter.EquipmentTemplateManager:GetTemplate(id)
    if template then
        return template.lvExp
    end
    return 1
end

local function IsSuitEffectUnlock(self, carIndex, suitType, suitId, index)
    local suitTemplate = DataCenter.EquipmentSuitTemplateManager:GetTemplate(suitId)
    if suitTemplate and suitTemplate.attrInfos then
        if suitTemplate.attrInfos[index] == nil then
            return false, EquipmentConst.EquipmentMaxLevel, 5, 0
        end
        local equipSuitData = self:GetEquipSuit(carIndex, suitType)
        if equipSuitData == nil then
            return false, EquipmentConst.EquipmentMaxLevel, 5, 0
        end

        local unlockCondition = suitTemplate.attrInfos[index].effectConditionMap
        if unlockCondition == nil or table.count(unlockCondition) == 0 then
            return true, 1, 1, 1
        end
        local keys = table.keys(unlockCondition)
        local lv = keys[1]
        local num = unlockCondition[lv]
        
        local findNum = 0
        for _, v in ipairs(equipSuitData.equips) do
            local equipmentData = self:GetEquipByUuid(v)
            if equipmentData then
                local equipmentTemplate = DataCenter.EquipmentTemplateManager:GetTemplate(equipmentData.equipId)
                if equipmentTemplate and equipmentTemplate:GetSuitId() == suitId and equipmentData.lv >= lv then
                    findNum = findNum + 1
                end
            end
        end
        return findNum >= num, lv, num, findNum
    end
    return false, EquipmentConst.EquipmentMaxLevel, 5, 0
end

local function IsEquipmentCanUpgrade(self, equipmentUid)
    local equipmentData = self:GetEquipByUuid(equipmentUid)
    if equipmentData and not equipmentData:IsReachMaxLv() then
        local equipmentTemplate = DataCenter.EquipmentTemplateManager:GetTemplate(equipmentData.equipId)
        if equipmentTemplate and equipmentTemplate.lvExp ~= equipmentData.exp then
            local needExp = equipmentTemplate.lvExp - equipmentData.exp
            local itemNum = DataCenter.ItemData:GetItemCount(equipmentTemplate.costMaterial)
            local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(equipmentTemplate.costMaterial)
            if itemNum * toInt(itemTemplate.para1) >= needExp then
                return true
            end
        end
    end
    return false
end

local function HasEquipmentCanUpgrade(self, buildingId, isShowBubble)
    local carIndex = self:GetCarIndexByBuildingId(buildingId)
    local k6 = LuaEntry.DataConfig:TryGetNum("car_equip", "k6")
    for _, equipSuitData in pairs(self.allEquipSuit) do
        if equipSuitData.carIndex == carIndex then
            for _, v in ipairs(equipSuitData.equips) do
                local equipmentData = self:GetEquipByUuid(v)
                if equipmentData and not equipmentData:IsReachMaxLv() then
                    local equipmentTemplate = DataCenter.EquipmentTemplateManager:GetTemplate(equipmentData.equipId)
                    if equipmentTemplate and equipmentTemplate.lvExp ~= equipmentData.exp then
                        local needExp = equipmentTemplate.lvExp - equipmentData.exp
                        local itemNum = DataCenter.ItemData:GetItemCount(equipmentTemplate.costMaterial)
                        local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(equipmentTemplate.costMaterial)
                        local will = itemNum * toInt(itemTemplate.para1)
                        if will >= needExp then
                            if not isShowBubble or will > k6 then
                                return true, equipmentTemplate:GetSuitType(), carIndex
                            end
                        end
                    end
                end
            end
        end
    end
    return false, 0, carIndex
end

local function HasEquipmentSlotCanPutOn(self, buildingId)
    local carIndex = self:GetCarIndexByBuildingId(buildingId)
    local suitTypes = EquipmentUtil.GetEquipmentTypeByBuildingId(buildingId)
    local pos = {}
    for k, _ in pairs(suitTypes) do
        for i = EquipmentConst.Position.Equipment_Position_Cannon, EquipmentConst.Position.Equipment_Position_Energy_Core do
            if pos[k] == nil then
                pos[k] = {}
            end
            pos[k][i] = 1
        end
        local suitData = self:GetEquipSuit(carIndex, k)
        if suitData then
            for _, v in ipairs(suitData.equips) do
                local equipmentData = self:GetEquipByUuid(v)
                if equipmentData then
                    local equipmentTemplate = DataCenter.EquipmentTemplateManager:GetTemplate(equipmentData.equipId)
                    if pos[k] then
                        pos[k][equipmentTemplate.position] = nil
                    end
                end
            end
        end
    end
    
    local inUseEquipment = {}
    for _, equipmentSuitData in pairs(self.allEquipSuit) do
        for _, v in ipairs(equipmentSuitData.equips) do
            inUseEquipment[v] = 1
        end
    end
    
    for k, v in pairs(self.allEquip) do
        if inUseEquipment[k] == nil then
            local equipmentTemplate = DataCenter.EquipmentTemplateManager:GetTemplate(v.equipId)
            if equipmentTemplate and pos[equipmentTemplate:GetSuitType()] ~= nil and pos[equipmentTemplate:GetSuitType()][equipmentTemplate.position] ~= nil then
                return true, equipmentTemplate:GetSuitType(), carIndex
            end
        end
    end
    
    return false, 0, carIndex
end

local function GetCarIndexByBuildingId(self, buildingId)
    local result = 0
    if buildingId == BuildingTypes.FUN_BUILD_DEFENCE_CENTER_NEW then
        result = EquipmentConst.FormationType.FormationType_Defence * 100 + 1
    elseif buildingId == BuildingTypes.WORM_HOLE_CROSS then
        result = EquipmentConst.FormationType.FormationType_Cross_Defence * 100 + 1
    else
        local index = DataCenter.BuildManager:GetGarageIndex(buildingId)
        if index ~= nil then
            result = EquipmentConst.FormationType.FormationType_Normal * 100 + index
        end
    end
    return result
end

--通过车的id获取建筑id(不是建筑返回0)
function EquipmentDataManager:GetBuildingIdByCarIndex(carIndex)
    local a, b = math.modf(carIndex / 100)
    if a == EquipmentConst.FormationType.FormationType_Defence then
        return BuildingTypes.FUN_BUILD_DEFENCE_CENTER_NEW
    elseif a == EquipmentConst.FormationType.FormationType_Cross_Defence then
        return BuildingTypes.WORM_HOLE_CROSS
    end
    return 0
end

--通过车的id获取建筑id(不是建筑返回0)
function EquipmentDataManager:IsBuildingEquip(carIndex)
    return self:GetBuildingIdByCarIndex(carIndex) > 0
end

EquipmentDataManager.__init = __init
EquipmentDataManager.__delete = __delete
EquipmentDataManager.GetAllEquip = GetAllEquip
EquipmentDataManager.InitEquip = InitEquip
EquipmentDataManager.UpdateOneEquip = UpdateOneEquip
EquipmentDataManager.UpdateOneEquipSuit = UpdateOneEquipSuit
EquipmentDataManager.GetEquipByUuid = GetEquipByUuid
EquipmentDataManager.GetUsedEquipmentBySuitType = GetUsedEquipmentBySuitType
EquipmentDataManager.GetEquipSuit = GetEquipSuit
EquipmentDataManager.GetEquipSuitKey = GetEquipSuitKey
EquipmentDataManager.EquipmentAddExp = EquipmentAddExp
EquipmentDataManager.EquipmentAddExpHandler = EquipmentAddExpHandler
EquipmentDataManager.EquipmentQualityUp = EquipmentQualityUp
EquipmentDataManager.EquipmentQualityUpHandler = EquipmentQualityUpHandler
EquipmentDataManager.WearCarEquip = WearCarEquip
EquipmentDataManager.WearCarEquipHandler = WearCarEquipHandler
EquipmentDataManager.TakeOffEquip = TakeOffEquip
EquipmentDataManager.TakeOffEquipHandler = TakeOffEquipHandler
EquipmentDataManager.NewCarEquipPushHandler = NewCarEquipPushHandler
EquipmentDataManager.EquipEffectChangePushHandler = EquipEffectChangePushHandler
EquipmentDataManager.GetAllEquipSuit = GetAllEquipSuit
EquipmentDataManager.GetEquipmentByCarIndexAndTypeAndPos = GetEquipmentByCarIndexAndTypeAndPos
EquipmentDataManager.GetEquipmentCarIndex = GetEquipmentCarIndex
EquipmentDataManager.SuitTypeHasRedDot = SuitTypeHasRedDot
EquipmentDataManager.PosHasRedDot = PosHasRedDot
EquipmentDataManager.GetEffectValue = GetEffectValue
EquipmentDataManager.GetLevelExp = GetLevelExp
EquipmentDataManager.IsSuitEffectUnlock = IsSuitEffectUnlock
EquipmentDataManager.HasEquipmentCanUpgrade = HasEquipmentCanUpgrade
EquipmentDataManager.HasEquipmentSlotCanPutOn = HasEquipmentSlotCanPutOn
EquipmentDataManager.IsEquipmentCanUpgrade = IsEquipmentCanUpgrade
EquipmentDataManager.PosHasCanEquipEquipment = PosHasCanEquipEquipment
EquipmentDataManager.GetCarIndexByBuildingId = GetCarIndexByBuildingId

return EquipmentDataManager