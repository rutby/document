---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/24 11:34
---
local QueueDataManager = BaseClass("QueueDataManager");
local Localization  = CS.GameEntry.Localization
local RewardUtil = require "Util.RewardUtil"

local function __init(self)
    self.timer = nil
    self.timer_action = function(temp)
        self:CheckAllQueueTimeFinish()
    end
    self:DataReset()
end

local function __delete(self)
    self:DeleteTimer()
end

function QueueDataManager:DataReset()
    self:DeleteTimer()
    self.queueDic = {}--所有队列信息
    self.timeFinishFlag = {}--队列完成发送信号标志（防止多次发送）
    self.heroFreeTimeDict = {}
    self:AddTimer()
end

local function Startup()
end

local function InitQueueDataList(self,message)
    if message["queue_new"]~=nil then
        self:DataReset()
        table.walk(message["queue_new"],function (k,v)
            self:UpdateQueueData(v)
        end)
    end
end

local function UpdateQueueData(self,message)
    if message ==nil then
        return
    end
    if message["uuid"]==nil then
        return
    end
    local uuid = message["uuid"]
    if self.queueDic[uuid]==nil then
        local queue = QueueInfo.New()
        self.queueDic[uuid] = queue
    end
    self.queueDic[uuid]:ParseData(message)
    local queueData = self:GetQueueByUuid(uuid)
    if queueData~=nil then
        if queueData:GetQueueState() == NewQueueState.Finish then
            if self.heroFreeTimeDict[queueData.uuid] then
                self.heroFreeTimeDict[queueData.uuid] = nil
            end
        end
    end
end

local function ResetQueue(self,uuid,paraState)
    if self.queueDic[uuid]~=nil then
        self.queueDic[uuid]:ResetQueue(paraState)
        self.timeFinishFlag[uuid] = nil
        self.heroFreeTimeDict[uuid] = nil
    end
end

local function GetQueueByUuid(self,uuid)
    return self.queueDic[uuid]
end

local function GetQueueByType(self,qType)
    for k,v in pairs(self.queueDic) do
        if v.type == qType then
            return v
        end
    end
    return nil
end

local function DeleteQueueByUuid(self, uuid)
    self.queueDic[uuid] = nil
    self.timeFinishFlag[uuid] = nil
    self.heroFreeTimeDict[uuid] = nil
end

local function GetQueueByScienceId(self,scienceId)
    for k,v in pairs(self.queueDic) do
        if v.itemId == scienceId then
            return v
        end
    end
    return nil
end

local function GetBuildUuidInFreeQueueByType(self,qType)
    local bUuidList = {}
    for k,v in pairs(self.queueDic) do
        if v.type == qType and v:GetQueueState() == NewQueueState.Free then
            local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(v.funcUuid)
            if buildData ~= nil and buildData.state ~= BuildingStateType.FoldUp then
                table.insert(bUuidList,v.funcUuid)
            end
        end
    end
    
    return bUuidList
end

local function GetBuildUuidInFinishQueueByType(self,qType)
    local bUuidList = {}
    for k,v in pairs(self.queueDic) do
        if v.type == qType and v:GetQueueState() == NewQueueState.Finish then
            local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(v.funcUuid)
            if buildData ~= nil and buildData.state ~= BuildingStateType.FoldUp then
                table.insert(bUuidList,v.funcUuid)
            end
        end
    end
    
    return bUuidList
end

local function GetQueueByBuildUuidForScience(self,bUuid)
    for k,v in pairs(self.queueDic) do
        if v.funcUuid == bUuid and v.type == NewQueueType.Science then
            return v
        end
    end
    return nil
end

local function GetIsQueueFreeForScienceId(self)
    for k,v in pairs(self.queueDic) do
        if v.type == NewQueueType.Science and v:GetQueueState() == NewQueueState.Free then
            return v
        end
    end
    return nil
end

local function ResetAllQueue(self)
    table.walk(self.queueDic,function(k,v)
        v:ResetQueue()
    end)
    self.timeFinishFlag = {}
    self.heroFreeTimeDict = {}
end

local function QueueFinishHandle(self,message,paraState)
    if message["errorCode"] == nil then
        local uuid = message["uuid"]
        if uuid ~= nil then
            local queue = self:GetQueueByUuid(uuid)
            if queue ~= nil then
                local power = 0
                if queue.type == NewQueueType.Hospital then
                    power = DataCenter.HospitalManager:GetPowerInTreating()
                    UIUtil.ShowTipsId(130127) 
                    self:ResetQueue(uuid,paraState)
                    EventManager:GetInstance():Broadcast(EventId.HospitalFinish)
                elseif queue.type == NewQueueType.Science then
                    local scienceId = tonumber(queue.itemId)
                    power = GetTableData(DataCenter.ScienceTemplateManager:GetTableName(), scienceId + 1, "power", 0)
                    local template = DataCenter.ScienceManager:GetScienceTemplate(scienceId)
                    if template ~= nil then
                        --SoundUtil.PlayEffect(SoundAssets.Music_Effect_Science_Finish)
                        UIUtil.ShowTips(Localization:GetString(GameDialogDefine.RESEARCHING_FINISH,Localization:GetString(template.name)))
                    end
                  
                    self:ResetQueue(uuid,paraState)
                    if message["robot"]~=nil then
                        DataCenter.BuildQueueManager:UpdateQueueData(message["robot"])
                    end
                    EventManager:GetInstance():Broadcast(EventId.OnScienceQueueFinish, uuid)
                elseif queue.type == NewQueueType.FootSoldier or queue.type == NewQueueType.CarSoldier or queue.type == NewQueueType.BowSoldier or queue.type == NewQueueType.Trap then
                    local armyId = ""
                    local count = 0
                    local nameDes  = "130058" --训练
                    local tempList = string.split(queue.itemId,";")
                    local prepareType = ArmyTrainType.ArmyTrainType_Normal
                    if tempList ~= nil and tempList[4] ~= nil then
                        nameDes  = "360105" --晋级
                        armyId = tempList[3]
                        count = toInt(tempList[4])
                        power = count * (GetTableData(DataCenter.ArmyTemplateManager:GetTableName(), armyId, "power", 0) -
                                GetTableData(DataCenter.ArmyTemplateManager:GetTableName(), tempList[1], "power", 0))
                    elseif tempList ~= nil and tempList[3] ~= nil then
                        nameDes  = "130058" --训练
                        armyId = tempList[1]
                        count = toInt(tempList[2])
                        if toInt(tempList[3]) == ArmyTrainType.ArmyTrainType_Reserve then
                            prepareType = ArmyTrainType.ArmyTrainType_Reserve
                        end
                        power =  count * GetTableData(DataCenter.ArmyTemplateManager:GetTableName(), armyId, "power", 0)
                    end
                    if queue.type == NewQueueType.FootSoldier then
                        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Train_Soldiers)
                    elseif queue.type == NewQueueType.CarSoldier then
                        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Train_Tank)
                    elseif queue.type == NewQueueType.BowSoldier then
                        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Train_Aircraft)
                    elseif queue.type == NewQueueType.Trap then
                        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Train_Trap)
                    end
                    local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(armyId)
                    if template ~= nil then
                        local str = Localization:GetString(nameDes, Localization:GetString(template.name).." x"..count)
                        local max = 0
                        local total = 0
                        if prepareType == ArmyTrainType.ArmyTrainType_Reserve then
                            max = DataCenter.ArmyManager:GetReserveArmyMax()
                            total = DataCenter.ArmyManager:GetReserveArmyNum() - math.ceil(count)
                        else
                            max = DataCenter.ArmyManager:GetArmyNumMax(template.arm)
                            total = DataCenter.ArmyManager:GetTotalArmyNum(template.arm) - math.ceil(count)
                        end
                        if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UINoticeEquipTips) then
                            TimerManager:GetInstance():DelayInvoke(function()
                                UIManager:GetInstance():OpenWindow(UIWindowNames.UISoliderGetTip, {anim = true}, str, count, total, max, max, template.arm, prepareType)
                            end, 3)
                        else
                            UIManager:GetInstance():OpenWindow(UIWindowNames.UISoliderGetTip, {anim = true}, str, count, total, max, max, template.arm, prepareType)
                        end
                    end
                    self:ResetQueue(uuid,paraState)
                    EventManager:GetInstance():Broadcast(EventId.TrainingArmyFinish,queue.type)
                elseif queue.type == NewQueueType.ProductEquip then
                    self:ResetQueue(uuid,paraState)
                    EventManager:GetInstance():Broadcast(EventId.HeroEquipQueueFinish,queue.type)
                end
                EventManager:GetInstance():Broadcast(EventId.QUEUE_TIME_END, queue.type)
                if power > 0 then
                    GoToUtil.ShowPower({power = power})
                end
            end
        end
        
        
    else
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTips(Localization:GetString(message["errorCode"]))
        end
    end
end

local function QueueFinishBatchHandle(self,message)
    if message["errorCode"] == nil then
        local paraState = message["paraState"]
        local queueUuidList = {}
        if message["queueList"]~=nil then
            table.walk(message["queueList"],function(k,v)
                if v["uuid"]~=nil then
                    table.insert(queueUuidList, v["uuid"])
                end
                self:QueueFinishHandle(v,paraState)
            end)
        end

        if message["extraReward"] then
            local fromPosList = {}
            for i, v in ipairs(queueUuidList) do
                local queue = self:GetQueueByUuid(v)
                local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(queue.funcUuid)
                local worldPos = SceneUtils.TileIndexToWorld(buildData.pointId)
                local fromPos = CS.SceneManager.World:WorldToScreenPoint(worldPos)
                table.insert(fromPosList, fromPos)
            end
            
            local extraRewardList = DataCenter.RewardManager:ReturnRewardParamForMessage(message["extraReward"])
            if extraRewardList and #extraRewardList > 0 then
                for m, pos in ipairs(fromPosList) do
                    for i, v in ipairs(extraRewardList) do
                        local rewardType = v.rewardType
                        local itemId = v.itemId
                        local pic = RewardUtil.GetPic(v.rewardType,itemId)
                        if pic~="" then
                            UIUtil.DoFly(tonumber(rewardType),1,pic,pos,Vector3.New(0,0,0))
                        end
                    end
                end
            end

            for k,v in pairs(message["extraReward"]) do
                DataCenter.RewardManager:AddOneReward(v)
            end
        end
        --local str= ""
        --table.walk(msgDic,function(k,v)
        --    str = str..Localization:GetString(GameDialogDefine.HARVEST,Localization:GetString(k),v).."  "
        --end)
        --if str~="" then
        --    UIUtil.ShowTips(str)--,"",MessageBarType.Get)
        --end
    else
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTips(Localization:GetString(message["errorCode"]))
        end
    end
    EventManager:GetInstance():Broadcast(EventId.GuideWaitMessage)
end
local function QueueCcsMNewHandle(self, message)
    if message["errorCode"] == nil then
        local backRewards = message["backRewards"]
        if backRewards ~= nil then
            for k, v in pairs(backRewards) do
                DataCenter.RewardManager:AddOneReward(v)
            end
            local list = DataCenter.RewardManager:ReturnRewardParamForMessage(backRewards)
            if list ~= nil then
                for k,v in ipairs(list) do
                    if v.rewardType == RewardType.GOODS then
                        UIUtil.ShowTips(Localization:GetString(GameDialogDefine.BACK_REWARD_TIP_WITH, 
                                DataCenter.RewardManager:GetNameByType(v.rewardType, v.itemId), 
                                string.GetFormattedSeperatorNum(v.count)))
                        break
                    end
                end
            end
        end
        
        if message["queue"] ~= nil then
            local queueType = nil
            local dic = message["queue"]
            if dic ~= nil and dic["type"] ~= nil then
                queueType = dic["type"]
            end
            local arrays = dic["itemCostArr"]
            if arrays ~= nil then
                for k,v in pairs(arrays) do
                    DataCenter.ItemData:UpdateOneItem(v)
                end
            end

            if dic["remainGold"] ~= nil then
                LuaEntry.Player.gold = dic["remainGold"]
                EventManager:GetInstance():Broadcast(EventId.UpdateGold)
            end
            local uuid = dic["uuid"]
            local queue = self:GetQueueByUuid(uuid)
            if queue ~= nil then
                if queue:GetQueueState() == NewQueueState.Work then
                    if dic["uT"] == nil and dic["updateTime"] == nil then
                        --完成
                        local power = 0
                        if queueType == NewQueueType.Hospital then
                            power = DataCenter.HospitalManager:GetPowerInTreating()
                            UIUtil.ShowTipsId(130127)
                        elseif queueType == NewQueueType.Science then
                            local scienceId = tonumber(queue.itemId)
                            power = GetTableData(DataCenter.ScienceTemplateManager:GetTableName(), scienceId + 1, "power", 0)
                            local template = DataCenter.ScienceManager:GetScienceTemplate(scienceId)
                            if template ~= nil then
                                --SoundUtil.PlayEffect(SoundAssets.Music_Effect_Science_Finish)
                                UIUtil.ShowTips(Localization:GetString(GameDialogDefine.RESEARCHING_FINISH,Localization:GetString(template.name)))
                            end
                        elseif queueType == NewQueueType.ProductEquip then
                            local equipId = tonumber(queue.itemId)
                            DataCenter.HeroEquipManager:ShowEquipReward(equipId)
                        elseif queue.type == NewQueueType.FootSoldier or queue.type == NewQueueType.CarSoldier or queue.type == NewQueueType.BowSoldier or queue.type == NewQueueType.Trap then
                            local armyId = ""
                            local count = 0
                            local nameDes  = "130058" --训练
                            local tempList = string.split(queue.itemId,";")
                            local prepareType = ArmyTrainType.ArmyTrainType_Normal
                            if tempList ~= nil and tempList[4] ~= nil then
                                nameDes  = "360105" --晋级
                                armyId = tempList[3]
                                count = toInt(tempList[4])
                                power = count * (GetTableData(DataCenter.ArmyTemplateManager:GetTableName(), armyId, "power", 0) -
                                        GetTableData(DataCenter.ArmyTemplateManager:GetTableName(), tempList[1], "power", 0))
                            elseif tempList ~= nil and tempList[3] ~= nil then
                                nameDes  = "130058" --训练
                                armyId = tempList[1]
                                count = toInt(tempList[2])
                                if toInt(tempList[3]) == ArmyTrainType.ArmyTrainType_Reserve then
                                    prepareType = ArmyTrainType.ArmyTrainType_Reserve
                                end
                                power =  count * GetTableData(DataCenter.ArmyTemplateManager:GetTableName(), armyId, "power", 0)
                            end
                            if queue.type == NewQueueType.FootSoldier then
                                SoundUtil.PlayEffect(SoundAssets.Music_Effect_Train_Soldiers)
                            elseif queue.type == NewQueueType.CarSoldier then
                                SoundUtil.PlayEffect(SoundAssets.Music_Effect_Train_Tank)
                            elseif queue.type == NewQueueType.BowSoldier then
                                SoundUtil.PlayEffect(SoundAssets.Music_Effect_Train_Aircraft)
                            elseif queue.type == NewQueueType.Trap then
                                SoundUtil.PlayEffect(SoundAssets.Music_Effect_Train_Trap)
                            end
                            local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(armyId)
                            if template ~= nil then
                                local str = Localization:GetString(nameDes, Localization:GetString(template.name).." x"..count)
                                local max = 0
                                local total = 0
                                if prepareType == ArmyTrainType.ArmyTrainType_Reserve then
                                    max = DataCenter.ArmyManager:GetReserveArmyMax()
                                    total = DataCenter.ArmyManager:GetReserveArmyNum() - math.ceil(count)
                                else
                                    max = DataCenter.ArmyManager:GetArmyNumMax(template.arm)
                                    total = DataCenter.ArmyManager:GetTotalArmyNum(template.arm) - math.ceil(count)
                                end
                                if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UINoticeEquipTips) then
                                    TimerManager:GetInstance():DelayInvoke(function()
                                        UIManager:GetInstance():OpenWindow(UIWindowNames.UISoliderGetTip, {anim = true}, str, count, total, max, max, template.arm, prepareType)
                                    end, 3)
                                else
                                    UIManager:GetInstance():OpenWindow(UIWindowNames.UISoliderGetTip, {anim = true}, str, count, total, max, max, template.arm, prepareType)
                                end
                            end
                        end
                        if power > 0 then
                            GoToUtil.ShowPower({power = power})
                        end
                    end
                end
            end
            
            DataCenter.QueueDataManager:UpdateQueueData(dic)
            EventManager:GetInstance():Broadcast(EventId.AddSpeedSuccess,queueType)
        end
    else
        local temp = message["errorCode"]
        if temp ~= SeverErrorCode then
            if temp == "E100173" then
                UIUtil.ShowTipsId(170008)
            else
                UIUtil.ShowTips(Localization:GetString(message["errorCode"]))
            end
        end
        
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action, self, false,false,false)
    end

    self.timer:Start()
end

--检测完成的队列
local function CheckAllQueueTimeFinish(self)
    for k,v in pairs(self.queueDic) do
        if self.timeFinishFlag[k] == nil then
            if self:IsQueueTimeFinish(v) then
                self.timeFinishFlag[k] = true
                local queueType = v.type
                if queueType == NewQueueType.Science then
                    if self.heroFreeTimeDict[k] then
                        self.heroFreeTimeDict[k] = nil
                    end
                end
                EventManager:GetInstance():Broadcast(EventId.QUEUE_TIME_END,v.type)
            elseif v.type == NewQueueType.Science then
                if self.heroFreeTimeDict[k] == nil or not self.heroFreeTimeDict[k][2] then
                    local bUuid = tonumber(v.funcUuid)
                    if bUuid~=nil then
                        if v.endTime ~= 0 then
                            local freeTime = DataCenter.HeroDataManager:GetFreeAddTimeHero(EffectDefine.RESEARCH_TIME_REDUCE)
                            local effectTime = LuaEntry.Effect:GetGameEffect(EffectDefine.RESEARCH_TIME_REDUCE)
                            if freeTime or effectTime > 0 then
                                local curTime = UITimeManager:GetInstance():GetServerTime()
                                --local time = LuaEntry.Effect:GetGameEffect(EffectDefine.RESEARCH_TIME_REDUCE)
                                if v.endTime > 0 and v.endTime ~= LongMaxValue and v.endTime - curTime <= effectTime*1000 then
                                    self.heroFreeTimeDict[k] = {}
                                    self.heroFreeTimeDict[k][1] = bUuid
                                    self.heroFreeTimeDict[k][2] = false
                                    self.heroFreeTimeDict[k][4] = k
                                    EventManager:GetInstance():Broadcast(EventId.QueueHeroFreeTime,{uuid = bUuid,type = 2})
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

--队列是否是时间走完，没有收取
local function IsQueueTimeFinish(self,queue)
    
    return queue ~= nil and queue:GetQueueState() == NewQueueState.Finish 
end

local function AllianceHelpAddSpeed(self,uuid,endTime,startT)
    if self.queueDic[uuid]~=nil then
        if startT then
            self.queueDic[uuid].startTime = startT
        end
        self.queueDic[uuid].endTime = endTime
    end
end

local function OnAllianceCallHelp(self,uuid)
    if self.queueDic[uuid]~=nil then
        self.queueDic[uuid].isHelped = 1
    end
end

local function GetAllQueue(self)
    return self.queueDic
end

local function FreeSpeedQueueHandle(self,message)
    if message["errorCode"] == nil then
        if message["queueArr"] ~= nil then
            for k,v in pairs(message["queueArr"]) do
                self:UpdateQueueData(v)
                local queueType = v["type"]
                EventManager:GetInstance():Broadcast(EventId.AddSpeedSuccess,queueType)
            end
        end
    else
        UIUtil.ShowTips(Localization:GetString(message["errorCode"]))
    end
end

--通过队列类型获取所有的队列数据
local function GetAllQueueByType(self,qType)
    local result = {}
    for k,v in pairs(self.queueDic) do
        if v.type == qType then
            table.insert(result,v)
        end
    end
    
    return result
end

local function SetFinishFlag(self,uuid,value)
    self.timeFinishFlag[uuid] = value
end

local function SetCanUseHeroFreeTime(self,uuid)
    for i, v in pairs(self.heroFreeTimeDict) do
        if v[1] == uuid then
            v[2] = true
        end
    end
end
local function GetCanUseHeroFreeTime(self,uuid)
    for i, v in pairs(self.heroFreeTimeDict) do
        if v[1] == uuid then
           return v
        end
    end
    return nil
end

QueueDataManager.__init = __init
QueueDataManager.__delete = __delete
QueueDataManager.Startup = Startup
QueueDataManager.InitQueueDataList = InitQueueDataList
QueueDataManager.UpdateQueueData = UpdateQueueData
QueueDataManager.ResetQueue = ResetQueue
QueueDataManager.GetQueueByUuid = GetQueueByUuid
QueueDataManager.GetQueueByType = GetQueueByType
QueueDataManager.DeleteQueueByUuid = DeleteQueueByUuid
QueueDataManager.ResetAllQueue = ResetAllQueue
QueueDataManager.QueueFinishHandle = QueueFinishHandle
QueueDataManager.QueueCcsMNewHandle = QueueCcsMNewHandle
QueueDataManager.DeleteTimer = DeleteTimer
QueueDataManager.AddTimer = AddTimer
QueueDataManager.CheckAllQueueTimeFinish = CheckAllQueueTimeFinish
QueueDataManager.IsQueueTimeFinish = IsQueueTimeFinish
QueueDataManager.AllianceHelpAddSpeed = AllianceHelpAddSpeed
QueueDataManager.OnAllianceCallHelp =OnAllianceCallHelp
QueueDataManager.QueueFinishBatchHandle =QueueFinishBatchHandle
QueueDataManager.GetBuildUuidInFreeQueueByType = GetBuildUuidInFreeQueueByType
QueueDataManager.GetBuildUuidInFinishQueueByType = GetBuildUuidInFinishQueueByType
QueueDataManager.GetAllQueue = GetAllQueue
QueueDataManager.FreeSpeedQueueHandle = FreeSpeedQueueHandle
QueueDataManager.GetAllQueueByType = GetAllQueueByType
QueueDataManager.GetQueueByBuildUuidForScience = GetQueueByBuildUuidForScience 
QueueDataManager.GetQueueByScienceId = GetQueueByScienceId
QueueDataManager.GetIsQueueFreeForScienceId = GetIsQueueFreeForScienceId
QueueDataManager.SetFinishFlag = SetFinishFlag
QueueDataManager.SetCanUseHeroFreeTime = SetCanUseHeroFreeTime
QueueDataManager.GetCanUseHeroFreeTime = GetCanUseHeroFreeTime

return QueueDataManager