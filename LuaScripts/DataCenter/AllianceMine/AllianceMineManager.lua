---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/12/8 16:03
---AllianceMineManager.lua

local AllianceMineManager = BaseClass("AllianceMineManager");
local AllianceMineData = require "DataCenter.AllianceMine.AllianceMineData"
local AllianceMineTemplate = require "DataCenter.AllianceMine.AllianceMineTemplate"
local WorldMarchData = require "DataCenter.WorldMarchDataManager.WorldMarchData"
local Localization = CS.GameEntry.Localization

local function __init(self)
    self.alMineTemplateDic = {}--id:template
    self.allianceMineInfoDic = {}
    self.allianceActMineInfo = nil
    self.allianceCenterDic = {}
    self.allianceCenterUuidToId = {}
    self.allianceFrontDic = {}
    self.allianceFrontUuidToId = {}
    self.marchInfo = {}
    self.selfPoint = 0
    self.allianceFlagPlaceTime = 0
    self.allianceFlagDestroyStartTime = 0
    self.allianceFrontDestroyStartTime = {}
    self.actMineRes = 0
    self.allianceActMemberNum = 0
    self:InitTemplates()
end

local function __delete(self)
    self.alMineTemplateDic = {}
    self.allianceMineInfoDic ={}
    self.allianceActMineInfo = nil
    self.allianceCenterDic = {}
    self.allianceCenterUuidToId = {}
    self.allianceFrontDic = {}
    self.allianceFrontUuidToId = {}
    self.marchInfo = {}
    self.selfPoint = 0
    self.allianceFlagPlaceTime = 0
    self.allianceFlagDestroyStartTime = 0
    self.allianceFrontDestroyStartTime = {}
end

local function InitTemplates(self)
    self.alMineTemplateDic = {}
    LocalController:instance():visitTable(TableName.AllianceMine, function(id, line)
        local level = id % BuildLevelCap
        if level == 0 then
            local template = AllianceMineTemplate.New()
            template:InitData(line)
            self.alMineTemplateDic[template.id] = template
        end
    end)
end

local function RequestAllianceMineInfo(self, needDetail)
    SFSNetwork.SendMessage(MsgDefines.GetAllAllianceMineList, needDetail)
    
end

local function UpdateAllianceMineInfo(self, msg)
    self.allianceFlag = nil
    self.allianceCenterUuidToId = {}
    self.allianceFrontDic = {}
    self.allianceFrontUuidToId = {}
    if msg["alBuildings"] then
        self.allianceCenterDic = {}
        self.allianceMineInfoDic = {}
        self.allianceActMineInfo = nil
        for i, v in ipairs(msg["alBuildings"]) do
            local newInfo = AllianceMineData.New()
            newInfo:ParseData(v)
            local buildId = newInfo.buildId
            if buildId == BuildingTypes.ALLIANCE_FLAG_BUILD then
                self.allianceFlag = newInfo
                EventManager:GetInstance():Broadcast(EventId.AllianceFlagUpdate)
            elseif WorldAllianceBuildUtil.IsAllianceCenterGroup(buildId) then
                self.allianceCenterUuidToId[newInfo.uuid] = newInfo.buildId
                self.allianceCenterDic[newInfo.buildId] = newInfo
            elseif WorldAllianceBuildUtil.IsAllianceFrontGroup(buildId) then
                self.allianceFrontUuidToId[newInfo.uuid] = newInfo.buildId
                self.allianceFrontDic[newInfo.buildId] = newInfo
            elseif WorldAllianceBuildUtil.IsAllianceMineGroup(buildId) ==true then
                self.allianceMineInfoDic[newInfo.uuid] = newInfo
            elseif WorldAllianceBuildUtil.IsAllianceActMineGroup(buildId) == true then
                self.allianceActMineInfo = newInfo
            end
            
        end
    end
    if msg["build_alliance_building_point"] then
        self.selfPoint = msg["build_alliance_building_point"]
    end
    EventManager:GetInstance():Broadcast(EventId.AllianceCenterUpdate)
    EventManager:GetInstance():Broadcast(EventId.AllianceFrontUpdate)
    EventManager:GetInstance():Broadcast(EventId.AllianceActMineUpdate)
    EventManager:GetInstance():Broadcast(EventId.UpateAllAllianceMineList)
    EventManager:GetInstance():Broadcast(EventId.UpdateMainAllianceRedCount)
end

local function AddOneAllianceMineInfo(self, msg)
    if msg then
        local newInfo = AllianceMineData.New()
        newInfo:ParseData(msg)
        local buildId = newInfo.buildId
        if buildId == BuildingTypes.ALLIANCE_FLAG_BUILD then
            self.allianceFlag = newInfo
            EventManager:GetInstance():Broadcast(EventId.AllianceFlagUpdate)
        elseif WorldAllianceBuildUtil.IsAllianceCenterGroup(buildId) then
            self.allianceCenterUuidToId[newInfo.uuid] = newInfo.buildId
            self.allianceCenterDic[newInfo.buildId] = newInfo
            EventManager:GetInstance():Broadcast(EventId.OnUpdateOneAllianceCenter,newInfo.uuid)
        elseif WorldAllianceBuildUtil.IsAllianceFrontGroup(buildId) then
            self.allianceFrontUuidToId[newInfo.uuid] = newInfo.buildId
            self.allianceFrontDic[newInfo.buildId] = newInfo
            EventManager:GetInstance():Broadcast(EventId.OnUpdateOneAllianceFront,newInfo.uuid)
        elseif WorldAllianceBuildUtil.IsAllianceMineGroup(buildId) ==true then
            self.allianceMineInfoDic[newInfo.uuid] = newInfo
            EventManager:GetInstance():Broadcast(EventId.OnAddOneAllianceMine, newInfo.uuid)
        elseif WorldAllianceBuildUtil.IsAllianceActMineGroup(buildId) == true then
            self.allianceActMineInfo = newInfo
            EventManager:GetInstance():Broadcast(EventId.AllianceActMineUpdate)
        end
        EventManager:GetInstance():Broadcast(EventId.UpdateMainAllianceRedCount)
    end
end

local function UpdateMinInfo(self,data)
    if data~=nil then
        if data.buildId == BuildingTypes.ALLIANCE_FLAG_BUILD then
            self.allianceFlag = data
            EventManager:GetInstance():Broadcast(EventId.AllianceFlagUpdate)
        elseif WorldAllianceBuildUtil.IsAllianceFrontGroup(data.buildId) then
            self.allianceFrontUuidToId[data.uuid] = data.buildId
            self.allianceFrontDic[data.buildId] = data
        elseif WorldAllianceBuildUtil.IsAllianceCenterGroup(data.buildId) then
            self.allianceCenterUuidToId[data.uuid] = data.buildId
            self.allianceCenterDic[data.buildId] = data
        elseif WorldAllianceBuildUtil.IsAllianceMineGroup(data.buildId) ==true then
            self.allianceMineInfoDic[data.uuid] = data
        elseif WorldAllianceBuildUtil.IsAllianceActMineGroup(data.buildId) == true then
            self.allianceActMineInfo = data
        end
        
    end
end

local function DelOneAllianceMineInfo(self, msg)
    if msg and msg["uuid"] then
        local tempUuid = msg["uuid"]
        local buildId = nil
        if self.allianceFlag~=nil and self.allianceFlag.uuid == tempUuid then
            self.allianceFlag = nil
            EventManager:GetInstance():Broadcast(EventId.AllianceFlagUpdate)
        elseif self.allianceCenterUuidToId[tempUuid]~=nil then
            buildId = self.allianceCenterUuidToId[tempUuid]
            self.allianceCenterDic[buildId] = nil
            EventManager:GetInstance():Broadcast(EventId.OnDeleteOneAllianceCenter,tempUuid)
        elseif self.allianceFrontUuidToId[tempUuid]~=nil then
            buildId = self.allianceFrontUuidToId[tempUuid]
            self.allianceFrontDic[buildId] = nil
            EventManager:GetInstance():Broadcast(EventId.OnDeleteOneAllianceFront,tempUuid)
        elseif self.allianceActMineInfo~=nil and self.allianceActMineInfo.uuid == tempUuid then
            self.allianceActMineInfo = nil
        else
            self.allianceMineInfoDic[tempUuid] = nil
            EventManager:GetInstance():Broadcast(EventId.OnDelOneAllianceMine, tempUuid)
        end
        if buildId ~= nil then
            local template = self:GetAllianceMineTemplate(buildId)
            UIUtil.ShowTips(Localization:GetString("110590", Localization:GetString(template.name)))
        end
        EventManager:GetInstance():Broadcast(EventId.UpdateMainAllianceRedCount)
    end
end

local function RequestAlMineMarchList(self, uuid)
    SFSNetwork.SendMessage(MsgDefines.GetAllMarchesOfAlMine, uuid)
end
--矿点部队信息
local function UpdateAlMineMarchList(self, t)
    --t.marchInfo--arr
    self.marchInfo = {}
    if t["marchInfo"] ~= nil then
        local marchInfo = t["marchInfo"]
        for i = 1, table.count(marchInfo) do
            local march = WorldMarchData.New()
            march:UpdateWorldMarch(marchInfo[i])
            table.insert(self.marchInfo,march)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.WorldPointDetail)
    EventManager:GetInstance():Broadcast(EventId.OnRefreshAllianceMineMarch)
end
local function GetMarchInfo(self)
    return self.marchInfo
end
local function UpdateAlMineScoreChange(self, t)
    --t.point--玩家积分
    --t.accPoint--玩家积分
    --t.Alliancepoint--联盟积分
    if t["build_alliance_building_point"] then
        self.selfPoint = t["build_alliance_building_point"]
    end
end
local function GetPoint(self)
    return self.selfPoint
end
local function GetAlMineBuildList(self)
    local myList = {}
    local cacheDic = {}
    local value = table.values(self.alMineTemplateDic)
    table.sort(value,function(a,b)
        return a.id<b.id
    end)
    for i = 1,#value do
        local v = value[i]
        if WorldAllianceBuildUtil.IsAllianceMineGroup(v.id) ==true then
            local tempInfo = self:GetMineInfoById(v.id)
            if tempInfo then
                table.insert(myList, v)
            end

            if not cacheDic[v.collectTypeK] then
                if v.level == 1 then
                    cacheDic[v.collectTypeK] = v
                end
            else
                if self:CheckIfConditionFits(v) then
                    if cacheDic[v.collectTypeK].level < v.level then
                        cacheDic[v.collectTypeK] = v
                    end
                end
            end
        end
    end

    for i, v in pairs(myList) do
        cacheDic[v.collectTypeK] = v
    end
    local list = table.values(cacheDic)
    table.sort(list,function(a,b)
        local aInfo = self:GetMineInfoById()
        local bInfo = self:GetMineInfoById()
        if aInfo~=nil and bInfo ==nil then
            return true
        end
        if aInfo ==nil and bInfo ~=nil then
            return false
        end
        return a.id<b.id
    end)
    return list
end

local function GetAlCenterBuildList(self)
    local cacheDic = {}
    for i, v in pairs(self.alMineTemplateDic) do
        if WorldAllianceBuildUtil.IsAllianceCenterGroup(v.id) ==true then
            cacheDic[v.id] = v
        end
    end
    local list = table.values(cacheDic)
    table.sort(list,function(a,b)
        return a.id<b.id
    end)
    return list
end

local function GetAlFrontBuildList(self)
    local cacheDic = {}
    for i, v in pairs(self.alMineTemplateDic) do
        if WorldAllianceBuildUtil.IsAllianceFrontGroup(v.id) ==true then
            cacheDic[v.id] = v
        end
    end
    local list = table.values(cacheDic)
    table.sort(list,function(a,b)
        return a.id<b.id
    end)
    return list
end

local function GetShowRedDotNum(self)
    local canShowRedDot = false
    if DataCenter.AllianceBaseDataManager:IsR4orR5() and LuaEntry.DataConfig:CheckSwitch("alliance_res_build") == true and table.count(self.allianceMineInfoDic)<=0 then
        for i, v in pairs(self.alMineTemplateDic) do
            if WorldAllianceBuildUtil.IsAllianceMineGroup(v.id) ==true then
                if canShowRedDot ==false and self:CheckIfConditionFits(v) then
                    local tempInfo = self:GetMineInfoById(v.id)
                    if tempInfo ==nil then
                        canShowRedDot = true
                    end
                end
            end
        end
    end
    return canShowRedDot
end
local function GetShowAllianceCityRedDotNum(self)
    local canShowRedDot = false
    if DataCenter.AllianceBaseDataManager:IsR4orR5() and SeasonUtil.IsInSeasonDesertMode() then
        for i, v in pairs(self.alMineTemplateDic) do
            if WorldAllianceBuildUtil.IsAllianceCenterGroup(v.id) ==true then
                if canShowRedDot ==false and self:CheckIfConditionFits(v) then
                    local tempInfo = self:GetAllianceCenterDataByBuildId(v.id)
                    if tempInfo ==nil then
                        canShowRedDot = true
                    end
                end
            end
        end
    end
    return canShowRedDot
end
local function GetAllianceMineInfoByUuid(self, uuid)
    return self.allianceMineInfoDic[uuid]
end
local function GetAllianceMineRestSoldierNum(self,uuid)
    local restNum = 0
    local data = self.allianceMineInfoDic[uuid]
    if data~=nil then
        restNum = data.soldierMax-data.soldierNum
    end
    return restNum
end
local function GetMineInfoById(self, mineId)
    for i, v in pairs(self.allianceMineInfoDic) do
        if v.buildId == mineId then
            return v
        end
    end
    return nil
end

local function GetAllianceCenterDataByBuildId(self,buildId)
    return self.allianceCenterDic[buildId]
end

local function GetAllianceFrontDataByBuildId(self,buildId)
    return self.allianceFrontDic[buildId]
end

local function CheckIfHasAllianceCenter(self)
    return table.count(self.allianceCenterDic)
end
local function GetMyAlMines(self)
    return self.allianceMineInfoDic
end
local function CheckIfConditionFits(self, mineTemplate, condType)
    if condType then
        local tempFit = false
        if condType == AlMineConditionType.PreBuild then
            local preBuild = mineTemplate.conditions[condType]
            if preBuild~=nil and preBuild>0 then
                local build = self:GetAllianceCenterDataByBuildId(preBuild)
                if build~=nil then
                    tempFit = true
                end
            else
                tempFit = true
            end
        else
            local temp = self:GetConditionValue(condType)
            local limit = mineTemplate.conditions[condType]
            tempFit = temp >= limit
        end
        
        return tempFit
    else
        local allFit = true
        local retDic = {}
        for i, v in pairs(AlMineConditionType) do
            local tempFit = false
            if v == AlMineConditionType.PreBuild then
                local preBuild = mineTemplate.conditions[v]
                if preBuild~=nil and preBuild>0 then
                    local build = self:GetAllianceCenterDataByBuildId(preBuild)
                    if build~=nil then
                        tempFit = true
                    end
                else
                    tempFit = true
                end
            else
                local temp = self:GetConditionValue(v)
                local limit = mineTemplate.conditions[v]
                tempFit = temp >= limit
            end
            if not tempFit then
                allFit = false
            end
            retDic[v] = tempFit
        end
        return allFit, retDic
    end
end

local function CheckAllianceResIsEnough(self,mineTemplate)
    
end
local function GetConditionValue(self, condType)
    if condType == AlMineConditionType.MemberCount then
        local allianceInfo = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
        if allianceInfo then
            return tonumber(allianceInfo.curMember)
        else
            return 0
        end
    elseif condType == AlMineConditionType.RuinLv then
        local ownMaxLv = 0
        local myAlCities = DataCenter.WorldAllianceCityDataManager:GetCitiesByAlId(LuaEntry.Player.allianceId)
        if myAlCities~=nil then
            for i, v in pairs(myAlCities) do
                local config =  DataCenter.AllianceCityTemplateManager:GetTemplate(v)
                if config.level > ownMaxLv then
                    ownMaxLv = config.level
                end
            end
        end
        return tonumber(ownMaxLv)
    elseif condType == AlMineConditionType.Power then
        local allianceInfo = DataCenter.AllianceBaseDataManager:GetAllianceBaseData()
        if allianceInfo then
            return tonumber(allianceInfo.fightPower)
        else
            return nil
        end
    end
end
local function GetConditionDesc(self, template, condType)
    local limit = template.conditions[condType]
    if condType == AlMineConditionType.Power then
        if limit>0 then
            return Localization:GetString("300771", string.GetFormattedStr(limit))
        end

    elseif condType == AlMineConditionType.MemberCount then
        if limit>0 then
            return Localization:GetString("300763", limit)
        end

    elseif condType == AlMineConditionType.RuinLv then
        if limit>0 then
            return Localization:GetString("300764", limit)
        end
    elseif condType == AlMineConditionType.PreBuild then
        if limit>0 then
            local temp = self:GetAllianceMineTemplate(limit)
            if temp~=nil then
                local name = Localization:GetString(temp.name)
                return Localization:GetString("300744",name)
            end
        end
    end
    return ""
end
local function GetAllianceMineSlotCountForConstruct(self,uuid)
    local mineData = self.allianceMineInfoDic[uuid]
    local retMax = 0
    if mineData~=nil then
        retMax = mineData.soldierMax - mineData.soldierNum
    end
    return retMax
    
end
local function CheckIfHasMarch(self, pointId)
    local pointInfo = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if pointInfo then
        local selfMarchList = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
        for i, march in ipairs(selfMarchList) do
            if (march:GetMarchTargetType() == MarchTargetType.COLLECT_ALLIANCE_BUILD_RESOURCE or march:GetMarchTargetType()  == MarchTargetType.BUILD_ALLIANCE_BUILDING or march:GetMarchTargetType() == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE)
                    and march.targetUuid == pointInfo.uuid and (march:GetMarchStatus() == MarchStatus.COLLECTING or march:GetMarchStatus() == MarchStatus.BUILD_ALLIANCE_BUILDING or march:GetMarchStatus() == MarchStatus.COLLECTING_ASSISTANCE) then
                return true, march
            end
        end
    end
    return false
end


local function GetAllianceMineTemplate(self, templateId)
    return self.alMineTemplateDic[templateId]
end

local function GetAllianceFlagData(self)
    return self.allianceFlag
end

local function GetAllianceActMineInfo(self)
    return self.allianceActMineInfo
end
local function GetAllianceFlagPlaceTime(self)
    local count = self.allianceFlagPlaceTime
    if self.allianceFlag~=nil then
        count = count+1
    end
    return count
end

local function GetAllianceFlagDestroyTime(self)
    return self.allianceFlagDestroyStartTime
end

local function RefreshAllianceFlagTime(self,message)
    if message["placeTime"]~=nil then
        self.allianceFlagPlaceTime = message["placeTime"]
    end
    if message["destroyTime"]~=nil then
        self.allianceFlagDestroyStartTime = message["destroyTime"]
    end
    EventManager:GetInstance():Broadcast(EventId.AllianceFlagUpdate)
end

local function RefreshAllianceFrontTime(self,message)
    self.allianceFrontDestroyStartTime= {}
    if message["timeArr"]~=nil then
        local arr = message["timeArr"]
        for k,v in pairs(arr) do
            local buildId = v["buildId"]
            local destroyTime = v["destroyTime"]
            if buildId~=nil and destroyTime~=nil and destroyTime>0 then
                self.allianceFrontDestroyStartTime[buildId] = destroyTime
            end
        end
    end
    EventManager:GetInstance():Broadcast(EventId.AllianceFrontUpdate)
end

local function GetAllianceFrontDestroyStartTime(self,buildId)
    return self.allianceFrontDestroyStartTime[buildId]
end

local function IsPointInAllianceCenterRange(self,pointId,allianceCenterId)
    if pointId == nil or pointId<=0 then
        return false
    end
    local allianceCenterData = DataCenter.AllianceMineManager:GetAllianceCenterDataByBuildId(allianceCenterId)
    if allianceCenterData~=nil then
        local template = DataCenter.AllianceMineManager:GetAllianceMineTemplate(allianceCenterData.buildId)
        if template~=nil then
            local size = template.offter_range
            local posV2 = allianceCenterData.posV2
            local targetV2 = SceneUtils.IndexToTilePos(pointId,ForceChangeScene.World)
            local distanceX = math.abs(posV2.x - targetV2.x)
            local distanceY = math.abs(posV2.y - targetV2.y)
            if distanceX<=size and distanceY<=size then
                return true
            end
        end
    end
    return false
end

local function SetActMineResNum(self,message)
    if message["res"]~=nil then
        self.actMineRes = message["res"]
    end
end

local function SetAllianceActMember(self,message)
    if message["member"]~=nil then
        self.allianceActMemberNum = message["member"]
    end
end

local function GetAllianceActMember(self)
    return self.allianceActMemberNum
end
local function GetActMineResNum(self)
    return self.actMineRes
end
AllianceMineManager.__init = __init
AllianceMineManager.__delete = __delete
AllianceMineManager.GetAlFrontBuildList =GetAlFrontBuildList
AllianceMineManager.InitTemplates = InitTemplates
AllianceMineManager.RequestAllianceMineInfo = RequestAllianceMineInfo
AllianceMineManager.UpdateAllianceMineInfo = UpdateAllianceMineInfo
AllianceMineManager.AddOneAllianceMineInfo = AddOneAllianceMineInfo
AllianceMineManager.DelOneAllianceMineInfo = DelOneAllianceMineInfo
AllianceMineManager.RequestAlMineMarchList = RequestAlMineMarchList
AllianceMineManager.UpdateAlMineMarchList = UpdateAlMineMarchList
AllianceMineManager.GetMarchInfo = GetMarchInfo
AllianceMineManager.GetPoint = GetPoint
AllianceMineManager.UpdateAlMineScoreChange = UpdateAlMineScoreChange
AllianceMineManager.GetAlMineBuildList = GetAlMineBuildList
AllianceMineManager.GetMineInfoById = GetMineInfoById
AllianceMineManager.GetAllianceMineInfoByUuid = GetAllianceMineInfoByUuid
AllianceMineManager.CheckIfConditionFits = CheckIfConditionFits
AllianceMineManager.GetMyAlMines = GetMyAlMines
AllianceMineManager.GetConditionValue = GetConditionValue
AllianceMineManager.GetConditionDesc = GetConditionDesc
AllianceMineManager.GetAllianceMineTemplate = GetAllianceMineTemplate
AllianceMineManager.GetAllianceMineSlotCountForConstruct = GetAllianceMineSlotCountForConstruct
AllianceMineManager.CheckIfHasMarch = CheckIfHasMarch
AllianceMineManager.UpdateMinInfo = UpdateMinInfo
AllianceMineManager.GetAllianceMineRestSoldierNum = GetAllianceMineRestSoldierNum
AllianceMineManager.GetShowRedDotNum = GetShowRedDotNum
AllianceMineManager.RefreshAllianceFlagTime = RefreshAllianceFlagTime
AllianceMineManager.GetAllianceFlagDestroyTime = GetAllianceFlagDestroyTime
AllianceMineManager.GetAllianceFlagPlaceTime = GetAllianceFlagPlaceTime
AllianceMineManager.GetAllianceFlagData = GetAllianceFlagData
AllianceMineManager.GetAllianceCenterDataByBuildId = GetAllianceCenterDataByBuildId
AllianceMineManager.IsPointInAllianceCenterRange = IsPointInAllianceCenterRange
AllianceMineManager.GetAlCenterBuildList = GetAlCenterBuildList
AllianceMineManager.GetShowAllianceCityRedDotNum = GetShowAllianceCityRedDotNum
AllianceMineManager.GetAllianceFrontDataByBuildId = GetAllianceFrontDataByBuildId
AllianceMineManager.RefreshAllianceFrontTime = RefreshAllianceFrontTime
AllianceMineManager.GetAllianceFrontDestroyStartTime = GetAllianceFrontDestroyStartTime
AllianceMineManager.CheckIfHasAllianceCenter = CheckIfHasAllianceCenter
AllianceMineManager.GetAllianceActMineInfo =GetAllianceActMineInfo
AllianceMineManager.SetActMineResNum = SetActMineResNum
AllianceMineManager.SetAllianceActMember = SetAllianceActMember
AllianceMineManager.GetAllianceActMember = GetAllianceActMember
AllianceMineManager.GetActMineResNum =GetActMineResNum
return AllianceMineManager
