---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/6 15:53
---

-- Opinion System: 民意系统
local OpinionManager = BaseClass("OpinionManager")
local OpinionData = require "DataCenter.Opinion.OpinionData"
local Localization = CS.GameEntry.Localization

local function __init(self)
    self.data = OpinionData.New()
    self.history = { records = {}, rewardArr = {}, }
    self.chooseReward = {}
    
    self:AddListeners()
end

local function __delete(self)
    self:RemoveListeners()
end

local function AddListeners(self)
end

local function RemoveListeners(self)
end

local function Startup(self)
    self:SendGetInfo()
end

local function GetData(self)
    return self.data
end

local function GetHistory(self)
    return self.history
end

local function SortMails(self)
    table.sort(self.data.mails, function(mailA, mailB)
        if mailA.choose == 0 and mailB.choose ~= 0 then
            return true
        elseif mailA.choose ~= 0 and mailB.choose == 0 then
            return false
        else
            return mailA.time > mailB.time
        end
    end)
end

local function HasMailRed(self)
    for _, mail in ipairs(self.data.mails) do
        if mail.choose == 0 then
            return true
        end
    end
    return false
end

local function SendGetInfo(self)
    SFSNetwork.SendMessage(MsgDefines.GetSuggestionBoxInfo)
end

local function SendGetHistory(self)
    SFSNetwork.SendMessage(MsgDefines.GetHistorySatisfactionRecord)
end

local function SendChooseMail(self, uuid, index)
    SFSNetwork.SendMessage(MsgDefines.ResidentMailChoose, uuid, index)
end

local function HandleGetInfo(self, message)
    if self.data == nil then
        self.data = OpinionData.New()
    end
    if message["suggestionBoxInfo"] then
        self.data.satisfaction = message["suggestionBoxInfo"]["satisfaction"]
    end
    if message["opinions"] then
        self.data.opinions = message["opinions"]
    end
    if message["mails"] then
        self.data.mails = message["mails"]
        self:SortMails()
    end
    EventManager:GetInstance():Broadcast(EventId.OpinionGetInfo)
end

local function HandleGetHistory(self, message)
    if self.history == nil then
        self.history = {}
    end
    if message["records"] then
        self.history.records = message["records"]
    end
    if message["rewardArr"] then
        self.history.rewardArr = message["rewardArr"]
    end
    EventManager:GetInstance():Broadcast(EventId.OpinionGetHistory)
end

local function HandleUpdate(self, message)
    if message["suggestionBoxInfo"] then
        self.data.satisfaction = message["suggestionBoxInfo"]["satisfaction"]
    end
    if message["newOpinions"] then
        for _, opinion in ipairs(message["newOpinions"]) do
            table.insert(self.data.opinions, 1, opinion)

            local curTime = UITimeManager:GetInstance():GetServerTime()
            local dayNight = DataCenter.VitaManager:GetDayNight(curTime)
            if dayNight == VitaDefines.DayNight.Day and not DataCenter.GuideManager:InGuide() then
                -- 显示小人说话
                local residentData = DataCenter.VitaManager:GetResidentDataById(opinion.residentId)
                if residentData then
                    local text = Localization:GetString(opinion.content)
                    local duration = LuaEntry.DataConfig:TryGetNum("opinion", "k6")
                    DataCenter.CityResidentManager:ResidentSpeak(residentData.uuid, text, duration)
                end
            end
        end
    end
    if message["newMails"] then
        for _, mail in ipairs(message["newMails"]) do
            table.insert(self.data.mails, 1, mail)
        end
        self:SortMails()
    end
    EventManager:GetInstance():Broadcast(EventId.OpinionUpdate)
end

local function HandleChooseMail(self, message)
    if message["suggestionBoxInfo"] then
        self.data.satisfaction = message["suggestionBoxInfo"]["satisfaction"]
    end
    local found = false
    if message["uuid"] and message["choose"] then
        for _, mail in ipairs(self.data.mails) do
            if mail.uuid == message["uuid"] then
                mail.choose = message["choose"]
                found = true
                break
            end
        end
        self:SortMails()
    end
    self.chooseReward = {}
    if message["reward"] then
        for _, v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        self.chooseReward = message["reward"]
    end
    if found then
        EventManager:GetInstance():Broadcast(EventId.OpinionChooseMail)
    end
end

OpinionManager.__init = __init
OpinionManager.__delete = __delete
OpinionManager.AddListeners = AddListeners
OpinionManager.RemoveListeners = RemoveListeners
OpinionManager.Startup = Startup
OpinionManager.GetData = GetData
OpinionManager.GetHistory = GetHistory
OpinionManager.SortMails = SortMails
OpinionManager.HasMailRed = HasMailRed
OpinionManager.SendGetInfo = SendGetInfo
OpinionManager.SendGetHistory = SendGetHistory
OpinionManager.SendChooseMail = SendChooseMail

OpinionManager.HandleGetInfo = HandleGetInfo
OpinionManager.HandleGetHistory = HandleGetHistory
OpinionManager.HandleUpdate = HandleUpdate
OpinionManager.HandleChooseMail = HandleChooseMail

return OpinionManager
