---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/21 20:27
---

local CrossWormManager = BaseClass("CrossWormManager")
local CrossWormData = require "DataCenter.CrossWorm.CrossWormData"
local CrossWormPlunderData = require "DataCenter.CrossWorm.CrossWormPlunderData"
local Localization = CS.GameEntry.Localization

local function __init(self)
    self.data = CrossWormData.New()
    self.plunderData = CrossWormPlunderData.New()
    self.transportLastTime = 0
    self.armyToPlace = {}
    self:AddListeners()
end

local function __delete(self)
    self:RemoveListeners()
end

local function AddListeners(self)
    
end

local function RemoveListeners(self)
    
end

local function GetDefenceFormation(self)
    local formationList = DataCenter.ArmyFormationDataManager:GetCrossDefenceArmyFormationData()
    for _, formation in pairs(formationList) do
        return formation
    end
    return nil
end

local function GetDefenceFormationUuid(self)
    local formation = self:GetDefenceFormation()
    return formation and formation.uuid or 0
end

local function GetDefenceHeroUuids(self)
    local formation = self:GetDefenceFormation()
    return formation and formation:GetHeroUuids() or {}
end

-- 补兵的最少数量
local function GetAddArmyMinCount(self)
    return LuaEntry.DataConfig:TryGetNum("cross_worm_new", "k1")
end

-- 每日补兵的最大次数
local function GetAddArmyMaxTimes(self)
    return LuaEntry.DataConfig:TryGetNum("cross_worm_new", "k2")
end

-- 最大跨服兵数量
local function GetMaxArmyNum(self)
    return LuaEntry.DataConfig:TryGetNum("cross_worm_new", "k3")
end

-- 每次运输重量
local function GetTransportWeight(self)
    return LuaEntry.DataConfig:TryGetNum("cross_worm_new", "k4")
end

-- 运输间隔
local function GetTransportInterval(self)
    return LuaEntry.DataConfig:TryGetNum("cross_worm_new", "k5") * 1000
end

-- 当前跨服兵数量
-- isFree true: 空闲; false: 全部
local function GetCurArmyNum(self, isFree)
    local count = 0
    local armyDict = DataCenter.ArmyManager:GetArmyCrossList()
    for _, v in pairs(armyDict) do
        count = count + v
    end
    if not isFree then
        local defFormation = DataCenter.CrossWormManager:GetDefenceFormation()
        if defFormation and defFormation.armsType == MarchArmsType.Cross then
            count = count + defFormation:GetTotalSoliderNum()
        end
        --local formationList = DataCenter.ArmyFormationDataManager:GetArmyFormationList()
        --for _, formation in ipairs(formationList) do
        --    if formation.armsType == MarchArmsType.Cross then
        --        count = count + formation:GetTotalSoliderNum()
        --    end
        --end
    end
    return count
end

-- 是否有免费补兵次数
local function HasAddArmyFreeTimes(self)
    return false
    --return self.data.usedFreeTimes == 0
end

-- 剩余补兵次数
local function GetAddArmyRestTimes(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, self.data.usedTimesRefreshTime // 1000)
    local usedTimes = sameDay and self.data.usedTimes or 0
    return math.max(self:GetAddArmyMaxTimes() - usedTimes, 0)
end

-- 是否可以补兵
local function CanAddArmy(self)
    return self:HasAddArmyFreeTimes() or self:GetAddArmyRestTimes() > 0
end

local function GetPlunderData(self)
    return self.plunderData
end

local function GetTransportLastTime(self)
    return self.transportLastTime
end

local function GetTransportPlunderData(self)
    local transportPlunderData = CrossWormPlunderData.New()
    local restWeight = self:GetTransportWeight()
    
    -- 钻石
    if restWeight > 0 then
        local diamondWeight = CommonUtil.GetResourceWeight(ResourceType.Gold)
        local diamondCount = math.min(self.plunderData.resDict[ResourceType.Gold] or 0, restWeight // diamondWeight)
        if diamondCount > 0 then
            restWeight = restWeight - diamondWeight * diamondCount
            transportPlunderData.resDict[ResourceType.Gold] = math.floor(diamondCount)
        end
    end
    
    -- 资源
    if restWeight > 0 then
        local list = {}
        local eachWeight = restWeight / table.count(self.plunderData.resDict)
        for resourceType, count in pairs(self.plunderData.resDict) do
            if resourceType ~= ResourceType.Gold then
                table.insert(list, { resourceType = resourceType, count = count })
            end
        end
        for _, v in ipairs(list) do
            local weight = CommonUtil.GetResourceWeight(v.resourceType)
            local count = math.min(v.count, eachWeight // weight)
            if count > 0 then
                transportPlunderData.resDict[v.resourceType] = math.floor(count)
            end
        end
    end
    
    return transportPlunderData
end

local function GetArmyToPlace(self)
    return self.armyToPlace or {}
end

local function SetArmyToPlace(self, armyDict)
    self.armyToPlace = armyDict
end

local function IsNewWormTrain(self)
    return LuaEntry.DataConfig:CheckSwitch("new_worm_train")
end

local function SendSaveArmy(self, armyDict)
    SFSNetwork.SendMessage(MsgDefines.UserFillCrossWormArmy, armyDict)
end

local function SendSaveHero(self, heroUuids)
    local formationUuid = self:GetDefenceFormationUuid()
    SFSNetwork.SendMessage(MsgDefines.UserSaveCrossDefendHero, formationUuid, heroUuids)
end

local function SendGetPlunder(self)
    SFSNetwork.SendMessage(MsgDefines.UserGetCrossWormRes)
end

local function HandleInit(self, message)
    if message["crossWormFillArmy"] then
        self.data:ParseServerData(message["crossWormFillArmy"])
    end
end

local function HandleSaveArmy(self, message)
    self.data:ParseServerData(message)
    EventManager:GetInstance():Broadcast(EventId.CrossWormSaveArmy)
end

local function HandleSaveHero(self, message)
    DataCenter.ArmyFormationDataManager:UpdateCrossDefenceArmyFormationData(message)
    EventManager:GetInstance():Broadcast(EventId.CrossWormSaveHero)
end

local function HandlePushTimes(self, message)
    self.data:ParseServerData(message)
end

local function HandlePlunder(self, message)
    if message["res"] then
        local serverData = PBController.ParsePb1(message["res"], "protobuf.CrossPlunderData")
        self.plunderData:ParseServerData(serverData)
    end
    if message["lastTime"] then
        self.transportLastTime = message["lastTime"]
    end
    EventManager:GetInstance():Broadcast(EventId.CrossWormPlunderUpdate)
end

local function HandleResSync(self, message)
    if message["remainGold"] then
        LuaEntry.Player.gold = message["remainGold"]
        EventManager:GetInstance():Broadcast(EventId.UpdateGold)
    end
    if message["resource"] then
        LuaEntry.Resource:UpdateResource(message["resource"])
    end
end

CrossWormManager.__init = __init
CrossWormManager.__delete = __delete
CrossWormManager.AddListeners = AddListeners
CrossWormManager.RemoveListeners = RemoveListeners

CrossWormManager.GetDefenceFormation = GetDefenceFormation
CrossWormManager.GetDefenceFormationUuid = GetDefenceFormationUuid
CrossWormManager.GetDefenceHeroUuids = GetDefenceHeroUuids
CrossWormManager.GetAddArmyMinCount = GetAddArmyMinCount
CrossWormManager.GetAddArmyMaxTimes = GetAddArmyMaxTimes
CrossWormManager.GetMaxArmyNum = GetMaxArmyNum
CrossWormManager.GetTransportWeight = GetTransportWeight
CrossWormManager.GetTransportInterval = GetTransportInterval
CrossWormManager.GetCurArmyNum = GetCurArmyNum
CrossWormManager.HasAddArmyFreeTimes = HasAddArmyFreeTimes
CrossWormManager.GetAddArmyRestTimes = GetAddArmyRestTimes
CrossWormManager.CanAddArmy = CanAddArmy
CrossWormManager.GetPlunderData = GetPlunderData
CrossWormManager.GetTransportLastTime = GetTransportLastTime
CrossWormManager.GetTransportPlunderData = GetTransportPlunderData
CrossWormManager.GetArmyToPlace = GetArmyToPlace
CrossWormManager.SetArmyToPlace = SetArmyToPlace
CrossWormManager.IsNewWormTrain = IsNewWormTrain

CrossWormManager.SendSaveArmy = SendSaveArmy
CrossWormManager.SendSaveHero = SendSaveHero
CrossWormManager.SendGetPlunder = SendGetPlunder

CrossWormManager.HandleInit = HandleInit
CrossWormManager.HandleSaveArmy = HandleSaveArmy
CrossWormManager.HandleSaveHero = HandleSaveHero
CrossWormManager.HandlePushTimes = HandlePushTimes
CrossWormManager.HandlePlunder = HandlePlunder
CrossWormManager.HandleResSync = HandleResSync

return CrossWormManager