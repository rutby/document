---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/5/11 17:12
---


local CommonShopManager = BaseClass("CommonShopManager")
local Localization = CS.GameEntry.Localization
local CommonShopGoodsTemplate = require "DataCenter.CommonShop.CommonShopGoodsTemplate"

local function __init(self)
    self.goodsShopDic = {}
    self.goodsInfoDic = {}
    self.refreshCount = 0--限时商店刷新次数
    self.redCountDic = {}
    self.updateTimerDic = {}
    self.exploitRank = ""
    self.refreshTime = {}--刷新时间
    self:AddListener()
end

local function __delete(self)
    self.goodsShopDic = nil
    self.goodsInfoDic = nil
    self.refreshCount = nil
    self.redCountDic = nil
    self.updateTimerDic = nil
    self.exploitRank = nil
    self.refreshTime = {}--刷新时间
    self:RemoveListener()
end

local function AddListener(self)
    --EventManager:GetInstance():AddListener(EventId.GarbageCollectStart, self.ShowExploringTime)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.GarbageCollectStart, self.ShowExploringTime)
end

local function InitAll(self)
    SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.Goods)
    SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.LimitTime)
    SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.Vip)
    SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.GolloesShop)
    EventManager:GetInstance():Broadcast(EventId.CheckPubBubble, true)
    SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.HeroReset)
    SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.AlContribute)
    if DataCenter.HeroMedalRedemptionManager:IsOpen() then
        SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.HeroMetalRedemption)
    end
end

local function InitSeasonShopByActId(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.SeasonShop, activityId)
end

local function UpdateOneShopInfo(self, msg)
    local updateAll = false
    if msg.type then
        if msg.type == CommonShopType.AlContribute then
            --self.historyExploit = msg.exploit or 0
            self.exploitRank = msg.exploitRank
        end
        --if msg.type == CommonShopType.LimitTime and self.goodsShopDic[msg.type] then
        --    for i, v in ipairs(self.goodsShopDic[msg.type]) do
        --        if self.goodsInfoDic[v.id] then
        --            self.goodsInfoDic[v.id].boughtTimes = 0
        --        end
        --    end
        --end
        
        self.goodsInfoDic[msg.type] = {}--清空购买信息
        
        if msg.shopInfo then
            self.goodsShopDic[msg.type] = {}
            local newShop = {}
            for i, v in ipairs(msg.shopInfo) do
                local newOne = CommonShopGoodsTemplate.New()
                newOne:ParseData(v)
                table.insert(newShop, newOne)
            end
            table.sort(newShop, function(a, b)
                return a.order < b.order
            end)
            if msg.type == CommonShopType.SeasonShop then
                local activityId = tonumber(msg.activityId)
                self.goodsShopDic[msg.type][activityId] = newShop
            end
            self.goodsShopDic[msg.type] = newShop
            updateAll = true
        end
    end
    if msg.shopLimit then
        for i, v in ipairs(msg.shopLimit) do
            self:UpdateOneGoodsInfo(msg.type, v, not msg.type)
        end
    end

    if msg.refreshCount then
        self.refreshCount = msg.refreshCount
    end
    if msg.refreshTime ~= nil then
        self.refreshTime[msg.type] = msg.refreshTime
    end
    
    self:UpdateRed(msg.type)
    EventManager:GetInstance():Broadcast(EventId.UpdateOneCommonShop, msg.type)
    
    self:AddUpdateTimer(msg.type)
end

local function AddUpdateTimer(self, shopType)
    if self.updateTimerDic[shopType] then
        self.updateTimerDic[shopType]:Stop()
        self.updateTimerDic[shopType] = nil
    end
    if shopType == CommonShopType.LimitTime then
        local _, remainTs = self:GetLimitShopNextRefreshTs()
        self.updateTimerDic[shopType] = TimerManager:GetInstance():DelayInvoke(function()
            SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.LimitTime)
        end, remainTs + 2)
    elseif shopType == CommonShopType.Vip then
        local nextWeekTsMs = UITimeManager:GetInstance():GetNextWeekDay(1)
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if nextWeekTsMs - curTime <= OneDayTime * 1000 then
            self.updateTimerDic[shopType] = TimerManager:GetInstance():DelayInvoke(function()
                SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.Vip)
            end, math.modf((nextWeekTsMs - curTime) / 1000) + 2)
        end
    elseif shopType == CommonShopType.AlContribute then
        local nextWeekTsMs = UITimeManager:GetInstance():GetNextWeekDay(1)
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if nextWeekTsMs - curTime <= OneDayTime * 1000 then
            self.updateTimerDic[shopType] = TimerManager:GetInstance():DelayInvoke(function()
                SFSNetwork.SendMessage(MsgDefines.GetCommonShopInfo, CommonShopType.AlContribute)
            end, math.modf((nextWeekTsMs - curTime) / 1000) + 2)
        end
    end
end

local function UpdateRed(self, shopType)
    local goodsList = self.goodsShopDic[shopType]
    local goodsInfoDic = self.goodsInfoDic[shopType]
    if not goodsList or #goodsList == 0 then
        self.redCountDic[shopType] = 0
        return
    end
    if shopType == CommonShopType.LimitTime then
        local limitShopNeedBaseLv = LuaEntry.DataConfig:TryGetNum("shop_random", "k4")
        if limitShopNeedBaseLv > DataCenter.BuildManager.MainLv then
            self.redCountDic[shopType] = 0
            return
        end
    elseif shopType == CommonShopType.HeroReset then
        self.redCountDic[shopType] = 0
        return
    end
    
    local redCount = 0
    for i, v in ipairs(goodsList) do
        local goodsInfo = goodsInfoDic[v.id]
        local boughtTimes = goodsInfo and goodsInfo.boughtTimes or  0
        local maxTimes = v.maxTimes
        local vipInfo = DataCenter.VIPManager:GetVipData()
        local needVip = v.vipLevel or 0
        local vipFit = vipInfo and needVip <= vipInfo.level
        if maxTimes > boughtTimes and v.costNum == 0 and vipFit then
            redCount = redCount + 1
        end
    end
    self.redCountDic[shopType] = redCount
    EventManager:GetInstance():Broadcast(EventId.OnCommonShopRedChange, shopType)
end

local function UpdateOneGoodsInfo(self, shopType, goodsMsg, needBroadcast)
    local tempInfo = {}
    for i, goodsList in pairs(self.goodsShopDic) do
        if not shopType then
            for k, v in ipairs(goodsList) do
                if v.id == goodsMsg.id then
                    shopType = v.shopType
                    break
                end
            end
        else
            break
        end
    end 
    tempInfo.id = goodsMsg.id
    tempInfo.startTime = goodsMsg.st
    tempInfo.boughtTimes = goodsMsg.bt
    if not self.goodsInfoDic[shopType] then
        self.goodsInfoDic[shopType] = {}
    end
    self.goodsInfoDic[shopType][tempInfo.id] = tempInfo
    
    self:UpdateRed(shopType)
    if needBroadcast then
        EventManager:GetInstance():Broadcast(EventId.UpdateOneCommonShopGoods, tempInfo.id)
    end
end

local function GetGoodsListByShopType(self, shopType, activityId)
    local retList = {}
    if self.goodsShopDic[shopType] then
        if shopType == CommonShopType.SeasonShop then
            local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(activityId))
            local actStartTime = activityInfo.startTime
            local curTime = UITimeManager:GetInstance():GetServerTime()
            for k,v in ipairs(self.goodsShopDic[shopType]) do
                local goodOpenTime = actStartTime + v.openTime * 24 * 60 * 60 * 1000
                if v.closeTime > 0 then
                    local goodCloseTime = actStartTime + v.closeTime * 24 * 60 * 60 * 1000
                    if goodOpenTime <= curTime and curTime < goodCloseTime then
                        table.insert(retList, v)
                    end
                else
                    if goodOpenTime <= curTime then
                        table.insert(retList, v)
                    end
                end
            end
        elseif shopType == CommonShopType.Goods then
            --检查赛季
            local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
            local goodList = self.goodsShopDic[shopType]
            for i = 1 ,table.count(goodList) do
                if goodList[i].season and goodList[i].season ~= 0 then
                    local str = string.split(goodList[i].season,";")
                    for k = 1 ,table.count(str) do
                        if (tonumber(str[k]) + 1 ) == seasonId  then
                            table.insert(retList,goodList[i])
                        end
                    end
                else
                    table.insert(retList,goodList[i])
                end
            end
        else
            retList = self.goodsShopDic[shopType]
        end
    end
    return retList
end

local function GetGoodsInfoById(self, shopType, id)
    if self.goodsInfoDic[shopType] and self.goodsInfoDic[shopType][id] then
        return self.goodsInfoDic[shopType][id]
    end
end

local function GetLimitShopRefreshTimes(self)
    return self.refreshCount
end

local function GetRedCount(self, shopType)
    if shopType then
        return self.redCountDic[shopType] or 0
    else
        local total = 0
        for i, v in pairs(self.redCountDic) do
            total = total + v
        end
        return total
    end
end

local function CheckIfModuleOpen(self)
    local isOpen = LuaEntry.DataConfig:CheckSwitch("shop_general_switch") -- 开关
    return isOpen
end

local function CheckHeroResetIsFree(self)
    --检查海报商店是否开放
    local k2 = LuaEntry.DataConfig:TryGetStr("free_heroes", "k2")
    local vec = string.split(k2, ";")
    local mainLv = DataCenter.BuildManager.MainLv
    if mainLv < toInt(vec[3]) then
        return false
    end
    
    local goodsList = self:GetGoodsListByShopType(CommonShopType.HeroReset)
    local price = nil
    for i = 1 ,#goodsList do
        if goodsList[i].itemId ~= "" then
            local goodsInfo = self:GetGoodsInfoById(goodsList[i].shopType, goodsList[i].id)
            local isBuyT = 1
            if goodsInfo then
                isBuyT = goodsInfo.boughtTimes + 1   --购买次数
            end
            local str = string.split(goodsList[i].currency_num_s,";")
            price = str[isBuyT] and str[isBuyT] or str[#str]
            break
        end
    end
    if price and tonumber(price) <= 0 then
        return true
    end
    return false
end

local function GetLimitShopNextRefreshTs(self)
    local todayRestTimeS = UITimeManager:GetInstance():GetResSecondsTo24()
    local cdT = todayRestTimeS % (8 * 3600)
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    return serverTime + cdT * 1000, cdT
end

local function GetSelfExploitRank(self)
    return self.exploitRank or 0
end

--获取刷新时间
function CommonShopManager:GetRefreshTime(shopType)
    return self.refreshTime[shopType]
end

CommonShopManager.__init = __init
CommonShopManager.__delete = __delete

CommonShopManager.AddListener = AddListener
CommonShopManager.RemoveListener = RemoveListener

CommonShopManager.UpdateOneShopInfo = UpdateOneShopInfo
CommonShopManager.UpdateOneGoodsInfo = UpdateOneGoodsInfo
CommonShopManager.GetGoodsListByShopType = GetGoodsListByShopType
CommonShopManager.GetGoodsInfoById = GetGoodsInfoById
CommonShopManager.CheckIfModuleOpen = CheckIfModuleOpen
CommonShopManager.GetLimitShopRefreshTimes = GetLimitShopRefreshTimes
CommonShopManager.InitAll = InitAll
CommonShopManager.InitSeasonShopByActId = InitSeasonShopByActId
CommonShopManager.UpdateRed = UpdateRed
CommonShopManager.GetRedCount = GetRedCount
CommonShopManager.CheckHeroResetIsFree = CheckHeroResetIsFree
CommonShopManager.GetLimitShopNextRefreshTs = GetLimitShopNextRefreshTs
CommonShopManager.AddUpdateTimer = AddUpdateTimer
CommonShopManager.GetSelfExploitRank = GetSelfExploitRank

return CommonShopManager