---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/29 16:09
---

local BuildStatusManager = BaseClass("BuildStatusManager")
local BuildStatusTemplate = require "DataCenter.BuildStatus.BuildStatusTemplate"
local BuildStatusData = require "DataCenter.BuildStatus.BuildStatusData"

local function __init(self)
    self.templateDict = {} -- Dict<id, BuildStatusTemplate>
    self.dataDict = {} -- Dict<uuid, BuildStatusData>

    LocalController:instance():visitTable(TableName.BuildStatus, function(id, lineData)
        local template = BuildStatusTemplate.New()
        template:InitData(lineData)
        self.templateDict[id] = template
    end)

    self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
    self.timer:Start()
    self:AddListener()
end

local function __delete(self)
    self.templateDict = nil
    self.dataDict = nil
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    self:RemoveListener()
end

local function AddListener(self)
    
end

local function RemoveListener(self)
    
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    for uuid, data in pairs(self.dataDict) do
        if data.timeType == BuildStatusType.TimeBase then
            if data.endTime ~= nil and data.endTime < curTime then
                self.dataDict[uuid] = nil
                EventManager:GetInstance():Broadcast(EventId.BuildStatusUpdate, data.bUuid)
            end
        end
    end
end

local function GetTemplate(self, id)
    return self.templateDict[id]
end

local function GetDataDict(self)
    return self.dataDict
end

local function GetDataList(self)
    local list = {}
    for _, data in pairs(self.dataDict) do
        table.insert(list, data)
    end
    table.sort(list, function(dataA, dataB)
        local templateA = self:GetTemplate(dataA.id)
        local templateB = self:GetTemplate(dataB.id)
        if templateA and templateB then
            return templateA.priority < templateA.priority
        else
            return dataA.id < dataB.id
        end
    end)
    return list
end

local function GetDataListByBuildUuid(self, bUuid)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local list = {}
    for _, data in pairs(self.dataDict) do
        if data.bUuid == bUuid and data.startTime and data.endTime and curTime >= data.startTime and curTime <= data.endTime then
            table.insert(list, data)
        end
    end
    return list
end

local function GetDataListByPointId(self, pointId)
    local list = {}
    local buildData = DataCenter.BuildManager:GetBuildingDataByPointId(pointId, true)
    if buildData then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        for _, data in pairs(self.dataDict) do
            if data.bUuid == buildData.uuid and data.endTime ~= nil and curTime <= data.endTime then
                table.insert(list, data)
            end
        end
    end
    return list
end

local function HandleInit(self, message)
    if message["building_status"] then
        for _, serverData in ipairs(message["building_status"]) do
            local data = BuildStatusData.New()
            data:ParseServerData(serverData)
            self.dataDict[data.uuid] = data
            EventManager:GetInstance():Broadcast(EventId.BuildStatusUpdate, data.bUuid)
        end
    end
end

local function HandleAdd(self, message)
    if message["uuid"] then
        local uuid = message["uuid"]
        local data = self.dataDict[uuid] or BuildStatusData.New()
        data:ParseServerData(message)
        self.dataDict[uuid] = data
        EventManager:GetInstance():Broadcast(EventId.BuildStatusUpdate, data.bUuid)
    end
end

local function HandleDel(self, message)
    if message["uuid"] then
        local uuid = message["uuid"]
        local data = self.dataDict[uuid]
        self.dataDict[uuid] = nil
        EventManager:GetInstance():Broadcast(EventId.BuildStatusUpdate, data and data.bUuid)
    end
end

BuildStatusManager.__init = __init
BuildStatusManager.__delete = __delete
BuildStatusManager.AddListener = AddListener
BuildStatusManager.RemoveListener = RemoveListener
BuildStatusManager.TimerAction = TimerAction

BuildStatusManager.GetTemplate = GetTemplate
BuildStatusManager.GetDataDict = GetDataDict
BuildStatusManager.GetDataList = GetDataList
BuildStatusManager.GetDataListByBuildUuid = GetDataListByBuildUuid
BuildStatusManager.GetDataListByPointId = GetDataListByPointId

BuildStatusManager.HandleInit = HandleInit
BuildStatusManager.HandleAdd = HandleAdd
BuildStatusManager.HandleDel = HandleDel

return BuildStatusManager