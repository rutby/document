---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/4/21 21:47
---
---@class FakeRescueMarchManager
local FakeRescueMarchManager = BaseClass("FakeRescueMarchManager")
local FakeRescueMarchData = require "DataCenter.RadarCenterDataManager.FakeRescueMarchData"

local function __init(self)
    self.allMarches = {}
    self.timer_action = function(temp)
        self:CheckAndRefreshMarches()
    end
    self:AddListener()
end

local function __delete(self)
    self.allMarches = nil
    self:RemoveListener()
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, BindCallback(self, self.DoWhenBackToWorld))
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, BindCallback(self, self.DoWhenBackToWorld))
end

local function AddMarchIndex(self, pointId)
    if self.allMarches[pointId] == nil then
        local data = FakeRescueMarchData.New()
        self.allMarches[pointId] = data
        local startPt = LuaEntry.Player:GetMainWorldPos()
        local endPt = pointId
        
        data:SetStartAndEndIndex(pointId, startPt, endPt)
    end
    self:AddTimer()
    self:CheckAndRefreshMarches()
end

local function RemoveMarchIndex(self, pointId)
    if self.allMarches[pointId] ~= nil then
        self.allMarches[pointId]:Remove()
    end
    self.allMarches[pointId] = nil
    if table.count(self.allMarches) == 0 then
        self:RemoveTimer()
    end
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
        self.timer:Start()
    end
end

local function RemoveTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function CheckAndRefreshMarches(self)
    local removeList = {}
    table.walk(self.allMarches, function (k, v)
        if v:NeedRemove() then
            table.insert(removeList, k)
        else
            local now = UITimeManager:GetInstance():GetServerTime()
            v:UpdateState(now)
        end
    end)

    table.walk(removeList, function (_, v)
        self:RemoveMarchIndex(v)
    end)

    if self.rebuildFlag == true and CS.SceneManager:IsInWorld() then
        if table.count(self.allMarches) == 0 then
            self.rebuildFlag = false
        else
            table.walk(self.allMarches, function (_, v)
                local pointInfo = CS.SceneManager.World:GetPointInfo(v.endIndex)
                if pointInfo ~= nil then
                    v:DoWhenBackToWorld()
                    self.rebuildFlag = false
                end
            end)
        end
    end
end

local function StartMarch(self, uid)
    self:AddMarchIndex(uid)
    self.allMarches[uid]:StartMarch()
end

local function RemoveAllDisappearEvent(self)
    local needDeletes = {}
    table.walk(self.allMarches, function (k, v)
        if self:NeedRemove(v.eventUuid) then
            table.insert(needDeletes ,k)
        end
    end)
    table.walk(needDeletes, function (_, v)
        self:RemoveMarchIndex(v)
    end)
end

local function IsEventDoing(self, pointId)
    if self.allMarches[pointId] ~= nil then
        return self.allMarches[pointId]:IsEventDoing()
    end
    return false
end

local function NeedRemove(self, uuid)
    if not CS.SceneManager:IsInWorld() then
        return false
    end
    
    -- 如果没找到这个点（在视野外），在雷达事件中尝试查找
    local detectEventData = DataCenter.RadarCenterDataManager:GetDetectEventInfo(uuid)
    if detectEventData ~= nil and (detectEventData.state == DetectEventState.DETECT_EVENT_STATE_NOT_FINISH or detectEventData.state == DetectEventState.DETECT_EVENT_STATE_FINISHED) then
        return false
    end
    
    return true
end

local function DoWhenBackToWorld(self)
    self.rebuildFlag = true
end

FakeRescueMarchManager.__init = __init
FakeRescueMarchManager.__delete = __delete
FakeRescueMarchManager.AddMarchIndex = AddMarchIndex
FakeRescueMarchManager.RemoveMarchIndex = RemoveMarchIndex
FakeRescueMarchManager.AddTimer = AddTimer
FakeRescueMarchManager.RemoveTimer = RemoveTimer
FakeRescueMarchManager.CheckAndRefreshMarches = CheckAndRefreshMarches
FakeRescueMarchManager.RemoveAllDisappearEvent = RemoveAllDisappearEvent
FakeRescueMarchManager.StartMarch = StartMarch
FakeRescueMarchManager.IsEventDoing = IsEventDoing
FakeRescueMarchManager.NeedRemove = NeedRemove
FakeRescueMarchManager.DoWhenBackToWorld = DoWhenBackToWorld
FakeRescueMarchManager.AddListener = AddListener
FakeRescueMarchManager.RemoveListener = RemoveListener

return FakeRescueMarchManager