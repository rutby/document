---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/4/21 21:59
---
local FakeHelperMarchData = BaseClass("FakeHelperMarchData")

local retry_gap_time = 10000
local FakeMarchState = {
    FAKE_MARCH_STATE_NULL = 0,
    FAKE_MARCH_TO_GARBAGE = 1,
    FAKE_MARCH_COLLECT_GARBAGE = 2,
    FAKE_MARCH_GO_HOME = 3,
    FAKE_MARCH_ARRIVE_HOME = 4,
}

local function __init(self)
    self.startIndex = 0
    self.endIndex = 0
    self.startTime = 0
    self.GarbageStartTime = 0
    self.backHomeTime = 0
    self.arriveHomeTime = 0
    self.curState = FakeMarchState.FAKE_MARCH_STATE_NULL
end

local function __delete(self)
    self.startIndex = nil
    self.endIndex = nil
    self.startTime = nil
    self.GarbageStartTime = nil
    self.backHomeTime = nil
    self.arriveHomeTime = nil
end

local function SetStartAndEndIndex(self, pointIndex, startIndex, endIndex)
    self.pointIndex = pointIndex
    self.startIndex = startIndex
    self.endIndex = endIndex
    local data = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
    self.pointUid = data.uuid
    self.uuid = data.uuid

    local detectData = DataCenter.RadarCenterDataManager:GetHelperEventDataByBuildUid(self.pointUid)
    self.eventUuid = self.pointUid
    if detectData then
        self.eventUuid = detectData.uuid
    end
end

local function UpdateState(self, curTime)
    if self.curState == FakeMarchState.FAKE_MARCH_STATE_NULL then
        self:StartMarch()
    elseif self.curState == FakeMarchState.FAKE_MARCH_TO_GARBAGE and curTime >= self.GarbageStartTime then
        self:CheckAndStartCollectGarbage(curTime)
    elseif self.curState == FakeMarchState.FAKE_MARCH_COLLECT_GARBAGE and curTime >= self.backHomeTime then
        self:CheckAndGoBack(curTime)
    elseif self.curState == FakeMarchState.FAKE_MARCH_GO_HOME and curTime >= self.arriveHomeTime then
        self:CheckBackHome(curTime)
    end
    self:SendPickEndMessage()
end

local function StartMarch(self)
    if self.curState == FakeMarchState.FAKE_MARCH_STATE_NULL then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        self.curState = FakeMarchState.FAKE_MARCH_TO_GARBAGE
        self.startTime = math.ceil(curTime)
        local marchTime = self:CalculateMarchTime()
        self.GarbageStartTime =  math.ceil(curTime + marchTime)
        self.backHomeTime =  math.ceil(self.GarbageStartTime + self:CalculateCollectGarbageTime())
        self.arriveHomeTime =  math.ceil(self.backHomeTime + marchTime)

        local eventUuid = self.eventUuid

        SFSNetwork.SendMessage(MsgDefines.DetectEventRescueStart, eventUuid)
        if CS.SceneManager:IsInWorld() then
            DataCenter.WorldMarchDataManager:AddFakeSampleMarchData(self.startIndex, self.endIndex, self.startTime, self.GarbageStartTime, MarchTargetType.NORMAL_FAKE_MARCH)
        end
    end
end

local function CheckAndStartCollectGarbage(self, curTime)
    if self.curState ~= FakeMarchState.FAKE_MARCH_COLLECT_GARBAGE and curTime >= self.GarbageStartTime then
        self.curState = FakeMarchState.FAKE_MARCH_COLLECT_GARBAGE
        if CS.SceneManager:IsInWorld() then
            DataCenter.WorldMarchDataManager:UpdateFakeSampleMarchDataWhenStartPick(self.endIndex, self.backHomeTime)
        end
    end
end

local function CheckAndGoBack(self, curTime)
    if self.curState ~= FakeMarchState.FAKE_MARCH_GO_HOME and curTime >= self.backHomeTime then
        self.curState = FakeMarchState.FAKE_MARCH_GO_HOME
        if CS.SceneManager:IsInWorld() then
            DataCenter.WorldMarchDataManager:UpdateFakeSampleMarchDataWhenBack(self.endIndex, self.backHomeTime+2000, self.arriveHomeTime + 1000)
        end
    end
end

local function SendPickEndMessage(self)
    if self.curState == FakeMarchState.FAKE_MARCH_GO_HOME or self.curState == FakeMarchState.FAKE_MARCH_ARRIVE_HOME then
        local now = UITimeManager:GetInstance():GetServerTime()
        if self.uuid ~= nil and (self.callTime == nil or now - self.callTime > retry_gap_time) then
            self.callTime = now
            local eventUuid = self.eventUuid
            local detectData = DataCenter.RadarCenterDataManager:GetDetectEventInfo(eventUuid)
            if detectData ~= nil and detectData.state == DetectEventState.DETECT_EVENT_STATE_NOT_FINISH then
                SFSNetwork.SendMessage(MsgDefines.DetectEventRescueEnd, eventUuid)
            end
        end
    end
end

local function CheckBackHome(self, curTime)
    if self.curState == FakeMarchState.FAKE_MARCH_GO_HOME and curTime >= self.arriveHomeTime then
        self.curState = FakeMarchState.FAKE_MARCH_ARRIVE_HOME
        self:Remove()
    end
end

local function CalculateMarchTime(self)
    local startPt = SceneUtils.IndexToTilePos(self.startIndex)
    local endPt = SceneUtils.IndexToTilePos(self.endIndex)
    local dis = Vector2.Distance(startPt, endPt)
    local speed = LuaEntry.DataConfig:TryGetNum("armyspeed", "k2") -- speed
    local time = dis * 1000 / speed
    return time
end

local function CalculateCollectGarbageTime(self)
    return 1
end

local function Remove(self)
    if CS.SceneManager:IsInWorld() then
        DataCenter.WorldMarchDataManager:RemoveFakeSampleMarchData(self.endIndex)
    end
end

local function NeedRemove(self)
    if self.curState == FakeMarchState.FAKE_MARCH_ARRIVE_HOME and DataCenter.FakeHelperMarchManager:NeedRemove(self.eventUuid) then
        return true
    end
    return false
end

local function IsEventDoing(self)
    return self.curState == FakeMarchState.FAKE_MARCH_TO_GARBAGE or self.curState == FakeMarchState.FAKE_MARCH_COLLECT_GARBAGE
end

local function DoWhenBackToWorld(self)
    if DataCenter.WorldMarchDataManager:IsFakeSampleMarchData(self.endIndex) then
        return
    end
    local pointInfo = DataCenter.WorldPointManager:GetPointInfo(self.endIndex)
    if pointInfo == nil then
        return
    end
    if self.curState == FakeMarchState.FAKE_MARCH_TO_GARBAGE then
        DataCenter.WorldMarchDataManager:RemoveFakeSampleMarchData(self.endIndex)
        DataCenter.WorldMarchDataManager:AddFakeSampleMarchData(self.startIndex, self.endIndex, self.startTime, self.GarbageStartTime, MarchTargetType.NORMAL_FAKE_MARCH)
    else
        self.curState = FakeMarchState.FAKE_MARCH_ARRIVE_HOME
        self:UpdateState(UITimeManager:GetInstance():GetServerTime())
    end
end

FakeHelperMarchData.__init = __init
FakeHelperMarchData.__delete = __delete
FakeHelperMarchData.SetStartAndEndIndex = SetStartAndEndIndex
FakeHelperMarchData.StartMarch = StartMarch
FakeHelperMarchData.CheckAndStartCollectGarbage = CheckAndStartCollectGarbage
FakeHelperMarchData.CheckAndGoBack = CheckAndGoBack
FakeHelperMarchData.CalculateMarchTime = CalculateMarchTime
FakeHelperMarchData.CalculateCollectGarbageTime = CalculateCollectGarbageTime
FakeHelperMarchData.UpdateState = UpdateState
FakeHelperMarchData.Remove = Remove
FakeHelperMarchData.CheckBackHome = CheckBackHome
FakeHelperMarchData.SendPickEndMessage = SendPickEndMessage
FakeHelperMarchData.NeedRemove = NeedRemove
FakeHelperMarchData.IsEventDoing = IsEventDoing
FakeHelperMarchData.DoWhenBackToWorld = DoWhenBackToWorld

return FakeHelperMarchData