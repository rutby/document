---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/3 11:55
---
local DetectEventBubbleManager = BaseClass("DetectEventBubbleManager")
local DetectEventBubble = require "UI.DetectEventBubble.DetectEventBubble"
local ResourceManager = CS.GameEntry.Resource

local function __init(self)
    self.bubble = {}
    self.request = {}
    self:AddListener()
end

local function __delete(self)
    self:RemoveAllDetectEventBubble()
    self:RemoveListener()
    self.bubble = nil
    self.request = nil
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.GetAllDetectInfo, self.DoWhenDetectEventChange)
    EventManager:GetInstance():AddListener(EventId.DetectInfoChange, self.DoWhenDetectEventChange)
    EventManager:GetInstance():AddListener(EventId.PveLevelEnter, self.OnRemoveWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, self.DoWhenDetectEventChange)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnRemoveWorld)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.GetAllDetectInfo, self.DoWhenDetectEventChange)
    EventManager:GetInstance():RemoveListener(EventId.DetectInfoChange, self.DoWhenDetectEventChange)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelEnter, self.OnRemoveWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, self.DoWhenDetectEventChange)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnRemoveWorld)
end

local function StartUp(self)

end

local function OnRemoveWorld()
    DataCenter.DetectEventBubbleManager:RemoveAllDetectEventBubble()
end

local function DoWhenDetectEventChange()
    DataCenter.DetectEventBubbleManager:RefreshAllDetectEventBubble()
end

local function AddDetectEventBubble(self, uuid)
    if not SceneUtils.GetIsInWorld() then
        return
    end
    if self.request[uuid] ~= nil or self.bubble[uuid] ~= nil then
        return
    end
    self.request[uuid] = ResourceManager:InstantiateAsync("Assets/Main/Prefabs/March/WorldDetectInfo.prefab")
    self.request[uuid]:completed('+', function()
        if self.request[uuid] == nil or self.request[uuid].isError then
            return
        end
        local data = DataCenter.RadarCenterDataManager:GetDetectEventInfo(uuid)
        if data then
            local pos = SceneUtils.TileIndexToWorld(data.pointId)
            self.request[uuid].gameObject:SetActive(true)
            self.request[uuid].gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
            self.request[uuid].gameObject.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            self.request[uuid].gameObject.transform.position = Vector3.New(pos.x, pos.y, pos.z - 1.5)
            self.request[uuid].gameObject.name = "DetectEventBubble"
            self.bubble[uuid] = DetectEventBubble.New()
            self.bubble[uuid]:OnCreate(self.request[uuid])
            self.bubble[uuid]:SetUuid(uuid)
        end
    end)
end

local function RefreshAllDetectEventBubble(self)
    local allEvent = DataCenter.RadarCenterDataManager:GetDetectEventInfoUuids()
    local allUuid = {}
    local needRemove = table.keys(self.request)
    for k, v in ipairs(allEvent) do
        local data = DataCenter.RadarCenterDataManager:GetDetectEventInfo(v)
        if data then
            local template = DataCenter.DetectEventTemplateManager:GetDetectEventTemplate(data.eventId)
            if template and template:getValue("type") == DetectEventType.SWEEP_FIELD then
                if data.state == DetectEventState.DETECT_EVENT_STATE_NOT_FINISH then
                    table.insert(allUuid, v)
                end
                needRemove[v] = nil
            end
        end
    end

    for _, v in ipairs(needRemove) do
        self:RemoveDetectEventBubble(v)
    end

    for _, v in ipairs(allUuid) do
        self:AddDetectEventBubble(v)
    end
end

local function RemoveAllDetectEventBubble(self)
    for k, v in ipairs(self.bubble) do
        v:OnDestroy()
    end
    self.bubble = {}
    for k, v in ipairs(self.request) do
        v:Destroy()
    end
    self.request = {}
end

local function RemoveDetectEventBubble(self, uuid)
    if self.bubble[uuid] ~= nil then
        self.bubble[uuid]:OnDestroy()
        self.bubble[uuid] = nil
    end
    if self.request[uuid] ~= nil then
        self.request[uuid]:Destroy()
        self.request[uuid] = nil
    end
end

DetectEventBubbleManager.__init = __init
DetectEventBubbleManager.__delete = __delete
DetectEventBubbleManager.AddDetectEventBubble = AddDetectEventBubble
DetectEventBubbleManager.RemoveDetectEventBubble = RemoveDetectEventBubble
DetectEventBubbleManager.StartUp = StartUp
DetectEventBubbleManager.AddListener = AddListener
DetectEventBubbleManager.RemoveListener = RemoveListener
DetectEventBubbleManager.RemoveAllDetectEventBubble = RemoveAllDetectEventBubble
DetectEventBubbleManager.DoWhenDetectEventChange = DoWhenDetectEventChange
DetectEventBubbleManager.RefreshAllDetectEventBubble = RefreshAllDetectEventBubble
DetectEventBubbleManager.OnRemoveWorld = OnRemoveWorld

return DetectEventBubbleManager