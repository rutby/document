---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/2/15 14:12
---

--[[
    避免多个弹出窗口和引导堆叠错位的管理器
--]]

local UIPopWindowManager = BaseClass("UIPopWindowManager")

local DELAY = 0.1

local function __init(self)
    self.queue = {}
    self.isInPve = false
    self.loadComplete = false
    self:AddListeners()
end

local function __delete(self)
    self.queue = nil
    self.isInPve = nil
    self.loadComplete = nil
    self:RemoveListeners()
end

local function AddListeners(self)
    EventManager:GetInstance():AddListener(EventId.PveLevelEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():AddListener(EventId.PveLevelExit, self.OnPveLevelExit)
    EventManager:GetInstance():AddListener(EventId.LOAD_COMPLETE, self.OnLoadComplete)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelExit, self.OnPveLevelExit)
    EventManager:GetInstance():RemoveListener(EventId.LOAD_COMPLETE, self.OnLoadComplete)
end

-- old version of Append
local function Push(self, windowName, ...)
    self:Append(windowName, ...)
end

-- old version of Append
local function PushWithCondition(self, windowName, condition, ...)
    self:AppendWithCondition(windowName, condition, ...)
end

local function Append(self, windowName, ...)
    if self:IsWindowInQueue(windowName) then
        return
    end
    
    local element =
    {
        windowName = windowName,
        params = SafePack(...),
    }
    table.insert(self.queue, element)
    TimerManager:GetInstance():DelayInvoke(function()
        self:CheckOpenWindow()
    end, DELAY)
end

local function AppendWithCondition(self, windowName, condition, ...)
    if self:IsWindowInQueue(windowName) then
        return
    end
    
    local element =
    {
        windowName = windowName,
        condition = condition,
        params = SafePack(...),
    }
    table.insert(self.queue, element)
    TimerManager:GetInstance():DelayInvoke(function()
        self:CheckOpenWindow()
    end, DELAY)
end

local function Prepend(self, windowName, ...)
    if self:IsWindowInQueue(windowName) then
        return
    end
    
    local element =
    {
        windowName = windowName,
        params = SafePack(...),
    }
    table.insert(self.queue, 1, element)
    TimerManager:GetInstance():DelayInvoke(function()
        self:CheckOpenWindow()
    end, DELAY)
end

local function PrependWithCondition(self, windowName, condition, ...)
    if self:IsWindowInQueue(windowName) then
        return
    end
    
    local element =
    {
        windowName = windowName,
        condition = condition,
        params = SafePack(...),
    }
    table.insert(self.queue, 1, element)
    TimerManager:GetInstance():DelayInvoke(function()
        self:CheckOpenWindow()
    end, DELAY)
end

local function Pop(self)
    if table.count(self.queue) == 0 then
        return nil
    end
    return table.remove(self.queue, 1)
end

local function CheckOpenWindow(self)
    if not self.loadComplete then
        return
    end
    
    if self.isInPve then
        return
    end
    
    if not UIManager:GetInstance():CheckIfIsMainUIOpenOnly(true) then
        return
    end
    
    local element = self:Pop()
    if element == nil then
        return
    end
    
    if DataCenter.GuideManager:InGuide() then
        DataCenter.GuideManager:SetGuideEndCallBack(function()
            self:OpenWindow(element)
        end)
    else
        self:OpenWindow(element)
    end
end

local function OpenWindow(self, element)
    if element.condition ~= nil and not element.condition() then
        return
    end
    UIManager:GetInstance():OpenWindow(element.windowName, SafeUnpack(element.params))
end

local function OnWindowDestroy(self, windowName)
    self:CheckOpenWindow()
end

local function IsWindowInQueue(self, windowName)
    return table.hasvalue(self.queue, windowName)
end

local function OnPveLevelEnter()
    DataCenter.UIPopWindowManager.isInPve = true
end

local function OnPveLevelExit()
    DataCenter.UIPopWindowManager.isInPve = false
end

local function OnLoadComplete()
    DataCenter.UIPopWindowManager.loadComplete = true
    DataCenter.UIPopWindowManager:CheckOpenWindow()
end

UIPopWindowManager.__init = __init
UIPopWindowManager.__delete = __delete
UIPopWindowManager.AddListeners = AddListeners
UIPopWindowManager.RemoveListeners = RemoveListeners

UIPopWindowManager.Push = Push
UIPopWindowManager.PushWithCondition = PushWithCondition
UIPopWindowManager.Append = Append
UIPopWindowManager.AppendWithCondition = AppendWithCondition
UIPopWindowManager.Prepend = Prepend
UIPopWindowManager.PrependWithCondition = PrependWithCondition
UIPopWindowManager.Pop = Pop
UIPopWindowManager.CheckOpenWindow = CheckOpenWindow
UIPopWindowManager.OpenWindow = OpenWindow
UIPopWindowManager.OnWindowDestroy = OnWindowDestroy
UIPopWindowManager.IsWindowInQueue = IsWindowInQueue

UIPopWindowManager.OnPveLevelEnter = OnPveLevelEnter
UIPopWindowManager.OnPveLevelExit = OnPveLevelExit
UIPopWindowManager.OnLoadComplete = OnLoadComplete

return UIPopWindowManager