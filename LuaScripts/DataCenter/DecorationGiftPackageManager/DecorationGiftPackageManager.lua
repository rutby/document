---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/2/7 10:52
---
local DecorationGiftPackageManager = BaseClass("DecorationGiftPackageManager")
local DecorationGiftPackageData = require "DataCenter.DecorationGiftPackageManager.DecorationGiftPackageData"
local function __init(self)
    self.activityId = 0
    self.data = nil
end

local function __delete(self)
    self.activityId = 0
    self.data = nil
end

local function GetActivityData(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.GetSkinActivityInfo, activityId)
end

local function GetActivityDataHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        self:UpdateData(message)
        EventManager:GetInstance():Broadcast(EventId.DecorationActivityDataUpdate)
    end
end

local function GetActivityDataReward(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.ReceiveSkinActivityReward, activityId)
end

local function GetActivityDataRewardHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        self:UpdateData(message)
        if message["reward"] then
            DataCenter.RewardManager:ShowCommonReward(message)
            for _,v in pairs(message["reward"]) do
                DataCenter.RewardManager:AddOneReward(v)
            end
        end
        EventManager:GetInstance():Broadcast(EventId.DecorationActivityDataUpdate)
    end
end

local function ActivityRewardStatePushHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        self:UpdateData(message)
        EventManager:GetInstance():Broadcast(EventId.DecorationActivityDataUpdate)
    end
end

local function GetData(self)
    return self.data
end

local function UpdateData(self, data)
    if self.data == nil then
        self.data = DecorationGiftPackageData.New()
    end
    self.data:ParseData(data)
end

local function GetRedPotCount(self)
    if self.data and self.data.rewardState == 1 then
        return 1
    end 
    return 0
end

local function NeedShowNew(self)
    if self.shopInfo == nil then
        return false
    end

    return self:CheckIfIsNew()
end

local function CheckIfIsNew(self)
    local key = "DecorationGiftPackageFirstOpen_" .. LuaEntry.Player.uid
    local isFirstOpen = CS.GameEntry.Setting:GetBool(key, true)
    return isFirstOpen
end

local function SetIsNew(self)
    local key = "DecorationGiftPackageFirstOpen_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetBool(key, false)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

DecorationGiftPackageManager.__init = __init
DecorationGiftPackageManager.__delete = __delete
DecorationGiftPackageManager.GetData = GetData
DecorationGiftPackageManager.ActivityRewardStatePushHandler = ActivityRewardStatePushHandler
DecorationGiftPackageManager.GetActivityDataRewardHandler = GetActivityDataRewardHandler
DecorationGiftPackageManager.GetActivityDataReward = GetActivityDataReward
DecorationGiftPackageManager.GetActivityDataHandler = GetActivityDataHandler
DecorationGiftPackageManager.GetActivityData = GetActivityData
DecorationGiftPackageManager.UpdateData = UpdateData
DecorationGiftPackageManager.GetRedPotCount = GetRedPotCount
DecorationGiftPackageManager.NeedShowNew = NeedShowNew
DecorationGiftPackageManager.CheckIfIsNew = CheckIfIsNew
DecorationGiftPackageManager.SetIsNew = SetIsNew

return DecorationGiftPackageManager