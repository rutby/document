---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/4/11 18:22
---

local CityWallData = BaseClass("CityWallData")
local CityWallConfig = require "DataCenter.CityWall.CityWallConfig"

local CanBeAttackMaxId = 32

local FallReverseMin = 8
local FallReverseMax = 27

local function __init(self, id)
    self.uuid = id + 400000
    self.id = id
    self.group = self:GetRepairGroup()
    self.req = nil
    self.deltaHp = 0
    self.created = false
    self.active = true
    self.animName = CityWallAnim.Idle
    self.config = CityWallConfig.OriginDict[id]
    self.canBeAttack = (id <= CanBeAttackMaxId)
    self.hasHurt = false
    self.pos = Vector3.New(self.config.posX, self.config.posY, self.config.posZ)
    self.rot = Quaternion.Euler(self.config.rotX, self.config.rotY, self.config.rotZ)
    self.scale = Vector3.New(self.config.scaleX, self.config.scaleY, self.config.scaleZ)
end

local function SetReq(self, req)
    self.req = req
end

local function OnCreate(self)
    self.gameObject = self.req.gameObject
    self.gameObject.name = "CityWall_" .. self.id
    self.gameObject.layer = self.config.layer
    self.gameObject:SetActive(self.active)
    self.transform = self.gameObject.transform
    self.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
    self.transform.position = self.pos
    self.transform.rotation = self.rot
    self.transform.localScale = self.scale
    self.anim = self.gameObject:GetComponentInChildren(typeof(CS.SimpleAnimation))
    if self:IsBroken() then
        if self.id >= FallReverseMin and self.id <= FallReverseMax then
            self.animName = CityWallAnim.Fallen2
        else
            self.animName = CityWallAnim.Fallen
        end
    else
        self.animName = CityWallAnim.Idle
    end
    if self.anim then
        self.anim:Play(self.animName)
    end
    self.created = true
    self:Refresh()
end

local function Destroy(self)
    self.created = false
    self.animName = CityWallAnim.Idle
    if self.req then
        self.req:Destroy()
        self.req = nil
    end
    DataCenter.CityHudManager:Destroy(self.uuid)
end

local function SetActive(self, active)
    self.active = active
    if self.created then
        self.gameObject:SetActive(active)
    end
end

local function PlayAnim(self, animName)
    self.animName = animName
    if self.created and self.anim then
        self.anim:Play(animName)
    end
end

local function Hurt(self, damage)
    local wasBroken = self:IsBroken()
    self.deltaHp = self.deltaHp - damage
    if self:IsBroken() and not wasBroken then
        EventManager:GetInstance():Broadcast(EventId.CityWallBroken, self.id)
    end
    if not self.hasHurt then
        self.hasHurt = true
        DataCenter.CityWallManager:SendBreakWall(self.id)
    end
    self:Refresh()
end

local function GetCurHp(self)
    local maxHp = self:GetMaxHp()
    local curHp = maxHp + self.deltaHp
    return Mathf.Clamp(curHp, 0, maxHp)
end

local function GetMaxHp(self)
    return DataCenter.CityWallManager:GetWallMaxHp()
end

local function SetHasHurt(self, hasHurt)
    self.hasHurt = hasHurt
    if not hasHurt then
        self.deltaHp = 0
    end
    self:Refresh()
end

local function IsBroken(self)
    return self.hasHurt and self:GetCurHp() <= 0
end

local function Refresh(self)
    self:CheckShowHp()
    if self.created then
        local isFallen = self:IsBroken()
        local wasFallen = (self.animName == CityWallAnim.Fall or self.animName == CityWallAnim.Fallen or self.animName == CityWallAnim.Fall2 or self.animName == CityWallAnim.Fallen2)
        if isFallen and not wasFallen then
            if self.id >= FallReverseMin and self.id <= FallReverseMax then
                self:PlayAnim(CityWallAnim.Fall2)
            else
                self:PlayAnim(CityWallAnim.Fall)
            end
        elseif not isFallen and wasFallen then
            if self.id >= FallReverseMin and self.id <= FallReverseMax then
                self:PlayAnim(CityWallAnim.Up2)
            else
                self:PlayAnim(CityWallAnim.Up)
            end
        end
    end
end

local function CheckShowHp(self)
    if self.created and self.hasHurt then
        local maxHp = self:GetMaxHp()
        local curHp = self:GetCurHp()
        if not self:IsBroken() and curHp < maxHp then
            local hudParam = {}
            hudParam.uuid = self.uuid
            hudParam.id = self.id
            hudParam.pos = self.pos
            hudParam.type = CityHudType.WallHp
            hudParam.worldOffset = Vector3.New(0, 0.5, 0)
            hudParam.location = CityHudLocation.World
            DataCenter.CityHudManager:Create(hudParam)
            return
        end
    end
    
    DataCenter.CityHudManager:Destroy(self.uuid, CityHudType.WallHp)
end

local function Load(self)
    if self.canBeAttack then
        self.deltaHp = Setting:GetPrivateInt("CITY_WALL_DELTA_HP_" .. self.id, 0)
    end
end

local function Save(self)
    if self.canBeAttack then
        Setting:SetPrivateInt("CITY_WALL_DELTA_HP_" .. self.id, self.deltaHp)
    end
end

local function GetRepairGroup(self)
    for i, list in pairs(CityWallRepairGroupIds) do
        if table.hasvalue(list, self.id) then
            return i
        end
    end
    return 0
end

CityWallData.__init = __init

CityWallData.SetReq = SetReq
CityWallData.OnCreate = OnCreate
CityWallData.Destroy = Destroy
CityWallData.SetActive = SetActive
CityWallData.PlayAnim = PlayAnim
CityWallData.Hurt = Hurt
CityWallData.GetCurHp = GetCurHp
CityWallData.GetMaxHp = GetMaxHp
CityWallData.SetHasHurt = SetHasHurt
CityWallData.IsBroken = IsBroken
CityWallData.Refresh = Refresh
CityWallData.CheckShowHp = CheckShowHp
CityWallData.Load = Load
CityWallData.Save = Save
CityWallData.GetRepairGroup = GetRepairGroup

return CityWallData
