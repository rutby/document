---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Remodify yixing - 2021/12/1 18:04:56
--- 冠军对决--info活动
---  

---@class ActChampionBattleInfo

local ActChampionBattleInfo = BaseClass("ActChampionBattleInfo")
local ActChampionGroupInfo = require "DataCenter.ActChampionBattleManager.ActChampionGroupInfo"

local function __init(self)
    self.startTime = 0
    self.endTime = 0
    self.auditionsST = 0
    self.strongestST = 0
    self.nextRoundST = 0
    self.groupData = nil
    self.groupST = 0
    self.strongestPhase = 0
end

local function __delete(self)
    self.startTime = 0
    self.endTime = 0
    self.auditionsST = 0
    self.strongestST = 0
    self.nextRoundST = 0
    self.groupData = nil
    self.groupST = 0
    self.strongestPhase = 0
end

local function parseServerData(self, message)
    if message == nil then
        return
    end
    --数据调整，添加字段 0 报名 1 海选 2 淘汰赛
    if message["startTime"] ~= nil then
        self.startTime = message["startTime"]
    end
    if message["endTime"] ~= nil then
        self.endTime = message["endTime"]
    end
    if message["auditionsST"] ~= nil then
        self.auditionsST = message["auditionsST"]
    end
    if message["strongestST"] ~= nil then
        self.strongestST = message["strongestST"]
    end
    if message["groupST"] ~= nil then
        self.groupST = message["groupST"]
    end
    if message["strongestPhase"] ~= nil then
        self.strongestPhase = message["strongestPhase"]
    end
    if message["phase"] ~= nil then
        self.phase = message["phase"]
    end
    if message["hasSingUp"] ~= nil then
        --(1 已报名 0 未报名 -1 报名已满)
        self.hasSingUp = message["hasSingUp"]
    end
    self:UpdateFormationInfo(message)
    if message["currNum"] ~= nil then
        self.currNum = message["currNum"]
    end
   if message["auditionsData"] ~= nil then --海选数据
        self.auditionsData = message["auditionsData"]

        if self.auditionsData["nextRoundST"] ~= nil then --下一局开始时间（最后五分钟不可操作编队阵容）(-1表示整个比赛结束)
            self.nextRoundST = self.auditionsData["nextRoundST"]
        end
        --海选阶段状态: 0 海选中，1海选胜出，-1海洗被淘汰
        if self.auditionsData["auditionsState"] ~= nil then
            self.auditionsState = self.auditionsData["auditionsState"]
        end
        if self.auditionsData["totalRound"] ~= nil then
            self.totalRound = self.auditionsData["totalRound"]
        end
        if self.auditionsData["winRound"] ~= nil then
            self.winRound = self.auditionsData["winRound"]
        end
        if self.auditionsData["loseRound"] ~= nil then
            self.loseRound = self.auditionsData["loseRound"]
        end
        if self.auditionsData["curRound"] ~= nil then
            self.curRound = self.auditionsData["curRound"]
        end
        if self.auditionsData["rewardBoxList"] ~= nil then
            self.rewardBoxList = self.auditionsData["rewardBoxList"]
            -- --for debug
            local tenResult = ""
            for i = 1, #self.rewardBoxList do
                if self.rewardBoxList[i]["state"] ~= nil then
                    tenResult = tenResult.."_"..self.rewardBoxList[i]["state"]
                end
            end
            Logger.Log("ActChampionBattleInfo:ten result = %s " , tenResult)
        end
        if self.auditionsData["previewMatchObject"] ~= nil then
            self.previewMatchObject = self.auditionsData["previewMatchObject"]
        end
        if self.auditionsData["nextRoundST"] ~= nil then
            self.nextRoundST = self.auditionsData["nextRoundST"]
        end
   end

    if message["serverId1"] then
        self.serverId1 = tostring(message["serverId1"])
    end

    if message["serverId2"] then
        self.serverId2 = tostring(message["serverId2"])
    end

    --争霸赛阶段数据
   if message["strongestData"] ~= nil then 
        self.strongestData = message["strongestData"]
        if self.strongestData["topEightMembers"] ~= nil and #self.strongestData["topEightMembers"] > 0 then
            self.topEightMembers = self.strongestData["topEightMembers"]
            --争霸阶段预览左右侧数据
            self.leftMembers = {}
            self.rightMembers = {}
            if self.topEightMembers ~= nil then
                for i = 1, #self.topEightMembers do
                    local member = self.topEightMembers[i]
                    if member ~= nil then
                        if i % 2 == 0 then
                            table.insert(self.leftMembers , member)
                        else
                            table.insert(self.rightMembers , member)
                        end
                    end
                end
            end    
            table.sort(self.leftMembers,function (member1,member2)
                return tonumber(member1.score) > tonumber(member2.score)
            end)
            table.sort(self.rightMembers,function (member1,member2)
                return tonumber(member1.score) > tonumber(member2.score)
            end)        
        end

        --争霸阶段状态: 是否被淘汰
        self.strongObsolete = false
        
        if self.strongestData["topTwoGroup"] ~= nil and #self.strongestData["topTwoGroup"] > 0 then
            self.topTwoGroup = self.strongestData["topTwoGroup"]
            self:CheckIsObsoleteInStrongest(self.topTwoGroup)
        end
        if self.strongestData["topFourGroup"] ~= nil and #self.strongestData["topFourGroup"] > 0 then
            self.topFourGroup = self.strongestData["topFourGroup"]
            self:CheckIsObsoleteInStrongest(self.topFourGroup)
        end
        if self.strongestData["topEightGroup"] ~= nil and #self.strongestData["topEightGroup"] > 0 then
            self.topEightGroup = self.strongestData["topEightGroup"]
            self:CheckIsObsoleteInStrongest(self.topEightGroup)
        end
        if self.strongestData["nextRoundST"] ~= nil then
            self.strongestNextRoundST = self.strongestData["nextRoundST"]
        end
        --标识=1：8进4  2：4进2   3：决赛----self.strongestData["strongestType"]==nil时，服务器没有传此值，认为已决出冠军
        self.strongestType = ChampionBattlePosterType.Strongest_Two
        if self.strongestData["strongestType"] ~= nil then
            self.strongestType = self.strongestData["strongestType"]
        end
   end
    if message["groupData"] then
        self.groupData = ActChampionGroupInfo.New()
        self.groupData:ParseServerData(message["groupData"])
    end
    self:CheckRedDot()
end

local function UpdateFormationInfo(self, message)
    if message["formationArray"] ~= nil then
        self.formationArray = {}
        table.walk(message["formationArray"], function (_, v)
            self:ParseFormationInfo(v)
        end)
        
        table.sort(self.formationArray, function (k, v) 
            return k ~= nil and v ~= nil and k.formationId > v.formationId
        end)
    end
end

local function ParseFormationInfo(self, data)
    if data ~= nil then
        local tmp = {}
        tmp["formationId"] = data.formationId
        tmp["power"] = data.power
        if data.armyInfo ~= nil then
            local armyUnit = PBController.ParsePb1(data.armyInfo, "protobuf.ArmyUnitInfo")
            tmp["heroes"] = {}
            local hasDeleteHero = false
            table.walk(armyUnit.heroes, function (k, v)
                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v.heroUuid)
                if heroData ~= nil then
                    table.insert(tmp["heroes"], v)
                else
                    hasDeleteHero = true
                end
            end)
            if hasDeleteHero == true then
                local heroes = {}
                table.walk(tmp["heroes"],function(k,v)
                    heroes[v.heroUuid] = v.index
                end)
                local asPlayerMaxSoldiers = toInt(MarchUtil.GetMaxCanAddSoldierNum(heroes, data.formationId))
                tmp["soldiers"] = {}
                local count = 0
                table.walk(armyUnit.soldiers, function (k, v) 
                    local currentNum = v.total

                    if count + currentNum >= asPlayerMaxSoldiers then
                        currentNum = (asPlayerMaxSoldiers - count)
                    end
                    currentNum = math.max(currentNum, 0)
                    v.total = currentNum
                    table.insert(tmp["soldiers"], v)
                    count = count + currentNum
                end)
            else
                tmp["soldiers"] = armyUnit.soldiers
            end
        end
        table.insert(self.formationArray, tmp)
    end
end

local function GetFormationData(self, index)
    if self.formationArray == nil then
        return nil
    end
    for _, v in ipairs(self.formationArray) do
        if v ~= nil and v.formationId == index then
            return v
        end
    end
    return nil
end

local function GetFormationHeroPic(self, index)
    if self.formationArray == nil then
        return nil
    end
    for _, v in ipairs(self.formationArray) do
        if v ~= nil and v.formationId == index then
            if v["heroes"] ~= nil and table.count(v["heroes"]) > 0 then
                return HeroUtils.GetHeroIconPath(v["heroes"][1].heroId)
            end
        end
    end
    return nil
end

local function GetHeroIndexInFormation(self, heroUUid)
    if self.formationArray == nil then
        return 0
    end
    
    for _, k in ipairs(self.formationArray) do
        for _, v in ipairs(k["heroes"]) do
            if v.heroUuid == heroUUid then
                return k.formationId
            end
        end
    end

    return 0
end

--检查在已进入争霸后，此阶段是否被淘汰，true被淘汰
local function CheckIsObsoleteInStrongest(self, dataList)
    if self.strongObsolete ~= true then
        if dataList ~= nil then
            for i = 1, #dataList do
                local member = dataList[i]
                if member ~= nil and member.loseUid == LuaEntry.Player.uid then
                    self.strongObsolete = true
                end 
            end
        end
    end    
end

--争霸赛阶段--通过uid查找返回的某个8强玩家信息
local function GetPlayerMsgByUid(self, uid)
    local onePlayerMsg = nil
    if uid == nil or uid == "" then
        Logger.Log("ActChampionBattleInfo:GetPlayerMsgByUid 查找的uid = nil")
        return onePlayerMsg
    end
    if self.topEightMembers ~= nil then
        for i = 1, #self.topEightMembers do
            local onePlayerData = self.topEightMembers[i]
            if onePlayerData ~= nil then
                if tostring(uid) == tostring(onePlayerData["uid"]) then
                    onePlayerMsg = onePlayerData
                    return onePlayerMsg
                end
            end            
        end
    end
    return onePlayerMsg
end

--获取活动冠军之王的数据，显示冠军海报
local function GetChampionKingData(self)
    local king = nil
    if self.topTwoGroup ~= nil then
        for i = 1, #self.topTwoGroup do
            local member = self.topTwoGroup[i]
            if member ~= nil and member.winUid ~= nil then
               king = self:GetPlayerMsgByUid(member.winUid)
               return king
            end
        end
    end
    return king
end

--获取最强玩家数据,如果没有数据，返回空
--type 8强=1 / 4强=2 / 2强=3 / 冠军=4
local function GetStrongestPosterDataByType(self, type)
    local list = nil
    if type == ChampionBattlePosterType.Strongest_Eight then
        list = self.topEightGroup
    elseif type == ChampionBattlePosterType.Strongest_Four then
        list = self.topFourGroup
    elseif type == ChampionBattlePosterType.Strongest_Two then
        list = self.topTwoGroup
    elseif type == ChampionBattlePosterType.Strongest_King then
        local king = self:GetChampionKingData()
        if king ~= nil then
            list = {}
            table.insert(list , king)
        end
    end
    if list ~= nil and #list > 0 then
        return list
    end
    return nil
end

---获取活动当前状态:ActivityEnum.Activity_ChampionBattle_Stage_State
---SingUp = 1, --报名阶段;  Auditions = 2, --海选阶段;  Strongest = 3,--巅峰对决\
local function GetCurState(self)
    local state = Activity_ChampionBattle_Stage_State.None
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.startTime - curTime > 0 then
        --活动尚未开启,正常不会有此阶段，出现打log
        Logger.Log("ActChampionBattleInfo：活动尚未开启")
    elseif self.endTime - curTime < 0 then
        --活动已经结束,正常不会有此阶段，出现打log
        Logger.Log("ActChampionBattleInfo：活动已经结束")
    else
        if self.phase == Activity_ChampionBattle_Stage_State.SingUp then
            state = self.phase
        else
            if self.groupData == nil then
                state = Activity_ChampionBattle_Stage_State.Auditions
            else
                if self.strongestPhase >= Activity_ChampionBattle_Elite_Stage_State.QUARTER_PHASE then
                    state = Activity_ChampionBattle_Stage_State.Strongest
                else
                    state = Activity_ChampionBattle_Stage_State.Strongest_64
                end
            end
        end
    end

    return state
end

--通过uid获取此玩家海选排名
local function GetPlayerRankByUid(self, uid)
    local rank = 0
    table_walk(self.leftMembers , function(k,v)
        if v ~= nil and uid == v.uid then
            rank = k
            return
        end
    end)
    if rank == 0 then
        table_walk(self.rightMembers , function(k,v)
            if v ~= nil and uid == v.uid then
                rank = k
                return
            end
        end)
    end
    return rank
end

--检查红点
-- 每阶段开启（报名，海选，巅峰赛）
-- 晋级
-- 淘汰
-- 四强决出
-- 二强决出
-- 冠军决出
local function CheckRedDot(self)
    --由服务器控制，不在这里检查
   return false
end

ActChampionBattleInfo.__init = __init
ActChampionBattleInfo.__delete = __delete
ActChampionBattleInfo.parseServerData = parseServerData
ActChampionBattleInfo.CheckIsObsoleteInStrongest = CheckIsObsoleteInStrongest
ActChampionBattleInfo.GetPlayerMsgByUid = GetPlayerMsgByUid
ActChampionBattleInfo.GetChampionKingData = GetChampionKingData
ActChampionBattleInfo.GetStrongestPosterDataByType = GetStrongestPosterDataByType
ActChampionBattleInfo.GetCurState = GetCurState
ActChampionBattleInfo.GetPlayerRankByUid = GetPlayerRankByUid
ActChampionBattleInfo.CheckRedDot = CheckRedDot
ActChampionBattleInfo.UpdateFormationInfo = UpdateFormationInfo
ActChampionBattleInfo.ParseFormationInfo = ParseFormationInfo
ActChampionBattleInfo.GetFormationData = GetFormationData
ActChampionBattleInfo.GetFormationHeroPic = GetFormationHeroPic
ActChampionBattleInfo.GetHeroIndexInFormation = GetHeroIndexInFormation

return ActChampionBattleInfo