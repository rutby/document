---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/1/26 12:03
---
local ActChampionBattleInfo = require "DataCenter.ActChampionBattleManager.ActChampionBattleInfo"
local ActChampionBattleReportList = require "DataCenter.ActChampionBattleManager.ActChampionBattleReportList"
local ActChampionBattleBetRecordsInfo = require "DataCenter.ActChampionBattleManager.ActChampionBattleBetRecordsInfo"
local ActChampionBattleManager = BaseClass("ActChampionBattleManager");

local function __init(self)
    self.entranceOpenState = false
    self.redReason = nil
    self.redStartTime = nil
    self.totalFightRound = -1
    self.needShowRecord = false
    EventManager:GetInstance():AddListener(EventId.UpdateTask, self.UpdateActTaskState)
end

local function __delete(self)
    EventManager:GetInstance():AddListener(EventId.UpdateTask, self.UpdateActTaskState)
    self:RemoveOneDayPassTimer()
    self.championBattleInfo = nil
    self.championBattleReportList = nil
    self.needShowRecord = nil
end

--更新冠军对决info数据
local function RefreshChampionBattleInfo(self, message)
    if message["shownEliteAct"] and not message["shownEliteAct"] then
        self:RemoveOneDayPassTimer()
        self:SetEntranceOpenState(message["shownEliteAct"])
        return
    end

    if self.championBattleInfo == nil then
        self.championBattleInfo = ActChampionBattleInfo.New()
    end
    self.championBattleInfo:parseServerData(message)
    local currentWin = self.championBattleInfo.winRound or 0
    local currentLose = self.championBattleInfo.loseRound or 0
    if self.totalFightRound ~= -1 and self.totalFightRound ~= currentWin + currentLose then
        self.needShowRecord = true
    end
    self.totalFightRound = currentWin + currentLose
    self:AddOneDayPassTimer()

    EventManager:GetInstance():Broadcast(EventId.ChampionBattleDataRefresh)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    EventManager:GetInstance():Broadcast(EventId.ChampionBattleEntranceNotice)
end

local function GetNeedShowRecord(self)
    return self.needShowRecord
end

local function ResetNeedShowRecord(self)
    self.needShowRecord = false
end

local function RefreshChampionBattleTeamInfo(self, message, notSendEvent)
    if self.championBattleInfo == nil then
        self.championBattleInfo = ActChampionBattleInfo.New()
    end
    self.championBattleInfo:UpdateFormationInfo(message)
    EventManager:GetInstance():Broadcast(EventId.OnUpdateTeamDataEvent)
    EventManager:GetInstance():Broadcast(EventId.ChampionBattleEntranceNotice)
end

--更新冠军对决战报列表数据
local function RefreshChampionBattleReportList(self, message)
    if self.championBattleReportList == nil then
        self.championBattleReportList = ActChampionBattleReportList.New()
    end
    self.championBattleReportList:ParseServerData(message)

    --弹出战报列表界面
    --GameEntry.UI:OpenUIByKey("LFChampionBattleFight")
    UIManager:GetInstance():OpenWindow(UIWindowNames.LFChampionBattleFight)
end

local function UpdateActTaskState(self, taskId)

end
--获取冠军对决info数据
local function GetChampionBattleInfo(self)
    return self.championBattleInfo
end

--获取冠军对决战报列表数据
local function GetChampionBattleReportList(self)
    return self.championBattleReportList
end

local function GetFormationData(self, index)
    if self.championBattleInfo ~= nil then
        return self.championBattleInfo:GetFormationData(index)
    end
    return nil
end

local function GetFormationHeroPic(self, index)
    if self.championBattleInfo ~= nil then
        return self.championBattleInfo:GetFormationHeroPic(index)
    end
    return nil
end

local function GetFormationIsOpen(self, index)
    local checkBuilding = function(buildType) 
        local build = DataCenter.BuildManager:GetFunbuildByItemID(buildType)
        return build and build.level > 0
    end
    if index == 1 then
        return checkBuilding(BuildingTypes.FUN_BUILD_TRAINFIELD_1)
    end
    if index == 2 then
        return checkBuilding(BuildingTypes.FUN_BUILD_TRAINFIELD_2)
    end
    if index == 3 then
        return checkBuilding(BuildingTypes.FUN_BUILD_TRAINFIELD_3)
    end
    if index == 4 then
        return checkBuilding(BuildingTypes.FUN_BUILD_TRAINFIELD_4)
    end
    return false
end

local function GetHeroIndexInFormation(self, heroUUid)
    if self.championBattleInfo ~= nil then
        return self.championBattleInfo:GetHeroIndexInFormation(heroUUid)
    end
    return 0
end

--检查活动是否已经结束
local function CheckIsOver(self)
    local isOver = true
    if self.championBattleInfo ~= nil then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local endTime = self.championBattleInfo.endTime
        if endTime > curTime then
            isOver = false
        end
    end
    return isOver
end

--活动是否开启
local function CheckIsOpen(self)
    local isOpen = true
    isOpen = self.championBattleInfo ~= nil
    return isOpen
end

--活动入口开头状态
local function GetEntranceOpenState(self)
    return self.entranceOpenState
end

local function SetEntranceOpenState(self, state)
    self.entranceOpenState = state

    if self.entranceOpenState then
        local mainBuildLV = DataCenter.BuildManager.MainLv
        local showLv = LuaEntry.DataConfig:TryGetNum("champ_battle", "k3")
        if mainBuildLV >= showLv then
            self:SendActChampBattleDataRefreshCmd() 
        end
    end
    
    EventManager:GetInstance():Broadcast(EventId.ChampionBattleEntranceNotice)
end

--同步刷新红点数据
local function RefreshRedPoint(self, msg)
    -- Logger.Log("推送红点消息节能")
    self.redStartTime = msg["startTime"]
    self.redReason = msg["reason"]
    --宝箱类型特殊处理一下
    if self.redReason == 8 then
        self.redStartTime = UITimeManager:GetInstance():GetServerTime()
    end
    self:CheckEntranceRed(self.redStartTime , self.redReason)
end

local function GetRedPointKey(self)
    return "Act_ChampionBattle_"..self.redStartTime.."_"..self.redReason
end

local function HasRewardNotReceive(self)
    if self.championBattleInfo ~= nil and self.championBattleInfo.rewardBoxList ~= nil then
        for _, v in ipairs(self.championBattleInfo.rewardBoxList) do
            if v.state == AuditionsBoxState.CanReceive then
                return true
            end
        end
    end
    return false
end

local function ShowRedPointKey(self)
    if self.championBattleInfo ~= nil and self.championBattleInfo.rewardBoxList ~= nil then
        for _, v in ipairs(self.championBattleInfo.rewardBoxList) do
            if v.state == AuditionsBoxState.CanReceive then
                return true
            end
        end
    end
    if self.redStartTime == nil or self.redReason == nil then
        return false
    end
    local hasOpened = Setting:GetBool(self:GetRedPointKey(), false)
    return not hasOpened
end

--检查活动入口红点状态
local function CheckEntranceRed(self, startTime,reason)
    EventManager:GetInstance():Broadcast(EventId.ChampionBattleEntranceNotice)
end

-- --设置活动入口红点状态
local function SetEntranceRed(self)
    Setting:SetBool(self:GetRedPointKey(), true)
    EventManager:GetInstance():Broadcast(EventId.ChampionBattleEntranceNotice)
end

--获取活动冠军海报是否打开过
local function GetChampionPosterState(self, startTime)
    local state = Setting:GetBool("Act_ChampionBattle_Poster"..startTime,true)
    return state
end

--设置活动冠军海报是否打开过
--打开过false, 未打开过true
local function SetChampionPosterState(self, startTime, state)
    Setting:SetBool("Act_ChampionBattle_Poster"..startTime, state);
    --GameEntry.RedDot:Set("Act_ChampionBattle_Poster/"..startTime, state)
end

--获取8/4/2强海报打开状态海报是否打开过
local  function GetChampionStrongestPoster(self, type, startTime)
    local localPrivateKey = "Act_ChampionStrongestPoster"..startTime.."_type_"
    local state = Setting:GetBool(localPrivateKey..type, true)
    return state
end

--设置8/4/2强海报已打开状态
--若同时存在了多个海报，只需要打开最高级海报，低级海报本次活动不再打开
local function SetChampionStrongestPoster(self, type, startTime , state)
    local localPrivateKey = "Act_ChampionStrongestPoster"..startTime.."_type_"
    local postfix = nil
    if type == ChampionBattlePosterType.Strongest_Eight then
        --
    elseif type == ChampionBattlePosterType.Strongest_Four then
        Setting:SetBool(localPrivateKey..ChampionBattlePosterType.Strongest_Eight, state)
    elseif type == ChampionBattlePosterType.Strongest_Two then
        Setting:SetBool(localPrivateKey..ChampionBattlePosterType.Strongest_Eight, state)
        Setting:SetBool(localPrivateKey..ChampionBattlePosterType.Strongest_Four, state)
    elseif type == ChampionBattlePosterType.Strongest_King then
        Setting:SetBool(localPrivateKey..ChampionBattlePosterType.Strongest_Eight, state)
        Setting:SetBool(localPrivateKey..ChampionBattlePosterType.Strongest_Four, state)
        Setting:SetBool(localPrivateKey..ChampionBattlePosterType.Strongest_Two, state)
    end

    Setting:SetBool(localPrivateKey..type, state)
    --GameEntry.RedDot:Set("Act_ChampionStrongestPoste/"..startTime, state)
    --Logger.Log("Act_ChampionStrongestPoste: 设置海报="..tostring(state))
end

--转换后端同步押注记录数据，为客户端显示使用格式
local function SwitchRecordsData(self, msg)
    local list = {}
    if msg == nil then
        return list
    end

    for i = 1, #msg.recordArray do
        local records = msg.recordArray[i]
        local player = records.playerInfo
        local betState = records.state
        for i = 1, #records.betRecords do
            local itemData = records.betRecords[i]
            ---@type ActChampionBattleBetRecordsInfo
            local data = ActChampionBattleBetRecordsInfo.New()
            if i == 1 then
                data:parseServerData(1, player , itemData, records.state)
            else
                data:parseServerData(3, player , itemData, records.state)
            end

            table.insert(list , data)
        end
        --结果状态
        ---@type ActChampionBattleBetRecordsInfo
        local data = ActChampionBattleBetRecordsInfo.New()
        data:parseServerData(2, player , records.totalWinCount, records.state)
        table.insert(list , data)
    end
    return list
end

--格式化排行榜显示排名
local function SetRankIndexFormat(self, rankIndex)
    local rankIndexStr = ""
    if rankIndex == nil or rankIndex == "" then
        return rankIndexStr
    end
    if rankIndex > 999 then
        rankIndexStr = "999+"
    elseif rankIndex > 500 then
        rankIndexStr = "500+"
    elseif rankIndex > 200 then
        rankIndexStr = "200+"
    elseif rankIndex > 150 then
        rankIndexStr = "150+"
    elseif rankIndex <= 0 then
        rankIndexStr = "-"
    else
        rankIndexStr = tostring(rankIndex)
    end
    return rankIndexStr
end

------------------------------------冠军对决-START--------------------------------------------------
--报名请求
local function SendActChampionBattleSingUpCmd(self)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_SINGUP)
end
--请求冠军对决数据
local function SendActChampBattleDataRefreshCmd(self)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_DATA_REFRESH)

end
--请求海选宝箱领取
local function SendActChampionBattleRewardCmd(self, boxIndex)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_REWARD, boxIndex)
end
--请求冠军对决奖励预览
local function SendActChampBattleRewardPreviewCmd(self)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_REWARD_VIEW)
end

--请求冠军对决战报列表
local function SendActChampionBattleReportListCmd(self)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_REPORT_LIST)
end
--请求冠军对决战报详细信息
local function SendActChampionBattleReportDescCmd(self, type, reportId)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_REPORT_DESC, type, reportId)
end
--请求冠军对决战报详细信息
local function SendActChampionStrongestReportDescCmd(self, phase, location, group)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONSTRONGEST_REPORT_LIST, phase, location, group)
end
--请求冠军对决押注界面数据
local function SendChampionBattleBetViewCmd(self, phase, location)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_BET_VIEW, phase, location)
end
--请求冠军对决-下注请求
local function SendChampionBattleBetCmd(self, phase, location, bettedIndex, count)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_BET, phase, location, bettedIndex, count)
end
--请求冠军对决-押注记录数据请求
local function SendChampionBattleBetRecordCmd(self)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_BET_RECORD)
end
--保存formation
local function SendChampionBattleFormationSave(self, formations)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_SAVE_FORMATION, formations)
end
--获取排名数据
local function SendChampionBattleRankData(self)
    SFSNetwork.SendMessage(MsgDefines.ACT_CHAMPIONBATTLE_GET_RANK_DATA)
end

local function GetLastRecordRound(self)
    local saveKey = self:GetRecordKey()
    if saveKey == nil then
        return nil
    end
    local saveStr = Setting:GetString(saveKey, "")
    if string.IsNullOrEmpty(saveKey) then
        return 0, 0, 0
    end
    local vec = string.split(saveStr, "_")
    if vec == nil or table.count(vec) ~= 3 then
        return 1, 0, 0
    end
    return toInt(vec[1]), toInt(vec[2]), toInt(vec[3])
end

local function GetCurrentRecordRound(self)
    if self.championBattleInfo == nil or self.championBattleInfo:GetCurState() ~= Activity_ChampionBattle_Stage_State.Auditions or self.championBattleInfo.hasSingUp ~= 1 then
        return nil
    end
    local currentRound = self.championBattleInfo.curRound
    local currentWin = self.championBattleInfo.winRound
    local currentLose = self.championBattleInfo.loseRound
    return currentRound, currentWin, currentLose
end

local function SaveLastRecordRound(self)
    local saveKey = self:GetRecordKey()
    if saveKey == nil then
        return
    end
    local currentRound, currentWin, currentLose = self:GetCurrentRecordRound()
    if currentRound == nil then
        return
    end    
    
    local saveStr = tostring(currentRound).."_"..tostring(currentWin).."_"..tostring(currentLose)
    Setting:SetString(saveKey, saveStr)
end

local function GetRecordKey(self)
    if self.championBattleInfo == nil then
        return nil
    end
    return "Act_ChampionBattle_"..self.championBattleInfo.startTime.."_"..LuaEntry.Player.uid
end

local function NeedShowRecord(self)
    local lastRound, lastWin, lastLose = self:GetLastRecordRound()
    if lastRound == nil then
        return false
    end
    if self.championBattleInfo == nil or self.championBattleInfo:GetCurState() ~= Activity_ChampionBattle_Stage_State.Auditions or self.championBattleInfo.hasSingUp ~= 1 then
        return false
    end
    local currentWin = self.championBattleInfo.winRound or 0
    local currentLose = self.championBattleInfo.loseRound or 0
    if lastLose + lastWin == currentWin + currentLose then
        return false
    end
    return true
end

local function AddOneDayPassTimer(self)
    self:RemoveOneDayPassTimer()
    local remainTimeS = UITimeManager:GetInstance():GetResSecondsTo24()
    local delayS = remainTimeS + 3
    self.timer = TimerManager:GetInstance():DelayInvoke(function()
        self:SendActChampBattleDataRefreshCmd()
        self:RemoveOneDayPassTimer()
    end, delayS)
end

local function RemoveOneDayPassTimer(self)
    if self.timer then
        self.timer:Stop()
    end
    self.timer = nil
end

------------------------------------冠军对决-END----------------------------------------------------

ActChampionBattleManager.__init = __init
ActChampionBattleManager.__delete = __delete
ActChampionBattleManager.RefreshChampionBattleInfo = RefreshChampionBattleInfo
ActChampionBattleManager.RefreshChampionBattleReportList = RefreshChampionBattleReportList
ActChampionBattleManager.UpdateActTaskState = UpdateActTaskState
ActChampionBattleManager.GetChampionBattleInfo = GetChampionBattleInfo
ActChampionBattleManager.GetChampionBattleReportList = GetChampionBattleReportList
ActChampionBattleManager.CheckIsOver = CheckIsOver
ActChampionBattleManager.CheckIsOpen = CheckIsOpen
ActChampionBattleManager.GetEntranceOpenState = GetEntranceOpenState
ActChampionBattleManager.SetEntranceOpenState= SetEntranceOpenState
ActChampionBattleManager.RefreshRedPoint = RefreshRedPoint
ActChampionBattleManager.CheckEntranceRed = CheckEntranceRed
ActChampionBattleManager.SetEntranceRed = SetEntranceRed
ActChampionBattleManager.GetChampionPosterState = GetChampionPosterState
ActChampionBattleManager.SetChampionPosterState = SetChampionPosterState
ActChampionBattleManager.GetChampionStrongestPoster = GetChampionStrongestPoster
ActChampionBattleManager.SetChampionStrongestPoster = SetChampionStrongestPoster
ActChampionBattleManager.SwitchRecordsData = SwitchRecordsData
ActChampionBattleManager.SendActChampionBattleSingUpCmd = SendActChampionBattleSingUpCmd
ActChampionBattleManager.SendActChampBattleDataRefreshCmd = SendActChampBattleDataRefreshCmd
ActChampionBattleManager.SendActChampionBattleRewardCmd = SendActChampionBattleRewardCmd
ActChampionBattleManager.SendActChampBattleRewardPreviewCmd = SendActChampBattleRewardPreviewCmd
ActChampionBattleManager.SendActChampionBattleReportListCmd = SendActChampionBattleReportListCmd
ActChampionBattleManager.SendActChampionBattleReportDescCmd = SendActChampionBattleReportDescCmd
ActChampionBattleManager.SendActChampionStrongestReportDescCmd = SendActChampionStrongestReportDescCmd
ActChampionBattleManager.SendChampionBattleBetViewCmd = SendChampionBattleBetViewCmd
ActChampionBattleManager.SendChampionBattleBetCmd = SendChampionBattleBetCmd
ActChampionBattleManager.SendChampionBattleBetRecordCmd = SendChampionBattleBetRecordCmd
ActChampionBattleManager.SetRankIndexFormat = SetRankIndexFormat
ActChampionBattleManager.SendChampionBattleFormationSave = SendChampionBattleFormationSave
ActChampionBattleManager.GetFormationData = GetFormationData
ActChampionBattleManager.GetFormationHeroPic = GetFormationHeroPic
ActChampionBattleManager.GetFormationIsOpen = GetFormationIsOpen
ActChampionBattleManager.GetHeroIndexInFormation = GetHeroIndexInFormation
ActChampionBattleManager.RefreshChampionBattleTeamInfo = RefreshChampionBattleTeamInfo
ActChampionBattleManager.GetRedPointKey = GetRedPointKey
ActChampionBattleManager.ShowRedPointKey = ShowRedPointKey
ActChampionBattleManager.SendChampionBattleRankData = SendChampionBattleRankData
ActChampionBattleManager.GetLastRecordRound = GetLastRecordRound
ActChampionBattleManager.SaveLastRecordRound = SaveLastRecordRound
ActChampionBattleManager.GetRecordKey = GetRecordKey
ActChampionBattleManager.NeedShowRecord = NeedShowRecord
ActChampionBattleManager.GetCurrentRecordRound = GetCurrentRecordRound
ActChampionBattleManager.GetNeedShowRecord = GetNeedShowRecord
ActChampionBattleManager.ResetNeedShowRecord = ResetNeedShowRecord
ActChampionBattleManager.AddOneDayPassTimer = AddOneDayPassTimer
ActChampionBattleManager.RemoveOneDayPassTimer = RemoveOneDayPassTimer
ActChampionBattleManager.HasRewardNotReceive = HasRewardNotReceive

return ActChampionBattleManager