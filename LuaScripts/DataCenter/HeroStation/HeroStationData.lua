---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2021/12/30 17:13
---

local HeroStationData = BaseClass("HeroStationData")

local function __init(self)
    self.uid = 0
    self.stationId = 0
    self.cdTime = 0
    self.heroInfos = {}
    self.heroInfosBackup = {}
    self.slotUnlockLevelDict = {} -- Dict<index, level>
    self.skillList = {} -- List<skillId>
    self.usableSkillList = {} -- List<skillId>
    self.isDirty = false
    self.skillUsableCache = false
    self.effectOldVal = nil
end

local function __delete(self)
    self.uid = nil
    self.stationId = nil
    self.cdTime = nil
    self.heroInfos = nil
    self.heroInfosBackup = nil
    self.slotUnlockLevelDict = nil
    self.skillList = nil
    self.usableSkillList = nil
    self.isDirty = nil
    self.skillUsableCache = nil
    self.effectOldVal = nil
end

local function Init(self, stationId, serverData)
    self.stationId = stationId
    
    -- serverData
    if serverData ~= nil then
        self:UpdateServerData(serverData)
    end
    
    -- skillTemplate
    local skillTemplateList = DataCenter.HeroStationSkillTemplateManager:GetTemplateListByStationId(stationId)
    if not table.IsNullOrEmpty(skillTemplateList) then
        self.skillList = {}
        self.usableSkillList = {}
        for _, skillTemplate in pairs(skillTemplateList) do
            self.buildId = skillTemplate.building
            table.insert(self.skillList, tonumber(skillTemplate.id))
            if skillTemplate.usable then
                table.insert(self.usableSkillList, tonumber(skillTemplate.id))
            end
        end
    end
    
    -- other
    self.isDirty = false
    self.skillUsableCache = false
    self.effectOldVal = nil
end

local function UpdateServerData(self, serverData)
    if serverData.uid then
        self.uid = serverData.uid
    end
    if serverData.cdTime then
        self.cdTime = serverData.cdTime
    end
    if serverData.heroInfos then
        self.heroInfos = serverData.heroInfos
    end
end

local function GetHeroUuids(self)
    local heroUuids = {}
    for index = 1, DataCenter.HeroStationManager.HERO_COUNT do
        for _, heroInfo in pairs(self.heroInfos) do
            if heroInfo.index == index then
                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroInfo.heroUuid)
                if heroData then
                    heroUuids[index] = heroInfo.heroUuid
                end
            end
        end
    end
    return heroUuids
end

local function GetHeroUuid(self, index)
    for _, heroInfo in pairs(self.heroInfos) do
        if heroInfo.index == index then
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(heroInfo.heroUuid)
            if heroData then
                return heroInfo.heroUuid
            end
        end
    end
    return nil
end

local function SetHero(self, index, heroUuid)
    local inserted = false
    for k, v in pairs(self.heroInfos) do
        if v.index == index then
            v.heroUuid = heroUuid
            inserted = true
        else
            if v.heroUuid == heroUuid then
                self.heroInfos[k] = nil
            else
                local heroData1 = DataCenter.HeroDataManager:GetHeroByUuid(v.heroUuid)
                local heroData2 = DataCenter.HeroDataManager:GetHeroByUuid(heroUuid)
                if heroData1 and heroData2 and heroData1.heroId == heroData2.heroId then
                    self.heroInfos[k] = nil
                end
            end
        end
    end

    if not inserted then
        local heroInfo =
        {
            index = index,
            heroUuid = heroUuid,
        }
        table.insert(self.heroInfos, heroInfo)
    end
end

local function RemoveHero(self, index)
    for k, v in pairs(self.heroInfos) do
        if v.index == index then
            self.heroInfos[k] = nil
            return true
        end
    end
    
    return false
end

local function BackUpHeroInfos(self)
    self.heroInfosBackup = DeepCopy(self.heroInfos)
end

local function RestoreHeroInfos(self)
    self.heroInfos = self.heroInfosBackup
end

local function ToMessageParam(self)
    local param =
    {
        uid = self.uid,
        stationId = self.stationId,
        cdTime = self.cdTime,
        heroInfos = self.heroInfos,
    }
    return param
end

HeroStationData.__init = __init
HeroStationData.__delete = __delete

HeroStationData.Init = Init
HeroStationData.UpdateServerData = UpdateServerData
HeroStationData.GetHeroUuids = GetHeroUuids
HeroStationData.GetHeroUuid = GetHeroUuid
HeroStationData.SetHero = SetHero
HeroStationData.RemoveHero = RemoveHero
HeroStationData.BackUpHeroInfos = BackUpHeroInfos
HeroStationData.RestoreHeroInfos = RestoreHeroInfos
HeroStationData.ToMessageParam = ToMessageParam

return HeroStationData