---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/5/11 17:22
---

local WeekCardData = BaseClass("WeekCardData")

local function __init(self)
    self.id = 0
    self.type = 0
    self.typeFunction = 0
    self.exchangeId = ""--礼包packageId
    self.reward = {}
    self.name = ""
    self.desc = ""
    self.subDesc = ""
    self.image = ""
    self.itemImg = ""
    self.order = ""
    self.conditionFit = true
    self.discount = 0
    self.validDays = 0
    
    self.startTime = 0
    self.endTime = 0
    self.lastRecvTime = 0
    
    --定制周卡
    self.goods_select = ""
    self.selectedGoods = ""
    self.unlockStage = -1
    --转出数据
    self.goodsSelectList = {}--{{selectCount, rewardList},...}
    self.exchangeIdList = {}
end

local function __delete(self)
    self.id = nil
    self.type = nil
    self.typeFunction = nil
    self.exchangeId = nil--礼包packageId
    self.reward = nil
    self.name = nil
    self.desc = nil
    self.subDesc = nil
    self.image = nil
    self.itemImg = nil
    self.order = nil
    self.conditionFit = nil
    self.validDays = nil
    self.discount = nil

    self.startTime = nil
    self.endTime = nil
    self.lastRecvTime = nil

    self.goods_select = nil
    self.selectedGoods = nil
    self.unlockStage = nil
end

local function ParseData(self, message)
    if message ==nil then
        return
    end
    if message["id"] then
        self.id = message["id"]
    end
    if message["type"] then
        self.type = message["type"]
    end
    if message["type_function"] then
        self.typeFunction = message["type_function"]
    end
    if message["exchange_id"] then
        self.exchangeId = message["exchange_id"]
        if self.typeFunction == 2 then
            self.exchangeIdList = string.split(self.exchangeId, ";")
        end
    end
    if message["reward"] then
        self.reward = message["reward"]
    end
    if message["name"] then
        self.name = message["name"]
    end
    if message["description"] then
        self.desc = message["description"]
    end
    if message["description_sub"] then
        self.subDesc = message["description_sub"]
    end
    if message["image"] then
        self.image = message["image"]
    end
    if message["item_image"] then
        self.itemImg = message["item_image"]
    end
    if message["order"] then
        self.order = message["order"]
    end
    if message["condition"] then
        self.conditionFit = message["condition"]
    end
    if message["startTime"] then
        self.startTime = message["startTime"]
    end
    if message["endTime"] then
        self.endTime = message["endTime"]
    end
    if message["lastReceiveTime"] then
        self.lastRecvTime = message["lastReceiveTime"]
    end
    if message["percent"] then
        self.discount = tonumber(message["percent"])
    end
    if message["time"] then
        self.validDays = message["time"]
    end
    if message["goods_select"] then
        self.goods_select = message["goods_select"]
        self.goodsSelectList = {}
        local str1 = string.split(self.goods_select, "@")
        for i, stage in ipairs(str1) do
            local conf = {}
            local str2 = string.split(stage, ":")
            local selectCount = str2[1]
            conf.selectCount = tonumber(selectCount)
            local strRewards = string.split(str2[2], "|")
            conf.rewardList = {}
            for m, reward in ipairs(strRewards) do
                local rewardConf = string.split(reward, ";")
                local temp = {
                    index = m,
                    rewardType = RewardType.GOODS,
                    itemId = rewardConf[1],
                    count = tonumber(rewardConf[2]),
                }
                table.insert(conf.rewardList, temp)
            end
            table.insert(self.goodsSelectList, conf)
        end
    end
    if message["selectGoods"] then
        self.selectedGoods = message["selectGoods"]
    end
    if message["unlockStage"] then
        self.unlockStage = message["unlockStage"]
    end
end

local function GetSelectedTb(self)
    if string.IsNullOrEmpty(self.selectedGoods) then
        return {}
    end
    if not self:CheckIfIsBought() or self.unlockStage <= 0 then
        return {}
    end
    
    local retTb = {}
    local stageArr = string.split(self.selectedGoods, "|")
    for i, v in ipairs(stageArr) do
        local indexArr = string.split(v, ";")
        local temp = {}
        for m, n in ipairs(indexArr) do
            table.insert(temp, tonumber(n))
        end
        table.insert(retTb, temp)
    end
    return retTb
end

local function CheckIfIsBought(self)
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local hasBought = self.endTime > serverTime
    return hasBought
end

WeekCardData.__init = __init
WeekCardData.__delete = __delete
WeekCardData.ParseData = ParseData
WeekCardData.GetSelectedTb = GetSelectedTb
WeekCardData.CheckIfIsBought = CheckIfIsBought
return WeekCardData