---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/12/28 15:16
---

local FormStatusManager = BaseClass("FormStatusManager")
local FormStatusTemplate = require "DataCenter.FormStatus.FormStatusTemplate"
local FormStatusData = require "DataCenter.FormStatus.FormStatusData"

local function __init(self)
    self.templateDict = {} -- Dict<id, FormStatusTemplate>
    self.dataDict = {} -- Dict<uuid, FormStatusData>
    self.use_speed_time = 0
    self.lastTime = 0
    LocalController:instance():visitTable(TableName.FormStatus, function(id, lineData)
        local template = FormStatusTemplate.New()
        template:InitData(lineData)
        self.templateDict[id] = template
    end)

    self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
    self.timer:Start()
    self:AddListener()
end

local function __delete(self)
    self.templateDict = nil
    self.dataDict = nil
    self.use_speed_time = 0
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    self:RemoveListener()
end

local function AddListener(self)
    
end

local function RemoveListener(self)
    
end

local function TimerAction(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local updated = false
    for uuid, data in pairs(self.dataDict) do
        if data.timeType == FormStatusType.TimeBase then
            if data.endTime ~= nil and data.endTime < curTime then
                self.dataDict[uuid] = nil
                updated = true
            end
        end
    end
    if updated then
        EventManager:GetInstance():Broadcast(EventId.FormStatusUpdate)
    end
end

local function GetTemplate(self, id)
    return self.templateDict[id]
end

local function GetDataDict(self)
    return self.dataDict
end

local function GetDataList(self)
    local list = {}
    for _, data in pairs(self.dataDict) do
        table.insert(list, data)
    end
    table.sort(list, function(dataA, dataB)
        local templateA = self:GetTemplate(dataA.id)
        local templateB = self:GetTemplate(dataB.id)
        if templateA and templateB then
            return templateA.priority < templateA.priority
        else
            return dataA.id < dataB.id
        end
    end)
    return list
end

-- 是否可以发动奇袭
-- fUuid: 编队uuid
local function CanDirectAttackCity(self, fUuid)
    for _, data in pairs(self.dataDict) do
        if data.fUuid == fUuid then
            local template = self:GetTemplate(data.id)
            if template and template.type2 == FormStatusType2.DirectAttackCity then
                return true
            end
        end
    end
    return false
end

-- 是否可以发动奇袭
-- fUuid: 编队uuid
local function CanUseMasterySkill(self, fUuid,checkBuffId)
    local buffTemplate = self:GetTemplate(checkBuffId)
    if buffTemplate~=nil then
        local groupId = buffTemplate.group
        local targetName = buffTemplate.name
        for _, data in pairs(self.dataDict) do
            if data.fUuid == fUuid then
                local template = self:GetTemplate(data.id)
                if template and template.group == groupId then
                    local name = template.name
                    return false,targetName,name
                end
            end
        end
    end
    
    return true,"",""
end

--local function GetHasUseSpeedUp(self,fUuid)
--    for _, data in pairs(self.dataDict) do
--        if data.fUuid == fUuid then
--            local template = self:GetTemplate(data.id)
--            if template and template.type2 == FormStatusType2.MarchSpeed then
--                return true
--            end
--        end
--    end
--    return false
--end

local function GetMarchStatusIds(self, marchUuid)
    if marchUuid ~= nil and marchUuid ~= 0 then
        local march = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
        local fUuid = march.ownerFormationUuid
        return self:GetFormationStatusIds(fUuid)
    end
    return {}
end

local function GetFormationStatusIds(self, fUuid)
    if fUuid ~= nil and fUuid ~= 0 then
        local ids = {}
        for _, data in pairs(self.dataDict) do
            if data.fUuid == fUuid then
                table.insert(ids, data.id)
            end
        end
        return ids
    end
    return {}
end

local function HandleInit(self, message)
    if message["formation_status"] then
        for _, serverData in ipairs(message["formation_status"]) do
            local data = FormStatusData.New()
            data:ParseServerData(serverData)
            self.dataDict[data.uuid] = data
        end
        EventManager:GetInstance():Broadcast(EventId.FormStatusUpdate)
    end
end

local function HandleAdd(self, message)
    if message["uuid"] then
        local uuid = message["uuid"]
        local data = self.dataDict[uuid] or FormStatusData.New()
        data:ParseServerData(message)
        self.dataDict[uuid] = data
        EventManager:GetInstance():Broadcast(EventId.FormStatusUpdate)
    end
end

local function HandleDel(self, message)
    if message["uuid"] then
        local uuid = message["uuid"]
        self.dataDict[uuid] = nil
        EventManager:GetInstance():Broadcast(EventId.FormStatusUpdate)
    end
end

--local function GetCurRestMarchSpeedTime(self)
--    local curTime = UITimeManager:GetInstance():GetServerSeconds()
--    if not UITimeManager:GetInstance():IsSameDayForServer(self.lastTime,curTime) then
--        self.use_speed_time = 0
--    end
--    local max = LuaEntry.DataConfig:TryGetNum("army_accelerate", "k1")
--    local restNum = max-self.use_speed_time
--    return math.max(restNum,0)
--end
--
--local function SetCurUseMarchSpeedTime(self,message)
--    if message["use_speed_time"] then
--        self.use_speed_time = message["use_speed_time"]
--        --记录刷新时间
--        self.lastTime = UITimeManager:GetInstance():GetServerSeconds()
--    end
--end
FormStatusManager.__init = __init
FormStatusManager.__delete = __delete
FormStatusManager.AddListener = AddListener
FormStatusManager.RemoveListener = RemoveListener
FormStatusManager.TimerAction = TimerAction

FormStatusManager.GetTemplate = GetTemplate
FormStatusManager.GetDataDict = GetDataDict
FormStatusManager.GetDataList = GetDataList

FormStatusManager.CanDirectAttackCity = CanDirectAttackCity
FormStatusManager.GetMarchStatusIds = GetMarchStatusIds
FormStatusManager.GetFormationStatusIds = GetFormationStatusIds

FormStatusManager.HandleInit = HandleInit
FormStatusManager.HandleAdd = HandleAdd
FormStatusManager.HandleDel = HandleDel
FormStatusManager.GetHasUseSpeedUp = GetHasUseSpeedUp
FormStatusManager.CanUseMasterySkill = CanUseMasterySkill
--FormStatusManager.GetCurRestMarchSpeedTime = GetCurRestMarchSpeedTime
--FormStatusManager.SetCurUseMarchSpeedTime = SetCurUseMarchSpeedTime
return FormStatusManager