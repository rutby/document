---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/1/16 15:24
---

local FogManager = BaseClass("FogManager")
local GameObject = CS.UnityEngine.GameObject
local Resource = CS.GameEntry.Resource

local FogVolumePath = "Assets/Main/Prefab_Dir/Home/Terrian/FogVolume.prefab"
local Offset = Vector3.New(0, 0, -0.5)

local AnimState =
{
    None = 0,
    UnlockFog = 1,--解锁迷雾
}
local UnlockFogTime = 2--解锁迷雾溶解时间
local InitTextureBlendTime = 0.5
local UnlockTextureBlendTime = 2.5

local function __init(self)
    self.fowSystem = nil
    self.material =nil
    self.revealerCache = {}
    self.onFogLoadComplete = function()
        self:OnFogLoadComplete()
    end
    self.isUpdate = false
    self.mtBlock = nil
    self.curTime = 0
    self.targetTime = 0
    self.matParam = nil
    self.mainLvCache = 0
    self:AddListeners()
    self.onUpdate =  function() self:OnUpdate(Time.deltaTime) end
    self.showFogUp = true
    self.showFogDown = true
    self.showFogDown2 = false
    self.animState = 0
    self.textureReq = nil
    UpdateManager:GetInstance():AddUpdate(self.onUpdate)
end

local function __delete(self)
    self.matParam = nil
    self.mainLvCache = 0
    if self.textureReq then
        Resource:UnloadAsset(self.textureReq)
        self.textureReq = nil
    end
    if self.onUpdate then
        UpdateManager:GetInstance():RemoveUpdate(self.onUpdate)
        self.onUpdate = nil
    end
    self:RemoveListeners()
    self:Destroy()
end

local function OnUpdate(self,deltaTime)
    if self.isUpdate == true then
        self.curTime = self.curTime + deltaTime
        if self.animState == AnimState.UnlockFog then
            if self.curTime > UnlockFogTime then
                self.isUpdate = false
                CS.UnityEngine.Shader.SetGlobalFloat("_DebugA", 1)
                self.fowSystem.textureBlendTime = InitTextureBlendTime
            else
                CS.UnityEngine.Shader.SetGlobalFloat("_DebugA", self.curTime / UnlockFogTime)
            end
        else
            if self.curTime>self.targetTime then
                self.isUpdate = false
                self:SetMaterialValue(1)
            else
                local percent = self.curTime / self.targetTime
                self:SetMaterialValue(percent)
            end
        end
    end
end

local function ShowFogUp(self, show)
    if self.showFogUp == show then
        return
    end
    self.showFogUp = show
    if not IsNull(self.fogUpGo) then
        self.fogUpGo:SetActive(show)
    end
end

local function ShowFogDown(self, show)
    if self.showFogDown == show then
        return
    end
    self.showFogDown = show
    if not IsNull(self.fogDownGo) then
        self.fogDownGo:SetActive(show)
    end
end

local function ShowFogDown2(self, show)
    if self.showFogDown2 == show then
        return
    end
    self.showFogDown2 = show
    if not IsNull(self.fogDown2Go) then
        self.fogDown2Go:SetActive(show)
    end
end

local function SetMaterialValue(self, percent)
    if self.material and self.matParam then
        if self.mtBlock == nil then
            self.mtBlock = CS.UnityEngine.MaterialPropertyBlock()
        end
        for i = 1, 4 do
            local startValue = self.matParam.matrix[i][1]
            local endValue = self.matParam.matrix[i][2]
            if startValue ~= endValue then
                self.mtBlock:SetFloat("_Level" .. i, Mathf.Lerp(startValue, endValue, percent))
            end
        end
        if self.texturePathCache ~= self.matParam.texturePath then
            local texture = self:LoadTexture(self.matParam.texturePath)
            self.texturePathCache = self.matParam.texturePath
            self.mtBlock:SetTexture("_FogOfWarMask", texture)
        end
        self.material:SetPropertyBlock(self.mtBlock)
    end
end

local function AddListeners(self)
    EventManager:GetInstance():AddListener(EventId.MainMapTerrainLoadFinish, self.OnTerrainLoad)
    EventManager:GetInstance():AddListener(EventId.PveLevelBeforeEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():AddListener(EventId.OnBeforeEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.BuildLvUpChangeRange, self.OnRangeRefresh)
    EventManager:GetInstance():AddListener(EventId.MainLvUp, self.OnMainLvUp)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.MainMapTerrainLoadFinish, self.OnTerrainLoad)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelBeforeEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():RemoveListener(EventId.OnBeforeEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.BuildLvUpChangeRange, self.OnRangeRefresh)
    EventManager:GetInstance():RemoveListener(EventId.MainLvUp, self.OnMainLvUp)
end

local function Startup(self)
    
end

local function Create(self)
    self.fowSystem = GameObject("FOWSystem", typeof(CS.FOWSystem)):GetComponent(typeof(CS.FOWSystem))
    self.fowSystem.transform.position = Vector3.zero
    self.fowSystem.transform.rotation = Quaternion.identity
    self.fowSystem.worldSize = 256
    self.fowSystem.textureSize = 256
    self.fowSystem.updateFrequency = 0.33
    self.fowSystem.textureBlendTime = InitTextureBlendTime
    self.fowSystem.blurIterations = 0
    self.fowSystem.isRevealRect = true
    self.fowSystem:ClearRevealers()
    if self.fowSystem.RegisterCompleteAction ~= nil then
        self.loadComplete = false
        self.fowSystem:RegisterCompleteAction(self.onFogLoadComplete)
    else
        self.loadComplete = true
        self:OnFogLoadComplete()
    end
    
    self.fogReq = Resource:InstantiateAsync(FogVolumePath)
    self.fogReq:completed('+', function(req)
        local go = req.gameObject
        go.name = "FogVolume"
        local tf = go.transform
        tf:SetParent(self.fowSystem.transform)
        tf.localPosition = Vector3.zero
        tf.localRotation = Quaternion.identity
        self.fogUpGo = tf:Find("Fog_rotate/Fog_shang").gameObject
        self.fogUpGo:SetActive(self.showFogUp)
        self.fogDownGo = tf:Find("Fog_rotate/Fog_xia").gameObject
        self.fogDownGo:SetActive(self.showFogDown)
        self.fogDown2Go = tf:Find("Fog_rotate/Fog_xia_02").gameObject
        self.fogDown2Go:SetActive(self.showFogDown2)
        self.material = self.fogUpGo:GetComponent(typeof(CS.UnityEngine.MeshRenderer))
        self:ShowFogMaterial()
    end)
end

local function ShowFogMaterial(self)
    if self.material then
        if self.mtBlock == nil then
            self.mtBlock = CS.UnityEngine.MaterialPropertyBlock()
        end
        local matParam = self:GetMatParam()
        for i = 1, 4 do
            local value = matParam.matrix[i][2]
            self.mtBlock:SetFloat("_Level" .. i, value)
        end
        if self.texturePathCache ~= matParam.texturePath then
            local texture = self:LoadTexture(matParam.texturePath)
            self.texturePathCache = matParam.texturePath
            self.mtBlock:SetTexture("_FogOfWarMask", texture)
        end
        self.material:SetPropertyBlock(self.mtBlock)
    end
    self.mainLvCache = DataCenter.BuildManager.MainLv
end

local function OnRangeRefresh(data)
    --DataCenter.FogManager:MaterialDoChange()
end

local function MaterialDoChange(self)
    if self.material~=nil then
        self.matParam = self:GetMatParam()
        self.isUpdate = true
        self.curTime = 0
        self.targetTime = LuaEntry.DataConfig:TryGetNum("ambient_light", "k9")
    end
end
local function Destroy(self)
    self.isUpdate = false
    self.mtBlock = nil
    self.material = nil
    if self.fogReq then
        self.fogReq:Destroy()
    end
    self.loadComplete = false
    self.onFogLoadComplete = nil
    if not IsNull(self.fowSystem) then
        self.fowSystem:ClearRevealers()
        self.fowSystem:Clear()
        GameObject.Destroy(self.fowSystem.gameObject)
        self.fowSystem = nil
    end
end

local function Show(self)
    if IsNull(self.fowSystem) then
        self:Create()
    else
        self.fowSystem.gameObject:SetActive(true)
    end
end

local function Hide(self)
    self.isUpdate =false
    if not IsNull(self.fowSystem) then
        self.fowSystem.gameObject:SetActive(false)
    end
end

-- val: [0, 255]
local function Reveal(self, key, x, y, z, width, height, val)
    if self.revealerCache[key] then
        if self.revealerCache[key].val == val then
            return
        end
    end
    self.revealerCache[key] = {}
    local revealer = CS.FOWSystem.Revealer()
    revealer.pos = Vector3.New(x, y, z) + Offset
    revealer.inner = width / 2;
    revealer.outer = height / 2;
    revealer.los = CS.FOWSystem.LOSChecks.OnlyOnce;
    revealer.isActive = true;
    revealer.color = Color32.New(val, val, val, 255)
    CS.FOWSystem.AddRevealer(revealer)
    self.revealerCache[key].data = revealer
    self.revealerCache[key].val = val
end

local function UnReveal(self, key)
    if self.revealerCache[key] == nil then
        return
    end
    local revealer = self.revealerCache[key].data
    CS.FOWSystem.DeleteRevealer(revealer)
    self.revealerCache[key] = nil
end

local function OnFogLoadComplete(self)
    self.loadComplete = true
    EventManager:GetInstance():Broadcast(EventId.FogLoadComplete)
end

local function OnTerrainLoad()
    DataCenter.FogManager:Show()
end

local function OnPveLevelEnter()
    DataCenter.FogManager:Hide()
end

local function OnEnterWorld()
    DataCenter.FogManager:Hide()
end

--迷雾溶解
function FogManager:DoUnlockFogAnim()
    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Pve_Open_Fog)
    self.animState = AnimState.UnlockFog
    self.curTime = 0
    self.fowSystem.textureBlendTime = UnlockTextureBlendTime
    self.isUpdate = true
end

local function GetMatParam(self)
    --- texture 采样图片
    --- matrix RGBA 开始值和结束值
    local param = {}
    local mainLv = DataCenter.BuildManager.MainLv
    if mainLv <= 2 then
        param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang.tga"
        param.matrix = { { 1, 1 }, { 0, 0 }, { 0, 0 }, { 0, 0 } }
    elseif mainLv == 3 then
        param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang.tga"
        param.matrix = { { 1, 1 }, { 0, 1 }, { 0, 0 }, { 0, 0 } }
    elseif mainLv == 4 then
        param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang.tga"
        param.matrix = { { 1, 1 }, { 1, 1 }, { 0, 1 }, { 0, 0 } }
    elseif mainLv == 5 then
        param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang.tga"
        param.matrix = { { 1, 1 }, { 1, 1 }, { 1, 1 }, { 0, 1 } }
    elseif mainLv == 6 then
        param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang02.tga"
        param.matrix = { { 1, 1 }, { 0, 1 }, { 0, 0 }, { 0, 0 } }
    elseif mainLv == 7 then
        param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang02.tga"
        param.matrix = { { 1, 1 }, { 1, 1 }, { 0, 1 }, { 0, 0 } }
    --elseif mainLv == 8 then
    --    param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang02.tga"
    --    param.matrix = { { 1, 1 }, { 1, 1 }, { 1, 1 }, { 0, 1 } }
    --elseif mainLv == 9 then
    --    param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang03.tga"
    --    param.matrix = { { 1, 1 }, { 0, 1 }, { 0, 0 }, { 0, 0 } }
    else
        param.texturePath = "Assets/_Art/Effect/texture/Fog_mask_shang03.tga"
        param.matrix = { { 1, 1 }, { 1, 1 }, { 1, 1 }, { 1, 1 } }
    end
    return param
end

local function LoadTexture(self, texturePath)
    if self.textureReq then
        Resource:UnloadAsset(self.textureReq)
    end
    self.textureReq = Resource:LoadAsset(texturePath, typeof(CS.UnityEngine.Texture))
    local asset = self.textureReq.asset
    cast(asset, typeof(CS.UnityEngine.Texture))
    return asset
end

local function OnMainLvUp()
    local self = DataCenter.FogManager
    local mainLv = DataCenter.BuildManager.MainLv
    if self.mainLvCache == 0 then
        self.mainLvCache = mainLv
        return
    end

    if self.mainLvCache ~= mainLv then
        self:MaterialDoChange()
        self.mainLvCache = mainLv
    end
end

FogManager.__init = __init
FogManager.__delete = __delete
FogManager.AddListeners = AddListeners
FogManager.RemoveListeners = RemoveListeners
FogManager.Startup = Startup

FogManager.Create = Create
FogManager.Destroy = Destroy
FogManager.Show = Show
FogManager.Hide = Hide
FogManager.Reveal = Reveal
FogManager.UnReveal = UnReveal

FogManager.OnFogLoadComplete = OnFogLoadComplete
FogManager.OnTerrainLoad = OnTerrainLoad
FogManager.OnPveLevelEnter = OnPveLevelEnter
FogManager.OnEnterWorld = OnEnterWorld
FogManager.SetMaterialValue =SetMaterialValue
FogManager.OnUpdate= OnUpdate
FogManager.ShowFogUp = ShowFogUp
FogManager.ShowFogDown = ShowFogDown
FogManager.ShowFogDown2 = ShowFogDown2
FogManager.ShowFogMaterial =ShowFogMaterial
FogManager.MaterialDoChange =MaterialDoChange
FogManager.OnRangeRefresh =OnRangeRefresh
FogManager.GetMatParam = GetMatParam
FogManager.LoadTexture = LoadTexture
FogManager.OnMainLvUp = OnMainLvUp

return FogManager