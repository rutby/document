---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/2/28 10:56
---

local GarageRefitManager = BaseClass("GarageRefitManager");

local PROB_FACTOR = 10000

local SlotUnlockEffects =
{
    EffectDefine.APS_FORMATION_FIRST_HERO_COUNT,
    EffectDefine.APS_FORMATION_SECOND_HERO_COUNT,
    EffectDefine.APS_FORMATION_THIRD_HERO_COUNT,
    EffectDefine.APS_FORMATION_FIRST_HERO_COUNT,
}

local function GarageLevelToModifyKey(garage, level)
    return garage * 1000 + level
end

local function TypeLevelToPartKey(type, level)
    return type * 1000 + level
end

local function __init(self)
    self.garageRefitInfo = {}
    self.modifyTemplateDict = {}
    self.partTemplateDict = {}
    self.garageSlotUnlockLevelDict = {} -- Dict<garage, Dict<index, level>>
    self.expCritList = {} -- List<{ factor, probability }>
    self.apsRandom = ApsRandom.New()
    self.maxLevel = 0
    self.freeCount = LuaEntry.DataConfig:TryGetNum("car_modify", "k3") or 0
    self.needMainLv = LuaEntry.DataConfig:TryGetNum("car_modify", "k4") or 0
    self.initGaragePart = false
    self.initGarageModify = false
    self.initCritData = false
end

local function __delete(self)
    self.garageRefitInfo = nil
    self.modifyTemplateDict = nil
    self.partTemplateDict = nil
    self.garageSlotUnlockLevelDict = nil
    self.expCritList = nil
    self.apsRandom = nil
    self.maxLevel = nil
    self.freeCount = nil
    self.needMainLv = nil
end

local function OnAddListener(self)
    
end

local function OnRemoveListener(self)
    
end

local function InitData(self, message)
    if message["userTanks"] then
        self:UpdateGarageRefits(message["userTanks"])
    end

    if message["freeTankTransform"] then
        self:UpdateGarageRefitFree(message["freeTankTransform"])
    end
end

local function UpdateGarageRefits(self, refits)
    for _, refit in pairs(refits) do
        self:UpdateGarageRefit(refit)
    end
end

local function UpdateGarageRefit(self, refit)
    if self.garageRefitInfo.refits == nil then
        self.garageRefitInfo.refits = {}
    end

    local refitData = {}
    refitData.uuid = refit.uuid
    refitData.uid = refit.uid
    refitData.garage = refit.garage
    refitData.level = refit.level
    refitData.exp = refit.exp
    refitData.parts = {}
    for _, part in pairs(refit.components) do
        local partData = {}
        partData.uuid = part.uuid
        partData.type = part.type
        partData.level = part.level
        refitData.parts[partData.type] = partData
    end
    self.garageRefitInfo.refits[refitData.garage] = refitData
end

local function UpdateGarageRefitFree(self, freeInfo)
    self.garageRefitInfo.lastResetTime = freeInfo.lastResetTime
    self.garageRefitInfo.usedFreeCount = freeInfo.useFreeNum
end

local function GetModifyTemplate(self, garage, level)
    if self.initGarageModify ==false then
        self:InitModifyTemplate()
    end
    local buildId = garage
    if buildId == BuildingTypes.FUN_BUILD_TRAINFIELD_4 then
        buildId = BuildingTypes.FUN_BUILD_TRAINFIELD_1
    end
    local id = self.modifyTemplateDict[GarageLevelToModifyKey(buildId, level)]
    return LocalController:instance():getLine(TableName.GarageModify,id)
end

local function InitModifyTemplate(self)
    -- init modifyTemplateDict, maxLevel, garageSlotUnlockLevelDict, showItemList
    LocalController:instance():visitTable(TableName.GarageModify, function(id, line)
        local garage = line:getValue("garage")
        local level = line:getValue("level")
        self.modifyTemplateDict[GarageLevelToModifyKey(garage, level)] = id
        self.maxLevel = math.max(self.maxLevel, level)

        if not self.garageSlotUnlockLevelDict[garage] then
            self.garageSlotUnlockLevelDict[garage] = {}
        end
        local effects = line:getValue("effect")
        local effectVals = line:getValue("effect_num")
        for _, effect in ipairs(SlotUnlockEffects) do
            local i = table.indexof(effects, effect)
            if i then
                local val = effectVals[i]
                if val~=nil then
                    if self.garageSlotUnlockLevelDict[garage][val] == nil then
                        self.garageSlotUnlockLevelDict[garage][val] = level
                    else
                        self.garageSlotUnlockLevelDict[garage][val] = math.min(self.garageSlotUnlockLevelDict[garage][val],level)
                    end
                end
            end
        end
    end)
    self.initGarageModify = true
end

local function GetEffectVal(self, garage, level, effect)
    local template = self:GetModifyTemplate(garage, level)
    if template~=nil then
        local effects = template:getValue("effect")
        local effectVals = template:getValue("effect_num")
        local i = table.indexof(effects, effect)
        if i then
            return effectVals[i] or 0
        end
    end
    return 0
    
end

local function GetCostItem(self,garage, level)
    local template = self:GetModifyTemplate(garage, level)
    if template~=nil then
        local costItem = template:getValue("item")
        for itemId, cost in pairs(costItem) do
            local count = cost
            if tonumber(itemId) == 200034 then -- 齿轮消耗减少
                count = math.floor(count * (1 - LuaEntry.Effect:GetGameEffect(EffectDefine.DECREASE_GEAR_COST) / 100))
            end
            return itemId, count
        end
    end

    return nil, 0
end

local function GetAdditionalEffect(self,garage, level)
    local effect, val = nil, 0
    local template = self:GetModifyTemplate(garage, level)
    if template~=nil then
        local additionalEffects = template:getValue("additional_effect")
        local additionalEffectVals = template:getValue("additional_effect_num")
        for _, e in ipairs(additionalEffects) do
            effect = e
            break
        end
        for _, v in ipairs(additionalEffectVals) do
            val = v
            break
        end
    end
    

    return effect, val
end

local function GetPartTemplate(self, type, level)
    local id = self.partTemplateDict[TypeLevelToPartKey(type, level)]
    if id == nil then
        self:InitPartTemplate()
        id = self.partTemplateDict[TypeLevelToPartKey(type, level)]
    end
    return LocalController:instance():getLine(TableName.GaragePart,id)
end

local function InitPartTemplate(self)
    -- init partTemplateDict
    LocalController:instance():visitTable(TableName.GaragePart, function(id, line)
        local type = line:getValue("type")
        local level = line:getValue("level")
        self.partTemplateDict[TypeLevelToPartKey(type, level)] = id
    end)
    self.initGaragePart = true
end
local function GetGarageRefitData(self, garage)
    if self.garageRefitInfo == nil or self.garageRefitInfo.refits == nil then
        return nil
    end
    local buildId = garage
    if buildId == BuildingTypes.FUN_BUILD_TRAINFIELD_4 then
        buildId = BuildingTypes.FUN_BUILD_TRAINFIELD_1
    end
    return self.garageRefitInfo.refits[buildId]
end

local function GetGarageRefitDataCopy(self, garage)
    local refitData = self:GetGarageRefitData(garage)
    if refitData == nil then
        return nil
    end
    
    local copyRefitData = {}
    copyRefitData.uuid = refitData.uuid
    copyRefitData.uid = refitData.uid
    copyRefitData.garage = refitData.garage
    copyRefitData.level = refitData.level
    copyRefitData.exp = refitData.exp
    copyRefitData.parts = {}
    for _, part in pairs(refitData.parts) do
        local copyPart = {}
        copyPart.uuid = part.uuid
        copyPart.type = part.type
        copyPart.level = part.level
        copyRefitData.parts[copyPart.type] = copyPart
    end
    return copyRefitData
end

local function GetSlotUnlockLevel(self, garage, index)
    local ERR_LV = 999
    local buildId = garage
    if buildId == BuildingTypes.FUN_BUILD_TRAINFIELD_4 then
        buildId = BuildingTypes.FUN_BUILD_TRAINFIELD_1
    end
    local buildData = DataCenter.BuildManager:GetMaxLvBuildDataByBuildId(buildId, true)
    if buildData == nil then
        Logger.LogError("GarageRefitManager, GetSlotUnlockLevel, garage = " .. buildId .. ", buildData = null")
        return ERR_LV
    end
    local level = buildData.level
    local template = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, level)
    if template == nil then
        Logger.LogError("GarageRefitManager, GetSlotUnlockLevel, garage = " .. buildId .. ", level = " .. level .. ", template = null")
        return ERR_LV
    end
    local garageIndex = DataCenter.BuildManager:GetGarageIndex(buildId)
    if garageIndex == nil then
        Logger.LogError("GarageRefitManager, GetSlotUnlockLevel, garage = " .. buildId .. ", garageIndex = null")
        return ERR_LV
    end
    local effect = SlotUnlockEffects[garageIndex]
    local slot = template.building_effect[effect] or 0
    if index <= slot then
        return 0
    else
        if self.initGarageModify ==false then
            self:InitModifyTemplate()
        end
        return self.garageSlotUnlockLevelDict[buildId] and self.garageSlotUnlockLevelDict[buildId][index - slot] or ERR_LV
    end
end

local function GetExpCritFactor(self)
    if self.initCritData ==false then
        self:InitCrit()
    end
    local rand = self.apsRandom:NextInt(PROB_FACTOR)
    for _, crit in ipairs(self.expCritList) do
        rand = rand - crit.probability * PROB_FACTOR
        if rand < 0 then
            return crit.factor
        end
    end
    return 1
end

local function InitCrit(self)
    -- init crit
    local expCritStr = LuaEntry.DataConfig:TryGetStr("car_modify", "k2") or ""
    if not string.IsNullOrEmpty(expCritStr) then
        local strs = string.split(expCritStr, "|")
        for _, str in ipairs(strs) do
            local spls = string.split(str, ";")
            if #spls == 2 then
                local crit =
                {
                    factor = tonumber(spls[1]),
                    probability = tonumber(spls[2]),
                }
                if crit.factor == 2 then
                    crit.probability = crit.probability + (LuaEntry.Effect:GetGameEffect(EffectDefine.GARAGE_REFIT_X2_PROB_EXTRA) or 0) / 100
                elseif crit.factor == 3 then
                    crit.probability = crit.probability + (LuaEntry.Effect:GetGameEffect(EffectDefine.GARAGE_REFIT_X3_PROB_EXTRA) or 0) / 100
                elseif crit.factor == 5 then
                    crit.probability = crit.probability + (LuaEntry.Effect:GetGameEffect(EffectDefine.GARAGE_REFIT_X5_PROB_EXTRA) or 0) / 100
                elseif crit.factor == 10 then
                    crit.probability = crit.probability + (LuaEntry.Effect:GetGameEffect(EffectDefine.GARAGE_REFIT_X10_PROB_EXTRA) or 0) / 100
                end
                table.insert(self.expCritList, crit)
            end
        end
    end
    self.initCritData = true
end

local function GetMaxLevel(self)
    
    return self.maxLevel
end

-- 免费次数上次重置时间
local function GetLastResetTime(self)
    if self.garageRefitInfo == nil then
        return 0
    end
    
    return self.garageRefitInfo.lastResetTime
end

-- 总免费次数
local function GetFreeCount(self)
    return self.freeCount + math.tointeger(LuaEntry.Effect:GetGameEffect(EffectDefine.GARAGE_REFIT_FREE_EXTRA)) or 0
end

-- 已使用的免费次数
local function GetUsedFreeCount(self)
    if self.garageRefitInfo == nil then
        return 0
    end
    
    return self.garageRefitInfo.usedFreeCount
end

local function GetGarageFreeCount(self, garage)
    local lastResetTime = self:GetLastResetTime()
    if lastResetTime == nil then
        return 0
    end
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, lastResetTime // 1000)
    local freeCount = sameDay and math.max(self:GetFreeCount() - self:GetUsedFreeCount(), 0) or self:GetFreeCount()
    if freeCount == 0 then
        return 0
    end
    
    if not self:IsFirstUpgradeGarage(garage) then
        return 0
    end
    
    return freeCount
end

local function IsFirstUpgradeGarage(self, garage)
    local garageIndex = DataCenter.BuildManager:GetGarageIndex(garage)
    if garageIndex == nil then
        return false
    end

    local firstGarage = self:GetFirstUpgradeGarage()
    if firstGarage ~= nil then
        return garage == firstGarage
    end

    -- old method
    local refitData = self:GetGarageRefitData(garage)
    if refitData == nil or refitData.level >= self:GetMaxLevel() then
        return false
    end

    local index = 1
    while index < garageIndex do
        local tRefitData = self:GetGarageRefitData(GarageBuildIds[index])
        if tRefitData ~= nil and tRefitData.level < self:GetMaxLevel() then
            return false
        end
        index = index + 1
    end

    return true
end

local function GetFirstUpgradeGarage(self)
    local strs = string.split(LuaEntry.DataConfig:TryGetStr("car_modify", "k6") or "", "|")
    for _, str in ipairs(strs) do
        local spls = string.split(str, ";")
        if #spls == 2 then
            local garageIndex = tonumber(spls[1])
            local level = tonumber(spls[2])
            local garage = GarageBuildIds[garageIndex]
            local refitData = self:GetGarageRefitData(garage)
            if refitData ~= nil and refitData.level < level then
                return garage
            end
        end
    end
    return nil
end

local function CanShowBubble(self, garage)
    if DataCenter.BuildManager.MainLv < DataCenter.GarageRefitManager.needMainLv then
        return false
    end

    if not self:IsFirstUpgradeGarage(garage) then
        return false
    end

    if self:GetGarageFreeCount(garage) > 0 then
        return true
    end

    --if DataCenter.ScienceDataManager:CheckIfBattleScienceOpen() then
    --    return false
    --end

    local refitData = self:GetGarageRefitData(garage)
    local n = LuaEntry.DataConfig:TryGetNum("car_modify", "k7") or 0
    if n ~= 0 then
        local itemId, count = self:GetCostItem(garage, refitData.level)
        if itemId ~= nil and count > 0 then
            local ownCount = DataCenter.ItemData:GetItemCount(itemId)
            --5连抽
            if ownCount > count * n * 5 then
                return true
            end
        end
    end
    
    return false
end

GarageRefitManager.__init = __init
GarageRefitManager.__delete = __delete
GarageRefitManager.OnAddListener = OnAddListener
GarageRefitManager.OnRemoveListener = OnRemoveListener

GarageRefitManager.InitData = InitData
GarageRefitManager.UpdateGarageRefits = UpdateGarageRefits
GarageRefitManager.UpdateGarageRefit = UpdateGarageRefit
GarageRefitManager.UpdateGarageRefitFree = UpdateGarageRefitFree
GarageRefitManager.GetModifyTemplate = GetModifyTemplate
GarageRefitManager.GetPartTemplate = GetPartTemplate
GarageRefitManager.GetGarageRefitData = GetGarageRefitData
GarageRefitManager.GetGarageRefitDataCopy = GetGarageRefitDataCopy
GarageRefitManager.GetSlotUnlockLevel = GetSlotUnlockLevel
GarageRefitManager.GetExpCritFactor = GetExpCritFactor
GarageRefitManager.GetMaxLevel = GetMaxLevel
GarageRefitManager.GetLastResetTime = GetLastResetTime
GarageRefitManager.GetFreeCount = GetFreeCount
GarageRefitManager.GetUsedFreeCount = GetUsedFreeCount
GarageRefitManager.GetGarageFreeCount = GetGarageFreeCount
GarageRefitManager.IsFirstUpgradeGarage = IsFirstUpgradeGarage
GarageRefitManager.GetFirstUpgradeGarage = GetFirstUpgradeGarage
GarageRefitManager.CanShowBubble = CanShowBubble
GarageRefitManager.InitPartTemplate =InitPartTemplate
GarageRefitManager.InitModifyTemplate = InitModifyTemplate
GarageRefitManager.GetEffectVal =GetEffectVal
GarageRefitManager.GetCostItem =GetCostItem
GarageRefitManager.GetAdditionalEffect =GetAdditionalEffect
GarageRefitManager.InitCrit =InitCrit
return GarageRefitManager