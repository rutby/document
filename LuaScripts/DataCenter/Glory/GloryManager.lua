---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/28 11:20
---

local GloryManager = BaseClass("GloryManager")
local GloryWarData = require "DataCenter.Glory.GloryWarData"
local GloryAllianceData = require "DataCenter.Glory.GloryAllianceData"
local GloryHistoryData = require "DataCenter.Glory.GloryHistoryData"
local GloryMemberRecord = require "DataCenter.Glory.GloryMemberRecord"
local GloryBattleDetail = require "DataCenter.Glory.GloryBattleDetail"
local GloryActData = require "DataCenter.Glory.GloryActData"
local GloryContribution = require "DataCenter.Glory.GloryContribution"
local GloryCampAlliance = require "DataCenter.Glory.GloryCampAlliance"
local Localization = CS.GameEntry.Localization

local ShowSoonTime = 3600000
local NetNoWarTipCode = "302984"

local function __init(self)
    -- local
    -- data
    self.warData = GloryWarData.New() -- GloryWarData
    self.declareAllianceDataList = {} -- List<GloryAllianceData>
    self.matchAllianceData = nil -- GloryAllianceData
    self.myHistoryDataList = {} -- List<GloryHistoryData>
    self.historyDataDict = {} -- Dict<alliance .. time, GloryHistoryData>
    self.memberRecordDict = {} -- Dict<allianceId, GloryMemberRecord>
    self.battleDetailList = {} -- List<GloryBattleDetail>
    self.actData = nil -- GloryActData
    self.contributionList = {} -- List<GloryContribution>
    self.goToOpponentCallback = nil
    self.showedSoon = false
    self.edenGroupInfo = {} --Dict<camp, GloryCampAlliance> 
    self.campAllianceDic = {} -- Dict<allianceId, GloryCampAlliance> 
    self.sFiveUserRank = {} --s5个人杀敌或破坏排名
    self.sFiveCampScore = {} --s5阵营积分
    self.firstInit = false
    self:AddListeners()
end

local function __delete(self)
    self.warData = nil
    self.declareAllianceDataList = nil
    self.matchAllianceData = nil
    self.myHistoryDataList = {}
    self.historyDataDict = {}
    self.memberRecordDict = nil
    self.battleDetailList = nil
    self.actData = nil
    self.contributionList = nil
    self.goToOpponentCallback = nil
    self.showedSoon = nil
    self.firstInit = false
    self.sFiveUserRank = nil
    self.sFiveCampScore = {}
    self:RemoveListeners()
end

local function AddListeners(self)
    EventManager:GetInstance():AddListener(EventId.CloseUI, self.OnCloseUI)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.CloseUI, self.OnCloseUI)
end

local function Startup(self)
    self:Clear()
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    if season >= 2 then
        self:SendGetWarData()
    end
end

local function GetEdenGroup(self)
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    if season >= 4 then
        if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
            SFSNetwork.SendMessage(MsgDefines.GetEdenGroupInfo)
            self.firstInit = true
        else
            SFSNetwork.SendMessage(MsgDefines.GetEdenGroupSimpleInfo)
            self.firstInit = true
        end
    end
    
end

local function Clear(self)
    self.warData = GloryWarData.New()
    self.actData = nil
end

-- 获取战斗备战时长
local function GetBattleBeforeDuration(self)
    return LuaEntry.DataConfig:TryGetNum("plant_battle", "k2") * 1000
end

-- 获取战斗持续时长
local function GetBattleOngoingDuration(self)
    return LuaEntry.DataConfig:TryGetNum("plant_battle", "k3") * 1000
end

-- 获取宣战需要积分
local function GetDeclareNeedScore(self)
    return LuaEntry.DataConfig:TryGetNum("plant_battle", "k11")
end

-- 获取宣战花费
local function GetDeclareCost(self)
    return LuaEntry.DataConfig:TryGetNum("plant_battle", "k12")
end

-- 获取匹配花费
local function GetMatchCost(self)
    return LuaEntry.DataConfig:TryGetNum("plant_battle", "k13")
end

-- 获取宣战信息
local function GetWarData(self)
    return self.warData
end

-- 获取活动信息
-- 仅 GloryBattleState.Before, GloryBattleState.Ongoing, GloryBattleState.After
local function GetActData(self)
    return self.actData
end

-- 获取可宣战联盟列表
local function GetDeclareAllianceDataList(self)
    local list = {}
    for _, allianceData in ipairs(self.declareAllianceDataList) do
        if allianceData.allianceId ~= LuaEntry.Player.allianceId then
            table.insert(list, allianceData)
        end
    end
    return list
end

-- 获取匹配到的联盟
local function GetMatchAllianceData(self)
    return self.matchAllianceData
end

-- 获取联盟玩家记录
local function GetMemberRecord(self, allianceId)
    return self.memberRecordDict[allianceId]
end

-- 获取战斗细节列表
local function GetBattleDetailList(self)
    return self.battleDetailList
end

-- 获取当前时段：未开始，准备期，入侵期，结算期
-- 获取切换时间
-- time: 查询时间，若不填则为当前时间
local function GetPeriod(self, time)
    local curTime = time or UITimeManager:GetInstance():GetServerTime()
    local weekDay = UITimeManager:GetInstance():GetWeekdayIndex(curTime)
    local zeroTime = UITimeManager:GetInstance():GetTodayZeroServerTime(curTime // 1000) * 1000
    local seasonDay = DataCenter.SeasonDataManager:GetSeasonDurationDay() + 1
    local serverId = LuaEntry.Player:GetSelfServerId()
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    local curTemplate = DataCenter.SeasonGroupManager:GetTemplate(season, serverId)
    if curTemplate == nil then
        return GloryPeriod.None, 0
    end
    
    if seasonDay < curTemplate.battleStart then
        local switchTime = zeroTime + (curTemplate.battleStart - seasonDay) * 86400000
        return GloryPeriod.Unopened, switchTime
    end
    
    local settleTime = DataCenter.SeasonDataManager:GetSeasonSettleTime()
    if settleTime ~= 0 and curTime > settleTime then
        return GloryPeriod.Settle, 0
    end
    
    local isStart = curTemplate.battleDays[weekDay].isStart
    if isStart then
        return GloryPeriod.Start, curTime + UITimeManager:GetInstance():GetResSecondsTo24() * 1000 -- 入侵期每日结算
    else
        local switchDay = 0
        local list = DataCenter.GloryManager:GetCloseFightDayCurWeek()
        if list~=nil and table.count(list)>0 then
            for day = weekDay + 1, 7 do
                if curTemplate.battleDays[(day - 1) % 7 + 1].isStart ~= isStart then
                    if list[day] == nil then
                        switchDay = day
                        break
                    end
                end
            end
            if switchDay<=0 then
                for day = 8,14 do
                    if curTemplate.battleDays[(day - 1) % 7 + 1].isStart ~= isStart then
                        switchDay = day
                        break
                    end
                end
            end
            if switchDay<=0 then
                switchDay = weekDay+7
            end
        else
            switchDay = weekDay+7
            for day = weekDay + 1, weekDay + 7 do
                if curTemplate.battleDays[(day - 1) % 7 + 1].isStart ~= isStart then
                    switchDay = day
                    break
                end
            end
        end
        local switchTime = zeroTime + (switchDay - weekDay) * 86400000 -- 到下一个阶段的时间
        return GloryPeriod.Prepare, switchTime
    end
end

-- 获取宣战对手联盟信息
local function GetOpponentData(self)
    local battleState = self:GetBattleState()
    if battleState == GloryBattleState.Before or battleState == GloryBattleState.Ongoing or battleState == GloryBattleState.After then
        if self.actData then
            return self.actData:GetOpponentData()
        end
    end
    return nil
end

-- 获取交战状态
-- 获取切换时间
-- time: 查询时间，若不填则为当前时间
local function GetBattleState(self, time) 
    local battleState, switchTime
    local curTime = time or UITimeManager:GetInstance():GetServerTime()
    local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, self.warData.readyTime // 1000)
    if sameDay then
        if curTime < self.warData.startTime then
            battleState = GloryBattleState.Before
            switchTime = self.warData.startTime
        elseif curTime > self.warData.endTime then
            battleState = GloryBattleState.After
            switchTime = curTime + UITimeManager:GetInstance():GetResSecondsTo24() * 1000
        else
            battleState = GloryBattleState.Ongoing
            switchTime = self.warData.endTime
        end
    else
        battleState = GloryBattleState.None
        switchTime = 0
    end
    return battleState, switchTime
end

-- 获取交战结果
local function GetBattleResult(self)
    local battleState = self:GetBattleState()
    if battleState == GloryBattleState.After then
        local actData = DataCenter.GloryManager:GetActData()
        if actData then
            local myData = actData:GetMyData()
            local opponentData = actData:GetOpponentData()
            if myData.isWin == 1 then
                return GloryBattleResult.Win
            elseif opponentData.isWin == 1 then
                return GloryBattleResult.Lose
            end
        end
    end
    return GloryBattleResult.None
end

-- 是否有足够的积分宣战
local function HasEnoughScoreToDeclare(self)
    return self.warData.seasonScore >= self:GetDeclareNeedScore()
end

-- 是否有足够的剩余时间宣战
local function HasEnoughTimeToDeclare(self)
    local restTime = UITimeManager:GetInstance():GetResSecondsTo24() * 1000
    return restTime > self:GetBattleBeforeDuration() + self:GetBattleOngoingDuration()
end

local function GetPeriodName(self, period)
    if period == GloryPeriod.Prepare then
        return Localization:GetString("302783")
    elseif period == GloryPeriod.Start then
        return Localization:GetString("302784")
    elseif period == GloryPeriod.Settle then
        return Localization:GetString("302785")
    else
        return ""
    end
end

local function GetOpenWeekDays(self, period)
    local serverId = LuaEntry.Player:GetSelfServerId()
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    local curTemplate = DataCenter.SeasonGroupManager:GetTemplate(season, serverId)
    if curTemplate == nil then
        return {}
    end
    
    local list = {}
    for weekDay = 1, 7 do
        if period == GloryPeriod.Prepare then
            if not curTemplate.battleDays[weekDay].isStart then
                table.insert(list, weekDay)
            end
        elseif period == GloryPeriod.Start then
            if curTemplate.battleDays[weekDay].isStart then
                table.insert(list, weekDay)
            end
        end
    end
    return list
end

local function GetOpenWeekDayDesc(self, period)
    local days = self:GetOpenWeekDays(period)
    local strs = {}
    for _, day in ipairs(days) do
        table.insert(strs, Localization:GetString(WeekDayName[day]))
    end
    return --[[Localization:GetString("302796") .. " " .. ]]string.join(strs, ", ")
end

local function GetGroupServerIds(self)
    local serverId = LuaEntry.Player:GetSelfServerId()
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    local curTemplate = DataCenter.SeasonGroupManager:GetTemplate(season, serverId)
    if curTemplate == nil then
        return {}
    end
    
    return curTemplate.serverIds
end

local function GetGroupServerIdDesc(self)
    local serverIds = self:GetGroupServerIds()
    local strs = {}
    for _, serverId in ipairs(serverIds) do
        table.insert(strs, "#" .. serverId)
    end
    return Localization:GetString("302797") .. " " .. string.join(strs, ", ")
end

-- 前往对手联盟位置
local function GoToOpponent(self, callback)
    self.goToOpponentCallback = callback
    self:SendGoToOpponent()
end

local function IsInBattle(self)
    local period = self:GetPeriod()
    local battleState = self:GetBattleState()
    return period == GloryPeriod.Start and battleState == GloryBattleState.Ongoing
end

local function CanAttackCityCrossServer(self)
    local serverId = LuaEntry.Player:GetSelfServerId()
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    local curTemplate = DataCenter.SeasonGroupManager:GetTemplate(season, serverId)
    if curTemplate == nil then
        return false
    end

    local period = self:GetPeriod()
    local battleState = self:GetBattleState()
    if period ~= GloryPeriod.Start or battleState ~= GloryBattleState.Ongoing then
        return false
    end

    local opponentData = DataCenter.GloryManager:GetOpponentData()
    if opponentData == nil then
        return false
    end

    local curTime = UITimeManager:GetInstance():GetServerTime()
    local weekDay = UITimeManager:GetInstance():GetWeekdayIndex(curTime)
    if curTemplate.battleDays[weekDay] == nil then
        return false
    end

    return curTemplate.battleDays[weekDay].canAttack or false
end

local function CanDeclare(self, time)
    local warData = DataCenter.GloryManager:GetWarData()
    local avoid = warData:GetShowAvoidTime()
    local strs = string.split(avoid, "-")
    if #strs == 2 then
        local spls1 = string.split(strs[1], ":")
        local spls2 = string.split(strs[2], ":")
        if #spls1 == 2 and #spls2 == 2 then
            local nowTime = toInt(time) % 86400000
            local startTime = tonumber(spls1[1]) * 3600000 + tonumber(spls1[2]) * 60000
            local endTime = tonumber(spls2[1]) * 3600000 + tonumber(spls2[2]) * 60000
            if nowTime < startTime then
                return false, startTime - nowTime
            elseif nowTime > endTime then
                return startTime + 86400000 - nowTime
            else
                return true
            end
        end
    end
    
    return false, -1
end

local function TryShowSoon(self)
    if self.showedSoon then
        return
    end

    if not LuaEntry.Player:IsInAlliance() then
        return
    end

    local warData = DataCenter.GloryManager:GetWarData()
    if warData == nil then
        return
    end

    local curTime = UITimeManager:GetInstance():GetServerTime()
    local period = self:GetPeriod(curTime + ShowSoonTime)
    local canDec1, time = self:CanDeclare(curTime)
    local canDec2 = self:CanDeclare(curTime + ShowSoonTime)
    if period == GloryPeriod.Start then
        if canDec1 == false and canDec2 == true then
            DataCenter.UIPopWindowManager:Push(UIWindowNames.UIGlorySoon, { anim = true }, { time = time })
            self.showedSoon = true
        end
    end
end

local function OnCloseUI()
    -- 外网暂时不开
    --DataCenter.GloryManager:TryShowSoon()
end



local function GetOpenFightWeekDayDesCurWeek(self)
    local days = self:GetOpenWeekDays(GloryPeriod.Start)
    local strs = {}
    local list = self:GetCloseFightDayCurWeek()
    for _, day in ipairs(days) do
        if list[day]==nil then
            table.insert(strs, Localization:GetString(WeekDayName[day]))
        end
    end
    local str = Localization:GetString("302968")
    if #strs>0 then
        str = Localization:GetString("302796") .. " " .. string.join(strs, ", ")
    end
    return str
end

--获取本周的不可宣战日
local function GetCloseFightDayCurWeek(self)
    local serverId = LuaEntry.Player:GetSelfServerId()
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    local curTemplate = DataCenter.SeasonGroupManager:GetTemplate(season, serverId)
    local list = {}
    if curTemplate~=nil then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local day = DataCenter.SeasonDataManager:GetSeasonDurationDay() + 1
        local weekDay = UITimeManager:GetInstance():GetWeekdayIndex(curTime)
        local curWeekdayOne = day-weekDay+1--本周周一是赛季开始后第几天
        local curWeekdaySeven = curWeekdayOne+6
        local closeArr = curTemplate.closeTime
        for i=1,#closeArr do
            local oneData = closeArr[i]
            local min = oneData.startDay
            local max = oneData.continueDays+min-1
            for j = min,max do
                if j>=curWeekdayOne and j<=curWeekdaySeven then
                    local temWeekday = j-curWeekdayOne+1
                    list[temWeekday] = 1
                end
            end
        end
    end
    return list
end

local function GetMenuBattleRedNum(self)
    local num = 0
    if self:CanShowBtnListRestRed() then
        num = num + 1
    end
    return num
end

local function CanShowBtnListRestRed(self)
    if DataCenter.AllianceBaseDataManager:IsR4orR5() then
        if DataCenter.GloryManager:GetPeriod() == GloryPeriod.Prepare then
            local restSec = UITimeManager:GetInstance():GetResSecondsTo24()
            if restSec > OneHourTime then
                local warData = self:GetWarData()
                if string.IsNullOrEmpty(warData.avoidWarInfo.avoidTimeInfo) or warData.avoidWarInfo.avoidTimeInfo == "0" then
                    return true
                end
            end
        end
    end
    return false
end

local function SendGetWarData(self)
    SFSNetwork.SendMessage(MsgDefines.GetDeclareWarInfo)
end

local function SendGetDeclareAlliance(self)
    SFSNetwork.SendMessage(MsgDefines.DomainAlWarPanel)
end

local function SendDeclareWar(self, allianceId, type)
    SFSNetwork.SendMessage(MsgDefines.DomainAlDeclareWar, allianceId, type)
end

local function SendMatch(self)
    SFSNetwork.SendMessage(MsgDefines.DomainAlMatchVs)
end

local function SendSetAvoid(self, index)
    SFSNetwork.SendMessage(MsgDefines.DomainAlSetAvoidTime, index)
end

local function SendGetMyHistory(self)
    SFSNetwork.SendMessage(MsgDefines.DomainAlHis)
end

local function SendGetHistory(self, page)
    SFSNetwork.SendMessage(MsgDefines.DomainAlWarResult, page)
end

local function SendGetMemberRecord(self, allianceId, readyTime)
    if readyTime then
        SFSNetwork.SendMessage(MsgDefines.DomainAlWarMemberScoreHis, allianceId, readyTime)
    else
        SFSNetwork.SendMessage(MsgDefines.AlFightActMemberScore, allianceId)
    end
end

local function SendGetBattleDetail(self, allianceId, startTime, page)
    SFSNetwork.SendMessage(MsgDefines.AlBattleEvent, allianceId, startTime, page)
end

local function SendGetAct(self)
    local battleState = self:GetBattleState()
    if battleState == GloryBattleState.Before or battleState == GloryBattleState.Ongoing then
        SFSNetwork.SendMessage(MsgDefines.AlFightActInfo)
    elseif battleState == GloryBattleState.After then
        SFSNetwork.SendMessage(MsgDefines.AlFightActInfoRecord, self.warData.readyTime)
    end
end

local function SendGetContribution(self, type)
    SFSNetwork.SendMessage(MsgDefines.SeasonContributionInfo, type)
end

local function SendGoToOpponent(self)
    SFSNetwork.SendMessage(MsgDefines.GetDeclareTargetAlliancePosition)
end

local function HandleGetWarData(self, message)
    self.warData:ParseServerData(message)
    local battleState = self:GetBattleState()
    if battleState == GloryBattleState.Before or battleState == GloryBattleState.Ongoing or battleState == GloryBattleState.After then
        self:SendGetAct()
        DataCenter.MissileManager:MissileInfoGet()
    end
    EventManager:GetInstance():Broadcast(EventId.GloryGetWarData)
end

local function HandleGetDeclareAlliance(self, message)
    if message["allianceArr"] then
        self.declareAllianceDataList = {}
        for _, v in ipairs(message["allianceArr"]) do
            local allianceData = GloryAllianceData.New()
            allianceData:ParseServerData(v)
            table.insert(self.declareAllianceDataList, allianceData)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.GloryGetDeclareAlliance)
end

local function HandleDeclareWar(self, message)
    local errCode = message["errorCode"]
    if errCode == nil then
        self:SendGetAct()
        EventManager:GetInstance():Broadcast(EventId.GloryDeclareWar)
    else
        if errCode == NetNoWarTipCode then
            local warData = DataCenter.GloryManager:GetWarData()
            if warData ~= nil then
                UIUtil.ShowTips(Localization:GetString(errCode, warData:GetShowAvoidTime()))
            end
        else
            UIUtil.ShowTipsId(errCode)
        end
    end
end

local function HandleStart(self, message)
    self.warData:ParseServerData(message)
    self:SendGetAct()
    EventManager:GetInstance():Broadcast(EventId.GloryStart)
end

local function HandleMatch(self, message)
    self.matchAllianceData = GloryAllianceData.New()
    self.matchAllianceData:ParseServerData(message)
    EventManager:GetInstance():Broadcast(EventId.GloryMatch)
end

local function HandleSetAvoid(self, message)
    self.warData.avoidWarInfo = message
    EventManager:GetInstance():Broadcast(EventId.GlorySetAvoid)
end

local function HandleGetMyHistory(self, message)
    if message["warHis"] then
        self.myHistoryDataList = {}
        for _, v in ipairs(message["warHis"]) do
            local historyData = GloryHistoryData.New()
            historyData:ParseServerData(v)
            table.insert(self.myHistoryDataList, historyData)
        end
        EventManager:GetInstance():Broadcast(EventId.GloryGetMyHistory)
    end
end

local function HandleGetHistory(self, message)
    if message["array"] then
        local change = false
        for _, v in ipairs(message["array"]) do
            local id = v["t"] .. v["readyTime"]
            if self.historyDataDict[id] == nil then
                local historyData = GloryHistoryData.New()
                historyData:ParseServerData(v)
                self.historyDataDict[id] = historyData
                change = true
            end
        end
        if change then
            EventManager:GetInstance():Broadcast(EventId.GloryGetHistory)
        end
    end
end

local function HandleGetMemberRecord(self, message)
    if message["alInfo"] then
        local memberRecord = GloryMemberRecord.New()
        memberRecord:ParseServerData(message)
        self.memberRecordDict[memberRecord.allianceId] = memberRecord
        EventManager:GetInstance():Broadcast(EventId.GloryGetMemberRecord, memberRecord.allianceId)
    end
end

local function HandleGetBattleDetail(self, message)
    if message["eventInfo"] then
        self.battleDetailList = {}
        for _, v in ipairs(message["eventInfo"]) do
            local battleDetail = GloryBattleDetail.New()
            battleDetail:ParseServerData(v)
            table.insert(self.battleDetailList, battleDetail)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.GloryGetBattleDetail)
end

local function HandleGetAct(self, message)
    self.actData = GloryActData.New()
    self.actData:ParseServerData(message)
    EventManager:GetInstance():Broadcast(EventId.GloryGetAct)
    WorldBuildUtil.SetFightServerList()
end

local function HandleGetContribution(self, message)
    if message["contributions"] then
        self.contributionList = {}
        for _, v in ipairs(message["contributions"]) do
            local contribution = GloryContribution.New()
            contribution:ParseServerData(v)
            table.insert(self.contributionList, contribution)
        end
        EventManager:GetInstance():Broadcast(EventId.GloryGetContribution, message["type"])
    end
end

local function HandleGoToOpponent(self, message)
    local opponentData = DataCenter.GloryManager:GetOpponentData()
    if opponentData == nil then
        return
    end
    
    local pointId = 0
    if message["buildingArr"] then
        for _, v in ipairs(message["buildingArr"]) do
            if v.buildingId == BuildingTypes.ALLIANCE_CENTER_1 then
                pointId = v.pointId
                break
            end
        end
    end
    if pointId == 0 and message["allianceCenterPoint"] then
        pointId = message["allianceCenterPoint"]
    end
    if pointId ~= 0 then
        local pos = SceneUtils.TileIndexToWorld(pointId, ForceChangeScene.World)
        local serverId = opponentData.serverId
        GoToUtil.CloseAllWindows()
        --这里防止原服点坐标在他服显示，只发一遍获取
        local noSendReq = serverId ~= LuaEntry.Player:GetCurServerId()
        SceneUtils.ChangeToWorld(function()
            GoToUtil.GotoWorldPos(pos, CS.SceneManager.World.InitZoom, LookAtFocusTime, function()
                if self.goToOpponentCallback then
                    self.goToOpponentCallback(pointId, message["buildingArr"])
                    self.goToOpponentCallback = nil
                end
            end, serverId)
        end, noSendReq)
    end
end

--获取已排好序的所有休战时间段（都是特殊处理）
function GloryManager:GetAllShowAvoidTime()
    local result = {}
    local k1 = LuaEntry.DataConfig:TryGetStr("plant_battlerule", "k1")
    local showStr = string.gsub(k1, "_", "-")
    local spl = string._split_ss_array(showStr, "|")
    if spl[1] ~= nil then
        for k,v in ipairs(spl) do
            local param = {}
            param.index = k - 1
            --"0"特殊处理
            if v == "0" then
                param.showTime = Localization:GetString(GameDialogDefine.Nothing)
            else
                param.showTime = v
            end
            result[k] = param
        end
    end
    return result
end

function GloryManager:GetContributionList()
    return self.contributionList
end

--通过玩家uid获取个人贡献信息
function GloryManager:GetContributionByUid(uid)
    for k,v in pairs(self.contributionList) do
        if v.uid == uid then
            return v
        end
    end
end

--获取本联盟的宣战记录
function GloryManager:GetMyHistoryList()
    if self.myHistoryDataList[2] ~= nil then
        table.sort(self.myHistoryDataList, function (a,b) 
            return b.t < a.t
        end)
    end
    return self.myHistoryDataList
end

--获取战区的宣战记录
function GloryManager:GetHistoryList()
    local result = {}
    for k,v in pairs(self.historyDataDict) do
        table.insert(result, v)
    end
    if result[2] ~= nil then
        table.sort(result, function (a,b)
            return b.t < a.t
        end)
    end
    return result
end

--获取活动数据
function GloryManager:GetActivityData()
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(EnumActivity.RobotWars.Type)
    if dataList ~= nil then
        return dataList[1]
    end
    return nil
end

--获取预告活动数据
function GloryManager:GetPreViewActivityData()
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.GloryPreview)
    if dataList ~= nil then
        return dataList[1]
    end
    return nil
end

function GloryManager:GetIsFightServer(serverId)
    local opponentData = DataCenter.GloryManager:GetOpponentData()
    if opponentData~=nil then
        local sId = opponentData.serverId
        if sId~=nil and sId>0 and sId == serverId then
            return true
        end
    end
    return false
end

function GloryManager:InitQuitAllianceTime(message)
    if message~=nil then
        if message["time"]~=nil then
            self.quitAllianceTime = message["time"]
        end
        if message["allianceId"]~=nil then
            self.quitAllianceId = message["allianceId"]
        end
    end
end

function GloryManager:GetQuitAllianceTime()
    return self.quitAllianceTime
end

--伊甸园分组处理
function GloryManager:EdenGroupInfoHandle(message)
    if message["allianceList"] then
        self.edenGroupInfo = {}
        self.campAllianceDic = {}
        for _, v in ipairs(message["allianceList"]) do
            local allianceData = GloryCampAlliance.New()
            allianceData:ParseAllianceData(v)
            if self.edenGroupInfo[allianceData.camp] then
                table.insert(self.edenGroupInfo[allianceData.camp],allianceData)
            else
                self.edenGroupInfo[allianceData.camp] = {}
                table.insert(self.edenGroupInfo[allianceData.camp],allianceData)
            end
            if allianceData.allianceId~=nil and allianceData.allianceId~="" then
                self.campAllianceDic[allianceData.allianceId] = allianceData
            end
        end
        for i = 1, 2 do
            table.sort(self.edenGroupInfo[i], function(a,b)
                if a.power > b.power then
                    return true
                end
                return false
            end)
        end
        if self.firstInit ==true then
            local list = table.values(self.campAllianceDic)
            if CS.GameEntry.Data.Player.SetAllianceServerCamp~=nil then
                CS.GameEntry.Data.Player:SetAllianceServerCamp(list)
            end
            self.firstInit =false
        end
    end
end

function GloryManager:GetEdenGroupInfo()
    return self.edenGroupInfo
end

function GloryManager:IsSameCampByAllianceId(allianceId)
    if allianceId~=nil and allianceId~="" and self.campAllianceDic[allianceId]~=nil then
        local camp = self.campAllianceDic[allianceId].camp
        local selfCamp = DataCenter.RobotWarsManager:GetSelfCamp()
        return camp == selfCamp
    end
    return false
end

--根据联盟id获取阵营
function GloryManager:GetCampByAllianceId(allianceId)
    if self.campAllianceDic and self.campAllianceDic[allianceId] then
        return self.campAllianceDic[allianceId].camp
    end
    return 0
end

--伊甸园个人杀敌或破坏耐久排名------
function GloryManager:SetSFiveEdenUserRank(message)
    self.sFiveUserRank = {}
    if message then
        self.sFiveUserRank = message
    end
    EventManager:GetInstance():Broadcast(EventId.EdenUserRank)
end

function GloryManager:GetSFiveEdenUserRank()
    return self.sFiveUserRank
end
--------------------------------

--伊甸园阵营积分-----
function GloryManager:SetSFiveCampScore(message)
    self.sFiveCampScore = {}
    if message["scoreArr"] then
        self.sFiveCampScore = message["scoreArr"]
    end
    EventManager:GetInstance():Broadcast(EventId.EdenCampScore)
end

function GloryManager:GetSFiveCampScore()
    return self.sFiveCampScore
end
--------------------------------

function GloryManager:CheckPreViewRed()
    local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
    --4赛季的时候显示5赛季预告
    if seasonId == 4 then
        local data = self:GetPreViewActivityData()
        if data then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            --检查是否到达分组时间
            if data.showMatchGroupTime and data.showMatchGroupTime <= curTime then
                local state = Setting:GetBool(SettingKeys.GLORY_PREVIEW_FIVE_GROUP..LuaEntry.Player.uid,false)
                if not state then
                    return 1
                end
            end
        end
    end
    return 0
end

GloryManager.__init = __init
GloryManager.__delete = __delete
GloryManager.AddListeners = AddListeners
GloryManager.RemoveListeners = RemoveListeners
GloryManager.Startup = Startup

GloryManager.Clear = Clear
GloryManager.GetBattleBeforeDuration = GetBattleBeforeDuration
GloryManager.GetBattleOngoingDuration = GetBattleOngoingDuration
GloryManager.GetDeclareNeedScore = GetDeclareNeedScore
GloryManager.GetDeclareCost = GetDeclareCost
GloryManager.GetMatchCost = GetMatchCost
GloryManager.GetCurTemplate = GetCurTemplate
GloryManager.GetWarData = GetWarData
GloryManager.GetActData = GetActData
GloryManager.GetDeclareAllianceDataList = GetDeclareAllianceDataList
GloryManager.GetMatchAllianceData = GetMatchAllianceData
GloryManager.GetMemberRecord = GetMemberRecord
GloryManager.GetBattleDetailList = GetBattleDetailList
GloryManager.GetPeriod = GetPeriod
GloryManager.GetOpponentData = GetOpponentData
GloryManager.GetBattleState = GetBattleState
GloryManager.GetBattleResult = GetBattleResult
GloryManager.HasEnoughScoreToDeclare = HasEnoughScoreToDeclare
GloryManager.HasEnoughTimeToDeclare = HasEnoughTimeToDeclare
GloryManager.GetPeriodName = GetPeriodName
GloryManager.GetOpenWeekDays = GetOpenWeekDays
GloryManager.GetOpenWeekDayDesc = GetOpenWeekDayDesc
GloryManager.GetGroupServerIds = GetGroupServerIds
GloryManager.GetGroupServerIdDesc = GetGroupServerIdDesc
GloryManager.GoToOpponent = GoToOpponent
GloryManager.IsInBattle = IsInBattle
GloryManager.CanAttackCityCrossServer = CanAttackCityCrossServer
GloryManager.CanDeclare = CanDeclare
GloryManager.TryShowSoon = TryShowSoon
GloryManager.OnCloseUI = OnCloseUI
GloryManager.GetCloseFightDayCurWeek = GetCloseFightDayCurWeek
GloryManager.GetOpenFightWeekDayDesCurWeek= GetOpenFightWeekDayDesCurWeek
GloryManager.GetMenuBattleRedNum = GetMenuBattleRedNum
GloryManager.CanShowBtnListRestRed = CanShowBtnListRestRed

GloryManager.SendGetWarData = SendGetWarData
GloryManager.SendGetDeclareAlliance = SendGetDeclareAlliance
GloryManager.SendDeclareWar = SendDeclareWar
GloryManager.SendMatch = SendMatch
GloryManager.SendSetAvoid = SendSetAvoid
GloryManager.SendGetMyHistory = SendGetMyHistory
GloryManager.SendGetHistory = SendGetHistory
GloryManager.SendGetMemberRecord = SendGetMemberRecord
GloryManager.SendGetBattleDetail = SendGetBattleDetail
GloryManager.SendGetAct = SendGetAct
GloryManager.SendGetContribution = SendGetContribution
GloryManager.SendGoToOpponent = SendGoToOpponent

GloryManager.HandleGetWarData = HandleGetWarData
GloryManager.HandleGetDeclareAlliance = HandleGetDeclareAlliance
GloryManager.HandleDeclareWar = HandleDeclareWar
GloryManager.HandleStart = HandleStart
GloryManager.HandleMatch = HandleMatch
GloryManager.HandleSetAvoid = HandleSetAvoid
GloryManager.HandleGetMyHistory = HandleGetMyHistory
GloryManager.HandleGetHistory = HandleGetHistory
GloryManager.HandleGetMemberRecord = HandleGetMemberRecord
GloryManager.HandleGetBattleDetail = HandleGetBattleDetail
GloryManager.HandleGetAct = HandleGetAct
GloryManager.HandleGetContribution = HandleGetContribution
GloryManager.HandleGoToOpponent = HandleGoToOpponent
GloryManager.GetEdenGroup = GetEdenGroup
return GloryManager