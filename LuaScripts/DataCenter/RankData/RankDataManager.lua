---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/9/3 16:16
---
local RankDataManager = BaseClass("RankDataManager");

local function __init(self)
    self.playerRankList = {}
    self.allianceRankList = {}
    self.selfAllianceRank =-1
    self.selfPlayerRank = -1
    self.currentRankType = RankType.None
    self.allianceSelfKill = 0
end

local function __delete(self)
    self.playerRankList = nil
    self.allianceRankList = nil
    self.selfAllianceRank = nil
    self.selfPlayerRank = nil
    self.currentRankType = nil
    self.allianceSelfKill = nil
end

local function ParsePlayerRankData(self,message,rankType)
    self.playerRankList = {}
    self.selfPlayerRank = -1
    self.currentRankType = rankType
    if message~=nil then
        if message["selfRanking"]~=nil then
            self.selfPlayerRank = message["selfRanking"]
        end
        if message["serverRanking"]~=nil then
            local arr = message["serverRanking"]
            for k, v in pairs(arr) do
                local oneData = PlayerRankData.New()
                oneData:ParseData(v,rankType)
                oneData:SetRank(k)
                table.insert(self.playerRankList,oneData)
            end
        end
    end
end

local function GetPlayerRankListByType(self,rankType)
    local rankList ={}
    if self.currentRankType == rankType then 
        rankList = self.playerRankList
    end
    return rankList
end

local function ParseAllianceRankData(self,message,rankType)
    self.allianceRankList = {}
    self.selfAllianceRank = -1
    self.currentRankType = rankType
    if message~=nil then
        if message["selfRanking"]~=nil then
            self.selfAllianceRank = message["selfRanking"]
        end
        local arr = nil
        if message["allianceRanking"]~=nil then
            arr = message["allianceRanking"]
            self.allianceSelfKill = message["selfAllianceKillNum"] or 0
        elseif message["serverRanking"]~=nil then
            arr = message["serverRanking"]
        end
        if arr ~=nil then
            for k, v in pairs(arr) do
                local oneData = AllianceRankData.New()
                oneData:ParseData(v,rankType)
                oneData:SetRank(k)
                table.insert(self.allianceRankList,oneData)
            end
        end
    end
end

local function GetAllianceRankListByType(self,rankType)
    local rankList ={}
    if self.currentRankType == rankType then
        rankList = self.allianceRankList
    end
    return rankList
end

local function GetSelfPlayerRankByType(self,rankType)
    local rank =-1
    if self.currentRankType == rankType then
        rank = self.selfPlayerRank
    end
    return rank
end
local function GetSelfAllianceRankByType(self,rankType)
    local rank =-1
    if self.currentRankType == rankType then
        rank = self.selfAllianceRank
    end
    return rank
end

local function GetFirstDataByType(self,type)
    return nil
end

RankDataManager.__init = __init
RankDataManager.__delete = __delete
RankDataManager.ParsePlayerRankData = ParsePlayerRankData
RankDataManager.GetPlayerRankListByType = GetPlayerRankListByType
RankDataManager.ParseAllianceRankData = ParseAllianceRankData
RankDataManager.GetAllianceRankListByType = GetAllianceRankListByType
RankDataManager.GetSelfPlayerRankByType = GetSelfPlayerRankByType
RankDataManager.GetSelfAllianceRankByType = GetSelfAllianceRankByType
RankDataManager.GetFirstDataByType = GetFirstDataByType
return RankDataManager