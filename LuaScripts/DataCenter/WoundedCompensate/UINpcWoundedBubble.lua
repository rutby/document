---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime:
---
local UINpcWoundedBubble = BaseClass("UINpcWoundedBubble")

local trigger_path = "Go/Trigger"
local icon_go_path = "Go"
local bg1_path = "Go/Bg1"
local bg2_path = "Go/Bg2"
--创建
local function OnCreate(self, go)
    if go ~= nil then
        self.request = go
        self.gameObject = go.gameObject
        self.transform = go.gameObject.transform
    end
    self:ComponentDefine()
    self:DataDefine()
    self:ReInit()
end

-- 销毁
local function OnDestroy(self)
    self:DeleteTimer()
    self:ComponentDestroy()
    self:DataDestroy()
end

local function ComponentDefine(self)
    if not self.defend then
        self.bg = self.transform:Find(trigger_path):GetComponent(typeof(CS.TouchObjectEventTrigger))
        self.bg.onPointerClick = function()
            self:OnClick()
        end
        self.bg1 = self.transform:Find(bg1_path):GetComponent(typeof(CS.SpriteMeshRenderer))
        self.bg2 = self.transform:Find(bg2_path):GetComponent(typeof(CS.SpriteMeshRenderer))
        self.icon_Circle = self.transform:Find(icon_go_path):GetComponent(typeof(CS.ChangeSceneCircleSlider))
        self.defend = true
    end
end

local function ComponentDestroy(self)

end

local function DataDefine(self)
    self.timer = nil
    self.timer_action = function(temp)
        self:RefreshTime(temp)
    end
end

local function ReInit(self)
    self.compensateData = DataCenter.WoundedCompensateData:GetDataInfo()
    self:RefreshTime()
    self:AddTimer()
    self.icon_Circle:Init(self.compensateData.time,self.compensateData.endTime)
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action ,self, false,false,false)
    end
    self.timer:Start()
end

local function RefreshTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.compensateData.endTime < curTime then
        self:DeleteTimer()
        self.bg1.gameObject:SetActive(false)
        self.bg2.gameObject:SetActive(true)
    else
        self.bg1.gameObject:SetActive(true)
        self.bg2.gameObject:SetActive(false)
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function DataDestroy(self)
    self.defend = nil
end

local function OnClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIWoundedCompensate)
    local needParam = {}
    needParam.click = true
    DataCenter.GuideManager:SetCompleteNeedParam(needParam)
    DataCenter.GuideManager:CheckGuideComplete()
end
local function GetGuideTrigger(self)
    return self.bg.gameObject
end

UINpcWoundedBubble.OnCreate = OnCreate
UINpcWoundedBubble.OnDestroy = OnDestroy
UINpcWoundedBubble.ComponentDefine = ComponentDefine
UINpcWoundedBubble.ComponentDestroy = ComponentDestroy
UINpcWoundedBubble.DataDefine = DataDefine
UINpcWoundedBubble.DataDestroy = DataDestroy
UINpcWoundedBubble.ReInit = ReInit
UINpcWoundedBubble.OnClick = OnClick
UINpcWoundedBubble.AddTimer = AddTimer
UINpcWoundedBubble.RefreshTime = RefreshTime
UINpcWoundedBubble.DeleteTimer = DeleteTimer
UINpcWoundedBubble.GetGuideTrigger = GetGuideTrigger

return UINpcWoundedBubble