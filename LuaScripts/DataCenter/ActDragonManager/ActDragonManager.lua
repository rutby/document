---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 2023/5/29 21:58
---

local ActDragonManager = BaseClass("ActDragonManager")
local ActDragonData = require "DataCenter.ActDragonManager.ActDragonData"
local BattleHistory = require "DataCenter.ActDragonManager.BattleHistory"
local ActDragonPlayerData = require "DataCenter.ActDragonManager.ActDragonPlayerData"
local DragonBattleInfo = require "DataCenter.ActDragonManager.DragonBattleInfo"
local ActDragonRecordData = require "DataCenter.ActDragonManager.ActDragonRecordData"
function ActDragonManager:__init()
    self.actInfo = {}   --活动信息
    self.dragonEffect = {}
    self.rewardInfo = {} --奖励信息
    self.SignUpState = {NoSignUp = 0,SignUp = 1} --报名状态
    self.battleTimes = {} --报名可选时段
    self.battleHistory = {} --历史记录
    self.playerList = {}
    self.dragonRecord = {}
end

function ActDragonManager:__delete()
    self.actInfo = {}
    self.dragonEffect = {}
    self.rewardInfo = {}
    self.battleTimes = {}
    self.battleHistory = {}
    self.playerList = {}
    self.dragonRecord = {}
end

--{{{消息

--获取活动信息
function ActDragonManager:SendGetInfo()
    SFSNetwork.SendMessage(MsgDefines.DragonActivityInfo)
end

function ActDragonManager:SendGetPlayerList()
    SFSNetwork.SendMessage(MsgDefines.DragonAssignPlayerInfo)
end

function ActDragonManager:RequestBattleScore()
    if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        SFSNetwork.SendMessage(MsgDefines.DragonBattleInfo)
    end
end

function ActDragonManager:RequestDragonResult()
    SFSNetwork.SendMessage(MsgDefines.DragonBattleScoreInfo)
end

function ActDragonManager:HandleBattleScore(message)
    if message["scoreInfo"]~=nil then
        self.dragonRecord = {}
        local dic = message["scoreInfo"]
        for k,v in pairs(dic) do
            local oneData = ActDragonRecordData.New()
            oneData:ParseData(v)
            if oneData.allianceId~=nil or oneData.allianceId~="" then
                self.dragonRecord[oneData.allianceId] = oneData
            end
        end
    end

end
function ActDragonManager:OnHandleBattleScore(message)
    if self.battleInfo == nil then
        self.battleInfo = DragonBattleInfo.New()
    end
    self.battleInfo:ParseData(message)
    EventManager:GetInstance():Broadcast(EventId.DragonScoreRefresh)
end
function ActDragonManager:GetBattleInfo()
    return self.battleInfo
end

function ActDragonManager:GetDragonRecord()
    return self.dragonRecord
end
function ActDragonManager:GetSelfSide()
    local side = 0
    if self.battleInfo~=nil then
        side = self.battleInfo.selfSide
    end
    return side
end
function ActDragonManager:HandleGetInfo(message)
    local oneData = ActDragonData.New()
    oneData:ParseData(message)
    self.actInfo = oneData
    EventManager:GetInstance():Broadcast(EventId.DragonInfoRefresh)
end

function ActDragonManager:HandleGetPlayerList(message)
    if message["users"]~=nil then
        self.playerList= {}
        local dic = message["users"]
        for k,v in pairs(dic) do
            local oneData = ActDragonPlayerData.New()
            oneData:ParseData(v)
            if oneData.uid~=nil and oneData.uid~="" then
                self.playerList[oneData.uid] = oneData
            end
        end
        EventManager:GetInstance():Broadcast(EventId.GetDagonPlayerList)
    end
end

function ActDragonManager:GetPlayerList()
    return self.playerList
end
function ActDragonManager:SelectPlayer(uid,state)
    if self.playerList[uid]~=nil then
        if self.playerList[uid].state == state then
            return
        end
        if state == DragonPlayerState.Main then
            local maxNum = LuaEntry.DataConfig:TryGetNum("dragon_battle_base", "k4")
            local curNum = self:GetCurNumByState(state)
            if maxNum<=curNum then
                UIUtil.ShowTipsId(376093)
            else
                SFSNetwork.SendMessage(MsgDefines.DragonAssignPlayer,uid,state)
            end
        elseif state == DragonPlayerState.Sub then
            local maxNum = LuaEntry.DataConfig:TryGetNum("dragon_battle_base", "k5")
            local curNum = self:GetCurNumByState(state)
            if maxNum<=curNum then
                UIUtil.ShowTipsId(376094)
            else
                SFSNetwork.SendMessage(MsgDefines.DragonAssignPlayer,uid,state)
            end
        end
        self.playerList[uid].state = state
    end

end

function ActDragonManager:CancelPlayer(uid)
    if self.playerList[uid] ~=nil then
        SFSNetwork.SendMessage(MsgDefines.DragonRevokePlayer,uid)
        self.playerList[uid].state = DragonPlayerState.None
    end
end
function ActDragonManager:HandleSelectPlayer(message)
    if message == nil then
        return
    end
    local oneData = ActDragonPlayerData.New()
    oneData:ParseData(message)
    if oneData.uid~=nil and oneData.uid~="" then
        self.playerList[oneData.uid] = oneData
    end
end

function ActDragonManager:GetCurNumByState(state)
    local num = 0
    for k,v in pairs(self.playerList) do
        if v.state == state then
            num = num+1
        end
    end
    return num
end

function ActDragonManager:GetTotalPowerBySelect()
    local num = 0
    for k,v in pairs(self.playerList) do
        if v.state == DragonPlayerState.Main or v.state == DragonPlayerState.Sub then
            num = num+v.power
        end
    end
    return num
end
------------------------------------------------------

--获取奖励信息
function ActDragonManager:SendGetRewardInfo()
    SFSNetwork.SendMessage(MsgDefines.DragonRewardInfo)
end

function ActDragonManager:HandleGetRewardInfo(message)
    self.rewardInfo = {}
    if message["winAllianceReward"] then
        self.rewardInfo[1] = {}
        self.rewardInfo[1] = DataCenter.RewardManager:ReturnRewardParamForView(message["winAllianceReward"])
    end
    if message["loseAllianceReward"] then
        self.rewardInfo[2] = {}
        self.rewardInfo[2] = DataCenter.RewardManager:ReturnRewardParamForView(message["loseAllianceReward"])
    end
    if message["winPersonReward"] then
        self.rewardInfo[3] = {}
        self.rewardInfo[3] = DataCenter.RewardManager:ReturnRewardParamForView(message["winPersonReward"])
    end
    if message["losePersonReward"] then
        self.rewardInfo[4] = {}
        self.rewardInfo[4] = DataCenter.RewardManager:ReturnRewardParamForView(message["losePersonReward"])
    end
    self.scoreArr = {}
    if message["winScoreRewardArr"] then
        local winScoreRewardArr = message["winScoreRewardArr"]
        self.rewardInfo[5] = {}
        self.scoreArr.winScore = {}
        for i = 1 ,table.count(winScoreRewardArr) do
            local param = {}
            param.s = winScoreRewardArr[i]["start"]
            param.e = winScoreRewardArr[i]["end"]
            table.insert(self.scoreArr.winScore,param)
            self.rewardInfo[5][i] = DataCenter.RewardManager:ReturnRewardParamForView(winScoreRewardArr[i]["reward"])
        end
    end
    if message["loseScoreRewardArr"] then
        local loseScoreRewardArr = message["loseScoreRewardArr"]
        self.rewardInfo[6] = {}
        self.scoreArr.loseScore = {}
        for i = 1 ,table.count(loseScoreRewardArr) do
            local param = {}
            param.s = loseScoreRewardArr[i]["start"]
            param.e = loseScoreRewardArr[i]["end"]
            table.insert(self.scoreArr.loseScore,param)
            self.rewardInfo[6][i] = DataCenter.RewardManager:ReturnRewardParamForView(loseScoreRewardArr[i]["reward"])
        end
    end
    EventManager:GetInstance():Broadcast(EventId.DragonRewardInfo)
end

------------------------------------------------------

function ActDragonManager:SendGetEffectInfo()
    if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        SFSNetwork.SendMessage(MsgDefines.GetDragonSeverEffect)
    end
end

------------------------------------------------------

--报名
function ActDragonManager:SendSignUp(battlePeriod)
    SFSNetwork.SendMessage(MsgDefines.DragonBattleSignUp,battlePeriod)
end

function ActDragonManager:HandleSignUp(message)
    UIUtil.ShowTipsId(302036)
    self.actInfo:UpdateBattlePeriod(message)
    self:SendGetInfo()
end
------------------------------------------------------

--修改场次
function ActDragonManager:SendModifyBattlePeriod(battlePeriod)
    SFSNetwork.SendMessage(MsgDefines.DragonBattleModifyBattlePeriod,battlePeriod)
end

function ActDragonManager:HandleModifyBattlePeriod(message)
    UIUtil.ShowTipsId(280146)
    self.actInfo:ModifyBattlePeriod(message)
    self:SendGetInfo()
end
------------------------------------------------------

--查看报名可选时段
function ActDragonManager:SendGetBattleTime()
    SFSNetwork.SendMessage(MsgDefines.GetDragonBattleTimes)
end

function ActDragonManager:HandleGetBattleTime(message)
    self.battleTimes = {}
    if message["battleTimes"] then
        local battleTimes = message["battleTimes"]
        for i = 1 ,table.count(battleTimes) do
            local param = {}
            param.battlePeriod  = battleTimes[i].battlePeriod   --场次
            param.startTime     = battleTimes[i].startTime      --开始时间
            param.endTime       = battleTimes[i].endTime        --结束时间
            param.num           = battleTimes[i].num            --该场次报名联盟数量
            table.insert(self.battleTimes,param)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.DragonBattleTimes)
end
------------------------------------------------------

--查看历史记录
function ActDragonManager:SendBattleHistory()
    SFSNetwork.SendMessage(MsgDefines.DragonBattleHistory)
end

function ActDragonManager:HandleBattleHistory(message)
    self.battleHistory = {}
    if message["historyArr"] then
        local historyArr = message["historyArr"]
        for i = 1 ,table.count(historyArr) do
            local oneData = BattleHistory.New()
            oneData:ParseData(historyArr[i])
            table.insert(self.battleHistory,oneData)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.DragonBattleHistory)
end
--}}}

function ActDragonManager:UpdateDragonEffect(message)
    self.dragonEffect ={}
    if message~=nil and message["effect"]~=nil then
        for k, v in pairs(message["effect"]) do
            local effectId = tonumber(k)
            local effectValue = tonumber(v)
            self.dragonEffect[effectId] = effectValue
        end
    end
end

function ActDragonManager:GetDragonEffectById(id)
    local effectId = id
    local num = 0
    if LuaEntry.Player.serverType == ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        if self.dragonEffect~=nil and self.dragonEffect[effectId]~=nil then
            num = self.dragonEffect[effectId]
        end
    end

    return num
end

function ActDragonManager:GetDragonEffectData()
    return self.dragonEffect
end

--获取活动信息
function ActDragonManager:GetDragonInfo()
    return self.actInfo
end

--获取奖励信息
function ActDragonManager:GetRewardInfo()
    return self.rewardInfo
end

--获取报名可选时间段
function ActDragonManager:GetBattleTimeInfo()
    return self.battleTimes
end

--获取历史记录
function ActDragonManager:GetBattleHistory()
    return self.battleHistory
end

function ActDragonManager:GetScoreInfo(type)
    --5,6是积分奖励
    if self.scoreArr then
        if type == 5 then
            return self.scoreArr.winScore
        elseif type == 6 then
            return self.scoreArr.loseScore
        end
    end
    return nil
end

return ActDragonManager
