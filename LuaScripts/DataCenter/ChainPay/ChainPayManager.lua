---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/1/6 14:43
---

local ChainPayManager = BaseClass("ChainPayManager")
local ChainPayData = require "DataCenter.ChainPay.ChainPayData"
local ChainPayBoxData = require "DataCenter.ChainPay.ChainPayBoxData"

local function __init(self)
    self.dataDict = {} -- Dict<actId, ChainPayData>
    self:AddListeners()
    self.isRefreshing = false
end

local function __delete(self)
    self.dataDict = nil
    self:RemoveListeners()
    self.isRefreshing = nil
end

local function AddListeners(self)
    EventManager:GetInstance():AddListener(EventId.PaySuccess, self.OnPaySuccess)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.PaySuccess, self.OnPaySuccess)
end

local function AddDataByAct(self, actData)
    local actId = tonumber(actData.id)
    local data = ChainPayData.New()
    data.actId = actId
    self.dataDict[actId] = data
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime >= actData.startTime and curTime <= actData.endTime then
        self:SendGetInfo(actId)
    end
end

local function GetData(self, actId)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local actData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(actId))
    if actData ~= nil and curTime >= actData.startTime and curTime <= actData.endTime then
        return self.dataDict[tonumber(actId)]
    else
        return nil
    end
end

local function GetDataByPackId(self, packId)
    for _, data in pairs(self.dataDict) do
        for _, box in ipairs(data.boxes) do
            if box.exchangeId == packId then
                return data, box
            end
        end
    end
    return nil, nil
end

local function IsRefreshing(self)
    return self.isRefreshing
end

local function OnPaySuccess(packId)
    --local data, box = DataCenter.ChainPayManager:GetDataByPackId(packId)
    --if data and box then
    --    -- 购买后自动领取
    --    DataCenter.ChainPayManager:SendReceiveReward(data.actId, box.id)
    --end
end

local function SendGetInfo(self, actId)
    SFSNetwork.SendMessage(MsgDefines.ChainPayGetInfo, actId)
end

local function SendReceiveReward(self, actId, boxId)
    SFSNetwork.SendMessage(MsgDefines.ChainPayReceiveReward, actId, boxId)
end

local function SendRefresh(self, actId, group)
    self.isRefreshing = true
    SFSNetwork.SendMessage(MsgDefines.ChainPayRefresh, actId, group)
end

local function HandleGetInfo(self, message)
    if message["activityId"] then
        local actId = tonumber(message["activityId"])
        local data = self.dataDict[actId] or ChainPayData.New()
        data.actId = actId
        data.boxes = {}
        if message["packageArr"] then
            for _, v in ipairs(message["packageArr"]) do
                local box = ChainPayBoxData.New()
                box.data = data
                box.id = v.id
                box.rewardArrs = v.rewardArr or {}
                box.index = v.order
                box.exchangeIds = {}
                if not string.IsNullOrEmpty(v.exchangeIds) then
                    box.exchangeIds = string.split(v.exchangeIds, ";")
                end
                box.state = v.state
                box.group = v.group
                data.boxes[box.index] = box
            end
        end
        data.groupDict = {}
        if message["groupArr"] then
            for _, v in ipairs(message["groupArr"]) do
                data.groupDict[v.group] = v.groupIndex
            end
        end
        self.dataDict[actId] = data
        EventManager:GetInstance():Broadcast(EventId.ChainPayGetInfo, actId)
        EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
    end
end

local function HandleReceiveReward(self, message)
    if message["activityId"] and message["id"] then
        local actId = message["activityId"]
        local boxId = message["id"]
        local data = self.dataDict[actId]
        if data then
            local box = data:GetBoxById(boxId)
            if box then
                box.state = ChainPayBoxState.Received
                EventManager:GetInstance():Broadcast(EventId.ChainPayReceiveReward, actId)
                EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
            end
        end
    end
    if message["reward"] then
        for _, v in ipairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(message)
    end
end

local function HandleUpdateState(self, message)
    if message["activityId"] then
        local actId = message["activityId"]
        local boxId = message["id"]
        local data = self.dataDict[actId]
        if data then
            local box = data:GetBoxById(boxId)
            if box then
                box.state = message["state"]
                EventManager:GetInstance():Broadcast(EventId.ChainPayUpdateState, actId)
                EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
            end
        end
    end
end

local function HandleRefresh(self, message)
    self.isRefreshing = false
    if message["activityId"] then
        local actId = message["activityId"]
        local group = message["group"]
        local groupIndex = message["groupIndex"]
        local data = self.dataDict[actId]
        data.groupDict[group] = groupIndex
        EventManager:GetInstance():Broadcast(EventId.ChainPayRefresh, actId)
        EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
    end
end

ChainPayManager.__init = __init
ChainPayManager.__delete = __delete
ChainPayManager.AddListeners = AddListeners
ChainPayManager.RemoveListeners = RemoveListeners

ChainPayManager.AddDataByAct = AddDataByAct
ChainPayManager.GetData = GetData
ChainPayManager.GetDataByPackId = GetDataByPackId
ChainPayManager.IsRefreshing = IsRefreshing

ChainPayManager.OnPaySuccess = OnPaySuccess

ChainPayManager.SendGetInfo = SendGetInfo
ChainPayManager.SendReceiveReward = SendReceiveReward
ChainPayManager.SendRefresh = SendRefresh

ChainPayManager.HandleInit = HandleInit
ChainPayManager.HandleGetInfo = HandleGetInfo
ChainPayManager.HandleReceiveReward = HandleReceiveReward
ChainPayManager.HandleUpdateState = HandleUpdateState
ChainPayManager.HandleRefresh = HandleRefresh

return ChainPayManager