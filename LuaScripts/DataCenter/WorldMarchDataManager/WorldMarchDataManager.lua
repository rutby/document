---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/10/11 20:53
---
local WorldMarchDataManager = BaseClass("WorldMarchDataManager");
local WorldMarchData = require "DataCenter.WorldMarchDataManager.WorldMarchData"

local TaskType = {
    WorldMarchGet =1,
    PushMarchAdd =2,
    PushMarchDel =3,
    FormationMarchChange =4,
    FormationMarch =5,
}

function WorldMarchDataManager:__init()
    self.messageQueue = {}
    self.allMarches ={}
    self.tempAllMarches ={}
    self.ownerMarches = {}
    self.allianceMarches = {}
    self.rallyMarchDic = {}
    self.dragonMarchDic = {}
    self.sortRallyMarchDic = {}
    self.fakeSampleMarches = {}
    self.isInit = false
    self.time = 0
    self.syncTime = 0
    self.lodLv = 1
    self.marchListMessageArray = {}
    self.updateMarchMessageArray = {}
    self.removeMarchMessageArray = {}
    self.viewRectSize ={ xMin = 0,xMax =0,yMin =0,YMax = 0}
    self.camera = CS.UnityEngine.Camera.main
    self.on_CameraChange = function(msg) self:OnCameraChange(msg) end
    self.timer_action = function(temp)
        self:UpdateMove()
    end
end

function WorldMarchDataManager:__delete()
    self.messageQueue = {}
    self.allMarches ={}
    self.tempAllMarches ={}
    self.ownerMarches = {}
    self.allianceMarches = {}
    self.rallyMarchDic = {}
    self.dragonMarchDic = {}
    self.sortRallyMarchDic = {}
    self.isInit = false
    self.time = 0
    self.syncTime = 0
    self.lodLv = 1
    self.marchListMessageArray = {}
    self.updateMarchMessageArray = {}
    self.removeMarchMessageArray = {}
    self.fakeSampleMarches = {}
end
function WorldMarchDataManager:StartUp()
    self.camera = CS.UnityEngine.Camera.main
    self.messageQueue = {}
    self.allMarches ={}
    self.tempAllMarches ={}
    self.ownerMarches = {}
    self.allianceMarches = {}
    self.rallyMarchDic = {}
    self.dragonMarchDic = {}
    self.sortRallyMarchDic = {}
    self.fakeSampleMarches = {}
    self.isInit = true
    self.time = 0
    self.syncTime = 0
    self.lodLv = 1
    self.marchListMessageArray = {}
    self.updateMarchMessageArray = {}
    self.removeMarchMessageArray = {}
    self:AddListener()
    self:EnableUpdate()

end
function WorldMarchDataManager:Close()
    self.camera = CS.UnityEngine.Camera.main
    self.isInit = false
    self:RemoveListener()
    self:DisableUpdate()
    self.messageQueue = {}
    self.allMarches ={}
    self.tempAllMarches ={}
    self.ownerMarches = {}
    self.allianceMarches = {}
    self.rallyMarchDic = {}
    self.dragonMarchDic = {}
    self.sortRallyMarchDic = {}
    self.fakeSampleMarches = {}
    self.time = 0
    self.syncTime = 0
    self.lodLv = 1
    self.marchListMessageArray = {}
    self.updateMarchMessageArray = {}
    self.removeMarchMessageArray = {}
end

function WorldMarchDataManager:EnableUpdate()
    self:DisableUpdate()
    self.__update_handle = function() self:Update() end
    UpdateManager:GetInstance():AddUpdate(self.__update_handle)

    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(0.1, self.timer_action, self, false,false,false)
    end
    self.timer:Start()
    
end
function WorldMarchDataManager:DisableUpdate()
    if self.__update_handle then
        UpdateManager:GetInstance():RemoveUpdate(self.__update_handle)
        self.__update_handle = nil
    end
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end
function WorldMarchDataManager:AddListener()
    --EventManager:GetInstance():AddListener(EventId.ChangeCameraLod, self.on_LodChanged)
    EventManager:GetInstance():AddListener(EventId.WORLD_CAMERA_CHANGE_POINT, self.on_CameraChange)
end

function WorldMarchDataManager:RemoveListener()
    --EventManager:GetInstance():RemoveListener(EventId.ChangeCameraLod, self.on_LodChanged)
    EventManager:GetInstance():RemoveListener(EventId.WORLD_CAMERA_CHANGE_POINT, self.on_CameraChange)
end

function WorldMarchDataManager:Update()
    if self.isInit ==false then
        return
    end
    self.time = UITimeManager:GetInstance():GetServerTime()
    self:ParseServerDataAsync()
    self.syncTime = UITimeManager:GetInstance():GetServerTime()
end
function WorldMarchDataManager:OnCameraChange(msg)
    self.curCameraTarget = CS.SceneManager.World.CurTarget
    self:UpdateViewRect()
end
function WorldMarchDataManager:ParseServerDataAsync()
    while #self.messageQueue > 0 do
        local tab = self:PopMessageQueue()
        if tab ~= nil then
            local parseType = tab.t
            local message = tab.msg
            if parseType == TaskType.WorldMarchGet then
                local pTemp  = message["marchInfos"]
                if pTemp ~=nil then
                    self.marchListMessageArray = pTemp
                end
            elseif parseType == TaskType.PushMarchAdd or parseType == TaskType.FormationMarch or parseType == TaskType.FormationMarchChange then
                local pTemp  = message
                if pTemp ~=nil then
                    table.insert(self.updateMarchMessageArray,pTemp)
                end
            elseif parseType == TaskType.PushMarchDel then
                local pTemp  = message
                if pTemp ~=nil then
                    table.insert(self.removeMarchMessageArray,pTemp)
                end
            end
            local beforeTime = UITimeManager:GetInstance():GetServerTime()
            local parseFinish,count = self:DoParse()
            if parseFinish == false then
                Logger.Log("[world March] parse break because useTime>5ms count:"..count)
                return
            end
            local endTime = UITimeManager:GetInstance():GetServerTime()
            Logger.Log(string.format("[world March] parse %s data  use %s ms",count,(endTime-beforeTime)))
        end
    end
end
function WorldMarchDataManager:DoParse()
    local count = 0
    if #self.marchListMessageArray>0 then
        local parseCount = self:WorldMarchGetHandleInner(self.marchListMessageArray)
        count = count+ parseCount
    end
    if #self.updateMarchMessageArray>0 then
        local parseCount = self:WorldMarchUpdateHandleInner(self.updateMarchMessageArray)
        count = count+ parseCount
    end
    if #self.removeMarchMessageArray>0 then
        local parseCount = self:WorldMarchDelHandleInner(self.removeMarchMessageArray)
        count = count+ parseCount
    end
    return true,count
end
function WorldMarchDataManager:PushMessageQueue(message,type)
    if type == TaskType.WorldMarchGet then --world.get 消息返回时删掉所有队列
        self.marchListMessageArray = {}
        self.updateMarchMessageArray = {}
        local tempList = {}
        for i=1,#self.messageQueue do
            if self.messageQueue[i].t == TaskType.PushMarchDel then
                table.insert(tempList,self.messageQueue[i])
            end
        end
        self.messageQueue = tempList
    end
    table.insert(self.messageQueue,{msg = message,t = type})
end
function WorldMarchDataManager:PopMessageQueue()
    if #self.messageQueue == 0 then
        return nil
    end
    return table.remove(self.messageQueue, 1)
end
function WorldMarchDataManager:WorldMarchGetHandleInner(marchListMessageArray)
    local count = 0
    self.tempAllMarches = {}
    self.tempAllMarches = self.allMarches
    self.allMarches ={}
    self.ownerMarches = {}
    self.allianceMarches = {}
    self.rallyMarchDic = {}
    self.dragonMarchDic = {}
    local updateSelfMarch = false;
    local updateTargetMineMarch = false;
    local updateDragonMarch = false
    local alarmList = {}
    while #marchListMessageArray > 0 do
        local v = table.remove(marchListMessageArray,1)
        if v~=nil then
            local eventId = v.eventId
            local belongUid = v.belongUid
            if eventId~=nil and eventId~="" and belongUid ~=LuaEntry.Player.uid then
                goto continue
            end
            local marchType = v.type
            if marchType == NewMarchType.MONSTER or marchType == NewMarchType.BOSS then
                if belongUid~=nil and belongUid~="" and belongUid ~=LuaEntry.Player.uid then
                    goto continue
                end
            end
            local march = WorldMarchData.New()
            march:UpdateWorldMarch(v)
            local marchUuid = march.uuid
            if updateSelfMarch == false then
                if march~=nil then
                    if march.ownerUid == LuaEntry.Player.uid then
                        updateSelfMarch = true
                    elseif march.type  == NewMarchType.ASSEMBLY_MARCH then
                        local allianceId = LuaEntry.Player.allianceUid
                        if allianceId~=nil and allianceId~="" and march.allianceUid == allianceId then
                            updateSelfMarch = true
                        end
                    end
                end
            end
            self:AddOrUpdateMarch(march)
            self:UpdateTroop(march.uuid)
            if WorldTroopLineManager:GetInstance():IsTroopLineCreate(march.uuid) ==true then
                WorldTroopLineManager:GetInstance():CreateTroopLine(march.uuid)
            end
            if march.secretKey~=nil and march.secretKey>0 then
                self.dragonMarchDic[march.uuid] =march
                if updateDragonMarch ==false then
                    updateDragonMarch = true
                end
            end
            if march:GetMarchType()==NewMarchType.ASSEMBLY_MARCH
                    and march:GetMarchTargetType()==MarchTargetType.RALLY_THRONE
                    and march:GetMarchStatus() == MarchStatus.WAIT_THRONE
                    and march.inBattle ==false then
                self.rallyMarchDic[march.uuid] = march
            end
            if self:IsTargetForMine(march) then
                alarmList[march.uuid] = march
            end
        end

        count = count+1
        ::continue::
    end
    if table.count(alarmList)>0 then
        updateTargetMineMarch = true
    end
    self:UpdateSortRallyMarch()
    --旧数据对比新数据，把多的行军删除
    for a,b in pairs(self.tempAllMarches) do
        if self.allMarches[a] ==nil then
            if updateSelfMarch == false then
                if b.ownerUid == LuaEntry.Player.uid then
                    updateSelfMarch = true
                elseif b.type == NewMarchType.ASSEMBLY_MARCH then
                    local allianceId = LuaEntry.Player.allianceUid
                    if allianceId~=nil and allianceId~="" and b.allianceUid == allianceId then
                        updateSelfMarch = true
                    end
                end
            end
            self:AddToRemoveList(a,false)
            WorldTroopLineManager:GetInstance():DestroyTroopLine(a)
        else
            if updateDragonMarch ==false then
                if self.allMarches[a].secretKey~=b.secretKey then
                    updateDragonMarch = true
                end
            end
        end
    end
    self.tempAllMarches = {}
    self:InitAlarmData(alarmList)
    self:FireMessage(updateTargetMineMarch,updateSelfMarch,updateDragonMarch)
    return count
end
function WorldMarchDataManager:WorldMarchUpdateHandleInner(updateMarchMessageArray)
    local count = 0
    local updateSelfMarch = false;
    local updateTargetMineMarch = false;
    local updateDragonMarch = false
    local needUpdateAlarmMarch ={}
    local needRemoveAlarmMarchList = {}
    while #updateMarchMessageArray > 0 do
        local v = table.remove(updateMarchMessageArray,1)
        if v~=nil then
            local eventId = v.eventId
            local belongUid = v.belongUid
            if eventId~=nil and eventId~="" and belongUid ~=LuaEntry.Player.uid then
                goto continue
            end
            local marchType = v.type
            if marchType == NewMarchType.MONSTER or marchType == NewMarchType.BOSS then
                if belongUid~=nil and belongUid~="" and belongUid ~=LuaEntry.Player.uid then
                    goto continue
                end
            end
            local march = WorldMarchData.New()
            march:UpdateWorldMarch(v)
            local marchUuid = march.uuid
            local oldMarch = self:GetMarch(marchUuid)
            local isTargetSelf = self:IsTargetForMine(march)
            if oldMarch~=nil then
                if self:IsTargetForMine(oldMarch)~= isTargetSelf then
                    if isTargetSelf == true then
                        needUpdateAlarmMarch[march.uuid] = march
                    else
                        needRemoveAlarmMarchList[march.uuid] = 1
                    end
                end
                if updateDragonMarch ==false then
                    if oldMarch.secretKey~=march.secretKey then
                        updateDragonMarch = true
                    end
                end
            else
                if isTargetSelf == true then
                    needUpdateAlarmMarch[march.uuid] = march
                end
            end
            if updateSelfMarch == false then
                if march~=nil then
                    if march.ownerUid == LuaEntry.Player.uid then
                        updateSelfMarch = true
                    elseif march.type  == NewMarchType.ASSEMBLY_MARCH then
                        local allianceId = LuaEntry.Player.allianceUid
                        if allianceId~=nil and allianceId~="" and march.allianceUid == allianceId then
                            updateSelfMarch = true
                        end
                    end
                end
            end
            self:AddOrUpdateMarch(march)
            self:UpdateTroop(march.uuid)
            if WorldTroopLineManager:GetInstance():IsTroopLineCreate(march.uuid) ==true then
                WorldTroopLineManager:GetInstance():CreateTroopLine(march.uuid)
            end
            if march.secretKey~=nil and march.secretKey>0 then
                self.dragonMarchDic[march.uuid] =march
                if updateDragonMarch ==false then
                    updateDragonMarch = true
                end
            else
                if self.dragonMarchDic[march.uuid]~=nil then
                    self.dragonMarchDic[march.uuid] =nil
                    if updateDragonMarch ==false then
                        updateDragonMarch = true
                    end
                end
            end
            if march:GetMarchType()==NewMarchType.ASSEMBLY_MARCH
                    and march:GetMarchTargetType()==MarchTargetType.RALLY_THRONE
                    and march:GetMarchStatus() == MarchStatus.WAIT_THRONE
                    and march.inBattle ==false then
                self.rallyMarchDic[march.uuid] = march
            else
                self.rallyMarchDic[march.uuid] = nil
            end
            self:UpdateSortRallyMarch()
        end

        count = count+1
        ::continue::
    end
    self:UpdateSortRallyMarch()
    if table.count(needUpdateAlarmMarch)>0 or table.count(needRemoveAlarmMarchList)>0 then
        updateTargetMineMarch = true
        self:SetMarchAlarmData(needUpdateAlarmMarch,needRemoveAlarmMarchList)
    end
    self:FireMessage(updateTargetMineMarch,updateSelfMarch,updateDragonMarch)
    return count
end
function WorldMarchDataManager:WorldMarchDelHandleInner(removeMarchMessageArray)
    local count = 0
    local updateSelfMarch = false;
    local updateTargetMineMarch = false;
    local updateDragonMarch = false
    local needRemoveAlarmMarchList = {}
    while #removeMarchMessageArray >0 do
        local message = table.remove(removeMarchMessageArray,1)
        if message~=nil then
            local uuid = message["uuid"]
            local isBattleFail = message["isBattleFail"]
            if uuid~=nil and uuid~=0 then
                local march = self.allMarches[uuid]
                if march~=nil then
                    if updateSelfMarch == false then
                        if march~=nil then
                            if march.ownerUid == LuaEntry.Player.uid then
                                updateSelfMarch = true
                            elseif march.type  == NewMarchType.ASSEMBLY_MARCH then
                                local allianceId = LuaEntry.Player.allianceUid
                                if allianceId~=nil and allianceId~="" and march.allianceUid == allianceId then
                                    updateSelfMarch = true
                                end
                            end
                        end
                    end
                    if self:IsTargetForMine(march) then
                        needRemoveAlarmMarchList[march.uuid] = 1
                    end
                end
                self.allMarches[uuid] =nil
                self.ownerMarches[uuid] =nil
                for k,list in pairs(self.allianceMarches) do
                    if list~=nil then
                        if list[uuid]~=nil then
                            list[uuid] = nil
                        end
                    end
                end
                self:AddToRemoveList(uuid,false)
                WorldTroopLineManager:GetInstance():DestroyTroopLine(uuid)
                if self.dragonMarchDic[uuid]~=nil then
                    self.dragonMarchDic[uuid] =nil
                    if updateDragonMarch ==false then
                        updateDragonMarch = true
                    end
                end
                self.rallyMarchDic[uuid] = nil
            end
        end
        count = count+1
        ::continue::
    end
    self:UpdateSortRallyMarch()
    if  table.count(needRemoveAlarmMarchList)>0 then
        updateTargetMineMarch = true
        self:SetMarchAlarmData({},needRemoveAlarmMarchList)
    end
    self:FireMessage(updateTargetMineMarch,updateSelfMarch,updateDragonMarch)
    return count
end
function WorldMarchDataManager:AddOrUpdateMarch(march)
    if march.uuid==nil or march.uuid==0 then
        return
    end
    self.allMarches[march.uuid]= march
    if march.type == NewMarchType.NORMAL or march.type == NewMarchType.DIRECT_MOVE_MARCH or march.type == NewMarchType.SCOUT or march.type == NewMarchType.EXPLORE
            or march.type == NewMarchType.RESOURCE_HELP or march.type == NewMarchType.GOLLOES_EXPLORE or march.type == NewMarchType.GOLLOES_TRADE then
        if march.ownerUid == LuaEntry.Player.uid then
            self.ownerMarches[march.uuid] = march
        end
        local alUid = march.allianceUid
        local list = self.allianceMarches[alUid]
        if list~=nil then
            list[march.uuid] = nil
        end
    elseif march.type == NewMarchType.ASSEMBLY_MARCH then
        local alUid = march.allianceUid
        if alUid~=nil and alUid~="" then
            if self.allianceMarches[alUid]==nil then
                self.allianceMarches[alUid]= {}
            end
            self.allianceMarches[alUid][march.uuid] = march
        end
        self.ownerMarches[march.uuid] = nil
    end
end
function WorldMarchDataManager:AddToBuildList(marchUuid)
    if WorldTroopManager:GetInstance():GetTroop(marchUuid) == nil then
        WorldTroopManager:GetInstance():CreateTroop(marchUuid)
    end
end
function WorldMarchDataManager:AddToRemoveList(marchUuid,isBattleFail)
    if WorldTroopManager:GetInstance():GetTroop(marchUuid) ~= nil then
        WorldTroopManager:GetInstance():DestroyTroop(marchUuid,isBattleFail)
    end
end
function WorldMarchDataManager:UpdateTroop(marchUuid)
    if WorldTroopManager:GetInstance():GetTroop(marchUuid) ~= nil then
        WorldTroopManager:GetInstance():CreateTroop(marchUuid)
    end
end
function WorldMarchDataManager:FireMessage(updateTargetMineMarch,updateSelfMarch,updateDragonMarch)
    --if updateTargetMineMarch == true then
    --    EventManager:GetInstance():Broadcast(EventId.MarchItemTargetMeUpdate)
    --end
    if updateSelfMarch == true then
        EventManager:GetInstance():Broadcast(EventId.MarchItemUpdateSelf)
    end
    if updateDragonMarch == true then
        EventManager:GetInstance():Broadcast(EventId.DragonSecretShow)
    end
end
function WorldMarchDataManager:IsBusy()
    return (UITimeManager:GetInstance():GetServerTime()-self.time) >= 5
end
function WorldMarchDataManager:IsSyncBusy()
    return (UITimeManager:GetInstance():GetServerTime()-self.syncTime) >= 10
end
function WorldMarchDataManager:OnLodChanged(lod)
    if self.lodLv~=lod then
        self.lodLv = lod
    end
end
function WorldMarchDataManager:UpdateSortRallyMarch()
    self.sortRallyMarchDic = {}
    local value = table.values(self.rallyMarchDic)
    if #value>0 then
        table.sort(value,function(a,b)
            return a.startTime<b.startTime
        end)
        for i = 1,#value do
            local march = value[i]
            if march~=nil then
                self.sortRallyMarchDic[march.uuid] = i
            end
        end
    end
end
function WorldMarchDataManager:GetRallyMarchIndexByUuid(uuid)
    if self.sortRallyMarchDic[uuid]~=nil then
        return self.sortRallyMarchDic[uuid]
    end
    return 0
end
function WorldMarchDataManager:IsTargetForMine(marchData)
    if marchData ==nil then
        return false
    end
    local target = marchData.target
    local targetUuid = marchData.targetUuid
    local hasForMine = false
    if target == MarchTargetType.RALLY_FOR_BUILDING or target == MarchTargetType.ATTACK_BUILDING
            or target == MarchTargetType.RALLY_FOR_CITY or target == MarchTargetType.ATTACK_CITY or target == MarchTargetType.DIRECT_ATTACK_CITY
            or target == MarchTargetType.SCOUT_BUILDING or target == MarchTargetType.SCOUT_CITY
    then
        local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(targetUuid)
        if buildData~=nil then
            hasForMine = true
        end
    elseif target == MarchTargetType.ASSISTANCE_BUILD or target == MarchTargetType.ASSISTANCE_CITY then
        local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(targetUuid)
        if buildData ~= nil then
            hasForMine = true
        end
    elseif target == MarchTargetType.ATTACK_ARMY or target == MarchTargetType.ATTACK_ARMY_COLLECT or target == MarchTargetType.SCOUT_TROOP then
        if self:IsSelfInCurrentMarchTeam(targetUuid) then
            hasForMine = true
        end
    elseif target == MarchTargetType.ATTACK_DESERT then
        local state = DataCenter.DesertDataManager:CheckIsSelfDesert(marchData.targetUuid)
        if state then
            hasForMine = true
        end
    end
    return hasForMine
end
function WorldMarchDataManager:WorldMarchGetHandle(message)
    if SceneUtils.GetIsInWorld() then
        if CommonUtil.IsUseLuaWorldPoint() then
            self:PushMessageQueue(message,TaskType.WorldMarchGet)
        end
    end
end
function WorldMarchDataManager:WorldMarchUpdateHandle(message)
    if SceneUtils.GetIsInWorld() then
        if CommonUtil.IsUseLuaWorldPoint() then
            self:PushMessageQueue(message, TaskType.PushMarchAdd)
        end
        return
    end
    local array = {}
    if message ~= nil then
        table.insert(array, message)
        self:WorldMarchUpdateHandleInner(array)
    end
end

function WorldMarchDataManager:HandleFormationMarch(message)
    if message ==nil then
        return
    end
    if message["resource"] ~= nil then
        LuaEntry.Resource:UpdateResource(message["resource"])
    end
    if SceneUtils.GetIsInWorld() then
        if CommonUtil.IsUseLuaWorldPoint() then
            self:PushMessageQueue(message, TaskType.FormationMarch)
        end
        return
    end
    local array = {}
    if message ~= nil then
        table.insert(array, message)
        self:WorldMarchUpdateHandleInner(array)
    end
end

function WorldMarchDataManager:HandleFormationMarchChange(message)
    if message ==nil then
        return
    end
    if message["resource"] ~= nil then
        LuaEntry.Resource:UpdateResource(message["resource"])
    end
    if SceneUtils.GetIsInWorld() then
        if CommonUtil.IsUseLuaWorldPoint() then
            self:PushMessageQueue(message, TaskType.FormationMarchChange)
        end
        return
    end
    local array = {}
    if message ~= nil then
        table.insert(array, message)
        self:WorldMarchUpdateHandleInner(array)
    end
end

function WorldMarchDataManager:WorldMarchDelHandle(message)
    if SceneUtils.GetIsInWorld() then
        if CommonUtil.IsUseLuaWorldPoint() then
            self:PushMessageQueue(message, TaskType.PushMarchDel)
        end
        return
    end
    local array = {}
    if message ~= nil then
        table.insert(array, message)
        self:WorldMarchDelHandleInner(array)
    end
end
function WorldMarchDataManager:GetMarch(uuid)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish()  then
        return CS.SceneManager.World:GetMarch(uuid)
    end
    local item = self.allMarches[uuid]
    if item ==nil then
        item = self:GetFakeSampleMarchData(uuid)
    end
    return item
end
function WorldMarchDataManager:GetMarchesTargetForMine()
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        return CS.SceneManager.World:GetMarchesTargetForMine()
    end
    local marchList = {}
    for k,v in pairs(self.allMarches) do
        if self:IsTargetForMine(v) then
            marchList[v.uuid] =v
        end
    end
    return marchList
end
function WorldMarchDataManager:GetMarchesBossInfo()
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        return CS.SceneManager.World:GetMarchesBossInfo()
    end
    local marchList = {}
    for k,v in pairs(self.allMarches) do
        if v:GetMarchType() == NewMarchType.BOSS then
            marchList[v.uuid] =v
        end
    end
    return marchList
end
function WorldMarchDataManager:IsSelfInCurrentMarchTeam(rallyMarchUuid)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        return CS.SceneManager.World:IsSelfInCurrentMarchTeam(rallyMarchUuid)
    end
    local march = self:GetMarch(rallyMarchUuid)
    if march ==nil then
        return false
    end
    if march.type == NewMarchType.BOSS or march.type == NewMarchType.MONSTER or march.type == NewMarchType.MONSTER_SIEGE then
        return false
    end
    if march.ownerUid==nil or march.ownerUid=="" then
        return false
    end
    if march.ownerUid == LuaEntry.Player.uid then
        return true
    end
    local teamUuid = march.teamUuid
    if teamUuid<=0 then
        return false
    end
    local selfMarchList = self:GetOwnerMarches(LuaEntry.Player.uid,LuaEntry.Player.allianceId)
    if selfMarchList~=nil then
        local hasData = false
        for k,v in pairs(selfMarchList) do
            if hasData == false and teamUuid == v.teamUuid then
                hasData = true
            end
        end
        return hasData
    end
    return false
end
function WorldMarchDataManager:GetOwnerMarches(ownerUid,allianceUid)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        local marchTable = CS.SceneManager.World:GetOwnerMarches(ownerUid,allianceUid)
        if marchTable~=nil then
            return table.values(marchTable)
        else
            return {}
        end
    end
    local list = {}
    for k, v in pairs(self.ownerMarches) do
        table.insert(list,v)
    end
    if allianceUid~=nil and allianceUid~="" then
        local temp = self.allianceMarches[allianceUid]
        if temp~=nil then
            for k,v in pairs(temp) do
                if v.ownerUid == ownerUid then
                    table.insert(list,v)
                end
            end
        end
    end
    return list
end
function WorldMarchDataManager:GetAllSampleFakeData()
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        local marchTable = CS.SceneManager.World:GetAllSampleFakeData()
        if marchTable~=nil then
            return table.values(marchTable)
        else
            return {}
        end
    end
    return table.values(self.fakeSampleMarches)
end
function WorldMarchDataManager:AddFakeSampleMarchData(startIndex,endIndex,startTime,endTime,marchTargetType)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        CS.SceneManager.World:AddFakeSampleMarchData(startIndex,endIndex,startTime,endTime)
        return
    end
    if self.fakeSampleMarches[endIndex] ==nil then
        local march = WorldMarchData.New()
        march.endTime = endTime
        march.allianceUid = LuaEntry.Player.allianceId
        march.allianceAbbr = ""
        march.allianceIcon = ""
        march.startTime = startTime
        march.type = NewMarchType.NORMAL
        march.target = marchTargetType
        march.status = MarchStatus.MOVING
        march.uuid = endIndex
        march.pic = ""
        march.picVer = 0
        local pointInfo = DataCenter.WorldPointManager:GetPointInfo(endIndex)
        if pointInfo ~= nil then
            march.targetUuid = pointInfo.uuid
        end
        march.ownerName = LuaEntry.Player.name
        march.ownerUid = LuaEntry.Player.uid
        march.startPos = startIndex
        march.targetPos = endIndex
        march.targetWorldPos = SceneUtils.TileIndexToWorld(march.targetPos,ForceChangeScene.World)
        local start = SceneUtils.IndexToTilePos(march.startPos, ForceChangeScene.World)
        local endPos = SceneUtils.IndexToTilePos(march.targetPos, ForceChangeScene.World)
        local dis = SceneUtils.TileDistance(start, endPos)
        march.speed = dis*1000/(endTime-startTime)
        if marchTargetType == MarchTargetType.SAMPLE then
            endPos = SceneUtils.TilePosToIndex(MarchUtil.GetAttackPos(start, endPos, 3),ForceChangeScene.World)
        else
            endPos = SceneUtils.TilePosToIndex(endPos,ForceChangeScene.World)
        end
       
        march.path = tostring(march.startPos)..";"..tostring(endPos)
        march:InitMove()
        self.fakeSampleMarches[endIndex] = march
        self:AddToBuildList(endIndex)
        WorldTroopLineManager:GetInstance():CreateTroopLine(endIndex)
    end
end
function WorldMarchDataManager:UpdateFakeSampleMarchDataWhenStartPick(index,endTime)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        CS.SceneManager.World:UpdateFakeSampleMarchDataWhenStartPick(index,endTime)
        return
    end
    local marchInfo = self.fakeSampleMarches[index]
    if marchInfo~=nil then
        marchInfo.startTime = marchInfo.endTime
        marchInfo.endTime = endTime
        marchInfo.status = MarchStatus.SAMPLING
        marchInfo.path = ""
        marchInfo:InitMove()
        EventManager:GetInstance():Broadcast(EventId.MarchItemUpdateSelf)
    end
end
function WorldMarchDataManager:UpdateFakeSampleMarchDataWhenBack(index,startTime,endTime)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        CS.SceneManager.World:UpdateFakeSampleMarchDataWhenBack(index,startTime,endTime)
        return
    end
    local marchInfo = self.fakeSampleMarches[index]
    if marchInfo~=nil then
        marchInfo.targetPos = marchInfo.startPos
        marchInfo.realTargetPos = marchInfo.targetPos
        marchInfo.startPos = index
        marchInfo.status = MarchStatus.MOVING
        marchInfo.target = MarchTargetType.BACK_HOME
        marchInfo.startTime = startTime
        marchInfo.endTime = endTime
        local start = SceneUtils.IndexToTilePos(marchInfo.startPos, ForceChangeScene.World)
        local endPos = SceneUtils.IndexToTilePos(marchInfo.targetPos, ForceChangeScene.World)
        local dis = SceneUtils.TileDistance(start, endPos)
        marchInfo.speed = dis*1000/(endTime-startTime)
        start = SceneUtils.TilePosToIndex(MarchUtil.GetAttackPos(endPos,start, 3),ForceChangeScene.World)
        marchInfo.path = tostring(start)..";"..tostring(marchInfo.targetPos)
        marchInfo:InitMove()
        EventManager:GetInstance():Broadcast(EventId.MarchItemUpdateSelf)
    end
end
function WorldMarchDataManager:RemoveFakeSampleMarchData(index)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        CS.SceneManager.World:RemoveFakeSampleMarchData(index)
        return
    end
    local marchInfo = self.fakeSampleMarches[index]
    if marchInfo~=nil then
        self.fakeSampleMarches[index] = nil
        self:AddToRemoveList(index,false)
        WorldTroopLineManager:GetInstance():DestroyTroopLine(index)
    end
end
function WorldMarchDataManager:IsFakeSampleMarchData(index)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        return CS.SceneManager.World:IsFakeSampleMarchData(index)
    end
    return self.fakeSampleMarches[index] ~= nil
end
function WorldMarchDataManager:GetFakeSampleMarchData(index)
    return self.fakeSampleMarches[index]
end
-- 获取跨服的行军
function WorldMarchDataManager:GetCrossServerMarches(ownerUid,allianceUid)
    local list = {}
    local marches = self:GetOwnerMarches(ownerUid,allianceUid)
    for _, march in ipairs(marches) do
        if march.serverId ~= march.srcServer then
            table.insert(list, march)
        end
    end
    return list
end
function WorldMarchDataManager:GetAllianceMarchesInTeam(allianceUid,teamUuid)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        return CS.SceneManager.World:GetAllianceMarchesInTeam(allianceUid,teamUuid)
    end
    local data = nil
    if allianceUid~=nil and allianceUid~="" then
        local temp = self.allianceMarches[allianceUid]
        if temp~=nil then
            for k,v in pairs(temp) do
                if v.teamUuid == teamUuid then
                    data = v
                end
            end
        end
    end
    return data
end
function WorldMarchDataManager:GetOwnerFormationMarch(ownerUid,formationUuid,allianceUid)
    if CommonUtil.IsUseLuaWorldPoint() ==false and SceneUtils.GetIsInWorld() and CS.SceneManager.World ~= nil and CS.SceneManager.World:IsBuildFinish() then
        return CS.SceneManager.World:GetOwnerFormationMarch(ownerUid,formationUuid,allianceUid)
    end
    local data = nil
    local list = self:GetOwnerMarches(ownerUid,allianceUid)
    if list~=nil and table.count(list)>0 then
        for k,v in pairs(list) do
            if v.ownerFormationUuid == formationUuid then
                data = v
            end
        end
    end
    return data
end
function WorldMarchDataManager:UpdateViewRect()
    if self.camera ==nil then
        return
    end
    local center = CS.SceneManager.World.CurTarget
    if self.viewBounds ==nil then
        self.viewBounds = Bounds.New(center,Vector3.one)
    else
        self.viewBounds:SetCenter(center)
        self.viewBounds:SetExtents(Vector3.one)
    end
    self.viewBounds:Encapsulate(CS.SceneManager.World:GetRaycastGroundPoint(Vector3.zero))
    self.viewBounds:Encapsulate(CS.SceneManager.World:GetRaycastGroundPoint(Vector3.New(0,self.camera.pixelHeight,0)))
    self.viewBounds:Encapsulate(CS.SceneManager.World:GetRaycastGroundPoint(Vector3.New(self.camera.pixelWidth,self.camera.pixelHeight,0)))
    self.viewBounds:Encapsulate(CS.SceneManager.World:GetRaycastGroundPoint(Vector3.New(self.camera.pixelWidth,0,0)))
    self.viewBounds:Expand(CS.SceneManager.World.TileSize*5)
    local ct,size = self.viewBounds:Get()
    self.viewRectSize.xMin = ct.x-(size.x/2)
    self.viewRectSize.xMax = ct.x+(size.x/2)
    self.viewRectSize.yMin = ct.z-(size.z/2)
    self.viewRectSize.yMax = ct.z+(size.z/2)
end
function WorldMarchDataManager:IsInView(position)
    if position.x>=self.viewRectSize.xMin and position.y<self.viewRectSize.xMax and position.z>=self.viewRectSize.yMin and position.z<self.viewRectSize.yMax then
        return true
    end
    return false
end
function WorldMarchDataManager:IsLineInView(pos,pathSegment,pathIndex)
    local calTroopLineVec = {}
    if pathSegment == nil or #pathSegment<=0 or pathIndex<0 then
        return false
    end
    table.insert(calTroopLineVec,pos)
    local count = #pathSegment-pathIndex
    if count>0 then
        for i=pathIndex+1,#pathSegment do
            table.insert(calTroopLineVec,pathSegment[i].pos)
        end
        for i=1,(#calTroopLineVec-1) do
            local p1 = {}
            p1.x = calTroopLineVec[i].x
            p1.y = calTroopLineVec[i].z
            local p2 = {}
            p2.x = calTroopLineVec[i+1].x
            p2.y = calTroopLineVec[i+1].z
            if UIUtil.IntersectsSegment(self.viewRectSize,p1,p2) then
                return true
            end
        end
    end
    return false
end

function WorldMarchDataManager:UpdateMove()
    if self.isInit ==false then
        return
    end
    for k,v in pairs(self.allMarches) do
        if v:IsVisibleMarch() then
            v:UpdateMove()
            local pos,pathSegment,pathIndex = v:GetCurPosParam()
            if self:IsInView(pos) then
                self:AddToBuildList(v.uuid)
            else
                self:AddToRemoveList(v.uuid,false)
            end
            if self:IsLineInView(pos,pathSegment,pathIndex) then
                if WorldTroopLineManager:GetInstance():IsTroopLineCreate(v.uuid) ==false then
                    WorldTroopLineManager:GetInstance():CreateTroopLine(v.uuid)
                end
                local needRefresh = false
                if v.realTargetPos ==nil or v.realTargetPos<=0 then
                    local realPos = self:GetRealMarchTargetPos(v)
                    if realPos>0 then
                        v.realTargetPos = realPos
                        needRefresh = true
                    end
                end
                WorldTroopLineManager:GetInstance():UpdateTroopLine(v.uuid,v.path,v.targetPos,v.realTargetPos,needRefresh,false)
            else
                if WorldTroopLineManager:GetInstance():IsTroopLineCreate(v.uuid) ==true then
                    WorldTroopLineManager:GetInstance():DestroyTroopLine(v.uuid)
                end
            end
        else
            self:AddToRemoveList(v.uuid,false)
            if WorldTroopLineManager:GetInstance():IsTroopLineCreate(v.uuid) ==true then
                WorldTroopLineManager:GetInstance():DestroyTroopLine(v.uuid)
            end
        end
    end
    for k,v in pairs(self.fakeSampleMarches) do
        if v:IsVisibleMarch() then
            v:UpdateMove()
            local pos,pathSegment,pathIndex = v:GetCurPosParam()
            if self:IsLineInView(pos,pathSegment,pathIndex) then
                if WorldTroopLineManager:GetInstance():IsTroopLineCreate(v.uuid) ==false then
                    WorldTroopLineManager:GetInstance():CreateTroopLine(v.uuid)
                end
                local needRefresh = false
                if v.realTargetPos ==nil or v.realTargetPos<=0 then
                    local realPos = self:GetRealMarchTargetPos(v)
                    if realPos>0 then
                        v.realTargetPos = realPos
                        needRefresh = true
                    end
                end
                WorldTroopLineManager:GetInstance():UpdateTroopLine(v.uuid,v.path,v.targetPos,v.realTargetPos,needRefresh,false)
            else
                if WorldTroopLineManager:GetInstance():IsTroopLineCreate(v.uuid) ==true then
                    WorldTroopLineManager:GetInstance():DestroyTroopLine(v.uuid)
                end
            end
        else
            if WorldTroopLineManager:GetInstance():IsTroopLineCreate(v.uuid) ==true then
                WorldTroopLineManager:GetInstance():DestroyTroopLine(v.uuid)
            end
        end
    end
end

function WorldMarchDataManager:GetRealMarchTargetPos(march)
    local targetType = march:GetMarchTargetType()
    if targetType == MarchTargetType.ATTACK_BUILDING or targetType == MarchTargetType.RALLY_FOR_BUILDING or targetType == MarchTargetType.ASSISTANCE_BUILD then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(march.targetUuid)
        if info~=nil then
            return info.mainIndex
        end
    end
    if targetType == MarchTargetType.ATTACK_ALLIANCE_BUILDING or targetType == MarchTargetType.RALLY_ALLIANCE_BUILDING or targetType == MarchTargetType.ASSISTANCE_ALLIANCE_BUILDING or targetType == MarchTargetType.ASSISTANCE_COLLECT_ACT_ALLIANCE_MINE 
            or targetType == MarchTargetType.ATTACK_ACT_ALLIANCE_MINE or targetType == MarchTargetType.RALLY_FOR_ACT_ALLIANCE_MINE  then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(march.targetUuid)
        if info~=nil then
            local sz = WorldBuildUtil.GetBuildTile(info.mainIndex)
            if sz == nil or sz<=1 then
                sz =1
            end
            return SceneUtils.WorldToTileIndex(BuildingUtils.GetBuildModelCenterVec(info.mainIndex,sz),ForceChangeScene.World)
        end
    end
    if targetType == MarchTargetType.ATTACK_DRAGON_BUILDING or targetType == MarchTargetType.RALLY_DRAGON_BUILDING or targetType == MarchTargetType.TAKE_SECRET_KEY or targetType == MarchTargetType.TRANSPORT_SECRET_KEY
            or targetType == MarchTargetType.TRIGGER_DRAGON_BUILDING  then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(march.targetUuid)
        if info~=nil then
            local sz = WorldBuildUtil.GetBuildTile(info.mainIndex)
            if sz == nil or sz<=1 then
                sz =1
            end
            return SceneUtils.WorldToTileIndex(BuildingUtils.GetBuildModelCenterVec(info.mainIndex,sz),ForceChangeScene.World)
        end
    end
    if targetType == MarchTargetType.ATTACK_CITY or targetType == MarchTargetType.RALLY_FOR_CITY or targetType == MarchTargetType.ASSISTANCE_CITY then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(march.targetUuid)
        if info~=nil then
            local sz = WorldBuildUtil.GetBuildTile(info.mainIndex)
            if sz == nil or sz<=1 then
                sz =1
            end
            return SceneUtils.WorldToTileIndex(BuildingUtils.GetBuildModelCenterVec(info.mainIndex,sz),ForceChangeScene.World)
        end
    end
    if targetType == MarchTargetType.ATTACK_ARMY then
        local info = self:GetMarch(march.targetUuid)
        if info~=nil then
           return SceneUtils.WorldToTileIndex(info:GetMarchCurPos(),ForceChangeScene.World)
        end
    end
    if targetType == MarchTargetType.EXPLORE or targetType == MarchTargetType.SAMPLE or targetType == MarchTargetType.PICK_GARBAGE then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(march.targetUuid)
        if info~=nil then
            return info.mainIndex
        end
    end
    if targetType == MarchTargetType.ATTACK_MONSTER or targetType == MarchTargetType.ATTACK_ALLIANCE_BOSS or targetType == MarchTargetType.RALLY_FOR_BOSS then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(march.targetUuid)
        if info~=nil then
            return info.mainIndex
        end
    end
        return 0
end

---警报接口
function WorldMarchDataManager:SetMarchAlarmData(needUpdateMarch,needRemoveMarchUuidList)
    DataCenter.RadarAlarmDataManager:UpdateAlarm(needUpdateMarch, needRemoveMarchUuidList)
end
function WorldMarchDataManager:InitAlarmData(marchList)
    DataCenter.RadarAlarmDataManager:InitData(marchList)
end
--c#接口
function WorldMarchDataManager:WorldMarchTargetMineDataUpdate(needRefreshList,needRemoveList)
    local needUpdateMarch = {}
    local needRemoveMarchUuidList = {}
    if needRefreshList~=nil then
        for k,v in pairs(needRefreshList) do
            local march = WorldMarchData.New()
            march:UpdateWorldMarchForCsharp(v)
            if march.uuid~=nil and march.uuid~=0 then
                needUpdateMarch[march.uuid] = march
            end
        end
        for k,v in pairs(needRemoveList) do
            needRemoveMarchUuidList[v] = 1
        end
    end
    self:SetMarchAlarmData(needUpdateMarch,needRemoveMarchUuidList)
end
--只有 城内场景使用
function WorldMarchDataManager:WorldMarchInfoGetHandle(message)
    if SceneUtils.GetIsInWorld() then
        return
    end
    if message~=nil then
        local marchInfoArray = table.mergeTable(message["marchInfos"], message["crossMarchInfos"])
        self:WorldMarchGetHandleInner(marchInfoArray)
    end
end
function WorldMarchDataManager:SendRequest()
    local v2 = SceneUtils.IndexToTilePos(LuaEntry.Player:GetMainWorldPos(),ForceChangeScene.World)
    if v2~=nil then
        SFSNetwork.SendMessage(MsgDefines.WorldGetMarchInfos,v2.x,v2.y, true)
    end
end

function WorldMarchDataManager:TrackMarch(marchUuid)
    if CommonUtil.IsUseLuaWorldPoint()==false then
        CS.SceneManager.World:TrackMarch(marchUuid)
    else
        if marchUuid ==0 then
            CS.SceneManager.World:DisTrackMarch()
        else
            local troop = WorldTroopManager:GetInstance():GetTroop(marchUuid)
            if troop==nil then
                local worldMarch = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
                if worldMarch==nil then
                    return
                end
                local position = worldMarch:GetMarchCurPos()
                CS.SceneManager.World:TrackMarchV2(position,nil)
            else
                local position = troop:GetPosition()
                local trans = troop:GetTransform()
                CS.SceneManager.World:TrackMarchV2(position,trans)
            end



        end
    end
    
end
return WorldMarchDataManager
--DataCenter.WorldMarchDataManager