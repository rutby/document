---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 27/3/2024 上午11:33
---
local Const = require"Scene.WorldTroopManager.Const"
local WorldMarchBattleManager = BaseClass("WorldMarchBattleManager");
local normalAttackId = 100000
function WorldMarchBattleManager:__init()
end

function WorldMarchBattleManager:__delete()
end

function WorldMarchBattleManager:WorldMarchBattleUpdateHandle(message)
    local str = message["content"]
    local basePushInfo = PBController.ParsePb1(str, "protobuf.BattleRoundPushInfo")
    local combatType = basePushInfo.type;
    if basePushInfo~=nil then
        if self:IsCombine(combatType) then
            local combineArmyInfo = basePushInfo.combineArmyInfo
            local simpleArmyInfo = basePushInfo.simpleArmyInfo
            if combineArmyInfo~=nil then
                self:UpdateCombineArmyInfo(combineArmyInfo,basePushInfo.outRange,basePushInfo.RoundReports,combatType,basePushInfo.selfBesieged,basePushInfo.targetBesieged)
            end
            if simpleArmyInfo~=nil then
                self:UpdateSimpleArmyInfo(simpleArmyInfo,basePushInfo.outRange,basePushInfo.RoundReports,combatType,basePushInfo.selfBesieged,basePushInfo.targetBesieged)
            end
        else
            local simpleArmyInfo = basePushInfo.simpleArmyInfo
            if simpleArmyInfo~=nil then
                self:UpdateSimpleArmyInfo(simpleArmyInfo,basePushInfo.outRange,basePushInfo.RoundReports,combatType,basePushInfo.selfBesieged,basePushInfo.targetBesieged)
            end
        end
    end
end
function WorldMarchBattleManager:WorldMarchBattleUpdateBytesHandle(bytes)
    --local str = message["content"]
    local basePushInfo = PBController.ParsePbFromBytes(bytes, "protobuf.BattleRoundPushInfo")
    local combatType = basePushInfo.type;
    if basePushInfo~=nil then
        if self:IsCombine(combatType) then
            local combineArmyInfo = basePushInfo.combineArmyInfo
            local simpleArmyInfo = basePushInfo.simpleArmyInfo
            if combineArmyInfo~=nil then
                self:UpdateCombineArmyInfo(combineArmyInfo,basePushInfo.outRange,basePushInfo.roundReports,combatType,basePushInfo.selfBesieged,basePushInfo.targetBesieged)
            end
            if simpleArmyInfo~=nil then
                self:UpdateSimpleArmyInfo(simpleArmyInfo,basePushInfo.outRange,basePushInfo.roundReports,combatType,basePushInfo.selfBesieged,basePushInfo.targetBesieged)
            end
        else
            local simpleArmyInfo = basePushInfo.simpleArmyInfo
            if simpleArmyInfo~=nil then
                self:UpdateSimpleArmyInfo(simpleArmyInfo,basePushInfo.outRange,basePushInfo.roundReports,combatType,basePushInfo.selfBesieged,basePushInfo.targetBesieged)
            end
        end
    end
end

function WorldMarchBattleManager:UpdateCombineArmyInfo(combineArmyInfo,outRange,roundReports,combineType,selfBesieged,targetBesieged)
    local armyMembers = combineArmyInfo.members
    local targetArmyInfo = combineArmyInfo.targetInfo
    local topUuid = 0
    local topPointId = 0
    if outRange then
        return
    end
    local selfArmyUuidList = {}
    for i =1,#armyMembers do
        local VARIABLE  =armyMembers[i]
        if combineType == BattleType.Desert or combineType == BattleType.TRAIN_DESERT then
            if topPointId ==0 and VARIABLE.armyInfo~=nil then
                topPointId = VARIABLE.armyInfo.topPointId
            end
            if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil and VARIABLE.armyInfo.type == BattleType.Formation then--如果地块里面有驻扎编队，获取marchUuid
                selfArmyUuidList[VARIABLE.armyInfo.armyInfo.uuid] = true
            end
        else
            if topUuid ==0 and VARIABLE.armyInfo~=nil then
                topUuid = VARIABLE.armyInfo.topUuid
            end
            if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil then
                selfArmyUuidList[VARIABLE.armyInfo.armyInfo.uuid] = true
            end
        end
    end
    if combineType == BattleType.RallyFormation then
        topUuid = 0
        for k,v in pairs(selfArmyUuidList) do
            local marchData = DataCenter.WorldMarchDataManager:GetMarch(k)
            if marchData~=nil then
                local march = DataCenter.WorldMarchDataManager:GetAllianceMarchesInTeam(marchData.allianceUid,marchData.teamUuid)
                if march~=nil then
                    topUuid = march.uuid
                end
            end
        end
    elseif combineType == BattleType.THRONE_ARMY then
        topUuid = 0
        for k,v in pairs(selfArmyUuidList) do
            local marchData = DataCenter.WorldMarchDataManager:GetMarch(k)
            if marchData~=nil then
                local march = DataCenter.WorldMarchDataManager:GetAllianceMarchesInTeam(marchData.allianceUid,marchData.teamUuid)
                if march~=nil then
                    topUuid = march.uuid
                end
            end
        end
    end
    if combineType == BattleType.Desert or combineType == BattleType.TRAIN_DESERT then
        if DataCenter.WorldMarchDataManager:IsInView(SceneUtils.TileIndexToWorld(topPointId,ForceChangeScene.World))==false then
            return
        end
        topUuid = 0
        for k,v in pairs(selfArmyUuidList) do
            local marchData = DataCenter.WorldMarchDataManager:GetMarch(k)
            if marchData~=nil then
                topUuid = marchData.uuid
            end
        end
        local param = {}
        param.normalHurt = 0
        param.skillHurt = 0
        param.showSelfSkillId = 0
        param.showHurtSkillId = 0
        param.carSkillHurt = 0
        param.damageEffectType = APSDamageEffectType.DEFAULT
        param.criticalAttack = 0
        param.isActiveAttack = false
        param.effectBuffList = {}
        local effectStr = ""
        for i=1,#roundReports do
            local report = roundReports[i]
            for k,v in pairs(selfArmyUuidList) do
                self:CheckArmyDoSkill(k,report,param)
            end
        end
        local health = 0
        local initHealth = 0
        local totalSoldierNum = 0
        for i =1,#armyMembers do
            local VARIABLE  =armyMembers[i]
            if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil then
                local armyInfo = VARIABLE.armyInfo.armyInfo
                health = health+armyInfo.health
                initHealth = initHealth+armyInfo.initHealth
            end
        end
        local march = DataCenter.WorldMarchDataManager:GetMarch(topUuid)
        if march~=nil then
            local str = topUuid..";"..health..";"..initHealth..";"..topUuid
            EventManager:GetInstance():Broadcast(EventId.ShowDesertAttackHeadUI,str)
        else
            local str = topUuid..";"..health..";"..initHealth
            EventManager:GetInstance():Broadcast(EventId.ShowDesertAttackHeadUI,str)
        end
    elseif topUuid~=0 then
        if self:IsArmyInView(topUuid,combineType) ==false then
            return
        end
        local heal = 0
        local shield = 0
        local param = {}
        param.normalHurt = 0
        param.skillHurt = 0
        param.showSelfSkillId = 0
        param.showHurtSkillId = 0
        param.carSkillHurt = 0
        param.damageEffectType = APSDamageEffectType.DEFAULT
        param.criticalAttack = 0
        param.isActiveAttack = false
        param.effectBuffList = {}
        local effectStr = ""
        for i=1,#roundReports do
            local report = roundReports[i]
            for k,v in pairs(selfArmyUuidList) do
                self:CheckArmyDoSkill(k,report,param)
            end
        end
        for i=1,#param.effectBuffList do
            effectStr  = effectStr .. tostring(param.effectBuffList[i])
            if i<#param.effectBuffList then
                effectStr  = effectStr ..";"
            end
        end
        if combineType == BattleType.ALLIANCE_OCCUPIED_CITY then
            for i =1,#armyMembers do
                local VARIABLE  =armyMembers[i]
                if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil and VARIABLE.armyInfo.specialArmyType ~= SpecialUnitType.ALLIANCE_CITY_POLICE_NPC then
                    local armyInfo = VARIABLE.armyInfo.armyInfo
                    if armyInfo.uuid == topUuid then
                        self:AllianceCityUpdateHeadUI(topUuid, armyInfo.health, armyInfo.initHealth)
                        break
                    end
                end
            end
            self:ShowAllianceCityBloodHurt(topUuid, param.normalHurt, param.skillHurt, heal,param.carSkillHurt,param.criticalAttack);
            self:ShowAllianceCityBuff(topUuid, effectStr)
        elseif combineType == BattleType.RallyFormation then
            local targetID = 0
            if targetArmyInfo ~= nil then
                targetID = targetArmyInfo.topUuid
            end
            self:SetTroopAttack(topUuid, targetID, param.isActiveAttack);
            --飘字
            self:ShowTroopBloodHurt(topUuid, param.normalHurt, param.skillHurt, heal, param.carSkillHurt, param.criticalAttack)
            local anger = 0
            local health = 0
            local initHealth = 0
            local carAnger = 0
            for i =1,#armyMembers do
                local VARIABLE  =armyMembers[i]
                if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil then
                    local armyInfo = VARIABLE.armyInfo.armyInfo
                    health = health+armyInfo.health
                    initHealth = initHealth+armyInfo.initHealth
                end
            end
            self:TroopUpdateHeadUI(topUuid, anger, health, initHealth,carAnger)
            if targetBesieged then
                self:ShowSiegeAttack(topUuid)
            end
            self:ShowTroopBuff(topUuid, effectStr);
            self:ShowTroopDamageDes(topUuid,param.damageEffectType)
        elseif combineType == BattleType.THRONE_ARMY then
            self:ShowThroneBloodHurt(topUuid, param.normalHurt, param.skillHurt,heal,param.carSkillHurt,param.criticalAttack)
            local anger = 0
            local health = 0
            local initHealth = 0
            local carAnger = 0
            for i =1,#armyMembers do
                local VARIABLE  =armyMembers[i]
                if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil then
                    local armyInfo = VARIABLE.armyInfo.armyInfo
                    health = health+armyInfo.health
                    initHealth = initHealth+armyInfo.initHealth
                end
            end
            self:ThroneUpdateHeadUI(topUuid, health, initHealth)
            self:ShowThroneBuff(topUuid, effectStr)
        elseif combineType == BattleType.City or combineType == BattleType.Building or combineType == BattleType.CROSS_WORM then
            local health = 0
            local initHealth = 0
            local totalSoldierNum = 0
            for i =1,#armyMembers do
                local VARIABLE  =armyMembers[i]
                if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil then
                    local armyInfo = VARIABLE.armyInfo.armyInfo
                    health = health+armyInfo.health
                    initHealth = initHealth+armyInfo.initHealth
                end
            end
            local str = topUuid..";"..health..";"..initHealth
            EventManager:GetInstance():Broadcast(EventId.ShowBuildAttackHeadUI,str)
            self:ShowPlayerBuildBloodHurt(topUuid, param.normalHurt, param.skillHurt, heal,param.carSkillHurt,param.criticalAttack)
            self:ShowPlayerBuildBuff(topUuid, effectStr)
        elseif combineType == BattleType.ALLIANCE_BUILDING then
            local health = 0
            local initHealth = 0
            local totalSoldierNum = 0
            for i =1,#armyMembers do
                local VARIABLE  =armyMembers[i]
                if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil then
                    local armyInfo = VARIABLE.armyInfo.armyInfo
                    health = health+armyInfo.health
                    initHealth = initHealth+armyInfo.initHealth
                end
            end
            local str = topUuid..";"..health..";"..initHealth
            EventManager:GetInstance():Broadcast(EventId.ShowAllianceBuildAttackHeadUI,str)
            self:ShowAllianceBuildBloodHurt(topUuid, param.normalHurt, param.skillHurt, heal,param.carSkillHurt,param.criticalAttack)
            self:ShowAllianceBuildBuff(topUuid, effectStr)
        elseif combineType == BattleType.ACT_ALLIANCE_MINE then
            local health = 0
            local initHealth = 0
            local totalSoldierNum = 0
            for i =1,#armyMembers do
                local VARIABLE  =armyMembers[i]
                if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil then
                    local armyInfo = VARIABLE.armyInfo.armyInfo
                    health = health+armyInfo.health
                    initHealth = initHealth+armyInfo.initHealth
                end
            end
            local str = topUuid..";"..health..";"..initHealth
            EventManager:GetInstance():Broadcast(EventId.ShowActAllianceBuildAttackHeadUI,str)
            self:ShowAllianceBuildBloodHurt(topUuid, param.normalHurt, param.skillHurt, heal,param.carSkillHurt,param.criticalAttack)
            self:ShowAllianceBuildBuff(topUuid, effectStr)
        elseif combineType == BattleType.DRAGON_BUILDING then
            local health = 0
            local initHealth = 0
            local totalSoldierNum = 0
            for i =1,#armyMembers do
                local VARIABLE  =armyMembers[i]
                if VARIABLE.armyInfo~=nil and VARIABLE.armyInfo.armyInfo~=nil then
                    local armyInfo = VARIABLE.armyInfo.armyInfo
                    health = health+armyInfo.health
                    initHealth = initHealth+armyInfo.initHealth
                end
            end
            local str = topUuid..";"..health..";"..initHealth
            EventManager:GetInstance():Broadcast(EventId.ShowDragonBuildAttackHeadUI,str)
            self:ShowDragonBuildBloodHurt(topUuid, param.normalHurt, param.skillHurt, heal,param.carSkillHurt,param.criticalAttack)
            self:ShowDragonBuildBuff(topUuid, effectStr)
        end
    end
end

function WorldMarchBattleManager:UpdateSimpleArmyInfo(selfArmyInfo,outRange,roundReports,combineType,selfBesieged,targetBesieged)
    local armyInfo = selfArmyInfo.armyInfo
    local targetArmyInfo = selfArmyInfo.targetInfo
    local heal = selfArmyInfo.heal
    local shield = selfArmyInfo.shield
    if armyInfo.topUuid ~=0 and not outRange then
        if self:IsArmyInView(armyInfo.topUuid,combineType) ==false then
            return
        end
        local param = {}
        param.normalHurt = 0
        param.skillHurt = 0
        param.showSelfSkillId = 0
        param.showHurtSkillId = 0
        param.carSkillHurt = 0
        param.damageEffectType = APSDamageEffectType.DEFAULT
        param.criticalAttack = 0
        param.isActiveAttack = false
        param.effectBuffList = {}
        local effectStr = ""
        for i=1,#roundReports do
            local report = roundReports[i]
            self:CheckArmyDoSkill(armyInfo.topUuid,report,param)
        end
        for i=1,#param.effectBuffList do
            effectStr  = effectStr .. tostring(param.effectBuffList[i])
            if i<#param.effectBuffList then
                effectStr  = effectStr ..";"
            end
        end
        if combineType == BattleType.ALLIANCE_NEUTRAL_CITY then
            if armyInfo.specialArmyType ~= SpecialUnitType.ALLIANCE_CITY_POLICE_NPC then
                self:AllianceCityUpdateHeadUI(armyInfo.topUuid, armyInfo.armyInfo.health, armyInfo.armyInfo.initHealth)
            end
            self:ShowAllianceCityBloodHurt(armyInfo.topUuid, param.normalHurt, param.skillHurt, heal,param.carSkillHurt,param.criticalAttack);
            self:ShowAllianceCityBuff(armyInfo.topUuid, effectStr)
        elseif combineType == BattleType.Monster or combineType == BattleType.Boss
                or combineType == BattleType.ACT_BOSS or combineType == BattleType.PUZZLE_BOSS or combineType == BattleType.CHALLENGE_BOSS or combineType == BattleType.AllianceBoss then
            local targetID = 0
            if targetArmyInfo ~= nil then
                targetID = targetArmyInfo.topUuid
                if targetArmyInfo.type == BattleType.RallyFormation then
                    targetID = 0
                end
            end
            self:SetMonsterAttack(armyInfo.topUuid, targetID,combineType)
            self:ShowMonsterBloodHurt(armyInfo.topUuid, param.normalHurt, param.skillHurt, heal, param.carSkillHurt, param.criticalAttack);
            if combineType == BattleType.ACT_BOSS or combineType == BattleType.PUZZLE_BOSS then
                self:ActBossUpdateHeadUI(armyInfo.topUuid, selfArmyInfo.anger, armyInfo.armyInfo.health,
                        armyInfo.armyInfo.initHealth)
            elseif combineType == BattleType.AllianceBoss then
                self:AllianceBossUpdateHeadUI(armyInfo.topUuid, selfArmyInfo.anger, armyInfo.armyInfo.health,
                        armyInfo.armyInfo.initHealth)
            else
                self:MonsterUpdateHeadUI(armyInfo.topUuid, selfArmyInfo.anger, armyInfo.armyInfo.health, armyInfo.armyInfo.initHealth)
            end
            
        elseif combineType == BattleType.Formation or combineType == BattleType.BLACK_KNIGHT then
            local targetID = 0
            if targetArmyInfo ~= nil then
                targetID = targetArmyInfo.topUuid
                if targetArmyInfo.type == BattleType.RallyFormation then
                    targetID = 0
                end
            end
            self:SetTroopAttack(armyInfo.topUuid, targetID, param.isActiveAttack);
            --护盾表现
            self:ShowShieldEffect(armyInfo.topUuid, shield);
            --释放技能表现
            self:ShowTroopSkill(armyInfo.topUuid, param.showSelfSkillId, param.showHurtSkillId);
            --飘字
            self:ShowTroopBloodHurt(armyInfo.topUuid, param.normalHurt, param.skillHurt, heal, param.carSkillHurt, param.criticalAttack);
            local carAnger = 0
            if selfArmyInfo.carAnger ~= nil then
                carAnger = selfArmyInfo.carAnger
            end
            self:TroopUpdateHeadUI(armyInfo.topUuid, selfArmyInfo.anger, armyInfo.armyInfo.health, armyInfo.armyInfo.initHealth, carAnger)
            if targetBesieged then
                self:ShowSiegeAttack(armyInfo.topUuid)
            end
            self:ShowTroopBuff(armyInfo.topUuid, effectStr);
            self:ShowTroopDamageDes(armyInfo.topUuid,param.damageEffectType)
        end
    end
end


function WorldMarchBattleManager:IsCombine(combineType)
    if combineType == BattleType.RallyFormation or combineType == BattleType.THRONE_ARMY
            or combineType == BattleType.City or combineType == BattleType.Building
            or combineType == BattleType.Desert or combineType == BattleType.TRAIN_DESERT
            or combineType == BattleType.ALLIANCE_OCCUPIED_CITY or combineType == BattleType.ALLIANCE_BUILDING or combineType == BattleType.ACT_ALLIANCE_MINE
            or combineType == BattleType.DRAGON_BUILDING or combineType == BattleType.CROSS_WORM then
        return  true
    end
    return false
end

function WorldMarchBattleManager:IsArmyInView(uuid,combineType)
    if combineType == BattleType.ALLIANCE_NEUTRAL_CITY or combineType == BattleType.ALLIANCE_OCCUPIED_CITY
            or combineType == BattleType.ALLIANCE_BUILDING or combineType == BattleType.ACT_ALLIANCE_MINE
            or combineType == BattleType.City or combineType == BattleType.Building
            or combineType == BattleType.Monster or combineType == BattleType.Boss
            or combineType == BattleType.ACT_BOSS or combineType == BattleType.PUZZLE_BOSS
            or combineType == BattleType.CHALLENGE_BOSS or combineType == BattleType.AllianceBoss
            or combineType == BattleType.DRAGON_BUILDING or combineType == BattleType.CROSS_WORM then
        local info = DataCenter.WorldPointManager:GetPointInfoByUuid(uuid)
        if info~=nil then
            if DataCenter.WorldMarchDataManager:IsInView(SceneUtils.TileIndexToWorld(info.mainIndex,ForceChangeScene.World)) then
                return true
            end
        end
    end
    if combineType == BattleType.RallyFormation or combineType == BattleType.Formation
            or combineType == BattleType.BLACK_KNIGHT
            or combineType == BattleType.THRONE_ARMY  then
        local info = DataCenter.WorldMarchDataManager:GetMarch(uuid)
        if info~=nil then
            if DataCenter.WorldMarchDataManager:IsInView(info:GetMarchCurPos()) then
                return true
            end
        end
    end
end

function WorldMarchBattleManager:CheckArmyDoSkill(armyUuid,reportInfo,param)
    --param.normalHurt = 0
    --param.skillHurt = 0
    --param.showSelfSkillId = 0
    --param.showHurtSkillId = 0
    --param.carSkillHurt = 0
    --param.damageEffectType = APSDamageEffectType.DEFAULT
    --param.criticalAttack = 0
    --param.isActiveAttack = false
    --param.effectBuffList = {}
    local triggerUUID = reportInfo.triggerUuid
    local targetUUID = reportInfo.targetUuid
    local roundReport = reportInfo.roundReport
    local damgeType = roundReport.type
    if damgeType == eMailDetailActionType.USE_SKILL then
        if triggerUUID == armyUuid then
            if param.showSelfSkillId<=0 then
                local  useSkillID = roundReport.skillId
                local effectPath =  GetTableData(TableName.SkillTab, useSkillID, "effect_path")
                local tempPoint =  GetTableData(TableName.SkillTab, useSkillID, "effect_point_type")
                local skillType = toInt(GetTableData(TableName.SkillTab, useSkillID, "type"))
                local effectPoint = 0
                if tempPoint~=nil and tempPoint~="" then
                    effectPath = toInt(tempPoint)
                end
                if (skillType == HeroSkillType.RAGE_SKILL or skillType == HeroSkillType.START_BATTLE_SKILL)
                        and effectPath ~=nil and effectPath ~=""
                        and damgeType == effectPoint and effectPath~= Const.sheldPath then
                    param.showSelfSkillId = useSkillID
                end
            end
            if roundReport.skillId == normalAttackId then
                param.isActiveAttack = true
            end
        end
    elseif damgeType == eMailDetailActionType.ATTACK then
        if targetUUID == armyUuid then
            if roundReport.skillId == normalAttackId then
                if roundReport.damageEffectType == APSDamageEffectType.CRIT then
                    param.criticalAttack = param.criticalAttack + roundReport.value
                else
                    param.normalHurt = param.normalHurt+roundReport.value
                end
                param.damageEffectType = roundReport.damageEffectType
            else
                local heroId = reportInfo.roundReport.heroId
                if heroId>0 then
                    param.skillHurt = param.skillHurt+roundReport.value
                elseif heroId ==-2 then
                    param.carSkillHurt = param.carSkillHurt+roundReport.value
                end
                if param.showHurtSkillId<=0 then
                    local  useSkillID = roundReport.skillId
                    local effectPath =  GetTableData(TableName.SkillTab, useSkillID, "effect_path")
                    local tempPoint =  GetTableData(TableName.SkillTab, useSkillID, "effect_point_type")
                    local skillType = toInt(GetTableData(TableName.SkillTab, useSkillID, "type"))
                    local effectPoint = 0
                    if tempPoint~=nil and tempPoint~="" then
                        effectPath = toInt(tempPoint)
                    end
                    if (skillType == HeroSkillType.RAGE_SKILL or skillType == HeroSkillType.START_BATTLE_SKILL)
                            and effectPath ~=nil and effectPath ~=""
                            and damgeType == effectPoint and effectPath~= Const.sheldPath then
                        param.showHurtSkillId = useSkillID
                    end
                end
            end
        end
        if triggerUUID == armyUuid then
            if roundReport.skillId == normalAttackId then
                param.isActiveAttack = true
            end
        end
    elseif damgeType == eMailDetailActionType.COUNTER_ATTACK then
        if targetUUID == armyUuid then
            if roundReport.damageEffectType == APSDamageEffectType.CRIT then
                param.criticalAttack = param.criticalAttack + roundReport.value
            else
                param.normalHurt = param.normalHurt+roundReport.value
            end
            param.damageEffectType = roundReport.damageEffectType
        end
    elseif damgeType == eMailDetailActionType.ADD_EFFECT then
        if targetUUID == armyUuid then
            table.insert(param.effectBuffList,roundReport.value)
        end
    end
    
end


function WorldMarchBattleManager:ShowShieldEffect(atkUuid,shield)
    local troop = WorldTroopManager:GetInstance():GetTroop(atkUuid)
    if troop == nil then
        return
    end
    if shield == nil or shield<=0 then
        troop:DelShield()
    else
        troop:AddShield()
    end
end
function WorldMarchBattleManager:SetTroopAttack(atkUuid,defAtkUuid,isActiveAttack)
    local troop = WorldTroopManager:GetInstance():GetTroop(atkUuid)
    if troop == nil then
        return
    end
    troop:SetRotationRoot()
    troop:SetIsBattle(true)
    local marchInfo = troop:GetMarchInfo()
    if marchInfo~=nil and (marchInfo:GetMarchType() == NewMarchType.ACT_BOSS or marchInfo:GetMarchType() == NewMarchType.PUZZLE_BOSS) then
        return
    end
    if marchInfo~=nil and (marchInfo:GetMarchType() == NewMarchType.BOSS or marchInfo:GetMarchType() == NewMarchType.MONSTER or marchInfo:GetMarchType() == NewMarchType.CHALLENGE_BOSS or marchInfo:GetMarchType() == NewMarchType.MONSTER_SIEGE or marchInfo:GetMarchType() == NewMarchType.ALLIANCE_BOSS) then
        troop:SetDefAtkUuid(0)
        local normalized = Vector3.Normalize(troop:GetDefenderPosition() - troop:GetPosition())
        if normalized.x == 0 and normalized.y ==0 and normalized.z == 0 then
        else
            troop:SetRotation(Quaternion.LookRotation(normalized,Vector3.up))
        end
        troop:Attack()
    elseif isActiveAttack then
        troop:SetDefAtkUuid(defAtkUuid)
        local marchData = DataCenter.WorldMarchDataManager:GetMarch(defAtkUuid)
        if marchData~=nil and marchData.ownerUid == LuaEntry.Player.uid then
            EventManager:GetInstance():Broadcast(EventId.ShowBattleRedName,atkUuid)
        end
        local normalized = Vector3.Normalize(troop:GetDefenderPosition() - troop:GetPosition())
        if normalized.x == 0 and normalized.y ==0 and normalized.z == 0 then
        else
            troop:SetRotation(Quaternion.LookRotation(normalized,Vector3.up))
        end
        troop:Attack()
        if marchInfo~=nil and (marchInfo:GetMarchType() == NewMarchType.DEFAULT or marchInfo:GetMarchType() == NewMarchType.NORMAL or marchInfo:GetMarchType() == NewMarchType.DIRECT_MOVE_MARCH ) then
            troop:ShowAttack()
        elseif marchInfo~=nil and marchInfo:GetMarchType() == NewMarchType.ASSEMBLY_MARCH then
            troop:ShowRallyMarchAttack()
        end
    end
end
function WorldMarchBattleManager:ShowTroopSkill(skillTargetUuid,selfSkillId,hurtSkillId)
    local troop = WorldTroopManager:GetInstance():GetTroop(skillTargetUuid)
    if troop == nil then
        return
    end
    if selfSkillId>0 then
        troop:DoSkill(selfSkillId)
    end
    if hurtSkillId>0 then
        troop.DoSkill(hurtSkillId)
    end
    if selfSkillId>0 then
        EventManager:GetInstance():Broadcast(EventId.ShowHeroIconByUseSkill,skillTargetUuid)
    end
    if hurtSkillId>0 then
        EventManager:GetInstance():Broadcast(EventId.ShowHeroHitedUiEffect,skillTargetUuid)
    end
end
function WorldMarchBattleManager:ShowTroopBloodHurt(hurtTargetUuid,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local troop = WorldTroopManager:GetInstance():GetTroop(hurtTargetUuid)
    if troop == nil then
        local march = DataCenter.WorldMarchDataManager:GetMarch(hurtTargetUuid)
        if march~=nil and march:GetMarchStatus() == MarchStatus.COLLECTING then
            local pointIndex = march.targetPos
            self:ShowCollectPointBloodHurt(pointIndex, normalHurt, skillHurt, heal,carSkillHurt,criticalAttack)
        end
        return
    end
    if normalHurt>0 then
        troop:ShowBattleHurt(normalHurt, Const.BattleWordType.Normal)
    end
    if skillHurt>0 then
        troop:ShowBattleHurt(skillHurt, Const.BattleWordType.Skill)
    end
    if heal>0 then
        troop:ShowBattleHurt((heal*-1), Const.BattleWordType.Cure)
    end
    if carSkillHurt>0 then
        troop:ShowBattleHurt(carSkillHurt, Const.BattleWordType.CarSkill)
    end
    if criticalAttack>0 then
        troop:ShowBattleHurt(criticalAttack, Const.BattleWordType.CriticalAttack)
    end
end
function WorldMarchBattleManager:TroopUpdateHeadUI(marchUuid,anger,hp,hpMax,carAnger)
    local troop = WorldTroopManager:GetInstance():GetTroop(marchUuid)
    if troop == nil then
        local march = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
        if march~=nil and march:GetMarchStatus() == MarchStatus.COLLECTING then
            local pointIndex = march.targetPos
            self:ShowCollectUpdateHeadUI(marchUuid,pointIndex,anger,hp,hpMax,carAnger)
        end
        return
    end
    local str = marchUuid ..";".. anger ..";".. hp..";"..hpMax..";"..carAnger
    EventManager:GetInstance():Broadcast(EventId.ShowTroopBattleValue,str)
end

function WorldMarchBattleManager:SetMonsterAttack(atkUuid,defAtkUuid,combineType)
    local pointObj = DataCenter.WorldPointManager:GetObjectByUuid(atkUuid)
    if pointObj ==nil then
        return
    end
    pointObj:SetIsBattle(true)
    if combineType == BattleType.ACT_BOSS or combineType == BattleType.PUZZLE_BOSS then
        
    else
        pointObj:LookAtTarget(defAtkUuid)
    end
    
    pointObj:Attack()
    
end

function WorldMarchBattleManager:ShowMonsterBloodHurt(hurtTargetUuid,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(hurtTargetUuid)
    if pointInfo == nil then
        return
    end
    local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
    if tile==nil or tile<=1 then
        tile =1
    end
    local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
    position.x = position.x- (tile/2+0.5)
    position.z = position.z- (tile/2)
    if normalHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildNormalBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = normalHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if skillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = skillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if criticalAttack>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCriticalDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = criticalAttack
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if carSkillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCarDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = carSkillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end
function WorldMarchBattleManager:ActBossUpdateHeadUI(marchUuid,anger,hp,hpMax)
    local str = marchUuid ..";".. anger ..";".. hp..";"..hpMax
    EventManager:GetInstance():Broadcast(EventId.ShowActBossBattleValue,str)
end
function WorldMarchBattleManager:AllianceBossUpdateHeadUI(marchUuid,anger,hp,hpMax)
    local str = marchUuid ..";".. anger ..";".. hp..";"..hpMax
    EventManager:GetInstance():Broadcast(EventId.ShowAllianceBossBattleValue,str)
end
function WorldMarchBattleManager:MonsterUpdateHeadUI(marchUuid,anger,hp,hpMax)
    local str = marchUuid ..";".. anger ..";".. hp..";"..hpMax
    EventManager:GetInstance():Broadcast(EventId.ShowMonsterBattleValue,str)
end
function WorldMarchBattleManager:ShowTroopBuff(targetUuid,effectStr)
    if effectStr~=nil and effectStr~=""then
        local troop = WorldTroopManager:GetInstance():GetTroop(targetUuid)
        if troop == nil then
            local march = DataCenter.WorldMarchDataManager:GetMarch(targetUuid)
            if march~=nil and march:GetMarchStatus() == MarchStatus.COLLECTING then
                local pointIndex = march.targetPos
                self:ShowCollectPointBuff(targetUuid, pointIndex, effectStr)
            end
            return
        end
        local str = targetUuid .."|".. SceneUtils.WorldToTileIndex(troop:GetPosition(),ForceChangeScene.World) .."|".. effectStr
        EventManager:GetInstance():Broadcast(EventId.ShowBattleBuff,str)
    end
end
function WorldMarchBattleManager:ShowTroopDamageDes(targetUuid,damageAttackType)
    if damageAttackType>0 then
        local troop = WorldTroopManager:GetInstance():GetTroop(targetUuid)
        if troop == nil then
            return
        end
        local str = targetUuid .."|".. SceneUtils.WorldToTileIndex(troop:GetPosition(),ForceChangeScene.World) .."|".. damageAttackType
        EventManager:GetInstance():Broadcast(EventId.ShowBattleDamageType,str)
    end
end
function WorldMarchBattleManager:ShowSiegeAttack(targetUuid)
    local march = DataCenter.WorldMarchDataManager:GetMarch(targetUuid)
    if march~=nil and (march:GetMarchType() == NewMarchType.NORMAL or  march:GetMarchType() == NewMarchType.ASSEMBLY_MARCH) then
        if march:GetMarchTargetType() ==MarchTargetType.ATTACK_ARMY or march:GetMarchTargetType() ==MarchTargetType.ATTACK_MONSTER or march:GetMarchTargetType() ==MarchTargetType.RALLY_FOR_BOSS then
            local armyInfo = march:GetFirstArmyInfo()
            if armyInfo~=nil then
                local effectValue = armyInfo:GetMarchEffectValue(30296)
                if effectValue>0 then
                    local targetMarchUuid = march.targetUuid
                    local targetMarch = DataCenter.WorldMarchDataManager:GetMarch(targetMarchUuid)
                    if targetMarch ~=nil then
                        local strDef = targetMarchUuid .."|".. SceneUtils.WorldToTileIndex(targetMarch:GetMarchCurPos(),ForceChangeScene.World) .."|".. "1"
                        EventManager:GetInstance():Broadcast(EventId.ShowSiegeAttack, strDef)
                        local strAtk = march.uuid .."|".. SceneUtils.WorldToTileIndex(march:GetMarchCurPos(),ForceChangeScene.World) .."|".. "2"
                        EventManager:GetInstance():Broadcast(EventId.ShowSiegeAttack, strAtk)
                    end
                end
            end
        end
    end
end

function WorldMarchBattleManager:AllianceCityUpdateHeadUI(cityUuid,hp,hpMax)
    local str = cityUuid ..";".. hp..";"..hpMax
    EventManager:GetInstance():Broadcast(EventId.ShowAllianceCitySoldierBlood, str)
end
function WorldMarchBattleManager:ShowAllianceCityBloodHurt(hurtTargetUuid,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(hurtTargetUuid)
    if pointInfo == nil then
        return
    end
    local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
    position.x = position.x-6
    position.z = position.z-6
    if normalHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildNormalBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = normalHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if skillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = skillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if criticalAttack>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCriticalDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = criticalAttack
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if carSkillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCarDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = carSkillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end
function WorldMarchBattleManager:ShowAllianceCityBuff(targetUuid,effectStr)
    if effectStr~=nil and effectStr~=""then
        local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(targetUuid)
        if pointInfo == nil then
            return
        end
        local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
        position.x = position.x-6
        position.z = position.z-6
        local str = targetUuid .."|".. SceneUtils.WorldToTileIndex(position,ForceChangeScene.World) .."|".. effectStr.."|"..WorldPointType.WORLD_ALLIANCE_CITY
        EventManager:GetInstance():Broadcast(EventId.ShowBattleBuff,str)
    end
end

function WorldMarchBattleManager:ThroneUpdateHeadUI(marchUuid,hp,hpMax)
    local str = marchUuid ..";".. hp..";"..hpMax
    EventManager:GetInstance():Broadcast(EventId.ShowThroneArmyHeadUI, str)
end
function WorldMarchBattleManager:ShowThroneBloodHurt(hurtTargetUuid,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local march = DataCenter.WorldMarchDataManager:GetMarch(hurtTargetUuid)
    if march ==nil then
        return
    end
    local position = SceneUtils.TileIndexToWorld(march.targetPos,ForceChangeScene.World)
    if normalHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildNormalBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = normalHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if skillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = skillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if criticalAttack>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCriticalDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = criticalAttack
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if carSkillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCarDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = carSkillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end
function WorldMarchBattleManager:ShowThroneBuff(targetUuid,effectStr)
    if effectStr~=nil and effectStr~=""then
        local march = DataCenter.WorldMarchDataManager:GetMarch(hurtTargetUuid)
        if march ==nil then
            return
        end
        local position = SceneUtils.TileIndexToWorld(march.targetPos,ForceChangeScene.World)
        local str = targetUuid .."|".. SceneUtils.WorldToTileIndex(position,ForceChangeScene.World) .."|".. effectStr.."|"..WorldPointType.WORLD_ALLIANCE_CITY
        EventManager:GetInstance():Broadcast(EventId.ShowBattleBuff,str)
    end
end
function WorldMarchBattleManager:ShowPlayerBuildBloodHurt(hurtTargetUuid,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(hurtTargetUuid)
    if pointInfo == nil then
        return
    end
    local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
    if tile==nil or tile<=1 then
        tile =1
    end
    local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
    position.x = position.x- (tile/2+0.5)
    position.z = position.z- (tile/2)
    if normalHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildNormalBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = normalHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if skillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = skillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if criticalAttack>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCriticalDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = criticalAttack
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if carSkillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCarDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = carSkillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end
function WorldMarchBattleManager:ShowPlayerBuildBuff(targetUuid,effectStr)
    if effectStr~=nil and effectStr~=""then
        local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(targetUuid)
        if pointInfo == nil then
            return
        end
        local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
        if tile==nil or tile<=1 then
            tile =1
        end
        local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
        position.x = position.x- (tile/2)
        position.z = position.z- (tile/2)
        local str = targetUuid .."|".. SceneUtils.WorldToTileIndex(position,ForceChangeScene.World) .."|".. effectStr.."|"..WorldPointType.PlayerBuilding
        EventManager:GetInstance():Broadcast(EventId.ShowBattleBuff,str)
    end
end

function WorldMarchBattleManager:ShowAllianceBuildBloodHurt(hurtTargetUuid,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(hurtTargetUuid)
    if pointInfo == nil then
        return
    end
    local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
    if tile==nil or tile<=1 then
        tile =1
    end
    local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
    position.x = position.x- (tile/2)
    position.z = position.z- (tile/2)
    if normalHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildNormalBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = normalHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if skillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = skillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if criticalAttack>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCriticalDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = criticalAttack
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if carSkillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCarDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = carSkillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end

function WorldMarchBattleManager:ShowAllianceBuildBuff(targetUuid,effectStr)
    if effectStr~=nil and effectStr~=""then
        local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(targetUuid)
        if pointInfo == nil then
            return
        end
        local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
        if tile==nil or tile<=1 then
            tile =1
        end
        local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
        position.x = position.x- (tile/2)
        position.z = position.z- (tile/2)
        local str = targetUuid .."|".. SceneUtils.WorldToTileIndex(position,ForceChangeScene.World) .."|".. effectStr.."|"..WorldPointType.WORLD_ALLIANCE_BUILD
        EventManager:GetInstance():Broadcast(EventId.ShowBattleBuff,str)
    end
end

function WorldMarchBattleManager:ShowDragonBuildBloodHurt(hurtTargetUuid,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(hurtTargetUuid)
    if pointInfo == nil then
        return
    end
    local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
    if tile==nil or tile<=1 then
        tile =1
    end
    local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
    position.x = position.x- (tile/2)
    position.z = position.z- (tile/2)
    if normalHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildNormalBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = normalHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if skillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = skillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if criticalAttack>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCriticalDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = criticalAttack
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if carSkillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCarDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = carSkillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end

function WorldMarchBattleManager:ShowDragonBuildBuff(targetUuid,effectStr)
    if effectStr~=nil and effectStr~=""then
        local pointInfo = DataCenter.WorldPointManager:GetPointInfoByUuid(targetUuid)
        if pointInfo == nil then
            return
        end
        local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
        if tile==nil or tile<=1 then
            tile =1
        end
        local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
        position.x = position.x- (tile/2)
        position.z = position.z- (tile/2)
        local str = targetUuid .."|".. SceneUtils.WorldToTileIndex(position,ForceChangeScene.World) .."|".. effectStr.."|"..WorldPointType.WORLD_ALLIANCE_BUILD
        EventManager:GetInstance():Broadcast(EventId.ShowBattleBuff,str)
    end
end

function WorldMarchBattleManager:ShowDesertBloodHurt(pointId,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local position = SceneUtils.TileIndexToWorld(pointId,ForceChangeScene.World)
    if normalHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildNormalBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = normalHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if skillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = skillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if criticalAttack>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCriticalDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = criticalAttack
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if carSkillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCarDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = carSkillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end

function WorldMarchBattleManager:BattleFinish(message)
    if message == nil then
        return
    end
    local uuid = message["uuid"]
    local pointId = message["pointId"]
    local result = message["result"]
    EventManager:GetInstance():Broadcast(EventId.HideDesertAttackHeadUI,pointId)
    EventManager:GetInstance():Broadcast(EventId.CollectPointOut,uuid)
    EventManager:GetInstance():Broadcast(EventId.HideAllianceCitySoliderBlood, uuid)
    EventManager:GetInstance():Broadcast(EventId.HideBuildAttackHeadUI,uuid)
    EventManager:GetInstance():Broadcast(EventId.HideAllianceBuildAttackHeadUI,uuid)
    EventManager:GetInstance():Broadcast(EventId.HideBattleBuff,uuid)
    EventManager:GetInstance():Broadcast(EventId.HideSiegeAttack, uuid)
    EventManager:GetInstance():Broadcast(EventId.HideActAllianceBuildAttackHeadUI,uuid)
    EventManager:GetInstance():Broadcast(EventId.HideDragonBuildAttackHeadUI,uuid)
    local troop = WorldTroopManager:GetInstance():GetTroop(uuid)
    if troop ~= nil then
        troop:SetDefAtkUuid(0)
        troop:SetIsBattle(false)
        if result == FightResult.SELF_WIN then
            if  DataCenter.WorldMarchDataManager:IsSelfInCurrentMarchTeam(uuid)== true then
                troop:ShowBattleSuccess()
                EventManager:GetInstance():Broadcast(EventId.MarchEndWithReward, uuid)
            end
        elseif result == FightResult.OTHER_WIN then
            if  DataCenter.WorldMarchDataManager:IsSelfInCurrentMarchTeam(uuid)== true then
                EventManager:GetInstance():Broadcast(EventId.MarchFail, uuid)
                troop:ShowBattleFailed()
            end
        end
        troop:PlayAnim(Const.WorldTroopAnim.Anim_Idle)
    end
    local pointObj = DataCenter.WorldPointManager:GetObjectByUuid(uuid)
    if pointObj ~=nil then
        local pointType = pointObj:GetPointType()
        if pointType == WorldPointType.WorldMonster then
            pointObj:SetIsBattle(false)
            pointObj:PlayAnim(Const.WorldTroopAnim.Anim_Idle)
            pointObj:SetRotation(Quaternion.Euler(0, 180, 0))
        end
    end 
end

function WorldMarchBattleManager:ShowCollectPointBloodHurt(pointIndex,normalHurt,skillHurt,heal,carSkillHurt,criticalAttack)
    local pointInfo = DataCenter.WorldPointManager:GetPointInfo(pointIndex)
    if pointInfo == nil then
        return
    end
    local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
    if tile==nil or tile<=1 then
        tile =1
    end
    local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
    position.x = position.x- (tile/2)
    position.z = position.z- (tile/2)
    if normalHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildNormalBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = normalHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if skillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = skillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if criticalAttack>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCriticalDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = criticalAttack
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
    if carSkillHurt>0 then
        local showPath = "Assets/Main/Prefabs/UI/BattleWord/BattleBuildCarDecBloodTip.prefab"
        local param = CS.BattleDecBloodTip.Param()
        param.startPos = position
        param.num = carSkillHurt
        param.path = showPath
        CS.SceneManager.World:ShowBattleBlood(param,showPath)
    end
end

function WorldMarchBattleManager:ShowCollectPointBuff(targetUuid,pointIndex,effectStr)
    if effectStr~=nil and effectStr~=""then
        local pointInfo = DataCenter.WorldPointManager:GetPointInfo(pointIndex)
        if pointInfo == nil then
            return
        end
        local tile = WorldBuildUtil.GetBuildTile(pointInfo.mainIndex)
        if tile==nil or tile<=1 then
            tile =1
        end
        local position = SceneUtils.TileIndexToWorld(pointInfo.mainIndex,ForceChangeScene.World)
        position.x = position.x- (tile/2)
        position.z = position.z- (tile/2)
        local str = targetUuid .."|".. SceneUtils.WorldToTileIndex(position,ForceChangeScene.World) .."|".. effectStr.."|"..WorldPointType.WorldResource
        EventManager:GetInstance():Broadcast(EventId.ShowBattleBuff,str)
    end
end
function WorldMarchBattleManager:ShowCollectUpdateHeadUI(marchUuid,pointIndex,anger,hp,hpMax,carAnger)
    local str = marchUuid ..";"..pointIndex..";".. anger ..";".. hp..";"..hpMax..";"..carAnger
    EventManager:GetInstance():Broadcast(EventId.ShowCollectBattleValue,str)
end
return WorldMarchBattleManager