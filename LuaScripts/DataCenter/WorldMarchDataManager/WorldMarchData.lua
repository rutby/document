---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/10/11 20:53
---
local WorldMarchData = BaseClass("WorldMarchData")
local ArmyInfo = require "DataCenter.WorldMarchDataManager.ArmyInfo"
local function __init(self)
    self.uuid =0
    self.ownerUid = ""
    self.ownerName = ""
    self.teamUuid = 0
    self.allianceUid = ""
    self.ownerFormationUuid = ""
    self.path = ""
    self.targetPos = 0
    self.startPos = 0
    self.startTime = 0
    self.endTime = 0
    self.blackStartTime = 0
    self.blackEndTime = 0
    self.target = MarchTargetType.STATE
    self.status = MarchStatus.DEFAULT
    self.type = NewMarchType.DEFAULT
    self.targetUuid = 0
    self.speed = 0
    self.oriSpeed = 0
    self.plunderRes = ""
    self.worldId = 0
    self.collectSpd = 0
    self.armyWeight = 0
    self.inBattle = false
    self.armyInfos = {}
    self.monsterId = 0
    self.refreshTime = 0
    self.actStartTime = 0
    self.actEndTime = 0
    self.isBroken = false
    self.allianceAbbr = ""
    self.allianceName = ""
    self.allianceIcon = ""
    self.eventId = ""
    self.belongUid = ""
    self.pic = ""
    self.picVer = 0
    self.serverId = 0
    self.targetServer = 0
    self.srcServer = 0
    self.realTargetPos = 0
    self.isSelect = false
    self.isCameraFollow = false
    self.bossOwnerUid = ""
    self.callHelp = 0
    self.fightMonster = false
    self.skinId = 0
    self.skinExpireTime =0
    self.secretKey = 0
    self.diffPoint = ""
    self.pathSegments = nil
    self.position = nil
    self.curPathLen = 0
    self.pathIndex = 0
    self.moveDir = nil
end

local function __delete(self)
end

local function UpdateWorldMarch(self, message)
    if message == nil then
        return
    end
    if message["uuid"] ~= nil then
        self.uuid = message["uuid"]
    end
    if message["worldId"] ~= nil then
        self.worldId = message["worldId"]
    end
    if message["teamUuid"] ~= nil then
        self.teamUuid = message["teamUuid"]
    end
    if message["ownerUid"] ~= nil then
        self.ownerUid = message["ownerUid"]
    end
    if message["teamUuid"] ~= nil then
        self.teamUuid = message["teamUuid"]
    end
    if message["ownerName"] ~= nil then
        self.ownerName = message["ownerName"]
    end
    if message["ownerFormationUuid"] ~= nil then
        self.ownerFormationUuid = message["ownerFormationUuid"]
    end
    if message["path"] ~= nil then
        self.path = message["path"]
    end
    if message["targetPos"] ~= nil then
        self.targetPos = message["targetPos"]
    end
    if message["startId"] ~= nil then
        self.startPos = message["startId"]
    end
    if message["startPos"] ~= nil then
        self.startPos = message["startPos"]
    end
    if message["target"] ~= nil then
        self.target = message["target"]
    end
    if message["status"] ~= nil then
        self.status = message["status"]
    end
    if message["targetUuid"] ~= nil then
        self.targetUuid = message["targetUuid"]
    end
    if message["startTime"] ~= nil then
        self.startTime = message["startTime"]
    end
    if message["targetUuid"] ~= nil then
        self.targetUuid = message["targetUuid"]
    end
    if message["startTime"] ~= nil then
        self.startTime = message["startTime"]
    end
    if message["endTime"] ~= nil then
        self.endTime = message["endTime"]
    end
    if message["secretKey"]~=nil then
        self.secretKey = message["secretKey"]
    else
        self.secretKey = 0
    end
    if self.worldId ~= nil and self.worldId > 0 then
        self.blackStartTime = 0
        self.blackEndTime = 0
    else
        if message["blackStartTime"] ~= nil then
            self.blackStartTime = message["blackStartTime"]
        end
        if message["blackEndTime"] ~= nil then
            self.blackEndTime = message["blackEndTime"]
        end
    end
    if message["allianceUid"] ~= nil then
        self.allianceUid = message["allianceUid"]
    end
    if message["type"] ~= nil then
        self.type = message["type"]
    end
    if message["speed"] ~= nil then
        self.speed = message["speed"]
    end
    if message["oriSpeed"] ~= nil then
        self.oriSpeed = message["oriSpeed"]
    end
    if message["plunderRes"] ~= nil then
        self.plunderRes = message["plunderRes"]
    end
    if message["collectSpd"] ~= nil then
        self.collectSpd = message["collectSpd"]
    end
    if message["armyWeight"] ~= nil then
        self.armyWeight = message["armyWeight"]
    end
    if message["inBattle"] ~= nil then
        self.inBattle = message["inBattle"]
    end
    if message["eventId"] ~= nil then
        self.eventId = message["eventId"]
    end
    if message["belongUid"] ~= nil then
        self.belongUid = message["belongUid"]
    end
    if message["actEnd"] ~= nil then
        self.actEndTime = message["actEnd"]
    end
    if message["actStart"] ~= nil then
        self.actStartTime = message["actStart"]
    end
    if message["bossOwnerUid"] ~= nil then
        self.bossOwnerUid = message["bossOwnerUid"]
    end
    if message["server"] ~= nil then
        self.serverId = message["server"]
    end
    if message["targetServer"] ~= nil then
        self.targetServer = message["targetServer"]
    end
    if message["srcServer"] ~= nil then
        self.srcServer = message["srcServer"]
    end
    if message["fightMonster"] ~= nil then
        self.fightMonster = message["fightMonster"]
    end
    if message["diffPoint"]~=nil then
        self.diffPoint = message["diffPoint"]
    end
    if self.type == NewMarchType.MONSTER or self.type == NewMarchType.BOSS or self.type == NewMarchType.ACT_BOSS
            or self.type == NewMarchType.PUZZLE_BOSS or self.type == NewMarchType.CHALLENGE_BOSS or self.type == NewMarchType.MONSTER_SIEGE
            or self.type == NewMarchType.ALLIANCE_BOSS then
        if message["monsterId"] ~= nil then
            self.monsterId = message["monsterId"]
        end
        if message["refreshTime"] ~= nil then
            self.refreshTime = message["refreshTime"]
        end
    end
    if self.type == NewMarchType.CHALLENGE_BOSS then
        if message["callHelp"] ~= nil then
            self.callHelp = message["callHelp"]
        end
    end
    if message["isBroken"] ~= nil then
        self.isBroken = message["isBroken"]
    end
    if message["allianceAbbr"] ~= nil then
        self.allianceAbbr = message["allianceAbbr"]
    end
    if message["allianceName"] ~= nil then
        self.allianceName = message["allianceName"]
    end
    if message["allianceIcon"] ~= nil then
        self.allianceIcon = message["allianceIcon"]
    end
    if message["pic"] ~= nil then
        self.pic = message["pic"]
    end
    if message["picVer"] ~= nil then
        self.picVer = message["picVer"]
    end
    if message["skinId"]~=nil then
        self.skinId = message["skinId"]
    end
    if message["skinExpireTime"]~=nil then
        self.skinExpireTime = message["skinExpireTime"]
    end
    if message["combatInfos"] ~= nil then
        self:UpdateArmy(message["combatInfos"])
    else
        if message["armyInfo"]~=nil then
            self:UpdateArmy(message["armyInfo"])
        end
    end
    self:InitMove()
end

function WorldMarchData:InitMove()
    self.pathSegments = SceneUtils.CreatePathSegment(self)
    self.position = nil
    self.curPathLen = 0
    self.pathIndex = 0
    self.moveDir = nil
    self.cacheTime = UITimeManager:GetInstance():GetServerTime()
    local status = self.status
    if self.pathSegments == nil or #self.pathSegments<2 then
        if status == MarchStatus.TRANSPORT_BACK_HOME or status == MarchStatus.WAIT_RALLY then
            self.position = SceneUtils.TileIndexToWorld(self.startPos,ForceChangeScene.World)
        else
            self.position = SceneUtils.TileIndexToWorld(self.targetPos,ForceChangeScene.World)
        end
        return;
    end
    --if status == MarchStatus.MOVING or status == MarchStatus.BACK_HOME or status == MarchStatus.CHASING or status == MarchStatus.IN_WORM_HOLE then
        local serverNow = UITimeManager:GetInstance():GetServerTime()
        self.curPathLen = 0
        local dec = DataCenter.BirthPointTemplateManager:GetBlackLandSpeedByServerId(LuaEntry.Player:GetCurServerId())
        local blackEndTime = self.blackEndTime
        local blackStartTime = self.blackStartTime
        if blackEndTime~=nil and blackStartTime~=nil and blackStartTime>0 and blackEndTime>0 then
            if serverNow<=blackEndTime then
                self.curPathLen = self.speed * (serverNow - self.startTime) * 0.001*TileSize
            elseif serverNow<= blackEndTime then
                self.curPathLen = self.speed * (blackStartTime - self.startTime) * 0.001*TileSize
                self.curPathLen = self.curPathLen + self.speed * (serverNow - blackStartTime) * 0.001*TileSize*dec
            else
                self.curPathLen = self.speed * (blackStartTime - self.startTime) * 0.001*TileSize
                self.curPathLen = self.curPathLen + self.speed * (blackEndTime - blackStartTime) * 0.001*TileSize*dec
                self.curPathLen = self.curPathLen + self.speed * (serverNow - blackEndTime) * 0.001*TileSize
            end
        else
            self.curPathLen = self.speed * (serverNow - self.startTime) * 0.001*TileSize
        end
        local curPos,pathIndex = SceneUtils.CalcMoveOnPath(self.pathSegments, 1,self.curPathLen)
        if pathIndex>=#self.pathSegments then
            self.curPathLen = 0
        else
            local nextPos = self.pathSegments[pathIndex+1].pos
            local pathVec = Vector3.New(nextPos.x - curPos.x, nextPos.y - curPos.y, nextPos.z - curPos.z)
            self.moveDir = Vector3.Normalize(pathVec)
            self.curPathLen = Vector3.Magnitude(pathVec)
        end
        self.position = curPos
        self.pathIndex = pathIndex
    --end
end
function WorldMarchData:UpdateMove()
    if self.curPathLen<=0 then
        return 
    end
    local blackEndTime = self.blackEndTime
    local blackStartTime = self.blackStartTime
    local moveSpeed = self.speed*TileSize
    local serverNow = UITimeManager:GetInstance():GetServerTime()
    if blackEndTime~=nil and blackStartTime~=nil and blackStartTime>0 and blackEndTime>0 then
        if blackStartTime<=serverNow and serverNow <= blackEndTime then
            local dec = DataCenter.BirthPointTemplateManager:GetBlackLandSpeedByServerId(LuaEntry.Player:GetCurServerId())
            moveSpeed = self.speed*TileSize*dec
        end
    end
    local deltaTime = (serverNow-self.cacheTime)* 0.001
    self.position.x = self.position.x+ self.moveDir.x * moveSpeed *deltaTime
    self.position.y = self.position.y+ self.moveDir.y * moveSpeed *deltaTime
    self.position.z = self.position.z+ self.moveDir.z * moveSpeed *deltaTime
    self.curPathLen = self.curPathLen - (moveSpeed *deltaTime)
    self.cacheTime = serverNow
    if self.curPathLen<=0 then
        if self.pathSegments~=nil and #self.pathSegments>=2 then
            if self.pathIndex>= #self.pathSegments-1 then
                self.curPathLen = 0
                self.position = self.pathSegments[#self.pathSegments].pos
            else
                self.pathIndex = self.pathIndex+1
                local nextPos = self.pathSegments[self.pathIndex+1].pos
                local pathVec = Vector3.New(nextPos.x - self.position.x, nextPos.y - self.position.y, nextPos.z - self.position.z)
                self.moveDir = Vector3.Normalize(pathVec)
                self.curPathLen = Vector3.Magnitude(pathVec)
            end
        end
    end
    
end

function WorldMarchData:GetCurPosParam()
    return self.position,self.pathSegments,self.pathIndex
end

local function UpdateWorldMarchForCsharp(self, message)
    if message == nil then
        return
    end
    self.uuid = message.uuid
    self.worldId = message.worldId
    self.teamUuid = message.teamUuid
    self.ownerUid = message.ownerUid
    self.ownerName = message.ownerName
    self.ownerFormationUuid = message.ownerFormationUuid
    self.path = message.pathStr
    self.targetPos = message.targetPos
    self.startPos = message.startPos
    self.target = message:GetMarchTargetType()
    self.status = message:GetMarchStatus()
    self.targetUuid = message.targetUuid
    self.startTime = message.startTime
    self.endTime = message.endTime
    self.secretKey = message.secretKey
    if self.worldId ~= nil and self.worldId > 0 then
        self.blackStartTime = 0
        self.blackEndTime = 0
    else
        self.blackStartTime = message.blackStartTime
        self.blackEndTime = message.blackEndTime
    end
    self.allianceUid = message.allianceUid
    self.type = message:GetMarchType()
    self.speed = message.speed
    self.oriSpeed = message.oriSpeed
    self.plunderRes = message.plunderRes
    self.collectSpd = message.collectSpd
    self.armyWeight =message.armyWeight
    self.inBattle = message.inBattle
    self.eventId = message.eventId
    self.belongUid = message.belongUid
    self.actEndTime = message.actEndTime
    self.actStartTime = message.actStartTime
    self.bossOwnerUid = message.bossOwnerUid
    self.serverId = message.serverId
    self.targetServer = message.targetServer
    self.srcServer = message.srcServer
    self.fightMonster = message.fightMonster
    if self.type == NewMarchType.MONSTER or self.type == NewMarchType.BOSS or self.type == NewMarchType.ACT_BOSS
            or self.type == NewMarchType.PUZZLE_BOSS or self.type == NewMarchType.CHALLENGE_BOSS or self.type == NewMarchType.MONSTER_SIEGE
            or self.type == NewMarchType.ALLIANCE_BOSS then
        self.monsterId = message.monsterId
        self.refreshTime = message.refreshTime
    end
    if self.type == NewMarchType.CHALLENGE_BOSS then
        self.callHelp = message.callHelp
    end
    self.isBroken = message.isBroken
    self.allianceAbbr = message.allianceAbbr
    self.allianceName = message.allianceName
    self.allianceIcon = message.allianceIcon

    self.armyInfos = message.armyInfos
end

local function UpdateArmy(self,arr)
    if arr ==nil or table.count(arr) <=0 then
        return
    end
    self.armyInfos = {}
    for k,v in pairs(arr) do
        local armyInfo = ArmyInfo.New()
        local armyUnit = PBController.ParsePb1(v, "protobuf.ArmyCombatUnit")
        armyInfo.health = armyUnit.simpleCombatUnit.health
        armyInfo.initHealth = armyUnit.simpleCombatUnit.initHealth
        armyInfo.uuid = armyUnit.simpleCombatUnit.uuid
        armyInfo:UpdateArmyList(armyUnit.armyInfo)
        table.insert(self.armyInfos,armyInfo)
    end
end
local function GetIsBroken(self)
    return self.isBroken
end
local function GetArmyInfo(self,uid)
    local armyData = nil
    for k,v in pairs(self.armyInfos) do
        if v.uuid == uid then
            armyData = v
        end
    end
    return armyData
end
local function GetFirstArmyInfo(self)
    local armyData = nil
    for k,v in pairs(self.armyInfos) do
        if v.uuid == self.uuid then
            armyData = v
        end
    end
    return armyData
end
local function GetSoliderNum(self)
    local num = 0
    for k,v in pairs(self.armyInfos) do
        for a,b in pairs(v.Soldiers) do
            num = num+(b.total-b.lost)
        end
    end
    return num
end
local function GetMarchTargetType(self)
    return self.target
end
local function GetHP(self)
    local hp = 0
    for k,v in pairs(self.armyInfos) do
        hp = hp+v.health
    end
    return hp
end
local function GetMaxHP(self)
    local maxHp = 0
    for k,v in pairs(self.armyInfos) do
        maxHp = maxHp+v.initHealth
    end
    return maxHp
end
local function GetMarchStatus(self)
    return self.status
end
local function GetMarchCurPos(self)
    local pos = SceneUtils.GetMarchCurPos(self)
    return pos
end
local function GetCurArmyWeight(self)
    local plunderRe = 0
    if self.plunderRes~=nil then
        local num =0
        local stringNum = string.split(self.plunderRes,";")
        if #stringNum>0 then
            for i =1 ,#stringNum do
                local item = stringNum[i]
                local arr = string.split(item,",")
                if #arr>0 then
                    local addNum = tonumber(arr[#arr])
                    if addNum~=nil then
                        num = num +addNum
                    end
                end
            end
        end
        plunderRe = num
    end
    return plunderRe
end
local function GetResourcePercent(self)
    local percent = 0
    local hasTimer = UITimeManager:GetInstance():GetServerTime() - self.startTime
    local curNum  =hasTimer*0.001*self.collectSpd
    local curWeight = MarchUtil.GetCurArmyWeight(self.plunderRes)
    if curWeight >0 then
        percent = (curNum+curWeight)/math.max(self.armyWeight,1)
    else
        
    end
end
local function IsMine(self)
    if self.ownerUid == LuaEntry.Player.uid then
        return true
    else
        return false
    end
end
local function HasFightMonster(self)
    return self.fightMonster
end

local function GetMarchType(self)
    return self.type
end
local function GetSkinId(self)
    if self.skinId > 0 then
        if self.skinExpireTime == 0 or self.skinExpireTime > UITimeManager:GetInstance():GetServerTime() then
            return self.skinId
        end
    end
    return 0
end
function WorldMarchData:IsMasstroops()
    return self.target == MarchTargetType.RALLY_FOR_BOSS or self.target == MarchTargetType.RALLY_FOR_BUILDING or self.target == MarchTargetType.RALLY_FOR_ALLIANCE_CITY or self.target == MarchTargetType.RALLY_FOR_CITY or self.target == MarchTargetType.RALLY_THRONE or self.target == MarchTargetType.RALLY_ASSISTANCE_THRONE
end
function WorldMarchData:GetTargetPos()
    if self.target == MarchTargetType.ATTACK_ARMY then
        local marchInfo = DataCenter.WorldMarchDataManager:GetMarch(self.targetUuid)
        if marchInfo ~=nil then
            local pos = SceneUtils.GetMarchCurPos(marchInfo)
            return pos
        end
    end
    return SceneUtils.TileIndexToWorld(self.targetPos, ForceChangeScene.World)
end
function WorldMarchData:IsVisibleMarch()
    local curServerId = LuaEntry.Player:GetCurServerId()
    if self.serverId > 0 and curServerId > 0 and curServerId ~= self.serverId then
        return false
    end
    if self.worldId ~= LuaEntry.Player:GetCurWorldId() then
        return false
    end
    local status = self:GetMarchStatus()
    return (status ~= MarchStatus.IN_TEAM
            and status ~= MarchStatus.WAIT_RALLY
            and status ~= MarchStatus.COLLECTING
            and status ~= MarchStatus.ASSISTANCE
            and status ~= MarchStatus.IN_WORM_HOLE
            and status ~= MarchStatus.BUILD_WORM_HOLE
            and status ~= MarchStatus.CROSS_SERVER
            and status ~= MarchStatus.COLLECTING_ASSISTANCE
            and status ~= MarchStatus.BUILD_ALLIANCE_BUILDING)
end
WorldMarchData.__init = __init
WorldMarchData.__delete = __delete
WorldMarchData.UpdateWorldMarch = UpdateWorldMarch
WorldMarchData.UpdateArmy = UpdateArmy
WorldMarchData.GetIsBroken =GetIsBroken
WorldMarchData.GetArmyInfo =GetArmyInfo
WorldMarchData.GetFirstArmyInfo =GetFirstArmyInfo
WorldMarchData.GetSoliderNum =GetSoliderNum
WorldMarchData.GetMarchTargetType =GetMarchTargetType
WorldMarchData.GetHP =GetHP
WorldMarchData.GetMaxHP =GetMaxHP
WorldMarchData.GetMarchStatus=GetMarchStatus
WorldMarchData.GetMarchCurPos = GetMarchCurPos
WorldMarchData.GetCurArmyWeight = GetCurArmyWeight
WorldMarchData.GetResourcePercent = GetResourcePercent
WorldMarchData.IsMine = IsMine
WorldMarchData.HasFightMonster = HasFightMonster
WorldMarchData.GetMarchType = GetMarchType
WorldMarchData.UpdateWorldMarchForCsharp = UpdateWorldMarchForCsharp
WorldMarchData.GetSkinId =GetSkinId
return WorldMarchData