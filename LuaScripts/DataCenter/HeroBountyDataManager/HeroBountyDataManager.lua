---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/7/13 19:03
---
local HeroBountyDataManager = BaseClass("HeroBountyDataManager");
local HeroBountyTaskData = require "DataCenter.HeroBountyDataManager.HeroBountyTaskData"

local function __init(self)
    self.taskList = {}
    self.oldHeroLevel = {}
    self.curTaskEndTime = 0
    self.timer = nil
    self.timeFinishFlag = false
    self.updateFlag = false
    self.hasFreeTask = false
    self.timer_action = function(temp)
        self:CheckAllQueueTimeFinish()
    end
    self.showUIAnim = true
    self:AddTimer()
end

local function __delete(self)
    self.taskList = nil
    self.oldHeroLevel = nil
    self.timer_action = nil
    self.curTaskEndTime = nil
    self.timeFinishFlag = nil
    self.updateFlag = nil
    self.showUIAnim = nil
    self:DeleteTimer()
end
local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action, self, false,false,false)
    end

    self.timer:Start()
end
local function RefreshTaskEndTime(self)
    self.curTaskEndTime = 0
    self.timeFinishFlag = false
    self.updateFlag = true
    self.hasFreeTask = false
    for k,v in pairs(self.taskList) do
        if v.endTime>0 then
            if self.curTaskEndTime>0 then
                if self.curTaskEndTime>v.endTime then
                    self.curTaskEndTime = v.endTime
                end
            else
                self.curTaskEndTime = v.endTime  
            end
        else
            self.hasFreeTask = true
        end
    end
    if self.curTaskEndTime>0 then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if curTime>self.curTaskEndTime then
            self.timeFinishFlag = true
            self.updateFlag = false
        end
    else
        self.updateFlag = false
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshHeroBountyBubble)
end

local function GetShowUIAnim(self)
    return self.showUIAnim
end
local function SetShowUIAnim(self,value)
    self.showUIAnim  = value
end
local function CheckAllQueueTimeFinish(self)
    if self.updateFlag == true then
        if self.curTaskEndTime>0 then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if curTime>self.curTaskEndTime then
                self.timeFinishFlag = true
                self.updateFlag = false
                EventManager:GetInstance():Broadcast(EventId.RefreshHeroBountyBubble)
            end
        end
    end
end

local function GetIsShowBubble(self)
    if self.hasFreeTask==true or self.timeFinishFlag == true then
        return true
    else
        return false
    end
end

local function GetIsTaskFinish(self)
    return self.timeFinishFlag
end
local function UpdateAllData(self,message)
    self.taskList = {}
    if message["tasks"]~=nil then
        local arr = message["tasks"]
        for k,v in pairs(arr) do
            local oneData = HeroBountyTaskData.New()
            oneData:ParseData(v)
            if oneData.index~=0 then
                self.taskList[oneData.index] = oneData
            end
        end
    end
    self:RefreshTaskEndTime()
    EventManager:GetInstance():Broadcast(EventId.OnHeroBountyTaskRefresh)
end

local function RefreshOneTaskData(self,message)
    local index = 0
    if message["index"]~=nil then
        index = message["index"]
        self.taskList[message["index"]] = nil
    end
    if message["newTask"]~=nil then
        local oneData = HeroBountyTaskData.New()
        oneData:ParseData(message["newTask"])
        if oneData.index~=0 then
            self.taskList[oneData.index] = oneData
        end
    end
    if message["gold"] ~= nil then
        LuaEntry.Player.gold = message["gold"]
        EventManager:GetInstance():Broadcast(EventId.UpdateGold)
    end
    if index~=0 then
        EventManager:GetInstance():Broadcast(EventId.OnHeroBountyOneTaskRefresh,index)
    end
    self:RefreshTaskEndTime()
end
local function SendReceiveMessage(self,index)
    self.oldHeroLevel[index] = {}
    local task = self:GetTaskDataByIndex(index)
    if task~=nil then
        local hero = task.heroInfos
        if hero~=nil then
            for k,v in pairs(hero) do
                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                if heroData~=nil then
                    self.oldHeroLevel[index][k] = heroData.level
                end
            end
        end
    end
    SFSNetwork.SendMessage(MsgDefines.ReceiveHeroBountyTaskReward,index)
end
local function OnRewardReceive(self,message)
    local index = 0
    if message["index"]~=nil then
        index = message["index"]
        self.taskList[message["index"]] = nil
    end
    if message["newTask"]~=nil then
        local oneData = HeroBountyTaskData.New()
        oneData:ParseData(message["newTask"])
        if oneData.index~=0 then
            self.taskList[oneData.index] = oneData
        end
    end
    if message["reward"]~=nil then
        if message["heroExpReward"] ~= nil then
            -- 英雄经验奖励
            local reportReward = PBController.ParsePb1(message["heroExpReward"], "protobuf.ReportReward")
            local exps = reportReward["rewardHeroExps"]
            if self.oldHeroLevel[index]~=nil then
                local oldData = self.oldHeroLevel[index]
                for k,v in pairs(exps) do
                    local uuid = v["heroUuid"]
                    if oldData[uuid]~=nil then
                        v["oldLevel"] = oldData[uuid]
                    else
                        v["oldLevel"] = 0
                    end
                end
                self.oldHeroLevel[index] = {}
            end
            DataCenter.RewardManager:ShowCommonReward(message,CS.GameEntry.Localization:GetString("132234"),nil,exps)
        else
            DataCenter.RewardManager:ShowCommonReward(message,nil,nil)
        end
        
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    if index~=0 then
        EventManager:GetInstance():Broadcast(EventId.OnHeroBountyOneTaskRefresh,index)
    end
    self:RefreshTaskEndTime()
end

local function OnStartTaskReceive(self,message)
    if message["task"]~=nil then
        local oneData = HeroBountyTaskData.New()
        oneData:ParseData(message["task"])
        if oneData.index~=0 then
            self.taskList[oneData.index] = oneData
            EventManager:GetInstance():Broadcast(EventId.OnHeroBountyOneTaskRefresh,oneData.index)
        end
    end
    self:RefreshTaskEndTime()
end
local function GetTaskDataByIndex(self,index)
    return self.taskList[index]
end

local function GetSlotDataByBuildData(self)
    local list = table.keys(self.taskList)
    --local level = 1
    --local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_HERO_BOUNTY)
    --if buildData~=nil then
    --    level = buildData.level
    --end
    --local buildLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(BuildingTypes.FUN_BUILD_HERO_BOUNTY,level)
    --if buildLevelTemplate~=nil then
    --    local para1 = buildLevelTemplate.para1
    --    list = string.split(para1,";")
    --end
    return list
end

local function GetNextLevelBuildUnlockMsg(self)
    local level = 1
    local list = {}
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_HERO_BOUNTY)
    if buildData~=nil then
        level = buildData.level
    end
    local buildLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(BuildingTypes.FUN_BUILD_HERO_BOUNTY,level)
    if buildLevelTemplate~=nil then
        local para2 = buildLevelTemplate.para2
        list = string.split(para2,";")
    end
    return list
end

local function GetHeroIsInTaskByUuid(self,uuid)
    for k, v in pairs(self.taskList) do
        if v.heroInfos~=nil and v.heroInfos[uuid]~=nil then
            return true
        end
    end
    return false
end
HeroBountyDataManager.__init = __init
HeroBountyDataManager.__delete = __delete
HeroBountyDataManager.GetTaskDataByIndex = GetTaskDataByIndex
HeroBountyDataManager.OnStartTaskReceive = OnStartTaskReceive
HeroBountyDataManager.OnRewardReceive = OnRewardReceive
HeroBountyDataManager.UpdateAllData = UpdateAllData
HeroBountyDataManager.GetSlotDataByBuildData = GetSlotDataByBuildData
HeroBountyDataManager.GetNextLevelBuildUnlockMsg = GetNextLevelBuildUnlockMsg
HeroBountyDataManager.GetHeroIsInTaskByUuid = GetHeroIsInTaskByUuid
HeroBountyDataManager.SendReceiveMessage = SendReceiveMessage
HeroBountyDataManager.RefreshOneTaskData = RefreshOneTaskData
HeroBountyDataManager.DeleteTimer = DeleteTimer
HeroBountyDataManager.AddTimer = AddTimer
HeroBountyDataManager.CheckAllQueueTimeFinish = CheckAllQueueTimeFinish
HeroBountyDataManager.GetIsShowBubble = GetIsShowBubble
HeroBountyDataManager.GetIsTaskFinish = GetIsTaskFinish
HeroBountyDataManager.RefreshTaskEndTime = RefreshTaskEndTime
HeroBountyDataManager.GetShowUIAnim = GetShowUIAnim
HeroBountyDataManager.SetShowUIAnim = SetShowUIAnim
return HeroBountyDataManager