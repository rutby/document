---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/10 11:37
---
local LuckyShopManager = BaseClass("LuckyShopManager")
local LuckyShopData = require("DataCenter.LuckyShopManager.LuckyShopData")
local auto_refresh_time_gap = 30000

local function __init(self)
    self.shopInfo = nil
    self.lastAutoRefreshTime = 0
    self.timer_action = function(temp)
        self:TimerUpdate()
    end
    self:AddListener()
end

local function __delete(self)
    self.shopInfo = nil
    self.lastAutoRefreshTime = 0
    self:RemoveListener()
end

local function StartUp(self)

end

local function AddListener(self)

end

local function RemoveListener(self)

end

local function GetShopInfo(self)
    return self.shopInfo
end

local function GetShopInfoData(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.GetDiscountShopInfo, activityId)
end

local function GetShopInfoHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        self:AddOneShopInfo(message)
        EventManager:GetInstance():Broadcast(EventId.LuckShopDataUpdate)
    end
end

local function AddOneShopInfo(self, para)
    if self.shopInfo == nil then
        self.shopInfo = LuckyShopData.New()
    end
    self.shopInfo:ParseData(para)
    if self.shopInfo.shopArr ~= nil and table.count(self.shopInfo.shopArr) > 0 then
        self:AddRefreshTimer()
    else
        self:RemoveRefreshTimer()
    end
end

local function RefreshShop(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.RefreshDisCountShop, activityId)
end

local function RefreshShopHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        self:AddOneShopInfo(message)
        UIUtil.ShowTipsId(372335)
        EventManager:GetInstance():Broadcast(EventId.LuckShopDataUpdate)
        EventManager:GetInstance():Broadcast(EventId.LuckShopRefresh)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
end

local function BuyItem(self, activityId, id)
    SFSNetwork.SendMessage(MsgDefines.BuyInDiscountShop, activityId, id)
end

local function BuyItemHandler(self, message)
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
    else
        if self.shopInfo == nil then
            return
        end
        self.shopInfo:SetItemBuy(message["id"])
        if message["gold"] then
            LuaEntry.Player.gold = message["gold"]
            EventManager:GetInstance():Broadcast(EventId.UpdateGold)
        end

        local itemId, itemCount = self.shopInfo:GetBuyItemForReward(message["id"])
        if itemId ~= nil then
            local tempMsg = {}
            tempMsg.reward = {}
            local tempReward =
            {
                type = RewardType.GOODS,
                value = {
                    itemId = itemId,
                    rewardAdd = itemCount,
                }
            }
            table.insert(tempMsg.reward, tempReward)
            DataCenter.RewardManager:ShowCommonReward(tempMsg)
        end

        EventManager:GetInstance():Broadcast(EventId.LuckShopDataUpdate)
    end
end

local function IsAllItemBuy(self)
    if self.shopInfo == nil then
        return true
    end
    return self.shopInfo:IsAllItemBuy()
end

local function NeedShowNew(self)
    if self.shopInfo == nil then
        return false
    end
    
    return self:CheckIfIsNew()
end

local function CheckIfIsNew(self)
    local key = "LuckyShopFirstOpen_" .. LuaEntry.Player.uid
    local isFirstOpen = CS.GameEntry.Setting:GetBool(key, true)
    return isFirstOpen
end

local function SetIsNew(self)
    local key = "LuckyShopFirstOpen_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetBool(key, false)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function GetRedPotCount(self)
    if self.shopInfo == nil then
        return 0
    end
    if self.shopInfo.shopArr == nil or table.count(self.shopInfo.shopArr) > 0 then
        return 0
    end
    local count = DataCenter.ItemData:GetItemCount(self.shopInfo.refreshGoodsId)
    if count == 0 then
        return 0
    end
    return 1
end

local function AddRefreshTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end
    self.timer:Start()
end

local function RemoveRefreshTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function TimerUpdate(self)
    if self.shopInfo == nil then
        return
    end
    if self.shopInfo.shopArr == nil or table.count(self.shopInfo.shopArr) == 0 then
        return
    end
    local now = UITimeManager:GetInstance():GetServerTime()
    if self.shopInfo.refreshTime < now and self.lastAutoRefreshTime + auto_refresh_time_gap < now then
        self.lastAutoRefreshTime = now
        local activity = self:GetActivity()
        if activity == nil then
            return
        end
        self:GetShopInfoData(toInt(activity.id))
    end
end

local function GetActivity(self)
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.LuckyShop)
    if #dataList <= 0 then
        return nil
    end

    return dataList[1]
end

LuckyShopManager.AddRefreshTimer = AddRefreshTimer
LuckyShopManager.RemoveRefreshTimer = RemoveRefreshTimer
LuckyShopManager.TimerUpdate = TimerUpdate
LuckyShopManager.__init = __init
LuckyShopManager.__delete = __delete
LuckyShopManager.StartUp = StartUp
LuckyShopManager.AddListener = AddListener
LuckyShopManager.RemoveListener = RemoveListener
LuckyShopManager.GetShopInfo = GetShopInfo
LuckyShopManager.GetShopInfoHandler = GetShopInfoHandler
LuckyShopManager.AddOneShopInfo = AddOneShopInfo
LuckyShopManager.RefreshShop = RefreshShop
LuckyShopManager.RefreshShopHandler = RefreshShopHandler
LuckyShopManager.BuyItem = BuyItem
LuckyShopManager.BuyItemHandler = BuyItemHandler
LuckyShopManager.GetShopInfoData = GetShopInfoData
LuckyShopManager.IsAllItemBuy = IsAllItemBuy
LuckyShopManager.NeedShowNew = NeedShowNew
LuckyShopManager.GetRedPotCount = GetRedPotCount
LuckyShopManager.CheckIfIsNew = CheckIfIsNew
LuckyShopManager.SetIsNew = SetIsNew
LuckyShopManager.GetActivity = GetActivity

return LuckyShopManager