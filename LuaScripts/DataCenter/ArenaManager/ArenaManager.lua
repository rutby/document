---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/6/7 15:30
---ArenaManager


local ArenaManager = BaseClass("ArenaManager")

local function __init(self)
    self.roundStartTime = 0
    self.roundEndTime = 0
    self.selfInfo = {
        selfRank = -1,
        selfScore = 0,
        selfPower = 0,
        fightTimes = 0,
        buyTimes = 0,
    }
    self.defenseArmy = {}
    self.rankList = {}
    self.challengeList = {}
    self.historyList = {}
    self.ticketPriceTb = nil
    self.cacheTargetInfo = nil--开始战斗前缓存下敌方信息
    self.cacheWinReward = nil
    self.oldRank = 0
    self.oldScore = 0
    self.lastDefendTime = 0
    self.robotPower = nil

    local defaultScore = LuaEntry.DataConfig:TryGetNum("arena", "k1")
    self.selfInfo.selfScore = defaultScore
    
    self.openHistoryTime = nil--用于历史记录红点
    self.defenseTeamUpdated = false
    self:AddListener()
end

local function __delete(self)
    if self.resetTimer then
        self.resetTimer:Stop()
        self.resetTimer = nil
    end
    self.roundStartTime = nil
    self.roundEndTime = nil
    self.selfInfo = nil
    self.defenseArmy = nil
    self.rankList = nil
    self.challengeList = nil
    self.historyList = nil
    self.cacheTargetInfo = nil
    self.cacheWinReward = nil
    self.openHistoryTime = nil
    self.lastDefendTime = nil
    self.defenseTeamUpdated = nil
    self.robotPower = nil
    self:RemoveListener()
end

local function AddListener(self)

    --EventManager:GetInstance():AddListener(EventId.GarbageCollectStart, self.RefreshAllExploringTime)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.GarbageCollectStart, self.RefreshAllExploringTime)
end

local function SendSetDefenseArmy(self, heroes, power)
    SFSNetwork.SendMessage(MsgDefines.SetArenaDefenseArmy, heroes, power)
end

local function InitRed(self)
    self:TryInitRobotPower()
    SFSNetwork.SendMessage(MsgDefines.GetArenaInfo, 0)
end

local function TryInitRobotPower(self)
    if self.robotPower and self.robotPower > 0 then
        return
    end
    local armyId = LuaEntry.DataConfig:TryGetStr("arena", "k12")
    local strPower = GetTableData(PveActorMgr:GetInstance():GetArmyXmlName(), armyId, "pve_power")
    local arrPower = string.split(strPower, "|")
    local total = 0
    for i, v in ipairs(arrPower) do
        if not string.IsNullOrEmpty(v) then
            total = total +tonumber(v)
        end
    end
    self.robotPower = total
end

local function UpdateBaseInfo(self, msg)
    if msg.startTime then
        self.roundStartTime = msg.startTime
    end
    if msg.endTime then
        self.roundEndTime = msg.endTime
    end
    if msg.rank then
        self.selfInfo.selfRank = msg.rank
    end
    if msg.score then
        self.selfInfo.selfScore = msg.score
    end
    if msg.fightTime then
        self.selfInfo.fightTimes = msg.fightTime
    end
    if msg.buyTime then
        self.selfInfo.buyTimes = msg.buyTime
    end
    if msg.army then
        self.defenseArmy = PBController.ParsePb1(msg.army, "protobuf.ArmyUnitInfo")
    end
    if msg.power then
        self.selfInfo.selfPower = msg.power
    end
    self:UpdateLastDefendTime(msg)
    if msg.rankArr then
        self.rankList = {}
        for i, v in ipairs(msg.rankArr) do
            local newData = ArenaRankData.New()
            newData:ParseData(v)
            table.insert(self.rankList, newData)
        end
    end
    if msg.targetArr then
        self.challengeList = {}
        for i, v in ipairs(msg.targetArr) do
            local newData = ArenaRankData.New()
            newData:ParseData(v)
            table.insert(self.challengeList, newData)
        end
        table.sort(self.challengeList, function(a, b)
            local aRank = (a.rank and a.rank > 0) and a.rank or 9999
            local bRank = (b.rank and b.rank > 0) and b.rank or 9999
            if aRank ~= bRank then
                return aRank < bRank
            else
                return false
            end
        end)
    end
    
    self:DelayInitDefenseArmy()
    
    self:TryUpdateDefenseArmy()
    
    EventManager:GetInstance():Broadcast(EventId.OnUpdateArenaBaseInfo)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function DelayInitDefenseArmy(self)
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    if self.roundEndTime > serverTime then
        local delayT = math.modf((self.roundEndTime - serverTime) / 1000)
        if self.resetTimer then
            self.resetTimer:Stop()
            self.resetTimer = nil
        end
        
        self.resetTimer = TimerManager:GetInstance():DelayInvoke(function()
            self.defenseArmy = {}
            self:TryInitDefenseArmy()
        end, delayT)
    end
end

local function TryInitDefenseArmy(self)
    if table.count(self.defenseArmy) == 0 then
        self:AutoInitFormationData()
    end
end

local function TryUpdateDefenseArmy(self)
    if not self.defenseTeamUpdated and table.count(self.defenseArmy) > 0 then
        TimerManager:GetInstance():DelayInvoke(function()
            self:AutoInitFormationData()
        end, 5)
    end
    self.defenseTeamUpdated = true
end

local function UpdateHistoryInfo(self, msg)
    if msg.recordArr then
        self.historyList = {}
        for i, v in ipairs(msg.recordArr) do
            local newData = ArenaRankData.New()
            newData:ParseData(v)
            table.insert(self.historyList, newData)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.OnUpdateArenaHistoryInfo)
end

local function UpdateLastDefendTime(self, t)
    if t.lastFightTime then
        self.lastDefendTime = t.lastFightTime
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function OnArenaBattleFinish(self, msg)
    if msg.rank then
        self.selfInfo.selfRank = msg.rank
    end
    if msg.score then
        self.selfInfo.selfScore = msg.score
    end
    if msg.fightTime then
        self.selfInfo.fightTimes = msg.fightTime
    end

    EventManager:GetInstance():Broadcast(EventId.OnArenaBattleFinish)
end

local function GetRankList(self)
    return self.rankList
end

local function GetRoundEndTime(self)
    return self.roundEndTime
end

local function GetSelfInfo(self)
    return self.selfInfo
end

local function AutoInitFormationData(self)
    local formationInfo = DataCenter.ArmyFormationDataManager:GetOneArmyInfoByIndex(1)
    local heroList = self:AutoAddHero(formationInfo)
    local tempHeroDic = {}
    for i, v in ipairs(heroList) do
        tempHeroDic[v.uuid] = v.index
    end
    local soldierDic = self:AutoAddSoldier(tempHeroDic, formationInfo)
    local totalPower = MarchUtil.GetFormationPower(tempHeroDic,soldierDic,1,MarchUtil.GetCampAddParam(tempHeroDic))
    SFSNetwork.SendMessage(MsgDefines.SetArenaDefenseArmy, heroList, totalPower)
end

local function AutoAddHero(self,formationInfo)
    local retHeroList = {}
    local maxHeroNum = MarchUtil.GetMaxHeroValueByFormationIndex(1)
    
    if table.count(self.defenseArmy) > 0 then
        if self.defenseArmy.heroes and #self.defenseArmy.heroes > 0 then
            for i, v in ipairs(self.defenseArmy.heroes) do
                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(v.heroUuid)
                if heroData and i <= maxHeroNum then
                    local hero = {}
                    hero.uuid = v.heroUuid
                    hero.index = i
                    table.insert(retHeroList, hero)
                end
            end
            return retHeroList--如果是更新英雄信息（且不需要自动补满），直接返回
        end
    end
    
    --如果是初始化阵容
    local allHeroes = DataCenter.HeroDataManager:GetAllHeroBySort()
    for i, v in ipairs(allHeroes) do
        if i <= maxHeroNum then
            local hero = {}
            hero.uuid = v.uuid
            hero.index = i
            table.insert(retHeroList, hero)
        end
    end
    return retHeroList
end

local function AutoAddSoldier(self, heroList, formationInfo)
    local freeSoldiers = DataCenter.ArmyFormationDataManager:GetArmyUnFormationList()
    --local maxNum = formationInfo.maxNum
    local maxNum = MarchUtil.GetMaxCanAddSoldierNum(heroList, formationInfo.index)
    local retSoldierList = {}

    local arrArmsConf = self:GetFillArmyConf()
    
    local perCount = math.modf(maxNum / #arrArmsConf)
    local leftNum = maxNum
    for i, v in ipairs(arrArmsConf) do
        if i == #arrArmsConf then
            retSoldierList[tonumber(v)] = leftNum
        else
            retSoldierList[tonumber(v)] = perCount
            leftNum = leftNum - perCount
        end
    end
    
    return retSoldierList
end

local function GetFillArmyConf(self)
    local serverTimeS = UITimeManager:GetInstance():GetServerSeconds()
    local todayZero = UITimeManager:GetInstance():GetTodayZeroServerTime(serverTimeS)
    local openServerDays = math.ceil((todayZero * 1000 - LuaEntry.Player.openServerTime) / (OneDayTime * 1000)) + 1

    local arrArmsConf = nil
    local conf = LuaEntry.DataConfig:TryGetStr("arena", "k19")
    if not string.IsNullOrEmpty(conf) then
        local daysConf = string.split(conf, "|")
        for i, v in ipairs(daysConf) do
            local dayConf = string.split(v, ";")
            local day = tonumber(dayConf[1])
            if openServerDays >= day  then
                arrArmsConf = string.split(dayConf[2], ",")
            end
        end
    end
    if not arrArmsConf then
        local armsConf = LuaEntry.DataConfig:TryGetStr("arena", "k10")
        arrArmsConf = string.split(armsConf, ";")
    end
    return arrArmsConf
end

local function CheckIfCanChallenge(self)
    if self:CheckIfIsSubmiting() then
        return false, 302236
    end

    local selfInfo = self.selfInfo
    local maxChallengeTimes = LuaEntry.DataConfig:TryGetNum("arena","k2")
    local remainTimes = maxChallengeTimes - selfInfo.fightTimes
    if remainTimes > 0 then
        return true
    else
        local good = DataCenter.ItemData:GetItemById(ArenaTicketId)
        local num = good and good.count or 0
        return num > 0
    end
    return false, 372273
end

--结算期
local function CheckIfIsSubmiting(self)
    if self.roundEndTime == 0 then
        return true
    end
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    if self.roundStartTime > serverTime or self.roundEndTime < serverTime then
        return true
    end
    local k11 = LuaEntry.DataConfig:TryGetNum("arena", "k11")
    local submitTime = self.roundEndTime - k11 * 1000
    if serverTime > submitTime then
        return true
    end
    return false
end

local function GetTicketPrice(self)
    local buyTimes = self.selfInfo.buyTimes
    if not self.ticketPriceTb then
        self:InitTicketPrice()
    end
    
    local price = 0
    if #self.ticketPriceTb > 0 then
        price = self.ticketPriceTb[1].price
        for i, v in ipairs(self.ticketPriceTb) do
            if buyTimes >= v.times then
                price = v.price
            else
                break
            end
        end
    end
    
    return price
end

local function InitTicketPrice(self)
    self.ticketPriceTb = {}
    local goodsConf = DataCenter.ItemTemplateManager:GetItemTemplate(ArenaTicketId)
    if goodsConf then
        local strConf = goodsConf.para
        local priceArr = string.split(strConf, "|")
        for i, v in ipairs(priceArr) do
            local kv = string.split(v, ";")
            if #kv == 2 then
                local times = tonumber(kv[1])
                local price = tonumber(kv[2])
                local tempPrice = {
                    times = times,
                    price = price
                }
                table.insert(self.ticketPriceTb, tempPrice)
            end
        end
        table.sort(self.ticketPriceTb, function(a, b)
            if a.times ~= b.times then
                return a.times < b.times
            else
                return false
            end
        end)
    end
end

local function GetChallengeTargetList(self)
    return self.challengeList
end

local function GetDefenseArmy(self)
    return self.defenseArmy
end

local function SetTargetEnemyInfo(self, rankInfo)
    self.cacheTargetInfo = rankInfo
end

local function GetTargetEnemyInfo(self)
    return self.cacheTargetInfo
end

local function SetTargetEnemyArmyData(self,message)
    if message == nil then
        return
    end
    local type = message["type"]
    local target = message["target"]
    if self.cacheTargetInfo~=nil then
        if self.cacheTargetInfo.type == type then
            if self.cacheTargetInfo.type == 0 then
                if target ~= self.cacheTargetInfo.armyId then
                    return
                end
            else
                if target~=self.cacheTargetInfo.uid then
                    return
                end
            end
            local armyStr = message["army"]
            if armyStr~=nil then
                local armytemp = PBController.ParsePb1(armyStr, "protobuf.ArmyUnitInfo")
                local heroes = armytemp.heroes
                local unitBuffs = armytemp.unitBuffs
                self.cacheTargetInfo.army.heroes = heroes
                self.cacheTargetInfo.army.unitBuffs = unitBuffs
                EventManager:GetInstance():Broadcast(EventId.ArenaCampEffectUpdate)
            end
        end
    end
end
local function GetHistoryList(self)
    return self.historyList or {}
end

local function CacheRankChange(self, newRank, newScore)
    self.oldRank = self.selfInfo.selfRank
    self.oldScore = self.selfInfo.selfScore
    
    self.selfInfo.selfRank = newRank or self.oldRank
    self.selfInfo.selfScore = newScore or self.oldScore
end

local function GetFightRankChange(self)
    local newRank = self.selfInfo.selfRank
    local oldRank = self.oldRank
    
    local newScore = self.selfInfo.selfScore
    local oldScore = self.oldScore
    
    return newRank, oldRank, newScore, oldScore
end

local function CacheUIName(self, uiname)
    self.cacheUIName = uiname
end

local function TryOpenCacheUI(self)
    if self.cacheUIName then
        UIManager:GetInstance():OpenWindow(self.cacheUIName,{anim= true,isBlur = true})
    end
end

local function CacheRewards(self, reward)
    self.cacheWinReward = reward
end

local function TryShowReward(self)
    if self.cacheWinReward then
        for k,v in pairs(self.cacheWinReward) do
            DataCenter.RewardManager:AddOneReward(v)
        end

        local msg = {}
        msg.reward = self.cacheWinReward
        DataCenter.RewardManager:ShowCommonReward(msg)

        self.cacheWinReward = nil
    end
end

local function GetCachedRewards(self)
    return self.cacheWinReward
end

local function GetArenaRedCount(self)
    local challengeRed = self:GetChallengeRedCount()
    --local historyRed = self:GetArenaHistoryRedCount()
    local setDefenseRed = self:GetSetDefenseRedCount()
    return challengeRed + setDefenseRed
end

local function GetChallengeRedCount(self)
    if self:CheckIfIsSubmiting() then
        return 0
    end
    
    local selfInfo = self.selfInfo
    local maxChallengeTimes = LuaEntry.DataConfig:TryGetNum("arena","k2")
    local remainTimes = maxChallengeTimes - selfInfo.fightTimes
    if remainTimes > 0 then
        return remainTimes
    else
        return 0
    end
end

local function GetArenaHistoryRedCount(self)
    if self:CheckIfIsSubmiting() then
        return 0
    end

    if not self.openHistoryTime then
        local strKey = "ArenaOpenHistoryTime_" .. LuaEntry.Player.uid
        self.openHistoryTime = CS.GameEntry.Setting:GetInt(strKey, 0)
    end

    local lastTimeS = math.modf(self.lastDefendTime / 1000)
    if self.openHistoryTime < lastTimeS then
        return 1
    else
        return 0
    end
end

local function SetOpenHistoryTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    self.openHistoryTime = math.modf(curTime / 1000)
    local strKey = "ArenaOpenHistoryTime_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetInt(strKey, self.openHistoryTime)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function GetSetDefenseRedCount(self)
    if self:CheckIfIsSubmiting() then
        return 0
    end
    local strKey = "ArenaDefenseTeam_" .. LuaEntry.Player.uid
    local ts = CS.GameEntry.Setting:GetInt(strKey, 0)
    if ts == math.modf(self.roundEndTime / 1000) then
        return 0
    else
        return 1
    end
end

local function SetDefenseRedTs(self)
    local strKey = "ArenaDefenseTeam_" .. LuaEntry.Player.uid
    CS.GameEntry.Setting:SetInt(strKey, math.modf(self.roundEndTime / 1000))
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function GetRobotPower(self)
    if not self.robotPower then
        self:TryInitRobotPower()
    end
    return self.robotPower
end


ArenaManager.__init = __init
ArenaManager.__delete = __delete
ArenaManager.AddListener = AddListener
ArenaManager.RemoveListener = RemoveListener

ArenaManager.SendSetDefenseArmy = SendSetDefenseArmy
ArenaManager.InitRed = InitRed
ArenaManager.UpdateBaseInfo = UpdateBaseInfo
ArenaManager.UpdateHistoryInfo = UpdateHistoryInfo
ArenaManager.TryInitDefenseArmy = TryInitDefenseArmy
ArenaManager.TryUpdateDefenseArmy = TryUpdateDefenseArmy
ArenaManager.GetRankList = GetRankList
ArenaManager.GetRoundEndTime = GetRoundEndTime
ArenaManager.GetSelfInfo = GetSelfInfo
ArenaManager.AutoInitFormationData = AutoInitFormationData
ArenaManager.AutoAddHero = AutoAddHero
ArenaManager.AutoAddSoldier = AutoAddSoldier
ArenaManager.GetFillArmyConf = GetFillArmyConf
ArenaManager.CheckIfIsSubmiting = CheckIfIsSubmiting
ArenaManager.GetTicketPrice = GetTicketPrice
ArenaManager.GetChallengeTargetList = GetChallengeTargetList
ArenaManager.InitTicketPrice = InitTicketPrice
ArenaManager.GetDefenseArmy = GetDefenseArmy
ArenaManager.SetTargetEnemyInfo = SetTargetEnemyInfo
ArenaManager.GetTargetEnemyInfo = GetTargetEnemyInfo
ArenaManager.CacheRewards = CacheRewards
ArenaManager.TryShowReward = TryShowReward
ArenaManager.OnArenaBattleFinish = OnArenaBattleFinish
ArenaManager.GetHistoryList = GetHistoryList
ArenaManager.GetArenaRedCount = GetArenaRedCount
ArenaManager.GetChallengeRedCount = GetChallengeRedCount
ArenaManager.GetArenaHistoryRedCount = GetArenaHistoryRedCount
ArenaManager.SetOpenHistoryTime = SetOpenHistoryTime
ArenaManager.GetSetDefenseRedCount = GetSetDefenseRedCount
ArenaManager.SetDefenseRedTs = SetDefenseRedTs
ArenaManager.CheckIfCanChallenge = CheckIfCanChallenge
ArenaManager.CacheRankChange = CacheRankChange
ArenaManager.GetFightRankChange = GetFightRankChange
ArenaManager.TryOpenCacheUI = TryOpenCacheUI
ArenaManager.CacheUIName = CacheUIName
ArenaManager.UpdateLastDefendTime = UpdateLastDefendTime
ArenaManager.TryInitRobotPower = TryInitRobotPower
ArenaManager.GetRobotPower = GetRobotPower
ArenaManager.DelayInitDefenseArmy = DelayInitDefenseArmy
ArenaManager.GetCachedRewards = GetCachedRewards
ArenaManager.SetTargetEnemyArmyData =SetTargetEnemyArmyData
return ArenaManager