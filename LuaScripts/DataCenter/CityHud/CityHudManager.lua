---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/13 18:21
---

local CityHudManager = BaseClass("CityHudManager")
local CityHudSceneManager = require "DataCenter.CityHud.CityHudSceneManager"
local Localization = CS.GameEntry.Localization

local function __init(self)
    self:AddListeners()
    
    self.visible = true
    self.nextUuid = 0
    self.lod = 1
    
    self.sceneCityHud = CityHudSceneManager.New()
    
    UIManager:GetInstance():OpenWindow(UIWindowNames.UICityHud)
    self.uiCityHud = UIManager:GetInstance():GetWindow(UIWindowNames.UICityHud).View

    self.timer = TimerManager:GetInstance():GetTimer(1, self.TimerAction, self, false, false, false)
    self.timer:Start()
end

local function __delete(self)
    self:RemoveListeners()

    self.sceneCityHud:Delete()
    self.sceneCityHud = nil
    
    UIManager:GetInstance():DestroyWindow(UIWindowNames.UICityHud)
    self.uiCityHud = nil

    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function AddListeners(self)
    EventManager:GetInstance():AddListener(EventId.WORLD_CAMERA_CHANGE_POINT, self.OnCameraChange)
    EventManager:GetInstance():AddListener(EventId.OnBeforeEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():AddListener(EventId.PveLevelBeforeEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():AddListener(EventId.PveLevelExit, self.OnPveLevelExit)
    EventManager:GetInstance():AddListener(EventId.BUILD_IN_VIEW, self.OnBuildInView)
    EventManager:GetInstance():AddListener(EventId.BUILD_OUT_VIEW, self.OnBuildOutView)
    EventManager:GetInstance():AddListener(EventId.BuildUpgradeStart, self.OnBuildUpgradeStart)
    EventManager:GetInstance():AddListener(EventId.BuildUpgradeFinish, self.OnBuildUpgradeFinish)
    EventManager:GetInstance():AddListener(EventId.ChangeCameraLod, self.OnChangeLod)
    EventManager:GetInstance():AddListener(EventId.TrainingArmy, self.OnTrainingArmy)
    EventManager:GetInstance():AddListener(EventId.QUEUE_TIME_END, self.OnQueueTimeEnd)
    EventManager:GetInstance():AddListener(EventId.AddSpeedSuccess, self.OnAddSpeedSuccess)
    EventManager:GetInstance():AddListener(EventId.OnScienceQueueResearch, self.OnScienceQueueResearch)
    EventManager:GetInstance():AddListener(EventId.VitaSetResidentWork, self.OnVitaSetResidentWork)
    EventManager:GetInstance():AddListener(EventId.VitaSetResidentWorkBatch, self.OnVitaSetResidentWorkBatch)
    EventManager:GetInstance():AddListener(EventId.FurnitureCreateObject, self.OnFurnitureCreateObject)
    EventManager:GetInstance():AddListener(EventId.HospitaiStart, self.HospitaiStartSignal)
    EventManager:GetInstance():AddListener(EventId.VitaDayNightChange, self.OnDayNightChange)
    EventManager:GetInstance():AddListener(EventId.CityZombieInvadeChange, self.OnZombieInvadeChange)
    EventManager:GetInstance():AddListener(EventId.EffectNumChange, self.OnEffectNumChange)
    EventManager:GetInstance():AddListener(EventId.BuildingStaminaChanged, self.OnBuildingStaminaChanged)
    EventManager:GetInstance():AddListener(EventId.OnWorldInputDragBegin, self.OnWorldInputDragBegin)
    EventManager:GetInstance():AddListener(EventId.OnWorldInputDragEnd, self.OnWorldInputDragEnd)
    EventManager:GetInstance():AddListener(EventId.ResourceUpdated, self.OnResourceUpdated)
    EventManager:GetInstance():AddListener(EventId.VitaDataUpdate, self.OnVitaDataUpdate)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.WORLD_CAMERA_CHANGE_POINT, self.OnCameraChange)
    EventManager:GetInstance():RemoveListener(EventId.OnBeforeEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelBeforeEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelExit, self.OnPveLevelExit)
    EventManager:GetInstance():RemoveListener(EventId.BUILD_IN_VIEW, self.OnBuildInView)
    EventManager:GetInstance():RemoveListener(EventId.BUILD_OUT_VIEW, self.OnBuildOutView)
    EventManager:GetInstance():RemoveListener(EventId.BuildUpgradeStart, self.OnBuildUpgradeStart)
    EventManager:GetInstance():RemoveListener(EventId.BuildUpgradeFinish, self.OnBuildUpgradeFinish)
    EventManager:GetInstance():RemoveListener(EventId.ChangeCameraLod, self.OnChangeLod)
    EventManager:GetInstance():RemoveListener(EventId.TrainingArmy, self.OnTrainingArmy)
    EventManager:GetInstance():RemoveListener(EventId.QUEUE_TIME_END, self.OnQueueTimeEnd)
    EventManager:GetInstance():RemoveListener(EventId.AddSpeedSuccess, self.OnAddSpeedSuccess)
    EventManager:GetInstance():RemoveListener(EventId.OnScienceQueueResearch, self.OnScienceQueueResearch)
    EventManager:GetInstance():RemoveListener(EventId.VitaSetResidentWork, self.OnVitaSetResidentWork)
    EventManager:GetInstance():RemoveListener(EventId.VitaSetResidentWorkBatch, self.OnVitaSetResidentWorkBatch)
    EventManager:GetInstance():RemoveListener(EventId.FurnitureCreateObject, self.OnFurnitureCreateObject)
    EventManager:GetInstance():RemoveListener(EventId.HospitaiStart, self.HospitaiStartSignal)
    EventManager:GetInstance():RemoveListener(EventId.VitaDayNightChange, self.OnDayNightChange)
    EventManager:GetInstance():RemoveListener(EventId.CityZombieInvadeChange, self.OnZombieInvadeChange)
    EventManager:GetInstance():RemoveListener(EventId.EffectNumChange, self.OnEffectNumChange)
    EventManager:GetInstance():RemoveListener(EventId.BuildingStaminaChanged, self.OnBuildingStaminaChanged)
    EventManager:GetInstance():RemoveListener(EventId.OnWorldInputDragBegin, self.OnWorldInputDragBegin)
    EventManager:GetInstance():RemoveListener(EventId.OnWorldInputDragEnd, self.OnWorldInputDragEnd)
    EventManager:GetInstance():RemoveListener(EventId.ResourceUpdated, self.OnResourceUpdated)
    EventManager:GetInstance():RemoveListener(EventId.VitaDataUpdate, self.OnVitaDataUpdate)
end

local function Startup(self)

end

local function TimerAction(self)
    self.uiCityHud:TimerAction()
    self.sceneCityHud:TimerAction()
end

local function RefreshAll(self)
    if not SceneUtils.GetIsInCity() then
        return
    end
    for _, bUuid in ipairs(DataCenter.BuildManager:GetAllBuildUuid()) do
        self:RefreshBuildingHudByUuid(bUuid)
        local furnitureInfoList = DataCenter.FurnitureManager:GetFurnitureListByBUuid(bUuid)
        for _, furnitureInfo in ipairs(furnitureInfoList) do
            self:RefreshFurnitureHudByUuid(furnitureInfo.uuid)
        end
    end
    local list = DataCenter.BuildCityBuildManager:GetCanCreateBuildIdList()
    if list~= nil then
        for k,v in ipairs(list) do
            local data = DataCenter.BuildCityBuildManager:GetCityBuildDataByBuildId(v)
            if data ~= nil then
                data:CheckShowCreateHudBubble()
            end
            
        end
    end
end

---
--- 建筑上的 HUD
---
local function RefreshBuildingHudByUuid(self, bUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(bUuid)
    if buildData then
        local buildId = buildData.itemId
        if buildId == BuildingTypes.FUN_BUILD_BELL then
            return
        end
        local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
        if buildTemplate == nil then
            Logger.LogError("CityHudManager buildTemplate = nil, buildId = " .. buildId)
            return
        end
        local buildLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, buildData.level)
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local curStamina = buildData:GetCurStamina()
        local maxStamina = buildData:GetMaxStamina()
        local showStamina = false
        showStamina = (curStamina < maxStamina and curTime - buildData.lastHurtTime <= CityResidentDefines.BuildingStaminaDuration * 1000)
        if showStamina then
            -- 耐久条
            local hudParam = {}
            hudParam.uuid = bUuid
            hudParam.pos = buildTemplate:GetPosition()
            hudParam.offset = Vector3.New(0, -49, 0)
            hudParam.type = CityHudType.BuildStamina
            hudParam.location = CityHudLocation.UI
            self:Create(hudParam)
        else
            self:Destroy(bUuid, CityHudType.BuildStamina)
        end
        if buildData.level > 0 then
            -- 等级条
            local hudParam = {}
            hudParam.uuid = bUuid
            hudParam.pos = buildTemplate:GetPosition()
            hudParam.offset = Vector3.New(0, 25, 0)
            hudParam.type = CityHudType.BuildLevel
            if buildTemplate:GetBuildMaxLevel() ~= 1 then
                hudParam.level = buildData.level
            end
            hudParam.buildId = buildId
            hudParam.text = Localization:GetString(GetTableData(DataCenter.BuildTemplateManager:GetTableName(), buildId + buildData.level,"name"))
            hudParam.location = CityHudLocation.UI
            self:Create(hudParam)
        else
            self:Destroy(bUuid, CityHudType.BuildLevel)
        end
        if not showStamina and buildData.updateTime > curTime then
            -- 升级时间条
            local hudParam = {}
            hudParam.uuid = bUuid
            hudParam.pos = buildTemplate:GetPosition()
            hudParam.type = CityHudType.BuildTime
            hudParam.offset = Vector3.New(0, -12, 0)
            hudParam.location = CityHudLocation.UI
            self:Create(hudParam)
        else
            self:Destroy(bUuid, CityHudType.BuildTime)
        end
        if buildData:IsRepairing() then
            -- 修复时间条
            local hudParam = {}
            hudParam.uuid = bUuid
            hudParam.pos = buildTemplate:GetPosition()
            hudParam.type = CityHudType.RepairTime
            hudParam.offset = Vector3.New(0, -52, 0)
            hudParam.location = CityHudLocation.UI
            self:Create(hudParam)
        else
            self:Destroy(bUuid, CityHudType.RepairTime)
        end
        if buildLevelTemplate:IsFurnitureBuild() and curTime > buildData.repairStartTime + (BuildRepairTime + 5) * 1000 then
            -- 修复气泡
            if not DataCenter.CityResidentManager:IsZombieInvade() and curStamina <= 0 then
                local hudParam = {}
                hudParam.uuid = bUuid
                hudParam.pos = buildTemplate:GetPosition()
                hudParam.offset = Vector3.New(0, 50, 0)
                hudParam.type = CityHudType.Repair
                hudParam.location = CityHudLocation.UI
                self:Create(hudParam)
            else
                self:Destroy(bUuid, CityHudType.Repair)
            end
        end
        --
        local queueType = DataCenter.ArmyManager:GetArmyQueueTypeByBuildId(buildId)
        if queueType ~= NewQueueType.Default then
            local queue = DataCenter.QueueDataManager:GetQueueByType(queueType)
            if queue ~= nil and not queue:IsEnd() then
                local armyId = ""
                local tempList = string.split(queue.itemId, ";")
                local count = 0
                if tempList ~= nil and #tempList > 3 then
                    --晋级
                    armyId = tempList[3]
                    count = tempList[4]
                elseif tempList ~= nil and #tempList > 1 then
                    --训练
                    armyId = tempList[1]
                    count = tempList[2]
                end
                local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(armyId)
                if template ~= nil then
                    local hudParam = {}
                    hudParam.uuid = bUuid
                    hudParam.pos = buildTemplate:GetPosition()
                    hudParam.offset = Vector3.New(0, -12, 0)
                    hudParam.type = CityHudType.IconAndSlider
                    hudParam.bg = nil
                    hudParam.icon = string.format(LoadPath.SoldierIcons, template.icon)
                    hudParam.endTime = queue.endTime
                    hudParam.startTime = queue.startTime
                    hudParam.iconScale = Vector3.New(0.2, 0.2, 0.2)
                    hudParam.location = CityHudLocation.UI
                    self:Create(hudParam)
                end
            else
                self:Destroy(bUuid, CityHudType.IconAndSlider)
            end
        end

        if buildId == BuildingTypes.FUN_BUILD_SCIENE then
            local queue = DataCenter.QueueDataManager:GetQueueByBuildUuidForScience(bUuid)
            if queue ~= nil and not queue:IsEnd() then
                local template = DataCenter.ScienceManager:GetSearchingScienceTemplate(queue.uuid)
                if template ~= nil then
                    -- 时间条
                    local hudParam = {}
                    hudParam.uuid = bUuid
                    hudParam.pos = buildTemplate:GetPosition()
                    hudParam.offset = Vector3.New(0, -12, 0)
                    hudParam.type = CityHudType.IconAndSlider
                    hudParam.bg = string.format(LoadPath.ScienceIcons, "science_icon_frame01")
                    hudParam.icon = string.format(LoadPath.ScienceIcons, template.icon)
                    hudParam.endTime = queue.endTime
                    hudParam.startTime = queue.startTime
                    hudParam.iconScale = Vector3.New(0.4, 0.4, 0.4)
                    hudParam.bgScale = Vector3.New(0.4, 0.4, 0.4)
                    hudParam.location = CityHudLocation.UI
                    self:Create(hudParam)
                end
            else
                self:Destroy(bUuid, CityHudType.IconAndSlider)
            end
        elseif buildId == BuildingTypes.FUN_BUILD_HOSPITAL then
            local queue = DataCenter.QueueDataManager:GetQueueByType(NewQueueType.Hospital)
            if queue ~= nil then
                local state = queue:GetQueueState()
                if state == NewQueueState.Work then
                    -- 时间条
                    local hudParam = {}
                    hudParam.uuid = bUuid
                    hudParam.pos = buildTemplate:GetPosition()
                    hudParam.offset = Vector3.New(0, -12, 0)
                    hudParam.type = CityHudType.IconAndSlider
                    hudParam.bg = nil
                    hudParam.icon = string.format(LoadPath.UIMain, "mainUI_xiao_zhiliao")
                    hudParam.endTime = queue.endTime
                    hudParam.startTime = queue.startTime
                    hudParam.iconScale = Vector3.New(1, 1, 1)
                    hudParam.location = CityHudLocation.UI
                    self:Create(hudParam)
                else
                    self:Destroy(bUuid, CityHudType.IconAndSlider)
                end
            end
        end
        
    end
end

local function RefreshBuildingHudById(self, buildId)
    if not SceneUtils.GetIsInCity() then
        return
    end
    local buildDataList = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(buildId)
    for _, buildData in ipairs(buildDataList) do
        self:RefreshBuildingHudByUuid(buildData.uuid)
    end
end

---
--- 家具上的 HUD
---
local function RefreshFurnitureHudByUuid(self, fUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
    if furnitureInfo then
        local furnitureLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(furnitureInfo.fId, furnitureInfo.lv)
        if #DataCenter.VitaManager:GetResidentDataListByFurnitureUuid(fUuid) < furnitureLevelTemplate.need_worker then
            local hudParam = {}
            hudParam.uuid = fUuid
            hudParam.pos = DataCenter.FurnitureObjectManager:GetWorldPositionByFurnitureUuid(fUuid)
            hudParam.type = CityHudType.FurnitureNeedWorker
            hudParam.offset = Vector3.New(0, 45, 0)
            hudParam.updateEveryFrame = true
            hudParam.location = CityHudLocation.World
            self:Create(hudParam)
        else
            self:Destroy(fUuid, CityHudType.FurnitureNeedWorker)
        end
        if furnitureInfo.fId == FurnitureType.FoodWindow then
            local config = DataCenter.VitaManager:GetCurSelectFoodParam()
            local hudParam = {}
            hudParam.uuid = fUuid
            hudParam.pos = DataCenter.FurnitureObjectManager:GetWorldPositionByFurnitureUuid(fUuid)
            hudParam.type = CityHudType.IconAndText
            hudParam.icon = string.format(LoadPath.UIMain, config.icon)
            hudParam.text = string.GetFormattedStr(math.floor(LuaEntry.Resource:GetCntByResType(ResourceType.Meal))) ..
                "/" .. string.GetFormattedStr(math.floor(LuaEntry.Resource:GetMaxStorageByResType(ResourceType.Meal)))
            hudParam.offset = Vector3.New(10, 50, 0)
            hudParam.updateEveryFrame = true
            hudParam.location = CityHudLocation.World
            self:Create(hudParam)
        --elseif furnitureInfo.fId == FurnitureType.FoodCupboard then
        --    local hudParam = {}
        --    hudParam.uuid = fUuid
        --    hudParam.pos = DataCenter.FurnitureObjectManager:GetWorldPositionByFurnitureUuid(fUuid)
        --    hudParam.type = CityHudType.IconAndText
        --    hudParam.icon = string.format(LoadPath.CommonPath, "UIRes_icon_meat")
        --    hudParam.text = string.GetFormattedStr(math.floor(LuaEntry.Resource:GetCntByResType(ResourceType.Food)))
        --    hudParam.offset = Vector3.New(10, 50, 0)
        --    hudParam.updateEveryFrame = true
        --    hudParam.location = CityHudLocation.World
        --    self:Create(hudParam)
        end
        -- 在这里新增家具类型
    end
end

local function RefreshFurnitureHudById(self, furnitureId)
    if not SceneUtils.GetIsInCity() then
        return
    end
    local furnitureInfoList = DataCenter.FurnitureManager:GetFurnitureByFurnitureId(furnitureId)
    for _, furnitureInfo in ipairs(furnitureInfoList) do
        self:RefreshFurnitureHudByUuid(furnitureInfo.uuid)
    end
end

local function RefreshTimeByQueueType(self, queueType)
    if not SceneUtils.GetIsInCity() then
        return
    end
    local buildId = DataCenter.BuildManager:GetBuildIdByNewQueue(queueType)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(buildId)
    if buildData ~= nil then
        self:RefreshBuildingHudByUuid(buildData.uuid)
    end
end

local function Create(self, param)
    if param.uuid == nil then
        param.uuid = self:GetNextUuid()
    end
    if param.location == CityHudLocation.UI then
        return self.uiCityHud:Create(param)
    elseif param.location == CityHudLocation.World then
        return self.sceneCityHud:Create(param)
    end
end

-- type = nil 时删除该 uuid 的所有 hud
local function Destroy(self, uuid, type)
    if self.uiCityHud then
        self.uiCityHud:Destroy(uuid, type)
    end
    if self.sceneCityHud then
        self.sceneCityHud:Destroy(uuid, type)
    end
end

local function DestroyBuildingHudByUuid(self, bUuid)
    local furnitureInfoList = DataCenter.FurnitureManager:GetFurnitureListByBUuid(bUuid)
    for _, furnitureInfo in ipairs(furnitureInfoList) do
        self:Destroy(furnitureInfo.uuid)
    end
    self:Destroy(bUuid)
end

local function DestroyAll(self, excludeList)
    self.uiCityHud:DestroyAll(excludeList)
    self.sceneCityHud:DestroyAll(excludeList)
end

local function SetLod(self, lod)
    self.lod = lod
    if self.lod <=1 then--lod>1 树木没有摇摆效果
        CS.UnityEngine.Shader.EnableKeyword('_ENABLEWIND_ON')
    else
        CS.UnityEngine.Shader.DisableKeyword('_ENABLEWIND_ON')
    end
    self.uiCityHud:SetLod(lod)
    self.sceneCityHud:SetLod(lod)
end

local function SetVisible(self, visible)
    if self.visible == visible then
        return
    end
    self.visible = visible
    
    self.uiCityHud:SetVisible(visible)
    self.sceneCityHud:SetVisible(visible)
end

local function GetHudItem(self, uuid, type)
    return self.uiCityHud:GetHudItem(uuid, type) or self.sceneCityHud:GetHudItem(uuid, type)
end

local function GetHudItemByType(self, type)
    return self.uiCityHud:GetHudItemByType(type) or self.sceneCityHud:GetHudItemByType(type)
end

local function GetNextUuid(self)
    self.nextUuid = self.nextUuid - 1
    return self.nextUuid
end

local function OnCameraChange()
    DataCenter.CityHudManager.uiCityHud:OnCameraChange()
    DataCenter.CityHudManager.sceneCityHud:OnCameraChange()
end

local function OnEnterWorld()
    DataCenter.CityHudManager:DestroyAll()
    DataCenter.CityHudManager.uiCityHud.active = false
    DataCenter.CityHudManager.sceneCityHud.active = false
end

local function OnEnterCity()
    DataCenter.CityHudManager.uiCityHud.active = true
    DataCenter.CityHudManager.sceneCityHud.active = true
    DataCenter.CityHudManager:RefreshAll()
end

local function OnPveLevelEnter()
    DataCenter.CityHudManager:DestroyAll()
    DataCenter.CityHudManager.uiCityHud.active = false
    DataCenter.CityHudManager.sceneCityHud.active = false
end

local function OnPveLevelExit()
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager.uiCityHud.active = true
    DataCenter.CityHudManager.sceneCityHud.active = true
    DataCenter.CityHudManager:RefreshAll()
end

local function OnBuildInView(bUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshBuildingHudByUuid(bUuid)
end

local function OnBuildOutView(bUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:DestroyBuildingHudByUuid(bUuid)
end

local function OnBuildUpgradeStart(bUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshBuildingHudByUuid(bUuid)
end

local function OnBuildUpgradeFinish(bUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshBuildingHudByUuid(bUuid)
end

local function OnChangeLod(lod)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:SetLod(lod)
end

local function OnTrainingArmy(bUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshBuildingHudByUuid(bUuid)
end

local function OnQueueTimeEnd(queueType)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshTimeByQueueType(queueType)
end

local function OnAddSpeedSuccess(queueType)
    if not SceneUtils.GetIsInCity() then
        return
    end
    local buildId = DataCenter.BuildManager:GetBuildIdByNewQueue(queueType)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(buildId)
    if buildData ~= nil then
        DataCenter.CityHudManager:RefreshBuildingHudByUuid(buildData.uuid)
    end
end

local function OnScienceQueueResearch(bUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshBuildingHudByUuid(bUuid)
end

local function OnVitaSetResidentWork(uuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    local data = DataCenter.CityResidentManager:GetData(uuid)
    if data.residentData.fUuid ~= 0 then
        DataCenter.CityHudManager:RefreshFurnitureHudByUuid(data.residentData.fUuid)
    end
end

local function OnVitaSetResidentWorkBatch(uuids)
    if not SceneUtils.GetIsInCity() then
        return
    end
    for _, uuid in ipairs(uuids) do
        local data = DataCenter.CityResidentManager:GetData(uuid)
        if data.residentData.fUuid ~= 0 then
            DataCenter.CityHudManager:RefreshFurnitureHudByUuid(data.residentData.fUuid)
        end
    end
end

local function OnFurnitureCreateObject(fUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshFurnitureHudByUuid(fUuid)
end

local function OnDayNightChange()
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshAll()
end

local function OnZombieInvadeChange()
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshAll()
end

local function OnEffectNumChange()
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshFurnitureHudById(FurnitureType.FoodWindow)
end

local function OnBuildingStaminaChanged(bUuid)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshBuildingHudByUuid(bUuid)
end

local function OnWorldInputDragBegin(self)
    if not SceneUtils.GetIsInCity() then
        return
    end
    
    DataCenter.CityHudManager.uiCityHud:OnWorldInputDragBegin()
    DataCenter.CityHudManager.sceneCityHud:OnWorldInputDragBegin()
end

local function OnWorldInputDragEnd(self)
    if not SceneUtils.GetIsInCity() then
        return
    end

    DataCenter.CityHudManager.uiCityHud:OnWorldInputDragEnd()
    DataCenter.CityHudManager.sceneCityHud:OnWorldInputDragEnd()
end

local function OnResourceUpdated(self)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshFurnitureHudById(FurnitureType.FoodWindow)
end

local function OnVitaDataUpdate(self)
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshFurnitureHudById(FurnitureType.FoodWindow)
end

function CityHudManager:HospitaiStartSignal()
    if not SceneUtils.GetIsInCity() then
        return
    end
    DataCenter.CityHudManager:RefreshTimeByQueueType(NewQueueType.Hospital)
end

function CityHudManager:SetLayerVisible(layerName, visible)
    self.uiCityHud:SetLayerVisible(layerName, visible)
end

--引导timeline特殊相机
function CityHudManager:SetCamera(camera)
    self.uiCityHud:SetCamera(camera)
    self.sceneCityHud:SetCamera(camera)
end

CityHudManager.__init = __init
CityHudManager.__delete = __delete
CityHudManager.AddListeners = AddListeners
CityHudManager.RemoveListeners = RemoveListeners

CityHudManager.Startup = Startup
CityHudManager.TimerAction = TimerAction
CityHudManager.RefreshAll = RefreshAll
CityHudManager.RefreshBuildingHudByUuid = RefreshBuildingHudByUuid
CityHudManager.RefreshBuildingHudById = RefreshBuildingHudById
CityHudManager.RefreshFurnitureHudByUuid = RefreshFurnitureHudByUuid
CityHudManager.RefreshFurnitureHudById = RefreshFurnitureHudById
CityHudManager.RefreshTimeByQueueType = RefreshTimeByQueueType
CityHudManager.Create = Create
CityHudManager.Destroy = Destroy
CityHudManager.DestroyBuildingHudByUuid = DestroyBuildingHudByUuid
CityHudManager.DestroyAll = DestroyAll
CityHudManager.SetLod = SetLod
CityHudManager.SetVisible = SetVisible
CityHudManager.GetHudItem = GetHudItem
CityHudManager.GetHudItemByType = GetHudItemByType
CityHudManager.GetNextUuid = GetNextUuid

CityHudManager.OnCameraChange = OnCameraChange
CityHudManager.OnEnterWorld = OnEnterWorld
CityHudManager.OnEnterCity = OnEnterCity
CityHudManager.OnPveLevelEnter = OnPveLevelEnter
CityHudManager.OnPveLevelExit = OnPveLevelExit
CityHudManager.OnBuildInView = OnBuildInView
CityHudManager.OnBuildOutView = OnBuildOutView
CityHudManager.OnBuildUpgradeStart = OnBuildUpgradeStart
CityHudManager.OnBuildUpgradeFinish = OnBuildUpgradeFinish
CityHudManager.OnChangeLod = OnChangeLod
CityHudManager.OnTrainingArmy = OnTrainingArmy
CityHudManager.OnQueueTimeEnd = OnQueueTimeEnd
CityHudManager.OnAddSpeedSuccess = OnAddSpeedSuccess
CityHudManager.OnScienceQueueResearch = OnScienceQueueResearch
CityHudManager.OnVitaSetResidentWork = OnVitaSetResidentWork
CityHudManager.OnVitaSetResidentWorkBatch = OnVitaSetResidentWorkBatch
CityHudManager.OnFurnitureCreateObject = OnFurnitureCreateObject
CityHudManager.OnDayNightChange = OnDayNightChange
CityHudManager.OnZombieInvadeChange = OnZombieInvadeChange
CityHudManager.OnEffectNumChange = OnEffectNumChange
CityHudManager.OnBuildingStaminaChanged = OnBuildingStaminaChanged
CityHudManager.OnWorldInputDragBegin = OnWorldInputDragBegin
CityHudManager.OnWorldInputDragEnd = OnWorldInputDragEnd
CityHudManager.OnResourceUpdated = OnResourceUpdated
CityHudManager.OnVitaDataUpdate = OnVitaDataUpdate

return CityHudManager
