---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/1/30 11:09
---

local CityHudSceneManager = BaseClass("CityHudSceneManager")
local CityHudShell = require "DataCenter.CityHud.CityHudShell"
local Resource = CS.GameEntry.Resource

local function __init(self)
    self.active = true
    self.itemDict = {} -- Dict<uuid, Dict<type, item>>
    self.reqDict = {} -- Dict<uuid, Dict<type, req>>
    
    self.shellDict = {} -- Dict<uuid, Dict<type, shell>>
    self.shellReqDict = {} -- Dict<uuid, Dict<type, req>>

    if self.update == nil then
        self.update = function() self:OnUpdate() end
        UpdateManager:GetInstance():AddUpdate(self.update)
    end

    self.screenX = CS.UnityEngine.Screen.width
    self.screenY = CS.UnityEngine.Screen.height
end

local function __delete(self)
    self.active = false

    if self.update then
        UpdateManager:GetInstance():RemoveUpdate(self.update)
        self.update = nil
    end
end

local function TimerAction(self)
    for _, v in pairs(self.itemDict) do
        for _, item in pairs(v) do
            item:TimerAction()
        end
    end
end

local function GetHudItem(self, uuid, type)
    return self.itemDict[uuid] and self.itemDict[uuid][type]
end

local function GetHudItemByType(self, type)
    for _, v in pairs(self.itemDict) do
        for k, item in pairs(v) do
            if k == type then
                return item
            end
        end
    end
    return nil
end

local function GetCamera(self)
    if self.camera == nil then
        self.camera = CS.UnityEngine.Camera.main
    end
    return self.camera
end

local function SetLod(self, lod)
    if not self.active then
        return
    end
    for _, v in pairs(self.itemDict) do
        for _, item in pairs(v) do
            item:SetLod(lod)
        end
    end
end

local function SetVisible(self, visible)
    if not self.active then
        return
    end
    for _, dict in pairs(self.shellDict) do
        for _, shell in pairs(dict) do
            shell:SetActive(visible)
        end
    end
end

local function Create(self, param)
    if not self.active then
        return
    end
    local uuid = param.uuid
    local type = param.type
    if self.itemDict[uuid] and self.itemDict[uuid][type] then
        self.itemDict[uuid][type]:SetParam(param)
    else
        if self.shellReqDict[uuid] == nil then
            self.shellReqDict[uuid] = {}
        elseif self.shellReqDict[uuid][type] then
            self.shellReqDict[uuid][type]:Destroy()
        end
        
        param.prefab = string.format("Assets/Main/Prefab_Dir/UI/UICityHud/UICityHud%s.prefab", param.type)
        param.script = require(string.format("UI.UICityHud.Component.UICityHud%s", param.type))
        
        self.shellReqDict[uuid][type] = Resource:InstantiateAsync("Assets/Main/Prefab_Dir/Scene/CityHudShell.prefab")
        self.shellReqDict[uuid][type]:completed('+', function(shellReq)
            if self.shellDict[uuid] == nil then
                self.shellDict[uuid] = {}
            end
            
            local shellGo = shellReq.gameObject
            if param.unique then
                shellGo.name = "SceneCityHud" .. param.type
            else
                shellGo.name = "SceneCityHud" .. param.type .. "_" .. param.uuid
            end
            local shellTf = shellGo.transform
            shellTf:SetParent(CS.SceneManager.World.DynamicObjNode)
            shellTf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
            local shell = CityHudShell.New(shellGo)
            self.shellDict[uuid][type] = shell
            
            if self.reqDict[uuid] == nil then
                self.reqDict[uuid] = {}
            elseif self.reqDict[uuid][type] then
                self.reqDict[uuid][type]:Destroy()
            end
            
            self.reqDict[uuid][type] = Resource:InstantiateAsync(param.prefab)
            self.reqDict[uuid][type]:completed('+', function(req)
                if IsNull(shell.gameObject) then
                    req:Destroy()
                    self.reqDict[uuid][type] = nil
                    return
                end
                if self.itemDict[uuid] == nil then
                    self.itemDict[uuid] = {}
                end

                local go = req.gameObject
                if param.unique then
                    go.name = "UICityHud" .. param.type
                else
                    go.name = "UICityHud" .. param.type .. "_" .. param.uuid
                end
                local tf = go.transform
                tf:SetParent(shell.canvas.transform)
                tf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
                tf.localRotation = Quaternion.Euler(55, -10, 0)
                local item = shell:AddComponent(param.script, go)
                item:SetLod(DataCenter.CityHudManager.lod)
                item:SetParam(param)
                self.itemDict[uuid][type] = item
                self:UpdateItemPos(uuid, type)
            end)
        end)
    end
    return uuid
end

-- type = nil 时删除该 uuid 的所有 hud
local function Destroy(self, uuid, type)
    if not self.active then
        return
    end
    if type then
        -- item
        if self.itemDict[uuid] then
            local item = self.itemDict[uuid][type]
            if item then
                item:OnDestroy()
                self.itemDict[uuid][type] = nil
            end
            if next(self.itemDict[uuid]) == nil then
                self.itemDict[uuid] = nil
            end
        end
        if self.reqDict[uuid] then
            local req = self.reqDict[uuid][type]
            if req then
                req:Destroy()
                self.reqDict[uuid][type] = nil
            end
            if next(self.reqDict[uuid]) == nil then
                self.reqDict[uuid] = nil
            end
        end
        -- shell
        if self.shellDict[uuid] then
            if self.shellDict[uuid][type] ~= nil then
                self.shellDict[uuid][type]:OnDestroy()
            end
            self.shellDict[uuid][type] = nil
            if next(self.shellDict[uuid]) == nil then
                self.shellDict[uuid] = nil
            end
        end
        if self.shellReqDict[uuid] then
            local req = self.shellReqDict[uuid][type]
            if req then
                req:Destroy()
                self.shellReqDict[uuid][type] = nil
            end
            if next(self.shellReqDict[uuid]) == nil then
                self.shellReqDict[uuid] = nil
            end
        end
    else
        -- item
        if self.itemDict[uuid] then
            self.itemDict[uuid] = nil
        end
        if self.reqDict[uuid] then
            for _, req in pairs(self.reqDict[uuid]) do
                req:Destroy()
            end
            self.reqDict[uuid] = nil
        end
        -- shell
        if self.shellDict[uuid] then
            for _, shell in pairs(self.shellDict[uuid]) do
                shell:RemoveComponent()
            end
            self.shellDict[uuid] = nil
        end
        if self.shellReqDict[uuid] then
            for _, req in pairs(self.shellReqDict[uuid]) do
                req:Destroy()
            end
            self.shellReqDict[uuid] = nil
        end
    end
end

local function DestroyAll(self, excludeList)
    if not self.active then
        return
    end
    for uuid, _ in pairs(self.shellReqDict) do
        if excludeList == nil or (not excludeList[uuid]) then
            self:Destroy(uuid)
        end
    end
end

local function OnUpdate(self)
    -- 每帧
    if not self.active then
        return
    end
    for uuid, v in pairs(self.itemDict) do
        for type, item in pairs(v) do
            if item.param.updateEveryFrame then
                self:UpdateItemPos(uuid, type)
            end
        end
    end
end

local function UpdateItemPos(self, uuid, type)
    if self.itemDict[uuid] == nil then
        self.itemDict[uuid] = {}
    end
    local item = self.itemDict[uuid][type]
    if item then
        local worldPos = VecZero
        if item.param.pos then
            worldPos = item.param.pos
        elseif item.param.GetPos then
            worldPos = item.param.GetPos()
        end
        if item.param.worldOffset then
            worldPos = worldPos + item.param.worldOffset
        end
        if item.posCache ~= worldPos then
            local screenPos = self:GetCamera():WorldToScreenPoint(worldPos)
            if screenPos.x > -CityResidentDefines.HudPadding and
               screenPos.x < self.screenX + CityResidentDefines.HudPadding and
               screenPos.y > -CityResidentDefines.HudPadding and
               screenPos.y < self.screenY + CityResidentDefines.HudPadding
            then
                item:SetInView(true)
                item:SetPos(worldPos)
            else
                item:SetInView(false)
            end
        end
    end
end

local function OnCameraChange(self)
    if not self.active then
        return
    end
    for uuid, v in pairs(self.itemDict) do
        for type, _ in pairs(v) do
            self:UpdateItemPos(uuid, type)
        end
    end
end

local function OnWorldInputDragBegin(self)
    if not self.active then
        return
    end
    for _, v in pairs(self.itemDict) do
        for _, item in pairs(v) do
            item:OnWorldInputDragBegin()
        end
    end
end

local function OnWorldInputDragEnd(self)
    if not self.active then
        return
    end
    for _, v in pairs(self.itemDict) do
        for _, item in pairs(v) do
            item:OnWorldInputDragEnd()
        end
    end
end
--引导timeline特殊相机
function CityHudSceneManager:SetCamera(camera)
    self.camera = camera
end

CityHudSceneManager.__init = __init
CityHudSceneManager.__delete = __delete

CityHudSceneManager.TimerAction = TimerAction
CityHudSceneManager.GetHudItem = GetHudItem
CityHudSceneManager.GetHudItemByType = GetHudItemByType
CityHudSceneManager.GetCamera = GetCamera
CityHudSceneManager.SetLod = SetLod
CityHudSceneManager.SetVisible = SetVisible
CityHudSceneManager.Create = Create
CityHudSceneManager.Destroy = Destroy
CityHudSceneManager.DestroyAll = DestroyAll
CityHudSceneManager.OnUpdate = OnUpdate
CityHudSceneManager.UpdateItemPos = UpdateItemPos
CityHudSceneManager.OnCameraChange = OnCameraChange
CityHudSceneManager.OnWorldInputDragBegin = OnWorldInputDragBegin
CityHudSceneManager.OnWorldInputDragEnd = OnWorldInputDragEnd

return CityHudSceneManager
