---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/27 20:06
---

local CityResidentMovieManager = BaseClass("CityResidentMovieManager")

local CamPos = Vector3.New(0, 0, 0) -- cache

local function __init(self)
    self.cookFinishFlag = false
    self.waitAttackZombieList = {}--引导等待被干掉的两个僵尸
end

local function Play(self, movie, callback1, callback2)
    Logger.Log("CityResident Play Movie: " .. movie)
    DataCenter.CityResidentManager:SetMoverUpdateInterval(CityResidentDefines.UpdateIntervalHigh)
    local function CallBackInternal(callback)
        DataCenter.CityResidentManager:SetMoverUpdateInterval(CityResidentDefines.UpdateIntervalLow)
        if callback1 then
            callback1()
        end
    end
    if movie == CityResidentDefines.Movie.Begin then
        self:Begin(CallBackInternal)
    elseif movie == CityResidentDefines.Movie.ZombieEscape then
        self:ZombieEscape(CallBackInternal)
    elseif movie == CityResidentDefines.Movie.ReleaseResident then
        self:ReleaseResident(CallBackInternal)
    elseif movie == CityResidentDefines.Movie.SawyerWork then
        self:SawyerWork(CallBackInternal)
    elseif movie == CityResidentDefines.Movie.ChefWork then
        self:ChefWork(CallBackInternal, callback2)
    elseif movie == CityResidentDefines.Movie.ResidentEat then
        self:ResidentEat(CallBackInternal)
    elseif movie == CityResidentDefines.Movie.ResidentHide then
        self:ResidentHide(CallBackInternal)
    elseif movie == CityResidentDefines.Movie.ZombieCome then
        self:ZombieCome(CallBackInternal)
    elseif movie == CityResidentDefines.Movie.HeroAttack then
        self:HeroAttack(CallBackInternal)
    elseif movie == CityResidentDefines.Movie.ResidentCome then
        self:ResidentCome(CallBackInternal)
    end
end

local function CameraFollow(self, data, zoom)
    CS.SceneManager.World:AutoLookat(data:GetPos(), zoom, 0.1)
end

local function Log(self, msg, isError)
    local str = "CityResidentMovie Log: " .. msg
    if isError then
        Logger.LogError(str)
    else
        Logger.Log(str)
    end
    --local curTime = UITimeManager:GetInstance():GetServerSeconds()
    --CommonUtil.SendErrorMessageToServer(curTime, curTime, str)
end

local function Begin(self, callback)
    local callbackInvoked = false
    local maxTime = 10.5
    TimerManager:GetInstance():DelayInvoke(function()
        if not callbackInvoked and callback then
            callbackInvoked = true
            callback()
        end
    end, maxTime)
    
    local mainBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    local mainPos = mainBuildData:GetCenterVec()
    
    local tempFallOff = CS.SceneManager.World:GetUSkyLightingPointDistanceFalloff()
    CS.SceneManager.World:SetUSkyLightingPointDistanceFalloff(1)
    
    -- 小人
    local fromPoses =
    {
        Vector3.New(100.84, 0, 89.02),
        Vector3.New(100.61, 0, 88.57),
        Vector3.New(101.29, 0, 88.11),
        Vector3.New(100.81, 0, 87.57),
    }
    local toPoses =
    {
        Vector3.New(101.256, 0, 99.502),
        Vector3.New(101.949, 0, 99.828),
        Vector3.New(99.749, 0, 100.501),
        Vector3.New(100.207, 0, 99.77),
    }
    
    for i = 1, 4 do
        local data = DataCenter.CityResidentManager:GetDataByIndex(CityResidentDefines.Type.Resident, i)
        local pos = fromPoses[i]
        data:SetGuideControl(true)
        data:SetSpeed(DataCenter.CityResidentManager:GetResidentRunSpeed() * 2)
        data:SetPos(pos)
        data:LookAt(mainPos)
        data:SetAutoAnim(false)
        data:GoToCityPos(toPoses[i])
        if i == 1 then
            data:ShowTool("HandHuoba")
            data:PlayAnim(CityResidentDefines.AnimName.TorchWalk)
            data.onUpdate = function()
                self:CameraFollow(data, 14)
            end
            data.onFinish = function()
                data:ShowTool("")
                data:PlayAnim(CityResidentDefines.AnimName.Idle)
                data.onUpdate = nil
                data.onFinish = nil
                CS.SceneManager.World:SetUSkyLightingPointDistanceFalloff(tempFallOff)
                if not callbackInvoked and callback then
                    callbackInvoked = true
                    callback()
                end
            end
        else
            data:ShowTool("")
            data:PlayAnim(CityResidentDefines.AnimName.Run)
            data.onFinish = function()
                data.onFinish = nil
                data:PlayAnim(CityResidentDefines.AnimName.Idle)
            end
        end
    end

    -- 僵尸
    local zombieCount = 9
    local zombiePoses =
    {
        Vector3.New(99.94, 0, 90.6),
        Vector3.New(102, 0, 90.84),
        Vector3.New(99.56, 0, 86.38),
        Vector3.New(102.13, 0, 97),
        Vector3.New(94.38, 0, 88.33),
        Vector3.New(98.82, 0, 97.31),
        Vector3.New(98.77, 0, 103.57),
        Vector3.New(103.03, 0, 103.5),
        Vector3.New(98.3, 0, 96.82),
    }
    for i = 1, zombieCount do
        local uuid = DataCenter.CityResidentManager:GetNextZombieUuid()
        DataCenter.CityResidentManager:AddData(uuid, CityResidentDefines.Type.Zombie, nil, function()
            local data = DataCenter.CityResidentManager:GetData(uuid)
            local pos = zombiePoses[i]
            local dir = Vector3.Normalize(mainPos - pos)
            local toPos = mainPos - dir * math.random(3, 4)
            data:SetGuideControl(true)
            data:SetSpeed(DataCenter.CityResidentManager:GetZombieWalkSpeed())
            data:PlayAnim(CityResidentDefines.AnimName.Walk1)
            data:SetPos(pos)
            data:GoToPosDirectly(toPos)
            data.onFinish = function()
                data:Idle()
                data:PlayAnim(CityResidentDefines.AnimName.Idle)
                data.onFinish = nil
            end
        end)
    end
end

local function ZombieEscape(self, callback)
    local mainBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    local mainPos = mainBuildData:GetCenterVec()
    
    for _, data in pairs(DataCenter.CityResidentManager.dataDict) do
        if data.type == CityResidentDefines.Type.Zombie then
            local dir = Vector3.Normalize(data:GetPos() - mainPos)
            local pos = data:GetPos() + dir * 20
            data:SetGuideControl(true)
            data:SetSpeed(DataCenter.CityResidentManager:GetZombieRetreatSpeed())
            data:PlayAnim(CityResidentDefines.AnimName.Walk1)
            data:GoToPosDirectly(pos)
            data.onFinish = function()
                data.onFinish = nil
                DataCenter.CityResidentManager:RemoveData(data.uuid)
            end
        end
    end

    if callback then
        callback()
    end
end

local function ReleaseResident(self, callback)
    for _, data in pairs(DataCenter.CityResidentManager.dataDict) do
        if data.type == CityResidentDefines.Type.Resident or data.type == CityResidentDefines.Type.Hero then
            data:SetGuideControl(false)
        end
        data.onUpdate = nil
        DataCenter.CityHudManager:Destroy(data.uuid, CityHudType.Emoji)
    end

    if callback then
        callback()
    end
end

local function SawyerWork(self, callback)
    local callbackInvoked = false
    local maxTime = 7.5
    TimerManager:GetInstance():DelayInvoke(function()
        if not callbackInvoked and callback then
            callbackInvoked = true
            callback()
        end
    end, maxTime)
    
    local poses =
    {
        [1] = Vector3.New(96.113, 0, 97.318),
        [2] = Vector3.New(95.457, 0, 96.816),
    }
    local rots =
    {
        [1] = Quaternion.Euler(0, 315, 0),
        [2] = Quaternion.Euler(0, 311, 0),
    }
    local dataList = DataCenter.CityResidentManager:GetDataListByCareer(CityResidentDefines.Career.Sawyer)
    local count = 0
    for i, data in ipairs(dataList) do
        data:SetGuideControl(true)
        local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(data.residentData.fUuid)
        data:SetSpeed(DataCenter.CityResidentManager:GetResidentRunSpeed() * 2)
        data:PlayAnim(CityResidentDefines.AnimName.Run)
        data:SetAutoAnim(false)
        data:ShowTool("")
        data:GoToBuildingPos(furnitureInfo.bUuid, poses[i], false)
        data.onFinish = function()
            data:GoToPosDirectly(poses[i])
            data.onFinish = function()
                data.onFinish = nil
                data:Idle()
                data:ShowTool("HandAxe_Lv1")
                data:PlayAnim(CityResidentDefines.AnimName.CutTree)
                data:SetPos(poses[i])
                data:SetRot(rots[i])

                local hudParam = {}
                hudParam.uuid = data.uuid
                hudParam.type = CityHudType.ProductSlider
                hudParam.pos = data:GetPos()
                hudParam.icon = DataCenter.FurnitureManager:GetFurnitureEffectIcon(data.residentData.fUuid)
                hudParam.offset = Vector3.New(0, 80, 0)
                hudParam.duration = 10
                hudParam.location = CityHudLocation.World
                hudParam.fUuid = data.residentData.fUuid
                hudParam.callback = function()
                    DataCenter.CityHudManager:Destroy(data.uuid, CityHudType.ProductSlider)
                end
                DataCenter.CityHudManager:Create(hudParam)
                
                count = count + 1
                if count == #dataList and not callbackInvoked and callback then
                    callbackInvoked = true
                    callback()
                end
            end
        end
    end
end

local function ChefWork(self, callback1, callback2)
    self:Log("ChefWork is called.")
    
    local callback1Invoked = false
    local callback2Invoked = false
    local maxTime1 = 6
    local maxTime2 = 10
    TimerManager:GetInstance():DelayInvoke(function()
        if not callback1Invoked and callback1 then
            self:Log("Callback1 is invoked by timer.")
            
            callback1Invoked = true
            callback1()
        end
    end, maxTime1)
    TimerManager:GetInstance():DelayInvoke(function()
        if not callback2Invoked and callback2 then
            self:Log("Callback2 is invoked by timer.")
            
            self.cookFinishFlag = true
            callback2Invoked = true
            callback2()
        end
    end, maxTime2)
    
    self:Log("Chef goes to furniture.")
    local data = DataCenter.CityResidentManager:GetDataByCareer(CityResidentDefines.Career.Chef)
    data:SetGuideControl(true)
    data:SetSpeed(DataCenter.CityResidentManager:GetResidentRunSpeed() * 2)
    data:PlayAnim(CityResidentDefines.AnimName.Run)
    data:SetAutoAnim(false)
    data:GoToFurniture(data.residentData.fUuid)
    data.onUpdate = function()
        self:CameraFollow(data, 15)
    end
    data.onFinish = function()
        self:Log("Chef begins cooking.")
        data.onUpdate = nil
        data.fastWork = 4
        data:SetState(CityResidentDefines.State.Work)
        data.onFinish = function()
            local mealCount = LuaEntry.Resource:GetCntByResType(ResourceType.Meal)
            self:Log("Chef finishes cooking. mealCount = " .. mealCount)
            if mealCount == 1 then
                if not callback1Invoked and callback1 then
                    self:Log("Callback1 is invoked by cooking.")
                    callback1Invoked = true
                    callback1()
                end
            end
            if mealCount == 4 then
                data:SetGuideControl(false)
                data.onFinish = nil
                if not callback2Invoked and callback2 then
                    self:Log("Callback2 is invoked by cooking.")
                    self.cookFinishFlag = true
                    callback2Invoked = true
                    callback2()
                end
            end
        end
    end
end

local function ResidentEat(self, callback)
    self:Log("ResidentEat is called.")
    local callbackInvoked = false
    local maxTime = 20
    TimerManager:GetInstance():DelayInvoke(function()
        if not callbackInvoked and callback then
            self:Log("Callback is invoked by timer.")
            callbackInvoked = true
            callback()
        end
    end, maxTime)
    
    local furnitureInfoList = DataCenter.FurnitureManager:GetFurnitureByFurnitureId(FurnitureType.FoodWindow)
    local furnitureInfo = furnitureInfoList[1]
    local cur = 0
    for i = 1, 4 do
        -- 前往取餐台
        self:Log("Resident goes to food window. i = " .. i)
        local data = DataCenter.CityResidentManager:GetDataByIndex(CityResidentDefines.Type.Resident, i)
        data:ClearWaitForFinish()
        data:SetGuideControl(true)
        data.eaten = false
        data:PlayAnim(CityResidentDefines.AnimName.Run)
        data:SetSpeed(DataCenter.CityResidentManager:GetResidentRunSpeed() * 2)
        data:SetAutoAnim(false)
        data:GoToFurniture(furnitureInfo.uuid)
        data.onFinish = function()
            -- 拿饭，前往餐桌
            self:Log("Resident goes to dining table. i = " .. i)
            LuaEntry.Resource:ChangeMealCount(-1)
            local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.DS_RESTAURANT)
            local tf = DataCenter.CityResidentManager.occupyMgr:TryOccupyFurnitureTransform(data.uuid, FurnitureType.DiningTable)
            if tf then
                data:PlayAnim(CityResidentDefines.AnimName.CarryFoodWalk)
                data:SetSpeed(DataCenter.CityResidentManager:GetResidentWalkSpeed() * 2)
                data:SetAutoAnim(false)
                data:GoToBuildingPos(buildData.uuid, tf.position, true)
                data:ShowTool("HandServingTable_Lv2")
                data.onFinish = function()
                    -- 开始吃饭
                    self:Log("Resident eats. i = " .. i)
                    data:SetState(CityResidentDefines.State.Eat)
                    data:WaitForFinish(4)
                    data.onFinish = function()
                        -- 吃完饭
                        self:Log("Resident finishes eating. i = " .. i)
                        data:SetGuideControl(false)
                        data:Refresh()
                        data.onFinish = nil
                        cur = cur + 1
                        if cur == 3 and not callbackInvoked and callback then
                            self:Log("Callback is invoked by eating.")
                            callbackInvoked = true
                            callback()
                        end
                    end
                end
            end
        end
    end
end

local function ResidentHide(self, callback)
    local callbackInvoked = false
    local maxTime = 6
    TimerManager:GetInstance():DelayInvoke(function()
        if not callbackInvoked and callback then
            callbackInvoked = true
            callback()
        end
    end, maxTime)
    
    local cur = 0
    for i = 1, 4 do
        local data = DataCenter.CityResidentManager:GetDataByIndex(CityResidentDefines.Type.Resident, i)
        data:SetGuideControl(true)
        if i == 1 then
            data:PlayAnim(CityResidentDefines.AnimName.Run)
            data:SetSpeed(DataCenter.CityResidentManager:GetResidentRunSpeed() * 2)
            data:SetAutoAnim(false)
            data:GoToCityPos(Vector3.New(104.01, 0, 104.68))
            data.onFinish = function()
                data.onFinish = nil
                data:PlayAnim(CityResidentDefines.AnimName.Idle)
                cur = cur + 1
                if cur == 4 and not callbackInvoked and callback then
                    callbackInvoked = true
                    callback()
                end
            end
        else
            local buildIds = { BuildingTypes.DS_RESTAURANT, BuildingTypes.DS_FACTORY }
            local buildId = table.randomArrayValue(buildIds)
            local buildData = DataCenter.BuildManager:GetFunbuildByItemID(buildId)
            data:SetAutoAnim(false)
            data:PlayAnim(CityResidentDefines.AnimName.Run)
            data:SetSpeed(DataCenter.CityResidentManager:GetResidentRunSpeed() * 2)
            data:GoToBuildingRandomPos(buildData.uuid, CityResidentDefines.WayPointFlag.All)
            data.onFinish = function()
                data.onFinish = nil
                data:PlayAnim(CityResidentDefines.AnimName.Idle)
                cur = cur + 1
                if cur == 4 and not callbackInvoked and callback then
                    callbackInvoked = true
                    callback()
                end
            end
        end
    end
end

local function ZombieCome(self, callback)
    local callbackInvoked = false
    local maxTime = 8
    TimerManager:GetInstance():DelayInvoke(function()
        if not callbackInvoked and callback then
            callbackInvoked = true
            callback()
        end
    end, maxTime)
    
    -- 小人站立
    local data = DataCenter.CityResidentManager:GetDataByIndex(CityResidentDefines.Type.Resident, 1)
    data:SetGuideControl(true)
    data:SetPos(Vector3.New(104.01, 0, 104.68))
    data:PlayAnim(CityResidentDefines.AnimName.Idle)
    data:Idle()
    local zombieUuid = DataCenter.CityResidentManager:GetNextZombieUuid()
    local zombieParam = {}
    zombieParam.prefabPath = "Assets/Main/Prefab_Dir/Home/Zombie/A_Zombie_Home_Movie.prefab"
    DataCenter.CityResidentManager:AddData(zombieUuid, CityResidentDefines.Type.Zombie, zombieParam, function()
        -- 僵尸移动
        local zombieData = DataCenter.CityResidentManager:GetData(zombieUuid)
        zombieData:SetGuideControl(true)
        zombieData:SetSpeed(DataCenter.CityResidentManager:GetZombieWalkSpeed() * 2)
        zombieData:PlayAnim(CityResidentDefines.AnimName.Walk1)
        zombieData:SetPos(Vector3.New(101.6, 0, 106.06))
        zombieData:LookAt(data:GetPos())
        zombieData:GoToPosDirectly(Vector3.New(102.91, 0, 104.54))
        zombieData.onUpdate = function()
            self:CameraFollow(zombieData, 18)
        end
        zombieData.onFinish = function()
            -- 僵尸尖叫
            zombieData.onUpdate = nil
            zombieData.onFinish = nil
            zombieData:LookAt(data:GetPos())
            zombieData:PlayAnim(CityResidentDefines.AnimName.Attack1)
            zombieData:WaitForFinish(1.5)
            zombieData.onFinish = function()
                zombieData.onFinish = nil
                zombieData:PlayAnim(CityResidentDefines.AnimName.Idle)
            end
            -- 小人惊恐
            local hudParam = {}
            hudParam.uuid = data.uuid
            hudParam.GetPos = function() return data:GetPos() end
            hudParam.type = CityHudType.ResidentDanger
            hudParam.icon = "Assets/Main/Sprites/UI/UIMain/icon_kulou_jingkong"
            hudParam.offset = Vector3.New(20, 45, 0)
            hudParam.updateEveryFrame = true
            hudParam.location = CityHudLocation.World
            DataCenter.CityHudManager:Create(hudParam)
            
            local delay = 2
            TimerManager:GetInstance():DelayInvoke(function()
                -- 小人逃往床
                local fUuid = DataCenter.CityResidentManager.occupyMgr:TryOccupyBed(data.uuid)
                data:PlayAnim(CityResidentDefines.AnimName.Run)
                data:SetSpeed(DataCenter.CityResidentManager:GetResidentRunSpeed() * 2)
                data:SetAutoAnim(false)
                data:GoToFurniture(fUuid)
                data.onFinish = function()
                    data.onFinish = nil
                    -- -- 小人躺在床上
                    local furnitureTf = DataCenter.FurnitureObjectManager:GetTransformByFurnitureUuid(fUuid)
                    if furnitureTf then
                        local pos = furnitureTf.position
                        pos.y = 0.33
                        data:SetPos(pos)
                        data:SetRot(furnitureTf.rotation)
                        data:PlayAnim(CityResidentDefines.AnimName.SickSleep)
                        data:Idle()

                        if not callbackInvoked and callback then
                            callbackInvoked = true
                            callback()
                        end
                    end
                end
            end, delay)
        end
        data:LookAt(zombieData:GetPos())
    end)
end

local function HeroAttack(self, callback)
    local callbackInvoked = false
    local maxTime = 15
    TimerManager:GetInstance():DelayInvoke(function()
        if not callbackInvoked and callback then
            callbackInvoked = true
            callback()
        end
    end, maxTime)
    
    local dataList = DataCenter.CityResidentManager:GetDataListByType(CityResidentDefines.Type.Hero)
    local data = dataList[1]
    local zombieData = self.waitAttackZombieList[1]
    if zombieData ~= nil then
        zombieData.attacker = data
    end
    
    local function foo()
        data.onCreate = nil
        data:SetGuideControl(true)
        data:Idle()
        data:SetSpeed(CityResidentDefines.SpeedHeroRun)
        data:PlayAnim(CityResidentDefines.AnimName.Run)
        data:SetPos(Vector3.New(100.639,0,99.384))
        data:GoToPosDirectly(Vector3.New(100.171,0,99.98))
        data.onFinish = function()
            data.target = zombieData
            data:SetState(CityResidentDefines.HeroState.PreAttack)
            data.onFinish = function()
                --等待攻击完成
                data.onFinish = function()
                    data.target = zombieData
                    data:SetState(CityResidentDefines.HeroState.GoToFire)
                    --等待拿着火把跑过去
                    data.onFinish = function()
                        --等待拿着点火烧完
                        data.onFinish = function()
                            data.onFinish = nil
                            if not callbackInvoked and callback then
                                callbackInvoked = true
                                callback()
                            end
                        end
                    end
                end
            end
        end
    end
    
    if data:HasObj() then
        foo()
    else
        data.onCreate = foo
    end
end

local function ResidentCome(self, callback)
    local mainBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    local mainPos = mainBuildData:GetCenterVec()
    
    local poses =
    {
        [3] = Vector3.New(100.55, 0, 94.57),
        [4] = Vector3.New(100.84, 0, 93.66),
    }
    for i = 3, 4 do
        local data = DataCenter.CityResidentManager:GetDataByIndex(CityResidentDefines.Type.Resident, i)
        local pos = poses[i]
        data:SetGuideControl(true)
        data:PlayAnim(CityResidentDefines.AnimName.Run)
        data:SetSpeed(DataCenter.CityResidentManager:GetResidentWalkSpeed() * 2)
        data:SetPos(pos)
        data:LookAt(mainPos)
        data:ShowTool("")
        data:SetAutoAnim(false)
        data:GoToCityPos(Vector3.New(100.86, 0, 99.13))
        data.onFinish = function()
            data.onUpdate = nil
            data.onFinish = nil
            data:SetGuideControl(false)
        end
        if i == 3 then
            data.onUpdate = function()
                self:CameraFollow(data, 24)
            end
            local delay = 3.5
            TimerManager:GetInstance():DelayInvoke(function()
                data.onUpdate = nil
                if callback then
                    callback()
                end
            end, delay)
        end
    end
end

function CityResidentMovieManager:ClearAttackWaitZombie()
    self.waitAttackZombieList = {}
end
function CityResidentMovieManager:AddOneAttackWaitZombie(zombieData)
    table.insert(self.waitAttackZombieList, zombieData)
end

CityResidentMovieManager.__init = __init

CityResidentMovieManager.Play = Play
CityResidentMovieManager.CameraFollow = CameraFollow
CityResidentMovieManager.Log = Log

CityResidentMovieManager.Begin = Begin
CityResidentMovieManager.ZombieEscape = ZombieEscape
CityResidentMovieManager.ReleaseResident = ReleaseResident
CityResidentMovieManager.SawyerWork = SawyerWork
CityResidentMovieManager.ChefWork = ChefWork
CityResidentMovieManager.ResidentEat = ResidentEat
CityResidentMovieManager.ResidentHide = ResidentHide
CityResidentMovieManager.ZombieCome = ZombieCome
CityResidentMovieManager.HeroAttack = HeroAttack
CityResidentMovieManager.ResidentCome = ResidentCome

return CityResidentMovieManager
