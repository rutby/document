---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/23 10:52
---

local CityResidentStateBase = require "DataCenter.CityResident.CityResidentState.CityResidentStateBase"
local CityResidentStateWork = BaseClass("CityResidentStateWork", CityResidentStateBase)

local function OnEnter(self)
    if self:CheckWorkCondition() then
        local mask = DataCenter.CityResidentManager:GetCurrentCityMask()
        local fUuid = self.data.residentData.fUuid
        local career = self.data:GetCareer()
        if career == CityResidentDefines.Career.Doctor then
            if self.data.sickBedFUuid ~= 0 then
                fUuid = self.data.sickBedFUuid
            else
                fUuid = self.data.residentData.fUuid
            end
        else
            fUuid = self.data.residentData.fUuid
        end
        local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
        if furnitureInfo then
            local furnitureTf = DataCenter.FurnitureObjectManager:GetTransformByFurnitureUuid(fUuid)
            if furnitureTf then
                local duration = DataCenter.ResourceManager:GetResidentProductTime(self.data.uuid)
                if self.data.fastWork > 0 then
                    self.data.fastWork = self.data.fastWork - 1
                    duration = duration * 0.2
                end
                duration = duration / self.data:GetWorkSpeedFactor()
                local workFlag = CityResidentDefines.WorkWayPointFlag[career]
                if workFlag then
                    DataCenter.CityResidentManager.occupyMgr:TryOccupyNearWayPoint(self.data.uuid, mask, workFlag)
                else
                    local tf = DataCenter.CityResidentManager:GetFurnitureInteractTransform(fUuid, 1)
                    if tf then
                        self.data:SetRot(tf.rotation)
                    else
                        self.data:LookAt(furnitureTf.position)
                    end
                end
                self.data:Idle()
                self.data:PlayWorkAnim()
                self.data:WaitForFinish(duration)

                if career == CityResidentDefines.Career.Chef then
                    local config = DataCenter.VitaManager:GetCurSelectFoodParam()
                    local icon = string.format(LoadPath.UIMain, config.icon)
                    self:ShowFurnitureProductSlider(fUuid, icon, duration)
                elseif career == CityResidentDefines.Career.Doctor then
                    -- none
                else
                    local icon = DataCenter.FurnitureManager:GetFurnitureEffectIcon(fUuid)
                    self:ShowFurnitureProductSlider(fUuid, icon, duration)
                end

                if career ~= CityResidentDefines.Career.Doctor then
                    self.fUuid = fUuid
                    EventManager:GetInstance():Broadcast(EventId.CityResidentEnterFurniture, { rUuid = self.data.uuid, fUuid = fUuid })
                end
                return
            end
        end
    end

    self.data:SetState(CityResidentDefines.State.Rest)
end

local function OnExit(self)
    DataCenter.CityHudManager:Destroy(self.data.uuid, CityHudType.ProductSlider)

    local career = self.data:GetCareer()
    local workFlag = CityResidentDefines.WorkWayPointFlag[career]
    if workFlag then
        DataCenter.CityResidentManager.occupyMgr:ReleaseWayPoint(self.data.uuid)
    end
    if career ~= CityResidentDefines.Career.Doctor then
        EventManager:GetInstance():Broadcast(EventId.CityResidentExitFurniture, { rUuid = self.data.uuid, fUuid = self.fUuid })
    end
end

local function OnFinish(self)
    self.data:ShowTool("")
    local career = self.data:GetCareer()
    local workFlag = CityResidentDefines.WorkWayPointFlag[career]
    if workFlag then
        self.data:SetState(CityResidentDefines.State.WorkBack)
    elseif career == CityResidentDefines.Career.Chef then
        LuaEntry.Resource:ChangeMealCount(1)
        local config = DataCenter.VitaManager:GetCurSelectFoodParam()
        local icon = string.format(LoadPath.UIMain, config.icon)
        self:ShowFurnitureProductGain(icon, 1)
        self:OnEnter()
    elseif career == CityResidentDefines.Career.Doctor then
        self.data:SetState(CityResidentDefines.State.GoToWork)
    else
        local fUuid = self.data.residentData.fUuid
        local icon = DataCenter.FurnitureManager:GetFurnitureEffectIcon(fUuid)
        local count = DataCenter.ResourceManager:GetResidentProductCount(self.data.uuid)
        self:ShowFurnitureProductGain(icon, count)
        self:OnEnter()
    end
end

local function CheckWorkCondition(self)
    local career = self.data:GetCareer()
    if career == CityResidentDefines.Career.Chef then
        local foodCount = math.floor(LuaEntry.Resource:GetCntByResType(ResourceType.Food))
        local foodCost = DataCenter.VitaManager:GetMealFoodCost()
        local mealCount = LuaEntry.Resource:GetCntByResType(ResourceType.Meal)
        local maxMealCount = LuaEntry.Resource:GetMaxStorageByResType(ResourceType.Meal)
        return foodCount >= foodCost and mealCount < maxMealCount
    end
    return true
end

CityResidentStateWork.OnEnter = OnEnter
CityResidentStateWork.OnExit = OnExit
CityResidentStateWork.OnFinish = OnFinish
CityResidentStateWork.CheckWorkCondition = CheckWorkCondition

return CityResidentStateWork