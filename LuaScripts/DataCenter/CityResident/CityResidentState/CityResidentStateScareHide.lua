---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/23 10:52
---

local CityResidentStateBase = require "DataCenter.CityResident.CityResidentState.CityResidentStateBase"
local CityResidentStateScareHide = BaseClass("CityResidentStateScareHide", CityResidentStateBase)

local TalkInterval = 5

local function OnUpdate(self, deltaTime)
    self.talkCd = self.talkCd - deltaTime
    if self.talkCd <= 0 then
        self.talkCd = TalkInterval
        
        -- 小人说话
        local param = {}
        if self.data:IsInBuilding() then
            param.type = CityResidentDefines.TalkTriggerType.ResidentScareHideInside
        else
            param.type = CityResidentDefines.TalkTriggerType.ResidentScareHideOutside
        end
        param.rUuid = self.data.uuid
        param.bgType = 2
        DataCenter.CityResidentManager:TryResidentTalk(param)
    end

    -- 减少心情值
    self.moodCd = self.moodCd - deltaTime
    if self.moodCd <= 0 then
        local deltaMood = CityResidentDefines.ResidentScareHideMood
        self.moodCd = CityResidentDefines.ResidentScareHideMoodInterval
        local hudParam = {}
        hudParam.type = CityHudType.PopText
        hudParam.pos = self.data:GetPos()
        hudParam.icon = string.format(LoadPath.UIVita, "UItemperature_icon_mood03")
        hudParam.text = "<color=red>" .. deltaMood .. "</color>"
        hudParam.offset = Vector3.New(0, 50, 0)
        hudParam.duration = 1
        hudParam.location = CityHudLocation.World
        DataCenter.CityHudManager:Create(hudParam)
        self.data.residentData:ChangeMood(deltaMood)
    end
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime - self.data.scareStartTime >= CityResidentDefines.ResidentScareDuration * 1000 then
        if self:CheckInternal() then
            self.data.scareStartTime = curTime
        end
    end
end

local function OnEnter(self)
    self.talkCd = TalkInterval
    self.moodCd = CityResidentDefines.ResidentScareMoodInterval
    self:PlayInternal()
    DataCenter.CityResidentManager.occupyMgr:TryOccupyRandomWayPoint(self.data.uuid, self.data.atBUuid, CityResidentDefines.WayPointFlag.SafeHide)
end

local function OnExit(self)
    self.data:CheckShowDanger()
    DataCenter.CityResidentManager.occupyMgr:ReleaseWayPoint(self.data.uuid)
end

local function OnFinish(self)
    self:CheckInternal()
end

local function PlayInternal(self)
    self.data:Idle()
    self.data:PlayAnim(CityResidentDefines.AnimName.Shiver)
    self.data:ShowTool("")
    self.data:WaitForFinish(CityResidentDefines.ResidentScareDuration)
end

local function CheckInternal(self)
    if self.data:IsInBuilding() then
        local zombieDataList = DataCenter.CityResidentManager:GetDataListByType(CityResidentDefines.Type.Zombie)
        for _, zombieData in ipairs(zombieDataList) do
            if not zombieData:IsDead() and zombieData.targetBUuid == self.data.atBUuid then
                self:PlayInternal()
                return true
            end
        end
    else
        local zombieDataList = DataCenter.CityResidentManager:GetDataListInRange(CityResidentDefines.Type.Zombie, self.data:GetPos(), DataCenter.CityResidentManager:GetResidentScareRange() * 2)
        for _, zombieData in ipairs(zombieDataList) do
            if not zombieData:IsDead() then
                self:PlayInternal()
                return true
            end
        end
    end
    self.data:Refresh()
    return false
end

CityResidentStateScareHide.OnUpdate = OnUpdate
CityResidentStateScareHide.OnEnter = OnEnter
CityResidentStateScareHide.OnExit = OnExit
CityResidentStateScareHide.OnFinish = OnFinish

CityResidentStateScareHide.PlayInternal = PlayInternal
CityResidentStateScareHide.CheckInternal = CheckInternal

return CityResidentStateScareHide