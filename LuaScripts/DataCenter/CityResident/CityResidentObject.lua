---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/14 14:39
---

local CityResidentObject = BaseClass("CityResidentObject")
local Resource = CS.GameEntry.Resource

local right_hand_path = "Model/Skin/guadian_R"
local left_hand_path = "Model/Skin/guadian_L"
local right_hand_path_2 = "Model/Skin/To_unity/DeformationSystem/Root/guadian_R"
local left_hand_path_2 = "Model/Skin/To_unity/DeformationSystem/Root/guadian_L"

local torch_path = "Model/Skin/guadian_R/D_huoba_game"
local weapon_path = "Model/Skin/guadian_R/Weapon_Rifle"
local fire_path = "Model/Skin/guadian_R/Weapon_Rifle/D_Rifle_game/D_Rifle/atkEffect"

local torch_old_path = "Bip001/Bip001 Prop1/torchPoint/torch"
local weapon_old_path = "Bip001/Bip001 Prop1/weaponPoint/weapon"
local fire_old_path = "point_foot"

local FlashMaterial = nil

local function __init(self, data)
    self.uuid = data.uuid
    self.data = data
    self.req = nil
    self.gameObject = nil
    self.transform = nil
    self.created = false
    self.toolReq = nil
    self.toolName = ""
    self.fireReq = nil
    self.animName = ""
    self.animSpeed = 1
    self.mover = nil
    self.trigger = nil
    self.renderer = nil
    self.defaultMaterial = nil
    self.materialPropertyBlock = nil
    self.soundDelayTimer = nil
    self.flashTimer = nil
end

local function Create(self, callback)
    local prefabPath = self.data.param.prefabPath or ""
    if prefabPath == "" then
        if self.data.type == CityResidentDefines.Type.Resident then
            prefabPath = DataCenter.CityResidentManager:GetResidentPrefab(self.uuid)
        elseif self.data.type == CityResidentDefines.Type.Zombie then
            prefabPath = DataCenter.CityResidentManager:GetZombiePrefab(self.uuid)
        elseif self.data.type == CityResidentDefines.Type.Hero then
            prefabPath = CityResidentDefines.HeroConfig[self.data.index].prefab
        elseif self.data.type == CityResidentDefines.Type.Animal then
            prefabPath = CityResidentDefines.AnimalPrefabPath[self.data.param.animalType]
        end
        self.data.param.prefabPath = prefabPath
    end
    
    self.req = Resource:InstantiateAsync(prefabPath)
    self.req:completed('+', function(_)
        if IsNull(self.req.gameObject) then
            Logger.LogError("CityResident Create failed, prefabPath: " .. prefabPath)
            DataCenter.CityResidentManager:DestroyObject(self.uuid)
            return
        end
        self.created = true
        self.gameObject = self.req.gameObject
        self.transform = self.gameObject.transform
        self.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
        self.transform.localScale = Vector3.one
        self.transform.position = Vector3.zero
        self.transform.rotation = Quaternion.identity
        self.rightHandTf = self.transform:Find(right_hand_path) or self.transform:Find(right_hand_path_2)
        self.leftHandTf = self.transform:Find(left_hand_path) or self.transform:Find(left_hand_path_2)
        self.torchTf = self.transform:Find(torch_path) or self.transform:Find(torch_old_path)
        self.weaponTf = self.transform:Find(weapon_path) or self.transform:Find(weapon_old_path)
        self.fireTf = self.transform:Find(fire_path) or self.transform:Find(fire_old_path)
        self.anim = self.gameObject:GetComponentInChildren(typeof(CS.SimpleAnimation))
        self.gpuAnim = self.gameObject:GetComponentInChildren(typeof(CS.GPUSkinningPlayerMono))
        self.mover = self.gameObject:GetComponent(typeof(CS.CityResidentMover))
        self.mover:SetType(self.data.type)
        if DataCenter.CityResidentManager:UseNewPathMethod() then
            self.mover:SetUuid(self.data.uuid)
        end
        self.trigger = self.gameObject:GetComponent(typeof(CS.TouchObjectEventTrigger))
        if self.trigger then
            self.trigger.onPointerClick = function()
                self:OnClick()
            end
            self.trigger.onPointerDoubleClick = function()
                self:OnClick()
            end
        end
        local renderers = self.gameObject:GetComponentsInChildren(typeof(CS.UnityEngine.Renderer))
        if renderers.Length > 0 then
            for i = 0, renderers.Length - 1 do
                local renderer = renderers[i]
                if renderer.name ~= "Quad" then
                    self.renderer = renderer
                    self.defaultMaterial = renderer.sharedMaterial
                    break
                end
            end
        end
        if self.data.active then
            self:SetActive(true)
            if self.data.animName ~= "" then
                self:PlayAnim(self.data.animName, self.data.animSpeed)
            end
        else
            self:SetActive(false)
        end
        if callback then
            callback()
        end
    end)
end

local function OnUpdate(self)
    
end

local function Destroy(self)
    self:Stop3DSound()
    self.created = false
    if self.renderer then
        self.renderer.sharedMaterial = self.defaultMaterial
    end
    if self.data then
        self.data:Clear()
    end
    if self.toolReq then
        self.toolReq:Destroy()
        self.toolReq = nil
    end
    if self.fireReq then
        self.fireReq:Destroy()
        self.fireReq = nil
    end
    if self.req then
        self.req:Destroy()
        self.req = nil
    end
    if self.flashTimer then
        self.flashTimer:Stop()
        self.flashTimer = nil
    end
    if not IsNull(self.trigger) then
        self.trigger.onPointerClick = nil
        self.trigger.onPointerDoubleClick = nil
    end
end

local function IsCreated(self)
    return self.created
end

local function SetActive(self, active)
    self.gameObject:SetActive(active)
    if active then
        if self.animName ~= "" then
            self:PlayAnim(self.animName, self.animSpeed)
        end
    else
        self:Stop3DSound()
    end
end

local function PlayAnim(self, animName, animSpeed)
    if not self.created then
        return
    end
    self.animName = animName or ""
    self.animSpeed = animSpeed
    if self.anim then
        self.anim:Rewind(animName)
        self.anim:Play(animName)
        self.anim:SetStateSpeed(self.animName, animSpeed)
    elseif self.gpuAnim then
        self.gpuAnim:Play(animName)
        self.gpuAnim.Player:Resume()
    end
    local effectName = CityResidentDefines.AnimNameToSound[self.animName]
    if effectName then
        self:Play3DSound(effectName)
    else
        self:Stop3DSound()
    end
end

local function GetAnimDuration(self, animName, animSpeed)
    local animState = self.anim:GetState(animName)
    if animState == nil then
        return 0
    end
    return self.anim:GetClipLength(animName) / animSpeed
end

local function PauseAnim(self)
    if not self.created then
        return
    end
    self:Stop3DSound()
    if self.anim then
        if self.animName ~= "" then
            self.anim:SetStateSpeed(self.animName, 0)
        end
    elseif self.gpuAnim then
        self.gpuAnim.Player:Stop()
    end
end

local function ResumeAnim(self)
    if not self.created then
        return
    end
    self:Stop3DSound()
    if self.anim then
        if self.animName ~= "" then
            self.anim:SetStateSpeed(self.animName, self.animSpeed)
        end
    elseif self.gpuAnim then
        self.gpuAnim.Player:Resume()
    end
    if self.animName~="" then
        local effectName = CityResidentDefines.AnimNameToSound[self.animName]
        self:Play3DSound(effectName)
    end
end

local function ShowTool(self, toolName)
    if toolName ~= "" then
        if self.toolName ~= toolName then
            if self.toolReq then
                self.toolReq:Destroy()
            end
            self.toolReq = Resource:InstantiateAsync(string.format("Assets/Main/Prefab_Dir/Home/Tools/%s.prefab", toolName))
            self.toolReq:completed('+', function(req)
                local go = req.gameObject
                local parent = self.rightHandTf
                go.name = toolName
                go.transform:SetParent(parent)
                go.transform.localPosition = Vector3.zero
                go.transform.localRotation = Quaternion.identity
                go.transform.localScale = Vector3.one
            end)
        end
    else
        if self.toolName ~= "" then
            if self.toolReq then
                self.toolReq:Destroy()
            end
        end
    end
    self.toolName = toolName
end

local function SetTorchActive(self, active)
    if not IsNull(self.torchTf) then
        self.torchTf.gameObject:SetActive(active)
    end
end

local function SetWeaponActive(self, active)
    if not IsNull(self.weaponTf) then
        self.weaponTf.gameObject:SetActive(active)
    end
end

local function ShowFireParticle(self)
    self:HideFireParticle()
    local prefab = nil
    for _, cfg in pairs(CityResidentDefines.HeroConfig) do
        if cfg.uuid == self.uuid then
            prefab = cfg.firePrefab
            break
        end
    end
    if prefab then
        self.fireReq = Resource:InstantiateAsync(prefab)
        self.fireReq:completed('+', function(req)
            local go = req.gameObject
            go.transform:SetParent(self.fireTf)
            go.transform.localPosition = Vector3.zero
            go.transform.localRotation = Quaternion.identity
            go.transform.localScale = Vector3.one
        end)
    end
end

local function HideFireParticle(self)
    if self.fireReq then
        self.fireReq:Destroy()
    end
end

local function Play3DSound(self, soundName, delay)
    if self.soundDelayTimer then
        self.soundDelayTimer:Stop()
        self.soundDelayTimer = nil
    end
    if soundName == nil or soundName == "" then
        return
    end
    if self.gameObject then
        if delay and delay > 0 then
            self.soundDelayTimer = TimerManager:GetInstance():DelayInvoke(function()
                SoundUtil.Play3DSound(self.gameObject, soundName)
            end, delay)
        else
            SoundUtil.Play3DSound(self.gameObject, soundName)
        end
    end
end

local function Stop3DSound(self)
    if self.soundDelayTimer then
        self.soundDelayTimer:Stop()
        self.soundDelayTimer = nil
    end
    if self.gameObject ~=nil then
        SoundUtil.Stop3DSound(self.gameObject)
    end
end

local function SetMaterialPropertyFloat(self, key, value)
    if self.renderer then
        self.renderer.sharedMaterial:SetFloat(key, value)
    end
end

local function Flash(self)
    if self.renderer == nil then
        return
    end
    if FlashMaterial == nil then
        local req = Resource:LoadAsset("Assets/Main/Material/UnitRed.mat", typeof(CS.UnityEngine.Material))
        if req and req.isDone then
            FlashMaterial = req.asset
        end
    end
    if FlashMaterial == nil then
        return
    end
    self.renderer.sharedMaterial = FlashMaterial
    if self.flashTimer then
        self.flashTimer:Stop()
    end
    self.flashTimer = TimerManager:GetInstance():DelayInvoke(function()
        self.renderer.sharedMaterial = self.defaultMaterial
    end, CityResidentDefines.ZombieFlashDuration)
end

local function OnClick(self)
    self.data:OnClick()
end

CityResidentObject.__init = __init

CityResidentObject.Create = Create
CityResidentObject.Destroy = Destroy
CityResidentObject.IsCreated = IsCreated
CityResidentObject.SetActive = SetActive
CityResidentObject.OnUpdate = OnUpdate
CityResidentObject.PlayAnim = PlayAnim
CityResidentObject.GetAnimDuration = GetAnimDuration
CityResidentObject.PauseAnim = PauseAnim
CityResidentObject.ResumeAnim = ResumeAnim
CityResidentObject.ShowTool = ShowTool
CityResidentObject.SetTorchActive = SetTorchActive
CityResidentObject.SetWeaponActive = SetWeaponActive
CityResidentObject.ShowFireParticle = ShowFireParticle
CityResidentObject.HideFireParticle = HideFireParticle
CityResidentObject.Play3DSound = Play3DSound
CityResidentObject.Stop3DSound = Stop3DSound
CityResidentObject.SetMaterialPropertyFloat = SetMaterialPropertyFloat
CityResidentObject.Flash = Flash
CityResidentObject.OnClick = OnClick

return CityResidentObject