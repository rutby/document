---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/13 20:55
---

local CityResidentData = BaseClass("CityResidentData")

local MinX = 80
local MinZ = 80
local MainPos = Vector3.New(101, 0, 101)

local function __init(self, uuid, type, param)
    self.uuid = uuid
    self.type = type
    self.param = param or {}
    self.index = 0
    self.state = "None"
    self.lastState = "None"
    self.stateDict = {}
    self.zombieStamina = 0
    if type == CityResidentDefines.Type.Resident then
        for _, state in pairs(CityResidentDefines.State) do
            self.stateDict[state] = require("DataCenter.CityResident.CityResidentState.CityResidentState" .. state).New(self)
        end
    elseif type == CityResidentDefines.Type.Zombie then
        for _, state in pairs(CityResidentDefines.ZombieState) do
            self.stateDict[state] = require("DataCenter.CityResident.CityZombieState.CityZombieState" .. state).New(self)
        end
        self.zombieStamina = DataCenter.CityResidentManager:GetZombieMaxStamina()
    elseif type == CityResidentDefines.Type.Hero then
        for _, state in pairs(CityResidentDefines.HeroState) do
            self.stateDict[state] = require("DataCenter.CityResident.CityHeroState.CityHeroState" .. state).New(self)
        end
    elseif type == CityResidentDefines.Type.Special then
        for _, state in pairs(CityResidentDefines.SpecialState) do
            self.stateDict[state] = require("DataCenter.CityResident.CitySpecialState.CitySpecialState" .. state).New(self)
        end
    elseif type == CityResidentDefines.Type.Animal then
        for _, state in pairs(CityResidentDefines.AnimalState) do
            self.stateDict[state] = require("DataCenter.CityResident.CityAnimalState.CityAnimalState" .. state).New(self)
        end
    end
    
    self.autoAnim = false
    self.animName = ""
    self.animSpeed = 1
    self.obj = nil
    self.residentData = nil -- 服务器数据
    self.eaten = false -- 是否吃过饭
    self.overworked = false -- 是否加过班
    self.drunkEndTime = 0 -- 喝酒结束时间
    self.atBUuid = 0 -- 所在建筑
    self.attacker = nil -- 攻击者
    self.target = nil -- 目标
    self.preferTargets = {} -- 优先目标队列
    self.targetBUuid = 0 -- 目标建筑，-1 代表该丧尸不打建筑
    self.spawnId = self.param.spawnId or 1 -- 出生点ID
    self.isGuideControl = false -- 是否引导控制
    self.isSpecialControl = false -- 是否特殊控制
    self.isInvincible = false -- 是否无敌
    self.fastWork = 0
    self.finishCd = 0
    self.posCache = Vector3.zero
    self.rotCache = Quaternion.identity
    self.isPosDirty = true
    self.betrayIndex = 0 -- 叛逃序列
    self.readyIndex = 0 -- 加入序列
    self.paused = false
    self.active = true
    self.hurtTime = 0 -- 上次受伤时间
    self.hurtTimer = nil
    self.lifetime = IntMaxValue -- 剩余存在时长
    self.scareStartTime = 0 -- 惊恐开始时间
    self.ignoreBUuidTimeDict = {} -- Dict<bUuid, time> 不检测攻击的建筑
    DataCenter.CityResidentManager.wantCount = 0
    self.moveIndex = 0 -- 移动索引
    self.moveParamQueue = {} -- 移动队列

    self.onCreate = nil
    self.onFinish = nil
    self.onRemove = nil
end

local function Clear(self)
    self.state = "None"
    self.lastState = "None"
    self.autoAnim = false
    self.animName = ""
    self.animSpeed = 1
    self.atBUuid = 0
    self.attacker = nil
    self.target = nil
    self.targetBUuid = 0
    self.isGuideControl = false
    self.isSpecialControl = false
    self.fastWork = 0
    self.finishCd = 0
    self.posCache = Vector3.zero
    self.rotCache = Quaternion.identity
    self.isPosDirty = true
    self.paused = false
    self.active = true
end

local function HasObj(self)
    return self.obj and self.obj:IsCreated()
end

local function SetPos(self, pos)
    self.posCache = pos
    if self:HasObj() then
        self.obj.mover.pos = pos
    end
    self.isPosDirty = false
end

local function GetPos(self)
    if self.isPosDirty then
        if self:HasObj() then
            self.posCache = self.obj.mover.pos
        end
        self.isPosDirty = false
    end
    return self.posCache
end

local function ResetPos(self)
    local pos = nil
    local rot = nil
    local bank = DataCenter.CityResidentManager:GetBank(self.uuid)
    if bank then
        self.atBUuid = bank.atBUuid or 0
        pos = bank.pos and Vector3.New(bank.pos.x, bank.pos.y, bank.pos.z) or nil
        rot = bank.rot and Quaternion.New(bank.rot.x, bank.rot.y, bank.rot.z, bank.rot.w) or nil
    else
        self.atBUuid = 0
        pos = self.param.pos
        rot = self.param.rot
    end
    if pos == nil or pos.x < MinX or pos.z < MinZ then
        local mask = DataCenter.CityResidentManager:GetCurrentCityMask()
        if self.type == CityResidentDefines.Type.Resident then
            if self.residentData:IsReady() then
                pos = CityResidentDefines.ResidentReadyHidePos
            else
                pos = WayPointUtil.GetRandomPos(mask, CityResidentDefines.WayPointFlag.Center)
            end
        elseif self.type == CityResidentDefines.Type.Hero then
            pos = DataCenter.CityResidentManager:GetHeroSpawnPos()
        end
    end
    if pos then
        self:SetPos(pos)
    end
    if rot then
        self:SetRot(rot)
    end
end

local function SetRot(self, rot)
    self.rotCache = rot
    if self:HasObj() then
        self.obj.mover.rot = rot
    end
    self.isPosDirty = false
end

local function GetRot(self)
    if self.isPosDirty then
        if self:HasObj() then
            self.rotCache = self.obj.mover.rot
        end
        self.isPosDirty = false
    end
    return self.rotCache
end

local function LookAt(self, pos)
    if self:HasObj() then
        self.obj.mover:LookAt(pos)
    end
end

local function SetState(self, state)
    --Logger.Log("CityResident SetState type = " .. self.type .. " uuid = " .. self.uuid .. " '" .. self.state .. "' => '" .. state .. "'" .. "\n" .. debug.traceback())
    self:ClearWaitForFinish()
    if self.state ~= state then
        self.lastState = self.state
    end
    self.stateDict[self.state]:OnExit()
    self.state = state
    self.stateDict[self.state]:OnEnter()
    if self.type == CityResidentDefines.Type.Resident then
        self:CheckShowDanger()
        self:CheckShowStamina()
        self:CheckShowWant()
    end
end

local function GetState(self)
    return self.state
end

local function GetLastState(self)
    return self.lastState
end

local function Refresh(self, isInit)
    if self.isGuideControl or self.isSpecialControl then
        return
    end
    
    if not self:HasObj() then
        return
    end
    
    local bank = DataCenter.CityResidentManager:GetBank(self.uuid)
    if self.type == CityResidentDefines.Type.Resident then
        local curSeg = DataCenter.VitaManager:GetCurSegment()
        if isInit and bank and bank.state and bank.state ~= CityResidentDefines.State.None then
            self:SetState(bank.state)
        elseif self.residentData:IsReady() then
            -- 排队加入
            if DataCenter.CityResidentManager.readyCanCome then
                local residentCount = DataCenter.VitaManager:GetResidentCount()
                local residentMaxCount = DataCenter.VitaManager:GetResidentMaxCount()
                if residentCount < residentMaxCount then
                    self:SetState(CityResidentDefines.State.ReadyQueue)
                else
                    self:SetState(CityResidentDefines.State.ReadyHide)
                end
            else
                self:SetState(CityResidentDefines.State.ReadyHide)
            end
        elseif self.residentData.deadReason == VitaDefines.ResidentDeadReason.Zombie then
            -- 被丧尸击倒
            self:SetState(CityResidentDefines.State.Dead)
            -- 检查点燃尸体
            self:CheckShowFireBody()
        elseif self.residentData.deadReason == VitaDefines.ResidentDeadReason.Betray then
            -- 准备叛逃
            if self.state ~= CityResidentDefines.State.Betray and self.state ~= CityResidentDefines.State.BetrayLeave then
                self:SetState(CityResidentDefines.State.Betray)
            end
        elseif self:IsDead() then
            -- 倒地了
            if not DataCenter.CityResidentManager:IsZombieInvade() and self.residentData.deadReason ~= VitaDefines.ResidentDeadReason.Zombie then
                -- 但是服务器没让死，白天站起来
                self:SetState(CityResidentDefines.State.Idle)
            end
            -- 检查点燃尸体
            self:CheckShowFireBody()
        elseif self.residentData:IsSick() then
            -- 生病
            self:SetState(CityResidentDefines.State.Sick)
        elseif curSeg.type == VitaDefines.SegmentType.Sleep then
            -- 睡觉
            self:SetState(CityResidentDefines.State.GoToSleep)
        elseif curSeg.type == VitaDefines.SegmentType.Rest then
            -- 休息
            self:SetState(CityResidentDefines.State.Rest)
        elseif curSeg.type == VitaDefines.SegmentType.Work then
            -- 工作
            self:SetState(CityResidentDefines.State.GoToWork)
        elseif curSeg.type == VitaDefines.SegmentType.Eat then
            -- 吃饭
            self:SetState(CityResidentDefines.State.GoRestaurant)
        end
        if self:HasObj() then
            self.obj.gameObject.name = "CityResident_" .. self:GetCareer() .. "_" .. self.uuid
        end
        self:CheckShowStamina()
    elseif self.type == CityResidentDefines.Type.Zombie then
        if not self:IsDead() then
            if isInit and bank and bank.state then
                -- 载入
                if bank.state == CityResidentDefines.ZombieState.AttackBuilding or
                   bank.state == CityResidentDefines.ZombieState.AttackWall or
                   bank.state == CityResidentDefines.ZombieState.ChaseBuilding or
                   bank.state == CityResidentDefines.ZombieState.InvadeIdle or
                   bank.state == CityResidentDefines.ZombieState.InvadeWalk or
                   bank.state == CityResidentDefines.ZombieState.Hurt then
                    self:SetState(CityResidentDefines.ZombieState.InvadeWalk)
                elseif self.state == CityResidentDefines.ZombieState.WanderIdle or
                       self.state == CityResidentDefines.ZombieState.WanderWalk or
                       self.state == CityResidentDefines.ZombieState.Invade then
                    self:SetState(CityResidentDefines.ZombieState.Invade)
                else
                    self:SetState(bank.state)
                end
            elseif not DataCenter.CityResidentManager:IsZombieInvade() or DataCenter.CityResidentManager:IsPeace() then
                -- 非入侵时间/和平夜
                if self.state == CityResidentDefines.ZombieState.AttackBuilding or
                   self.state == CityResidentDefines.ZombieState.AttackWall or
                   self.state == CityResidentDefines.ZombieState.ChaseBuilding or
                   self.state == CityResidentDefines.ZombieState.Invade or
                   self.state == CityResidentDefines.ZombieState.InvadeIdle or
                   self.state == CityResidentDefines.ZombieState.InvadeWalk or
                   self.state == CityResidentDefines.ZombieState.Hurt or
                   self.state == CityResidentDefines.ZombieState.Escape then
                    -- 撤退
                    self:SetState(CityResidentDefines.ZombieState.Retreat)
                elseif self.state == CityResidentDefines.ZombieState.Attack or
                       self.state == CityResidentDefines.ZombieState.Chase then
                    if self.chaseOutside then
                        -- 外圈徘徊
                        self:SetState(CityResidentDefines.ZombieState.WanderWalk)
                    else
                        -- 撤退
                        self:SetState(CityResidentDefines.ZombieState.Retreat)
                    end
                elseif self.state == CityResidentDefines.ZombieState.Retreat or
                       self.state == CityResidentDefines.ZombieState.Dying or
                       self.state == CityResidentDefines.ZombieState.Dead or
                       self.state == CityResidentDefines.ZombieState.BeFire then
                    -- skip
                else
                    -- 外圈徘徊
                    self:SetState(CityResidentDefines.ZombieState.WanderWalk)
                end
            else
                -- 入侵时间
                if self.state == CityResidentDefines.ZombieState.WanderIdle or
                   self.state == CityResidentDefines.ZombieState.WanderWalk or
                   self.state == CityResidentDefines.ZombieState.None then
                    -- 入侵
                    local max = DataCenter.CityResidentManager:GetZombieInvadeMaxCount()
                    local cur = DataCenter.CityResidentManager:GetInvadeZombieCount(self.spawnId)
                    -- 判入侵最大数量
                    if cur < max then
                        self:SetState(CityResidentDefines.ZombieState.Invade)
                    else
                        self:SetState(CityResidentDefines.ZombieState.WanderWalk)
                    end
                elseif self.state == CityResidentDefines.ZombieState.Attack or
                       self.state == CityResidentDefines.ZombieState.Chase then
                    if self.chaseOutside then
                        -- 入侵
                        self:SetState(CityResidentDefines.ZombieState.Invade)
                    else
                        -- 内圈徘徊
                        self:SetState(CityResidentDefines.ZombieState.InvadeWalk)
                    end
                elseif self.state == CityResidentDefines.ZombieState.Invade or
                       self.state == CityResidentDefines.ZombieState.Retreat or
                       self.state == CityResidentDefines.ZombieState.Dying or
                       self.state == CityResidentDefines.ZombieState.Dead or
                       self.state == CityResidentDefines.ZombieState.BeFire then
                    -- skip
                else
                    -- 内圈徘徊
                    self:SetState(CityResidentDefines.ZombieState.InvadeWalk)
                end
            end
        end
        if self:HasObj() then
            self.obj.gameObject.name = "CityZombie_" .. self.uuid
        end
    elseif self.type == CityResidentDefines.Type.Hero then
        self:SetState(CityResidentDefines.HeroState.GoToIdle)
        if self:HasObj() then
            self.obj.gameObject.name = "CityHero_" .. self.uuid
        end
    elseif self.type == CityResidentDefines.Type.Animal then
        self:SetState(CityResidentDefines.AnimalState.Idle)
        if self:HasObj() then
            self.obj.gameObject.name = "CityAnimal_" .. self.param.animalType .. "_" .. self.uuid
        end
    end
end

-- 获取这个小人/僵尸/英雄在所有同类中的 uuid 升序 index
local function GetIndex(self)
    if self.index ~= 0 then
        return self.index
    end
    local index = 0
    local dataList = DataCenter.CityResidentManager:GetDataListByType(self.type)
    for _, data in ipairs(dataList) do
        if self.uuid >= data.uuid then
            index = index + 1
        end
    end
    return index
end

local function GetDistanceToMain(self)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    local curPos = self:GetPos()
    return Vector3.Distance(curPos, buildData:GetCenterVec())
end

local function GetCareer(self)
    local fUuid = self.residentData.fUuid
    if fUuid ~= 0 then
        local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
        if furnitureInfo then
            local career = CityResidentDefines.FurnitureCareer[furnitureInfo.fId]
            if career then
                return career
            else
                Logger.LogError("CityResidentData GetCareer error: rUuid = " .. self.uuid .. ", furnitureId = " .. furnitureInfo.fId)
            end
        end
    end
    return CityResidentDefines.Career.None
end

local function PlayWorkAnim(self)
    local animSpeed = self:GetWorkSpeedFactor()
    local career = self:GetCareer()
    if career == CityResidentDefines.Career.Chef then
        self:PlayAnim(CityResidentDefines.AnimName.Cook, animSpeed, true)
        self:ShowTool("HandBurner_Lv1")
    elseif career == CityResidentDefines.Career.Hunter then
        self:PlayAnim(CityResidentDefines.AnimName.Throw, animSpeed, true)
        self:ShowTool("")
    elseif career == CityResidentDefines.Career.Sawyer then
        local animName
        if self.residentData:GetEffectVal(EffectDefine.FURNITURE_PLANK_ADD_PERCENT) > 0 then
            animName = CityResidentDefines.AnimName.CutTree2
        else
            animName = CityResidentDefines.AnimName.CutTree
        end
        self:PlayAnim(animName, animSpeed, true)
        self:ShowTool("HandAxe_Lv1")
    elseif career == CityResidentDefines.Career.Smith then
        self:PlayAnim(CityResidentDefines.AnimName.Dig, animSpeed, true)
        self:ShowTool("HandShovel_Lv1")
    elseif career == CityResidentDefines.Career.Powerman then
        self:PlayAnim(CityResidentDefines.AnimName.HandRub, animSpeed, true)
        self:ShowTool("")
    elseif career == CityResidentDefines.Career.Doctor then
        if self.sickBedFUuid ~= 0 then
            self:PlayAnim(CityResidentDefines.AnimName.Heal, animSpeed, true)
            self:ShowTool("")
        else
            self:PlayAnim(CityResidentDefines.AnimName.Research, animSpeed, true)
            self:ShowTool("")
        end
    else
        self:PlayAnim(CityResidentDefines.AnimName.Idle, animSpeed, true)
        self:ShowTool("")
    end
end

local function ShowTool(self, toolName)
    if self:HasObj() then
        self.obj:ShowTool(toolName)
    end
end

local function IsDead(self)
    if self.type == CityResidentDefines.Type.Resident then
        return self.state == CityResidentDefines.State.Dead or
               self.state == CityResidentDefines.State.BeFire
    elseif self.type == CityResidentDefines.Type.Zombie then
        return self.state == CityResidentDefines.ZombieState.Dying or
               self.state == CityResidentDefines.ZombieState.Dead or
               self.state == CityResidentDefines.ZombieState.BeFire
    elseif self.type == CityResidentDefines.Type.Animal then
        -- TODO: Beef
    end
    return false
end

local function CanBeAttackZombie(self)
    if not self.isInvincible and not self:IsDead() and self.attacker == nil then
        local dis = self:GetDistanceToMain()
        return dis <= DataCenter.CityResidentManager:GetHeroSearchZombieRange()
    end
    return false
end

local function SearchZombie(self)
    if self.isGuideControl or self.isSpecialControl then
        return false
    end
    
    local curPos = self:GetPos()
    local oldData = self.target
    if self.state ~= CityResidentDefines.HeroState.PreAttack and self.state ~= CityResidentDefines.HeroState.Attack then
        local zombieData = DataCenter.CityResidentManager:GetCanBeAttackZombie(curPos, CityResidentDefines.HeroAttackRange, self.preferTargets)
        if zombieData then
            if oldData then
                oldData.attacker = nil
            end
            self.target = zombieData
            zombieData.attacker = self
            self:SetState(CityResidentDefines.HeroState.PreAttack)
            return true
        end
    end
    if self.state ~= CityResidentDefines.HeroState.GoToFire and self.state ~= CityResidentDefines.HeroState.Fire and
       self.state ~= CityResidentDefines.HeroState.PreAttack and self.state ~= CityResidentDefines.HeroState.Attack then
        local data = DataCenter.CityResidentManager:GetFireBody(curPos)
        if data then
            if oldData then
                oldData.attacker = nil
            end
            self.target = data
            data.attacker = self
            self:SetState(CityResidentDefines.HeroState.GoToFire)
            return true
        end
    end
    return false
end

local function SearchResident(self, forceRefresh)
    if self.isGuideControl or self.isSpecialControl then
        return
    end
    if self:IsDead() then
        return
    end
    if not self:HasObj() then
        return
    end
    if self.state == CityResidentDefines.ZombieState.Escape or
       self.state == CityResidentDefines.ZombieState.Retreat or
       self.state == CityResidentDefines.ZombieState.Invade or
       self.state == CityResidentDefines.ZombieState.AttackWall or
       self.state == CityResidentDefines.ZombieState.Hurt then
        return
    end
    
    local curPos = self:GetPos()
    
    -- 攻击
    local rangeSqr = DataCenter.CityResidentManager:GetZombieAttackRange() ^ 2
    local dataList = DataCenter.CityResidentManager:GetDataListInRange(CityResidentDefines.Type.Resident, curPos, rangeSqr)
    local target = self:SearchResidentToAttack(curPos, dataList)
    if target then
        if forceRefresh or self.state ~= CityResidentDefines.ZombieState.Attack or self.target ~= target then
            self.target = target
            self.chaseOutside = not DataCenter.CityResidentManager:IsZombieInvade()
            self:SetState(CityResidentDefines.ZombieState.Attack)
        end
        return
    end
    
    -- 追赶
    rangeSqr = DataCenter.CityResidentManager:GetZombieChaseRange() ^ 2
    dataList = DataCenter.CityResidentManager:GetDataListInRange(CityResidentDefines.Type.Resident, curPos, rangeSqr)
    target = self:SearchResidentToChase(curPos, dataList)
    if target then
        if forceRefresh or
           (self.state ~= CityResidentDefines.ZombieState.Chase and self.state ~= CityResidentDefines.ZombieState.Attack) or
           self.target ~= target then
            self.target = target
            self.chaseOutside = not DataCenter.CityResidentManager:IsZombieInvade()
            self:SetState(CityResidentDefines.ZombieState.Chase)
            
            -- 红叹号
            local hudParam = {}
            hudParam.uuid = self.uuid
            hudParam.GetPos = function() return self:GetPos() end
            hudParam.type = CityHudType.Emoji
            hudParam.emoType = CityResidentDefines.EmoType.Alert
            hudParam.worldOffset = Vector3.New(0, 1.2, 0)
            hudParam.duration = 1.5
            hudParam.updateEveryFrame = true
            hudParam.layer = CityHudLayer.Speak
            hudParam.location = CityHudLocation.UI
            DataCenter.CityHudManager:Create(hudParam)
        end
        return
    end

    -- 前往建筑
    if DataCenter.CityResidentManager:IsZombieInvade() then
        target = self:SearchBuildingToChase(curPos, dataList)
        if target then
            if forceRefresh or
               (self.state ~= CityResidentDefines.ZombieState.ChaseBuilding and self.state ~= CityResidentDefines.ZombieState.AttackBuilding) or
               self.targetBUuid ~= target.atBUuid then
                self.target = target
                self.targetBUuid = target.atBUuid
                self.chaseOutside = not DataCenter.CityResidentManager:IsZombieInvade()
                self:SetState(CityResidentDefines.ZombieState.ChaseBuilding)
            end
            return
        end
    end
    
    if forceRefresh or
       self.state == CityResidentDefines.ZombieState.Attack or
       self.state == CityResidentDefines.ZombieState.Chase or
       self.state == CityResidentDefines.ZombieState.ChaseBuilding
    then
        self:Refresh()
    end
end

local function SearchResidentToChase(self, curPos, dataList)
    local target = nil
    local minDisSqr = IntMaxValue
    for _, data in ipairs(dataList) do
        if data:IsLegalTarget() then
            if data.state ~= CityResidentDefines.State.ScareHide or not DataCenter.VitaManager:IsFurnaceOpen() then
                local pos = data:GetPos()
                local disSqr = (pos.x - curPos.x) ^ 2 + (pos.z - curPos.z) ^ 2
                if disSqr < minDisSqr then
                    minDisSqr = disSqr
                    target = data
                end
            end
        end
    end
    
    return target
end

local function SearchBuildingToChase(self, curPos, dataList)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local target = nil
    local minDisSqr = IntMaxValue
    for _, data in ipairs(dataList) do
        if not data:IsDead() and data:IsInBuilding() and not data:IsInDestroyedBuilding() then
            local ignoreTime = self.ignoreBUuidTimeDict[data.atBUuid] or 0
            if curTime - ignoreTime >= CityResidentDefines.ZombieIgnoreBuildingDuration * 1000 then -- 不在无视名单中
                local pos = data:GetPos()
                local disSqr = (pos.x - curPos.x) ^ 2 + (pos.z - curPos.z) ^ 2
                if disSqr < minDisSqr then
                    minDisSqr = disSqr
                    target = data
                end
            end
        end
    end
    
    return target
end

local function SearchResidentToAttack(self, curPos, dataList)
    local minDisSqr = IntMaxValue
    local target = nil
    for _, data in ipairs(dataList) do
        if data:IsLegalTarget() then
            if data.state ~= CityResidentDefines.State.ScareHide or not DataCenter.VitaManager:IsFurnaceOpen() then
                local pos = data:GetPos()
                local disSqr = (pos.x - curPos.x) ^ 2 + (pos.z - curPos.z) ^ 2
                if disSqr < minDisSqr then
                    minDisSqr = disSqr
                    target = data
                end
            end
        end
    end
    
    return target
end

local function IsLegalTarget(self)
    if self.type == CityResidentDefines.Type.Resident then
        if self:IsDead() or self:IsInBuilding() or self.residentData:IsReady() or self.residentData.deadReason ~= VitaDefines.ResidentDeadReason.None then
            return false
        end
        
        if DataCenter.VitaManager:IsFurnaceOpen() then
            local flag = self:GetEndWayPointFlag()
            if (flag & CityResidentDefines.WayPointFlag.SafeHide) ~= 0 then
                return false
            end
        end
    end
    return true
end

local function ShowHeroTorch(self)
    if self:HasObj() then
        self.obj:SetTorchActive(true)
        self.obj:SetWeaponActive(false)
    end
end

local function ShowHeroWeapon(self)
    if self:HasObj() then
        self.obj:SetTorchActive(false)
        self.obj:SetWeaponActive(true)
    end
end

local function ShowFireParticle(self)
    if self:HasObj() then
        self.obj:ShowFireParticle()
    end
end

local function HideFireParticle(self)
    if self:HasObj() then
        self.obj:HideFireParticle()
    end
end

local function SetSpeed(self, speed)
    if self:HasObj() then
        self.obj.mover.speed = speed * self:GetMoveSpeedFactor()
    end
end

local function GetMoveSpeedFactor(self)
    local factor = 1
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local dayNight = DataCenter.VitaManager:GetDayNight(curTime)
    if self.type == CityResidentDefines.Type.Resident then
        if self:IsScared() then
            -- 遇到丧尸逃跑时
            factor = factor * (1 + self.residentData:GetEffectVal(EffectDefine.FEATURE_SCARE_MOVE_SPD_INC) * 0.01)
        end
        if dayNight == VitaDefines.DayNight.Day then
            -- 白天
            factor = factor * (1 + self.residentData:GetEffectVal(EffectDefine.FEATURE_DAY_MOVE_SPD_INC) * 0.01)
            factor = factor * (1 - self.residentData:GetEffectVal(EffectDefine.FEATURE_DAY_MOVE_SPD_DEC) * 0.01)
        else
            -- 夜晚
            factor = factor * (1 + self.residentData:GetEffectVal(EffectDefine.FEATURE_NIGHT_MOVE_SPD_INC) * 0.01)
            factor = factor * (1 - self.residentData:GetEffectVal(EffectDefine.FEATURE_NIGHT_MOVE_SPD_DEC) * 0.01)
        end
    end
    return factor
end

local function GetWorkSpeedFactor(self)
    local factor = 1
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local dayNight = DataCenter.VitaManager:GetDayNight(curTime)
    if self.type == CityResidentDefines.Type.Resident then
        if dayNight == VitaDefines.DayNight.Day then
            -- 白天
            factor = factor * (1 + self.residentData:GetEffectVal(EffectDefine.FEATURE_DAY_MOVE_SPD_INC) * 0.01)
            factor = factor * (1 - self.residentData:GetEffectVal(EffectDefine.FEATURE_DAY_MOVE_SPD_DEC) * 0.01)
        else
            -- 夜晚
            factor = factor * (1 + self.residentData:GetEffectVal(EffectDefine.FEATURE_NIGHT_MOVE_SPD_INC) * 0.01)
            factor = factor * (1 - self.residentData:GetEffectVal(EffectDefine.FEATURE_NIGHT_MOVE_SPD_DEC) * 0.01)
        end
    end
    return factor
end

local function SetAutoAnim(self, autoAnim)
    self.autoAnim = autoAnim
end

local function PlayAnim(self, animName, animSpeed, force)
    animSpeed = animSpeed or 1
    if force or self.animName ~= animName or self.animSpeed ~= animSpeed then
        self.animName = animName
        self.animSpeed = animSpeed
        if self:HasObj() then
            self.obj:PlayAnim(animName, animSpeed)
        end
    end
end

local function GetAnimDuration(self, animName, animSpeed)
    animSpeed = animSpeed or 1
    if self:HasObj() then
        return self.obj:GetAnimDuration(animName, animSpeed)
    end
    return 0
end

local function WaitForFinish(self, delay)
    self:ClearWaitForFinish()
    self.finishCd = delay
end

local function ClearWaitForFinish(self)
    self.finishCd = 0
end

local function CheckShowDanger(self)
    if self:HasObj() and not self.residentData:IsReady() and not self:IsDead() then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if self.state ~= CityResidentDefines.State.Sleep and self.state ~= CityResidentDefines.State.Eat then
            local vitaData = DataCenter.VitaManager:GetData()
            if self:IsScared() and curTime - self.scareStartTime <= CityResidentDefines.ResidentScareHudDuration * 1000 then
                -- 惊恐
                local hudParam = {}
                hudParam.uuid = self.uuid
                hudParam.GetPos = function() return self:GetPos() end
                hudParam.type = CityHudType.ResidentDanger
                hudParam.icon = "Assets/Main/Sprites/UI/UIMain/Scare1"
                hudParam.worldOffset = Vector3.New(0.3, 0.8, 0)
                hudParam.updateEveryFrame = true
                hudParam.location = CityHudLocation.World
                hudParam.duration = CityResidentDefines.ResidentScareHudDuration + 0.5
                hudParam.callback = function()
                    self:CheckShowDanger()
                end
                DataCenter.CityHudManager:Create(hudParam)
                return
            --elseif self:IsDrunk() then
            --    -- 喝醉
            --    local hudParam = {}
            --    hudParam.uuid = self.uuid
            --    hudParam.GetPos = function() return self:GetPos() end
            --    hudParam.type = CityHudType.ResidentDanger
            --    hudParam.icon = "Assets/Main/Sprites/UI/UIMain/icon_fire_red3"
            --    hudParam.worldOffset = Vector3.New(0.3, 0.8, 0)
            --    hudParam.updateEveryFrame = true
            --    hudParam.location = CityHudLocation.World
            --    DataCenter.CityHudManager:Create(hudParam)
            --    return
            elseif self.residentData:IsSick() then
                -- 生病
                local hudParam = {}
                hudParam.uuid = self.uuid
                hudParam.GetPos = function() return self:GetPos() end
                hudParam.type = CityHudType.ResidentDanger
                hudParam.icon = "Assets/Main/Sprites/UI/UIMain/com_icon_shengbing"
                hudParam.worldOffset = Vector3.New(0.3, 0.8, 0)
                hudParam.updateEveryFrame = true
                hudParam.location = CityHudLocation.World
                DataCenter.CityHudManager:Create(hudParam)
                return
            elseif self.residentData:IsStrike() then
                -- 罢工
                local hudParam = {}
                hudParam.uuid = self.uuid
                hudParam.GetPos = function() return self:GetPos() end
                hudParam.type = CityHudType.ResidentDanger
                hudParam.icon = "Assets/Main/Sprites/UI/UIMain/com_icon_bagong2"
                hudParam.worldOffset = Vector3.New(0.3, 0.8, 0)
                hudParam.updateEveryFrame = true
                hudParam.location = CityHudLocation.World
                DataCenter.CityHudManager:Create(hudParam)
                return
            elseif vitaData.hunger / VitaDefines.AttributeMax < CityResidentDefines.ResidentLowAttributePercent and
                   not self.eaten and not self.isGuideControl then
                -- 饥饿
                local hudParam = {}
                hudParam.uuid = self.uuid
                hudParam.GetPos = function() return self:GetPos() end
                hudParam.type = CityHudType.ResidentDanger
                hudParam.icon = "Assets/Main/Sprites/UI/UIMain/icon_buildProperty_stomach_1"
                hudParam.worldOffset = Vector3.New(0.3, 0.8, 0)
                hudParam.updateEveryFrame = true
                hudParam.location = CityHudLocation.World
                DataCenter.CityHudManager:Create(hudParam)
                return
            --elseif vitaData.sleep / VitaDefines.AttributeMax < CityResidentDefines.ResidentLowAttributePercent then
            --    -- 困倦
            --    local hudParam = {}
            --    hudParam.uuid = self.uuid
            --    hudParam.GetPos = function() return self:GetPos() end
            --    hudParam.type = CityHudType.ResidentDanger
            --    hudParam.icon = "Assets/Main/Sprites/UI/UIMain/icon_shuijiao"
            --    hudParam.offset = Vector3.New(20, 45, 0)
            --    hudParam.updateEveryFrame = true
            --    hudParam.location = CityHudLocation.World
            --    DataCenter.CityHudManager:Create(hudParam)
            --    return
            end
        end
    end
    DataCenter.CityHudManager:Destroy(self.uuid, CityHudType.ResidentDanger)
end

local function CheckShowStamina(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime - self.hurtTime <= CityResidentDefines.ResidentStaminaDuration * 1000 then
        if self:HasObj() and not self.residentData:IsReady() and not self:IsDead() and self.state ~= CityResidentDefines.State.Sleep and self.residentData.deadReason == VitaDefines.ResidentDeadReason.None == crd then
            local curStamina = self.residentData:GetCurStamina()
            local maxStamina = self.residentData:GetMaxStamina()
            if curStamina > 0 and curStamina < maxStamina then
                local hudParam = {}
                hudParam.uuid = self.uuid
                hudParam.GetPos = function() return self:GetPos() end
                hudParam.type = CityHudType.ResidentStamina
                hudParam.worldOffset = Vector3.New(0, 0.5, 0)
                hudParam.updateEveryFrame = true
                hudParam.location = CityHudLocation.World
                DataCenter.CityHudManager:Create(hudParam)
                return
            end
        end
    end
    DataCenter.CityHudManager:Destroy(self.uuid, CityHudType.ResidentStamina)
end

local function CheckShowWant(self)
    if DataCenter.CityResidentManager.wantCount >= DataCenter.CityResidentManager:GetResidentWantMaxCount() then
        return
    end
    DataCenter.CityResidentManager.wantCount = DataCenter.CityResidentManager.wantCount + 1
    if self:HasObj() and not self.residentData:IsReady() and not self:IsDead() and not self:IsScared() and
       self.residentData.deadReason == VitaDefines.ResidentDeadReason.None and
       DataCenter.CityHudManager:GetHudItem(self.uuid, CityHudType.ResidentDanger) == nil and
       DataCenter.CityHudManager:GetHudItem(self.uuid, CityHudType.Speak) == nil then
        local icon = nil
        if self.state == CityResidentDefines.State.Rest then
            if self.drunkEndTime == 0 then
                local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.DS_BAR)
                if buildData and buildData.level > 0 then
                    icon = "icon_beer"
                end
            end
        elseif self.state == CityResidentDefines.State.GoRestaurant then
            icon = "icon_cooking"
        elseif self.state == CityResidentDefines.State.GoToIdle then
            if self.idleFurnitureId == FurnitureType.Pool then
                icon = "icon_handwashing"
            elseif self.idleFurnitureId == FurnitureType.Desk then
                icon = "icon_read"
            end
        elseif self.state == CityResidentDefines.State.GoToWork then
            local career = self:GetCareer()
            if career == CityResidentDefines.Career.Hunter then
                icon = "icon_meat"
            elseif career == CityResidentDefines.Career.Smith then
                icon = "icon_steel"
            elseif career == CityResidentDefines.Career.Sawyer then
                icon = "icon_wood"
            elseif career == CityResidentDefines.Career.Powerman then
                icon = "icon_electricity"
            end
        elseif self.state == CityResidentDefines.State.Overwork then
            if not self.overworked then
                icon = "icon_word"
            end
        elseif self.state == CityResidentDefines.State.GoToSleep then
            icon = "icon_sleep"
        end
        
        if icon then
            local hudParam = {}
            hudParam.uuid = self.uuid
            hudParam.icon = string.format(LoadPath.UIVita, icon)
            hudParam.GetPos = function() return self:GetPos() end
            hudParam.type = CityHudType.ResidentWant
            hudParam.worldOffset = Vector3.New(0.4, 1, 0)
            hudParam.updateEveryFrame = true
            hudParam.location = CityHudLocation.World
            hudParam.duration = DataCenter.CityResidentManager:GetResidentWantDuration()
            hudParam.onClose = function()
                DataCenter.CityResidentManager.wantCount = DataCenter.CityResidentManager.wantCount - 1
            end
            DataCenter.CityHudManager:Create(hudParam)
            return
        end
    end
    DataCenter.CityHudManager:Destroy(self.uuid, CityHudType.ResidentWant)
end

local function CheckShowFireBody(self)
    if not DataCenter.CityResidentManager:IsZombieInvade() then
        if self:HasObj() and not self.residentData:IsReady() and self:IsDead() and
           not DataCenter.CityResidentManager:IsFireBody(self.uuid) and
           self.residentData.deadReason == VitaDefines.ResidentDeadReason.Zombie then
            local hudParam = {}
            hudParam.uuid = self.uuid
            hudParam.pos = self:GetPos()
            hudParam.type = CityHudType.ResidentFireBody
            hudParam.offset = Vector3.New(0, 10, 0)
            hudParam.location = CityHudLocation.UI
            DataCenter.CityHudManager:Create(hudParam)
            return
        end
    end
    DataCenter.CityHudManager:Destroy(self.uuid, CityHudType.ResidentFireBody)
end

-- 暂停
local function Pause(self)
    if self.paused then
        return
    end
    self.paused = true
    if self:HasObj() then
        self.obj:PauseAnim()
        self.obj.mover:Pause()
    end
end

-- 继续
local function Resume(self)
    if not self.paused then
        return
    end
    self.paused = false
    if self:HasObj() then
        self.obj:ResumeAnim()
        self.obj.mover:Resume()
    end
end

local function SetActive(self, active)
    if self.active == active then
        return
    end
    self.active = active
    if self:HasObj() then
        self.obj:SetActive(active)
    end
    if active then
        self:Refresh()
    else
        self:SetState("None")
        DataCenter.CityHudManager:Destroy(self.uuid)
    end
end

local function CanShowLevelUp(self)
    if not self:HasObj() or self.residentData:IsReady() or self.residentData:IsStrike() or self:IsDead() or self:IsScared() then
        return false
    end
    if self.state == CityResidentDefines.State.Sick or
       self.state == CityResidentDefines.State.SickSleepHouse or
       self.state == CityResidentDefines.State.SickSleepHospital or
       self.state == CityResidentDefines.State.PlayPool or
       self.state == CityResidentDefines.State.PlayDesk then
        return false
    end
    return true
end

local function SetPreferTargets(self, preferTargets)
    self.preferTargets = preferTargets
end

local function CheckShowReadyQueueHud(self)
    if self.readyIndex == 1 then
        local hudItem = DataCenter.CityHudManager:GetHudItemByType(CityHudType.ReadyQueue)
        if hudItem then
            return
        end
        if DataCenter.CityResidentManager.readyQueueHudSwitch then
            local hudParam = {}
            hudParam.uuid = self.uuid
            hudParam.pos = self:GetPos() + Vector3.New(0, 1, 0)
            hudParam.type = CityHudType.ReadyQueue
            hudParam.location = CityHudLocation.UI
            hudParam.unique = true
            DataCenter.CityHudManager:Create(hudParam)
            return
        end
    end
    DataCenter.CityHudManager:Destroy(self.uuid, CityHudType.ReadyQueue)
end

local function CheckShowBetrayHud(self)
    if self.betrayIndex == 1 then
        if DataCenter.CityResidentManager.readyQueueHudSwitch then
            local hudParam = {}
            hudParam.uuid = self.uuid
            hudParam.pos = self:GetPos() + Vector3.New(0, 1, 0)
            hudParam.type = CityHudType.ResidentBetray
            hudParam.location = CityHudLocation.UI
            hudParam.unique = true
            DataCenter.CityHudManager:Create(hudParam)
            return
        end
    end
    DataCenter.CityHudManager:Destroy(self.uuid, CityHudType.ResidentBetray)
end

local function Hurt(self, rawDamage)
    if self.type == CityResidentDefines.Type.Resident then
        local damage = rawDamage - self.residentData.defense
        local hudParam = {}
        hudParam.type = CityHudType.PopText
        hudParam.pos = self:GetPos()
        hudParam.icon = string.format(LoadPath.UIVita, "survivor_icon_healthy06")
        hudParam.text = "<color=red>-" .. damage .. "</color>"
        hudParam.offset = Vector3.New(0, 50, 0)
        hudParam.duration = 1
        hudParam.location = CityHudLocation.World
        DataCenter.CityHudManager:Create(hudParam)
        
        local wasInjured = self:IsInjured()
        self.residentData:ChangeStamina(-damage)
        local isInjured = self:IsInjured()
        if not wasInjured and isInjured then
            -- 小人说话
            local param = {}
            param.type = CityResidentDefines.TalkTriggerType.ResidentHurt
            param.rUuid = self.uuid
            DataCenter.CityResidentManager:TryResidentTalk(param)
        end
        
        local curTime = UITimeManager:GetInstance():GetServerTime()
        self.hurtTime = curTime
        if self.hurtTimer then
            self.hurtTimer:Stop()
        end
        
        local stamina = self.residentData:GetCurStamina()
        if stamina <= 0 then
            self:Die()
        else
            self:CheckShowStamina()
            self.hurtTimer = TimerManager:GetInstance():DelayInvoke(function()
                self:CheckShowStamina()
                self.hurtTimer = nil
            end, CityResidentDefines.ResidentStaminaDuration + 1)
        end
    elseif self.type == CityResidentDefines.Type.Zombie then
        self.zombieStamina = self.zombieStamina - rawDamage
        if self.zombieStamina <= 0 then
            self:Die()
        end
    elseif self.type == CityResidentDefines.Type.Animal then
        self:Die()
    end
end

local function Die(self)
    if self.type == CityResidentDefines.Type.Resident then
        self:SetState(CityResidentDefines.State.Dead)
        DataCenter.CityHudManager:Destroy(self.uuid)
        DataCenter.CityResidentManager:OnResidentDie(self.uuid)
        if self.uuid > 0 then
            DataCenter.VitaManager:SendZombieAttack({ self.uuid }, VitaDefines.ZombieAttackResultType.Dead)
        end
    elseif self.type == CityResidentDefines.Type.Zombie then
        self:SetState(CityResidentDefines.ZombieState.Dying)
    elseif self.type == CityResidentDefines.Type.Animal then
        self:SetState(CityResidentDefines.AnimalState.Dead)
    end
end

local function BeFire(self)
    if self.type == CityResidentDefines.Type.Resident then
        self:SetState(CityResidentDefines.State.BeFire)
    elseif self.type == CityResidentDefines.Type.Zombie then
        self:SetState(CityResidentDefines.ZombieState.BeFire)
    end
end

local function IsInBuilding(self)
    return self.atBUuid ~= 0
end

local function IsInDestroyedBuilding(self)
    if not self:IsInBuilding() then
        return false
    end

    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(self.atBUuid)
    return buildData:GetCurStamina() <= 0
end

local function GetStartWayPointFlag(self)
    if not self:HasObj() then
        return CityResidentDefines.WayPointFlag.None
    end
    local wayPoint = self.obj.mover:GetStartPoint()
    if wayPoint then
        return wayPoint.flag
    end
    return CityResidentDefines.WayPointFlag.None
end

local function GetEndWayPointFlag(self)
    if not self:HasObj() then
        return CityResidentDefines.WayPointFlag.None
    end
    local wayPoint = self.obj.mover:GetEndPoint()
    if wayPoint then
        return wayPoint.flag
    end
    return CityResidentDefines.WayPointFlag.None
end

local function IsInjured(self)
    local curStamina = self.residentData:GetCurStamina()
    local injuredStamina = DataCenter.CityResidentManager:GetResidentInjuredStamina()
    return curStamina > 0 and curStamina < injuredStamina
end

local function IsScared(self)
    if self.type == CityResidentDefines.Type.Resident then
        return self.state == CityResidentDefines.State.Scare or self.state == CityResidentDefines.State.ScareHide
    end
    return false
end

local function IsDrunk(self)
    if self.drunkEndTime == 0 then
        return false
    end
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    return curTime < self.drunkEndTime
end

-- 逃离安全区域
local function TryEscapeFromSafe(self)
    if self.state == CityResidentDefines.ZombieState.Attack or 
       self.state == CityResidentDefines.ZombieState.AttackBuilding or
       self.state == CityResidentDefines.ZombieState.Chase or
       self.state == CityResidentDefines.ZombieState.ChaseBuilding or
       self.state == CityResidentDefines.ZombieState.Invade or
       self.state == CityResidentDefines.ZombieState.InvadeIdle or
       self.state == CityResidentDefines.ZombieState.InvadeWalk or
       self.state == CityResidentDefines.ZombieState.Siege then
        if DataCenter.VitaManager:IsFurnaceOpen() then
            local curPos = self:GetPos()
            local disSqr = (curPos.x - MainPos.x) ^ 2 + (curPos.z - MainPos.z) ^ 2
            local safeRadiusSqr = DataCenter.CityResidentManager:GetSafeRadius() ^ 2
            if disSqr < safeRadiusSqr then
                self:SetState(CityResidentDefines.ZombieState.Escape)
                return true
            end
        end
    end
    return false
end

local function SetLifetime(self, lifetime)
    self.lifetime = lifetime
end

local function ZombieSetRedEye(self, isRedEye)
    if not self:HasObj() then
        return
    end
    
    TimerManager:GetInstance():DelayInvoke(function()
        self.obj:SetMaterialPropertyFloat("_EmissionIntensity", isRedEye and 1 or 0)
    end, 0.1)
end

local function Revive(self)
    local cost = DataCenter.CityResidentManager:GetReviveCost()
    local curStamina = self.residentData:GetCurStamina()
    local deltaStamina = -math.max(curStamina - 1, cost.stamina)
    self.residentData:ChangeStamina(deltaStamina)
    local curMood = self.residentData:GetCurMood()
    local deltaMood = -math.max(curMood - 1, cost.mood)
    self.residentData:ChangeMood(deltaMood)

    self:SetState(CityResidentDefines.State.Idle)
    if self.uuid > 0 then
        DataCenter.VitaManager:SendZombieAttack({ self.uuid }, VitaDefines.ZombieAttackResultType.Sick)
    end
end

-- 闲置
local function Idle(self)
    if not self:HasObj() then
        return
    end

    if DataCenter.CityResidentManager:UseNewPathMethod() then
        -- 新方法
        self:ClearMove()
    else
        -- 旧方法
        self.obj.mover:Clear()
    end
end

-- 前往城内的位置
local function GoToCityPos(self, pos)
    if not self:HasObj() then
        return
    end

    local curPos = self:GetPos()
    if DataCenter.CityResidentManager:UseNewPathMethod() then
        -- 新方法
        self:ClearMove()
        local mask = DataCenter.CityResidentManager:GetCurrentCityMask()
        if self:IsInBuilding() then
            -- 在房子内
            self:AutoAnimInside()
            curPos = self:EnqueueLeaveBuilding(curPos, self.atBUuid)
        else
            -- 不在房子内
            self:AutoAnimOutside()
        end
        curPos = self:EnqueueGoToMaskPos(curPos, pos, mask, CityResidentDefines.WayPointFlag.City)
        curPos = self:EnqueueGoToAccuratePos(curPos, pos)
        self:TryNextMove()
    else
        -- 旧方法
        self.obj.mover:Clear()
        local mask = DataCenter.CityResidentManager:GetCurrentCityMask()
        if not self:IsInBuilding() then
            -- 不在房子内
            self:AutoAnimOutside()
            curPos = self:EnqueueGoToMaskPos(curPos, pos, mask, CityResidentDefines.WayPointFlag.City)
        else
            -- 在房子内
            self:AutoAnimInside()
            curPos = self:EnqueueLeaveBuilding(curPos, self.atBUuid)
            curPos = self:EnqueueGoToMaskPos(curPos, pos, mask, CityResidentDefines.WayPointFlag.City)
        end
        curPos = self:EnqueueGoToAccuratePos(curPos, pos, function()
            self:OnFinish()
        end)
        self.obj.mover:StartNextPath()
    end
end

-- 直接前往位置
local function GoToPosDirectly(self, pos)
    if not self:HasObj() then
        return
    end

    local curPos = self:GetPos()
    if DataCenter.CityResidentManager:UseNewPathMethod() then
        -- 新方法
        self:ClearMove()
        curPos = self:EnqueueGoToAccuratePos(curPos, pos)
        self:TryNextMove()
    else
        -- 旧方法
        self.obj.mover:Clear()
        curPos = self:EnqueueGoToAccuratePos(curPos, pos, function()
            self:OnFinish()
        end)
        self.obj.mover:StartNextPath()
    end
end

-- 前往同mask的位置
local function GoToPos(self, pos, mask, flag, arg, accurate)
    if not self:HasObj() then
        return
    end
    flag = flag or CityResidentDefines.WayPointFlag.All

    local curPos = self:GetPos()
    if DataCenter.CityResidentManager:UseNewPathMethod() then
        -- 新方法
        self:ClearMove()
        curPos = self:EnqueueGoToMaskPos(curPos, pos, mask, flag, arg)
        if accurate then
            curPos = self:EnqueueGoToAccuratePos(curPos, pos)
        end
        self:TryNextMove()
    else
        -- 旧方法
        self.obj.mover:Clear()
        curPos = self:EnqueueGoToMaskPos(curPos, pos, mask, flag, arg, function()
            if not accurate then
                self:OnFinish()
            end
        end)
        if accurate then
            curPos = self:EnqueueGoToAccuratePos(curPos, pos, function()
                self:OnFinish()
            end)
        end
        self.obj.mover:StartNextPath()
    end
end

-- 前往建筑内随机位置
local function GoToBuildingRandomPos(self, bUuid, flag)
    if not self:HasObj() then
        return
    end
    local pos = WayPointUtil.GetRandomPos(bUuid, flag)
    self:GoToBuildingPos(bUuid, pos, true)
end

-- 前往建筑内的位置
local function GoToBuildingPos(self, bUuid, pos, accurate)
    if not self:HasObj() then
        return
    end

    local curPos = self:GetPos()
    if DataCenter.CityResidentManager:UseNewPathMethod() then
        -- 新方法
        self:ClearMove()
        if self:IsInBuilding() then
            -- 在房子内
            self:AutoAnimInside()
            if self.atBUuid == bUuid then
                -- 在同一房子内
                curPos = self:EnqueueGoToMaskPos(curPos, pos, bUuid, CityResidentDefines.WayPointFlag.City)
            else
                -- 在不同房子内
                curPos = self:EnqueueLeaveBuilding(curPos, self.atBUuid)
                curPos = self:EnqueueGoToBuilding(curPos, bUuid)
                curPos = self:EnqueueGoToMaskPos(curPos, pos, bUuid, CityResidentDefines.WayPointFlag.City)
            end
        else
            -- 不在房子内
            self:AutoAnimOutside()
            curPos = self:EnqueueGoToBuilding(curPos, bUuid)
            curPos = self:EnqueueGoToMaskPos(curPos, pos, bUuid, CityResidentDefines.WayPointFlag.City)
        end
        self:TryNextMove()
    else
        -- 旧方法
        self.obj.mover:Clear()
        if not self:IsInBuilding() then
            -- 不在房子内
            self:AutoAnimOutside()
            curPos = self:EnqueueGoToBuilding(curPos, bUuid)
            curPos = self:EnqueueGoToMaskPos(curPos, pos, bUuid, CityResidentDefines.WayPointFlag.City, nil, function()
                if not accurate then
                    self:OnFinish()
                end
            end)
        else
            self:AutoAnimInside()
            if self.atBUuid == bUuid then
                -- 在同一房子内
                curPos = self:EnqueueGoToMaskPos(curPos, pos, bUuid, CityResidentDefines.WayPointFlag.City, nil, function()
                    if not accurate then
                        self:OnFinish()
                    end
                end)
            else
                -- 在不同房子内
                curPos = self:EnqueueLeaveBuilding(curPos, self.atBUuid)
                curPos = self:EnqueueGoToBuilding(curPos, bUuid)
                curPos = self:EnqueueGoToMaskPos(curPos, pos, bUuid, CityResidentDefines.WayPointFlag.City, nil, function()
                    if not accurate then
                        self:OnFinish()
                    end
                end)
            end
        end
        if accurate then
            curPos = self:EnqueueGoToAccuratePos(curPos, pos, function()
                self:OnFinish()
            end)
        end
        self.obj.mover:StartNextPath()
    end
end

-- 前往家具
local function GoToFurniture(self, fUuid)
    if not self:HasObj() then
        return
    end
    
    local curPos = self:GetPos()
    if DataCenter.CityResidentManager:UseNewPathMethod() then
        -- 新方法
        local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
        local bUuid = furnitureInfo.bUuid
        self:ClearMove()
        if self:IsInBuilding() then
            -- 在房子内
            if self.atBUuid == bUuid then
                -- 在同一房子内
                self:AutoAnimInside()
                curPos = self:EnqueueGoToFurniture(curPos, fUuid)
            else
                -- 在不同房子内
                self:AutoAnimInside()
                curPos = self:EnqueueLeaveBuilding(curPos, self.atBUuid)
                curPos = self:EnqueueGoToBuilding(curPos, bUuid)
                curPos = self:EnqueueGoToFurniture(curPos, fUuid)
            end
        else
            -- 不在房子内
            self:AutoAnimOutside()
            curPos = self:EnqueueGoToBuilding(curPos, bUuid)
            curPos = self:EnqueueGoToFurniture(curPos, fUuid)
        end
        self:TryNextMove()
    else
        -- 旧方法
        self.obj.mover:Clear()
        local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
        if furnitureInfo then
            local bUuid = furnitureInfo.bUuid
            if not self:IsInBuilding() then
                -- 不在房子内
                self:AutoAnimOutside()
                curPos = self:EnqueueGoToBuilding(curPos, bUuid)
                curPos = self:EnqueueGoToFurniture(curPos, fUuid, function()
                    self:OnFinish()
                end)
            else
                if self.atBUuid == bUuid then
                    -- 在同一房子内
                    self:AutoAnimInside()
                    curPos = self:EnqueueGoToFurniture(curPos, fUuid, function()
                        self:OnFinish()
                    end)
                else
                    -- 在不同房子内
                    self:AutoAnimInside()
                    curPos = self:EnqueueLeaveBuilding(curPos, self.atBUuid)
                    curPos = self:EnqueueGoToBuilding(curPos, bUuid)
                    curPos = self:EnqueueGoToFurniture(curPos, fUuid, function()
                        self:OnFinish()
                    end)
                end
            end
        end
        self.obj.mover:StartNextPath()
    end
end

local function TryNextMove(self)
    self.moveIndex = self.moveIndex + 1
    local moveParam = self.moveParamQueue[self.moveIndex]
    if moveParam then
        local curPos = self:GetPos()
        if moveParam.type == CityResidentDefines.MoveType.GoToAccuratePos then
            self.obj.mover:BeginStraight(curPos, moveParam.pos)
        else
            self.obj.mover:Begin(curPos, moveParam.pos, moveParam.mask, moveParam.flag, moveParam.arg)
        end
    else
        self:ClearMove()
        self:OnFinish()
    end
end

local function ClearMove(self)
    self.moveIndex = 0
    self.moveParamQueue = {}
    self.obj.mover:Clear()
end

local function EnqueueLeaveBuilding(self, startPos, bUuid, callback)
    local wayPoint = WayPointUtil.GetNearWayPoint(startPos, bUuid, CityResidentDefines.WayPointFlag.Exit)
    if wayPoint then
        if DataCenter.CityResidentManager:UseNewPathMethod() then
            -- 新方法
            local moveParam = {}
            moveParam.type = CityResidentDefines.MoveType.LeaveBuilding
            moveParam.pos = wayPoint.pos
            moveParam.mask = bUuid
            moveParam.flag = CityResidentDefines.WayPointFlag.City
            moveParam.arg = nil
            moveParam.bUuid = bUuid
            table.insert(self.moveParamQueue, moveParam)
            return wayPoint.pos
        else
            -- 旧方法
            local endPos = self.obj.mover:AddPath(startPos, wayPoint.pos, bUuid, CityResidentDefines.WayPointFlag.City, nil, function()
                self.atBUuid = 0
                self:AutoAnimOutside()
                EventManager:GetInstance():Broadcast(EventId.CityResidentExitBuilding, { rUuid = self.uuid, bUuid = bUuid })
                if callback then
                    callback()
                end
            end)
            return endPos
        end
    end
    return startPos
end

local function EnqueueGoToBuilding(self, startPos, bUuid, callback)
    local wayPoint = WayPointUtil.GetNearWayPoint(startPos, bUuid, CityResidentDefines.WayPointFlag.Entrance)
    if wayPoint then
        local mask = DataCenter.CityResidentManager:GetCurrentCityMask()
        if DataCenter.CityResidentManager:UseNewPathMethod() then
            -- 新方法
            local moveParam = {}
            moveParam.type = CityResidentDefines.MoveType.GoToBuilding
            moveParam.pos = wayPoint.pos
            moveParam.mask = mask
            moveParam.flag = CityResidentDefines.WayPointFlag.City
            moveParam.arg = nil
            moveParam.bUuid = bUuid
            table.insert(self.moveParamQueue, moveParam)
            return wayPoint.pos
        else
            -- 旧方法
            local endPos = self.obj.mover:AddPath(startPos, wayPoint.pos, mask, CityResidentDefines.WayPointFlag.City, nil, function()
                self.atBUuid = bUuid
                self:AutoAnimInside()
                EventManager:GetInstance():Broadcast(EventId.CityResidentEnterBuilding, { rUuid = self.uuid, bUuid = bUuid })
                if callback then
                    callback()
                end
            end)
            return endPos
        end
    end
    return startPos
end

local function EnqueueGoToFurniture(self, startPos, fUuid, callback)
    local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
    if furnitureInfo then
        local endPos
        local tf = DataCenter.CityResidentManager:GetFurnitureInteractTransform(fUuid, 1)
        if tf then
            endPos = tf.position
        else
            endPos = DataCenter.FurnitureObjectManager:GetWorldPositionByFurnitureUuid(fUuid)
        end
        if DataCenter.CityResidentManager:UseNewPathMethod() then
            -- 新方法
            local moveParam = {}
            moveParam.type = CityResidentDefines.MoveType.GoToFurniture
            moveParam.pos = endPos
            moveParam.mask = furnitureInfo.bUuid
            moveParam.flag = CityResidentDefines.WayPointFlag.City
            moveParam.arg = nil
            table.insert(self.moveParamQueue, moveParam)
            return endPos
        else
            -- 旧方法
            return self.obj.mover:AddPath(startPos, endPos, furnitureInfo.bUuid, CityResidentDefines.WayPointFlag.City, nil, callback)
        end
    end
    return startPos
end

local function EnqueueGoToMaskPos(self, startPos, endPos, mask, flag, arg, callback)
    arg = arg and tostring(arg) or nil

    if DataCenter.CityResidentManager:UseNewPathMethod() then
        -- 新方法
        local moveParam = {}
        moveParam.type = CityResidentDefines.MoveType.GoToMaskPos
        moveParam.pos = endPos
        moveParam.mask = mask
        moveParam.flag = flag
        moveParam.arg = arg
        table.insert(self.moveParamQueue, moveParam)
        return endPos
    else
        -- 旧方法
        return self.obj.mover:AddPath(startPos, endPos, mask, flag, arg, callback)
    end
end

local function EnqueueGoToAccuratePos(self, startPos, endPos, callback)
    if DataCenter.CityResidentManager:UseNewPathMethod() then
        -- 新方法
        local moveParam = {}
        moveParam.type = CityResidentDefines.MoveType.GoToAccuratePos
        moveParam.pos = endPos
        table.insert(self.moveParamQueue, moveParam)
        return endPos
    else
        -- 旧方法
        return self.obj.mover:Add(endPos, callback)
    end
end

local function AutoAnimInside(self)
    if not self.autoAnim then
        return
    end
    if self.type == CityResidentDefines.Type.Resident then
        if self:IsDrunk() or self:IsInjured() then
            self:PlayAnim(CityResidentDefines.AnimName.SickWalk)
            self:SetSpeed(DataCenter.CityResidentManager:GetResidentWalkSpeed())
        else
            self:PlayAnim(CityResidentDefines.AnimName.Walk)
            self:SetSpeed(DataCenter.CityResidentManager:GetResidentWalkSpeed())
        end
    end
end

local function AutoAnimOutside(self)
    if not self.autoAnim then
        return
    end
    if self.type == CityResidentDefines.Type.Resident then
        if self:IsDrunk() or self:IsInjured() then
            self:PlayAnim(CityResidentDefines.AnimName.SickWalk)
            self:SetSpeed(DataCenter.CityResidentManager:GetResidentWalkSpeed())
        else
            self:PlayAnim(CityResidentDefines.AnimName.Run)
            self:SetSpeed(DataCenter.CityResidentManager:GetResidentRunSpeed())
        end
    end
end

local function SetGuideControl(self, isGuideControl)
    self.isGuideControl = isGuideControl
    if isGuideControl then
        self:SetState("None")
    else
        if self.state == "None" then
            self:Refresh()
        end
    end
end

local function SetSpecialControl(self, isSpecialControl)
    self.isSpecialControl = isSpecialControl
    if isSpecialControl then
        self:SetState("None")
    else
        if self.state == "None" then
            self:Refresh()
        end
    end
end

local function OnUpdate(self, deltaTime)
    if self.paused or not self.active then
        return
    end
    self.stateDict[self.state]:OnUpdate(deltaTime)
    if self.onUpdate then
        self.onUpdate()
    end
    if self.finishCd > 0 then
        self.finishCd = self.finishCd - deltaTime
        if self.finishCd <= 0 then
            self.finishCd = 0
            self:OnFinish()
        end
    end
    self.isPosDirty = true

    self.lifetime = self.lifetime - deltaTime
    if self.lifetime <= 0 then
        DataCenter.CityResidentManager:RemoveData(self.uuid)
    end
end

local function OnCreate(self)
    if self.type == CityResidentDefines.Type.Zombie then
        self:ZombieSetRedEye(self.param.isRedEye)
    end
    if self.onCreate then
        self.onCreate()
    end
end

local function OnFinish(self)
    self.stateDict[self.state]:OnFinish()
    if self.onFinish then
        self.onFinish()
    end
end

local function OnRemove(self)
    DataCenter.CityResidentManager.occupyMgr:ReleaseAttackBuildPos(self.uuid)
    if self.onRemove then
        self.onRemove()
    end
    self.onCreate = nil
    self.onFinish = nil
    self.onRemove = nil
    local oldZombieData = self.target
    if oldZombieData then
        oldZombieData.attacker = nil
    end
end

local function OnClick(self)
    if self.onClick then
        self.onClick()
        return
    end

    if self.type == CityResidentDefines.Type.Resident then
        local lod = CS.SceneManager.World:GetLodLevel()
        if lod >= 3 and self:IsInBuilding() then
            -- 房屋遮挡
            local pointIndex = SceneUtils.WorldToTileIndex(self:GetPos())
            UIUtil.OnClickWorld(pointIndex)
        else
            if self:HasObj() and not self.residentData:IsReady() then
                DataCenter.CityResidentManager.detailZoom = CS.SceneManager.World.Zoom
                CS.SceneManager.World:AutoLookat(self:GetPos(), 14, 0.2, function()
                    if self.residentData:IsStrike() and DataCenter.VitaManager:ResidentHasTask(self.uuid) then
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaResidentStrike, NormalPanelAnim, self.uuid)
                    else
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaResidentDetail, NormalPanelAnim, self.uuid, false)
                    end
                end)
            end
        end
    end
end

local function OnMoveComplete(self)
    local moveParam = self.moveParamQueue[self.moveIndex]
    if moveParam then
        if moveParam.type == CityResidentDefines.MoveType.LeaveBuilding then
            self.atBUuid = 0
            self:AutoAnimOutside()
            EventManager:GetInstance():Broadcast(EventId.CityResidentExitBuilding, { rUuid = self.uuid, bUuid = moveParam.bUuid })
        elseif moveParam.type == CityResidentDefines.MoveType.GoToBuilding then
            self.atBUuid = moveParam.bUuid
            self:AutoAnimInside()
            EventManager:GetInstance():Broadcast(EventId.CityResidentEnterBuilding, { rUuid = self.uuid, bUuid = moveParam.bUuid })
        end
    end
    
    self:TryNextMove()
end

CityResidentData.__init = __init

CityResidentData.Clear = Clear
CityResidentData.HasObj = HasObj
CityResidentData.SetPos = SetPos
CityResidentData.GetPos = GetPos
CityResidentData.ResetPos = ResetPos
CityResidentData.SetRot = SetRot
CityResidentData.GetRot = GetRot
CityResidentData.LookAt = LookAt
CityResidentData.SetState = SetState
CityResidentData.GetState = GetState
CityResidentData.GetLastState = GetLastState
CityResidentData.Refresh = Refresh
CityResidentData.GetIndex = GetIndex
CityResidentData.GetDistanceToMain = GetDistanceToMain
CityResidentData.GetCareer = GetCareer
CityResidentData.PlayWorkAnim = PlayWorkAnim
CityResidentData.ShowTool = ShowTool
CityResidentData.IsDead = IsDead
CityResidentData.CanBeAttackZombie = CanBeAttackZombie
CityResidentData.SearchZombie = SearchZombie
CityResidentData.SearchResident = SearchResident
CityResidentData.SearchResidentToChase = SearchResidentToChase
CityResidentData.SearchBuildingToChase = SearchBuildingToChase
CityResidentData.SearchResidentToAttack = SearchResidentToAttack
CityResidentData.IsLegalTarget = IsLegalTarget
CityResidentData.ShowHeroTorch = ShowHeroTorch
CityResidentData.ShowHeroWeapon = ShowHeroWeapon
CityResidentData.ShowFireParticle = ShowFireParticle
CityResidentData.HideFireParticle = HideFireParticle
CityResidentData.SetSpeed = SetSpeed
CityResidentData.GetMoveSpeedFactor = GetMoveSpeedFactor
CityResidentData.GetWorkSpeedFactor = GetWorkSpeedFactor
CityResidentData.SetAutoAnim = SetAutoAnim
CityResidentData.PlayAnim = PlayAnim
CityResidentData.GetAnimDuration = GetAnimDuration
CityResidentData.WaitForFinish = WaitForFinish
CityResidentData.ClearWaitForFinish = ClearWaitForFinish
CityResidentData.CheckShowDanger = CheckShowDanger
CityResidentData.CheckShowStamina = CheckShowStamina
CityResidentData.CheckShowWant = CheckShowWant
CityResidentData.CheckShowFireBody = CheckShowFireBody
CityResidentData.Pause = Pause
CityResidentData.Resume = Resume
CityResidentData.SetActive = SetActive
CityResidentData.CanShowLevelUp = CanShowLevelUp
CityResidentData.SetPreferTargets = SetPreferTargets
CityResidentData.CheckShowReadyQueueHud = CheckShowReadyQueueHud
CityResidentData.CheckShowBetrayHud = CheckShowBetrayHud
CityResidentData.Hurt = Hurt
CityResidentData.Die = Die
CityResidentData.BeFire = BeFire
CityResidentData.IsInBuilding = IsInBuilding
CityResidentData.IsInDestroyedBuilding = IsInDestroyedBuilding
CityResidentData.GetStartWayPointFlag = GetStartWayPointFlag
CityResidentData.GetEndWayPointFlag = GetEndWayPointFlag
CityResidentData.IsInjured = IsInjured
CityResidentData.IsScared = IsScared
CityResidentData.IsDrunk = IsDrunk
CityResidentData.TryEscapeFromSafe = TryEscapeFromSafe
CityResidentData.SetLifetime = SetLifetime
CityResidentData.ZombieSetRedEye = ZombieSetRedEye
CityResidentData.Revive = Revive

-- Mover
CityResidentData.Idle = Idle
CityResidentData.GoToCityPos = GoToCityPos
CityResidentData.GoToPosDirectly = GoToPosDirectly
CityResidentData.GoToPos = GoToPos
CityResidentData.GoToBuildingRandomPos = GoToBuildingRandomPos
CityResidentData.GoToBuildingPos = GoToBuildingPos
CityResidentData.GoToFurniture = GoToFurniture
CityResidentData.TryNextMove = TryNextMove
CityResidentData.ClearMove = ClearMove

CityResidentData.EnqueueLeaveBuilding = EnqueueLeaveBuilding
CityResidentData.EnqueueGoToBuilding = EnqueueGoToBuilding
CityResidentData.EnqueueGoToFurniture = EnqueueGoToFurniture
CityResidentData.EnqueueGoToMaskPos = EnqueueGoToMaskPos
CityResidentData.EnqueueGoToAccuratePos = EnqueueGoToAccuratePos

CityResidentData.AutoAnimInside = AutoAnimInside
CityResidentData.AutoAnimOutside = AutoAnimOutside

-- Guide
CityResidentData.SetGuideControl = SetGuideControl
CityResidentData.SetSpecialControl = SetSpecialControl

CityResidentData.OnUpdate = OnUpdate
CityResidentData.OnCreate = OnCreate
CityResidentData.OnFinish = OnFinish
CityResidentData.OnRemove = OnRemove
CityResidentData.OnClick = OnClick
CityResidentData.OnMoveComplete = OnMoveComplete

return CityResidentData