---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/3/28 18:10
---

local DesertAnnexManager = BaseClass("DesertAnnexManager")
local DesertAnnexPanel = require "DataCenter.DesertAnnex.DesertAnnexPanel"
local Resource = CS.GameEntry.Resource

local PanelPath = "Assets/Main/Prefabs/World/DesertAnnexPanel.prefab"

local function __init(self)
    self.panelDict = {} -- Dict<pointId, DesertAnnexPanel>
    self:AddListener()
end

local function __delete(self)
    self:RemoveListener()
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.DesertMineInView, self.OnDesertInView)
    EventManager:GetInstance():AddListener(EventId.DesertMineOutView, self.OnDesertOutView)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():AddListener(EventId.OnEnterCrossServer, self.OnEnterCrossServer)
    EventManager:GetInstance():AddListener(EventId.OnQuitCrossServer, self.OnQuitCrossServer)
    EventManager:GetInstance():AddListener(EventId.UseItemSuccess, self.OnUseItemSuccess)
    EventManager:GetInstance():AddListener(EventId.BuildStatusUpdate, self.OnBuildStatusUpdate)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.DesertMineInView, self.OnDesertInView)
    EventManager:GetInstance():RemoveListener(EventId.DesertMineOutView, self.OnDesertOutView)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCrossServer, self.OnEnterCrossServer)
    EventManager:GetInstance():RemoveListener(EventId.OnQuitCrossServer, self.OnQuitCrossServer)
    EventManager:GetInstance():RemoveListener(EventId.UseItemSuccess, self.OnUseItemSuccess)
    EventManager:GetInstance():RemoveListener(EventId.BuildStatusUpdate, self.OnBuildStatusUpdate)
end

local function Startup(self)
    
end

local function GetPanelShowParams(self, pointId)
    local params = {}
    
    -- 建筑状态
    local buildStatusDataList = DataCenter.BuildStatusManager:GetDataListByPointId(pointId)
    for _, data in ipairs(buildStatusDataList) do
        local buildData = DataCenter.BuildManager:GetBuildingDataByPointId(pointId, true)
        if buildData then
            local param = {}
            param.type = DesertAnnexItemType.BuildStatus
            param.data = data
            table.insert(params, param)
        end
    end
    local desertData = DataCenter.WorldPointManager:GetDesertInfo()
    if desertData ~= nil and desertData.mineId ~= nil and desertData.mineId > 0 and desertData.ownerUid == LuaEntry.Player.uid then
        local param = {}
        param.type = DesertAnnexItemType.Mine
        param.data = desertData
        table.insert(params, param)
    end
    
    return params
end

local function RefreshPanel(self, pointId)
    local params = self:GetPanelShowParams(pointId)
    local canShow = #params > 0
    if self.panelDict[pointId] == nil and canShow then
        self:CreatePanel(pointId, params)
    elseif self.panelDict[pointId] ~= nil and not canShow then
        self:DestroyPanel(pointId, params)
    end
end

local function CreatePanel(self, pointId, params)
    if self.panelDict[pointId] ~= nil then
        return
    end
    
    local req = Resource:InstantiateAsync(PanelPath)
    req:completed('+', function()
        if req.isError then
            self.panelDict[pointId] = nil
            return
        end
        local go = req.gameObject
        go.name = "DesertAnnexPanel_" .. pointId
        go.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
        go.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
        self.panelDict[pointId]:OnCreate()
    end)
    self.panelDict[pointId] = DesertAnnexPanel.New()
    self.panelDict[pointId]:Init(pointId, params, req)
end

local function DestroyPanel(self, pointId)
    if self.panelDict[pointId] == nil then
        return
    end

    self.panelDict[pointId]:OnDestroy()
    self.panelDict[pointId] = nil
end

local function RefreshAllPanels(self)
    -- 建筑状态
    local buildStatusDataDict = DataCenter.BuildStatusManager:GetDataDict()
    for _, data in ipairs(buildStatusDataDict) do
        local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(data.bUuid)
        if buildData then
            self:RefreshPanel(buildData.pointId)
        end
    end
    
    -- 地块
    local desertDataDict = DataCenter.WorldPointManager:GetDesertPointList()
    if desertDataDict and table.count(desertDataDict) > 0 then
        for _, desertData in pairs(desertDataDict) do
            self:RefreshPanel(desertData.pointIndex)
        end
    end
end

local function DestroyAllPanels(self)
    for pointId, _ in pairs(self.panelDict) do
        self:DestroyPanel(pointId)
    end
end

local function OnBuildInView(self, uuid)
    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(uuid)
    if buildData then
        self:RefreshPanel(buildData.pointId)
    end
end

local function OnBuildOutView(self, uuid)
    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(uuid)
    if buildData then
        self:DestroyPanel(buildData.pointId)
    end
end

local function OnDesertInView(uuid)
    local desertData = CS.SceneManager.World:GetDesertInfoByUuid(uuid)
    if desertData then
        DataCenter.DesertAnnexManager:RefreshPanel(desertData.pointIndex)
    end
end

local function OnDesertOutView(uuid)
    local desertData = CS.SceneManager.World:GetDesertInfoByUuid(uuid)
    if desertData then
        DataCenter.DesertAnnexManager:DestroyPanel(desertData.pointIndex)
    end
end

local function OnEnterWorld()
    
end

local function OnEnterCity()
    DataCenter.DesertAnnexManager:DestroyAllPanels()
end

local function OnEnterCrossServer()
    DataCenter.DesertAnnexManager:DestroyAllPanels()
end

local function OnQuitCrossServer()
    DataCenter.DesertAnnexManager:DestroyAllPanels()
end

local function OnUseItemSuccess(itemId)
    local itemTemplate = DataCenter.ItemTemplateManager:GetItemTemplate(itemId)
    if itemTemplate.type == GOODS_TYPE.LANDMINE then
        TimerManager:GetInstance():DelayInvoke(function()
            DataCenter.DesertAnnexManager:RefreshAllPanels()
        end, 1)
    end
end

local function OnBuildStatusUpdate(bUuid)
    if bUuid == nil then
        return
    end
    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(bUuid)
    if buildData then
        TimerManager:GetInstance():DelayInvoke(function()
            DataCenter.DesertAnnexManager:RefreshPanel(buildData.pointId)
        end, 1)
    end
end

DesertAnnexManager.__init = __init
DesertAnnexManager.__delete = __delete
DesertAnnexManager.AddListener = AddListener
DesertAnnexManager.RemoveListener = RemoveListener
DesertAnnexManager.Startup = Startup

DesertAnnexManager.GetPanelShowParams = GetPanelShowParams
DesertAnnexManager.RefreshPanel = RefreshPanel
DesertAnnexManager.CreatePanel = CreatePanel
DesertAnnexManager.DestroyPanel = DestroyPanel
DesertAnnexManager.RefreshAllPanels = RefreshAllPanels
DesertAnnexManager.DestroyAllPanels = DestroyAllPanels

DesertAnnexManager.OnBuildInView = OnBuildInView
DesertAnnexManager.OnBuildOutView = OnBuildOutView
DesertAnnexManager.OnDesertInView = OnDesertInView
DesertAnnexManager.OnDesertOutView = OnDesertOutView
DesertAnnexManager.OnEnterWorld = OnEnterWorld
DesertAnnexManager.OnEnterCity = OnEnterCity
DesertAnnexManager.OnEnterCrossServer = OnEnterCrossServer
DesertAnnexManager.OnQuitCrossServer = OnQuitCrossServer
DesertAnnexManager.OnUseItemSuccess = OnUseItemSuccess
DesertAnnexManager.OnBuildStatusUpdate = OnBuildStatusUpdate

return DesertAnnexManager