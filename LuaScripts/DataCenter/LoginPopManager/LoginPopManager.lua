---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/2/16 14:33
---

--登录拍脸功能
--
--优化一下之前的登录弹出广告功能。					
--
--item表pop_rate					
--
--k1-kn填写每天登录拍脸的优先级和拍脸权重       rechage类型;类型下页签优先级;页签下礼包优先级;权重	
--
--如k1=firstpay;1;1;100                      首充;第一个类;第一个礼包;100权重			
--如k2=type_1;1;1;100                        弹出礼包;第一个类;第一个礼包;100权重			
--如k3=type_3;1;1;100                        促销礼包;第一个类;第一个礼包;100权重			
--如k4=type_1;2;1;100                        弹出礼包;第二个类;第一个礼包;100权重			
--如k5=type_3;1;2;100                        促销礼包;第一个类;第二个礼包;100权重			
--如k6=type_1;2;1;100|type_3;1;2;100         弹出礼包;第二个类;第一个礼包;100权重 或 促销礼包;第一个类;第二个礼包;100权重
--
--弹出规则从前向后检索，本日用过后从后续字段继续检索，检索到最后从头开始循环。					
--如上述字段举例。					
--我先看k1首充有没有，如果首充还有，则先弹出首充界面，视为第一次登录弹出。					
--然后看k2第一类的第一个弹出礼包有没有，如果此时没有弹出礼包，向后检索。					
--k3发现第一类的第一个促销礼包存在，则弹出这个促销礼包，视为第二次登录弹出。					
--重复以上循环，本日内若用完所有k则从k1重新开始，若没有可弹出的，则不弹出任何礼包。	

local LoginPopManager = BaseClass("LoginPopManager")
local Setting = CS.GameEntry.Setting

local K_COUNT = 32

local function __init(self)
    self.popped = false
    self.loadComplete = false
    self.packInited = false
    self.popPackId = nil
    self:AddListeners()
end

local function __delete(self)
    self.popped = nil
    self.loadComplete = nil
    self.packInited = nil
    self.popPackId = nil
    self:RemoveListeners()
end

local function AddListeners(self)

    EventManager:GetInstance():AddListener(EventId.LOAD_COMPLETE, self.OnLoadComplete)
    EventManager:GetInstance():AddListener(EventId.PaySuccess, self.OnPaySuccess)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.LOAD_COMPLETE, self.OnLoadComplete)
    EventManager:GetInstance():RemoveListener(EventId.PaySuccess, self.OnPaySuccess)
end

local function Startup(self)
    
end

local function OnLoadComplete()
    DataCenter.LoginPopManager.loadComplete = true
    DataCenter.LoginPopManager:LoginPop()
end

local function OnPaySuccess(packId)
    local popPackId = DataCenter.LoginPopManager.popPackId
    if popPackId ~= nil and packId == popPackId then
        DataCenter.LoginPopManager.popPackId = nil
        EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
    end
end

local function NoticeInitPackage(self)
    self.packInited = true
    self:LoginPop()
end

-- 登录弹出
local function LoginPop(self)
    
    -- 加载完成 + 礼包数据已获取
    if not self.loadComplete or not self.packInited then
        return
    end
    
    -- 未曾弹出过
    if self.popped then
        return
    end
    self.popped = true
    
    -- 必须有大本
    if DataCenter.BuildManager:CheckShowReplaceTip() then
        return
    end
    
    if DataCenter.AllianceHelpVirtualMarchManager:HasVirtualMarch() == true then
        return
    end
    
    self:StepPopOfflineReward()
    self:StepPopPack()
    self:StepPopResidentDead()
end

local function StepPopPack(self)
    local lastTime = tonumber(Setting:GetString(SettingKeys.LOGIN_POP_LAST_TIME, "0"))
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, lastTime // 1000)
    local index = sameDay and Setting:GetInt(SettingKeys.LOGIN_POP_K, 1) or 1
    local attempted = 0
    local data = nil -- { type, rechargeId, pack }
    repeat
        data = self.TryLoginPopIndex(index)
        index = index % K_COUNT + 1
        attempted = attempted + 1
    until
    data ~= nil or attempted == K_COUNT

    if data == nil then
        index = 1
    else
        --[[
            在这里添加新的礼包类型，登录弹出
        ]]--

        if data.type == "firstpay" then
            if LuaEntry.DataConfig:CheckSwitch("first_pay_choosen") then
                DataCenter.UIPopWindowManager:Push(UIWindowNames.UIFirstCharge, { anim = true, UIMainAnim = UIMainAnimType.AllHide })
            else
                DataCenter.UIPopWindowManager:Push(UIWindowNames.UIFirstPay, { anim = true, UIMainAnim = UIMainAnimType.AllHide })
            end
        elseif data.type == "decoration" then
            DataCenter.UIPopWindowManager:Push(UIWindowNames.UIDecorationGift, { anim = true, UIMainAnim = UIMainAnimType.AllHide }, data.activityId)
        elseif data.type == "hero_promote" then
            DataCenter.UIPopWindowManager:Push(UIWindowNames.UIHeroPromote, { anim = true, UIMainAnim = UIMainAnimType.AllHide }, data.activityId)
        elseif data.type == WelfareTagType.SpecialPack then
            self:TryPopPackById(UIWindowNames.UIPopupPackage, data.packId)
        elseif data.type == WelfareTagType.PiggyBank then
            DataCenter.UIPopWindowManager:Push(UIWindowNames.UIPiggyBank)
        elseif data.type == WelfareTagType.EnergyBank then
            DataCenter.UIPopWindowManager:Push(UIWindowNames.UIEnergyBank)
        elseif data.type == WelfareTagType.ScrollPack then
            self:TryPopPackById(UIWindowNames.UIScrollPack, data.packId)
        elseif data.type == WelfareTagType.RobotPack then
            self:TryPopPackById(UIWindowNames.UIRobotPack, data.packId)
        elseif data.type == WelfareTagType.MonthCard then
            self:TryPopPackById(UIWindowNames.UIGolloesMonthCard, data.packId)
        elseif data.type == WelfareTagType.HeroMonthCardNew then
            DataCenter.UIPopWindowManager:Push(UIWindowNames.UIHeroMonthCard, { anim = true, UIMainAnim = UIMainAnimType.AllHide })
        elseif data.type == WelfareTagType.MasteryPop then
            self:TryPopPackById(UIWindowNames.UIMasteryPopGift, data.packId)
        end

        self.popPackId = data.packId
        EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
    end

    Setting:SetInt(SettingKeys.LOGIN_POP_K, index)
    Setting:SetString(SettingKeys.LOGIN_POP_LAST_TIME, tostring(curTime))

    TimerManager:GetInstance():DelayInvoke(function()
        EventManager:GetInstance():Broadcast(EventId.ActivityTipStateUpdate,2)
    end, 0.1)
end

local function StepPopResidentDead(self)
    local deadIds = DataCenter.VitaManager.offlineDeadIds
    if deadIds and #deadIds > 0 then
        DataCenter.UIPopWindowManager:Push(UIWindowNames.UIVitaResidentDead, NormalPanelAnim, deadIds)
    end
end

local function StepPopOfflineReward(self)
    local info = DataCenter.VitaManager.offlineRewardInfo
    if info then
        DataCenter.UIPopWindowManager:Push(UIWindowNames.UIOfflineRewardPanel, { anim = true, isBlur = true }, info)
    end
end

local function TryPopPackById(self, windowName, packId)
    DataCenter.UIPopWindowManager:PushWithCondition(windowName, function()
        return GiftPackManager.get(packId) ~= nil
    end, { anim = true, UIMainAnim = UIMainAnimType.AllHide,isBlur = true }, GiftPackManager.get(packId))
end

-- 返回: data
local function TryLoginPopIndex(index)
    local line = LuaEntry.DataConfig:TryGetStr("pop_rate", "k" .. index)
    if string.IsNullOrEmpty(line) then
        return nil
    end

    local dataList = {}
    local totalWeight = 0

    local packStrs = string.split(line, "|")
    for _, packStr in ipairs(packStrs) do
        local spls = string.split(packStr, ";")
        if #spls ~= 4 then
            return nil
        end

        local key = spls[1]
        local lineIndex = tonumber(spls[2])
        local packIndex = tonumber(spls[3])
        local weight = tonumber(spls[4])
        local data = {}

        if key == "firstpay" then
            if LuaEntry.DataConfig:CheckSwitch("first_pay_choosen") then
                local needLv = LuaEntry.DataConfig:TryGetNum("first_pay_choosen", "k3")
                if DataCenter.BuildManager.MainLv >= needLv and not DataCenter.ActFirstChargeData:HasBought() then
                    data.type = "firstpay"
                    data.rechargeId = nil
                    data.packId = nil
                    data.popFirstPay = true
                end
            else
                if DataCenter.PayManager:CheckIfFirstPayOpen() then
                    data.type = "firstpay"
                    data.rechargeId = nil
                    data.packId = LuaEntry.DataConfig:TryGetStr("first_pay", "k2")
                    data.popFirstPay = true
                end
            end
        elseif key == "decoration" then
            local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.DecorationGiftPackage)
            if dataList and #dataList > 0 and DataCenter.BuildManager.MainLv >= dataList[1].needMainCityLevel then
                local now = UITimeManager:GetInstance():GetServerTime()
                local leftTime = dataList[1].endTime - now
                if leftTime > 1000 and dataList[1].startTime < now then
                    data.type = "decoration"
                    data.activityId = dataList[1].id
                end
            end
        elseif key == "hero_promote" then
            if DataCenter.HeroEvolveActivityManager:NeedShowLoginPop() then
                local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.HeroEvolve)
                if dataList and #dataList > 0 and DataCenter.BuildManager.MainLv >= dataList[1].needMainCityLevel then
                    local now = UITimeManager:GetInstance():GetServerTime()
                    local leftTime = dataList[1].endTime - now
                    if leftTime > 1000 and dataList[1].startTime < now then
                        data.type = "hero_promote"
                        data.activityId = dataList[1].id
                    end
                end
            end
        elseif string.startswith(key, "type_") then
            local type = tonumber(string.sub(key, 6))
            if type then
                local rechargeIds = GiftPackageData.GetRechargeIdListByType(type)
                local rechargeLines = {}
                for _, rechargeId in ipairs(rechargeIds) do
                    local packs = GiftPackageData.GetAllAvailablePackageByRechargeId(rechargeId, false)
                    if not table.IsNullOrEmpty(packs) then
                        local rechargeLine = LocalController:instance():getLine("recharge", tostring(rechargeId))
                        if rechargeLine then
                            local insert = true
                            if tonumber(rechargeLine.type) == WelfareTagType.MonthCard then
                                -- 月卡
                                local monthCardInfo = DataCenter.MonthCardNewManager:GetGolloesMonthCard()
                                if monthCardInfo == nil or monthCardInfo:IsBought() then
                                    insert = false
                                end
                            elseif tonumber(rechargeLine.type) == WelfareTagType.HeroMonthCardNew then
                                -- 英雄养成手册
                                local heroMonthCardInfo = DataCenter.HeroMonthCardManager:GetHeroMonthCardInfo()
                                if heroMonthCardInfo == nil or heroMonthCardInfo.buy == BuyFlag.BUY then
                                    insert = false
                                end
                            end
                            if insert then
                                table.insert(rechargeLines, rechargeLine)
                            end
                        end
                    end
                end
                table.sort(rechargeLines, function(a, b)
                    return a.order < b.order
                end)
                local rechargeLine = rechargeLines[lineIndex]
                if rechargeLine then
                    local rechargeId = rechargeLine.id
                    local packs = GiftPackageData.GetAllAvailablePackageByRechargeId(rechargeId, false)
                    table.sort(packs, function(a, b)
                        if a:getPopup() ~= b:getPopup() then
                            return a:getPopup() > b:getPopup()
                        else
                            return a:getID() < b:getID()
                        end
                    end)
                    local pack = packs[packIndex]
                    if pack then
                        data.type = type
                        data.rechargeId = rechargeId
                        data.packId = pack:getID()
                    end
                end
            end
        end

        if data.packId or (key == "decoration" and data.activityId) or (key == "hero_promote" and data.activityId) or data.popFirstPay then
            data.weight = weight
            totalWeight = totalWeight + weight
            table.insert(dataList, data)
        end
    end

    if table.IsNullOrEmpty(dataList) then
        return nil
    end

    local rand = math.random(1, totalWeight)
    for _, data in ipairs(dataList) do
        rand = rand - data.weight
        if rand <= 0 then
            return data
        end
    end

    return nil
end

LoginPopManager.__init = __init
LoginPopManager.__delete = __delete
LoginPopManager.AddListeners = AddListeners
LoginPopManager.RemoveListeners = RemoveListeners
LoginPopManager.Startup = Startup

LoginPopManager.OnLoadComplete = OnLoadComplete
LoginPopManager.OnPaySuccess = OnPaySuccess
LoginPopManager.NoticeInitPackage = NoticeInitPackage
LoginPopManager.LoginPop = LoginPop
LoginPopManager.StepPopPack = StepPopPack
LoginPopManager.StepPopResidentDead = StepPopResidentDead
LoginPopManager.StepPopOfflineReward = StepPopOfflineReward
LoginPopManager.TryPopPackById = TryPopPackById
LoginPopManager.TryLoginPopIndex = TryLoginPopIndex

return LoginPopManager