---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by w.
--- DateTime: 2022/12/19 13:47
---
local DelayHpBarCell = BaseClass("DelayHpBarCell");
local Resource = CS.GameEntry.Resource
local UnityRectTransform = typeof(CS.UnityEngine.RectTransform)
local Const = require("Scene.LWBattle.Const")
local UnityText = typeof(CS.UnityEngine.UI.Text)

local DelayHpBarPath = "Assets/Main/Prefabs/LWBattle/DelayHpBar.prefab"
local DELAY = 0.5

local hp_fg = "Content/fg"
local hp_mg = "Content/mg"
local hp_text = "Content/text"
local shield_fg_path = "Content/fg/shieldFg"
local shield_bg_path = "Content/shieldBg"

function DelayHpBarCell:__init(style,transform,height)
    self.target = transform
    self.camera = CS.UnityEngine.Camera.main
    self.style = style
    self.height = height
    self.queue = {}
    self.myWorldPos = Vector3.zero
end

function DelayHpBarCell:__delete()
    self:Destroy()
end

function DelayHpBarCell:Destroy()
    if(self.req) then
        self.req:Destroy()
        self.req = nil
    end
    self.target = nil
    self.gameObject = nil
    self.transform = nil
    self.queue = nil

    if self.shieldFgGo then
        self.shieldFgGo:SetActive(false)
    end
    if self.shieldBgGo then
        self.shieldBgGo:SetActive(false)
    end
    self.shieldFgVisible = false
    self.shieldBgVisible = false

    self.shieldFgGo = nil
    self.shieldBgGo = nil
end

function DelayHpBarCell:LoadAndSetHp(percent)
    self.req = Resource:InstantiateAsync(self:GetBarAsset())
    self.req:completed('+', function(req)
        local go = req.gameObject
        local CanvasNormal = UIManager:GetInstance():GetLayer(UILayer["Scene"]["Name"]).gameObject
        go.transform:SetParent(CanvasNormal.transform)
        self.gameObject = go
        self.transform = go.transform
        self.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
        self.transform.position = Vector3.New(-9999,-9999,0)
        self:InitComponent()
        --self.oldValue = percent
        self:InitHp(percent)
    end)
end


function DelayHpBarCell:Load()
    self.req = Resource:InstantiateAsync(self:GetBarAsset())
    self.req:completed('+', function(req)
        local go = req.gameObject
        local CanvasNormal = UIManager:GetInstance():GetLayer(UILayer["Scene"]["Name"]).gameObject
        go.transform:SetParent(CanvasNormal.transform)
        self.gameObject = go
        self.transform = go.transform
        self.transform:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
        self:InitComponent()
    end)
end

function DelayHpBarCell:InitComponent()
    self.fg = self.transform:Find(hp_fg):GetComponent(UnityRectTransform)
    self.mg = self.transform:Find(hp_mg):GetComponent(UnityRectTransform)
    local txtObj = self.transform:Find(hp_text)
    if txtObj then
        self.text = txtObj:GetComponent(UnityText)
    end
    self.shieldFg = self.transform:Find(shield_fg_path):GetComponent(UnityRectTransform)
    self.shieldBg = self.transform:Find(shield_bg_path):GetComponent(UnityRectTransform)
    self.shieldFgGo = self.shieldFg.gameObject
    self.shieldBgGo = self.shieldBg.gameObject
    self.shieldFgGo:SetActive(false)
    self.shieldBgGo:SetActive(false)
    self.shieldFgVisible = false
    self.shieldBgVisible = false
    self:InitHp(1)
end

function DelayHpBarCell:InitHp(percent)
    local x = percent * self:GetMaxValue()
    if self.fg then
        self.fg:Set_sizeDelta(x, 14)
    end
    if self.mg then
        self.mg:Set_sizeDelta(x, 14)
    end
end

function DelayHpBarCell:SetHp(percent, shieldPercent)
    if self.fg then
        self.fg:Set_sizeDelta(percent * self:GetMaxValue(), 14)
    end
    local tweenParam = {}
    tweenParam.delay = DELAY
    tweenParam.percent = percent
    table.insert(self.queue,1,tweenParam)--1是队尾

    if shieldPercent and shieldPercent > 0 then
        --有护盾

        --血条后接护盾
        local hpRemain = math.min(1 - percent, shieldPercent)

        if hpRemain > 0 then
            if not self.shieldFgVisible then
                self.shieldFgVisible = true
                if self.shieldFgGo then
                    self.shieldFgGo:SetActive(true)
                end
            end

            if self.shieldFg then
                self.shieldFg:Set_sizeDelta(hpRemain * self:GetMaxValue(), 14)
            end
        else
            if self.shieldFgVisible then
                self.shieldFgVisible = false
                if self.shieldFgGo then
                    self.shieldFgGo:SetActive(false)
                end
            end
        end

        local remain = shieldPercent - hpRemain
        if remain > 0 then
            if not self.shieldBgVisible then
                self.shieldBgVisible = true
                if self.shieldBgGo then
                    self.shieldBgGo:SetActive(true)
                end
            end

            if self.shieldBg then
                remain = math.min(remain, 1.0)
                self.shieldBg:Set_sizeDelta(remain * self:GetMaxValue(), 14)
            end
        else
            if self.shieldBgVisible then
                self.shieldBgVisible = false
                if self.shieldBgGo then
                    self.shieldBgGo:SetActive(false)
                end
            end
        end

    else
        if self.shieldBgVisible then
            self.shieldBgVisible = false
            if self.shieldBgGo then
                self.shieldBgGo:SetActive(false)
            end
        end

        if self.shieldFgVisible then
            self.shieldFgVisible = false
            if self.shieldFgGo then
                self.shieldFgGo:SetActive(false)
            end
        end
    end
end

function DelayHpBarCell:UpdateDelay()
    for i = #self.queue,1,-1 do
        local v = self.queue[i]
        v.delay = v.delay - Time.deltaTime
        if v.delay<=0 then
            if self.mg then
                self.mg:Set_sizeDelta(v.percent * self:GetMaxValue(), 14) 
            end
            table.remove(self.queue,i)
        end
    end
end

function DelayHpBarCell:GetMaxValue()
    if self.style == Const.HPBarStyle.Self then
        return 100
    end
    if self.style == Const.HPBarStyle.Enemy then
        return 100
    end
end

function DelayHpBarCell:GetBarAsset()
    return DelayHpBarPath
end

function DelayHpBarCell:Update()
    if self.transform then
        self:UpdatePos()
        self:UpdateDelay()
    end
end

function DelayHpBarCell:UpdatePos()
    -- 获取对应位置在屏幕上的坐标位置
    self.myWorldPos.x, self.myWorldPos.y, self.myWorldPos.z = self.target:Get_position()
    self.myWorldPos.y = self.myWorldPos.y + self.height
    self.transform.position = CS.CSUtils.WorldPositionToUISpacePosition(self.myWorldPos)
end

function DelayHpBarCell:SetActive(bool)
    if self.gameObject then
        self.gameObject:SetActive(bool)
    end
end

return DelayHpBarCell