---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/3/7 18:10
--- AlContributeManager.lua

local AlContributeManager = BaseClass("AlContributeManager");
local Localization = CS.GameEntry.Localization
local AlContributeRankData = require "DataCenter.AlContribute.AlContributeRankData"

local configName = "exploit_rank"
local exploitRankPath = "Assets/Main/Sprites/UI/UIAlContribute/"

local function __init(self)
    self.activityInfo = nil
    self.rankList = {}
    self.selfRankInfo = nil
    self.rankRewardList = {}
    self.rankRewardDic = {}
    self.exploitRankArr = {}
    self.monthCardInfo = nil
    self:InitTransTable()
    self:AddListener()
end

local function __delete(self)
    self.activityInfo = nil
    self.rankList = nil
    self.rankRewardList = nil
    self.rankRewardDic = nil
    self.exploitRankArr = nil
    self.selfRankInfo = nil
    self.monthCardInfo = nil
    self:DestroyTransTable()
    self:RemoveListener()
end

local function AddListener(self)
    --EventManager:GetInstance():AddListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function InitTransTable(self)
    self.rankToConfigId = {}
    self.configRankList = {}
    self.scoreList = {}
    LocalController:instance():visitTable(configName,function(id,lineData)
        local id = lineData:getValue("id")
        local rank = lineData:getValue("rank")
        local score = lineData:getValue("score")
        self.rankToConfigId[rank] = id
        table.insert(self.configRankList,rank)
        table.insert(self.scoreList,score)
    end)
end

local function DestroyTransTable(self)
    self.rankToConfigId = nil
    self.configRankList = nil
    self.scoreList = nil
end

local function GetExploitRankByScore(self, score)
    local index = 0;
    for k,v in ipairs(self.scoreList) do
        if score >= v then
            index = k
		elseif score < v then
			break
        end
    end
	if index < 1 then 
		index = 1 
	end
    return self.configRankList[index]
end

local function GetExploitImgPathByScore(self, score)
    local rank = self:GetExploitRankByScore(score)
    return self:GetExploitImgPathByRank(rank)
end

local function GetExploitImgPathByRank(self, rank)
    local configId = self.rankToConfigId[rank]
    local path = exploitRankPath..LocalController:instance():getValue(configName,configId,"icon")
    return path
end

local function GetExploitNameByScore(self, score)
    local rank = self:GetExploitRankByScore(score)
    return self:GetExploitNameByRank(rank)
end

local function GetExploitNameByRank(self, rank)
    local configId = self.rankToConfigId[rank]
    local name = LocalController:instance():getValue(configName,configId,"name")
    return Localization:GetString(name)
end

local function GetConfigDataByRank(self, rank, dataName) 
    local configId = self.rankToConfigId[rank]
    local data = LocalController:instance():getValue(configName, configId, dataName)
    return data
end

local function GetSelfExploitRank(self)
    if self.selfRankInfo~=nil then
        return  self.selfRankInfo.exploitRank
    end
    return 0
end

local function GetSelfScore(self)
    if self.selfRankInfo~=nil then
        return self.selfRankInfo.exploitScore
    end
    return 0
end

local function GetNextRankScore(self)
    local curRank = self:GetSelfExploitRank()
    local nextRank = curRank + 1
    if self.rankToConfigId[nextRank] ~= nil then
        local nextScore = self:GetConfigDataByRank(nextRank,"score")
        return nextScore
    else
        local nextScore = self:GetConfigDataByRank(curRank,"score")
        return nextScore
    end
end

local function GetUnTakeExploitRewardNum(self)
	local num = 0
	if self.exploitRankArr == nil or #self.exploitRankArr <= 0 then
		return num
	end
	local selfExploitRank = self:GetSelfExploitRank()
    for i , v in ipairs(self.exploitRankArr) do
        if v["state"] == 0 and selfExploitRank >= v["rank"] then
            num = num + 1
        end
    end
    return num
end

local function UpdateMonthCardInfo(self, msg)
    if msg["exploitMonthCard"] then
        self.monthCardInfo = MonthCardNewInfo.New()
        self.monthCardInfo:ParseData(msg["exploitMonthCard"])
        EventManager:GetInstance():Broadcast(EventId.OnExploitMonthCardInfoUpdate)
    end
end

local function UpdateActivityInfo(self, info)
    self.activityInfo = info
end

local function ParseEventData(self, msg)
    if self.activityInfo then
        self.activityInfo:parseServerData(msg)
    end
end

local function ClaimBoxReq(self, boxIndex)
    if self.activityInfo then
        local eventInfo = self.activityInfo:GetEventInfo()
        if eventInfo then
            SFSNetwork.SendMessage(MsgDefines.ClaimAlContributeBoxReward, eventInfo.actId, boxIndex)
        end
    end
end

local function OnRecvClaimBoxResp(self, msg)
    if msg["reward"] then
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(msg)
    end

    if msg["stage"] then
        if self.activityInfo and self.activityInfo.UpdateBoxStatus then
            self.activityInfo:UpdateBoxStatus(msg["stage"], 3)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.OnAlContributeBoxStatusChange)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function GetRankListReq(self)
    SFSNetwork.SendMessage(MsgDefines.GetAlContributeRankList)
end

local function OnRecvRankListResp(self, msg)
    self.rankList = {}
    if msg["rankList"] then
        for i, v in ipairs(msg["rankList"]) do
            local newRank = AlContributeRankData.New()
            newRank:ParseData(v)
            table.insert(self.rankList, newRank)
        end
        table.sort(self.rankList, function(a, b)
            if a.score ~= b.score then
                return a.score > b.score
            elseif a.historyScore ~= b.historyScore then
                return a.historyScore > b.historyScore
            else
                return a.uid < b.uid
            end
        end)
    end
    if msg["rankRewardArr"] then
        self.rankRewardList = {}
        for i, v in ipairs(msg["rankRewardArr"]) do
            local temp = {}
            temp.start = v.start
            temp["end"] = v["end"]
            if temp["end"] == nil then
                Logger.Log("temp[\"end\"] == nil !!!")
            end 
            temp.rewards = DataCenter.RewardManager:ReturnRewardParamForView(v.reward)
            table.insert(self.rankRewardList, temp)
        end
    end
    if msg["exploitRankArr"] then
        self.exploitRankArr = {}
        for i, v in ipairs(msg["exploitRankArr"]) do
            local temp = {}
            temp["rank"] = v["rank"]
            temp["state"] = v["state"]
            local reward = DataCenter.RewardManager:ReturnRewardParamForView(v.reward)
            temp["reward"] = reward
            table.insert(self.exploitRankArr, temp)
        end
    end
    if self.selfRankInfo == nil then
        self.selfRankInfo = AlContributeRankData.New()
    end
    if msg["selfRank"] then
        self.selfRankInfo.rank = msg["selfRank"]
    end
    if msg["selfScore"] then
        self.selfRankInfo.score = msg["selfScore"]
    end
    if msg["selfHistoryScore"] then
        self.selfRankInfo.historyScore = msg["selfHistoryScore"]
    end
    if msg["selfExploitScore"] then
        self.selfRankInfo.exploitScore = msg["selfExploitScore"]
    end
    self.selfRankInfo.exploitRank = self:GetExploitRankByScore(self.selfRankInfo.exploitScore)

    EventManager:GetInstance():Broadcast(EventId.OnAlContributeRankInfoUpdate)
end

local function OnRecvExploitRewardMessage(self, msg)
    if msg["reward"] ~= nil then
        DataCenter.RewardManager:ShowCommonReward(msg)
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    local rank = msg["reward"]
    if rank == nil then
        Logger.Log("OnRecvExploitRewardMessage ERROR!! rank == nil")
        return
    end
    self.exploitRankArr[tostring(rank)] = 1
    EventManager:GetInstance():Broadcast(EventId.UpdateSelfExploit)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function GetRankList(self)
    if not self.selfRankInfo then
        self.selfRankInfo = AlContributeRankData.New()
    end
    return self.rankList, self.selfRankInfo
end

local function GetRewardsByRank(self, rank)
    if not self.rankRewardDic or table.count(self.rankRewardDic) == 0 then
        
        for i, v in ipairs(self.rankRewardList) do
            for j = v.start, v["end"] do
                self.rankRewardDic[j] = v.rewards
            end
        end
    end
    
    return self.rankRewardDic[rank] or {}
end

local function GetMaxRankListCount(self)
    if self.rankRewardList and #self.rankRewardList > 0 then
        local rankInfo = self.rankRewardList[#self.rankRewardList]
        return rankInfo["end"]
    end
    return 0
end

local function GetRedCount(self)
    local retCount = 0
    
    local boxCount = self:GetUnclaimedBoxCount()
    retCount = retCount + boxCount
    local unTakeExploitRewardNum = self:GetUnTakeExploitRewardNum()
    retCount = retCount + unTakeExploitRewardNum
    
    return retCount
end

local function GetUnclaimedBoxCount(self)
    local count = 0

    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(self.activityInfo.id)
    if activityInfo then
        local eventInfo = activityInfo:GetEventInfo()
        if eventInfo then
            local curScore = tonumber(eventInfo.currentScore)
            local unLock = LuaEntry.Effect:GetGameEffect(EffectDefine.UNLOCK_MORE_EXPLOIT_REWARDS)
            for i, v in ipairs(eventInfo.targetList) do
                local needScore = tonumber(eventInfo.targetList[i])
                local claimed = eventInfo.newRewardFlagList and eventInfo.newRewardFlagList[i] == i or false
                if curScore >= needScore and not claimed then
                    if i <= 5 or unLock > 0 then
                        count = count + 1
                    end
                end
            end
        end
    end
    
    return count
end

local function GetActivityInfo(self)
    return self.activityInfo
end

local function GetMonthCardInfo(self)
    if self.monthCardInfo then
        local now = UITimeManager:GetInstance():GetServerTime()
        if self.monthCardInfo.endTime < now then
            return nil
        else
            return self.monthCardInfo
        end
    else
        return nil
    end
end

local function GetExploitRewardList(self)
    if self.exploitRankArr ~= nil then 
        return self.exploitRankArr
    else 
        return {}
    end
end

local function InitExploitRankInfo(self, msg)
    local infoMsg = msg.exploitInfo
    if infoMsg~= nil then
        self:OnRecvUpdateSelfExploitRank(infoMsg)
    end
end

local function OnRecvUpdateSelfExploitRank(self, msg)
    if self.selfRankInfo == nil then
        self.selfRankInfo = AlContributeRankData.New()
    end
    if msg["exploitRank"] then
        self.selfRankInfo.exploitRank =  msg["exploitRank"]
    end
    if msg["selfExploitScore"] then
        self.selfRankInfo.exploitScore = msg["selfExploitScore"]
    end
    if msg["exploitRankArr"] then
        self.exploitRankArr = {}
        for i, v in ipairs(msg["exploitRankArr"]) do
            local temp = {}
            temp["rank"] = v["rank"]
            temp["state"] = v["state"]
            local reward = DataCenter.RewardManager:ReturnRewardParamForView(v.reward)
            temp["reward"] = reward
            table.insert(self.exploitRankArr, temp)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.UpdateSelfExploit)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

AlContributeManager.__init = __init
AlContributeManager.__delete = __delete
AlContributeManager.AddListener = AddListener
AlContributeManager.RemoveListener = RemoveListener
AlContributeManager.InitTransTable = InitTransTable
AlContributeManager.DestroyTransTable = DestroyTransTable

AlContributeManager.GetExploitRankByScore = GetExploitRankByScore
AlContributeManager.GetExploitImgPathByScore = GetExploitImgPathByScore
AlContributeManager.GetExploitImgPathByRank = GetExploitImgPathByRank
AlContributeManager.GetExploitNameByScore = GetExploitNameByScore
AlContributeManager.GetExploitNameByRank = GetExploitNameByRank
AlContributeManager.GetConfigDataByRank = GetConfigDataByRank
AlContributeManager.GetSelfExploitRank = GetSelfExploitRank
AlContributeManager.GetSelfScore = GetSelfScore
AlContributeManager.GetNextRankScore = GetNextRankScore
AlContributeManager.GetUnTakeExploitRewardNum = GetUnTakeExploitRewardNum
AlContributeManager.UpdateMonthCardInfo = UpdateMonthCardInfo
AlContributeManager.ClaimBoxReq = ClaimBoxReq
AlContributeManager.OnRecvClaimBoxResp = OnRecvClaimBoxResp
AlContributeManager.GetRankListReq = GetRankListReq
AlContributeManager.OnRecvRankListResp = OnRecvRankListResp
AlContributeManager.UpdateActivityInfo = UpdateActivityInfo
AlContributeManager.ParseEventData = ParseEventData
AlContributeManager.GetRankList = GetRankList
AlContributeManager.GetRewardsByRank = GetRewardsByRank
AlContributeManager.GetMaxRankListCount = GetMaxRankListCount
AlContributeManager.GetUnclaimedBoxCount = GetUnclaimedBoxCount
AlContributeManager.GetRedCount = GetRedCount
AlContributeManager.GetActivityInfo = GetActivityInfo
AlContributeManager.GetMonthCardInfo = GetMonthCardInfo
AlContributeManager.GetExploitRewardList = GetExploitRewardList
AlContributeManager.OnRecvExploitRewardMessage = OnRecvExploitRewardMessage
AlContributeManager.OnRecvUpdateSelfExploitRank = OnRecvUpdateSelfExploitRank
AlContributeManager.InitExploitRankInfo = InitExploitRankInfo

return AlContributeManager