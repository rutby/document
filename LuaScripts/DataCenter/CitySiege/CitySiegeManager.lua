---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/3/29 15:53
---

---
--- 丧尸围城活动
---
local CitySiegeManager = BaseClass("CitySiegeManager")
local CitySiegeAttackData = require "DataCenter.CitySiege.CitySiegeAttackData"

local TimerInterval = 0.5

local function __init(self)
    self:AddListeners()
    
    self.attackData = CitySiegeAttackData.New()
    self.bossDataDict = {} -- Dict<zombieId, CityResidentData>
    self.zombieDataDict = {} -- Dict<uuid, CityResidentData>
    self.dyingBossData = nil
    self.callTime = 0
    self.sendingCallAttack = false
    self.sendingFinishZombie = false
    self.inited = false
    self.isInCity = true
    self.zombieCount = 0
    self.isInvade = false
    self.rewardCache = nil
    self.finishRewardCache = nil

    self.timer = TimerManager:GetInstance():GetTimer(TimerInterval, self.TimerAction, self, false, false, false)
    self.timer:Start()
    self.canCallBoss = true--引导可以停止召唤boss
end

local function __delete(self)
    self.inited = false
    self.isInCity = false
    self.hasSpawnedInstantly = false
    
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
    
    self:RemoveListeners()
    self:DestroyAll()
end

local function AddListeners(self)
    EventManager:GetInstance():AddListener(EventId.CityResidentInitFinish, self.OnCityResidentInitFinish)
    EventManager:GetInstance():AddListener(EventId.CitySiegeStateChange, self.OnStateChange)
    EventManager:GetInstance():AddListener(EventId.CityZombieInvadeChange, self.OnZombieInvadeChange)
    EventManager:GetInstance():AddListener(EventId.VitaDayNightChange, self.OnDayNightChange)
    EventManager:GetInstance():AddListener(EventId.OnBeforeEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():AddListener(EventId.PveLevelBeforeEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():AddListener(EventId.PveLevelExit, self.OnPveLevelExit)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.CityResidentInitFinish, self.OnCityResidentInitFinish)
    EventManager:GetInstance():RemoveListener(EventId.CitySiegeStateChange, self.OnStateChange)
    EventManager:GetInstance():RemoveListener(EventId.CityZombieInvadeChange, self.OnZombieInvadeChange)
    EventManager:GetInstance():RemoveListener(EventId.VitaDayNightChange, self.OnDayNightChange)
    EventManager:GetInstance():RemoveListener(EventId.OnBeforeEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelBeforeEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelExit, self.OnPveLevelExit)
end

local function IsEngaged(self)
    return self.inited and self.isInCity and self.canCallBoss
end

local function TimerAction(self)
    if not self:IsEngaged() then
        return
    end
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local dayNight = DataCenter.VitaManager:GetDayNight(curTime)
    local state = self.attackData:GetState()
    if state == CitySiegeAttackState.Ready then
        local callTime = DataCenter.CitySiegeManager:GetCallTime()
        local restTime = callTime - curTime
        if restTime <= 0 and not DataCenter.GuideManager:InGuide() then
            self:SendCallAttack()
        end
    elseif state == CitySiegeAttackState.Playing then
        local wasInvade = self.isInvade
        self.isInvade = DataCenter.CityResidentManager:IsZombieInvade()
        if wasInvade ~= self.isInvade then
            if not self.isInvade then
                -- BOSS 喊话
                for zombieId, bossData in pairs(self.bossDataDict) do
                    local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
                    if line.BossType == CityResidentDefines.BossType.Big then
                        local param = {}
                        param.type = CityResidentDefines.TalkTriggerType.BossSiegeEnd
                        param.rUuid = bossData.uuid
                        param.bgType = 2
                        param.worldOffset = Vector3.New(0, 4, 0)
                        DataCenter.CityResidentManager:TryResidentTalk(param)
                        break
                    end
                end
                -- 小丧尸倒计时
                for _, zombieData in pairs(self.zombieDataDict) do
                    zombieData:SetLifetime(self:GetZombieLifetime())
                end
            end
            SoundUtil.PlayMainSceneBGMusic()
            EventManager:GetInstance():Broadcast(EventId.CitySiegeTypeChanged)
        end

        if dayNight == VitaDefines.DayNight.Night then
            local vitaTime = VitaUtil.RealTimeToVita(curTime)
            local todayMinute = VitaUtil.VitaTimeTodayMinute(vitaTime)
            if not self.hasSpawnedInstantly and todayMinute >= self:GetZombieInstantMinute() then
                self:SpawnZombieInstantly()
                self.hasSpawnedInstantly = true
                SoundUtil.PlayMainSceneBGMusic()
                EventManager:GetInstance():Broadcast(EventId.CitySiegeTypeChanged)
            end
        end
    end

    if state == CitySiegeAttackState.Playing or state == CitySiegeAttackState.Victory then
        if self.attackData.justFinishZombieId ~= 0 then
            self:CreateDyingBoss(self.attackData.justFinishZombieId)
            self.attackData.justFinishZombieId = 0
        end
        self:CheckShowReward()
    end
end

local function RefreshAll(self, callback)
    self:CheckShowWind()
    
    if not self:IsEngaged() then
        self:DestroyAll()
        if callback then
            callback()
        end
        return
    end
    
    local state = self.attackData:GetState()
    if state == CitySiegeAttackState.Playing or state == CitySiegeAttackState.Victory then
        self:CreateAll(callback)
    else
        self:DestroyAll()
        if callback then
            callback()
        end
    end
end

local function CreateAll(self, callback)
    local createIds = {}
    for _, id in ipairs(self.attackData.aliveZombieIds) do
        table.insert(createIds, id)
    end

    local destroyIds = {}
    for _, id in ipairs(self.attackData.finishZombieIds) do
        table.insert(destroyIds, id)
    end
    
    local cur = 0
    for _, id in ipairs(createIds) do
        self:CreateBoss(id, function()
            cur = cur + 1
            if cur == #createIds then
                if callback then
                    callback()
                end
            end
        end)
    end
    for _, id in ipairs(destroyIds) do
        self:DestroyBoss(id)
    end
end

local function DestroyAll(self)
    self.isInvade = false
    for id, _ in pairs(self.bossDataDict) do
        self:DestroyBoss(id)
    end
    for uuid, _ in pairs(self.zombieDataDict) do
        DataCenter.CityResidentManager:RemoveData(uuid)
    end
    if self.dyingBossData then
        DataCenter.CityResidentManager:RemoveData(self.dyingBossData.uuid)
        self.dyingBossData = nil
    end
end

local function RefreshAllBoss(self)
    for id, _ in pairs(self.bossDataDict) do
        self:RefreshBoss(id)
    end
end

local function CreateBoss(self, zombieId, callback)
    local data = self.bossDataDict[zombieId]
    if data ~= nil then
        self:RefreshBoss(zombieId)
        return
    end
    
    local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
    local uuid = DataCenter.CityResidentManager:GetNextZombieUuid()
    local param = {}
    param.prefabPath = line.model
    local posSpls = string.split(line.spawn_pos, ";")
    param.pos = Vector3.New(tonumber(posSpls[1]), tonumber(posSpls[2]), tonumber(posSpls[3]))
    data = DataCenter.CityResidentManager:AddData(uuid, CityResidentDefines.Type.Special, param)
    data.onCreate = function()
        data.onCreate = nil
        data:SetSpecialControl(true)
        data.obj.gameObject.name = "CitySiegeBoss_" .. zombieId
        data.obj.transform.localScale = Vector3.one * line.Scale
        
        local hudParam1 = {}
        hudParam1.type = CityHudType.SiegeBoss
        hudParam1.GetPos = function() return data:GetPos() end
        hudParam1.worldOffset = Vector3.New(0, 4, 0)
        hudParam1.updateEveryFrame = true
        hudParam1.location = CityHudLocation.UI
        hudParam1.zombieId = zombieId
        DataCenter.CityHudManager:Create(hudParam1)

        local hudParam2 = {}
        hudParam2.type = CityHudType.SiegeBossTime
        hudParam2.GetPos = function() return data:GetPos() end
        hudParam2.worldOffset = Vector3.New(0, -1, 0)
        hudParam2.updateEveryFrame = true
        hudParam2.location = CityHudLocation.UI
        hudParam2.zombieId = zombieId
        DataCenter.CityHudManager:Create(hudParam2)
        
        self:RefreshBoss(zombieId)
        
        if callback then
            callback()
        end
    end
    data.onClick = function()
        self:OnBossClick(zombieId)
    end
    data.zombieId = zombieId
    self.bossDataDict[zombieId] = data
end

local function DestroyBoss(self, zombieId)
    local data = self.bossDataDict[zombieId]
    if data == nil then
        return
    end
    
    DataCenter.CityHudManager:Destroy(data.uuid)
    DataCenter.CityResidentManager:RemoveData(data.uuid)
    self.bossDataDict[zombieId] = nil
end

local function RefreshBoss(self, zombieId)
    local data = self.bossDataDict[zombieId]
    if data == nil then
        return
    end
    
    if DataCenter.CityResidentManager:IsZombieInvade() then
        self:BossInvade(zombieId)
    else
        self:BossRetreat(zombieId)
    end
end

local function LocateBoss(self, callback)
    local targetData = nil
    local maxLevel = 0
    for _, zombieId in ipairs(self.attackData.aliveZombieIds) do
        local data = self.bossDataDict[zombieId]
        if data then
            local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
            local level = tonumber(line.Level)
            if level > maxLevel then
                maxLevel = level
                targetData = data
            end
        end
    end
    if targetData then
        CS.SceneManager.World:AutoLookat(targetData:GetPos(), CityResidentZoom.SiegeBoss, 0.4, callback)
    end
end

local function BossInvade(self, zombieId)
    local data = self.bossDataDict[zombieId]
    if data == nil then
        return
    end

    -- TODO: Beef
    --data:SetState(CityResidentDefines.SpecialState.SiegeBossInvade)
    data:SetState(CityResidentDefines.SpecialState.SiegeBossIdle)
end

local function BossRetreat(self, zombieId)
    local data = self.bossDataDict[zombieId]
    if data == nil then
        return
    end

    -- TODO: Beef
    --data:SetState(CityResidentDefines.SpecialState.SiegeBossRetreat)
    data:SetState(CityResidentDefines.SpecialState.SiegeBossIdle)
end

local function CreateDyingBoss(self, zombieId)
    local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
    local uuid = DataCenter.CityResidentManager:GetNextZombieUuid()
    local posSpls = string.split(line.spawn_pos, ";")
    local pos = Vector3.New(tonumber(posSpls[1]), tonumber(posSpls[2]), tonumber(posSpls[3]))
    local rot = Quaternion.Euler(0, line.spawn_Rotation or 0, 0)
    local param = {}
    param.prefabPath = line.model
    param.pos = pos
    param.rot = rot
    local data = DataCenter.CityResidentManager:AddData(uuid, CityResidentDefines.Type.Special, param)
    data.onCreate = function()
        data.onCreate = nil
        data:SetSpecialControl(true)
        data.obj.gameObject.name = "CitySiegeBoss_" .. zombieId
        data.obj.transform.localScale = Vector3.one * line.Scale
        data:SetState(CityResidentDefines.SpecialState.SiegeBossDead)
        data.onFinish = function()
            DataCenter.CityResidentManager:RemoveData(uuid)
            self.dyingBossData = nil

            if SceneUtils.GetIsInCity() then
                local state = self.attackData:GetState()
                if state == CitySiegeAttackState.Victory then
                    self:CheckShowFinalReward(function()
                        if SceneUtils.GetIsInCity() then
                            UIManager:GetInstance():OpenWindow(UIWindowNames.UICitySiegeTip, NormalPanelAnim, "470304")
                        end
                    end)
                end
            end
        end
        CS.SceneManager.World:AutoLookat(pos, CityResidentZoom.SiegeBoss, 0)
    end
    self.dyingBossData = data
end

local function SpawnZombieAround(self, zombieId, count, lifetime)
    if count <= 0 then
        return
    end
    
    local data = self.bossDataDict[zombieId]
    if data == nil then
        return
    end
    
    local curPos = data:GetPos()
    local radius = 3.5
    local spawnIds = {}
    local spawnIndex = 0
    local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
    local strs = string.split(line.zombieSpawnIds, ";")
    for _, str in ipairs(strs) do
        table.insert(spawnIds, tonumber(str))
    end
    local ran = math.random(1, 2)
    local soundName = ""
    if ran == 1 then
        soundName = "Effect_zombie_born1"
    else
        soundName = "Effect_zombie_born2"
    end
    if soundName~="" then
        SoundUtil.PlayEffect(soundName)
    end
    for i = 1, count do
        spawnIndex = spawnIndex + 1
        if spawnIndex > #spawnIds then
            spawnIndex = 1
        end
        local x = curPos.x + Mathf.RandomFloat(-radius, radius)
        local z = curPos.z + Mathf.RandomFloat(-radius, radius)
        local spawnPos = Vector3.New(x, 0, z)
        local spawnId = spawnIds[spawnIndex]
        local uuid = DataCenter.CityResidentManager:GetNextZombieUuid()
        local param = {}
        param.pos = spawnPos
        param.spawnId = spawnId
        param.isRedEye = true
        local zombieData = DataCenter.CityResidentManager:AddData(uuid, CityResidentDefines.Type.Zombie, param)
        zombieData:SetSpecialControl(true)
        zombieData.onCreate = function()
            zombieData:SetSpecialControl(false)
            zombieData:SetState(CityResidentDefines.ZombieState.Siege)
            zombieData:SetLifetime(lifetime)
        end
        zombieData.onRemove = function()
            self.zombieDataDict[uuid] = nil
            self.zombieCount = self.zombieCount - 1
        end
        self.zombieCount = self.zombieCount + 1
        self.zombieDataDict[uuid] = zombieData
    end
end

local function SpawnZombieInstantly(self)
    -- 只招一次，优先 BossType = 1 的
    for zombieId, _ in pairs(self.bossDataDict) do
        local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
        if line.BossType == CityResidentDefines.BossType.Big then
            self:SpawnZombieAround(zombieId, self:GetZombieInstantCount(), IntMaxValue)
            return
        end
    end
    for zombieId, _ in pairs(self.bossDataDict) do
        self:SpawnZombieAround(zombieId, self:GetZombieInstantCount(), IntMaxValue)
        return
    end
end

local function GetSpawnCount(self)
    if self.spawnCount == nil then
        self.spawnCount = LuaEntry.DataConfig:TryGetNum("city_zombie_attack", "k3")
    end
    return self.spawnCount
end

local function GetSpawnInterval(self)
    if self.spawnInterval == nil then
        self.spawnInterval = LuaEntry.DataConfig:TryGetNum("city_zombie_attack", "k4")
    end
    return self.spawnInterval
end

local function GetZombieLifetime(self)
    if self.zombieLifetime == nil then
        self.zombieLifetime = LuaEntry.DataConfig:TryGetNum("city_zombie_attack", "k5")
    end
    return self.zombieLifetime
end

local function GetZombieInstantCount(self)
    local bigBossCount = 0
    local smallBossCount = 0
    for zombieId, _ in pairs(self.bossDataDict) do
        local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
        if line.BossType == CityResidentDefines.BossType.Big then
            bigBossCount = bigBossCount + 1
        else
            smallBossCount = smallBossCount + 1
        end
    end
    local count = 0
    if bigBossCount == 0 and smallBossCount == 1 then
        count = LuaEntry.DataConfig:TryGetNum("city_zombie_attack", "k9")
    elseif bigBossCount == 0 and smallBossCount == 2 then
        count = LuaEntry.DataConfig:TryGetNum("city_zombie_attack", "k8")
    elseif bigBossCount == 1 and smallBossCount == 1 then
        count = LuaEntry.DataConfig:TryGetNum("city_zombie_attack", "k7")
    else
        count = LuaEntry.DataConfig:TryGetNum("city_zombie_attack", "k6")
    end
    return count
end

local function GetZombieInstantMinute(self)
    if self.zombieInstantMinute == nil then
        self.zombieInstantMinute = LuaEntry.DataConfig:TryGetNum("city_zombie_attack", "k10") * 60
    end
    return self.zombieInstantMinute
end

local function GetSiegeType(self)
    local state = self.attackData:GetState()
    if state == CitySiegeAttackState.Playing then
        if self.hasSpawnedInstantly then
            return CitySiegeType.Big
        elseif DataCenter.CityResidentManager:IsZombieInvade() then
            return CitySiegeType.Normal
        end
    end
    return CitySiegeType.None
end

local function CheckShowWind(self)
    if self:IsEngaged() then
        local state = self.attackData:GetState()
        if state == CitySiegeAttackState.Playing then
            if not UIManager:GetInstance():IsWindowOpen(UIWindowNames.UISandStorm) then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UISandStorm)
            end
            return
        end
    end
    if UIManager:GetInstance():IsWindowOpen(UIWindowNames.UISandStorm) then
        UIManager:GetInstance():DestroyWindow(UIWindowNames.UISandStorm)
    end
end

local function GetAttackData(self)
    return self.attackData
end

local function GetBossData(self, zombieId)
    return self.bossDataDict[zombieId]
end

local function GetCallTime(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.callTime == 0 then
        self.callTime = curTime + CityResidentDefines.SiegeCallDelay * 1000
    end
    return self.callTime
end

local function CheckShowReward(self)
    if table.IsNullOrEmpty(self.rewardCache) then
        return
    end
    
    DataCenter.RewardManager:ShowCommonReward({ reward = self.rewardCache })
    self.rewardCache = nil
end

local function CheckShowFinalReward(self, callback)
    if table.IsNullOrEmpty(self.finishRewardCache) then
        return
    end
    
    DataCenter.RewardManager:ShowCommonReward({ reward = self.finishRewardCache }, nil, nil, nil, nil, nil, nil, nil, callback)
    self.finishRewardCache = nil
end

local function CheckVictory(self)
    local state = self.attackData:GetState()
    if state == CitySiegeAttackState.Victory then
        DataCenter.CityResidentManager:SetPeace(true)
        self:SendFinishAttack()
    end
end

local function OnBossClick(self, zombieId)
    if self.sendingFinishZombie then
        return
    end
    if not table.hasvalue(self.attackData.aliveZombieIds, zombieId) then
        return
    end
    
    local data = self:GetBossData(zombieId)
    if data then
        CS.SceneManager.World:AutoLookat(data:GetPos(), CityResidentZoom.SiegeBoss, 0.2, function()
            SoundUtil.PlayEffect("Effect_zombie_click")
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICitySiegeBoss, NormalPanelAnim, zombieId)
        end)
    end
end

local function OnBossAttackClick(self, zombieId)
    if self.sendingFinishZombie then
        return
    end
    
    local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
    if line.BossType == CityResidentDefines.BossType.Big then
        for otherZombieId, _ in pairs(self.bossDataDict) do
            local otherLine = LocalController:instance():getLine(TableName.CitySiegeZombie, otherZombieId)
            if otherLine.BossType == CityResidentDefines.BossType.Normal then
                -- 有小BOSS时不能打大BOSS
                local data = self:GetBossData(otherZombieId)
                local pos = data:GetPos()
                CS.SceneManager.World:AutoLookat(pos, CityResidentZoom.SiegeBoss, 0.4, function()
                    local param = {}
                    param.positionType = PositionType.World
                    param.position = pos + Vector3.New(0, 1, 0)
                    DataCenter.ArrowManager:ShowArrow(param)
                end)
                UIUtil.ShowTipsId(470318)
                return
            end
        end
    end
    
    local param = {}
    param.pveId = line.PVEid
    param.pveEntrance = PveEntrance.SiegeBoss
    param.zombieId = zombieId
    PveUtil.EnterPve(param)
end

local function OnStateChange()
    local self = DataCenter.CitySiegeManager
    self:RefreshAll()
end

local function OnCityResidentInitFinish()
    local self = DataCenter.CitySiegeManager
    self.inited = true
    self:RefreshAll()
end

local function OnEnterWorld()
    local self = DataCenter.CitySiegeManager
    self.isInCity = false
    self:RefreshAll()
end

local function OnEnterCity()
    local self = DataCenter.CitySiegeManager
    self.isInCity = true
    self:RefreshAll()
end

local function OnPveLevelEnter()
    local self = DataCenter.CitySiegeManager
    self.isInCity = false
    self:RefreshAll()
end

local function OnPveLevelExit(levelParam)
    if not SceneUtils.GetIsInCity() then
        return
    end

    if levelParam == nil or levelParam.zombieId == nil then
        return
    end

    local zombieId = levelParam.zombieId
    local line = LocalController:instance():getLine(TableName.CitySiegeZombie, zombieId)
    local posSpls = string.split(line.spawn_pos, ";")
    local pos = Vector3.New(tonumber(posSpls[1]), tonumber(posSpls[2]), tonumber(posSpls[3]))
    CS.SceneManager.World:AutoLookat(pos, CityResidentZoom.SiegeBoss, 0)
end

local function OnZombieInvadeChange()
    if not SceneUtils.GetIsInCity() then
        return
    end
    local self = DataCenter.CitySiegeManager
    self:RefreshAll()

    if DataCenter.CityResidentManager:IsZombieInvade() then
        local state = self.attackData:GetState()
        if state == CitySiegeAttackState.Playing then
            UIUtil.ShowTipsId(470303)
        end
    end
end

local function OnDayNightChange()
    if not SceneUtils.GetIsInCity() then
        return
    end

    local self = DataCenter.CitySiegeManager
    local state = self.attackData:GetState()
    if state == CitySiegeAttackState.Playing then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local dayNight = DataCenter.VitaManager:GetDayNight(curTime)
        if dayNight ~= VitaDefines.DayNight.LateAtNight then
            self.hasSpawnedInstantly = false
        end
    end
end

local function HandleInit(self, message)
    if message["nowZombieAttack"] then
        self.attackData:ParseServerData(message["nowZombieAttack"], true)
        EventManager:GetInstance():Broadcast(EventId.CitySiegeUpdate)
    end
    self:RefreshAll()
    self:CheckVictory()
end

local function SendCallAttack(self)
    if self.sendingCallAttack then
        return
    end
    self.sendingCallAttack = true
    SFSNetwork.SendMessage(MsgDefines.UserCallZombieAttack)
end

local function SendFinishZombie(self, zombieId, heroes, pass)
    self.sendingFinishZombie = true
    SFSNetwork.SendMessage(MsgDefines.UserFinishZombie, zombieId, heroes, pass)
end

local function SendFinishAttack(self)
    SFSNetwork.SendMessage(MsgDefines.UserFinishZombieAttack)
end

local function HandleNowAttack(self, message)
    self.attackData:ParseServerData(message, true)
    EventManager:GetInstance():Broadcast(EventId.CitySiegeUpdate)
end

local function HandleCallAttack(self, message)
    self.sendingCallAttack = false
    self.attackData:ParseServerData(message, false)
    EventManager:GetInstance():Broadcast(EventId.CitySiegeUpdate)

    if self:IsEngaged() then
        GoToUtil.CloseAllWindows()
        self:RefreshAll()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICitySiegeStart, NormalPanelAnim, function()
            UIUtil.ShowTipsId(470301)
            self:LocateBoss()
        end)
    end
    SoundUtil.PlayMainSceneBGMusic()
    EventManager:GetInstance():Broadcast(EventId.CitySiegeTypeChanged)
end

local function HandleFinishZombie(self, message)
    self.sendingFinishZombie = false
    if message["attack"] then
        self.attackData:ParseServerData(message["attack"], false)
        if self:IsEngaged() then
            self:RefreshAll()
        end
        EventManager:GetInstance():Broadcast(EventId.CitySiegeUpdate)
    end
    if message["reward"] then
        for _, v in ipairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        self.rewardCache = message["reward"]
    end
    if message["battleContent"] then
        local battleContent = PveUtil.ParseBattleContent(message)
        local detailContent = PveUtil.ParseDetailContent(message)
        PveActorMgr:GetInstance():ParseData(battleContent, detailContent)
    end
    self:CheckVictory()
end

local function HandleFinishAttack(self, message)
    if message["reward"] then
        for _, v in ipairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        self.finishRewardCache = message["reward"]
    end
    SoundUtil.PlayMainSceneBGMusic()
    EventManager:GetInstance():Broadcast(EventId.CitySiegeTypeChanged)
end

function CitySiegeManager:SetCanCallBoss(canCallBoss)
    if self.canCallBoss ~= canCallBoss then
        self.canCallBoss = canCallBoss
    end
end

-- Internal
CitySiegeManager.__init = __init
CitySiegeManager.__delete = __delete
CitySiegeManager.AddListeners = AddListeners
CitySiegeManager.RemoveListeners = RemoveListeners
CitySiegeManager.IsEngaged = IsEngaged
CitySiegeManager.TimerAction = TimerAction

-- Scene
CitySiegeManager.RefreshAll = RefreshAll
CitySiegeManager.CreateAll = CreateAll
CitySiegeManager.DestroyAll = DestroyAll
CitySiegeManager.RefreshAllBoss = RefreshAllBoss
CitySiegeManager.CreateBoss = CreateBoss
CitySiegeManager.DestroyBoss = DestroyBoss
CitySiegeManager.RefreshBoss = RefreshBoss
CitySiegeManager.LocateBoss = LocateBoss
CitySiegeManager.BossInvade = BossInvade
CitySiegeManager.BossRetreat = BossRetreat
CitySiegeManager.CreateDyingBoss = CreateDyingBoss
CitySiegeManager.SpawnZombieAround = SpawnZombieAround
CitySiegeManager.SpawnZombieInstantly = SpawnZombieInstantly
CitySiegeManager.GetSpawnCount = GetSpawnCount
CitySiegeManager.GetSpawnInterval = GetSpawnInterval
CitySiegeManager.GetZombieLifetime = GetZombieLifetime
CitySiegeManager.GetZombieInstantCount = GetZombieInstantCount
CitySiegeManager.GetZombieInstantMinute = GetZombieInstantMinute
CitySiegeManager.GetSiegeType = GetSiegeType
CitySiegeManager.CheckShowWind = CheckShowWind

-- Data
CitySiegeManager.GetAttackData = GetAttackData
CitySiegeManager.GetBossData = GetBossData
CitySiegeManager.GetCallTime = GetCallTime
CitySiegeManager.CheckShowReward = CheckShowReward
CitySiegeManager.CheckShowFinalReward = CheckShowFinalReward
CitySiegeManager.CheckVictory = CheckVictory

-- Event
CitySiegeManager.OnBossClick = OnBossClick
CitySiegeManager.OnBossAttackClick = OnBossAttackClick
CitySiegeManager.OnStateChange = OnStateChange
CitySiegeManager.OnCityResidentInitFinish = OnCityResidentInitFinish
CitySiegeManager.OnEnterWorld = OnEnterWorld
CitySiegeManager.OnEnterCity = OnEnterCity
CitySiegeManager.OnPveLevelEnter = OnPveLevelEnter
CitySiegeManager.OnPveLevelExit = OnPveLevelExit
CitySiegeManager.OnZombieInvadeChange = OnZombieInvadeChange
CitySiegeManager.OnDayNightChange = OnDayNightChange

-- Message
CitySiegeManager.SendCallAttack = SendCallAttack
CitySiegeManager.SendFinishZombie = SendFinishZombie
CitySiegeManager.SendFinishAttack = SendFinishAttack

CitySiegeManager.HandleInit = HandleInit
CitySiegeManager.HandleNowAttack = HandleNowAttack
CitySiegeManager.HandleCallAttack = HandleCallAttack
CitySiegeManager.HandleFinishZombie = HandleFinishZombie
CitySiegeManager.HandleFinishAttack = HandleFinishAttack

return CitySiegeManager
