---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 2022/2/22 
---
local AllianceRedPacketManager = BaseClass("AllianceRedPacketManager")
local RedPacketInfo = require "DataCenter.AllianceRedPacketManager.RedPacketInfo"
local Localization = CS.GameEntry.Localization
function AllianceRedPacketManager:__init()
	self.redPacketList = {}
	self.msgTable = {} 			--红包房间信息
end

function AllianceRedPacketManager:__delete()
	self.redPacketList = nil
	self.msgTable = nil
end

--初始化得到的是还没有发过的红包
function AllianceRedPacketManager:InitRedPacket(message)
	self.redPacketList = {}
	if message["prepareRedPackets"] ~= nil then
		local data = message["prepareRedPackets"]
		for i = 1, #data do
			local info = RedPacketInfo.New()
			info:ParseData(data[i])
			self.redPacketList[info.uuid] = info
		end
	end
	--获取存在的红包
	SFSNetwork.SendMessage(MsgDefines.GetAllianceRedPacket)
end

--收到系统发放红包
function AllianceRedPacketManager:UpdateRedPacketByUUid(message)
	if next(message) then
		local data = self:GetRedPacketByUUid(message.uuid)
		if data then
			data:UpdateData(message)
		else
			--新红包标记未获取
			local info = RedPacketInfo.New()
			info:UpdateData(message)
			if not message.status then
				info:UpdateStatus(RedPacketState.VALID)
			end
			self.redPacketList[info.uuid] = info
		end
	end
	EventManager:GetInstance():Broadcast(EventId.GetRedPacketUpdate)
end

function AllianceRedPacketManager:UpdateRecordHandle(message)
	for i = 1, #message do
		local data = self:GetRedPacketByUUid(message[i].uid)
		if data then
			data:UpdateStatus(message[i].status)
		end
	end
end

--获取红包信息
function AllianceRedPacketManager:GetRedPacketByUUid(uuid)
	if self.redPacketList[uuid] then
		return self.redPacketList[uuid]
	end
	return nil
end

--获取所有红包
function AllianceRedPacketManager:GetRedPacket()
	return self.redPacketList
end

--更新红包领取记录
function AllianceRedPacketManager:UpdateRecordByUUid(message)
	if next(message) then
		local data = self:GetRedPacketByUUid(message.redPack.uuid)
		if data then
			data:UpdateData(message.redPack)
			data:UpdateRecord(message.record)
			data:UpdateStatus(message.status)
		else
			local info = RedPacketInfo.New()
			info:UpdateData(message.redPack)
			info:UpdateRecord(message.record)
			info:UpdateStatus(message.status)
			self.redPacketList[info.uuid] = info
		end
		--getGold存在就是领取
		if message.getGold then
			--看下领取的是什么类型
			local dialog
			if message.redPack.resType == ResourceType.Gold then
				LuaEntry.Player.gold = message["gold"]
				EventManager:GetInstance():Broadcast(EventId.UpdateGold)
				dialog = GameDialogDefine.DIAMOND
			elseif  message.redPack.resType == ResourceType.Money then
				LuaEntry.Resource.money = message.resource.money
				EventManager:GetInstance():Broadcast(EventId.ResourceUpdated)
				local template = DataCenter.ResourceTemplateManager:GetResourceTemplate(RewardToResType[RewardType.MONEY])
				dialog = template.name
			end
			--领导红包时若大于配置等级则发话
			local k4 = LuaEntry.DataConfig:TryGetNum("red_packet_time", "k4")
			if message.getGold >= message.redPack.total * k4 * 0.01 then
				--local msg = Localization:GetString("390888",message["redPack"]["name"],message.getGold,DataCenter.RewardManager:GetNameByType(ResTypeToReward[message.redPack.resType]))
				local _chatRoomManager = ChatInterface.getRoomMgr()
				for _, chatItem in pairs(_chatRoomManager:GetShareRoom()) do
					if (chatItem:isAllianceRoom() ) then
						local _roomId = chatItem.roomId
						ChatInterface.ChatShareMsg(_roomId,"390888",3,{message["redPack"]["name"],message.getGold,""},{"","",dialog})
						--EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SEND_ROOM_MSG_COMMAND, msgTable)
						break
					end
				end
			end
			--自动给红包点赞
			if next(self.msgTable) then
				ChatManager2:GetInstance():SetGiveLikeMsgTime(self.msgTable.msgSeq)
				ChatManager2:GetInstance():SetGiveLikeAnim(self.msgTable.msgSeq,1)
				EventManager:GetInstance():Broadcast(ChatEventEnum.CHAT_SEND_ROOM_MSG_UP_COMMAND, self.msgTable)
				self.msgTable = {}
			end
		end
		EventManager:GetInstance():Broadcast(EventId.GetRedPacketUpdate)
	end
end

--设置红包状态 
function AllianceRedPacketManager:UpdateStatusByUUid(uuid,state)
	local data = self:GetRedPacketByUUid(uuid)
	data:UpdateStatus(state)
end

--获取没有领过的红包
function AllianceRedPacketManager:GetValidRedPacketNum()
	local num = 0
	local data = self:GetRedPacket()
	if next(data) then
		for i, v in pairs(data) do
			if v.status == RedPacketState.VALID then
				num = num + 1
			end
		end
	end
	return num
end

--记录红包房间信息
function AllianceRedPacketManager:SetRedRoomInfo(param)
	self.msgTable = param
end

function AllianceRedPacketManager:ClearRedPacket()
	self.redPacketList = {}
end


return AllianceRedPacketManager

