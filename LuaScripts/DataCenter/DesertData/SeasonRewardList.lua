---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 24224.
--- DateTime: 2022/11/25 17:55
---
local SeasonRewardItem = require "DataCenter.DesertData.SeasonRewardItem" 
local SeasonRewardList = BaseClass("SeasonRewardList")

local function __init(self)
    self.ownerType = nil
    self.startTime =0
    self.finishTime = 0
    self.allianceForce = 0
    self.rewardDic = {}
    self.rewardMap = {}
    self.secondRewardMap = {}
end

local function __delete(self)
    self.ownerType = nil
    self.startTime = nil
    self.finishTime = nil
    self.allianceForce = nil
    self.rewardDic = {}
    self.rewardMap = {}
    self.secondRewardMap = {}
end

local function UpdateData(self,msg)
    self.ownerType = nil
    if msg["ownerType"] ~= nil then
        self.ownerType = msg["ownerType"]
    end
    self.startTime = msg["settlementTime"] or 0     -- 结算开始时间
    self.finishTime = msg["timeLeft"]               -- 结算结束时间
    self.allianceForce = msg["allianceForce"] or 0  -- 联盟势力值
    self.rewardDic = {}
    self.rewardMap = {}
    self.secondRewardMap = {}
    if msg["reward"] ~= nil then
        local reward = msg["reward"]
        if reward ~= nil then
            for k,v in pairs(reward) do
                v.index = k    -- reward_grade 1 2 3 4 5
                local oneData = SeasonRewardItem.New()
                oneData:UpdateData(v,k)
                if oneData.index>0 then
                    self.rewardDic[oneData.index] = oneData
                    local topRank = oneData.topRank
                    local stageType = oneData.stageType
                    local subStageType = oneData.subStageType
                    if stageType~=nil and subStageType~=nil then
                        if topRank ==1 then
                            if self.rewardMap[stageType] == nil then
                                self.rewardMap[stageType] ={}
                            end
                            self.rewardMap[stageType][subStageType] = oneData.index
                        elseif topRank == 2 then
                            if self.secondRewardMap[stageType] == nil then
                                self.secondRewardMap[stageType] ={}
                            end
                            self.secondRewardMap[stageType][subStageType] = oneData.index
                        end
                    end
                end
            end
        end
    end
end

local function GetSelfRewardCallBack(self)
    if self.ownerType~=nil and self.rewardDic[self.ownerType]~=nil then
        self.rewardDic[self.ownerType]:ReceiveSelfReward()
    end
end

local function SetSelfAllianceRewardPackageRestNum(self,packageId,restNum)
    if self.ownerType~=nil and self.rewardDic[self.ownerType]~=nil then
        self.rewardDic[self.ownerType]:SetPackageRestNum(packageId,restNum)
    end
end

local function GetSelfAllianceReward(self)
    if self.ownerType~=nil then
        return self.rewardDic[self.ownerType]
    end
end

local function GetSelfPackageId(self)
    if self.ownerType~=nil and self.rewardDic[self.ownerType]~=nil then
        return self.rewardDic[self.ownerType]:GetSelfPackageId()
    end
end

local function GetSelfRewardData(self)
    if self.ownerType~=nil and self.rewardDic[self.ownerType]~=nil then
        return self.rewardDic[self.ownerType]:GetSelfRewardData()
    end
end

local function GetRewardListByStage(self,index,topRank)
    local list = {}
    if topRank ==1 then
        if self.rewardMap[index]~=nil then
            local dic = self.rewardMap[index]
            for k,v in pairs(dic) do
                local oneData = self.rewardDic[v]
                if oneData~=nil then
                    table.insert(list,oneData)
                end
            end
        end
    elseif topRank ==2 then
        if self.secondRewardMap[index]~=nil then
            local dic = self.secondRewardMap[index]
            for k,v in pairs(dic) do
                local oneData = self.rewardDic[v]
                if oneData~=nil then
                    table.insert(list,oneData)
                end
            end
        end
    end
    
    return list
end

local function GetRewardByStageAndSubStage(self,index,subIndex,topRank)
    if topRank ==1 then
        if self.rewardMap[index]~=nil then
            local dic = self.rewardMap[index]
            if dic[subIndex]~=nil then
                local idx = dic[subIndex]
                return self.rewardDic[idx]
            end
        end
    elseif topRank ==2 then
        if self.secondRewardMap[index]~=nil then
            local dic = self.secondRewardMap[index]
            if dic[subIndex]~=nil then
                local idx = dic[subIndex]
                return self.rewardDic[idx]
            end
        end
    end
    
    return nil
end

local function GetRewardMap(self,topRank)
    if topRank ==1 then
        return self.rewardMap 
    elseif topRank ==2 then
        return self.secondRewardMap
    end
end
SeasonRewardList.__init = __init
SeasonRewardList.__delete = __delete
SeasonRewardList.UpdateData = UpdateData
SeasonRewardList.GetSelfRewardCallBack = GetSelfRewardCallBack
SeasonRewardList.SetSelfAllianceRewardPackageRestNum =SetSelfAllianceRewardPackageRestNum
SeasonRewardList.GetSelfAllianceReward= GetSelfAllianceReward
SeasonRewardList.GetSelfPackageId = GetSelfPackageId
SeasonRewardList.GetSelfRewardData = GetSelfRewardData
SeasonRewardList.GetRewardListByStage = GetRewardListByStage
SeasonRewardList.GetRewardByStageAndSubStage = GetRewardByStageAndSubStage
SeasonRewardList.GetRewardMap = GetRewardMap
return SeasonRewardList