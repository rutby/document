---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/3 10:45
---

local VitaResidentData = BaseClass("VitaResidentData")

local function __init(self)
    self.uuid = 0
    self.id = 0
    self.state = VitaDefines.ResidentState.None
    self.fUuid = 0 -- 工作的家具uuid
    self.hUuid = 0 -- 病床的uuid
    self.hp = 0 -- [已废弃] 健康值
    self.lastHealTime = 0
    self.lastExpTime = 0
    self.level = 1
    self.exp = 0 -- 目前永远是0
    self.needExp = -1 -- -1代表未缓存
    self.featureIds = {} -- List<featureId>
    self.effects = {} -- Dict<effectId, val>
    self.stamina = 0 -- 体力值
    self.mood = 0 -- 心情值
    self.lastStamina = 0 -- 上一次同步体力值
    self.lastMood = 0 -- 上一次同步心情值
    self.deltaStamina = 0 -- 变化体力值
    self.deltaMood = 0 -- 变化心情值
    self.maxStamina = 0 -- 最大体力值
    self.maxMood = 0 -- 最大心情值
    self.defense = 0 -- 防御力
    self.strikeEndTime = 0 -- 罢工结束时间
    self.deadReason = VitaDefines.ResidentDeadReason.None -- 死因
end

local function ParseServerData(self, serverData)
    if serverData.uuid then
        self.uuid = serverData.uuid
    end
    if serverData.rId then
        self.id = serverData.rId
        self:InitConfig()
    end
    if serverData.status then
        self.state = serverData.status
    end
    if serverData.wUuid then
        self.fUuid = serverData.wUuid
    end
    if serverData.hosUuid then
        self.hUuid = serverData.hosUuid
    end
    if serverData.hp then
        self.hp = serverData.hp
    end
    if serverData.lHT then
        -- 共用
        self.lastHealTime = serverData.lHT
        self.strikeEndTime = serverData.lHT
    end
    if serverData.lET then
        self.lastExpTime = serverData.lET
    end
    if serverData.lv then
        self.level = serverData.lv
        self.needExp = -1
    end
    if not string.IsNullOrEmpty(serverData.feature) then
        local strs = string.split(serverData.feature, ";")
        for _, str in ipairs(strs) do
            local featureId = tonumber(str)
            if not table.hasvalue(self.featureIds, featureId) then
                table.insert(self.featureIds, featureId)
            end
        end
    end
    if not table.IsNullOrEmpty(serverData.effect) then
        for effectId, val in pairs(serverData.effect) do
            self.effects[tonumber(effectId)] = val
        end
    end
    if serverData.STA then
        self.lastStamina = self.stamina
        self.stamina = serverData.STA
        self.deltaStamina = 0
    end
    if serverData.mood then
        self.lastMood = self.mood
        self.mood = serverData.mood
        self.deltaMood = 0
    end
end

local function InitConfig(self)
    self.maxStamina = tonumber(GetTableData(TableName.VitaResident, self.id, "stamina")) or 1
    self.maxMood = tonumber(GetTableData(TableName.VitaResident, self.id, "mood")) or 1
    self.defense = tonumber(GetTableData(TableName.VitaResident, self.id, "defense")) or 0
end

local function IsWorking(self)
    if self.deadReason ~= VitaDefines.ResidentDeadReason.None then
        return false
    end
    return self.state == VitaDefines.ResidentState.Normal and self.fUuid ~= 0
end

local function IsSick(self)
    if self.deadReason ~= VitaDefines.ResidentDeadReason.None then
        return false
    end
    return self.state == VitaDefines.ResidentState.Ill or self.state == VitaDefines.ResidentState.Healing
end

local function IsResting(self)
    if self.deadReason ~= VitaDefines.ResidentDeadReason.None then
        return false
    end
    return self.state == VitaDefines.ResidentState.Normal and self.fUuid == 0
end

local function IsReady(self)
    if self.deadReason ~= VitaDefines.ResidentDeadReason.None then
        return false
    end
    return self.state == VitaDefines.ResidentState.Ready or self.state == VitaDefines.ResidentState.ReadyIll
end

local function IsStrike(self)
    if self.deadReason ~= VitaDefines.ResidentDeadReason.None then
        return false
    end
    return self.state == VitaDefines.ResidentState.Strike
end

local function IsChef(self)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.DS_RESTAURANT)
    if buildData then
        local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByBuildUuid(buildData.uuid, FurnitureType.CookingBench)
        if furnitureInfo then
            return self.fUuid == furnitureInfo.uuid
        end
    end
    return false
end

local function IsDoctor(self)
    local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.DS_HOSPITAL)
    if buildData then
        local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByBuildUuid(buildData.uuid, FurnitureType.ConsultationDesk)
        if furnitureInfo then
            return self.fUuid == furnitureInfo.uuid
        end
    end
    return false
end

local function GetWorkFurnitureId(self)
    local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(self.fUuid)
    return furnitureInfo and furnitureInfo.fId or 0
end

-- 当前经验
local function GetCurExp(self)
    if self.lastExpTime == 0 then
        return 0
    end
    
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local time = math.max(curTime - self.lastExpTime, 0)
    local gainExp = time * self:GetGainExpSpeed()
    return math.min(self.exp + gainExp, self:GetNeedExp())
end

-- 升级所需经验
local function GetNeedExp(self)
    if self.needExp == -1 then
        local str = GetTableData(TableName.VitaResident, self.id, "exp")
        local spls = string.split(str, ";")
        self.needExp = tonumber(spls[self.level]) or 0
    end
    return self.needExp
end

-- 每秒获得的经验数量
local function GetGainExpSpeed(self)
    local list = DataCenter.VitaManager:GetConfig(VitaDefines.ConfigKey.LevelUpGainExp)
    return (list[self.level] or 0) * 0.001
end

-- 最大等级
local function GetMaxLevel(self)
    local canLevelUp = tonumber(GetTableData(TableName.VitaResident, self.id, "level_up"))
    if canLevelUp == 0 then
        return 0
    end
    local maxLevel = tonumber(GetTableData(TableName.VitaResident, self.id, "max_level")) or 1
    return maxLevel
end

-- 是否可以升级
local function CanLevelUp(self)
    local canLevelUp = tonumber(GetTableData(TableName.VitaResident, self.id, "level_up"))
    if canLevelUp == 0 then
        return false
    end
    
    if self:IsReady() then
        return false
    end
    
    if self.level >= self:GetMaxLevel() then
        return false
    end
    
    return self:GetCurExp() >= self:GetNeedExp()
end

local function GetEffectVal(self, effectId)
    return self.effects[tonumber(effectId)] or 0
end

local function ChangeStamina(self, delta)
    self.deltaStamina = self.deltaStamina + delta
end

local function GetCurStamina(self)
    return Mathf.Clamp(self.stamina + self.deltaStamina, 0, self.maxStamina)
end

local function GetMaxStamina(self)
    return self.maxStamina
end

local function ChangeMood(self, delta)
    self.deltaMood = self.deltaMood + delta
end

local function GetCurMood(self)
    return Mathf.Clamp(self.mood + self.deltaMood, 0, self.maxMood)
end

local function GetMaxMood(self)
    return self.maxMood
end

VitaResidentData.__init = __init

VitaResidentData.ParseServerData = ParseServerData
VitaResidentData.InitConfig = InitConfig
VitaResidentData.IsWorking = IsWorking
VitaResidentData.IsSick = IsSick
VitaResidentData.IsResting = IsResting
VitaResidentData.IsReady = IsReady
VitaResidentData.IsStrike = IsStrike
VitaResidentData.IsChef = IsChef
VitaResidentData.IsDoctor = IsDoctor
VitaResidentData.GetWorkFurnitureId = GetWorkFurnitureId
VitaResidentData.GetCurExp = GetCurExp
VitaResidentData.GetNeedExp = GetNeedExp
VitaResidentData.GetGainExpSpeed = GetGainExpSpeed
VitaResidentData.GetMaxLevel = GetMaxLevel
VitaResidentData.CanLevelUp = CanLevelUp
VitaResidentData.GetEffectVal = GetEffectVal
VitaResidentData.ChangeStamina = ChangeStamina
VitaResidentData.GetCurStamina = GetCurStamina
VitaResidentData.GetMaxStamina = GetMaxStamina
VitaResidentData.ChangeMood = ChangeMood
VitaResidentData.GetCurMood = GetCurMood
VitaResidentData.GetMaxMood = GetMaxMood

return VitaResidentData