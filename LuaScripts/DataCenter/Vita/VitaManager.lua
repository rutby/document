---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/2 10:57
---

-- Vital System: 维生系统
local VitaManager = BaseClass("VitaManager")
local VitaData = require "DataCenter.Vita.VitaData"
local VitaSegment = require "DataCenter.Vita.VitaSegment"
local VitaResidentData = require "DataCenter.Vita.VitaResidentData"
local VitaResidentTaskData = require "DataCenter.Vita.VitaResidentTaskData"

-- 当小人不足时，小人驻扎在建筑的得分
local ResidentWorkBuildScoreDict =
{
    [BuildingTypes.DS_RESTAURANT] = 7000,
    [BuildingTypes.DS_FARM] = 6000,
    [BuildingTypes.DS_FACTORY] = 5000,
    [BuildingTypes.FUN_BUILD_SOLAR_POWER_STATION] = 4000,
    [BuildingTypes.DS_COAL_YARD] = 3000,
    [BuildingTypes.DS_HOSPITAL_1] = 2000,
    [BuildingTypes.DS_BAR] = 1000,
}

-- 当小人不足时，小人驻扎在家具索引的得分
local ResidentWorkFurnitureIndexScoreDict =
{
    [1] = 60000,
    [2] = 50000,
    [3] = 40000,
    [4] = 30000,
    [5] = 20000,
    [6] = 10000,
}

-- 当小人充足时，小人驻扎在建筑的得分
local ResidentWorkBuildScoreDefault = 1000

-- 小人生病或罢工时的得分
local ResidentWorkBuildScoreBad = -1

-- 小人驻扎满足特性时的得分
local ResidentWorkBuildScoreFeature = 100

-- 小人不更换家具时的得分
local ResidentWorkStayFurniture = 10

local function __init(self)
    self:InitConfig()
    
    local timeRate = self:GetConfig(VitaDefines.ConfigKey.TimeRate)
    VitaUtil.SetTimeRate(timeRate)
    
    self.data = VitaData.New()
    self.updatedData = VitaData.New()
    self.residentDataDict = {} -- Dict<uuid, VitaResidentData>
    self.taskDataDict = {} -- Dict<uuid, VitaResidentTaskData>
    self.newResidentArrCache = nil
    self.curSegment = VitaSegment.New()
    self.cachedSegment = VitaSegment.New()
    self.syncCd = 0
    self.isSyncing = true
    self.isNewbieResident = false
    self.matterQueue = {}
    self.lastDayNight = nil
    self.lastTime = 0
    self.useFakeTime = false
    self.stopTime = false
    self.doTimeAction = false
    self.timer = TimerManager:GetInstance():GetTimer(VitaDefines.RefreshInterval, self.TimerAction, self, false, false, false)
    self.timer:Start()
    self.offlineRewardInfo = nil
    self.offlineDeadIds = nil
    
    self:AddListeners()
end

local function __delete(self)
    self:RemoveListeners()
    self.doTimeAction = false
    if self.timer then
        self.timer:Stop()
        self.timer = nil
    end
end

local function AddListeners(self)
    EventManager:GetInstance():AddListener(EventId.ChapterTask, self.OnTaskFinish)
    EventManager:GetInstance():AddListener(EventId.MainTaskSuccess, self.OnTaskFinish)
    EventManager:GetInstance():AddListener(EventId.MainLvUp, self.OnMainLvUp)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.ChapterTask, self.OnTaskFinish)
    EventManager:GetInstance():RemoveListener(EventId.MainTaskSuccess, self.OnTaskFinish)
    EventManager:GetInstance():RemoveListener(EventId.MainLvUp, self.OnMainLvUp)
end

local function IsOpen(self)
    return self.data.zeroTime > 0
end

local function InitConfig(self)
    self.configDict = {}
    local cfgStr, cfgSpls, list, dict
    
    -- temperature_config ----------------------------------------------------------------------------------------------
    
    self.configDict[VitaDefines.ConfigKey.TempDay] = LuaEntry.DataConfig:TryGetNum("temperature_config", "k1")
    self.configDict[VitaDefines.ConfigKey.TempNight] = LuaEntry.DataConfig:TryGetNum("temperature_config", "k2")
    self.configDict[VitaDefines.ConfigKey.TempStormDay] = LuaEntry.DataConfig:TryGetNum("temperature_config", "k3")
    self.configDict[VitaDefines.ConfigKey.TempStormNight] = LuaEntry.DataConfig:TryGetNum("temperature_config", "k4")
    self.configDict[VitaDefines.ConfigKey.TempFurnaceOff] = LuaEntry.DataConfig:TryGetNum("temperature_config", "k5")
    self.configDict[VitaDefines.ConfigKey.TempFurnaceOn] = LuaEntry.DataConfig:TryGetNum("temperature_config", "k6")
    self.configDict[VitaDefines.ConfigKey.TempFurnaceMax] = LuaEntry.DataConfig:TryGetNum("temperature_config", "k7")
    
    -- game_time -------------------------------------------------------------------------------------------------------
    
    self.configDict[VitaDefines.ConfigKey.TimeRate] = LuaEntry.DataConfig:TryGetNum("game_time", "k1")
    
    list = {}
    cfgStr = LuaEntry.DataConfig:TryGetStr("game_time", "k2")
    for i, str in ipairs(string.split(cfgStr, "|")) do
        local spls = string.split(str, ";")
        if #spls == 3 then
            local seg = VitaSegment.New()
            seg.index = i
            seg.type = tonumber(spls[1])
            seg.startTodayVitaTime = tonumber(spls[2]) * 60 -- hour to minute
            seg.endTodayVitaTime = tonumber(spls[3]) * 60 -- hour to minute
            table.insert(list, seg)
        end
    end
    self.configDict[VitaDefines.ConfigKey.Segment] = list
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("game_time", "k7")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.DayNight] =
    {
        [VitaDefines.DayNight.LateAtNight] = (tonumber(cfgSpls[1]) or 0) * 60, -- hour to minute
        [VitaDefines.DayNight.Day] = (tonumber(cfgSpls[2]) or 0) * 60, -- hour to minute
        [VitaDefines.DayNight.Night] = (tonumber(cfgSpls[3]) or 0) * 60, -- hour to minute
    }
    
    -- people_config ---------------------------------------------------------------------------------------------------
    
    self.configDict[VitaDefines.ConfigKey.HungerInit] = LuaEntry.DataConfig:TryGetNum("people_config", "k1")
    self.configDict[VitaDefines.ConfigKey.SleepInit] = LuaEntry.DataConfig:TryGetNum("people_config", "k3")
    self.configDict[VitaDefines.ConfigKey.ComfortInit] = LuaEntry.DataConfig:TryGetNum("people_config", "k6")
    self.configDict[VitaDefines.ConfigKey.MoodInit] = LuaEntry.DataConfig:TryGetNum("people_config", "k8")
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_config", "k2")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.HungerDecreaseSpeed] =
    {
        sleep = tonumber(cfgSpls[1]) or 0,
        rest = tonumber(cfgSpls[2]) or 0,
        work = tonumber(cfgSpls[3]) or 0,
    }
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_config", "k4")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.SleepDecreaseSpeed] =
    {
        sleep = tonumber(cfgSpls[1]) or 0,
        rest = tonumber(cfgSpls[1]) or 0,
        work = tonumber(cfgSpls[2]) or 0,
        eat = tonumber(cfgSpls[1]) or 0,
    }
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_config", "k5")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.HealthFactor] =
    {
        temp = tonumber(cfgSpls[1]) or 0,
        hunger = tonumber(cfgSpls[2]) or 0,
        sleep = tonumber(cfgSpls[3]) or 0,
    }
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_config", "k7")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.ComfortDecreaseSpeed] =
    {
        work = tonumber(cfgSpls[1]) or 0,
    }
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_config", "k9")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.MoodDecreaseSpeed] =
    {
        work = tonumber(cfgSpls[1]) or 0,
    }
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_config", "k10")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.HappinessFactor] =
    {
        comfort = tonumber(cfgSpls[1]) or 0,
        mood = tonumber(cfgSpls[2]) or 0,
    }
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_config", "k13")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.NoBedDialogs] = cfgSpls
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_config", "k14")
    cfgSpls = string.split(cfgStr, ";")
    self.configDict[VitaDefines.ConfigKey.NoBedSpeak] =
    {
        interval = tonumber(cfgSpls[1]) or 1,
        duration = tonumber(cfgSpls[2]) or 1,
    }
    
    -- dinner_choose_food ----------------------------------------------------------------------------------------------
    
    dict = {}
    for i = 1, VitaDefines.DinnerCount do
        cfgStr = LuaEntry.DataConfig:TryGetStr("dinner_choose_food", "k" .. i)
        if string.IsNullOrEmpty(cfgStr) then
            break
        end
        cfgSpls = string.split(cfgStr, ";")
        dict[i] =
        {
            foodCost = tonumber(cfgSpls[1]) or 0,
            addHunger = tonumber(cfgSpls[2]) or 0,
            name = cfgSpls[3],
            desc = cfgSpls[4],
            icon = cfgSpls[5],
        }
    end
    self.configDict[VitaDefines.ConfigKey.Dinner] = dict
    
    -- storm_config ----------------------------------------------------------------------------------------------------
    
    self.configDict[VitaDefines.ConfigKey.StormDuration] = LuaEntry.DataConfig:TryGetNum("storm_config", "k1")
    self.configDict[VitaDefines.ConfigKey.StormMainLevel] = LuaEntry.DataConfig:TryGetNum("storm_config", "k2")
    self.configDict[VitaDefines.ConfigKey.StormInterval] = LuaEntry.DataConfig:TryGetNum("storm_config", "k3")
    self.configDict[VitaDefines.ConfigKey.StormCount] = LuaEntry.DataConfig:TryGetNum("storm_config", "k4")
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("storm_config", "k5")
    list = {}
    for _, spl in ipairs(string.split(cfgStr, ";")) do
        table.insert(list, tonumber(spl))
    end
    self.configDict[VitaDefines.ConfigKey.StormGuideDuration] = list
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("storm_config", "k6")
    list = {}
    for _, str in ipairs(string.split(cfgStr, "|")) do
        local arr = {}
        for _, spl in ipairs(string.split(str, ";")) do
            table.insert(arr, tonumber(spl))
        end
        table.insert(list, arr)
    end
    self.configDict[VitaDefines.ConfigKey.StormGuideQuest] = list
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("storm_config", "k7")
    list = {}
    for _, spl in ipairs(string.split(cfgStr, ";")) do
        table.insert(list, tonumber(spl))
    end
    self.configDict[VitaDefines.ConfigKey.StormGuideReward] = list

    -- people_level ----------------------------------------------------------------------------------------------------

    self.configDict[VitaDefines.ConfigKey.LevelUpNeedGuideId] = LuaEntry.DataConfig:TryGetNum("people_level", "k5")
    self.configDict[VitaDefines.ConfigKey.LevelUpNeedMainLv] = LuaEntry.DataConfig:TryGetNum("people_level", "k6")
    self.configDict[VitaDefines.ConfigKey.LevelUpHudCount] = LuaEntry.DataConfig:TryGetNum("people_level", "k7")
    self.configDict[VitaDefines.ConfigKey.LevelUpHudInterval] = LuaEntry.DataConfig:TryGetNum("people_level", "k8")
    
    --cfgStr = LuaEntry.DataConfig:TryGetStr("people_level", "k1")
    --list = {}
    --for _, spl in ipairs(string.split(cfgStr, ";")) do
    --    table.insert(list, tonumber(spl))
    --end
    --self.configDict[VitaDefines.ConfigKey.LevelUpNeedExp] = list
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_level", "k2")
    list = {}
    for _, spl in ipairs(string.split(cfgStr, ";")) do
        table.insert(list, tonumber(spl))
    end
    self.configDict[VitaDefines.ConfigKey.LevelUpGainExp] = list
    
    cfgStr = LuaEntry.DataConfig:TryGetStr("people_level", "k3")
    list = {}
    for _, str in ipairs(string.split(cfgStr, ";")) do
        local spls = string.split(str, ",")
        if #spls == 2 then
            table.insert(list, { resType = tonumber(spls[1]), count = tonumber(spls[2]) })
        end
    end
    self.configDict[VitaDefines.ConfigKey.LevelUpNeedRes] = list
end

local function GetConfig(self, key)
    return self.configDict[key]
end

local function EnabledRiot(self)
    return LuaEntry.Effect:GetGameEffect(EffectDefine.RESIDENT_RIOT) == 1
end

local function TimerAction(self)
    if not self.doTimeAction then
        return
    end
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local vitaTime = VitaUtil.RealTimeToVita(curTime)
    local curSeg = self:GetSegment(curTime)
    
    -- 手动设置停止时间，或使用虚拟时间阻止跨阶段时
    -- 通过设置零时偏移，使 vitaTime 不变化
    if self.lastTime ~= 0 and (self.stopTime or self.useFakeTime and self.curSegment.type ~= VitaDefines.SegmentType.None and self.curSegment.endVitaTime - vitaTime < VitaDefines.StopTimeWhenNearSegmentEnd) then
        local zeroTimeOffset = VitaUtil.GetZeroTimeOffset()
        local deltaTime = curTime - self.lastTime
        VitaUtil.SetZeroTimeOffset(zeroTimeOffset + deltaTime)
        vitaTime = VitaUtil.RealTimeToVita(curTime)
        curSeg = self:GetSegment(curTime)
    end
    self.lastTime = curTime
    
    local lastSegmentIndex = self.curSegment.index
    self.curSegment:Copy(curSeg)
    
    if self.curSegment.index ~= lastSegmentIndex then
        Logger.Log("VitaManager SegmentChange: index = " .. self.curSegment.index .. ", type = " .. self.curSegment.type)
        EventManager:GetInstance():Broadcast(EventId.VitaSegmentChange)
    end
    
    local dayNight = self:GetDayNight(curTime)
    
    if self.lastDayNight ~= dayNight then
        if self.lastDayNight ~= nil then
            --if dayNight == VitaDefines.DayNight.Day then
            --    self:PushMatter(VitaDefines.Matter.Day)
            --elseif dayNight == VitaDefines.DayNight.Night then
            --    self:PushMatter(VitaDefines.Matter.Night)
            --else
            if dayNight == VitaDefines.DayNight.LateAtNight then
                self:PushMatter(VitaDefines.Matter.LateAtNight)
            else
                EventManager:GetInstance():Broadcast(EventId.VitaDayNightChangeAnimUI)
            end
        end
        self.lastDayNight = dayNight
        EventManager:GetInstance():Broadcast(EventId.VitaDayNightChange)
        if dayNight ~= VitaDefines.DayNight.Day and SceneUtils.GetIsInCity() then
            DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.FirstNight, SaveGuideDoneValue)
        end
    end
    
    if not self.isSyncing then
        self.syncCd = self.syncCd - VitaDefines.RefreshInterval
        if self.syncCd <= 0 then
            self:SendSync()
        end
    end
end

local function GetZeroTime(self)
    return self.data.zeroTime
end

-- 获取当前温度
local function GetCurTemp(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    return self:GetTemp(curTime)
end

-- 获取温度
local function GetTemp(self, time)
    local envTemp = self:GetEnvTemp(time)
    local furTemp = self:GetFurTemp()
    local effTemp = self:GetEffTemp()
    return envTemp + furTemp + effTemp
end

-- 获取环境温度
local function GetEnvTemp(self, time)
    local dayNight = self:GetDayNight(time)
    local isStorm = DataCenter.StormManager:IsStorm(time)
    if dayNight == VitaDefines.DayNight.Day then
        if isStorm then
            return self:GetConfig(VitaDefines.ConfigKey.TempStormDay)
        else
            return self:GetConfig(VitaDefines.ConfigKey.TempDay)
        end
    else
        if isStorm then
            return self:GetConfig(VitaDefines.ConfigKey.TempStormNight)
        else
            return self:GetConfig(VitaDefines.ConfigKey.TempNight)
        end
    end
end

-- 获取熔炉温度
local function GetFurTemp(self)
    if self.data.furnaceState == VitaDefines.FurnaceState.Close then
        return self:GetConfig(VitaDefines.ConfigKey.TempFurnaceOff)
    elseif self.data.furnaceState == VitaDefines.FurnaceState.Open then
        return self:GetConfig(VitaDefines.ConfigKey.TempFurnaceOn)
    elseif self.data.furnaceState == VitaDefines.FurnaceState.OpenWithBooster then
        return self:GetConfig(VitaDefines.ConfigKey.TempFurnaceMax)
    elseif self.data.furnaceState == VitaDefines.FurnaceState.CloseWithBooster then
        return self:GetConfig(VitaDefines.ConfigKey.TempFurnaceOff)
    end
    return 0
end

-- 获取效果温度
local function GetEffTemp(self)
    return LuaEntry.Effect:GetGameEffect(EffectDefine.VITA_TEMPERATURE_ADD)
end

local function GetDayNight(self, time)
    local vitaTime = VitaUtil.RealTimeToVita(time)
    local todayMinute = VitaUtil.VitaTimeTodayMinute(vitaTime)
    local config = self:GetConfig(VitaDefines.ConfigKey.DayNight)
    if todayMinute < config[VitaDefines.DayNight.LateAtNight] then
        return VitaDefines.DayNight.Night
    elseif todayMinute < config[VitaDefines.DayNight.Day] then
        return VitaDefines.DayNight.LateAtNight
    elseif todayMinute < config[VitaDefines.DayNight.Night] then
        return VitaDefines.DayNight.Day
    else
        return VitaDefines.DayNight.Night
    end
end

local function GetCurSegment(self)
    return self.curSegment
end

local function GetSegment(self, time)
    local vitaTime = VitaUtil.RealTimeToVita(time)
    local day = VitaUtil.VitaTimeToDHM(vitaTime)
    local todayMinute = VitaUtil.VitaTimeTodayMinute(vitaTime)
    for _, seg in ipairs(self:GetConfig(VitaDefines.ConfigKey.Segment)) do
        if todayMinute >= seg.startTodayVitaTime and todayMinute < seg.endTodayVitaTime then
            self.cachedSegment:Copy(seg)
            self.cachedSegment.startVitaTime = day * 1440 + seg.startTodayVitaTime
            self.cachedSegment.endVitaTime = day * 1440 + seg.endTodayVitaTime
            self.cachedSegment.startTime = VitaUtil.VitaTimeToReal(self.cachedSegment.startVitaTime)
            self.cachedSegment.endTime = VitaUtil.VitaTimeToReal(self.cachedSegment.endVitaTime)
            break
        end
    end
    return self.cachedSegment
end

-- 获取上次同步的数据
local function GetData(self)
    return self.data
end

-- 获取本地更新后的数据
local function GetUpdatedData(self, time)
    if self.data.lastSyncTime > 0 and self.updatedData.lastSyncTime < time then
        local residentCount, residentWorkCount, residentSickCount, residentRestCount = self:GetResidentCount()
        local hungerSpeed = self:GetConfig(VitaDefines.ConfigKey.HungerDecreaseSpeed)
        local sleepSpeed = self:GetConfig(VitaDefines.ConfigKey.SleepDecreaseSpeed)
        local comfortSpeed = self:GetConfig(VitaDefines.ConfigKey.ComfortDecreaseSpeed)
        local moodSpeed = self:GetConfig(VitaDefines.ConfigKey.MoodDecreaseSpeed)
        
        local mealProductSpeed = 0
        local mealHunger = 0
        local furnitureSleep = 0
        local furnitureComfort = 0
        local furnitureMood = 0
        
        local dinnerConfig = self:GetConfig(VitaDefines.ConfigKey.Dinner)[self.data.foodType]
        if dinnerConfig then
            mealHunger = mealHunger + dinnerConfig.addHunger + LuaEntry.Effect:GetGameEffect(EffectDefine.MEAL_HUNGER_ADD)
        end
        
        for _, furnitureInfo in pairs(DataCenter.FurnitureManager.allData) do
            local buildLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(furnitureInfo.fId, furnitureInfo.lv)
            if buildLevelTemplate and buildLevelTemplate.build_type == BuildType.Furniture then
                local para1 = tonumber(buildLevelTemplate.para1)
                local para2 = tonumber(buildLevelTemplate.para2)
                local para3 = tonumber(buildLevelTemplate.para3)
                local count = 0
                local speed = 0
                if para1 == 2 then
                    count = para3 + LuaEntry.Effect:GetGameEffect(EffectDefine.FURNITURE_SLEEP_ADD)
                    speed = count /(para2 * 1000)
                    furnitureSleep = furnitureSleep + speed
                elseif para1 == 3 then
                    count = para3 + LuaEntry.Effect:GetGameEffect(EffectDefine.FURNITURE_MOOD_ADD)
                    speed = count /(para2 * 1000)
                    furnitureMood = furnitureMood + speed
                elseif para1 == 4 then
                    count = para3 + LuaEntry.Effect:GetGameEffect(EffectDefine.FURNITURE_COMFORT_ADD)
                    speed = count /(para2 * 1000)
                    furnitureComfort = furnitureComfort + speed
                elseif para1 == ResourceType.Food then
                    count = para3
                    speed = count /(para2 * 1000)
                    mealProductSpeed = mealProductSpeed + speed
                end
            end
        end
        
        mealHunger = mealHunger / residentCount
        furnitureSleep = furnitureSleep / residentCount
        furnitureComfort = furnitureComfort / residentCount
        furnitureMood = furnitureMood / residentCount
        
        
        
        local data = self.updatedData
        data:Parse(self.data)
        local foodCount = LuaEntry.Resource:GetCntByResType(ResourceType.Food)
        local mealCount = data.storeMeal
        local lastTime = data.lastSyncTime
        local seg = self:GetSegment(data.lastSyncTime)
        while seg.startTime < time do
            local t1 = math.max(seg.startTime, data.lastSyncTime)
            local t2 = math.min(seg.endTime, time)
            local duration = t2 - t1
            lastTime = t1
            
            -- 睡眠时
            if seg.type == VitaDefines.SegmentType.Sleep then
                local hungerDelta = - hungerSpeed.sleep * duration
                local sleepDelta = furnitureSleep * duration
                data.hunger = data.hunger + hungerDelta
                data.sleep = data.sleep + sleepDelta
                
            -- 休息时
            elseif seg.type == VitaDefines.SegmentType.Rest then
                local hungerDelta = - hungerSpeed.rest * duration
                local sleepDelta = - sleepSpeed.rest * duration
                local comfortDelta = furnitureComfort * duration
                local moodDelta = furnitureMood * duration
                data.hunger = data.hunger + hungerDelta
                data.sleep = data.sleep + sleepDelta
                data.comfort = data.comfort + comfortDelta
                data.mood = data.mood + moodDelta
                
            -- 工作时
            elseif seg.type == VitaDefines.SegmentType.Work then
                local hungerDelta = - (hungerSpeed.work * residentWorkCount / residentCount + hungerSpeed.rest * (residentRestCount + residentSickCount) / residentCount) * duration
                local sleepDelta = - (sleepSpeed.work * residentWorkCount / residentCount + sleepSpeed.rest * (residentRestCount + residentSickCount) / residentCount) * duration
                local comfortDelta = - comfortSpeed.work * residentWorkCount / residentCount * duration
                local moodDelta = - moodSpeed.work * residentWorkCount / residentCount * duration
                data.hunger = data.hunger + hungerDelta
                data.sleep = data.sleep + sleepDelta
                data.comfort = data.comfort + comfortDelta
                data.mood = data.mood + moodDelta
                
                if dinnerConfig then
                    local mealProductByFood = math.floor(foodCount / dinnerConfig.foodCost)
                    local mealProductByFurniture = math.floor(mealProductSpeed * duration)
                    local mealProductByCapacity = residentCount - mealCount
                    local mealProduct = math.min(mealProductByFood, mealProductByFurniture, mealProductByCapacity)
                    local foodCost = mealProduct * dinnerConfig.foodCost
                    foodCount = foodCount - foodCost
                    mealCount = mealCount + mealProduct
                end
                
            -- 进食时
            elseif seg.type == VitaDefines.SegmentType.Eat then
                local residentEatCount = math.min(residentWorkCount, mealCount)
                local hungerDelta = mealHunger * residentEatCount
                local sleepDelta = - sleepSpeed.eat * duration
                data.hunger = data.hunger + hungerDelta
                data.sleep = data.sleep + sleepDelta
            end
            
            seg = self:GetSegment(seg.endTime + 1)
        end
        
        data:Refresh(time)
    end
    return self.updatedData
end

local function GetResidentData(self, uuid)
    return self.residentDataDict[uuid]
end

local function GenFakeResidentData(self, param)
    assert(param ~= nil and param.uuid ~= nil)
    local residentData = VitaResidentData.New()
    residentData.uuid = param.uuid
    residentData.id = param.id or 1
    residentData.state = param.state or VitaDefines.ResidentState
    residentData.fUuid = 0
    residentData.hUuid = 0
    residentData.hp = VitaDefines.MaxHp
    residentData.lastHealTime = 0
    return residentData
end

local function GetResidentDataById(self, id)
    for _, residentData in pairs(self.residentDataDict) do
        if residentData.id == id then
            return residentData
        end
    end
    return nil
end

local function GetResidentDataDict(self)
    return self.residentDataDict
end

local function GetResidentDataList(self)
    return table.values(self.residentDataDict)
end

local function RemoveResidentData(self, uuid)
    self.residentDataDict[uuid] = nil
    DataCenter.CityResidentManager:RemoveData(uuid)
end

local function SetResidentDead(self, uuid, reason)
    local residentData = self:GetResidentData(uuid)
    if residentData == nil then
        return
    end
    
    residentData.deadReason = reason
    if reason == VitaDefines.ResidentDeadReason.Newbie then
        self:RemoveResidentData(uuid)
    elseif reason == VitaDefines.ResidentDeadReason.Ill then
        self:RemoveResidentData(uuid)
    elseif reason == VitaDefines.ResidentDeadReason.Betray then
        
    elseif reason == VitaDefines.ResidentDeadReason.Zombie then
        
    elseif reason == VitaDefines.ResidentDeadReason.Adventure then
        self:RemoveResidentData(uuid)
    end
    DataCenter.CityResidentManager:OnResidentDeadReason(uuid)
end

local function ParseResidentServerDataList(self, serverDataList)
    if serverDataList == nil then
        return
    end
    
    for _, serverData in ipairs(serverDataList) do
        self:ParseResidentServerData(serverData)
    end
end

local function ParseResidentServerData(self, serverData)
    if serverData == nil then
        return
    end
    
    local uuid = serverData.uuid
    if uuid == nil then
        return
    end
    
    local needRefresh = false
    local needAdd = false
    
    local residentData = self.residentDataDict[uuid]
    if residentData == nil then
        residentData = VitaResidentData.New()
        self.residentDataDict[uuid] = residentData
        needAdd = true
    end
    
    local oldState = residentData.state
    local oldFUuid = residentData.fUuid
    local oldHUuid = residentData.hUuid
    residentData:ParseServerData(serverData)
    local newState = residentData.state
    local newFUuid = residentData.fUuid
    local newHUuid = residentData.hUuid
    
    if (oldState ~= VitaDefines.ResidentState.Ill and oldState ~= VitaDefines.ResidentState.Healing) and (newState == VitaDefines.ResidentState.Ill or newState == VitaDefines.ResidentState.Healing) then
        self:PushMatter(VitaDefines.Matter.ResidentIll)
        needRefresh = true
    end
    if (oldState == VitaDefines.ResidentState.Ill or oldState == VitaDefines.ResidentState.Healing) and (newState ~= VitaDefines.ResidentState.Ill and newState ~= VitaDefines.ResidentState.Healing) then
        self:PushMatter(VitaDefines.Matter.ResidentCure)
        needRefresh = true
    end
    if oldState == VitaDefines.ResidentState.Healing and newState ~= VitaDefines.ResidentState.Healing then
        self:PushMatter(VitaDefines.Matter.ResidentCure)
        needRefresh = true
    end
    if (oldState ~= VitaDefines.ResidentState.Ready and oldState ~= VitaDefines.ResidentState.ReadyIll) and (newState == VitaDefines.ResidentState.Ready or newState == VitaDefines.ResidentState.ReadyIll) then
        self:PushMatter(VitaDefines.Matter.ResidentQueue)
        needRefresh = true
    end
    if (oldState == VitaDefines.ResidentState.Ready or oldState == VitaDefines.ResidentState.ReadyIll) and (newState ~= VitaDefines.ResidentState.Ready and newState ~= VitaDefines.ResidentState.ReadyIll) then
        self:PushMatter(VitaDefines.Matter.ResidentCome)
        needRefresh = true
    end
    if oldState ~= VitaDefines.ResidentState.Strike and newState == VitaDefines.ResidentState.Strike then
        DataCenter.VitaManager:PushMatter(VitaDefines.Matter.ResidentStrike)
        needRefresh = true
    end
    if oldState == VitaDefines.ResidentState.Strike and newState ~= VitaDefines.ResidentState.Strike then
        DataCenter.VitaManager:PushMatter(VitaDefines.Matter.ResidentStrikeEnd)
        needRefresh = true
    end
    
    if oldFUuid ~= newFUuid then
        needRefresh = true
    elseif oldHUuid ~= newHUuid then
        needRefresh = true
    end
    
    if needAdd then
        DataCenter.CityResidentManager:AddData(uuid, CityResidentDefines.Type.Resident)
    elseif needRefresh then
        DataCenter.CityResidentManager:Refresh(uuid)
    end

    if VitaDefines.AutoAcceptResident then
        if residentData.state == VitaDefines.ResidentState.Ready or residentData.state == VitaDefines.ResidentState.ReadyIll then
            self:SendAcceptResident({ uuid })
        end
    end
end

local function GetResidentCount(self)
    local count, working, sick, resting, striking = 0, 0, 0, 0, 0
    for _, residentData in pairs(self.residentDataDict) do
        if not residentData:IsReady() and residentData.deadReason == VitaDefines.ResidentDeadReason.None then
            if residentData:IsWorking() then
                working = working + 1
            elseif residentData:IsSick() then
                sick = sick + 1
            elseif residentData:IsResting() then
                resting = resting + 1
            elseif residentData:IsStrike() then
                striking = striking + 1
            end
            count = count + 1
        end
    end
    return count, working, sick, resting, striking
end

local function GetResidentCountByState(self, state)
    local count = 0
    for _, residentData in pairs(self.residentDataDict) do
        if residentData.state == state then
            count = count + 1
        end
    end
    return count
end

local function GetResidentMaxCount(self)
    return toInt(LuaEntry.Effect:GetGameEffect(EffectDefine.RESIDENT_CAPACITY))
end

local function GetResidentDataListByFurnitureUuid(self, fUuid)
    local list = {}
    for _, residentData in pairs(self.residentDataDict) do
        if residentData.deadReason == VitaDefines.ResidentDeadReason.None then
            if residentData.fUuid == fUuid then
                table.insert(list, residentData)
            end
        end
    end
    return list
end

local function GetResidentDataListByBuildUuid(self, bUuid)
    local list = {}
    for _, residentData in pairs(self.residentDataDict) do
        if residentData.deadReason == VitaDefines.ResidentDeadReason.None then
            local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(residentData.fUuid)
            if furnitureInfo and furnitureInfo.bUuid == bUuid then
                table.insert(list, residentData)
            end
        end
    end
    return list
end

local function GetRestingResidentDataList(self)
    local list = {}
    for _, residentData in pairs(self.residentDataDict) do
        if residentData:IsResting() then
            table.insert(list, residentData)
        end
    end
    table.sort(list, function(residentDataA, residentDataB)
        return residentDataA.uuid < residentDataB.uuid
    end)
    return list
end

local function GetReadyResidentDataList(self)
    local list = {}
    for _, residentData in pairs(self.residentDataDict) do
        if residentData:IsReady() then
            table.insert(list, residentData)
        end
    end
    return list
end

local function GetResidentRiotInfo(self)
    local riotInfo = {}
    riotInfo.val = LuaEntry.DataConfig:TryGetNum("people_work_config", "k8") 
    local buffInfo = DataCenter.StatusManager:GetBuffTimeInfo(VitaDefines.ResidentRiotStatusId)
    if buffInfo then
        riotInfo.endTime = buffInfo.endTime
    else
        riotInfo.endTime = 0
    end
    return riotInfo
end

local function ResidentHasTask(self, rUuid)
    for _, taskData in pairs(self.taskDataDict) do
        if taskData.rUuid == rUuid then
            return true
        end
    end
    return false
end

local function GetTaskData(self, uuid)
    return self.taskDataDict[uuid]
end

local function GetTaskDataListByRUuid(self, rUuid)
    local list = {}
    for _, taskData in pairs(self.taskDataDict) do
        if taskData.rUuid == rUuid then
            table.insert(list, taskData)
        end
    end
    return list
end

local function ParseTaskServerDataList(self, serverDataList)
    if serverDataList == nil then
        return
    end

    for _, serverData in ipairs(serverDataList) do
        self:ParseTaskServerData(serverData)
    end
end

local function ParseTaskServerData(self, serverData)
    if serverData == nil then
        return
    end

    local uuid = serverData.uuid
    if uuid == nil then
        return
    end

    local taskData = self.taskDataDict[uuid]
    if taskData == nil then
        taskData = VitaResidentTaskData.New()
        taskData:ParseServerData(serverData)
        self.taskDataDict[uuid] = taskData
    else
        taskData:ParseServerData(serverData)
    end
end

local function DeleteTaskData(self, uuid)
    self.taskDataDict[uuid] = nil
end

local function ShowResidentWorkRed(self)
    local curWorkDict, curScore = self:GetCurResidentWorkDict()
    local bestWorkDict, bestScore = self:GetBestResidentWorkDict(curWorkDict)
    return curScore < bestScore
end

local function PushMatter(self, matter)
    if DataCenter.BuildManager.MainLv < 2 then
        return
    end
    if not SceneUtils.GetIsInCity() then
        return
    end
    if not table.hasvalue(self.matterQueue, matter) then
        table.insert(self.matterQueue, matter)
        EventManager:GetInstance():Broadcast(EventId.VitaMatterChange)
        --if not UIManager:GetInstance():IsWindowOpen(UIWindowNames.UIVitaMatter) then
        --    UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaMatter)
        --end
    end
end

local function PopMatter(self)
    if #self.matterQueue == 0 then
        return VitaDefines.Matter.None
    end
    
    return table.remove(self.matterQueue, 1)
end

local function GetMealFoodCost(self)
    local dinnerConfig = self:GetConfig(VitaDefines.ConfigKey.Dinner)[self.data.foodType]
    return dinnerConfig.foodCost
end

local function GetMealHungerAdd(self)
    local dinnerConfig = self:GetConfig(VitaDefines.ConfigKey.Dinner)[self.data.foodType]
    if dinnerConfig then
        return dinnerConfig.addHunger + LuaEntry.Effect:GetGameEffect(EffectDefine.MEAL_HUNGER_ADD)
    else
        return 0
    end
end

local function GetFurnaceState(self)
    if self.data then
        return self.data.furnaceState
    end
    return VitaDefines.FurnaceState.Close
end

local function IsFurnaceOpen(self)
    local state = self:GetFurnaceState()
    return state == VitaDefines.FurnaceState.Open or state == VitaDefines.FurnaceState.OpenWithBooster
end

local function CheckUseFakeTime(self)
    local needMainLv = LuaEntry.DataConfig:TryGetNum("newbie_people", "k4")
    local mainLvOk = DataCenter.BuildManager.MainLv <= needMainLv
    local questId = LuaEntry.DataConfig:TryGetStr("guide_time_limit", "k1")
    local questComplete = DataCenter.TaskManager:IsFinishTask(tostring(questId)) or DataCenter.ChapterTaskManager:CheckIsSuccess(tonumber(questId))
    self:SetUseFakeTime(mainLvOk and not questComplete)
end

local function SetUseFakeTime(self, useFakeTime)
    self.useFakeTime = useFakeTime
end

local function SetStopTime(self, stopTime)
    self.stopTime = stopTime
end

local function AcceptResidents(self)
    local uuids = {}
    local residentDataList = DataCenter.VitaManager:GetReadyResidentDataList()
    for _, residentData in ipairs(residentDataList) do
        table.insert(uuids, residentData.uuid)
    end
    self:SendAcceptResident(uuids)
end

local function GetAcceptResidentsCost(self)
    local resType = 0
    local count = 0
    local residentDataList = DataCenter.VitaManager:GetReadyResidentDataList()
    for _, residentData in ipairs(residentDataList) do
        local str = GetTableData(TableName.VitaResident, residentData.id, "cost")
        local spls = string.split(str, ";")
        if #spls == 2 then
            resType = tonumber(spls[1])
            count = count + tonumber(spls[2])
        end
    end
    return resType, count
end

local function GetCurResidentWorkDict(self)
    local rUuids, fUuids = self:GetWorkAvailableRUuidsAndFUuids()
    local isEnough = #rUuids > #fUuids
    local dict = {}
    local score = 0
    for _, residentData in pairs(self.residentDataDict) do
        local rUuid = residentData.uuid
        local fUuid = residentData.fUuid
        local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
        if furnitureInfo then
            dict[rUuid] = fUuid
            score = score + self:GetResidentWorkScore(rUuid, fUuid, isEnough, dict)
        end
    end
    return dict, score
end

local function GetBestResidentWorkDict(self, curWorkDict)
    local rUuids, fUuids = self:GetWorkAvailableRUuidsAndFUuids()
    local isEnough = #rUuids > #fUuids

    -- info: { rUuid, fUuid, score }
    local infoList = {} -- List<info>
    local infoDict = {} -- Dict<rUuid, Dict<fUuid, info>>
    local rUuidUseDict = {} -- Dict<rUuid, bool>
    local fUuidUseDict = {} -- Dict<fUuid, bool>
    
    for _, rUuid in ipairs(rUuids) do
        infoDict[rUuid] = {}
        for _, fUuid in ipairs(fUuids) do
            local score = self:GetResidentWorkScore(rUuid, fUuid, isEnough, curWorkDict)
            local info = { rUuid = rUuid, fUuid = fUuid, score = score }
            infoDict[rUuid][fUuid] = info
            table.insert(infoList, info)
        end
    end
    
    local dict = {}
    local score = 0
    table.sort(infoList, function(infoA, infoB)
        if infoA.score ~= infoB.score then
            return infoA.score > infoB.score
        else
            return infoA.rUuid < infoB.rUuid
        end
    end)
    for _, info in ipairs(infoList) do
        local rUuid = info.rUuid
        local fUuid = info.fUuid
        if not rUuidUseDict[rUuid] and not fUuidUseDict[fUuid] and info.score > 0 then
            rUuidUseDict[rUuid] = true
            fUuidUseDict[fUuid] = true
            dict[rUuid] = fUuid
            score = score + info.score
        end
    end
    
    return dict, score
end

local function GetResidentWorkScore(self, rUuid, fUuid, isEnough, curWorkDict)
    local residentData = self:GetResidentData(rUuid)
    if residentData:IsSick() or residentData:IsStrike() then
        return ResidentWorkBuildScoreBad
    end
    local furnitureInfo = DataCenter.FurnitureManager:GetFurnitureByUuid(fUuid)
    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(furnitureInfo.bUuid)
    local score = isEnough and ResidentWorkBuildScoreDefault or ResidentWorkBuildScoreDict[buildData.itemId]
    score = score + ResidentWorkFurnitureIndexScoreDict[furnitureInfo.index] or 0
    for _, featureId in ipairs(residentData.featureIds) do
        local buildId = tonumber(GetTableData(TableName.VitaResidentFeature, featureId, "talent_building"))
        if buildId == buildData.itemId then
            score = score + ResidentWorkBuildScoreFeature
        end
    end
    if curWorkDict[rUuid] == fUuid then
        score = score + ResidentWorkStayFurniture
    end
    return score
end

local function IsLevelUpEnabled(self)
    if LuaEntry.DataConfig:CheckSwitch("people_level") then
        local guideId = DataCenter.VitaManager:GetConfig(VitaDefines.ConfigKey.LevelUpNeedGuideId)
        local needMainLv = DataCenter.VitaManager:GetConfig(VitaDefines.ConfigKey.LevelUpNeedMainLv)
        if DataCenter.GuideManager:IsDoneThisGuide(guideId) or DataCenter.BuildManager.MainLv >= needMainLv then
            return true
        end
    end
    return false
end

local function GetAverageMoodPercent(self)
    local count = table.count(self.residentDataDict)
    if count == 0 then
        return 0
    end
    
    local percent = 0
    for _, residentData in pairs(self.residentDataDict) do
        percent = percent + residentData:GetCurMood() / residentData:GetMaxMood()
    end
    return percent / count
end

local function GetAverageStaminaPercent(self)
    local count = table.count(self.residentDataDict)
    if count == 0 then
        return 0
    end

    local percent = 0
    for _, residentData in pairs(self.residentDataDict) do
        percent = percent + residentData:GetCurStamina() / residentData:GetMaxStamina()
    end
    return percent / count
end

local function GetLastAverageMoodPercent(self)
    local count = table.count(self.residentDataDict)
    if count == 0 then
        return 0
    end
    
    local percent = 0
    for _, residentData in pairs(self.residentDataDict) do
        percent = percent + residentData.lastMood / residentData:GetMaxMood()
    end
    return percent / count
end

local function GetLastAverageStaminaPercent(self)
    local count = table.count(self.residentDataDict)
    if count == 0 then
        return 0
    end

    local percent = 0
    for _, residentData in pairs(self.residentDataDict) do
        percent = percent + residentData.lastStamina / residentData:GetMaxStamina()
    end
    return percent / count
end

local function GetCurSelectFoodType(self)
    if self.data.nextFoodType ~= -1 then
        return self.data.nextFoodType
    end
    return self.data.foodType or 1
end

local function GetCurSelectFoodParam(self)
    if self.data.nextFoodType ~= -1 then
        return self:GetConfig(VitaDefines.ConfigKey.Dinner)[self.data.nextFoodType] or { icon = "icon_item_FoodLow" }
    end
    return self:GetConfig(VitaDefines.ConfigKey.Dinner)[self.data.foodType] or { icon = "icon_item_FoodLow" }
end

local function GetWorkAvailableRUuidsAndFUuids(self)
    local rUuids = {}
    local fUuids = {}

    for _, residentData in pairs(self.residentDataDict) do
        if not residentData:IsReady() and residentData.deadReason == VitaDefines.ResidentDeadReason.None then
            local rUuid = residentData.uuid
            table.insert(rUuids, rUuid)
        end
    end

    for buildId, _ in pairs(ResidentWorkBuildScoreDict) do
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(buildId)
        if buildData and buildData.level > 0 then
            for _, fUuid in ipairs(buildData:GetWorkSlotFUuids()) do
                table.insert(fUuids, fUuid)
            end
        end
    end
    
    return rUuids, fUuids
end

local function OnTaskFinish()
    DataCenter.VitaManager:CheckUseFakeTime()
end

local function OnMainLvUp()
    DataCenter.VitaManager:CheckUseFakeTime()
end

local function SendSetResidentWork(self, uuid, fUuid)
    SFSNetwork.SendMessage(MsgDefines.ResidentSetWork, uuid, fUuid)
end

local function SendSetResidentWorkBatch(self, dict)
    self.oldResProduct = {}
    for _, resType in ipairs(ShowResTypes) do
        self.oldResProduct[resType] = DataCenter.ResourceManager:GetResourceProduction(resType)
    end
    SFSNetwork.SendMessage(MsgDefines.ResidentSetWorkBatch, dict)
end

local function SendSetFurnaceState(self, furnaceState)
    SFSNetwork.SendMessage(MsgDefines.ResidentSetFurnace, furnaceState)
end

local function SendSync(self)
    self.isSyncing = true
    local changedResidentDataList = {}
    for _, residentData in pairs(self.residentDataDict) do
        if residentData.deltaStamina ~= 0 or residentData.deltaMood ~= 0 then
            table.insert(changedResidentDataList, residentData)
        end
    end
    SFSNetwork.SendMessage(MsgDefines.UserSynResident, changedResidentDataList)
end

local function SendAcceptResident(self, uuids)
    SFSNetwork.SendMessage(MsgDefines.UserAcceptResident, uuids)
end

local function SendNewbieResident(self)
    SFSNetwork.SendMessage(MsgDefines.StartNewbieResident)
end

local function SendCureResident(self, doctorUuid, residentUuid)
    SFSNetwork.SendMessage(MsgDefines.DoctorCureResident, doctorUuid, residentUuid)
end

local function SendChangeTime(self, hour)
    SFSNetwork.SendMessage(MsgDefines.ChangeResidentTime, hour)
end

local function SendLevelUp(self, uuid)
    SFSNetwork.SendMessage(MsgDefines.UserLevelUpResident, uuid)
end

local function SendZombieAttack(self, uuids, type)
    SFSNetwork.SendMessage(MsgDefines.ZombieIllResident, uuids, type)
end

local function SendResidentTaskFinish(self, uuid)
    SFSNetwork.SendMessage(MsgDefines.FinishResidentTask, uuid)
end

local function HandleInit(self, message)
    self.isSyncing = false
    self:SetDoTimeAction(true)
    self.data:Parse(message["residentParam"])
    self:ParseResidentServerDataList(message["residents"])
    self:ParseTaskServerDataList(message["resident_task"])
    Logger.Table(message["resident_task"], "resident_task")

    if message["offlineSynResident"] then
        -- 离线收益
        local offlineTime = message["offlineSynResident"]["offlineTime"]
        if offlineTime then
            local minTime = LuaEntry.DataConfig:TryGetNum("people_work_config", "k10")
            if not DataCenter.GuideManager:InGuide() and offlineTime > minTime * 1000 then
                self.offlineRewardInfo = message["offlineSynResident"]
            end
        end
        
        -- 离线死亡
        local deathArr = message["offlineSynResident"]["deathResidentArr"]
        if deathArr then
            local deadIds = {}
            for _, serverData in ipairs(deathArr) do
                table.insert(deadIds, serverData.rId)
                self:SetResidentDead(serverData.uuid, serverData.deathReason)
            end
            self.offlineDeadIds = deadIds
        end
    end
    
    self:CheckUseFakeTime()
    VitaUtil.SetZeroTime(self.data.zeroTime)
    VitaUtil.SetZeroTimeOffset(0)
    
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
    EventManager:GetInstance():Broadcast(EventId.VitaFireStateChange)
    TimerManager:GetInstance():DelayInvoke(function()
        EventManager:GetInstance():Broadcast(EventId.ActivityTipStateUpdate,1)
    end, 0.1)
end

local function HandleSetResidentWork(self, message)
    self.data:Parse(message)
    self:ParseResidentServerData(message["resident"])
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
    EventManager:GetInstance():Broadcast(EventId.VitaFireStateChange)
    if message["resident"] then
        EventManager:GetInstance():Broadcast(EventId.VitaSetResidentWork, message["resident"]["uuid"])
    end
end

local function HandleSetResidentWorkBatch(self, message)
    self.data:Parse(message)
    self:ParseResidentServerDataList(message["residentArr"])
    
    self.newResProduct = {}
    for _, resType in ipairs(ShowResTypes) do
        self.newResProduct[resType] = DataCenter.ResourceManager:GetResourceProduction(resType)
    end
    
    local uuids = {}
    for _, v in ipairs(message["residentArr"]) do
        if v.wUuid and v.wUuid ~= 0 then
            table.insert(uuids, v.uuid)
        end
    end
    
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
    EventManager:GetInstance():Broadcast(EventId.VitaFireStateChange)
    EventManager:GetInstance():Broadcast(EventId.VitaSetResidentWorkBatch, uuids)
end

local function HandleSetFoodType(self, message)
    if message["foodType"] then
        self.data.foodType = message["foodType"]
    end
    if message["nextFoodType"] then
        self.data.nextFoodType = message["nextFoodType"]
    end
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
end

local function HandleSetFurnaceState(self, message)
    if message["status"] then
        self.data.furnaceState = message["status"]
    end

    if DataCenter.GuideManager:GetFlag(GuideTempFlagType.ChangeSafeArea) ~= nil then
        DataCenter.GuideManager:RemoveOneTempFlag(GuideTempFlagType.ChangeSafeArea)
    end

    if DataCenter.GuideManager:GetFlag(GuideTempFlagType.NoShowFireLight) == nil then
        EventManager:GetInstance():Broadcast(EventId.VitaFireStateChange)
        EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
    else
        EventManager:GetInstance():Broadcast(EventId.GuideRefreshVitaFireStateChange)
    end
end

local function HandleSync(self, message)
    self.isSyncing = false
    self.syncCd = VitaDefines.SyncInterval
    if message["timeStamp"] then
        CS.GameEntry.Timer:UpdateServerMilliseconds(message["timeStamp"])
        UITimeManager:GetInstance():UpdateServerMsDeltaTime(message["timeStamp"])
    end
    self.data:Parse(message["residentParam"])
    if message["syncAttr"] then
        local tbl = PBController.ParsePb1(message["syncAttr"], "protobuf.ResidentSyncAttr")
        if tbl["residentAttrs"] then
            self:ParseResidentServerDataList(tbl["residentAttrs"])
        end
    end
    self:ParseResidentServerDataList(message["residentArr"])
    self:ParseResidentServerDataList(message["newResidentArr"])
    self.newResidentArrCache = message["newResidentArr"]
    if message["deathResidentArr"] then
        for _, serverData in ipairs(message["deathResidentArr"]) do
            self:SetResidentDead(serverData.uuid, serverData.deathReason)
            self:PushMatter(VitaDefines.Matter.ResidentSickDie)
        end
    end
    if message["resource"] then
        LuaEntry.Resource:UpdateResource(message["resource"])
    end
    self:TimerAction()
    
    local zeroTime = VitaUtil.GetZeroTime()
    VitaUtil.SetZeroTime(self.data.zeroTime)
    -- 手动设置停止时间，或使用虚拟时间阻止跨阶段时
    -- 服务器改变 zeroTime 时，通过设置零时偏移，使当前 vitaTime 不发生突变
    if self.useFakeTime or self.stopTime then
        local diff = self.data.zeroTime - zeroTime
        local zeroTimeOffset = VitaUtil.GetZeroTimeOffset()
        VitaUtil.SetZeroTimeOffset(zeroTimeOffset - diff)
    end
    
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
end

local function HandleAcceptResident(self, message)
    local resource = message["resource"]
    if resource then
        LuaEntry.Resource:UpdateResource(resource)
    end
    self.data:Parse(message["residentParam"])
    self:ParseResidentServerDataList(message["residentArr"])
    DataCenter.CityResidentManager.readyResidentCount = 0
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
end

local function HandleNewbieResident(self, message)
    self:ParseResidentServerDataList(message["residentArr"])
    self.isNewbieResident = true
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
end

local function HandleCureResident(self, message)
    self:ParseResidentServerDataList(message["residentArr"])
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
end

local function HandleNewResident(self, message)
    self:ParseResidentServerDataList(message["residentArr"])
    self.newResidentArrCache = message["residentArr"]
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
end

local function HandleUpdateData(self, message)
    self.data:Parse(message)
end

local function HandleChangeTime(self, message)
    self.data:Parse(message)
    VitaUtil.SetZeroTime(self.data.zeroTime)
    self.lastTime = 0
    VitaUtil.SetZeroTimeOffset(0)
    EventManager:GetInstance():Broadcast(EventId.VitaChangeTime)
end

local function HandleLevelUp(self, message)
    self.data:Parse(message["residentParam"])
    if message["resident"] then
        self:ParseResidentServerData(message["resident"])
        EventManager:GetInstance():Broadcast(EventId.VitaLevelUp, message["resident"]["uuid"])
    end
    if message["gainFeature"] then
        
    end
    if message["resource"] then
        LuaEntry.Resource:UpdateResource(message["resource"])
    end
end

local function HandleEffectChange(self, message)
    self:ParseResidentServerData(message)
end

local function HandleZombieAttack(self, message)
    if message["type"] == VitaDefines.ZombieAttackResultType.Sick then
        self:ParseResidentServerDataList(message["residentArr"])
        for _, serverData in ipairs(message["residentArr"]) do
            EventManager:GetInstance():Broadcast(EventId.VitaZombieAttackSick, serverData.uuid)
        end
    elseif message["type"] == VitaDefines.ZombieAttackResultType.Dead then
        for _, serverData in ipairs(message["residentArr"]) do
            EventManager:GetInstance():Broadcast(EventId.VitaZombieAttackDead, serverData.uuid)
            self:SetResidentDead(serverData.uuid, serverData.deathReason)
            self:PushMatter(VitaDefines.Matter.ResidentDie)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
end

local function HandleResidentTaskUpdate(self, message)
    self:ParseTaskServerDataList(message["resident_task"])
    EventManager:GetInstance():Broadcast(EventId.VitaResidentTaskUpdate)
end

local function HandleResidentTaskDelete(self, message)
    if message["uuidArr"] then
        for _, uuid in ipairs(message["uuidArr"]) do
            self:DeleteTaskData(uuid)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.VitaResidentTaskUpdate)
end

local function HandleResidentTaskFinish(self, message)
    local taskData = self:GetTaskData(message["uuid"])
    if taskData then
        local line = LocalController:instance():getLine(TableName.ResidentStrike, taskData.id)
        local data = DataCenter.CityResidentManager:GetData(taskData.rUuid)
        if data then
            -- 增加心情值
            local hudParam = {}
            hudParam.type = CityHudType.PopText
            hudParam.pos = data:GetPos()
            hudParam.icon = string.format(LoadPath.UIVita, "UItemperature_icon_mood01")
            hudParam.text = "<color=#A4F92A>+" .. line.mood .. "</color>"
            hudParam.offset = Vector3.New(0, 50, 0)
            hudParam.duration = 1
            hudParam.location = CityHudLocation.World
            DataCenter.CityHudManager:Create(hudParam)
        end
        self:DeleteTaskData(taskData.uuid)
        EventManager:GetInstance():Broadcast(EventId.VitaResidentTaskFinish, taskData.uuid)
    end
    self:ParseResidentServerData(message["resident"])
    EventManager:GetInstance():Broadcast(EventId.VitaResidentTaskUpdate)
end

function VitaManager:NewbieResidentDeadHandle(message)
    local errorCode = message["errorCode"]
    if errorCode == nil then
        if message["deathResidentArr"] then
            for _, serverData in ipairs(message["deathResidentArr"]) do
                self:SetResidentDead(serverData.uuid, serverData.deathReason)
                self:PushMatter(VitaDefines.Matter.ResidentDie)
            end
        end
        EventManager:GetInstance():Broadcast(EventId.VitaDataUpdate)
    else
        UIUtil.ShowTipsId(errorCode)
    end
end

local function SetDoTimeAction(self,value)
    self.doTimeAction = value
end

VitaManager.__init = __init
VitaManager.__delete = __delete
VitaManager.AddListeners = AddListeners
VitaManager.RemoveListeners = RemoveListeners

VitaManager.IsOpen = IsOpen
VitaManager.InitConfig = InitConfig
VitaManager.GetConfig = GetConfig
VitaManager.EnabledRiot = EnabledRiot
VitaManager.TimerAction = TimerAction
VitaManager.GetZeroTime = GetZeroTime
VitaManager.GetCurTemp = GetCurTemp
VitaManager.GetTemp = GetTemp
VitaManager.GetEnvTemp = GetEnvTemp
VitaManager.GetFurTemp = GetFurTemp
VitaManager.GetEffTemp = GetEffTemp
VitaManager.GetDayNight = GetDayNight
VitaManager.GetCurSegment = GetCurSegment
VitaManager.GetSegment = GetSegment
VitaManager.GetData = GetData
VitaManager.GetUpdatedData = GetUpdatedData
VitaManager.GetResidentData = GetResidentData
VitaManager.GenFakeResidentData = GenFakeResidentData
VitaManager.GetResidentDataById = GetResidentDataById
VitaManager.GetResidentDataDict = GetResidentDataDict
VitaManager.GetResidentDataList = GetResidentDataList
VitaManager.RemoveResidentData = RemoveResidentData
VitaManager.SetResidentDead = SetResidentDead
VitaManager.ParseResidentServerDataList = ParseResidentServerDataList
VitaManager.ParseResidentServerData = ParseResidentServerData
VitaManager.GetResidentCount = GetResidentCount
VitaManager.GetResidentCountByState = GetResidentCountByState
VitaManager.GetResidentMaxCount = GetResidentMaxCount
VitaManager.GetResidentDataListByFurnitureUuid = GetResidentDataListByFurnitureUuid
VitaManager.GetResidentDataListByBuildUuid = GetResidentDataListByBuildUuid
VitaManager.GetRestingResidentDataList = GetRestingResidentDataList
VitaManager.GetReadyResidentDataList = GetReadyResidentDataList
VitaManager.GetResidentRiotInfo = GetResidentRiotInfo
VitaManager.ResidentHasTask = ResidentHasTask
VitaManager.GetTaskData = GetTaskData
VitaManager.GetTaskDataListByRUuid = GetTaskDataListByRUuid
VitaManager.ParseTaskServerDataList = ParseTaskServerDataList
VitaManager.ParseTaskServerData = ParseTaskServerData
VitaManager.DeleteTaskData = DeleteTaskData
VitaManager.ShowResidentWorkRed = ShowResidentWorkRed
VitaManager.PushMatter = PushMatter
VitaManager.PopMatter = PopMatter
VitaManager.GetMealFoodCost = GetMealFoodCost
VitaManager.GetMealHungerAdd = GetMealHungerAdd
VitaManager.GetFurnaceState = GetFurnaceState
VitaManager.IsFurnaceOpen = IsFurnaceOpen
VitaManager.CheckUseFakeTime = CheckUseFakeTime
VitaManager.SetUseFakeTime = SetUseFakeTime
VitaManager.SetStopTime = SetStopTime
VitaManager.AcceptResidents = AcceptResidents
VitaManager.GetAcceptResidentsCost = GetAcceptResidentsCost
VitaManager.GetCurResidentWorkDict = GetCurResidentWorkDict
VitaManager.GetBestResidentWorkDict = GetBestResidentWorkDict
VitaManager.GetResidentWorkScore = GetResidentWorkScore
VitaManager.IsLevelUpEnabled = IsLevelUpEnabled
VitaManager.GetAverageMoodPercent = GetAverageMoodPercent
VitaManager.GetAverageStaminaPercent = GetAverageStaminaPercent
VitaManager.GetLastAverageMoodPercent = GetLastAverageMoodPercent
VitaManager.GetLastAverageStaminaPercent = GetLastAverageStaminaPercent
VitaManager.GetCurSelectFoodType = GetCurSelectFoodType
VitaManager.GetCurSelectFoodParam = GetCurSelectFoodParam
VitaManager.GetWorkAvailableRUuidsAndFUuids = GetWorkAvailableRUuidsAndFUuids

VitaManager.OnTaskFinish = OnTaskFinish
VitaManager.OnMainLvUp = OnMainLvUp

VitaManager.SendSetResidentWork = SendSetResidentWork
VitaManager.SendSetResidentWorkBatch = SendSetResidentWorkBatch
VitaManager.SendSetFurnaceState = SendSetFurnaceState
VitaManager.SendSync = SendSync
VitaManager.SendAcceptResident = SendAcceptResident
VitaManager.SendNewbieResident = SendNewbieResident
VitaManager.SendCureResident = SendCureResident
VitaManager.SendChangeTime = SendChangeTime
VitaManager.SendLevelUp = SendLevelUp
VitaManager.SendZombieAttack = SendZombieAttack
VitaManager.SendResidentTaskFinish = SendResidentTaskFinish

VitaManager.HandleInit = HandleInit
VitaManager.HandleSetResidentWork = HandleSetResidentWork
VitaManager.HandleSetResidentWorkBatch = HandleSetResidentWorkBatch
VitaManager.HandleSetFoodType = HandleSetFoodType
VitaManager.HandleSetFurnaceState = HandleSetFurnaceState
VitaManager.HandleSync = HandleSync
VitaManager.HandleAcceptResident = HandleAcceptResident
VitaManager.HandleNewbieResident = HandleNewbieResident
VitaManager.HandleCureResident = HandleCureResident
VitaManager.HandleNewResident = HandleNewResident
VitaManager.HandleUpdateData = HandleUpdateData
VitaManager.HandleChangeTime = HandleChangeTime
VitaManager.HandleLevelUp = HandleLevelUp
VitaManager.HandleEffectChange = HandleEffectChange
VitaManager.HandleZombieAttack = HandleZombieAttack
VitaManager.HandleResidentTaskUpdate = HandleResidentTaskUpdate
VitaManager.HandleResidentTaskDelete = HandleResidentTaskDelete
VitaManager.HandleResidentTaskFinish = HandleResidentTaskFinish
VitaManager.SetDoTimeAction = SetDoTimeAction
return VitaManager
