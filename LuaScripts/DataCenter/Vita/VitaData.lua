---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/11/2 14:17
---

local VitaData = BaseClass("VitaData")

local function __init(self)
    -- 服务器下发
    self.zeroTime = 0 -- 零时刻, realTime = zeroTime 时, vitaTime = 0
    self.hunger = 0 -- 饥饿值
    self.sleep = 0 -- 睡眠值
    self.comfort = 0 -- 舒适值
    self.mood = 0 -- 心情值
    self.storeElectricity = 0 -- 储存 电
    self.storeMoney = 0 -- 储存 钱
    self.storeFood = 0 -- 储存 食物
    self.storeIron = 0 -- 储存 铁
    self.storeSteel = 0 -- 储存 煤
    self.storeMeal = 0 -- 储存 餐
    self.furnaceState = VitaDefines.FurnaceState.Close -- 熔炉状态
    self.foodType = 0 -- 正在生产的食物类型
    self.nextFoodType = 0 -- 下次生产的食物类型
    self.lastSyncTime = 0 -- 上次同步时间
    self.lastMealTime = 0 -- 上次出餐时间
    
    -- 本地计算
    self.temp = 0 -- 温度值
    self.health = 0 -- 健康值
    self.happiness = 0 -- 幸福值
end

local function Parse(self, data)
    if data == nil then
        return
    end
    
    if data.openTime then
        self.zeroTime = data.openTime
    end
    if data.zeroTime then
        self.zeroTime = data.zeroTime
    end
    
    if data.hunger then
        self.hunger = data.hunger
    end
    
    if data.sleep then
        self.sleep = data.sleep
    end
    
    if data.comfort then
        self.comfort = data.comfort
    end
    
    if data.mood then
        self.mood = data.mood
    end
    
    if data.storeElectricity then
        self.storeElectricity = data.storeElectricity
    end
    
    if data.storeMoney then
        self.storeMoney = data.storeMoney
    end
    
    if data.storeFood then
        self.storeFood = data.storeFood
    end
    
    if data.storeIron then
        self.storeIron = data.storeIron
    end
    
    if data.storeCoal then
        self.storeSteel = data.storeCoal
    end
    
    if data.storeMeal then
        self.storeMeal = data.storeMeal
        local curSeg = DataCenter.VitaManager:GetCurSegment()
        if curSeg.type ~= VitaDefines.SegmentType.Eat or curSeg.type ~= VitaDefines.SegmentType.Work then
            LuaEntry.Resource:SyncMealCount(data.storeMeal)
        end
    end
    
    if data.furnaceStatus then
        self.furnaceState = data.furnaceStatus
    end
    if data.furnaceState then
        self.furnaceState = data.furnaceState
    end
    
    if data.foodType then
        self.foodType = data.foodType
    end
    
    if data.nextFoodType then
        self.nextFoodType = data.nextFoodType
    end
    
    if data.lastSyncTime then
        self.lastSyncTime = data.lastSyncTime
    end
    
    if data.lastSynTime then
        self.lastSyncTime = data.lastSynTime
    end
    
    if data.lastMealTime then
        self.lastMealTime = data.lastMealTime
    end
    
    DataCenter.StormManager:UpdateStormTime(data)
    self:Refresh()
end

local function Refresh(self, time)
    if time then
        self.lastSyncTime = time
        self.temp = 100 * (1 - (DataCenter.VitaManager:GetTemp(time) / DataCenter.VitaManager:GetEnvTemp(time)))
    end
    
    self.hunger = VitaUtil.ClampAttribute(self.hunger)
    self.sleep = VitaUtil.ClampAttribute(self.sleep)
    self.comfort = VitaUtil.ClampAttribute(self.comfort)
    self.mood = VitaUtil.ClampAttribute(self.mood)
    self.temp = VitaUtil.ClampAttribute(self.temp)
    
    local healthFactor = DataCenter.VitaManager:GetConfig(VitaDefines.ConfigKey.HealthFactor)
    self.health = self.temp * healthFactor.temp + self.hunger * healthFactor.hunger + self.sleep * healthFactor.sleep
    self.health = VitaUtil.ClampAttribute(self.health)
    
    local happinessFactor = DataCenter.VitaManager:GetConfig(VitaDefines.ConfigKey.HappinessFactor)
    self.happiness = self.comfort * happinessFactor.comfort + self.mood * happinessFactor.mood
    self.happiness = VitaUtil.ClampAttribute(self.happiness)
end

local function GetAttribute(self, type)
    if type == VitaDefines.AttributeType.Temp then
        return self.temp
    elseif type == VitaDefines.AttributeType.Hunger then
        return self.hunger
    elseif type == VitaDefines.AttributeType.Sleep then
        return self.sleep
    elseif type == VitaDefines.AttributeType.Comfort then
        return self.comfort
    elseif type == VitaDefines.AttributeType.Mood then
        return self.mood
    elseif type == VitaDefines.AttributeType.Health then
        return self.health
    elseif type == VitaDefines.AttributeType.Happiness then
        return self.happiness
    end
    return 0
end

VitaData.__init = __init

VitaData.Parse = Parse
VitaData.Refresh = Refresh
VitaData.GetAttribute = GetAttribute

return VitaData