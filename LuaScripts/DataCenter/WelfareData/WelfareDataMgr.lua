---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 6/22/21 6:45 PM
---
require "DataCenter.WelfareData.WelfareTagInfo"
require "DataCenter.WelfareData.WelfareTagInfoCumulativeRecharge"
require "DataCenter.WelfareData.WelfareTagInfoDailyCumulativeRecharge"
require "DataCenter.WelfareData.WelfareTagInfoKeepPay"
require "DataCenter.WelfareData.WelfareTagInfoChainPay"
require "DataCenter.WelfareData.WelfareTagInfoHeroMonthCard"
require "DataCenter.WelfareData.WelfareTagInfoMonthCard"
require "DataCenter.WelfareData.WelfareTagInfoPremiumPack"
require "DataCenter.WelfareData.WelfareTagInfoSpecialPack"
require "DataCenter.WelfareData.WelfareTagInfoSpecialPackStoreStyle"
require "DataCenter.WelfareData.WelfareTagInfoStorePack"
require "DataCenter.WelfareData.WelfareTagInfoVip1"
require "DataCenter.WelfareData.WelfareTagInfoWeekCard"
require "DataCenter.WelfareData.WelfareTagInfoRobotPack"
require "DataCenter.WelfareData.WelfareTagType"


---@class WelfareController 福利中心控制器
WelfareController = {}
local M = WelfareController

---@type WelfareTagInfo[]
local tagInfos = nil
local selectedID = nil
local welfareCache = nil


---弹窗礼包列表，包含特殊礼包和超值礼包
---@return GiftPackInfoDefault[]
function M.getPopupPacks()
    local list = {}

    -- 添加特殊礼包和超值礼包
    ---@type table<number, WelfareTagInfoPremiumPack>
    local tagInfos = WelfareController.getShowTagInfos()
    for _, v in pairs(tagInfos) do
        if v:isSpecialPackTag() then
            table.insertto(list, v:getPopPackList(false))
        elseif v:getType() == WelfareTagType.PremiumPack then
            table.insertto(list, v:getPopPackList(false))
        end
    end

    -- 降序
    M._sortByPopup(list)
    return list
end


---通过popup字段排序
function M._sortByPopup(t)
    if t == nil then
        return
    end

    -- 降序
    table.sort(t, function(a, b)
        if a == nil then
            return false
        end

        if b == nil then
            return true
        end

        if a:getPopup() == b:getPopup() then
            -- 刘文需求 popup一样 用ID排序
            return tonumber(a:getID()) > tonumber(b:getID())
            --return false
        end

        return a:getPopup() > b:getPopup()
    end)
end

---获取展示页签 返回值为按优先级排序列表
---@return WelfareTagInfo[]
function M.getShowTagInfos()
    if (tagInfos == nil) then
        tagInfos = {}
        LocalController:instance():visitTable("recharge",function(id,lineData)
            local _modelClass = WelfareController.InitConfigTemplate(lineData:getValue("type"))
            if (_modelClass ~= nil) then
                _modelClass:parse(lineData)
                table.insert(tagInfos, _modelClass)
            end
        end)
        --local paidLotteryInfo = M.GetVirtualPaidLotteryInfo()
        --table.insert(tagInfos, paidLotteryInfo)
    end
    

    local t = {}
    for _, v in ipairs(tagInfos) do
        -- 暂时先一个一个的放
        local tempType = v:getType()
        if (tempType == WelfareTagType.PackStore or
            tempType == WelfareTagType.WeeklyPackage or
            tempType == WelfareTagType.WeeklyPackageNew or
            tempType == WelfareTagType.WeekCard or
            tempType == WelfareTagType.HeroMedalPackage or
            tempType == WelfareTagType.PaidLottery or
            tempType == WelfareTagType.PremiumPack or
            tempType == WelfareTagType.RobotPack or
            tempType == WelfareTagType.MonthCard or
            tempType == WelfareTagType.PiggyBank or
            tempType == WelfareTagType.EnergyBank or
            tempType == WelfareTagType.ScrollPack or
            tempType == WelfareTagType.GrowthPlan or 
            tempType == WelfareTagType.HeroMonthCardNew or
            tempType == WelfareTagType.CumulativeRecharge or
            tempType == WelfareTagType.DailyCumulativeRecharge or
            tempType == WelfareTagType.KeepPay or
            tempType == WelfareTagType.ChainPay or
            tempType == WelfareTagType.DailyPackage or 
            tempType == WelfareTagType.FirstCharge or 
            tempType == WelfareTagType.DailyMustBuy)
        then
            if v:isShow(v:getID()) then
                table.insert(t, v)
            end
        end
    end
    table.sort(t, function(a, b)
        if a == nil or b == nil then
            return false
        end

        if a:getOrder() == b:getOrder() then
            return false
        end

        return a:getOrder() < b:getOrder()
    end)
    return t
end
--
--function M.GetVirtualPaidLotteryInfo()
--    local _modelClass = WelfareController.InitConfigTemplate(WelfareTagType.PaidLottery)
--    if (_modelClass ~= nil) then
--        _modelClass._id = 9999
--        _modelClass._type = WelfareTagType.PaidLottery
--        _modelClass._name = 302603
--        _modelClass._order = 100
--        _modelClass._icon = "UIMain_icon_Packstore"
--        _modelClass._showIcon = true
--        return _modelClass
--    end
--end

function M.HasShowTag()
    local hasShowTag = false
    LocalController:instance():visitTable("recharge", function(id, lineData)
        if not hasShowTag then
            local type = lineData:getValue("type")
            local pack = WelfareController.InitConfigTemplate(type)
            if (pack ~= nil) then
                pack:parse(lineData)
                if pack:isShow() and
                    (type == WelfareTagType.PackStore or
                    type == WelfareTagType.PremiumPack or
                    type == WelfareTagType.RobotPack or
                    type == WelfareTagType.WeeklyPackage or
                    type == WelfareTagType.WeeklyPackageNew or
                    type == WelfareTagType.HeroMedalPackage or
                    type == WelfareTagType.SinglePack or
                    type == WelfareTagType.PiggyBank or
                    type == WelfareTagType.EnergyBank or
                    type == WelfareTagType.ScrollPack or
                    type == WelfareTagType.GrowthPlan or 
                    type == WelfareTagType.HeroMonthCardNew)
                then
                    hasShowTag = true
                end
            end
        end
    end)
    return hasShowTag
end

function M.getShowTagInfoByType(tagType)
    local infos = M.getShowTagInfos()
    if infos == nil or #infos < 1 then
        return nil
    end

    for _, v in ipairs(infos) do
        if v:getType() == tagType then
            return v
        end
    end
    return nil
end

function M.getShowTagInfoListByType(tagType)
    local list = {}
    
    local infos = M.getShowTagInfos()
    if not table.IsNullOrEmpty(infos) then
        for _, v in ipairs(infos) do
            if v:getType() == tagType then
                table.insert(list, v)
            end
        end
    end
    
    return list
end

function M.getShowTagInfoById(tagID)
    local infos = M.getShowTagInfos()
    if infos == nil or #infos < 1 then
        return nil
    end

    for _, v in ipairs(infos) do
        if v:getID() == tagID then
            return v
        end
    end
    return nil
end

function M.getShowTagInfosByIconOrder()

    local infos = M.getShowTagInfos()

    table.sort(infos, function(a, b)
        if a == nil or b == nil then
            return false
        end

        if a:getIconOrder() == b:getIconOrder() then
            return false
        end

        return a:getIconOrder() < b:getIconOrder()
    end)

    ---有小红点优先显示
    table.sort(infos, function(a, b)
        if a == nil or b == nil then
            return false
        end

        if a:hasRedPoint() == b:hasRedPoint() then
            return a:getIconOrder() < b:getIconOrder()
        end

        if a:hasRedPoint() then
            if not b:hasRedPoint() then
                return true
            end
        end

        return false
    end)

    return infos

end

function M.setSelectedID(id)
    selectedID = id
end

function M.getSelectedID()
    return selectedID
end

---@generic T : WelfareTagInfo
---@param type WelfareTagType
---@return T
function M.InitConfigTemplate(_cType)
    if (_cType == nil) then
        return nil
    end
    local tag = nil
    if _cType == WelfareTagType.SpecialPack or _cType == WelfareTagType.SpecialPackUnique then
        tag = require("DataCenter.WelfareData.WelfareTagInfoSpecialPack").New()
    elseif _cType == WelfareTagType.PremiumPack then
        tag = require("DataCenter.WelfareData.WelfareTagInfoPremiumPack").New()
    elseif _cType == WelfareTagType.PackStore then
        tag = require("DataCenter.WelfareData.WelfareTagInfoStorePack").New()
    elseif _cType == WelfareTagType.MonthCard then
        tag = require("DataCenter.WelfareData.WelfareTagInfoMonthCard").New()
    elseif _cType == WelfareTagType.HeroMedalPackage then
        tag = require("DataCenter.WelfareData.WelfareTagInfoHeroMedal").New()
    elseif _cType == WelfareTagType.PaidLottery then
        tag = require("DataCenter.WelfareData.WelfareTagInfoPaidLottery").New()
    elseif _cType == WelfareTagType.WeeklyPackage then
        tag = require("DataCenter.WelfareData.WelfareTagInfoWeeklyPackage").New()
    elseif _cType == WelfareTagType.WeeklyPackageNew then
        tag = require("DataCenter.WelfareData.WelfareTagInfoWeeklyPackageNew").New()
    elseif _cType == WelfareTagType.WeekCard then
        tag = require("DataCenter.WelfareData.WelfareTagInfoWeekCardNew").New()
    elseif _cType == WelfareTagType.Vip1 then
        tag = require("DataCenter.WelfareData.WelfareTagInfoVip1").New()
    elseif _cType == WelfareTagType.CumulativeRecharge then
        tag = require("DataCenter.WelfareData.WelfareTagInfoCumulativeRecharge").New()
    elseif _cType == WelfareTagType.DailyCumulativeRecharge then
        tag = require("DataCenter.WelfareData.WelfareTagInfoDailyCumulativeRecharge").New()
    elseif _cType == WelfareTagType.KeepPay then
        tag = require("DataCenter.WelfareData.WelfareTagInfoKeepPay").New()
    elseif _cType == WelfareTagType.ChainPay then
        tag = require("DataCenter.WelfareData.WelfareTagInfoChainPay").New()
    elseif _cType == WelfareTagType.SpecialPackStoreStyle then
        tag = require("DataCenter.WelfareData.WelfareTagInfoSpecialPackStoreStyle").New()
    elseif _cType == WelfareTagType.RobotPack then
        tag = require("DataCenter.WelfareData.WelfareTagInfoRobotPack").New()
    elseif _cType == WelfareTagType.PiggyBank then
        tag = require("DataCenter.WelfareData.WelfareTagInfoPiggyBank").New()
    elseif _cType == WelfareTagType.EnergyBank then
        tag = require("DataCenter.WelfareData.WelfareTagInfoEnergyBank").New()
    elseif _cType == WelfareTagType.GrowthPlan then
        tag = require("DataCenter.WelfareData.WelfareTagInfoGrowthPlan").New()
    elseif _cType == WelfareTagType.ScrollPack then
        tag = require("DataCenter.WelfareData.WelfareTagInfoScrollPack").New()
    elseif _cType == WelfareTagType.HeroMonthCardNew then
        tag = require("DataCenter.WelfareData.WelfareTagHeroMonthCard").New()
    elseif _cType == WelfareTagType.DailyPackage then
         tag = require("DataCenter.WelfareData.WelfareTagInfoDailyPackage").New()
    elseif _cType == WelfareTagType.PvePack then
         tag = require("DataCenter.WelfareData.WelfareTagInfoPvePack").New()
    elseif _cType == WelfareTagType.FirstCharge then
        tag = require("DataCenter.WelfareData.WelfareTagInfoFirstCharge").New()
    elseif _cType == WelfareTagType.DailyMustBuy then
        tag = require("DataCenter.WelfareData.WelfareTagInfoDailyMustBuy").New()
    else
        tag = require("DataCenter.WelfareData.WelfareTagInfo").New()
    end
    return tag
end

function M.checkTagCanShow(type)
    local tagInfo = M.getShowTagInfoByType(type)
    if tagInfo == nil then
        return false
    end
    return tagInfo:isShow()
end

function M.openWelfarePop(packs)
    OpenGameUI ("UIWelfarePopup", "UIResourcePopUp", {fromType = 2, giftpackInfos = packs});
end

function M.isSpecialPackTag(tagType)
    return tagType == WelfareTagType.SpecialPackStoreStyle or tagType == WelfareTagType.SpecialPack or tagType == WelfareTagType.SpecialPackUnique
end

function M.setWelfareCache(key, info)
    if welfareCache == nil then
        welfareCache = {}
    end
    welfareCache[key] = info
end

function M.getWelfareCache(key)
    if welfareCache == nil then
        welfareCache = {}
    end
    return welfareCache[key]
end

return M