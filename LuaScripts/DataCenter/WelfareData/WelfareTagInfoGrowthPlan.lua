---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/2/14 16:32
---

require "DataCenter.WelfareData.WelfareTagInfo"

---@class WelfareTagInfoGrowthPlan : WelfareTagInfo 成长计划页签信息
local WelfareTagInfoGrowthPlan = BaseClass("WelfareTagInfoGrowthPlan", WelfareTagInfo)
local M = WelfareTagInfoGrowthPlan

function M:isShow()
    local packId = GetTableData("recharge", self:getID(), "para1")
    local pack = GiftPackManager.get(packId)
    if pack then
        local cacheDict = WelfareController.getWelfareCache(WelfareMessageKey.GrowthPlanInfo) or {}
        local cache = cacheDict[packId]
        if cache ~= nil and cache.stageInfo ~= nil then
            for _, data in ipairs(cache.stageInfo) do
                if data.normalState == 0 or data.specialState == 0 then
                    return true
                end
            end
        end
    end
    return false
    --return pack ~= nil
end

function M:getRedDotNum()
    local count = 0
    local packId = GetTableData("recharge", self:getID(), "para1")
    local pack = GiftPackManager.get(packId)
    if pack ~= nil then
        local cacheDict = WelfareController.getWelfareCache(WelfareMessageKey.GrowthPlanInfo) or {}
        local cache = cacheDict[packId]
        if cache ~= nil and cache.stageInfo ~= nil then
            for _, data in ipairs(cache.stageInfo) do
                if DataCenter.BuildManager.MainLv >= data.needLevel then
                    --if data.normalState == 0 then
                    --    count = count + 1
                    --end
                    if data.specialState == 0 then
                       count = count + 1
                    end
                end
            end
            if cache.unlockSpecialReward ~= 1 then
                local lastRedCount = Setting:GetPrivateInt(SettingKeys.GROWTH_PLAN_VISITED_RED..packId, 0)
                if count ~= lastRedCount then
                    count = 1
                else
                    count = 0
                end
            end

        end
    end
    return count
end

return M