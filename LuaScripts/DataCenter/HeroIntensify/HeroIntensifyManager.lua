---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/15 11:28
---

local HeroIntensifyManager = BaseClass("HeroIntensifyManager")
local HeroIntensifyTemplate = require "DataCenter.HeroIntensify.HeroIntensifyTemplate"
local HeroIntensifyEffectTemplate = require "DataCenter.HeroIntensify.HeroIntensifyEffectTemplate"
local HeroIntensifyData = require "DataCenter.HeroIntensify.HeroIntensifyData"

local function __init(self)
    self.templateDict = {} -- Dict<id, Dict<id, HeroIntensifyTemplate>>
    self.effectTemplateDict = {} -- Dict<id, Dict<id, HeroIntensifyEffectTemplate>>
    self.dataDict = {} -- Dict<id, HeroIntensifyData>
    self.maxLevelDict = {} -- Dict<id, level>
    self.noPosterWarning = false
    self.noMedalWarning = false
    self.isUnlocking = false
    
    if LocalController:instance():getTable(TableName.HeroIntensify) == nil or
       LocalController:instance():getTable(TableName.HeroIntensifyRandomEffect) == nil then
        return
    end
    
    LocalController:instance():visitTable(TableName.HeroIntensify, function(_, line)
        local template = HeroIntensifyTemplate.New()
        template:InitData(line)
        local id = template.id
        local level = template.level
        if self.templateDict[id] == nil then
            self.templateDict[id] = {}
            self.maxLevelDict[id] = 0
        end
        self.templateDict[id][level] = template
        self.maxLevelDict[id] = math.max(self.maxLevelDict[id], level)
    end)
    
    LocalController:instance():visitTable(TableName.HeroIntensifyRandomEffect, function(_, line)
        local template = HeroIntensifyEffectTemplate.New()
        template:InitData(line)
        local id = template.id
        local level = template.level
        if self.effectTemplateDict[id] == nil then
            self.effectTemplateDict[id] = {}
        end
        self.effectTemplateDict[id][level] = template
    end)
    
    self:AddListeners()
end

local function __delete(self)
    self.templateDict = nil
    self.effectTemplateDict = nil
    self.dataDict = nil
    self.maxLevelDict = nil
    self.noPosterWarning = nil
    self.noMedalWarning = nil
    self.isUnlocking = nil
    self:RemoveListeners()
end

local function AddListeners(self)

end

local function RemoveListeners(self)

end

local function Enabled(self)
    if table.IsNullOrEmpty(self.templateDict) then
        return false
    end
    return LuaEntry.DataConfig:CheckSwitch("hero_camp_s2")
end

local function GetTemplate(self, id, level)
    if self.templateDict[id] == nil then
        return nil
    end
    level = math.min((level or 0), self:GetMaxLevel(id))
    return self.templateDict[id][level]
end

local function GetEffectTemplate(self, id, level)
    if self.effectTemplateDict[id] == nil then
        return nil
    end
    level = math.min((level or 0), self:GetMaxLevel(id))
    return self.effectTemplateDict[id][level]
end

local function GetShowIds(self, camp)
    local list = {}
    for id, _ in pairs(self.templateDict) do
        local template = self:GetTemplate(id)
        if camp == nil or camp == HeroCamp.All or template.camp == camp then
            table.insert(list, id)
        end
    end
    table.sort(list, function(idA, idB)
        local templateA = self:GetTemplate(idA)
        local templateB = self:GetTemplate(idB)
        if templateA.pos ~= templateB.pos then
            return templateA.pos < templateB.pos
        else
            return idA < idB
        end
    end)
    return list
end

local function GetData(self, id)
    if self.dataDict[id] == nil then
        local data = HeroIntensifyData.New()
        data.id = id
        self.dataDict[id] = data
    end
    return self.dataDict[id]
end

local function GetUnlockSeason(self)
    return LuaEntry.DataConfig:TryGetNum("hero_camp_intensify", "k1")
end

local function GetUnlockBuildingLevel(self)
    return LuaEntry.DataConfig:TryGetNum("hero_camp_intensify", "k2")
end

local function GetUnlockMainLevel(self)
    return LuaEntry.DataConfig:TryGetNum("hero_camp_intensify", "k9")
end

local function GetMaxLevel(self, id)
    local maxLevel = self.maxLevelDict[id] or 0
    local k3 = LuaEntry.DataConfig:TryGetNum("hero_camp_intensify", "k3")
    return math.min(maxLevel, k3)
end

local function GetPosterExp(self)
    return LuaEntry.DataConfig:TryGetNum("hero_camp_intensify", "k4")
end

local function GetMedalExp(self)
    return LuaEntry.DataConfig:TryGetNum("hero_camp_intensify", "k7")
end

local function GetRandomCost(self)
    local str = LuaEntry.DataConfig:TryGetStr("hero_camp_intensify", "k5") or ""
    local spls = string.split(str, ";")
    if #spls == 2 then
        return tonumber(spls[1]), tonumber(spls[2])
    end
    return 0, 0
end

local function GetRandomTimeLimit(self)
    return LuaEntry.DataConfig:TryGetNum("hero_camp_intensify", "k6")
end

local function GetBuildingLevel(self)
    local buildData = DataCenter.BuildManager:GetMaxLvBuildDataByBuildId(BuildingTypes.FUN_BUILD_HERO_OFFICE)
    if buildData ~= nil then
        return buildData.level
    else
        return 0
    end
end

local function GetTabUnlockState(self)
    if not self:Enabled() then
        return HeroIntensifyTabState.Hide
    end
    local needSeason = (DataCenter.SeasonDataManager:GetSeason() or 0) < self:GetUnlockSeason()
    local needBuildingLevel = self:GetBuildingLevel() < self:GetUnlockBuildingLevel()
    local needMainLevel = DataCenter.BuildManager.MainLv < self:GetUnlockMainLevel()
    local needHeroMaxed = not DataCenter.HeroDataManager:HasMaxedOrangeHero()
    if needMainLevel then
        return HeroIntensifyTabState.Hide
    else
        if needSeason then
            return HeroIntensifyTabState.NeedSeason
        elseif needBuildingLevel then
            return HeroIntensifyTabState.NeedBuildingLevel
        elseif needHeroMaxed then
            return HeroIntensifyTabState.NeedHeroMaxed
        else
            return HeroIntensifyTabState.Unlocked
        end
    end
end

local function GetRedNum(self, camp)
    if not self:Enabled() then
        return 0
    end
    if self:GetTabUnlockState() ~= HeroIntensifyTabState.Unlocked then
        return 0
    end
    local num = 0
    for id, _ in pairs(self.templateDict) do
        local data = self:GetData(id)
        local template = self:GetTemplate(id, data.level)
        if template and (camp == nil or camp == HeroCamp.All or template.camp == camp) and data:CanShowRed() then
            num = num + 1
        end
    end
    return num
end

--是否显示红点，这里不能直接调用GetRedNum，英雄数量多 性能爆炸
function HeroIntensifyManager:IsShowRedNum(camp)
    if self:Enabled() and self:GetTabUnlockState() == HeroIntensifyTabState.Unlocked then
        local enoughCamp = (camp == nil or camp == HeroCamp.All)
        for id, _ in pairs(self.templateDict) do
            local data = self:GetData(id)
            local template = self:GetTemplate(id, data.level)
            if template and (enoughCamp or template.camp == camp) and data:CanShowRed() then
                return true
            end
        end
    end
   
    return false
end

local function SendIntensify(self, id, costType, heroUuid)
    SFSNetwork.SendMessage(MsgDefines.HeroIntensify, id, costType, heroUuid)
end

local function SendIntensifyRandomEffect(self, id)
    SFSNetwork.SendMessage(MsgDefines.HeroIntensifyRandomEffect, id)
end

local function HandleInit(self, message)
    if message["heroIntensifys"] then
        for _, serverData in ipairs(message["heroIntensifys"]) do
            local data = HeroIntensifyData.New()
            data:ParseServerData(serverData)
            self.dataDict[data.id] = data
        end
    end
end

local function HandleIntensify(self, message)
    if message["costHeroUuid"] then
        DataCenter.HeroDataManager:RemoveOneHeroByUuid(message["costHeroUuid"])
    end
    
    if message["heroIntensify"] then
        local serverData = message["heroIntensify"]
        local data = HeroIntensifyData.New()
        data:ParseServerData(serverData)
        self.dataDict[data.id] = data
        EventManager:GetInstance():Broadcast(EventId.HeroIntensifyUpdate, data.id)
        
        if message["costType"] == HeroIntensifyCostType.Open then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIHeroIntensifyOpen, { anim = true }, data.id)
            DataCenter.HeroIntensifyManager.isUnlocking = false
        end
    end
end

local function HandleIntensifyRandomEffect(self, message)
    if message["heroIntensify"] then
        local serverData = message["heroIntensify"]
        local data = HeroIntensifyData.New()
        data:ParseServerData(serverData)
        data.oldRid = message["oldRandomEffectId"]
        self.dataDict[data.id] = data
        EventManager:GetInstance():Broadcast(EventId.HeroIntensifyUpdate, data.id)
        EventManager:GetInstance():Broadcast(EventId.HeroIntensifyRandomEffect, data.id)
    end
end

HeroIntensifyManager.__init = __init
HeroIntensifyManager.__delete = __delete
HeroIntensifyManager.AddListeners = AddListeners
HeroIntensifyManager.RemoveListeners = RemoveListeners

HeroIntensifyManager.Enabled = Enabled
HeroIntensifyManager.GetTemplate = GetTemplate
HeroIntensifyManager.GetEffectTemplate = GetEffectTemplate
HeroIntensifyManager.GetShowIds = GetShowIds
HeroIntensifyManager.GetData = GetData
HeroIntensifyManager.GetUnlockSeason = GetUnlockSeason
HeroIntensifyManager.GetUnlockBuildingLevel = GetUnlockBuildingLevel
HeroIntensifyManager.GetUnlockMainLevel = GetUnlockMainLevel
HeroIntensifyManager.GetMaxLevel = GetMaxLevel
HeroIntensifyManager.GetPosterExp = GetPosterExp
HeroIntensifyManager.GetMedalExp = GetMedalExp
HeroIntensifyManager.GetRandomCost = GetRandomCost
HeroIntensifyManager.GetRandomTimeLimit = GetRandomTimeLimit
HeroIntensifyManager.GetBuildingLevel = GetBuildingLevel
HeroIntensifyManager.GetTabUnlockState = GetTabUnlockState
HeroIntensifyManager.GetRedNum = GetRedNum

HeroIntensifyManager.SendIntensify = SendIntensify
HeroIntensifyManager.SendIntensifyRandomEffect = SendIntensifyRandomEffect

HeroIntensifyManager.HandleInit = HandleInit
HeroIntensifyManager.HandleIntensify = HandleIntensify
HeroIntensifyManager.HandleIntensifyRandomEffect = HandleIntensifyRandomEffect

return HeroIntensifyManager