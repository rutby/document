---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2023/2/15 11:30
---

local HeroIntensifyData = BaseClass("HeroIntensifyData")

local function __init(self)
    self.id = 0
    self.level = 0
    self.exp = 0
    self.rid = 0
    self.oldRid = 0
    self.randomUsed = 0
    self.randomTime = 0
end

local function __delete(self)
    self.id = nil
    self.level = nil
    self.exp = nil
    self.rid = nil
    self.oldRid = nil
    self.randomUsed = nil
    self.randomTime = nil
end

local function ParseServerData(self, serverData)
    self.id = serverData.intensifyId or 0
    self.level = serverData.lv or 0
    self.exp = serverData.exp or 0
    self.rid = serverData.randomEffectId or 0
    self.randomUsed = serverData.refreshNum or 0
    self.randomTime = serverData.resetTime or 0
end

local function GetShowTemplate(self, level)
    level = level or self.level
    local template = DataCenter.HeroIntensifyManager:GetTemplate(self.id, level)
    if template.type == HeroIntensifySlotType.Normal then
        return template
    else
        local effectTemplate = DataCenter.HeroIntensifyManager:GetEffectTemplate(self.rid, level)
        return effectTemplate
    end
end

local function GetRandomRest(self)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, self.randomTime // 1000)
    local total = DataCenter.HeroIntensifyManager:GetRandomTimeLimit()
    if sameDay then
        return math.max(total - self.randomUsed, 0)
    else
        return total
    end
end

local function GetState(self)
    local template = DataCenter.HeroIntensifyManager:GetTemplate(self.id, self.level)
    local season = DataCenter.SeasonDataManager:GetSeason() or 0
    if season < template.unlockSeason then
        return HeroIntensifyState.NeedSeason
    end
    if DataCenter.HeroIntensifyManager:GetBuildingLevel() < DataCenter.HeroIntensifyManager:GetUnlockBuildingLevel() then
        return HeroIntensifyState.NeedBuildingLevel
    end
    if template.type == HeroIntensifySlotType.Random and self.rid == 0 then
        return HeroIntensifyState.ToRandom
    end
    if self.level == 0 then
        return HeroIntensifyState.Unlocked
    end
    return HeroIntensifyState.Normal
end

local function CanShowRed(self)
    local template = DataCenter.HeroIntensifyManager:GetTemplate(self.id, self.level)
    local camp = GetTableData(HeroUtils.GetHeroXmlName(), template.heroId, "camp")
    if not DataCenter.HeroDataManager:HasMaxedOrangeHero(camp) then
        return false
    end
    local state = self:GetState()
    if state == HeroIntensifyState.Unlocked or state == HeroIntensifyState.ToRandom then
        return true
    end
    if state ~= HeroIntensifyState.Normal then
        return false
    end
    if self.level >= DataCenter.HeroIntensifyManager:GetMaxLevel(self.id) then
        return false
    end
    local heroData = DataCenter.HeroDataManager:GetHeroById(template.heroId)
    if heroData then
        if heroData:IsMaxQuality() and HeroUtils.GetPosterCount(template.heroId) > 0 then
            return true
        end
        if LuaEntry.DataConfig:CheckSwitch("hero_camp_medal") then
            if heroData:IsReachMaxMilitaryRank() and HeroUtils.GetMedalCount(template.heroId) > 0 then
                return true
            end
        end
    end
    return false
end

HeroIntensifyData.__init = __init
HeroIntensifyData.__delete = __delete

HeroIntensifyData.ParseServerData = ParseServerData
HeroIntensifyData.GetShowTemplate = GetShowTemplate
HeroIntensifyData.GetRandomRest = GetRandomRest
HeroIntensifyData.GetState = GetState
HeroIntensifyData.CanShowRed = CanShowRed

return HeroIntensifyData