---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 6/22/21 5:31 PM
---
require "DataCenter.GiftPackageData.GiftPackConst"
require "DataCenter.GiftPackageData.GiftPackInfoBase"
require "DataCenter.GiftPackageData.GiftPackInfoDefault"


---@class GiftPackManager 礼包管理器
GiftPackManager = {}
local M = GiftPackManager
local Timer = CS.GameEntry.Timer

local _inited = false
---@type table<string, GiftPackInfoBase>
local _packDict = {}
local _weeklyFreePackage = nil
local _weeklyFreePackageClaimT = 0
local _heroMedalPackList = nil
---@type table<string, boolean> 建筑礼包没有买过的礼包
local _buildingDict = {}

local WeeklyFreePackage = {
    is_show = "4",
    popup_image_mini = "icon_WeeklyPackage04",
    item = "210316;40|210121;10|210131;10",
}

local _package2RechargeDic = nil--礼包id到rechargeID的映射
local _type2RechargeListDic = nil--类型到rechargeID List的映射, <number, table>

local _nextReInitTime = 0 --下次重新初始化礼包的时间
local _nextEndPackId = 0 --最先结束的礼包id
local _lastInitTime = 0 --上次初始化礼包的时间
local _timer = nil
local _dayTimer = nil
local _sendExchangeTimes = {}

-- debug: 60 秒内请求超过 10 次，上报
function M.CheckSendExchangeTimes(logMsg)
    local curSec = UITimeManager:GetInstance():GetServerSeconds()
    if #_sendExchangeTimes > 0 then
        for i = #_sendExchangeTimes, 1, -1 do
            if curSec - _sendExchangeTimes[i] > 60 then
                table.remove(_sendExchangeTimes, i)
            end
        end
    end
    table.insert(_sendExchangeTimes, curSec)
    if #_sendExchangeTimes > 10 then
        local msg = string.format("Too many times to send message \"MsgDefines.ExchangeInfo\" in one minute:\n %s\n Timestamp:%s", logMsg, curSec)
        CommonUtil.SendErrorMessageToServer(curSec, curSec, msg)
        Logger.LogError(msg)
        _sendExchangeTimes = {}
    end
end

function M.InitPackageReq()
    SFSNetwork.SendMessage(MsgDefines.ExchangeInfo)
end

function M.InitPackage(message)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    _nextReInitTime = curTime + OneDayTime * 1000
    _nextEndPackId = 0
    
    local exchange = message["exchange"]
    if exchange ~= nil then
        M._clear()
        for _, v in ipairs(exchange) do
            local packType = tonumber(v.type)
            local pack = M._create(packType)
            if pack then
                pack:update(v)
                _packDict[pack:getID()] = pack
                --logErrorWithTag("Giftpack: ", pack:getID())
                
                -- init get info
                if pack:isGrowthPlanPack(1) then
                    SFSNetwork.SendMessage(MsgDefines.GrowthPlanGetInfo, pack:getID())
                end
                
                -- 取最近结束的礼包作为重新初始化的时间
                local endTime = pack:getEndTime()
                if endTime > curTime and endTime < _nextReInitTime then
                    _nextReInitTime = endTime
                    _nextEndPackId = pack:getID()
                end
            end
        end
        EventManager:GetInstance():Broadcast(EventId.OnPackageInfoUpdated)

        EventManager:GetInstance():Broadcast(EventId.UpdateGiftPackData)
        
        DataCenter.LoginPopManager:NoticeInitPackage()

        _lastInitTime = UITimeManager:GetInstance():GetServerTime()
        
        -- 计时器检查是否有礼包结束，是则重新获取礼包数据
        if _timer ~= nil then
            _timer:Stop()
        end
        _timer = TimerManager:GetInstance():GetTimer(1, M.TimerAction, nil, false, false, false)
        _timer:Start()

        -- 计时器检查是否跨天，是则重新获取礼包数据
        if _dayTimer ~= nil then
            _dayTimer:Stop()
        end
        _dayTimer = TimerManager:GetInstance():GetTimer(1, M.DayTimerAction, nil, false, false, false)
        _dayTimer:Start()
    end
end

function M.TimerAction()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if curTime >= _nextReInitTime then
        M.InitPackageReq()
        if _timer ~= nil then
            _timer:Stop()
        end
        
        -- check
        local pack = _packDict[_nextEndPackId]
        local idStr = pack and pack:getID() or "?"
        local endTimeStr = pack and pack:getEndTime() or "?"
        M.CheckSendExchangeTimes(string.format("Pack ended, n_id: %s, n_et: %s, p_id: %s, p_et: %s", _nextEndPackId, _nextReInitTime, idStr, endTimeStr))
    end
end

function M.DayTimerAction()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, _lastInitTime // 1000)
    if not sameDay then
        M.InitPackageReq()
        if _dayTimer ~= nil then
            _dayTimer:Stop()
        end
        
        -- check
        M.CheckSendExchangeTimes(string.format("Day ended, lt: %s", _lastInitTime))
    end
end

function M.init(message)
    if message == nil then
        return
    end

    -- 初始化，添加事件监听
    if not _inited then
        _inited = true
        M._addListener()
    end

    -- 礼包数据
    M.InitPackageReq()

    if message["weekFreeReward"] then
        local tempData = message["weekFreeReward"]
        M.InitWeeklyFreePackage()
        _weeklyFreePackageClaimT = tempData.lastRewardTime
        _weeklyFreePackage.rewards = tempData.reward--._serverData.item = tempData.reward
        
        table.sort(_weeklyFreePackage.rewards, function(a, b)
            if a.type ~= b.type then
                if a.type == RewardType.GOLD then
                    return true
                elseif b.type == RewardType.GOLD then
                    return false
                end
            else
                return false
            end
        end)
    end


    -- 建筑礼包没有买过的礼包
    local buildingGiftNotBought = message["buildingGiftNotBought"]
    if not string.IsNullOrEmpty(buildingGiftNotBought) then
        _buildingDict = {}
        local arr = string.split(buildingGiftNotBought, '|')
        for _, v in ipairs(arr) do
            if not string.IsNullOrEmpty(v) then
                _buildingDict[v] = true
            end
        end
    end
    

    EventManager:GetInstance():Broadcast(EventId.OnPackageInfoUpdated)

    -- 通知礼包数据刷新
    --Event:notify_all(CS.EventId.LFGiftPackRefresh)

    EventManager:GetInstance():Broadcast(EventId.UpdateGiftPackData)
    
end

--- 连续 Push 会都存下来，最后一起弹出
function M.pushPack(message)


    if message == nil then
        return
    end

    local exchange = message["exchange"]
    if exchange == nil then
        return
    end

    for _, v in ipairs(exchange) do
        local pop = false

        ---@type GiftPackInfoDefault
        local pack = M.get(v.id)

        if (pack == nil) then
            pop = true
        elseif not pack:isTimeValid() then
            pop = true
        end

        local success = M.update(v)
        if not success then
            logErrorWithTag("GiftPackPushFail", "ID: " .. v.id)
        end
        
        pack = M.get(v.id)
        if pack ~= nil and pop then
            if M.CheckIfIsPopupPackage(v.id) or pack:getType() == WelfareTagType.PiggyBank or pack:getType() == WelfareTagType.EnergyBank then
                M.TryShowPopupPackage(pack)
            end
        end
    end
    
    EventManager:GetInstance():Broadcast(EventId.OnPackageInfoUpdated)

    --Event:notify_all(CS.EventId.LFGiftPackRefresh)

end


---点击主UI礼包入口触发的逻辑
function M.clickMainGift()
    --local flag = LuaEntry.DataConfig:CheckSwitch("gift_icon")
    --if flag then
    --    local list = GiftPackManager.getPopupPacks()
    --    if #list > 0 then
    --        --打开福利中心
    --        local pack = list[1]
    --        OpenGameUI("UIWelfare", "Default", { tagID = pack:getTagID() })
    --        return
    --    end
    --end
    --
    ----打开弹窗
    --OpenGameUI("UIWelfarePopup", "Default")
end

function M.clickMainUIDiamond()
    if DataCenter.MonthCardNewManager:CheckIfMonthCardActive() then -- MonthCardManager.hasBoughtSomeCard() then
        M.openGiftPackByTag(_, WelfareTagType.PremiumPack)
    else
        M.openGiftPackByTag(_, WelfareTagType.MonthCard)

    end
end

---是否登陆弹窗
function M.hasPopup()
    local time = M.getMainCountdown()
    return time > 0
end

---获得主界面礼包入口显示的倒计时
function M.getMainCountdown()
    local list = M.getPopupPacks()
    if #list < 1 then
        return -1
    end

    return list[1]:getCountdown()
end

---获得超值礼包列表
---@param isSort boolean 是否排序
---@return GiftPackInfoDefault[]
function M.getPremiumPacks(isSort)
    local list = {}
    for _, v in pairs(_packDict) do
        local prem = v:isPremiumPack()
        if (prem == true) then
            local a = 1;
        end
        local isBound = v:isBought()
        local timev = v:isTimeValid()
        
        if v:isPremiumPack() and not v:isBought() and v:isTimeValid() then
            table.insert(list, v)
        end
    end

    -- 降序
    if isSort == nil or isSort then
        M._sortByPopup(list)
    end
    return list
end

function M.InitWeeklyFreePackage()
    if not _weeklyFreePackage then
        _weeklyFreePackage = M._create("4")
        _weeklyFreePackage:update(WeeklyFreePackage)
        _weeklyFreePackage.isWeeklyFreePackage = true
    end
    --tempPackage._serverData.is_show = WeeklyFreePackage.is_show
    --tempPackage._serverData.popup_image_mini = WeeklyFreePackage.popup_image_mini
    --tempPackage._serverData.gold_doller = WeeklyFreePackage.gold_doller
    --tempPackage._serverData.item = WeeklyFreePackage.item
    --_weeklyFreePackage = tempPackage
end

function M.UpdateClaimFreeWeeklyPackageT(t)
    if t["lastRewardTime"] then
        _weeklyFreePackageClaimT = t["lastRewardTime"]
    end
    DataCenter.RewardManager:ShowCommonReward(t)
    for k,v in pairs(t["reward"]) do
        DataCenter.RewardManager:AddOneReward(v)
    end
    EventManager:GetInstance():Broadcast(EventId.FreeWeeklyPackage)
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

function M.GetWeeklyPackageList()
    local list = {}
    
    for _, v in pairs(_packDict) do
        local isWeekly = v:IsWeeklyPackage()
        if isWeekly then
            table.insert(list, v)
        end
    end
    if #list > 0 then
        if not _weeklyFreePackage then
            M.InitWeeklyFreePackage()
        end
        table.insert(list, _weeklyFreePackage)
    end
    return list
end

--首尾为空
function M.GetWeeklyPackageNewList()
    local list = {}

    for _, v in pairs(_packDict) do
        local isWeeklyNew = v:IsWeeklyPackageNew()
        if isWeeklyNew and v:canGet() then
            table.insert(list, v)
        end
    end

    table.sort(list, function(a, b)
        if a:getPopup() ~= b:getPopup() then
            return a:getPopup() > b:getPopup()
        else
            return a:getID() < b:getID()
        end
    end)
    
    --if #list > 0 then
    --    table.insert(list, 1, M._create())
    --    table.insert(list, M._create())
    --end
    return list
end

function M.GetFreeWeeklyPackage()
    if not _weeklyFreePackage then
        M.InitWeeklyFreePackage()
    end
    return _weeklyFreePackage
end


function M.GetLastBuyFreeWeekPackageT()
    return _weeklyFreePackageClaimT
end

function M.GetHeroMedalPackageList()
    if _heroMedalPackList == nil or #_heroMedalPackList == 0 then
        _heroMedalPackList = {}
        LocalController:instance():visitTable("recharge",function(id,lineData)
            local tempType = lineData:getValue("type")
            if tempType == WelfareTagType.HeroMedalPackage then
                local strConf = lineData:getValue("para1")
                local heroConfs = string.split(strConf, "|")
                if heroConfs and #heroConfs > 0 then
                    for i, heroConf in ipairs(heroConfs) do
                        local tempConf = string.split(heroConf, "@")
                        if tempConf and #tempConf == 2 then
                            local newHeroPack = {}
                            newHeroPack.heroId = tempConf[1]
                            local tempPackages = string.split(tempConf[2], ";")
                            newHeroPack.packageIdList = tempPackages
                            table.insert(_heroMedalPackList, newHeroPack)
                        end
                    end
                end
            end
        end)
    end
    
    local retList = {}
    for i, v in ipairs(_heroMedalPackList) do
        local temp = {}
        temp.heroId = v.heroId
        temp.packageIdList = {}
        for m, tempId in ipairs(v.packageIdList) do
            local tempInfo = GiftPackageData.get(tempId)
            if tempInfo then
                table.insert(temp.packageIdList, tempId)
            end
        end
        if #temp.packageIdList > 0 then
            table.insert(retList, temp)
        end
    end
    
    
    return retList
end

function M.GetDirectBuyCoinPack()
    for _, pack in pairs(_packDict) do
        if pack:isDirectBuyCoin() and not pack:isBought() then
            return pack
        end
    end
    return nil
end

--英雄勋章礼包页签和外层红点判定
function M.CheckIfHasNewHeroMedalPack()
    local packList = M.GetHeroMedalPackageList()
    local strOldPacks = CS.GameEntry.Setting:GetString("CacheHeroMedalPack_" .. LuaEntry.Player.uid)
    local oldPacks = string.split(strOldPacks, ";")
    for i, v in ipairs(packList) do
        if not table.hasvalue(oldPacks, v.heroId) then
            return true
        end
    end
end

function M.CheckIfNewWeeklyPackageOpen()
    
    local isOpen = LuaEntry.DataConfig:CheckSwitch("weekgift_new_switch")

    if isOpen then
        local k1 = LuaEntry.DataConfig:TryGetStr("weekly_sale", "k1")
        local k1Num = tonumber(k1) or 0
        local mainLv = DataCenter.BuildManager.MainLv or 0
        if mainLv < k1Num then
            isOpen = false
        end
    end
    
    --local minVerNum = 0
    --local strVer = CS.GameEntry.Resource:GetResVersion()
    --local verArr = string.split(strVer, ".")
    --if verArr and #verArr >= 3 then
    --    local verNum = tonumber(verArr[3])
    --    if verNum < minVerNum then
    --        isOpen = false
    --    end
    --end
    
    return isOpen
end

function M.CheckIfHasFreeWeeklyPackage()
    --local lastT = GiftPackageData.GetLastBuyFreeWeekPackageT()
    --local isSameWeek = UITimeManager:GetInstance():CheckIfIsSameWeek(lastT)
    --return not isSameWeek
    
    local lastT = M.GetLastBuyFreeWeekPackageT()
    local lastTimeS = math.modf(lastT / 1000)
    local serverTime = UITimeManager:GetInstance():GetServerSeconds()
    local todayClaimed = UITimeManager:GetInstance():IsSameDayForServer(lastTimeS,serverTime)
    return (not todayClaimed)
end

function M.getPopPremiumPacks(isSort)
    local list = {}
    for _, v in pairs(_packDict) do
        if v:isPremiumPack() and not v:isBought() and v:isPremiumPackCanInPop() and v:isTimeValid() then
            table.insert(list, v)
        end
    end

    -- 降序
    if isSort == nil or isSort then
        M._sortByPopup(list)
    end
    return list
end

---获得商城礼包列表
---@return GiftPackInfoDefault[]
function M.getStorePacks()
    local list = {}
    for _, v in pairs(_packDict) do
        if v:isStorePack() and not v:isBought() then
            table.insert(list, v)
        end
    end

    -- 降序
    M._sortByPopup(list)
    return list
end

---获得机器人礼包列表
---@return GiftPackInfoDefault[]
function M.getRobotPacks()
    local list = {}
    for _, v in pairs(_packDict) do
        if v:isRobotPack() and not v:isBought() then
            table.insert(list, v)
        end
    end
    table.sort(list, function(a,b)
        return a.getID() < b.getID()
    end)
    return list
end

---获得单屏礼包列表，指定类型
---@return GiftPackInfoDefault[]
function M.getRobotPacksByRechargeId(rechargeId)
    local list = {}
    for _, v in pairs(_packDict) do
        if v:isRechargeId(rechargeId) and not v:isBought() then
            table.insert(list, v)
        end
    end
    return list
end


---获取showtype类型的第一个礼包
function M.getFirstShowTypeGiftPack(showType)
    local list = {}
    for _, v in pairs(_packDict) do
        if not v:isBought() and v:getShowType(showType) ~= nil then
            table.insert(list, v)
        end
    end
    if table.count(list) == 0 then
        return nil
    end

    M._sortByPopup(list)

    return list[1]
end

function M.getIsShowGiftPacks(isShow)
    local list = {}
    for _, v in pairs(_packDict) do
        if not v:isBought() and v:getIsShow() == isShow then
            table.insert(list, v)
        end
    end
    if table.count(list) == 0 then
        return nil
    end

    M._sortByPopup(list)

    return list
end

--根据showtype类型和id获取礼包
function M.getShowTypeGiftPack(showType,str)
    local list = {}
    for _, v in pairs(_packDict) do
        if not v:isBought() and v:getShowType(showType) ~= nil then
            table.insert(list, v)
        end
    end
    if table.count(list) == 0 then
        return nil
    end
    for i = 1 ,table.count(list) do
        if list[i]._serverData.show_type == str then
            return list[i]
        end
    end
    return nil
end

function M.getShowTypeGiftPackList(showType,str)
    local list = {}
    for _, v in pairs(_packDict) do
        if not v:isBought() and v:getShowType(showType) ~= nil then
            table.insert(list, v)
        end
    end
    if table.count(list) == 0 then
        return nil
    end
    local showList = {}
    for i = 1 ,table.count(list) do
        if list[i]._serverData.show_type == str then
            table.insert(showList,list[i])
        end
    end
    table.sort(showList, function(a, b)
        local popupA = a:getPopup()
        local popupB = b:getPopup()
        if popupA ~= popupB then
            return popupA > popupB
        else
            return a:getID() < b:getID()
        end
    end)
    return showList
end

function M.GetFirstGiftPackByShowType(mainType, subType)
    mainType = tostring(mainType)
    subType = tostring(subType)
    local list = {}
    for _, v in pairs(_packDict) do
        if v:getID() == "81011" or v:getID() == 81011 then
            local tempSub = v:getShowType(mainType)
        end
        if not v:isBought() and v:getShowType(mainType) == subType then
            table.insert(list, v)
        end
    end
    if table.count(list) == 0 then
        return nil
    end

    M._sortByPopup(list)

    return list[1]
end

---获得存钱罐礼包
---@return GiftPackInfoDefault
function M.getPiggyBankPack()
    for _, v in pairs(_packDict) do
        if v:isPiggyBankPack() and not v:isBought() then
            return v
        end
    end
    return nil
end

---获得体力存钱罐礼包
---@return GiftPackInfoDefault
function M.getEnergyBankPack()
    for _, v in pairs(_packDict) do
        if v:isEnergyBankPack() and not v:isBought() then
            return v
        end
    end
    return nil
end

---获得通行证礼包
---@return GiftPackInfoDefault[]
function M.getGrowthPlanPack()
    local list = {}
    for _, v in pairs(_packDict) do
        if v:isGrowthPlanPack() then
            table.insert(list, v)
        end
    end
    return list
end

---获得滑动礼包
---@return GiftPackInfoDefault[]
function M.getScrollPack(rechargeId)
    local list = {}
    for _, v in pairs(_packDict) do
        if v:isScrollPack() and not v:isBought() and v:getRechargeLineData().id == rechargeId then
            table.insert(list, v)
        end
    end
    
    -- 过滤 VIP 礼包
    list = M.FilterVipPacks(list, VipPayGoodState.CanBuy, true)
    
    return list
end

---获得PVE关内礼包
---@return GiftPackInfoDefault[]
function M.getPvePack(rechargeId)
    local list = {}
    for _, v in pairs(_packDict) do
        if v:isPvePack() and not v:isBought() and v:getRechargeLineData().id == rechargeId then
            table.insert(list, v)
        end
    end
    return list
end

--获取资源相关礼包
function M.GetResourcePacks(resType)
    local retTb = {}
    local strResType = tostring(resType)
    for k, v in pairs(_packDict) do
        if v:isTimeValid() and not v:isBought() and v:isContainShowType("2", strResType) then
            table.insert(retTb, v)
        end
    end
    table.sort(retTb, function(a, b)
        local popupA = a:getPopup()
        local popupB = b:getPopup()
        if popupA ~= popupB then
            return popupA > popupB
        else
            return a:getID() < b:getID()
        end
    end)
    
    return retTb
end

--获取加速相关礼包
function M.GetAddTimePacks(speedType)
    local retTb = {}
    local strResType = tostring(speedType)
    for k, v in pairs(_packDict) do
        if v:isTimeValid() and not v:isBought() and v:isContainShowType("4", strResType) then
            table.insert(retTb, v)
        end
    end
    table.sort(retTb, function(a, b)
        local popupA = a:getPopup()
        local popupB = b:getPopup()
        if popupA ~= popupB then
            return popupA > popupB
        else
            return a:getID() < b:getID()
        end
    end)

    return retTb
end

function M.GetTalentPackage()
    local talentPackList = {}
    for i, v in pairs(_packDict) do
        if (not v:isBought()) and v:isContainShowType("2", "200035") then-- "2;200035"
            table.insert(talentPackList, v)
        end
    end
    local retPack = nil
    local maxPopup = 0
    if #talentPackList > 0 then
        for i, v in ipairs(talentPackList) do
            if v:getPopup() > maxPopup then
                retPack = v
            end
        end
    end
    
    return retPack
end

--获取特定礼包
function M.GetGivenPacks(itemId)
    local retTb = {}
    for k, v in pairs(_packDict) do
        if v:isTimeValid() and not v:isBought() and v:isContainShowType("6", tostring(itemId)) then
            table.insert(retTb, v)
        end
    end
    table.sort(retTb, function(a, b)
        local popupA = a:getPopup()
        local popupB = b:getPopup()
        if popupA ~= popupB then
            return popupA > popupB
        else
            return a:getID() < b:getID()
        end
    end)
    return retTb
end

--获取特定礼包
function M.GetGroupPacks(itemId)
    local retTb = {}
    local list = {}
    for k, v in pairs(_packDict) do
        if v:isTimeValid() and not v:isBought() then
            local group = v:isContainShowType("11", tostring(itemId))
            if group then
                if retTb[tonumber(group)] then
                    table.insert(retTb[tonumber(group)], v)
                else
                    retTb[tonumber(group)] = {}
                    table.insert(retTb[tonumber(group)], v)
                end
            end
        end
    end
    for i = 1 ,table.count(retTb) do
        if retTb[i] and next(retTb[i]) then
            table.sort(retTb[i], function(a, b)
                local popupA = a:getPopup()
                local popupB = b:getPopup()
                if popupA ~= popupB then
                    return popupA > popupB
                else
                    return a:getID() < b:getID()
                end
            end)
        end
    end
    for i ,v in pairs(retTb) do
        if v and next(v) then
            table.insert(list,v[1])
        end
    end
    return list
end

--获取咕噜加速礼包
function M.GetGolloesCampPacks()
    local retTb = {}
    for k, v in pairs(_packDict) do
        if v:isTimeValid() and not v:isBought() and v:isContainShowType("13", "1") then
            table.insert(retTb, v)
        end
    end
    table.sort(retTb, function(a, b)
        local popupA = a:getPopup()
        local popupB = b:getPopup()
        if popupA ~= popupB then
            return popupA > popupB
        else
            return a:getID() < b:getID()
        end
    end)
    return retTb
end


--[[
    在这个地方根据指定类型返回礼包集合,如果没有值则返回全部的礼包集合
]]
function M.GenerateDataByType(showMainType, showSubType)
    return M.getStorePacks()
end

---根据ID列表查找礼包
---@param ids string[] 礼包ID数组
---@param isSort boolean 是否排序
---@return GiftPackInfoDefault[]
function M.getPacks(ids, isSort)
    local list = {}
    if ids == nil then
        return list
    end

    for _, v in ipairs(ids) do
        local pack = M.get(v)
        if pack and not pack:isBought() and pack:isTimeValid() then
            table.insert(list, pack)
        end
    end

    -- 降序
    if isSort == nil or isSort then
        M._sortByPopup(list)
    end
    return list
end

function M.getPacksIgnoreBoughtStatus(ids, isSort)
    local list = {}
    if ids == nil then
        return list
    end

    for _, v in ipairs(ids) do
        local pack = M.get(v)
        if pack then
            table.insert(list, pack)
        end
    end

    -- 降序
    if isSort == nil or isSort then
        M._sortByPopup(list)
    end
    return list
end

---根据ID列表查找礼包
---@param ids string[] 礼包ID数组
---@param isSort boolean 是否排序
---@return GiftPackInfoDefault[]
function M.getPopSpecialPacksById(ids, isSort)
    local list = {}
    if ids == nil then
        return list
    end

    for _, v in ipairs(ids) do
        local pack = M.get(v)
        if pack and not pack:isBought() and pack:isSpecialPackCanInPop() and pack:isTimeValid() then
            table.insert(list, pack)
        end
    end

    -- 降序
    if isSort == nil or isSort then
        M._sortByPopup(list)
    end
    return list
end

---根据id查找礼包
---@return GiftPackInfoDefault
function M.get(id)
    if string.IsNullOrEmpty(id) then
        return nil
    end
    return _packDict[id]
end

function M.getOnePackByType(type)
    for _, v in pairs(_packDict) do
        if v:getType() == type then
            return v
        end
    end
end

---更新礼包数据
function M.update(data)
    if data == nil then
        return false
    end

    ---@type GiftPackInfoDefault
    local pack = M.get(data.id)
    if pack == nil then
        pack = M._create(data.type)
        pack:update(data)
        _packDict[pack:getID()] = pack
    else
        pack:update(data)
    end

    -- 取最近结束的礼包作为重新初始化的时间
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local endTime = pack:getEndTime()
    if endTime > curTime and endTime < _nextReInitTime then
        _nextReInitTime = endTime
    end
    
    return true
end


function M.purge()
    _inited = false
    M._removeListener()
end

--{{{ call from csharp
---建筑礼包是否购买过
---@param id string
---@return boolean
function M.isBuildingGiftPackBought(_, id)
    local result = _buildingDict[id]
    if result then
        return false
    end

    return true
end

function M.setPlayCallbackFlag(_, id)
    local pack = M.get(id)
    if pack ~= nil and pack:getType() == GiftPackType.PromotionPay then
        pack.isPayCallback = true
    end
end



function M.buyPack(_, id)
    M.buy(id)
end

function M.hasPack(_, id)
    local pack = M.get(id)
    return pack ~= nil
end

--- 根据 Type 和 value 获取礼包列表
---@param type string
---@param values string 多个值由@分割
function M.getPacksIDByShowType(_, type, values)

    if string.IsNullOrEmpty(type) then
        return ""
    end

    ---@type table<number, GiftPackInfoBase>
    local list = M.getPacksByShowType(type, values)

    local result = {}

    for _, v in pairs(list) do
        table.insert(result, v:getID())
    end

    local rapidjson = require('Common.dkjson')

    local jsonData = rapidjson.encode(result)
    return jsonData
end

function M.getPacksByShowType(type, values)
    if string.IsNullOrEmpty(type) then
        return ""
    end

    ---@type table<number, GiftPackInfoBase>
    local list = {}

    ---@type number i
    ---@type GiftPackInfoBase _packDict
    for _, pack in pairs(_packDict) do

        if pack:getType() == GiftPackType.MonthCard or pack:getType() == GiftPackType.WeekCard or pack:getType() == GiftPackType.HeroMonthCard then
            goto continue
        end

        if pack:isBought() or not pack:isTimeValid() then
            goto continue
        end

        if string.IsNullOrEmpty(values) then
            if pack:isContainShowType(type, "") then
                table.insert(list, pack)
            end
        else
            local arrValues = string.split(values, '@')
            for _, v in ipairs(arrValues) do
                if pack:isContainShowType(type, v) then
                    table.insert(list, pack)
                    break
                end
            end
        end
        :: continue ::
    end

    -- 降序
    M._sortByPopup(list)
    return list
end

function M.getPacksInfoByShowType(_, type, values, checkCanGet)

    if string.IsNullOrEmpty(type) then
        return ""
    end

    ---@type table<number, GiftPackInfoBase>
    local list = M.getPacksByShowType(type, values)

    local result = {}

    for _, v in pairs(list) do
        if (not checkCanGet) or v:canGet() then
            table.insert(result, v:toJsonForGiftBar())
        end
    end

    local rapidjson = require('Common.dkjson')

    local jsonData = rapidjson.encode(result)
    return jsonData
end

--- 获取的信息仅适用于 gift pack bar（礼包条） 的显示
---@param
function M.getPackInfoById(_, id)
    local pack = M.get(id)
    return pack:toJsonForGiftBar()
end

--function M.openWelfarePopByShowType(_, type, values)
--    local packs = M.getPacksByShowType(type, values)
--    if #packs < 1 then
--        OpenGameUI("UIWelfarePopup", "Default", { fromType = 0 })
--        return
--    end
--    OpenGameUI("UIWelfarePopup", "Default", { fromType = 2, giftpackInfos = packs })
--end
--
-----@param _
-----@param type string
-----@param values string
--function M.openWelfarePopByShowTypeUp(_, type, values)
--    local packs = M.getPacksByShowType(type, values)
--    if #packs < 1 then
--        OpenGameUI("UIWelfarePopup", "UIResource", { fromType = 0 })
--        return
--    end
--    OpenGameUI("UIWelfarePopup", "UIResource", { fromType = 2, giftpackInfos = packs })
--end

--}}}

--{{{ private function
function M._addListener()
    -- TODO:CHANGE
    --GameEntry.DataCenter.BuildManager:onMainLevelChange('+', M._onMainLevelChange)
    EventManager:GetInstance():AddListener(EventId.RefreshGuide, M.OnRefreshGuide)
end

function M._removeListener()
    -- TODO:CHANGE
    --GameEntry.DataCenter.BuildManager:onMainLevelChange('-', M._onMainLevelChange)
    EventManager:GetInstance():RemoveListener(EventId.RefreshGuide, M.OnRefreshGuide)
end

--function M._onMainLevelChange()
--    require("Game.GiftPack.Protocol.GiftPackRefreshProtocol").request(false)
--    CumulativeRechargeManager.onMainCityLevelChange()
--    logInfoWithTag("GiftPack", "OnMainLevelChange")
--end

---@generic T : GiftPackInfoBase
---@param type GiftPackType
---@return T
function M._create(type)
        return require("DataCenter.GiftPackageData.GiftPackInfoDefault").New()
end

---通过popup字段排序
function M._sortByPopup(t)
    if t == nil then
        return
    end

    -- 降序
    table.sort(t, function(a, b)
        if a == nil then
            return false
        end

        if b == nil then
            return true
        end

        if a:getPopup() == b:getPopup() then
            -- 刘文需求 popup一样 用ID排序
            return tonumber(a:getID()) > tonumber(b:getID())
            --return false
        end

        return a:getPopup() > b:getPopup()
    end)
end

function M._clear()
    for _, v in pairs(_packDict) do
        v:dispose()
    end
    _packDict = {}
end
--}}}

function M.onMainLevelChangeRefreshEnd()
    logInfoWithTag("GiftPack", "RefreshEnd")
    local packs = M.getPacksByShowType("15", "1")
    if packs == nil or #packs < 1 then
        logInfoWithTag("GiftPack", "NoPack")
        return
    end
    M.openWelfarePopByShowTypeUp(_, "15", "1")
    logInfoWithTag("GiftPack", "Pop Succeed")
end

--{{{ call from csharp
---调用该方法打开礼包界面
---参数为页签 type 
---@param typeID number
function M.openGiftPackByTag(_, typeID)
    if typeID == nil then
        return
    end

    local tagInfos = WelfareController.getShowTagInfos()
    for _, v in pairs(tagInfos) do
        if v:getType() == typeID then
            ---@type WelfareTagInfo
            local tagInfo = v
            local tagID = tagInfo:getID()
            -- 打开福利中心 
            OpenGameUI("UIWelfare", "Default", { tagID = tagID })
            return ;
        end
    end
end

function M.openGiftPackByTagID(tagID)
    if tagID == nil then
        return
    end
    OpenGameUI("UIWelfare", "Default", { tagID = tagID })
end

--- 获取页签礼包 Icon 名字
function M.getWelfareTagName(_, tagID)
    if tagID == nil then
        return
    end

    ---@type table<number, WelfareTagInfo>
    local tagInfos = WelfareController.getShowTagInfos()
    for _, v in pairs(tagInfos) do
        if v:getID() == tagID then

            if v:isSpecialPackTag() then
                return v:getNameForIcon()
            end

            return v:getName()
        end
    end
    return ""
end

---获得主UI礼包Icon
---即排序第一的礼包Icon
---@return string
function M.getGiftIcon()

    local packs = M.getPopupPacks()
    if packs == nil or #packs < 1 then
        return "close"
    end

    ---@type GiftPackInfoDefault
    local packFirst = packs[1]
    if packFirst == nil then
        return "close"
    end

    return packFirst:getUIKey()
end

--- 获得页签礼包Icon
--- @return string
function M.getTagGiftIcon(_, iconPos, mainCityLevel)

    if mainCityLevel == nil then
        return "close"
    end

    ---@type table<number, WelfareTagInfo>
    local tagInfos = WelfareController.getShowTagInfosByIconOrder()
    for _, v in ipairs(tagInfos) do
        if v:isShow() and v:isShowIcon() and v:isUnlockIcon(mainCityLevel) and v:iconPos() == iconPos then
            return v:getIconName()
        end
    end

    return "close"
end

--- 获得页签礼包对应的页签 类型ID
--- @return number
function M.getTagGiftIconTypeID(_, iconPos, mainCityLevel)

    if mainCityLevel == nil then
        return -1
    end

    local tagInfos = WelfareController.getShowTagInfosByIconOrder()
    for _, v in ipairs(tagInfos) do
        if v:isShow() and v:isShowIcon() and v:isUnlockIcon(mainCityLevel) and v:iconPos() == iconPos then
            return v:getType()
        end
    end

    return -1
end

--- 获得页签礼包对应的页签 唯一ID
--- @return number
function M.getTagGiftIconTagID(_, iconPos, mainCityLevel)

    if mainCityLevel == nil then
        return -1
    end

    local tagInfos = WelfareController.getShowTagInfosByIconOrder()
    for _, v in ipairs(tagInfos) do
        if v:isShow() and v:isShowIcon() and v:isUnlockIcon(mainCityLevel) and v:iconPos() == iconPos then
            return v:getID()
        end
    end

    return -1
end

function M.isIconCanShowByTag(_, tagID)
    local tagInfos = WelfareController.getShowTagInfos()
    for _, v in pairs(tagInfos) do
        if v:getID() == tagID then
            return v:isShowIcon() and v:isShow()
        end
    end
    return false
end

function M.hasRedPointByTag(_, tagID)
    local tagInfos = WelfareController.getShowTagInfos()
    for _, v in pairs(tagInfos) do
        if v:getID() == tagID then
            return v:hasRedPoint()
        end
    end
    return false
end

function M.hasBought(id)
    ---@type GiftPackInfoDefault
    local pack = M.get(id)
    if pack == nil then
        return false;
    end
    return pack:isBought()
end

function M.getPackItemsStr(_, id)
    ---@type GiftPackInfoDefault
    local pack = M.get(id)
    if pack == nil then
        return ""
    end
    return pack:getItemsStr()
end

function M.getPackHeroesStr(_, id)
    ---@type GiftPackInfoDefault
    local pack = M.get(id)
    if pack == nil then
        return ""
    end
    return pack:getHeroesStr()
end

function M.checkPackSpecialItem(_, packID, id)
    ---@type GiftPackInfoDefault
    local pack = M.get(packID)
    if pack == nil then
        return false
    end
    return pack:isSpecialShowItem(id)
end

function M.checkPackSpecialHero(_, packID, id)
    ---@type GiftPackInfoDefault
    local pack = M.get(packID)
    if pack == nil then
        return false
    end
    return pack:isSpecialShowHero(id)
end

--价格
function M.getPackPrice(id)
    ---@type GiftPackInfoDefault
    local pack = M.get(id)
    if pack == nil then
        return ""
    end
    return pack:getPriceText()
end

--获取打折信息
function M.getPackPercent(_, id)

    ---@type GiftPackInfoDefault
    local pack = M.get(id)
    if pack == nil then
        return ""
    end
    return pack:getPercent()

end

--获取积分 累充开启时生效
function M.getPackPoint(_, id)

    ---@type GiftPackInfoDefault
    local pack = M.get(id)
    if pack == nil then
        return ""
    end
    return pack:getRechargePoint()

end

-- [[ 弹出礼包
--获取某个礼包所在组的所有礼包id
function M.GetAllPackagesInGroup(tempPackageId, isPopUp)
    if not isPopUp or M.CheckIfIsPopupPackage(tempPackageId) then
        local tempRechargeId = _package2RechargeDic[tempPackageId]
        local strIds = LocalController:instance():getStrValue("recharge", tempRechargeId, "para1")
        local packageIds = string.split(strIds, ";")
        return packageIds
    end
end

function M.GetAllAvailablePopupPackages()
    local curTime = Timer:GetServerTime()
    local packs = {}
    for _, pack in pairs(_packDict) do
        local packId = pack:getID()
        if M.CheckIfIsPopupPackage(packId) then
            if curTime < pack:getEndTime() and not pack:isBought() then
                table.insert(packs, pack)
            end
        end
    end
    table.sort(packs, function(packA, packB)
        return packA:getEndTime() < packB:getEndTime()
    end)
    return packs
end

function M.GetAllAvailablePackagesInGroup(tempPackageId, isPopUp)
    local retTb = {}
    local allPackages = M.GetAllPackagesInGroup(tempPackageId, isPopUp)
    if allPackages then
        local curTime = Timer:GetServerTime()
        for i, v in ipairs(allPackages) do
            local tempPackage = M.get(v)
            if tempPackage then
                local leftTime,b2 = math.modf(tempPackage:getEndTime() - curTime)
                --local isBound = tempPackage:isBought()
                --local timev = tempPackage:isTimeValid()
                --if timev and not tempPackage then
                if leftTime >= 0 and not tempPackage:isBought() then
                    table.insert(retTb, tempPackage)
                end
            end
        end
        if isPopUp then
            table.sort(retTb, function(packA, packB)
                return packA:getEndTime() < packB:getEndTime()
            end)
        end
    end
    return retTb
end

function M.GetAllAvailablePackageByRechargeId(rechargeId, isPopUp)
    if _package2RechargeDic == nil then
        M.InitRechargeDic()
    end
    local strIds = LocalController:instance():getStrValue("recharge", rechargeId, "para1")
    local packageIds = string.split(strIds, ";")
    
    local retTb = {}
    if #packageIds > 0 then
        retTb = M.GetAllAvailablePackagesInGroup(packageIds[1], isPopUp)
        retTb = M.FilterVipPacks(retTb, VipPayGoodState.CanBuy, true)
    end
    return retTb
end

function M.CheckIfIsPopupPackage(packageId)
    if _package2RechargeDic == nil then
        M.InitRechargeDic()
    end
    local tempRechargeId = _package2RechargeDic[packageId]
    if not tempRechargeId then
        return false
    end

    local tempType = LocalController:instance():getStrValue("recharge", tempRechargeId, "type")
    if tonumber(tempType) == WelfareTagType.SpecialPack or tonumber(tempType) == WelfareTagType.MasteryPop then
        return true
    end
    
    return false
end

function M.GetRechargeDataByPackageId(packageID)
    local pack = M.get(packageID)
    if pack ~= nil then
        local suc, rechargeId = pack:TryGetRechargeId()
        if suc then
            return LocalController:instance():getLine("recharge", tostring(rechargeId))
        end
    end
    
    if _package2RechargeDic == nil then
        M.InitRechargeDic()
    end
    local rechargeID = _package2RechargeDic[packageID]
    if rechargeID then
        return LocalController:instance():getLine("recharge",tostring(rechargeID))
    end
end

function M.GetRechargeIdListByType(type)
    if _type2RechargeListDic == nil then
        M.InitRechargeDic()
    end
    
    return _type2RechargeListDic[type] or {}
end

function M.InitRechargeDic()
    if _package2RechargeDic == nil then
        _package2RechargeDic = {}
    end
    if _type2RechargeListDic == nil then
        _type2RechargeListDic = {}
    end
    
    LocalController:instance():visitTable("recharge",function(id,lineData)
        local packageIds = string.split(lineData.para1, ";")
        for i, v in ipairs(packageIds) do
            --Logger.LogError(type(v) .. type(id))
            _package2RechargeDic[v] = id
        end
        
        local type = tonumber(lineData.type)
        if _type2RechargeListDic[type] == nil then
            _type2RechargeListDic[type] = {}
        end
        table.insert(_type2RechargeListDic[type], id)
    end)
end

--packageInfo == GiftPackInfoDefault
function M.TryShowPopupPackage(packageInfo)
    local packId = packageInfo:getID()
    if packageInfo:getType() == WelfareTagType.PiggyBank then
        DataCenter.UIPopWindowManager:Push(UIWindowNames.UIPiggyBank)
        --UIManager:GetInstance():OpenWindow(UIWindowNames.UIPiggyBank)
    elseif packageInfo:getType() == WelfareTagType.EnergyBank then
        DataCenter.UIPopWindowManager:Push(UIWindowNames.UIEnergyBank)
        --UIManager:GetInstance():OpenWindow(UIWindowNames.UIEnergyBank)
    else
        local line = packageInfo:getRechargeLineData()
        if line.type == WelfareTagType.MasteryPop then
            DataCenter.UIPopWindowManager:Push(UIWindowNames.UIMasteryPopGift,{anim = true}, packageInfo)
            return
        end
        DataCenter.UIPopWindowManager:PushWithCondition(UIWindowNames.UIPopupPackage, function()
            return GiftPackManager.get(packId) ~= nil
        end, { anim = true, UIMainAnim = UIMainAnimType.AllHide, isBlur = true }, GiftPackManager.get(packId))
         
        --DataCenter.UIPopWindowManager:Push(UIWindowNames.UIPopupPackage,{anim = true, isBlur = true}, packageInfo)
        --UIManager:GetInstance():OpenWindow(UIWindowNames.UIPopupPackage,{anim = true, isBlur = true}, packageInfo)
    end
end

function M.OnRefreshGuide()
    local guideTemplate = DataCenter.GuideManager:GetCurTemplate()
    if guideTemplate then
        -- 首充首次弹出
        if guideTemplate.id == LuaEntry.DataConfig:TryGetNum("first_pay", "k4") then
            if DataCenter.PayManager:CheckIfFirstPayOpen() then
                local shown = CS.GameEntry.Setting:GetBool(SettingKeys.FIRST_PAY_SHOWN .. LuaEntry.Player.uid, false)
                if not shown then
                    TimerManager:GetInstance():DelayInvoke(function()
                        DataCenter.UIPopWindowManager:Push(UIWindowNames.UIFirstPay, { anim = false, UIMainAnim = UIMainAnimType.AllHide }, true)
                    end, 1.5)
                end
            end
        end
    end
end

function M.RequestClaimFirstPayReward()
    TimerManager:GetInstance():DelayInvoke(function()
        SFSNetwork.SendMessage(MsgDefines.ClaimFirstPayReward)
    end, 0.3)
end

-- 传入一个 pack list：List<GiftPackInfoBase>
-- 1. 只保留购买状态为 state 的 VIP 礼包
-- 2. 只保留首个 VIP 礼包（如果有需要，自行排序）
-- 3. keepNonVip 决定是否保留非 VIP 礼包
function M.FilterVipPacks(packList, state, keepNonVip)
    local packs = {}
    local list = {}
    local hasVip = false

    for _, pack in ipairs(packList) do
        table.insert(packs, pack)
    end
    table.sort(packs, function(a, b)
        if a:getPopup() ~= b:getPopup() then
            return a:getPopup() > b:getPopup()
        else
            return a:getID() < b:getID()
        end
    end)

    for _, pack in ipairs(packs) do
        local insert = true
        local packId = pack:getID()
        if DataCenter.VIPManager:IsVipPack(packId) then
            local vipLv = DataCenter.VIPManager:GetPackVipLv(packId)
            local packState = DataCenter.VIPManager:AnalyzePayGoodState(vipLv, packId)
            if packState ~= state or hasVip then
                insert = false
            else
                hasVip = true
            end
        else
            insert = keepNonVip
        end
        if insert then
            table.insert(list, pack)
        end
    end
    
    return list
end

return M