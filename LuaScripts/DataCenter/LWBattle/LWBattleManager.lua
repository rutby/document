---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by w.
--- DateTime: 2022/12/28 14:37
---
local MobileTouchCamera = CS.BitBenderGames.MobileTouchCamera
local Localization = CS.GameEntry.Localization
local ResourceManager = CS.GameEntry.Resource

local PveEnvironmentPath = "Assets/Main/Prefab_Dir/Pve/PveEnvironment.prefab"
local CommonPlaneShadow_PVE_Path = "Assets/Main/Material/CommonPlaneShadow_PVE.mat"

---@class LWBattleManager
local LWBattleManager = BaseClass("LWBattleManager")

function LWBattleManager:__init()
    self.cameraOffset = Vector3.New(0,0,0)
    --self.fpsLockId = -1

    self.tmpHeroUuid = 0

    self.oldPlaneShadowMaterial = nil
end

function LWBattleManager:__delete()
    self:Destroy()
end


function LWBattleManager:Destroy()
    self:RemoveListeners()
    self:UnloadEnvironment()
    self:UnInitCamera()
    if self.logic then
        self.logic:Destroy()
    end
    self:RemoveUpdateTimer()
    if self.cameraTween then
        self.cameraTween:Kill()
        self.cameraTween = nil
    end
    if CS.CommonUtils.IsDebug() and self.OnDevFingerDown then
        self.touchCamera.touchInput:OnFingerDown('-', self.OnDevFingerDown)
        self.OnDevFingerDown = nil
    end
    --HeroUtils.ClearHireHeroData()
end

function LWBattleManager:Enter(param)
    if self.logic ~= nil then
        --断线重连可能会进场景多次
        self:Destroy()
    end
    self.param = param
    self.logic = self:CreateBattleLogic(param)
    self:SetCurBattleLogic(self.logic)
    self.logic:Enter(param)
    self.useNewDetect = nil
    --loading
    local loadingParam = {}
    if param.pveEntrance == PveEntrance.Test then
        loadingParam.title = "Test"
        loadingParam.desc = tostring(param.pveId)
    elseif param.pveEntrance == PveEntrance.LandBlock or param.pveEntrance == PveEntrance.Story or param.pveEntrance == PveEntrance.Guide or param.pveEntrance == PveEntrance.SiegeBoss then
        loadingParam.title = Localization:GetString("321393")
        loadingParam.desc = Localization:GetString("321394")
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIPVELoading, { anim = false }, loadingParam)
    self.uiPveLoading = UIManager:GetInstance():GetWindow(UIWindowNames.UIPVELoading).View
    local function SendMessage()
        EventManager:GetInstance():Broadcast(EventId.PveLevelBeforeEnter)
        UIManager:GetInstance():DestroyWindow(UIWindowNames.UIItemTips)
        UIManager.Instance:DestroyWindow(UIWindowNames.UIWorldTileUI)
        UIManager.Instance:DestroyWindow(UIWindowNames.UIWorldPoint)
        self:CreateLevel()
        --EventManager:GetInstance():Broadcast(EventId.GF_goto_pve_battle_loaded, param)
    end
    self.uiPveLoading:SetOnEntered(SendMessage)

    --if self.fpsLockId == -1 then
    --    self.fpsLockId = CS.DynamicFPSConfig.AcquireHighFPSLocker()
    --end
end

function LWBattleManager:CreateBattleLogic(param)
    if param.type == PVEType.Parkour then
        local ParkourBattleLogic = require "DataCenter.LWBattle.Logic.ParkourBattle.ParkourBattleLogic"
        return ParkourBattleLogic.New()
    elseif param.type == PVEType.Skirmish then
        local SkirmishLogic = require "DataCenter.LWBattle.Logic.Skirmish.SkirmishLogic"
        return SkirmishLogic.New()
    elseif param.type == PVEType.Count then
        local CountBattleLogic = require "DataCenter.LWBattle.Logic.CountBattle.CountBattleLogic"
        return CountBattleLogic.New()
    elseif param.type == PVEType.FakePVP then
        local FakePVPLogic = require "DataCenter.LWFakePVPBattle.FakePVPLogic"
        return FakePVPLogic.New()
    elseif param.type == PVEType.Arena3V3 then
        local Arena3V3BattleLogic = require "DataCenter.LWArena3V3Battle.LWArena3V3BattleLogic"
        return Arena3V3BattleLogic.New()
    end
end

--获取当前玩法的逻辑类（弹幕玩法管理器 or 跑酷逻辑类 or 战斗回放 or 技能预览）
function LWBattleManager:GetCurBattleLogic()
    return self.curLogic
end

function LWBattleManager:GetCurBattleType()
    return self.curLogic and self.curLogic:GetPVEType() or PVEType.None
end

--设置当前玩法的逻辑类
--进出玩法时调用，传入nil表示退出玩法
--包括：大世界行军战斗管理器 or 推图玩法管理器 or 跑酷逻辑类 or 战斗回放逻辑类 or countMaster逻辑类 or fakePvP逻辑类（爬塔、雷达、抢火车）
--不包括：技能预览管理器，这个不视为一个玩法
--玩法之间是互斥的，同一时刻只能有一个逻辑类，所以每当进入新玩法时，会自动清理旧玩法
function LWBattleManager:SetCurBattleLogic(logic)
    if logic and self.curLogic and logic:GetPVEType() ~= self.curLogic:GetPVEType() then
        self.curLogic:Destroy()
    end
    self.curLogic=logic
    if logic and CS.CommonUtils.IsDebug() then
        local tip = ""
        DAMAGE_LOG= CommonUtil.PlayerPrefsGetBool("OPEN_PVE_DAMAGE_LOG",false)
        if DAMAGE_LOG then
            tip = tip .. "开启了伤害log!\n"
        end
        INVINCIBLE= CommonUtil.PlayerPrefsGetBool("OPEN_PVE_INVINCIBLE",false)
        if INVINCIBLE then
            tip = tip .. "开启了无敌!\n"
        end
        LOCAL_HERO_SKILL_OVERRIDE = CommonUtil.PlayerPrefsGetBool("SKILL_USE_CLIENT_CONFIG",false)
        if LOCAL_HERO_SKILL_OVERRIDE then
            tip = tip .. "使用了本地lw_hero表的技能覆盖了该账号的英雄技能!\n"
        end
        PVE_TEST_MODE = CommonUtil.PlayerPrefsGetBool("BULLET_MOTION_EDITOR",false)
        if PVE_TEST_MODE then
            tip = tip .. "开启了技能编辑器!\n"
        end
        if not string.IsNullOrEmpty(tip) then
            UIUtil.ShowTips(tip,8)
        end
    end
end

function LWBattleManager:CreateLevel()
    if CS.SceneManager.IsInCity() then
        --EventManager:GetInstance():Broadcast(EventId.BeforeReleaseCity)
    end
    CS.SceneManager.Destroy()--先清理旧场景，再加载新场景
    DataCenter.BuildBubbleManager:ClearAll()
    DataCenter.WorldBuildBubbleManager:ClearAll()
    DataCenter.AllianceCityTipManager:RemoveAllAllianceCityTip()
    DataCenter.WorldFavoDataManager:ClearAllianceMarks()
    WorldCityTipManager:GetInstance():RemoveAllTip()
    --DataCenter.CityPioneerManager:DoPrologueUnInit()
    EventManager:GetInstance():Broadcast(EventId.UIMAIN_VISIBLE, false)
    self.gameOver = false
    self.gamePause = false
    self.gameStart = false
    self.qualityLevel = Setting:GetInt(SettingKeys.SCENE_GRAPHIC_LEVEL, EnumQualityLevel.Middle)
    self:AddUpdateTimer()
    self:InitCamera()
    self:AddListeners()
    self:LoadEnvironment()
    EventManager:GetInstance():Broadcast(EventId.PveLevelBeforeEnter)

    local onCreateComplete = function()
        self:LoadSceneComplete()
    end
    self.logic:LoadScene(onCreateComplete)
end

function LWBattleManager:InitCamera()
    if self.camera then
        return
    end
    self.cameraTween = nil
    self.camera = CS.UnityEngine.Camera.main
    self.cameraData = self.camera:GetComponent(typeof(CS.UnityEngine.Rendering.Universal.UniversalAdditionalCameraData))
    self.touchCamera = self.camera:GetComponent(typeof(MobileTouchCamera))
    --self.hudCamera = self.camera.transform:Find("HudCamera"):GetComponent(typeof(CS.UnityEngine.Camera))
    self.touchCamera.CanMoveing = false
    self.cacheZoomParam = 0
    
    self.usePhysicalPropertiesCache = self.camera.usePhysicalProperties
    self.sensorSizeCache = self.camera.sensorSize
    self.gateFitCache = self.camera.gateFit
    self.fieldOfViewCache = self.camera.fieldOfView
    self.nearClipPlaneCache = self.camera.nearClipPlane
    self.farClipPlaneCache = self.camera.farClipPlane
    self.renderPostProcessingCache = self.camera.renderPostProcessing
    self.renderShadowsCache = self.camera.renderShadows

    self.camera.usePhysicalProperties = true
    self.camera.sensorSize = Vector2.New(7.5, 13.34)
    self.camera.gateFit = CS.UnityEngine.Camera.GateFitMode.Vertical
    self.camera.fieldOfView = 60
    self.camera.nearClipPlane = 1
    self.camera.farClipPlane = 500
    if self.qualityLevel <= EnumQualityLevel.Low then
        self.cameraData.renderPostProcessing = false
    else
        self.cameraData.renderPostProcessing = true
    end
    self.cameraData.renderShadows = false
    self.camera.transform.rotation = Quaternion.Euler(45, 0, 0)
    
    self.logic:InitCamera()
    --if CS.CommonUtils.IsDebug() and not self.OnDevFingerDown then
    --    self.OnDevFingerDown = function() EventManager:GetInstance():Broadcast(EventId.OnClickEmpty) end
    --    self.touchCamera.touchInput:OnFingerDown('+', self.OnDevFingerDown)
    --end
end

function LWBattleManager:UnInitCamera()
    if not self.camera then
        return
    end
    self.camera.usePhysicalProperties = self.usePhysicalPropertiesCache
    self.camera.sensorSize = self.sensorSizeCache
    self.camera.gateFit = self.gateFitCache
    self.camera.fieldOfView = self.fieldOfViewCache
    self.camera.nearClipPlane = self.nearClipPlaneCache
    self.camera.farClipPlane = self.farClipPlaneCache
    self.cameraData.renderPostProcessing = self.renderPostProcessingCache
    self.cameraData.renderShadows = self.renderShadowsCache
    self.touchCamera.CanMoveing = true
    self.camera = nil
    self.cameraData = nil
    self.touchCamera = nil

end

function LWBattleManager:AddListeners()
    if self.onKeyCodeEscape == nil then
        self.onKeyCodeEscape = function() self:OnKeyCodeEscape() end
        EventManager:GetInstance():AddListener(EventId.OnKeyCodeEscape, self.onKeyCodeEscape)
    end

end

function LWBattleManager:RemoveListeners()
    if self.onKeyCodeEscape ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.OnKeyCodeEscape, self.onKeyCodeEscape)
        self.onKeyCodeEscape = nil
    end
end

function LWBattleManager:OnKeyCodeEscape()
    if self.logic and self.logic.OnKeyCodeEscape then
        self.logic:OnKeyCodeEscape()
    end
end


local defaultShakeDur = 0.5
local defaultShakeStrength = Vector3.New(0.5, 0.5, 0)
local defaultShakeVibrato = 30
function LWBattleManager:ShakeCameraWithParam(param)
    if not self.touchCamera then
        return
    end

    if self.cameraTween then
        self.cameraTween:Kill()
    end

    local duration = defaultShakeDur
    local strength = defaultShakeStrength
    local vibrato = defaultShakeVibrato

    if param then
        if param.duration then
            duration = param.duration
        end
        if param.strength then
            strength = param.strength
        end
        if param.vibrato then
            vibrato = param.vibrato
        end
    end
    self.cameraTween = self.camera:DOShakePosition(duration,strength,vibrato):OnComplete(function()
        self:LookAt(self.followCameraTarget)
        self.cameraTween = nil

        if self.cacheZoomParam > 0 then
            self:AutoZoom(self.cacheZoomParam)
        end
    end)
end

function LWBattleManager:AutoZoom(zoom,time)
    time = time or 0.5
    self.cacheZoomParam = zoom
    if self:IsPlayingShakeCamera() then
        return
    end
    if self.touchCamera ~= nil then
        self.touchCamera:AutoZoom(zoom, time)
    end
end

function LWBattleManager:IsPlayingShakeCamera()
    return self.cameraTween ~= nil
end

function LWBattleManager:GetFollowCameraTarget()
    return self.followCameraTarget
end

function LWBattleManager:LookAt(lookWorldPosition)
    self.followCameraTarget = Vector3.New(lookWorldPosition.x, lookWorldPosition.y, lookWorldPosition.z)
    self.touchCamera:LookAt(lookWorldPosition + self.cameraOffset);
end

function LWBattleManager:CameraFollowLookAt(targetPos)
    local transform = self.touchCamera.transform
    local x, y, z = transform:Get_position()
    local offset = targetPos - self.followCameraTarget
    transform:Set_position(x + offset.x, y + offset.y, z + offset.z)
    self.followCameraTarget = Vector3.New(targetPos.x, targetPos.y, targetPos.z)
end

function LWBattleManager:LoadSceneComplete()
    pcall(function() CS.SceneManager.CurrSceneID = SceneManagerSceneID.PVE end)
    EventManager:GetInstance():Broadcast(EventId.PveLevelEnter, self.levelId)
    self.touchCamera.CanMoveing = false

    -- 战斗里关闭主UI节点，避免性能浪费
    local mainUIView = UIManager:GetInstance():GetWindow(UIWindowNames.UIMain).View
    if mainUIView then
        mainUIView:SetActive(false)
    end
    --if LuaEntry.Player:InDragonWorld() then
    --    local DesertUI = UIManager:GetInstance():GetWindow(UIWindowNames.LWMainDesertUI)
    --    if DesertUI and DesertUI.View then
    --        DesertUI.View:SetActive(false)
    --    end
    --end

    EventManager:GetInstance():Broadcast(EventId.PveLevelEnter)
end

function LWBattleManager:SetGameOver(v)
    self.gameOver = v
end
function LWBattleManager:SetGamePause(v)
    self.gamePause = v
end
function LWBattleManager:SetGameStart(v)
    self.gameStart = v
end

function LWBattleManager:AddUpdateTimer()
    if self.updateTimer == nil then
        self.updateTimer = function() self:OnUpdate() end
        UpdateManager:GetInstance():AddUpdate(self.updateTimer)
    end
    if self.updateSecTimer == nil then
        self.updateSecTimer = TimerManager:GetInstance():GetTimer(1, self.OnUpdateSec, self, false, false, false)
        self.updateSecTimer:Start()
    end
end

function LWBattleManager:RemoveUpdateTimer()
    if self.updateTimer then
        UpdateManager:GetInstance():RemoveUpdate(self.updateTimer)
        self.updateTimer = nil
    end
    if self.updateSecTimer then
        self.updateSecTimer:Stop()
        self.updateSecTimer = nil
    end
end

function LWBattleManager:OnUpdate()
    if not self.gameStart or self.gamePause or self.gameOver then
        return
    end
    if self.logic then
        self.logic:OnUpdate()
    end
end

function LWBattleManager:OnUpdateSec()
    if not self.gameStart or self.gameOver or self.gamePause then
        return
    end
    if self.logic then
        self.logic:OnUpdateSec()
    end
end

function LWBattleManager:Exit(ExitAction)
    --if self.fpsLockId ~= -1 then
    --    self.fpsLockId = CS.DynamicFPSConfig.FreeHighFPSLocker(self.fpsLockId)
    --end
    DataCenter.LWSoundManager:StopAllSounds()
    self:Destroy()
    self:SetCurBattleLogic()
    --EventManager:GetInstance():Broadcast(EventId.GF_pve_battle_exit, {id=self.param.levelId})
    if not CS.SceneManager.IsInCity() and not CS.SceneManager.IsInWorld() then
        SceneUtils.CreateCity()
        CS.SceneManager.World:CreateScene(function()
            --Logger.Log("Destroy pve level")
            self.logic:AfterExit()
            EventManager:GetInstance():Broadcast(EventId.UIMAIN_VISIBLE, true)
            --DataCenter.CityPioneerManager:DoPrologueInit()
            EventManager:GetInstance():Broadcast(EventId.OnEnterCity)
            DataCenter.CityNpcManager:SetNpcVisible(true)
            if ExitAction then
                ExitAction()
            end
            DataCenter.GuideManager:DoWaitTriggerAfterBack()

            if self.param.pveEntrance == PveEntrance.LandBlock then
                local param = {}
                param.blockId = self.param.blockId
                EventManager:GetInstance():Broadcast(EventId.PveLevelExit, param)
            elseif self.param.pveEntrance == PveEntrance.SiegeBoss then
                local param = {}
                param.zombieId = self.param.zombieId
                EventManager:GetInstance():Broadcast(EventId.PveLevelExit, param)
            else
                EventManager:GetInstance():Broadcast(EventId.PveLevelExit)
            end
        end)
    end

    -- 退出战斗恢复主UI节点
    local mainUIView = UIManager:GetInstance():GetWindow(UIWindowNames.UIMain).View
    if mainUIView then
        mainUIView:SetActive(true)
    end
    --if LuaEntry.Player:InDragonWorld() then
    --    local DesertUI = UIManager:GetInstance():GetWindow(UIWindowNames.LWMainDesertUI)
    --    if DesertUI and DesertUI.View then
    --        DesertUI.View:SetActive(true)
    --    end
    --end
end

function LWBattleManager:Restart()
    local p = self.param
    p.retry = true
    self:Destroy()
    self:Enter(p)
end

--战斗是否结束，不直接用gameOver是因为有的动画逻辑要延迟设置gameover
function LWBattleManager:IsBattleFinish()
    return self.logic.IsBattleFinish and self.logic:IsBattleFinish() or self.gameOver
end




--region Debug

---pve跳关
function LWBattleManager:JumpLevel(levelId)
    if not CS.CommonUtils.IsDebug() then
        return
    end
    levelId = tonumber(levelId) or 0
    if levelId <= 0 then
        return
    end
    local line = LocalController:instance():getLine(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage_Feature),levelId)
    if line then--跑酷
        local param = {}
        param.type = PVEType.Parkour
        param.levelId = levelId
        DataCenter.LWBattleManager:Enter(param)
        return
    end
    --推图
    DataCenter.ZombieBattleManager:Destroy()
    local param = {}
    param.type = PVEType.Barrage
    param.levelId = levelId
    param.levelGroupId=GetTableData(LuaEntry.Player:GetABTestTableName(TableName.LW_Stage),levelId,"group")
    DataCenter.ZombieBattleManager:Enter(param)
end

---播录像
function LWBattleManager:PlayReplay(mailUid)
    if not string.IsNullOrEmpty(mailUid) then
        SFSNetwork.SendMessage(MsgDefines.MailGetFightReportDetail,tonumber(mailUid))
    end
end

---播上一个录像
function LWBattleManager:PlayLastReplay()
    --local mailList = DataCenter.MailDataManager:GetGroupMailList(MailInternalGroup.MAIL_IN_report)
    --local mailUid = mailList[1]:GetMailExt().pb_BattleReport.round[1].battle[1].uuid
    local mailUid = CommonUtil.PlayerPrefsGetString("LAST_SKIRMISH_MAIL_UUID")
    self:PlayReplay(mailUid)
end

--endregion

function LWBattleManager:RestartParam(param)
    self:Destroy()
    self:Enter(param)
end

function LWBattleManager:GetTmpHeroUuid()
    self.tmpHeroUuid = self.tmpHeroUuid - 1
    if self.tmpHeroUuid == IntMinValue then
        self.tmpHeroUuid = -1
    end

    return self.tmpHeroUuid
end

function LWBattleManager:LoadEnvironment()
    self:UnloadEnvironment()
    if SceneUtils.GetIsInCity() then
        CS.SceneManager.World:SetUSkyActive(false)
    end
    self.envReq = ResourceManager:InstantiateAsync(PveEnvironmentPath)

    self.oldPlaneShadowMaterial = nil
    CommonUtil.LoadAsset(CommonPlaneShadow_PVE_Path, "CommonPlaneShadow_PVE", typeof(CS.UnityEngine.Material), function(asset)
        if asset then
            self.oldPlaneShadowMaterial = RenderSetting.ReplacePlaneShadowMaterial(asset)
        end
    end)
end

function LWBattleManager:UnloadEnvironment()
    if self.envReq then
        self.envReq:Destroy()
    end

    CommonUtil.UnloadAsset(CommonPlaneShadow_PVE_Path, "CommonPlaneShadow_PVE")
    if self.oldPlaneShadowMaterial then
        RenderSetting.ReplacePlaneShadowMaterial(self.oldPlaneShadowMaterial)
        self.oldPlaneShadowMaterial = nil
    end
end

function LWBattleManager:GetLevelId()
    return self.logic:GetLevelId()
end

function LWBattleManager:GetPveId()
    return self.logic:GetPveId()
end

function LWBattleManager:UseNewDetect()
    if self.useNewDetect == nil then
        if CS.PVEUnitManager ~= nil and CS.PVEUnitManager.Available == true and not Setting:GetPrivateBool("PVE_OLD_DETECT", false) then
            self.useNewDetect = true
        else
            self.useNewDetect = false
        end
    end
    return self.useNewDetect
end

function LWBattleManager:OnFingerDown(pos)
    return self.logic:OnFingerDown(pos)
end

return LWBattleManager