---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cola.
--- DateTime: 2022/11/7 下午12:23
---

local PlayerEquipment = BaseClass("PlayerEquipment")
local CharacterAnimation = require("DataCenter.Survival.Character.CharacterAnimation")

function PlayerEquipment:__init()
    self.m_equips = {}
    self.m_isAlter = true
    self.m_weaponAnimation = nil
end

function PlayerEquipment:AddEquip(itemId)
    local template = LocalController:instance():getLine(TableName.C_Equips,itemId)
    if template == nil then
        return
    end
    local equipType = template.type
    self.m_equips[equipType] = template
    self.m_isAlter = true

    if equipType == SurvivalEquipType.Weapon then
        self:__equipWeaponAnim(template.animation,itemId)
    end
end

function PlayerEquipment:RemoveEquip(type)
    self.m_isAlter = true
    self.m_equips[type] = nil
    if type == SurvivalEquipType.Weapon then
        self.m_weaponAnimation = nil
    end
end

function PlayerEquipment:__equipWeaponAnim(animation,itemId)
    if animation == nil then
        Logger.LogError(string.format("武器缺少动画配置:%s",itemId))
        return
    end
    self.m_weaponAnimation = CharacterAnimation.New(animation)
end

function PlayerEquipment:GetEquip(type)
    return self.m_equips[type]
end

function PlayerEquipment:Refresh()
    if self.m_isAlter then
        self.m_isAlter = false
        self.attack = 0
        self.defence = 0
        self.attackSpeed = 0
        self.coolDown = 0
        self.moveSpeed = 0
        self.range = 0
        for _,v in pairs(self.m_equips) do
            if v ~= nil then
                self.defence = self.defence + v:getIntValue("defense")
                self.moveSpeed = self.moveSpeed + v:getIntValue("moveSpeed")
            end
        end
        
        local weapon = self:GetWeapon()
        if weapon ~= nil then
            self.range = weapon:getIntValue("range")
            self.attack = weapon:getIntValue("attack")
            self.attackSpeed = weapon:getIntValue("attackSpeed")
            self.coolDown = weapon:getIntValue("cooldown")
        end
    end
end

function PlayerEquipment:GetWeapon()
    return self:GetEquip(SurvivalEquipType.Weapon)
end

function PlayerEquipment:GetAttack()
    self:Refresh()
    return self.attack
end

function PlayerEquipment:GetDefence()
    self:Refresh()
    return self.defence
end

function PlayerEquipment:GetAttackSpeed()
    self:Refresh()
    return self.attackSpeed
end

function PlayerEquipment:GetCoolDown()
    self:Refresh()
    return self.coolDown
end

function PlayerEquipment:GetMoveSpeed()
    self:Refresh()
    return self.moveSpeed
end

function PlayerEquipment:GetRange()
    self:Refresh()
    return self.range
end

function PlayerEquipment:GetAnimName(animType)
    local animName = nil
    if self.m_weaponAnimation ~= nil then
        if animType == AnimationType.Attack then
            animName = self.m_weaponAnimation:GetAnimName(animType) --攻击动画采用顺序播放
        else
            animName = self.m_weaponAnimation:GetRandomAnimName(animType)
        end
    end
    return animName
end

function PlayerEquipment:UpdateAttackTime()
    if self.m_weaponAnimation ~= nil then
        self.m_weaponAnimation:UpdateAttackTime()
    end
end

function PlayerEquipment:__delete()
    self.m_equips = nil
    self.m_weaponAnimation = nil
end

return PlayerEquipment