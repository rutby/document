---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1020.
--- DateTime: 2023/5/23 18:15
---

local MiningQueueInfo = BaseClass("MiningQueueInfo")

local function __init(self)
    self.queueId = 0    -- 隊列id
    self.lock = true    -- 队列是否上锁
    self.startTime = 0   -- 開始時間
    self.mines = {}   -- 当前队列中的矿
end

local function __delete(self)
    self.queueId = nil     -- 隊列id
    self.lock = nil    -- 队列是否开启
    self.startTime = nil   -- 開始時間
    self.mines = nil   -- 当前队列中的矿
end

local function ParseData(self, value)
    if value == nil then
        return
    end
    if value.queueId then
        self.queueId = tonumber(value.queueId)
    end
    if value.startTime then
        self.startTime = tonumber(value.startTime)
    end
    if value.mines then
        local spl = string.split_ss_array(value.mines, ";")
        for i = 1, #spl do
            table.insert(self.mines, tonumber(spl[i]))
        end
    end
end

local function GetCanTakeRewardMines(self)
    local mines = {}
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local deltaTime = serverTime - self.startTime
    for k,v in ipairs(self.mines) do
        local costTime = tonumber(GetTableData("activity_mining_para", v, "unlock_time")) * 1000
        if deltaTime >= costTime then
            table.insert(mines, v)
            deltaTime = deltaTime - costTime
        else
            break
        end
    end
    return mines
end

local function GetCanTakeRewardMinesCount(self)
    local count = 0
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local deltaTime = serverTime - self.startTime
    --Logger.Log("Test serverTime:"..serverTime)
    --Logger.Log("Test startTime:"..self.startTime)
    --Logger.Log("Test deltaTime:"..deltaTime)
    for k,v in ipairs(self.mines) do
        local costTime = tonumber(GetTableData("activity_mining_para", v, "unlock_time")) * 1000
        --Logger.Log("Test costTime:"..costTime)
        if deltaTime >= costTime then
            count = count + 1
            deltaTime = deltaTime - costTime
            --Logger.Log("Test deltaTime:"..deltaTime)
        else
            break
        end
    end
    return count
end

local function HasCanTakeReward(self)
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local deltaTime = serverTime - self.startTime
    for k,v in ipairs(self.mines) do
        local costTime = tonumber(GetTableData("activity_mining_para", v, "unlock_time")) * 1000
        if deltaTime >= costTime then
            return true
        else
            return false
        end
    end
end

local function GetAllMiningCarStateInfo(self)
    local infoList = {}
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    local deltaTime = serverTime - self.startTime
    --Logger.Log("TTTT serverTime:"..serverTime)
    --Logger.Log("TTTT startTime:"..self.startTime)
    --Logger.Log("TTTT deltaTime:"..deltaTime)
    for k,v in ipairs(self.mines) do
        local info = {}
        info.id = v
        info.queueId = self.queueId
        local costTime = tonumber(GetTableData("activity_mining_para", v, "unlock_time")) * 1000
        info.costTime = costTime
        if deltaTime >= costTime then
            info.complete = true
            deltaTime = deltaTime - costTime
        else
            info.complete = false
            if deltaTime >= 0 then
                info.unLocking = true
                info.deltaTime = deltaTime
                deltaTime = -1
            else
                info.unLocking = false
                info.deltaTime = 0
            end
            
        end
        table.insert(infoList, info)
    end
    return infoList
end

MiningQueueInfo.__init = __init
MiningQueueInfo.__delete = __delete
MiningQueueInfo.ParseData = ParseData
MiningQueueInfo.GetCanTakeRewardMines = GetCanTakeRewardMines
MiningQueueInfo.HasCanTakeReward = HasCanTakeReward
MiningQueueInfo.GetAllMiningCarStateInfo = GetAllMiningCarStateInfo
MiningQueueInfo.GetCanTakeRewardMinesCount = GetCanTakeRewardMinesCount

return MiningQueueInfo