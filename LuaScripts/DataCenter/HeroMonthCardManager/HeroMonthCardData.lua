---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/3/28 17:08
---

local HeroMonthCardData = BaseClass("HeroMonthCardData")

local function __init(self)
    self.activityId = 0
    self.startTime = 0
    self.endTime = 0
    self.buy = BuyFlag.NOT_BUY
    self.rewardArr = {}
end

local function __delete(self)

end

local function ParseData(self, message)
    if self.rechargeId == nil then
        LocalController:instance():visitTable("recharge",function(id,lineData)
            local tempType = lineData:getValue("type")
            if tempType == WelfareTagType.HeroMonthCardNew then
                self.rechargeId = lineData:getValue("para1")
            end
        end)
    end
    if message["activityId"] ~= nil then
        self.activityId = message.activityId
    end
    if message["startTime"] ~= nil then
        self.startTime = message.startTime
    end
    if message["endTime"] ~= nil then
        self.endTime = message.endTime
    end
    if message["buy"] ~= nil then
        self.buy = message.buy
    end
    if message["rewardArr"] ~= nil then
        self.rewardArr = message.rewardArr
        table.walk(self.rewardArr, function (_, v)
            v.reward = DataCenter.RewardManager:ReturnRewardParamForView(v["reward"])
        end)
        table.sort(self.rewardArr, function (k, v)
            return k.day < v.day
        end)
    end
end

local function IsActive(self)
    if self.buy ~= BuyFlag.BUY then
        return false
    end
    local now = UITimeManager:GetInstance():GetServerTime()
    return self.endTime ~= nil and self.endTime >= now
end

local function GetReward(self, day)
    if self.rewardArr ~= nil and table.count(self.rewardArr) >= day then
        return self.rewardArr[day]
    end
    return nil
end

local function SetRewardState(self, day, state)
    if self.rewardArr ~= nil and table.count(self.rewardArr) >= day then
        self.rewardArr[day].state = state
    end
end

local function GetAllRewardSetState(self)
    for i = 1,#self.rewardArr do
        local reward = self.rewardArr[i]
        local rewardState = DataCenter.HeroMonthCardManager:GetRewardState(reward)
        if rewardState == HeroMonthCardRewardState.REWARD_STATE_CAN_RECEIVE then
            reward.state = 1
        end
    end
end

HeroMonthCardData.__init = __init
HeroMonthCardData.__delete = __delete
HeroMonthCardData.ParseData = ParseData
HeroMonthCardData.IsActive = IsActive
HeroMonthCardData.GetReward = GetReward
HeroMonthCardData.SetRewardState = SetRewardState
HeroMonthCardData.GetAllRewardSetState = GetAllRewardSetState

return HeroMonthCardData