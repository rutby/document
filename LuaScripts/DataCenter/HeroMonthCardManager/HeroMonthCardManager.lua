---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/3/28 17:07
---
local HeroMonthCardManager = BaseClass("HeroMonthCardManager")
local HeroMonthCardData = require "DataCenter.HeroMonthCardManager.HeroMonthCardData"

local function __init(self)
    self.templates = {}
end

local function __delete(self)
    self.monthCardInfo = nil
    self.templates = nil
end

local function Startup(self)
    self:GetDataFromServer()
end

local function GetDataFromServer(self)
    SFSNetwork.SendMessage(MsgDefines.GetHeroMonthCardInfo)
end

local function DoWhenAllDataBack(self, message)
    if message == nil then
        return
    end
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
        return
    end
    if self.monthCardInfo == nil then
        self.monthCardInfo = HeroMonthCardData.New()
    end
    self.monthCardInfo:ParseData(message)
    EventManager:GetInstance():Broadcast(EventId.RefreshHeroMonthCardAll)
end

local function GetReward(self, day)
    SFSNetwork.SendMessage(MsgDefines.GetHeroMonthCardReward, day)
end

local function GetHeroMonthCardInfo(self)
    return self.monthCardInfo
end

local function DoWhenGetRewardBack(self, message)
    if message == nil then
        return
    end
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
        return
    end

    local reward = message["reward"]
    if reward ~= nil then
        DataCenter.RewardManager:ShowCommonReward(message)
        for _, v in pairs(reward) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    local day = message["day"]
    if day ~= nil then
        self.monthCardInfo:SetRewardState(day, 1)
        EventManager:GetInstance():Broadcast(EventId.RefreshHeroMonthCardSingle, day)
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

local function DoWhenGetAllRewardBack(self, message)
    if message == nil then
        return
    end
    local errCode =  message["errorCode"]
    if errCode ~= nil then
        UIUtil.ShowTipsId(errCode)
        return
    end

    local reward = message["reward"]
    if reward ~= nil then
        DataCenter.RewardManager:ShowCommonReward(message)
        for _, v in pairs(reward) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    self.monthCardInfo:GetAllRewardSetState()
    EventManager:GetInstance():Broadcast(EventId.RefreshHeroMonthCard)
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

local function DoWhenBuyCard(self)
    if self.monthCardInfo ~= nil then
        self.monthCardInfo.buy = BuyFlag.BUY
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshHeroMonthCardAll)
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

local function GetHeroMonthCardReward(self, day)
    if self.monthCardInfo == nil then
        return nil
    end
    return self.monthCardInfo:GetReward(day)
end

local function GetRewardState(self, reward)
    if reward == nil or self.monthCardInfo == nil or self.monthCardInfo.buy == BuyFlag.NOT_BUY then
        return HeroMonthCardRewardState.REWARD_STATE_LOCK
    end
    if reward.state == 1 then
        return HeroMonthCardRewardState.REWARD_STATE_RECEIVED
    end
    
    local now = UITimeManager:GetInstance():GetServerTime()
    if now > self.monthCardInfo.endTime or now < self.monthCardInfo.startTime then
        return HeroMonthCardRewardState.REWARD_STATE_LOCK
    end

    if reward.state == 0 then
        local day = (now - self.monthCardInfo.startTime) / (OneDayTime * 1000) + 1
        if day >= reward.day then
            return HeroMonthCardRewardState.REWARD_STATE_CAN_RECEIVE
        else
            return HeroMonthCardRewardState.REWARD_STATE_UNRECEIVED
        end
    end
    return HeroMonthCardRewardState.REWARD_STATE_LOCK
end

local function GetUnReceivedReward(self)
    if self.monthCardInfo == nil or self.monthCardInfo.buy == BuyFlag.NOT_BUY then
        return 0
    end
    local now = UITimeManager:GetInstance():GetServerTime()
    if now > self.monthCardInfo.endTime or now < self.monthCardInfo.startTime then
        return 0
    end
    local result = 0
    for _, v in ipairs(self.monthCardInfo.rewardArr) do
        local state = self:GetRewardState(v)
        if state == HeroMonthCardRewardState.REWARD_STATE_CAN_RECEIVE then
            result = result + 1
        end
    end
    return result
end

local function ShowNewFlag(self)
    local tagInfo = WelfareController.getShowTagInfoByType(WelfareTagType.HeroMonthCardNew)
    if not tagInfo or not tagInfo:isShow() then
        return false
    end
    local key = self:GetNewFlagSettingKey()
    local value = Setting:GetBool(key, true)
    return value
end

local function SetNewFlag(self)
    local key = self:GetNewFlagSettingKey()
    Setting:SetBool(key, false)
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

local function GetNewFlagSettingKey(self)
    return LuaEntry.Player.uid.."__NewFlagSettingKey"
end

local function GetAllReward(self)
    local tmp = {}
    if self.monthCardInfo ~= nil then
        local rewardArr = self.monthCardInfo.rewardArr
        table.walk(rewardArr, function (_, v)
            if v ~= nil and v.reward ~= nil then
                table.walk(v.reward, function (_, k)
                    local key = tostring(k.rewardType).."_"..(k.itemId or "")
                    if tmp[key] == nil then
                        tmp[key] = DeepCopy(k)
                    else
                        tmp[key].count = tmp[key].count + k.count
                    end
                end)
            end
        end)
    end
    local result = table.values(tmp)
    return result
end

local function GetTemplate(self, id)
    if self.templates[id] ~= nil then
        return self.templates[id]
    end
    LocalController:instance():visitTable("hero_monthcard",function(id,lineData)
        if lineData.activity_id == tonumber(self.activityId) then
            local tempData = DeepCopy(lineData)
            self.templates[tempData.id] = tempData
        end
    end)
    return self.templates[id]
end

HeroMonthCardManager.__init = __init
HeroMonthCardManager.__delete = __delete
HeroMonthCardManager.GetDataFromServer = GetDataFromServer
HeroMonthCardManager.DoWhenAllDataBack = DoWhenAllDataBack
HeroMonthCardManager.GetReward = GetReward
HeroMonthCardManager.DoWhenBuyCard = DoWhenBuyCard
HeroMonthCardManager.DoWhenGetRewardBack = DoWhenGetRewardBack
HeroMonthCardManager.GetHeroMonthCardReward = GetHeroMonthCardReward
HeroMonthCardManager.GetRewardState = GetRewardState
HeroMonthCardManager.GetHeroMonthCardInfo = GetHeroMonthCardInfo
HeroMonthCardManager.Startup = Startup
HeroMonthCardManager.GetUnReceivedReward = GetUnReceivedReward
HeroMonthCardManager.ShowNewFlag = ShowNewFlag
HeroMonthCardManager.GetNewFlagSettingKey = GetNewFlagSettingKey
HeroMonthCardManager.SetNewFlag = SetNewFlag
HeroMonthCardManager.GetAllReward = GetAllReward
HeroMonthCardManager.GetTemplate = GetTemplate
HeroMonthCardManager.DoWhenGetAllRewardBack = DoWhenGetAllRewardBack

return HeroMonthCardManager