---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/7/21 8:40 PM
---

local LotteryDataManager = BaseClass("LotteryDataManager")
local LotteryInfo = require("DataCenter.HeroData.LotteryInfo")
local RecruitDisplayConfig = require("DataCenter.HeroData.RecruitDisplayConfig")

local BaseLotteryId = 221500

local function __init(self)
    self.lotteryDict = {}
    self.displayConfig = nil
    self.switchConfig = nil
    self.allRecruitItem = {}
    self.campChangeFreeCount = 0
    self.campChangeFreeMax   = 0
    self.nextCampLotteryId   = 0
    self.needTipItemId2Num = nil
    self.needTipItemId = 0
    self.curTipItemId = 0
    self.curTipBubbleType = LotteryDataManager.BubbleTipType.None
end

local function __delete(self)
    self.lotteryDict = nil
    self.displayConfig = nil
    self.switchConfig = nil
    self.allRecruitItem = {}
    self.campChangeFreeCount  = nil
    self.campChangeFreeMax    = nil
    self.nextCampLotteryId  = nil
    self.needTipItemId2Num = nil
end

local function UpdateLotteryData(self, message)
    local array = message["lotteryFreeInfo"]
    if array == nil then
        Logger.LogError('#zlh#', "LotteryDataManager lotteryFreeInfo is nil!")
        return
    end

    self.lotteryDict = {}

    for _, sfsObj in pairs(array) do
        local id = sfsObj["id"]
        local dt = self.lotteryDict[id]
        if dt ~= nil then
            dt:UpdateInfo(sfsObj)
        else
            dt = LotteryInfo.New()
            dt:UpdateInfo(sfsObj)
            self.lotteryDict[id] = dt
        end
    end
end

local function InitData(self, message)
    local array = message["lotteryFreeInfo"]
    if array == nil then
        Logger.LogError('#zlh#', "LotteryDataManager lotteryFreeInfo is nil!")
        return
    end

    self.lotteryDict = {}

    for _, sfsObj in pairs(array) do
        local id = sfsObj["id"]
        local dt = self.lotteryDict[id]
        if dt ~= nil then
            dt:UpdateInfo(sfsObj)
        else
            dt = LotteryInfo.New()
            dt:UpdateInfo(sfsObj)
            self.lotteryDict[id] = dt 
        end
    end

    local displayConfig = RecruitDisplayConfig.New()
    displayConfig:Init()
    self.displayConfig = displayConfig

    self.needTipItemId = LuaEntry.DataConfig:TryGetStr('get_recruitment_props_tips', 'k1')
    self.needTipItemNum = LuaEntry.DataConfig:TryGetStr('get_recruitment_props_tips', 'k2')
end

local function GetAllLotteryDict(self)
    return self.lotteryDict
end

local function GetAllShowLotteryDict(self)
    local result = {}
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local type3StartTime = -1
    local unOpenType3 = nil
    local unOpenType3Type = nil
    for k, v in pairs(self.lotteryDict) do
        if v.display_type == LotteryDisPlayType.LotteryDisPlayType_Normal_And_Expert then
            local season = DataCenter.SeasonDataManager:GetSeason() or 0
            if season == v.season then
                result[k] = v
            end
        elseif not string.IsNullOrEmpty(v.need_item) then
            local itemCount = DataCenter.ItemData:GetItemCount(toInt(v.need_item))
            if itemCount > 0 then
                result[k] = v
            end
        elseif v.type == 3 then--活动招募
            if curTime > v.startTime and curTime < v.endTime then
                result[k] = v
            else
                if curTime < v.startTime and v.show_time > 0 and v.startTime < curTime + v.show_time then
                    if type3StartTime < 0 or type3StartTime > v.startTime then
                        unOpenType3 = v
                        unOpenType3Type = k
                        type3StartTime = v.startTime
                    end
                end
            end
        else
            result[k] = v
        end
    end
    if unOpenType3Type then
        result[unOpenType3Type] = unOpenType3
    end
    return result
end

local function UpdateOneLottery(self, message)
    local id = message['id']
    local dt = self.lotteryDict[id]
    if dt ~= nil then
        dt:UpdateInfo(message)
    end
end

local function GetLotteryDataById(self, lotteryId)
    return self.lotteryDict[lotteryId]
end


local function GetDisplayConfig(self)
    return self.displayConfig
end

local function SetCampChangeInfo(self, freeCount, freeMaxCount, nextCampLotteryId)
    self.campChangeFreeCount = freeCount
    self.campChangeFreeMax   = freeMaxCount

    if nextCampLotteryId ~= nil then
        self.nextCampLotteryId  = nextCampLotteryId
    end
end

local function GetLeftCampChangeFreeCount(self)
    return math.min(0, self.campChangeFreeMax - self.campChangeFreeCount)
end

local function GetCampChangeCost(self)
    local costInfo = LuaEntry.DataConfig:TryGetStr('recruit_switch', 'k2')
    local array = string.split(costInfo, ';')
    
    return tonumber(array[1]), tonumber(array[2])
end

local function GetLotteryIdByCamp(self, campId)
    campId = tonumber(campId) 
    local info = LuaEntry.DataConfig:TryGetStr('recruit_switch', 'k1')
    local array = string.split(info, ';')
    
    for _, lotteryId in ipairs(array) do
        if self.displayConfig:GetCampId(lotteryId) == campId then
            return lotteryId
        end 
    end
    
    return nil
end

---获取特定阵营招募 当前的lotteryId
local function GetSpecialCampCurLotteryId(self)
    local info = LuaEntry.DataConfig:TryGetStr('recruit_switch', 'k1')
    local array = string.split(info, ';')

    for _, lotteryId in ipairs(array) do
        local dt = self:GetLotteryDataById(lotteryId)
        if dt ~= nil and dt:IsShowTime() and dt:IsOpen() then
            return lotteryId
        end
    end

    return nil
end


---是否属于特定阵营招募
local function IsSpecialCampLottery(self, lotteryId)
    local info = LuaEntry.DataConfig:TryGetStr('recruit_switch', 'k1')
    local array = string.split(info, ';')

    return table.hasvalue(array, lotteryId)
end

-- 任意卡包可以十连
local function CanAnyMultiRecruit(self)
    local allShow = self:GetAllShowLotteryDict()
    for _, v in pairs(allShow) do
        if v:IsAllowMultiRecruit() then
            local costItems = v:GetCostItems()
            local itemId = costItems[2].itemId
            local itemNum = costItems[2].itemNum
            local have = DataCenter.ItemData:GetItemCount(itemId)
            if have >= itemNum then
                return true
            end
        end
    end
    return false
end

-- 任意卡包可以单抽
local function CanAnySingleRecruit(self)
    local allShow = self:GetAllShowLotteryDict()
    for _, v in pairs(allShow) do
        if v:IsAllowMultiRecruit() then
            local costItems = v:GetCostItems()
            local itemId = costItems[1].itemId
            local itemNum = costItems[1].itemNum
            local have = DataCenter.ItemData:GetItemCount(itemId)
            if have >= itemNum then
                return true
            end
        end
    end
    return false
end

---是否可以在酒馆上显示招募气泡 【条件：基础卡包满足5连抽或(阵营卡包满足单抽,一天只提示一次)】
local function CanShowTipBubble(self, basic)
    local allShow = self:GetAllShowLotteryDict()
    for lotteryId, v in pairs(allShow) do
        --基础卡包满足十连抽
        if v.class == LotteryClassType.LotteryClassType_NORMAL then
            if basic then
                if v:IsAllowMultiRecruit() then
                    local costItems = v:GetCostItems()
                    local itemId = costItems[2].itemId
                    local itemNum = costItems[2].itemNum

                    local item = DataCenter.ItemData:GetItemById(itemId)
                    local have = item and item.count or 0
                    if have >= itemNum then
                        self.curTipBubbleType = LotteryDataManager.BubbleTipType.Normal
                        self.curTipItemId = itemId
                        return true
                    end
                else
                    --local now = UITimeManager:GetInstance():GetServerSeconds()
                    --local lastTipTimeStamp = Setting:GetPrivateFloat(SettingKeys.CAMP_RECRUIT_BUBBLE_TIP, 0)
                    --24小时内只提示1次
                    --if now - lastTipTimeStamp > OneDayTime then
                        local costItems = v:GetCostItems()
                        local itemId = costItems[1].itemId
                        local itemNum = costItems[1].itemNum

                        local item = DataCenter.ItemData:GetItemById(itemId)
                        local have = item and item.count or 0
                        if have >= itemNum then
                            self.curTipItemId = itemId
                            self.curTipBubbleType = LotteryDataManager.BubbleTipType.Normal
                            return true
                        end
                    --end
                end
            end
        else
            --阵营卡包满足单抽
            if not basic then
                if v:IsAllowMultiRecruit() then
                    local costItems = v:GetCostItems()
                    local itemId = costItems[2].itemId
                    local itemNum = costItems[2].itemNum

                    local item = DataCenter.ItemData:GetItemById(itemId)
                    local have = item and item.count or 0
                    if have >= itemNum then
                        self.curTipItemId = itemId
                        self.curTipBubbleType = LotteryDataManager.BubbleTipType.Camp
                        return true
                    end
                else
                    --local now = UITimeManager:GetInstance():GetServerSeconds()
                    --local lastTipTimeStamp = Setting:GetPrivateFloat(SettingKeys.CAMP_RECRUIT_BUBBLE_TIP, 0)
                    --24小时内只提示1次
                    --if now - lastTipTimeStamp > OneDayTime then
                    local costItems = v:GetCostItems()
                    local itemId = costItems[1].itemId
                    local itemNum = costItems[1].itemNum

                    local item = DataCenter.ItemData:GetItemById(itemId)
                    local have = item and item.count or 0
                    if have >= itemNum then
                        self.curTipItemId = itemId
                        self.curTipBubbleType = LotteryDataManager.BubbleTipType.Camp
                        return true
                    end
                    --end
                end
            end
        end
    end
    
    return false
end

--如果提示阵营招募的情况下 打开了招募界面 则将当前的时间戳写入缓存
local function CheckCampRecruitFlag(self)
    if self.curTipBubbleType == LotteryDataManager.BubbleTipType.Camp then
        local now = UITimeManager:GetInstance():GetServerSeconds()
        Setting:SetPrivateFloat(SettingKeys.CAMP_RECRUIT_BUBBLE_TIP, now)
        self.curTipBubbleType = LotteryDataManager.BubbleTipType.None

        EventManager:GetInstance():Broadcast(EventId.CheckPubBubble)
    end
end

local function IsNeedTipItemId(self, itemId)
    itemId = toInt(itemId)
    if self.needTipItemId2Num == nil then
        self:InitNeedTipItemId()
    end
    return self.needTipItemId2Num ~= nil and self.needTipItemId2Num[itemId] ~= nil
end

local function GetNeedTipItemMaxNum(self, itemId)
    itemId = toInt(itemId)
    if self.needTipItemId2Num == nil then
        self:InitNeedTipItemId()
    end
    if self.needTipItemId2Num == nil or self.needTipItemId2Num[itemId] == nil then
        return 1
    end
    return self.needTipItemId2Num[itemId]
end

local function InitNeedTipItemId(self)
    if self.needTipItemId2Num == nil then
        local str = LuaEntry.DataConfig:TryGetStr('hero_reset', 'k9')
        local vec = string.split(str, "|")
        if vec ~= nil then
            self.needTipItemId2Num = {}
            for _, v in ipairs(vec) do
                local tmpVec = string.split(v, ";")
                if table.count(tmpVec) == 2 then
                    self.needTipItemId2Num[toInt(tmpVec[1])] = toInt(tmpVec[2]) 
                end
            end
        end
    end
end

local function GetCurTipBubbleType(self)
    return self.curTipBubbleType
end

local function GetCurTipItemId(self)
    return self.curTipItemId
end

LotteryDataManager.BubbleTipType = 
{
    None = 0,
    Normal = 1,
    Camp = 2
}

local function HasLotteryLimit(self, lotteryInfo)
    local isCn = LuaEntry.Player:IsInCnServer()
    if isCn and LuaEntry.DataConfig:CheckSwitch("cn_HeroreCruits_limit_switch") then
        return true
    end
    if lotteryInfo and lotteryInfo.times_limit > 0 then
        return true
    end
    return false
end

local function GetLotteryTimesLeft(self, lotteryInfo)
    if lotteryInfo == nil then
        return 0
    end
    if self:HasLotteryLimit(lotteryInfo) then
        local isCn = LuaEntry.Player:IsInCnServer()
        local totalLeft = IntMaxValue
        local perDayLeft = -1
        if lotteryInfo.times_limit > 0 then
            local current = lotteryInfo.totalLotteryNum or 0
            totalLeft = lotteryInfo.times_limit - current
            totalLeft = Mathf.Clamp(totalLeft, 0, lotteryInfo.times_limit)
            perDayLeft = totalLeft
        end
        if isCn and LuaEntry.DataConfig:CheckSwitch("cn_HeroreCruits_limit_switch") then
            local current = lotteryInfo.totalLottery or 0
            local max = LuaEntry.DataConfig:TryGetNum("cn_HeroreCruits_limit", "k1")
            local left = max - current
            if perDayLeft > left or perDayLeft < 0 then
                perDayLeft = left
            end
        end
        if totalLeft < 0 then
            totalLeft = perDayLeft
        end
        local result = math.min(totalLeft, perDayLeft)
        result = math.max(result, 0)
        return result
    end
    return IntMaxValue
end

local function IsShowRecruitItemIntro(self, itemId)
    if itemId == "230013" or itemId == "230014" or itemId == "230005" or itemId == "230006" or itemId == "230015" or itemId == "210524" or itemId == "210530" or itemId == "210529" or itemId == "210528" then
        return false
    end
    if self.allRecruitItem == nil then
        self.allRecruitItem = {}
    end
    if table.count(self.allRecruitItem) == 0 then
        LocalController:instance():visitTable(TableName.HeroRecruit, function(id, lineData)
            local itemStr = lineData["item"]
            if not string.IsNullOrEmpty(itemStr) then
                local vec = string.split(itemStr, "|")
                if table.count(vec) > 0 then
                    local itemVec = string.split(vec[1], ";")
                    self.allRecruitItem[itemVec[1]] = 1
                end
            end
        end)
    end
    if self.allRecruitItem[itemId] ~= nil then
        return true
    end
    return false
end

--同过卡池组改变卡池已抽取数量
function LotteryDataManager:ChangeClassLotteryNum(classId, pityProProtectNum)
    local list = self:GetAllLotteryByClassId(classId)
    if list ~= nil then
        for k, v in ipairs(list) do
            v.pityProProtectNum = pityProProtectNum
        end
    end
end

--同过卡池组获取所有卡池
function LotteryDataManager:GetAllLotteryByClassId(classId)
    local result = {}
    if self.lotteryDict ~= nil then
        for k, v in pairs(self.lotteryDict) do
            if v.classId == classId then
                table.insert(result, v)
            end
        end
    end
    return result
end

--是否可以免费招募
function LotteryDataManager:HaveFree()
    local allShow = self:GetAllShowLotteryDict()
    for _, v in pairs(allShow) do
        if v:CanFreeRecruit() then
            return true
        end
    end
    return false
end

LotteryDataManager.HasLotteryLimit = HasLotteryLimit
LotteryDataManager.GetLotteryTimesLeft = GetLotteryTimesLeft
LotteryDataManager.IsShowRecruitItemIntro = IsShowRecruitItemIntro
LotteryDataManager.__init = __init
LotteryDataManager.__delete = __delete
LotteryDataManager.InitData = InitData
LotteryDataManager.GetAllLotteryDict = GetAllLotteryDict
LotteryDataManager.GetAllShowLotteryDict = GetAllShowLotteryDict

LotteryDataManager.UpdateOneLottery = UpdateOneLottery
LotteryDataManager.GetLotteryDataById = GetLotteryDataById

LotteryDataManager.GetDisplayConfig = GetDisplayConfig
LotteryDataManager.SetCampChangeInfo = SetCampChangeInfo
LotteryDataManager.GetLeftCampChangeFreeCount = GetLeftCampChangeFreeCount
LotteryDataManager.GetLotteryIdByCamp = GetLotteryIdByCamp
LotteryDataManager.GetCampChangeCost = GetCampChangeCost
LotteryDataManager.GetSpecialCampCurLotteryId = GetSpecialCampCurLotteryId
LotteryDataManager.IsSpecialCampLottery = IsSpecialCampLottery
LotteryDataManager.CanAnyMultiRecruit = CanAnyMultiRecruit
LotteryDataManager.CanAnySingleRecruit = CanAnySingleRecruit
LotteryDataManager.CanShowTipBubble = CanShowTipBubble
LotteryDataManager.GetCurTipBubbleType = GetCurTipBubbleType
LotteryDataManager.CheckCampRecruitFlag = CheckCampRecruitFlag
LotteryDataManager.UpdateLotteryData = UpdateLotteryData
LotteryDataManager.IsNeedTipItemId = IsNeedTipItemId
LotteryDataManager.GetNeedTipItemMaxNum = GetNeedTipItemMaxNum
LotteryDataManager.InitNeedTipItemId = InitNeedTipItemId
LotteryDataManager.GetCurTipItemId = GetCurTipItemId

return LotteryDataManager