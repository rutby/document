---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangliheng.
--- DateTime: 7/7/21 8:44 PM
---


local LotteryInfo = BaseClass("LotteryInfo")
local Localization = CS.GameEntry.Localization

local function __init(self)
    self.id = ""                            -- 唯一标识
    self.type = 0                           -- 1 普通 2 高级 3 活动
    self.name = ""                          -- 名称dlg
    self.picture_small = ""                 -- tab picture
    self.picture = ""                       -- picture
    self.descIcon = ""                      -- 描述背景框
    self.order = 0                          
    self.item = ""                           
    self.protect_des = ""                    
    self.quality_show = 0                   -- 显示特效的品质
    self.color = 0                          -- 品质
    self.textColor = ""                     -- 文本颜色
    self.des = ""
    self.goods_tips = ""
    self.bubble_icon = ""
    self.startTime = 0                      -- type==3 的才有 活动开始时间
    self.endTime = 0                        -- type==3 的才有 活动结束时间
    self.season_function = ""               -- 数字;数字 表示最近多少天内不能有移民记录;经历的赛季天数需大于多少天。必须满足其中一个条件，才能进行招募
    self.dailyFreeLimit = 0	                -- 每天免费次数 不是所有类型都有免费招募
    self.dailyFree = 0                      -- 今天已经用了几次免费次数 不是所有类型都有免费招募
    self.nextFreeTime = 0                   -- 下次免费时间 不是所有类型都有免费招募
    self.totalLottery = 0	                -- 今日累计招募次数
    self.totalLotteryLimit = 0              -- 今日招募次数限制
    self.seasonId = 0                       -- 赛季
    self.protectLeftCount = 0	            -- 招募保底抽到指定品质英雄的剩余次数
    self.protectHeroQuality = 0           -- 招募N次后保底抽到的英雄品质
    self.pityProProtectNum = 0
    self.pityProNum = 0
    self.pityProType = 0
    self.season = 0--赛季
    self.times_limit = 0
    self.pity_hero = ""
    self.totalLotteryNum = 0
    self.rates = {}
    self.dropSpecialHeroes = {}--掉落的特殊英雄
    self.classId = 0--卡池组
    
    --客户端参数
    self.finish_timer_callback = function() 
        self:FreeTimerCallback()
    end
end

local function __delete(self)
    self:DeleteFreeTimer()
    self.id                     = nil
    self.type                   = nil
    self.name                   = nil
    self.picture_small          = nil
    self.picture                = nil
    self.descIcon               = nil
    self.order                  = nil
    self.item                   = nil
    self.protect_des            = nil
    self.quality_show           = nil
    --self.color                  = nil
    self.textColor              = nil
    --self.des                    = nil
    self.goods_tips             = nil
    self.bubble_icon            = nil
    self.startTime              = nil
    self.endTime                = nil
    self.season_function        = nil
    self.dailyFreeLimit         = nil
    self.dailyFree              = nil
    self.nextFreeTime           = nil
    self.totalLottery           = nil
    self.totalLotteryLimit      = nil
    self.seasonId               = nil
    self.protectLeftCount     = nil
    self.protectHeroQuality   = nil
    self.season = nil--赛季
    self.times_limit = 0
    self.pity_hero = ""
    self.totalLotteryNum = 0
    self.rates = {}
    self.dropSpecialHeroes = {}--掉落的特殊英雄
    self.classId = 0--卡池组
end

local function UpdateInfo(self, message)
    if message['id'] ~= nil then
        self.id = message["id"] 
    end
    
    if message['type'] ~= nil then 
        self.type = message["type"]
    end
    
    if message['name'] ~= nil then
        self.name = message["name"]
    end
    self.picture_small = GetTableData(TableName.HeroRecruit, self.id, "picture_small")
    self.picture = GetTableData(TableName.HeroRecruit, self.id, "picture")
    self.time_type = GetTableData(TableName.HeroRecruit, self.id, "time_type")
    if string.IsNullOrEmpty(self.time_type) then
        self.time_type = "0"
    end
    self.panel_tips1 = GetTableData(TableName.HeroRecruit, self.id, "panel_tips1")
    self.panel_tips2 = GetTableData(TableName.HeroRecruit, self.id, "panel_tips2")
    self.panel_tips3 = GetTableData(TableName.HeroRecruit, self.id, "panel_tips3")
    self.panel_rate = GetTableData(TableName.HeroRecruit, self.id, "panel_rate")
    self.need_item = GetTableData(TableName.HeroRecruit, self.id, "need_item")
    self.class = toInt(GetTableData(TableName.HeroRecruit, self.id, "class"))
    self.show_time = toInt(GetTableData(TableName.HeroRecruit, self.id, "show_time")) * 60 * 60 * 1000
    self.dropSpecial = GetTableData(TableName.HeroRecruit, self.id, "dropspecial")
    self.dropSpecialHeroes = {}
    if not string.IsNullOrEmpty(self.dropSpecial) then
        local spl = string.split_ss_array(self.dropSpecial, "|")
        if spl[2] ~= nil then
            self.dropSpecialHeroes = string.split_ii_array(spl[2], ";")
        end
    end
    self.pity_picture_value = GetTableData(TableName.HeroRecruit, self.id, "pity_picture_value") or ""
    self.display_type = toInt(GetTableData(TableName.HeroRecruit, self.id, "display_type"))
    self.rates = {}
    local rateStr = GetTableData(TableName.HeroRecruit, self.id, "heroinfo")
    if not string.IsNullOrEmpty(rateStr) then
        local rateVec = string.split(rateStr, ";")
        for i = 1, 5 do
            local groupStr = GetTableData(TableName.HeroRecruit, self.id, "rate"..i)
            if not string.IsNullOrEmpty(groupStr) then
                local groupVec = string.split(groupStr, ";")
                if table.count(groupVec) > 0 and rateVec[i] ~= nil then
                    --12, officer_list
                    local idStr = string.sub(groupVec[1], 13)
                    self.rates[toInt(idStr)] = rateVec[i]
                end
            end
        end
    end
    --if message['picture_small'] ~= nil then 
    --    self.picture_small = message["picture_small"] 
    --end
    --
    --if message['picture'] ~= nil then 
    --    self.picture = message["picture"] 
    --end
    if message["pityhero"] then
        self.pity_hero = message["pityhero"]
    end
    if message["times_limit"] then
        self.times_limit = message["times_limit"]
    end
    if message["totalLotteryNum"] then
        self.totalLotteryNum = message["totalLotteryNum"]
    end
    if message['panel_name'] ~= nil then 
        self.descIcon = message["panel_name"] 
    end
    
    if message['order'] ~= nil then 
        self.order = message["order"] 
    end

    if message["season"] then
        self.season = toInt(message["season"])
    end
    
    if message['item'] ~= nil then 
        self.item = message["item"]

        --解析消耗道具 item：消耗，道具id；数量|道具id；数量。竖线前为单抽消耗，竖线后为10连抽消耗，如果没有配置竖线和竖线后的内容，则此招募没有10连抽
        self.costItems = {}
        local list1 = string.split(self.item, '|')
        for k, value in ipairs(list1) do
            local list2 = string.split(value, ';')
            local t = {}
            t.itemId  = list2[1]
            t.itemNum = tonumber(list2[2])
            self.costItems[k] = t
        end
    end
    
    if message['protect_des'] ~= nil then 
        self.protect_des = message["protect_des"] 
    end
    
    if message['quality_show'] ~= nil then 
        self.quality_show = message["quality_show"] 
    end
    
    --if message[''] ~= nil then --self.color                  = message[""] end
    if message['text_color'] ~= nil then 
        self.textColor = message["text_color"] 
    end
    
    --if message[''] ~= nil then --self.des                    = message[""] end
    if message['goods_tips'] ~= nil then 
        self.goods_tips = message["goods_tips"] 
    end
    
    if message['bubbleicon'] ~= nil then 
        self.bubble_icon = message["bubbleicon"] 
    end
    
    if message['startTime'] ~= nil then 
        self.startTime = message["startTime"]  * 1000
    end
    
    if message['endTime'] ~= nil then 
        self.endTime = message["endTime"]  * 1000 
    end
    
    if message['season_function'] ~= nil then 
        self.season_function = message["season_function"] 
    end
    
    if message['dailyFreeLimit'] ~= nil then 
        self.dailyFreeLimit = message["dailyFreeLimit"] 
    end
    
    if message['dailyFree'] ~= nil then 
        self.dailyFree = message["dailyFree"] 
    end
    
    if message['nextFreeTime'] ~= nil then 
        self.nextFreeTime = message["nextFreeTime"] 
    end
    
    if message['totalLottery'] ~= nil then 
        self.totalLottery = message["totalLottery"] 
    end
    
    if message['recruit_limit'] ~= nil then 
        self.totalLotteryLimit = message["recruit_limit"] 
    end
    
    if message['season'] ~= nil then 
        self.seasonId = message["season"] 
    end
    if message['pityLeftProtectNum'] ~= nil then 
        self.protectLeftCount = message["pityLeftProtectNum"] 
    end
    
    if message['pityType'] ~= nil then 
        self.protectHeroQuality = message["pityType"] 
    end

    if message['pityProType'] ~= nil then
        self.pityProType = message["pityProType"]
    end
    
    --掉落概率
    if message['dropinfo'] ~= nil then
        self.dropInfo = message['dropinfo']
    end

    if message['dropheroinfo'] ~= nil then
        self.dropHeroInfo = message['dropheroinfo']
    end
    if message["pityProProtectNum"] ~= nil then
        self.pityProProtectNum = message["pityProProtectNum"]
    end
    if message["pityProNum"] ~= nil then
        self.pityProNum = message["pityProNum"]
    end
    if message['recruit_camp'] ~= nil then
        self.dropCampInfo = message['recruit_camp']
    end
    self.classId = message["classId"] or 0
    self:CheckFreeTimer()
end

local function IsShowTime(self)
    return self.endTime > self.startTime and self.display_type ~= LotteryDisPlayType.LotteryDisPlayType_Normal_And_Expert and self.time_type ~= LotteryTimeType.LotteryTimeType_Normal
end


local function IsOpen(self)
    if not string.IsNullOrEmpty(self.need_item) then
        local season = DataCenter.SeasonDataManager:GetSeason() or 0
        return season >= self.season
    end
    if self.display_type == LotteryDisPlayType.LotteryDisPlayType_Normal_And_Expert then
        return true
    end
    if self.endTime <= self.startTime then
        return true
    end
    local now = UITimeManager:GetInstance():GetServerTime()
    return self.startTime < now and self.endTime > now  
end

local function GetCostItems(self)
    local dict = {}
    dict[1] = self.costItems[1]
    if self.costItems[2] then
        -- 剩余抽数不足N连抽时，改为等于剩余抽数的连抽
        local itemId = self.costItems[2].itemId
        local have = DataCenter.ItemData:GetItemCount(itemId)
        dict[2] = {}
        dict[2].itemId = itemId
        if have >= HeroRecruitTenCount and have < self.costItems[2].itemNum then
            dict[2].itemNum = have
        else
            dict[2].itemNum = self.costItems[2].itemNum
        end
    end
    return dict
end

local function IsAllowMultiRecruit(self)
    return self.costItems and #self.costItems >= 2
end

local function GetIconName(self)
    return string.format(LoadPath.HeroRecruitPath, self.picture_small)
end

local function GetPityMaxNum(self)
    local vec = string.split(self.pity_hero, ";")
    if table.count(vec) == 3 then
        return toInt(vec[3])
    end
    return self.pityProNum
end

--获取特殊概率提升的英雄名字
function LotteryInfo:GetDropSpecialHeroesNameList()
    local result = ""
    for k,v in ipairs(self.dropSpecialHeroes) do
        local nameStr = Localization:GetString(GetTableData(HeroUtils.GetHeroXmlName(), v, "name"))
        if result == "" then
            result = nameStr
        else
            result = result .. "," .. nameStr
        end
    end
    return result
end

local function IsSupportFreeRecruit(self)
    return self.dailyFreeLimit > 0
end

local function CanFreeRecruit(self)
    return self.dailyFreeLimit > self.dailyFree
end

function LotteryInfo:CheckFreeTimer()
    self:DeleteFreeTimer()
    if self:IsSupportFreeRecruit() and (not self:CanFreeRecruit()) then
        if self.nextFreeTime > 0 then
            local curTime = UITimeManager:GetInstance():GetServerSeconds()
            local left = self.nextFreeTime - curTime
            if left > 0 then
                self:AddFreeTimer(left)
            else
                SFSNetwork.SendMessage(MsgDefines.GetHeroLotteryInfo)
                self:DeleteFreeTimer()
            end
        end
    end
end

function LotteryInfo:DeleteFreeTimer()
    if self.free_timer ~= nil then
        self.free_timer:Stop()
        self.free_timer = nil
    end
end

function LotteryInfo:AddFreeTimer(time)
    if self.free_timer == nil then
        self.free_timer = TimerManager:GetInstance():GetTimer(time, self.finish_timer_callback, self, true, false, false)
        self.free_timer:Start()
    end
end

function LotteryInfo:FreeTimerCallback()
    self:DeleteFreeTimer()
    SFSNetwork.SendMessage(MsgDefines.GetHeroLotteryInfo)
end

function LotteryInfo:CanMultiRecruit()
    local costItems = self:GetCostItems()
    if costItems[2] ~= nil then
        local itemId = costItems[2].itemId
        local itemNum = costItems[2].itemNum
        local have = DataCenter.ItemData:GetItemCount(itemId)
        if have >= itemNum then
            return true
        end
    end
    return false
end


LotteryInfo.__init               = __init
LotteryInfo.__delete             = __delete
LotteryInfo.UpdateInfo           = UpdateInfo
LotteryInfo.IsShowTime           = IsShowTime
LotteryInfo.IsOpen               = IsOpen
LotteryInfo.GetCostItems         = GetCostItems
LotteryInfo.IsAllowMultiRecruit  = IsAllowMultiRecruit
LotteryInfo.GetIconName  = GetIconName
LotteryInfo.GetPityMaxNum = GetPityMaxNum
LotteryInfo.IsSupportFreeRecruit = IsSupportFreeRecruit
LotteryInfo.CanFreeRecruit = CanFreeRecruit

return LotteryInfo

