---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 

local CumulativeRechargeManager = BaseClass("CumulativeRechargeManager");
local RechargeStageInfo = require "DataCenter.CumulativeRechargeManager.RechargeStageInfo"

local function __init(self)
    self.rechargeStage = {}
    self.tempStage = 0
    self.isFirst = true
end

local function __delete(self)
    self.recharge = nil
    self.isFirst = nil
end

---登陆时下发
local function InitDat(self, message)
    if message["rechargeArr"] then
        local recharge = message["rechargeArr"]
        for i = 1 ,#recharge do
            if recharge[i].rechargeType == RechargeType.Normal or recharge[i].rechargeType == RechargeType.Daily then
                self.rechargeStage[recharge[i].rechargeId] = {}
                self.rechargeStage[recharge[i].rechargeId].score = 0
                self.rechargeStage[recharge[i].rechargeId].endTime = recharge[i].endTime
                self.rechargeStage[recharge[i].rechargeId].rechargeId = recharge[i].rechargeId
                self.rechargeStage[recharge[i].rechargeId].startTime = recharge[i].startTime
                self.rechargeStage[recharge[i].rechargeId].rechargeType = recharge[i].rechargeType
                self.rechargeStage[recharge[i].rechargeId].stageInfo = {}
                SFSNetwork.SendMessage(MsgDefines.GetRechargeInfo,recharge[i].rechargeId)
            end
        end
    end
end

---获取活动信息
---@param rechargeId 活动ID
local function SendGetRechargeInfo(self,rechargeId)
    SFSNetwork.SendMessage(MsgDefines.GetRechargeInfo, rechargeId)
end

---更新活动信息
local function UpdateRechargeStageInfo(self,message)
    if self.rechargeStage[message["rechargeId"]] == nil then
        return
    end
    if message["rechargeStageArr"] then
        self.rechargeStage[message["rechargeId"]].stageInfo = {}
        for i = 1 ,#message["rechargeStageArr"] do
            local stageInfo = RechargeStageInfo.New()
            stageInfo:ParseData(message["rechargeStageArr"][i])
            table.insert(self.rechargeStage[message["rechargeId"]].stageInfo,stageInfo)
        end
    end
    self.rechargeStage[message["rechargeId"]].score = message["score"]
    EventManager:GetInstance():Broadcast(EventId.RefreshDailyCumulative,message["rechargeId"])
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
end

---积分变化推送
local function PushRechargeScoreHandle(self,message)
    if self.rechargeStage[message["rechargeId"]] == nil then
        return
    end
    self.rechargeStage[message["rechargeId"]].score = message["score"]
end

---活动开启时推送一次
local function PushNewRechargeHandle(self,message)
    if message.rechargeType == RechargeType.Normal or message.rechargeType == RechargeType.Daily then
        self.rechargeStage[message.rechargeId] = {}
        self.rechargeStage[message.rechargeId].score = 0
        self.rechargeStage[message.rechargeId].endTime = message.endTime
        self.rechargeStage[message.rechargeId].rechargeId = message.rechargeId
        self.rechargeStage[message.rechargeId].startTime = message.startTime
        self.rechargeStage[message.rechargeId].stageInfo = {}
        SFSNetwork.SendMessage(MsgDefines.GetRechargeInfo,message.rechargeId)
    end
end

---请求领奖
---@param rechargeId 活动ID
---@param stageId
local function SendReward(self,rechargeId,stageId)
    SFSNetwork.SendMessage(MsgDefines.ReceiveRechargeReward,rechargeId,stageId)
end


---领奖返回
local function SendRewardHandle(self,message)
    if self.rechargeStage[message["rechargeId"]] == nil then
        return
    end
    local info = self.rechargeStage[message["rechargeId"]].stageInfo
    for i = 1 ,#info do
        if info[i].stageId == message["stageId"] then
            info[i]:UpdateState(1)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.CumulativeReward,message["stageId"])
    -- 礼包中心红点
    EventManager:GetInstance():Broadcast(EventId.RefreshWelfareRedDot)
    DataCenter.RewardManager:ShowCommonReward(message)
    for k,v in pairs(message["reward"]) do
        DataCenter.RewardManager:AddOneReward(v)
    end
end

---活动是否开放
local function CheckIsShow(self,id)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    for i ,v in pairs(self.rechargeStage) do
        if id and v.rechargeId == id then
            if v.startTime < curTime and v.endTime > curTime  then
                return true
            end
        elseif id == nil then
            if v.startTime < curTime and v.endTime > curTime  then
                return true
            end
        end
    end
    return false
end

local function GetInfo(self,id)
    for i, v in pairs(self.rechargeStage) do
        if v and v.rechargeId == id then
            return i,v
        end
    end
end

--当前积分在第几阶段
local function GetCurStage(self,rechargeId)
    local index = 0
    if self.rechargeStage[rechargeId] then
        local data = self.rechargeStage[rechargeId]
        local stageInfo = data.stageInfo
        for i = 1, #stageInfo do
            if data.score >= stageInfo[i].needScore then
                index = i
            end
        end
    end
    return index
end

local function GetRedNum(self,rechargeId)
    local count = 0
    local id,data = self:GetInfo(rechargeId)
    if data then
        for i = 1, #data.stageInfo do
            if data.stageInfo[i].state == 0 and data.score >= data.stageInfo[i].needScore then
                count = count + 1
            end
        end
    end
    return count
end

--检查当前第一个可领奖的
local function CheckCanRecv(self,rechargeId)
    local id,data = self:GetInfo(rechargeId)
    if data then
        for i = 1, #data.stageInfo do
            if data.stageInfo[i].state == 0 and data.score >= data.stageInfo[i].needScore then
                return i
            end
        end
    end
    return 0
end

--记录当前打开时阶段
local function SetCurStage(self,Stage)
    self.tempStage = Stage
    self.isFirst = false
end

local function GetLastStage(self)
    return  self.tempStage
end

local function GetStageIsFirst(self)
    return  self.isFirst
end

CumulativeRechargeManager.__init = __init
CumulativeRechargeManager.__delete = __delete
CumulativeRechargeManager.InitDat = InitDat
CumulativeRechargeManager.SendGetRechargeInfo = SendGetRechargeInfo
CumulativeRechargeManager.UpdateRechargeStageInfo = UpdateRechargeStageInfo
CumulativeRechargeManager.PushRechargeScoreHandle = PushRechargeScoreHandle
CumulativeRechargeManager.PushNewRechargeHandle = PushNewRechargeHandle
CumulativeRechargeManager.SendReward = SendReward
CumulativeRechargeManager.SendRewardHandle = SendRewardHandle
CumulativeRechargeManager.CheckIsShow = CheckIsShow
CumulativeRechargeManager.GetInfo = GetInfo
CumulativeRechargeManager.GetCurStage = GetCurStage
CumulativeRechargeManager.GetRedNum = GetRedNum
CumulativeRechargeManager.CheckCanRecv = CheckCanRecv
CumulativeRechargeManager.SetCurStage = SetCurStage
CumulativeRechargeManager.GetLastStage = GetLastStage
CumulativeRechargeManager.GetStageIsFirst = GetStageIsFirst
return CumulativeRechargeManager