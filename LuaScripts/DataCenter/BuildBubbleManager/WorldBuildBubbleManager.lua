---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/11/15 20:34
---
local WorldBuildBubbleManager = BaseClass("WorldBuildBubbleManager")
local BuildBubbleTip = require "UI.BuildBubbleTip.View.BuildBubbleTip"

local ResourceManager = CS.GameEntry.Resource
local Localization = CS.GameEntry.Localization
local TrainScale = Vector3.New(1.8,1.8,1.8)
local TileBgScale1 =  Vector3.New(0.7,0.7,0.7)
local TileBgScale2 =  Vector3.New(1,1,1)
local TileBgScale3 =  Vector3.New(0.6,0.6,0.6)
local AssistanceIconScale = Vector3.New(2.5,2.5,2.5)
local HeroFreeScienceAndBuild = Vector3.New(1.25,1.25,1.25)
local function __init(self)
    self.allBuildBubble = {}
    self.loadingBuildBubble = {}
    self.buildTypeBubbleType = {}
    self.assistedBuild = {}
    self.lodCache = 1
    self:AddListener()
end

local function __delete(self)
    self:ClearAll()
    self.loadingBuildBubble = nil
    self.allBuildBubble = nil
    self.buildTypeBubbleType = nil
    self.assistedBuild = nil
    self.lodCache = nil
    self:RemoveListener()
end

local function ClearAll(self)
    for k,v in pairs(self.allBuildBubble) do
        self.allBuildBubble[k]:OnDestroy()
        self.allBuildBubble[k].request:Destroy()
    end
    for k,v in pairs(self.loadingBuildBubble) do
        if v~= nil then
            v:Destroy()
        end
    end
    self.loadingBuildBubble = {}
    self.allBuildBubble = {}
end
local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.PveLevelEnter, self.OnEnterPveLevel)
    EventManager:GetInstance():AddListener(EventId.PveLevelExit, self.OnExitPveLevel)
    EventManager:GetInstance():AddListener(EventId.MarchItemUpdateSelf, self.UpdateMarchSignal)
    EventManager:GetInstance():AddListener(EventId.MarchItemTargetMeUpdate, self.UpdateMarchItemSignal)
    EventManager:GetInstance():AddListener(EventId.ChangeCameraLod, self.ChangeCameraLodSignal)
    EventManager:GetInstance():AddListener(EventId.HospitalUpdate, self.OnHospitalUpdateSignal)
    EventManager:GetInstance():AddListener(EventId.HospitaiStart, self.HospitalStartSignal)
    EventManager:GetInstance():AddListener(EventId.HospitalFinish, self.HospitalFinishSignal)
    EventManager:GetInstance():AddListener(EventId.QUEUE_TIME_END, self.QueueTimeEndSignal)
    EventManager:GetInstance():AddListener(EventId.AllianceQueueHelpNew, self.QueueTimeEndSignal)
    if self.showBuildDetailSignal == nil then
        self.showBuildDetailSignal = function(uuid)
            self:BuildInViewSignal(uuid)
        end
        EventManager:GetInstance():AddListener(EventId.ShowBuildDetail, self.showBuildDetailSignal)
    end
    if self.hideBuildDetailSignal == nil then
        self.hideBuildDetailSignal = function(uuid)
            self:BuildOutViewSignal(uuid)
        end
        EventManager:GetInstance():AddListener(EventId.HideBuildDetail, self.hideBuildDetailSignal)
    end
    if self.allianceBuildHelpNewSignal == nil then
        self.allianceBuildHelpNewSignal = function(uuid)
            self:AllianceBuildHelpNewSignal(uuid)
        end
        EventManager:GetInstance():AddListener(EventId.AllianceBuildHelpNew, self.allianceBuildHelpNewSignal)
    end
    if self.worldBuildQueueHeroFreeTimeSignal == nil then
        self.worldBuildQueueHeroFreeTimeSignal = function(uuid)
            self:WorldBuildQueueHeroFreeTimeSignal(uuid)
        end
        EventManager:GetInstance():AddListener(EventId.WorldBuildQueueHeroFreeTime, self.worldBuildQueueHeroFreeTimeSignal)
    end
    if self.buildUpgradeStartSignal == nil then
        self.buildUpgradeStartSignal = function(uuid)
            self:BuildUpgradeStartSignal(uuid)
        end
        EventManager:GetInstance():AddListener(EventId.BuildUpgradeStart, self.buildUpgradeStartSignal)
    end
    if self.buildUpgradeFinishSignal == nil then
        self.buildUpgradeFinishSignal = function(uuid)
            self:CheckShowBubble(uuid)
        end
        EventManager:GetInstance():AddListener(EventId.BuildUpgradeFinish, self.buildUpgradeFinishSignal)
    end
    if self.buildTimeEndSignal == nil then
        self.buildTimeEndSignal = function(uuid)
            self:CheckShowBubble(uuid)
        end
        EventManager:GetInstance():AddListener(EventId.Build_Time_End, self.buildTimeEndSignal)
    end
    if self.onEnterWorldSignal == nil then
        self.onEnterWorldSignal = function()
            self:OnEnterWorldSignal()
        end
        EventManager:GetInstance():AddListener(EventId.OnEnterWorld, self.onEnterWorldSignal)
    end
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelEnter, self.OnEnterPveLevel)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelExit, self.OnExitPveLevel)
    EventManager:GetInstance():RemoveListener(EventId.MarchItemUpdateSelf, self.UpdateMarchSignal)
    EventManager:GetInstance():RemoveListener(EventId.MarchItemTargetMeUpdate, self.UpdateMarchItemSignal)
    EventManager:GetInstance():RemoveListener(EventId.ChangeCameraLod, self.ChangeCameraLodSignal)
    EventManager:GetInstance():RemoveListener(EventId.HospitalUpdate, self.OnHospitalUpdateSignal)
    EventManager:GetInstance():RemoveListener(EventId.HospitaiStart, self.HospitalStartSignal)
    EventManager:GetInstance():RemoveListener(EventId.HospitalFinish, self.HospitalFinishSignal)
    EventManager:GetInstance():RemoveListener(EventId.QUEUE_TIME_END, self.QueueTimeEndSignal)
    EventManager:GetInstance():RemoveListener(EventId.AllianceQueueHelpNew, self.QueueTimeEndSignal)
    if self.buildUpgradeStartSignal ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.BuildUpgradeStart, self.buildUpgradeStartSignal)
        self.buildUpgradeStartSignal = nil
    end
    if self.buildUpgradeFinishSignal ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.BuildUpgradeFinish, self.buildUpgradeFinishSignal)
        self.buildUpgradeFinishSignal = nil
    end
    if self.buildTimeEndSignal ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.Build_Time_End, self.buildTimeEndSignal)
        self.buildTimeEndSignal = nil
    end
    if self.showBuildDetailSignal ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.ShowBuildDetail, self.showBuildDetailSignal)
        self.showBuildDetailSignal = nil
    end
    if self.hideBuildDetailSignal ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.HideBuildDetail, self.hideBuildDetailSignal)
        self.hideBuildDetailSignal = nil
    end
    if self.allianceBuildHelpNewSignal ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.AllianceBuildHelpNew, self.allianceBuildHelpNewSignal)
        self.allianceBuildHelpNewSignal = nil
    end
    if self.worldBuildQueueHeroFreeTimeSignal ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.WorldBuildQueueHeroFreeTime, self.worldBuildQueueHeroFreeTimeSignal)
        self.worldBuildQueueHeroFreeTimeSignal = nil
    end
    if self.onEnterWorldSignal ~= nil then
        EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, self.onEnterWorldSignal)
        self.onEnterWorldSignal = nil
    end
end

local function Startup()
end

local function UpdateMarchItemSignal()
    DataCenter.WorldBuildBubbleManager:RefreshAssistanceBubble()
end

local function UpdateMarchSignal()
    local buildUuid = 0
    if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
        local buildData1 = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.EDEN_WORM_HOLE_1)
        if buildData1 then
            DataCenter.WorldBuildBubbleManager:CheckShowBubble(buildData1.uuid)
        end
        local buildData2 = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.EDEN_WORM_HOLE_2)
        if buildData2 then
            DataCenter.WorldBuildBubbleManager:CheckShowBubble(buildData2.uuid)
        end
        local buildData3 = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.EDEN_WORM_HOLE_3)
        if buildData3 then
            DataCenter.WorldBuildBubbleManager:CheckShowBubble(buildData3.uuid)
        end
    else
        local buildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.APS_BUILD_WORMHOLE_SUB)
        if buildData then
            buildUuid = buildData.uuid
        end
        DataCenter.WorldBuildBubbleManager:CheckShowBubble(buildUuid)
    end
    local crossBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.WORM_HOLE_CROSS)
    if crossBuildData~=nil then
        local curServerId = LuaEntry.Player:GetCurServerId()
        if crossBuildData.server == curServerId then
            DataCenter.WorldBuildBubbleManager:CheckShowBubble(crossBuildData.uuid)
        end
    end
end

local function RefreshAssistanceBubble(self)
    local bUuidList = {}
    for bUuid, _ in pairs(self.assistedBuild) do
        table.insert(bUuidList, bUuid)
    end

    self.assistedBuild = {}
    local marchInfos = DataCenter.WorldMarchDataManager:GetMarchesTargetForMine()
    for _, marchInfo in pairs(marchInfos) do
        if marchInfo:GetMarchStatus() == MarchStatus.ASSISTANCE then
            local bUuid = marchInfo.targetUuid
            self.assistedBuild[bUuid] = true
            table.insert(bUuidList, bUuid)
        end
    end

    for _, bUuid in ipairs(bUuidList) do
        self:CheckShowBubble(bUuid)
    end
end

local function GetBuildNeedShowBuildBubble(self,uuid)
    if SceneUtils.GetIsInWorld() == false then
        return
    end
    if DataCenter.BuildManager:IsWorldBuildInView(uuid) then
        local data = DataCenter.BuildManager:GetBuildingDataByUuid(uuid)
        if data ~= nil then
            local buildState = data.state
            if buildState ~= BuildingStateType.FoldUp and data:IsUpgradeFinish() ==false and data.destroyStartTime<=0 then
                local buildId = data.itemId
                local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
                local list = self:GetBuildBubbleTypeListByBuildType(data.itemId,buildTemplate,data.level)
                if list ~= nil and buildTemplate ~= nil then
                    local isContinue = true
                    local param = {}
                    param.modelHeight = CS.SceneManager.World:GetBuildingHeight(data.pointId)
                    for k,v in ipairs(list) do
                        if isContinue then
                            if v == BuildBubbleType.Assistance then
                                if self.assistedBuild[data.uuid] == true then
                                    isContinue = false
                                    param.iconName = string.format(LoadPath.CommonNewPath, "Common_icon_march_assistance")
                                    param.bgName = string.format(LoadPath.UIBuildBubble, BuildBubbleIconName.BgUnSelect)
                                    param.model = UIAssets.BuildStateIcon
                                    param.buildBubbleType = v
                                    param.pos = data.pointId
                                    param.tiles = buildTemplate.tiles
                                    param.callBack = self.OnClickCallBack
                                    param.uuid = data.uuid
                                    param.bgScale = self:GetBgScale(param)
                                    param.iconScale = self:GetIconScale(param)
                                    param.buildId = buildTemplate.id
                                end
                            elseif v == BuildBubbleType.WormHoleSub then
                                local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
                                if selfMarch~=nil and #selfMarch > 0 then
                                    local endTime = 0
                                    local marchUuid = 0
                                    for i = 1, #selfMarch do
                                        local march = selfMarch[i]
                                        local pointId = march.startPos
                                        local tempTargetUuid = -1
                                        local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
                                        if info and info.PointType == WorldPointType.PlayerBuilding then
                                            tempTargetUuid = info.uuid
                                        end
                                        if march:GetMarchStatus() == MarchStatus.IN_WORM_HOLE and (march.targetUuid == data.uuid or data.uuid == tempTargetUuid) then
                                            if endTime>0 and endTime<=march.endTime then
                                            else
                                                marchUuid = march.uuid
                                                endTime = march.endTime
                                            end
                                        end
                                    end
                                    local march = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
                                    if march then
                                        param.model = UIAssets.BuildStateIcon4
                                        param.iconName = string.format(LoadPath.UIBuildBubble,"UIworld_icon_trans")
                                        param.bgName = string.format(LoadPath.UIBuildBubble,"UIworld_garbage_iconbg01")
                                        isContinue = false
                                        param.buildBubbleType = v
                                        param.pos = data.pointId
                                        param.tiles = buildTemplate.tiles
                                        param.callBack = self.OnClickCallBack
                                        param.uuid = data.uuid
                                        param.bgScale = self:GetBgScale(param)
                                        param.iconScale = self:GetIconScale(param)
                                        param.buildId = buildTemplate.id
                                        param.startTime = march.startTime
                                        param.endTime = march.endTime
                                        break
                                    end
                                end
                            elseif v == BuildBubbleType.CrossWormHoleSub then
                                local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
                                if selfMarch~=nil and #selfMarch > 0 then
                                    for i = 1, #selfMarch do
                                        local march = selfMarch[i]
                                        if (march:GetMarchStatus() == MarchStatus.CROSS_SERVER or march:GetMarchTargetType() == MarchTargetType.CROSS_SERVER_WORM) then
                                            param.model = UIAssets.BuildStateIcon4
                                            param.iconName = string.format(LoadPath.UIBuildBubble,"UIworld_icon_trans")
                                            param.bgName = string.format(LoadPath.UIBuildBubble,"UIworld_garbage_iconbg01")
                                            isContinue = false
                                            param.buildBubbleType = v
                                            param.pos = data.pointId
                                            param.tiles = buildTemplate.tiles
                                            param.callBack = self.OnClickCallBack
                                            param.uuid = data.uuid
                                            param.bgScale = self:GetBgScale(param)
                                            param.iconScale = self:GetIconScale(param)
                                            param.buildId = buildTemplate.id
                                            param.startTime = march.startTime
                                            param.endTime = march.endTime
                                            break
                                        end
                                    end
                                end
                            elseif v == BuildBubbleType.WormHoleSubZero then
                                local buildList = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(buildTemplate.id)
                                if  #buildList > 0 then
                                    if buildList[1].level == 0 and buildList[1].state ~= BuildingStateType.Upgrading then
                                        local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
                                        if #selfMarch> 0 then
                                            for i = 1, #selfMarch do
                                                local march = selfMarch[i]
                                                if march:GetMarchTargetType() == MarchTargetType.BUILD_WORM_HOLE then
                                                    return nil
                                                end
                                            end
                                        end
                                        param.model = UIAssets.BuildStateIcon
                                        param.iconName = string.format(LoadPath.UIBuildBtns,"uibuild_btn_xiujian")
                                        param.bgName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.BgUnSelect)
                                        isContinue = false
                                        param.buildBubbleType = v
                                        param.pos = data.pointId
                                        param.tiles = buildTemplate.tiles
                                        param.callBack = self.OnClickCallBack
                                        param.uuid = data.uuid
                                        param.bgScale = self:GetBgScale(param)
                                        param.iconScale = self:GetIconScale(param)
                                        param.buildId = buildTemplate.id
                                    end
                                end
                            elseif v == BuildBubbleType.UpgradeAllianceHelp then
                                if LuaEntry.Player:IsInAlliance() and data.updateTime>0 and (data.isHelped == AllianceHelpState.No or data.isHelped == AllianceHelpState.RuinsHelped) and data.level > 0 then
                                    param.iconName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.UpgradeAllianceHelp)
                                    param.bgName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.BgUnSelect)
                                    param.model = UIAssets.BuildStateIcon
                                    isContinue = false
                                    param.buildBubbleType = v
                                    param.pos = data.pointId
                                    param.tiles = buildTemplate.tiles
                                    param.callBack = self.OnClickCallBack
                                    param.uuid = uuid
                                    param.bgScale = self:GetBgScale(param)
                                    param.iconScale = self:GetIconScale(param)
                                    param.buildId = buildId
                                end
                            elseif v == BuildBubbleType.HeroFreeBuildAddTime then
                                local isUseHero = DataCenter.BuildQueueManager:GetCanUseWorldHeroFreeTime(uuid)
                                if isUseHero ~= nil then
                                    local buildData = DataCenter.BuildManager:GetBuildingDataByUuid(uuid)
                                    param.model = UIAssets.BuildStateIcon6
                                    local heroData = DataCenter.HeroDataManager:GetFreeAddTimeHero(EffectDefine.BUILD_TIME_REDUCE)
                                    if heroData then
                                        param.iconName = HeroUtils.GetHeroIconPath(heroData.heroId,false)
                                    else
                                        if isUseHero.robotId ~= nil then
                                            param.robotId = isUseHero.robotId
                                            param.iconName = string.format(LoadPath.ItemPath,"Speedup_robot_".. isUseHero.robotId)
                                        else
                                            param.iconName = string.format(LoadPath.ItemPath,"Speedup_daben")
                                        end
                                    end
                                    param.bgName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.BgSelect)
                                    isContinue = false
                                    param.buildBubbleType = v
                                    param.pos = data.pointId
                                    param.tiles = buildTemplate.tiles
                                    param.callBack = self.OnClickCallBack
                                    param.uuid = uuid
                                    param.itemId = buildData.itemId
                                    param.bgScale = self:GetBgScale(param)
                                    param.iconScale = self:GetIconScale(param)
                                    param.buildId = buildId
                                    param.bUuid = uuid
                                end
                            elseif v == BuildBubbleType.HospitalFree then
                                local queue = DataCenter.QueueDataManager:GetQueueByType(NewQueueType.Hospital)
                                if data.level > 0 and buildState == BuildingStateType.Normal and queue ~= nil and queue:GetQueueState() == NewQueueState.Free and DataCenter.HospitalManager:IsHaveInjuredSolider() then
                                    param.model = UIAssets.BuildStateIcon
                                    param.iconName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.HospitalFree)
                                    param.bgName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.BgUnSelect)
                                    isContinue = false
                                    param.buildBubbleType = v
                                    param.pos = data.pointId
                                    param.tiles = buildTemplate.tiles
                                    param.callBack = self.OnClickCallBack
                                    param.uuid = queue.uuid
                                    param.itemId = queue.itemId
                                    param.bgScale = self:GetBgScale(param)
                                    param.iconScale = self:GetIconScale(param)
                                    param.buildId = buildId
                                end
                            elseif v == BuildBubbleType.HospitalEnd then
                                local queue = DataCenter.QueueDataManager:GetQueueByType(NewQueueType.Hospital)
                                if data.level > 0 and queue ~= nil and queue:GetQueueState() == NewQueueState.Finish then
                                    param.model = UIAssets.BuildStateIcon
                                    local template = DataCenter.HospitalManager:GetMaxSoldierInTreating()
                                    if template ~= nil then
                                        param.bgName = string.format(LoadPath.SoldierIcons,template.icon)
                                    end
                                    isContinue = false
                                    param.buildBubbleType = v
                                    param.pos = data.pointId
                                    param.tiles = buildTemplate.tiles
                                    param.callBack = self.OnClickCallBack
                                    param.uuid = queue.uuid
                                    param.itemId = queue.itemId
                                    param.bgScale = self:GetBgScale(param)
                                    param.iconScale = self:GetIconScale(param)
                                    param.buildId = buildId
                                end
                            elseif v == BuildBubbleType.HospitalAllianceHelp then
                                local queue = DataCenter.QueueDataManager:GetQueueByType(NewQueueType.Hospital)
                                if data.level > 0 and buildState == BuildingStateType.Normal and LuaEntry.Player:IsInAlliance() and queue ~= nil and queue:GetQueueState() == NewQueueState.Work and queue.isHelped == 0 then
                                    param.model = UIAssets.BuildStateIcon
                                    param.iconName =string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.HospitalAllianceHelp)
                                    param.bgName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.BgUnSelect)
                                    isContinue = false
                                    param.buildBubbleType = v
                                    param.pos = data.pointId
                                    param.tiles = buildTemplate.tiles
                                    param.callBack = self.OnClickCallBack
                                    param.uuid = queue.uuid
                                    param.itemId = queue.itemId
                                    param.bgScale = self:GetBgScale(param)
                                    param.iconScale = self:GetIconScale(param)
                                    param.buildId = buildId
                                end
                            end
                            
                        end
                    end
                    if not isContinue then
                        return param
                    end
                end
            elseif buildState ~= BuildingStateType.FoldUp and data.destroyStartTime > 0 then
                local buildId = data.itemId
                local buildTemplate = DataCenter.BuildTemplateManager:GetBuildingDesTemplate(buildId)
                local list = self:GetBuildBubbleTypeListByBuildType(data.itemId,buildTemplate,data.level)
                if list ~= nil and buildTemplate ~= nil then
                    local isContinue = true
                    local param = {}
                    param.modelHeight = CS.SceneManager.World:GetBuildingHeight(data.pointId)
                    for k,v in ipairs(list) do
                        if isContinue then
                            if v == BuildBubbleType.BuildFixFinishEnd then
                                local now = UITimeManager:GetInstance():GetServerTime()
                                if data.destroyEndTime>0 and data.destroyEndTime <= now and data.state ~= BuildingStateType.FoldUp then
                                    param.model = UIAssets.BuildStateIcon
                                    param.iconName = string.format(LoadPath.UIBuildBubble, BuildBubbleIconName.BuildFixFinishEnd)
                                    param.bgName = string.format(LoadPath.UIBuildBubble, BuildBubbleIconName.BgSelect)
                                    isContinue = false
                                    param.buildBubbleType = v
                                    param.pos = data.pointId
                                    param.tiles = buildTemplate.tiles
                                    param.callBack = self.OnClickCallBack
                                    param.uuid = data.uuid
                                    param.bgScale = self:GetBgScale(param)
                                    param.iconScale = self:GetIconScale(param)
                                    param.buildId = buildTemplate.id
                                end
                            elseif v == BuildBubbleType.FixBuildingAllianceHelp then
                                local now = UITimeManager:GetInstance():GetServerTime()
                                if LuaEntry.Player:IsInAlliance() and data.destroyEndTime>now and (data.isHelped == AllianceHelpState.No or data.isHelped == AllianceHelpState.UpgradeHelped) and data.level > 0 then
                                    param.iconName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.UpgradeAllianceHelp)
                                    param.bgName = string.format(LoadPath.UIBuildBubble,BuildBubbleIconName.BgUnSelect)
                                    param.model = UIAssets.BuildStateIcon
                                    isContinue = false
                                    param.buildBubbleType = v
                                    param.pos = data.pointId
                                    param.tiles = buildTemplate.tiles
                                    param.callBack = self.OnClickCallBack
                                    param.uuid = uuid
                                    param.bgScale = self:GetBgScale(param)
                                    param.iconScale = self:GetIconScale(param)
                                    param.buildId = buildId
                                end
                            end
                        end
                    end
                    if not isContinue then
                        return param
                    end
                end
            end
        end
    end
    return nil
end

local function GetBuildBubbleTypeListByBuildType(self,buildType,template,level)
    local list = {}
    -- 等级相关的不能缓存
    if buildType == BuildingTypes.APS_BUILD_WORMHOLE_SUB or BuildingUtils.IsInEdenSubwayGroup(buildType)==true then
        table.insert(list, BuildBubbleType.WormHoleSubZero)
        table.insert(list, BuildBubbleType.WormHoleSub)
    elseif buildType == BuildingTypes.WORM_HOLE_CROSS then
        table.insert(list, BuildBubbleType.CrossWormHoleSub)
        local crossBuildData = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.WORM_HOLE_CROSS)
        if crossBuildData~=nil then
            local worldId = crossBuildData.worldId
            if worldId~=nil and worldId>0 then
                table.insert(list,BuildBubbleType.HospitalFree)
                table.insert(list,BuildBubbleType.HospitalAllianceHelp)
                table.insert(list,BuildBubbleType.HospitalEnd)
            end
        end

    else
        table.insert(list,BuildBubbleType.UpgradeAllianceHelp)
        table.insert(list,BuildBubbleType.HeroFreeBuildAddTime)
    end
    table.insert(list, BuildBubbleType.Assistance)
    table.insert(list,BuildBubbleType.BuildFixFinishEnd)
    table.insert(list,BuildBubbleType.FixBuildingAllianceHelp)
    table.sort(list,self.CompareBuildType)--id跟引导绑定，不能改了，所以加了个新枚举

    self.buildTypeBubbleType[buildType] = list
    return list
end

local function CompareBuildType(buildBubbleType1,buildBubbleType2)
    return BuildBubbleTypeOrder[buildBubbleType1] < BuildBubbleTypeOrder[buildBubbleType2]
end

local function CheckShowBubble(self,bUuid)
    local param = self:GetBuildNeedShowBuildBubble(bUuid)
    if param == nil then
        self:DeleteOneBuildBubble(bUuid)
    else
        self:ShowOneBuildBubble(bUuid,param)
    end
end

local function DeleteOneBuildBubble(self,bUuid)
    if self.loadingBuildBubble[bUuid] ~= nil then
        self.loadingBuildBubble[bUuid]:Destroy()
        self.loadingBuildBubble[bUuid] = nil
    end
    if self.allBuildBubble[bUuid] ~= nil then
        self.allBuildBubble[bUuid]:OnDestroy()
        self.allBuildBubble[bUuid].request:Destroy()
        self.allBuildBubble[bUuid] = nil
    end
end

local function GetBgScale(self,param)
    if param.buildBubbleType == BuildBubbleType.BowSoldierEnd or
            param.buildBubbleType == BuildBubbleType.HospitalEnd or
            param.buildBubbleType == BuildBubbleType.CarSoldierEnd or
            param.buildBubbleType == BuildBubbleType.FootSoldierEnd or
            param.buildBubbleType == BuildBubbleType.TrapEnd or
            param.buildBubbleType == BuildBubbleType.CarSoldierUnlock or
            param.buildBubbleType == BuildBubbleType.FootSoldierUnlock or
            param.buildBubbleType == BuildBubbleType.BowSoldierUnlock or
            param.buildBubbleType == BuildBubbleType.TrapUnlock then
        return TrainScale
    end
    if param.tiles == BuildTilesSize.One then
        return TileBgScale1
    else
        return TileBgScale2
    end
end

local function GetIconScale(self,param)
    if param.buildBubbleType == BuildBubbleType.Assistance then
        return AssistanceIconScale
    elseif param.buildBubbleType == BuildBubbleType.HeroFreeBuildAddTime then
        return HeroFreeScienceAndBuild
    end
    return ResetScale
end

local function ShowOneBuildBubble(self,bUuid,param)
    if self.loadingBuildBubble[bUuid] ~= nil then
        self.loadingBuildBubble[bUuid]:Destroy()
        self.loadingBuildBubble[bUuid]= nil
    end
    if self.allBuildBubble[bUuid] ~= nil and param.model == self.allBuildBubble[bUuid].param.model then
        self.allBuildBubble[bUuid]:ReInit(param)
    else
        if self.allBuildBubble[bUuid] ~= nil then
            self:DeleteOneBuildBubble(bUuid)
        end
        local request = ResourceManager:InstantiateAsync(param.model)
        self.loadingBuildBubble[bUuid] = request
        request:completed('+', function()
        self.loadingBuildBubble[bUuid] = nil
        if request.isError then
        return
        end
        request.gameObject:SetActive(true)
        request.gameObject.transform:SetParent(CS.SceneManager.World.BuildBubbleNode)
        request.gameObject.transform:Set_localScale(0, ResetScale.y, ResetScale.z)
        request.gameObject.name = "BuildBubble"..bUuid
        local buildBubbleTip = nil
        buildBubbleTip = BuildBubbleTip.New()
    buildBubbleTip:OnCreate(request)
    self.allBuildBubble[bUuid] = buildBubbleTip
        self.allBuildBubble[bUuid]:ReInit(param)
        end)
        end
    
end

local function BuildInViewSignal(self, data)
    local uuid = tonumber(data)
    DataCenter.WorldBuildBubbleManager:CheckShowBubble(uuid)

end

local function BuildOutViewSignal(self, data)
    DataCenter.WorldBuildBubbleManager:DeleteOneBuildBubble(tonumber(data))
end

local function OnEnterPveLevel()
    DataCenter.WorldBuildBubbleManager:ClearAll()
end

local function OnExitPveLevel()

end

local function ChangeCameraLodSignal(lod)
    DataCenter.WorldBuildBubbleManager:UpdateLod(lod)
end

local function UpdateLod(self, lod)
    self.lodCache = lod
    if SceneUtils.GetIsInWorld() then
        self:RefreshBubbleNode()
    end
end


local function RefreshBubbleNode(self)
    local world = CS.SceneManager.World
    if world ~= nil then
        local node = world.BuildBubbleNode
        if node ~= nil then
            local active = self.lodCache <= 1
            node.gameObject:SetActive(active)
            if active then
                for _, bubble in pairs(self.allBuildBubble) do
                    bubble:Show()
                end
            end
        end
    end
end

local function OnClickCallBack(param)
    local guideParam = {}
    guideParam.buildBubbleType = param.buildBubbleType
    if param.buildBubbleType == BuildBubbleType.FixBuildingAllianceHelp then
        SFSNetwork.SendMessage(MsgDefines.AllianceCallHelp,param.uuid,AllianceHelpType.FIX_BUILDING,NewQueueType.Default,"")
    elseif param.buildBubbleType == BuildBubbleType.BuildFixFinishEnd then
        DataCenter.BuildManager:CheckSendFixBuildFinish(param.uuid)
    elseif param.buildBubbleType == BuildBubbleType.Assistance then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationAssistance,NormalBlurPanelAnim, param.uuid, LuaEntry.Player.uid, param.pos, AssistanceType.Build)
    elseif param.buildBubbleType == BuildBubbleType.WormHoleSub or param.buildBubbleType == BuildBubbleType.CrossWormHoleSub then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UISubWay)
    elseif param.buildBubbleType == BuildBubbleType.WormHoleSubZero then
        --local info = CS.SceneManager.World:GetPointInfo(param.pos)
        MarchUtil.OnClickStartMarch(MarchTargetType.BUILD_WORM_HOLE, param.pos, param.uuid)
    elseif param.buildBubbleType == BuildBubbleType.UpgradeAllianceHelp then
        SFSNetwork.SendMessage(MsgDefines.AllianceCallHelp,param.uuid,AllianceHelpType.Building,NewQueueType.Default,"")
    elseif param.buildBubbleType == BuildBubbleType.HeroFreeBuildAddTime then
        SFSNetwork.SendMessage(MsgDefines.BuildCcdMNew, { bUUID = param.uuid,itemIDs = "",isFixRuins = false})
        local heroData = DataCenter.HeroDataManager:GetFreeAddTimeHero(EffectDefine.BUILD_TIME_REDUCE)
        local freeTime =  Mathf.Ceil(BuildingUtils.GetDroneFreeTimeForBuild(param.buildId)/60)
        local time = freeTime..Localization:GetString("100165")
        if heroData then
            local heroConfig = LocalController:instance():getLine(HeroUtils.GetHeroXmlName(), heroData.heroId)
            local name = Localization:GetString(heroConfig["name"])
            local str = Localization:GetString("110201",name,time,Localization:GetString("310148"))
            TimerManager:GetInstance():DelayInvoke(function()
                UIUtil.ShowTips(str,nil,nil,heroData)
            end, 1)
        else
            local name = Localization:GetString(GetTableData(TableName.Robot,param.robotId,"name"))
            local str = Localization:GetString("110201",name,time,Localization:GetString("310148"))
            TimerManager:GetInstance():DelayInvoke(function()
                UIUtil.ShowTips(str,nil,nil)
            end, 1)
        end
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Speed_Button2)
    elseif param.buildBubbleType == BuildBubbleType.HospitalFree then
        --打开医院界面
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHospital)
    elseif param.buildBubbleType == BuildBubbleType.HospitalEnd then
        --收治疗兵
        DataCenter.HospitalManager:CheckSendFinish()
    elseif param.buildBubbleType == BuildBubbleType.HospitalAllianceHelp then
        --if not DataCenter.BuildBubbleManager:CheckIfHasAllianceBuild(true) then
        --	return
        --end
        SFSNetwork.SendMessage(MsgDefines.AllianceCallHelp,param.uuid,AllianceHelpType.Queue,NewQueueType.Hospital,param.itemId)
    end
end

function WorldBuildBubbleManager:AllianceBuildHelpNewSignal(data)
    self:CheckShowBubble(tonumber(data))
end

function WorldBuildBubbleManager:WorldBuildQueueHeroFreeTimeSignal(data)
    self:CheckShowBubble(tonumber(data))
end

function WorldBuildBubbleManager:BuildUpgradeStartSignal(bUuid)
    self:CheckShowBubble(bUuid)
end

function WorldBuildBubbleManager:HospitalFinishSignal()
    DataCenter.WorldBuildBubbleManager:RefreshBubbleByQueueType(NewQueueType.Hospital)
end

local function QueueTimeEndSignal(data)
    DataCenter.WorldBuildBubbleManager:RefreshBubbleByQueueType(data)
end

function WorldBuildBubbleManager:OnHospitalUpdateSignal()
    DataCenter.WorldBuildBubbleManager:RefreshBubbleByQueueType(NewQueueType.Hospital)
end

function WorldBuildBubbleManager:RefreshBubbleByQueueType(queueType)
    if LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        return
    end
    if queueType == NewQueueType.Hospital then
        local list = DataCenter.BuildManager:GetAllBuildingByItemIdWithoutPickUp(BuildingTypes.WORM_HOLE_CROSS)
        if list ~= nil then
            for k, v in pairs(list) do
                DataCenter.WorldBuildBubbleManager:CheckShowBubble(v.uuid)
            end
        end
    end
end

function WorldBuildBubbleManager:HospitalStartSignal(data)
    DataCenter.WorldBuildBubbleManager:RefreshBubbleByQueueType(NewQueueType.Hospital)
end

function WorldBuildBubbleManager:OnEnterWorldSignal()
    self:RefreshBubbleNode()
end

WorldBuildBubbleManager.__init = __init
WorldBuildBubbleManager.__delete = __delete
WorldBuildBubbleManager.AddListener = AddListener
WorldBuildBubbleManager.RemoveListener = RemoveListener

WorldBuildBubbleManager.Startup = Startup
WorldBuildBubbleManager.GetBgScale = GetBgScale
WorldBuildBubbleManager.GetIconScale = GetIconScale
WorldBuildBubbleManager.CompareBuildType = CompareBuildType
WorldBuildBubbleManager.GetBuildBubbleTypeListByBuildType = GetBuildBubbleTypeListByBuildType
WorldBuildBubbleManager.GetBuildNeedShowBuildBubble = GetBuildNeedShowBuildBubble
WorldBuildBubbleManager.RefreshAssistanceBubble = RefreshAssistanceBubble
WorldBuildBubbleManager.UpdateMarchSignal = UpdateMarchSignal
WorldBuildBubbleManager.BuildInViewSignal =BuildInViewSignal
WorldBuildBubbleManager.BuildOutViewSignal =BuildOutViewSignal
WorldBuildBubbleManager.ShowOneBuildBubble = ShowOneBuildBubble
WorldBuildBubbleManager.DeleteOneBuildBubble = DeleteOneBuildBubble
WorldBuildBubbleManager.CheckShowBubble = CheckShowBubble
WorldBuildBubbleManager.OnEnterPveLevel =OnEnterPveLevel
WorldBuildBubbleManager.OnExitPveLevel =OnExitPveLevel
WorldBuildBubbleManager.ClearAll = ClearAll
WorldBuildBubbleManager.UpdateMarchItemSignal= UpdateMarchItemSignal
WorldBuildBubbleManager.ChangeCameraLodSignal= ChangeCameraLodSignal
WorldBuildBubbleManager.UpdateLod = UpdateLod
WorldBuildBubbleManager.RefreshBubbleNode = RefreshBubbleNode
WorldBuildBubbleManager.OnClickCallBack= OnClickCallBack
WorldBuildBubbleManager.QueueTimeEndSignal = QueueTimeEndSignal
return WorldBuildBubbleManager