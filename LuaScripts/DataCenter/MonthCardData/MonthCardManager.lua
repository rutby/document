---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mac.
--- DateTime: 6/22/21 6:17 PM
---
require "DataCenter.MonthCardData.MonthCardInfo"

---@class MonthCardManager 月卡管理器
MonthCardManager = {}
local M = MonthCardManager

---@type table<string, MonthCardInfo>
local cardDict = {}

function M.init(message)
    if message == nil then
        return
    end

    -- 这里每次 init 都应该清理一下数据 避免玩家切换账号时数据出问题 
    cardDict = {}

    --月卡数据拓展后可能有多个，目前只有1张月卡
    local monthLyCards = message["monthLyCards"]
    if monthLyCards then
        for _, v in ipairs(monthLyCards) do
            if cardDict[v.itemId] == nil then
                local card = require("DataCenter.MonthCardData.MonthCardInfo").New()
                card:update(v)
                cardDict[card:getID()] = card
            end
        end
    end
end

function M.update(data)
    if data == nil then
        return nil
    end

    local id = data.itemId
    ---@type MonthCardInfo
    local card = M.get(id)
    if card then
        card:update(data)
    else
        card = require("DataCenter.MonthCardData.MonthCardInfo").New()
        card:update(data)
        cardDict[id] = card
    end

    return card
end

---根据id查找月卡数据
---@return MonthCardInfo
function M.get(id)
    if string.IsNullOrEmpty(id) then
        return nil
    end

    return cardDict[id]
end

---@return MonthCardInfo
function M.getDefault()
    for _, v in pairs(cardDict) do
        return v
    end
end

---购买月卡
function M.buy(id)
    if string.IsNullOrEmpty(id) then
        return
    end

    local giftPack = GiftPackManager.get(id)
    if giftPack == nil then
        return
    end

	local Player = LuaEntry.Player
    PayManager.payGiftPack(giftPack, function(payResult, payResultError, payResultData)
        if payResult == PayResult.Success then
            -- 处理金额
            local oldPayTotal = Player.payTotal
            local newPayTotal = payResultData.payTotal
            local isFirstPay = oldPayTotal <= 0 and newPayTotal > 0
            local gold = payResultData.gold
            Player.gold = gold;
            Player.payTotal = newPayTotal

            -- 处理礼包奖励
            if payResultData.reward then
                CS.RewardController.Instance:HandleRewardInfos(payResultData._raw:GetSFSArray("reward"))
            end

            -- -- 更新礼包
            -- if payResultData.exchange then
            --     GiftPackManager.update(payResultData.exchange)
            -- end

            -- 刷新下资源显示
            Event:notify_all(CS.EventId.PlayerInfoUpdated)
            GiftPackManager.requestLatest()

        elseif payResult == PayResult.Fail then

        end
    end)
end

---领取月卡奖励
function M.receiveReward(id)
    require("Game.MonthCard.Protocol.MonthCardRewardProtocol").request(id)
end

function M.onReceiveReward(id, message)
    --print("==================================== MonthCardManager.onReceiveReward")
    --
    --if not string.IsNullOrEmpty(message.errorCode) then
    --    return
    --end
    --
    ---- 处理金额
    --if message.payTotal then
    --    local oldPayTotal = GameEntry.Data.Player.PayTotal
    --    local newPayTotal = message.payTotal
    --    local isFirstPay = oldPayTotal <= 0 and newPayTotal > 0
    --    local gold = message.gold
    --    GameEntry.Data.Player.Gold = gold;
    --    GameEntry.Data.Player.PayTotal = newPayTotal
    --end
    --
    ---- 处理月卡奖励
    --local rewardList = CS.RewardController.Instance:HandleRewardInfos(message._raw:GetSFSArray("reward"))
    --OpenGameUI("UIWelfareReward", "UIResourcePopUp", {
    --    --diamond = GameEntry.Data.Player.sm_addGoldCount,
    --    diamond = 0, -- 由于下面的rewards里面已经有了钻石 所以这个设置为0 （刘文需求）
    --    rewards = rewardList,
    --    titleID = "320004"
    --})
    --
    --local monthCard = M.get(id)
    --if monthCard then
    --    monthCard:received()
    --end
    --
    ---- 刷新下资源显示
    --Event:notify_all(CS.EventId.PlayerInfoUpdated)
    --Event:notify(MonthCardEvent.REFRESH)
    --Event:notify_all(CS.EventId.LFMonthCardRefresh)
end

---推送月卡数据
function M.onPush(message)
    local card = M.update(message)
    if card then
        -- todo
    end
    Event:notify(MonthCardEvent.REFRESH)
    Event:notify_all(CS.EventId.LFMonthCardRefresh)
end

function M.hasBoughtSomeCard()
    --MK: Temp
    --for _, v in pairs(cardDict) do
    --    if v:isBought() then
    --        return true
    --    end
    --end
    return false
end

--{{{ private function
function M._addListener()
end

function M._removeListener()
end
--}}}

--{{{ call from csharp
--- 是否购买过指定月卡
---@param giftID string
---@return boolean
function M.hasBoughtCard(_, giftID)
    --MK: Temp
    --local card = M.get(giftID)
    --if card == nil then
    --    return false
    --end
    --return card:isBought();
    return false
end

function M.canBuyCard(_, giftID)
    local card = M.get(giftID)
    if card == nil then
        return false
    end
    return not card:isBought()
end

function M.updateDataOnDayChange()
    for _, v in pairs(cardDict) do
        v:updateOnDayChange()
    end
end
--}}}

return M