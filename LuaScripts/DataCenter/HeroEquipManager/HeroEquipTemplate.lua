---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangjiabin.
--- DateTime: 2024/3/24 12:08 PM
---

local HeroEquipTemplate = BaseClass("HeroEquipTemplate")
local HeroEquipAttrTemplate = require "DataCenter.HeroEquipManager.HeroEquipAttrTemplate"

function HeroEquipTemplate:__init()
    self.id = 0
    self.unlockLevel = 0
    self.isCraft = false
    self.desc = 0
    self.time = 0
    self.name = ""
    self.quality = 0
    self.slot = 0
    self.icon = ""
    self.basicAttributes = {}
    self.additionAttributes = {}
    self.craftMaterials = {}
    self.resource = {}
    self.breakMaterial = {}
    self.canPromote = false
end

function HeroEquipTemplate:__delete()
    self.id = 0
    self.unlockLevel = 0
    self.isCraft = false
    self.desc = 0
    self.time = 0
    self.name = ""
    self.quality = 0
    self.slot = 0
    self.icon = ""
    self.basicAttributes = {}
    self.additionAttributes = {}
    self.craftMaterials = {}
    self.resource = {}
    self.breakMaterial = {}
    self.canPromote = false
end

function HeroEquipTemplate:InitData(row)
    self.id = toInt(row:getValue("id"))
    self.unlockLevel = toInt(row:getValue("unlock_level"))
    self.isCraft = row:getValue("is_craft") == 1
    self.desc = row:getValue("desc")
    self.time = row:getValue("time")
    self.name = row:getValue("name")
    self.quality = toInt(row:getValue("quality"))
    self.slot = toInt(row:getValue("slot"))
    self.icon = row:getValue("icon")
    
    self.basicAttributes = {}
    local basicAttributes = row:getValue("basic_attributes")
    if not string.IsNullOrEmpty(basicAttributes) then
        local vec = string.split(basicAttributes, ",")
        for _, v in ipairs(vec) do
            local info = HeroEquipAttrTemplate.New()
            info:InitData(v)
            table.insert(self.basicAttributes, info)
        end
    end

    self.basicAttributesPromote = {}
    local basicAttributesPromote = row:getValue("basic_attributes_promote")
    if not string.IsNullOrEmpty(basicAttributesPromote) then
        self.canPromote = true
        local vec = string.split(basicAttributesPromote, ",")
        for _, v in ipairs(vec) do
            local info = HeroEquipAttrTemplate.New()
            info:InitData(v)
            table.insert(self.basicAttributesPromote, info)
        end
    end

    self.additionAttributes = {}
    local additionAttributes = row:getValue("addition_attributes")
    if not string.IsNullOrEmpty(additionAttributes) then
        local vec = string.split(additionAttributes, "|")
        for _, v in ipairs(vec) do
            local effectsVec = string.split(v, ";")
            if #effectsVec == 2 then
                local info = HeroEquipAttrTemplate.New()
                info:InitData(effectsVec[2])
                self.additionAttributes[toInt(effectsVec[1])] = info
            end
        end
    end

    self.additionAttributesPromote = {}
    local additionAttributesPromote = row:getValue("addition_attributes__promote")
    if not string.IsNullOrEmpty(additionAttributesPromote) then
        local vec = string.split(additionAttributesPromote, "|")
        for _, v in ipairs(vec) do
            local effectsVec = string.split(v, ";")
            if #effectsVec == 2 then
                local info = HeroEquipAttrTemplate.New()
                info:InitData(effectsVec[2])
                self.additionAttributesPromote[toInt(effectsVec[1])] = info
            end
        end
    end

    self.craftMaterials = {}
    local craftMaterials = row:getValue("craft_materials")
    if not string.IsNullOrEmpty(craftMaterials) then
        local vec = string.split(craftMaterials, "|")
        for _, v in ipairs(vec) do
            local materialVec = string.split(v, ";")
            if #materialVec == 2 then
                self.craftMaterials[toInt(materialVec[1])] = tonumber(materialVec[2])
            end
        end
    end

    self.resource = {}
    local resource = row:getValue("resource")
    if not string.IsNullOrEmpty(resource) then
        local vec = string.split(resource, "|")
        for _, v in ipairs(vec) do
            local resourceVec = string.split(v, ";")
            if #resourceVec == 2 then
                self.resource[toInt(resourceVec[1])] = tonumber(resourceVec[2])
            end
        end
    end

    self.breakMaterial = {}
    local breakMaterial = row:getValue("break_material")
    if not string.IsNullOrEmpty(breakMaterial) then
        local vec = string.split(breakMaterial, "|")
        for _, v in ipairs(vec) do
            local materialVec = string.split(v, ";")
            if #materialVec == 2 then
                self.breakMaterial[toInt(materialVec[1])] = tonumber(materialVec[2])
            end
        end
    end
end

function HeroEquipTemplate:IsMaxLevel(lv)
    local isMaxLevel = DataCenter.HeroEquipUpgradeTemplateManager:IsMaxLevelBySlotAndQuality(self.slot, self.quality, lv);
    return isMaxLevel
end

return HeroEquipTemplate