---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2024/3/27 9:15
---

local HeroEquipMaterialConfigManager = BaseClass("HeroEquipMaterialConfigManager")
local HeroEquipMaterialConfig = require "DataCenter.HeroEquipManager.HeroEquipMaterialConfig"

function HeroEquipMaterialConfigManager:__init()
    self.allTemplate = {}
    self.isInit = false
end

function HeroEquipMaterialConfigManager:__delete()
    self.allTemplate = {}
    self.isInit = false
end

function HeroEquipMaterialConfigManager:InitAllTemplate()
    if self.isInit then
        return
    end
    self.isInit = true
    self.allTemplate = {}
    LocalController:instance():visitTable(TableName.EquipMaterial, function(_, lineData)
        local item = HeroEquipMaterialConfig.New()
        item:InitData(lineData)
        self.allTemplate[tonumber(item.id)] = item
    end)
end

function HeroEquipMaterialConfigManager:GetTemplate(id)
    if not self.isInit then
        self:InitAllTemplate()
    end
    return self.allTemplate[tonumber(id)]
end

function HeroEquipMaterialConfigManager:GetAllTemplate()
    if not self.isInit then
        self:InitAllTemplate()
    end
    return self.allTemplate or {}
end

function HeroEquipMaterialConfigManager:GetAllTemplateItems()
    local result = {}

    for k, v in pairs(self:GetAllTemplate()) do
        local item = DataCenter.ItemData:GetItemById(k)
        if item ~= nil then
            local param = {}
            param.rewardType = RewardType.GOODS
            param.itemId = tonumber(item.itemId)
            param.count = item.count
            table.insert(result, param)
        end
    end
    table.sort(result, function (a, b)
        return a.itemId > b.itemId
    end)
    
    return result
end

function HeroEquipMaterialConfigManager:GetComposeTarget(itemId)
    local template = self:GetTemplate(itemId)
    if template ~= nil and template.combineNum ~= 0 then
        for k, v in pairs(self:GetAllTemplate()) do
            if v.quality == template.quality + 1 then
                return k
            end
        end
    end
end

function HeroEquipMaterialConfigManager:GetDecomposeTarget(itemId)
    local template = self:GetTemplate(itemId)
    if template ~= nil and template.breakNum ~= 0 then
        for k, v in pairs(self:GetAllTemplate()) do
            if v.quality == template.quality - 1 then
                return k
            end
        end
    end
end

return HeroEquipMaterialConfigManager