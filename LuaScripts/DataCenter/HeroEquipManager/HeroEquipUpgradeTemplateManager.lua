---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2024/3/28 20:21
---

local HeroEquipUpgradeTemplateManager = BaseClass("HeroEquipUpgradeTemplateManager")
local HeroEquipUpgradeTemplate = require "DataCenter.HeroEquipManager.HeroEquipUpgradeTemplate"

function HeroEquipUpgradeTemplateManager:__init()
    self.allTemplate = {}
    self.isInit = false
end

function HeroEquipUpgradeTemplateManager:__delete()
    self.allTemplate = {}
    self.isInit = false
end

function HeroEquipUpgradeTemplateManager:InitAllTemplate()
    if self.isInit then
        return
    end
    self.isInit = true
    self.allTemplate = {}
    LocalController:instance():visitTable(TableName.EquipUpgrade, function(_, lineData)
        local template = HeroEquipUpgradeTemplate.New()
        template:InitData(lineData)
        self.allTemplate[tonumber(template.id)] = template
    end)
end

function HeroEquipUpgradeTemplateManager:GetAllTemplate()
    if not self.isInit then
        self:InitAllTemplate()
    end
    return self.allTemplate or {}
end

function HeroEquipUpgradeTemplateManager:GetTemplateBySlotAndQuality(slot, quality)
    if not self.isInit then
        self:InitAllTemplate()
    end
    for k, v in pairs(self.allTemplate) do
        if v.slot == slot and v.quality == quality and v.armyType == 0 then
            return v
        end
    end
end

function HeroEquipUpgradeTemplateManager:IsMaxLevelBySlotAndQuality(slot, quality, level)
    local template = self:GetTemplateBySlotAndQuality(slot, quality)
    if template ~= nil then
        if template.slot == slot and template.quality == quality then
            return level >= template.highestLevel
        end
    end
	return true
end

function HeroEquipUpgradeTemplateManager:GetCostRes(slot, quality, level)
    local result = {}
    local template = self:GetTemplateBySlotAndQuality(slot, quality, level)
    if template ~= nil then
        local res = template.resourceUpgradeCost[level + 1] or {}
        table.insert(result, res)
        
        local item = {}
        item.itemId = 230104
        item.num = template.stoneUpgradeCost[level + 1] or 0
        table.insert(result, item)
    end
    return result
end

function HeroEquipUpgradeTemplateManager:IsEnoughRes(slot, quality, level)
    local enough = true
    local lack = {}
    for k, param in pairs(self:GetCostRes(slot, quality, level)) do
        local resType = param['resType']
        local itemId = param['itemId']
        if resType ~= nil then
            local resNum = LuaEntry.Resource:GetCntByResType(resType)
            if resNum < param.num then
                lack.type = ResLackType.Res
                lack.id = resType
                lack.targetNum = param.num
                enough = false
                break
            end
        elseif itemId ~= nil then
            local itemNum = DataCenter.ItemData:GetItemCount(itemId)
            if itemNum < param.num then
                lack.type = ResLackType.Item
                lack.id = itemId
                lack.targetNum = param.num
                enough = false
                break
            end
        end
    end

    return enough, lack
end

return HeroEquipUpgradeTemplateManager