---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/12/5 10:37
---

local DecorationDataManager = BaseClass("DecorationDataManager")
local DecorationData = require "DataCenter.DecorationDataManager.DecorationData"
local Localization = CS.GameEntry.Localization
local Setting = CS.GameEntry.Setting

local function __init(self)
    self.allDecoration = {}
    self:AddListener()
end

local function __delete(self)
    self.allDecoration = {}
    self:RemoveListener()
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.ChangeSex, self.DoWhenCitySkinChange)
end
local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.ChangeSex, self.DoWhenCitySkinChange)
end

local function DoWhenCitySkinChange(self)
    local mainBuild = DataCenter.BuildManager:GetFunbuildByItemID(BuildingTypes.FUN_BUILD_MAIN)
    if mainBuild then
        EventManager:GetInstance():Broadcast(EventId.UserCitySkinUpdate, mainBuild.uuid)
    end
end

local function IsSystemOpen(self)
    local configOpenState = LuaEntry.DataConfig:CheckSwitch("decoration_switch")
    if not configOpenState then
        return false
    end
    local openLv = LuaEntry.DataConfig:TryGetNum("decoration_para", "k1")
    local mainLv = DataCenter.BuildManager.MainLv
    return mainLv >= openLv
end

local function InitUserSkins(self, message)
    if message["userSkins"] then
        for _, v in ipairs(message["userSkins"]) do
            self:UpdateOnUserSkin(v)
        end
    end
end

local function UpdateOnUserSkin(self, data)
    local skinId = data["skinId"]
    if self.allDecoration[skinId] == nil then
        self.allDecoration[skinId] = DecorationData.New()
    end
    self.allDecoration[skinId]:ParseData(data)
end

local function GetSkinDataById(self, skinId)
    return self.allDecoration[skinId]
end

local function CovertSkin(self, skinId, index)
    SFSNetwork.SendMessage(MsgDefines.CoverSkin, skinId, index)
end

local function CovertSkinHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTips(Localization:GetString(message["errorCode"]))
        end
        return
    end
    UIUtil.ShowTipsId(120120)
    if message["skin"] then
        self:UpdateOnUserSkin(message["skin"])
        EventManager:GetInstance():Broadcast(EventId.UserSkinUpdate, toInt(message["skin"]["type"]))
    end
end

local function PushSkinUpdateHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTips(Localization:GetString(message["errorCode"]))
        end
        return
    end
    if message["skins"] then
        for _, v in ipairs(message["skins"]) do
            self:UpdateOnUserSkin(v)
            if v.type == DecorationType.DecorationType_Head_Frame then
                EventManager:GetInstance():Broadcast(EventId.UpdatePlayerHeadIcon)
            elseif v.type == DecorationType.DecorationType_Main_City then
                self:DoWhenCitySkinChange()
            end
        end
        EventManager:GetInstance():Broadcast(EventId.UserSkinUpdate)
    end
    if message["lastUpdateTime"] then
        LuaEntry.Player:SetLastUpdateTime(message["lastUpdateTime"])
    end
end

local function WearSkin(self, skinId, formationUuid)
    SFSNetwork.SendMessage(MsgDefines.WearSkin, {skinId = skinId, formationUuid = formationUuid})
end

local function WearSkinHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTips(Localization:GetString(message["errorCode"]))
        end
        return
    end
    
    local formationUuid = message["formationUuid"]
    if message["oldSkinId"] then
        local skinData = self:GetSkinDataById(toInt(message["oldSkinId"]))
        if skinData then
            skinData:SetIsWear(false, formationUuid)
        end
    end

    if message["skinId"] then
        local skinData = self:GetSkinDataById(toInt(message["skinId"]))
        if skinData then
            skinData:SetIsWear(true, formationUuid)
            EventManager:GetInstance():Broadcast(EventId.UserSkinUpdate, skinData.type)
            if skinData.type == DecorationType.DecorationType_Main_City then
                self:DoWhenCitySkinChange()
            end
            if skinData.type == DecorationType.DecorationType_Head_Frame then
                EventManager:GetInstance():Broadcast(EventId.UpdatePlayerHeadIcon)
            end
        end
    end
    if message["lastUpdateTime"] then
        LuaEntry.Player:SetLastUpdateTime(message["lastUpdateTime"])
    end
end

local function TakeOffSkin(self, skinId, formationUuid)
    SFSNetwork.SendMessage(MsgDefines.TakeOffSkin, {skinId = skinId, formationUuid = formationUuid})
end

local function TakeOffSkinHandler(self, message)
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTips(Localization:GetString(message["errorCode"]))
        end
        return
    end
    local formationUuid = message["formationUuid"]
    local skinData = self:GetSkinDataById(toInt(message["skinId"]))
    if skinData then
        skinData:SetIsWear(false, formationUuid)
        EventManager:GetInstance():Broadcast(EventId.UserSkinUpdate, skinData.type)
        if skinData.type == DecorationType.DecorationType_Main_City then
            self:DoWhenCitySkinChange()
        end
        if skinData.type == DecorationType.DecorationType_Head_Frame then
            EventManager:GetInstance():Broadcast(EventId.UpdatePlayerHeadIcon)
        end
    end
    if message["lastUpdateTime"] then
        LuaEntry.Player:SetLastUpdateTime(message["lastUpdateTime"])
    end
end

local function GetCurrentSkinByType(self, type, formationUuid)
    local allTemplate = DataCenter.DecorationTemplateManager:GetTypeDecorations(type)
    local defaultId = nil
    for _, v in pairs(allTemplate) do
        if v:IsDefault() then
            defaultId = v.id
        end
        local data = self:GetSkinDataById(v.id)
        if data and data:IsWear(formationUuid) then
            return v.id
        end
    end
    
    return defaultId
end

local function GetHeadFrame(self, headSkinId, headSkinET, oldFlagOpen)
    if not self:IsSystemOpen() then
        local headBgImg = nil

        if oldFlagOpen == true then
        	headBgImg = "Common_playerbg_golloes"
        end
        if headBgImg and headBgImg ~= "" then
        	return string.format(LoadPath.CommonNewPath,headBgImg)
        end
        return nil
    end
    if headSkinId == nil then
        return nil
    end
    local now = UITimeManager:GetInstance():GetServerTime()
    if headSkinET ~= 0 and headSkinET ~= nil and now >= headSkinET then
        return nil
    end
    local template = DataCenter.DecorationTemplateManager:GetTemplate(headSkinId)
    if template == nil or template:IsDefault() then
        return nil
    end
    return template.img
end

local function GetSelfHeadFrame(self)
    if self:IsSystemOpen() then
        for k, v in pairs(self.allDecoration) do
            if v ~= nil and v.type == DecorationType.DecorationType_Head_Frame and v:IsWear() then
                return self:GetHeadFrame(v.skinId, v.expireTime)
            end
        end
        return nil
    end
    local headBgImg = nil
    local golloesHeadBg = DataCenter.MonthCardNewManager:GetGolloesHeadBg()
    if golloesHeadBg and golloesHeadBg ~= "" then
    	headBgImg = golloesHeadBg
    end
    if headBgImg and headBgImg ~= "" then
    	return string.format(LoadPath.CommonNewPath,headBgImg)
    end
    return nil
end

local function GetCityBuildingDecoration(self)
    local skinId = self:GetCurrentSkinByType(DecorationType.DecorationType_Main_City)
    if skinId == nil then
        return nil
    end
    local template = DataCenter.DecorationTemplateManager:GetTemplate(skinId)
    if template == nil or template:IsDefault() then
        return nil
    end
    return template.model
end

local function SetNewItemFlag(self, itemId)
    if not self:IsSystemOpen() then
        return
    end
    Setting:SetPrivateInt("decoration_item_flag_"..LuaEntry.Player.uid..tostring(itemId), 1)
end

local function GetNewItemFlag(self, itemId)
    Setting:GetPrivateInt("decoration_item_flag_"..LuaEntry.Player.uid..tostring(itemId), 0)
end

local function IsNewDecorationItem(self, itemId)
    if not self:IsSystemOpen() then
        return false
    end
    local allItems = DataCenter.DecorationTemplateManager:GetDecorationItem()
    if allItems ~= nil and allItems[itemId] ~= nil then
        local flag = self:GetNewItemFlag(itemId)
        return flag == 1
    end
    return false
end

local function GetAllActiveDecoration(self)
    local result = {}
    for _, v in pairs(self.allDecoration) do
        if v ~= nil and v:IsInExpireTime() then
            table.insert(result, v.skinId)
        end
    end
    return result
end

local function GetDefaultSkinIdByType(self, type)
    local allTemplate = DataCenter.DecorationTemplateManager:GetTypeDecorations(type)
    local defaultId = -1
    for _, v in pairs(allTemplate) do
        if v:IsDefault() then
            defaultId = v.id
            return defaultId
        end
    end
    if defaultId < 0 then
        Logger.Log("未查找到默认ID")
    end
    return defaultId
end

function DecorationDataManager:GetWorldBuildingDecoration()
    local skinId = self:GetCurrentSkinByType(DecorationType.DecorationType_Main_City)
    if skinId == nil then
        return nil
    end
    local template = DataCenter.DecorationTemplateManager:GetTemplate(skinId)
    if template == nil or template:IsDefault() then
        return nil
    end
    return template.model_world
end

DecorationDataManager.__init = __init
DecorationDataManager.__delete = __delete
DecorationDataManager.IsSystemOpen = IsSystemOpen
DecorationDataManager.InitUserSkins = InitUserSkins
DecorationDataManager.UpdateOnUserSkin = UpdateOnUserSkin
DecorationDataManager.CovertSkin = CovertSkin
DecorationDataManager.CovertSkinHandler = CovertSkinHandler
DecorationDataManager.WearSkin = WearSkin
DecorationDataManager.WearSkinHandler = WearSkinHandler
DecorationDataManager.TakeOffSkin = TakeOffSkin
DecorationDataManager.TakeOffSkinHandler = TakeOffSkinHandler
DecorationDataManager.GetSkinDataById = GetSkinDataById
DecorationDataManager.GetCurrentSkinByType = GetCurrentSkinByType
DecorationDataManager.PushSkinUpdateHandler = PushSkinUpdateHandler
DecorationDataManager.GetHeadFrame = GetHeadFrame
DecorationDataManager.GetSelfHeadFrame = GetSelfHeadFrame
DecorationDataManager.GetCityBuildingDecoration = GetCityBuildingDecoration
DecorationDataManager.IsNewDecorationItem = IsNewDecorationItem
DecorationDataManager.GetNewItemFlag = GetNewItemFlag
DecorationDataManager.SetNewItemFlag = SetNewItemFlag
DecorationDataManager.GetAllActiveDecoration = GetAllActiveDecoration
DecorationDataManager.AddListener = AddListener
DecorationDataManager.RemoveListener = RemoveListener
DecorationDataManager.DoWhenCitySkinChange = DoWhenCitySkinChange
DecorationDataManager.GetDefaultSkinIdByType = GetDefaultSkinIdByType

return DecorationDataManager