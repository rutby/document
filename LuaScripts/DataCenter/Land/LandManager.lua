---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/1/8 19:23
---

local LandManager = BaseClass("LandManager")
local LandData = require "DataCenter.Land.LandData"
local Resource = CS.GameEntry.Resource
local Localization = CS.GameEntry.Localization

local ZoneFogEdge = 0
local ZoneFogOffsetX = 0.9 -- 坐标是右上角的中心点，所以再向右上偏移半格
local ZoneFogOffsetZ = 0.9 -- 坐标是右上角的中心点，所以再向右上偏移半格
local ZoneEffectY = -1.4
local BlockFogSize = 2
local RevealerKeyZone = 1e4
local RevealerKeyZone2 = 1e3
local RevealerKeyBlock = 1e0

local function __init(self)
    self.idDict = {} -- Dict<objType, List<id>>
    self.objDict = -- Dict<objType, Dict<id, object>>
    {
        [LandObjectType.Zone] = {},
        [LandObjectType.Block] = {},
        [LandObjectType.Reward] = {},
    }
    self.objPosCache = -- Dict<objType, Dict<id, Vector3>>
    {
        [LandObjectType.Zone] = {},
        [LandObjectType.Block] = {},
        [LandObjectType.Reward] = {},
    }
    self.objRotCache = -- Dict<objType, Dict<id, Quaternion>>
    {
        [LandObjectType.Zone] = {},
        [LandObjectType.Block] = {},
        [LandObjectType.Reward] = {},
    }
    
    self.idDict[LandObjectType.Zone] = {}
    LocalController:instance():visitTable(TableName.LandZone, function(id, lineData)
        self.idDict[LandObjectType.Zone][lineData.order] = id
    end)
    
    self.idDict[LandObjectType.Block] = {}
    LocalController:instance():visitTable(TableName.LandBlock, function(id, lineData)
        self.idDict[LandObjectType.Block][lineData.order] = id
    end)
    
    self.uniState = LandUniversalState.Uncreated
    self.data = LandData.New()
    self.revealedZoneDict = {} -- Dict<id, LandFogType>
    self.revealedBlockDict = {} -- Dict<id, LandFogType>
    self.justUnlockBlockId = 0
    self.unlockBlockSeq = nil
    self.justUnlockZoneId = 0
    self.unlockZoneSeq = nil
    self.isFunctionStart = false
    self.isFunctionEnd = false
    self.pveReward = {} -- PVE reward cache
    self.blockReward = {} -- Block reward cache
    self.isPlayingUnlock = false
    self.showBlockEffect = true
    
    self.revealDiffs = { 999, 999 }
    local revealConfigStr = LuaEntry.DataConfig:TryGetStr("ds_landlock", "k1")
    if not string.IsNullOrEmpty(revealConfigStr) then
        for i, str in ipairs(string.split(revealConfigStr, ";")) do
            self.revealDiffs[i] = tonumber(str)
        end
    end
    self.bigAreaUnlockDic = {}--小地块与大地块对应关系
    self.bigZoneArr = {}--大地块与小地块对应关系
    local k1 = LuaEntry.DataConfig:TryGetStr("land_big_zone", "k1")
    for i,str in ipairs(string.split(k1, "|")) do
        local arr = string.split(str,',')
        if #arr>0 then
            for a = 1,#arr do
                self.bigAreaUnlockDic[toInt(arr[a])] = i
                if self.bigZoneArr[i]==nil then
                    self.bigZoneArr[i] = {}
                end
                table.insert(self.bigZoneArr[i],toInt(arr[a]))
            end
        end
    end
    self.bigZoneUnlockConf = {}
    local k2 = LuaEntry.DataConfig:TryGetStr("land_big_zone", "k2")
    self.bigZoneUnlockConf = string.split(k2, "|")
    self:AddListeners()
end

local function __delete(self)
    self:DestroyAllObjects()
    
    self.idDict = {}
    self.objDict = {}
    
    self:RemoveListeners()
end

local function AddListeners(self)
    EventManager:GetInstance():AddListener(EventId.OnBeforeEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():AddListener(EventId.PveLevelBeforeEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():AddListener(EventId.PveLevelExit, self.OnPveLevelExit)
    EventManager:GetInstance():AddListener(EventId.FogLoadComplete, self.OnFogLoadComplete)
    EventManager:GetInstance():AddListener(EventId.MainLvUp, self.OnMainLvUp)
    EventManager:GetInstance():AddListener(EventId.BuildUpgradeFinish, self.OnBuildUpgradeFinish)
    EventManager:GetInstance():AddListener(EventId.ResourceUpdated,self.OnResUpdate)
    EventManager:GetInstance():AddListener(EventId.ChapterTask, self.OnTaskFinish)
    --EventManager:GetInstance():AddListener(EventId.MainTaskSuccess, self.OnTaskFinish)
    EventManager:GetInstance():AddListener(EventId.VitaDayNightChange, self.OnDayNightChange)
end

local function RemoveListeners(self)
    EventManager:GetInstance():RemoveListener(EventId.OnBeforeEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnEnterCity)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelBeforeEnter, self.OnPveLevelEnter)
    EventManager:GetInstance():RemoveListener(EventId.PveLevelExit, self.OnPveLevelExit)
    EventManager:GetInstance():RemoveListener(EventId.FogLoadComplete, self.OnFogLoadComplete)
    EventManager:GetInstance():RemoveListener(EventId.MainLvUp, self.OnMainLvUp)
    EventManager:GetInstance():RemoveListener(EventId.BuildUpgradeFinish, self.OnBuildUpgradeFinish)
    EventManager:GetInstance():RemoveListener(EventId.ResourceUpdated,self.OnResUpdate)
    EventManager:GetInstance():RemoveListener(EventId.ChapterTask, self.OnTaskFinish)
    --EventManager:GetInstance():RemoveListener(EventId.MainTaskSuccess, self.OnTaskFinish)
    EventManager:GetInstance():RemoveListener(EventId.VitaDayNightChange, self.OnDayNightChange)
end

local function GetData(self)
    return self.data
end

local function GetState(self, objType, id)
    if id == nil or id <= 0 then
        return LandState.None
    end
    if objType == LandObjectType.Zone then
        local zoneConfig = self:GetConfig(LandObjectType.Zone, id)
        if self.data.finishZone < zoneConfig.order - 1 then
            if self:CheckIsAreaUnlock(zoneConfig.order) then
                return LandState.Accessible
            else
                return LandState.Unexplored
            end
            
        elseif self.data.finishZone < zoneConfig.order then
            local firstBlockConfig = self:GetConfig(LandObjectType.Block, zoneConfig.block[1])
            local lastBlockConfig = self:GetConfig(LandObjectType.Block, zoneConfig.block[#zoneConfig.block])
            if self.data.finishBlock < firstBlockConfig.order - 1 then
                if self:CheckIsAreaUnlock(zoneConfig.order) then
                    return LandState.Accessible
                else
                    return LandState.Unexplored
                end
            elseif self.data.finishBlock < lastBlockConfig.order then
                if self:CheckIsAreaUnlock(zoneConfig.order) then
                    return LandState.Accessible
                else
                    return LandState.Unaccessible
                end
            else
                return LandState.Cleared
            end
        else
            return LandState.Unlocked
        end
    elseif objType == LandObjectType.Block then
        local blockConfig = self:GetConfig(LandObjectType.Block, id)
        local zoneState = self:GetState(LandObjectType.Zone, blockConfig.zone)
        if zoneState == LandState.Unexplored then
            return LandState.Unexplored
        elseif zoneState == LandState.Cleared or zoneState ==LandState.Unlocked then
            if self.data.finishBlock == blockConfig.order then
                return LandState.Unlocked
            else
                return LandState.Hide
            end
            
        else
            if self.data.finishBlock < blockConfig.order - 1 then
                return LandState.Unexplored
            elseif self.data.finishBlock < blockConfig.order then
                if blockConfig.type == LandBlockType.Pve then
                    if not self:CheckAllCondition(objType, id) then
                        return LandState.Unaccessible
                    end
                    if self.data.finishIndex < #blockConfig.type_para then
                        return LandState.Accessible
                    else
                        return LandState.Cleared
                    end
                else
                    if not self:CheckAllCondition(objType, id) then
                        return LandState.Unaccessible
                    end
                    return LandState.Accessible
                end
            elseif self.data.finishBlock == blockConfig.order then
                return LandState.Unlocked
            else
                return LandState.Finished
            end
        end
    elseif objType == LandObjectType.Reward then
        local rewardConfig = self:GetConfig(LandObjectType.Reward, id)
        local zoneState = self:GetState(LandObjectType.Zone, rewardConfig.lock)
        if zoneState == LandState.Unlocked then
            if self.data.rewardRecord[id] then
                return LandState.Unlocked
            else
                return LandState.Accessible
            end
        else
            return LandState.Unexplored
        end
    end
end

local function GetConfig(self, objType, id)
    local config = nil
    if objType == LandObjectType.Zone then
        config = LocalController:instance():getLine(TableName.LandZone, id)
    elseif objType == LandObjectType.Block then
        config = LocalController:instance():getLine(TableName.LandBlock, id)
    elseif objType == LandObjectType.Reward then
        config = LocalController:instance():getLine(TableName.LandReward, id)
    end
    if config == nil then
        Logger.LogError("Land error: Cannot find config, objType = " .. objType .. ", id = " .. id)
    end
    -- return config
    
    -- for debug
    local tbl = {}
    for k, v in pairs(config._indexData) do
        local index = v[1]
        tbl[k] = config._lineData[index]
    end
    return tbl
end

local function GetConfigByOrder(self, objType, order)
    local id = self.idDict[objType][order]
    return self:GetConfig(objType, id)
end

local function GetPrior(self, objType, id)
    local config = self:GetConfig(objType, id)
    return self.idDict[objType][config.order - 1]
end

local function GetNext(self, objType, id)
    local config = self:GetConfig(objType, id)
    return self.idDict[objType][config.order + 1]
end

local function GetObject(self, objType, id)
    if self.uniState == LandUniversalState.Uncreated then
        return nil
    end
    if objType == LandObjectType.Reward then
        local config = self:GetConfig(objType, id)
        local zoneObj = self:GetObject(LandObjectType.Zone, config.lock)
        if zoneObj then
            local obj = zoneObj.rewardObjs[id]
            return obj
        else
            return nil
        end
    else
        local obj = self.objDict[objType][id]
        return obj
    end
end

local function GetPriorObject(self, objType)
    local order = self:GetCurrentOrder(objType) - 1
    local id = self.idDict[objType][order]
    return self:GetObject(objType, id)
end

local function GetCurrentObject(self, objType)
    local order = self:GetCurrentOrder(objType)
    local id = self.idDict[objType][order]
    return self:GetObject(objType, id)
end

local function GetNextObject(self, objType)
    local order = self:GetCurrentOrder(objType) + 1
    local id = self.idDict[objType][order]
    return self:GetObject(objType, id)
end

local function GetObjectPos(self, objType, id)
    if self.objPosCache[objType][id] == nil then
        local config = self:GetConfig(objType, id)
        local mainPos = SceneUtils.TileToWorld(BuildingUtils.GetMainPos(), ForceChangeScene.City)
        local pos = Vector3.New(mainPos.x + config.pos[1], mainPos.y + config.pos[2], mainPos.z + config.pos[3])
        self.objPosCache[objType][id] = pos
    end
    return self.objPosCache[objType][id]
end

local function GetNextObjectPos(self, objType)
    local order = self:GetCurrentOrder(objType) + 1
    local id = self.idDict[objType][order]
    if id == nil then
        return nil
    end
    local pos = self:GetObjectPos(objType, id)
    return pos
end

local function GetObjectRot(self, objType, id)
    if self.objRotCache[objType][id] == nil then
        local config = self:GetConfig(objType, id)
        if config.rot and #config.rot == 3 then
            self.objRotCache[objType][id] = Quaternion.Euler(config.rot[1], config.rot[2], config.rot[3])
        else
            self.objRotCache[objType][id] = Quaternion.identity
        end
    end
    return self.objRotCache[objType][id]
end

local function CheckAllCondition(self, objType, id)
    return self:CheckNeedBuild(objType, id) and self:CheckNeedChapter(objType, id) and self:CheckNeedQuest(objType, id) and self:CheckNeedRes(objType,id)
end

local function CheckNeedBuild(self, objType, id)
    local config = self:GetConfig(objType, id)
    if config.pre_build then
        for _, buildLevelId in ipairs(config.pre_build) do
            local buildId = DataCenter.BuildManager:GetBuildId(buildLevelId)
            local level = DataCenter.BuildManager:GetBuildLevel(buildLevelId)
            local buildData = DataCenter.BuildManager:GetMaxLvBuildDataByBuildId(buildId, true)
            if buildData == nil or buildData.level < level then
                return false
            end
        end
    end
    return true
end

local function CheckNeedRes(self, objType, id)
    local config = self:GetConfig(objType, id)
    if config.pre_res then
        for _, resArr in ipairs(config.pre_res) do
            if #resArr ==2 then
                local resType = resArr[1]
                local resNeed= resArr[2]
                local resNum = LuaEntry.Resource:GetCntByResType(resType)
                if resNum<resNeed then
                    return false
                end
            end
        end
    end
    return true
end
local function CheckNeedChapter(self, objType, id)
    local config = self:GetConfig(objType, id)
    if config.pre_chapter then
        local curChapter = DataCenter.ChapterTaskManager:GetCurChapterId() or 0
        return curChapter >= config.pre_chapter
    end
    return true
end

local function CheckNeedQuest(self, objType, id)
    local config = self:GetConfig(objType, id)
    if config.pre_quest then
        for _, questId in ipairs(config.pre_quest) do
            if not DataCenter.TaskManager:IsFinishTask(tostring(questId)) and not DataCenter.ChapterTaskManager:CheckIsSuccess(tostring(questId)) then
                return false
            end
        end
    end
    return true
end

local function GetNeedStr(self, objType, id)
    local strs = {}
    local config = DataCenter.LandManager:GetConfig(objType, id)

    if not DataCenter.LandManager:CheckNeedBuild(objType, id) then
        for _, buildLevelId in ipairs(config.pre_build) do
            local buildId = DataCenter.BuildManager:GetBuildId(buildLevelId)
            local level = DataCenter.BuildManager:GetBuildLevel(buildLevelId)
            local str = Localization:GetString("130041", Localization:GetString(GetTableData(DataCenter.BuildTemplateManager:GetTableName(), buildId + level,"name")), level)
            table.insert(strs, str)
        end
    end

    if not DataCenter.LandManager:CheckNeedChapter(objType, id) then
        local str = Localization:GetString("121356", config.pre_chapter)
        table.insert(strs, str)
    end

    if not DataCenter.LandManager:CheckNeedQuest(objType, id) then
        for _, questId in ipairs(config.pre_quest) do
            local questName = GetTableData(DataCenter.QuestTemplateManager:GetTableName(), questId, "name")
            local str = Localization:GetString("140219", Localization:GetString(questName))
            table.insert(strs, str)
        end
    end

    if #strs > 0 then
        return string.join(strs, "\n")
    else
        return ""
    end
end

local function GetFogType(self, objType, id)
    if not self:IsFunctionStart() then
        return LandFogType.Fog
    end
    
    local config = self:GetConfig(objType, id)
    local state = self:GetState(objType, id)
    if objType == LandObjectType.Zone then
        if state == LandState.Cleared or state == LandState.Unlocked or state == LandState.Finished then
            return LandFogType.Clear
        elseif state == LandState.Accessible then
            return LandFogType.Clear
        else
            return LandFogType.Fog
        end
    elseif objType == LandObjectType.Block then
        local diff = config.order - self.data.finishBlock
        local zoneState =  self:GetState(LandObjectType.Zone,config.zone)
        if diff <= 1 or zoneState == LandState.Cleared or zoneState == LandState.Unlocked or zoneState == LandState.Finished or zoneState == LandState.Accessible then
            return LandFogType.Clear
        else
            if DataCenter.LandManager:CheckIsNearestFire(config.big_zone) then
                return LandFogType.Half
            else
                return LandFogType.Fog
            end
            
        end
    end
end

local function RefreshObject(self, objType, id)
    if self.uniState == LandUniversalState.Uncreated or self.uniState == LandUniversalState.Creating then
        return
    end
    local obj = self:GetObject(objType, id)
    if obj then
        obj:Refresh()
    end
end

local function RefreshPriorObject(self, objType)
    if self.uniState == LandUniversalState.Uncreated or self.uniState == LandUniversalState.Creating then
        return
    end
    local obj = self:GetPriorObject(objType)
    if obj then
        obj:Refresh()
    end
end

local function RefreshCurrentObject(self, objType)
    if self.uniState == LandUniversalState.Uncreated or self.uniState == LandUniversalState.Creating then
        return
    end
    local obj = self:GetCurrentObject(objType)
    if obj then
        obj:Refresh()
    end
end

local function RefreshNextObject(self, objType)
    if self.uniState == LandUniversalState.Uncreated or self.uniState == LandUniversalState.Creating then
        return
    end
    local obj = self:GetNextObject(objType)
    if obj then
        obj:Refresh()
    end
end

local function RefreshTypeObjects(self, objType)
    if self.uniState == LandUniversalState.Uncreated or self.uniState == LandUniversalState.Creating then
        return
    end
    for _, id in ipairs(self.idDict[objType]) do
        self:RefreshObject(objType, id)
    end
end

local function RefreshZoneRewardObjects(self, id)
    if self.uniState == LandUniversalState.Uncreated or self.uniState == LandUniversalState.Creating then
        return
    end
    local config = self:GetConfig(LandObjectType.Zone, id)
    if config.land_reward then
        for _, rewardId in ipairs(config.land_reward) do
            self:RefreshObject(LandObjectType.Reward, rewardId)
        end
    end
end

local function RefreshAllObjects(self)
    if self.uniState == LandUniversalState.Uncreated or self.uniState == LandUniversalState.Creating then
        return
    end
    Logger.Log("LandManager RefreshAllObjects")
    for objType, list in pairs(self.idDict) do
        for _, id in ipairs(list) do
            self:RefreshObject(objType, id)
        end
    end
end

local function RefreshBlockInZone(self,zoneId)
    local zoneConfig = self:GetConfigByOrder(LandObjectType.Zone, zoneId)
    local lastBlockConfig = self:GetConfig(LandObjectType.Block, zoneConfig.block[#zoneConfig.block])
    local firstBlockConfig = self:GetConfig(LandObjectType.Block, zoneConfig.block[1])
    for i =firstBlockConfig.order ,lastBlockConfig.order do
        local id = self.idDict[LandObjectType.Block][i]
        local obj = self:GetObject(LandObjectType.Block, id)
        if obj~=nil then
            obj:Refresh()
        end
    end
end

-- private
local function CreateObject(self, objType, id, callback)
    local obj = require(string.format("DataCenter.Land.Object.Land%sObject", objType)).New(objType, id)
    obj:Create(callback)
    self.objDict[objType][id] = obj
end

local function CreateAllObjects(self, callback)
    if not self:IsFunctionStart() then
        return
    end
    if self.uniState == LandUniversalState.Creating or self.uniState == LandUniversalState.Created then
        return
    end
    Logger.Log("LandManager CreateAllObjects")
    self.uniState = LandUniversalState.Creating
    local total = 0
    local cur = 0
    for _, list in pairs(self.idDict) do
        total = total + #list
    end
    for objType, list in pairs(self.idDict) do
        for _, id in ipairs(list) do
            self:CreateObject(objType, id, function()
                cur = cur + 1
                if cur == total then
                    Logger.Log("LandManager CreateAllObjects Finish")
                    self.uniState = LandUniversalState.Created
                    if callback then
                        callback()
                    end
                end
            end)
        end
    end
end

-- private
local function DestroyObject(self, objType, id)
    local obj = self.objDict[objType][id]
    obj:Destroy()
    self.objDict[objType][id] = nil
end

local function DestroyAllObjects(self, force)
    DataCenter.CityWallManager:DestroyAll()
    if not self:IsFunctionStart() and not force then
        return
    end
    if self.uniState == LandUniversalState.Uncreated then
        return
    end
    if self.unlockBlockSeq then
        self.unlockBlockSeq:Kill()
        self.unlockBlockSeq = nil
    end
    if self.unlockZoneSeq then
        self.unlockZoneSeq:Kill()
        self.unlockZoneSeq = nil
    end
    for objType, list in pairs(self.idDict) do
        for _, id in ipairs(list) do
            self:DestroyObject(objType, id)
        end
    end
    self.uniState = LandUniversalState.Uncreated
end

local function EnterBlock(self, id)
    local config = self:GetConfig(LandObjectType.Block, id)
    if config.type == LandBlockType.Empty then
        self:SendUnlockBlock(id)
    elseif config.type == LandBlockType.Start then
        self:SendUnlockBlock(id)
    elseif config.type == LandBlockType.Pve then
        self:StartBlockPve(id)
    elseif config.type == LandBlockType.Perform then
        self:SendUnlockBlock(id)
    elseif config.type == LandBlockType.Pickup then
        self:SendUnlockBlock(id)
    elseif config.type == LandBlockType.Resident then
        self:SendUnlockBlock(id)
    elseif config.type == LandBlockType.Jump then
        self:SendUnlockBlock(id)
    end
end

local function StartBlockPve(self, id)
    Logger.Log(string.format("LandManager, StartBlockPve, id = %s", id))
    local config = self:GetConfig(LandObjectType.Block, id)
    local index = self.data.finishIndex + 1
    local param = {}
    param.pveId = config.type_para[index]
    param.blockId = id
    param.pveEntrance = PveEntrance.LandBlock
    PveUtil.EnterPve(param)
end

local function RevealZoneAreaIndex(self, id, index, fogType)
    local config = self:GetConfig(LandObjectType.Zone, id)
    local subConfig = config.unlock_fog[index]
    local mainPos = SceneUtils.TileToWorld(BuildingUtils.GetMainPos(), ForceChangeScene.City)
    local x = mainPos.x + subConfig[1] + ZoneFogOffsetX
    local z = mainPos.z + subConfig[2] + ZoneFogOffsetZ
    local width = subConfig[3] + ZoneFogEdge * 2
    local height = subConfig[4] + ZoneFogEdge * 2
    local centerX = x - width / 2
    local centerZ = z - height / 2
    DataCenter.FogManager:Reveal(RevealerKeyZone * id + RevealerKeyZone2 * index, centerX, 0, centerZ, width, height, fogType)
end

local function RevealZone(self, id, fogType)
    if self.revealedZoneDict[id] == fogType then
        return
    end
    local config = self:GetConfig(LandObjectType.Zone, id)
    for index = 1, #config.unlock_fog do
        self:RevealZoneAreaIndex(id, index, fogType)
    end
    self.revealedZoneDict[id] = fogType
end

local function CheckRevealAllZones(self)
    if self:IsFunctionEnd() then
        self:RevealEverything()
        return
    end
    self:RevealAllBlocks()
    for _, id in ipairs(self.idDict[LandObjectType.Zone]) do
        local fogType = self:GetFogType(LandObjectType.Zone, id)
        if fogType ~= LandFogType.Fog then
            self:RevealZone(id, fogType)
        end
    end
end

local function RevealBlock(self, id, fogType)
    if self.revealedBlockDict[id] == fogType then
        return
    end
    self:UnRevealBlock(id)
    local pos = self:GetObjectPos(LandObjectType.Block, id)
    
    DataCenter.FogManager:Reveal(RevealerKeyBlock * id, pos.x, pos.y, pos.z, BlockFogSize, BlockFogSize, fogType)
    self.revealedBlockDict[id] = fogType
end

local function UnRevealBlock(self, id)
    if self.revealedBlockDict[id] == nil then
        return
    end
    DataCenter.FogManager:UnReveal(RevealerKeyBlock * id)
    self.revealedBlockDict[id] = nil
end

local function RevealAllBlocks(self)
    if self:IsFunctionEnd() then
        self:RevealEverything()
        return
    end
    for _, id in ipairs(self.idDict[LandObjectType.Block]) do
        local fogType = self:GetFogType(LandObjectType.Block, id)
        if fogType == LandFogType.Fog then
            self:UnRevealBlock(id)
        else
            self:RevealBlock(id, fogType)
        end
    end
end

local function RevealEverything(self)
    DataCenter.FogManager:ShowFogDown(false)
    DataCenter.FogManager:ShowFogDown2(true)
end

local function TryPlayUnlockBlock(self)
    if self.uniState == LandUniversalState.Creating or self.uniState == LandUniversalState.Uncreated then
        return
    end
    
    local id = self.idDict[LandObjectType.Block][self.data.finishBlock]
    if self.justUnlockBlockId ~= id then
        return
    end
    
    local curObj = self:GetCurrentObject(LandObjectType.Block)
    local priorObj = self:GetPriorObject(LandObjectType.Block)

    self.isPlayingUnlock = true
    
    local pos = self:GetObjectPos(LandObjectType.Block, id)
    CS.SceneManager.World:AutoLookat(pos, CS.SceneManager.World.Zoom, LookAtFocusTime)
    
    local config = self:GetConfig(LandObjectType.Block, id)
    if config.type == LandBlockType.Pve then
        local req = Resource:InstantiateAsync("Assets/_Art/Effect/prefab/scene/VFX_victory.prefab")
        req:completed('+', function()
            if self.uniState == LandUniversalState.Creating or self.uniState == LandUniversalState.Uncreated then
                req:Destroy()
                return
            end

            local go = req.gameObject
            local tf = go.transform
            tf.position = priorObj.transform.position + Vector3.New(0, 2.5, 0)
            tf.rotation = priorObj.transform.rotation

            TimerManager:GetInstance():DelayInvoke(function()
                req:Destroy()
            end, 3)
        end)
    end
    
    self.justUnlockBlockId = 0

    if config.type == LandBlockType.Pve and (config.reward_model == nil or config.reward_model == "") then
        -- 解锁 PVE 地块流程
        self.unlockBlockSeq = DOTween.Sequence()
        self.unlockBlockSeq:AppendInterval(0.1)
        if curObj:HaveAnim("clear") then
            self.unlockBlockSeq:AppendCallback(function()
                if config~=nil and config.effect_sound~=nil and config.effect_sound~="" then
                    local sound = config.effect_sound.."_dead"
                    SoundUtil.PlayEffect(sound)
                end
                curObj:PlayAnim("clear")
            end)
            self.unlockBlockSeq:AppendInterval(1)
        end
        self.unlockBlockSeq:AppendCallback(function()
            priorObj:PlayAnim("advance")
        end)
        self.unlockBlockSeq:Append(priorObj:MoveModel(2, curObj.transform.position, 1))
        self.unlockBlockSeq:AppendCallback(function()
            priorObj:PlayAnim("idle")
            DataCenter.RewardManager:ShowCommonReward({ reward = self.blockReward })
            DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.LandBlockShowReward, nil)
            EventManager:GetInstance():Broadcast(EventId.GuideWaitMessage)
        end)
        local deltaTime1,centerPos = self:CheckDoAreaUnLockEffect()
        self.unlockBlockSeq:AppendInterval(deltaTime1)
        self.unlockBlockSeq:AppendCallback(function()
            if self.uniState == LandUniversalState.Created then
                self:RefreshPriorObject(LandObjectType.Block)
                self:RefreshCurrentObject(LandObjectType.Block)
                self:RefreshNextObject(LandObjectType.Block)
                self:RefreshCurrentObject(LandObjectType.Zone)
                self:RefreshNextObject(LandObjectType.Zone)
                local state = self:GetState(LandObjectType.Block, id)
                if state == LandState.Accessible then
                    if config~=nil and config.effect_sound~=nil and config.effect_sound~="" then
                        local sound = config.effect_sound.."_born"
                        SoundUtil.PlayEffect(sound)
                    end
                end
                if deltaTime1> 1 then
                    SoundUtil.PlayEffect(SoundAssets.Music_Effect_Pve_Show_Area_Open)
                    if centerPos~=nil then
                        GoToUtil.GotoCityPos(centerPos)
                    end
                    
                end
            end
            self.isPlayingUnlock = false
            DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.LandBlockOne, nil)
            EventManager:GetInstance():Broadcast(EventId.GuideWaitMessage)
        end)
        
    else
        -- 解锁奖励地块流程
        self.unlockBlockSeq = DOTween.Sequence()
        self.unlockBlockSeq:AppendInterval(0.1)
        if curObj:HaveAnim("clear") then
            self.unlockBlockSeq:AppendCallback(function()
                if config~=nil and config.reward_model == nil or config.reward_model == "" then
                    SoundUtil.PlayEffect(SoundAssets.Music_Effect_pve_box_get)
                end
                curObj:PlayAnim("clear")
            end)
            self.unlockBlockSeq:AppendInterval(1)
        end
        self.unlockBlockSeq:AppendCallback(function()
            if not DataCenter.GuideManager:InGuide() then
                curObj:HideModels()
            end
            DataCenter.RewardManager:ShowCommonReward({ reward = self.blockReward }, nil, nil, nil, nil, nil, nil, nil, function()
                if self.uniState == LandUniversalState.Creating or self.uniState == LandUniversalState.Uncreated then
                    self.isPlayingUnlock = false
                    return
                end
                
                if config.type == LandBlockType.Fire then
                    self.unlockBlockSeq = DOTween.Sequence()
                else
                    curObj:HideModels()
                    self.unlockBlockSeq = DOTween.Sequence()
                    self.unlockBlockSeq:AppendCallback(function()
                        priorObj:PlayAnim("advance")
                    end)
                    self.unlockBlockSeq:Append(priorObj:MoveModel(2, curObj.transform.position, 1))
                    self.unlockBlockSeq:AppendCallback(function()
                        priorObj:PlayAnim("idle")
                    end)
                end
                local deltaTime1,centerPos = self:CheckDoAreaUnLockEffect()
                self.unlockBlockSeq:AppendInterval(deltaTime1)
                self.unlockBlockSeq:AppendCallback(function()
                    if self.uniState == LandUniversalState.Created then
                        self:RefreshPriorObject(LandObjectType.Block)
                        self:RefreshCurrentObject(LandObjectType.Block)
                        self:RefreshNextObject(LandObjectType.Block)
                        self:RefreshCurrentObject(LandObjectType.Zone)
                        self:RefreshNextObject(LandObjectType.Zone)
                        local state = self:GetState(LandObjectType.Block, id)
                        if state == LandState.Accessible then
                            if config~=nil and config.effect_sound~=nil and config.effect_sound~="" then
                                local sound = config.effect_sound.."_born"
                                SoundUtil.PlayEffect(sound)
                            end
                        end
                        if deltaTime1> 1 then
                            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Pve_Show_Area_Open)
                            if centerPos~=nil then
                                GoToUtil.GotoCityPos(centerPos)
                            end
                        end
                        --self:CheckUnlockZone()
                    end
                    DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.LandBlockOne, nil)
                    EventManager:GetInstance():Broadcast(EventId.GuideWaitMessage)
                    self.isPlayingUnlock = false
                    --
                    if config~=nil and config.type == LandBlockType.Jump then
                        local nextConfig = self:GetConfigByOrder(LandObjectType.Block,config.order + 1)
                        if nextConfig~=nil and nextConfig.type == LandBlockType.Jump then
                            self:EnterBlock(nextConfig.id)
                        end
                    end
                end)
            end)
            DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.LandBlockShowReward, nil)
            EventManager:GetInstance():Broadcast(EventId.GuideWaitMessage)
        end)
    end
end

local function TryPlayUnlockZone(self)
    if self.uniState == LandUniversalState.Creating or self.uniState == LandUniversalState.Uncreated then
        return
    end
    
    local id = self.idDict[LandObjectType.Zone][self.data.finishZone]
    if self.justUnlockZoneId ~= id then
        return
    end
    
    local obj = self:GetCurrentObject(LandObjectType.Zone)

    self.isPlayingUnlock = true
    
    local config = self:GetConfig(LandObjectType.Zone, id)
    local mainPos = SceneUtils.TileToWorld(BuildingUtils.GetMainPos(), ForceChangeScene.City)

    if self.uniState == LandUniversalState.Created then
        self:RefreshPriorObject(LandObjectType.Block)
        self:RefreshCurrentObject(LandObjectType.Block)
        self:RefreshNextObject(LandObjectType.Block)
        self:RefreshCurrentObject(LandObjectType.Zone)
        self:RefreshNextObject(LandObjectType.Zone)
    end
    
    self.justUnlockZoneId = 0
    self.unlockZoneSeq = DOTween.Sequence()
    self.unlockZoneSeq:AppendInterval(0.1)
    for index, subConfig in ipairs(config.unlock_vfx) do
        local x = mainPos.x + subConfig[1] + ZoneFogOffsetX
        local z = mainPos.z + subConfig[2] + ZoneFogOffsetZ
        local width = subConfig[3]
        local height = subConfig[4]
        local centerX = x - width / 2
        local centerZ = z - height / 2
        local pos = Vector3.New(centerX, ZoneEffectY, centerZ)
        self.unlockZoneSeq:AppendCallback(function()
            CS.SceneManager.World:AutoLookat(pos, CS.SceneManager.World.Zoom, LookAtFocusTime)
        end)
        
        self.unlockZoneSeq:AppendInterval(LookAtFocusTime)
        self.unlockZoneSeq:AppendCallback(function()
            SoundUtil.PlayEffect(SoundAssets.Music_Effect_Pve_Get_Area)
            local req = Resource:InstantiateAsync("Assets/_Art/Effect_B/Prefab/Common/Eff_dikuaijiesuo.prefab")
            req:completed('+', function()
                if self.uniState == LandUniversalState.Uncreated then
                    req:Destroy()
                    return
                end
                
                local go = req.gameObject
                local tf = go.transform
                tf.position = pos
                tf.rotation = Quaternion.identity
                tf.localScale = Vector3.New(width, math.max(width, height), height) * 0.55
                TimerManager:GetInstance():DelayInvoke(function()
                    req:Destroy()
                end, 3)
            end)
        end)
        self.unlockZoneSeq:AppendInterval(1.5)
        self.unlockZoneSeq:AppendCallback(function()
            if config.land_reward then
                local rewardIds = config.land_reward[index] or {}
                for _, rewardId in ipairs(rewardIds) do
                    if rewardId > 0 then
                        obj:PlayUnlock(rewardId)
                    end
                end
            end
            --显示建筑
            DataCenter.BuildCityBuildManager:SetBuildNoShow(true)
            --做栅栏动画
            self:DoLandRangeAnim(0, config.id)
        end)
        self.unlockZoneSeq:AppendInterval(0.5)
    end
    self.unlockZoneSeq:AppendCallback(function()
        self:CheckRevealAllZones()
        self.isPlayingUnlock = false
        UIUtil.ShowTipsId(120088)
        DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.LandBlockTwo, nil)
        EventManager:GetInstance():Broadcast(EventId.GuideWaitMessage)
    end)
end

local function CheckUnlockBlock(self)
    for _, id in ipairs(self.idDict[LandObjectType.Block]) do
        local state = self:GetState(LandObjectType.Block, id)
        if state == LandState.Cleared then
            local config = self:GetConfig(LandObjectType.Block, id)
            if config.reward_model == nil or config.reward_model == "" then
                self:SendUnlockBlock(id)
                break
            end
        end
    end
end

local function CheckUnlockZone(self)
    for _, id in ipairs(self.idDict[LandObjectType.Zone]) do
        local state = self:GetState(LandObjectType.Zone, id)
        if state == LandState.Cleared then
            self:SendUnlockZone(id)
            break
        end
    end
end

local function TryJumpToNextBlock(self)
    for _, id in ipairs(self.idDict[LandObjectType.Block]) do
        local state = self:GetState(LandObjectType.Block, id)
        if state == LandState.Unexplored or state == LandState.Unaccessible or state == LandState.Accessible then
            local pos = self:GetObjectPos(LandObjectType.Block, id)
            GoToUtil.GotoCityPos(pos, CS.SceneManager.World.Zoom, LookAtFocusTime, function()
                local param = {}
                param.positionType = PositionType.World
                param.position = pos
                DataCenter.ArrowManager:ShowArrow(param)
            end)
            return true
        end
    end
    return false
end

local function JumpToRewardBubble(self, id)
    if self.uniState == LandUniversalState.Uncreated or self.uniState == LandUniversalState.Creating then
        return
    end
    local obj = self:GetObject(LandObjectType.Reward, id)
    if obj then
        CS.SceneManager.World:AutoLookat(obj.transform.position, CS.SceneManager.World.Zoom, LookAtFocusTime, function()
            local hudItem = DataCenter.CityHudManager:GetHudItem(id, CityHudType.LandZoneBubble)
            if hudItem then
                local pos = hudItem.transform.position
                pos.y = pos.y + 72
                local param = {}
                param.positionType = PositionType.Screen
                param.position = pos
                DataCenter.ArrowManager:ShowArrow(param)
            end
        end)
    end
end

local function IsBlockUnlocked(self, blockOrder)
    return blockOrder <= self:GetCurrentOrder(LandObjectType.Block)
end

local function IsZoneUnlocked(self, zoneOrder)
    return zoneOrder <= self:GetCurrentOrder(LandObjectType.Zone)
end

local function IsRewardReceived(self, id)
    return self.data.rewardRecord[id]
end

local function GetTriggerObject(self, objType, id)
    local obj = self:GetObject(objType, id)
    if obj then
        return obj.trigger
    end
    return nil
end

local function GetCurrentOrder(self, objType)
    if objType == LandObjectType.Zone then
        return self.data.finishZone
    elseif objType == LandObjectType.Block then
        return self.data.finishBlock
    end
    return 0
end

local function RefreshFunctionState(self)
    local wasFunctionStart = self.isFunctionStart
    local wasFunctionEnd = self.isFunctionEnd
    
    self.isFunctionStart = DataCenter.GuideManager:CanShowLand()
    self.isFunctionEnd = false
    local lastZoneId = self.idDict[LandObjectType.Zone][#self.idDict[LandObjectType.Zone]]
    local lastZoneState = self:GetState(LandObjectType.Zone, lastZoneId)
    if lastZoneState == LandState.Unlocked or lastZoneState == LandState.Finished then
        local lastBlockId = self.idDict[LandObjectType.Block][#self.idDict[LandObjectType.Block]]
        local lastBlockState = self:GetState(LandObjectType.Block, lastBlockId)
        if lastBlockState == LandState.Unlocked or lastZoneState == LandState.Finished then
            self.isFunctionEnd = true
        end
    end
    
    if wasFunctionStart and not self.isFunctionStart then
        self:DestroyAllObjects(true)
    end
    if not wasFunctionStart and self.isFunctionStart then
        self:OnFunctionStart()
    end
    if not wasFunctionEnd and self.isFunctionEnd then
        self:OnFunctionEnd()
    end
end

-- 地块玩法是否开始
local function IsFunctionStart(self)
    return self.isFunctionStart
end

-- 地块玩法是否结束
local function IsFunctionEnd(self)
    return self.isFunctionEnd
end

-- 地块玩法是否可用
local function IsFunctionOn(self)
    return self:IsFunctionStart() and not self:IsFunctionEnd()
end

local function ParseReward(self, message)
    local rewards = message["reward"] or {}
    for _, v in pairs(rewards) do
        DataCenter.RewardManager:AddOneReward(v)
    end
    
    -- 将幸存者加入奖励弹窗
    --if not table.IsNullOrEmpty(DataCenter.VitaManager.newResidentArrCache) then
    --    local list = DataCenter.VitaManager.newResidentArrCache
    --    for _, v in ipairs(list) do
    --        local reward = {}
    --        reward.type = RewardType.RESIDENT
    --        reward.value = { id = v.rId }
    --        table.insert(rewards, reward)
    --    end
    --    DataCenter.VitaManager.newResidentArrCache = nil
    --end
    
    return rewards
end

local function HideAllBlockModels(self)
    if self.uniState == LandUniversalState.Creating or self.uniState == LandUniversalState.Uncreated then
        return
    end
    for _, id in ipairs(self.idDict[LandObjectType.Block]) do
        local obj = self:GetObject(LandObjectType.Block, id)
        if obj then
            obj:HideModels()
        end
    end
end

local function SetShowBlockEffect(self, showBlockEffect)
    self.showBlockEffect = showBlockEffect
end

local function GetRewardIdsByZoneId(self, id)
    local list = {}
    local config = self:GetConfig(LandObjectType.Zone, id)
    if config.land_reward then
        for _, v in ipairs(config.land_reward) do
            for _, rewardId in ipairs(v) do
                if rewardId > 0 then
                    table.insert(list, rewardId)
                end
            end
        end
    end
    return list
end

local function GetReceivableRewardIds(self)
    if not self:IsFunctionOn() then
        return {}
    end

    local list = {}
    for _, id in pairs(self.idDict[LandObjectType.Zone]) do
        local state = self:GetState(LandObjectType.Zone, id)
        if state == LandState.Unlocked or state == LandState.Finished then
            for _, rewardId in ipairs(self:GetRewardIdsByZoneId(id)) do
                if not self:IsRewardReceived(rewardId) then
                    table.insert(list, rewardId)
                end
            end
        end
    end
    return list
end

local function CheckBadObjDict(self)
    Logger.Log("LandManager CheckBadObjDict")
    
    local msg = ""
    for objType, dict in pairs(self.objDict) do
        for id, obj in pairs(dict) do
            local str = " | objType: " .. objType .. ", id: " .. id .. ", uniState: " .. self.uniState
            msg = msg .. str
        end
    end
    
    if msg ~= "" then
        msg = "LandManager || BadObjDict" .. msg
        local now = UITimeManager:GetInstance():GetServerSeconds()
        CommonUtil.SendErrorMessageToServer(now, now, msg)
        Logger.LogError(msg)
    end
end

local function OnEnterWorld()
    local self = DataCenter.LandManager
    if self.uniState == LandUniversalState.Created or self.uniState == LandUniversalState.Creating then
        self:DestroyAllObjects()
    end
end

local function OnEnterCity()
    local self = DataCenter.LandManager
    self:CheckBadObjDict()
    if self.uniState == LandUniversalState.Uncreated then
        self:CreateAllObjects(function()
            self:CheckUnlockBlock()
            self:RefreshLandRange()
            --self:CheckUnlockZone()
        end)
    end
    self:CheckRevealAllZones()
    self.isPlayingUnlock = false
    self.isPlayingZone = false
end

local function OnPveLevelEnter()
    local self = DataCenter.LandManager
    if self.uniState == LandUniversalState.Created or self.uniState == LandUniversalState.Creating then
        self:DestroyAllObjects()
    end
end

local function OnPveLevelExit(levelParam)
    if levelParam == nil then
        return
    end
    if not SceneUtils.GetIsInCity() then
        return
    end
    local self = DataCenter.LandManager
    if levelParam.blockId then
        local pos = self:GetObjectPos(LandObjectType.Block, levelParam.blockId)
        CS.SceneManager.World:AutoLookat(pos, DataCenter.CityCameraManager:GetCurZoom(), 0.01)
    end
end

local function OnFogLoadComplete()
    local self = DataCenter.LandManager
    self:CheckRevealAllZones()
end

local function OnMainLvUp()
    if not SceneUtils.GetIsInCity() then
        return
    end
    local self = DataCenter.LandManager
    self:RefreshFunctionState()
    if self.uniState == LandUniversalState.Created then
        if not self.isPlayingUnlock then
            self:RefreshCurrentObject(LandObjectType.Block)
        end
    end
    self:RevealAllBlocks()
end

local function OnBuildUpgradeFinish()
    if not SceneUtils.GetIsInCity() then
        return
    end
    local self = DataCenter.LandManager
    self:RefreshFunctionState()
    if self.uniState == LandUniversalState.Created then
        if not self.isPlayingUnlock then
            self:RefreshCurrentObject(LandObjectType.Block)
        end
    end
    self:RevealAllBlocks()
end
local function OnResUpdate()
    if not SceneUtils.GetIsInCity() then
        return
    end
    local self = DataCenter.LandManager
    self:RefreshFunctionState()
    if self.uniState == LandUniversalState.Created then
        if not self.isPlayingUnlock then
            self:RefreshCurrentObject(LandObjectType.Block)
            self:RefreshNextObject(LandObjectType.Block)
        end
    end
end

local function OnTaskFinish()
    if not SceneUtils.GetIsInCity() then
        return
    end
    local self = DataCenter.LandManager
    if self.uniState == LandUniversalState.Created then
        self:RefreshNextObject(LandObjectType.Block)
        self:RefreshNextObject(LandObjectType.Zone)
    end
end

local function OnDayNightChange()
    if not SceneUtils.GetIsInCity() then
        return
    end
    local self = DataCenter.LandManager
    if self.uniState == LandUniversalState.Created then
        local obj = self:GetCurrentObject(LandObjectType.Block)
        if obj then
            obj:RefreshLight()
        end
    end
end

local function OnFunctionStart(self)
    if not SceneUtils.GetIsInCity() then
        return
    end
    if self.uniState == LandUniversalState.Uncreated then
        self:CreateAllObjects(function()
            self:CheckUnlockBlock()
            self:RefreshLandRange()
            --self:CheckUnlockZone()
        end)
    end
end

local function OnFunctionEnd(self)
    if not SceneUtils.GetIsInCity() then
        return
    end
    self:RevealEverything()
end

local function SendStartPve(self, id, levelId, heroes, formations, pass)
    local config = self:GetConfig(LandObjectType.Block, id)
    local index = table.indexof(config.type_para, levelId)
    SFSNetwork.SendMessage(MsgDefines.StartLandPve, config.order, index, heroes, formations, pass)
end

local function SendFinishPve(self, id, levelId, pass)
    local config = self:GetConfig(LandObjectType.Block, id)
    local index = 1
    SFSNetwork.SendMessage(MsgDefines.FinishLandPve, config.order, index, nil, nil, pass)
end

local function SendUnlockBlock(self, id)
    DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.LandBlockOne, true)
    DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.LandBlockShowReward, true)
    local config = self:GetConfig(LandObjectType.Block, id)
    SFSNetwork.SendMessage(MsgDefines.FinishLandBlock, config.order)
end

local function SendUnlockZone(self, id)
    DataCenter.GuideManager:SetWaitingMessage(WaitMessageFinishType.LandBlockTwo, true)
    DataCenter.BuildCityBuildManager:SetBuildNoShow(false)
    local config = self:GetConfig(LandObjectType.Zone, id)
    SFSNetwork.SendMessage(MsgDefines.FinishLandZone, config.order)
end

local function SendUnlockZoneFog(self, bigZoneOrder)
    SFSNetwork.SendMessage(MsgDefines.UnlockLandZone, bigZoneOrder)
end
local function SendReceiveReward(self, id)
    SFSNetwork.SendMessage(MsgDefines.ReceiveLandRewardNew, id)
end

local function HandleInit(self, message)
    if message["landInfo"] then
        self.data:Parse(message["landInfo"])
        self:RefreshFunctionState()
        EventManager:GetInstance():Broadcast(EventId.LandDataRefresh)
    end
end

local function HandleStartPve(self, message)
    self.data:Parse(message)
    self:RefreshFunctionState()
    local battleContent = PveUtil.ParseBattleContent(message)
    local detailContent = PveUtil.ParseDetailContent(message)
    PveActorMgr:GetInstance():ParseData(battleContent, detailContent)
    EventManager:GetInstance():Broadcast(EventId.LandStartPve)
    EventManager:GetInstance():Broadcast(EventId.LandDataRefresh)
end

local function HandleFinishPve(self, message)
    self.data:Parse(message)
    self:RefreshFunctionState()
    local rewards = message["reward"] or {}
    for _, v in pairs(rewards) do
        DataCenter.RewardManager:AddOneReward(v)
    end
    self.pveReward = rewards
    
    if DataCenter.BattleLevel.started then
        DataCenter.BattleLevel:ShowResult()
    end
    EventManager:GetInstance():Broadcast(EventId.LandFinishPve)
    EventManager:GetInstance():Broadcast(EventId.LandDataRefresh)
end

local function HandleUnlockBlock(self, message)
    self.data:Parse(message)
    self:RefreshFunctionState()
    self.blockReward = self:ParseReward(message)
    local config = self:GetConfigByOrder(LandObjectType.Block, self.data.finishBlock)
    self.justUnlockBlockId = config.id
    DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.LandReward, tostring(self.justUnlockBlockId))
    if self.uniState == LandUniversalState.Created then
        self:TryPlayUnlockBlock()
    end
    EventManager:GetInstance():Broadcast(EventId.LandUnlockBlock)
    EventManager:GetInstance():Broadcast(EventId.LandDataRefresh)
end

local function HandleUnlockZone(self, message)
    local errorCode = message["errorCode"]
    if errorCode == nil then
        self.data:Parse(message)
        self:RefreshFunctionState()
        local config = self:GetConfigByOrder(LandObjectType.Zone, self.data.finishZone)
        self.justUnlockZoneId = config.id

        if self.uniState == LandUniversalState.Created then
            local rewards = self:ParseReward(message)
            DataCenter.RewardManager:ShowCommonReward({ reward = rewards }, nil, nil, nil, nil, nil, nil, nil, function()
                if self.uniState == LandUniversalState.Created then
                    self:TryPlayUnlockZone()
                end
            end)
        end

        EventManager:GetInstance():Broadcast(EventId.LandUnlockZone)
        EventManager:GetInstance():Broadcast(EventId.LandDataRefresh)
    else
        DataCenter.BuildCityBuildManager:SetBuildNoShow(true)
    end
end

local function HandleUnlockZoneFog(self,message)
    self.isFireInClick = 0
    self.data:Parse(message)
    self:RefreshFunctionState()
    local obj = self:GetCurrentObject(LandObjectType.Block)
    GoToUtil.GotoCityPos(obj.transform.position,55, LookAtFocusTime, function()
        self:RevealAllBlocks()
        --解锁迷雾
        self:PlayZoneUnlockFog()
    end)
    local position = obj.transform.position
    TimerManager:GetInstance():DelayInvoke(function()
        GoToUtil.GotoCityPos(position)
    end, 2+0.4)--迷雾消散时间+相机移动时间
    self:RefreshTypeObjects(LandObjectType.Block)
    
    EventManager:GetInstance():Broadcast(EventId.LandUnlockZone)
    EventManager:GetInstance():Broadcast(EventId.LandDataRefresh)
end

local function HandleReceiveReward(self, message)
    local id = message["id"]
    self.data.rewardRecord[id] = true
    self:RefreshFunctionState()
    if self.uniState == LandUniversalState.Created then
        local config = self:GetConfig(LandObjectType.Reward, id)
        self:RefreshObject(LandObjectType.Zone, config.lock)
    end
    EventManager:GetInstance():Broadcast(EventId.LandReceiveReward)
    EventManager:GetInstance():Broadcast(EventId.LandDataRefresh)
end

local function CheckIsBigAreaUnlock(self,bigAreaOrder)
    if self.data~=nil then
        return self.data.unlockZone>=bigAreaOrder
    end
    return false
end

local function CheckIsAreaUnlock(self,areaOrder)
    local bigIndex = self.bigAreaUnlockDic[areaOrder]
    if bigIndex~=nil then
        if self.data~=nil then
            return self.data.unlockZone>=bigIndex 
        end
    end
    return false
end

local function CheckDoAreaUnLockEffect(self)
    local totalTime = 0.001
    local centerPos = nil
    local needDoAnim = false
    if self.uniState == LandUniversalState.Creating or self.uniState == LandUniversalState.Uncreated then
        return totalTime,centerPos
    end
    
    local config = self:GetConfigByOrder(LandObjectType.Block, self.data.finishBlock)
    if config~=nil then
        local zoneConfig = self:GetConfig(LandObjectType.Zone, config.zone)
        local lastBlockConfig = self:GetConfig(LandObjectType.Block, zoneConfig.block[#zoneConfig.block])
        if lastBlockConfig.order == self.data.finishBlock then
            totalTime = totalTime + 1--小人行走时间
            local firstBlockConfig = self:GetConfig(LandObjectType.Block, zoneConfig.block[1])
            needDoAnim = true
            for i =firstBlockConfig.order ,lastBlockConfig.order-1 do
                local id = self.idDict[LandObjectType.Block][i]
                local obj = self:GetObject(LandObjectType.Block, id)
                if obj~=nil then
                    obj:PlayRemoveAnim(totalTime)
                    totalTime = totalTime + LandZoneFlipPerBlockTime
                end
            end
            local mainPos = SceneUtils.TileToWorld(BuildingUtils.GetMainPos(), ForceChangeScene.City)
            local subConfig = zoneConfig.unlock_vfx[1]
            local x = mainPos.x + subConfig[1] + ZoneFogOffsetX
            local z = mainPos.z + subConfig[2] + ZoneFogOffsetZ
            local width = subConfig[3]
            local height = subConfig[4]
            local centerX = x - width / 2
            local centerZ = z - height / 2
            centerPos = Vector3.New(centerX, ZoneEffectY, centerZ)
        end
    end
    --if needDoAnim then
    --    DataCenter.WaitTimeManager:AddOneWait(totalTime + 0.5, function()
    --        self:PlayZoneUnlockEffect()
    --    end)
    --end
    return totalTime,centerPos
end
local function DoLandRangeAnim(self,totalTime,zoneId)
    return DataCenter.CityWallManager:DoExpand(totalTime,zoneId)
end

local function RefreshLandRange(self)
    local zoneId = 0
    local config = self:GetConfigByOrder(LandObjectType.Block, self.data.finishBlock)
    if config~=nil then
        local zoneConfig = self:GetConfig(LandObjectType.Zone, config.zone)
        local lastBlockConfig = self:GetConfig(LandObjectType.Block, zoneConfig.block[#zoneConfig.block])
        if lastBlockConfig.order == self.data.finishBlock then
            zoneId = zoneConfig.id
        else
            local priorId =self:GetPrior(LandObjectType.Zone,zoneConfig.id)
            if priorId~=nil then
                zoneId = priorId
            end
        end
    end
    DataCenter.CityWallManager:RefreshByZone(zoneId)
end

local function CheckShowFireUnlockHud(self,pointId,position)
    DataCenter.CityHudManager:Destroy(pointId, CityHudType.FireLock)
    if DataCenter.CityResidentManager.readyQueueHudSwitch and self.isFireInClick~=pointId then
        local hudParam = {}
        hudParam.uuid = pointId
        hudParam.pos = position + Vector3.New(0, 1, 0)
        hudParam.type = CityHudType.FireUnlock
        hudParam.location = CityHudLocation.UI
        hudParam.unique = true
        DataCenter.CityHudManager:Create(hudParam)
        return
    end
    DataCenter.CityHudManager:Destroy(pointId, CityHudType.FireUnlock)
end
local function CheckShowFireLock(self,pointId,position)
    if DataCenter.CityResidentManager.readyQueueHudSwitch then
        local hudParam = {}
        hudParam.uuid = pointId
        hudParam.pos = position + Vector3.New(0, 1, 0)
        hudParam.type = CityHudType.FireLock
        hudParam.location = CityHudLocation.UI
        hudParam.unique = false
        DataCenter.CityHudManager:Create(hudParam)
        return
    end
    DataCenter.CityHudManager:Destroy(pointId, CityHudType.FireLock)
end

local function OnClickFire(self,pointId)
    self.isFireInClick = pointId
    DataCenter.CityHudManager:Destroy(pointId, CityHudType.FireUnlock)
end

function LandManager:PlayZoneUnlockFog()
    if self.data~=nil then
        local bigZoneOrder = toInt(self.data.unlockZone)
        if self.bigZoneArr[bigZoneOrder]~=nil then
            local arr = self.bigZoneArr[bigZoneOrder]
            for i=1,#arr do
                local zoneConfig = self:GetConfigByOrder(LandObjectType.Zone,arr[i])
                if zoneConfig~=nil then
                    for index, subConfig in ipairs(zoneConfig.unlock_fog) do
                        self:RevealZoneAreaIndex(zoneConfig.id, index, LandFogType.Clear)
                    end
                end
            end
            DataCenter.FogManager:DoUnlockFogAnim()
        end
    end
    
end

function LandManager:PlayZoneUnlockEffect()
    local config = self:GetConfigByOrder(LandObjectType.Block, self.data.finishBlock)
    if config~=nil then
        local zoneConfig = self:GetConfig(LandObjectType.Zone, config.zone)
        local mainPos = SceneUtils.TileToWorld(BuildingUtils.GetMainPos(), ForceChangeScene.City)
        self.unlockZoneSeq = DOTween.Sequence()
        self.unlockZoneSeq:AppendInterval(0.1)
        for index, subConfig in ipairs(zoneConfig.unlock_vfx) do
            local x = mainPos.x + subConfig[1] + ZoneFogOffsetX
            local z = mainPos.z + subConfig[2] + ZoneFogOffsetZ
            local width = subConfig[3]
            local height = subConfig[4]
            local centerX = x - width / 2
            local centerZ = z - height / 2
            local pos = Vector3.New(centerX, ZoneEffectY, centerZ)
            self.unlockZoneSeq:AppendCallback(function()
                local req = Resource:InstantiateAsync("Assets/_Art/Effect_B/Prefab/Common/Eff_dikuaijiesuo.prefab")
                req:completed('+', function()
                    if self.uniState == LandUniversalState.Uncreated then
                        req:Destroy()
                        return
                    end
                    
                    local go = req.gameObject
                    local tf = go.transform
                    tf.position = pos
                    tf.rotation = Quaternion.identity
                    tf.localScale = Vector3.New(width, math.max(width, height), height) * 0.55
                    TimerManager:GetInstance():DelayInvoke(function()
                        req:Destroy()
                    end, 3)
                end)
            end)
        end
    end
end

function LandManager:GetBigZoneUnlockCost(bigZone)
    if self.bigZoneUnlockConf~=nil then
        return self.bigZoneUnlockConf[bigZone]
    end
    return nil
end

local function CheckIsNearestFire(self,bigAreaOrder)
    if self.data~=nil then
        return ( bigAreaOrder - self.data.unlockZone == 1)
    end
    return false
end
LandManager.__init = __init
LandManager.__delete = __delete
LandManager.AddListeners = AddListeners
LandManager.RemoveListeners = RemoveListeners

LandManager.GetData = GetData
LandManager.GetState = GetState
LandManager.GetConfig = GetConfig
LandManager.GetConfigByOrder = GetConfigByOrder
LandManager.GetPrior = GetPrior
LandManager.GetNext = GetNext
LandManager.GetObject = GetObject
LandManager.GetObjectPos = GetObjectPos
LandManager.GetNextObjectPos = GetNextObjectPos
LandManager.GetObjectRot = GetObjectRot
LandManager.GetPriorObject = GetPriorObject
LandManager.GetCurrentObject = GetCurrentObject
LandManager.GetNextObject = GetNextObject
LandManager.CheckAllCondition = CheckAllCondition
LandManager.CheckNeedBuild = CheckNeedBuild
LandManager.CheckNeedChapter = CheckNeedChapter
LandManager.CheckNeedQuest = CheckNeedQuest

LandManager.CheckNeedRes =CheckNeedRes
LandManager.GetNeedStr = GetNeedStr
LandManager.GetFogType = GetFogType

LandManager.RefreshObject = RefreshObject
LandManager.RefreshPriorObject = RefreshPriorObject
LandManager.RefreshCurrentObject = RefreshCurrentObject
LandManager.RefreshNextObject = RefreshNextObject
LandManager.RefreshTypeObjects = RefreshTypeObjects
LandManager.RefreshZoneRewardObjects = RefreshZoneRewardObjects
LandManager.RefreshAllObjects = RefreshAllObjects
LandManager.CreateObject = CreateObject
LandManager.CreateAllObjects = CreateAllObjects
LandManager.DestroyObject = DestroyObject
LandManager.DestroyAllObjects = DestroyAllObjects

LandManager.EnterBlock = EnterBlock
LandManager.StartBlockPve = StartBlockPve
LandManager.RevealZoneAreaIndex = RevealZoneAreaIndex
LandManager.RevealZone = RevealZone
LandManager.CheckRevealAllZones = CheckRevealAllZones
LandManager.RevealBlock = RevealBlock
LandManager.UnRevealBlock = UnRevealBlock
LandManager.RevealAllBlocks = RevealAllBlocks
LandManager.RevealEverything = RevealEverything
LandManager.TryPlayUnlockBlock = TryPlayUnlockBlock
LandManager.TryPlayUnlockZone = TryPlayUnlockZone
LandManager.CheckUnlockBlock = CheckUnlockBlock
LandManager.CheckUnlockZone = CheckUnlockZone
LandManager.TryJumpToNextBlock = TryJumpToNextBlock
LandManager.JumpToRewardBubble = JumpToRewardBubble
LandManager.IsBlockUnlocked = IsBlockUnlocked
LandManager.IsZoneUnlocked = IsZoneUnlocked
LandManager.IsRewardReceived = IsRewardReceived
LandManager.GetTriggerObject = GetTriggerObject
LandManager.GetCurrentOrder = GetCurrentOrder
LandManager.RefreshFunctionState = RefreshFunctionState
LandManager.IsFunctionStart = IsFunctionStart
LandManager.IsFunctionEnd = IsFunctionEnd
LandManager.IsFunctionOn = IsFunctionOn
LandManager.ParseReward = ParseReward
LandManager.HideAllBlockModels = HideAllBlockModels
LandManager.SetShowBlockEffect = SetShowBlockEffect
LandManager.GetRewardIdsByZoneId = GetRewardIdsByZoneId
LandManager.GetReceivableRewardIds = GetReceivableRewardIds
LandManager.CheckBadObjDict = CheckBadObjDict

LandManager.OnEnterWorld = OnEnterWorld
LandManager.OnEnterCity = OnEnterCity
LandManager.OnPveLevelEnter = OnPveLevelEnter
LandManager.OnPveLevelExit = OnPveLevelExit
LandManager.OnFogLoadComplete = OnFogLoadComplete
LandManager.OnMainLvUp = OnMainLvUp
LandManager.OnBuildUpgradeFinish = OnBuildUpgradeFinish
LandManager.OnTaskFinish = OnTaskFinish
LandManager.OnDayNightChange = OnDayNightChange
LandManager.OnFunctionStart = OnFunctionStart
LandManager.OnFunctionEnd = OnFunctionEnd

LandManager.SendStartPve = SendStartPve
LandManager.SendFinishPve = SendFinishPve
LandManager.SendUnlockBlock = SendUnlockBlock
LandManager.SendUnlockZoneFog =SendUnlockZoneFog
LandManager.SendUnlockZone = SendUnlockZone
LandManager.SendReceiveReward = SendReceiveReward

LandManager.HandleInit = HandleInit
LandManager.HandleStartPve = HandleStartPve
LandManager.HandleFinishPve = HandleFinishPve
LandManager.HandleUnlockBlock = HandleUnlockBlock
LandManager.HandleUnlockZone = HandleUnlockZone
LandManager.HandleReceiveReward = HandleReceiveReward
LandManager.HandleUnlockZoneFog = HandleUnlockZoneFog
LandManager.OnResUpdate = OnResUpdate
LandManager.CheckDoAreaUnLockEffect =CheckDoAreaUnLockEffect
LandManager.DoLandRangeAnim =DoLandRangeAnim
LandManager.RefreshLandRange = RefreshLandRange
LandManager.CheckShowFireUnlockHud = CheckShowFireUnlockHud
LandManager.OnClickFire= OnClickFire
LandManager.RefreshBlockInZone =RefreshBlockInZone
LandManager.CheckIsBigAreaUnlock =CheckIsBigAreaUnlock
LandManager.CheckIsAreaUnlock = CheckIsAreaUnlock
LandManager.CheckShowFireLock = CheckShowFireLock
LandManager.CheckIsNearestFire =CheckIsNearestFire
return LandManager