---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/1/9 10:28
---

local base = require "DataCenter.Land.Object.LandObjectBase"
local LandBlockObject = BaseClass("LandBlockObject", base)
local LandLockSmokeEffect = require "Scene.GuideAnimScene.LandLockSmokeEffect"

local function __init(self, objType, id)
    base.__init(self, objType, id)
    self.changeModelTotalCount = 4
    self.effect = nil
    self.effect_callback = function() 
        self:EffectCallBack()
    end
end

local function CreateCallbackInternal(self)
    base.CreateCallbackInternal(self)
    self.conditionBgGo = self.transform:Find("Root/ConditionBg").gameObject
    self.conditionText = self.transform:Find("Root/ConditionBg/Condition"):GetComponent(typeof(CS.TMPro.TextMeshPro))
    self.triggerTopGo = self.transform:Find("Root/Trigger/TriggerTop").gameObject
end

local function Refresh(self)
    base.Refresh(self)
    
    local fogType = DataCenter.LandManager:GetFogType(self.objType, self.id)
    local config = DataCenter.LandManager:GetConfig(self.objType, self.id)
    local state = DataCenter.LandManager:GetState(self.objType, self.id)
    
    
    if not DataCenter.LandManager:IsFunctionStart() then
        self:ChangeModel(1, config.model)
        self:ChangeModel(2, "")
        self:ChangeModel(3, "")
        self:ChangeModel(4, "")
        self.conditionBgGo:SetActive(false)
        self.trigger.gameObject:SetActive(false)
        
    elseif state == LandState.Hide or fogType == LandFogType.Fog then
        self:ChangeModel(1, "")
        self:ChangeModel(2, "")
        self:ChangeModel(3, "")
        self:ChangeModel(4, "")
        self.conditionBgGo:SetActive(false)
        self.trigger.gameObject:SetActive(false)
        
    elseif state == LandState.Unexplored then
        self.triggerTopGo:SetActive(false)
        self:ChangeModel(1, config.model)
        self:ChangeModel(2, config.model_before, function(go)
            self:UpdateFace(go)
            if go~=nil then
                if config~=nil and config.fire~=nil and config.fire~="" and DataCenter.LandManager:CheckIsNearestFire(config.big_zone)== true then
                    local position = go.transform.position
                    DataCenter.LandManager:CheckShowFireLock(config.order,position)
                    --self.triggerTopGo:SetActive(true)
                end
            end
        end)
        self.trigger.gameObject:SetActive(true)
        
        self:ChangeModel(3, "")
        self:ChangeModel(4, "")
        self.conditionBgGo:SetActive(false)
        
    elseif state == LandState.Unaccessible then
        self:ChangeModel(1, config.model)
        if config~=nil and config.fire~=nil and config.fire~="" and DataCenter.LandManager:CheckIsNearestFire(config.big_zone)== true then
            self:ChangeModel(2, config.model_before, function(go)
                self:UpdateFace(go)
                if go~=nil then
                    local position = go.transform.position
                    if config~=nil then
                        DataCenter.LandManager:CheckShowFireLock(config.order,position)
                    end
                end
            end)
            self:ChangeModel(3, "")
        else
            self:ChangeModel(2, config.model_normal, function(go)
                self:UpdateFace(go)
                if string.IsNullOrEmpty(config.model_before) then
                    self:PlayAnim("born")
                end
            end)
            if DataCenter.LandManager.showBlockEffect then
                self:ChangeModel(3, config.model_effect)
            else
                self:ChangeModel(3, "")
            end
        end
        
        self:ChangeModel(4, "")
        self.conditionBgGo:SetActive(true)
        self.conditionText.text = DataCenter.LandManager:GetNeedStr(LandObjectType.Block, self.id)
        self.trigger.gameObject:SetActive(true)
        self.triggerTopGo:SetActive(false)
        
    elseif state == LandState.Accessible then
        self:ChangeModel(1, config.model)
        if config~=nil and config.fire~=nil and config.fire~="" and DataCenter.LandManager:CheckIsBigAreaUnlock(config.big_zone)==false then
            self:ChangeModel(2, config.model_before, function(go)
                self:UpdateFace(go)
                if go~=nil then
                    local position = go.transform.position
                    if config~=nil then
                        DataCenter.LandManager:CheckShowFireUnlockHud(config.order,position)
                    end
                end
            end)
            if DataCenter.LandManager.isFireInClick == config.order then
                self:ChangeModel(3, "fire_box_effect")
            else
                self:ChangeModel(3, "")
            end
            
            self:ChangeModel(4, "")
        else
            self:ChangeModel(2, config.model_normal, function(go)
                self:UpdateFace(go)
                if string.IsNullOrEmpty(config.model_before) then
                    self:PlayAnim("born")
                end
            end)
            if DataCenter.LandManager.showBlockEffect then
                self:ChangeModel(3, config.model_effect)
                if config.type == LandBlockType.Pve then
                    self:ChangeModel(4, "Eff_dafuw_jiaozhan_X")
                elseif config.type == LandBlockType.Jump then
                    self:ChangeModel(4, "")
                else

                    self:ChangeModel(4, "Eff_dafuw_shou")
                end
            else
                self:ChangeModel(3, "")
                self:ChangeModel(4, "")
            end
        end
        self.conditionBgGo:SetActive(false)
        self.trigger.gameObject:SetActive(true)
        self.triggerTopGo:SetActive(true)
        
    elseif state == LandState.Cleared then
        self:ChangeModel(1, config.model)
        if config.reward_model ~= nil and config.reward_model ~= "" then
            self:ChangeModel(2, config.reward_model, function(go) self:UpdateFace(go)

            end)
            if config.reward_effect ~= nil and config.reward_effect ~= "" then
                self:ChangeModel(3, config.reward_effect, function(go)
                    local rot = 0
                    if config.reward_face ~= nil and config.reward_face ~= "" then
                        rot = tonumber(config.reward_face)
                    end
                    go.transform.rotation = Quaternion.Euler(0, rot, 0)
                end)
            else
                self:ChangeModel(3, "")
            end
            
            self.triggerTopGo:SetActive(true)
            self:ChangeModel(4, "Eff_dafuw_shou")
            self.trigger.gameObject:SetActive(true)
        else
            self:ChangeModel(2, config.model_normal, function(go) self:UpdateFace(go)

            end)
            self:ChangeModel(3, "")
            self:ChangeModel(4, "")
            self.triggerTopGo:SetActive(false)
            self.trigger.gameObject:SetActive(false)
        end
        self.conditionBgGo:SetActive(false)
    elseif state == LandState.Unlocked then
        self:ChangeModel(1, config.model)
        if DataCenter.LandManager.showBlockEffect then
            self:ChangeModel(2, "LandMan", function(go)
                self:FaceToNext(go)
                self:RefreshLight()
            end)
        else
            self:ChangeModel(2, "")
        end
        self:ChangeModel(3, "")
        self:ChangeModel(4, "")
        
        self.conditionBgGo:SetActive(false)
        self.trigger.gameObject:SetActive(false)
        
    else
        self:ChangeModel(1, config.model)
        self:ChangeModel(2, "")
        self:ChangeModel(3, "")
        self:ChangeModel(4, "")
        self.conditionBgGo:SetActive(false)
        self.trigger.gameObject:SetActive(false)
    end
end

local function ChangeModelCallbackInternal(self, index)
    base.ChangeModelCallbackInternal(self, index)
    
    if self.modelReqs[index] == nil or IsNull(self.modelReqs[index].gameObject) then
        return
    end
    
    local go = self.modelReqs[index].gameObject
    local tf = go.transform
    tf:SetParent(self.rootGo.transform)
    tf.localScale = Vector3.one
    tf.localPosition = Vector3.zero
    tf.localRotation = Quaternion.identity
end

local function OnClick(self)
    base.OnClick(self)

    if DataCenter.LandManager.isPlayingUnlock then
        return
    end

    local fogType = DataCenter.LandManager:GetFogType(self.objType, self.id)
    local state = DataCenter.LandManager:GetState(self.objType, self.id)
    local config = DataCenter.LandManager:GetConfig(self.objType, self.id)
    Logger.Log("LandBlockObject id = " .. self.id .. ", state = " .. state .. ", fogType = " .. fogType)
    
    if fogType == LandFogType.Fog then
        return
    end

    if state == LandState.Unexplored then
        if not string.IsNullOrEmpty(config.model_before) then
            local pos = self.transform.position
            pos.y = pos.y + 3
            CS.SceneManager.World:AutoLookat(pos, CS.SceneManager.World.InitZoom, LookAtFocusTime, function()
                if not IsNull(self.gameObject) then
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UILandBlock, self.id, pos)
                end
            end)
        end
    elseif state == LandState.Unaccessible then
        local str = DataCenter.LandManager:GetNeedStr(LandObjectType.Block, self.id)
        UIUtil.ShowTips(str)

        -- 指向任务
        if not DataCenter.LandManager:CheckNeedChapter(LandObjectType.Block, self.id) or
                not DataCenter.LandManager:CheckNeedQuest(LandObjectType.Block, self.id) then
            local param = {}
            param.positionType = PositionType.Screen
            param.position = UIUtil.GetUIMainSavePos(UIMainSavePosType.Quest)
            DataCenter.ArrowManager:ShowArrow(param)
        end
    elseif state == LandState.Accessible then
        local cur = DataCenter.LandManager:GetCurrentOrder(LandObjectType.Zone)
        if config.zone> cur+1 then
            UIUtil.ShowTipsId(470503)
            local curBlock = DataCenter.LandManager:GetCurrentOrder(LandObjectType.Block)
            local finishConfig = DataCenter.LandManager:GetConfigByOrder(LandObjectType.Block, curBlock)
            if finishConfig~=nil then
                local obj = DataCenter.LandManager:GetObject(LandObjectType.Zone,finishConfig.zone)
                if obj ~= nil then
                    self.obj = obj:GetBubbleObj()
                    if self.obj~=nil then
                        local pos = self.obj.transform.position
                        GoToUtil.GotoCityPos(pos,CS.SceneManager.World.Zoom, LookAtFocusTime, function()
                            local param = {}
                            param.positionType = PositionType.World
                            param.position = pos
                            DataCenter.ArrowManager:ShowArrow(param)
                        end)
                    end
                end
            end
        else
            if config~=nil and config.fire~=nil and config.fire~="" and DataCenter.LandManager:CheckIsBigAreaUnlock(config.big_zone)==false then
                local resType = 0
                local count = 0
                local str = DataCenter.LandManager:GetBigZoneUnlockCost(config.big_zone)
                local resArr = string.split(str,";")
                if #resArr ==2 then
                    resType = toInt(resArr[1])
                    count= toInt(resArr[2])
                end
                local have = LuaEntry.Resource:GetCntByResType(resType)
                local enough = have >= count
                if enough then
                    EventManager:GetInstance():Broadcast(EventId.LandBlockOnClickFire,config.order)
                    TimerManager:GetInstance():DelayInvoke(function()
                        local obj = DataCenter.LandManager:GetCurrentObject(LandObjectType.Block)
                        if obj~=nil then
                            obj:PlayAnim("fire")
                        end

                        if DataCenter.LandManager.isFireInClick == config.order then
                            self:ChangeModel(3, "fire_box_effect")
                        else
                            self:ChangeModel(3, "")
                        end
                    end,1)

                    local bigZoneId = config.big_zone
                    TimerManager:GetInstance():DelayInvoke(function()
                        DataCenter.LandManager:SendUnlockZoneFog(bigZoneId)
                    end, 2)
                else
                    local lackTab = {}
                    local param = {}
                    param.type = ResLackType.Res
                    param.id = resType
                    param.targetNum = count
                    table.insert(lackTab, param)
                    GoToResLack.GoToItemResLackList(lackTab)
                end
            else
                DataCenter.LandManager:EnterBlock(self.id)
            end
        end
        
        
    elseif state == LandState.Cleared then
        DataCenter.LandManager:SendUnlockBlock(self.id)
    end

    local needParam = {}
    needParam.landId = self.id
    DataCenter.GuideManager:SetCompleteNeedParam(needParam)
    DataCenter.GuideManager:CheckGuideComplete()
    DataCenter.GuideManager:SetCompleteNeedParam(needParam)
    DataCenter.GuideManager:CheckDoTriggerGuide(GuideTriggerType.ClickLand, tostring(self.id))
end

local function HaveAnim(self, animName)
    local animationList = self.transform:GetComponentsInChildren(typeof(CS.SimpleAnimation))
    if animationList~=nil then
        for i = 0, animationList.Length-1 do
            local item = animationList[i]
            if item~=nil and item:GetState(animName) ~= nil then
                return true
            end
        end
    end
    local animatorList = self.transform:GetComponentsInChildren(typeof(CS.UnityEngine.Animator))
    if animatorList~=nil then
        for i = 0, animatorList.Length-1 do
            local item = animatorList[i]
            if item~=nil and item:HasState(0, animName) then
                return true
            end
        end
    end
    return false
end

local function PlayAnim(self, animName)
    local animationList = self.transform:GetComponentsInChildren(typeof(CS.SimpleAnimation))
    if animationList~=nil then
        for i = 0, animationList.Length-1 do
            local item = animationList[i]
            if item~=nil and item:GetState(animName) ~= nil then
                item:Play(animName)
                return item:GetClipLength(animName)
            end
        end
    end
    local animatorList = self.transform:GetComponentsInChildren(typeof(CS.UnityEngine.Animator))
    if animatorList~=nil then
        for i = 0, animatorList.Length-1 do
            local item = animatorList[i]
            if item~=nil and item:HasState(0, animName) then
                item:Play(animName, 0, 0)
                return
            end
        end
    end
end

local function UpdateFace(self, go)
    local config = DataCenter.LandManager:GetConfig(self.objType, self.id)
    local state = DataCenter.LandManager:GetState(self.objType, self.id)
    if config.face == "" then
        if (config.type == LandBlockType.Pve or config.type == LandBlockType.Resident) then
            if (state == LandState.Accessible or state == LandState.Cleared) then
                self:FaceToPrior(go)
            else
                go.transform.rotation = Quaternion.Euler(0, 180, 0)
            end
        else
            self:FaceToPrior(go)
        end
        
    else
        if (state == LandState.Accessible or state == LandState.Cleared) and
           (config.type == LandBlockType.Pve or config.type == LandBlockType.Resident)
        then
            self:FaceToPrior(go)
        else
            go.transform.rotation = Quaternion.Euler(0, tonumber(config.face), 0)
        end
    end
end

local function FaceToPrior(self, go)
    -- 朝向上一个地块
    local priorId = DataCenter.LandManager:GetPrior(LandObjectType.Block, self.id)
    if priorId then
        local priorPos = DataCenter.LandManager:GetObjectPos(LandObjectType.Block, priorId)
        go.transform:LookAt(priorPos, Vector3.up)
    end
end

local function FaceToNext(self, go)
    -- 朝向下一个地块
    local nextId = DataCenter.LandManager:GetNext(LandObjectType.Block, self.id)
    if nextId then
        local nextPos = DataCenter.LandManager:GetObjectPos(LandObjectType.Block, nextId)
        go.transform:LookAt(nextPos, Vector3.up)
    end
end

local function HideModels(self)
    --self:ChangeModel(1, "")
    self:ChangeModel(2, "")
    self:ChangeModel(3, "")
    self:ChangeModel(4, "")
end

local function RefreshLight(self)
    local lightTf = self.transform:Find("Root/LandMan/RedShirt_Man_game/Hero_RedShirt_Man_skin/guadian_R/D_huoba_game/atkEffect/Eff_Fire_huoba/Point Light")
    if lightTf then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local dayNight = DataCenter.VitaManager:GetDayNight(curTime)
        lightTf.gameObject:SetActive(dayNight == VitaDefines.DayNight.Night)
    end
end
local function PlayRemoveAnim(self,delayTime)
    TimerManager:GetInstance():DelayInvoke(function()
        --移动镜头
        GoToUtil.GotoCityPos(self.transform.position, CS.SceneManager.World.Zoom, LandZoneFlipPerBlockTime)
        local meshRenderer = self.gameObject:GetComponentsInChildren(typeof(CS.UnityEngine.MeshRenderer), true)
        if meshRenderer~=nil then
            for i = 0, meshRenderer.Length-1 ,1 do
                local item = meshRenderer[i]
                item.gameObject:SetActive(true)
            end
        end
        SoundUtil.PlayEffect(SoundAssets.Music_Effect_Pve_Open_Block)
        local time = self:PlayAnim("remove")
        if time ~= nil then
            DataCenter.WaitTimeManager:AddOneWait(time, function()
                self:ChangeModel(1, "")
                self:AddSmokeEffect()
            end)
        end
    end,delayTime)
end

function LandBlockObject:AddSmokeEffect()
    self.effect = LandLockSmokeEffect.New()
    local param = {}
    param.callback = self.effect_callback
    param.position = self.transform.position
    self.effect:ReInit(param)
end

function LandBlockObject:RemoveSmokeEffect()
    if self.effect ~= nil then
        self.effect:Destroy()
        self.effect = nil
    end
end
function LandBlockObject:EffectCallBack()
    self:RemoveSmokeEffect()
end

LandBlockObject.__init = __init
LandBlockObject.CreateCallbackInternal = CreateCallbackInternal
LandBlockObject.Refresh = Refresh
LandBlockObject.ChangeModelCallbackInternal = ChangeModelCallbackInternal
LandBlockObject.OnClick = OnClick

LandBlockObject.HaveAnim = HaveAnim
LandBlockObject.PlayAnim = PlayAnim
LandBlockObject.UpdateFace = UpdateFace
LandBlockObject.FaceToPrior = FaceToPrior
LandBlockObject.FaceToNext = FaceToNext
LandBlockObject.HideModels = HideModels
LandBlockObject.RefreshLight = RefreshLight
LandBlockObject.PlayRemoveAnim =PlayRemoveAnim
return LandBlockObject
