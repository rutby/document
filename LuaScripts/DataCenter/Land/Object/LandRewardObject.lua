---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2024/1/24 17:43
---

local base = require "DataCenter.Land.Object.LandObjectBase"
local LandRewardObject = BaseClass("LandRewardObject", base)

local function __init(self, objType, id)
    base.__init(self, objType, id)
    self.changeModelTotalCount = 1
end

local function Destroy(self)
    base.Destroy(self)
    DataCenter.CityHudManager:Destroy(self.id, CityHudType.LandZoneBubble)
end

local function CreateCallbackInternal(self)
    base.CreateCallbackInternal(self)
end

local function Refresh(self)
    base.Refresh(self)

    local config = DataCenter.LandManager:GetConfig(self.objType, self.id)
    local state = DataCenter.LandManager:GetState(self.objType, self.id)
    if state == LandState.Accessible then
        -- 可领取
        self:ChangeModel(1, config.model)
        self.trigger.gameObject:SetActive(true)

        local hudParam = {}
        hudParam.uuid = self.id
        hudParam.type = CityHudType.LandZoneBubble
        hudParam.pos = self.trigger.transform.position + Vector3.New(0, 1.5, 0)
        hudParam.offset = Vector3.New(0, 80, 0)
        hudParam.onClick = BindCallback(self, self.OnClick)
        hudParam.location = CityHudLocation.UI
        DataCenter.CityHudManager:Create(hudParam)
    elseif state == LandState.Cleared then
        -- 不可领取
        self:ChangeModel(1, "")
        self.trigger.gameObject:SetActive(false)
    end
end

local function ChangeModelCallbackInternal(self, index)
    base.ChangeModelCallbackInternal(self, index)

    if self.modelReqs[index] == nil or IsNull(self.modelReqs[index].gameObject) then
        return
    end

    local go = self.modelReqs[index].gameObject
    local tf = go.transform
    tf:SetParent(self.rootGo.transform)
    tf.localScale = Vector3.one
    tf.localPosition = Vector3.zero
    tf.rotation = Quaternion.Euler(0, 180, 0)
end

local function OnClick(self)
    base.OnClick(self)

    if DataCenter.LandManager.isPlayingUnlock then
        return
    end

    local config = DataCenter.LandManager:GetConfig(self.objType, self.id)
    local state = DataCenter.LandManager:GetState(self.objType, self.id)
    Logger.Log("LandRewardObject id = " .. self.id .. ", state = " .. state)
    if state == LandState.Accessible then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIVitaResidentChange, { anim = true }, VitaDefines.ComeType.LandReward, config.people, function()
            DataCenter.LandManager:SendReceiveReward(self.id)
        end)
    end
end

LandRewardObject.__init = __init
LandRewardObject.Destroy = Destroy
LandRewardObject.CreateCallbackInternal = CreateCallbackInternal
LandRewardObject.Refresh = Refresh
LandRewardObject.ChangeModelCallbackInternal = ChangeModelCallbackInternal
LandRewardObject.OnClick = OnClick

return LandRewardObject
