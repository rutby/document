---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Admin.
--- DateTime: 2022/12/27 11:10
---

---@class HeroSkillTemplate
---@field public id number
---@field public name string
---@field public desc string
---@field public icon string
---@field public type number --已废弃
---@field public apType number --主被动
---@field public triggerType number --触发类型
---@field public actionType number --作用类型
---@field public group number
---@field public maxLevel number
---@field public enhance_fragment number
---@field public level number
---@field public damage1 number
---@field public damage2 number
---@field public damage3 number
---@field public power number[]
---@field public buff_param number
---@field public buff_condition number
---@field public troop_condition number
---@field public pos_num number
---@field public pos_condition number
---@field public is_normal_attack boolean
---@field public bullet number
---@field public pvp_bullet number
---@field public attack_interval number
---@field public pre_cd number
---@field public other_condition number
---@field public priority number
---@field public attack_range number
---@field public skill_effect number
---@field public skin_skill_effect table
---@field public target_type number[]
---@field public buffId number[] @--所有buff
---@field public buff number @--等于buffId[1]
---@field public pvp_damage_type number
---@field public horizontal_speed number
---@field public horizontal_slowness number
---@field public pvp_cast_count number
---@field public cast_count number @--技能释放波次（前端）
---@field public cast_interval number @--技能释放间隔（前端）
---@field public anim_normal string @--标准技能动作(pvp)
---@field public anim_move string   @--移动技能动作(pvp)
---@field public pve_animation string @--标准技能动作(通用pve)
---@field public pve_animation_move string @--移动技能动作(通用pve)
---@field public matching_animation string @--标准技能动作(前进pve)
---@field public matching_animation_move string @--移动技能动作(前进pve)
---@field public animation_time number   @--技能动作时长

local HeroSkillTemplate = BaseClass("HeroSkillTemplate")
local Localization = CS.GameEntry.Localization

function HeroSkillTemplate:__init()
    self.id = 0
    self.name = ""
    self.desc = ""
    self.icon = ""
    self.type = 0
    self.apType = 0--主被动
    self.triggerType = 0--触发类型
    self.actionType = 0--作用类型
    self.group = 0
    self.maxLevel = 0
    -- self.levelup_consume_coins = {}
    self.levelup_consume_sp = {}
    self.enhance_fragment = 0
    self.level = 0
    self.enhance_desc_pre = {}
    self.sorted_enhance_desc_keys = {}
    self.property = {}
    self.power = {}
    self.is_normal_attack = false
    self.bullet = 0
    self.attack_interval = 0
    self.pre_cd = 0
    self.other_condition = 0
    self.priority = 0
    self.attack_range = 0
    self.skill_effect = 0
    self.skin_skill_effect = {}
    self.target_type = {}
    self.damage1= 0
    self.damage2= 0
    self.damage3= 0
    self.buff= 0
    self.damageParams = {}
    self.buffId= {}
    self.effectInCity = nil
    self.star = 0
    self.needRank = 0
    self.maxStar = 0
    self.skill_desc_para = {}
    self.cast_count = 0
    self.cast_interval = 0
    self.anim_normal = ""
    self.anim_move = ""
    self.pve_animation = ""
    self.pve_animation_move = ""
    self.matching_animation = ""
    self.matching_animation_move = ""
end

function HeroSkillTemplate:__delete()
    self.id = nil
    self.name = nil
    self.desc = nil
    self.icon = nil
    self.type = nil
    self.group = nil
    self.maxLevel = nil
    -- self.levelup_consume_coins = nil
    self.levelup_consume_sp = nil
    self.enhance_fragment = nil
    self.level = nil
    self.enhance_desc_pre = nil
    self.sorted_enhance_desc_keys = nil
    self.property = nil
    self.damage1 = nil
    self.damage2 = nil
    self.damage3 = nil
    self.damageParams = nil
    self.power = nil
    self.buff = nil
    self.subSkills = nil
    self.buffId = nil
    self.effectInCity = nil
    self.star = nil
    self.needRank = nil
    self.maxStar = nil
    self.skill_desc_para = nil
    self.cast_count = nil
    self.cast_interval = nil
    self.anim_normal = nil
    self.anim_move = nil
    self.pve_animation = nil
    self.pve_animation_move = nil
    self.matching_animation = nil
    self.matching_animation_move = nil
end

function HeroSkillTemplate:InitConfig(row)
    --容错
    if row == nil then
        return
    end

    self.id = tonumber(row:getValue("id")) or 0
    self.name = row:getValue("name") or ""
    self.desc = row:getValue("desc") or ""
    self.icon = row:getValue("icon") or ""
    self.type = tonumber(row:getValue("type")) or 0
    self.apType = tonumber(row:getValue("apType")) or 0
    self.triggerType = tonumber(row:getValue("triggerType")) or 0
    if self.triggerType==SkillTriggerType.Cast then
        self.triggerParam = row:getValue("triggerParam")
        self.triggerParam = tonumber(self.triggerParam) or 0
    end
    -- 表里好像没看到 actionType 字段，后面兴许会加上
    self.actionType = tonumber(row:getValue("actionType")) or tonumber(row:getValue("type")) or SkillActionType.Bullet
    if self.actionType==SkillActionType.Summon then
        local actionParam = row:getValue("actionParam")
        self.actionParam = string.split(actionParam,",")
        for i = 1, #self.actionParam do
            self.actionParam[i]=tonumber(self.actionParam[i])
        end
    end
    self.group = tonumber(row:getValue("group")) or 0
    self.maxLevel = tonumber(row:getValue("maxLevel")) or 0
    -- self.levelup_consume_coins = row:getValue("levelup_consume_coins") or {}
    self.levelup_consume_sp = row:getValue("levelup_consume_sp") or {}
    self.enhance_fragment = tonumber(row:getValue("enhance_fragment")) or 0
    self.level = tonumber(row:getValue("level")) or 0
    self.enhance_desc_pre = row:getValue("enhance_desc_pre") or {}
    self.pvp_damage_type = tonumber(row:getValue("pvp_damage_type")) or 0
    self.horizontal_speed = tonumber(row:getValue("horizontal_speed")) or 20
    self.horizontal_slowness = 1 / self.horizontal_speed
    self.pvp_pos_num = tonumber(row:getValue("pvp_pos_num")) or 0--子弹型技能最大目标数
    self.pvp_cast_count = tonumber(row:getValue("pvp_cast_count")) or 0--技能段数（后端）=波数*每波子弹数
    self.sorted_enhance_desc_keys = {}
    if self.enhance_desc_pre ~= nil then
        for k, v in pairs(self.enhance_desc_pre) do
            local enhanceEffect = {}
            enhanceEffect.star = k
            enhanceEffect.effect = Localization:GetString(v)
            table.insert(self.sorted_enhance_desc_keys, enhanceEffect)
        end
        table.sort(self.sorted_enhance_desc_keys,function(a,b) return a.star < b.star end)
    end

    self.buffId = {}
    local buffStr=string.split(tostring(row:getValue("buff")), "|")
    for k,v in pairs(buffStr) do
        table.insert(self.buffId,tonumber(v))
    end
    
    -- self.property = row:getValue("property") or {}

    local propertyStr = row:getValue("property")
    self.propertyStr = propertyStr
    if not string.IsNullOrEmpty(propertyStr) then
        local properties = {}
        local propertiesDiffValue = {}
        local propertyArray = string.split(propertyStr, "|")
        for k, v in pairs(propertyArray) do
            local propertyData = string.split(v, ";")
            if propertyData == nil or table.count(propertyData) < 2 then
                goto continue
            end

            local property = {}
            property.id = tonumber(propertyData[1])
            property.value = tonumber(propertyData[2])

            propertiesDiffValue[property.id] = 0
            if propertyData[3] then
                propertiesDiffValue[property.id] = tonumber(propertyData[3])
            end

            table.insert(properties, property)
            ::continue::
        end
        self.property = properties
        self.propertiesDiffValue = propertiesDiffValue
    end
    self.is_normal_attack = tonumber(row:getValue("is_normal_attack")) == 1
    self.bullet = tonumber(row:getValue("bullet")) or 0
    self.pvp_bullet = tonumber(row:getValue("pvp_bullet")) or 0
    self.pvp_bullet = self.pvp_bullet==0 and self.bullet or self.pvp_bullet
    self.attack_interval = tonumber(row:getValue("attack_interval")) or 0
    self.attack_interval = self.attack_interval * 0.001
    self.pre_cd = tonumber(row:getValue("pre_cd")) or 0
    self.pre_cd = self.pre_cd * 0.001
    self.priority = tonumber(row:getValue("priority")) or 0

    local strings = string.split(row:getValue("target_type"), "|")
    for k, v in ipairs(strings) do
        local target_type
        local typeNum = tonumber(v)
        if typeNum==4 then--阵营4等价于队友和自己的并集
            target_type={1,3}
        else
            target_type={typeNum}
        end
        --local subStrings = string.split(v, ";")
        --for _, v2 in ipairs(subStrings) do
        --    table.insert(target_type,tonumber(v2))
        --end
        if k==1 then
            self.target_type = target_type
        else
            if not self.subSkills then
                self.subSkills={}
            end
            local subSkill={}
            subSkill.isSubSkill=true
            setmetatable(subSkill,{__index=self})
            table.insert(self.subSkills,subSkill)
            subSkill.target_type = target_type
        end
    end

    self:ParseForSubSkill(row,"pos_condition")
    self:ParseForSubSkill(row,"pos_num")
    self:ParseForSubSkill(row,"troop_condition")
    self:ParseForSubSkill(row,"other_condition")
    self:ParseForSubSkill(row,"buff")

    self.buff_condition = tonumber(row:getValue("buff_condition")) or 0
    self.buff_param = tonumber(row:getValue("buff_param")) or 0
    self.attack_range = tonumber(row:getValue("attack_range")) or 0
    self.skill_effect = tonumber(row:getValue("skill_effect")) or 0
    self.skin_skill_effect = row:getValue("skin_skill_effect")
    self.damage_ratio = tonumber(row:getValue("damage_ratio")) or 1
    self.damage_to_monster = tonumber(row:getValue("damage_to_monster")) or 1

    self.damageParams = {}
    self.damageDiffValues = {}
    local damageRateStrArr = row:getValue("bullet_damage_rate")
    if damageRateStrArr and #damageRateStrArr > 0 then
        for _, damageRateStr in ipairs(damageRateStrArr) do
            local damageRateArr = string.split(damageRateStr, ";")
            local damage = tonumber(damageRateArr[1]) or 0
            local damageDiffValue = tonumber(damageRateArr[2]) or 0
            table.insert(self.damageParams, damage)
            table.insert(self.damageDiffValues, damageDiffValue)
        end
    end


    self.power = row:getValue("power") or {}
    self.time_stop_duration = tonumber(row:getValue("cast_effect_delay_duration")) or 0
    self.time_stop_duration = self.time_stop_duration * 0.001
    

    -- 分割符: ; |
    self.effectInCity = {}
    self.effectInCityDiffValues = {}
    local effectInCityStr = row:getValue("effect_incity")
    if not string.IsNullOrEmpty (effectInCityStr) then
        local effectInCityArray = string.split(effectInCityStr, "|")
        for k, v in pairs(effectInCityArray) do
            local effectInCityData = string.split(v, ";")
            if effectInCityData == nil or table.count(effectInCityData) < 3 then
                goto continue
            end

            local effectInCity = {}
            effectInCity.id = tonumber(effectInCityData[1])
            effectInCity.value = tonumber(effectInCityData[2])

            self.effectInCityDiffValues[effectInCity.id] = 0
            if effectInCityData[3] then
                self.effectInCityDiffValues[effectInCity.id] = tonumber(effectInCityData[3])
            end

            table.insert(self.effectInCity, effectInCity)
            ::continue::
        end
    end

    self.star = tonumber(row:getValue("star")) or 0
    self.needRank = tonumber(row:getValue("need_rank")) or 0
    self.maxStar = tonumber(row:getValue("maxStar")) or 0

    self.enhanceEffectKey = row:getValue("level_up_desc") or ""
    self.enhanceEffectParams = row:getValue("level_up_desc_param") or {}

    local skill_desc_para = row:getValue("desc_para")
    self.skill_desc_para = {}
    if not string.IsNullOrEmpty(skill_desc_para) then
        local skill_desc_para_array = string.split(skill_desc_para, "|")
        for k, v in pairs(skill_desc_para_array) do
            local skill_desc_para_data = string.split(v, ",")
            if skill_desc_para_data == nil or table.count(skill_desc_para_data) < 2 then
                goto continue
            end

            local skill_desc_para = {}
            skill_desc_para.formatType = tonumber(skill_desc_para_data[1])
            skill_desc_para.baseValue = tonumber(skill_desc_para_data[2])
            skill_desc_para.isConst = string.IsNullOrEmpty(skill_desc_para_data[3])
            if skill_desc_para.isConst == false then
                skill_desc_para.diffValue = tonumber(skill_desc_para_data[3])
            end

            table.insert(self.skill_desc_para, skill_desc_para)
            ::continue::
        end
    end
    
    self.cast_count = tonumber(row:getValue("cast_count")) or 0
    self.cast_interval = tonumber(row:getValue("cast_interval")) or 0
    self.cast_interval = self.cast_interval * 0.001
    
    local animation = row:getValue("animation")
    local animation_move = row:getValue("animation_move")
    local pveAnimation = row:getValue("pve_animation")
    local pveAnimationMove = row:getValue("pve_animation_move")
    local matchingAnimation = row:getValue("matching_animation")
    local matchingAnimationMove = row:getValue("matching_animation_move")
    self.animation_time = (tonumber(row:getValue("animation_time")) or 0) * 0.001
    if string.IsNullOrEmpty(animation) then
        --self.anim_normal = AnimName.Attack
        self.anim_normal = nil
    else
        self.anim_normal = animation
    end

    if string.IsNullOrEmpty(animation_move) then
        --self.anim_move = AnimName.AttackMove
        self.anim_move = nil
    else
        self.anim_move = animation_move
    end

    if string.IsNullOrEmpty(pveAnimation) then
        self.pve_animation = nil
    else
        self.pve_animation = pveAnimation
    end

    if string.IsNullOrEmpty(pveAnimationMove) then
        self.pve_animation_move = nil
    else
        self.pve_animation_move = pveAnimationMove
    end

    if string.IsNullOrEmpty(matchingAnimation) then
        self.matching_animation = nil
    else
        self.matching_animation = matchingAnimation
    end

    if string.IsNullOrEmpty(matchingAnimationMove) then
        self.matching_animation_move = nil
    else
        self.matching_animation_move = matchingAnimationMove
    end
end

function HeroSkillTemplate:GetSortedEnhanceDescKeys()
    if not DataCenter.HeroSkillTemplateManager:SkillGroupHasNewEnhanceEffect(self.group)then--string.IsNullOrEmpty(self.enhanceEffectKey) then
        return self.sorted_enhance_desc_keys
    else
        return DataCenter.HeroSkillTemplateManager:GetSkillEnhanceEffectByGroup(self.group)
    end
end

function HeroSkillTemplate:ParseForSubSkill(row,fieldStr)
    local strings = string.split(tostring(row:getValue(fieldStr)), "|")
    for k, v in ipairs(strings) do
        if k==1 then
            self[fieldStr] = tonumber(v) or 0
        else
            self.subSkills[k-1][fieldStr] = tonumber(v) or 0
        end
    end
end

function HeroSkillTemplate:GetDescByLevel()
    local data = {}
    local dataCount = 0

    local effectNumberCount = self:GetSkillEffectNumbers()
    if effectNumberCount == 0 then
        return Localization:GetString(self.desc)
    else
        for i = 1, effectNumberCount do
            local value,result = self:GetSkillEffectByIndex(i)
            if value ~= nil and result == true then
                dataCount = dataCount + 1
                data[dataCount] = value
    
                if self.actionType == SkillActionType.Bullet then
                    data[dataCount] = string.format("%s%%",tostring(data[dataCount] * 100))
                elseif self.triggerType == SkillTriggerType.AlwaysInside then
                    local propertyId = self:GetPropertyEffectIdByIndex(i)
                    data[dataCount] = HeroUtils.GetFormattedPropertyValue(propertyId,data[dataCount])
                end
            end
        end
    
        local paramArray = CS.System.Array.CreateInstance(typeof(CS.System.String), dataCount)
        for k,v in pairs(data) do
            paramArray[k - 1] = tostring(v)
        end
    
        local resultStr = Localization:GetString(self.desc, paramArray)
        return resultStr
    end
end

function HeroSkillTemplate:GetSkillEffectNumbers()
    
    if self.actionType == SkillActionType.Bullet then
        return #self.damageParams
    elseif self.actionType == SkillActionType.Buff then
        return self:GetBuffEffectNumbers()
    elseif self.triggerType == SkillTriggerType.AlwaysInside then
        return table.count(self.property)
    elseif self.triggerType == SkillTriggerType.IdleOutside then
        return table.count(self.effectInCity)
    elseif self.triggerType == SkillTriggerType.AlwaysOutside then
        return table.count(self.property)
    end
end

function HeroSkillTemplate:GetBuffEffectNumbers()
    local ret = 0
    for k,buffId in pairs(self.buffId) do
        local buffMeta = DataCenter.LWBuffTemplateManager:GetTemplate(buffId)
        if buffMeta then
            ret = ret + table.count(buffMeta.para)
        end
    end
    return ret
end

function HeroSkillTemplate:IsCityIdleSkillType()
    local result = self.triggerType == SkillTriggerType.IdleOutside
    return result
end

function HeroSkillTemplate:GetAllDamage()
    local data = {}
    for i = 1, self:GetSkillEffectNumbers() do
        local value,result = self:GetSkillEffectByIndex(i)
        if value ~= nil and result == true then
            data[i] = value
        else
            data[i] = 0
        end
    end
    return data
end



function HeroSkillTemplate:GetSkillEffectByIndex(index)
    if self.actionType == SkillActionType.Bullet then
        return self:GetBulletDamageByLevelAndIndex(index)
    elseif self.actionType == SkillActionType.Buff then
        return self:GetBuff()
    elseif self.actionType == SkillActionType.Halo and self.triggerType == SkillTriggerType.AlwaysInside then
        return self:GetPropertyEffectByIndex(index)
    end
end


function HeroSkillTemplate:GetBuff()
    if self.buff ~= nil and self.buff > 0 then
        return self.buff, true
    else
        return 0, false
    end
    -- if self.buffList ~= nil then
    --     -- if table.containsKey(self.buffList, level) then
    --         return {result = true,value = self.buffList[index]}
    --     -- elseif table.containsKey(self.buffList, 1) then
    --     --     return {result = true,value = self.buffList[1]}
    --     -- end
    -- else
    --     return {result = false,value = 0}
    -- end
end

function HeroSkillTemplate:GetBulletDamageByLevelAndIndex(index)
    if index == 1 then
        -- if self.bulletDamageList1 ~= nil then
        --     if table.containsKey(self.bulletDamageList1) then
                return self.damage1,true
        --     elseif table.containsKey(self.bulletDamageList1, 1) then
        --         return {result = true,value = self.damage1}
        --     end
        -- else
        --     return {result = false,value = 0}
        -- end
    elseif index == 2 then
        -- if self.bulletDamageList2 ~= nil then
        --     if table.containsKey(self.bulletDamageList2, level) then
                return self.damage2,true
        --     elseif table.containsKey(self.bulletDamageList2, 1) then
        --         return {result = true,value = self.damage2}
        --     end
        -- else
        --     return {result = false,value = 0}
        -- end
    elseif index == 3 then
        -- if self.bulletDamageList3 ~= nil then
        --     if table.containsKey(self.bulletDamageList3, level) then
                return self.damage3,true
    --         elseif table.containsKey(self.bulletDamageList3, 1) then
    --             return {result = true,value = self.damage3}
    --         end
    --     else
    --         return {result = false,value = 0}
    --     end
    end
end

--- 获取技能效果Id
---@param index number
function HeroSkillTemplate:GetPropertyEffectIdByIndex(index)
    if self.property ~= nil and table.count(self.property) > 0 then
        if table.containsKey(self.property, index) then
            return self.property[index].id,true
        elseif table.containsKey(self.property, 1) then
            return self.property[1].id,true
        end
    else
        return 0,false
    end
end

--- 获取技能效果
---@param index number
function HeroSkillTemplate:GetPropertyEffectByIndex(index)
    if self.property ~= nil and table.count(self.property) > 0 then
        if table.containsKey(self.property, index) then
            return self.property[index].value,true
        elseif table.containsKey(self.property, 1) then
            return self.property[1].value,true
        end
    else
        return  0,false
    end
end

-- function HeroSkillTemplate:GetCostMoneyCount(level)
--     if self.levelup_consume_coins ~= nil and table.containsKey(self.levelup_consume_coins,level) then
--         return self.levelup_consume_coins[level]
--     end
--     return 0
-- end

function HeroSkillTemplate:GetCostSkillPointCount(level)
    if self.levelup_consume_sp ~= nil and table.containsKey(self.levelup_consume_sp,level) then
        return self.levelup_consume_sp[level]
    end
    return 0
end

function HeroSkillTemplate:GetCostFragmentCount()
    return self.enhance_fragment
end

--- 返回技能参数的格式化文字
---@param value number
---@param param1 number
function HeroSkillTemplate:GetFormattedEffectStr(value,param1)
    if self.actionType == SkillActionType.Bullet then
        return string.format("%.2f%%",value * 1.0 * 100)
    elseif self.actionType == SkillActionType.Halo or self.actionType == SkillActionType.Buff then
        local propertyId = param1
        return HeroUtils.GetFormattedPropertyValue(propertyId,value)
    else
        return tostring(value)
    end
end

--- 返回对应等级的技能效果，伤害类型
--- 技能伤害/效果 的配置，格式为   基础值;差值 ，最终值 = 基础值 + 当前技能等级*差值
function HeroSkillTemplate:GetDamageParam(index,level,formatted)
    if self.damageParams[index] then
        local baseValue = self.damageParams[index]
        local diffValue = self.damageDiffValues[index]
        local value = self.damage_ratio*(baseValue + level * diffValue)
        if formatted then
            return self:GetFormattedEffectStr(value,0),true
        else
            return value,true
        end
    end
    return 0,false
end

--- 返回Buff技能的对应id参数
---@param index number
---@param level number
function HeroSkillTemplate:GetBuffParam(index,level,formatted)
    if self.buffId then

        local buffIndex = 0
        local buffMeta = nil
        local startIndex = 0
        for __,buffId in pairs(self.buffId) do
            buffMeta = DataCenter.LWBuffTemplateManager:GetTemplate(buffId)
            if buffMeta then
                local buffParaCount = table.count(buffMeta.para)
                if index > startIndex + buffParaCount then
                    startIndex = startIndex + buffParaCount
                else
                    buffIndex = index - startIndex
                    break
                end
            end
        end

        -- local buffMeta = DataCenter.LWBuffTemplateManager:GetTemplate(self.buffId)
        if buffMeta and buffIndex ~= 0 then
            local para = buffMeta:GetParaByLevelIndex(level,buffIndex)
            ---TODO 缓存下来Buff的参数，从缓存中取对应位置参数
            if para then
                if formatted then
                    return self:GetFormattedEffectStr(para.value,para.key),true
                else
                    return para.value,true
                end
            end
        end
    end
    return 0,false
end


--- 返回Buff技能的对应id参数
---@param index number
---@param level number
function HeroSkillTemplate:GetPropertyParam(index,level,formatted)
    if not table.IsNullOrEmpty(self.property) then
        local property = self.property[index]
        if property then
            local id = property.id
            local value = property.value
            if self.propertiesDiffValue[id] then
                value = value + level * self.propertiesDiffValue[id]
            end
            if formatted then
                return self:GetFormattedEffectStr(value,id),true
            else
                return value,true
            end
        else
            return 0,false
        end
    else
        return 0,false
    end
end


--- 返回Property字典
---@param level number
function HeroSkillTemplate:GetPropertyDictByLevel(level)
    level = level or 0
    local ret = {}
    if self.property then
        for k,v in pairs(self.property) do
            local id = v.id
            local value = v.value
            if self.propertiesDiffValue[id] then
                value = value + level * self.propertiesDiffValue[id]
            end
            ret[id]=value
        end
    end
    return ret
end


---返回城内放置技能参数
---@param index number
---@param level number
---@param formatted boolean
function HeroSkillTemplate:GetEffectInCityParam(index,level,formatted)
    if not table.IsNullOrEmpty(self.effectInCity) then
        local effect = self.effectInCity[index]
        if effect then
            local value = effect.value
            if self.effectInCityDiffValues[index] then
                value = value + level * self.effectInCityDiffValues[index]
            end
            if formatted then
                return self:GetFormattedEffectStr(value,effect.id),true
            else
                return value,true
            end
        else
            return 0,false
        end
    else
        return 0,false
    end
end

function HeroSkillTemplate:GetSkillEffectByIndexAndLevel(index,level,formatted)
    if self.actionType == SkillActionType.Bullet then
        local value,result = self:GetDamageParam(index,level,formatted)
        return value,result
    elseif self.actionType == SkillActionType.Buff then
        local value,result = self:GetBuffParam(index,level,formatted)
        return value,result
    elseif self.triggerType == SkillTriggerType.AlwaysInside or self.triggerType == SkillTriggerType.AlwaysOutside then
        local value,result = self:GetPropertyParam(index,level,formatted)
        return value,result
    elseif self.triggerType == SkillTriggerType.IdleOutside then
        local value,result = self:GetEffectInCityParam(index,level,formatted)
        return value,result
    end
end

--- 返回技能所有参数
---@param level number
function HeroSkillTemplate:GetSkillEffects(level)

    local effectNumberCount = self:GetSkillEffectNumbers()
    local paras = {}
    for i=1,effectNumberCount do
        local value = self:GetSkillEffectByIndexAndLevel(i,level)
        if value ~= nil then
            table.insert(paras,value)
        end
    end
    return paras
end

function HeroSkillTemplate:GetSkillDescByLevel(level,containNextLevel,colorStr)

    if not table.IsNullOrEmpty(self.skill_desc_para) then
        local paras = {}
        for k,v in pairs(self.skill_desc_para) do
            local value = v.baseValue
            if not v.isConst then
                value = value + (level-1) * v.diffValue
            end
            local valueStr = HeroUtils.GetFormattedValue(v.formatType,value,false)
            local formattedValue = ""
            if containNextLevel and not v.isConst then
                local reachMaxLevel = level >= self.maxLevel
                if not reachMaxLevel then
                    --- 样式: 当前参数(->下一级参数)
                    local nextValue = v.baseValue + level * v.diffValue
                    local nextValueStr = HeroUtils.GetFormattedValue(v.formatType,nextValue,false)
                    formattedValue = CommonUtil.IsArabic() 
                            and string.format("<color=%s>(%s<-)%s</color>",colorStr,nextValueStr,valueStr)
                            or string.format("<color=%s>%s(->%s)</color>",colorStr,valueStr,nextValueStr)
                else
                    formattedValue =  string.format("<color=%s>%s</color>",colorStr,valueStr)
                end
            else
                formattedValue = string.format("<color=%s>%s</color>",colorStr,valueStr)
            end
            table.insert(paras,formattedValue)
        end
        local resultStr = Localization:GetString(self.desc, SafeUnpack(paras))
        return resultStr
    end

    local effectNumberCount = self:GetSkillEffectNumbers()
    if effectNumberCount == 0 or effectNumberCount == nil then
        return Localization:GetString(self.desc)
    else
        local dataCount = 0
        local data = {}
        for i = 1, effectNumberCount do
            local value,result = self:GetSkillEffectByIndexAndLevel(i,level,true)
            if result then
                dataCount = dataCount + 1
                data[dataCount] = tostring(value)
    
                if containNextLevel then
                    local reachMaxLevel = level >= self.maxLevel
                    if not reachMaxLevel then
                        --- 样式: 当前参数(->下一级参数)
                        local nextValue = self:GetSkillEffectByIndexAndLevel(i,level + 1,true)
                        data[dataCount] = CommonUtil.IsArabic() 
                                and string.format("<color=%s>(%s<-)%s</color>",colorStr,nextValue,value)
                                or string.format("<color=%s>%s(->%s)</color>",colorStr,value,nextValue)
                    else
                        data[dataCount] =  string.format("<color=%s>%s</color>",colorStr,value)
                    end
                else
                    data[dataCount] = string.format("<color=%s>%s</color>",colorStr,value)
                end
            end
        end
    
        -- 新规定 如果是伤害类技能，可能同时释放Buff，所以要加上Buff参数，伤害类参数Id段0-10，Buff参数Id段11以后
        if self.actionType == SkillActionType.Bullet then

            -- 填充伤害类参数
            if dataCount < 10 then
                for i = dataCount + 1, 10 do
                    dataCount = dataCount + 1
                    data[dataCount] = "0"
                end
            end

            local buffCount = self:GetBuffEffectNumbers()
            for i = 1, buffCount do
                local value,result = self:GetBuffParam(i,level,true)
                if result then
                    dataCount = dataCount + 1
                    data[dataCount] = tostring(value)
        
                    if containNextLevel then
                        local reachMaxLevel = level >= self.maxLevel
                        if not reachMaxLevel then
                            --- 样式: 当前参数(->下一级参数)
                            local nextValue = self:GetBuffParam(i,level + 1,true)
                            data[dataCount] = string.format("<color=%s>%s(->%s)</color>",colorStr,value,nextValue)
                        else
                            data[dataCount] =  string.format("<color=%s>%s</color>",colorStr,value)
                        end
                    else
                        data[dataCount] = string.format("<color=%s>%s</color>",colorStr,value)
                    end
                end
            end
        end

        local paramArray = CS.System.Array.CreateInstance(typeof(CS.System.String), dataCount)
        for k,v in pairs(data) do
            paramArray[k - 1] = tostring(v)
        end
    
        local resultStr = Localization:GetString(self.desc, paramArray)
        return resultStr
    end
end

--- 根据等级计算技能战力
---@param level number
function HeroSkillTemplate:GetPowerByLevel(level)
    --- 基础值+等级差值*等级
    local power = self.power[1] ---基础值
    local diff = self.power[2] ---等级差值
    if not power then
        power = 0
    end
    if diff then
        power = power + diff * level
    end
    return power
end

function HeroSkillTemplate:GetSkillEffect(appearanceId)
    if appearanceId then
        return self.skin_skill_effect[appearanceId] or self.skill_effect
    end
    
    return self.skill_effect
end

return HeroSkillTemplate
