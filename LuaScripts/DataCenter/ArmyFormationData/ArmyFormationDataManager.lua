---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/8/17 18:04
---
local rapidjson = require "rapidjson"
local util = require "Common.Tools.cjson.util"
local ArmyFormationDataManager = BaseClass("ArmyFormationDataManager");
local Setting = CS.GameEntry.Setting
local function __init(self)
    self.ArmyFormationList = {}
    self.serverArmyFormationList = {}
    self.ArmyListInIndex = {}
    self.FormationFormList = {}--存储编队模板
    self.DefenceFormationList ={}
    self.CrossDefenceFormationList = {}
    self.InvestigateFormationList = {}
    self.ResSupportFormationList = {}
    self.GolloesFormationList = {}
    self.tempArmyFormation = nil
    self.CostStaminaDome = 0
    self.CostStaminaBuild = 0
    self.CostStaminaMonster = 0
    self.CostStaminaBoss = 0
    self.CostStaminaPickGarbage =0
    self.preDetectEventBubbleShowState = false
    self.isPop = true   --集结弹出面板
    self.cacheTargetType = -1
end

local function __delete(self)
    self:DeleteTimer()
    self.ArmyFormationList = nil
    self.ArmyListInIndex = nil
    self.tempArmyFormation = nil
    self.InvestigateFormationList = nil
    self.ResSupportFormationList = nil
    self.GolloesFormationList = nil
    self.FormationFormList =nil
    self.preDetectEventBubbleShowState = nil
    self.isPop = nil
    self.cacheTargetType = -1
end

local function GetFormationFormDataByHeroUuid(self,uuid)
    for k, v in pairs(self.FormationFormList) do
        if v.heroes~=nil and v.heroes[uuid]~=nil then
            return v
        end
    end
    return nil
end
local function GetFormationModelFromJson(self)
    local path = util.GetPersistentDataPath()
    local name = path.."/".."formation_model.txt"
    local jsonStr = util.file_load(name)
    if jsonStr~=nil then
        local message = rapidjson.decode(jsonStr)
        if message~=nil then
            if message["formation_template"]~=nil then
                self.FormationFormList = {}
                table.walk(message["formation_template"],function (k,v)
                    local info = ArmyFormationInfo.New()
                    info:ParseData(v)
                    if info.uuid ~= nil and info.uuid~=0 then
                        self.FormationFormList[info.uuid] = info
                    end
                end)
            end
        end
        
    end
    EventManager:GetInstance():Broadcast(EventId.FormationInfoUpdate)
end
local function RefreshFormationModelToJson(self,tempArmyFormation)
    local path = util.GetPersistentDataPath()
    local name = path.."/".."formation_model.txt"
    table.walk(self.FormationFormList,function(k,v)
        if v.ownerUid == LuaEntry.Player.uid then
            if k~=tempArmyFormation.uuid then
                table.walk(tempArmyFormation.heroes,function(a,b)
                    if v.heroes[a]~=nil then
                        v.heroes[a] =nil 
                    end
                end)
                local maxNum = MarchUtil.GetMaxCanAddSoldierNum(v.heroes,v.index)
                --if v.maxNum == nil or v.maxNum>maxNum then
                    v.maxNum = maxNum
                --end
                local totalNum = 0
                local curSoldier = {}
                table.walksort(v.soldiers,function (leftKey,rightKey)
                    local aData = DataCenter.ArmyManager:FindArmy(leftKey)
                    local bData = DataCenter.ArmyManager:FindArmy(rightKey)
                    if aData~=nil and bData~=nil then
                        if aData.level ~= bData.level then
                            return aData.level > bData.level
                        end
                        return aData.id > bData.id
                    end
                    return false
                end, function (a,b)
                    if b>0 then
                        local addNum = math.min(maxNum-totalNum,b)
                        if addNum>0 then
                            curSoldier[a] = addNum
                            totalNum = totalNum + addNum
                        end
                    end
                end)
                v.soldiers = curSoldier
            end
        end
        
    end)
    local curMaxNum = MarchUtil.GetMaxCanAddSoldierNum(tempArmyFormation.heroes,tempArmyFormation.index)
    local curSoldierNum  =0
    table.walk(tempArmyFormation.soldiers, function (a,b)
        if b>0 then
            curSoldierNum = curSoldierNum + b
        end
    end)
    --if self.FormationFormList[tempArmyFormation.uuid]~=nil then
    --    local maxNum = self.FormationFormList[tempArmyFormation.uuid].maxNum
    --    if maxNum~=nil and maxNum>0 and curSoldierNum<curMaxNum then
    --        tempArmyFormation.maxNum = math.max(maxNum,curSoldierNum)
    --    else
    --        tempArmyFormation.maxNum = curMaxNum
    --    end
    --else
        tempArmyFormation.maxNum = curMaxNum
    --end
    self.FormationFormList[tempArmyFormation.uuid] = tempArmyFormation
    local obj = self:PackageFormationFormToSFSObj()
    local sendMessage = LuaEntry.DataConfig:CheckSwitch("world_auto_join_new_hero")
    if sendMessage then
        self:SendFormToServer()
    end
    local jsonStr = rapidjson.encode(obj)
    util.file_save(name,jsonStr)
end
local function SendFormToServer(self)
    local sfsObjList = {}
    if self.FormationFormList~=nil then
        table.walk(self.FormationFormList,function(k,v)
            if v.ownerUid == LuaEntry.Player.uid then
                local formationObj = SFSObject.New()
                formationObj:PutLong("uuid", v.uuid)
                local heroesArray = SFSArray.New()
                table.walk(v.heroes,function (a,b)
                    local obj = SFSObject.New()
                    obj:PutLong("heroUuid",a)
                    obj:PutInt("index", b)
                    heroesArray:AddSFSObject(obj)
                end)
                formationObj:PutSFSArray("heroInfos", heroesArray)
                table.insert(sfsObjList,formationObj)
            end
        end)
    end
    SFSNetwork.SendMessage(MsgDefines.SaveFormationTempHero,sfsObjList)
    
end
local function PackageFormationFormToSFSObj(self)
    local sfsObj = {}
    if self.FormationFormList~=nil then
        sfsObj["formation_template"]= {}
        table.walk(self.FormationFormList,function(k,v)
            local oneObj = {}
            oneObj["uuid"]=v.uuid
            oneObj["ownerUid"] =v.ownerUid
            oneObj["index"] = v.index
            oneObj["maxNum"] = v.maxNum
            oneObj["soldiers"] ={}
            oneObj["heroes"] ={}
            
            table.walk(v.soldiers,function (a,b)
                local obj = {}
                obj["armyId"] = a
                obj["count"]= b
                table.insert(oneObj["soldiers"],obj)
            end)
            table.walk(v.heroes,function (a,b)
                local obj = {}
                obj["heroUuid"] = a
                obj["index"]= b
                table.insert(oneObj["heroes"],obj)
            end)
            table.insert(sfsObj["formation_template"],oneObj)
        end)
    end
    return sfsObj
end
local function GetConfigData(self)
    local oneData = {}
    local maxAddEffect = LuaEntry.Effect:GetGameEffect(EffectDefine.STAMINA_MAX_LIMIT)
    local maxBase = LuaEntry.DataConfig:TryGetNum("car_stamina", "k1")
    oneData.FormationStaminaMax = maxBase+maxAddEffect
    local speedAddEffect = LuaEntry.Effect:GetGameEffect(EffectDefine.STAMINA_RECOVER_SPEED_ADD)
    local timeBase = LuaEntry.DataConfig:TryGetNum("car_stamina", "k2")
    oneData.FormationStaminaUpdateTime = timeBase/(1+(speedAddEffect/100))
    return oneData
end

local function SetCacheTargetType(self,targetType)
    self.cacheTargetType = targetType
end
local function GetMaxInvesFormationCount(self)
    return LuaEntry.Effect:GetGameEffect(EffectDefine.APS_SCOUT_FORMATION_SIZE)
end

local function InitArmyFormationListData(self,message)
    self:AddTimer()
    self:GetFormationModelFromJson()
    if message["army_formation"]~=nil then
        self.serverArmyFormationList = {}
        self.ArmyListInIndex = {}
        table.walk(message["army_formation"],function (k,v)
            local info = ArmyFormationInfo.New()
            info:ParseData(v)
            if info.uuid ~= nil and info.uuid~=0 then
                self.serverArmyFormationList[info.uuid] = info
                self.ArmyListInIndex[info.index] = info.uuid
            end
        end)
    end
    for k,v in pairs(self.serverArmyFormationList) do
        if self.ArmyFormationList[k] ==nil then
            self.ArmyFormationList[k] = v
        else
            local tempData = self.ArmyFormationList[k]
            tempData.state = v.state
            if v.state == ArmyFormationState.March then --已出征行军用服务器数据
                self.ArmyFormationList[k] = v
            end
        end
    end

    if message["defend_formation"]~=nil then
        self.DefenceFormationList = {}
        table.walk(message["defend_formation"],function (k,v)
            local info = ArmyFormationInfo.New()
            info:ParseData(v)
            if info.uuid ~= nil and info.uuid~=0 then
                self.DefenceFormationList[info.uuid] = info
            end
        end)
    end

    if message["cross_defend_formation"] ~= nil then
        self.CrossDefenceFormationList = {}
        table.walk(message["cross_defend_formation"],function (k,v)
            local info = ArmyFormationInfo.New()
            info:ParseData(v)
            if info.uuid ~= nil and info.uuid~=0 then
                self.CrossDefenceFormationList[info.uuid] = info
            end
        end)
    end

    if message["scout_formation"] ~= nil then
        self.InvestigateFormationList = {}
        table.walk(message["scout_formation"], function (k, v)
            local info = ArmyFormationInfo.New()
            info:ParseData(v)
            if info.uuid ~= nil and info.uuid ~= 0 then
                self.InvestigateFormationList[info.uuid] = info
            end
        end)
    end

    if message["resource_formation"] ~= nil then
        self.ResSupportFormationList = {}
        table.walk(message["resource_formation"], function (k, v)
            local info = ArmyFormationInfo.New()
            info:ParseData(v)
            if info.uuid ~= nil and info.uuid ~= 0 then
                self.ResSupportFormationList[info.uuid] = info
            end
        end)
    end
    if message["golloes_formation"] then
        self.GolloesFormationList = {}
        table.walk(message["golloes_formation"], function (k, v)
            local info = ArmyFormationInfo.New()
            info:ParseData(v)
            if info.uuid ~= nil and info.uuid ~= 0 then
                self.GolloesFormationList[info.uuid] = info
            end
        end)
    end
    EventManager:GetInstance():Broadcast(EventId.ArmyFormatUpdate)
end
local function ChangeFormationNameData(self,message)
    
    local uuid = message["uuid"]
    if self.ArmyFormationList[uuid]~= nil then
        self.ArmyFormationList[uuid]:SetName(message["name"])
    end
end
local function GetOneArmyInfoByUuid(self,uuid)
    return self.ArmyFormationList[uuid]
end
local function GetOneArmyInfoByIndex(self,index)
    return self:GetOneArmyInfoByUuid(self.ArmyListInIndex[index])
end
local function GetArmyFormationIdList(self)
    local keys = table.keys(self.ArmyFormationList)
    --table.walk(self.ArmyFormationList,function(k,v)
    --    Logger.Log("army fromation order"..k..";"..v.state)
    --end)
    table.sort(keys,function(a,b)
        return self.ArmyFormationList[a].index < self.ArmyFormationList[b].index
    end)
    return keys
    
end
local function GetAlreadySetCountInArmyFormation(self)
    local alreadySetCount = 0
    table.walk(self.ArmyFormationList,function(k,v)
        if v.state == ArmyFormationState.March then
            alreadySetCount = alreadySetCount+1
        end
    end)
    return alreadySetCount
end

local function GetCurStaminaByUuid(self,uuid)
    return LuaEntry.Player:GetCurStamina()
end
--local function OnBeginSetFormation(self,uuid)
--    self.tempArmyFormation = ArmyFormationInfo.New()
--    local data = self.ArmyFormationList[uuid]
--end
--
--local function OnEndSetFormation(self)
--    
--end
local function GetArmyUnFormationList(self, includeTrap)
    local showList = {}
    local list = DataCenter.ArmyManager:GetArmyFreeList()
    table.walk(list,function (k,v)
        local restCount = v -- - self:GetSoliderFreeNumInFormationById(k)
        if restCount<0 then
            Logger.Log("error in get UnFormationSoldier")
            restCount =0
        end
        local template = DataCenter.ArmyTemplateManager:GetArmyTemplate(k)
        if includeTrap or template.arm ~= ArmType.Trap then
            showList[k] = restCount
        end
    end)
    return showList
end

local function GetSoliderFreeNumInFormationById(self,soliderId)
    local count= 0
    table.walk(self.ArmyFormationList,function(k,v)
        if v.state == ArmyFormationState.Free then
            if v.soldiers[soliderId]~=nil then
                count = count+ v.soldiers[soliderId]
            end
        end
    end)
    return count
end

local function GetFreeResSupportFormation(self)
    for i, v in pairs(self.ResSupportFormationList) do
        if v.state ~= 1 then
            return v.uuid
        end
    end
end

local function CheckIfIsScountFormation(self, marchUuid)
    local info = DataCenter.WorldMarchDataManager:GetMarch(marchUuid)
    if info then
        for k, v in pairs(self.InvestigateFormationList) do
            if k == info.ownerFormationUuid then
                return true
            end
        end
    end
    return false
end

local function GetGolloesFormationList(self)
    return table.values(self.GolloesFormationList)
end

local function GetResSupportFormationList(self)
    return table.values(self.ResSupportFormationList)
end

local function GetInvestigateFormationList(self)
    return table.values(self.InvestigateFormationList)
end

local function GetInvestigateFormationInfoByIndex(self, tempIndex)
    for i, v in pairs(self.InvestigateFormationList) do
        if v.index == tempIndex then
            return v
        end
    end
    return nil
end

--获取所有编队信息
local function GetArmyFormationList(self)
    return table.values(self.ArmyFormationList)
end

local function SetArmyFormationSoldier(self,formationUuid,soliderList)
    if self.ArmyFormationList[formationUuid]~=nil then
        self.ArmyFormationList[formationUuid].soldiers = soliderList
    end
end

local function SetArmyFormationHero(self,formationUuid,heroList)
    if self.ArmyFormationList[formationUuid]~=nil then
        self.ArmyFormationList[formationUuid].heroes = heroList
    end
end

local function AutoInitFormationData(self,formationUuid,targetType)
    if targetType~=self.cacheTargetType then
        return
    end
    self:AutoAddHero(formationUuid)
    self:AutoAddSoldier(formationUuid,false)
end
local function AutoAddHeroForCollect(self,formationUuid,resourceType)
    local resourceEffect = 0
    local weightEffect = EffectDefine.ARMY_CARRY_WEIGHT_ADD_PERCENT
    if resourceType == ResourceType.Oil then
        resourceEffect = EffectDefine.GAS_COLLECT_SPEED_PERCENT
    elseif resourceType == ResourceType.Water then
        resourceEffect = EffectDefine.WATER_COLLECT_SPEED_PERCENT
    elseif resourceType == ResourceType.Metal then
        resourceEffect = EffectDefine.CRYSTAL_COLLECT_SPEED_PERCENT
    elseif resourceType == ResourceType.Money then
        resourceEffect = EffectDefine.MONEY_COLLECT_SPEED_PERCENT
    end
    if self.ArmyFormationList[formationUuid]~=nil then
        local heroIdList = {}
        local heroes = {}
        local replaceHeroes = {}
        local inFormHeroDataList = {}
        local formHeroList = {}
        for c,d in pairs(self.FormationFormList) do
            if c~=formationUuid then
                local tempHeroList =d.heroes
                for e,f in pairs(tempHeroList) do
                    formHeroList[e] = 1
                end
            end

        end
        local collectHeroList,otherHeroList = DataCenter.HeroDataManager:GetHeroListForCollect()
        heroes = table.values(collectHeroList)
        replaceHeroes = table.values(otherHeroList)
        table.sort(heroes, function(heroA, heroB)
            local addSpeedEffectA = heroA:GetEffectNum(resourceEffect)
            local addSpeedEffectB = heroB:GetEffectNum(resourceEffect)
            if addSpeedEffectA ~= addSpeedEffectB then
                return addSpeedEffectA > addSpeedEffectB
            end
            local addWeightEffectA = heroA:GetEffectNum(weightEffect)
            local addWeightEffectB = heroB:GetEffectNum(weightEffect)
            if addWeightEffectA ~= addWeightEffectB then
                return addWeightEffectA > addWeightEffectB
            end
            if heroA.level ~= heroB.level then
                return heroA.level > heroB.level
            end
            if heroA.quality ~= heroB.quality then
                return heroA.quality > heroB.quality
            end
            return heroA.heroId < heroB.heroId
        end)
        local inMarchHeroId = DataCenter.HeroDataManager:GetHeroIdListInMarch()
        local indexNum = 0
        self.ArmyFormationList[formationUuid].heroes = {}
        local maxHeroNum = MarchUtil.GetMaxHeroValueByFormationIndex(self.ArmyFormationList[formationUuid].index)
        for _, heroData in pairs(heroes) do
            if indexNum<= maxHeroNum-1 then
                if heroData.state == ArmyFormationState.Free and heroIdList[heroData.heroId]==nil and inMarchHeroId[heroData.heroId] == nil then
                    if formHeroList[heroData.uuid]~=nil then
                        table.insert(inFormHeroDataList,heroData)
                    else
                        indexNum = indexNum+1
                        self.ArmyFormationList[formationUuid].heroes[heroData.uuid] = indexNum
                        heroIdList[heroData.heroId] = 1
                    end

                end
            end
        end
        if indexNum<maxHeroNum then
            table.sort(replaceHeroes, function(heroA, heroB)
                local addSpeedEffectA = heroA:GetEffectNum(resourceEffect)
                local addSpeedEffectB = heroB:GetEffectNum(resourceEffect)
                if addSpeedEffectA ~= addSpeedEffectB then
                    return addSpeedEffectA > addSpeedEffectB
                end
                local addWeightEffectA = heroA:GetEffectNum(weightEffect)
                local addWeightEffectB = heroB:GetEffectNum(weightEffect)
                if addWeightEffectA ~= addWeightEffectB then
                    return addWeightEffectA > addWeightEffectB
                end
                if heroA.level ~= heroB.level then
                    return heroA.level > heroB.level
                end
                if heroA.quality ~= heroB.quality then
                    return heroA.quality < heroB.quality
                end
                return heroA.heroId < heroB.heroId
            end)
            for _, heroData in pairs(replaceHeroes) do
                if indexNum<= maxHeroNum-1 then
                    if heroData.state == ArmyFormationState.Free and heroIdList[heroData.heroId]==nil and inMarchHeroId[heroData.heroId] == nil then
                        if formHeroList[heroData.uuid]~=nil then
                            table.insert(inFormHeroDataList,heroData)
                        else
                            indexNum = indexNum+1
                            self.ArmyFormationList[formationUuid].heroes[heroData.uuid] = indexNum
                            heroIdList[heroData.heroId] = 1
                        end
                        
                    end
                end
            end
        end
        if indexNum<maxHeroNum then
            for i = 1,#inFormHeroDataList do
                if indexNum<= maxHeroNum-1 then
                    local heroData = inFormHeroDataList[i]
                    if heroData.state == ArmyFormationState.Free and heroIdList[heroData.heroId]==nil and inMarchHeroId[heroData.heroId] == nil then
                        indexNum = indexNum+1
                        self.ArmyFormationList[formationUuid].heroes[heroData.uuid] = indexNum
                        heroIdList[heroData.heroId] = 1
                    end
                end
                
            end
        end
    end
end
local function AutoInitFormationDataForCollect(self,formationUuid,resourceType,targetMaxNum,targetType)
    if targetType~=self.cacheTargetType then
        return
    end
    self:AutoAddHeroForCollect(formationUuid,resourceType)
    self:AutoAddSoldierForCollect(formationUuid,false,targetMaxNum)
end
local function GetArmyFormationHeroCanUpgradeUuid(self,formationUuid)
    if self.ArmyFormationList[formationUuid]~=nil then
        local canLevelUpHeroList = {}
        local heroList = self.ArmyFormationList[formationUuid]:GetCurHeroes()
        for k,v in pairs(heroList) do
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
            if heroData~=nil then
                if heroData:IsCanLevelUp() or heroData:CanUpMilitaryRank() then
                    table.insert(canLevelUpHeroList,heroData)
                end
            end
        end
        if #canLevelUpHeroList>0 then
            table.sort(canLevelUpHeroList, function(heroA, heroB)
                if heroA.level ~= heroB.level then
                    return heroA.level < heroB.level
                end
                if heroA.quality ~= heroB.quality then
                    return heroA.quality < heroB.quality
                end
                return heroA.heroId > heroB.heroId
            end)
            return canLevelUpHeroList[1].uuid
        end
    end
    return 0
end
--返回可以更换成更高品质的低品质英雄Uuid
local function GetFormationHeroCanChangeHigherUuid(self,formationUuid)
    if self.ArmyFormationList[formationUuid]~=nil then
        local heroList = self.ArmyFormationList[formationUuid].heroes
        local heroIdList = {}
        local minRarity = -1
        local minHeroUuid = 0
        local minHeroPower = IntMaxValue
        local targetHeroUuid = 0
        for a,b in pairs(heroList) do
            local heroData = DataCenter.HeroDataManager:GetHeroByUuid(a)
            if heroData~=nil then
                local heroId = heroData.heroId
                heroIdList[heroId] = 1
                if minRarity <= heroData.rarity then
                    local power = HeroUtils.GetHeroPower(heroData)
                    if minRarity < heroData.rarity or minHeroPower > power then
                        minRarity = heroData.rarity
                        minHeroUuid = heroData.uuid
                        minHeroPower = power
                    end
                end
            end
        end
        if minHeroUuid~=0 then
            local formHeroList = {}
            for c,d in pairs(self.FormationFormList) do
                local tempHeroList =d.heroes
                for e,f in pairs(tempHeroList) do
                    formHeroList[e] = 1
                end
            end
            local allHeroes = DataCenter.HeroDataManager:GetAllHeroBySort()
            for k,v in pairs(allHeroes) do
                local heroId = v.heroId
                if heroIdList[heroId]==nil and formHeroList[v.uuid] == nil and v.state == ArmyFormationState.Free then
                    if v.rarity< minRarity then
                        targetHeroUuid = v.uuid
                        return minHeroUuid,targetHeroUuid
                    end
                end
            end
        end
    end
end

local function AutoAddHero(self,formationUuid)
    if self.ArmyFormationList[formationUuid]~=nil then
        local heroIdList = {}
        local heroes = {}
        local useForm = false
        local formHeroIdList = {}
        table.walk(self.FormationFormList,function(k,v)
            if k~=formationUuid then
                if v.heroes~=nil and table.count(v.heroes)>0 then
                    table.walk(v.heroes,function(a,b)
                        local heroData = DataCenter.HeroDataManager:GetHeroByUuid(a)
                        if heroData~=nil then
                            formHeroIdList[heroData.heroId] =1
                        end
                    end)
                end
            end
        end)
        if self.FormationFormList[formationUuid]~=nil then
            local allHeroes = self.FormationFormList[formationUuid].heroes
            if table.count(allHeroes)>0 then
                useForm =true
            end
        end
        if useForm == true then
            local allHeroes = self.FormationFormList[formationUuid].heroes
            table.walksort(allHeroes,function (leftKey,rightKey)
                return allHeroes[leftKey] < allHeroes[rightKey]
            end,function(k,v)
                local heroData = DataCenter.HeroDataManager:GetHeroByUuid(k)
                if heroData~=nil then
                    table.insert(heroes,heroData)
                end
            end)
        else
            heroes = DataCenter.HeroDataManager:GetAllHeroBySort()
        end
        local inMarchHeroId = DataCenter.HeroDataManager:GetHeroIdListInMarch()
        local indexNum = 0
        self.ArmyFormationList[formationUuid].heroes = {}
        local maxHeroNum = MarchUtil.GetMaxHeroValueByFormationIndex(self.ArmyFormationList[formationUuid].index)
        for _, heroData in pairs(heroes) do
            if indexNum<= maxHeroNum-1 then
                if heroData.state == ArmyFormationState.Free and heroIdList[heroData.heroId]==nil and inMarchHeroId[heroData.heroId] == nil and formHeroIdList[heroData.heroId]==nil then
                    indexNum = indexNum+1
                    self.ArmyFormationList[formationUuid].heroes[heroData.uuid] = indexNum
                    heroIdList[heroData.heroId] = 1
                    Logger.Log("hero add amry formationstate", heroData.uuid, "num", indexNum)
                end
            end
        end
    end
end

local function AutoAddSoldierForCollect(self,formationUuid,useForm,targetMaxNum)
    if self.ArmyFormationList[formationUuid]~=nil then
        self.ArmyFormationList[formationUuid].soldiers ={}
        local freeSoldiers = DataCenter.ArmyFormationDataManager:GetArmyUnFormationList()
        local maxNum = 0
            if useForm~=nil and useForm== true and self.FormationFormList[formationUuid]~=nil then
                maxNum =self.FormationFormList[formationUuid].maxNum
            else
                maxNum = MarchUtil.GetMaxCanAddSoldierNum(self.ArmyFormationList[formationUuid].heroes,self.ArmyFormationList[formationUuid].index)
            end
        if targetMaxNum~=nil then
            maxNum = math.min(targetMaxNum,maxNum)
        end
        local totalNum = 0
        table.walksort(freeSoldiers,function (leftKey,rightKey)
            local aData = DataCenter.ArmyManager:FindArmy(leftKey)
            local bData = DataCenter.ArmyManager:FindArmy(rightKey)
            if aData~=nil and bData~=nil then
                if aData.level ~= bData.level then
                    return aData.level < bData.level
                end
                return aData.id < bData.id
            end
            return false
        end, function (k,v)
            if v>0 then
                local addNum = math.min(maxNum-totalNum,v)
                if addNum>0 then
                    self.ArmyFormationList[formationUuid].soldiers[k] = addNum
                    totalNum = totalNum + addNum
                end
            end
        end)
    end
end

local function AutoAddSoldier(self,formationUuid,useForm)
    if self.ArmyFormationList[formationUuid]~=nil then
        self.ArmyFormationList[formationUuid].soldiers ={}
        local freeSoldiers = DataCenter.ArmyFormationDataManager:GetArmyUnFormationList()
        local maxNum = 0
        if useForm~=nil and useForm== true and self.FormationFormList[formationUuid]~=nil then
            maxNum =self.FormationFormList[formationUuid].maxNum
        else
            maxNum = MarchUtil.GetMaxCanAddSoldierNum(self.ArmyFormationList[formationUuid].heroes,self.ArmyFormationList[formationUuid].index) 
        end
        local effectList = {}
        local checkList = {"arm_1","arm_2","arm_3","arm_4"}
        local heroes = self.ArmyFormationList[formationUuid]:GetCurHeroes()
        local buffEffectDict = nil
        
        for k,v in pairs(checkList) do
            local typeAtkEffectNum = MarchUtil.GetEffectNumInFormation(heroes,GetTableData("effect",EffectCoupleType.BASE_ATTACK,v), buffEffectDict)
            local typeDefEffectNum = MarchUtil.GetEffectNumInFormation(heroes,GetTableData("effect",EffectCoupleType.BASE_DEFEND,v), buffEffectDict)
            local typeHealthEffectNum = MarchUtil.GetEffectNumInFormation(heroes,GetTableData("effect",EffectCoupleType.BASE_HEALTH_PERCENT,v), buffEffectDict)
            local total = typeAtkEffectNum+typeDefEffectNum+typeHealthEffectNum
            effectList[v] = total
        end
        local totalNum = 0
        table.walksort(freeSoldiers,function (leftKey,rightKey)
            local aData = DataCenter.ArmyManager:FindArmy(leftKey)
            local bData = DataCenter.ArmyManager:FindArmy(rightKey)
            if aData~=nil and bData~=nil then
                if aData.level ~= bData.level then
                    return aData.level > bData.level
                end
                local leftAdd = 0
                local rightAdd = 0
                local leftType = aData:GetAddValueEffectName()
                local rightType = bData:GetAddValueEffectName()
                if leftType~=nil and effectList[leftType]~=nil then
                    leftAdd = effectList[leftType]
                end
                if rightType~=nil and effectList[rightType]~=nil then
                    rightAdd = effectList[rightType]
                end
                if leftAdd ~= rightAdd then
                    return leftAdd>rightAdd
                end
                return aData.id > bData.id
            end
            return false
        end, function (k,v)
            if v>0 then
                local addNum = math.min(maxNum-totalNum,v)
                if addNum>0 then
                    self.ArmyFormationList[formationUuid].soldiers[k] = addNum
                    totalNum = totalNum + addNum
                end
            end
        end)
    end
end

local function AutoAddSoldierByForm(self,formationUuid)
    if self.ArmyFormationList[formationUuid]~=nil then
        self.ArmyFormationList[formationUuid].soldiers ={}
        local freeSoldiers = DataCenter.ArmyFormationDataManager:GetArmyUnFormationList()
        local maxNum = MarchUtil.GetMaxCanAddSoldierNum(self.ArmyFormationList[formationUuid].heroes,self.ArmyFormationList[formationUuid].index)
        local totalNum = 0
        if self.FormationFormList[formationUuid]~=nil then
            local allHeroes = self.FormationFormList[formationUuid].heroes
            local allSoldier = self.FormationFormList[formationUuid].soldiers
            if table.count(allHeroes)>0 and table.count(allSoldier)>0 then
                local formSoldier = self.FormationFormList[formationUuid].soldiers
                table.walksort(formSoldier,function (leftKey,rightKey)
                    local aData = DataCenter.ArmyManager:FindArmy(leftKey)
                    local bData = DataCenter.ArmyManager:FindArmy(rightKey)
                    if aData~=nil and bData~=nil then
                        if aData.level ~= bData.level then
                            return aData.level > bData.level
                        end
                        return aData.id > bData.id
                    end
                    return false
                end, function (k,v)
                    if v>0 then
                        if freeSoldiers[k]~=nil then
                            local freeNum = freeSoldiers[k]
                            if freeNum>0 then
                                local realNum = math.min(freeNum,v)
                                local addNum = math.min(maxNum-totalNum,realNum)
                                if addNum>0 then
                                    self.ArmyFormationList[formationUuid].soldiers[k] = addNum
                                    totalNum = totalNum + addNum
                                end
                            end
                        end
                    end
                end)
            end
        else
            self:AutoAddSoldier()
        end
    end
end

local function AutoClearFormationData(self,formationUuid)
    if self.ArmyFormationList[formationUuid]~=nil then
        self.ArmyFormationList[formationUuid].heroes ={}
        self.ArmyFormationList[formationUuid].soldiers = {}
    end
end

-- 所有防守编队
local function GetAllDefenceArmyFormationData(self)
    local dict = {}
    local list = { self.DefenceFormationList }
    for _, formationList in pairs(list) do
        for uuid, formation in pairs(formationList) do
            dict[uuid] = formation
        end
    end
    return dict
end

-- 大本防守编队
local function GetDefenceArmyFormationData(self)
    return self.DefenceFormationList
end

-- 跨服虫洞防守编队
local function GetCrossDefenceArmyFormationData(self)
    return self.CrossDefenceFormationList
end

-- 设置跨服虫洞防守编队
local function UpdateCrossDefenceArmyFormationData(self, message)
    local formation = ArmyFormationInfo.New()
    formation:ParseData(message)
    self.CrossDefenceFormationList = { formation }
end

--获取编队当前负重量是否能继续采集
local function GetMarchArmyWeight(uuid)
    local selfMarch = DataCenter.WorldMarchDataManager:GetOwnerMarches(LuaEntry.Player.uid, LuaEntry.Player.allianceId)
    local count = #selfMarch
    if count > 0 then
        for i = 1, count do
            if selfMarch[i].uuid == uuid then
                if selfMarch[i].plunderRes then
                    local num = 0
                    local stringNum = string.split(selfMarch[i].plunderRes,";")
                    table.walk(stringNum, function(k,v)
                        local pos = string.find(v,",")
                        if pos ~= nil then
                            num = tonumber(string.sub(v,pos+1,-1)) + num
                        end
                    end) 
                    return num == selfMarch[i].armyWeight
                end
            end
        end
    end
end


local function GetArmyFormInfoByUuid(self,uuid)
    return self.FormationFormList[uuid]
end
local function GetArmyFormList(self)
    return self.FormationFormList
end

local function GetFirstFormationUnlockScienceId(self)
    local scienceId = nil
    for _, v in pairs(self.FormationFormList) do
        local buildId = MarchUtil.GetFormationBuildNameByIndex(v.index)
        local buildLevelTemplate = DataCenter.BuildTemplateManager:GetBuildingLevelTemplate(buildId, 0)
        if buildLevelTemplate ~= nil then
            local vecPara1 = string.split(buildLevelTemplate.para1,"|")
            for k,v1 in pairs(vecPara1) do
                local vec1 = string.split(v1,";")
                if #vec1 >= 2 then
                    local tmp = tonumber(vec1[2])
                    local index = tonumber(vec1[1])
                    local maxNum = MarchUtil.GetMaxHeroValueByFormationIndex(v1.index)
                    local isLocked = index > maxNum
                    if isLocked then
                        scienceId = tmp
                        break
                    end
                end
            end
        end
    end
    return scienceId
end

local function CheckDetectEventStamina(self)
    local exploreStamina = MarchUtil.GetCostStaminaByTargetType(MarchTargetType.EXPLORE)
    local attackMonster = MarchUtil.GetCostStaminaByTargetType(MarchTargetType.ATTACK_MONSTER)
    local stamina = math.min(exploreStamina, attackMonster)
    local result = self:HasStaminaEnoughFormation(stamina)
    self.preDetectEventBubbleShowState = result
    return result
end

local function HasStaminaEnoughFormation(self, checkStamina)
    if self:GetCurStaminaByUuid() >= checkStamina then
        return true
    end
    return false
end

local function AutoCheckDetectEventStamina(self)
    --现在体力减少是手动触发的，不要自动检测，从无到有需要定时器检测，其他情况不检测
    if self.preDetectEventBubbleShowState == true then
        return
    end
    local preState = self.preDetectEventBubbleShowState
    local result = self:CheckDetectEventStamina()
    if preState ~= result then
        EventManager:GetInstance():Broadcast(EventId.FormationInfoUpdate)
    end
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(10.0, self.AutoCheckDetectEventStamina, self, false,false,false)
    end

    self.timer:Start()
end

local function GetMarchArmyNum(self)
    local result = 0
    for _,v in pairs(self.ArmyFormationList) do
        if v ~= nil and v.state == ArmyFormationState.March then
            table.walk(v.soldiers, function (_, k)
                result = result + k
            end)
        end
    end
    return result
end

local function IsAllFormationFree(self)
    local result = true
    for k,v in pairs(self.ArmyFormationList) do
        if result == true and v.state ~= ArmyFormationState.Free then
            result = false
        end
    end
    return result
end

local function GetConfirmFlag(self)
    return self.isPop
end

local function SetConfirmFlag(self,state)
    self.isPop = state
end

local function HasUnsetFormation(self)
    if self.ArmyFormationList ~= nil and self.FormationFormList ~= nil and LuaEntry.Player ~= nil then
        local uid = LuaEntry.Player.uid
        local count = 0
        table.walk(self.FormationFormList, function (_, v)
            if v.ownerUid == uid and table.count(v.heroes) > 0 then
                count = count + 1
            end
        end)
        local realCount = table.count(self.ArmyFormationList)
        return realCount > 0 and count ~= realCount
    end
    return false
end
local function IsFormationUnsetByIndex(self,index)
    local uuid = self.ArmyListInIndex[index]
    local FormationForm = self:GetArmyFormInfoByUuid(uuid)
    if FormationForm~=nil then
        return false
    end
    return true
end

local function CreateFakeArmyFormation(self, index)
    -- 创建一个假队列
    local info = ArmyFormationInfo.New()
    info:ParseData({ index = index,uuid = index, soldiers = {}, heroes = {}, slots = 5 })
    return info
end

local function GetTemplateFormationByIndex(self,index)
    --目前不知道为什么会出现取不到队列，先加个容错
    if self.ArmyListInIndex[index] == nil or self.ArmyFormationList[self.ArmyListInIndex[index]] == nil then
        local info = self:CreateFakeArmyFormation(index)
        self.ArmyFormationList[info.uuid] = info
        self.ArmyListInIndex[info.index] = info.uuid
    end
    return self.ArmyFormationList[self.ArmyListInIndex[index]]
end

local function GetFormationByType(self,entranceType,index)
    if entranceType == EnterHeroSquadPanelWay.Gate then
        return self:GetDefenceFormation(index)
    elseif entranceType < EnterHeroSquadPanelWay.PVE then
        return self:GetOneArmyInfoByIndex(index)
    else
        return self:GetTemplateFormationByIndex(index)
    end
end

local function GetDefenceFormation(self)
    for k,v in pairs(self.DefenceFormationList) do
        return v
    end
end

ArmyFormationDataManager.__init = __init
ArmyFormationDataManager.__delete = __delete
ArmyFormationDataManager.InitArmyFormationListData =InitArmyFormationListData
ArmyFormationDataManager.ChangeFormationNameData = ChangeFormationNameData
ArmyFormationDataManager.GetOneArmyInfoByUuid = GetOneArmyInfoByUuid
ArmyFormationDataManager.GetOneArmyInfoByIndex = GetOneArmyInfoByIndex
ArmyFormationDataManager.GetArmyFormationIdList = GetArmyFormationIdList
ArmyFormationDataManager.GetSoliderFreeNumInFormationById =GetSoliderFreeNumInFormationById
ArmyFormationDataManager.GetArmyUnFormationList =GetArmyUnFormationList
ArmyFormationDataManager.GetArmyFormationList =GetArmyFormationList
ArmyFormationDataManager.SetArmyFormationSoldier =SetArmyFormationSoldier
ArmyFormationDataManager.GetAlreadySetCountInArmyFormation =GetAlreadySetCountInArmyFormation
ArmyFormationDataManager.AutoClearFormationData =AutoClearFormationData
ArmyFormationDataManager.AutoInitFormationData = AutoInitFormationData
ArmyFormationDataManager.SetArmyFormationHero= SetArmyFormationHero
ArmyFormationDataManager.AutoAddHero =AutoAddHero
ArmyFormationDataManager.AutoAddSoldier = AutoAddSoldier
ArmyFormationDataManager.AutoAddSoldierForCollect = AutoAddSoldierForCollect
ArmyFormationDataManager.GetAllDefenceArmyFormationData = GetAllDefenceArmyFormationData
ArmyFormationDataManager.GetDefenceArmyFormationData = GetDefenceArmyFormationData
ArmyFormationDataManager.GetCrossDefenceArmyFormationData = GetCrossDefenceArmyFormationData
ArmyFormationDataManager.UpdateCrossDefenceArmyFormationData = UpdateCrossDefenceArmyFormationData
ArmyFormationDataManager.GetMarchArmyWeight = GetMarchArmyWeight
ArmyFormationDataManager.GetConfigData = GetConfigData
ArmyFormationDataManager.GetCurStaminaByUuid= GetCurStaminaByUuid
ArmyFormationDataManager.GetInvestigateFormationList = GetInvestigateFormationList
ArmyFormationDataManager.GetInvestigateFormationInfoByIndex = GetInvestigateFormationInfoByIndex
ArmyFormationDataManager.GetMaxInvesFormationCount = GetMaxInvesFormationCount
ArmyFormationDataManager.RefreshFormationModelToJson = RefreshFormationModelToJson
ArmyFormationDataManager.GetFormationModelFromJson = GetFormationModelFromJson
ArmyFormationDataManager.PackageFormationFormToSFSObj = PackageFormationFormToSFSObj
ArmyFormationDataManager.GetArmyFormInfoByUuid = GetArmyFormInfoByUuid
ArmyFormationDataManager.AutoAddSoldierByForm = AutoAddSoldierByForm
ArmyFormationDataManager.GetFirstFormationUnlockScienceId = GetFirstFormationUnlockScienceId
ArmyFormationDataManager.GetResSupportFormationList = GetResSupportFormationList
ArmyFormationDataManager.GetFreeResSupportFormation = GetFreeResSupportFormation
ArmyFormationDataManager.CheckIfIsScountFormation = CheckIfIsScountFormation
ArmyFormationDataManager.GetFormationFormDataByHeroUuid = GetFormationFormDataByHeroUuid
ArmyFormationDataManager.HasStaminaEnoughFormation = HasStaminaEnoughFormation
ArmyFormationDataManager.CheckDetectEventStamina = CheckDetectEventStamina
ArmyFormationDataManager.AutoCheckDetectEventStamina = AutoCheckDetectEventStamina
ArmyFormationDataManager.DeleteTimer = DeleteTimer
ArmyFormationDataManager.AddTimer = AddTimer
ArmyFormationDataManager.GetMarchArmyNum = GetMarchArmyNum
ArmyFormationDataManager.IsAllFormationFree = IsAllFormationFree
ArmyFormationDataManager.GetGolloesFormationList = GetGolloesFormationList
ArmyFormationDataManager.GetConfirmFlag = GetConfirmFlag
ArmyFormationDataManager.SetConfirmFlag = SetConfirmFlag
ArmyFormationDataManager.HasUnsetFormation = HasUnsetFormation
ArmyFormationDataManager.GetArmyFormationHeroCanUpgradeUuid = GetArmyFormationHeroCanUpgradeUuid
ArmyFormationDataManager.GetFormationHeroCanChangeHigherUuid = GetFormationHeroCanChangeHigherUuid
ArmyFormationDataManager.AutoInitFormationDataForCollect = AutoInitFormationDataForCollect
ArmyFormationDataManager.AutoAddHeroForCollect = AutoAddHeroForCollect
ArmyFormationDataManager.IsFormationUnsetByIndex=  IsFormationUnsetByIndex
ArmyFormationDataManager.SendFormToServer = SendFormToServer
ArmyFormationDataManager.SetCacheTargetType =SetCacheTargetType

ArmyFormationDataManager.CreateFakeArmyFormation = CreateFakeArmyFormation
ArmyFormationDataManager.GetTemplateFormationByIndex = GetTemplateFormationByIndex
ArmyFormationDataManager.GetFormationByType = GetFormationByType
ArmyFormationDataManager.GetDefenceFormation = GetDefenceFormation
ArmyFormationDataManager.GetArmyFormList =GetArmyFormList
return ArmyFormationDataManager