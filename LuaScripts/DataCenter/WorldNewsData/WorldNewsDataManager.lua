---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 2022/3/15 12:27
---
local WorldNewsDataManager = BaseClass("WorldNewsDataManager");
local AreaInfo = require "DataCenter.WorldNewsData.AreaInfo"
local NewsInfo = require "DataCenter.WorldNewsData.NewsInfo"
local AttackerInfo = require "DataCenter.WorldNewsData.AttackerInfo"
local function __init(self)
    self.areaInfoList = {}
    self.newsInfoList = {}
    self.cacheRefreshAreaId = {}
    self.lastAreaNewsTime = CS.GameEntry.Setting:GetPrivateInt("LAST_GET_AREA_NEWS_TIME",0)
    self.latestAreaNewsTime = 0
    self.lastAlCityNewsTime = CS.GameEntry.Setting:GetPrivateInt("LAST_GET_AL_CITY_NEWS_TIME",0)
    self.latestAlCityNewsTime = 0
    self.lastRequestTime = 0
    self.attackerInfoList = {}
    self.showAttacker = false
    self.attackerMsg = nil
    self.timer = nil
    self.timer_action = function(temp)
        self:CheckRefresh()
    end
    self:AddListener()
    self:CheckAddTimer()
end

local function __delete(self)
    self.cacheRefreshAreaId = nil
    self.areaInfoList = nil
    self.newsInfoList = nil
    self.timer_action = nil
    self.attackerInfoList = {}
    self.showAttacker = false
    self.attackerMsg = nil
    self:DeleteTimer()
    self:RemoveListener()
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():AddListener(EventId.OnEnterCity, self.OnEnterCity)
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, self.OnEnterWorld)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterCity, self.OnEnterCity)
end

local function OnEnterWorld(data)
    DataCenter.WorldNewsDataManager:CheckAddTimer()
end
local function OnEnterCity(data)
    DataCenter.WorldNewsDataManager:CheckAddTimer()
end
local function CheckAddTimer(self)
    if SceneUtils.GetIsInWorld() then
        self:AddTimer()
    else
        self:DeleteTimer()
    end
end
local function SendRequest(self)
    self.lastRequestTime = UITimeManager:GetInstance():GetServerSeconds()
    if  LuaEntry.Player.serverType ~= ServerType.DRAGON_BATTLE_FIGHT_SERVER then
        SFSNetwork.SendMessage(MsgDefines.GetWorldNewInfo)
    end
end

local function CheckRefresh(self)
    --local timeDelta = LuaEntry.DataConfig:TryGetNum("world_news_info", "k4")
    --if timeDelta<300 then
    --    timeDelta = 300
    --end
    --local curTime = UITimeManager:GetInstance():GetServerSeconds() 
    --local deltaTime =curTime-timeDelta
    --local needSendMessage = false
    --for k,v in pairs(self.areaInfoList) do
    --    if self.cacheRefreshAreaId[k] == nil or self.cacheRefreshAreaId[k] == 0 then
    --        if v.time>0 and v.time< deltaTime then
    --            needSendMessage = true
    --            self.cacheRefreshAreaId[k] = 1
    --        end
    --    end
    --end
    --if needSendMessage == false then
    --    local requestDelta = LuaEntry.DataConfig:TryGetNum("world_news_info", "k5")
    --    if requestDelta<300 then
    --        requestDelta = 300
    --    end
    --    if self.lastRequestTime + requestDelta < curTime then
    --        needSendMessage = true
    --    end
    --end
    --if needSendMessage == true then
    --    self:SendRequest()
    --end
end

local function UpdateWorldNewsData(self,message)
    self.areaInfoList = {}
    self.newsInfoList = {}
    self.attackerInfoList = {}
    self.latestAreaNewsTime = 0
    self.latestAlCityNewsTime = 0
    if message["areaInfo"]~=nil then
        local newsInfo = message["areaInfo"]
        if newsInfo["infos"]~=nil then
            local arr = newsInfo["infos"]
            for k, v in pairs(arr) do
                local oneData = AreaInfo.New()
                oneData:ParseData(v)
                if oneData.id~=nil and oneData.id>0 then
                    self.areaInfoList[oneData.id] = oneData
                    if oneData.time>self.latestAreaNewsTime then
                        self.latestAreaNewsTime = oneData.time
                    end
                end
            end
            for k,v in pairs(self.cacheRefreshAreaId) do
                if self.areaInfoList[k] ==nil then
                    v = 0
                end 
            end
            EventManager:GetInstance():Broadcast(EventId.UpdateWorldZoneNews)
        end
        EventManager:GetInstance():Broadcast(EventId.WorldAreaNewsRedDot)
        
    end
    if message["newsInfo"]~=nil then
        local newsInfo = message["newsInfo"]
        if newsInfo["infos"]~=nil then
            local arr = newsInfo["infos"]
            for k, v in pairs(arr) do
                local oneData = NewsInfo.New()
                oneData:ParseData(v)
                if oneData.newsType == AllianceCityNewsType.OCCUPY_OCCUPIED_CITY or oneData.newsType == AllianceCityNewsType.FIRST_NEUTRAL_CITY or oneData.newsType == AllianceCityNewsType.OCCUPY_NEUTRAL_CITY then
                    table.insert(self.newsInfoList,oneData)
                    if oneData.time>self.latestAlCityNewsTime then
                        self.latestAlCityNewsTime = oneData.time
                    end
                end
            end
        end
        EventManager:GetInstance():Broadcast(EventId.WorldAlCityNewsRedDot)
    end
    if message["attackerInfo"]~=nil then
        local attackerInfo = message["attackerInfo"]
        if attackerInfo["infos"]~=nil then
            local arr = attackerInfo["infos"]
            for k, v in pairs(arr) do
                local oneData = AttackerInfo.New()
                oneData:ParseData(v)
                if oneData.uid~=nil and oneData.uid~="" then
                    self.attackerInfoList[oneData.uid] = oneData
                end
            end
        end
        EventManager:GetInstance():Broadcast(EventId.AttackerInfoUpdate)
        WorldBuildUtil.SetAttackInfoList()
        
    end
    EventManager:GetInstance():Broadcast(EventId.UpdateWorldNewsData)
end

local function GetAreaInfoList(self)
    return self.areaInfoList
end

local function GetAreaInfoByPointId(self,pointId)
    return self.areaInfoList[pointId]
end

local function GetNewsInfoList(self)
    return self.newsInfoList
end

local function SetLastGetAreaNewsTime(self,getNewsTime)
    if self.lastAreaNewsTime < getNewsTime then
        self.lastAreaNewsTime = getNewsTime
        CS.GameEntry.Setting:SetPrivateInt("LAST_GET_AREA_NEWS_TIME",getNewsTime)
        EventManager:GetInstance():Broadcast(EventId.WorldAreaNewsRedDot)
    end
end

local function SetLastGetAlCityNewsTime(self,getNewsTime)
    if self.lastAlCityNewsTime < getNewsTime then
        self.lastAlCityNewsTime = getNewsTime
        CS.GameEntry.Setting:SetPrivateInt("LAST_GET_AL_CITY_NEWS_TIME",getNewsTime)
        EventManager:GetInstance():Broadcast(EventId.WorldAlCityNewsRedDot)
    end
end

local function CheckShowAreaNews(self)
    if self.latestAreaNewsTime>self.lastAreaNewsTime then
        return true
    end
    return false
end

local function CheckShowAlCityNews(self)
    if self.latestAlCityNewsTime>self.lastAlCityNewsTime then
        return true
    end
    return false
end

local function DeleteTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function AddTimer(self)
    --local timeDelta = LuaEntry.DataConfig:TryGetNum("world_news_info", "k4")
    --if timeDelta<300 then
    --    timeDelta = 300
    --end
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(30, self.timer_action, self, false,false,false)
    end

    self.timer:Start()
end

local function CheckShowByCityLv(self)
    local showLevel = LuaEntry.DataConfig:TryGetNum("world_news_info", "k8")
    if DataCenter.BuildManager.MainLv >= showLevel then
        return true
    end
    return false
end
function WorldNewsDataManager:GetRedDotCount()
    if self:CheckShowAreaNews() then
        return 1
    end
    return 0
end

function WorldNewsDataManager:PushAreaHotNewAddHandle(message)
    local oneData = AreaInfo.New()
    oneData:ParseData(message)
    if oneData.id~=nil and oneData.id>0 then
        self.areaInfoList[oneData.id] = oneData
        if oneData.time>self.latestAreaNewsTime then
            self.latestAreaNewsTime = oneData.time
        end
    end
    EventManager:GetInstance():Broadcast(EventId.UpdateWorldZoneNews)
    EventManager:GetInstance():Broadcast(EventId.WorldAreaNewsRedDot)
end

function WorldNewsDataManager:PushAlAttackerAddHandle(message)
    local oneData = AttackerInfo.New()
    oneData:ParseData(message)
    if oneData.uid~=nil and oneData.uid~="" then
        self.attackerInfoList[oneData.uid] = oneData
    end
    self.showAttacker = true
    EventManager:GetInstance():Broadcast(EventId.AttackerInfoUpdate)
    WorldBuildUtil.SetAttackInfoList()
end

function WorldNewsDataManager:GetIsAttackerByUid(uid)
    if uid~=nil and uid~="" and self.attackerInfoList[uid]~=nil then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        if self.attackerInfoList[uid].expireTime~=nil and self.attackerInfoList[uid].expireTime>curTime then
            return true
        end
    end
    return false
end

function WorldNewsDataManager:GetAllNeedShowAttacker()
    local showList = {}
    local curTime = UITimeManager:GetInstance():GetServerTime()
    for k,v in pairs(self.attackerInfoList) do
        if v.uid~=nil and v.name~=nil and v.uid~="" and v.name~="" and v.expireTime~=nil and v.expireTime>curTime then
            table.insert(showList,v)
        end
    end
    return showList
end

function WorldNewsDataManager:GetAllAttackerData()
    return self.attackerInfoList
end

function WorldNewsDataManager:GetShowAttackerRedPot()
    return self.showAttacker
end

function WorldNewsDataManager:ResetShowAttackRedDot()
    self.showAttacker = false
end

function WorldNewsDataManager:UpdateAttackerInfoPointMsg(message)
    self.attackerMsg = message
end

function WorldNewsDataManager:GetAttackerInfoPointMsg()
    return self.attackerMsg
end

WorldNewsDataManager.__init = __init
WorldNewsDataManager.__delete = __delete
WorldNewsDataManager.SendRequest = SendRequest
WorldNewsDataManager.UpdateWorldNewsData = UpdateWorldNewsData
WorldNewsDataManager.GetAreaInfoList =GetAreaInfoList
WorldNewsDataManager.GetNewsInfoList =GetNewsInfoList
WorldNewsDataManager.AddTimer = AddTimer
WorldNewsDataManager.DeleteTimer = DeleteTimer
WorldNewsDataManager.SetLastGetAreaNewsTime = SetLastGetAreaNewsTime
WorldNewsDataManager.CheckShowAreaNews = CheckShowAreaNews
WorldNewsDataManager.SetLastGetAlCityNewsTime = SetLastGetAlCityNewsTime
WorldNewsDataManager.CheckShowAlCityNews = CheckShowAlCityNews
WorldNewsDataManager.GetAreaInfoByPointId = GetAreaInfoByPointId
WorldNewsDataManager.CheckRefresh = CheckRefresh
WorldNewsDataManager.CheckShowByCityLv = CheckShowByCityLv
WorldNewsDataManager.CheckAddTimer = CheckAddTimer
WorldNewsDataManager.AddListener = AddListener
WorldNewsDataManager.RemoveListener = RemoveListener
WorldNewsDataManager.OnEnterWorld = OnEnterWorld
WorldNewsDataManager.OnEnterCity = OnEnterCity
return WorldNewsDataManager