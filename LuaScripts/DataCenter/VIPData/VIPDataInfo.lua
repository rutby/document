---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local VIPDataInfo = BaseClass("VIPDataInfo")

function VIPDataInfo:__init()
    self.level= -1
    self.loginDays =0
    self.score = 0  --vip点数
    self.loginScoreState = 0    --0是领取过状态，1是可领取状态 写死服务器时间零点刷新
    self.everyDayReward = 0     --0不可领取  1可领取
    self.lastUpdateTime= 0
    self.privilegeReward = ""
    self.addScore = 0   --今日新增积分
    self.nextDayScore = 0 --下一天积分
    self.endTime = 0 --vip失效时间
    self.boxRewardArr = {}
    self._privilegeRewardCanGet = {}
end

function VIPDataInfo:__delete()
    self.level= nil
    self.loginDays = nil
    self.score = nil
    self.loginScoreState = nil
    self.everyDayReward = nil
    self.lastUpdateTime= nil
    self.privilegeReward = nil
    self.addScore = nil
    self.nextDayScore = nil
    self.boxRewardArr = nil
    self._privilegeRewardCanGet = nil
end

function VIPDataInfo:UpdateVipInfo(message,fromDailyPoint)
    if message==nil then
        return
    end
    local  preLevel = self.level
    if message["vipInfo"] == nil then
        return
    end
    local vipinfo = message["vipInfo"]
    if vipinfo["level"]~=nil then
        self.level = vipinfo["level"]
    end
    if vipinfo["loginDays"]~=nil then
        self.loginDays = vipinfo["loginDays"]
    end
    if vipinfo["score"] then
        self.score = vipinfo["score"]
    end
    if vipinfo["loginScoreState"]~=nil then
        self.loginScoreState = vipinfo["loginScoreState"]
    end
    if vipinfo["everyDayReward"]~=nil then
        self.everyDayReward = vipinfo["everyDayReward"]
    end
    
    self.lastUpdateTime = UITimeManager:GetInstance():GetServerTime()
    
    if vipinfo["privilegeReward"]~=nil then
        self.privilegeReward = vipinfo["privilegeReward"]
    end

    if vipinfo["endTime"]~=nil then
        self.endTime = vipinfo["endTime"]
    end
    --免费礼包信息分离出来，单独消息处理
    --if message["boxRewardArr"]~=nil then
    --    table.walk(message["boxRewardArr"],function(k,v)
    --        self.boxRewardArr[v.level] = DataCenter.RewardManager:ReturnRewardParamForView(v.reward)
    --    end)
    --end
    
    self:ParsePrivilegeState ()
    
    --local isLevelUp = self:CheckLevelUp (preLevel, self.level)
    
    --EventManager:GetInstance():Broadcast(EventId.VipDataRefresh, not isLevelUp and fromDailyPoint)
end

function VIPDataInfo:UpdateVip(message,isLoginScore)
    if message==nil then
        return
    end
    local  preLevel = self.level
    if message["level"]~=nil then
        self.level = message["level"]
    end
    if message["loginDays"]~=nil then
        self.loginDays = message["loginDays"]
    end
    if message["score"] then
        self.score = message["score"]
    end
    if message["loginScoreState"]~=nil then
        self.loginScoreState = message["loginScoreState"]
    end
    if message["everyDayReward"]~=nil then
        self.everyDayReward = message["everyDayReward"]
    end
    if message["privilegeReward"]~=nil then
        self.privilegeReward = message["privilegeReward"]
    end
    if message["addScore"] ~= nil then
        self.addScore = message["addScore"]
    end
    if message["nextDayScore"] ~= nil then
        self.nextDayScore = message["nextDayScore"]
    end
    if message["endTime"]~=nil then
        self.endTime = message["endTime"]
    end
    local isLevelUp = self:CheckLevelUp (preLevel, self.level)
    --0不显示，1vip升级,2vip点数奖励
    local isShowWindowType = 0
    if isLevelUp then
        isShowWindowType = 1
    elseif isLoginScore then
        isShowWindowType = 2
    end
    EventManager:GetInstance():Broadcast(EventId.VipDataRefresh, isShowWindowType)
end

function VIPDataInfo:UpdateVipBoxRewardInfo(message)
    table.walk(message,function(k,v)
        self.boxRewardArr[v.level] = DataCenter.RewardManager:ReturnRewardParamForView(v.reward)
    end)
end

--更新Vip点数
function VIPDataInfo:UpdateVipPoint(vipPoint)
    self.score = vipPoint
    EventManager:GetInstance():Broadcast(EventId.VipDataRefresh, 0)
    
    --检查是否升级
    local nextVipInfo = DataCenter.VipManager:GetNextVipData()
    if (self.score > nextVipInfo.MinPoint) then
        DataCenter.VipManager:RequestLatestVipInfo()
    end
end

--检查是否升级
function VIPDataInfo:CheckLevelUp(preLevel,curLevel)
    if preLevel < 0 then
        return false
    end
    if curLevel > preLevel then
        --VipUtils.OnLevelUP ();
        return true
    end
    return false
end

function VIPDataInfo:ParsePrivilegeState()
    self._privilegeRewardCanGet = {}

    if self.privilegeReward == nil then
        return
    end
    
    local states = string.split(self.privilegeReward,";")
    if #states < 1 then
        return
    end

    for i, v in pairs(states) do
       table.insert(self._privilegeRewardCanGet,tonumber(v))
    end
end

function VIPDataInfo:GetLoginDays()
    --上次更新时间如果是昨天就重新拉取下
    if self.lastUpdateTime < UITimeManager:GetInstance():TodayZero() then
        DataCenter.VipManager:RequestLatestVipInfo()
        --当前数据是昨天的所以加1
        return self.loginDays + 1
    end
    return self.loginDays
end

function VIPDataInfo:CanGetDailyPoint()
    if self.loginScoreState == 1 then
        return true
    end
    local todayZero = UITimeManager:GetInstance():TodayZero()
    return todayZero > self.lastUpdateTime
end

function VIPDataInfo:CanGetDailyFreeReward()
    if self.everyDayReward == 1 then
        return true
    end
    local todayZero = UITimeManager:GetInstance():TodayZero()
    return todayZero > self.lastUpdateTime
end


-- 0 不可领取
-- 1 可领取
-- -1 等级不够未解锁
function VIPDataInfo:GetPrivilegeRewardState(level)
    if level > self.level then
        return -1
    end
    for i = 1, #self._privilegeRewardCanGet do
        if self._privilegeRewardCanGet[i] == level then
            return 1
        end
    end
    return 0
end

function VIPDataInfo:GetIsUnlock()
    local curTime = UITimeManager:GetInstance():GetServerTime()
    if self.endTime~=nil and curTime<self.endTime then
        return true
    end
    return false
end

return VIPDataInfo