---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local VIPManager = BaseClass("VIPManager", Singleton);
local VIPDataInfo = require "DataCenter.VIPData.VIPDataInfo"

function VIPManager:__init()
    self.vipinfo = {}
    self._dailyPointConfig = {}
    self._vipPointGoodConfig = {}
end

function VIPManager:__delete()
    self.vipinfo = nil
    self._dailyPointConfig = nil
    self._vipPointGoodConfig = nil
end

function VIPManager:InitData(message)
    if message["vip"] ~= nil then
        local tempData = VIPDataInfo.New()
        tempData:UpdateVipInfo(message["vip"])
        self.vipinfo = tempData
        SFSNetwork.SendMessage(MsgDefines.VipGetRewardInfo)
        DataCenter.VIPTemplateManager:InitAllTemplate()
    end
end

function VIPManager:UpdateVipInfo(message,isLoginScore)
    if message ~= nil then
        self.vipinfo:UpdateVip(message,isLoginScore)
    end
end

--更新vip免费礼包信息
function VIPManager:UpdateVipBoxRewardInfo(message)
    self.vipinfo:UpdateVipBoxRewardInfo(message)
end

function VIPManager:GetVipData()
    if next(self.vipinfo) then
        return self.vipinfo
    end
    return nil
end

--请求最新信息
function VIPManager:RequestLatestVipInfo()
    SFSNetwork.SendMessage(MsgDefines.VipInfo)
end

--领取Vip每日点数奖励
function VIPManager:RequestVipGetDailyPoint()
    SFSNetwork.SendMessage(MsgDefines.VipAddLoginScore)
end

--领取VIP免费奖励
function VIPManager:ReceiveFreeReward()
    SFSNetwork.SendMessage(MsgDefines.VipGetEveryDayReward)
end

--领取VIP免费奖励
function VIPManager:GetEveryDayRewardMessageHandle(message)
    if message["vipInfo"] ~= nil then
        self:UpdateVipInfo(message["vipInfo"])
    end
    if message["reward"] ~= nil then
        DataCenter.RewardManager:ShowCommonReward(message)
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.VipRefreshFree)
end


--领取VIP付费奖励
function VIPManager:ReceivePrivilegeReward(level)
    SFSNetwork.SendMessage(MsgDefines.VipAddLoginScore,level)
end

--今日Point奖励
function VIPManager:TodayPoint()
    return self:GetDailyPointNum(self.vipinfo:GetLoginDays())
end

--明日Point奖励
function VIPManager:TomorrowPoint()
    return self:GetDailyPointNum(self.vipinfo:GetLoginDays() + 1)
end

--每日的点数奖励
function VIPManager:GetDailyPointNum(loginDays)
    local k1 = LuaEntry.DataConfig:TryGetStr("vip_aps", "k1")
    local dailyPointConfig = string.split(k1,";")
    if dailyPointConfig == nil or #dailyPointConfig < 1 then
        return 0
    end
    if loginDays >= #dailyPointConfig then
        return dailyPointConfig[#dailyPointConfig]
    end
    if loginDays < 0 then
        return 0
    end
    return dailyPointConfig[loginDays]
end

--付费礼包ID
function VIPManager:GetPointGoodList()
    local k2 = LuaEntry.DataConfig:TryGetStr("vip_aps", "k2")
    local vipPointGoodConfig = string.split(k2,";")
    return vipPointGoodConfig
end

--是否能领取每日Point奖励
function VIPManager:CanGetDailyPoint()
    if next(self.vipinfo) then
        return self.vipinfo:CanGetDailyPoint()
    end
    return false
end

--是否可以领取免费宝箱
function VIPManager:FreeGoodCanGet(level)
    return level == self.vipinfo.level and  self.vipinfo:CanGetDailyFreeReward()
end

function VIPManager:IsUnLock()
    if next(self.vipinfo) then
        return self.vipinfo:GetIsUnlock()
    end
    return false
end
--奖励物品更新VIP点数
function VIPManager:UpdateVipPoint(vipPoint)
    self.vipinfo:UpdateVipPoint(vipPoint)
end

--根据等级获取对应VIP数据
function VIPManager:GetVipTemplate(level)
    local vipData = DataCenter.VIPTemplateManager:GetTemplate(level)
    return vipData
end

--获取当前vip等级配置
function VIPManager:GetCurVipData()
    return self:GetVipTemplate(self.vipinfo.level)
end

--获取下一级等级配置
function VIPManager:GetNextVipData()
    local nextLevel = self.vipinfo.level + 1
    if nextLevel > DataCenter.VIPTemplateManager.maxLevel then   
        nextLevel = DataCenter.VIPTemplateManager.maxLevel
    end
    return self:GetVipTemplate(nextLevel)
end

--获取vip等级配置
function VIPManager:GetAllVipData()
    local vipData = DataCenter.VIPTemplateManager:GetAllTemplate()
    return vipData
end

--是否是vip点数道具
function VIPManager:IsVipPointItem(id)
    local vipConfig = self:GetPointGoodList()
    if vipConfig and next(vipConfig) then
        for i = 1, #vipConfig do
            if id == tonumber(vipConfig[i]) then
                return true
            end
        end
    end
    return false
end

--是否是vip礼包
function VIPManager:IsVipPack(Id)
    local vipdata = self:GetAllVipData()
    if vipdata and next(vipdata) then
        for i = 0, #vipdata do
            if tonumber(vipdata[i].reward2) == tonumber(Id) then
                return true
            end
        end
    end
    return false
end

function VIPManager:OnVipPackPurchase(id)
    --EventManager:GetInstance():Broadcast(EventId.VipRefreshPayGift,id)
    self:RequestLatestVipInfo()
end

--分析付费vip礼包状态
function VIPManager:AnalyzePayGoodState(level,reward2)
    local state = self.vipinfo:GetPrivilegeRewardState(level)
    --未解锁
    if state == -1 then
        return VipPayGoodState.Lock
    end
    
    --不可领取
    --分已买已领取和未购买
    if state == 0 then
        local hasBought = GiftPackageData.hasBought(tostring(reward2))
        return hasBought and VipPayGoodState.HasGet or VipPayGoodState.CanBuy
    end
    --已解锁已购买
    if state == 1 then
        return VipPayGoodState.HasGet
    end
end

--检查vip功能是否开放
function VIPManager:CheckOpen()
    local configOpenState = LuaEntry.DataConfig:CheckSwitch("vip_xitong")
    return configOpenState
end

--检查红点
function VIPManager:GetRedNum()
    local num = 0
    if self:CanGetDailyPoint() then
        num = num + 1
    end
    if next(self.vipinfo) then
        if self:FreeGoodCanGet(self.vipinfo.level) and self:IsUnLock() then
            num = num + 1
        end
    end
    return num
end

--检查是否达到vip开放等级
function VIPManager:CheckVipLvOpen()
    local k3 = LuaEntry.DataConfig:TryGetNum("vip_aps", "k3")
    if DataCenter.BuildManager.MainLv ~= nil then
        if k3 <= DataCenter.BuildManager.MainLv then
            return true
        else
            return false
        end
    end
end

function VIPManager:GetPackVipLv(packId)
    for _, data in pairs(self:GetAllVipData()) do
        if packId == data.reward2 then
            return data.level
        end
    end
    return -1
end

return VIPManager
