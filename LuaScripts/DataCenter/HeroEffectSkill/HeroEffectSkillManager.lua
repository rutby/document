---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Beef.
--- DateTime: 2022/6/9 12:10
---

local HeroEffectSkillManager = BaseClass("HeroEffectSkillManager")
local HeroEffectSkillData = require "DataCenter.HeroEffectSkill.HeroEffectSkillData"
local FlyBoard = require "DataCenter.FlyObject.FlyBoard"
local Resource = CS.GameEntry.Resource
local Setting = CS.GameEntry.Setting
local Localization = CS.GameEntry.Localization

-- 此功能支持的作用号
local EffectList =
{
    EffectDefine.DAILY_FREE_INFANTRY,
    EffectDefine.DAILY_FREE_TANK,
    EffectDefine.DAILY_FREE_PLANE,
    EffectDefine.DAILY_FREE_TRAP,
    EffectDefine.DAILY_FREE_MAIN_PAPER,
    EffectDefine.DAILY_FREE_TRADE_PAPER,
    EffectDefine.DAILY_FREE_BARRACKS_PAPER,
    EffectDefine.DAILY_FREE_GARAGE_REFIT_ITEM,
    EffectDefine.DAILY_FREE_TREAT,
    EffectDefine.BUILD_TIME_REDUCE,
    EffectDefine.RESEARCH_TIME_REDUCE,
    
    -- 2023/1/13 New
    EffectDefine.DAILY_FREE_ENERGY,
    EffectDefine.DAILY_FREE_MERCENARY_INFANTRY,
    EffectDefine.DAILY_FREE_MERCENARY_TANK,
    EffectDefine.DAILY_FREE_MERCENARY_PLANE,
    EffectDefine.DAILY_FREE_MERCENARY_TRAP,
}

-- 此功能支持的建筑
local BuildingEffect =
{
    [BuildingTypes.FUN_BUILD_INFANTRY_BARRACK] = { EffectDefine.DAILY_FREE_INFANTRY, EffectDefine.DAILY_FREE_MERCENARY_INFANTRY },
    [BuildingTypes.FUN_BUILD_CAR_BARRACK] = { EffectDefine.DAILY_FREE_TANK, EffectDefine.DAILY_FREE_MERCENARY_TANK },
    [BuildingTypes.FUN_BUILD_AIRCRAFT_BARRACK] = { EffectDefine.DAILY_FREE_PLANE, EffectDefine.DAILY_FREE_MERCENARY_PLANE },
    [BuildingTypes.FUN_BUILD_TRAP_BARRACK] = { EffectDefine.DAILY_FREE_TRAP, EffectDefine.DAILY_FREE_MERCENARY_TRAP },
    [BuildingTypes.FUN_BUILD_MAIN] = { EffectDefine.DAILY_FREE_MAIN_PAPER },
    [BuildingTypes.FUN_BUILD_BARRACKS] = { EffectDefine.DAILY_FREE_BARRACKS_PAPER },
    [BuildingTypes.FUN_BUILD_TRAINFIELD_1] = { EffectDefine.DAILY_FREE_GARAGE_REFIT_ITEM },
    [BuildingTypes.FUN_BUILD_HOSPITAL] = { EffectDefine.DAILY_FREE_TREAT },
}

local function __init(self)
    self.dataDict = {}
    self.effectIdToSkillIdsDict = {} -- Dict<effectId, List<skillId>>
    self.skillIdToHeroIdDict = {} -- Dict<skillId, heroId>
    self.tempPos = nil
    self.dataConfigInit = false
end

local function __delete(self)
    self.dataDict = {}
    self.effectIdToSkillIdsDict = {} -- Dict<effectId, List<skillId>>
    self.skillIdToHeroIdDict = {} -- Dict<skillId, heroId>
    self.tempPos = nil
    self.dataConfigInit = false
end

local function InitData(self, message)
    if message["heroEffectSkills"] then
        if self.dataConfigInit ==false then
            self:InitDataConfig()
        end
        local serverDataList = message["heroEffectSkills"]
        for _, serverData in ipairs(serverDataList) do
            local data = self.dataDict[serverData.effectId]
            if data then
                data:SetServerData(serverData)
            end
        end
    end
end

local function GetData(self, effectId)
    return self.dataDict[effectId]
end

local function GetCostNum(self, effectId)
    local key
    if effectId == EffectDefine.DAILY_FREE_INFANTRY then
        key = "k1"
    elseif effectId == EffectDefine.DAILY_FREE_TANK then
        key = "k2"
    elseif effectId == EffectDefine.DAILY_FREE_PLANE then
        key = "k3"
    elseif effectId == EffectDefine.DAILY_FREE_TRAP then
        key = nil
    elseif effectId == EffectDefine.DAILY_FREE_MAIN_PAPER then
        key = "k5"
    elseif effectId == EffectDefine.DAILY_FREE_TRADE_PAPER then
        key = "k7"
    elseif effectId == EffectDefine.DAILY_FREE_BARRACKS_PAPER then
        key = "k8"
    elseif effectId == EffectDefine.DAILY_FREE_GARAGE_REFIT_ITEM then
        key = "k9"
    elseif effectId == EffectDefine.DAILY_FREE_TREAT then
        key = "k4"
    end

    if key then
        return LuaEntry.DataConfig:TryGetNum("get_free_heroskill", key) or IntMaxValue
    else
        return IntMaxValue
    end
end

local function CanUse(self, effectId)
    local restNum = self:GetRestNum(effectId)
    return restNum > 0
end

local function Use(self, effectId)
    local data = self.dataDict[effectId]
    if data == nil then
        return
    end
    
    local restNum = self:GetRestNum(effectId)
    local costNum
    if DataCenter.BuildManager.MainLv >= LuaEntry.DataConfig:TryGetNum("get_free_heroskill", "k10") then
        costNum = restNum
    else
        costNum = math.min(data.costNum, restNum)
    end

    if effectId == EffectDefine.DAILY_FREE_INFANTRY or
       effectId == EffectDefine.DAILY_FREE_TANK or
       effectId == EffectDefine.DAILY_FREE_PLANE or
       effectId == EffectDefine.DAILY_FREE_TRAP
    then
        local cur = DataCenter.ArmyManager:GetTotalArmyNum(effectId == EffectDefine.DAILY_FREE_TRAP and ArmType.Trap or ArmType.None)
        local max = DataCenter.ArmyManager:GetArmyNumMax(effectId == EffectDefine.DAILY_FREE_TRAP and ArmType.Trap or ArmType.None)
        if cur + costNum > max then
            costNum = max - cur
            UIUtil.ShowTipsId(140305)
            Setting:SetBool(SettingKeys.FREE_SOLDIER_HIDE_WHEN_MAX, true)
            EventManager:GetInstance():Broadcast(EventId.RefreshHeroEffectSkill, effectId)
        else
            Setting:SetBool(SettingKeys.FREE_SOLDIER_HIDE_WHEN_MAX, false)
        end
    end

    if costNum > 0 then
        SFSNetwork.SendMessage(MsgDefines.UseHeroEffectSkill, effectId, costNum)
    end
end

local function GetRestNum(self, effectId)
    local data = self.dataDict[effectId]
    if data == nil then
        return 0
    end
    
    local totalNum = LuaEntry.Effect:GetGameEffect(effectId)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local sameDay = UITimeManager:GetInstance():IsSameDayForServer(curTime // 1000, data.time // 1000)
    if sameDay then
        return totalNum - data.num
    else
        return totalNum
    end
end

local function GetShowBubbleInfo(self, buildId)
    local effectIds = BuildingEffect[buildId]
    local infos = {}
    for _, effectId in ipairs(effectIds) do
        local info = {}
        info.effectId = effectId

        local data = self.dataDict[effectId]
        if data ~= nil then
            info.show = self:CanUse(effectId)
            if effectId == EffectDefine.DAILY_FREE_INFANTRY or
                    effectId == EffectDefine.DAILY_FREE_TANK or
                    effectId == EffectDefine.DAILY_FREE_PLANE or
                    effectId == EffectDefine.DAILY_FREE_TRAP then
                -- 收兵
                local cur = DataCenter.ArmyManager:GetTotalArmyNum(effectId == EffectDefine.DAILY_FREE_TRAP and ArmType.Trap or ArmType.None)
                local max = DataCenter.ArmyManager:GetArmyNumMax(effectId == EffectDefine.DAILY_FREE_TRAP and ArmType.Trap or ArmType.None)
                if cur >= max then
                    local hide = Setting:GetBool(SettingKeys.FREE_SOLDIER_HIDE_WHEN_MAX, false)
                    if hide then
                        info.show = false
                    end
                else
                    Setting:SetBool(SettingKeys.FREE_SOLDIER_HIDE_WHEN_MAX, false)
                end
            elseif effectId == EffectDefine.DAILY_FREE_TREAT then
                -- 医院
                if DataCenter.HospitalManager:GetHospitalCount() <= 0 then
                    info.show = false
                end
            end

            info.icon = HeroUtils.GetHeroIconPath(data.heroId)
            info.bubbleBg = HeroUtils.GetHeroBubbleBGPath(data.heroId)
            if info.show then
                table.insert(infos, info)
            end
        end
    end
    return infos
end

local function SetTempPos(self, pos)
    self.tempPos = pos
end

local function HandleUseHeroEffectSkillMessage(self, message)
    if message["effectSkill"] then
        local serverData = message["effectSkill"]
        local effectId = serverData.effectId
        local data = self.dataDict[effectId]
        if data then
            data:SetServerData(serverData)
            EventManager:GetInstance():Broadcast(EventId.RefreshHeroEffectSkill, effectId)
        end
    end
    
    -- 获得道具
    if message["goodId"] then
        local itemId = tonumber(message["goodId"])
        local count = tonumber(message["addNum"])
        self:FlyReward(RewardType.GOODS, itemId, count)
    end
    
    -- 获得士兵
    if message["userArmy"] then
        local armyId = message["userArmy"].id
        local count = tonumber(message["addNum"])
        self:FlyReward(RewardType.ARM, armyId, count)
        DataCenter.ArmyManager:ArmyAddMessageHandle(message)
    end
    
    -- 治疗士兵
    if message["hospitalArray"] then
        local cureArr = message["cureArr"]
        local armyId = cureArr.armyId
        local count = cureArr.num
        self:FlyReward(RewardType.ARM, armyId, count)
        DataCenter.HospitalManager:HospitalCureHandle(message)
    end
    
    -- 获得体力
    if message["addEnergy"] and self.tempPos ~= nil then
        local count = message["addEnergy"]
        local icon = DataCenter.RewardManager:GetPicByType(RewardType.FORMATION_STAMINA)
        UIUtil.DoFly(RewardType.FORMATION_STAMINA, math.min(count, 10), icon, self.tempPos, UIUtil.GetEnergyIconPos(), 80, 80)
        local str = Localization:GetString("134002") .. " * " .. count
        UIUtil.ShowTips(Localization:GetString("120028", str))
    end
    
    -- 总奖励弹窗
    if message["rewardInfo"] then
        local t = message["rewardInfo"]
        local reward = {}
        if t.goods then
            for _, v in ipairs(t.goods) do
                local data =
                {
                    type = RewardType.GOODS,
                    value =
                    {
                        itemId = v.goodId,
                        num = v.num,
                    },
                }
                table.insert(reward, data)
            end
        end
        if t.armys then
            for _, v in ipairs(t.armys) do
                local data =
                {
                    type = RewardType.ARM,
                    value = 
                    {
                        itemId = v.armyId,
                        num = v.num,
                    },
                }
                table.insert(reward, data)
            end
        end
        DataCenter.RewardManager:ShowGiftReward({ reward = reward }, Localization:GetString("128027"))
    end
end

local function FlyReward(self, rewardType, itemId, count)
    if self.tempPos == nil then
        return
    end
    
    local pos = DeepCopy(self.tempPos)
    local worldPos
    if CS.SceneManager.World ~= nil then
        worldPos = CS.SceneManager.World:ScreenPointToWorld(pos)
    else
        worldPos = Vector3.zero
    end
    local req = Resource:InstantiateAsync(UIAssets.FlyBoard)
    req:completed('+', function()
        if req.isError then
            req:Destroy()
            return
        end

        go = req.gameObject
        tf = go.transform
        go:SetActive(true)
        go.name = "Board_" .. itemId
        tf:SetParent(CS.SceneManager.World.DynamicObjNode)
        tf:Set_localScale(ResetScale.x, ResetScale.y, ResetScale.z)
        tf.position = worldPos

        local param = {}
        param.rewardType = rewardType
        param.itemId = itemId
        param.count = count, 10

        local boardItem = FlyBoard.New()
        boardItem:OnCreate(req)
        boardItem:SetParam(param)
        boardItem:Fly(function()
            local icon = DataCenter.RewardManager:GetPicByType(rewardType, itemId)
            local w = (rewardType == RewardType.ARM and 60 or 80)
            local h = (rewardType == RewardType.ARM and 78 or 80)
            UIUtil.DoFly(rewardType, math.min(count, 10), icon, pos, Vector3.New(0,0,0), w, h)
        end)
    end)
end

--作用号查找对应英雄
local function GetHeroByEffectId(self, effectId)
    if self.dataConfigInit ==false then
        self:InitDataConfig()
    end
    local skillIds = self.effectIdToSkillIdsDict[effectId]
    if skillIds then
        for _, skillId in ipairs(skillIds) do
            local heroId = self.skillIdToHeroIdDict[skillId]
            if heroId then
                return heroId
            end
        end
    end
    return nil
end

-- 根据技能查找作用号
local function GetEffectIdBySkillId(self, skillId)
    if self.dataConfigInit ==false then
        self:InitDataConfig()
    end
    for effectId, skillIds in pairs(self.effectIdToSkillIdsDict) do
        if table.hasvalue(skillIds, skillId) then
            return effectId
        end
    end
    return nil
end

-- 根据作用号查找建筑
local function GetBuildIdsByEffectId(self, effectId)
    local list = {}
    for buildId, effectIds in pairs(BuildingEffect) do
        if table.hasvalue(effectIds, effectId) then
            table.insert(list, buildId)
        end
    end
    return list
end

local function GetAllBuildIds(self)
    local list = {}
    for buildId, _ in pairs(BuildingEffect) do
        table.insert(list, buildId)
    end
    return list
end

local function IsHeroEffectSkillBuild(self, buildId)
    return not table.IsNullOrEmpty(BuildingEffect[buildId])
end

local function InitDataConfig(self)
    LocalController:instance():visitTable(TableName.SkillTab, function(skillId, line)
        local effectStr = line:getValue("effect") or ""
        local strs = string.split(effectStr, "|")
        for _, str in ipairs(strs) do
            local spls = string.split(str, ";")
            for _, spl in ipairs(spls) do
                local effectId = tonumber(spl)
                if table.hasvalue(EffectList, effectId) then
                    if self.effectIdToSkillIdsDict[effectId] == nil then
                        self.effectIdToSkillIdsDict[effectId] = {}
                    end
                    if not table.hasvalue(self.effectIdToSkillIdsDict[effectId], tonumber(skillId)) then
                        table.insert(self.effectIdToSkillIdsDict[effectId], tonumber(skillId))
                    end
                end
            end
        end
    end)

    LocalController:instance():visitTable(HeroUtils.GetHeroXmlName(), function(heroId, line)
        local skillList = HeroUtils:GetHeroSkillList(heroId, 1)
        for _, skillId in ipairs(skillList) do
            for _, skillIds in pairs(self.effectIdToSkillIdsDict) do
                if table.hasvalue(skillIds, skillId) then
                    self.skillIdToHeroIdDict[skillId] = tonumber(heroId)
                end
            end
        end
    end)

    for _, effectId in ipairs(EffectList) do
        local skillIds = self.effectIdToSkillIdsDict[effectId]
        if skillIds then
            for _, skillId in ipairs(skillIds) do
                local heroId = self.skillIdToHeroIdDict[skillId]
                if heroId then
                    local data = HeroEffectSkillData.New()
                    data:InitConfig(effectId, skillId, heroId, self:GetCostNum(effectId))
                    self.dataDict[effectId] = data
                    break
                end
            end
        end
    end
    
    self.dataConfigInit = true
end
HeroEffectSkillManager.__init = __init
HeroEffectSkillManager.__delete = __delete
HeroEffectSkillManager.AddListener = AddListener
HeroEffectSkillManager.RemoveListener = RemoveListener

HeroEffectSkillManager.InitData = InitData
HeroEffectSkillManager.GetData = GetData
HeroEffectSkillManager.GetCostNum = GetCostNum
HeroEffectSkillManager.CanUse = CanUse
HeroEffectSkillManager.Use = Use
HeroEffectSkillManager.GetRestNum = GetRestNum
HeroEffectSkillManager.GetShowBubbleInfo = GetShowBubbleInfo
HeroEffectSkillManager.SetTempPos = SetTempPos
HeroEffectSkillManager.HandleUseHeroEffectSkillMessage = HandleUseHeroEffectSkillMessage
HeroEffectSkillManager.FlyReward = FlyReward
HeroEffectSkillManager.GetHeroByEffectId = GetHeroByEffectId
HeroEffectSkillManager.GetEffectIdBySkillId = GetEffectIdBySkillId
HeroEffectSkillManager.GetBuildIdsByEffectId = GetBuildIdsByEffectId
HeroEffectSkillManager.GetAllBuildIds = GetAllBuildIds
HeroEffectSkillManager.IsHeroEffectSkillBuild = IsHeroEffectSkillBuild
HeroEffectSkillManager.InitDataConfig =InitDataConfig
return HeroEffectSkillManager