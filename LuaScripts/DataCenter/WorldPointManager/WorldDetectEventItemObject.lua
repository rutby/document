---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 19/3/2024 上午11:27
---
local base = WorldPointObject
local WorldDetectEventItemObject = BaseClass("WorldDetectEventItemObject",WorldPointObject)

local SpriteRenderer = CS.UnityEngine.SpriteRenderer

function WorldDetectEventItemObject:__init()
    base.__init(self)
    self.model= nil
    self.icon = nil
    self.detectEventInst = nil
    self.pickGarbageInst = nil
    self.pickResInst = nil
    self.colloctEffectObject = nil
    self.pickupEndTime = 0
    self.pickupStartTime = 0
    self.collectSpd = 0
    self.timeText = nil
    self.resNumText = nil
    self.eventId = nil
    self.isDisappearPlayEnd = false
    self.detectEventActiveCache = true
    self.timer_action = function(temp)
        self:UpdateProgress()
    end
    self:AddTimer()
end

function WorldDetectEventItemObject:__delete()
    if self.detectEventInst~=nil then
        self.detectEventInst:Destroy()
        self.detectEventInst = nil
    end
    if self.pickGarbageInst~=nil then
        self.pickGarbageInst:Destroy()
        self.pickGarbageInst = nil
    end
    if self.pickResInst~=nil then
        self.pickResInst:Destroy()
        self.pickResInst = nil
    end
    self:DeleteTimer()
    self.model= nil
    self.icon = nil
    self.detectEventInst = nil
    self.pickGarbageInst = nil
    self.pickResInst = nil
    self.colloctEffectObject = nil
    self.pickupEndTime = 0
    self.pickupStartTime = 0
    self.collectSpd = 0
    self.timeText = nil
    self.resNumText = nil
    self.eventId = nil
    self.isDisappearPlayEnd = false
    self.detectEventActiveCache = true
    base.__delete(self)
end

function WorldDetectEventItemObject:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function WorldDetectEventItemObject:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end

    self.timer:Start()
end

function WorldDetectEventItemObject:UpdateDetectEventActive()
    --if self.adjuster~=nil then
    --    self.adjuster:UpdateLod(CS.SceneManager.World:GetLodLevel())
    --end
end

function WorldDetectEventItemObject:NeedShowDetectEventIcon()
    return false
end

function WorldDetectEventItemObject:NeedShowTime()
    return false
end

function WorldDetectEventItemObject:NeedShowCollectSpeed()
    return false
end

function WorldDetectEventItemObject:GetEventId()
    return ""
end

function WorldDetectEventItemObject:GetModelPath()
    return "Assets/Main/Prefabs/Sample/sample.prefab"
end

function WorldDetectEventItemObject:UpdateProgress()
    if self.timeText ==nil or self.pickGarbageInst==nil then
        return
    end
    local leftTime = self.pickupEndTime -UITimeManager:GetInstance():GetServerTime()
    if leftTime>0 then
        self.timeText.text = UITimeManager:GetInstance():MilliSecondToFmtString(leftTime)
    end
end

function WorldDetectEventItemObject:UpdateCollectSpeed()
    if self.resNumText == nil or self.pickResInst == nil then
        return
    end
    self.resNumText.text = "+" .. self.collectSpd
    local info = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
    if info == nil and info.resourceInfo == nil and string.IsNullOrEmpty(info.resourceInfo.resourceId) then
        return
    end
    local resourceType = GetTableData(TableName.GatherResource, info.resourceInfo.resourceId,"resource_type")
    local icon = GetTableData(TableName.Resource, resourceType, "icon")
    self.resIcon:LoadSprite(string.format(LoadPath.CommonPath, icon))
end

function WorldDetectEventItemObject:DoWhenMarchInfoChange(userData)
    local showProgress = self:NeedShowTime()
    if showProgress == false then
        if self.pickGarbageInst ~=nil then
            self.pickGarbageInst:Destroy()
            self.pickGarbageInst =nil
        end

        self.detectEventActiveCache = true
        self:UpdateDetectEventActive()
        if self.detectEventInst~=nil and self.detectEventInst.gameObject~=nil then
            self.detectEventInst.gameObject:SetActive(true)
        end
    else
        if self.gameObject == nil then
            return
        end
        if self.pickGarbageInst ==nil then
            self.pickGarbageInst = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefabs/March/CollectGarbageUI.prefab")
            self.pickGarbageInst:completed('+',function()
                self.pickGarbageInst.gameObject.transform:SetParent(self.gameObject.transform)
                self.pickGarbageInst.gameObject.transform.localPosition = VecZero
                self.timeText = self.pickGarbageInst.gameObject.transform:Find("PosGo/TimeText"):GetComponent(typeof(CS.SuperTextMesh))
                local progress  =self.pickGarbageInst.gameObject.transform:GetComponent(typeof(CS.ChangeSceneCircleSlider))
                progress:Init(self.pickupStartTime,self.pickupEndTime)
                self:UpdateProgress()
            end)
        end

        self.detectEventActiveCache = false
        self:UpdateDetectEventActive()
        if self.detectEventInst~=nil and self.detectEventInst.gameObject~=nil then
            self.detectEventInst.gameObject:SetActive(false)
        end
    end

    local showCollectSpeed = self:NeedShowCollectSpeed()
    if showCollectSpeed == false then
        if self.pickResInst ~= nil then
            self.pickResInst:Destroy()
            self.pickResInst = nil
        end
    else
        if self.pickResInst == nil then
            self.pickResInst = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefabs/March/CollectResourceUI.prefab")
            self.pickResInst:completed('+',function()
                self.pickResInst.gameObject.transform:SetParent(self.gameObject.transform)
                self.pickResInst.gameObject.transform.localPosition = VecZero
                self.resNumText = self.pickResInst.gameObject.transform:Find("PosGo/Text"):GetComponent(typeof(CS.SuperTextMesh))
                self.resIcon = self.pickResInst.gameObject.transform:Find("PosGo/Icon"):GetComponent(typeof(SpriteRenderer))
                self:UpdateCollectSpeed()
            end)
        end
    end
end
function WorldDetectEventItemObject:UpdateSelfMarch(msg)
    base.UpdateSelfMarch(self,msg)
    self:DoWhenMarchInfoChange()
end
function WorldDetectEventItemObject:Destroy()
    if self.detectEventInst~=nil then
        self.detectEventInst:Destroy()
        self.detectEventInst = nil
    end
    if self.pickGarbageInst~=nil then
        self.pickGarbageInst:Destroy()
        self.pickGarbageInst = nil
    end
    
    base.Destroy(self)
end

function WorldDetectEventItemObject:DoWhenCreateComplete(model)
    
end

function WorldDetectEventItemObject:RemoveInst()
    if self.detectEventInst~=nil then
        self.detectEventInst:Destroy()
        self.detectEventInst = nil
    end
    if self.pickGarbageInst~=nil then
        self.pickGarbageInst:Destroy()
        self.pickGarbageInst = nil
    end
end
function WorldDetectEventItemObject:CreateGameObject()
    base.CreateGameObject(self)
    self.eventId = self:GetEventId()
    self.isDisappearPlayEnd = false
    local info = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
    if info~=nil then
        self:AddOldObject()
        self.instance = CS.GameEntry.Resource:InstantiateAsync(self:GetModelPath())
        self.instance:completed('+',function()
            self:RemoveInst()
            self:ClearOldObject()
            self.gameObject = self.instance.gameObject
            if self.gameObject~=nil then
                self.gameObject.name = "WorldPointObject_"..self.pointIndex
                self.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
                self.gameObject.transform.position = SceneUtils.TileIndexToWorld(self.pointIndex,ForceChangeScene.World)
                self.gameObject:SetActive(self.isVisible)
                self.gameObject.transform.localScale = Vector3.one
                self.model = self.gameObject.transform:Find("Model").gameObject
                self.model.gameObject.transform.localScale = Vector3.one
                self.icon = self.gameObject.transform:Find("Icon").gameObject
                self.icon:SetActive(false)
                local labels = self.gameObject.transform:GetComponentsInChildren(typeof(CS.UIWorldLabel),true)
                for i = 0, labels.Length-1 do
                    local item = labels[i]
                    if item~=nil then
                        item:SetLevel(false)
                    end
                end
                self:SetAutoAdjustLod()
                self:ShowDetectEvent()
                self:DoWhenMarchInfoChange()
                self:DoWhenCreateComplete(self.model)
                self:CheckShowTroopDestination()
                self:SetClickEvent()
            end
        end)
    end
end
function WorldDetectEventItemObject:DoWhenCreateComplete(model)
    
end
function WorldDetectEventItemObject:ShowDetectEvent()
    if self:NeedShowDetectEventIcon() ==false then
        return
    end
    if self.detectEventInst ~=nil then
        return
    end
    self.detectEventInst = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefabs/March/WorldDetectInfo.prefab")
    self.detectEventInst:completed('+',function()
        self.detectEventInst.gameObject:SetActive(true)
        self.detectEventInst.gameObject.transform:SetParent(self.gameObject.transform)
        self.detectEventInst.gameObject.transform.localPosition = VecZero
        local eventQuality = self.detectEventInst.gameObject.transform:Find("Transform/Detect_event_quality_icon"):GetComponent(typeof(SpriteRenderer))
        local eventIcon = self.detectEventInst.gameObject.transform:Find("Transform/Detect_event_icon"):GetComponent(typeof(SpriteRenderer))
        local quality = toInt(GetTableData(TableName.DetectEvent,toInt(self.eventId),"quality"))
        local tempIcon = GetTableData(TableName.DetectEvent,toInt(self.eventId),"icon")
        local iconString = "Assets/Main/Sprites/UI/UIRadarCenter/"..tempIcon
        local type = toInt(GetTableData(TableName.DetectEvent,toInt(self.eventId),"type"))
        local qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_green"
        if type == 10 then
            qualityStr = "Assets/Main/Sprites/UI/UIRadarCenter/Detect_spec_gold"
            eventIcon.transform.localPosition = VecZero
        else
            eventIcon.transform.localPosition = Vector3.New(0,0.11,0)
            if quality == DetectEventColor.DETECT_EVENT_WHITE then
                qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_white"
            elseif quality == DetectEventColor.DETECT_EVENT_GREEN then
                qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_green"
            elseif quality == DetectEventColor.DETECT_EVENT_BLUE then
                qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_blue"
            elseif quality == DetectEventColor.DETECT_EVENT_PURPLE then
                qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_purple"
            elseif quality == DetectEventColor.DETECT_EVENT_ORANGE then
                qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_orange"
            elseif quality == DetectEventColor.DETECT_EVENT_GOLDEN then
                qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_golden"
            end
        end
        eventQuality:LoadSprite(qualityStr)
        eventIcon:LoadSprite(iconString)
        if self.pickGarbageInst~=nil then
            self.detectEventActiveCache = false
            self:UpdateDetectEventActive()
        end
    end )
end

function WorldDetectEventItemObject:GetPickPoint(startPt)
    local result = {}
    if self.model~=nil and self.model.gameObject~=nil then
        local distance = 1.5
        local index = 0
        local total = 5
        local angleGap = (360/total)
        local diffX = startPt.x - self.model.transform.position.x
        local diffZ = startPt.z - self.model.transform.position.z
        local startAngle = Mathf.Atan2(diffZ,diffX)*180/Mathf.PI
        while index<total do
            local angle = angleGap * index + startAngle
            local addX = distance*math.cos(angle*Mathf.PI/180)
            local addZ = distance*math.sin(angle*Mathf.PI/180)
            local posV3 = self.model.transform.position
            local pt = Vector3.New(posV3.x+addX,posV3.y,posV3.z+addZ)
            table.insert(result,pt)
            index = index+1
        end
    end
    return result
end

return WorldDetectEventItemObject