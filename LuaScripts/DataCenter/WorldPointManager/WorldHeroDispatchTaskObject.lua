---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 19/3/2024 上午11:24
---
local base = WorldPointObject
local Localization = CS.GameEntry.Localization
local WorldHeroDispatchTaskObject = BaseClass("WorldHeroDispatchTaskObject",WorldPointObject)
function WorldHeroDispatchTaskObject:__init()
    base.__init(self)
    self.model= nil
    self.icon = nil
    self.dispatchRewardInst = nil
    self.dispatchCdInst = nil
    self.dispatchOpenInst = nil
    self.pickupEndTime = 0
    self.pickupStartTime = 0
    self.timeText = nil
    self.bubbleTouchEvent = nil
    self.timer_action = function(temp)
        self:UpdateProgress()
    end
    self:AddTimer()
    self.UpdateRewardUISignal = function(msg) self:CheckShowRewardUI(msg) end
    EventManager:GetInstance():AddListener(EventId.AllianceBaseDataUpdated, self.UpdateRewardUISignal)
    EventManager:GetInstance():AddListener(EventId.DispatchTaskTodayNumUpdate, self.UpdateRewardUISignal)
end

function WorldHeroDispatchTaskObject:__delete()
    EventManager:GetInstance():RemoveListener(EventId.AllianceBaseDataUpdated, self.UpdateRewardUISignal)
    EventManager:GetInstance():RemoveListener(EventId.DispatchTaskTodayNumUpdate, self.UpdateRewardUISignal)
    if self.dispatchRewardInst~=nil then
        self.dispatchRewardInst:Destroy()
        self.dispatchRewardInst = nil
    end
    if self.dispatchCdInst~=nil then
        self.dispatchCdInst:Destroy()
        self.dispatchCdInst = nil
    end
    if self.dispatchOpenInst~=nil then
        self.dispatchOpenInst:Destroy()
        self.dispatchOpenInst = nil
    end
    self:DeleteTimer()
    self.model= nil
    self.icon = nil
    self.pickupEndTime = 0
    self.pickupStartTime = 0
    self.timeText = nil
    base.__delete(self)
end

function WorldHeroDispatchTaskObject:DeleteTimer()
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

function WorldHeroDispatchTaskObject:AddTimer()
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
    end

    self.timer:Start()
end

function WorldHeroDispatchTaskObject:UpdateDetectEventActive()
    --if self.adjuster~=nil then
    --    self.adjuster:UpdateLod(CS.SceneManager.World:GetLodLevel())
    --end
end

function WorldHeroDispatchTaskObject:NeedShowTime()
    self.pickupStartTime = 0
    self.pickupEndTime = 0
    local info = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
    if info~=nil and info.extraInfo~=nil then
        if info.pointType == WorldPointType.HERO_DISPATCH then
            local dispatchMission = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.DispatchMission")
            if dispatchMission~=nil then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if dispatchMission.finishTime>=curTime then
                    self.pickupStartTime = dispatchMission.startTime
                    self.pickupEndTime = dispatchMission.finishTime
                    return true
                end
            end
            
        end
    end
    return false
end

function WorldHeroDispatchTaskObject:GetModelPath()
    local info = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
    if info~=nil and info.extraInfo~=nil then
        if info.pointType == WorldPointType.HERO_DISPATCH then
            local dispatchMission = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.DispatchMission")
            if dispatchMission~=nil then
                local cfgId = dispatchMission.missionId
                local modelName = GetTableData(TableName.LwDispatchTask,cfgId,"model_name")
                if modelName~=nil and modelName~="" then
                    return "Assets/Main/Prefab_Dir/DispatchTask/"..modelName..".prefab"
                end
            end
        end
    end
    return "Assets/Main/Prefab_Dir/DispatchTask/dispatchTask1.prefab"
end
function WorldHeroDispatchTaskObject:UpdateProgress()
    if self.timeText ==nil or self.dispatchCdInst ==nil then
        return
    end
    local leftTime = self.pickupEndTime - UITimeManager:GetInstance():GetServerTime()
    if leftTime>0 then
        self.timeText.text = UITimeManager:GetInstance():MilliSecondToFmtString(leftTime)
    else
        if self.dispatchCdInst~=nil then
            self.dispatchCdInst:Destroy()
            self.dispatchCdInst = nil
        end
        self:CheckShowRewardUI()
    end
end
function WorldHeroDispatchTaskObject:CheckShowRewardUI()
    if self.gameObject == nil then
        return
    end
    local info = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
    if info~=nil and info.extraInfo~=nil then
        if info.pointType == WorldPointType.HERO_DISPATCH then
            local dispatchMission = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.DispatchMission")
            if dispatchMission~=nil then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if dispatchMission.finishTime>0 and dispatchMission.finishTime<=curTime then
                    if self.dispatchRewardInst~=nil then
                        if self.dispatchRewardInst.gameObject~=nil then
                            self.UpdateShowRewardUI(dispatchMission, self.dispatchRewardInst.gameObject)
                        end
                        return
                    end
                    self.dispatchRewardInst = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefab_Dir/DispatchTask/dispatchTaskRewardUI.prefab")
                    self.dispatchRewardInst:completed('+', function()
                        if self.gameObject == nil then
                            if self.dispatchRewardInst~=nil then
                                self.dispatchRewardInst:Destroy()
                                self.dispatchRewardInst = nil
                            end
                            return
                        end
                        if self.dispatchRewardInst.gameObject~=nil then
                            self.dispatchRewardInst.gameObject:SetActive(true)
                            self.dispatchRewardInst.gameObject.transform:SetParent(self.gameObject.transform)
                            self.dispatchRewardInst.gameObject.transform.localPosition = VecZero
                            self:UpdateShowRewardUI(dispatchMission, self.dispatchRewardInst.gameObject)
                            self:UpdateDetectEventActive()
                            self.bubbleTouchEvent = self.dispatchRewardInst.gameObject.transform:GetComponentInChildren(typeof(CS.TouchObjectEventTrigger),true)
                            if self.bubbleTouchEvent then
                                self.bubbleTouchEvent.onPointerClick = function()
                                    UIUtil.OnClickWorld(self.pointIndex, ClickWorldType.Collider)
                                end
                            end
                        end
                    end)
                end
            end

        end
        
    end
    
end

function WorldHeroDispatchTaskObject:UpdateShowRewardUI(info,dispatchReward)
    if info ==nil or dispatchReward == nil or dispatchReward.transform == nil then
        return
    end
    local stealText = dispatchReward.transform:Find("Transform/StealText"):GetComponent(typeof(CS.SuperTextMesh))
    local eventQuality = dispatchReward.transform:Find("Transform/Detect_event_quality_icon"):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
    local eventIcon = dispatchReward.transform:Find("Transform/Detect_event_icon"):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
    if info.ownerUid == LuaEntry.Player.uid then
        eventIcon:LoadSprite("Assets/Main/Sprites/UI/UIBuildBtns/lyp_daditu_paiqianlingqu.png")
        eventQuality:LoadSprite("Assets/Main/Sprites/UI/UIBuildBubble/cfm_zhujiemian_qipao_2")
        stealText.gameObject:SetActive(false)
    elseif info.allianceId~=nil and info.allianceId~=""  and info.allianceId == LuaEntry.Player.allianceId then
        local todayAssistNum = DataCenter.ActDispatchTaskDataManager:GetTodayAssistNum()
        local maxAssistNum = DataCenter.ActDispatchTaskDataManager:GetDispatchSetting("aid_count")
        if todayAssistNum<maxAssistNum then
            eventIcon:LoadSprite("Assets/Main/Sprites/UI/UIBuildBtns/lyp_daditu_paiqianlingqu.png")
            eventQuality:LoadSprite("Assets/Main/Sprites/UI/UIBuildBubble/cfm_zhujiemian_qipao_lan")
            stealText.gameObject:SetActive(false)
        else
            stealText.gameObject:SetActive(false)
            dispatchReward:SetActive(false)
        end
        
    else
        eventQuality:LoadSprite("Assets/Main/Sprites/UI/UIBuildBubble/cfm_zhujiemian_qipao_1")
        local steal_max_count = toInt(GetTableData(TableName.LwDispatchTask, info.missionId,"steal_maxtimes"))
        local curCount = table.count(info.stealUids)
        if curCount<steal_max_count then
            stealText.gameObject:SetActive(true)
            stealText.text  = Localization:GetString("150033",curCount,steal_max_count)
            local hasSteal = false
            if curCount>0 then
                for i = 1,curCount do
                    if info.stealUids[i] == LuaEntry.Player.uid then
                        hasSteal = true
                    end
                end
            end
            if hasSteal == true then
                -- 已经偷取过了，不可再偷，换成分享图标
                eventIcon:LoadSprite("Assets/Main/Sprites/UI/UIBuildBtns/zyf_zhujiemian_qipao_fenxiang.png")
            else
                local todayStealNum = DataCenter.ActDispatchTaskDataManager:GetTodayStealNum()
                local maxStealNum = DataCenter.ActDispatchTaskDataManager:GetDispatchSetting("steal_count")
                if todayStealNum<maxStealNum then
                    eventIcon:LoadSprite("Assets/Main/Sprites/UI/UIBuildBtns/lyp_daditu_paiqianlingqu.png")
                else
                    eventIcon:LoadSprite("Assets/Main/Sprites/UI/UIBuildBtns/zyf_zhujiemian_qipao_fenxiang.png")
                end
            end
        else
            stealText.gameObject:SetActive(false)
            dispatchReward:SetActive(false)
        end
    end
end

function WorldHeroDispatchTaskObject:DoWhenMarchInfoChange(userData)
    local showProgress = self:NeedShowTime()
    if showProgress == false then
        if self.dispatchCdInst ~=nil then
            self.dispatchCdInst:Destroy()
            self.dispatchCdInst =nil
        end
        self.detectEventActiveCache = true
        self:UpdateDetectEventActive()
        self:CheckShowRewardUI()
    else
        if self.gameObject == nil then
            return
        end
        if self.dispatchCdInst ==nil then
            self.dispatchCdInst = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefab_Dir/DispatchTask/dispatchTaskCdUI.prefab")
            self.dispatchCdInst:completed('+',function()
                self.dispatchCdInst.gameObject.transform:SetParent(self.gameObject.transform)
                self.dispatchCdInst.gameObject.transform.localPosition = VecZero
                self.timeText = self.dispatchCdInst.gameObject.transform:Find("PosGo/TimeText"):GetComponent(typeof(CS.SuperTextMesh))
                local progress  =self.dispatchCdInst.gameObject.transform:GetComponent(typeof(CS.ChangeSceneCircleSlider))
                progress:Init(self.pickupStartTime,self.pickupEndTime)
                self:UpdateProgress()
            end )
        end
        self:UpdateDetectEventActive()
        self:CheckShowRewardUI()
    end
end
function WorldHeroDispatchTaskObject:UpdateSelfMarch(msg)
    base.UpdateSelfMarch(self,msg)
    self:DoWhenMarchInfoChange()
end

function WorldHeroDispatchTaskObject:Destroy()
    if self.bubbleTouchEvent~=nil then
        self.bubbleTouchEvent.onPointerClick = nil
    end
    if self.dispatchRewardInst~=nil then
        self.dispatchRewardInst:Destroy()
        self.dispatchRewardInst = nil
    end
    if self.dispatchCdInst~=nil then
        self.dispatchCdInst:Destroy()
        self.dispatchCdInst = nil
    end
    if self.dispatchOpenInst~=nil then
        self.dispatchOpenInst:Destroy()
        self.dispatchOpenInst = nil
    end
    self:DeleteTimer()
    self.model= nil
    self.icon = nil
    self.pickupEndTime = 0
    self.pickupStartTime = 0
    self.timeText = nil
    base.Destroy(self)
end

function WorldHeroDispatchTaskObject:DoWhenCreateComplete(model)

end

function WorldHeroDispatchTaskObject:RemoveInst()
    if self.dispatchRewardInst~=nil then
        self.dispatchRewardInst:Destroy()
        self.dispatchRewardInst = nil
    end
    if self.dispatchCdInst~=nil then
        self.dispatchCdInst:Destroy()
        self.dispatchCdInst = nil
    end
    if self.dispatchOpenInst~=nil then
        self.dispatchOpenInst:Destroy()
        self.dispatchOpenInst = nil
    end
    
end
function WorldHeroDispatchTaskObject:CreateGameObject()
    base.CreateGameObject(self)
    local info = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
    if info~=nil then
        self:AddOldObject()
        self.instance = CS.GameEntry.Resource:InstantiateAsync(self:GetModelPath())
        self.instance:completed('+',function()
            self:RemoveInst()
            self:ClearOldObject()
            self.gameObject = self.instance.gameObject
            if self.gameObject~=nil then
                self.gameObject.name = "WorldPointObject_"..self.pointIndex
                self.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
                self.gameObject.transform.position = SceneUtils.TileIndexToWorld(self.pointIndex,ForceChangeScene.World)
                self.gameObject:SetActive(self.isVisible)
                self.gameObject.transform.localScale = Vector3.one
                self.model = self.gameObject.transform:Find("Model").gameObject
                self.model.gameObject.transform.localScale = Vector3.one
                self.icon = self.gameObject.transform:Find("Icon/MonsterIconSprite"):GetComponentInChildren(typeof(CS.UnityEngine.SpriteRenderer), true)
                --self.icon:SetActive(false)
                local labels = self.gameObject.transform:GetComponentsInChildren(typeof(CS.UIWorldLabel),true)
                local level = 1
                local tempInfo = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
                if tempInfo~=nil and tempInfo.extraInfo~=nil then
                    if tempInfo.pointType == WorldPointType.HERO_DISPATCH then
                        local dispatchMission = PBController.ParsePbFromBytes(tempInfo.extraInfo, "protobuf.DispatchMission")
                        if dispatchMission~=nil then
                            local cfgId = dispatchMission.missionId
                            level = GetTableData(TableName.LwDispatchTask,cfgId,"level")
                            local quality = GetTableData(TableName.LwDispatchTask,cfgId,"color")
                            self.icon:LoadSprite("Assets/Main/Sprites/LodIcon/lyp_daditu_ziyuandian_0"..quality)
                        end
                    end
                end
                for i = 0, labels.Length-1 do
                    local item = labels[i]
                    if item~=nil then
                        item:SetLevel(toInt(level))
                    end
                end
                self:SetAutoAdjustLod()
                self:DoWhenMarchInfoChange()
                self:DoWhenCreateComplete(self.model)
                self:CheckShowTroopDestination()
                self:SetClickEvent()
            end
        end)
    end
end
function WorldHeroDispatchTaskObject:DoWhenCreateComplete(model)

end

return WorldHeroDispatchTaskObject