---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 1/4/2024 上午11:38
---
local base = WorldPointObject
local Const = require"Scene.WorldTroopManager.Const"
local Localization = CS.GameEntry.Localization
local WorldMonsterObject = BaseClass("WorldMonsterObject",WorldPointObject)
function WorldMonsterObject:__init()
    base.__init(self)
    self.monsterInfo = nil
    self.monsterLevel = 1
    self.model = nil
end

function WorldMonsterObject:__delete()
    if self.monsterInfo~=nil then
        local marchType = self.monsterInfo.type
        if marchType == NewMarchType.ACT_BOSS or marchType == NewMarchType.PUZZLE_BOSS then
            EventManager:GetInstance():Broadcast(EventId.HideActBossHead,self.monsterInfo.uuid)
        elseif marchType == NewMarchType.ALLIANCE_BOSS then
            EventManager:GetInstance():Broadcast(EventId.HideAllianceBossHead,self.monsterInfo.uuid)
        else
            EventManager:GetInstance():Broadcast(EventId.HideMonsterHead,self.monsterInfo.uuid)
        end
    end
    self:HideDetectEvent()
    self.monsterInfo = nil
    self.monsterLevel = 1
    self.model = nil
    base.__delete(self)
end
function WorldMonsterObject:Destroy()
    if self.monsterInfo~=nil then
        local marchType = self.monsterInfo.type
        if marchType == NewMarchType.ACT_BOSS or marchType == NewMarchType.PUZZLE_BOSS then
            EventManager:GetInstance():Broadcast(EventId.HideActBossHead,self.monsterInfo.uuid)
        elseif marchType == NewMarchType.ALLIANCE_BOSS then
            EventManager:GetInstance():Broadcast(EventId.HideAllianceBossHead,self.monsterInfo.uuid)
        else
            EventManager:GetInstance():Broadcast(EventId.HideMonsterHead,self.monsterInfo.uuid)
        end
    end
    self:HideDetectEvent()
    base.Destroy(self)
end
function WorldMonsterObject:CreateGameObject()
    base.CreateGameObject(self)
    local info = DataCenter.WorldPointManager:GetPointInfo(self.pointIndex)
    if info~=nil then
        --self:AddOldObject()
        self.monsterInfo = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.WorldPointMonster")
        if self.instance ~= nil then
            return
        end
        local prefabPath = WorldBuildUtil.GetWorldPointModelPath(info)
        if prefabPath~=nil and prefabPath~="" then
            self.instance = CS.GameEntry.Resource:InstantiateAsync(prefabPath)
            self.instance:completed('+',function()
                self.gameObject = self.instance.gameObject
                if self.gameObject~=nil then
                    self.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
                    self.gameObject.transform.position = SceneUtils.TileIndexToWorld(self.pointIndex,ForceChangeScene.World)
                    self.model = self.gameObject.transform:Find(Const.modelPath1)
                    self.gameObject:SetActive(self.isVisible)
                    self.anims = self.gameObject.transform:GetComponentsInChildren(typeof(CS.SimpleAnimation),true)
                    self.gpuAnims = self.gameObject.transform:GetComponentsInChildren(typeof(CS.GPUSkinningPlayerMono),true)
                    self.cityLabels = self.gameObject.transform:GetComponentsInChildren(typeof(CS.UIWorldLabel),true)
                end
                self:SetRotation(Quaternion.Euler(0, 180, 0))
                self:SetLabel()
                self:PlayAnim(Const.WorldTroopAnim.Anim_Idle)
                self:ShowDetectEvent()
                self:SetAutoAdjustLod()
                self:UpdateGameObject()
                self:CheckShowTroopDestination()
                self:SetClickEvent()
            end)
        end
    end
end
function WorldMonsterObject:SetAutoAdjustLod()
    base.SetAutoAdjustLod(self)
    if self.monsterInfo == nil then
        return
    end
    local type = self.monsterInfo.type
    if type == NewMarchType.ACT_BOSS or type == NewMarchType.PUZZLE_BOSS or type == NewMarchType.CHALLENGE_BOSS then
        self.adjuster:SetNoOptimizeActivate(false)
        self.adjuster:SetLodType(LodType.WorldBoss)
    end
end

function WorldMonsterObject:SetLabel()
    if self.monsterInfo == nil then
        return
    end
    if self.cityLabels ==nil then
        return
    end
    local type = self.monsterInfo.type
    if type == NewMarchType.MONSTER
            or type == NewMarchType.BOSS
            or type == NewMarchType.ACT_BOSS
            or type == NewMarchType.PUZZLE_BOSS
            or type == NewMarchType.MONSTER_SIEGE
            or type == NewMarchType.ALLIANCE_BOSS
            or type == NewMarchType.CHALLENGE_BOSS then
        self.monsterLevel = DataCenter.MonsterTemplateManager:GetTableValue(self.monsterInfo.monsterId, "level")
        if self.monsterLevel == nil then
            self.monsterLevel = 1
        end
    end
    if type == NewMarchType.MONSTER
            or type == NewMarchType.BOSS
            or type == NewMarchType.ACT_BOSS
            or type == NewMarchType.MONSTER_SIEGE
            or type == NewMarchType.PUZZLE_BOSS
            or type == NewMarchType.CHALLENGE_BOSS then
        local labels = self.cityLabels
        for i = 0, labels.Length-1 do
            local item = labels[i]
            if item~=nil then
                item:SetLevel(self.monsterLevel)
            end
        end
    elseif type == NewMarchType.ALLIANCE_BOSS then
        local marchInfo = PBController.ParsePbFromBytes(self.monsterInfo.monsterExtraInfo, "protobuf.AllianceBossInfo")
        local tempName = DataCenter.MonsterTemplateManager:GetTableValue(self.monsterInfo.monsterId, "name")
        local nameStr = Localization:GetString("311026",marchInfo.allianceAbbr,Localization:GetString(tempName))
        local labels = self.cityLabels
        for i = 0, labels.Length-1 do
            local item = labels[i]
            if item~=nil then
                item:SetLevel(self.monsterLevel)
                item:SetName(nameStr)
            end
        end
    end
end

function WorldMonsterObject:ShowDetectEvent()
    if self.monsterInfo == nil then
        return
    end
    local type = self.monsterInfo.type
    if type ~= NewMarchType.MONSTER then
        return
    end
    local marchInfo = PBController.ParsePbFromBytes(self.monsterInfo.monsterExtraInfo, "protobuf.NormalMonsterInfo")
    if marchInfo.eventId~=nil and marchInfo.eventId~="" and self.monsterInfo.belongUid == LuaEntry.Player.uid then
        if self.detectEventInst ==nil then
            local eventId = marchInfo.eventId
            self.detectEventInst = CS.GameEntry.Resource:InstantiateAsync("Assets/Main/Prefabs/March/WorldDetectInfo.prefab")
            self.detectEventInst:completed('+',function()
                self.detectEventInst.gameObject:SetActive(true)
                self.detectEventInst.gameObject.transform:SetParent(self.gameObject.transform)
                self.detectEventInst.gameObject.transform.localPosition = VecZero
                local eventQuality = self.detectEventInst.gameObject.transform:Find("Transform/Detect_event_quality_icon"):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
                local eventIcon = self.detectEventInst.gameObject.transform:Find("Transform/Detect_event_icon"):GetComponent(typeof(CS.UnityEngine.SpriteRenderer))
                local quality = toInt(GetTableData(TableName.DetectEvent,toInt(eventId),"quality"))
                local tempIcon = GetTableData(TableName.DetectEvent,toInt(eventId),"icon")
                local iconString = "Assets/Main/Sprites/UI/UIRadarCenter/"..tempIcon
                local type = toInt(GetTableData(TableName.DetectEvent,toInt(eventId),"type"))
                local qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_green"
                if type == 10 then
                    qualityStr = "Assets/Main/Sprites/UI/UIRadarCenter/Detect_spec_gold"
                    eventIcon.transform.localPosition = VecZero
                else
                    eventIcon.transform.localPosition = Vector3.New(0,0.11,0)
                    if quality == DetectEventColor.DETECT_EVENT_WHITE then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_white"
                    elseif quality == DetectEventColor.DETECT_EVENT_GREEN then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_green"
                    elseif quality == DetectEventColor.DETECT_EVENT_BLUE then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_blue"
                    elseif quality == DetectEventColor.DETECT_EVENT_PURPLE then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_purple"
                    elseif quality == DetectEventColor.DETECT_EVENT_ORANGE then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_orange"
                    elseif quality == DetectEventColor.DETECT_EVENT_GOLDEN then
                        qualityStr = "Assets/Main/Sprites/UI/UIBuildBubble/UIDetectEven_img_color_golden"
                    end
                end
                eventQuality:LoadSprite(qualityStr)
                eventIcon:LoadSprite(iconString)
            end )
        end
    else
        self:HideDetectEvent()
    end
end
function WorldMonsterObject:HideDetectEvent()
    if self.detectEventInst~=nil then
        self.detectEventInst:Destroy()
        self.detectEventInst  =nil
    end
end

function WorldMonsterObject:PlayAnim(animName)
    if self.anims~=nil then
        for i = 0, self.anims.Length-1 do
            local item = self.anims[i]
            if item~=nil then
                item:Play(animName)
            end
        end
    end
    if self.gpuAnims~=nil then
        for i = 0, self.gpuAnims.Length-1 do
            local item = self.gpuAnims[i]
            if item~=nil then
                item:Play(animName)
            end
        end
    end
end

function WorldMonsterObject:Attack()
    self:PlayAnim(Const.WorldTroopAnim.Anim_Attack)
end
function WorldMonsterObject:GetTargetPos(targetUuid)
    local troop =WorldTroopManager:GetInstance():GetTroop(targetUuid)
    if troop ~=nil then
        return troop:GetPosition()
    else
        local march = DataCenter.WorldMarchDataManager:GetMarch(targetUuid)
        if march~=nil then
            local pos = march:GetMarchCurPos()
            return Vector3.New(pos.x,pos.y,pos.z)
        end
    end
end

function WorldMonsterObject:LookAtTarget(targetUuid)
    if self.gameObject ==nil then
        return
    end
    local targetPos = self:GetTargetPos(targetUuid)
    if targetPos == nil then
        return
    end
    local normalized = Vector3.Normalize(targetPos - self.gameObject.transform.position)
    if normalized.x == 0 and normalized.y ==0 and normalized.z == 0 then
    else
        self:SetRotation(Quaternion.LookRotation(normalized,Vector3.up))
    end
end

function WorldMonsterObject:SetRotation(rotation)
    local rot = rotation
    if rot == nil then
        return
    end
    if self.model == nil then
        return
    end
    local tempRot = self.model.transform.rotation
    if Quaternion.Equals(tempRot,rot) == false then
        self.model.transform.rotation = rot
    end
end

function WorldMonsterObject:GetTransform()
    if self.gameObject ==nil then
        return nil
    end
    return self.gameObject.transform
end
function WorldMonsterObject:GetMarchCurPos()
    if self.gameObject ==nil then
        return Vector3.zero
    end
    return self.gameObject.transform.position
end
function WorldMonsterObject:SetIsBattle(value)
    if self.monsterInfo ==nil then
        return
    end
    if self.gameObject ==nil then
        return nil
    end
    if self.isInBattle ~=value then
        self.isInBattle = value
        if self.isInBattle == true then
            local marchType = self.monsterInfo.type
            if marchType == NewMarchType.ACT_BOSS or marchType == NewMarchType.PUZZLE_BOSS then
                EventManager:GetInstance():Broadcast(EventId.ShowActBossHeadInBattle,self.monsterInfo.uuid)
            elseif marchType == NewMarchType.ALLIANCE_BOSS then
                EventManager:GetInstance():Broadcast(EventId.ShowAllianceBossHeadInBattle,self.monsterInfo.uuid)
            else
                EventManager:GetInstance():Broadcast(EventId.ShowMonsterHeadInBattle,self.monsterInfo.uuid)
            end
            
        else
            local marchType = self.monsterInfo.type
            if marchType == NewMarchType.ACT_BOSS or marchType == NewMarchType.PUZZLE_BOSS then
                EventManager:GetInstance():Broadcast(EventId.HideActBossHead,self.monsterInfo.uuid)
            elseif marchType == NewMarchType.ALLIANCE_BOSS then
                EventManager:GetInstance():Broadcast(EventId.HideAllianceBossHead,self.monsterInfo.uuid)
            else
                EventManager:GetInstance():Broadcast(EventId.HideMonsterHead,self.monsterInfo.uuid)
            end
        end
    end
end
return WorldMonsterObject