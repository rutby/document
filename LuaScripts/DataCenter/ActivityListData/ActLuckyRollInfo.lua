---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 
---
local ActLuckyRollInfo = BaseClass("ActLuckyRollInfo");
local ActLuckyRollRankInfo = require "DataCenter.ActivityListData.ActLuckyRollRankInfo"
local function __init(self)
    self.activityId =""
    self.list = {}
    self.curGetReward = {}
end
local function __delete(self)
    self.activityId =""
    self.list = nil
    self.curGetReward = nil
end

local function SetActivityId(self,id)
    self.list[tonumber(id)] = {}
end

local function ParseEventData(self,message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        if message["rollInfo"] then
            local rollInfo = message["rollInfo"]
            local param = {}
            param.fiveLotteryCount = rollInfo["fiveLotteryCount"]    --今日五连抽次数
            param.lastResetTime    = rollInfo["lastResetTime"]       --上次重置单抽和5连抽时间 毫秒
            param.oneLotteryCount  = rollInfo["oneLotteryCount"]     --今日单抽次数
            param.totalLotteryCount= rollInfo["totalLotteryCount"]   --总抽取次数
            self.list[message["activityId"]].rollInfo = param
        end
        if message["rollItemArr"] then      --转盘里item数组
            local rollItemArr = message["rollItemArr"]
            local param = {}
            for i = 1, #rollItemArr do
                param[i] = {}
                param[i].chooseIndex = rollItemArr[i].chooseIndex   --选择道具的index 从0开始
                param[i].itemId      = rollItemArr[i].itemId             --activity_roll_para表的id
                param[i].position    = rollItemArr[i].position         --对应转盘位置
                param[i].type        = rollItemArr[i].type             --抽奖类型 123需要自选
                param[i].needhero    = rollItemArr[i].goods_needhero   --可选奖励，英雄id  0则没有限制
                param[i].reward = {}
                if rollItemArr[i].type == 0 then                    --处理奖励
                    local str = string.split(rollItemArr[i].goods,";")      --类型0只有1个奖励
                    local reward = {}
                    reward.itemId =  str[1]
                    reward.count    =  str[2]
                    table.insert(param[i].reward,reward)
                else                                                                   --类型123有多个奖励
                    local str = string.split(rollItemArr[i].goods,"|")
                    for k=1 ,#str do
                        param[i].reward[k] = {}
                        local rewardArr = string.split(str[k],";")
                        param[i].reward[k].itemId = rewardArr[1]
                        param[i].reward[k].count = rewardArr[2]
                    end
                end
            end
            self.list[message["activityId"]].rollItemArr = param
        end
        if message["stageArr"] then
            local stageArr = message["stageArr"]
            local param = {}
            for i = 1, #stageArr do
                param[i] = {}
                param[i].needLotteryNum = stageArr[i].needLotteryNum   --领奖需要抽取次数
                param[i].stage = stageArr[i].stage                     --阶段 从1开始
                param[i].state = stageArr[i].state                     --领奖状态  0未领奖 1 已领
                param[i].reward = {}
                param[i].reward = DataCenter.RewardManager:ReturnRewardParamForView(stageArr[i].reward)
            end
            self.list[message["activityId"]].stageArr = param
        end
        self.list[message["activityId"]].activityId = message["activityId"]
        self.list[message["activityId"]].drawMax    = message["draw_max"]
        local costItemStr      = string.split(message["cost_item"],";")
        local cost1Str      = string.split(message["cost_1"],";")
        local cost2Str      = string.split(message["cost_5"],";")
        self.list[message["activityId"]].cost_1 = {}
        for i = 1, #cost1Str do
            self.list[message["activityId"]].cost_1[i] = tonumber(cost1Str[i])
        end
        self.list[message["activityId"]].cost_5 = {}
        for i = 1, #cost2Str do
            self.list[message["activityId"]].cost_5[i] = tonumber(cost2Str[i])
        end
        self.list[message["activityId"]].cost_item        = message["cost_item"]           --抽奖消耗类型
        self.list[message["activityId"]].selfRank        = 0           --自己的排名
        self.list[message["activityId"]].selfScore        = 0           --自己的积分
    end
end

--获取当前在第几阶段
local function GetCurStage(self,activityId)
    if self.list[activityId] then
        local data = self.list[activityId]
        if data and table.count(data.stageArr) > 0 then
            for i = 1, #data.stageArr do
                if data.stageArr[i].state == 0 then
                    return data.stageArr[i].stage
                end
            end
            return data.stageArr[#data.stageArr].stage
        end
    end
    return 1
end

local function GetInfoByActId(self,activityId)
    if self.list[activityId] then
        return self.list[activityId]
    end
    return nil
end

--选择奖励返回
local function ChooseItemHandle(self,message)
    if self.list[message["activityId"]] then
        for i = 1 ,#self.list[message["activityId"]].rollItemArr do
            if message["itemId"] == self.list[message["activityId"]].rollItemArr[i].itemId then
                self.list[message["activityId"]].rollItemArr[i].chooseIndex = message["chooseIndex"]
            end
        end
    end
end

--领奖返回  抽奖+阶段奖励
local function UpdateRollInfo(self,message)
    local reward = message["reward"]
    if reward ~= nil then
        for _, v in pairs(reward) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    if self.list[message["activityId"]] then
        if message["rollInfo"] then
            local rollInfo = message["rollInfo"]
            self.list[message["activityId"]].rollInfo.fiveLotteryCount = rollInfo["fiveLotteryCount"]    --今日五连抽次数
            self.list[message["activityId"]].rollInfo.lastResetTime    = rollInfo["lastResetTime"]       --上次重置单抽和5连抽时间 毫秒
            self.list[message["activityId"]].rollInfo.oneLotteryCount  = rollInfo["oneLotteryCount"]     --今日单抽次数
            self.list[message["activityId"]].rollInfo.totalLotteryCount= rollInfo["totalLotteryCount"]   --总抽取次数
        end
    end
    if message["gold"] then
        LuaEntry.Player.gold = message["gold"]
        EventManager:GetInstance():Broadcast(EventId.UpdateGold)
    end
    if message["lotteryItems"] then
        self.curGetReward = message["lotteryItems"]
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--领取阶段奖励
local function UpdateStage(self,message)
    if self.list[message["activityId"]] then
        DataCenter.RewardManager:ShowCommonReward(message)
        self:UpdateRollInfo(message)
        self.list[message["activityId"]].stageArr[message["stage"]].state = 1
        EventManager:GetInstance():Broadcast(EventId.ActLuckyRollUpdate)
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function GetCurRewardIndex(self)
    return  self.curGetReward 
end

--获取排行榜
local function GetCardRankHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message then
            if message["selfRank"] then
                self.list[message["activityId"]].selfRank   = message["selfRank"]           --自己的排名
            end
            if message["selfScore"] then
                self.list[message["activityId"]].selfScore  = message["selfScore"]          --自己的积分
            end
            self.list[message["activityId"]].rankReward = {}
            if message["rankRewardArr"] and next(message["rankRewardArr"]) then
                for i = 1 ,#message["rankRewardArr"] do
                    local param = {}
                    param.reward = DataCenter.RewardManager:ReturnRewardParamForView(message["rankRewardArr"][i]["reward"])
                    param.startN = message["rankRewardArr"][i]["start"]
                    param.endN   = message["rankRewardArr"][i]["end"]
                    table.insert(self.list[message["activityId"]].rankReward,param)
                end
            end
            local reward = self.list[message["activityId"]].rankReward
            local max = 0
            for i = 1 ,table.count(reward) do
                if reward[i].endN > max then
                    max = reward[i].endN
                end
            end
            if message["rankList"] and next(message["rankList"]) then
                self.list[message["activityId"]].rankList = {}
                for i = 1 ,#message["rankList"] do
                    if i <= max then
                        local info = ActLuckyRollRankInfo.New()
                        info:ParseRankInfo(message["rankList"][i])
                        self.list[message["activityId"]].rankList[i] = info
                    end
                end
            end
        end
        EventManager:GetInstance():Broadcast(EventId.ActLuckyRollRankUpdate)
    end
end

local function GetLuckyRollRed(self,id)
    local count = 0
    local data = self:GetInfoByActId(id)
    if next(data) then
        --检查是否免费抽取次数
        if  data.cost_1[data.rollInfo.oneLotteryCount+1] then
            --是否免费
            if data.cost_1[data.rollInfo.oneLotteryCount+1] == 0 then
                count = count + 1
            end
        end
        
        --检查额外奖励
        for i = 1, 5 do
            if data.stageArr[i] and next(data.stageArr[i]) and data.stageArr[i].state == 0 and data.rollInfo.totalLotteryCount >= data.stageArr[i].needLotteryNum then
                count = count + 1
            end
        end
    end
    return count
end

ActLuckyRollInfo.__init = __init
ActLuckyRollInfo.__delete = __delete
ActLuckyRollInfo.SetActivityId =SetActivityId
ActLuckyRollInfo.ParseEventData =ParseEventData
ActLuckyRollInfo.GetCurStage =GetCurStage
ActLuckyRollInfo.GetInfoByActId =GetInfoByActId
ActLuckyRollInfo.UpdateRollInfo =UpdateRollInfo
ActLuckyRollInfo.UpdateStage = UpdateStage
ActLuckyRollInfo.ChooseItemHandle = ChooseItemHandle
ActLuckyRollInfo.GetCurRewardIndex = GetCurRewardIndex
ActLuckyRollInfo.GetCardRankHandle = GetCardRankHandle
ActLuckyRollInfo.GetLuckyRollRed = GetLuckyRollRed
return ActLuckyRollInfo