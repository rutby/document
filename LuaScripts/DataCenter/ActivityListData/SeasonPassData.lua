---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/12 14:27
---SeasonPassData.lua


local SeasonPassData = BaseClass("SeasonPassData")

local function __init(self)
    self.activityId = 0
    self.passInfo = {}
    self.battlePass = {}--==passInfo
    self.passInfo.exp = 0
    self.passInfo.level = 0
    self.passInfo.unlock = 0--0 未结束付费 1 普通付费解锁 2全付费解锁
    self.levelInfo = {}
    self.stateInfo = {}--==levelInfo
    self.weekTaskDic = {}
    self.challengeTaskList = {}
    self.packageIds = {0, 0, 0}
    self.extraRewardList = {}
    self.extraExp = 0
    self.addExpPercent = 0
end

local function __delete(self)
    self.activityId = nil
    self.passInfo = nil
    self.battlePass = nil
    self.levelInfo = nil
    self.stateInfo = nil
    self.weekTaskDic = nil
    self.challengeTaskList = nil
    self.packageIds = nil
    self.extraRewardList = nil
    self.extraExp = nil
    self.addExpPercent = nil
end

local function ParseData(self, message)
    if message==nil then
        return
    end
    if message["activityId"] then
        self.activityId = message["activityId"]
    end
    if message["extraReward"] then
        self.extraRewardList = message["extraReward"]
    end
    if message["packageIds"] then
        self.packageIds = {}
        local strIds = message["packageIds"]
        self.packageIds = string.split(strIds, ";")--普通礼包id;豪华礼包id;购买过普通礼包后的豪华礼包id
    end
    if message["extraExp"] then
        self.extraExp = message["extraExp"]
    end
    if message["addExpPercent"] then
        self.addExpPercent = message["addExpPercent"]
    end
    if message["battlePass"] then
        local battlePass = message["battlePass"]
        self.passInfo = {}
        self.passInfo.exp = battlePass.exp
        self.passInfo.level = battlePass.level
        self.passInfo.unlock = battlePass.unlock--0 未结束付费 1 普通付费解锁 2全付费解锁
        self.battlePass = self.passInfo
    end
    if message["stateInfo"] then
        self.levelInfo = {}
        local stateInfo = message["stateInfo"]
        for i, v in ipairs(stateInfo) do
            local specialR = v["specialReward"] and DataCenter.RewardManager:ReturnRewardParamForView(v["specialReward"]) or {}
            local normalR = v["normalReward"] and DataCenter.RewardManager:ReturnRewardParamForView(v["normalReward"]) or {}
            if specialR then
                table.sort(specialR, function(a, b)
                    if a.rewardType ~= b.rewardType then
                        return a.rewardType > b.rewardType
                    else
                        return false
                    end
                end)
            end
            local newInfo = {
                level = v.level,
                normalState = v["normalState"],              --当前阶段普通奖励是否领过 0未领 1已领
                specialState = v["specialState"],               --当前阶段付费奖励是否领过  0未领 1已领
                specialReward = specialR,         --付费通用奖励
                normalReward = normalR,           --普通通用奖励
                rewardInfo = {
                    [SeasonPassRewardType.NormalReward] = {
                        reward = normalR,
                        state = v.normalState,-- 当前阶段普通奖励是否领过 0未领 1已领
                    },
                    [SeasonPassRewardType.SpecialReward] = {
                        reward = specialR,
                        state = v.specialState,--当前阶段付费奖励是否领过  0未领 1已领
                    },
                },
            }
            table.insert(self.levelInfo, newInfo)
        end
        table.sort(self.levelInfo, function(a, b)
            if a.level ~= b.level then
                return a.level < b.level
            else
                return false
            end
        end)
        self.stateInfo = self.levelInfo
        self:FillRewards()
    end
    if message["taskArr"] then
        self.weekTaskDic = {}
        self.challengeTaskList = {}
        local taskArr = message["taskArr"]
        for i, v in ipairs(taskArr) do
            local newTask = {
                taskId = v.taskId,
                type = v.type,-- 1周任务 2挑战任务
                week = v.week,
                num = v.num,
                state = v.state,--任务状态 0未领过 1可领奖 2已领奖
                exp = v.exp,
                reward = DataCenter.RewardManager:ReturnRewardParamForMessage(v.reward),
            }
            if v.type == 1 then
                if not self.weekTaskDic[v.week] then
                    self.weekTaskDic[v.week] = {}
                end
                table.insert(self.weekTaskDic[v.week], newTask)
            else
                table.insert(self.challengeTaskList, newTask)
            end
        end
    end
    
end

local function FillRewards(self)
    for i, v in ipairs(self.stateInfo) do
        local level = v.level
        local template = DataCenter.ActBattlePassTemplateManager:GetTemplateById(self.activityId, level)
        if not string.IsNullOrEmpty(template.free_item) then
            local itemIdArr = string.split(template.free_item, "|")
            for m, n in ipairs(itemIdArr) do
                local idCount = string.split(n, ";")
                local newReward = {}
                newReward.rewardType = RewardType.GOODS
                newReward.itemId = idCount[1]
                newReward.count = tonumber(idCount[2])
                newReward.isPrivilege = true
                if not v.normalReward then
                    v.normalReward = {}
                end
                table.insert(v.normalReward, 1, newReward)
            end
        end
        if not string.IsNullOrEmpty(template.pay_item) then
            local itemIdArr = string.split(template.pay_item, "|")
            for m, n in ipairs(itemIdArr) do
                local idCount = string.split(n, ";")
                local newReward = {}
                newReward.rewardType = RewardType.GOODS
                newReward.itemId = idCount[1]
                newReward.count = tonumber(idCount[2])
                newReward.isPrivilege = true
                if not v.specialReward then
                    v.specialReward = {}
                end
                table.insert(v.specialReward, 1, newReward)
            end
        end
    end
end

local function UpdatePassInfo(self, msg)
    if msg and msg["battlePass"] then
        local battlePass = msg["battlePass"]
        self.passInfo.exp = battlePass.exp
        self.passInfo.level = battlePass.level
        self.passInfo.unlock = battlePass.unlock--0 未结束付费 1 普通付费解锁 2全付费解锁
    end
end

local function UpdateTaskState(self, taskId, state, prog)
    local isSet = false
    for i, v in pairs(self.weekTaskDic) do
        for m, t in ipairs(v) do
            if t.taskId == taskId then
                if state then
                    t.state = state
                end
                if prog then
                    t.num = prog
                end
                isSet = true
                break
            end
        end
        if isSet then
            break
        end
    end
    if not isSet then
        for m, t in ipairs(self.challengeTaskList) do
            if t.taskId == taskId then
                if state then
                    t.state = state
                end
                if prog then
                    t.num = prog
                end
                isSet = true
                break
            end
        end
    end
end

local function UpdateStageRewardState(self, level, type, state)
    for i, v in ipairs(self.levelInfo) do
        if v.level == level then
            v.rewardInfo[type].state = state
            if type == SeasonPassRewardType.NormalReward then
                v.normalState = state
            elseif type == SeasonPassRewardType.SpecialReward then
                v.specialState = state
            end
            break
        end
    end
end

local function GetPackageIdList(self)
    if self.passInfo.unlock == 0 then
        return self.packageIds[1], self.packageIds[2], self.passInfo.unlock
    elseif self.passInfo.unlock == 1 then
        return self.packageIds[1], self.packageIds[3], self.passInfo.unlock
    else
        return nil
    end
end

--页签红点
local function GetRedNum(self, tabIndex)
    local count = 0
    if tabIndex == 1 then
        count = self:GetPassRedCount()
    elseif tabIndex == 2 then
        count = self:GetTaskRedCount()
    elseif tabIndex == 3 then
        count = self:GetChallengeRedCount()
    end
    return count
end

local function GetTaskSorted(self, type, week)
    local taskList = {}
    if type == 2 then
        taskList = self.challengeTaskList
    else
        taskList = self.weekTaskDic[week] or {}
    end

    local retList = {}
    local listTaskDic = {}
    for i, v in ipairs(taskList) do
        local template = LocalController:instance():getLine(DataCenter.QuestTemplateManager:GetTableName(), v.taskId)
        v.template = template
        if template.list <= 0 then
            table.insert(retList, v)
        else
            if not listTaskDic[template.list] then
                listTaskDic[template.list] = {}
            end
            table.insert(listTaskDic[template.list], v)
        end
    end
    for i, v in pairs(listTaskDic) do
        table.sort(v, function(a, b)
            if a.template.order ~= b.template.order then
                return a.template.order < b.template.order
            else
                return false
            end
        end)
        --检查是否有已完成的任务
        local isInsert = false
        for m, n in ipairs(v) do
            if n.state == 1 then
                isInsert = true
                table.insert(retList, n)
                break
            end
        end
        if not isInsert then
            for m, n in ipairs(v) do
                if n.state ~= 2 or m == #v then
                    table.insert(retList, n)
                    break
                end
            end
        end
    end
    
    table.sort(retList, function(a, b)
        local stateA = a.state == 1 and -1 or a.state
        local stateB = b.state == 1 and -1 or b.state
        if stateA ~= stateB then
            return stateA < stateB
        elseif a.template.order ~= b.template.order then
            return a.template.order < b.template.order
        else
            return false
        end
    end)
    return retList
end

local function CheckCurStageRewardLv(self)
    local retLv = self.passInfo.level
    for i, v in ipairs(self.levelInfo) do
        if v.level <= self.passInfo.level then
            local normalReward = v.rewardInfo[SeasonPassRewardType.NormalReward]
            if normalReward.state == 0 then
                retLv = v.level
                break
            end
            if self.passInfo.unlock > 0 then
                local specialReward = v.rewardInfo[SeasonPassRewardType.SpecialReward]
                if specialReward.state == 0 then
                    retLv = v.level
                    break
                end
            end
        else
            break
        end
    end
    return retLv
end

local function GetTaskRedCount(self, week)
    local retCount = 0
    if week then
        local taskList = self.weekTaskDic[week]
        if taskList then
            for i, v in ipairs(taskList) do
                if v.state == 1 then
                    retCount = retCount + 1
                end
            end
        end
    else
        local curWeek = DataCenter.SeasonPassManager:GetCurWeekIndex(self.activityId)
        for i, v in pairs(self.weekTaskDic) do
            for m, n in ipairs(v) do
                if n.week <= curWeek then
                    if n.state == 1 then
                        retCount = retCount + 1
                    end
                end
            end
        end
    end
    return retCount
end

local function GetChallengeRedCount(self)
    local retCount = 0
    for i, v in ipairs(self.challengeTaskList) do
        if v.state == 1 then
            retCount = retCount + 1
        end
    end
    return retCount
end

local function GetPassRedCount(self)
    local retCount = 0
    local curLv = self.passInfo.level
    for i, v in ipairs(self.levelInfo) do
        if v.level <= curLv then
            if v.normalState == 0 then
                retCount = retCount + 1
            end
            if self.passInfo.unlock > 0 and v.specialState == 0 then
                retCount = retCount + 1
            end
        end
    end
    if self.passInfo.exp >= self.extraExp then
        retCount = retCount + 1
    end

    return retCount
    end

--0~1
local function GetExtraExpPercent(self)
    if self.passInfo.unlock == 2 then
        return self.addExpPercent / 100
    else
        return 0
    end
end

--获取付费奖励展示
local function GetSpecialReward(self)
    local rewardAll = {}
    --获取数据中所有奖励
    local stateInfo = self.stateInfo
    if stateInfo and next(stateInfo) then
        for i = 1 ,table.count(stateInfo) do
            if stateInfo[i].specialReward and next(stateInfo[i].specialReward) then
                local specialReward = DeepCopy(stateInfo[i].specialReward)
                for k = 1 ,table.count(specialReward) do
                    table.insert(rewardAll,specialReward[k])
                end
            end
        end
    end
    local rewardList = {}
    rewardList[1] = {}      --占位道具
    rewardList[2] = {}
    local list = {}
    for i = 1 ,table.count(rewardAll) do
        if rewardAll[i].isPrivilege then
            local isInsert = true
            for k = 1 ,table.count(rewardList[1]) do
                if rewardList[1][k].itemId == rewardAll[i].itemId then
                    isInsert = false
                    rewardList[1][k].count = rewardList[1][k].count + rewardAll[i].count
                end
            end
            if isInsert then
                table.insert(rewardList[1],rewardAll[i])
            end
        else
            if rewardAll[i].rewardType == RewardType.EXP then
                rewardAll[i].color = ItemColor.GREEN
                rewardAll[i].order = 1
                rewardAll[i].itemId = RewardType.EXP
            elseif rewardAll[i].rewardType == RewardType.GOODS then
                local goods = DataCenter.ItemTemplateManager:GetItemTemplate(rewardAll[i].itemId)
                rewardAll[i].color = goods.color
                rewardAll[i].order = goods.order
            elseif rewardAll[i].rewardType == RewardType.GOLD then
                rewardAll[i].color = ItemColor.PURPLE
                rewardAll[i].order = 1
                rewardAll[i].itemId = RewardType.GOLD
            elseif rewardAll[i].rewardType == RewardType.FORMATION_STAMINA then
                rewardAll[i].color = ItemColor.PURPLE
                rewardAll[i].order = 1
                rewardAll[i].itemId = RewardType.FORMATION_STAMINA
            end
            if list[rewardAll[i].itemId] then
                list[rewardAll[i].itemId].count = list[rewardAll[i].itemId].count + rewardAll[i].count
            else
                list[rewardAll[i].itemId] = rewardAll[i]
            end
        end
    end
    if next(list) then
        for i ,v in pairs(list) do
            table.insert(rewardList[2],v)
        end
        self:SortItem(rewardList[2])
    end
    local tab = table.mergeArray(rewardList[1],rewardList[2])
    return tab
end

local function SortItem(self,item)
    table.sort(item,function(a,b)
        if a.color > b.color then
            return true
        elseif a.color == b.color then
            if a.count > b.count then
                return true
            elseif a.count == b.count then
                return a.order > b.order
            end
        end
        return false
    end)
end

SeasonPassData.__init = __init
SeasonPassData.__delete = __delete
SeasonPassData.ParseData = ParseData
SeasonPassData.UpdatePassInfo = UpdatePassInfo
SeasonPassData.FillRewards = FillRewards
SeasonPassData.UpdateTaskState = UpdateTaskState
SeasonPassData.UpdateStageRewardState = UpdateStageRewardState
SeasonPassData.GetPackageIdList = GetPackageIdList
SeasonPassData.GetRedNum = GetRedNum
SeasonPassData.GetTaskSorted = GetTaskSorted
SeasonPassData.GetTaskRedCount = GetTaskRedCount
SeasonPassData.GetChallengeRedCount = GetChallengeRedCount
SeasonPassData.CheckCurStageRewardLv = CheckCurStageRewardLv
SeasonPassData.GetPassRedCount = GetPassRedCount
SeasonPassData.GetExtraExpPercent = GetExtraExpPercent
SeasonPassData.GetSpecialReward = GetSpecialReward
SeasonPassData.SortItem = SortItem

return SeasonPassData