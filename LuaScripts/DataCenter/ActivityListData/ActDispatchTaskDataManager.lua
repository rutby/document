---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 3/4/2024 下午5:13
---
--- 派遣任务数据管理

--[[单个任务结构:(涉及的时间都是ms)
{
"heroList": [],                 派遣的英雄uuid列表
"allianceId": "d1c1adcd243f4533ab8e397cdfd91069",   联盟id
"completionTime": 0, 
                    1.等于 0，未开始 
                    2.>当前，已开始 
                    3.<=当前，已完成 
                    4.<= (当前时间 + 3 分钟)，已显示，其他玩家可见
"assistInfo":{uid,name,time,abbr,headPic,headPicVer}                   被协助信息，没有返回 空对象
"stealInfoList":[{uid,name,time,abbr,headPic,headPicVer}],             被偷对象列表,跟世界点proto有区别
"accList": [],                  被施肥uid列表
"pointId": -1,                  世界坐标位置
"rewarded": 0,                  是否已领取奖励 1为已领取
"actEndTime": 1686733518366,    活动结束时间 
"ownerId": "168603397700138",   玩家 id
"cfgId": 1001,                  任务 id lw_dispatch_tasks 表
"uuid": 986163515842660869      任务uuid,也是大地图对象的 uuid
}
]]--

local ActDispatchTaskData = require "DataCenter.ActivityListData.ActDispatchTaskData"
local ActDispatchLogData = require "DataCenter.ActivityListData.ActDispatchLogData"
---@class ActDispatchTaskDataManager
local ActDispatchTaskDataManager = BaseClass("ActDispatchTaskDataManager")
local Localization = CS.GameEntry.Localization

function ActDispatchTaskDataManager:__init()
    self.singleTask = {}
    self.allianceTask = {}
    self.todayStealNum = 0
    self.todayAssistNum = 0
    self.taskStealLogList = {}
    self.disPatchLog = {}
    self.actViewOpened = false
end

function ActDispatchTaskDataManager:__delete()
    self.singleTask = {}
    self.allianceTask = {}
    self.todayStealNum = 0
    self.todayAssistNum = 0
    self.taskStealLogList = {}
    self.disPatchLog = {}
    self.actViewOpened = false
end

function ActDispatchTaskDataManager:GetDispatchSetting(configKey)
    local starLevel = self:GetCurrentStarLevel()
    local itemId = 1000 + starLevel
    local value = GetTableData(TableName.LwDispatchSetting, itemId, configKey)
    if string.IsNullOrEmpty(value) then
        return GetTableData(TableName.LwDispatchSetting, 1001, configKey)
    end
    return value
end

function ActDispatchTaskDataManager:GetTaskRefreshSetting()
    -- 刷新消耗的道具id和数量
    local itemId = toInt(self:GetDispatchSetting('refresh_item'))
    local itemCount = 1
    -- 刷新消耗的钻石数量
    local coinCount = toInt(self:GetDispatchSetting('refresh_diamond'))
    return coinCount, itemId, itemCount
end

function ActDispatchTaskDataManager:GetCurrentStarLevel()
    -- k1=探索星级和大本等级段的对应关系，星级;大本等级下限-大本等级上限|星级;大本等级下限-大本等级上限
    local cityLevel = DataCenter.BuildManager.MainLv
    if self.dispatch_task_k1 then
        for _, v in ipairs(self.dispatch_task_k1) do
            if v.min and v.max and v.star and cityLevel >= v.min and cityLevel <= v.max then
                return v.star
            end
        end
    end
    local dispatch_task_k1 = LuaEntry.DataConfig:TryGetStr("dispatchtask_setting", "k1")--'1;7-12|2;13-17|3;18-22|4;23-26|5;27-30'
    if string.IsNullOrEmpty(dispatch_task_k1) then
        return 0
    end
    self.dispatch_task_k1 = {}
    -- 星级;大本等级下限-大本等级上限|星级;大本等级下限-大本等级上限
    for item in string.gmatch(dispatch_task_k1, "([^|]+)|?") do
        -- 星级;大本等级下限-大本等级上限
        local starLevelStr, CityLevelStr = string.match(item, "(%d+)[;,](%d+-?%d+)")
        if starLevelStr ~= nil and CityLevelStr ~= nil then
            local starLevel = tonumber(starLevelStr)
            local levelMinStr,levelMaxStr = string.match(CityLevelStr, "(%d+)-(%d+)")
            if levelMinStr ~= nil and levelMaxStr ~= nil then
                -- 大本等级下限-大本等级上限
                local levelMin = tonumber(levelMinStr)
                local levelMax = tonumber(levelMaxStr)
                table.insert(self.dispatch_task_k1, {min = levelMin, max = levelMax, star = starLevel})
            else
                local levelMin = toInt(CityLevelStr)
                table.insert(self.dispatch_task_k1, {min = levelMin, max = levelMin, star = starLevel})
            end
        end
    end
    for _, v in ipairs(self.dispatch_task_k1) do
        if v.min and v.max and v.star and cityLevel >= v.min and cityLevel <= v.max then
            return v.star
        end
    end
    return 0
end

function ActDispatchTaskDataManager:GetTaskRateWithStarLevel(starLevel)
    -- k2=探索星级和橙色任务出现概率的对应关系，星级;概率|星级;概率
    if self.dispatch_task_k2 then
        return self.dispatch_task_k2[tostring(starLevel)]
    end
    local dispatch_task_k2 = LuaEntry.DataConfig:TryGetStr("dispatchtask_setting", "k2")-- '1;0.1|2;0.2|3;0.3|4;0.4|5;0.5')
    if string.IsNullOrEmpty(dispatch_task_k2) then
        return 0
    end
    self.dispatch_task_k2 = {}
    -- 星级;概率|星级;概率
    for item in string.gmatch(dispatch_task_k2, "([^|]+)|?") do
        -- 星级;概率
        -- 1;0.1
        local starLevelStr, ValueStr = string.match(item, "(%d+)[;,](.*)")
        if starLevelStr ~= nil and ValueStr ~= nil then
            self.dispatch_task_k2[starLevelStr] = ValueStr
        end
    end
    return self.dispatch_task_k2[tostring(starLevel)]
end

function ActDispatchTaskDataManager:GetTaskLevelWithStarLevel(starLevel)
    -- k3=探索星级和任务等级的对应关系，星级;等级|星级;等级
    if self.dispatch_task_k3 then
        return self.dispatch_task_k3[tostring(starLevel)]
    end
    local dispatch_task_k3 = LuaEntry.DataConfig:TryGetStr("dispatchtask_setting", "k3")
    if string.IsNullOrEmpty(dispatch_task_k3) then
        return 0
    end
    self.dispatch_task_k3 = {}
    -- 星级;等级|星级;等级
    for item in string.gmatch(dispatch_task_k3, "([^|]+)|?") do
        -- 星级;等级
        -- 1;1
        local starLevelStr, ValueStr = string.match(item, "(%d+)[;,](%d+)")
        if starLevelStr ~= nil and ValueStr ~= nil then
            self.dispatch_task_k3[starLevelStr] = tonumber(ValueStr)
        end
    end
    return self.dispatch_task_k3[tostring(starLevel)]
end

function ActDispatchTaskDataManager:GetMinLevelForStarLevel(starLevel)
    if self.dispatch_task_k1 then
        for _, v in ipairs(self.dispatch_task_k1) do
            if v.star == starLevel then
                return v.min
            end
        end
    end
    return 1
end

---从服务器拉取所有个人任务
function ActDispatchTaskDataManager:GetAllSingleTasksFromServer()
    local isOpen = DataCenter.ActivityListDataManager:CheckIfActivityOpen(EnumActivity.DispatchTask.Type)
    if isOpen == true then
        SFSNetwork.SendMessage(MsgDefines.DispatchGetTasks)
    end
end

---初始化所有个人任务信息 以及今日协助 偷次数
function ActDispatchTaskDataManager:UpdateAllSingleTasks(message)
    self.singleTask = {}
    if message["missions"] ~= nil then
        for _, v in ipairs(message["missions"]) do
            self:UpdateOneSingleTask(v, false)
        end
        EventManager:GetInstance():Broadcast(EventId.DispatchTaskUpdateSingle)
    end
    self:UpdateTodayNum(message)
end

--todayStealNum
--todayAssistNum
function ActDispatchTaskDataManager:UpdateTodayNum(message)
    local update = false
    if message["dispatchData"]~=nil then
        local msg = message["dispatchData"]
        if msg["stealNum"] then
            update = true
            self.todayStealNum = msg["stealNum"]
        end
        if msg["assistNum"] then
            update = true
            self.todayAssistNum = msg["assistNum"]
        end
    end
    
    if update == true then
        EventManager:GetInstance():Broadcast(EventId.DispatchTaskTodayNumUpdate)
    end
end

function ActDispatchTaskDataManager:GetTodayStealNum()
    return self.todayStealNum
end

function ActDispatchTaskDataManager:GetTodayAssistNum()
    return self.todayAssistNum
end

---从服务器拉取所有联盟任务
function ActDispatchTaskDataManager:GetAllAllianceTasksFromServer()
    if string.IsNullOrEmpty(LuaEntry.Player.allianceId) then
        return
    end
    local isOpen = DataCenter.ActivityListDataManager:CheckIfActivityOpen(EnumActivity.DispatchTask.Type)
    if isOpen == true then
        SFSNetwork.SendMessage(MsgDefines.DispatchGetAllianceTasks)
    end
end

---初始化所有联盟任务信息
function ActDispatchTaskDataManager:UpdateAllAllianceTasks(tasks)
    self.allianceTask = {}
    if tasks ~= nil then
        for _, v in ipairs(tasks) do
            self:UpdateOneAllianceTask(v, false)
        end
        DataCenter.ActDispatchTaskFakeMarchManager:RemoveAllDisappearEvent()
        EventManager:GetInstance():Broadcast(EventId.DispatchTaskUpdateAlliance)
    end
end

--- 排序
-- 优先状态：可领取>没做的>进行中>已领取
-- 状态相同，按品质：特殊>橙色>紫色>蓝色
-- 品质相同，按照完成时间先后，从小到大（completionTime，小到大）
local function SortTasks(taskA,taskB)
    if taskA and not taskB then
        return false
    end
    if not taskA and taskB then
        return true
    end
    local completionTimeA = taskA.completionTime
    local completionTimeB = taskB.completionTime
    local now = UITimeManager:GetInstance():GetServerTime()
    --优先状态：可领取1>没做的2>进行中3>已领取4
    local statusA = 2
    if taskA.rewarded == 1 then
        statusA = 4
    else
        if completionTimeA > 0 then
            if completionTimeA <= now and taskA.rewarded == 0 then
                statusA = 1
            elseif completionTimeA > now then
                statusA = 3
            end
        end
    end
    local statusB = 2
    if taskB.rewarded == 1 then
        statusB = 4
    else
        if completionTimeB > 0 then
            if completionTimeB <= now and taskB.rewarded == 0 then
                statusB = 1
            elseif completionTimeB > now then
                statusB = 3
            end
        end
    end
    if statusA ~= statusB then
        return statusA < statusB
    end
    local isSpecialA = taskA.cfg.is_special -- 1是特殊，0不是
    local isSpecialB = taskB.cfg.is_special
    if isSpecialA ~= isSpecialB then
        return isSpecialA > isSpecialB
    end
    local colorA = taskA.cfg.color
    local colorB = taskB.cfg.color
    if colorA ~= colorB then
        return colorA > colorB
    end
    return completionTimeA < completionTimeB
end

function ActDispatchTaskDataManager:GetAllSingleTasks()
    local tasks = table.values(self.singleTask)
    table.sort(tasks, SortTasks)
    return tasks
end

function ActDispatchTaskDataManager:GetAllAllianceTasks()
    local tasks = table.values(self.allianceTask)
    --需要筛选不?  进行中的 + 未领取的
    table.sort(tasks, SortTasks)
    return tasks
end

--function ActDispatchTaskDataManager:IsDispatching(taskInfo)
--    -- 各种状态...
--    if taskInfo then
--        local completionTime = taskInfo.completionTime
--        local now = UITimeManager:GetInstance():GetServerTime()
--        if completionTime > 0 and completionTime > now then
--            return true
--        end
--    end
--    return false
--end

---更新一个个人任务信息
function ActDispatchTaskDataManager:UpdateOneSingleTask(message, needBroadcast)
    if message ~= nil then
        local taskInfo = ActDispatchTaskData.New()
        taskInfo:RefreshData(message)
        local uuid = taskInfo.uuid
        taskInfo["cfg"] = LocalController:instance():getLine(TableName.LwDispatchTask, taskInfo.cfgId)
        if taskInfo["cfg"] == nil then
            Logger.LogError("lw_dispatch_tasks 表没有任务id="..taskInfo.cfgId)
        end
        self.singleTask[uuid] = taskInfo
        if needBroadcast == nil or needBroadcast == true then
            DataCenter.ActDispatchTaskFakeMarchManager:RemoveAllDisappearEvent()
            EventManager:GetInstance():Broadcast(EventId.DispatchTaskUpdateSingle)
        end

        -- 进行中，追加假行军 --简单点,只要去和回的
        --if self:IsDispatching(taskInfo) then
        --    DataCenter.ActDispatchTaskFakeMarchManager:AddMarchIndex()
        --end
    end
end

---更新一个联盟任务信息
function ActDispatchTaskDataManager:UpdateOneAllianceTask(message, needBroadcast)
    if message ~= nil then
        local taskInfo = ActDispatchTaskData.New()
        taskInfo:RefreshData(message)
        local uuid = taskInfo.uuid
        taskInfo["cfg"] = LocalController:instance():getLine(TableName.LwDispatchTask, taskInfo.cfgId)
        if taskInfo["cfg"] == nil then
            Logger.LogError("lw_dispatch_tasks 表没有任务id="..taskInfo.cfgId)
        end
        self.allianceTask[uuid] = taskInfo
        if needBroadcast == nil or needBroadcast == true then
            EventManager:GetInstance():Broadcast(EventId.DispatchTaskUpdateAlliance)
        end
    end
end

function ActDispatchTaskDataManager:DeleteSingleTasks(taskIdsArr)
    if taskIdsArr then
        for _, v in ipairs(taskIdsArr) do
            self.singleTask[v] = nil
        end
        DataCenter.ActDispatchTaskFakeMarchManager:RemoveAllDisappearEvent()
        EventManager:GetInstance():Broadcast(EventId.DispatchTaskUpdateSingle)
    end
end

function ActDispatchTaskDataManager:DeleteAllianceTasks(taskIdsArr)
    if taskIdsArr then
        for _, v in ipairs(taskIdsArr) do
            self.allianceTask[v] = nil
        end
        EventManager:GetInstance():Broadcast(EventId.DispatchTaskUpdateAlliance)
    end
end

function ActDispatchTaskDataManager:GetSingleTaskByPointId(pointId)
    for _, v in pairs(self.singleTask) do
        if v.pointId == pointId then
            return v
        end
    end
    return nil
end

function ActDispatchTaskDataManager:GetSingleTaskByUuid(uuid)
    return self.singleTask[uuid]
end

function ActDispatchTaskDataManager:ParseTaskCondition(taskInfo)
    -- 这个不能按照固定顺序来,所以弄成hash table
    if not taskInfo.cfg.parsed_conditions then
        taskInfo.cfg.parsed_conditions = {}
        local arr = string.split(taskInfo.cfg.conditions,"|")
        for _, v in ipairs(arr) do
            -- 类型;类型参数;数量
            local type, value, num = string.match(v,"(%d+)[;](%d+)[;](%d+)")
            local oneCondArr = {tonumber(value), tonumber(num)} -- {类型参数; 数量}
            taskInfo.cfg.parsed_conditions[tonumber(type)] = oneCondArr
        end
    end
end

---返回所有派遣任务在使用的英雄uuid
function ActDispatchTaskDataManager:GetAllUsedHeroList()
    local ret = {}
    for k, v in pairs(self.singleTask) do
        if v.completionTime > 0 and v.rewarded == 0 then
            table.insertto(ret, v.heroList)
        end
    end
    return ret
end

---返回所有日志
---assistInfo:{uid,name,time,abbr,headPic,headPicVer,pointId}
---stealInfoList:[{uid,name,time,abbr,headPic,headPicVer,pointId}]
function ActDispatchTaskDataManager:GetAllLogList()
    local ret = {}
    for _, v in pairs(self.disPatchLog) do
        table.insert(ret, v)
    end
    -- 时间排序 大到小
    table.sort(ret,function(a,b)
        return a.createTime > b.createTime
    end)
    return ret
end

---个人任务红点数
---有派遣任务没做，有奖励可领，有红点
function ActDispatchTaskDataManager:GetSingleTaskRedCount(forceAll)
    local ret = 0
    -- 打开过就不显示红点了,重启再显示
    if self.actViewOpened == false or forceAll == true then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        for _, v in pairs(self.singleTask) do
            if v.completionTime == 0 or (v.completionTime <= curTime and v.rewarded == 0) then
                ret = ret + 1
            end
        end
    else
        local curTime = UITimeManager:GetInstance():GetServerTime()
        for _, v in pairs(self.singleTask) do
            if v.completionTime >0 and (v.completionTime <= curTime and v.rewarded == 0) then
                ret = ret + 1
            end
        end
    end
    return ret
end

function ActDispatchTaskDataManager:GetAllianceTaskRedCount()
    local ret = 0
    local todayAssistNum = self:GetTodayAssistNum()
    local assistMax = toInt(self:GetDispatchSetting("aid_count"))
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local deltaNum = assistMax-todayAssistNum
    if deltaNum>0 then
        for _, v in pairs(self.allianceTask) do
            if v.completionTime >0 and (v.completionTime <= curTime and v.rewarded == 0) then
                ret = ret + 1
            end
            if ret>=deltaNum then
                break
            end
        end
    end
    return ret
end
function ActDispatchTaskDataManager:SetActViewOpened(open)
    if self.actViewOpened ~= open then
        self.actViewOpened = open
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
end

---正在进行的数量
function ActDispatchTaskDataManager:GetSingleTaskIngCount()
    local ret = 0
    for _, v in pairs(self.singleTask) do
        if v.completionTime > 0 and v.rewarded == 0 then
            ret = ret + 1
        end
    end
    return ret
end

function ActDispatchTaskDataManager:UpdateOneTaskLog(message)
    local data = ActDispatchLogData.New()
    data:RefreshData(message)
    if data.uuid~=0 then
        self.disPatchLog[data.uuid] = data
        if data.missionUuid~=0 and data.type == 1 then --偷取记录
            if self.taskStealLogList[data.missionUuid] == nil then
                self.taskStealLogList[data.missionUuid] = {}
            end
            table.insert(self.taskStealLogList[data.missionUuid],data.uuid)
        end
    end
end

function ActDispatchTaskDataManager:GetTaskLog(message)
    if message ~= nil then
        if message["records"] then
            local arr = message["records"]
            for i =1,#arr do
                local item = arr[i]
                self:UpdateOneTaskLog(item)
            end
        end
    end
end


function ActDispatchTaskDataManager:SendTaskLogRequest()
    local isOpen = DataCenter.ActivityListDataManager:CheckIfActivityOpen(EnumActivity.DispatchTask.Type)
    if isOpen == true then
        SFSNetwork.SendMessage(MsgDefines.DispatchGetLog)
    end
end
return ActDispatchTaskDataManager