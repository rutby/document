---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local ActGolloesCardInfo = BaseClass("ActGolloesCardInfo")
local ActGolloesCardRankInfo = require "DataCenter.ActivityListData.ActGolloesCardRankInfo"

local function __init(self)
    self.cost_item = {}     --翻卡消耗类型
    self.cost_1    = {}     --单次翻卡消耗
    self.cost_all  = 0      --一键翻卡，每个卡的消耗数量 
    self.refresh_cost = {}  --每次刷新消耗钻石数量
    self.times     = 0      --每日最大翻卡次数
    self.flipCards = {}     --已经翻过的卡片数组
    self.free_all = 0       --前n次一键翻卡免费
    self.cardInfo  = {}
    self.free_refresh = 0   --当前组翻牌大于等于次数，刷新免费
    
    self.showRewardArr = {} --当前组的奖励数组
    self.nextShowRewardArr = {} --下一组的奖励数组 （刷新/一键)返回
    
    self.selfScore = 0  --自己的积分
    self.selfRank = 0 --自己的排名
    self.rankList = {}
    self.rankRewardArr = {}
    
    self.lastFlipCards = nil --上一次翻卡信息
end

local function __delete(self)
    self.cost_item = nil
    self.cost_1    = nil
    self.cost_all  = nil
    self.refresh_cost = nil
    self.times     = nil
    self.flipCards = nil
    self.free_all = nil
    self.cardInfo  = nil
    self.free_refresh = nil
    self.showRewardArr = nil
    self.nextShowRewardArr = nil
    self.rankList = nil
    self.rankRewardArr = nil
    self.lastFlipCards = nil
end

local function ParseGolloesCard(self, message)
    if message==nil then
        return
    end
    if message["cost_item"]~=nil then
        self.cost_item = string.split(message["cost_item"],";")
    end
    if message["cost_1"]~=nil then      
        self.cost_1 = string.split(message["cost_1"],";") 
    end
    if message["cost_all"] then
        self.cost_all = message["cost_all"]
    end
    if message["refresh_cost"] then
        self.refresh_cost = string.split(message["refresh_cost"],";")
    end
    if message["times"] then
        self.times = message["times"]
    end
    if message["free_all"] then
        self.free_all = message["free_all"]
    end
    if message["free_refresh_times"] then
        self.free_refresh = message["free_refresh_times"]
    end
    if message["flipCards"] and next(message["flipCards"]) then
        self:ParseFlipCards(message["flipCards"])
    end
    if message["cardInfo"] then
        self:ParseCardInfo(message["cardInfo"])
    end
end

local function ParseFlipCards(self,message)
    self.flipCards = {}
    for i = 1 ,#message do
        local param = {}
        param.index = message[i]["index"]      --卡片的index，从1开始
        param.reward = DataCenter.RewardManager:ReturnRewardParamForView(message[i]["reward"])
        table.insert(self.flipCards,param)
    end
    table.sort(self.flipCards,function(a,b)
        if a.index < b.index then
            return true
        end
        return false
    end)
end

local function UpdateFlipCard(self,message)
    table.insert(self.flipCards,message)
    table.sort(self.flipCards,function(a,b)
        if a.index < b.index then
            return true
        end
        return false
    end)
end

local function ClearFlipCards(self)
    self.flipCards = {}
end

local function ParseCardInfo(self, message)
    self.cardInfo.refreshCount = message.refreshCount      --今日刷新次数
    self.cardInfo.group = message.group                    --当前刷新出来的奖励分组  对应奖励配置组 1 2 3
    self.cardInfo.flipCount = message.flipCount            --今日翻卡次数
    self.cardInfo.flipAllCount = message.flipAllCount      --一键翻卡总次数
end
        
--{{{刷新或一键翻卡返回的奖励数组
local function UpdateShowArr(self,message)
    --当前组奖励
    self.showRewardArr = {}
    local n = 1
    if message and next(message) then
       n =  math.random(1,#message)
    end
    --奖励加个随机
    for i = 1 ,#message do
        if n >= i then
            table.insert(self.showRewardArr,DataCenter.RewardManager:ReturnRewardParamForView(message[i]))
        else
            table.insert(self.showRewardArr,1,DataCenter.RewardManager:ReturnRewardParamForView(message[i]))
        end
        --self.showRewardArr[i] = DataCenter.RewardManager:ReturnRewardParamForView(message[i])
    end
end

local function UpdateNextShowArr(self,message)
    --下一组奖励
    self.nextShowRewardArr = {}
    local n =  math.random(1,9)
    for i = 1 ,#message do
        if n >= i then
            table.insert(self.nextShowRewardArr,DataCenter.RewardManager:ReturnRewardParamForView(message[i]))
        else
            table.insert(self.nextShowRewardArr,1,DataCenter.RewardManager:ReturnRewardParamForView(message[i]))
        end
    end
end
--}}}

--获取当前奖励数组
local function GetShowArr(self)
    return self.showRewardArr
end
--获取刷新后奖励数组
local function GetNextShowArr(self,previewRw)
    local data = nil
    for i = 1 ,#self.nextShowRewardArr do
        if tonumber(self.nextShowRewardArr[i][1].itemId) == previewRw then
            data = self.nextShowRewardArr[i]
            table.remove(self.nextShowRewardArr,i)
            break
        end
    end
    if data then
        table.insert(self.nextShowRewardArr,5,data)
    end
    return self.nextShowRewardArr
end

--{{{排行榜
--排行榜信息
local function ParseRankInfo(self,message)
    if message["selfScore"] then
        self.selfScore = message["selfScore"]
    end
    if message["selfRank"] then
        self.selfRank = message["selfRank"]
    end
    if message["rankList"] and next(message["rankList"]) then
        for i = 1 ,#message["rankList"] do
            local info = ActGolloesCardRankInfo.New()
            info:ParseRankInfo(message["rankList"][i])
            self.rankList[i] = info
        end
    end
    if message["rankRewardArr"] and next(message["rankRewardArr"]) then
        for i = 1 ,#message["rankRewardArr"] do
            self.rankRewardArr[i] = {}
            self.rankRewardArr[i].reward = DataCenter.RewardManager:ReturnRewardParamForView(message["rankRewardArr"][i]["reward"])
            self.rankRewardArr[i].startN = message["rankRewardArr"][i]["start"]
            self.rankRewardArr[i].endN = message["rankRewardArr"][i]["end"]
        end
    end
end
--获取排行榜信息
local function GetRankList(self)
    return self.rankList
end
--获取排行榜奖励
local function GetRewardArr(self)
    return self.rankRewardArr
end
--}}}

--计算红点
local function GetRedNum(self)
    local count = 0
    local goodsList = DataCenter.CommonShopManager:GetGoodsListByShopType(CommonShopType.GolloesShop)
    if #goodsList > 0 then
        for i = 1 ,#goodsList do
            local soldOut = false
            local state = false
            if goodsList[i].discount and goodsList[i].discount > 0 then
                state = true
            end
            local switch = CS.GameEntry.Setting:GetBool("GolloesCardShopCellS_"..goodsList[i].itemId..goodsList[i].costNum.. LuaEntry.Player.uid, state)
            if goodsList[i].maxTimes and goodsList[i].maxTimes > 0 then
                local goodsInfo = DataCenter.CommonShopManager:GetGoodsInfoById(goodsList[i].shopType, goodsList[i].id)
                local boughtTimes = goodsInfo and goodsInfo.boughtTimes or  0
                if boughtTimes < goodsList[i].maxTimes then
                    soldOut = false
                else
                    soldOut = true
                end
            end
            local resType = RewardToResType[goodsList[i].currencyType]
            if resType and DataCenter.ResourceManager:GetResourceIconByType(resType) then
                if resType == ResourceType.Gold then
                    if LuaEntry.Player.gold >= goodsList[i].costNum and soldOut == false and switch then
                        count = count + 1
                    end
                else
                    local cnt = LuaEntry.Resource:GetCntByResType(resType)
                    if cnt >= goodsList[i].costNum and soldOut == false and switch then
                        count = count + 1
                    end
                end
            else
                local curNum = DataCenter.ItemData:GetItemCount(goodsList[i].currencyId)
                if curNum >= goodsList[i].costNum and soldOut == false and switch then
                    count = count + 1
                end
            end
        end
    end
    return count
end

--记录上一次FlipCards
local function SetLastFlipCards(self)
    self.lastFlipCards = self.flipCards
end

local function GetLastFlipCards(self)
    return self.lastFlipCards
end

local function ClearLastFlipCards(self)
    self.lastFlipCards = nil
end


ActGolloesCardInfo.__init = __init
ActGolloesCardInfo.__delete = __delete
ActGolloesCardInfo.ParseGolloesCard = ParseGolloesCard
ActGolloesCardInfo.ParseFlipCards = ParseFlipCards
ActGolloesCardInfo.ParseCardInfo = ParseCardInfo
ActGolloesCardInfo.UpdateFlipCard = UpdateFlipCard
ActGolloesCardInfo.ClearFlipCards = ClearFlipCards
ActGolloesCardInfo.UpdateShowArr = UpdateShowArr
ActGolloesCardInfo.UpdateNextShowArr = UpdateNextShowArr
ActGolloesCardInfo.GetShowArr = GetShowArr
ActGolloesCardInfo.GetNextShowArr = GetNextShowArr
ActGolloesCardInfo.ParseRankInfo = ParseRankInfo
ActGolloesCardInfo.GetRankList = GetRankList
ActGolloesCardInfo.GetRewardArr = GetRewardArr
ActGolloesCardInfo.GetRedNum = GetRedNum
ActGolloesCardInfo.SetLastFlipCards = SetLastFlipCards
ActGolloesCardInfo.GetLastFlipCards = GetLastFlipCards
ActGolloesCardInfo.ClearLastFlipCards = ClearLastFlipCards
return ActGolloesCardInfo