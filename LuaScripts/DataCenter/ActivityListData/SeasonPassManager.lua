---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/12 14:13
---SeasonPassManager.lua

local SeasonPassManager = BaseClass("SeasonPassManager");
local SeasonPassData = require "DataCenter.ActivityListData.SeasonPassData"

local function __init(self)
    self.seasonPassInfoDic = {}
    self.PrivilegeExtraRewards = {}
    self:AddListener()
end

local function __delete(self)
    self:RemoveListener()
    self.seasonPassInfoDic = nil
    self.PrivilegeExtraRewards = nil
end

local function AddListener(self)
    --EventManager:GetInstance():AddListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end


local function GetSeasonPassInfoReq(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.GetSeasonPassInfo, activityId)
end

local function OnRecvSeasonPassInfoResp(self, msg)
    self:UpdateSeasonPassInfo(msg)
    EventManager:GetInstance():Broadcast(EventId.OnSeasonPassInfoUpdate)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function UpdateSeasonPassInfo(self, msg)
    local passInfo = self.seasonPassInfoDic[msg.activityId]
    if not passInfo then
        passInfo = SeasonPassData.New()
    end
    passInfo:ParseData(msg)
    self.seasonPassInfoDic[passInfo.activityId] = passInfo
end

local function ClaimTaskRewardReq(self, activityId, taskId)
    if not self.isWaitingBack then
        SFSNetwork.SendMessage(MsgDefines.ClaimSeasonPassTaskReward, activityId, taskId)
        self.isWaitingBack = true
    end
end

local function OnRecvTaskRewardResp(self, msg)
    self.isWaitingBack = false
    if msg["reward"] then
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(msg)
    end
    
    local passInfo = self.seasonPassInfoDic[msg.activityId]
    if passInfo then
        passInfo:UpdatePassInfo(msg)
        passInfo:UpdateTaskState(msg.taskId, 2)
        EventManager:GetInstance():Broadcast(EventId.OnSeasonPassTaskRewardUpdate)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
end

--0领取免费奖励  1领取付费奖励
local function ClaimPassLevelRewardReq(self, activityId, level, type)
    SFSNetwork.SendMessage(MsgDefines.ClaimSeasonPassLevelReward, activityId, level, type)
end

local function OnRecvClaimLevelRewardResp(self, msg)
    if msg["reward"] then
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        local template = DataCenter.ActBattlePassTemplateManager:GetTemplateById(msg.activityId, msg.level)
        if template then
            local str = ""
            if msg.type == SeasonPassRewardType.NormalReward then
                if not string.IsNullOrEmpty(template.free_item) then
                    str = template.free_item
                end
            elseif msg.type == SeasonPassRewardType.SpecialReward then
                if not string.IsNullOrEmpty(template.pay_item) then
                    str = template.pay_item
                end
            end

            if not string.IsNullOrEmpty(str) then
                local itemIdArr = string.split(str, "|")
                for m, n in ipairs(itemIdArr) do
                    local idCount = string.split(n, ";")
                    local newReward = {}
                    newReward.type = RewardType.GOODS
                    newReward.value = {
                        count = tonumber(idCount[2]),
                        itemId = idCount[1],
                    }
                    table.insert(msg.reward, newReward)
                end
            end
        end
        DataCenter.RewardManager:ShowCommonReward(msg)
    end
    
    local passInfo = self.seasonPassInfoDic[msg.activityId]
    if passInfo then
        passInfo:UpdateStageRewardState(msg.level, msg.type, 1)
    end
    EventManager:GetInstance():Broadcast(EventId.OnSeasonPassLevelRewardUpdate)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function ClaimExtraRewardReq(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.ClaimSeasonPassExtraReward, activityId)
end

local function OnRecvClaimExtraRewardResp(self, msg)
    if msg["reward"] then
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(msg)
    end

    local passInfo = self.seasonPassInfoDic[msg.activityId]
    if passInfo then
        passInfo:UpdatePassInfo(msg)
    end
    EventManager:GetInstance():Broadcast(EventId.OnSeasonPassInfoUpdate)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function OnRecvPassInfoPush(self, msg)
    local passInfo = self.seasonPassInfoDic[msg.activityId]
    if passInfo then
        passInfo:UpdatePassInfo(msg)
    end
    EventManager:GetInstance():Broadcast(EventId.OnSeasonPassInfoUpdate)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function OnRecvTaskInfoPush(self, msg)
    local passInfo = self.seasonPassInfoDic[msg.activityId]
    if passInfo then
        for i, v in ipairs(msg.taskArr) do
            passInfo:UpdateTaskState(v.taskId, v.state, v.num)
        end
        EventManager:GetInstance():Broadcast(EventId.OnSeasonPassTaskRewardUpdate)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
end

--0 晶体箱
--1 金币
local function GetExtraRewardsReq(self)
    SFSNetwork.SendMessage(MsgDefines.SeasonForceBattlePassReward)
end

local function OnRecvExtraRewardsResp(self, msg)
    self:UpdateExtraRewards(msg)
    EventManager:GetInstance():Broadcast(EventId.DesertForceRefresh)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function UpdateExtraRewards(self, msg)
    local crystalReward = DataCenter.RewardManager:ReturnRewardParamForMessage(msg.crystalReward)
    self.PrivilegeExtraRewards[0] = crystalReward
    local moneyReward = DataCenter.RewardManager:ReturnRewardParamForMessage(msg.moneyReward)
    self.PrivilegeExtraRewards[1] = moneyReward
end

local function ClaimAllLevelRewardsReq(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.ClaimAllSeasonPassReward, activityId)
end

local function OnRecvAllLevelRewardsResp(self, msg)
    if msg["reward"] then
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(msg)
    end
    
    self:UpdateSeasonPassInfo(msg)
    EventManager:GetInstance():Broadcast(EventId.OnSeasonPassInfoUpdate)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end




local function GetSeasonPassInfo(self, activityId)
    activityId = tonumber(activityId)
    return self.seasonPassInfoDic[activityId]
end

local function GetCurWeekIndex(self, activityId)
    activityId = tonumber(activityId)
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(activityId))
    local startTime = activityInfo.startTime
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local weekMs = 7 * 24 * 3600000
    local weekNum = math.ceil((curTime - startTime) / weekMs)
    
    return weekNum, weekNum * weekMs + startTime
end

local function GetSeasonAllWeek(self,activityId,seasonEndTime)
    activityId = tonumber(activityId)
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(activityId))
    local startTime = activityInfo.startTime
    local weekMs = 7 * 24 * 3600000
    local weekNum = math.ceil((seasonEndTime - startTime) / weekMs)

    return weekNum, weekNum * weekMs + startTime
end

local function GetWeekUnlockTime(self, activityId, weekIndex)
    activityId = tonumber(activityId)
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(activityId))
    local startTime = activityInfo.startTime
    local weekMs = 7 * 24 * 3600000
    return startTime + (weekIndex - 1) * weekMs
end

local function GetPrivilegeList(self, activityId)
    activityId = tonumber(activityId)
    local list = DataCenter.ActBattlePassTemplateManager:GetAllTemplateWithPrivilege(activityId)
    table.sort(list, function(a, b)
        if a.level ~= b.level then
            return a.level < b.level
        else
            return false
        end
    end)
    
    local retTb = {}
    for i, v in ipairs(list) do
        if not string.IsNullOrEmpty(v.pay_item) then
            local arr = string.split(v.pay_item, "|")
            for m, n in ipairs(arr) do
                if not string.IsNullOrEmpty(n) then
                    local idCount = string.split(n, ";")
                    if #idCount == 2 then
                        local id = idCount[1]
                        local count = tonumber(idCount[2])
                        local tb = {}
                        tb.rewardType = RewardType.GOODS
                        tb.itemId = id
                        tb.count = count
                        tb.level = v.level
                        table.insert(retTb, tb)
                    end
                end
            end
        end
    end
    return retTb
end

local function GetSuperPackageInfo(self, activityId)
    activityId = tonumber(activityId)
    local passInfo = self:GetSeasonPassInfo(activityId)
    if passInfo then
        local tempId = passInfo.packageIds[2]
        local giftPack = GiftPackManager.get(tempId)
        return giftPack
    end
end

local function GetPrivilegeExtraRewards(self, tempType)
    return self.PrivilegeExtraRewards[tempType] or {}
end

local function GetTotalRedCount(self, activityId)
    local passInfo = self:GetSeasonPassInfo(activityId)
    if not passInfo then
        return 0
    end
    local passRed = passInfo:GetPassRedCount()
    local taskRed = passInfo:GetTaskRedCount()
    local challengeRed = passInfo:GetChallengeRedCount()
    return passRed + taskRed + challengeRed
end

local function ResetWaitingStatus(self)
    self.isWaitingBack = false
end

local function GetPassLevelRedCount(self, activityId)
    local retNum = 0
    local passInfo = self:GetSeasonPassInfo(activityId)
    if passInfo then
        retNum = passInfo:GetPassRedCount()
    end
    return retNum
end


SeasonPassManager.__init = __init
SeasonPassManager.__delete = __delete
SeasonPassManager.AddListener = AddListener
SeasonPassManager.RemoveListener = RemoveListener

SeasonPassManager.GetSeasonPassInfoReq = GetSeasonPassInfoReq
SeasonPassManager.OnRecvSeasonPassInfoResp = OnRecvSeasonPassInfoResp
SeasonPassManager.UpdateSeasonPassInfo = UpdateSeasonPassInfo
SeasonPassManager.ClaimTaskRewardReq = ClaimTaskRewardReq
SeasonPassManager.OnRecvTaskRewardResp = OnRecvTaskRewardResp
SeasonPassManager.ClaimPassLevelRewardReq = ClaimPassLevelRewardReq
SeasonPassManager.OnRecvClaimLevelRewardResp = OnRecvClaimLevelRewardResp
SeasonPassManager.ClaimExtraRewardReq = ClaimExtraRewardReq
SeasonPassManager.OnRecvClaimExtraRewardResp = OnRecvClaimExtraRewardResp
SeasonPassManager.OnRecvPassInfoPush = OnRecvPassInfoPush
SeasonPassManager.OnRecvTaskInfoPush = OnRecvTaskInfoPush
SeasonPassManager.GetExtraRewardsReq = GetExtraRewardsReq
SeasonPassManager.OnRecvExtraRewardsResp = OnRecvExtraRewardsResp
SeasonPassManager.UpdateExtraRewards = UpdateExtraRewards
SeasonPassManager.ClaimAllLevelRewardsReq = ClaimAllLevelRewardsReq
SeasonPassManager.OnRecvAllLevelRewardsResp = OnRecvAllLevelRewardsResp

SeasonPassManager.GetSeasonPassInfo = GetSeasonPassInfo
SeasonPassManager.GetCurWeekIndex = GetCurWeekIndex
SeasonPassManager.GetSeasonAllWeek = GetSeasonAllWeek
SeasonPassManager.GetWeekUnlockTime = GetWeekUnlockTime
SeasonPassManager.GetPrivilegeList = GetPrivilegeList
SeasonPassManager.GetSuperPackageInfo = GetSuperPackageInfo
SeasonPassManager.GetPrivilegeExtraRewards = GetPrivilegeExtraRewards
SeasonPassManager.GetTotalRedCount = GetTotalRedCount
SeasonPassManager.ResetWaitingStatus = ResetWaitingStatus
SeasonPassManager.GetPassLevelRedCount = GetPassLevelRedCount

return SeasonPassManager