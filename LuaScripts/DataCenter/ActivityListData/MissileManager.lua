---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/4/17 10:55
---

local MissileManager = BaseClass("MissileManager")
local MissileInfo = require("DataCenter.ActivityListData.MissileInfo")

local function __init(self)
    self.missileInfos = {}
    self.edenMissileBuyTimes = 0
end

local function __delete(self)
    self.missileInfos = {}
end

local function MissileInfoGet(self)
    if not self:IsSystemOpen() then
        return
    end
    SFSNetwork.SendMessage(MsgDefines.MissileInfoGet)
end

local function GetEdenMissileInfo(self)
    SFSNetwork.SendMessage(MsgDefines.EdenMissileInfoGet)
end
local function EdenMissileGetHandler(self,message)
    if message == nil then
        return
    end
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    if message["allianceEdenMissileBuyTimes"]~=nil then
        self.edenMissileBuyTimes = message["allianceEdenMissileBuyTimes"]
    end
    if message["sapphire"]~=nil then
        DataCenter.AllianceStorageManager:UpdateStorageInfo(message)
    end
    EventManager:GetInstance():Broadcast(EventId.GetEdenMissileData)
end
local function GetEdenMissileUseTime(self)
    return self.edenMissileBuyTimes
end

local function OnBuyAndUseMissileHandler(self,message)
    if message == nil then
        return
    end
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    if message["allianceEdenMissileBuyTimes"]~=nil then
        self.edenMissileBuyTimes = message["allianceEdenMissileBuyTimes"]
    end
    if message["sapphire"]~=nil then
        DataCenter.AllianceStorageManager:UpdateStorageInfo(message)
    end
    if message["uuid"]~=nil and SceneUtils.GetIsInWorld() then
        local bUuid = message["uuid"]
        local info = DataCenter.WorldPointManager:GetBuildDataByUuid(bUuid)
        if info~=nil then
            if info~=nil then
                local pointId = info.mainIndex
                MissileAttackEffectManager:GetInstance():ShowOneEffect(pointId)
            end
        end
    end
end
local function MissileInfoGetHandler(self, message)
    if message == nil then
        return
    end
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    if message["missileInfo"] then
        for _, v in ipairs(message["missileInfo"]) do
            self:UpgradeInfo(v)
        end
    else
        self.missileInfos = {}
    end
    EventManager:GetInstance():Broadcast(EventId.MissileInfoUpgrade)
end

local function MissileInfoPushHandler(self, message)
    if message == nil then
        return
    end
    if message["missileInfo"] then
        for _, v in ipairs(message["missileInfo"]) do
            self:UpgradeInfo(v)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.MissileInfoUpgrade)
end

local function MissileAttackPushHandler(self, message)
    if message == nil then
        return
    end
    if message["mainBuildUuid"] and SceneUtils.GetIsInWorld() then
        local bUuid = message["mainBuildUuid"]
        local info = DataCenter.WorldPointManager:GetBuildDataByUuid(bUuid)
        if info~=nil then
            if info~=nil then
                local pointId = info.mainIndex
                MissileAttackEffectManager:GetInstance():ShowOneEffect(pointId)
            end
        end
    end
end

local function MissileCreate(self, missileId, uuid, type, serverId)
    if not self:IsSystemOpen() then
        return
    end
    SFSNetwork.SendMessage(MsgDefines.MissileCreate, missileId, uuid, type, serverId)
end

local function MissileCreateHandler(self, message)
    if message == nil then
        return
    end
    if message["errorCode"] ~= nil then
        local errorCode = message["errorCode"]
        if errorCode ~= SeverErrorCode then
            UIUtil.ShowTipsId(message["errorCode"])
        end
        return
    end
    if message["missileInfo"] then
        for _, v in ipairs(message["missileInfo"]) do
            self:UpgradeInfo(v)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.MissileInfoUpgrade)
end

local function GetMissileInfo(self, missileId)
    return self.missileInfos[missileId]
end

local function UpgradeInfo(self, para)
    local missileId = para["missileId"]
    if self.missileInfos[missileId] == nil then
        self.missileInfos[missileId] = MissileInfo.New()
    end
    self.missileInfos[missileId]:ParseData(para)
end

local function IsSystemOpen(self)
    return LuaEntry.DataConfig:CheckSwitch("alliance_missile")
end

local function CanCreateMissile(self, allianceId, missileId)
    if not self:IsSystemOpen() then
        return false
    end
    local missileInfo = self:GetMissileInfo(missileId)
    if missileInfo == nil or missileInfo.num == 0 then
        return
    end
    if not DataCenter.AllianceBaseDataManager:IsR4orR5() then
        return false
    end
    local period = DataCenter.GloryManager:GetPeriod()
    local battleState = DataCenter.GloryManager:GetBattleState()
    if period ~= GloryPeriod.Start or battleState ~= GloryBattleState.Ongoing then
        return false
    end
    if allianceId == LuaEntry.Player.allianceId then
        return false
    end
    --local actData = DataCenter.GloryManager:GetActData()
    --if actData then
    --    local opponentData = actData:GetOpponentData()
    --    if opponentData and opponentData.allianceId ~= LuaEntry.Player.allianceId then
    --        return true
    --    end
    --end
    return true
end

local function GetMaxMissileNum(self)
    local maxNum = LuaEntry.DataConfig:TryGetNum("plant_alliance_missile", "k1")
    return maxNum
end

local function IsRuinPoint(self, pointId)
    local info = DataCenter.WorldPointManager:GetPointInfo(pointId)
    if info and info.PointType == WorldPointType.WorldRuinPoint then
        local pb = PBController.ParsePbFromBytes(info.extraInfo, "protobuf.WorldRuinPointInfo")
        local now = UITimeManager:GetInstance():GetServerTime()
        return now < pb.endTime * 1000
    end
    return false
end

MissileManager.__init = __init
MissileManager.__delete = __delete
MissileManager.MissileInfoGet = MissileInfoGet
MissileManager.MissileInfoGetHandler = MissileInfoGetHandler
MissileManager.MissileInfoPushHandler = MissileInfoPushHandler
MissileManager.MissileCreate = MissileCreate
MissileManager.MissileCreateHandler = MissileCreateHandler
MissileManager.GetMissileInfo = GetMissileInfo
MissileManager.UpgradeInfo = UpgradeInfo
MissileManager.IsSystemOpen = IsSystemOpen
MissileManager.CanCreateMissile = CanCreateMissile
MissileManager.GetMaxMissileNum = GetMaxMissileNum
MissileManager.MissileAttackPushHandler = MissileAttackPushHandler
MissileManager.IsRuinPoint = IsRuinPoint
MissileManager.OnBuyAndUseMissileHandler= OnBuyAndUseMissileHandler
MissileManager.EdenMissileGetHandler =EdenMissileGetHandler
MissileManager.GetEdenMissileInfo =GetEdenMissileInfo
MissileManager.GetEdenMissileUseTime = GetEdenMissileUseTime
return MissileManager