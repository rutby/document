---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/11/25 15:26
---RobotWarsManager.lua

local RobotWarsManager = BaseClass("RobotWarsManager");

local function __init(self)
    self.activityInfo = nil
    self.robotWarRedCount = 0
    self.seasonEndState = false
    self:AddListener()
end

local function __delete(self)
    self.activityInfo = nil
    self.robotWarRedCount = nil
    self.seasonEndState = false
    self:RemoveListener()
end

local function AddListener(self)
    --EventManager:GetInstance():AddListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function UpdateRobotWarsActivityInfo(self, data)
    self.activityInfo = data
    self:UpdateRobotWarRedDot()
    SFSNetwork.SendMessage(MsgDefines.SeasonBalancePackageViewOpen)
end

local function OnRecvLatestActivityInfo(self, data)
    if not self.activityInfo then
        return
    end
    self.activityInfo:ParseActivityData(data)
    EventManager:GetInstance():Broadcast(EventId.OnRobotWarActivityUpdate)
end

local function UpdateRobotWarRedDot(self, countFromS)
    if countFromS then
        self.robotWarRedCount = countFromS
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
        return
    end
    
    if not self.activityInfo then
        return
    end
    local isSelfLeader = DataCenter.AllianceBaseDataManager:IsSelfLeader()
    if isSelfLeader then
        if self.activityInfo.restPackageNum > 0 then
            self.robotWarRedCount = 1
            EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
            return
        end
    end
    if self.activityInfo.selfRewardStatus == 1 then
        self.robotWarRedCount = 1
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
        return
    end
end

local function GetEntranceRedCount(self)
    local retCount = self.robotWarRedCount or 0
    
    local exceptId = self.activityInfo and self.activityInfo.id
    local otherRed = DataCenter.ActivityListDataManager:GetRedCount_ActivityDaily(4, exceptId)
    local extraNum = 0
    local newNum  = 0
    local bubbleNum = DataCenter.StaminaBallManager:CheckShowRewardRed()
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
    if table.count(dataList) > 0 then
        local actListData = dataList[1]
        if actListData then
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if actListData.startTime < curTime and curTime < actListData.endTime then
                if DataCenter.GovernmentManager:IsSelfPresident() then
                    local data = DataCenter.MigrateDataManager:GetApplyList()
                    if data~=nil and table.count(data)>0 then
                        extraNum = 1
                    end
                end
            end
            local lastEndTime = DataCenter.ActivityListDataManager:GetActivityVisitedEndTime(actListData.id)
            if actListData.endTime > lastEndTime then
                newNum =1
            elseif DataCenter.MigrateDataManager:GetHasAccept() then
                newNum = 1
            end
        end
    end
    retCount = retCount + otherRed + extraNum + newNum + bubbleNum
    
    return retCount
end

local function CheckIfNeedShowEntrance(self)
    if not self.activityInfo or DataCenter.BuildManager.MainLv < self.activityInfo.needMainCityLevel then
        return false
    end
    if LuaEntry.DataConfig:CheckSwitch("season1_desert_func") then
        return true
    end
    return false
end

local function OpenRobotWars(self, customActId)
    if customActId ~= nil then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityCenterTable, { anim = true, hideTop = true, UIMainAnim = UIMainAnimType.AllHide }, tonumber(customActId))
    end
    if self.activityInfo then
        local isFirst = true
        --这里是为了判断进入赛季界面后是不是要跳转到火星争霸
        local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
        if seasonId > 0 then
            --赛季结束
            local curTimes = UITimeManager:GetInstance():GetServerTime()
            local state = Setting:GetString(LuaEntry.Player.uid .. "_".."SEASON_END"..seasonId,"")
            if state == "" then
                local kSeason = LuaEntry.DataConfig:TryGetStr("season_end", "k1")
                local str = string.split(kSeason,"|")
                local worldTrendIds  ={}
                if str[seasonId] then
                    worldTrendIds = string.split(str[seasonId],";")
                end
                --查找本服对应天下大势ID
                local data = DataCenter.WorldTrendManager:GetDataInfo()
                if data and next(data) then
                    for i = 1 ,table.count(worldTrendIds) do
                        for k = 1 ,table.count(data) do
                            --检查id和状态  赛季结束开始
                            if tonumber(data[k].id) == tonumber(worldTrendIds[i]) and (data[k].startTime < curTimes) then
                                --检查时间
                                local settleTime = DataCenter.SeasonDataManager:GetSeasonSettleTime()
                                if settleTime and settleTime > 0  then
                                    isFirst = false
                                    self:SetSeasonEndState(true)
                                end
                                break
                            end
                        end
                    end
                end
            end
        end
        if isFirst then
            self:SetSeasonEndState(false)
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityCenterTable, { anim = true, hideTop = true, UIMainAnim = UIMainAnimType.AllHide }, tonumber(self.activityInfo.id),isFirst)
    end
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIRobotWars, {anim = true, UIMainAnim = UIMainAnimType.AllHide})
end

local function SetSeasonEndState(self,state)
    self.seasonEndState = state
end

local function GetSeasonEndState(self)
    return  self.seasonEndState
end

local function GetIsOnReward(self)
    local isOnReward = false
    if self.activityInfo~=nil then
        local serverTime = UITimeManager:GetInstance():GetServerTime()
        if self.activityInfo.WorldSeasonRewardEndTime> serverTime then
            isOnReward = true
        end
    end
    return isOnReward
end

local function GetIsShowPreview(self)
    local isShowPreview = false
    if self.activityInfo~=nil then
        if self.activityInfo.WorldSeasonStartTime~=nil then
            isShowPreview = true
        end
    end
    return isShowPreview
end

local function GetActivityInfo(self)
    return self.activityInfo
end

local function GetCurStage(self)
    if not self.activityInfo then
        return SeasonStage.None
    end

    local curTime = UITimeManager:GetInstance():GetServerTime()
    local unlockLvList = DataCenter.WorldAllianceCityDataManager.trendsUnLockLv
    local seasonStarted = true
    local startT = 0
    if unlockLvList and #unlockLvList > 0 then
        for i = 1, #unlockLvList do
            if unlockLvList[i].cityLv == 1 and curTime < unlockLvList[i].unLockTime then
                seasonStarted = false
                startT = unlockLvList[i].unLockTime
                break
            end
        end
    end
    if not seasonStarted then
        return SeasonStage.Preview, startT
    end

    local settleEndTime = self.activityInfo.settleEndTime
    local finishTime = self.activityInfo.WorldSeasonRewardEndTime
    local nextSeasonTime = self.activityInfo.WorldSeasonStartTime
    if settleEndTime == 0 and finishTime == 0 then
        return SeasonStage.Open
    end

    if settleEndTime > 0 and curTime < settleEndTime then
        return SeasonStage.toSettle, settleEndTime
    end

    if finishTime > 0 and curTime < finishTime then
        return SeasonStage.ToFinish, finishTime
    end
    if finishTime > 0 and curTime > finishTime then
        return SeasonStage.Finished,nextSeasonTime
    end
end

--获取自己阵营
local function GetSelfCamp(self)
    if LuaEntry.Player.serverType == ServerType.EDEN_SERVER then
        local dataInfo = DataCenter.RobotWarsManager:GetActivityInfo()
        if dataInfo~=nil and dataInfo.edenMatch~=nil then
            return dataInfo.edenMatch.camp
        end 
    end
    return -1
end

RobotWarsManager.__init = __init
RobotWarsManager.__delete = __delete
RobotWarsManager.AddListener = AddListener
RobotWarsManager.RemoveListener = RemoveListener

RobotWarsManager.CheckIfNeedShowEntrance = CheckIfNeedShowEntrance
RobotWarsManager.GetEntranceRedCount = GetEntranceRedCount
RobotWarsManager.UpdateRobotWarsActivityInfo = UpdateRobotWarsActivityInfo
RobotWarsManager.OnRecvLatestActivityInfo = OnRecvLatestActivityInfo
RobotWarsManager.OpenRobotWars = OpenRobotWars
RobotWarsManager.GetIsShowPreview = GetIsShowPreview
RobotWarsManager.SetSeasonEndState = SetSeasonEndState
RobotWarsManager.GetSeasonEndState = GetSeasonEndState
RobotWarsManager.GetIsOnReward = GetIsOnReward
RobotWarsManager.GetActivityInfo= GetActivityInfo
RobotWarsManager.UpdateRobotWarRedDot= UpdateRobotWarRedDot
RobotWarsManager.GetCurStage= GetCurStage
RobotWarsManager.GetSelfCamp = GetSelfCamp
return RobotWarsManager