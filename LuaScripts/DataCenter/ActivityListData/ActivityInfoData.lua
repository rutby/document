---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/10/19 17:55
---
local ActivityInfoData = BaseClass("ActivityInfoData")

local function __init(self)

    self.id =""
    self.reward={}
    self.noticeStartTime = 0
    self.startTime = 0
    self.endTime = 0
    self.extraEndTime = 0
    self.noticeTime = 0
    self.settleTime = 0
    self.readyTime=0--准备时间,活动开始前 
    self.rewardTime=0--发奖时间,活动结束后
    self.normalStartTime = 0
    self.normalEndTime = 0
    self.activityName = ""
    self.activityId= ""
    self.name = ""
    self.desc = ""
    self.desc_info =""
    self.advertise_pic = "" --图标
    self.story = ""
    self.activity_pic="" --活动背景图
    self.type =0
    self.needMainCityLevel =0 --开放需要的大本等级
    self.order=0
    self.season_order = {}--{{dayFrom, dayTo, order}, ...}
    self.reward_goods = {} --展示奖励
    self.rank_reward_list= {}--排行榜奖励 --活动boss用
    self.attack_time_reward_list = {}
    self.preOpenTime = nil
    self.r1StartTime = 0
    self.r2StartTime = 0
    self.r1EndTime = 0
    self.r2EndTime = 0
    self.r3StartTime = 0
    self.r4StartTime = 0
    self.r3EndTime = 0
    self.r4EndTime = 0
    self.actBossStartTime =0
    self.actBossEndTime = 0
    self.activity_daily = 0
    self.WorldSeasonStartTime = 0 --下一赛季预告
    self.WorldSeasonRewardEndTime = 0--赛季结束时间
    self.settleEndTime = 0--赛季结算时间
    self.selfRewardStatus = 0--0没有奖励，1未领取，2已领取
    self.restPackageNum = 0--剩余未分配奖励数
    self.notice_info = ""
    self.personalEventType = nil
    self.sub_type = 0
    self.groupId = 0--赛季表的id
    self.unlock_hero = ""
    self.stopSignUpTime = 0 --巨龙活动 报名截止时间
    self.battleOpenTime = 0 --巨龙活动 (匹配结束)
    self.servers = "" --跨服打地匹配到的服
    self.edenMatch = nil --targetServer,camp 阵营信息
    self.matchTime = 0 --s5
    self.showMatchGroupTime = 0 --s5现实分组时间
    self.showEdenCrossWarTime = 0
end

local function __delete(self)
    self.id = nil
    self.reward=nil
    self.noticeStartTime = nil
    self.startTime = nil
    self.endTime = nil
    self.extraEndTime = nil
    self.noticeTime = nil
    self.settleTime = nil
    self.readyTime=nil
    self.rewardTime=nil
    self.activityName = nil
    self.activityId= nil
    self.name = nil
    self.desc = nil
    self.desc_info =nil
    self.advertise_pic = nil
    self.story = nil
    self.activity_pic=nil
    self.type =nil
    self.needMainCityLevel =nil
    self.order=nil
    self.season_order = nil
    self.reward_goods = nil
    self.activity_daily = nil
    self.notice_info = nil
    self.personalEventType = nil
    self.sub_type = 0
    self.groupId = 0
    self.unlock_hero = ""
    self.stopSignUpTime = 0
    self.battleOpenTime = 0
    self.servers = ""
    self.edenMatch = nil
end

local function GetRankRewardList(self)
    return self.rank_reward_list
end
local function GetPersonRankRewardList(self)
    return self.attack_time_reward_list
end
local function ParseActivityData(self, activity)
    if activity ==nil then
        return
    end

    if activity["id"] ~=nil then
        self.id = activity["id"]
    end
    if activity["reward"] ~=nil then
        self.reward = activity["reward"]
    end
    if activity["preTime"] then
        self.noticeStartTime = activity["preTime"]
    end
    if activity["startTime"] ~=nil then
        self.startTime = activity["startTime"]
    end
    if activity["normalStartTime"]~=nil then
        self.normalStartTime = activity["normalStartTime"]
    end
    if activity["normalEndTime"]~=nil then
        self.normalEndTime = activity["normalEndTime"]
    end
    if activity["specialAddNum"]~=nil then
        self.specialAddNum = activity["specialAddNum"]
    end
    if activity["preOpenTime"] then
        self.preOpenTime = activity["preOpenTime"]
    end

    if activity["endTime"] ~=nil then
        self.endTime = activity["endTime"]
    end

    if activity["extraEndTime"] ~=nil then
        self.extraEndTime = activity["extraEndTime"]
    end

    if activity["noticeTime"] then
        self.noticeTime = activity["noticeTime"]
    end

    if activity["settleTime"] then
        self.settleTime = activity["settleTime"]
    end

    if activity["lastTime"] ~=nil then
        self.endTime = activity["lastTime"]
    end

    if activity["readyTime"] ~=nil then
        self.readyTime = activity["readyTime"]
    end

    if activity["rewardTime"] ~=nil then
        self.rewardTime = activity["rewardTime"]
    end
    if activity["name"] ~=nil then
        self.activityName = activity["name"]
    end
    if activity["activityid"] ~=nil then
        self.activityId = activity["activityid"]
    end
    if activity["personalEventType"] ~=nil then
        self.personalEventType = activity["personalEventType"]
    end
    local tabData = LocalController:instance():getLine(TableName.ActivityPanel,self.id)
    if tabData~=nil then
        self.desc_info = tabData.desc_info
        self.type = tabData.type
        self.sub_type = toInt(tabData.sub_type)
        self.advertise_pic = tabData.Advertise_pic
        self.activity_pic = tabData.activity_pic
        if self.type == ActivityEnum.ActivityType.ActSevenDay then
            if string.sub(self.activity_pic, 1, 10) == "HeroGrowth" or self.activity_pic == "hero1" or self.sub_type == 2 then
                self.type = EnumActivity.HeroGrowth.Type
            end
        end
        self.notice_info = tabData.noticeinfo
        self.story = tabData.story
        self.needMainCityLevel = tonumber(tabData.needMainCityLevel) or 0
        self.order = tabData.order
        self.season_order = {}
        if not string.IsNullOrEmpty(tabData.season_order) then
            local dayArr = string.split(tabData.season_order, "|")
            for i, v in ipairs(dayArr) do
                local conf = string.split(v, ";")
                if #conf == 2 then
                    local days = string.split(conf[1], "-")
                    local dayFrom = tonumber(days[1])
                    local dayTo = tonumber(days[2])
                    local order = tonumber(conf[2])
                    local newOrder = {
                        dayFrom = dayFrom,
                        dayTo = dayTo,
                        order = order,
                    }
                    table.insert(self.season_order, newOrder)
                end
            end
        end
        
        self.name = tabData.name
        self.list_icon = tabData.list_icon
        self.reward_goods = tabData.reward_goods
        self.countdown_remind = tonumber(tabData.countdown_remind) or 0
        self.para1 = tabData.para1
        self.para2 = tabData.para2
        self.para3 = tabData.para3
        self.para4 = tabData.para4
        self.para5 = tabData.para5
        self.para6 = tabData.para6
        self.para7 = tabData.para7
        local unlock_hero = tabData.unlock_hero
        if not string.IsNullOrEmpty(unlock_hero) then
            local vec = string.split(unlock_hero, ";")
            if vec and vec[2] ~= nil then
                self.unlock_hero = vec[2]
            end
        end
        self.show_type = tabData.show_type
        local groupArr = string.split(self.show_type or "", ";")
        if #groupArr == 2 then
            self.tabGroup = groupArr[1]
            self.tabGroupOrder = tonumber(groupArr[2])
        else
            self.tabGroup = "372337"
            self.tabGroupOrder = 10
        end
        self.activity_daily = string.IsNullOrEmpty(tabData.activity_daily) and 0 or tonumber(tabData.activity_daily)
        if self.type ==  ActivityEnum.ActivityType.WorldBoss then
            local rankList = tabData.para1
            local rankReward = tabData.para2
            if rankList~=nil and rankList~="" and rankReward~=nil and rankReward~="" then
                local rankArr = string.split(rankList,"|")
                local rankRewardArr = string.split(rankReward,"|")
                local num = 0
                for i=1 ,#rankArr do
                    if #rankRewardArr>=i then
                        local rewardStr = rankRewardArr[i]
                        if rewardStr~=nil and rewardStr~="" then
                            local rewardArr = string.split(rewardStr,";")
                            local reward = {}
                            for k,v in pairs(rewardArr) do
                                local str = v
                                if str~=nil and str~="" then
                                    local strVec = string.split(str,",")
                                    if #strVec>2 then
                                        local id = tonumber(strVec[1])
                                        local rewardType = tonumber(strVec[2])
                                        local num = tonumber(strVec[3])
                                        if rewardType ==  RewardType.GOODS then
                                            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                                            if goods~=nil then
                                                local item = {}
                                                item.itemId = id
                                                item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                                                item.count = num
                                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                                                item.rewardType = rewardType
                                                item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                                                item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                                                item.isLocal = true
                                                item.goodsType = goods.type
                                                item.para2 = goods.para2
                                                --item.itemName = goods.name
                                                --item.itemDesc = goods.description
                                                local itemType = goods.type
                                                if itemType == 2 then -- SPD
                                                    if goods.para1 ~= nil and goods.para1 ~= "" then
                                                        local para1 = goods.para1
                                                        local temp = string.split(para1,';')
                                                        if temp ~= nil and #temp > 1 then
                                                            item.itemFlag = temp[1]..temp[2]
                                                        end
                                                    end
                                                elseif itemType == 3 then -- USE
                                                    local type2 = goods.type2
                                                    if type2 ~= 999 and goods.para ~= nil then
                                                        local res_num = tonumber(goods.para)
                                                        item.itemFlag = string.GetFormattedStr(res_num)
                                                    end
                                                end
                                                table.insert(reward,item)
                                            end
                                        else
                                            local resourceType = RewardToResType[rewardType]
                                            if resourceType~=nil then
                                                local item = {}
                                                item.itemId = id
                                                item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                                                item.rewardType = rewardType
                                                item.count = num
                                                item.itemName = ResourceTypeTxt[rewardType]
                                                item.isLocal = false
                                                table.insert(reward,item)
                                            end

                                        end
                                    end
                                end
                            end
                            local oneData = {}
                            oneData.rankStr = rankArr[i]
                            oneData.rewardStr  = reward
                            table.insert(self.rank_reward_list,oneData)
                        end
                    end
                end
            end
            
            local rankPersonList = tabData.para3
            local rankPersonReward = tabData.para4
            if rankPersonList~=nil and rankPersonList~="" and rankPersonReward~=nil and rankPersonReward~="" then
                local rankArr = string.split(rankPersonList,"|")
                local rankRewardArr = string.split(rankPersonReward,"|")
                local num = 0
                for i=1 ,#rankArr do
                    if #rankRewardArr>=i then
                        local rewardStr = rankRewardArr[i]
                        if rewardStr~=nil and rewardStr~="" then
                            local rewardArr = string.split(rewardStr,";")
                            local reward = {}
                            for k,v in pairs(rewardArr) do
                                local str = v
                                if str~=nil and str~="" then
                                    local strVec = string.split(str,",")
                                    if #strVec>2 then
                                        local id = tonumber(strVec[1])
                                        local rewardType = tonumber(strVec[2])
                                        local num = tonumber(strVec[3])
                                        if rewardType ==  RewardType.GOODS then
                                            local goods = DataCenter.ItemTemplateManager:GetItemTemplate(id)
                                            if goods~=nil then
                                                local item = {}
                                                item.itemId = id
                                                item.iconName = string.format(LoadPath.ItemPath,goods.icon)
                                                item.count = num
                                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(goods.color)
                                                item.rewardType = rewardType
                                                item.itemName = DataCenter.ItemTemplateManager:GetName(id)
                                                item.itemDesc = DataCenter.ItemTemplateManager:GetDes(id)
                                                item.isLocal = true
                                                item.goodsType = goods.type
                                                item.para2 = goods.para2
                                                --item.itemName = goods.name
                                                --item.itemDesc = goods.description
                                                local itemType = goods.type
                                                if itemType == 2 then -- SPD
                                                    if goods.para1 ~= nil and goods.para1 ~= "" then
                                                        local para1 = goods.para1
                                                        local temp = string.split(para1,';')
                                                        if temp ~= nil and #temp > 1 then
                                                            item.itemFlag = temp[1]..temp[2]
                                                        end
                                                    end
                                                elseif itemType == 3 then -- USE
                                                    local type2 = goods.type2
                                                    if type2 ~= 999 and goods.para ~= nil then
                                                        local res_num = tonumber(goods.para)
                                                        item.itemFlag = string.GetFormattedStr(res_num)
                                                    end
                                                end
                                                table.insert(reward,item)
                                            end
                                        else
                                            local resourceType = RewardToResType[rewardType]
                                            if resourceType~=nil then
                                                local item = {}
                                                item.itemId = id
                                                item.iconName = DataCenter.ResourceManager:GetResourceIconByType(resourceType)
                                                item.itemColor = DataCenter.ItemTemplateManager:GetToolBgByColor(ItemColor.GREEN)
                                                item.rewardType = rewardType
                                                item.count = num
                                                item.itemName = ResourceTypeTxt[rewardType]
                                                item.isLocal = false
                                                table.insert(reward,item)
                                            end

                                        end
                                    end
                                end
                            end
                            local oneData = {}
                            oneData.rankStr = rankArr[i]
                            oneData.rewardStr  = reward
                            table.insert(self.attack_time_reward_list,oneData)
                        end
                    end
                end
            end
        end
    end
    if self.type == ActivityEnum.ActivityType.WorldBoss then
        local startTime = self.startTime
        local startZeroTime =UITimeManager:GetInstance():GetTodayZeroServerTime(startTime/1000)
        local endTime = self.endTime
        local endZeroTime = UITimeManager:GetInstance():GetTodayZeroServerTime(endTime/1000)
        local k1 = LuaEntry.DataConfig:TryGetStr("ship_boss", "k1")
        local k2 = LuaEntry.DataConfig:TryGetStr("ship_boss", "k2")
        local k3 = LuaEntry.DataConfig:TryGetNum("ship_boss", "k3")
        local k16 = LuaEntry.DataConfig:TryGetStr("ship_boss", "k16")
        local k17 = LuaEntry.DataConfig:TryGetStr("ship_boss", "k17")
        local k1Str = string.split(k1,":")
        local k2Str = string.split(k2,":")
        local k16Str = string.split(k16,":")
        local k17Str = string.split(k17,":")
        if #k1Str>0 then
            local time = tonumber(k1Str[1])
            local time2 = tonumber(k1Str[2])
            self.r1StartTime = startZeroTime+time*3600+time2*60
            self.r1EndTime = self.r1StartTime+ k3
        end
        if #k2Str>0 then
            local time = tonumber(k2Str[1])
            local time2 = tonumber(k2Str[2])
            self.r2StartTime = startZeroTime+time*3600+time2*60
            self.r2EndTime = self.r2StartTime+ k3
        end
        if #k16Str>0 then
            local time = tonumber(k16Str[1])
            local time2 = tonumber(k16Str[2])
            self.r3StartTime = startZeroTime+time*3600+time2*60
            self.r3EndTime = self.r3StartTime+ k3
        end
        if #k17Str>0 then
            local time = tonumber(k17Str[1])
            local time2 = tonumber(k17Str[2])
            self.r4StartTime = startZeroTime+time*3600+time2*60
            self.r4EndTime = self.r4StartTime+ k3
        end
        self.actBossStartTime = startTime
        self.actBossEndTime = endTime
        if activity["timeStr"]~=nil then
            local timeStr = activity["timeStr"]
            local arr = string.split(timeStr,"|")
            if #arr>1 then
                local weekStr = string.split(arr[2],";")
                if #weekStr>=2 then
                    local startWeekIndex = tonumber(weekStr[1])
                    local endWeekIndex= tonumber(weekStr[#weekStr])
                    local todayWeekData = UITimeManager:GetInstance():GetWeekdayIndex(startTime)
                    local deltaStartWeekIndex = startWeekIndex - todayWeekData
                    local deltaEndWeekIndex = endWeekIndex - todayWeekData
                    self.actBossStartTime = startTime+(deltaStartWeekIndex*OneDayTime*1000)
                    self.actBossEndTime = endTime+(deltaEndWeekIndex*OneDayTime*1000)
                end
            end
        end
    end

    if self.type == EnumActivity.RobotWars.Type then
        if activity["settledRewardEndTime"]~=nil then
            self.WorldSeasonRewardEndTime = tonumber(activity["settledRewardEndTime"])
        end
        if activity["nextSeasonStartTime"]~=nil then
            self.WorldSeasonStartTime = activity["nextSeasonStartTime"]
        end
        if activity["settleEndTime"] then
            self.settleEndTime = tonumber(activity["settleEndTime"])
        end
        if activity["selfRewardStatus"] then
            self.selfRewardStatus = tonumber(activity["selfRewardStatus"])
        end
        if activity["restPackageNum"] then
            self.restPackageNum = activity["restPackageNum"]
        end
        if activity["groupId"] then
            self.groupId = tonumber(activity["groupId"])
        end
        if activity["champion"] then
            self.champion = activity["champion"]
        end
        if activity["edenMatch"] then
            self.edenMatch = activity["edenMatch"]
        end
    end

    if self.type == ActivityEnum.ActivityType.GloryPreview then
        if activity["groupId"] then
            self.groupId = tonumber(activity["groupId"])
        end
        if activity["matchTime"] then
            self.matchTime = activity["matchTime"]
        end
        if activity["showMatchGroupTime"] then
            self.showMatchGroupTime = activity["showMatchGroupTime"]
        end
        if activity["nextSeasonStartTime"]~=nil then
            self.WorldSeasonStartTime = activity["nextSeasonStartTime"]
        end
    end
    if self.type == ActivityEnum.ActivityType.CrossCityWar then
        if activity["showTime"] then
            self.showEdenCrossWarTime = activity["showTime"]
        end
        
    end
    if self.type == ActivityEnum.ActivityType.ActDragon then
        if activity["stopSignUpTime"] then
            self.stopSignUpTime = activity["stopSignUpTime"]
        end
        if activity["battleOpenTime"] then
            self.battleOpenTime = activity["battleOpenTime"]
        end
    end

    if self.type == ActivityEnum.ActivityType.CrossDesert then
        if activity["servers"] then
            self.servers = activity["servers"]
        end
    end
end

local function GetOrder(self)
    if self.activity_daily ~= 4 then
        return self.order
    else
        local retOrder = self.order
        local durationDay = DataCenter.SeasonDataManager:GetSeasonDurationDay() + 1
        for i, v in ipairs(self.season_order) do
            if v.dayFrom <= durationDay and durationDay <= v.dayTo then
                retOrder = v.order
                break
            end
        end
        return retOrder
    end
end

local function CheckIfIsToEnd(self)
    if self.countdown_remind and self.countdown_remind > 0 then
        local remindStartTime = self.endTime - self.countdown_remind * OneDayTime * 1000
        local curTime = UITimeManager:GetInstance():GetServerTime()
        return curTime > remindStartTime
    else
        return false
    end
end

local function HasGloryAct(self)
    return self.groupId ~= nil and self.groupId ~= 0
end

ActivityInfoData.__init = __init
ActivityInfoData.__delete = __delete
ActivityInfoData.ParseActivityData = ParseActivityData
ActivityInfoData.GetRankRewardList = GetRankRewardList
ActivityInfoData.GetPersonRankRewardList =GetPersonRankRewardList
ActivityInfoData.GetOrder = GetOrder
ActivityInfoData.CheckIfIsToEnd = CheckIfIsToEnd
ActivityInfoData.HasGloryAct = HasGloryAct

return ActivityInfoData
