---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 
---
local ActBattlePassData = BaseClass("ActBattlePassData")
local Localization = CS.GameEntry.Localization
local ActivityEventInfo = require "DataCenter.ActivityListData.ActBattlePassInfo"
local function __init(self)
    self.list = {}
end

local function __delete(self)
    self.list = nil
end

local function SetActivityId(self,id)
    self.list[tonumber(id)] = {}
end

local function ParseEventData(self,message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        local info = ActivityEventInfo.New()
        if message["battlePass"] then
            local battlePass = message["battlePass"]
            info:ParseBattlePass(battlePass)
        end
        if message["stateInfo"] then
            local stateInfo = message["stateInfo"]
            info:ParseStateInfo(stateInfo)
        end
        if message["taskArr"] then
            local taskArr = message["taskArr"]
            info:ParseTaskArr(taskArr)
        end
        info:ParseOther(message)
        self.list[message["activityId"]] = info
    end
    EventManager:GetInstance():Broadcast(EventId.ActBattlePass)
end

local function GetInfoByActId(self,activityId)
    if self.list[activityId] then
        return self.list[activityId]
    end
    return nil
end

--任务领奖返回
local function GetTaskRewardHandle(self,message)
    local reward = message["reward"]
    if reward ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:ParseBattlePass(message["battlePass"])
        data:RefreshTaskState(message)
    end
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassTask)
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRed)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--阶段奖励领奖返回
local function GetStageRewardHandle(self,message)
    local reward = message["reward"]
    if reward ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(message)
    end
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:RefreshStageState(message)
    end
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassStage)
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRed)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--领取额外奖励
local function ReceiveBattlePassExtraRewardHandle(self,message)
    local reward = message["reward"]
    if reward ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(message)
    end
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:ParseBattlePass(message["battlePass"])
    end
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRefresh)
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRed)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--一键领奖（领取所以的等级奖励和额外奖励）
local function ReceiveBattlePassAllRewardHandle(self,message)
    local reward = message["reward"]
    if reward ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(message)
    end
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:ParseBattlePass(message["battlePass"])
        data:ParseStateInfo(message["stateInfo"])
    end
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRefresh)
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRed)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--钻石购买升级
local function BuyBattlePassLevelHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:ParseBattlePass(message["battlePass"])
        UIUtil.ShowTips(Localization:GetString("320449", data.battlePass.level))
    end
    if message["gold"] ~= nil then
        LuaEntry.Player.gold = message["gold"]
        EventManager:GetInstance():Broadcast(EventId.UpdateGold)
    end
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRefresh)
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRed)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--推送更新  购买了战令也是此消息更新
local function PushBattlePassUpdateHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:ParseBattlePass(message["battlePass"])
        for i = 1 ,2 do
            --任务排序更新
            data:TaskSortHandle(i)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRefresh)
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRed)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--推送更新battlepass任务进度和状态
local function PushBattlePassTaskUpdateHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:RefreshTaskState(nil,message["taskArr"])
    end
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassTask)
    EventManager:GetInstance():Broadcast(EventId.ActBattlePassRed)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--推送所有battlepass任务
local function PushAllBattlePassTaskHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:ParseTaskArr(message["taskArr"])
        data:ParseOther(message)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
end

local function GetActRed(self,actId)
    local data = self:GetInfoByActId(actId)
    if data and next(data) then
       return data:GetRedNum()
    end
    return 0
end

local function CheckCurGetReward(self,actId)
    local data = self:GetInfoByActId(actId)
    if data and next(data) then
        return data:CheckCurGetReward()
    end
end

local function GetExtraRedNum(self,actId)
    local data = self:GetInfoByActId(actId)
    if data and next(data) then
        return data:GetExtraRedNum()
    end
    return 0
end

ActBattlePassData.__init = __init
ActBattlePassData.__delete = __delete
ActBattlePassData.SetActivityId =SetActivityId
ActBattlePassData.ParseEventData =ParseEventData
ActBattlePassData.GetInfoByActId =GetInfoByActId
ActBattlePassData.GetTaskRewardHandle = GetTaskRewardHandle
ActBattlePassData.GetStageRewardHandle = GetStageRewardHandle
ActBattlePassData.ReceiveBattlePassExtraRewardHandle = ReceiveBattlePassExtraRewardHandle
ActBattlePassData.ReceiveBattlePassAllRewardHandle = ReceiveBattlePassAllRewardHandle
ActBattlePassData.BuyBattlePassLevelHandle = BuyBattlePassLevelHandle
ActBattlePassData.PushBattlePassUpdateHandle = PushBattlePassUpdateHandle
ActBattlePassData.PushBattlePassTaskUpdateHandle = PushBattlePassTaskUpdateHandle
ActBattlePassData.PushAllBattlePassTaskHandle = PushAllBattlePassTaskHandle
ActBattlePassData.GetActRed = GetActRed
ActBattlePassData.CheckCurGetReward = CheckCurGetReward
ActBattlePassData.CheckLvGetReward = CheckLvGetReward
ActBattlePassData.GetExtraRedNum = GetExtraRedNum
return ActBattlePassData