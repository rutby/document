---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local ActSevenDayInfo = BaseClass("ActSevenDayInfo")

local function __init(self)
    self.dayActs = {}
    self.scoreReward = {}
    self.scoreMax = 0   --最大积分
    self.activityId = 0 --活动id  
    self.score = 0      --当前积分
    self.taskRed = {} --任务红点
    self.days = 0   --当前第几天
    self.endTime = 0
    self.taskRedNum = 0
    self.lastVisitDayTab = {}
    
    self.curMaxScoreReward = 0 --当前领取的最大阶段
end

local function __delete(self)
    self.dayActs = nil
    self.scoreReward = nil
    self.scoreMax = nil
    self.activityId = nil
    self.score = nil
    self.taskRed = nil
    self.days = nil
    self.endTime = nil
    self.taskRedNum = nil
    self.lastVisitDayTab = nil
    
    self.curMaxScoreReward = nil
end

local function ParseDayActs(self, message)
    if message==nil then
        return
    end
    local list = {}
    for i = 1 ,5 do
        list[i] = {}
    end
    --每3个为一组
    local count = 0
    for i = 1 ,#message do
        if i < 4 then
            count = 1
        elseif i < 7 then
            count = 2
        elseif i < 10 then
            count = 3
        elseif i < 13 then
            count = 4
        elseif i <= 15 then
            count = 5
        end
        table.insert(list[count],message[i])
    end
    for i=1,5 do
        self.dayActs[i] = list[i]
        for j=1,#list[i] do
            self.dayActs[i][j] = list[i][j]
            local id = self.dayActs[i][j].id
            local dayAct_table = LocalController:instance():getLine(TableName.ActSeven, id)
            if dayAct_table == nil then
                return
            end
            self.dayActs[i][j].type1_text = dayAct_table.type1_text
            self.dayActs[i][j].type2_text = dayAct_table.type2_text
        end
    end
end

local function ParseDayHeroTrialActs(self, message)
    if message == nil then
        return 
    end
    for i = 1, #message do
        table.insert( self.dayActs, message[i])
    end
end

--积分阶段奖励
local function ParseScoreReward(self, message)
    if message==nil then
        return
    end
    self.scoreReward = {}
    for i = 1 ,#message do
        local param = {}
        param.needScore = message[i]["needScore"]         --所需积分
        param.reward = DataCenter.RewardManager:ReturnRewardParamForView(message[i]["reward"]) --奖励
        param.rewardFlag = message[i]["rewardFlag"]         --阶段奖励是否领取标记  0宝箱未领取, 1宝箱已领取
        self:OnInitCurMaxScoreRewardIndex(param.rewardFlag,i)
        table.insert(self.scoreReward,param)
        self.scoreMax = message[i]["needScore"]
    end
end

--设置当前领取的最大阶段奖励索引
local function OnInitCurMaxScoreRewardIndex(self,rewardFlag,index)
    if rewardFlag == 1 and self.curMaxScoreReward < index then
        self.curMaxScoreReward = index
    end
end

--刷新当前领取的最大阶段奖励索引
local function RefreshCurMaxScoreRewardIndex(self)
    local isRefresh = true
    --local curMaxScoreReward = self:GetCurMaxRewardIndex()
    --if self.dayActs and self.dayActs[curMaxScoreReward] then
    --    local taskInfo = self.dayActs[curMaxScoreReward].tasks
    --    for i = 1, #taskInfo do
    --        local taskId = taskInfo[i].id
    --        local taskValue = DataCenter.TaskManager:FindTaskInfo(taskId)
    --        if taskValue ~= nil then
    --            if taskValue.state ~= TaskState.Received  then
    --                isRefresh = false
    --                break
    --            end
    --        end
    --    end
    --end
    --if self.scoreReward ~= nil and isRefresh then
    --    local reward = self.scoreReward[curMaxScoreReward]
    --    if reward ~= nil and reward.rewardFlag ~= 1 then
    --        isRefresh = false
    --    end
    --end
    if isRefresh and self.curMaxScoreReward then
        self.curMaxScoreReward = self.curMaxScoreReward + 1
    end
end

local function GetCurMaxRewardIndex(self)
    if self.curMaxScoreReward >= #self.scoreReward then
        return self.curMaxScoreReward
    end
    return (self.curMaxScoreReward + 1)
end

local function ParseOther(self,message)
    if message==nil then
        return
    end
    if message["activityId"] then
        self.activityId = message["activityId"]
    end
    if message["score"] then
        self.score = message["score"]
    end
end

--计算活动时间，当天是第几天
local function CalculateDate(self)
    local actListData = DataCenter.ActivityListDataManager:GetActivityDataById(tostring(self.activityId))
    local curTime = UITimeManager:GetInstance():GetServerTime()
    self.endTime = actListData.endTime
    if curTime >= actListData.startTime and curTime < actListData.endTime then
        local value = (curTime - actListData.startTime)/1000
        for i = 1 ,5 do
            if value <= i*OneDayTime then
                self.days = i
                break
            end
        end
        if self.days == 0 then
            self.days = 5
        end
    end
end

--检查红点
--1 积分达到且宝箱未领取 有红点
--2 任务完成可领取 有红点
-- .rewardFlag =0宝箱未领取, 1宝箱已领取
local function CheckRedDot(self)
    self.taskRedNum = 0
    --1 积分红点检查
    if self.scoreReward ~= nil then
        for i = 1, #self.scoreReward do
            local reward = self.scoreReward[i]
            --当宝箱未领取时检查积分是否满足
            if reward ~= nil and reward.rewardFlag == 0 then
                if self.score >= reward.needScore then
                    self.taskRedNum = self.taskRedNum + 1
                end
            end
        end
    end

    --任务完成状态检查
    if self.dayActs ~= nil then
        for i = 1, #self.dayActs do
            self.taskRed[i] = {}
            local dayInfos = self.dayActs[i]
            if i <= self.days then
                for j = 1, #dayInfos do
                    local tasks = dayInfos[j].tasks
                    self.taskRed[i][j] = 0
                    for k = 1, #tasks do
                        local taskId = tasks[k].id
                        local taskValue = DataCenter.TaskManager:FindTaskInfo(taskId)
                        if taskValue ~= nil then
                            if taskValue.state == TaskState.CanReceive then
                                --可领取
                                self.taskRedNum = self.taskRedNum + 1
                                self.taskRed[i][j] = 1
                            end
                        end
                    end
                end
            end
        end
    end
end

--获取英雄试炼红点 走的七日协议
local function CheckHeroTrialRedDot(self)
    self.taskRedNum = 0
    --任务完成状态检查
    local curMaxScoreReward = self:GetCurMaxRewardIndex()
    local completeNum = 0 --已领取任务数
    local taskNum = 0 --当前任务总数
    if self.dayActs ~= nil and self.dayActs[curMaxScoreReward] then
        local taskInfo = self.dayActs[curMaxScoreReward].tasks
        taskNum = #taskInfo
        for i = 1, #taskInfo do
            local taskId = taskInfo[i].id
            local taskValue = DataCenter.TaskManager:FindTaskInfo(taskId)
            if taskValue ~= nil then
                if taskValue.state == TaskState.Received then
                    completeNum = completeNum + 1
                end
                if taskValue.state == TaskState.CanReceive then
                    self.taskRedNum = self.taskRedNum + 1
                end
            end
        end
    end
    --阶段奖励
    if self.scoreReward ~= nil and completeNum == taskNum then
        if self.scoreReward[curMaxScoreReward] and  self.scoreReward[curMaxScoreReward].rewardFlag == 0 then
            self.taskRedNum = self.taskRedNum + 1
        end
    end
end

local function GetActRed(self)
    return self.taskRedNum
end

--按需求对显示任务排序
local function SortTask(self,tasks)
    local list = {}
    if tasks ~= nil then
        local canReceiveList = {}
        local unFinishList = {}
        local hasFinishList = {}
        for i = 1, #tasks do
            local taskId = tasks[i].id
            local taskValue = DataCenter.TaskManager:FindTaskInfo(taskId)
            if taskValue ~= nil then
                local state = taskValue.state
                if state == 2 then
                    --已领取
                    table.insert(hasFinishList , tasks[i])

                elseif state == 1 then
                    --可领取
                    table.insert(canReceiveList , tasks[i])
                else
                    --前往
                    table.insert(unFinishList , tasks[i])
                end
            end
        end
        list = canReceiveList
        for i = 1, #unFinishList do
            table.insert(list , unFinishList[i])
        end
        for i = 1, #hasFinishList do
            table.insert(list , hasFinishList[i])
        end
    end
    return list
end

local function UpdateScore(self,value)
    self.score = value
end

--设置积分宝箱领取状态
--index 宝箱序号 从1开始
--state 宝箱领取状态，0未领取，1已领取
local function SetScoreBoxState(self,index, state)
    if self.scoreReward ~= nil then
        self.scoreReward[index].rewardFlag = state
    end
end

local function SetLastVisitDayTab(self,value)
    self.lastVisitDayTab = value
end

local function GetLastVisitDayTab(self)
    return self.lastVisitDayTab
end

ActSevenDayInfo.__init = __init
ActSevenDayInfo.__delete = __delete
ActSevenDayInfo.ParseDayActs = ParseDayActs
ActSevenDayInfo.ParseScoreReward = ParseScoreReward
ActSevenDayInfo.ParseDayHeroTrialActs = ParseDayHeroTrialActs
ActSevenDayInfo.GetCurMaxRewardIndex = GetCurMaxRewardIndex
ActSevenDayInfo.ParseOther = ParseOther
ActSevenDayInfo.CalculateDate = CalculateDate
ActSevenDayInfo.CheckRedDot = CheckRedDot
ActSevenDayInfo.CheckHeroTrialRedDot = CheckHeroTrialRedDot
ActSevenDayInfo.UpdateScore = UpdateScore
ActSevenDayInfo.SetScoreBoxState = SetScoreBoxState
ActSevenDayInfo.GetActRed = GetActRed
ActSevenDayInfo.SortTask = SortTask
ActSevenDayInfo.SetLastVisitDayTab = SetLastVisitDayTab
ActSevenDayInfo.GetLastVisitDayTab = GetLastVisitDayTab
ActSevenDayInfo.OnInitCurMaxScoreRewardIndex = OnInitCurMaxScoreRewardIndex
ActSevenDayInfo.RefreshCurMaxScoreRewardIndex = RefreshCurMaxScoreRewardIndex
return ActSevenDayInfo