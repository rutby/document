---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local ActSevenDayData = BaseClass("ActSevenDayData")
local ActSevenDayInfo = require "DataCenter.ActivityListData.ActSevenDayInfo"

local function __init(self)
    self.list = {}
end

local function __delete(self)
    self.list = nil
end

local function SetActivityId(self,id)
    self.list[tonumber(id)] = {}
end

local function ParseActivityData(self, dayActsMessage)
    if dayActsMessage ==nil then
        return
    end
    if self.list[dayActsMessage["activityId"]] then
        local info = ActSevenDayInfo.New()
        if dayActsMessage["dayActs"] then
            local dayActs = dayActsMessage["dayActs"]
            if  dayActsMessage.sub_type and dayActsMessage.sub_type == 3 then
                info:ParseDayHeroTrialActs(dayActs)
            else
                info:ParseDayActs(dayActs)
            end
        end
        if dayActsMessage["scoreReward"] ~= nil then
            local scoreReward = dayActsMessage["scoreReward"]
            info:ParseScoreReward(scoreReward)
        end
        info:ParseOther(dayActsMessage)
        info:CalculateDate()
        info:CheckRedDot()
        self.list[dayActsMessage["activityId"]] = info
    end
    EventManager:GetInstance():Broadcast(EventId.ActSevenDay)
end

--更新积分
local function UpdateDayActScore(self,message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        self.list[message["activityId"]]:UpdateScore(message["score"])
        self.list[message["activityId"]]:CheckRedDot()
        EventManager:GetInstance():Broadcast(EventId.ActSevenDayScore)
    end
end

--领取阶段奖励
local function GetRewardState(self,message)
    if message ==nil then
        return
    end
    DataCenter.RewardManager:ShowCommonReward(message)
    if message["reward"] ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    if self.list[message["activityId"]] then
        self.list[message["activityId"]]:SetScoreBoxState(message.index, 1)
        self.list[message["activityId"]]:CheckRedDot()
        self.list[message["activityId"]]:RefreshCurMaxScoreRewardIndex()
        EventManager:GetInstance():Broadcast(EventId.ActSevenDayScore)
        EventManager:GetInstance():Broadcast(EventId.ActRewardState)
    end
end

local function GetInfoByActId(self,activityId)
    if self.list[activityId] then
        return self.list[activityId]
    end
    return nil
end

local function GetRealMaxStageRewardId(self,id)
    if self.list[id] then
        return self.list[id]:GetCurMaxRewardIndex()
    end
    return 1
end

--获取红点数量
local function GetActRed(self,id)
    if self.list[id] and next(self.list[id]) then
        self.list[id]:CheckRedDot()
        return self.list[id]:GetActRed()
    end
    return 0
end

--获取英雄试炼红点
local function GetActHeroTrialRed(self,id)
    if self.list[id] and next(self.list[id]) then
        self.list[id]:CheckHeroTrialRedDot()
        return self.list[id]:GetActRed()
    end
    return 0
end

local function IsHeroTrialTask(self,taskId)
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActSevenDay)
    local activityId = 0
    if dataList then
        for i = 1, #dataList do
            if dataList[i].sub_type == 3 then
                activityId = dataList[i].id
                break
            end
        end
        local infoData = self:GetInfoByActId(tonumber(activityId))
        if infoData then
            local curRewardIndex = self:GetRealMaxStageRewardId(tonumber(activityId))
            local tasks = infoData.dayActs[curRewardIndex].tasks
            for i = 1, #tasks do
                if taskId == tasks[i].id then
                    return true
                end
            end
        end
    end
    return false
end

local function SetLastVisitTab(self,actId,value)
    if self.list[actId] then
        if next(self.list[actId]) then
           self.list[actId]:SetLastVisitDayTab(value)
        end
    end
end

local function GetLastVisitTab(self,actId)
    if self.list[actId] then
        if next(self.list[actId]) then
            return self.list[actId]:GetLastVisitDayTab()
        end
    end
    return nil
end

ActSevenDayData.__init = __init
ActSevenDayData.__delete = __delete
ActSevenDayData.SetActivityId = SetActivityId
ActSevenDayData.ParseActivityData = ParseActivityData
ActSevenDayData.GetInfoByActId = GetInfoByActId
ActSevenDayData.GetRealMaxStageRewardId = GetRealMaxStageRewardId
ActSevenDayData.UpdateDayActScore = UpdateDayActScore
ActSevenDayData.GetRewardState = GetRewardState
ActSevenDayData.GetActRed = GetActRed
ActSevenDayData.GetActHeroTrialRed = GetActHeroTrialRed
ActSevenDayData.IsHeroTrialTask = IsHeroTrialTask
ActSevenDayData.SetLastVisitTab = SetLastVisitTab
ActSevenDayData.GetLastVisitTab = GetLastVisitTab
return ActSevenDayData
