---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local ActGiftBoxData = BaseClass("ActGiftBoxData")
local ActGiftBoxInfo = require "DataCenter.ActivityListData.ActGiftBoxInfo"
local ActGiftBoxOpenTemplate = require "DataCenter.ActivityListData.ActGiftBoxOpenTemplate"
local ActGiftBoxItemTemplate = require "DataCenter.ActivityListData.ActGiftBoxItemTemplate"
local function __init(self)
    self.list = {}
    self.boxOpenDict = {}
    self.boxItemDict = {}
    LocalController:instance():visitTable(TableName.ActivityBoxOpen, function(_, line)
        local template = ActGiftBoxOpenTemplate.New()
        template:InitData(line)
        table.insert(self.boxOpenDict,template)
    end)
    LocalController:instance():visitTable(TableName.ActivityBoxOpenPara, function(_, line)
        local template = ActGiftBoxItemTemplate.New()
        template:InitData(line)
        table.insert(self.boxItemDict,template)
    end)
    self.giftInfo = nil
    self.isNewGift = {}
    self.lotteryItems = {}
end

local function __delete(self)
    self.list = nil
    self.giftInfo = nil
    self.isNewGift = nil
    self.lotteryItems = nil
end

local function SetActivityId(self,id)
    self.list[tonumber(id)] = {}
end

local function ParseActivityData(self, message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        local info = ActGiftBoxInfo.New()
        info:ParseInfo(message)
        self.list[message["activityId"]] = info
    end
    EventManager:GetInstance():Broadcast(EventId.ActGiftBoxGetInfo)
end

--开启宝箱
local function OpenGiftBoxHandle(self,message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        DataCenter.RewardManager:ShowCommonReward(message)
        if message["reward"] ~= nil then
            for k,v in pairs(message["reward"]) do
                DataCenter.RewardManager:AddOneReward(v)
            end
        end
        if message["uuid"] then
            self.list[message["activityId"]]:RefreshBox(message["uuid"])
        end
    end
    EventManager:GetInstance():Broadcast(EventId.ActGiftBoxOpen)
end

--抽奖
local function GiftBoxLotteryHandle(self,message)
    if message ==nil then
        return
    end
    
    if self.list[message["activityId"]] then
        if message["fiveLottery"] then
            self.list[message["activityId"]]:RefreshCount(message["fiveLottery"])
        end
        if message["newGiftBoxs"] then
            self.isNewGift = {}
            for i = 1 ,table.count(message["newGiftBoxs"]) do
                table.insert(self.isNewGift,message["newGiftBoxs"][i].itemId)
            end
            self.list[message["activityId"]]:ParseGiftBox(message)
        end
    end
    if message["reward"] ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    self.lotteryItems = message
    if message["gold"] then
        LuaEntry.Player.gold = message["gold"]
        EventManager:GetInstance():Broadcast(EventId.UpdateGold)
    end
    EventManager:GetInstance():Broadcast(EventId.ActGiftBoxLottery)
end

local function GetLottery(self)
    return self.lotteryItems
end

local function ClearLottery(self)
    self.lotteryItems = {}
end

local function GetIsNewGift(self)
    return self.isNewGift
end

local function ClearNewGift(self)
    self.isNewGift = {}
end

local function BoxTimeEnd(self,activityId,uuid)
    if self.list[activityId] then
        self.list[activityId]:RefreshBox(uuid)
    end
end

--获取今日宝箱抽取次数
local function GiftBoxLotteryCount(self,message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        if message["lotteryCounts"] then
            self.list[message["activityId"]]:ParseLotteryCount(message)
        end
    end
    EventManager:GetInstance():Broadcast(EventId.ActGiftBoxLotteryCount)
end

local function GetInfoByActId(self,activityId)
    if self.list[activityId] then
        return self.list[activityId]
    end
    return nil
end

--获取红点数量
local function GetActRed(self,id)
    if self.list[id] and next(self.list[id]) then
        return self.list[id]:GetActRed()
    end
    return 0
end

--获取活动当前抽取总次数
local function GetActCurAllNum(self,id)
    if self.list and self.list[id] then
        if next(self.list[id]) then
            return self.list[id]:CompareAllNum()
        end
    end
end

local function SetParam(self,param)
    self.giftInfo = param
end

local function GetParam(self)
    return self.giftInfo
end

--{{{配置相关获取
--获取活动对应配置
local function GetActTemplateByActId(self,activityId)
    if self.boxOpenDict then
        for i = 1 ,table.count(self.boxOpenDict) do
            if self.boxOpenDict[i].activity == activityId then
                return self.boxOpenDict[i]
            end
        end
    end
    return nil
end

--获取活动每天最大抽取次数
local function GetActDrawNax(self,activityId)
    if self.boxOpenDict then
        for i = 1 ,table.count(self.boxOpenDict) do
            if self.boxOpenDict[i].activity == activityId then
                return self.boxOpenDict[i].draw_max_daily
            end
        end
    end
    return 0
end

--获取活动最大存放盒子数
local function GetActMaxBoxById(self,activityId)
    if self.boxOpenDict then
        for i = 1 ,table.count(self.boxOpenDict) do
            if self.boxOpenDict[i].activity == activityId then
                return self.boxOpenDict[i].box_num
            end
        end
    end
    return 0
end

--获取活动对应钥匙道具
local function GetActKeyById(self,activityId)
    if self.boxOpenDict then
        for i = 1 ,table.count(self.boxOpenDict) do
            if self.boxOpenDict[i].activity == activityId then
                return self.boxOpenDict[i].unlock_goods
            end
        end
    end
    return nil
end

--获取盒子对应配置
local function GetActBoxInfoByItemId(self,itemID)
    if self.boxItemDict then
        for i = 1 ,table.count(self.boxItemDict) do
            if self.boxItemDict[i].id == itemID then
                return self.boxItemDict[i]
            end
        end
    end
    return nil
end

--获取礼盒奖励
local function GetActReward(self,activityId)
    --配置表是反的
    --先找活动对应ID
    local id = nil
    local rewardList = {}
    rewardList.itemReward = {}
    rewardList.giftReward = {}
    if self.boxOpenDict then
        for i = 1 ,table.count(self.boxOpenDict) do
            if self.boxOpenDict[i].activity == activityId then
                id = self.boxOpenDict[i].id
            end
        end
    end
    --在拿id查找对应活动箱子
    if id then
        if self.boxItemDict then
            for i = 1 ,table.count(self.boxItemDict) do
                if self.boxItemDict[i].boxopen_id == id then
                    if self.boxItemDict[i].type == 0 then
                        local strReward = string.split(self.boxItemDict[i].goods,"|")
                        for k = 1 ,table.count(strReward) do
                            local str = string.split(strReward[k],";")
                            local param = {}
                            param.itemId = str[1]
                            param.count = str[2]
                            param.rewardType = RewardType.GOODS
                            table.insert(rewardList.itemReward,param)
                        end
                    elseif self.boxItemDict[i].type == 1 then
                        local param = {}
                        param.time = tonumber(self.boxItemDict[i].reward_time)
                        param.icon = self.boxItemDict[i].reward_icon
                        param.id = tonumber(self.boxItemDict[i].id)
                        local strReward = string.split(self.boxItemDict[i].goods,"|")
                        for k = 1 ,table.count(strReward) do
                            local str = string.split(strReward[k],";")
                            param.itemId = str[1]
                            param.count = str[2]
                            param.rewardType = RewardType.GOODS
                        end
                        table.insert(rewardList.giftReward,param)
                    end
                end
            end
        end
    end
    return rewardList
end
--}}}

--获取排行榜
local function GetBoxRankHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message then
            data:ParseRankInfo(message)
        end
        EventManager:GetInstance():Broadcast(EventId.ActGiftBoxRankUpdate)
    end
end

ActGiftBoxData.__init = __init
ActGiftBoxData.__delete = __delete
ActGiftBoxData.SetActivityId = SetActivityId
ActGiftBoxData.ParseActivityData = ParseActivityData
ActGiftBoxData.GetInfoByActId = GetInfoByActId
ActGiftBoxData.OpenGiftBoxHandle = OpenGiftBoxHandle
ActGiftBoxData.GetLottery = GetLottery
ActGiftBoxData.ClearLottery = ClearLottery
ActGiftBoxData.GetIsNewGift = GetIsNewGift
ActGiftBoxData.ClearNewGift = ClearNewGift
ActGiftBoxData.GiftBoxLotteryHandle = GiftBoxLotteryHandle
ActGiftBoxData.BoxTimeEnd = BoxTimeEnd
ActGiftBoxData.GiftBoxLotteryCount = GiftBoxLotteryCount
ActGiftBoxData.GetActRed = GetActRed

ActGiftBoxData.GetActCurAllNum = GetActCurAllNum
ActGiftBoxData.SetParam = SetParam
ActGiftBoxData.GetParam = GetParam
ActGiftBoxData.GetActTemplateByActId = GetActTemplateByActId
ActGiftBoxData.GetActDrawNax = GetActDrawNax
ActGiftBoxData.GetActMaxBoxById = GetActMaxBoxById
ActGiftBoxData.GetActKeyById = GetActKeyById
ActGiftBoxData.GetActBoxInfoByItemId = GetActBoxInfoByItemId
ActGiftBoxData.GetActReward = GetActReward

ActGiftBoxData.GetBoxRankHandle = GetBoxRankHandle
return ActGiftBoxData
