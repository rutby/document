---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 
---
local CountryRatingData = BaseClass("CountryRatingData")
function CountryRatingData:__init()
    self.list = {}
end

function CountryRatingData:__delete()
    self.list = nil
end

function CountryRatingData:SetActivityId(id)
    self.list[tonumber(id)] = {}
end

function CountryRatingData:ParseData(message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        local info = {}
        if message["curScore"] then
           info.curScore = message["curScore"]
        end
        if message["stageArr"] then
            info.stageArr = {}
            local arr = message["stageArr"]
            for i = 1, #arr do
                info.stageArr[i] = {}
                info.stageArr[i].stage = arr[i].stage
                info.stageArr[i].needScore = arr[i].needScore
                info.stageArr[i].reward = DataCenter.RewardManager:ReturnRewardParamForView(arr[i].reward)
                info.stageArr[i].state = arr[i].state
            end
        end
        self.list[message["activityId"]] = info
    end
    EventManager:GetInstance():Broadcast(EventId.StoreEvaluateInfo)
end

function CountryRatingData:GetInfoByActId(activityId)
    if self.list[activityId] then
        return self.list[activityId]
    end
    return nil
end

function CountryRatingData:GetActRed(id)
    local red = 0
    local data = self:GetInfoByActId(id)
    if data and next(data) then
        local stageArr = data.stageArr
        if stageArr then
            for i = 1, #stageArr do
                if stageArr[i].state == 0 and data.curScore and data.curScore >= stageArr[i].needScore then
                    red = red + 1
                end
            end
        end
    end
    return red
end

function CountryRatingData:GetReward(message)
    for k,v in pairs(message["reward"]) do
        DataCenter.RewardManager:AddOneReward(v)
    end
    DataCenter.RewardManager:ShowCommonReward(message)
    if self.list[message["activityId"]] and self.list[message["activityId"]].stageArr then
        self.list[message["activityId"]].stageArr[message.stage].state = 1
    end
    EventManager:GetInstance():Broadcast(EventId.StoreEvaluateReward,message.stage)
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

return CountryRatingData