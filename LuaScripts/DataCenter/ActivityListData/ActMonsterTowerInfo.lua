---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local ActMonsterTowerInfo = BaseClass("ActMonsterTowerInfo")

local function __init(self)
    self.challengeInfo = {}
    self.challengeInfo.difficulty = 0       --当前选择的难度
    self.challengeInfo.curLevel = 0         --当前关卡等级
    self.challengeInfo.callHelpCount = 0    --已请求帮助次数
    
    self.challengeBoss = {}
    self.challengeBoss.uuid = 0           
    self.challengeBoss.pointId = 0          --boss坐标点
    self.challengeBoss.refreshTime = 0      --boss过期时间
    self.challengeBoss.callHelp = 0         --是否请求过帮助当前boss    1请求过
    
    self.finishDifficulty = 1   --历史通关过的最高难度    默认最低
    
    self.activityId = 0         --活动ID
    
    self.difficultyRewardArr = {} --各难度对应的最好的奖励
    
    self.memberList = {}  -- 盟友挑战信息
    self.challengeHelp = {} --盟友请求帮助信息
    
    self.rewardList = {}    --所有难度奖励
    
    self.taskArr = {}       --联盟任务
    
    self.curReward = {}     --当前挑战奖励
    
    self.maxLevel = 0   --最大等级 选完难度后才有该字段
end

local function __delete(self)

end

local function ParseChallengeInfo(self, message)
    if message==nil then
        return
    end
    if message["difficulty"]~=nil then
        self.challengeInfo.difficulty = message["difficulty"]
    end
    if message["curLevel"]~=nil then
        self.challengeInfo.curLevel = message["curLevel"]
    end
    if message["callHelpCount"] then
        self.challengeInfo.callHelpCount = message["callHelpCount"]
    end
end

--处理boss信息  当前已有召唤的boss才有该信息
local function ParseChallengeBoss(self, message)
    if message==nil then
        return
    end
    if message["pointId"]~=nil then
        self.challengeBoss.pointId = message["pointId"]
    end
    if message["refreshTime"] then
        self.challengeBoss.refreshTime = message["refreshTime"]
    end
    if message["callHelp"] then
        self.challengeBoss.callHelp = message["callHelp"]
    end
    if message["uuid"]~=nil then
        self.challengeBoss.uuid = message["uuid"]
    end
end

--各难度对应的最好的奖励
local function ParseDiffRewardArr(self,message)
    if message==nil then
        return
    end
    for i = 1 ,#message do
        self.difficultyRewardArr[i] = {}
        self.difficultyRewardArr[i].difficulty = message[i].difficulty
        self.difficultyRewardArr[i].reward =  DataCenter.RewardManager:ReturnRewardParamForView(message[i]["reward"])
    end
end

--当前难度奖励
local function ParseCurReward(self,message)
    if message==nil then
        return
    end
    self.curReward = DataCenter.RewardManager:ReturnRewardParamForView(message)
end

local function ParseOther(self,message)
    if message["finishDifficulty"] then
        self.finishDifficulty = message["finishDifficulty"]
        self.finishDifficulty = self.finishDifficulty + 1
    end
    if message["activityId"] then
        self.activityId = message["activityId"]
    end
    if message["maxLevel"] then
        self.maxLevel = message["maxLevel"]
    end
end

local function GetDiffRewardByIndex(self,index)
    return self.difficultyRewardArr[index]
end

--盟友排行信息
local function ParseMemberInfo(self,message)
    if message["memberArr"] then
        self.memberList = {}
        self.challengeHelp = {}
        local memberArr = message["memberArr"]
        local list = {}
        list[1] = {}
        list[2] = {}
        for i = 1 ,#memberArr do
            local param = {}
            param.uid = memberArr[i]["uid"]
            param.name = memberArr[i]["name"]
            param.pic = memberArr[i]["pic"]
            param.picVer = memberArr[i]["picVer"]
            param.monthCardEndTime = memberArr[i]["monthCardEndTime"]
            param.headSkinId = memberArr[i]["headSkinId"]
            param.headSkinET = memberArr[i]["headSkinET"]
            param.difficulty = memberArr[i]["difficulty"]
            param.curLevel = memberArr[i]["curLevel"]
            if memberArr[i]["challengeBoss"] and memberArr[i]["challengeBoss"]["callHelp"] == 1 then
                param.challengeBoss = memberArr[i]["challengeBoss"]     --盟友请求了帮助有该字段 pointId  refreshTime
                self.challengeHelp[param.uid] = param.challengeBoss
                table.insert(list[1],param)
            else
                table.insert(list[2],param)
            end
        end
        for i = 1 ,2 do
            table.sort(list[i],function(a,b)
                if a.difficulty == b.difficulty then
                    if a.curLevel > b.curLevel then
                        return true
                    end
                else
                    if a.difficulty > b.difficulty then
                        return true
                    end
                end
                return false
            end)
        end
        self.memberList = table.mergeArray(list[1], list[2])
    end
end

local function GetMember(self)
    return self.memberList
end

--刷新当前难度所有奖励
local function RefreshReward(self,message)
    if message then
        self.rewardList = {}
        for i = 1 ,#message do
            local param = {}
            if message[i].startLevel == message[i].endLevel then
                param.title = message[i].startLevel
            else
                param.title = message[i].startLevel.."-"..message[i].endLevel
            end
            param.reward =  DataCenter.RewardManager:ReturnRewardParamForView(message[i]["reward"])
            table.insert(self.rewardList,param)
        end
    end
end

local function GetReward(self)
    return self.rewardList
end

--任务获取
local function RefreshTask(self,message)
    self.taskArr = {}
    if message then
        for i = 1 ,#message do
            local param = {}
            param.id = message[i].id
            param.num = message[i].num
            param.state = message[i].state
            param.reward = DataCenter.RewardManager:ReturnRewardParamForView(message[i]["reward"])
            table.sort(param.reward,function(a,b)
                if a.rewardType < b.rewardType then
                    return true
                end
                return false
            end)
            table.insert(self.taskArr,param)
        end
    end
end

--更新任务状态 
local function UpdateTask(self,message)
    for i = 1 ,#self.taskArr do
        if self.taskArr[i].id == message["id"] then
            self.taskArr[i].state = message["state"]
        end
    end
end

local function GetTask(self)
    return self.taskArr
end

--刷新盟友
local function RefreshHelp(self,message)
    if self.challengeHelp then
        self.challengeHelp[message["uid"]] = message["challengeBoss"]
    end
end

local function GetHelpRedDot(self)
	--local data = DataCenter.ActMonsterTowerData:GetInfoByActId(self.activityId)
    --local isShow = DataCenter.ActMonsterTowerData:GetIsShowHelpRedDot()
	--if data.challengeInfo and data.challengeInfo.callHelpCount and isShow then
	--	return data.challengeInfo.callHelpCount > 0
	--end
	return false
end

local function GetActRed(self)
    local count = 0
    local helpList = DataCenter.ActMonsterTowerData:GetHelpLisByActId(self.activityId)
    if helpList then
        count = count + 1
    end
    local btnRed = DataCenter.ActMonsterTowerData:GetBtnRedByActId(self.activityId)
    if btnRed then
        count = count + 1
    end
	local helpRedDot = self:GetHelpRedDot()
	if helpRedDot and not helpList then
		count = count + 1
	end
    return count
end

ActMonsterTowerInfo.__init = __init
ActMonsterTowerInfo.__delete = __delete
ActMonsterTowerInfo.ParseChallengeInfo = ParseChallengeInfo
ActMonsterTowerInfo.ParseChallengeBoss = ParseChallengeBoss
ActMonsterTowerInfo.ParseDiffRewardArr = ParseDiffRewardArr
ActMonsterTowerInfo.ParseCurReward = ParseCurReward
ActMonsterTowerInfo.ParseOther = ParseOther
ActMonsterTowerInfo.ParseMemberInfo = ParseMemberInfo
ActMonsterTowerInfo.GetDiffRewardByIndex = GetDiffRewardByIndex
ActMonsterTowerInfo.RefreshHelp = RefreshHelp
ActMonsterTowerInfo.GetMember = GetMember
ActMonsterTowerInfo.RefreshReward = RefreshReward
ActMonsterTowerInfo.GetReward = GetReward
ActMonsterTowerInfo.RefreshTask = RefreshTask
ActMonsterTowerInfo.GetTask = GetTask
ActMonsterTowerInfo.UpdateTask = UpdateTask
ActMonsterTowerInfo.GetActRed = GetActRed
ActMonsterTowerInfo.GetHelpRedDot = GetHelpRedDot
return ActMonsterTowerInfo