---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guqu.
--- DateTime: 2020/10/19 17:55
---
local ActivityListDataManager = BaseClass("ActivityListDataManager");
local Localization = CS.GameEntry.Localization
local AllianceCompeteInfo = require "DataCenter.ActivityListData.ActAllianceBattleInfo"
local ActLeadingQuestData = require "DataCenter.ActivityListData.ActLeadingQuestData"
local ActBarterShopData = require "DataCenter.ActivityListData.ActBarterShopData"
local ActivityRewardControlInfo = require "DataCenter.ActivityListData.ActivityRewardControlInfo"

local function __init(self)
    self.activityList = {}
    self.nowActivityList ={}
    self.laterActivityList ={}
    self.overActivityList ={}
    self.sevenDayList = {}
    self.lastVisitActivityId = nil -- 上一次打开的界面的活动id
    self.lastVisitActDic = {}
    self.sevenDayLastVisitDayTab = nil
    self.timer = {}
    self.timer_action = function(temp)
        self:RefreshArmsTime(temp)
    end
    self.actTimer = {}
    self.actTimer_action = function(temp)
        self:RefreshActTime(temp)
    end
    self.firstMinuteTips = {}
    self.tenMinuteTips = {}
    self.fifteenMinuteTips = {}
    self:StartPassDayTimer()
    self.actScoreList = {}
    self.actDelayTimer = nil
    self.rewardControlInfoDict = {} -- Dict<itemId .. "_" .. group, ActivityRewardControlInfo>
end

local function __delete(self)
    if self.passDayTimer then
        self.passDayTimer:Stop()
        self.passDayTimer = nil
    end
    self.activityList = nil
    self.nowActivityList =nil
    self.laterActivityList =nil
    self.overActivityList =nil
    self.sevenDayList = nil
    self.lastVisitActivityId = nil
    self.lastVisitActDic = nil
    self.sevenDayLastVisitDayTab = nil
    self:DeleteArmsTimer()
    self:DeleteActTimer()
    self.firstMinuteTips = nil
    self.tenMinuteTips = nil
    self.fifteenMinuteTips = nil
    self.actScoreList = {}
    table.walk(self.countdown, function(k,v)
        if v ~= nil then
            v:Stop()
        end
    end)
    self:RemoveOneDelayTimer()
end

local function InitActivityListData(self, message)
    --todo：大本升级后检测是否需要重新拉取活动
    self.activityList = {}
    if message["activity"] ~= nil then
        Logger.Log(" activityList count: ", table.length(message["activity"]))
        table.walk(message["activity"],function(k,v)
            self:AddOneActivity(k, v)
        end)
    end
    if message["dayAct"] ~= nil then
        local data = ActivitySevenDayInfo.New()
        data:ParseActivityData(message["dayAct"])
        self.sevenDayList = data
    end
    if message["eliteRedPoint"] ~= nil then
        DataCenter.ActChampionBattleManager:RefreshRedPoint(message["eliteRedPoint"])
    end
    if message["shownEliteAct"] ~= nil then
        DataCenter.ActChampionBattleManager:SetEntranceOpenState(message["shownEliteAct"])
    end
    if message["rewardControls"] ~= nil then
        for _, serverData in pairs(message["rewardControls"]) do
            self:UpdateRewardControlInfo(serverData)
        end
        EventManager:GetInstance():Broadcast(EventId.UpdateRewardControlInfo)
    end
    
    --DataCenter.ActivityController:SendScoreActivityData()
end

local function UpdateRewardControlInfo(self, serverData)
    local key = serverData.itemId -- 拼的
    local info = self.rewardControlInfoDict[key] or ActivityRewardControlInfo.New()
    info:ParseServerData(serverData)
    self.rewardControlInfoDict[key] = info
end

local function GetRewardControlInfo(self, key)
    return self.rewardControlInfoDict[key]
end

--服务器下发的数据里，只有这里的活动id是string类型
local function AddOneActivity(self, k, v)
    local data = ActivityInfoData.New()
    data:ParseActivityData(v)
    if data.id ~=nil then
        if data.type == EnumActivity.AllianceCompete.Type then
            local tempData = AllianceCompeteInfo.New()
            tempData:parseServerData(v)
            --self.activityList[EnumActivity.AllianceCompete.ActId] = tempData
            self.activityList[tempData.id] = tempData
            SFSNetwork.SendMessage(MsgDefines.ActivityEventInfoGet,tostring(data.activityId))
        elseif data.type == ActivityEnum.ActivityType.Arms then            --个人军备活动
            DataCenter.ActPersonalArmsInfo:SetActivityId(data.activityId)
            self.activityList[data.id] = data
            self:ActivityByArmsTime(data)
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.ActivityEventInfoGet,tostring(data.activityId))
            end
        elseif data.type == EnumActivity.AlContribute.Type then
            local tempData = AllianceCompeteInfo.New()
            tempData:parseServerData(v)
            self.activityList[tempData.id] = tempData
            DataCenter.AlContributeManager:UpdateActivityInfo(tempData)
            if self:CheckIsSend(tempData) then
                SFSNetwork.SendMessage(MsgDefines.ActivityEventInfoGet,tostring(tempData.activityId))
            end
        elseif data.type == ActivityEnum.ActivityType.Puzzle then            --拼图活动
            self.activityList[data.id] = data
            --SFSNetwork.SendMessage(MsgDefines.GetPuzzleActivityInfo, tostring(data.activityId))
            if self:CheckIsSend(data) then
                DataCenter.ActivityPuzzleDataManager:SendMessageGetInfo(tostring(data.id))
            end
        elseif data.type == ActivityEnum.ActivityType.EdenWar then
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.WorldBoss then
            self.activityList[data.id] = data
        elseif data.type == EnumActivity.LeadingQuest.Type then
            local tempInfo = ActLeadingQuestData.New()
            tempInfo:ParseData(v)
            self.activityList[data.id] = tempInfo
        elseif data.type == EnumActivity.MineCave.Type then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetMineCaveInfo)
            end
        elseif data.type == EnumActivity.Throne.Type then
            self.activityList[data.id] = data
            self:ActivityByIdTime(data)
        elseif data.type == EnumActivity.BarterShop.Type then
            local tempInfo = ActBarterShopData.New()
            tempInfo:ParseData(v)
            self.activityList[data.id] = tempInfo
        elseif data.type == EnumActivity.BarterShopNotice.Type then
            local tempInfo = ActBarterShopData.New()
            tempInfo:ParseData(v)
            self.activityList[data.id] = tempInfo
        elseif data.type == EnumActivity.Arena.Type then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.ArenaManager:InitRed()
            end
        elseif data.type == EnumActivity.DigActivity.Type then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.DigActivityManager:RequestDigInfo(tonumber(data.id))
            end
        elseif data.type == EnumActivity.SeasonPass.Type then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.SeasonPassManager:GetSeasonPassInfoReq(tonumber(data.id))
            end
        elseif data.type == EnumActivity.ActivitySummary.Type or data.type == EnumActivity.ThemeChristmas.Type then
            self.activityList[data.id] = data
            DataCenter.ThemeActivityManager:UpdateOneThemeActivity(data)
        elseif data.type == EnumActivity.ChristmasCelebrate.Type then
            self.activityList[data.id] = data
        elseif data.type == EnumActivity.JigsawPuzzle.Type then
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.LuckyRoll then    --幸运转盘
            DataCenter.ActLuckyRollInfo:SetActivityId(data.id)
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetLuckyRollInfo,toInt(data.id))
            end
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.BattlePass then    --战令
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetBattlePassInfo,toInt(data.id))
            end
            DataCenter.ActBattlePassData:SetActivityId(data.id)
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.GolloesCards then --咕噜卡牌
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetGolloesCardInfo,toInt(data.id))
            end
            DataCenter.ActGolloesCardData:SetActivityId(data.id)
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.MonsterTower then --打怪爬塔
            DataCenter.ActMonsterTowerData:SetActivityId(data.id)
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetChallengeActInfo,toInt(data.id))
            end
        elseif data.type == ActivityEnum.ActivityType.ActSevenDay then --七日
            DataCenter.ActSevenDayData:SetActivityId(data.id)
            self.activityList[data.id] = data
            SFSNetwork.SendMessage(MsgDefines.GetSevenDayActInfo,toInt(data.id))
        elseif data.type == EnumActivity.HeroGrowth.Type then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetSevenDayActInfo,toInt(data.id))
            end
        elseif data.type == EnumActivity.PaidLottery.Type then
            self.activityList[data.id] = data
            DataCenter.PaidLotteryManager:UpdateActivityInfo(data)
            if self:CheckIsSend(data) then
                DataCenter.PaidLotteryManager:GetPaidLotteryInfoReq()
            end
        elseif data.type == EnumActivity.RobotWars.Type then
            self.activityList[data.id] = data
            DataCenter.RobotWarsManager:UpdateRobotWarsActivityInfo(data)
        elseif data.type == EnumActivity.ChainPay.Type then
            self.activityList[data.id] = data
            DataCenter.ChainPayManager:AddDataByAct(data)
        elseif data.type == ActivityEnum.ActivityType.LuckyShop then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.LuckyShopManager:GetShopInfoData(toInt(data.id))
            end
            --DataCenter.ChainPayManager:AddDataByAct(data)
        elseif data.type == ActivityEnum.ActivityType.ActSevenLogin then --七日登陆
            --if self:CheckIsSend(data) then
             DataCenter.ActSevenLoginData:SetActivityId(data.id)
             self.activityList[data.id] = data
             SFSNetwork.SendMessage(MsgDefines.GetSevenDayLoginInfo,toInt(data.id))
            --end
        elseif data.type == ActivityEnum.ActivityType.GiftBox then --礼盒抽奖
            DataCenter.ActGiftBoxData:SetActivityId(data.id)
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetActivityGiftBoxInfo,toInt(data.id))
            end
        elseif data.type == ActivityEnum.ActivityType.SeasonWeekCard then --赛季周卡
            DataCenter.ActSeasonWeekCardData:SetActivityId(data.id)
            self.activityList[data.id] = data
            SFSNetwork.SendMessage(MsgDefines.GetSeasonWeekCardInfo,toInt(data.id))
        elseif data.type == ActivityEnum.ActivityType.SeasonRank then --赛季打地块排行榜
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.AllianceSeasonForce then --赛季联盟积分排行榜
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.DecorationGiftPackage then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.DecorationGiftPackageManager:GetActivityData(toInt(data.id))
            end
        elseif data.type == ActivityEnum.ActivityType.HeroEvolve then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.HeroEvolveActivityManager:GetHeroEvolveActivityInfo(toInt(data.id))
            end
        elseif data.type == ActivityEnum.ActivityType.WorldTrend then   --天下大势
            DataCenter.WorldTrendManager:RequestWorldTrendServerData()
        elseif data.type == ActivityEnum.ActivityType.BlackKnight then   --黑骑士活动
            self.activityList[data.id] = data
            DataCenter.ActBlackKnightManager:InitData()
        elseif data.type == ActivityEnum.ActivityType.GloryPreview then   --S3星球大战预告
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.DonateSoldierActivity then   -- 捐兵活动
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.ChaseDeer then   -- 群雄逐鹿
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.PersonSeasonRank then   -- 个人势力排行榜
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.PresidentAuthority then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.PresidentMineRefreshManager:GetRefreshDesertActivityInfo(toInt(data.id))
            end
        elseif data.type == ActivityEnum.ActivityType.ALVSDonateSoldier then   -- 捐兵活动
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.ActNoOne then   -- 移民假活动
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.StaminaBall then   -- 体力球
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.StaminaBallManager:GetStaminaDataRequest()
            end
        elseif data.type == ActivityEnum.ActivityType.AllianceBoss then   -- 联盟boss活动new红点
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.AllianceActMine then  
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.EdenAllianceActMine then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetEdenAllianceDuelServer)
            end
        elseif data.type == ActivityEnum.ActivityType.EdenAllianceCrossActMine then
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetEdenMineMatchServer)
            end
        elseif data.type == ActivityEnum.ActivityType.ScratchOffGame then    --刮刮卡
            DataCenter.ScratchOffGameManager:SetActivityId(data.id)
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.Mining then    --矿产大亨
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.MiningManager:SetActivityId(data.id)
            end
        elseif data.type == ActivityEnum.ActivityType.SeasonShop then    --赛季商店
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.CommonShopManager:InitSeasonShopByActId(data.id)
            end
        elseif data.type == ActivityEnum.ActivityType.Mysterious then    --数字寻宝
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.MysteriousManager:SetActivityId(data.id)
            end
        elseif data.type == ActivityEnum.ActivityType.AllianceOccupy then   --联盟占领城市活动 
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.DoubleSeasonScore then   --双倍赛季积分活动 
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.ActDragon then   --巨龙活动 
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.ActDragonManager:SendGetInfo()
            end
        elseif data.type == ActivityEnum.ActivityType.Mastery then   --专精手册
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.GolloBox then   --咕噜专精
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.DragonNotice then  --巨龙预告
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.CrossDesert then  --跨服打地
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.ActMineCave then  --矿脉增殖
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.ColonizeWarRank then  --殖民战争排行榜
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.EquipIntensify then  --运兵车强化
            self.activityList[data.id] = data
            DataCenter.ActEquipIntensifyData:SetActivityId(data.id)
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetEquipActivityInfo,toInt(data.id))
            end
        elseif data.type == ActivityEnum.ActivityType.EquipGift then  --运兵车强化
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.CampScore then  --阵营分数活动
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.CrossWonder then -- 跨服王座
            self.activityList[data.id] = data
            --DataCenter.CrossWonderManager:SetActData(data)
        elseif data.type == ActivityEnum.ActivityType.EdenKill then -- 伊甸园杀敌
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.TurfWar then -- 七级城占领活动
            self.activityList[data.id] = data
        elseif data.type == ActivityEnum.ActivityType.CrossCityWar then -- 跨服战
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetEdenAllianceDuelServer)
            end
        elseif data.type == ActivityEnum.ActivityType.AllianceCityRecord then -- 联盟城排行榜
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.WorldAllianceCityRecordManager:CheckNeedShowRecordRed()
                SFSNetwork.SendMessage(MsgDefines.GetAllianceCityKillReward)
            end
        elseif data.type == ActivityEnum.ActivityType.ChangeNameAndPic then            --改名/换头像活动
            self.activityList[data.id] = data
            if self:CheckIsSend(data) then
                DataCenter.ChangeNameAndPicManager:SendGetUploadPicActivityInfo(tonumber(data.id))
            end
        elseif data.type == ActivityEnum.ActivityType.CountryRating then -- 国家评分
            self.activityList[data.id] = data
            DataCenter.CountryRatingData:SetActivityId(data.id)
            if self:CheckIsSend(data) then
                SFSNetwork.SendMessage(MsgDefines.GetStoreEvaluateActivityInfo, tonumber(data.id))
            end
        elseif data.type == EnumActivity.DispatchTask.Type then     -- 派遣
            -- 服务器会下发多个，客户端只留最后一个，跨天要刷新
            local dispatchTaskList = self:GetActivityDataByType(EnumActivity.DispatchTask.Type)
            for _, v in ipairs(dispatchTaskList) do
                self.activityList[v.id] = nil
            end
            self.activityList[data.id] = data
            DataCenter.ActDispatchTaskDataManager:GetAllSingleTasksFromServer()
            DataCenter.ActDispatchTaskDataManager:SendTaskLogRequest()
        end
    end
end

local function CheckIsSend(self,data)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local mainLv = DataCenter.BuildManager.MainLv
    
    local timeUnlock = data.startTime <= curTime and curTime <= data.endTime
    if data.endTime == 0 then
        if data.type == EnumActivity.MineCave.Type or data.type == EnumActivity.Arena.Type or data.type == EnumActivity.RobotWars.Type
            or data.type == EnumActivity.AlContribute.Type or data.type == ActivityEnum.ActivityType.ChangeNameAndPic then
            timeUnlock = true
        end
    end
    
    if timeUnlock and data.needMainCityLevel <= mainLv then
        return true
    end
    return false
end

local function SortActivityArr(self)
    self.nowActivityList ={}
    self.laterActivityList ={}
    self.overActivityList ={}
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local mainLv = DataCenter.BuildManager.MainLv or 0
    table.walk(self.activityList,function (k,v)
        if v.activity_daily ~= 1 and v.needMainCityLevel<= mainLv  then
            local endTime = v.endTime
            local extraEndTime = v.extraEndTime
            local startTime = v.startTime
            if v.rewardTime>0 then
                endTime = v.rewardTime
            end
            if v.readyTime>0 then
                startTime = v.readyTime
            end
            if v.sub_type == ActivityEnum.ActivitySubType.ActivitySubType_1 and (v.type == EnumActivity.LeadingQuest.Type or v.type == EnumActivity.BarterShop.Type) then
                if not string.IsNullOrEmpty(v.unlock_hero) then
                    local curSelectHero = DataCenter.HeroEvolveActivityManager:GetChooseHeroId()
                    if curSelectHero == toInt(v.unlock_hero) then
                        self.nowActivityList[v.id] = v
                    end
                else
                    local curStage, endTime = DataCenter.RobotWarsManager:GetCurStage()
                    if curStage == SeasonStage.toSettle or curStage == SeasonStage.ToFinish or curStage == SeasonStage.Finished then
                        self.nowActivityList[v.id] = v
                    end
                end
            elseif (v.type == EnumActivity.LeadingQuest.Type or v.type == EnumActivity.BarterShop.Type) and  not string.IsNullOrEmpty(v.unlock_hero) then
                local curSelectHero = DataCenter.HeroEvolveActivityManager:GetChooseHeroId()
                if curSelectHero == toInt(v.unlock_hero) then
                    self.nowActivityList[v.id] = v
                end
            elseif v.type == EnumActivity.MineCave.Type or v.type == EnumActivity.Arena.Type or v.type == EnumActivity.RobotWars.Type
                or v.type == EnumActivity.Throne.Type then
                self.nowActivityList[v.id] = v
            elseif v.type == ActivityEnum.ActivityType.GolloBox then
                if curTime >= startTime and curTime <= extraEndTime then
                    self.nowActivityList[v.id] = v
                end
            elseif v.type == ActivityEnum.ActivityType.GolloBox then
                if curTime >= v.noticeTime and curTime <= v.endTime then
                    self.nowActivityList[v.id] = v
                end
            elseif v.type == ActivityEnum.ActivityType.CrossDesert then   --打地活动没结束前就显示，开启时间为预告时间
                if curTime <= endTime then
                    self.nowActivityList[v.id] = v
                end
            elseif v.type == ActivityEnum.ActivityType.AllianceSeasonForce then   --s5检查是否在跨服
                local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
                if seasonId == 5 then
                    local dataInfo = DataCenter.RobotWarsManager:GetActivityInfo()
                    if dataInfo.edenMatch and dataInfo.edenMatch.targetServer and dataInfo.edenMatch.targetServer ~= 0 and LuaEntry.Player:GetCurServerId() == dataInfo.edenMatch.targetServer  then
                        if curTime >= startTime and curTime <= endTime then
                            self.nowActivityList[v.id] = v
                        end
                    end
                else
                    if curTime >= startTime and curTime <= endTime then
                        self.nowActivityList[v.id] = v
                    end
                end
            elseif v.type == ActivityEnum.ActivityType.CampScore then   --s5检查是否在跨服
                local seasonId = DataCenter.SeasonDataManager:GetSeasonId()
                if seasonId == 5 then
                    local dataInfo = DataCenter.RobotWarsManager:GetActivityInfo()
                    if dataInfo.edenMatch and dataInfo.edenMatch.targetServer and dataInfo.edenMatch.targetServer ~= 0 and LuaEntry.Player:GetCurServerId() == dataInfo.edenMatch.targetServer  then
                        if curTime >= startTime and curTime <= endTime then
                            self.nowActivityList[v.id] = v
                        end
                    end
                end
            elseif v.type == ActivityEnum.ActivityType.CrossWonder then
                if curTime >= v.noticeTime and curTime <= v.endTime then
                    self.nowActivityList[v.id] = v
                end
            elseif startTime > curTime then
                self.laterActivityList[v.id] = v
            elseif endTime<curTime then
                self.overActivityList[v.id] = v
            else
                local canAdd = true
                if v.type == EnumActivity.AllianceCompete.Type then
                    canAdd = false--合到联盟对决界面了
                    --if v.finish or v:GetEventInfo() == nil then
                    --    canAdd = false
                    --end
                elseif v.type == EnumActivity.ActivitySummary.Type or v.type == EnumActivity.ThemeChristmas.Type then
                    canAdd = false
                elseif v.type == EnumActivity.BarterShop.Type or v.type == EnumActivity.BarterShopNotice.Type then
                    if v.allianceId and v.allianceId ~= LuaEntry.Player.allianceId then
                        canAdd = false
                    end
                elseif v.type == EnumActivity.ChainPay.Type then
                    canAdd = false
                elseif v.type == EnumActivity.LeadingQuest.Type then
                    local dataList = self:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
                    for _, data in ipairs(dataList) do
                        local subData = self:GetActivityDataById(data.para5)
                        if subData and tostring(subData.id) == tostring(v.id) then
                            canAdd = false
                            break
                        end
                    end
                end
                if canAdd then
                    self.nowActivityList[v.id] = v
                end
            end
        end
        
        if v.type == ActivityEnum.ActivityType.EdenWar then
            if v.needMainCityLevel<= mainLv  then
                self.nowActivityList[v.id] = v
            end
        end
    end)
end

local function GetNowActivityDataByType(self,type)
    local tab = {}
    self:GetNowActivityList()
    for i, v in pairs(self.nowActivityList) do
        if v.type == type then
            if type == ActivityEnum.ActivityType.Arms then
                if v.personalEventType and v.personalEventType ~= PersonalEventType.Permanent then
                    table.insert(tab,v)
                end
            else
                table.insert(tab,v)
            end
        end
    end
    return tab
end

local function GetWelfareActivity(self)
    local tab = {}
    local unlockBtnLockType = DataCenter.UnlockBtnManager:GetShowBtnState(UnlockBtnType.Activity)
    if unlockBtnLockType == UnlockBtnLockType.Show and DataCenter.ActivityListDataManager:GetActivityOpenLv() and DataCenter.BuildManager.MainLv >= DataCenter.ActivityListDataManager:GetActivityOpenLv() then
        self:GetNowActivityList()
        for i, v in pairs(self.nowActivityList) do
            if v.activity_daily == ActivityShowLocation.welfareCenter then
                local temp = v
				temp.id = v.id
                temp.sourceType = ActivitySource.activity --  1是活动 2是商城
                table.insert(tab,temp)
            end
        end
    end
    local unlockShopBtnLockType = DataCenter.UnlockBtnManager:GetShowBtnState(UnlockBtnType.DiamondShop)
    if unlockShopBtnLockType == UnlockBtnLockType.Show then
        local shopData = WelfareController.getShowTagInfos()
        for i = 1, #shopData do
            if shopData[i]:getDailyType() == ActivityShowLocation.welfareCenter then
                local temp = shopData[i]
				temp.id = shopData[i]:getID()
                temp.sourceType = ActivitySource.shop
                table.insert(tab,shopData[i])
            end
        end
    end
    table.sort(tab, function (a, b)
        local aOrder = a:GetOrder()
        local bOrder = b:GetOrder()
        if aOrder ~= bOrder then
            return aOrder < bOrder
        end
        return tonumber(a.id) < tonumber(b.id)
    end)
    return tab
end

local function GetNowActivityList(self)
    local temp = {}
    --找到所有的个人军备活动
    for i, v in pairs(self.activityList) do
        if v.type == ActivityEnum.ActivityType.Arms then
            table.insert(temp,v)
        end
    end
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local mainLv = DataCenter.BuildManager.MainLv or 0
    for i = 1, #temp do
        if self.nowActivityList[temp[i].id] == nil then
            if temp[i].startTime <= curTime then
                if mainLv >= temp[i].needMainCityLevel  then
                    self.nowActivityList[temp[i].id] = temp[i]
                end
            end
        end
    end
    return self.nowActivityList
end

local function GetLaterActivityList(self)
    return self.laterActivityList
end

local function GetOverActivityList(self)
    return self.overActivityList
end

local function GetActivityDataById(self,id)
    return self.activityList[id]
end

local function GetActivityDataByType(self,type)
    local tab = {}
    for i, v in pairs(self.activityList) do
        if v.type == type then
            table.insert(tab,v)
        end
    end
    return tab
end

local function GetActivityList(self)
    return self.activityList
end

local function GetSevenDayList(self)

    return self.sevenDayList
end

local function GetActivityOpenLv(self)
    --if next(self.sevenDayList) then
    --    return 1
    --end
    if next(self.activityList) then
        local openlv = 10000
        table.walk(self.activityList,function (k,v)
            -- 排除七日类型活动
            if v.type == ActivityEnum.ActivityType.ActSevenLogin or v.type == ActivityEnum.ActivityType.ActSevenDay then
                return
            end
            -- 只有activity_daily = 0 的才会在活动中心展示
            if v.needMainCityLevel < openlv and v.activity_daily == 0 then
                openlv = v.needMainCityLevel
            end
        end)
        return openlv
    end
    return false
end

--单条活动请求返回处理
--匹配后端代码需要，单个活动再次请求，获取ActivityEventType类活动数据
local function RetEventData(self,message)
    if message~=nil then
        local activityid = message["activityId"]
        local actInfo = self:GetEventTypeActivityById(activityid)
        if actInfo ~= nil then
            if message["type"] == ActivityEventType.PERSONAL then
                DataCenter.ActPersonalArmsInfo:ParseEventData(message)
				self:RefreshActivityTime(message)
                EventManager:GetInstance():Broadcast(EventId.RefreshDataPersonalArms)
                --self:ActivityByArmsTime(tonumber(activityid))
			elseif message["type"] == EnumActivity.AllianceCompete.EventType then
                local tempData = self:GetActivityDataById(EnumActivity.AllianceCompete.ActId)-- AllianceCompeteInfo.New()
                tempData:parseServerData(message)
                EventManager:GetInstance():Broadcast(EventId.RefreshDataAllianceArms)
			elseif message["type"] == EnumActivity.AlContribute.EventType then
                DataCenter.AlContributeManager:ParseEventData(message)
                EventManager:GetInstance():Broadcast(EventId.OnAlContributeEventInfoUpdate)
                --self.activityList[EnumActivity.AllianceCompete.ActId] = tempData            
            elseif message["type"] == ActivityEventType.ALLIANCE_ORDER then
                
            end
        end
    end
end

local function RefreshActivityTime(self,message)
    table.walk(self.activityList,function (k,v)
        if tonumber(v.activityId == tonumber(message["activityId"]))  then
            if message["eventList"]~=nil then
                table.walk(message["eventList"],function (k1,v1)
                        v.startTime = v1["st"]
                        v.endTime = v1["et"]
                        v.readyTime = v1["rt"]
                end)
            end
            self:ActivityByArmsTime(v)
        end
    end)
end

local function PushEventScore(self,message)
    if message["score"]~=nil then
        local score = message["score"]
        if message["type"]~=nil and message["actId"]~=nil then
            DataCenter.StrongestCommanderDataManager:PushEventScore(score,message["type"],message["actId"])
        end
    end
end

local function GetRedCount_ActivityDaily(self, activityDaily, exceptId)
    exceptId = tostring(exceptId)
    local count = 0
    local list = self:GetNowActivityList()
    for id, actInfo in pairs(list) do
        if actInfo.activity_daily == activityDaily and id ~= exceptId then
            count = count + self:GetActivityRedDotCount(id)
        end
    end
    return count
end

local function GetTotalRedDotCount(self)
    local count = 0
    local list = self:GetNowActivityList()
    for id, actInfo in pairs(list) do
        if actInfo.activity_daily == 0 then
            count = count + self:GetActivityRedDotCount(id)
        end
    end
    
    ---- 七日
    --local sevenDay = DataCenter.ActivityListDataManager:GetSevenDayList()
    --if next(sevenDay) then
    --    sevenDay:CheckRedDot()
    --end
    --count = count + self:GetDayActRedNum()
    
    return count
end

local function GetWelfareCenterRedCount(self)
    local count = 0
    count = self:GetRedCount_ActivityDaily(ActivityShowLocation.welfareCenter,0)
    
    local tagInfos = WelfareController.getShowTagInfos()
    self.redTagInfo = nil
    local redNum = 0
    for _, t in pairs(tagInfos) do
        if t:getDailyType() == ActivityShowLocation.welfareCenter then
            redNum = redNum + t:getRedDotNum()
        end
    end
    return count + redNum
end

local function GetActivityRedDotCount(self, id)
    local count = 0

    local data = self:GetActivityDataById(id)
    if data ~= nil then
        count = count + self:GetRewardNumByTypeAndId(data.type, data.id)
    end

    if self:IsActivityNew(id) then
        count = count + 1
    end

    return count
end

local function CheckIfAnyoneIsToEnd(self)
    local list = DataCenter.ActivityListDataManager:GetNowActivityList()
    for i, v in pairs(list) do
        if v.activity_daily == 0 and self:CheckIfIsToEnd(v.id) then
            return true
        end
    end
    return false
end

local function CheckIfHasNew(self)
    local list = DataCenter.ActivityListDataManager:GetNowActivityList()
    for i, v in pairs(list) do
        if v.activity_daily == 0 and self:IsActivityNew(v.id) then
            return true
        end
    end
    return false
end

-- 本轮活动是新的（显示 New）
local function IsActivityNew(self, id)
    local data = self:GetActivityDataById(id)
    if data == nil then
        return false
    end
    
    if data.type == ActivityEnum.ActivityType.Arms or
            data.type == ActivityEnum.ActivityType.BattlePass or data.type == ActivityEnum.ActivityType.GolloesCards
        or data.type == EnumActivity.BarterShop.Type or data.type == EnumActivity.JigsawPuzzle.Type
        or data.type == ActivityEnum.ActivityType.ActSevenDay or data.type == ActivityEnum.ActivityType.MonsterTower
        or data.type == EnumActivity.AlContribute.Type or data.type == ActivityEnum.ActivityType.GloryPreview
        or data.type == EnumActivity.Throne.Type or data.type == ActivityEnum.ActivityType.AllianceActMine 
            or data.type == ActivityEnum.ActivityType.EdenAllianceActMine or data.type == ActivityEnum.ActivityType.EdenAllianceCrossActMine or data.type == ActivityEnum.ActivityType.CrossCityWar or data.type == ActivityEnum.ActivityType.AllianceCityRecord
    then
        if data.type == ActivityEnum.ActivityType.Arms and data.personalEventType and data.personalEventType == PersonalEventType.Permanent then
            return false
        end
        local lastEndTime = self:GetActivityVisitedEndTime(id)
        return data.endTime > lastEndTime
    elseif data.type == EnumActivity.BarterShop.Type then
        local isNew = data:CheckIfIsNew()
        return isNew
    elseif data.type == ActivityEnum.ActivityType.LuckyShop then
        local isNew = DataCenter.LuckyShopManager:NeedShowNew()
        return isNew
    elseif data.type == EnumActivity.LeadingQuest.Type then
        if data.sub_type == ActivityEnum.ActivitySubType.DrakeBoss then
            local lastEndTime = self:GetActivityVisitedEndTime(id)
            return data.endTime > lastEndTime
        else
            local hasOpened = CS.GameEntry.Setting:GetBool("OpenedLeadingQuestView_" .. LuaEntry.Player.uid, false)
            return not hasOpened
        end
    elseif data.type == ActivityEnum.ActivityType.DecorationGiftPackage then
        local isNew = DataCenter.DecorationGiftPackageManager:NeedShowNew()
        return isNew
    elseif data.type == ActivityEnum.ActivityType.HeroEvolve then
        local isNew = DataCenter.HeroEvolveActivityManager:NeedShowNew()
        return isNew
    elseif data.type == ActivityEnum.ActivityType.Arms then
        --军备有准备阶段,正式开启后在显示New
        if data.personalEventType ~= PersonalEventType.Permanent then
            local lastEndTime = self:GetActivityVisitedEndTime(id)
            local curTime = UITimeManager:GetInstance():GetServerTime()
            if data.endTime > lastEndTime and curTime > data.startTime then
                return true
            end
        end
    elseif data.type == ActivityEnum.ActivityType.BlackKnight then
        local isNew = DataCenter.ActBlackKnightManager:CheckIfIsNew()
        return isNew
    elseif data.type == ActivityEnum.ActivityType.DonateSoldierActivity then
        --捐兵活动 new红点 判断
        local isNew = DataCenter.ActivityDonateSoldierManager:CheckIfIsNew()
        return isNew
    elseif data.type == ActivityEnum.ActivityType.PresidentAuthority then
        local isNew = DataCenter.PresidentMineRefreshManager:NeedShowNew()
        return isNew
    elseif data.type == ActivityEnum.ActivityType.ALVSDonateSoldier then
        --新捐兵红点 new红点判断
        local isNew = DataCenter.ActivityALVSDonateSoldierManager:CheckIfIsNew()
        return isNew
    elseif data.type == ActivityEnum.ActivityType.AllianceBoss then
        -- 联盟boss new红点 判断
        local isNew = DataCenter.AllianceBossManager:CheckIfIsNew()
        return isNew
    elseif data.type == ActivityEnum.ActivityType.Mysterious then
        local isNew = DataCenter.MysteriousManager:IsNew(id)
        return isNew
    elseif data.type == ActivityEnum.ActivityType.ChangeNameAndPic then
        local isNew = DataCenter.ChangeNameAndPicManager:CheckIfIsNew()
        return isNew
    end
    
    return false
end
--NeedShowNew
local function GetRewardNumByTypeAndId(self,type,id)
    local num =0
    if type == ActivityEnum.ActivityType.Arms then
        local list = self:GetNowActivityList()
        for i, v in pairs(list) do
            if i == id then
                local eventInfo = DataCenter.ActPersonalArmsInfo:GetEventInfo(v.activityId)
                if eventInfo ~= nil then
                    if v.personalEventType ~= PersonalEventType.Permanent then
                        for k = 1, 3 do
                            if eventInfo.curScore >= eventInfo.rewardScoreIndexArr[k] then
                                local state = false
                                for n = 1, #eventInfo.hasRewardList do
                                    if tonumber(eventInfo.hasRewardList[n]) == k then
                                        state = true
                                    end
                                end
                                if not state then
                                    num = num + 1
                                end
                            end
                        end
                    end
                    --常驻军备不在页签显示，额外计算红点
                    if eventInfo.heroEventPoint and eventInfo.heroEventPoint ~= "" then
                        local permanentData = DataCenter.ActPersonalArmsInfo:GetPermanentAct()
                        if permanentData and next(permanentData) then
                            local permanentEventInfo = DataCenter.ActPersonalArmsInfo:GetEventInfo(permanentData.activityId)
                            if permanentEventInfo and next(permanentEventInfo) then
                                for k = 1, 3 do
                                    if permanentEventInfo.curScore >= permanentEventInfo.rewardScoreIndexArr[k] then
                                        local state = false
                                        for n = 1, #permanentEventInfo.hasRewardList do
                                            if tonumber(permanentEventInfo.hasRewardList[n]) == k then
                                                state = true
                                            end
                                        end
                                        if not state then
                                            num = num + 1
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    elseif type == EnumActivity.AllianceCompete.Type then
        local allianceCompete = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
        if allianceCompete then
            return allianceCompete:GetRewardCount()
        end
    elseif type == EnumActivity.LeadingQuest.Type then
        local leadingQuestInfo = DataCenter.ActivityListDataManager:GetActivityDataById(id)
        --合并的活动排除
        if leadingQuestInfo.activity_pic == "lingtuzhizhan1" then
            return 0
        end
        return leadingQuestInfo:GetRedCount()
    elseif type == EnumActivity.BarterShop.Type then
        local barterData = DataCenter.ActivityListDataManager:GetActivityDataById(id)
        return barterData:GetRedCount()
    elseif type == ActivityEnum.ActivityType.Puzzle then
        --local puzzleData = DataCenter.ActivityPuzzleDataManager:GetPuzzleData()
        --local createDot = 0
        --if puzzleData ~= nil then
        --    createDot = puzzleData:GetUnCreatePuzzleMonsterNum()
        --end

        return DataCenter.ActivityPuzzleDataManager:GetRedDotNum()
    elseif type == EnumActivity.MineCave.Type then
        return DataCenter.MineCaveManager:GetRedCount()
    elseif type == EnumActivity.Arena.Type then
        return DataCenter.ArenaManager:GetArenaRedCount()
    elseif type == EnumActivity.DigActivity.Type then
        return DataCenter.DigActivityManager:GetDigActivityRed()
    elseif type == EnumActivity.RallyBossAct.Type then
        if id == EnumActivity.RallyBossAct.ActId then
            --local redCount = DataCenter.AllianceBaseDataManager:CheckIfShowAutoRallyRed()
            return 0
        end
    elseif type == ActivityEnum.ActivityType.BattlePass then
        return DataCenter.ActBattlePassData:GetActRed(toInt(id))
    elseif type == ActivityEnum.ActivityType.LuckyRoll then
        return DataCenter.ActLuckyRollInfo:GetLuckyRollRed(toInt(id))
    elseif type == ActivityEnum.ActivityType.GolloesCards then
        return DataCenter.ActGolloesCardData:GetActRed(toInt(id))
    elseif type == ActivityEnum.ActivityType.ActSevenDay then
        local data = self:GetActivityDataById(id)
		if data.sub_type == 3 then
			return DataCenter.ActSevenDayData:GetActHeroTrialRed(toInt(id))
		else
			return DataCenter.ActSevenDayData:GetActRed(toInt(id))
		end	
    elseif type == ActivityEnum.ActivityType.MonsterTower then
        return DataCenter.ActMonsterTowerData:GetActRed(toInt(id))
    elseif type == EnumActivity.JigsawPuzzle.Type then
        return DataCenter.JigsawPuzzleManager:GetJigsawRedCount(toInt(id))
    elseif type == EnumActivity.SeasonPass.Type then
        return DataCenter.SeasonPassManager:GetTotalRedCount(toInt(id))
    elseif type == EnumActivity.HeroGrowth.Type then
        return DataCenter.HeroGrowthActivityManager:GetTotalRedCount(toInt(id))
    elseif type == ActivityEnum.ActivityType.LuckyShop then
        return DataCenter.LuckyShopManager:GetRedPotCount()
    elseif type == ActivityEnum.ActivityType.DecorationGiftPackage then
        return DataCenter.DecorationGiftPackageManager:GetRedPotCount(toInt(id))
    elseif type == ActivityEnum.ActivityType.ActSevenLogin then
        local actId = DataCenter.ActSevenLoginData:CheckActLogin()
        if actId then
            local data = DataCenter.ActSevenLoginData:GetInfoByActId(actId)
            if data and next(data) then
                local day = data:CheckToday()
                --今天是否还能领
                if day and day ~= 0 then
                    return 1
                end
            end
        end
    elseif type == ActivityEnum.ActivityType.GiftBox then
        return DataCenter.ActGiftBoxData:GetActRed(toInt(id))
    elseif type == EnumActivity.DispatchTask.Type then
        return DataCenter.ActDispatchTaskDataManager:GetSingleTaskRedCount()
    elseif type == ActivityEnum.ActivityType.SeasonWeekCard then
        return DataCenter.ActSeasonWeekCardData:GetActRed(toInt(id))
    elseif type == ActivityEnum.ActivityType.WorldTrend then
        return DataCenter.WorldTrendManager:GetWorldTrendRedNum()
    elseif type == EnumActivity.AlContribute.Type then
        return DataCenter.AlContributeManager:GetRedCount()
    elseif type == EnumActivity.RobotWars.Type then
        num = DataCenter.DesertDataManager:GetRewardRed()
        local extraNum = 0
        local newNum  = 0
        local bubbleNum = DataCenter.StaminaBallManager:CheckShowRewardRed()
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.ActNoOne)
        if table.count(dataList) > 0 then
            local actListData = dataList[1]
            if actListData then
                local curTime = UITimeManager:GetInstance():GetServerTime()
                if actListData.startTime < curTime and curTime < actListData.endTime then
                    if DataCenter.GovernmentManager:IsSelfPresident() then
                        local data = DataCenter.MigrateDataManager:GetApplyList()
                        if data~=nil and table.count(data)>0 then
                            extraNum = 1
                        end
                    end
                end
                local lastEndTime = self:GetActivityVisitedEndTime(actListData.id)
                if actListData.endTime > lastEndTime then
                    newNum =1
                elseif DataCenter.MigrateDataManager:GetHasAccept() then
                    newNum = 1
                end
            end
        end
        
        return num + extraNum + newNum+bubbleNum
    elseif type == EnumActivity.Throne.Type  then
        local data = self:GetActivityDataById(id)
        if data then
            local lastTime = Setting:GetString(LuaEntry.Player.uid .. "_" .. SettingKeys.THRONE_ACT_TIME .. "_" .. id, "")
            local serverTime = UITimeManager:GetInstance():GetServerTime()
            if lastTime ~= "" then
                if tonumber(lastTime) < data.startTime and data.startTime < serverTime then
                    return 1
                end
            end
        end
    elseif type == ActivityEnum.ActivityType.DonateSoldierActivity then
        if DataCenter.ActivityDonateSoldierManager:IsDonateSoldierActivityOpen() then
            -- 捐兵奖励领取通知红点 领取奖励后消除
            local donateSoldierRewardRedNum = DataCenter.ActivityDonateSoldierManager:GetIsCurrRewardCanReceiveNum()
            --捐兵任务可领取奖励红点 领取奖励之后消除
            local donateSoldierTaskRedNum = DataCenter.ActivityDonateSoldierManager:GetIsCurrTaskRewardCanReceiveNum()
            --新任务通知红点 进界面就消除 需求变了 这个暂时去掉
            -- local newTaskShowRedNum = DataCenter.ActivityDonateSoldierManager:GetNewTaskRedPointCount()
            return donateSoldierRewardRedNum + donateSoldierTaskRedNum-- + newTaskShowRedNum
        end
    elseif type == ActivityEnum.ActivityType.ALVSDonateSoldier then
        if DataCenter.ActivityALVSDonateSoldierManager:IsALVSDonateSoldierActivityOpen() then
            -- 捐兵奖励领取通知红点 领取奖励后消除
            local donateSoldierRewardRedNum = DataCenter.ActivityALVSDonateSoldierManager:GetIsCurrRewardCanReceiveNum()
            --捐兵任务可领取奖励红点 领取奖励之后消除
            local donateSoldierTaskRedNum = DataCenter.ActivityALVSDonateSoldierManager:GetIsCurrTaskRewardCanReceiveNum()
            return donateSoldierRewardRedNum + donateSoldierTaskRedNum
        end
    elseif type == ActivityEnum.ActivityType.AllianceBoss then
        if DataCenter.AllianceBossManager:GetIsFreeRewardCanReceive() then
            local now = UITimeManager:GetInstance():GetServerTime()
            local donateEndTime = DataCenter.AllianceBossManager:GetDonateStageEndTime()
            if now < donateEndTime then
                return 0
            else
                return 1
            end
        end
    elseif type == ActivityEnum.ActivityType.ScratchOffGame then
        return DataCenter.ScratchOffGameManager:GetRedPointCount(toInt(id))
    elseif type == ActivityEnum.ActivityType.Mining then
        return DataCenter.MiningManager:GetRedPointCount(toInt(id))
    elseif type == ActivityEnum.ActivityType.Mysterious then
        return DataCenter.MysteriousManager:GetRedPointCount(toInt(id))
    elseif type == ActivityEnum.ActivityType.Mastery then
        return DataCenter.MasteryManager:GetRedNum()
    elseif type == ActivityEnum.ActivityType.AllianceOccupy then
        --基于任务活动
        local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(EnumActivity.LeadingQuest.Type)
        local activityData = nil
        if table.count(dataList) > 0 then
            for i = 1 ,table.count(dataList) do
                if dataList[i].activity_pic == "lingtuzhizhan1" then
                    activityData = dataList[i]
                    break
                end
            end
        end
        if activityData then
            local leadingQuestInfo = DataCenter.ActivityListDataManager:GetActivityDataById(activityData.id)
            return leadingQuestInfo:GetRedCount()
        end
    elseif type == ActivityEnum.ActivityType.GloryPreview then
        return DataCenter.GloryManager:CheckPreViewRed()
    elseif type == ActivityEnum.ActivityType.AllianceCityRecord then
        if DataCenter.WorldAllianceCityRecordManager:GetNeedShowState() then
            return 1
        end
    elseif type == ActivityEnum.ActivityType.ChangeNameAndPic then
        return DataCenter.ChangeNameAndPicManager:GetRedCount()
    elseif type == ActivityEnum.ActivityType.CountryRating then
        return DataCenter.CountryRatingData:GetActRed(toInt(id))
    elseif type == ActivityEnum.ActivityType.WorldBoss then
        return DataCenter.ActBossDataManager:GetRedNum()
    end
    return num
end

--通过activityid获取activityEventType类活动
local function GetEventTypeActivityById(self,activityid)
    if activityid == nil then
        return nil
    end
    local actInfo = nil
    for k,v in pairs(self.activityList) do
        if v ~= nil and v.activityId == activityid then
            return v
        end
    end
    return nil
end

--领取活动奖励返回处理
local function ActRewardHandle(self,message)
    DataCenter.RewardManager:ShowCommonReward(message)
    for k,v in pairs(message["reward"]) do
        DataCenter.RewardManager:AddOneReward(v)
    end
    DataCenter.ActivityController:SendScoreActivityData()
    DataCenter.ActivityController:SendGetAllActivityInfo()
end

--七日活动开启推送更新
local function RefreshSevenDayActData(self,message)
    if message ~= nil and  message.dayActs ~= nil then
        local data = ActivitySevenDayInfo.New()
        data:ParseActivityData(message)
        self.sevenDayList = data
        EventManager:GetInstance():Broadcast(EventId.UpdateDayActInfo)
    end
end

--更新七日积分
local function UpdateDayActScore(self,message)
    if message["score"] ~= nil then
        self.sevenDayList:UpdateDayActScore(message)
    end
end

local function GetDayActRedNum(self)
    if next(self.sevenDayList) then
        return self.sevenDayList.taskRedNum
    end
    return 0
end

-- 获取玩家上次进入这个活动页面时，这个活动的 endTime (number)
-- 如果与当前同一个活动的 endTime 不同，可以显示 New
local function GetActivityVisitedEndTime(self, id)
    local str = Setting:GetString(LuaEntry.Player.uid .. "_" .. SettingKeys.ACTIVITY_VISITED_END_TIME .. "_" .. id, "")
    return not string.IsNullOrEmpty(str) and tonumber(str) or 0
end

-- Set，同上
local function SetActivityVisitedEndTime(self, id)
    local data = self:GetActivityDataById(id)
    local str = tostring(data.endTime)
    
    Setting:SetString(LuaEntry.Player.uid .. "_" .. SettingKeys.ACTIVITY_VISITED_END_TIME .. "_" .. id, str)

    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

--{{{ 个人军备：  计时个人战备时间，特定时间进行提示
local function DeleteArmsTimer(self,actId)
    if self.timer[actId] ~= nil then
        self.timer[actId]:Stop()
        self.timer[actId] = nil
    end
    if not actId then
        for i, v in pairs(self.timer) do
            v:Stop()
            v = nil
        end
        self.firstMinuteTips = nil
        self.tenMinuteTips = nil
        self.fifteenMinuteTips = nil
        return
    end
    self.firstMinuteTips[actId] = false
    self.tenMinuteTips[actId] = false
    self.fifteenMinuteTips[actId] = false
end

local function ActivityByArmsTime(self,data)
    if data.personalEventType and data.personalEventType == PersonalEventType.Permanent then
        return
    end
    self:DeleteArmsTimer(data.activityId)
    local mainLv = DataCenter.BuildManager.MainLv
    if mainLv < data.needMainCityLevel then
        return
    end
    local timeEnd = {}
    table.insert(timeEnd,LuaEntry.DataConfig:TryGetNum("Armament_End_notice", "k1"))
    table.insert(timeEnd,LuaEntry.DataConfig:TryGetNum("Armament_End_notice", "k2"))
    table.insert(timeEnd,LuaEntry.DataConfig:TryGetNum("Armament_End_notice", "k3"))
    if self.timer[data.activityId] == nil then
        self.timer[data.activityId] = TimerManager:GetInstance():GetTimer(1, self.timer_action ,{data = data,time = timeEnd}, false,false,false)
    end
    self.timer[data.activityId]:Start()
end

local function RefreshArmsTime(self,param)
    local curTime = UITimeManager:GetInstance():GetServerTime()
    local diff = param.data.endTime - curTime
    if diff <= param.time[1]*60*1000 and diff > (param.time[1]-0.5)*60*1000 then        --小于15分钟大于14分半增加容错
        if self.firstMinuteTips[param.data.activityId] then
            return
        end
        UIUtil.ShowTips(Localization:GetString("372161", param.time[1]))
        self.firstMinuteTips[param.data.activityId] = true
    elseif diff <= param.time[2]*60*1000 and diff > (param.time[2]-0.5)*60*1000 then   --小于10分钟大于9分半增加容错
        if self.tenMinuteTips[param.data.activityId] then
            return
        end
        UIUtil.ShowTips(Localization:GetString("372161", param.time[2]))
        self.tenMinuteTips[param.data.activityId] = true
    elseif diff <= param.time[3]*60*1000 and diff > (param.time[3]-0.5)*60*1000 then    --小于5分钟大于4分半增加容错 
        if self.fifteenMinuteTips[param.data.activityId] then
            return
        end
        UIUtil.ShowTips(Localization:GetString("372161", param.time[3]))
        self.fifteenMinuteTips[param.data.activityId] = true
    elseif diff < 0 then
        self:DeleteArmsTimer(param.data.activityId)
        UIUtil.ShowTipsId(372153)
        SFSNetwork.SendMessage(MsgDefines.ActivityEventInfoGet,param.data.activityId)
    end
end

local function UpdateArmsActScore(self,message)
    local delay = 0
    for k, v in pairs(NoticeEquipDelays) do
        if UIManager:GetInstance():IsWindowOpen(k) then
            delay = v
            break
        end
    end
    local actId = nil
    local permanentData = DataCenter.ActPersonalArmsInfo:GetPermanentAct()
    if permanentData and next(permanentData) then
        actId = permanentData.activityId
    end
    local list = DataCenter.ActPersonalArmsInfo.list
    for i, v in pairs(list) do
        --找到对应个人军备
        if next(v) and i ~= actId then
            if v.eventInfo ~= nil then
                if v.eventInfo.actId == message.actId then
                    --如果上一次的分大于活动最高分
                    if (tonumber(message.score) - tonumber(message.addScore)) < v.eventInfo.rewardScoreIndexArr[3] then
                        self:SetActScore(message)
                        if self.actDelayTimer == nil and not UIManager:GetInstance():IsWindowOpen(UIWindowNames.UINoticeEquipTips) then
                            if delay > 0 then
                                self:AddOneDelayTimer(delay, message, i)
                            else
                                UIManager:GetInstance():OpenWindow(UIWindowNames.UINoticeEquipTips, { anim = false, playEffect = false }, message, i)
                            end
                        else
                            EventManager:GetInstance():Broadcast(EventId.RefreshUINoticeEquipTips)
                        end
                    end
                    break
                end
            end
        end
    end
end

local function SetActScore(self,message)
    if message ~= nil and message.actId ~= nil then
        self.actScoreList[message.actId] = message
    end
end

local function GetActScore(self,actId)
    return self.actScoreList[actId]
end

local function ClearActScore(self)
    self.actScoreList = {}
end

--}}}

local function UpdateActBarterShopInfo(self, t)
    local activityId = tostring(t["activityId"])
    local id = tonumber(t["id"])
    local num = t["num"]
    local actInfo = self:GetActivityDataById(activityId)
    if actInfo then
        actInfo:UpdateOneData(id, num)
    end
    EventManager:GetInstance():Broadcast(EventId.BarterShopExchangeSucc, id)
end

--联盟军备活动是否开启
local function CheckIfAlCompeteActivityOpen(self)
    local activityInfo = DataCenter.ActivityListDataManager:GetActivityDataById(EnumActivity.AllianceCompete.ActId)
    if not activityInfo then
        return false
    end
    return true
end

local function GetActBossRankRewardDataList(self)
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
    if #dataList<=0 then
        return
    end

    local data = dataList[1]
    if data~=nil then
        return data:GetRankRewardList()
    end
end

local function GetActBossRankPersonRewardDataList(self)
    local dataList = DataCenter.ActivityListDataManager:GetActivityDataByType(ActivityEnum.ActivityType.WorldBoss)
    if #dataList<=0 then
        return
    end

    local data = dataList[1]
    if data~=nil then
        return data:GetPersonRankRewardList()
    end
end
local function CheckIfActivityOpen(self, tempType, tempId)
    local actInfo = nil
    if tempId then
        tempId = tostring(tempId)
        actInfo = self:GetActivityDataById(tempId)
    elseif tempType then
        local actList = self:GetActivityDataByType(tempType)
        actInfo = #actList > 0 and actList[1] or nil
    end

    if actInfo then
        local curTime = UITimeManager:GetInstance():GetServerTime()
        local mainLv = DataCenter.BuildManager.MainLv
        if actInfo.needMainCityLevel<= mainLv  then
            local endTime = actInfo.endTime
            local startTime = actInfo.startTime
            if actInfo.rewardTime>0 then
                endTime = actInfo.rewardTime
            end
            if actInfo.readyTime>0 then
                startTime = actInfo.readyTime
            end
            if actInfo.type == EnumActivity.MineCave.Type then
                return true
            elseif startTime <= curTime and curTime < endTime then
                local isOpen = true
                if actInfo.type == EnumActivity.AllianceCompete.Type then
                    if actInfo.finish or v:GetEventInfo() == nil then
                        isOpen = false
                    end
                elseif actInfo.type == EnumActivity.BarterShop.Type or actInfo.type == EnumActivity.BarterShopNotice.Type then
                    if actInfo.allianceId and actInfo.allianceId ~= LuaEntry.Player.allianceId then
                        isOpen = false
                    end
                end
                return isOpen
            end
        end
    end
end

local function StartPassDayTimer(self)
    if self.passDayTimer then
        self.passDayTimer:Stop()
    end
    local remainTimeS = UITimeManager:GetInstance():GetResSecondsTo24()
    local delayS = remainTimeS + 5
    self.passDayTimer = TimerManager:GetInstance():DelayInvoke(function()
        self:OnPassDayUpdateActivity()
        EventManager:GetInstance():Broadcast(EventId.OnPassDay)
        self:StartPassDayTimer()
    end, delayS)
end

local function OnPassDayUpdateActivity(self)
    SFSNetwork.SendMessage(MsgDefines.RadarRallyGetBossCount)
end

local function SetLastVisitedActivityId(self, id)
    local tempInfo = self:GetActivityDataById(tostring(id))
    if tempInfo == nil then
        tempInfo = 0
        self.lastVisitActDic[tempInfo] = id
    else
        self.lastVisitActDic[tempInfo.activity_daily] = id
    end
end

local function GetLastVisitedActivityId(self, activityDaily)
    return self.lastVisitActDic[activityDaily]
end


function ActivityListDataManager:AddOneDelayTimer(time, message, activityId)
    if self.actDelayTimer == nil then
        self.actDelayTimer = TimerManager:GetInstance():DelayInvoke(function()
            self:RemoveOneDelayTimer()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UINoticeEquipTips,{ anim = false, playEffect = false}, message, activityId)
        end, time)
    end
end

function ActivityListDataManager:RemoveOneDelayTimer()
    if self.actDelayTimer ~= nil then
        self.actDelayTimer:Stop()
        self.actDelayTimer = nil
    end
end

--活动是否开启
function ActivityListDataManager:IsActivityOpen(activityId)
    local data = self:GetActivityDataById(activityId)
    if data ~= nil and self:CheckIsSend(data) then
        return true
    end
    return false
end

local function SetActivityLastVisitTime(self, activityId)
    if activityId then
        local serverTimeS = UITimeManager:GetInstance():GetServerSeconds()
        local strK = LuaEntry.Player.uid .. "_ActivityVisitTime_" .. activityId
        CS.GameEntry.Setting:SetInt(strK, serverTimeS)
    end
end

local function GetActivityLastVisitTime(self, activityId)
    local strK = LuaEntry.Player.uid .. "_ActivityVisitTime_" .. activityId
    return CS.GameEntry.Setting:GetInt(strK, 0)
end

local function CheckIfIsToEnd(self, activityId)
    local actInfo = self:GetActivityDataById(tostring(activityId))
    if not actInfo then
        return false, false
    end
    if actInfo.endTime <= 0 then
        return false, false
    end

    if actInfo.type == ActivityEnum.ActivityType.DragonNotice then
        return false,false
    end
    local lastVisitTime = self:GetActivityLastVisitTime(activityId)
    if actInfo.countdown_remind and actInfo.countdown_remind > 0 then
        local remindStartTime = actInfo.endTime - actInfo.countdown_remind * OneDayTime * 1000
        local curTime = UITimeManager:GetInstance():GetServerTime()
        return curTime > remindStartTime and lastVisitTime * 1000 < remindStartTime, false
    else
        return false
    end
end



--{{{ 一些活动挂起的计时
function ActivityListDataManager:DeleteActTimer(actId)
    if self.actTimer[actId] ~= nil then
        self.actTimer[actId]:Stop()
        self.actTimer[actId] = nil
    end
    if not actId then
        for i, v in pairs(self.actTimer) do
            v:Stop()
            v = nil
        end
        return
    end
end

function ActivityListDataManager:ActivityByIdTime(data)
    self:DeleteActTimer(data.id)
    local mainLv = DataCenter.BuildManager.MainLv
    if mainLv < data.needMainCityLevel then
        return
    end
    if self.actTimer[data.id] == nil then
        self.actTimer[data.id] = TimerManager:GetInstance():GetTimer(1, self.actTimer_action ,{data = data}, false,false,false)
    end
    self.actTimer[data.id]:Start()
end

function ActivityListDataManager:RefreshActTime(param)
    local serverTime = UITimeManager:GetInstance():GetServerTime()
    if param.data.type == EnumActivity.Throne.Type then
        local data = self:GetActivityDataById(param.data.id)
        if data then
            local lastTime = Setting:GetString(LuaEntry.Player.uid .. "_" .. SettingKeys.THRONE_ACT_TIME .. "_" .. param.data.id, "")
            if lastTime ~= "" then
                if tonumber(lastTime) < data.startTime and data.startTime < serverTime then
                    EventManager:GetInstance():Broadcast(EventId.ActMainRefreshRed)
                    self:DeleteActTimer(param.data.id)
                end
            end
        end
    end
end

--}}}

ActivityListDataManager.__init = __init
ActivityListDataManager.__delete = __delete
ActivityListDataManager.InitActivityListData = InitActivityListData
ActivityListDataManager.UpdateRewardControlInfo = UpdateRewardControlInfo
ActivityListDataManager.GetRewardControlInfo = GetRewardControlInfo
ActivityListDataManager.CheckIsSend = CheckIsSend
ActivityListDataManager.SortActivityArr = SortActivityArr
ActivityListDataManager.GetNowActivityList =GetNowActivityList
ActivityListDataManager.GetLaterActivityList =GetLaterActivityList
ActivityListDataManager.GetOverActivityList =GetOverActivityList
ActivityListDataManager.GetActivityDataById =GetActivityDataById
ActivityListDataManager.RetEventData = RetEventData
ActivityListDataManager.PushEventScore =PushEventScore
ActivityListDataManager.GetRewardNumByTypeAndId =GetRewardNumByTypeAndId
ActivityListDataManager.GetEventTypeActivityById =GetEventTypeActivityById
ActivityListDataManager.GetActivityList =GetActivityList
ActivityListDataManager.GetActivityDataByType = GetActivityDataByType
ActivityListDataManager.GetActivityOpenLv = GetActivityOpenLv
ActivityListDataManager.ActRewardHandle =ActRewardHandle
ActivityListDataManager.RefreshActivityTime = RefreshActivityTime
ActivityListDataManager.GetSevenDayList = GetSevenDayList
ActivityListDataManager.RefreshSevenDayActData = RefreshSevenDayActData
ActivityListDataManager.UpdateDayActScore = UpdateDayActScore
ActivityListDataManager.GetDayActRedNum = GetDayActRedNum
ActivityListDataManager.GetTotalRedDotCount = GetTotalRedDotCount
ActivityListDataManager.GetActivityRedDotCount = GetActivityRedDotCount
ActivityListDataManager.IsActivityNew = IsActivityNew
ActivityListDataManager.GetActivityVisitedEndTime = GetActivityVisitedEndTime
ActivityListDataManager.SetActivityVisitedEndTime = SetActivityVisitedEndTime
ActivityListDataManager.AddOneActivity = AddOneActivity
ActivityListDataManager.DeleteArmsTimer = DeleteArmsTimer
ActivityListDataManager.ActivityByArmsTime = ActivityByArmsTime
ActivityListDataManager.RefreshArmsTime = RefreshArmsTime
ActivityListDataManager.UpdateArmsActScore = UpdateArmsActScore
ActivityListDataManager.SetActScore = SetActScore
ActivityListDataManager.GetActScore = GetActScore
ActivityListDataManager.ClearActScore = ClearActScore
ActivityListDataManager.UpdateActBarterShopInfo = UpdateActBarterShopInfo
ActivityListDataManager.CheckIfHasNew = CheckIfHasNew
ActivityListDataManager.CheckIfAnyoneIsToEnd = CheckIfAnyoneIsToEnd
ActivityListDataManager.CheckIfAlCompeteActivityOpen = CheckIfAlCompeteActivityOpen
ActivityListDataManager.GetActBossRankRewardDataList =GetActBossRankRewardDataList
ActivityListDataManager.CheckIfActivityOpen = CheckIfActivityOpen
ActivityListDataManager.GetActBossRankPersonRewardDataList =GetActBossRankPersonRewardDataList
ActivityListDataManager.StartPassDayTimer = StartPassDayTimer
ActivityListDataManager.OnPassDayUpdateActivity = OnPassDayUpdateActivity
ActivityListDataManager.SetLastVisitedActivityId = SetLastVisitedActivityId
ActivityListDataManager.GetLastVisitedActivityId = GetLastVisitedActivityId


ActivityListDataManager.SetActivityLastVisitTime = SetActivityLastVisitTime
ActivityListDataManager.GetActivityLastVisitTime = GetActivityLastVisitTime
ActivityListDataManager.CheckIfIsToEnd = CheckIfIsToEnd
ActivityListDataManager.GetRedCount_ActivityDaily = GetRedCount_ActivityDaily
ActivityListDataManager.GetNowActivityDataByType = GetNowActivityDataByType
ActivityListDataManager.GetWelfareActivity = GetWelfareActivity
ActivityListDataManager.GetWelfareCenterRedCount = GetWelfareCenterRedCount
return ActivityListDataManager
