---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 
---
local ActGolloesCardData = BaseClass("ActGolloesCardData")
local Localization = CS.GameEntry.Localization
local ActGolloesCardInfo = require "DataCenter.ActivityListData.ActGolloesCardInfo"
local function __init(self)
    self.list = {}
end

local function __delete(self)
    self.list = nil
end

local function SetActivityId(self,id)
    self.list[tonumber(id)] = {}
end

local function ParseEventData(self,message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        local info = ActGolloesCardInfo.New()
        info:ParseGolloesCard(message)
        self.list[message["activityId"]] = info
    end
    EventManager:GetInstance():Broadcast(EventId.ActGolloesCard)
end

local function GetInfoByActId(self,activityId)
    if self.list[activityId] then
        return self.list[activityId]
    end
    return nil
end

--翻卡返回
local function FlipGolloesCardHandle(self,message)

    --获得的奖励
    local reward = message["reward"]
    if reward ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        message.delayTime = 0.5
        --奖励延迟显示
        EventManager:GetInstance():Broadcast(EventId.ActGolloesCardRewardShow,message)
    end
    
    --剩余钻石
    if message["gold"] then
        LuaEntry.Player.gold = message["gold"]
        EventManager:GetInstance():Broadcast(EventId.UpdateGold)
    end
    
    --刷新CardInfo
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message["cardInfo"] then
            data:ParseCardInfo(message["cardInfo"])
        end
        local param = {}
        param.reward = DataCenter.RewardManager:ReturnRewardParamForView(reward)
        param.index  = message["index"]
        data:UpdateFlipCard(param)
    end
    
    EventManager:GetInstance():Broadcast(EventId.ActGolloesCardFlip)
end

--一键翻卡返回
local function FlipAllGolloesCardHandle(self,message)
    --获得的奖励
    local reward = message["reward"]
    if reward ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        message.delayTime = 1
        --奖励延迟显示
        EventManager:GetInstance():Broadcast(EventId.ActGolloesCardRewardShow,message)
    end
    --剩余钻石
    if message["gold"] then
        LuaEntry.Player.gold = message["gold"]
        EventManager:GetInstance():Broadcast(EventId.UpdateGold)
    end
    
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message["cardInfo"] then
            data:ParseCardInfo(message["cardInfo"])
        end
        if message["flipCards"] then
            data:ParseFlipCards(message["flipCards"])
        end
        if message["showRewardArr"] then
            data:UpdateShowArr(message["showRewardArr"])
        end
        if message["nextShowRewardArr"] then
            data:UpdateNextShowArr(message["nextShowRewardArr"])
        end
    end
    EventManager:GetInstance():Broadcast(EventId.ActGolloesCardFlipAll,2)
end

--刷新返回
local function RefreshCardHandle(self,message)
    --剩余钻石
    if message["gold"] then
        LuaEntry.Player.gold = message["gold"]
        EventManager:GetInstance():Broadcast(EventId.UpdateGold)
    end
    
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message["cardInfo"] then
            data:ParseCardInfo(message["cardInfo"])
        end
        if message["showRewardArr"] then
            data:UpdateShowArr(message["showRewardArr"])
        end
        if message["nextShowRewardArr"] then
            data:UpdateNextShowArr(message["nextShowRewardArr"])
        end
        data:ClearLastFlipCards()
    end
    EventManager:GetInstance():Broadcast(EventId.ActGolloesCardRefresh)
end

--获取排行榜
local function GetCardRankHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message then
            data:ParseRankInfo(message)
        end
        EventManager:GetInstance():Broadcast(EventId.ActGolloesCardRank)
    end
end

local function GetActRed(self,actId)
    local data = self:GetInfoByActId(actId)
    if next(data) then
       return data:GetRedNum()
    end
    return 0
end

ActGolloesCardData.__init = __init
ActGolloesCardData.__delete = __delete
ActGolloesCardData.SetActivityId =SetActivityId
ActGolloesCardData.ParseEventData =ParseEventData
ActGolloesCardData.GetInfoByActId =GetInfoByActId
ActGolloesCardData.FlipGolloesCardHandle = FlipGolloesCardHandle
ActGolloesCardData.FlipAllGolloesCardHandle = FlipAllGolloesCardHandle
ActGolloesCardData.RefreshCardHandle = RefreshCardHandle
ActGolloesCardData.GetCardRankHandle = GetCardRankHandle
ActGolloesCardData.GetActRed = GetActRed
return ActGolloesCardData