---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2023/1/30 22:38
---HeroGrowthActivityManager.lua

local HeroGrowthActivityManager = BaseClass("HeroGrowthActivityManager");
local HeroGrowthData = require "DataCenter.ActivityListData.HeroGrowthData"

local function __init(self)
    self.growthInfoDic = {}
    self:AddListener()
end

local function __delete(self)
    self:RemoveListener()
end

local function AddListener(self)
    --EventManager:GetInstance():AddListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function UpdateGrowthInfo(self, msg)
    local info = self.growthInfoDic[msg.activityId]
    if not info then
        info = HeroGrowthData.New()
    end
    info:ParseData(msg)
    self.growthInfoDic[info.activityId] = info
end

local function GetGrowthInfoReq(self, activityId)
    SFSNetwork.SendMessage(MsgDefines.GetSevenDayActInfo, tonumber(activityId))
end

local function OnRecvGrowthInfoResp(self, msg)
    self:UpdateGrowthInfo(msg)
    EventManager:GetInstance():Broadcast(EventId.OnHeroGrowthInfoUpdate)
end

local function OnRecvGrowthScorePush(self, msg)
    local info = self.growthInfoDic[msg["activityId"]]
    if info then
        info:UpdateGrowthScore(msg.score, msg.add)
        EventManager:GetInstance():Broadcast(EventId.OnHeroGrowthScoreChange)
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
end

local function ClaimBoxRewardReq(self, activityId, index)
    SFSNetwork.SendMessage(MsgDefines.ReceiveSevenDayActReward, activityId, index)
end

local function OnRecvClaimBoxRewardResp(self, msg)
    if msg["reward"] then
        for k,v in pairs(msg["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
        DataCenter.RewardManager:ShowCommonReward(msg)
    end
    
    local info = self.growthInfoDic[msg["activityId"]]
    if info then
        info:UpdateBoxRewardStatus(msg.index, 1)
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    EventManager:GetInstance():Broadcast(EventId.OnHeroGrowthScoreBoxStatusUpdate)
end


local function GetCurTaskList(self, activityId)
    activityId = tonumber(activityId)
    if not self.growthInfoDic[activityId] then
        return {}
    end
    
    local retList = {}
    local taskGroup = self.growthInfoDic[activityId].taskGroupList
    for i, v in ipairs(taskGroup) do
        local temp = nil
        for m, n in ipairs(v) do
            local questInfo = DataCenter.TaskManager:FindTaskInfo(n.id)
            if questInfo then
                n.statusForSort = questInfo.state
                if n.statusForSort == 2 then
                    n.statusForSort = -1
                end
                if not temp then
                    temp = n
                end
                if questInfo.state < 2 or m == #v then
                    temp = n
                    break
                end
            end
        end
        table.insert(retList, temp)
    end
    
    table.sort(retList, function(a, b)
        if a.statusForSort ~= b.statusForSort then
            return a.statusForSort > b.statusForSort
        else
            return a.id < b.id
        end
    end)
    
    return retList
end

local function GetBoxDisplayRewardList(self, activityId, boxIndex)
    local retList = {}

    if self.growthInfoDic[activityId] then
        local tempInfo = self.growthInfoDic[activityId]
        local boxReward = tempInfo.scoreRewardList[boxIndex]
        retList = DataCenter.RewardManager:ReturnRewardParamForView(boxReward.reward)
    end
    
    return retList
end

local function GetGrowthInfo(self, activityId)
    activityId = tonumber(activityId)
    return self.growthInfoDic[activityId]
end

local function GetTotalRedCount(self, activityId)
    local totalCount = 0
    
    if self.growthInfoDic[activityId] then
        local taskGroup = self.growthInfoDic[activityId].taskGroupList
        local list = self:GetCurTaskList(activityId)
        for i, v in ipairs(taskGroup) do
            for m, n in ipairs(v) do
                local questInfo = DataCenter.TaskManager:FindTaskInfo(n.id)
                if questInfo and questInfo.state == 1 then
                    local isShowQuest = false
                    for k = 1 ,table.count(list) do
                        if n.id == list[k].id then
                            isShowQuest = true
                        end
                    end
                    if isShowQuest then
                        totalCount = totalCount + 1
                    end
                end
            end
        end
       
        local boxRewardList = self.growthInfoDic[activityId].scoreRewardList
        local score = self.growthInfoDic[activityId].score
        if boxRewardList and #boxRewardList > 0 then
            if boxRewardList[#boxRewardList].rewardFlag == 1 then
                totalCount = 0
            else
                for i, v in ipairs(boxRewardList) do
                    if v.rewardFlag == 0 and score >= v.needScore then
                        totalCount = totalCount + 1
                    end
                end
            end
        end
    end
    return totalCount
end

HeroGrowthActivityManager.__init = __init
HeroGrowthActivityManager.__delete = __delete
HeroGrowthActivityManager.AddListener = AddListener
HeroGrowthActivityManager.RemoveListener = RemoveListener

HeroGrowthActivityManager.UpdateGrowthInfo = UpdateGrowthInfo
HeroGrowthActivityManager.GetGrowthInfoReq = GetGrowthInfoReq
HeroGrowthActivityManager.OnRecvGrowthInfoResp = OnRecvGrowthInfoResp
HeroGrowthActivityManager.OnRecvGrowthScorePush = OnRecvGrowthScorePush
HeroGrowthActivityManager.ClaimBoxRewardReq = ClaimBoxRewardReq
HeroGrowthActivityManager.OnRecvClaimBoxRewardResp = OnRecvClaimBoxRewardResp

HeroGrowthActivityManager.GetCurTaskList = GetCurTaskList
HeroGrowthActivityManager.GetGrowthInfo = GetGrowthInfo
HeroGrowthActivityManager.GetBoxDisplayRewardList = GetBoxDisplayRewardList
HeroGrowthActivityManager.GetTotalRedCount = GetTotalRedCount

return HeroGrowthActivityManager