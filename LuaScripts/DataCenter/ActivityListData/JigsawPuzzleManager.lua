---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 1.
--- DateTime: 2022/8/16 14:52
---JigsawPuzzleManager.lua

local JigsawPuzzleManager = BaseClass("JigsawPuzzleManager");
local JigsawPuzzleTemplate = require "DataCenter.ActivityListData.JigsawPuzzleTemplate"
local JigsawPuzzleData = require "DataCenter.ActivityListData.JigsawPuzzleData"
local JigsawPuzzleRankData = require "DataCenter.ActivityListData.JigsawPuzzleRankData"

local function __init(self)
    self.jigsawPuzzleInfoDic = {}
    self.jigsawPuzzleConfDic = {}
    self.jigsawRankInfoDic = {}
    self.cacheJigsawResult = nil--{activityId, id, rank, serverMinTime, minTime, useTime, reward}
    self.oldJigsawList = nil
    self:InitConf()
    self:AddListener()
end

local function __delete(self)
    self:RemoveListener()
    self.jigsawPuzzleInfoDic = nil
    self.jigsawPuzzleConfDic = nil
    self.cacheJigsawResult = nil
    self.oldJigsawList = nil
end

local function AddListener(self)
    --EventManager:GetInstance():AddListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function RemoveListener(self)
    --EventManager:GetInstance():RemoveListener(EventId.OnPassDay, self.TryReqUpdateMineCaveInfo)
end

local function InitConf(self)
    self.jigsawPuzzleConfDic = {}
    LocalController:instance():visitTable(TableName.JigsawPuzzle,function(id,lineData)
        local item = JigsawPuzzleTemplate.New()
        item:InitData(lineData)
        
        if not self.jigsawPuzzleConfDic[item.activityId] then
            self.jigsawPuzzleConfDic[item.activityId] = {}
        end
        table.insert(self.jigsawPuzzleConfDic[item.activityId],item)
    end)
end

local function UpdateOneJigsawActInfo(self, msg)
    local newInfo = self.jigsawPuzzleInfoDic[msg.activityId]
    if not newInfo then
        newInfo = JigsawPuzzleData.New()
        self.jigsawPuzzleInfoDic[msg.activityId] = newInfo
    end
    newInfo:ParseData(msg)

    EventManager:GetInstance():Broadcast(EventId.OnUpdateJigsawPuzzleInfo, newInfo.activityId)
end

local function OnRecvBeginChallenge(self, msg)
    if msg["activityId"] then
        local newInfo = self.jigsawPuzzleInfoDic[msg["activityId"]]
        if not newInfo then
            newInfo = JigsawPuzzleData.New()
            self.jigsawPuzzleInfoDic[msg["activityId"]] = newInfo
        end
        newInfo:ParseData(msg)
        EventManager:GetInstance():Broadcast(EventId.OnUpdateJigsawPuzzleInfo, newInfo.activityId)
    end
end

local function UpdateRankInfo(self, msg)
    local actId = msg.activityId
    if not self.jigsawRankInfoDic[actId] then
        self.jigsawRankInfoDic[actId] = {}
    end
    local rankDic = self.jigsawRankInfoDic[actId]
    if not rankDic[msg.id] then
        local newRankInfo = JigsawPuzzleRankData.New()
        newRankInfo:ParseData(msg)
        rankDic[newRankInfo.id] = newRankInfo
    else
        rankDic[msg.id]:ParseData(msg)
    end
    local param = {
        activityId = actId,
        id = msg.id,
    }
    EventManager:GetInstance():Broadcast(EventId.OnJigsawRankUpdate, param)
end

local function OnrecvPuzzleFinish(self, msg)
    self.cacheJigsawResult = msg
    if msg.activityId and msg.id then
        local oldInfo = self:GetJigsawInfo(msg.activityId, msg.id)
        if oldInfo then
            oldInfo.bestScoreS = msg.minTime
        end
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIJigsawFinish)
end

local function GetJigsawFinishInfo(self)
    return self.cacheJigsawResult
end

local function GetJigsawInfo(self, activityId, jigsawId)
    activityId = tonumber(activityId)
    if self.jigsawPuzzleInfoDic[activityId] then
        local activityInfo = self.jigsawPuzzleInfoDic[activityId]
        local jigsawInfo = activityInfo:GetJigsawInfo(jigsawId)
        return jigsawInfo
    end
end

local function TryGetJigsawActInfo(self, activityId)
    return self.jigsawPuzzleInfoDic[activityId]
end

local function GetActInfoById(self, activityId)
    return self.jigsawPuzzleInfoDic[activityId]
end

local function GetFreeChallengeTimes(self, actId)
    if self.jigsawPuzzleInfoDic[actId] then
        local strPara = self.jigsawPuzzleInfoDic[actId].para
        local paraArr = string.split(strPara, ";")
        if #paraArr == 2 then
            return self.jigsawPuzzleInfoDic[actId].challengedCount, tonumber(paraArr[1]), tonumber(paraArr[2])
        end
    end
    return 0, 0, 99
end

local function GetStarNumByTime(self, activityId, jigsawId, tempTime)
    if tempTime <= 0 then
        return 0
    end
    activityId = tonumber(activityId)
    local jigsawList = self.jigsawPuzzleConfDic[activityId]
    if jigsawList then
        for i, v in ipairs(jigsawList) do
            if v.id == jigsawId then
                return self:GetStarNum(v, tempTime)
            end
        end
    end
    return 0
end

local function GetStarNum(self, jigsawTemplate, tempTime)
    if not jigsawTemplate then
        return 0
    end
    for i = 3, 1, -1 do
        if tempTime <= jigsawTemplate.starNeedTimeS[i] then
            return i
        end
    end
    return 0
end

local function GetJigsawRankInfo(self, activityId, jigsawId, reqIfEmpty)
    if self.jigsawRankInfoDic and self.jigsawRankInfoDic[activityId] then
        local tempInfo = self.jigsawRankInfoDic[activityId]
        if tempInfo[jigsawId] then
            return tempInfo[jigsawId]
        end
    end
    if reqIfEmpty then
        self:RequestJigsawRankInfo(activityId, jigsawId)
    end
end

local function GetRankRewards(self, activityId, jigsawId, rank)
    local rankInfo = self:GetJigsawRankInfo(activityId, jigsawId)
    local retList = {}
    if rankInfo then
        local rewards = nil
        for i, v in ipairs(rankInfo.rankRewardList) do
            if v.rankStart <= rank and rank <= v.rankEnd then
                rewards = v.rewards
                break
            end
        end
        if rewards then
            for i, v in ipairs(rewards) do
                local newReward = {}
                newReward.rewardType = v.type
                if type(v.value) == "table" then
                    newReward.itemId = v.value.id
                    newReward.count = v.value.num
                else
                    newReward.count = v.value
                end
                table.insert(retList, newReward)
            end
        end
    end
    return retList
end

local function GetJigsawConfByActId(self, activityId)
    local retTb = {}
    if self.jigsawPuzzleConfDic[activityId] then
        retTb = self.jigsawPuzzleConfDic[activityId]
    end
    return retTb
end

local function GetJigsawConf(self, activityId, jigsawId)
    local tempList = self.jigsawPuzzleConfDic[activityId]
    if tempList then
        return tempList[jigsawId]
    end
end


local function TryRequestJigsawActInfo(self, activityId)
    if not self.jigsawPuzzleInfoDic[activityId] then
        SFSNetwork.SendMessage(MsgDefines.GetJigsawActivityInfo, activityId)
    end
end

local function RequestBeginChallenge(self, activityId, jigsawId)
    SFSNetwork.SendMessage(MsgDefines.BeginJigsawChallenge, activityId, jigsawId)
end

local function RequestFinishJigsaw(self, activityId, jigsawId, costTime)
    SFSNetwork.SendMessage(MsgDefines.FinishJigsawPuzzle, activityId, jigsawId, costTime)
end

local function RequestJigsawRankInfo(self, activityId, jigsawId)
    SFSNetwork.SendMessage(MsgDefines.GetJigsawRankInfo, activityId, jigsawId)
end

local function GetJigsawRedCount(self, activityId)
    if not self.oldJigsawList then
        self:InitOldJigsawList()
    end
    
    local tempCount = 0
    local tempList = DataCenter.JigsawPuzzleManager:GetJigsawConfByActId(activityId)
    for i, v in ipairs(tempList) do
        if v:CheckIfUnlocked() then
            if not table.hasvalue(self.oldJigsawList, v.id) then
                tempCount = tempCount + 1
            end
        end
    end
    return tempCount
end

local function InitOldJigsawList(self)
    self.oldJigsawList = {}
    
    local strOld = CS.GameEntry.Setting:GetString("Jigsaw_Puzzle_Old_Jigsaws_" .. LuaEntry.Player.uid, "")
    
    local arrOld = string.split(strOld, ";")
    for i, v in ipairs(arrOld) do
        if not string.IsNullOrEmpty(v) then
            table.insert(self.oldJigsawList, tonumber(v))
        end
    end

    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function SetJigsawAsOld(self, activityId, jigsawId)
    if jigsawId then
        if not table.hasvalue(self.oldJigsawList, jigsawId) then
            table.insert(self.oldJigsawList, jigsawId)
            
            local strOld = ""
            for i, v in ipairs(self.oldJigsawList) do
                strOld = v .. ";" .. strOld
            end
            CS.GameEntry.Setting:SetString("Jigsaw_Puzzle_Old_Jigsaws_" .. LuaEntry.Player.uid, strOld)
        end
    elseif activityId then
        self.oldJigsawList = {}
        local tempList = DataCenter.JigsawPuzzleManager:GetJigsawConfByActId(activityId)
        for i, v in ipairs(tempList) do
            if v:CheckIfUnlocked() then
                table.insert(self.oldJigsawList, v.id)
            end
        end
        local strOld = ""
        for i, v in ipairs(self.oldJigsawList) do
            strOld = v .. ";" .. strOld
        end
        CS.GameEntry.Setting:SetString("Jigsaw_Puzzle_Old_Jigsaws_" .. LuaEntry.Player.uid, strOld)
    end
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function CheckIfJigsawIsNew(self, jigsawId)
    if not self.oldJigsawList then
        self:InitOldJigsawList()
    end
    return not table.hasvalue(self.oldJigsawList, jigsawId)
end

JigsawPuzzleManager.__init = __init
JigsawPuzzleManager.__delete = __delete
JigsawPuzzleManager.AddListener = AddListener
JigsawPuzzleManager.RemoveListener = RemoveListener

JigsawPuzzleManager.InitConf = InitConf
JigsawPuzzleManager.UpdateOneJigsawActInfo = UpdateOneJigsawActInfo
JigsawPuzzleManager.UpdateRankInfo = UpdateRankInfo
JigsawPuzzleManager.OnRecvBeginChallenge = OnRecvBeginChallenge
JigsawPuzzleManager.OnrecvPuzzleFinish = OnrecvPuzzleFinish
JigsawPuzzleManager.GetJigsawFinishInfo = GetJigsawFinishInfo
JigsawPuzzleManager.GetJigsawInfo = GetJigsawInfo
JigsawPuzzleManager.GetJigsawRankInfo = GetJigsawRankInfo
JigsawPuzzleManager.GetJigsawConfByActId = GetJigsawConfByActId
JigsawPuzzleManager.GetJigsawConf = GetJigsawConf
JigsawPuzzleManager.GetFreeChallengeTimes = GetFreeChallengeTimes
JigsawPuzzleManager.GetStarNum = GetStarNum
JigsawPuzzleManager.GetStarNumByTime = GetStarNumByTime
JigsawPuzzleManager.GetActInfoById = GetActInfoById
JigsawPuzzleManager.TryGetJigsawActInfo = TryGetJigsawActInfo
JigsawPuzzleManager.TryRequestJigsawActInfo = TryRequestJigsawActInfo
JigsawPuzzleManager.GetRankRewards = GetRankRewards
JigsawPuzzleManager.RequestBeginChallenge = RequestBeginChallenge
JigsawPuzzleManager.RequestFinishJigsaw = RequestFinishJigsaw
JigsawPuzzleManager.RequestJigsawRankInfo = RequestJigsawRankInfo
JigsawPuzzleManager.SetJigsawAsOld = SetJigsawAsOld
JigsawPuzzleManager.InitOldJigsawList = InitOldJigsawList
JigsawPuzzleManager.GetJigsawRedCount = GetJigsawRedCount
JigsawPuzzleManager.CheckIfJigsawIsNew = CheckIfJigsawIsNew

return JigsawPuzzleManager