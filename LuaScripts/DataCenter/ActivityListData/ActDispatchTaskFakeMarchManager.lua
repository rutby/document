---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Imaginaerum.
--- DateTime: 3/4/2024 下午5:14
---
---@class ActDispatchTaskFakeMarchManager
local ActDispatchTaskFakeMarchManager = BaseClass("ActDispatchTaskFakeMarchManager")
local ActDispatchTaskFakeMarchData = require "DataCenter.ActivityListData.ActDispatchTaskFakeMarchData"

local function __init(self)
    self.allMarches = {}
    self.timer_action = function(temp)
        self:CheckAndRefreshMarches()
    end
    self:AddListener()
end

local function __delete(self)
    self.allMarches = nil
    self:RemoveListener()
end

local function AddListener(self)
    EventManager:GetInstance():AddListener(EventId.OnEnterWorld, BindCallback(self, self.DoWhenBackToWorld))
end

local function RemoveListener(self)
    EventManager:GetInstance():RemoveListener(EventId.OnEnterWorld, BindCallback(self, self.DoWhenBackToWorld))
end

local function AddMarchIndex(self, pointId, startPt, backHome)
    if self.allMarches[pointId] == nil then
        local data = ActDispatchTaskFakeMarchData.New()
        self.allMarches[pointId] = data
        --local startPt = LuaEntry.Player:GetMainWorldPos()
        local endPt = pointId
        data:SetStartAndEndIndex(pointId, startPt, endPt, backHome)
    end
    self:AddTimer()
    self:CheckAndRefreshMarches()
end

local function RemoveMarchIndex(self, pointId)
    if self.allMarches[pointId] ~= nil then
        self.allMarches[pointId]:Remove()
    end
    self.allMarches[pointId] = nil
    if table.count(self.allMarches) == 0 then
        self:RemoveTimer()
    end
end

local function AddTimer(self)
    if self.timer == nil then
        self.timer = TimerManager:GetInstance():GetTimer(1, self.timer_action , self, false,false,false)
        self.timer:Start()
    end
end

local function RemoveTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function CheckAndRefreshMarches(self)
    local removeList = {}
    table.walk(self.allMarches, function (k, v)
        if v:NeedRemove() then
            table.insert(removeList, k)
        else
            local now = UITimeManager:GetInstance():GetServerTime()
            v:UpdateState(now)
        end
    end)

    table.walk(removeList, function (_, v)
        self:RemoveMarchIndex(v)
    end)

    if self.rebuildFlag == true and CS.SceneManager:IsInWorld() then
        if table.count(self.allMarches) == 0 then
            self.rebuildFlag = false
        else
            table.walk(self.allMarches, function (_, v)
                local pointInfo = CS.SceneManager.World:GetPointInfo(v.endIndex)
                if pointInfo ~= nil then
                    v:DoWhenBackToWorld()
                    self.rebuildFlag = false
                end
            end)
        end
    end
end

local function StartMarch(self, uid)
    self:AddMarchIndex(uid)
    self.allMarches[uid]:StartMarch()
end

local function RemoveAllDisappearEvent(self)
    self:CheckAndRefreshMarches()
end

--local function IsEventDoing(self, pointId)
--    if self.allMarches[pointId] ~= nil then
--        return self.allMarches[pointId]:IsEventDoing()
--    end
--    return false
--end

---派遣假行军只有过去和回来的，其他不需要
--local function NeedRemove(self, index)
--    if not CS.SceneManager:IsInWorld() then
--        return false
--    end
--    local info = CS.SceneManager.World:GetPointInfo(index)
--    if info ~= nil and info.PointType == WorldPointType.HERO_DISPATCH then
--        return false
--    end
--
--    -- todo:如果没找到这个点（在视野外），在个人任务列表中尝试查找
--    local taskInfo = DataCenter.ActDispatchTaskDataManager:GetSingleTaskByPointId(index)
--    if info ~= nil and taskInfo ~= nil then
--        return false
--    end
--
--    return true
--end

local function DoWhenBackToWorld(self)
    self.rebuildFlag = true
end

ActDispatchTaskFakeMarchManager.__init = __init
ActDispatchTaskFakeMarchManager.__delete = __delete
ActDispatchTaskFakeMarchManager.AddMarchIndex = AddMarchIndex
ActDispatchTaskFakeMarchManager.RemoveMarchIndex = RemoveMarchIndex
ActDispatchTaskFakeMarchManager.AddTimer = AddTimer
ActDispatchTaskFakeMarchManager.RemoveTimer = RemoveTimer
ActDispatchTaskFakeMarchManager.CheckAndRefreshMarches = CheckAndRefreshMarches
ActDispatchTaskFakeMarchManager.RemoveAllDisappearEvent = RemoveAllDisappearEvent
ActDispatchTaskFakeMarchManager.StartMarch = StartMarch
--ActDispatchTaskFakeMarchManager.IsEventDoing = IsEventDoing
--ActDispatchTaskFakeMarchManager.NeedRemove = NeedRemove
ActDispatchTaskFakeMarchManager.DoWhenBackToWorld = DoWhenBackToWorld
ActDispatchTaskFakeMarchManager.AddListener = AddListener
ActDispatchTaskFakeMarchManager.RemoveListener = RemoveListener

return ActDispatchTaskFakeMarchManager