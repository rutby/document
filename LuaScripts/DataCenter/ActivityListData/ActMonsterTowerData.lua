---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl
--- DateTime: 
---
local ActMonsterTowerData = BaseClass("ActMonsterTowerData")
local ActMonsterTowerInfo = require "DataCenter.ActivityListData.ActMonsterTowerInfo"
local ChallengeBossEffect = require "DataCenter.ActivityListData.ChallengeBossEffect"
local ResourceManager = CS.GameEntry.Resource
local function __init(self)
    self.list = {}
    self.index = {}
    self.templateDict = {}
    LocalController:instance():visitTable(TableName.ActivityMonster, function(index, line)
        table.insert(self.index,index)
    end)
    table.sort(self.index, function(a ,b)
       return a < b
    end)
    if self.templateDict and #self.templateDict <= 0 then
        for i = 1, #self.index do
            local templateData = LocalController:instance():getLine(TableName.ActivityMonster,tonumber(self.index[i]))
            local tem = {
                difficulty_des = templateData:getValue("difficulty_des"),
                description = templateData:getValue("description"),
                monster_des = templateData:getValue("monster_des"),
                help_time = templateData:getValue("help_time"),
                call_consume = templateData:getValue("call_consume")}
            table.insert(self.templateDict,tem)
        end
    end
    self.bossInfo = nil
    self.btnRedList = {}
    self.helpList = {}
    self.allEffect = nil
	self.isShowHelpRedDot = true
end

local function GetActivityMonsterTemplate(self,id)
    local intId = tonumber(id)
    return LocalController:instance():getLine(TableName.ActivityMonster,intId)
end

local function GetTableValue(self,id,name)
    return GetTableData(TableName.ActivityMonster,id, name)
end

local function __delete(self)
    self.list = nil
end

local function SetActivityId(self,id)
    self.list[tonumber(id)] = {}
end

--初始化活动信息
local function ParseActData(self,message)
    if message ==nil then
        return
    end
    if self.list[message["activityId"]] then
        local info = ActMonsterTowerInfo.New()
        if message["challengeInfo"] then
            info:ParseChallengeInfo(message["challengeInfo"])
        end
        --当前已有召唤的boss才有该信息
        if message["challengeBoss"] then
            info:ParseChallengeBoss(message["challengeBoss"])
        end
        if message["difficultyRewardArr"] then
            info:ParseDiffRewardArr(message["difficultyRewardArr"])
        end
        if message["levelReward"] then
            info:ParseCurReward(message["levelReward"])
        end
        info:ParseOther(message)
        self.list[message["activityId"]] = info
    end
    EventManager:GetInstance():Broadcast(EventId.ActMonTowerGetInfo)
end

--根据活动ID获取活动信息
local function GetInfoByActId(self,activityId)
    if self.list[activityId] then
        return self.list[activityId]
    end
    return nil
end

local function GetInfoActAll(self)
    return self.list
end

local function GetTemplate(self)
    return self.templateDict or nil
end

local function GetTemplateByIndex(self,index)
    if self.templateDict and self.templateDict[index] then
        return self.templateDict[index]
    end
    return nil
end

--选择难度返回
local function ChooseDiffHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message["challengeInfo"] then
            data:ParseChallengeInfo(message["challengeInfo"])
        end
        if message["levelReward"] then
            data:ParseCurReward(message["levelReward"])
        end
        data:ParseOther(message)
    end
    EventManager:GetInstance():Broadcast(EventId.ActMonTowerChoiceDiff)
end

--召唤boss返回
local function CallBossHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message["challengeBoss"] then
            data:ParseChallengeBoss(message["challengeBoss"])
            self.bossInfo = message["challengeBoss"]
            GoToUtil.CloseAllWindows()
            --local pos = SceneUtils.TileIndexToWorld(message["challengeBoss"]["pointId"],ForceChangeScene.World)
            --GoToUtil.GotoWorldPos(pos,nil,nil,self:ShowEffect(pos,message["challengeBoss"]["pointId"]))
            GoToUtil.MoveToWorldPointAndOpen(message["challengeBoss"]["pointId"])
        end
    end
end

local function ShowEffect(self,pos,pointId)
    local request = ResourceManager:InstantiateAsync(UIAssets.ChallengeBossEffect)
    local par = {}
    par.request = request
    request:completed('+', function()
        if request.isError then
            return
        end
        if request.gameObject == nil then
            return
        end
        request.gameObject:SetActive(false)
        request.gameObject.name = "challengeBoss_"..pointId
        request.gameObject.transform:SetParent(CS.SceneManager.World.DynamicObjNode)
        request.gameObject.transform.position = Vector3.New(pos.x, 5, pos.z)

        local effect = ChallengeBossEffect.New()
        effect:OnCreate(request)
        effect:ReInit(function() self:RemoveEffect() end)
        par.script = effect
        self.allEffect = par
    end)
end

local function RemoveEffect(self)
    if self.allEffect~=nil then
        local request = self.allEffect.request
        self.allEffect.script:OnDestroy()
        request:Destroy()
    end
    self.allEffect = nil
end

local function ClearBossInfo(self)
    self.bossInfo = nil
end

--请求帮助打boss返回
local function CallBossHelpHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message["challengeInfo"] then
            data:ParseChallengeInfo(message["challengeInfo"])
            data.challengeBoss.callHelp = 1
        end
    end
    GoToUtil.CloseAllWindows()
    local allianceRoomId = ChatInterface.getRoomMgr():GetAllianceRoomId()
    local roomData = ChatInterface.getRoomData(allianceRoomId)
    if (roomData ~= nil) then
        local param = {}
        param["roomId"] = allianceRoomId
        GoToUtil.GotoOpenView(UIWindowNames.UIChatNew, {anim = false},param)
    end
    --EventManager:GetInstance():Broadcast(EventId.ActGolloesCardRefresh)
end

--盟友挑战信息
local function GetMemberInfoHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then 
        data:ParseMemberInfo(message)
    end
    EventManager:GetInstance():Broadcast(EventId.ActMonTowerGetRank)
end

--盟友请求帮助推送
local function PushCallHelpHandel(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message then
            if self.helpList then
                self.helpList[message["activityId"]] = true
            else
                self.helpList = {}
                self.helpList[message["activityId"]] = true
            end
            data:RefreshHelp(message)
            self.isShowHelpRedDot = true
            EventManager:GetInstance():Broadcast(EventId.ActMonTowerCallHelp)
            EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
        end
    end
end

local function GetHelpLisByActId(self,id)
    if self.helpList and self.helpList[id] then
        return self.helpList[id]
    end
    return nil
end

local function SetHelpLisByActId(self,id)
    self.helpList[id] = false
	self.isShowHelpRedDot = false
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function  GetIsShowHelpRedDot(self)
	return self.isShowHelpRedDot or false
end

--获取通关等级对应的奖励列表
local function GetActRewardInfoHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message then
           data:RefreshReward(message["levelRewardArr"])
        end
        EventManager:GetInstance():Broadcast(EventId.ActMonTowerGetReward)
    end
end

--获取联盟挑战任务信息
local function GetActTaskInfoHandle(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message then
            data:RefreshTask(message["taskArr"])
        end
        EventManager:GetInstance():Broadcast(EventId.ActMonTowerGetTask)
    end
end

--联盟任务领取奖励
local function GetTaskRewardHandle(self,message)
    DataCenter.RewardManager:ShowCommonReward(message)
    if message["reward"] ~= nil then
        for k,v in pairs(message["reward"]) do
            DataCenter.RewardManager:AddOneReward(v)
        end
    end
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        data:UpdateTask(message)
        EventManager:GetInstance():Broadcast(EventId.ActMonTowerGetTask)
    end
end

--挑战boss被击杀推送
local function PushBossKilledHandel(self,message)
    local data = self:GetInfoByActId(message["activityId"])
    if data and next(data) then
        if message["curLevel"] < data.maxLevel then
            self.btnRedList[message["activityId"]] = true
        else
            self.btnRedList[message["activityId"]] = false
        end
        EventManager:GetInstance():Broadcast(EventId.ActMonTowerBossKilled,message["curLevel"])
        EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
    end
end

local function GetBtnRedByActId(self,id)
    if self.btnRedList[id] then
        return self.btnRedList[id]
    end
    return false
end

local function SetBtnRedByActId(self,id)
    self.btnRedList[id] = false
    EventManager:GetInstance():Broadcast(EventId.RefreshActivityRedDot)
end

local function GetActRed(self,id)
    local retRed = 0
    local data = self:GetInfoByActId(id)
    if data and next(data) then
        retRed = data:GetActRed()
    end
    return retRed
end

ActMonsterTowerData.__init = __init
ActMonsterTowerData.__delete = __delete
ActMonsterTowerData.SetActivityId =SetActivityId
ActMonsterTowerData.ParseActData =ParseActData
ActMonsterTowerData.GetInfoByActId =GetInfoByActId
ActMonsterTowerData.GetInfoActAll = GetInfoActAll
ActMonsterTowerData.GetTemplate = GetTemplate
ActMonsterTowerData.GetTemplateByIndex = GetTemplateByIndex
ActMonsterTowerData.ChooseDiffHandle = ChooseDiffHandle
ActMonsterTowerData.CallBossHandle = CallBossHandle
ActMonsterTowerData.ShowEffect = ShowEffect
ActMonsterTowerData.RemoveEffect = RemoveEffect
ActMonsterTowerData.ClearBossInfo = ClearBossInfo
ActMonsterTowerData.CallBossHelpHandle = CallBossHelpHandle
ActMonsterTowerData.GetMemberInfoHandle = GetMemberInfoHandle
ActMonsterTowerData.PushCallHelpHandel = PushCallHelpHandel
ActMonsterTowerData.GetHelpLisByActId = GetHelpLisByActId
ActMonsterTowerData.SetHelpLisByActId = SetHelpLisByActId
ActMonsterTowerData.GetActRewardInfoHandle = GetActRewardInfoHandle
ActMonsterTowerData.GetActTaskInfoHandle = GetActTaskInfoHandle
ActMonsterTowerData.GetTaskRewardHandle = GetTaskRewardHandle
ActMonsterTowerData.PushBossKilledHandel = PushBossKilledHandel
ActMonsterTowerData.GetBtnRedByActId = GetBtnRedByActId
ActMonsterTowerData.SetBtnRedByActId = SetBtnRedByActId
ActMonsterTowerData.GetActRed = GetActRed
ActMonsterTowerData.GetActivityMonsterTemplate = GetActivityMonsterTemplate
ActMonsterTowerData.GetTableValue = GetTableValue
ActMonsterTowerData.GetIsShowHelpRedDot = GetIsShowHelpRedDot
return ActMonsterTowerData