---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zzl.
--- DateTime: 
---
local ActBattlePassInfo = BaseClass("ActBattlePassInfo")

local function __init(self)
    self.battlePass = {}
    self.battlePass.exp = 0        --当前经验
    self.battlePass.level = 0      --当前等级
    self.battlePass.unlock = 0     --是否解锁付费   0未解锁 1解锁

    self.stateInfo = {}

    self.taskArr = {}
    
    self.extraReward = {}  --额外奖励
    self.costType    = 0   --购买等级消耗类型 1 钻石
    self.costValue   = 0   --购买等级消耗钻石数量
    self.extraExp    = 0   --每领一次额外奖励消耗的经验
    self.activityId  = 0   --活动ID
    self.exchangeId  = ""  --礼包ID
    self.lastResetTime = 0 --上次重置每日任务时间，用来判断跨天
end

local function __delete(self)

end

local function ParseBattlePass(self, message)
    if message==nil then
        return
    end
    if message["exp"]~=nil then
        self.battlePass.exp = message["exp"]
    end
    if message["level"]~=nil then
        self.battlePass.level = message["level"]
    end
    if message["unlock"] then
        self.battlePass.unlock = message["unlock"]
    end
end

local function ParseStateInfo(self, message)
    if message==nil then
        return
    end
    self.stateInfo = {}
    for i = 1 ,#message do
        local param = {}
        param.level = message[i]["level"]         --阶段等级
        param.normalState = message[i]["normalState"]              --当前阶段普通奖励是否领过 0未领 1已领
        param.specialState = message[i]["specialState"]               --当前阶段付费奖励是否领过  0未领 1已领
        param.specialReward = DataCenter.RewardManager:ReturnRewardParamForView(message[i]["specialReward"])         --付费通用奖励
        param.normalReward = DataCenter.RewardManager:ReturnRewardParamForView(message[i]["normalReward"])           --普通通用奖励
        table.insert(self.stateInfo,param)     --常驻任务
    end
end

local function ParseTaskArr(self,message)
    if message==nil then
        return
    end
    self.taskArr[1] = {}
    self.taskArr[2] = {}
    for i = 1 ,#message do
        local param = {}
        param.taskId = message[i]["taskId"]         --任务ID
        param.type = message[i]["type"]             --1每日任务  2常驻任务
        param.num = message[i]["num"]               --任务进度
        param.startTime = message[i]["startTime"]   --任务开放时间
        param.state = message[i]["state"]           --任务状态 0未完成 1完成  2 已领过免费经验  3 已领过付费经验
        param.exp = message[i]["exp"]               --完成任务给的经验
        param.payExp = message[i]["payExp"]         --付费玩家可以领第二次经验
        param.reward =  DataCenter.RewardManager:ReturnRewardParamForMessage(message[i]["reward"] )
        param.extraReward = DataCenter.RewardManager:ReturnRewardParamForMessage(message[i]["extraReward"] )
        
        if param.type == 1 then                 
            table.insert(self.taskArr[1],param)     --每日任务
        else
            table.insert(self.taskArr[2],param)     --常驻任务
        end
    end

    for i = 1 ,2 do
        self:TaskSortHandle(i)
    end
end

--任务排序
local function TaskSortHandle(self,index)
    local list1 = {}    --已完成的任务+解锁付费还能再次领取的任务
    local list2 = {}    --未完成的任务
    local list3 = {}    --所有奖励都领取完的任务
    local list4 = {}    --已领取免费奖励但是没解锁付费的任务
    for i = #self.taskArr[index] ,1,-1 do
        if self.taskArr[index][i].state == 1 then       --已经完成的任务
            table.insert(list1,self.taskArr[index][i])
        elseif self.taskArr[index][i].state == 2 then   --已经领过免费奖励的任务
            if self.battlePass.unlock == 1 then     --如果解锁了付费,还能再领一次奖励
                if self.taskArr[index][i].payExp == 0 then
                    table.insert(list3,self.taskArr[index][i])
                else
                    table.insert(list1,self.taskArr[index][i])
                end
            else                                        --没付费情况下 放在前往后面
                --如果没解锁付费 就当作能再次领取奖励
                table.insert(list4,self.taskArr[index][i])
            end
        elseif self.taskArr[index][i].state == 0 then
            --检查下任务是否解锁
            if self.taskArr[index][i].startTime > UITimeManager:GetInstance():GetServerTime() then  --没解锁
                table.insert(list2,self.taskArr[index][i])
            else
                table.insert(list2,1,self.taskArr[index][i])
            end
        elseif self.taskArr[index][i].state == 3 then
            table.insert(list3,self.taskArr[index][i])
        end
    end
    self.taskArr[index] = {}
    
    list1 = self:SortTask(list1)
    list2 = self:SortTask(list2)
    list3 = self:SortTask(list3)
    list4 = self:SortTask(list4)

    for i = 1 ,#list2 do
        table.insert(list1,list2[i])
    end
    for i = 1 ,#list4 do
        table.insert(list1,list4[i])
    end
    for i = 1 ,#list3 do
        table.insert(list1,list3[i])
    end
    self.taskArr[index] = list1
end

local function SortTask(self,list)
    table.sort(list,function(a,b)
        local orderA = GetTableData(DataCenter.QuestTemplateManager:GetTableName(), a.taskId, "order")
        local orderB = GetTableData(DataCenter.QuestTemplateManager:GetTableName(), b.taskId, "order")
        return orderB < orderA
    end)
    return list
end

local function ParseOther(self,message)
    if message["extraReward"] then
        self.extraReward = DataCenter.RewardManager:ReturnRewardParamForMessage(message["extraReward"])
    end
    if message["costType"]~=nil then
        self.costType = message["costType"]
    end
    if message["costValue"] then
        self.costValue = message["costValue"]
    end
    if message["extraExp"] then
        self.extraExp = message["extraExp"]
    end
    if message["exchangeId"] then
        self.exchangeId = message["exchangeId"]
    end
    if message["activityId"] then
        self.activityId = message["activityId"]
    end
    if message["lastResetTime"] then
        self.lastResetTime = Mathf.Floor(message["lastResetTime"]/1000)
    end
end

--刷新任务
local function RefreshTaskState(self,message,taskArr)
    if message then
        for i = 1 ,#self.taskArr do
            for k = 1 ,#self.taskArr[i]  do
                if self.taskArr[i][k].taskId == message.taskId then
                    self.taskArr[i][k].state = message.state
                    --self:TaskSortHandle(i)
                    break
                end
            end
        end
    else
        if taskArr then
            for i = 1 ,#taskArr do
                for k = 1 ,#self.taskArr[1] do
                    if taskArr[i].taskId == self.taskArr[1][k].taskId then
                        self.taskArr[1][k].num = taskArr[i].num
                        self.taskArr[1][k].startTime = taskArr[i].startTime
                        self.taskArr[1][k].state = taskArr[i].state
                    end
                end
                for k = 1 ,#self.taskArr[2] do
                    if taskArr[i].taskId == self.taskArr[2][k].taskId then
                        self.taskArr[2][k].num = taskArr[i].num
                        self.taskArr[2][k].startTime = taskArr[i].startTime
                        self.taskArr[2][k].state = taskArr[i].state
                    end
                end
            end
            for i = 1 ,2 do
                self:TaskSortHandle(i)
            end
        end
    end
end

--刷新奖励状态
local function RefreshStageState(self,message)
    for i = 1 ,#self.stateInfo do
        if self.stateInfo[i].level == message.level then
            if message.type == 0 then
                self.stateInfo[i].normalState = 1
            elseif message.type == 1 then
                self.stateInfo[i].specialState = 1
            end
            break
        end
    end
end

--获取礼包ID
local function GetExchangeId(self)
    return self.exchangeId
end

--获取红点
local function GetRedNum(self,type)
    local num = 0
    --阶段奖励
    for i = 1 ,#self.stateInfo do
        if self.stateInfo[i].level <= self.battlePass.level then
            --免费奖励
            if self.stateInfo[i].normalState == 0 then
                num = num + 1
            end
            --付费奖励
            if self.battlePass.unlock == 1 and self.stateInfo[i].specialState == 0 then
                num = num + 1
            end
        end
    end
    --额外奖励
    --检查是否满级
    local nextTemplate = DataCenter.ActBattlePassTemplateManager:GetTemplateById(self.activityId,self.battlePass.level+1)
    if nextTemplate == nil then
        num = num + Mathf.Floor(self.battlePass.exp/self.extraExp)
    end
    if type == 1 then
        return num
    elseif type == 2 then
        num = 0
    end
    --任务奖励
    for k = 1 ,#self.taskArr[1] do
        if self.taskArr[1][k].state == 1 then       --已完成未领奖任务
            num = num + 1
            --检查是否可以领二次任务
            if self.battlePass.unlock == 1 then
                --检查额外经验是否存在
                if self.taskArr[1][k].payExp ~= 0 then
                    num = num + 1
                end
            end
        elseif self.taskArr[1][k].state == 2 then  --领过一次奖任务
            if self.battlePass.unlock == 1 then
                if self.taskArr[1][k].payExp ~= 0 then
                    num = num + 1
                end
            end
        end
    end
    if type == 2 then
        return num
    elseif type == 3 then
        num = 0
    end
    for k = 1 ,#self.taskArr[2] do
        if self.taskArr[2][k].state == 1 then       --已完成未领奖任务
            num = num + 1
            --检查是否可以领二次任务
            if self.battlePass.unlock == 1 then
                if self.taskArr[2][k].payExp ~= 0 then
                    num = num + 1
                end
            end
        elseif self.taskArr[2][k].state == 2 then  --领过一次奖任务
            if self.battlePass.unlock == 1 then
                if self.taskArr[2][k].payExp ~= 0 then
                    num = num + 1
                end
            end
        end
    end
    if type == 3 then
        return num
    end
    return num
end

--检查当前可领取奖励索引
local function CheckCurGetReward(self)
    local normalState = {}
    local specialState = {}
    for i = 1 ,#self.stateInfo do
        if self.stateInfo[i].level <= self.battlePass.level then
            if self.stateInfo[i].normalState == 0 then
               table.insert(normalState,i)
            end
            if self.battlePass.unlock == 1 then
                if self.stateInfo[i].specialState == 0 then
                    table.insert(specialState,i)
                end
            end
        end
    end
    local index = self.battlePass.level
    if next(normalState) then
        index = normalState[1]
    end
    if next(specialState) then
        if index > specialState[1] then
            index = specialState[1]
        end
    end
    return index
end

--获取等级阶段奖励
--isValuable  是否只需要付费奖励 Pop弹窗用
local function CheckLvGetReward(self,minLv,lv,isValuable)
    local rewardList = {}
    local free = {}
    local valuable = {}
    if isValuable then
        lv = #self.stateInfo
    end
    for i = minLv ,#self.stateInfo do
        if self.stateInfo[i].level <= lv then
            if self.stateInfo[i].normalReward[1].rewardType ~= RewardType.GOODS then
                self.stateInfo[i].normalReward[1].itemId = self.stateInfo[i].normalReward[1].rewardType
            end
            if self.stateInfo[i].specialReward[1].rewardType ~= RewardType.GOODS then
                self.stateInfo[i].specialReward[1].itemId = self.stateInfo[i].specialReward[1].rewardType
            end
            if self.stateInfo[i].specialReward[2].rewardType ~= RewardType.GOODS and self.stateInfo[i].specialReward[2].rewardType ~= RewardType.HERO then
                self.stateInfo[i].specialReward[2].itemId = self.stateInfo[i].specialReward[2].rewardType
            end
            table.insert(free, self.stateInfo[i].normalReward[1])
            table.insert(valuable, self.stateInfo[i].specialReward[1])
            table.insert(valuable, self.stateInfo[i].specialReward[2])
        end
    end
    local temp = {}
    for i = 1 ,#free do
        if temp[free[i].itemId] then
            temp[free[i].itemId].count = temp[free[i].itemId].count + free[i].count
        else
            temp[free[i].itemId] = {}
            if free[i].rewardType == RewardType.GOODS then
                local goods = DataCenter.ItemTemplateManager:GetItemTemplate(free[i].itemId)
                if goods.type == GOODS_TYPE.GOODS_TYPE_99 then
                    temp[free[i].itemId].color = ItemColor.ORANGE
                    temp[free[i].itemId].order = 1
                elseif goods.type == GOODS_TYPE.GOODS_TYPE_62 then
                    temp[free[i].itemId].color = ItemColor.ORANGE
                    temp[free[i].itemId].order = 2
                elseif tonumber(free[i].itemId) == 230007 then
                    temp[free[i].itemId].color = ItemColor.ORANGE
                    temp[free[i].itemId].order = 3
                else
                    temp[free[i].itemId].color = goods.color
                    temp[free[i].itemId].order = goods.order_num
                end
            elseif free[i].rewardType == RewardType.GOLD then
                temp[free[i].itemId].color = ItemColor.PURPLE
                temp[free[i].itemId].order = 1
            elseif free[i].rewardType == RewardType.EXP then
                temp[free[i].itemId].color = ItemColor.GREEN
                temp[free[i].itemId].order = 1
            elseif valuable[i].rewardType == RewardType.HERO then
                temp[valuable[i].itemId].color = ItemColor.GOLDEN
                temp[valuable[i].itemId].order = 1
            end
            temp[free[i].itemId].count = free[i].count
            temp[free[i].itemId].rewardType = free[i].rewardType
            temp[free[i].itemId].itemId = free[i].itemId
        end
    end

    if isValuable then
        temp = {}
    end
    if self.battlePass.unlock == 1 or isValuable then
        for i = 1 ,#valuable do
            if temp[valuable[i].itemId] then
                temp[valuable[i].itemId].count = temp[valuable[i].itemId].count + valuable[i].count
            else
                temp[valuable[i].itemId] = {}
                if valuable[i].rewardType == RewardType.GOODS then
                    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(valuable[i].itemId)
                    if goods.type == GOODS_TYPE.GOODS_TYPE_99 then
                        temp[valuable[i].itemId].color = ItemColor.ORANGE  
                        temp[valuable[i].itemId].order = 1
                    elseif goods.type == GOODS_TYPE.GOODS_TYPE_62 then
                        temp[valuable[i].itemId].color = ItemColor.ORANGE
                        temp[valuable[i].itemId].order = 2
                    elseif tonumber(valuable[i].itemId) == 230007 then
                        temp[valuable[i].itemId].color = ItemColor.ORANGE
                        temp[valuable[i].itemId].order = 3
                    else
                        temp[valuable[i].itemId].color = goods.color
                        temp[valuable[i].itemId].order = goods.order_num
                    end
                elseif valuable[i].rewardType == RewardType.GOLD then
                    temp[valuable[i].itemId].color = ItemColor.PURPLE
                    temp[valuable[i].itemId].order = 1
                elseif valuable[i].rewardType == RewardType.EXP then
                    temp[valuable[i].itemId].color = ItemColor.GREEN
                    temp[valuable[i].itemId].order = 1
                elseif valuable[i].rewardType == RewardType.HERO then
                    temp[valuable[i].itemId].color = ItemColor.GOLDEN
                    temp[valuable[i].itemId].order = 1
                end
                temp[valuable[i].itemId].count = valuable[i].count
                temp[valuable[i].itemId].rewardType = valuable[i].rewardType
                temp[valuable[i].itemId].itemId = valuable[i].itemId
            end
        end
        if isValuable then
            rewardList = {}
            local hero = {}
            for i ,v in pairs(temp) do
                if v.rewardType == RewardType.GOODS then
                    local goods = DataCenter.ItemTemplateManager:GetItemTemplate(v.itemId)
                    if goods.type == GOODS_TYPE.GOODS_TYPE_99 then
                        table.insert(hero,1,v)
                    elseif goods.type == GOODS_TYPE.GOODS_TYPE_62 then
                        if #hero == 0 then
                            table.insert(hero,v)
                        else
                            table.insert(hero,2,v)
                        end
                    elseif tonumber(v.itemId) == 230007 then
                        table.insert(hero,v)
                    else
                        v.color = goods.color
                        v.order = goods.order_num
                        table.insert(rewardList,v)
                    end
                else
                    if v.rewardType == RewardType.GOLD then
                        v.color = ItemColor.PURPLE
                        v.order = 1
                        table.insert(rewardList,v)
                    elseif v.rewardType == RewardType.EXP then
                        v.color = ItemColor.GREEN
                        v.order = 2
                        table.insert(rewardList,v)
                    end
                end
            end
            for i ,v in pairs(temp) do
                if v.rewardType == RewardType.HERO then
                    v.color = ItemColor.GOLDEN
                    v.order = 1
                    table.insert(hero,1,v)
                end
            end
            self:SortItem(rewardList,true)
            for i = 1 ,#rewardList do
                table.insert(hero,rewardList[i])
            end
            return hero
        end
        for i ,v in pairs(temp) do
            table.insert(rewardList,v)
        end
        self:SortItem(rewardList)
    elseif self.battlePass.unlock == 0 then
        for i ,v in pairs(temp) do
            table.insert(rewardList,v)
        end
        self:SortItem(rewardList)
    end
    return rewardList
end

local function SortItem(self,item,isPop)
    if isPop then
        table.sort(item,function(a,b)
            if a.color > b.color then
                return true
            elseif a.color == b.color then
                if a.count > b.count then
                    return true
                elseif a.count == b.count then
                    return a.order > b.order
                end
            end
            return false
        end)
    else
        table.sort(item,function(a,b)
            if a.color > b.color then
                return true
            elseif a.color == b.color and a.order and b.order then
                if a.order < b.order then
                    return true
                elseif a.order == b.order then
                    return a.count > b.count
                end
            end
            return false
        end)
    end
end

local function GetExtraRedNum(self)
    --额外奖励
    local num = 0
    local nextTemplate = DataCenter.ActBattlePassTemplateManager:GetTemplateById(self.activityId,self.battlePass.level+1)
    if nextTemplate == nil then
        num = Mathf.Floor(self.battlePass.exp/self.extraExp)
    end
    return num
end

ActBattlePassInfo.__init = __init
ActBattlePassInfo.__delete = __delete
ActBattlePassInfo.ParseBattlePass = ParseBattlePass
ActBattlePassInfo.ParseStateInfo = ParseStateInfo
ActBattlePassInfo.ParseTaskArr = ParseTaskArr
ActBattlePassInfo.TaskSortHandle = TaskSortHandle
ActBattlePassInfo.ParseOther = ParseOther
ActBattlePassInfo.RefreshTaskState = RefreshTaskState
ActBattlePassInfo.RefreshStageState = RefreshStageState
ActBattlePassInfo.GetExchangeId = GetExchangeId
ActBattlePassInfo.GetRedNum = GetRedNum
ActBattlePassInfo.CheckCurGetReward = CheckCurGetReward
ActBattlePassInfo.CheckLvGetReward = CheckLvGetReward
ActBattlePassInfo.SortTask = SortTask
ActBattlePassInfo.SortItem = SortItem
ActBattlePassInfo.GetExtraRedNum = GetExtraRedNum

return ActBattlePassInfo